"\n"
, stdout);
 fputs(
"              Since curl 7.19.0, --eprt can be used to explicitly enable  EPRT\n"
"              again and --no-eprt is an alias for --disable-eprt.\n"
"\n"
"              Disabling  EPRT only changes the active behavior. If you want to\n"
"              switch to passive mode you need  to  not  use  -P/--ftp-port  or\n"
"              force it with --ftp-pasv.\n"
"\n"
"       --disable-epsv\n"
"              (FTP)  Tell  curl  to  disable  the use of the EPSV command when\n"
, stdout);
 fputs(
"              doing passive FTP transfers. Curl  will  normally  always  first\n"
"              attempt  to  use EPSV before PASV, but with this option, it will\n"
"              not try using EPSV.\n"
"\n"
"              Since curl 7.19.0, --epsv can be used to explicitly enable  EPRT\n"
"              again and --no-epsv is an alias for --disable-epsv.\n"
"\n"
"              Disabling EPSV only changes the passive behavior. If you want to\n"
"              switch to active mode you need to use -P/--ftp-port.\n"
"\n"
, stdout);
 fputs(
"       -D/--dump-header <file>\n"
"              Write the protocol headers to the specified file.\n"
"\n"
"              This option is handy to use when you want to store  the  headers\n"
"              that  a  HTTP  site sends to you. Cookies from the headers could\n"
"              then  be  read  in  a  second  curl  invocation  by  using   the\n"
"              -b/--cookie option! The -c/--cookie-jar option is however a bet-\n"
"              ter way to store cookies.\n"
"\n"
, stdout);
 fputs(
"              When used in FTP, the FTP server response lines  are  considered\n"
"              being \"headers\" and thus are saved there.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -e/--referer <URL>\n"
"              (HTTP) Sends the \"Referer Page\" information to the HTTP  server.\n"
"              This  can also be set with the -H/--header flag of course.  When\n"
"              used with -L/--location you can append \";auto\" to the  --referer\n"
, stdout);
 fputs(
"              URL to make curl automatically set the previous URL when it fol-\n"
"              lows a Location: header. The \";auto\" string can be  used  alone,\n"
"              even if you don't set an initial --referer.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --engine <name>\n"
"              Select the OpenSSL crypto engine to use for  cipher  operations.\n"
"              Use  --engine  list  to  print  a  list  of build-time supported\n"
, stdout);
 fputs(
"              engines. Note that not all (or  none)  of  the  engines  may  be\n"
"              available at run-time.\n"
"\n"
"       --environment\n"
"              (RISC  OS ONLY) Sets a range of environment variables, using the\n"
"              names the -w option supports, to allow easier extraction of use-\n"
"              ful information after having run curl.\n"
"\n"
"       --egd-file <file>\n"
"              (SSL)  Specify  the  path  name  to the Entropy Gathering Daemon\n"
, stdout);
 fputs(
"              socket. The socket is used to seed the  random  engine  for  SSL\n"
"              connections. See also the --random-file option.\n"
"\n"
"       -E/--cert <certificate[:password]>\n"
"              (SSL) Tells curl to use the specified certificate file when get-\n"
"              ting a file with HTTPS or FTPS. The certificate must be  in  PEM\n"
"              format.   If  the  optional password isn't specified, it will be\n"
"              queried for on the terminal. Note that  this  option  assumes  a\n"
, stdout);
 fputs(
"              \"certificate\"  file that is the private key and the private cer-\n"
"              tificate concatenated! See --cert  and  --key  to  specify  them\n"
"              independently.\n"
"\n"
"              If  curl  is  built against the NSS SSL library then this option\n"
"              tells curl the nickname of the certificate to use within the NSS\n"
"              database  defined  by  the  environment  variable SSL_DIR (or by\n"
, stdout);
 fputs(
"              default /etc/pki/nssdb). If the NSS  PEM  PKCS#11  module  (lib-\n"
"              nsspem.so) is available then PEM files may be loaded.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --cert-type <type>\n"
"              (SSL) Tells curl what certificate type the provided  certificate\n"
"              is in. PEM, DER and ENG are recognized types.  If not specified,\n"
"              PEM is assumed.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --cacert <CA certificate>\n"
"              (SSL) Tells curl to use the specified certificate file to verify\n"
"              the peer. The file may contain  multiple  CA  certificates.  The\n"
"              certificate(s)  must be in PEM format. Normally curl is built to\n"
"              use a default file for this, so this option is typically used to\n"
"              alter that default file.\n"
"\n"
, stdout);
 fputs(
"              curl  recognizes the environment variable named 'CURL_CA_BUNDLE'\n"
"              if it is set, and uses the given path as a path  to  a  CA  cert\n"
"              bundle. This option overrides that variable.\n"
"\n"
"              The  windows  version  of  curl will automatically look for a CA\n"
"              certs file named 'curl-ca-bundle.crt', either in the same direc-\n"
"              tory as curl.exe, or in the Current Working Directory, or in any\n"
"              folder along your PATH.\n"
"\n"
, stdout);
 fputs(
"              If curl is built against the NSS SSL library  then  this  option\n"
"              tells  curl the nickname of the CA certificate to use within the\n"
"              NSS database defined by the environment variable SSL_DIR (or  by\n"
"              default  /etc/pki/nssdb).   If  the NSS PEM PKCS#11 module (lib-\n"
"              nsspem.so) is available then PEM files may be loaded.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
, stdout);
 fputs(
"       --capath <CA certificate directory>\n"
"              (SSL)  Tells  curl to use the specified certificate directory to\n"
"              verify the peer. The certificates must be in PEM format, and the\n"
"              directory  must  have  been processed using the c_rehash utility\n"
"              supplied with openssl. Using --capath can  allow  curl  to  make\n"
"              SSL-connections much more efficiently than using --cacert if the\n"
"              --cacert file contains many CA certificates.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -f/--fail\n"
"              (HTTP)  Fail  silently (no output at all) on server errors. This\n"
"              is mostly done to better enable scripts etc to better deal  with\n"
"              failed  attempts.  In  normal  cases when a HTTP server fails to\n"
"              deliver a document, it  returns  an  HTML  document  stating  so\n"
"              (which  often  also describes why and more). This flag will pre-\n"
, stdout);
 fputs(
"              vent curl from outputting that and return error 22.\n"
"\n"
"              This method is not fail-safe and there are occasions where  non-\n"
"              successful  response  codes  will  slip through, especially when\n"
"              authentication is involved (response codes 401 and 407).\n"
"\n"
"       --ftp-account [data]\n"
"              (FTP) When an FTP server asks for \"account data\" after user name\n"
"              and  password has been provided, this data is sent off using the\n"
, stdout);
 fputs(
"              ACCT command. (Added in 7.13.0)\n"
"\n"
"              If this option is used twice, the second will override the  pre-\n"
"              vious use.\n"
"\n"
"       --ftp-create-dirs\n"
"              (FTP/SFTP)  When  an  FTP or SFTP URL/operation uses a path that\n"
"              doesn't currently exist on the server, the standard behavior  of\n"
"              curl is to fail. Using this option, curl will instead attempt to\n"
"              create missing directories.\n"
"\n"
"       --ftp-method [method]\n"
, stdout);
 fputs(
"              (FTP) Control what method curl should use to reach a file  on  a\n"
"              FTP(S)  server. The method argument should be one of the follow-\n"
"              ing alternatives:\n"
"\n"
"              multicwd\n"
"                     curl does a single CWD operation for each  path  part  in\n"
"                     the  given URL. For deep hierarchies this means very many\n"
"                     commands. This is how RFC1738 says  it  should  be  done.\n"
, stdout);
 fputs(
"                     This is the default but the slowest behavior.\n"
"\n"
"              nocwd  curl  does  no  CWD at all. curl will do SIZE, RETR, STOR\n"
"                     etc and give a full path to the server for all these com-\n"
"                     mands. This is the fastest behavior.\n"
"\n"
"              singlecwd\n"
"                     curl does one CWD with the full target directory and then\n"
"                     operates on the file \"normally\"  (like  in  the  multicwd\n"
, stdout);
 fputs(
"                     case).  This  is  somewhat  more standards compliant than\n"
"                     'nocwd' but without the full penalty of 'multicwd'.\n"
"       (Added in 7.15.1)\n"
"\n"
"       --ftp-pasv\n"
"              (FTP) Use passive mode for the data conection.  Passive  is  the\n"
"              internal  default behavior, but using this option can be used to\n"
"              override a previous -P/-ftp-port option. (Added in 7.11.0)\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the following  occurrences\n"
"              make  no  difference.  Undoing  an enforced passive really isn't\n"
"              doable but you must then instead enforce the  correct  -P/--ftp-\n"
"              port again.\n"
"\n"
"              Passive mode means that curl will try the EPSV command first and\n"
"              then PASV, unless --disable-epsv is used.\n"
"\n"
"       --ftp-alternative-to-user <command>\n"
, stdout);
 fputs(
"              (FTP) If authenticating with the USER and PASS  commands  fails,\n"
"              send  this  command.   When  connecting  to  Tumbleweed's Secure\n"
"              Transport server over FTPS using  a  client  certificate,  using\n"
"              \"SITE  AUTH\"  will tell the server to retrieve the username from\n"
"              the certificate. (Added in 7.15.5)\n"
"\n"
"       --ftp-skip-pasv-ip\n"
"              (FTP) Tell curl to not use the IP address the server suggests in\n"
, stdout);
 fputs(
"              its  response to curl's PASV command when curl connects the data\n"
"              connection. Instead curl will re-use  the  same  IP  address  it\n"
"              already uses for the control connection. (Added in 7.14.2)\n"
"\n"
"              This  option has no effect if PORT, EPRT or EPSV is used instead\n"
"              of PASV.\n"
"\n"
"       --ftp-ssl\n"
"              (FTP) Try to use SSL/TLS for the FTP connection.  Reverts  to  a\n"
, stdout);
 fputs(
"              non-secure  connection  if  the  server doesn't support SSL/TLS.\n"
"              See also --ftp-ssl-control and --ftp-ssl-reqd for different lev-\n"
"              els of encryption required. (Added in 7.11.0)\n"
"\n"
"       --ftp-ssl-control\n"
"              (FTP)  Require  SSL/TLS  for  the FTP login, clear for transfer.\n"
"              Allows secure authentication, but non-encrypted  data  transfers\n"
"              for  efficiency.   Fails the transfer if the server doesn't sup-\n"
, stdout);
 fputs(
"              port SSL/TLS.  (Added in 7.16.0)\n"
"\n"
"       --ftp-ssl-reqd\n"
"              (FTP) Require SSL/TLS for the FTP  connection.   Terminates  the\n"
"              connection  if  the  server  doesn't support SSL/TLS.  (Added in\n"
"              7.15.5)\n"
"\n"
"       --ftp-ssl-ccc\n"
"              (FTP) Use CCC (Clear Command Channel)  Shuts  down  the  SSL/TLS\n"
"              layer after authenticating. The rest of the control channel com-\n"
, stdout);
 fputs(
"              munication will be unencrypted. This allows NAT routers to  fol-\n"
"              low the FTP transaction. The default mode is passive. See --ftp-\n"
"              ssl-ccc-mode for other modes.  (Added in 7.16.1)\n"
"\n"
"       --ftp-ssl-ccc-mode [active/passive]\n"
"              (FTP) Use CCC (Clear Command Channel) Sets  the  CCC  mode.  The\n"
"              passive  mode  will  not initiate the shutdown, but instead wait\n"
, stdout);
 fputs(
"              for the server to do it, and will not reply to the shutdown from\n"
"              the server. The active mode initiates the shutdown and waits for\n"
"              a reply from the server.  (Added in 7.16.2)\n"
"\n"
"       -F/--form <name=content>\n"
"              (HTTP) This lets curl emulate a filled-in form in which  a  user\n"
"              has  pressed  the  submit  button. This causes curl to POST data\n"
"              using the Content-Type multipart/form-data according to RFC1867.\n"
, stdout);
 fputs(
"              This  enables  uploading of binary files etc. To force the 'con-\n"
"              tent' part to be a file, prefix the file name with an @ sign. To\n"
"              just get the content part from a file, prefix the file name with\n"
"              the symbol <. The difference between @ and  <  is  then  that  @\n"
"              makes  a  file  get attached in the post as a file upload, while\n"
"              the < makes a text field and just get the contents for that text\n"
, stdout);
 fputs(
"              field from a file.\n"
"\n"
"              Example,  to send your password file to the server, where 'pass-\n"
"              word' is the name of the form-field to which /etc/passwd will be\n"
"              the input:\n"
"\n"
"              curl -F password=@/etc/passwd www.mypasswords.com\n"
"\n"
"              To  read  the file's content from stdin instead of a file, use -\n"
"              where the file name should've been. This goes for both @  and  <\n"
"              constructs.\n"
"\n"
, stdout);
 fputs(
"              You  can  also  tell  curl  what  Content-Type  to  use by using\n"
"              'type=', in a manner similar to:\n"
"\n"
"              curl -F \"web=@index.html;type=text/html\" url.com\n"
"\n"
"              or\n"
"\n"
"              curl -F \"name=daniel;type=text/foo\" url.com\n"
"\n"
"              You can also explicitly change the name field of an file  upload\n"
"              part by setting filename=, like this:\n"
"\n"
"              curl -F \"file=@localfile;filename=nameinpost\" url.com\n"
"\n"
, stdout);
 fputs(
"              See further examples and details in the MANUAL.\n"
"\n"
"              This option can be used multiple times.\n"
"\n"
"       --form-string <name=string>\n"
"              (HTTP)  Similar  to  --form except that the value string for the\n"
"              named parameter is used literally. Leading '@' and  '<'  charac-\n"
"              ters, and the ';type=' string in the value have no special mean-\n"
"              ing. Use this in preference to --form if there's any possibility\n"
, stdout);
 fputs(
"              that  the  string  value may accidentally trigger the '@' or '<'\n"
"              features of --form.\n"
"\n"
"       -g/--globoff\n"
"              This option switches off the \"URL globbing parser\". When you set\n"
"              this  option, you can specify URLs that contain the letters {}[]\n"
"              without having them being interpreted by curl itself. Note  that\n"
"              these  letters are not normal legal URL contents but they should\n"
, stdout);
 fputs(
"              be encoded according to the URI standard.\n"
"\n"
"       -G/--get\n"
"              When used,  this  option  will  make  all  data  specified  with\n"
"              -d/--data  or  --data-binary  to  be  used in a HTTP GET request\n"
"              instead of the POST request that otherwise would  be  used.  The\n"
"              data will be appended to the URL with a '?' separator.\n"
"\n"
"              If  used  in  combination with -I, the POST data will instead be\n"
, stdout);
 fputs(
"              appended to the URL with a HEAD request.\n"
"\n"
"              If this option is used several times, the following  occurrences\n"
"              make  no  difference. This is because undoing a GET doesn't make\n"
"              sense, but you  should  then  instead  enforce  the  alternative\n"
"              method you prefer.\n"
"\n"
"       -h/--help\n"
"              Usage help.\n"
"\n"
"       -H/--header <header>\n"
"              (HTTP)  Extra  header  to  use  when getting a web page. You may\n"
, stdout);
 fputs(
"              specify any number of extra headers. Note that if you should add\n"
"              a  custom  header  that has the same name as one of the internal\n"
"              ones curl would use, your externally set  header  will  be  used\n"
"              instead of the internal one. This allows you to make even trick-\n"
"              ier stuff than curl would normally do. You  should  not  replace\n"
"              internally  set  headers  without  knowing  perfectly  well what\n"
, stdout);
 fputs(
"              you're doing. Remove an internal header by giving a  replacement\n"
"              without  content  on  the  right  side  of  the colon, as in: -H\n"
"              \"Host:\".\n"
"\n"
"              curl will make sure that each header  you  add/replace  is  sent\n"
"              with the proper end-of-line marker, you should thus not add that\n"
"              as a part of the header content: do not add newlines or carriage\n"
"              returns, they will only mess things up for you.\n"
"\n"
, stdout);
 fputs(
"              See also the -A/--user-agent and -e/--referer options.\n"
"\n"
"              This  option  can  be  used multiple times to add/replace/remove\n"
"              multiple headers.\n"
"\n"
"       --hostpubmd5 <md5>\n"
"              Pass a string  containing  32  hexadecimal  digits.  The  string\n"
"              should  be  the 128 bit MD5 checksum of the remote host's public\n"
"              key, curl will refuse the connection with the  host  unless  the\n"
, stdout);
 fputs(
"              md5sums  match.  This option is only for SCP and SFTP transfers.\n"
"              (Added in 7.17.1)\n"
"\n"
"       --ignore-content-length\n"
"              (HTTP) Ignore the Content-Length header.  This  is  particularly\n"
"              useful  for servers running Apache 1.x, which will report incor-\n"
"              rect Content-Length for files larger than 2 gigabytes.\n"
"\n"
"       -i/--include\n"
"              (HTTP) Include the HTTP-header in the  output.  The  HTTP-header\n"
, stdout);
 fputs(
"              includes  things  like  server-name, date of the document, HTTP-\n"
"              version and more...\n"
"\n"
"       --interface <name>\n"
"              Perform an operation using a specified interface. You can  enter\n"
"              interface  name,  IP address or host name. An example could look\n"
"              like:\n"
"\n"
"               curl --interface eth0:1 http://www.netscape.com/\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -I/--head\n"
, stdout);
 fputs(
"              (HTTP/FTP/FILE) Fetch the HTTP-header only! HTTP-servers feature\n"
"              the command HEAD which this uses to get nothing but  the  header\n"
"              of  a  document.  When used on a FTP or FILE file, curl displays\n"
"              the file size and last modification time only.\n"
"\n"
"       -j/--junk-session-cookies\n"
"              (HTTP) When curl is told to read cookies from a given file, this\n"
"              option  will  make  it  discard all \"session cookies\". This will\n"
, stdout);
 fputs(
"              basically have the same effect as if a new session  is  started.\n"
"              Typical  browsers  always  discard  session cookies when they're\n"
"              closed down.\n"
"\n"
"       -k/--insecure\n"
"              (SSL) This option explicitly allows curl to  perform  \"insecure\"\n"
"              SSL connections and transfers. All SSL connections are attempted\n"
"              to be made secure by using the CA certificate  bundle  installed\n"
, stdout);
 fputs(
"              by  default.  This  makes  all connections considered \"insecure\"\n"
"              fail unless -k/--insecure is used.\n"
"\n"
"              See    this    online    resource    for    further     details:\n"
"              http://curl.haxx.se/docs/sslcerts.html\n"
"\n"
"       --keepalive-time <seconds>\n"
"              This  option  sets  the  time  a connection needs to remain idle\n"
"              before sending keepalive probes and the time between  individual\n"
, stdout);
 fputs(
"              keepalive probes. It is currently effective on operating systems\n"
"              offering  the  TCP_KEEPIDLE  and  TCP_KEEPINTVL  socket  options\n"
"              (meaning  Linux, recent AIX, HP-UX and more). This option has no\n"
"              effect if --no-keepalive is used. (Added in 7.18.0)\n"
"\n"
"              If this option is used multiple times, the last occurrence  sets\n"
"              the amount.\n"
"       --key <key>\n"
, stdout);
 fputs(
"              (SSL/SSH) Private key file name. Allows you to provide your pri-\n"
"              vate key in this separate file.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --key-type <type>\n"
"              (SSL)  Private key file type. Specify which type your --key pro-\n"
"              vided private key is. DER, PEM, and ENG are  supported.  If  not\n"
"              specified, PEM is assumed.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --krb <level>\n"
"              (FTP) Enable Kerberos authentication and use. The level must  be\n"
"              entered and should be one of 'clear', 'safe', 'confidential', or\n"
"              'private'. Should you use a level that  is  not  one  of  these,\n"
"              'private' will instead be used.\n"
"\n"
"              This  option  requires  a library built with kerberos4 or GSSAPI\n"
, stdout);
 fputs(
"              (GSS-Negotiate) support. This is not very common. Use  -V/--ver-\n"
"              sion to see if your curl supports it.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -K/--config <config file>\n"
"              Specify which config file to read curl arguments from. The  con-\n"
"              fig  file  is a text file in which command line arguments can be\n"
"              written which then will be used as if they were written  on  the\n"
, stdout);
 fputs(
"              actual command line. Options and their parameters must be speci-\n"
"              fied on the same config  file  line,  separated  by  whitespace,\n"
"              colon,  the equals sign or any combination thereof (however, the\n"
"              preferred separator is the equals sign). If the parameter is  to\n"
"              contain  whitespace,  the  parameter  must  be  enclosed  within\n"
"              quotes. Within double quotes, the following escape sequences are\n"
, stdout);
 fputs(
"              available:  \\\\, \\\", \\t, \\n, \\r and \\v. A backslash preceding any\n"
"              other letter is ignored. If the first column of a config line is\n"
"              a  '#' character, the rest of the line will be treated as a com-\n"
"              ment. Only write one option per  physical  line  in  the  config\n"
"              file.\n"
"\n"
"              Specify the filename to -K/--config as '-' to make curl read the\n"
"              file from stdin.\n"
"\n"
, stdout);
 fputs(
"              Note that to be able to specify a URL in the  config  file,  you\n"
"              need  to  specify  it  using the --url option, and not by simply\n"
"              writing the URL on its own line. So, it could  look  similar  to\n"
"              this:\n"
"\n"
"              url = \"http://curl.haxx.se/docs/\"\n"
"\n"
"              Long  option  names  can  optionally be given in the config file\n"
"              without the initial double dashes.\n"
"\n"
, stdout);
 fputs(
"              When curl is invoked, it always (unless -q is used) checks for a\n"
"              default  config  file  and  uses it if found. The default config\n"
"              file is checked for in the following places in this order:\n"
"\n"
"              1) curl tries to find the \"home dir\": It first  checks  for  the\n"
"              CURL_HOME and then the HOME environment variables. Failing that,\n"
"              it uses getpwuid() on UNIX-like systems (which returns the  home\n"
, stdout);
 fputs(
"              dir  given the current user in your system). On Windows, it then\n"
"              checks for the APPDATA variable, or as a last resort the '%USER-\n"
"              PROFILE%\\Application Data'.\n"
"\n"
"              2)  On  windows, if there is no _curlrc file in the home dir, it\n"
"              checks for one in the same dir the curl executable is placed. On\n"
"              UNIX-like  systems,  it will simply try to load .curlrc from the\n"
"              determined home dir.\n"
"\n"
, stdout);
 fputs(
"              # --- Example file ---\n"
"              # this is a comment\n"
