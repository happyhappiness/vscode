<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1658_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">convert_lineends<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">Curl_easy<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">data<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">startPtr<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">size_t<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">size<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">inPtr<pos:position pos:line="4" pos:column="14"/></name></decl>, <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="17">outPtr<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* sanity check */</comment>
  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><operator pos:line="7" pos:column="6">(<pos:position pos:line="7" pos:column="7"/></operator><name pos:line="7" pos:column="7">startPtr<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">==<pos:position pos:line="7" pos:column="18"/></operator> <name pos:line="7" pos:column="19">NULL<pos:position pos:line="7" pos:column="23"/></name><operator pos:line="7" pos:column="23">)<pos:position pos:line="7" pos:column="24"/></operator> <operator pos:line="7" pos:column="25">||<pos:position pos:line="7" pos:column="27"/></operator> <operator pos:line="7" pos:column="28">(<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="29">size<pos:position pos:line="7" pos:column="33"/></name> <operator pos:line="7" pos:column="34">&lt;<pos:position pos:line="7" pos:column="38"/></operator> <literal type="number" pos:line="7" pos:column="36">1<pos:position pos:line="7" pos:column="37"/></literal><operator pos:line="7" pos:column="37">)<pos:position pos:line="7" pos:column="38"/></operator></expr>)<pos:position pos:line="7" pos:column="39"/></condition><then pos:line="7" pos:column="39"> <block pos:line="7" pos:column="40">{
    <return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">size<pos:position pos:line="8" pos:column="16"/></name></expr>;<pos:position pos:line="8" pos:column="17"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name><name pos:line="11" pos:column="6">data<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">state<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">prev_block_had_trailing_cr<pos:position pos:line="11" pos:column="44"/></name></name></expr>)<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45"> <block pos:line="11" pos:column="46">{
    <comment type="block" pos:line="12" pos:column="5">/* The previous block of incoming data
       had a trailing CR, which was turned into a LF. */</comment>
    <if pos:line="14" pos:column="5">if<condition pos:line="14" pos:column="7">(<expr><operator pos:line="14" pos:column="8">*<pos:position pos:line="14" pos:column="9"/></operator><name pos:line="14" pos:column="9">startPtr<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">==<pos:position pos:line="14" pos:column="20"/></operator> <literal type="char" pos:line="14" pos:column="21">'\n'<pos:position pos:line="14" pos:column="25"/></literal></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26"> <block pos:line="14" pos:column="27">{
      <comment type="block" pos:line="15" pos:column="7">/* This block of incoming data starts with the
         previous block's LF so get rid of it */</comment>
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">memmove<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name pos:line="17" pos:column="15">startPtr<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="25">startPtr<pos:position pos:line="17" pos:column="33"/></name> <operator pos:line="17" pos:column="34">+<pos:position pos:line="17" pos:column="35"/></operator> <literal type="number" pos:line="17" pos:column="36">1<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">size<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">-<pos:position pos:line="17" pos:column="44"/></operator><literal type="number" pos:line="17" pos:column="44">1<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><name pos:line="18" pos:column="7">size<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">--<pos:position pos:line="18" pos:column="13"/></operator></expr>;<pos:position pos:line="18" pos:column="14"/></expr_stmt>
      <comment type="block" pos:line="19" pos:column="7">/* and it wasn't a bare CR but a CRLF conversion instead */</comment>
      <expr_stmt><expr><name><name pos:line="20" pos:column="7">data<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">-&gt;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="13">state<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">.<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">crlf_conversions<pos:position pos:line="20" pos:column="35"/></name></name><operator pos:line="20" pos:column="35">++<pos:position pos:line="20" pos:column="37"/></operator></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">data<pos:position pos:line="22" pos:column="9"/></name><operator pos:line="22" pos:column="9">-&gt;<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="11">state<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">.<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">prev_block_had_trailing_cr<pos:position pos:line="22" pos:column="43"/></name></name> <operator pos:line="22" pos:column="44">=<pos:position pos:line="22" pos:column="45"/></operator> <name pos:line="22" pos:column="46">FALSE<pos:position pos:line="22" pos:column="51"/></name></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt> <comment type="block" pos:line="22" pos:column="53">/* reset the flag */</comment>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="25" pos:column="3">/* find 1st CR, if any */</comment>
  <expr_stmt><expr><name pos:line="26" pos:column="3">inPtr<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <name pos:line="26" pos:column="11">outPtr<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <call><name pos:line="26" pos:column="20">memchr<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">startPtr<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="37">'\r'<pos:position pos:line="26" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">size<pos:position pos:line="26" pos:column="47"/></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name pos:line="27" pos:column="6">inPtr<pos:position pos:line="27" pos:column="11"/></name></expr>)<pos:position pos:line="27" pos:column="12"/></condition><then pos:line="27" pos:column="12"> <block pos:line="27" pos:column="13">{
    <comment type="block" pos:line="28" pos:column="5">/* at least one CR, now look for CRLF */</comment>
    <while pos:line="29" pos:column="5">while<condition pos:line="29" pos:column="10">(<expr><name pos:line="29" pos:column="11">inPtr<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">&lt;<pos:position pos:line="29" pos:column="21"/></operator> <operator pos:line="29" pos:column="19">(<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">startPtr<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">+<pos:position pos:line="29" pos:column="30"/></operator> <name pos:line="29" pos:column="31">size<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">-<pos:position pos:line="29" pos:column="36"/></operator><literal type="number" pos:line="29" pos:column="36">1<pos:position pos:line="29" pos:column="37"/></literal><operator pos:line="29" pos:column="37">)<pos:position pos:line="29" pos:column="38"/></operator></expr>)<pos:position pos:line="29" pos:column="39"/></condition> <block pos:line="29" pos:column="40">{
      <comment type="block" pos:line="30" pos:column="7">/* note that it's size-1, so we'll never look past the last byte */</comment>
      <if pos:line="31" pos:column="7">if<condition pos:line="31" pos:column="9">(<expr><call><name pos:line="31" pos:column="10">memcmp<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">inPtr<pos:position pos:line="31" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="24">"\r\n"<pos:position pos:line="31" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="32">2<pos:position pos:line="31" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call> <operator pos:line="31" pos:column="35">==<pos:position pos:line="31" pos:column="37"/></operator> <literal type="number" pos:line="31" pos:column="38">0<pos:position pos:line="31" pos:column="39"/></literal></expr>)<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <block pos:line="31" pos:column="41">{
        <comment type="block" pos:line="32" pos:column="9">/* CRLF found, bump past the CR and copy the NL */</comment>
        <expr_stmt><expr><name pos:line="33" pos:column="9">inPtr<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">++<pos:position pos:line="33" pos:column="16"/></operator></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="34" pos:column="9">*<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">outPtr<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <operator pos:line="34" pos:column="19">*<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">inPtr<pos:position pos:line="34" pos:column="25"/></name></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
        <comment type="block" pos:line="35" pos:column="9">/* keep track of how many CRLFs we converted */</comment>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">data<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">-&gt;<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="15">state<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">.<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">crlf_conversions<pos:position pos:line="36" pos:column="37"/></name></name><operator pos:line="36" pos:column="37">++<pos:position pos:line="36" pos:column="39"/></operator></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
      }<pos:position pos:line="37" pos:column="8"/></block></then>
      <else pos:line="38" pos:column="7">else <block pos:line="38" pos:column="12">{
        <if pos:line="39" pos:column="9">if<condition pos:line="39" pos:column="11">(<expr><operator pos:line="39" pos:column="12">*<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="13">inPtr<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">==<pos:position pos:line="39" pos:column="21"/></operator> <literal type="char" pos:line="39" pos:column="22">'\r'<pos:position pos:line="39" pos:column="26"/></literal></expr>)<pos:position pos:line="39" pos:column="27"/></condition><then pos:line="39" pos:column="27"> <block pos:line="39" pos:column="28">{
          <comment type="block" pos:line="40" pos:column="11">/* lone CR, move LF instead */</comment>
          <expr_stmt><expr><operator pos:line="41" pos:column="11">*<pos:position pos:line="41" pos:column="12"/></operator><name pos:line="41" pos:column="12">outPtr<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">=<pos:position pos:line="41" pos:column="20"/></operator> <literal type="char" pos:line="41" pos:column="21">'\n'<pos:position pos:line="41" pos:column="25"/></literal></expr>;<pos:position pos:line="41" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></then>
        <else pos:line="43" pos:column="9">else <block pos:line="43" pos:column="14">{
          <comment type="block" pos:line="44" pos:column="11">/* not a CRLF nor a CR, just copy whatever it is */</comment>
          <expr_stmt><expr><operator pos:line="45" pos:column="11">*<pos:position pos:line="45" pos:column="12"/></operator><name pos:line="45" pos:column="12">outPtr<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <operator pos:line="45" pos:column="21">*<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">inPtr<pos:position pos:line="45" pos:column="27"/></name></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></else></if>
      }<pos:position pos:line="47" pos:column="8"/></block></else></if>
      <expr_stmt><expr><name pos:line="48" pos:column="7">outPtr<pos:position pos:line="48" pos:column="13"/></name><operator pos:line="48" pos:column="13">++<pos:position pos:line="48" pos:column="15"/></operator></expr>;<pos:position pos:line="48" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="49" pos:column="7">inPtr<pos:position pos:line="49" pos:column="12"/></name><operator pos:line="49" pos:column="12">++<pos:position pos:line="49" pos:column="14"/></operator></expr>;<pos:position pos:line="49" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></while> <comment type="block" pos:line="50" pos:column="7">/* end of while loop */</comment>

    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><name pos:line="52" pos:column="8">inPtr<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">&lt;<pos:position pos:line="52" pos:column="18"/></operator> <name pos:line="52" pos:column="16">startPtr<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">+<pos:position pos:line="52" pos:column="26"/></operator> <name pos:line="52" pos:column="27">size<pos:position pos:line="52" pos:column="31"/></name></expr>)<pos:position pos:line="52" pos:column="32"/></condition><then pos:line="52" pos:column="32"> <block pos:line="52" pos:column="33">{
      <comment type="block" pos:line="53" pos:column="7">/* handle last byte */</comment>
      <if pos:line="54" pos:column="7">if<condition pos:line="54" pos:column="9">(<expr><operator pos:line="54" pos:column="10">*<pos:position pos:line="54" pos:column="11"/></operator><name pos:line="54" pos:column="11">inPtr<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">==<pos:position pos:line="54" pos:column="19"/></operator> <literal type="char" pos:line="54" pos:column="20">'\r'<pos:position pos:line="54" pos:column="24"/></literal></expr>)<pos:position pos:line="54" pos:column="25"/></condition><then pos:line="54" pos:column="25"> <block pos:line="54" pos:column="26">{
        <comment type="block" pos:line="55" pos:column="9">/* deal with a CR at the end of the buffer */</comment>
        <expr_stmt><expr><operator pos:line="56" pos:column="9">*<pos:position pos:line="56" pos:column="10"/></operator><name pos:line="56" pos:column="10">outPtr<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <literal type="char" pos:line="56" pos:column="19">'\n'<pos:position pos:line="56" pos:column="23"/></literal></expr>;<pos:position pos:line="56" pos:column="24"/></expr_stmt> <comment type="block" pos:line="56" pos:column="25">/* copy a NL instead */</comment>
        <comment type="block" pos:line="57" pos:column="9">/* note that a CRLF might be split across two blocks */</comment>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">data<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">-&gt;<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="15">state<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">.<pos:position pos:line="58" pos:column="21"/></operator><name pos:line="58" pos:column="21">prev_block_had_trailing_cr<pos:position pos:line="58" pos:column="47"/></name></name> <operator pos:line="58" pos:column="48">=<pos:position pos:line="58" pos:column="49"/></operator> <name pos:line="58" pos:column="50">TRUE<pos:position pos:line="58" pos:column="54"/></name></expr>;<pos:position pos:line="58" pos:column="55"/></expr_stmt>
      }<pos:position pos:line="59" pos:column="8"/></block></then>
      <else pos:line="60" pos:column="7">else <block pos:line="60" pos:column="12">{
        <comment type="block" pos:line="61" pos:column="9">/* copy last byte */</comment>
        <expr_stmt><expr><operator pos:line="62" pos:column="9">*<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">outPtr<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">=<pos:position pos:line="62" pos:column="18"/></operator> <operator pos:line="62" pos:column="19">*<pos:position pos:line="62" pos:column="20"/></operator><name pos:line="62" pos:column="20">inPtr<pos:position pos:line="62" pos:column="25"/></name></expr>;<pos:position pos:line="62" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="63" pos:column="8"/></block></else></if>
      <expr_stmt><expr><name pos:line="64" pos:column="7">outPtr<pos:position pos:line="64" pos:column="13"/></name><operator pos:line="64" pos:column="13">++<pos:position pos:line="64" pos:column="15"/></operator></expr>;<pos:position pos:line="64" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>
    <if pos:line="66" pos:column="5">if<condition pos:line="66" pos:column="7">(<expr><name pos:line="66" pos:column="8">outPtr<pos:position pos:line="66" pos:column="14"/></name> <operator pos:line="66" pos:column="15">&lt;<pos:position pos:line="66" pos:column="19"/></operator> <name pos:line="66" pos:column="17">startPtr<pos:position pos:line="66" pos:column="25"/></name> <operator pos:line="66" pos:column="26">+<pos:position pos:line="66" pos:column="27"/></operator> <name pos:line="66" pos:column="28">size<pos:position pos:line="66" pos:column="32"/></name></expr>)<pos:position pos:line="66" pos:column="33"/></condition><then pos:line="66" pos:column="33">
      <comment type="block" pos:line="67" pos:column="7">/* tidy up by null terminating the now shorter data */</comment>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="68" pos:column="7">*<pos:position pos:line="68" pos:column="8"/></operator><name pos:line="68" pos:column="8">outPtr<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">=<pos:position pos:line="68" pos:column="16"/></operator> <literal type="char" pos:line="68" pos:column="17">'\0'<pos:position pos:line="68" pos:column="21"/></literal></expr>;<pos:position pos:line="68" pos:column="22"/></expr_stmt></block></then></if>

    <return pos:line="70" pos:column="5">return <expr><operator pos:line="70" pos:column="12">(<pos:position pos:line="70" pos:column="13"/></operator><name pos:line="70" pos:column="13">outPtr<pos:position pos:line="70" pos:column="19"/></name> <operator pos:line="70" pos:column="20">-<pos:position pos:line="70" pos:column="21"/></operator> <name pos:line="70" pos:column="22">startPtr<pos:position pos:line="70" pos:column="30"/></name><operator pos:line="70" pos:column="30">)<pos:position pos:line="70" pos:column="31"/></operator></expr>;<pos:position pos:line="70" pos:column="32"/></return>
  }<pos:position pos:line="71" pos:column="4"/></block></then></if>
  <return pos:line="72" pos:column="3">return <expr><name pos:line="72" pos:column="10">size<pos:position pos:line="72" pos:column="14"/></name></expr>;<pos:position pos:line="72" pos:column="15"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
