"              returns.  So  early failures will be \"hidden\" by subsequent suc-\n"
"              cessful transfers.\n"
"\n"
, stdout);
 fputs(
"              Using this option, curl will instead  return  an  error  on  the\n"
"              first  transfers  that  fails, independent on the amount of more\n"
"              URLs that are given on the command line. This way,  no  transfer\n"
"              failures go undetected by scripts and similar.\n"
"\n"
"              This  option  will  apply for all given URLs even if you use -:,\n"
"              --next.\n"
"\n"
"              Added in 7.52.0.\n"
"\n"
"       -f, --fail\n"
, stdout);
 fputs(
"              (HTTP) Fail silently (no output at all) on server  errors.  This\n"
"              is  mostly done to better enable scripts etc to better deal with\n"
"              failed attempts. In normal cases when an HTTP  server  fails  to\n"
"              deliver  a  document,  it  returns  an  HTML document stating so\n"
"              (which often also describes why and more). This flag  will  pre-\n"
"              vent curl from outputting that and return error 22.\n"
"\n"
, stdout);
 fputs(
"              This  method is not fail-safe and there are occasions where non-\n"
"              successful response codes will  slip  through,  especially  when\n"
"              authentication is involved (response codes 401 and 407).\n"
"\n"
"       --false-start\n"
"              (TLS)  Tells  curl  to use false start during the TLS handshake.\n"
"              False start is a mode where a  TLS  client  will  start  sending\n"
"              application data before verifying the server's Finished message,\n"
, stdout);
 fputs(
"              thus saving a round trip when performing a full handshake.\n"
"\n"
"              This is currently only implemented in the NSS and Secure  Trans-\n"
"              port (on iOS 7.0 or later, or OS X 10.9 or later) backends.\n"
"\n"
"              Added in 7.42.0.\n"
"\n"
"       --form-string <name=string>\n"
"              (HTTP)  Similar  to  -F, --form except that the value string for\n"
"              the named parameter is used literally. Leading '@' and '<' char-\n"
, stdout);
 fputs(
"              acters,  and  the  ';type='  string in the value have no special\n"
"              meaning. Use this in preference to -F,  --form  if  there's  any\n"
"              possibility  that  the string value may accidentally trigger the\n"
"              '@' or '<' features of -F, --form.\n"
"\n"
"              See also -F, --form.\n"
"\n"
"       -F, --form <name=content>\n"
"              (HTTP) This lets curl emulate a filled-in form in which  a  user\n"
, stdout);
 fputs(
"              has  pressed  the  submit  button. This causes curl to POST data\n"
"              using the  Content-Type  multipart/form-data  according  to  RFC\n"
"              2388.  This  enables uploading of binary files etc. To force the\n"
"              'content' part to be a file, prefix the  file  name  with  an  @\n"
"              sign.  To just get the content part from a file, prefix the file\n"
"              name with the symbol <. The difference between @ and <  is  then\n"
, stdout);
 fputs(
"              that  @  makes a file get attached in the post as a file upload,\n"
"              while the < makes a text field and just  get  the  contents  for\n"
"              that text field from a file.\n"
"\n"
"              Example:  to  send  an image to a server, where 'profile' is the\n"
"              name of the form-field to which portrait.jpg will be the input:\n"
"\n"
"               curl -F profile=@portrait.jpg https://example.com/upload.cgi\n"
"\n"
, stdout);
 fputs(
"              To read content from stdin instead of a file, use - as the file-\n"
"              name.  This  goes  for both @ and < constructs. Unfortunately it\n"
"              does not support reading the file from a named pipe or  similar,\n"
"              as it needs the full size before the transfer starts.\n"
"\n"
"              You  can  also  tell  curl  what  Content-Type  to  use by using\n"
"              'type=', in a manner similar to:\n"
"\n"
, stdout);
 fputs(
"               curl -F \"web=@index.html;type=text/html\" example.com\n"
"\n"
"              or\n"
"\n"
"               curl -F \"name=daniel;type=text/foo\" example.com\n"
"\n"
"              You can also explicitly change the name field of a  file  upload\n"
"              part by setting filename=, like this:\n"
"\n"
"               curl -F \"file=@localfile;filename=nameinpost\" example.com\n"
"\n"
"              If  filename/path contains ',' or ';', it must be quoted by dou-\n"
"              ble-quotes like:\n"
"\n"
, stdout);
 fputs(
"               curl  -F  \"file=@\\\"localfile\\\";filename=\\\"nameinpost\\\"\"   exam-\n"
"              ple.com\n"
"\n"
"              or\n"
"\n"
"               curl -F 'file=@\"localfile\";filename=\"nameinpost\"' example.com\n"
"\n"
"              Note  that  if  a  filename/path is quoted by double-quotes, any\n"
"              double-quote or backslash within the filename must be escaped by\n"
"              backslash.\n"
"\n"
"              See further examples and details in the MANUAL.\n"
"\n"
, stdout);
 fputs(
"              This option can be used multiple times.\n"
"\n"
"              This option overrides -d, --data and -I, --head and --upload.\n"
"\n"
"       --ftp-account <data>\n"
"              (FTP) When an FTP server asks for \"account data\" after user name\n"
"              and password has been provided, this data is sent off using  the\n"
"              ACCT command.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"              Added in 7.13.0.\n"
"\n"
, stdout);
 fputs(
"       --ftp-alternative-to-user <command>\n"
"              (FTP)  If  authenticating with the USER and PASS commands fails,\n"
"              send this  command.   When  connecting  to  Tumbleweed's  Secure\n"
"              Transport  server  over  FTPS  using a client certificate, using\n"
"              \"SITE AUTH\" will tell the server to retrieve the  username  from\n"
"              the certificate.\n"
"              Added in 7.15.5.\n"
"\n"
"       --ftp-create-dirs\n"
, stdout);
 fputs(
"              (FTP  SFTP)  When  an FTP or SFTP URL/operation uses a path that\n"
"              doesn't currently exist on the server, the standard behavior  of\n"
"              curl is to fail. Using this option, curl will instead attempt to\n"
"              create missing directories.\n"
"\n"
"              See also --create-dirs.\n"
"\n"
"       --ftp-method <method>\n"
"              (FTP) Control what method curl should use to reach a file on  an\n"
, stdout);
 fputs(
"              FTP(S)  server. The method argument should be one of the follow-\n"
"              ing alternatives:\n"
"\n"
"              multicwd\n"
"                     curl does a single CWD operation for each  path  part  in\n"
"                     the  given URL. For deep hierarchies this means very many\n"
"                     commands. This is how RFC 1738 says it  should  be  done.\n"
"                     This is the default but the slowest behavior.\n"
"\n"
, stdout);
 fputs(
"              nocwd  curl  does  no  CWD at all. curl will do SIZE, RETR, STOR\n"
"                     etc and give a full path to the server for all these com-\n"
"                     mands. This is the fastest behavior.\n"
"\n"
"              singlecwd\n"
"                     curl does one CWD with the full target directory and then\n"
"                     operates on the file \"normally\"  (like  in  the  multicwd\n"
"                     case).  This  is  somewhat  more standards compliant than\n"
, stdout);
 fputs(
"                     'nocwd' but without the full penalty of 'multicwd'.\n"
"\n"
"       Added in 7.15.1.\n"
"\n"
"       --ftp-pasv\n"
"              (FTP) Use passive mode for the data connection. Passive  is  the\n"
"              internal  default behavior, but using this option can be used to\n"
"              override a previous -P, --ftp-port option.\n"
"\n"
"              If this option is used several times,  only  the  first  one  is\n"
"              used.  Undoing  an  enforced passive really isn't doable but you\n"
, stdout);
 fputs(
"              must then instead enforce the correct -P, --ftp-port again.\n"
"\n"
"              Passive mode means that curl will try the EPSV command first and\n"
"              then PASV, unless --disable-epsv is used.\n"
"              See also --disable-epsv. Added in 7.11.0.\n"
"\n"
"       -P, --ftp-port <address>\n"
"              (FTP)  Reverses  the  default initiator/listener roles when con-\n"
"              necting with FTP. This option makes curl use active  mode.  curl\n"
, stdout);
 fputs(
"              then  tells the server to connect back to the client's specified\n"
"              address and port, while passive mode asks the server to setup an\n"
"              IP  address  and  port for it to connect to. <address> should be\n"
"              one of:\n"
"\n"
"              interface\n"
"                     i.e \"eth0\" to specify which interface's  IP  address  you\n"
"                     want to use (Unix only)\n"
"\n"
"              IP address\n"
, stdout);
 fputs(
"                     i.e \"192.168.10.1\" to specify the exact IP address\n"
"\n"
"              host name\n"
"                     i.e \"my.host.domain\" to specify the machine\n"
"\n"
"              -      make  curl  pick the same IP address that is already used\n"
"                     for the control connection\n"
"\n"
"       If this option is used several times, the last one will be  used.  Dis-\n"
"       able  the  use  of PORT with --ftp-pasv. Disable the attempt to use the\n"
, stdout);
 fputs(
"       EPRT command instead of PORT by using --disable-eprt.  EPRT  is  really\n"
"       PORT++.\n"
"\n"
"       Since  7.19.5,  you  can  append  \":[start]-[end]\"  to the right of the\n"
"       address, to tell curl what TCP port range to use. That means you  spec-\n"
"       ify  a  port  range,  from  a lower to a higher number. A single number\n"
"       works as well, but do note that it increases the risk of failure  since\n"
"       the port may not be available.\n"
"\n"
"       See also --ftp-pasv and --disable-eprt.\n"
"\n"
, stdout);
 fputs(
"       --ftp-pret\n"
"              (FTP)  Tell  curl to send a PRET command before PASV (and EPSV).\n"
"              Certain FTP servers, mainly drftpd,  require  this  non-standard\n"
"              command  for  directory  listings as well as up and downloads in\n"
"              PASV mode.\n"
"\n"
"              Added in 7.20.0.\n"
"\n"
"       --ftp-skip-pasv-ip\n"
"              (FTP) Tell curl to not use the IP address the server suggests in\n"
"              its  response to curl's PASV command when curl connects the data\n"
, stdout);
 fputs(
"              connection. Instead curl will re-use  the  same  IP  address  it\n"
"              already uses for the control connection.\n"
"\n"
"              This  option has no effect if PORT, EPRT or EPSV is used instead\n"
"              of PASV.\n"
"\n"
"              See also --ftp-pasv. Added in 7.14.2.\n"
"\n"
"       --ftp-ssl-ccc-mode <active/passive>\n"
"              (FTP) Sets the CCC mode. The passive mode will not initiate  the\n"
"              shutdown, but instead wait for the server to do it, and will not\n"
, stdout);
 fputs(
"              reply to the shutdown from the server. The active mode initiates\n"
"              the shutdown and waits for a reply from the server.\n"
"\n"
"              See also --ftp-ssl-ccc. Added in 7.16.2.\n"
"\n"
"       --ftp-ssl-ccc\n"
"              (FTP)  Use  CCC  (Clear  Command Channel) Shuts down the SSL/TLS\n"
"              layer after authenticating. The rest of the control channel com-\n"
"              munication  will be unencrypted. This allows NAT routers to fol-\n"
, stdout);
 fputs(
"              low the FTP transaction. The default mode is passive.\n"
"\n"
"              See also --ssl and --ftp-ssl-ccc-mode. Added in 7.16.1.\n"
"\n"
"       --ftp-ssl-control\n"
"              (FTP) Require SSL/TLS for the FTP  login,  clear  for  transfer.\n"
"              Allows  secure  authentication, but non-encrypted data transfers\n"
"              for efficiency.  Fails the transfer if the server  doesn't  sup-\n"
"              port SSL/TLS.\n"
"\n"
"              Added in 7.16.0.\n"
"\n"
"       -G, --get\n"
, stdout);
 fputs(
"              When  used,  this  option  will make all data specified with -d,\n"
"              --data, --data-binary or --data-urlencode to be used in an  HTTP\n"
"              GET  request instead of the POST request that otherwise would be\n"
"              used. The data will be appended to the URL with a '?' separator.\n"
"              If used in combination with  -I,  --head,  the  POST  data  will\n"
"              instead be appended to the URL with a HEAD request.\n"
"\n"
, stdout);
 fputs(
"              If  this  option  is  used  several times, only the first one is\n"
"              used. This is because undoing a GET doesn't make sense, but  you\n"
"              should then instead enforce the alternative method you prefer.\n"
"\n"
"       -g, --globoff\n"
"              This option switches off the \"URL globbing parser\". When you set\n"
"              this option, you can specify URLs that contain the letters  {}[]\n"
"              without  having them being interpreted by curl itself. Note that\n"
, stdout);
 fputs(
"              these letters are not normal legal URL contents but they  should\n"
"              be encoded according to the URI standard.\n"
"\n"
"       -I, --head\n"
"              (HTTP FTP FILE) Fetch the headers only! HTTP-servers feature the\n"
"              command HEAD which this uses to get nothing but the header of  a\n"
"              document.  When  used  on an FTP or FILE file, curl displays the\n"
"              file size and last modification time only.\n"
"\n"
"       -H, --header <header>\n"
, stdout);
 fputs(
"              (HTTP) Extra header to include in the request when sending  HTTP\n"
"              to  a  server. You may specify any number of extra headers. Note\n"
"              that if you should add a custom header that has the same name as\n"
"              one  of  the  internal  ones curl would use, your externally set\n"
"              header will be used instead of the internal one. This allows you\n"
"              to  make  even  trickier  stuff than curl would normally do. You\n"
, stdout);
 fputs(
"              should not replace internally set headers without  knowing  per-\n"
"              fectly well what you're doing. Remove an internal header by giv-\n"
"              ing a replacement without content  on  the  right  side  of  the\n"
"              colon, as in: -H \"Host:\". If you send the custom header with no-\n"
"              value then its header must be terminated with a semicolon,  such\n"
"              as -H \"X-Custom-Header;\" to send \"X-Custom-Header:\".\n"
"\n"
, stdout);
 fputs(
"              curl  will  make  sure  that each header you add/replace is sent\n"
"              with the proper end-of-line marker, you should thus not add that\n"
"              as a part of the header content: do not add newlines or carriage\n"
"              returns, they will only mess things up for you.\n"
"\n"
"              See also the -A, --user-agent and -e, --referer options.\n"
"\n"
