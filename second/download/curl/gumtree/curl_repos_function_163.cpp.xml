<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_163.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">printsub<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">UrlData<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">data<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">direction<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>,		<comment type="block" pos:line="2" pos:column="49">/* '&lt;' or '&gt;' */</comment>
		     <parameter><decl><type><name pos:line="3" pos:column="22">unsigned<pos:position pos:line="3" pos:column="30"/></name> <name pos:line="3" pos:column="31">char<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">pointer<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>,	<comment type="block" pos:line="3" pos:column="49">/* where suboption data is */</comment>
		     <parameter><decl><type><name pos:line="4" pos:column="22">int<pos:position pos:line="4" pos:column="25"/></name></type> <name pos:line="4" pos:column="26">length<pos:position pos:line="4" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="33"/></parameter_list>		<comment type="block" pos:line="4" pos:column="49">/* length of suboption data */</comment>

<block pos:line="6" pos:column="1">{
   <decl_stmt><decl><type><name pos:line="7" pos:column="4">int<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">i<pos:position pos:line="7" pos:column="9"/></name> <init pos:line="7" pos:column="10">= <expr><literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

   <if pos:line="9" pos:column="4">if <condition pos:line="9" pos:column="7">(<expr><name><name pos:line="9" pos:column="8">data<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">bits<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">verbose<pos:position pos:line="9" pos:column="26"/></name></name></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27">
   <block pos:line="10" pos:column="4">{
      <if pos:line="11" pos:column="7">if <condition pos:line="11" pos:column="10">(<expr><name pos:line="11" pos:column="11">direction<pos:position pos:line="11" pos:column="20"/></name></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21">
      <block pos:line="12" pos:column="7">{
         <expr_stmt><expr><call><name pos:line="13" pos:column="10">printf<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><literal type="string" pos:line="13" pos:column="17">"%s IAC SB "<pos:position pos:line="13" pos:column="29"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="13" pos:column="31">(<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="32">direction<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">==<pos:position pos:line="13" pos:column="44"/></operator> <literal type="char" pos:line="13" pos:column="45">'&lt;'<pos:position pos:line="13" pos:column="51"/></literal><operator pos:line="13" pos:column="48">)<pos:position pos:line="13" pos:column="49"/></operator></expr>?<pos:position pos:line="13" pos:column="50"/></condition><then pos:line="13" pos:column="50"> <expr><literal type="string" pos:line="13" pos:column="51">"RCVD"<pos:position pos:line="13" pos:column="57"/></literal></expr></then><else pos:line="13" pos:column="57">:<expr><literal type="string" pos:line="13" pos:column="58">"SENT"<pos:position pos:line="13" pos:column="64"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt>
         <if pos:line="14" pos:column="10">if <condition pos:line="14" pos:column="13">(<expr><name pos:line="14" pos:column="14">length<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">&gt;=<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="24">3<pos:position pos:line="14" pos:column="25"/></literal></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26">
         <block pos:line="15" pos:column="10">{
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">int<pos:position pos:line="16" pos:column="16"/></name></type> <name pos:line="16" pos:column="17">j<pos:position pos:line="16" pos:column="18"/></name></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>

            <expr_stmt><expr><name pos:line="18" pos:column="13">i<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name><name pos:line="18" pos:column="17">pointer<pos:position pos:line="18" pos:column="24"/></name><index pos:line="18" pos:column="24">[<expr><name pos:line="18" pos:column="25">length<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">-<pos:position pos:line="18" pos:column="32"/></operator><literal type="number" pos:line="18" pos:column="32">2<pos:position pos:line="18" pos:column="33"/></literal></expr>]<pos:position pos:line="18" pos:column="34"/></index></name></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">j<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name><name pos:line="19" pos:column="17">pointer<pos:position pos:line="19" pos:column="24"/></name><index pos:line="19" pos:column="24">[<expr><name pos:line="19" pos:column="25">length<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">-<pos:position pos:line="19" pos:column="32"/></operator><literal type="number" pos:line="19" pos:column="32">1<pos:position pos:line="19" pos:column="33"/></literal></expr>]<pos:position pos:line="19" pos:column="34"/></index></name></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>

            <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><name pos:line="21" pos:column="17">i<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">!=<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">IAC<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">||<pos:position pos:line="21" pos:column="28"/></operator> <name pos:line="21" pos:column="29">j<pos:position pos:line="21" pos:column="30"/></name> <operator pos:line="21" pos:column="31">!=<pos:position pos:line="21" pos:column="33"/></operator> <name pos:line="21" pos:column="34">SE<pos:position pos:line="21" pos:column="36"/></name></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37">
            <block pos:line="22" pos:column="13">{
               <expr_stmt><expr><call><name pos:line="23" pos:column="16">printf<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><literal type="string" pos:line="23" pos:column="23">"(terminated by "<pos:position pos:line="23" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
               <if pos:line="24" pos:column="16">if <condition pos:line="24" pos:column="19">(<expr><call><name pos:line="24" pos:column="20">TELOPT_OK<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">i<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="33"/></condition><then pos:line="24" pos:column="33">
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="19">printf<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><literal type="string" pos:line="25" pos:column="26">"%s "<pos:position pos:line="25" pos:column="31"/></literal></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="33">TELOPT<pos:position pos:line="25" pos:column="39"/></name><argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">i<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt></block></then>
               <elseif pos:line="26" pos:column="16">else <if pos:line="26" pos:column="21">if <condition pos:line="26" pos:column="24">(<expr><call><name pos:line="26" pos:column="25">TELCMD_OK<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">i<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="38"/></condition><then pos:line="26" pos:column="38">
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="19">printf<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><literal type="string" pos:line="27" pos:column="26">"%s "<pos:position pos:line="27" pos:column="31"/></literal></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="33">TELCMD<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><name pos:line="27" pos:column="40">i<pos:position pos:line="27" pos:column="41"/></name></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt></block></then></if></elseif>
               <else pos:line="28" pos:column="16">else
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="19">printf<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><literal type="string" pos:line="29" pos:column="26">"%d "<pos:position pos:line="29" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="33">i<pos:position pos:line="29" pos:column="34"/></name></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt></block></else></if>
               <if pos:line="30" pos:column="16">if <condition pos:line="30" pos:column="19">(<expr><call><name pos:line="30" pos:column="20">TELOPT_OK<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">j<pos:position pos:line="30" pos:column="31"/></name></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33">
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="19">printf<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><literal type="string" pos:line="31" pos:column="26">"%s"<pos:position pos:line="31" pos:column="30"/></literal></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="32">TELOPT<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><name pos:line="31" pos:column="39">j<pos:position pos:line="31" pos:column="40"/></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt></block></then>
               <elseif pos:line="32" pos:column="16">else <if pos:line="32" pos:column="21">if <condition pos:line="32" pos:column="24">(<expr><call><name pos:line="32" pos:column="25">TELCMD_OK<pos:position pos:line="32" pos:column="34"/></name><argument_list pos:line="32" pos:column="34">(<argument><expr><name pos:line="32" pos:column="35">j<pos:position pos:line="32" pos:column="36"/></name></expr></argument>)<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="38"/></condition><then pos:line="32" pos:column="38">
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="19">printf<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><literal type="string" pos:line="33" pos:column="26">"%s"<pos:position pos:line="33" pos:column="30"/></literal></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="32">TELCMD<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">j<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="43"/></expr_stmt></block></then></if></elseif>
               <else pos:line="34" pos:column="16">else
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="19">printf<pos:position pos:line="35" pos:column="25"/></name><argument_list pos:line="35" pos:column="25">(<argument><expr><literal type="string" pos:line="35" pos:column="26">"%d"<pos:position pos:line="35" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="32">j<pos:position pos:line="35" pos:column="33"/></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt></block></else></if>
               <expr_stmt><expr><call><name pos:line="36" pos:column="16">printf<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><literal type="string" pos:line="36" pos:column="23">", not IAC SE!) "<pos:position pos:line="36" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="37" pos:column="14"/></block></then></if>
         }<pos:position pos:line="38" pos:column="11"/></block></then></if>
         <expr_stmt><expr><name pos:line="39" pos:column="10">length<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">-=<pos:position pos:line="39" pos:column="19"/></operator> <literal type="number" pos:line="39" pos:column="20">2<pos:position pos:line="39" pos:column="21"/></literal></expr>;<pos:position pos:line="39" pos:column="22"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></then></if>
      <if pos:line="41" pos:column="7">if <condition pos:line="41" pos:column="10">(<expr><name pos:line="41" pos:column="11">length<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">&lt;<pos:position pos:line="41" pos:column="22"/></operator> <literal type="number" pos:line="41" pos:column="20">1<pos:position pos:line="41" pos:column="21"/></literal></expr>)<pos:position pos:line="41" pos:column="22"/></condition><then pos:line="41" pos:column="22">
      <block pos:line="42" pos:column="7">{
         <expr_stmt><expr><call><name pos:line="43" pos:column="10">printf<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><literal type="string" pos:line="43" pos:column="17">"(Empty suboption?)"<pos:position pos:line="43" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt>
         <return pos:line="44" pos:column="10">return;<pos:position pos:line="44" pos:column="17"/></return>
      }<pos:position pos:line="45" pos:column="8"/></block></then></if>

      <if pos:line="47" pos:column="7">if <condition pos:line="47" pos:column="10">(<expr><call><name pos:line="47" pos:column="11">TELOPT_OK<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><name><name pos:line="47" pos:column="21">pointer<pos:position pos:line="47" pos:column="28"/></name><index pos:line="47" pos:column="28">[<expr><literal type="number" pos:line="47" pos:column="29">0<pos:position pos:line="47" pos:column="30"/></literal></expr>]<pos:position pos:line="47" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="47" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33">
	 <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="10">printf<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">(<argument><expr><literal type="string" pos:line="48" pos:column="17">"%s (unknown)"<pos:position pos:line="48" pos:column="31"/></literal></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="33">TELOPT<pos:position pos:line="48" pos:column="39"/></name><argument_list pos:line="48" pos:column="39">(<argument><expr><name><name pos:line="48" pos:column="40">pointer<pos:position pos:line="48" pos:column="47"/></name><index pos:line="48" pos:column="47">[<expr><literal type="number" pos:line="48" pos:column="48">0<pos:position pos:line="48" pos:column="49"/></literal></expr>]<pos:position pos:line="48" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="53"/></expr_stmt></block></then>
      <else pos:line="49" pos:column="7">else
	 <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="10">printf<pos:position pos:line="50" pos:column="16"/></name><argument_list pos:line="50" pos:column="16">(<argument><expr><literal type="string" pos:line="50" pos:column="17">"%d (unknown)"<pos:position pos:line="50" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="33">pointer<pos:position pos:line="50" pos:column="40"/></name><index pos:line="50" pos:column="40">[<expr><name pos:line="50" pos:column="41">i<pos:position pos:line="50" pos:column="42"/></name></expr>]<pos:position pos:line="50" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="50" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="45"/></expr_stmt></block></else></if>
      <for pos:line="51" pos:column="7">for <control pos:line="51" pos:column="11">(<init><expr><name pos:line="51" pos:column="12">i<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <literal type="number" pos:line="51" pos:column="16">1<pos:position pos:line="51" pos:column="17"/></literal></expr>;<pos:position pos:line="51" pos:column="18"/></init> <condition><expr><name pos:line="51" pos:column="19">i<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">&lt;<pos:position pos:line="51" pos:column="25"/></operator> <name pos:line="51" pos:column="23">length<pos:position pos:line="51" pos:column="29"/></name></expr>;<pos:position pos:line="51" pos:column="30"/></condition> <incr><expr><name pos:line="51" pos:column="31">i<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">++<pos:position pos:line="51" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="35"/></control>
	 <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="10">printf<pos:position pos:line="52" pos:column="16"/></name><argument_list pos:line="52" pos:column="16">(<argument><expr><literal type="string" pos:line="52" pos:column="17">" %d"<pos:position pos:line="52" pos:column="22"/></literal></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="24">pointer<pos:position pos:line="52" pos:column="31"/></name><index pos:line="52" pos:column="31">[<expr><name pos:line="52" pos:column="32">i<pos:position pos:line="52" pos:column="33"/></name></expr>]<pos:position pos:line="52" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt></block></for>
      
      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><name pos:line="54" pos:column="11">direction<pos:position pos:line="54" pos:column="20"/></name></expr>)<pos:position pos:line="54" pos:column="21"/></condition><then pos:line="54" pos:column="21">
      <block pos:line="55" pos:column="7">{
         <expr_stmt><expr><call><name pos:line="56" pos:column="10">printf<pos:position pos:line="56" pos:column="16"/></name><argument_list pos:line="56" pos:column="16">(<argument><expr><literal type="string" pos:line="56" pos:column="17">"\n"<pos:position pos:line="56" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="57" pos:column="8"/></block></then></if>
   }<pos:position pos:line="58" pos:column="5"/></block></then></if>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
