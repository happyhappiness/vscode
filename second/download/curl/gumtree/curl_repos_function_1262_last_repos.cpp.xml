<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1262_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">curl_mark_sclose<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">curl_socket_t<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">sockfd<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">line<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">source<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">fmt<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><ternary><condition><expr><operator pos:line="3" pos:column="21">(<pos:position pos:line="3" pos:column="22"/></operator><sizeof pos:line="3" pos:column="22">sizeof<argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">curl_socket_t<pos:position pos:line="3" pos:column="42"/></name></expr></argument>)<pos:position pos:line="3" pos:column="43"/></argument_list></sizeof> <operator pos:line="3" pos:column="44">==<pos:position pos:line="3" pos:column="46"/></operator> <sizeof pos:line="3" pos:column="47">sizeof<argument_list pos:line="3" pos:column="53">(<argument><expr><name pos:line="3" pos:column="54">int<pos:position pos:line="3" pos:column="57"/></name></expr></argument>)<pos:position pos:line="3" pos:column="58"/></argument_list></sizeof><operator pos:line="3" pos:column="58">)<pos:position pos:line="3" pos:column="59"/></operator></expr> ?<pos:position pos:line="3" pos:column="61"/></condition><then pos:line="3" pos:column="61">
    <expr><literal type="string" pos:line="4" pos:column="5">"FD %s:%d sclose(%d)\n"<pos:position pos:line="4" pos:column="28"/></literal></expr></then><else pos:line="4" pos:column="28">:
    <expr><ternary><condition><expr><operator pos:line="5" pos:column="5">(<pos:position pos:line="5" pos:column="6"/></operator><sizeof pos:line="5" pos:column="6">sizeof<argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">curl_socket_t<pos:position pos:line="5" pos:column="26"/></name></expr></argument>)<pos:position pos:line="5" pos:column="27"/></argument_list></sizeof> <operator pos:line="5" pos:column="28">==<pos:position pos:line="5" pos:column="30"/></operator> <sizeof pos:line="5" pos:column="31">sizeof<argument_list pos:line="5" pos:column="37">(<argument><expr><name pos:line="5" pos:column="38">long<pos:position pos:line="5" pos:column="42"/></name></expr></argument>)<pos:position pos:line="5" pos:column="43"/></argument_list></sizeof><operator pos:line="5" pos:column="43">)<pos:position pos:line="5" pos:column="44"/></operator></expr> ?<pos:position pos:line="5" pos:column="46"/></condition><then pos:line="5" pos:column="46">
    <expr><literal type="string" pos:line="6" pos:column="5">"FD %s:%d sclose(%ld)\n"<pos:position pos:line="6" pos:column="29"/></literal></expr></then><else pos:line="6" pos:column="29">:
    <expr><literal type="string" pos:line="7" pos:column="5">"FD %s:%d sclose(%zd)\n"<pos:position pos:line="7" pos:column="29"/></literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name pos:line="9" pos:column="6">source<pos:position pos:line="9" pos:column="12"/></name></expr>)<pos:position pos:line="9" pos:column="13"/></condition><then pos:line="9" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="5">curl_memlog<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">fmt<pos:position pos:line="10" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="22">source<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">line<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="36">sockfd<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt></block></then></if>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
