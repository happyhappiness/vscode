<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1875_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">ldap_recv<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">int<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">sockindex<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">buf<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">size_t<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">len<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">CURLcode<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">err<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ldapconninfo<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">li<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">conn<pos:position pos:line="4" pos:column="26"/></name><operator pos:line="4" pos:column="26">-&gt;<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="28">proto<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">.<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="34">generic<pos:position pos:line="4" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">ldapreqinfo<pos:position pos:line="6" pos:column="14"/></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">lr<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">req<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">.<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="31">protop<pos:position pos:line="6" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">rc<pos:position pos:line="7" pos:column="9"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="11">ret<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">LDAPMessage<pos:position pos:line="8" pos:column="14"/></name> <modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier></type><name pos:line="8" pos:column="16">msg<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">NULL<pos:position pos:line="8" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">LDAPMessage<pos:position pos:line="9" pos:column="14"/></name> <modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier></type><name pos:line="9" pos:column="16">ent<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">BerElement<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">ber<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><name pos:line="10" pos:column="21">NULL<pos:position pos:line="10" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">timeval<pos:position pos:line="11" pos:column="17"/></name></name></type> <name pos:line="11" pos:column="18">tv<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><block pos:line="11" pos:column="23">{<expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>, <expr><literal type="number" pos:line="11" pos:column="27">1<pos:position pos:line="11" pos:column="28"/></literal></expr>}<pos:position pos:line="11" pos:column="29"/></block></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="13" pos:column="3">(<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">void<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">)<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">len<pos:position pos:line="13" pos:column="12"/></name></expr>;<pos:position pos:line="13" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="14" pos:column="3">(<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">void<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">)<pos:position pos:line="14" pos:column="9"/></operator><name pos:line="14" pos:column="9">buf<pos:position pos:line="14" pos:column="12"/></name></expr>;<pos:position pos:line="14" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="15" pos:column="3">(<pos:position pos:line="15" pos:column="4"/></operator><name pos:line="15" pos:column="4">void<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">)<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">sockindex<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><name pos:line="17" pos:column="3">rc<pos:position pos:line="17" pos:column="5"/></name> <operator pos:line="17" pos:column="6">=<pos:position pos:line="17" pos:column="7"/></operator> <call><name pos:line="17" pos:column="8">ldap_result<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name><name pos:line="17" pos:column="20">li<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">-&gt;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="24">ld<pos:position pos:line="17" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="28">lr<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">msgid<pos:position pos:line="17" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">LDAP_MSG_RECEIVED<pos:position pos:line="17" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="58">&amp;<pos:position pos:line="17" pos:column="63"/></operator><name pos:line="17" pos:column="59">tv<pos:position pos:line="17" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="63">&amp;<pos:position pos:line="17" pos:column="68"/></operator><name pos:line="17" pos:column="64">msg<pos:position pos:line="17" pos:column="67"/></name></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="69"/></expr_stmt>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">rc<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">&lt;<pos:position pos:line="18" pos:column="13"/></operator> <literal type="number" pos:line="18" pos:column="11">0<pos:position pos:line="18" pos:column="12"/></literal></expr>)<pos:position pos:line="18" pos:column="13"/></condition><then pos:line="18" pos:column="13"> <block pos:line="18" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">failf<pos:position pos:line="19" pos:column="10"/></name><argument_list pos:line="19" pos:column="10">(<argument><expr><name pos:line="19" pos:column="11">data<pos:position pos:line="19" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="17">"LDAP local: search ldap_result %s"<pos:position pos:line="19" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="54">ldap_err2string<pos:position pos:line="19" pos:column="69"/></name><argument_list pos:line="19" pos:column="69">(<argument><expr><name pos:line="19" pos:column="70">rc<pos:position pos:line="19" pos:column="72"/></name></expr></argument>)<pos:position pos:line="19" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="20" pos:column="5">*<pos:position pos:line="20" pos:column="6"/></operator><name pos:line="20" pos:column="6">err<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <name pos:line="20" pos:column="12">CURLE_RECV_ERROR<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">-<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">1<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="24" pos:column="3">*<pos:position pos:line="24" pos:column="4"/></operator><name pos:line="24" pos:column="4">err<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <name pos:line="24" pos:column="10">CURLE_AGAIN<pos:position pos:line="24" pos:column="21"/></name></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">ret<pos:position pos:line="25" pos:column="6"/></name> <operator pos:line="25" pos:column="7">=<pos:position pos:line="25" pos:column="8"/></operator> <operator pos:line="25" pos:column="9">-<pos:position pos:line="25" pos:column="10"/></operator><literal type="number" pos:line="25" pos:column="10">1<pos:position pos:line="25" pos:column="11"/></literal></expr>;<pos:position pos:line="25" pos:column="12"/></expr_stmt>

  <comment type="block" pos:line="27" pos:column="3">/* timed out */</comment>
  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">(<expr><operator pos:line="28" pos:column="6">!<pos:position pos:line="28" pos:column="7"/></operator><name pos:line="28" pos:column="7">msg<pos:position pos:line="28" pos:column="10"/></name></expr>)<pos:position pos:line="28" pos:column="11"/></condition><then pos:line="28" pos:column="11">
    <block type="pseudo"><return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">ret<pos:position pos:line="29" pos:column="15"/></name></expr>;<pos:position pos:line="29" pos:column="16"/></return></block></then></if>

  <for pos:line="31" pos:column="3">for<control pos:line="31" pos:column="6">(<init><expr><name pos:line="31" pos:column="7">ent<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <call><name pos:line="31" pos:column="13">ldap_first_message<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><name><name pos:line="31" pos:column="32">li<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">-&gt;<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="36">ld<pos:position pos:line="31" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="40">msg<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></init> <condition><expr><name pos:line="31" pos:column="46">ent<pos:position pos:line="31" pos:column="49"/></name></expr>;<pos:position pos:line="31" pos:column="50"/></condition>
    <incr><expr><name pos:line="32" pos:column="5">ent<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">ldap_next_message<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name><name pos:line="32" pos:column="29">li<pos:position pos:line="32" pos:column="31"/></name><operator pos:line="32" pos:column="31">-&gt;<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="33">ld<pos:position pos:line="32" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="37">ent<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr></incr>)<pos:position pos:line="32" pos:column="42"/></control> <block pos:line="32" pos:column="43">{
    <decl_stmt><decl><type><name><name pos:line="33" pos:column="5">struct<pos:position pos:line="33" pos:column="11"/></name> <name pos:line="33" pos:column="12">berval<pos:position pos:line="33" pos:column="18"/></name></name></type> <name pos:line="33" pos:column="19">bv<pos:position pos:line="33" pos:column="21"/></name></decl>, <modifier pos:line="33" pos:column="23">*<pos:position pos:line="33" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="33" pos:column="24">bvals<pos:position pos:line="33" pos:column="29"/></name></decl>, <modifier pos:line="33" pos:column="31">*<pos:position pos:line="33" pos:column="32"/></modifier><modifier pos:line="33" pos:column="32">*<pos:position pos:line="33" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="33" pos:column="33">bvp<pos:position pos:line="33" pos:column="36"/></name> <init pos:line="33" pos:column="37">= <expr><operator pos:line="33" pos:column="39">&amp;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="40">bvals<pos:position pos:line="33" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">int<pos:position pos:line="34" pos:column="8"/></name></type> <name pos:line="34" pos:column="9">binary<pos:position pos:line="34" pos:column="15"/></name> <init pos:line="34" pos:column="16">= <expr><literal type="number" pos:line="34" pos:column="18">0<pos:position pos:line="34" pos:column="19"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="34" pos:column="21">msgtype<pos:position pos:line="34" pos:column="28"/></name></decl>;<pos:position pos:line="34" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">CURLcode<pos:position pos:line="35" pos:column="13"/></name></type> <name pos:line="35" pos:column="14">writeerr<pos:position pos:line="35" pos:column="22"/></name></decl>;<pos:position pos:line="35" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="37" pos:column="5">msgtype<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <call><name pos:line="37" pos:column="15">ldap_msgtype<pos:position pos:line="37" pos:column="27"/></name><argument_list pos:line="37" pos:column="27">(<argument><expr><name pos:line="37" pos:column="28">ent<pos:position pos:line="37" pos:column="31"/></name></expr></argument>)<pos:position pos:line="37" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">msgtype<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">==<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">LDAP_RES_SEARCH_RESULT<pos:position pos:line="38" pos:column="41"/></name></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42"> <block pos:line="38" pos:column="43">{
      <decl_stmt><decl><type><name pos:line="39" pos:column="7">int<pos:position pos:line="39" pos:column="10"/></name></type> <name pos:line="39" pos:column="11">code<pos:position pos:line="39" pos:column="15"/></name></decl>;<pos:position pos:line="39" pos:column="16"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="40" pos:column="7">char<pos:position pos:line="40" pos:column="11"/></name> <modifier pos:line="40" pos:column="12">*<pos:position pos:line="40" pos:column="13"/></modifier></type><name pos:line="40" pos:column="13">info<pos:position pos:line="40" pos:column="17"/></name> <init pos:line="40" pos:column="18">= <expr><name pos:line="40" pos:column="20">NULL<pos:position pos:line="40" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><name pos:line="41" pos:column="7">rc<pos:position pos:line="41" pos:column="9"/></name> <operator pos:line="41" pos:column="10">=<pos:position pos:line="41" pos:column="11"/></operator> <call><name pos:line="41" pos:column="12">ldap_parse_result<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><name><name pos:line="41" pos:column="30">li<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">-&gt;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="34">ld<pos:position pos:line="41" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="38">ent<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="43">&amp;<pos:position pos:line="41" pos:column="48"/></operator><name pos:line="41" pos:column="44">code<pos:position pos:line="41" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="50">NULL<pos:position pos:line="41" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="56">&amp;<pos:position pos:line="41" pos:column="61"/></operator><name pos:line="41" pos:column="57">info<pos:position pos:line="41" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="63">NULL<pos:position pos:line="41" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="69">NULL<pos:position pos:line="41" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="75">0<pos:position pos:line="41" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="78"/></expr_stmt>
      <if pos:line="42" pos:column="7">if<condition pos:line="42" pos:column="9">(<expr><name pos:line="42" pos:column="10">rc<pos:position pos:line="42" pos:column="12"/></name></expr>)<pos:position pos:line="42" pos:column="13"/></condition><then pos:line="42" pos:column="13"> <block pos:line="42" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">failf<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">data<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="21">"LDAP local: search ldap_parse_result %s"<pos:position pos:line="43" pos:column="62"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="44" pos:column="15">ldap_err2string<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">rc<pos:position pos:line="44" pos:column="33"/></name></expr></argument>)<pos:position pos:line="44" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="45" pos:column="9">*<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">err<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <name pos:line="45" pos:column="16">CURLE_LDAP_SEARCH_FAILED<pos:position pos:line="45" pos:column="40"/></name></expr>;<pos:position pos:line="45" pos:column="41"/></expr_stmt>
      }<pos:position pos:line="46" pos:column="8"/></block></then>
      <elseif pos:line="47" pos:column="7">else <if pos:line="47" pos:column="12">if<condition pos:line="47" pos:column="14">(<expr><name pos:line="47" pos:column="15">code<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">&amp;&amp;<pos:position pos:line="47" pos:column="30"/></operator> <name pos:line="47" pos:column="23">code<pos:position pos:line="47" pos:column="27"/></name> <operator pos:line="47" pos:column="28">!=<pos:position pos:line="47" pos:column="30"/></operator> <name pos:line="47" pos:column="31">LDAP_SIZELIMIT_EXCEEDED<pos:position pos:line="47" pos:column="54"/></name></expr>)<pos:position pos:line="47" pos:column="55"/></condition><then pos:line="47" pos:column="55"> <block pos:line="47" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">failf<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><name pos:line="48" pos:column="15">data<pos:position pos:line="48" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="21">"LDAP remote: search failed %s %s"<pos:position pos:line="48" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="57">ldap_err2string<pos:position pos:line="48" pos:column="72"/></name><argument_list pos:line="48" pos:column="72">(<argument><expr><name pos:line="48" pos:column="73">rc<pos:position pos:line="48" pos:column="75"/></name></expr></argument>)<pos:position pos:line="48" pos:column="76"/></argument_list></call></expr></argument>,
              <argument><expr><ternary><condition><expr><name pos:line="49" pos:column="15">info<pos:position pos:line="49" pos:column="19"/></name></expr> ?<pos:position pos:line="49" pos:column="21"/></condition><then pos:line="49" pos:column="21"> <expr><name pos:line="49" pos:column="22">info<pos:position pos:line="49" pos:column="26"/></name></expr> <pos:position pos:line="49" pos:column="27"/></then><else pos:line="49" pos:column="27">: <expr><literal type="string" pos:line="49" pos:column="29">""<pos:position pos:line="49" pos:column="31"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="50" pos:column="9">*<pos:position pos:line="50" pos:column="10"/></operator><name pos:line="50" pos:column="10">err<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <name pos:line="50" pos:column="16">CURLE_LDAP_SEARCH_FAILED<pos:position pos:line="50" pos:column="40"/></name></expr>;<pos:position pos:line="50" pos:column="41"/></expr_stmt>
      }<pos:position pos:line="51" pos:column="8"/></block></then></if></elseif>
      <else pos:line="52" pos:column="7">else <block pos:line="52" pos:column="12">{
        <comment type="block" pos:line="53" pos:column="9">/* successful */</comment>
        <if pos:line="54" pos:column="9">if<condition pos:line="54" pos:column="11">(<expr><name pos:line="54" pos:column="12">code<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">==<pos:position pos:line="54" pos:column="19"/></operator> <name pos:line="54" pos:column="20">LDAP_SIZELIMIT_EXCEEDED<pos:position pos:line="54" pos:column="43"/></name></expr>)<pos:position pos:line="54" pos:column="44"/></condition><then pos:line="54" pos:column="44">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="11">infof<pos:position pos:line="55" pos:column="16"/></name><argument_list pos:line="55" pos:column="16">(<argument><expr><name pos:line="55" pos:column="17">data<pos:position pos:line="55" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="23">"There are more than %d entries\n"<pos:position pos:line="55" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="59">lr<pos:position pos:line="55" pos:column="61"/></name><operator pos:line="55" pos:column="61">-&gt;<pos:position pos:line="55" pos:column="66"/></operator><name pos:line="55" pos:column="63">nument<pos:position pos:line="55" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="71"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">data<pos:position pos:line="56" pos:column="13"/></name><operator pos:line="56" pos:column="13">-&gt;<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="15">req<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">.<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">size<pos:position pos:line="56" pos:column="23"/></name></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <name><name pos:line="56" pos:column="26">data<pos:position pos:line="56" pos:column="30"/></name><operator pos:line="56" pos:column="30">-&gt;<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="32">req<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">.<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="36">bytecount<pos:position pos:line="56" pos:column="45"/></name></name></expr>;<pos:position pos:line="56" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="57" pos:column="9">*<pos:position pos:line="57" pos:column="10"/></operator><name pos:line="57" pos:column="10">err<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <name pos:line="57" pos:column="16">CURLE_OK<pos:position pos:line="57" pos:column="24"/></name></expr>;<pos:position pos:line="57" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="58" pos:column="9">ret<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">=<pos:position pos:line="58" pos:column="14"/></operator> <literal type="number" pos:line="58" pos:column="15">0<pos:position pos:line="58" pos:column="16"/></literal></expr>;<pos:position pos:line="58" pos:column="17"/></expr_stmt>
      }<pos:position pos:line="59" pos:column="8"/></block></else></if>
      <expr_stmt><expr><name><name pos:line="60" pos:column="7">lr<pos:position pos:line="60" pos:column="9"/></name><operator pos:line="60" pos:column="9">-&gt;<pos:position pos:line="60" pos:column="14"/></operator><name pos:line="60" pos:column="11">msgid<pos:position pos:line="60" pos:column="16"/></name></name> <operator pos:line="60" pos:column="17">=<pos:position pos:line="60" pos:column="18"/></operator> <literal type="number" pos:line="60" pos:column="19">0<pos:position pos:line="60" pos:column="20"/></literal></expr>;<pos:position pos:line="60" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">ldap_memfree<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><name pos:line="61" pos:column="20">info<pos:position pos:line="61" pos:column="24"/></name></expr></argument>)<pos:position pos:line="61" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt>
      <break pos:line="62" pos:column="7">break;<pos:position pos:line="62" pos:column="13"/></break>
    }<pos:position pos:line="63" pos:column="6"/></block></then>
    <elseif pos:line="64" pos:column="5">else <if pos:line="64" pos:column="10">if<condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">msgtype<pos:position pos:line="64" pos:column="20"/></name> <operator pos:line="64" pos:column="21">!=<pos:position pos:line="64" pos:column="23"/></operator> <name pos:line="64" pos:column="24">LDAP_RES_SEARCH_ENTRY<pos:position pos:line="64" pos:column="45"/></name></expr>)<pos:position pos:line="64" pos:column="46"/></condition><then pos:line="64" pos:column="46">
      <block type="pseudo"><continue pos:line="65" pos:column="7">continue;<pos:position pos:line="65" pos:column="16"/></continue></block></then></if></elseif></if>

    <expr_stmt><expr><name><name pos:line="67" pos:column="5">lr<pos:position pos:line="67" pos:column="7"/></name><operator pos:line="67" pos:column="7">-&gt;<pos:position pos:line="67" pos:column="12"/></operator><name pos:line="67" pos:column="9">nument<pos:position pos:line="67" pos:column="15"/></name></name><operator pos:line="67" pos:column="15">++<pos:position pos:line="67" pos:column="17"/></operator></expr>;<pos:position pos:line="67" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="68" pos:column="5">rc<pos:position pos:line="68" pos:column="7"/></name> <operator pos:line="68" pos:column="8">=<pos:position pos:line="68" pos:column="9"/></operator> <call><name pos:line="68" pos:column="10">ldap_get_dn_ber<pos:position pos:line="68" pos:column="25"/></name><argument_list pos:line="68" pos:column="25">(<argument><expr><name><name pos:line="68" pos:column="26">li<pos:position pos:line="68" pos:column="28"/></name><operator pos:line="68" pos:column="28">-&gt;<pos:position pos:line="68" pos:column="33"/></operator><name pos:line="68" pos:column="30">ld<pos:position pos:line="68" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="34">ent<pos:position pos:line="68" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="39">&amp;<pos:position pos:line="68" pos:column="44"/></operator><name pos:line="68" pos:column="40">ber<pos:position pos:line="68" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="45">&amp;<pos:position pos:line="68" pos:column="50"/></operator><name pos:line="68" pos:column="46">bv<pos:position pos:line="68" pos:column="48"/></name></expr></argument>)<pos:position pos:line="68" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="50"/></expr_stmt>
    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">(<expr><name pos:line="69" pos:column="8">rc<pos:position pos:line="69" pos:column="10"/></name> <operator pos:line="69" pos:column="11">&lt;<pos:position pos:line="69" pos:column="15"/></operator> <literal type="number" pos:line="69" pos:column="13">0<pos:position pos:line="69" pos:column="14"/></literal></expr>)<pos:position pos:line="69" pos:column="15"/></condition><then pos:line="69" pos:column="15"> <block pos:line="69" pos:column="16">{
      <comment type="block" pos:line="70" pos:column="7">/* TODO: verify that this is really how this return code should be
         handled */</comment>
      <expr_stmt><expr><operator pos:line="72" pos:column="7">*<pos:position pos:line="72" pos:column="8"/></operator><name pos:line="72" pos:column="8">err<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">=<pos:position pos:line="72" pos:column="13"/></operator> <name pos:line="72" pos:column="14">CURLE_RECV_ERROR<pos:position pos:line="72" pos:column="30"/></name></expr>;<pos:position pos:line="72" pos:column="31"/></expr_stmt>
      <return pos:line="73" pos:column="7">return <expr><operator pos:line="73" pos:column="14">-<pos:position pos:line="73" pos:column="15"/></operator><literal type="number" pos:line="73" pos:column="15">1<pos:position pos:line="73" pos:column="16"/></literal></expr>;<pos:position pos:line="73" pos:column="17"/></return>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="75" pos:column="5">writeerr<pos:position pos:line="75" pos:column="13"/></name> <operator pos:line="75" pos:column="14">=<pos:position pos:line="75" pos:column="15"/></operator> <call><name pos:line="75" pos:column="16">Curl_client_write<pos:position pos:line="75" pos:column="33"/></name><argument_list pos:line="75" pos:column="33">(<argument><expr><name pos:line="75" pos:column="34">conn<pos:position pos:line="75" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="40">CLIENTWRITE_BODY<pos:position pos:line="75" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="58">(<pos:position pos:line="75" pos:column="59"/></operator><name pos:line="75" pos:column="59">char<pos:position pos:line="75" pos:column="63"/></name> <operator pos:line="75" pos:column="64">*<pos:position pos:line="75" pos:column="65"/></operator><operator pos:line="75" pos:column="65">)<pos:position pos:line="75" pos:column="66"/></operator><literal type="string" pos:line="75" pos:column="66">"DN: "<pos:position pos:line="75" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="74">4<pos:position pos:line="75" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="77"/></expr_stmt>
    <if pos:line="76" pos:column="5">if<condition pos:line="76" pos:column="7">(<expr><name pos:line="76" pos:column="8">writeerr<pos:position pos:line="76" pos:column="16"/></name></expr>)<pos:position pos:line="76" pos:column="17"/></condition><then pos:line="76" pos:column="17"> <block pos:line="76" pos:column="18">{
      <expr_stmt><expr><operator pos:line="77" pos:column="7">*<pos:position pos:line="77" pos:column="8"/></operator><name pos:line="77" pos:column="8">err<pos:position pos:line="77" pos:column="11"/></name> <operator pos:line="77" pos:column="12">=<pos:position pos:line="77" pos:column="13"/></operator> <name pos:line="77" pos:column="14">writeerr<pos:position pos:line="77" pos:column="22"/></name></expr>;<pos:position pos:line="77" pos:column="23"/></expr_stmt>
      <return pos:line="78" pos:column="7">return <expr><operator pos:line="78" pos:column="14">-<pos:position pos:line="78" pos:column="15"/></operator><literal type="number" pos:line="78" pos:column="15">1<pos:position pos:line="78" pos:column="16"/></literal></expr>;<pos:position pos:line="78" pos:column="17"/></return>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="81" pos:column="5">writeerr<pos:position pos:line="81" pos:column="13"/></name> <operator pos:line="81" pos:column="14">=<pos:position pos:line="81" pos:column="15"/></operator> <call><name pos:line="81" pos:column="16">Curl_client_write<pos:position pos:line="81" pos:column="33"/></name><argument_list pos:line="81" pos:column="33">(<argument><expr><name pos:line="81" pos:column="34">conn<pos:position pos:line="81" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="40">CLIENTWRITE_BODY<pos:position pos:line="81" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="58">(<pos:position pos:line="81" pos:column="59"/></operator><name pos:line="81" pos:column="59">char<pos:position pos:line="81" pos:column="63"/></name> <operator pos:line="81" pos:column="64">*<pos:position pos:line="81" pos:column="65"/></operator><operator pos:line="81" pos:column="65">)<pos:position pos:line="81" pos:column="66"/></operator><name><name pos:line="81" pos:column="66">bv<pos:position pos:line="81" pos:column="68"/></name><operator pos:line="81" pos:column="68">.<pos:position pos:line="81" pos:column="69"/></operator><name pos:line="81" pos:column="69">bv_val<pos:position pos:line="81" pos:column="75"/></name></name></expr></argument>,
                                 <argument><expr><name><name pos:line="82" pos:column="34">bv<pos:position pos:line="82" pos:column="36"/></name><operator pos:line="82" pos:column="36">.<pos:position pos:line="82" pos:column="37"/></operator><name pos:line="82" pos:column="37">bv_len<pos:position pos:line="82" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
    <if pos:line="83" pos:column="5">if<condition pos:line="83" pos:column="7">(<expr><name pos:line="83" pos:column="8">writeerr<pos:position pos:line="83" pos:column="16"/></name></expr>)<pos:position pos:line="83" pos:column="17"/></condition><then pos:line="83" pos:column="17"> <block pos:line="83" pos:column="18">{
      <expr_stmt><expr><operator pos:line="84" pos:column="7">*<pos:position pos:line="84" pos:column="8"/></operator><name pos:line="84" pos:column="8">err<pos:position pos:line="84" pos:column="11"/></name> <operator pos:line="84" pos:column="12">=<pos:position pos:line="84" pos:column="13"/></operator> <name pos:line="84" pos:column="14">writeerr<pos:position pos:line="84" pos:column="22"/></name></expr>;<pos:position pos:line="84" pos:column="23"/></expr_stmt>
      <return pos:line="85" pos:column="7">return <expr><operator pos:line="85" pos:column="14">-<pos:position pos:line="85" pos:column="15"/></operator><literal type="number" pos:line="85" pos:column="15">1<pos:position pos:line="85" pos:column="16"/></literal></expr>;<pos:position pos:line="85" pos:column="17"/></return>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="88" pos:column="5">writeerr<pos:position pos:line="88" pos:column="13"/></name> <operator pos:line="88" pos:column="14">=<pos:position pos:line="88" pos:column="15"/></operator> <call><name pos:line="88" pos:column="16">Curl_client_write<pos:position pos:line="88" pos:column="33"/></name><argument_list pos:line="88" pos:column="33">(<argument><expr><name pos:line="88" pos:column="34">conn<pos:position pos:line="88" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="40">CLIENTWRITE_BODY<pos:position pos:line="88" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="58">(<pos:position pos:line="88" pos:column="59"/></operator><name pos:line="88" pos:column="59">char<pos:position pos:line="88" pos:column="63"/></name> <operator pos:line="88" pos:column="64">*<pos:position pos:line="88" pos:column="65"/></operator><operator pos:line="88" pos:column="65">)<pos:position pos:line="88" pos:column="66"/></operator><literal type="string" pos:line="88" pos:column="66">"\n"<pos:position pos:line="88" pos:column="70"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="72">1<pos:position pos:line="88" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="75"/></expr_stmt>
    <if pos:line="89" pos:column="5">if<condition pos:line="89" pos:column="7">(<expr><name pos:line="89" pos:column="8">writeerr<pos:position pos:line="89" pos:column="16"/></name></expr>)<pos:position pos:line="89" pos:column="17"/></condition><then pos:line="89" pos:column="17"> <block pos:line="89" pos:column="18">{
      <expr_stmt><expr><operator pos:line="90" pos:column="7">*<pos:position pos:line="90" pos:column="8"/></operator><name pos:line="90" pos:column="8">err<pos:position pos:line="90" pos:column="11"/></name> <operator pos:line="90" pos:column="12">=<pos:position pos:line="90" pos:column="13"/></operator> <name pos:line="90" pos:column="14">writeerr<pos:position pos:line="90" pos:column="22"/></name></expr>;<pos:position pos:line="90" pos:column="23"/></expr_stmt>
      <return pos:line="91" pos:column="7">return <expr><operator pos:line="91" pos:column="14">-<pos:position pos:line="91" pos:column="15"/></operator><literal type="number" pos:line="91" pos:column="15">1<pos:position pos:line="91" pos:column="16"/></literal></expr>;<pos:position pos:line="91" pos:column="17"/></return>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="93" pos:column="5">data<pos:position pos:line="93" pos:column="9"/></name><operator pos:line="93" pos:column="9">-&gt;<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="11">req<pos:position pos:line="93" pos:column="14"/></name><operator pos:line="93" pos:column="14">.<pos:position pos:line="93" pos:column="15"/></operator><name pos:line="93" pos:column="15">bytecount<pos:position pos:line="93" pos:column="24"/></name></name> <operator pos:line="93" pos:column="25">+=<pos:position pos:line="93" pos:column="27"/></operator> <name><name pos:line="93" pos:column="28">bv<pos:position pos:line="93" pos:column="30"/></name><operator pos:line="93" pos:column="30">.<pos:position pos:line="93" pos:column="31"/></operator><name pos:line="93" pos:column="31">bv_len<pos:position pos:line="93" pos:column="37"/></name></name> <operator pos:line="93" pos:column="38">+<pos:position pos:line="93" pos:column="39"/></operator> <literal type="number" pos:line="93" pos:column="40">5<pos:position pos:line="93" pos:column="41"/></literal></expr>;<pos:position pos:line="93" pos:column="42"/></expr_stmt>

    <for pos:line="95" pos:column="5">for<control pos:line="95" pos:column="8">(<init><expr><name pos:line="95" pos:column="9">rc<pos:position pos:line="95" pos:column="11"/></name> <operator pos:line="95" pos:column="12">=<pos:position pos:line="95" pos:column="13"/></operator> <call><name pos:line="95" pos:column="14">ldap_get_attribute_ber<pos:position pos:line="95" pos:column="36"/></name><argument_list pos:line="95" pos:column="36">(<argument><expr><name><name pos:line="95" pos:column="37">li<pos:position pos:line="95" pos:column="39"/></name><operator pos:line="95" pos:column="39">-&gt;<pos:position pos:line="95" pos:column="44"/></operator><name pos:line="95" pos:column="41">ld<pos:position pos:line="95" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="45">ent<pos:position pos:line="95" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="50">ber<pos:position pos:line="95" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="55">&amp;<pos:position pos:line="95" pos:column="60"/></operator><name pos:line="95" pos:column="56">bv<pos:position pos:line="95" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="60">bvp<pos:position pos:line="95" pos:column="63"/></name></expr></argument>)<pos:position pos:line="95" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="65"/></init>
      <condition><expr><name pos:line="96" pos:column="7">rc<pos:position pos:line="96" pos:column="9"/></name> <operator pos:line="96" pos:column="10">==<pos:position pos:line="96" pos:column="12"/></operator> <name pos:line="96" pos:column="13">LDAP_SUCCESS<pos:position pos:line="96" pos:column="25"/></name></expr>;<pos:position pos:line="96" pos:column="26"/></condition>
      <incr><expr><name pos:line="97" pos:column="7">rc<pos:position pos:line="97" pos:column="9"/></name> <operator pos:line="97" pos:column="10">=<pos:position pos:line="97" pos:column="11"/></operator> <call><name pos:line="97" pos:column="12">ldap_get_attribute_ber<pos:position pos:line="97" pos:column="34"/></name><argument_list pos:line="97" pos:column="34">(<argument><expr><name><name pos:line="97" pos:column="35">li<pos:position pos:line="97" pos:column="37"/></name><operator pos:line="97" pos:column="37">-&gt;<pos:position pos:line="97" pos:column="42"/></operator><name pos:line="97" pos:column="39">ld<pos:position pos:line="97" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="43">ent<pos:position pos:line="97" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="48">ber<pos:position pos:line="97" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="53">&amp;<pos:position pos:line="97" pos:column="58"/></operator><name pos:line="97" pos:column="54">bv<pos:position pos:line="97" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="58">bvp<pos:position pos:line="97" pos:column="61"/></name></expr></argument>)<pos:position pos:line="97" pos:column="62"/></argument_list></call></expr></incr>)<pos:position pos:line="97" pos:column="63"/></control> <block pos:line="97" pos:column="64">{
      <decl_stmt><decl><type><name pos:line="98" pos:column="7">int<pos:position pos:line="98" pos:column="10"/></name></type> <name pos:line="98" pos:column="11">i<pos:position pos:line="98" pos:column="12"/></name></decl>;<pos:position pos:line="98" pos:column="13"/></decl_stmt>

      <if pos:line="100" pos:column="7">if<condition pos:line="100" pos:column="9">(<expr><name><name pos:line="100" pos:column="10">bv<pos:position pos:line="100" pos:column="12"/></name><operator pos:line="100" pos:column="12">.<pos:position pos:line="100" pos:column="13"/></operator><name pos:line="100" pos:column="13">bv_val<pos:position pos:line="100" pos:column="19"/></name></name> <operator pos:line="100" pos:column="20">==<pos:position pos:line="100" pos:column="22"/></operator> <name pos:line="100" pos:column="23">NULL<pos:position pos:line="100" pos:column="27"/></name></expr>)<pos:position pos:line="100" pos:column="28"/></condition><then pos:line="100" pos:column="28"> <block type="pseudo"><break pos:line="100" pos:column="29">break;<pos:position pos:line="100" pos:column="35"/></break></block></then></if>

      <if pos:line="102" pos:column="7">if<condition pos:line="102" pos:column="9">(<expr><name><name pos:line="102" pos:column="10">bv<pos:position pos:line="102" pos:column="12"/></name><operator pos:line="102" pos:column="12">.<pos:position pos:line="102" pos:column="13"/></operator><name pos:line="102" pos:column="13">bv_len<pos:position pos:line="102" pos:column="19"/></name></name> <operator pos:line="102" pos:column="20">&gt;<pos:position pos:line="102" pos:column="24"/></operator> <literal type="number" pos:line="102" pos:column="22">7<pos:position pos:line="102" pos:column="23"/></literal> <operator pos:line="102" pos:column="24">&amp;&amp;<pos:position pos:line="102" pos:column="34"/></operator> <operator pos:line="102" pos:column="27">!<pos:position pos:line="102" pos:column="28"/></operator><call><name pos:line="102" pos:column="28">strncmp<pos:position pos:line="102" pos:column="35"/></name><argument_list pos:line="102" pos:column="35">(<argument><expr><name><name pos:line="102" pos:column="36">bv<pos:position pos:line="102" pos:column="38"/></name><operator pos:line="102" pos:column="38">.<pos:position pos:line="102" pos:column="39"/></operator><name pos:line="102" pos:column="39">bv_val<pos:position pos:line="102" pos:column="45"/></name></name> <operator pos:line="102" pos:column="46">+<pos:position pos:line="102" pos:column="47"/></operator> <name><name pos:line="102" pos:column="48">bv<pos:position pos:line="102" pos:column="50"/></name><operator pos:line="102" pos:column="50">.<pos:position pos:line="102" pos:column="51"/></operator><name pos:line="102" pos:column="51">bv_len<pos:position pos:line="102" pos:column="57"/></name></name> <operator pos:line="102" pos:column="58">-<pos:position pos:line="102" pos:column="59"/></operator> <literal type="number" pos:line="102" pos:column="60">7<pos:position pos:line="102" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="63">";binary"<pos:position pos:line="102" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="102" pos:column="74">7<pos:position pos:line="102" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="102" pos:column="77"/></condition><then pos:line="102" pos:column="77">
        <block type="pseudo"><expr_stmt><expr><name pos:line="103" pos:column="9">binary<pos:position pos:line="103" pos:column="15"/></name> <operator pos:line="103" pos:column="16">=<pos:position pos:line="103" pos:column="17"/></operator> <literal type="number" pos:line="103" pos:column="18">1<pos:position pos:line="103" pos:column="19"/></literal></expr>;<pos:position pos:line="103" pos:column="20"/></expr_stmt></block></then>
      <else pos:line="104" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="9">binary<pos:position pos:line="105" pos:column="15"/></name> <operator pos:line="105" pos:column="16">=<pos:position pos:line="105" pos:column="17"/></operator> <literal type="number" pos:line="105" pos:column="18">0<pos:position pos:line="105" pos:column="19"/></literal></expr>;<pos:position pos:line="105" pos:column="20"/></expr_stmt></block></else></if>

      <for pos:line="107" pos:column="7">for<control pos:line="107" pos:column="10">(<init><expr><name pos:line="107" pos:column="11">i<pos:position pos:line="107" pos:column="12"/></name> <operator pos:line="107" pos:column="13">=<pos:position pos:line="107" pos:column="14"/></operator> <literal type="number" pos:line="107" pos:column="15">0<pos:position pos:line="107" pos:column="16"/></literal></expr>;<pos:position pos:line="107" pos:column="17"/></init> <condition><expr><name><name pos:line="107" pos:column="18">bvals<pos:position pos:line="107" pos:column="23"/></name><index pos:line="107" pos:column="23">[<expr><name pos:line="107" pos:column="24">i<pos:position pos:line="107" pos:column="25"/></name></expr>]<pos:position pos:line="107" pos:column="26"/></index></name><operator pos:line="107" pos:column="26">.<pos:position pos:line="107" pos:column="27"/></operator><name pos:line="107" pos:column="27">bv_val<pos:position pos:line="107" pos:column="33"/></name> <operator pos:line="107" pos:column="34">!=<pos:position pos:line="107" pos:column="36"/></operator> <name pos:line="107" pos:column="37">NULL<pos:position pos:line="107" pos:column="41"/></name></expr>;<pos:position pos:line="107" pos:column="42"/></condition> <incr><expr><name pos:line="107" pos:column="43">i<pos:position pos:line="107" pos:column="44"/></name><operator pos:line="107" pos:column="44">++<pos:position pos:line="107" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="107" pos:column="47"/></control> <block pos:line="107" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="108" pos:column="9">int<pos:position pos:line="108" pos:column="12"/></name></type> <name pos:line="108" pos:column="13">binval<pos:position pos:line="108" pos:column="19"/></name> <init pos:line="108" pos:column="20">= <expr><literal type="number" pos:line="108" pos:column="22">0<pos:position pos:line="108" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="108" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><name pos:line="109" pos:column="9">writeerr<pos:position pos:line="109" pos:column="17"/></name> <operator pos:line="109" pos:column="18">=<pos:position pos:line="109" pos:column="19"/></operator> <call><name pos:line="109" pos:column="20">Curl_client_write<pos:position pos:line="109" pos:column="37"/></name><argument_list pos:line="109" pos:column="37">(<argument><expr><name pos:line="109" pos:column="38">conn<pos:position pos:line="109" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="44">CLIENTWRITE_BODY<pos:position pos:line="109" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="62">(<pos:position pos:line="109" pos:column="63"/></operator><name pos:line="109" pos:column="63">char<pos:position pos:line="109" pos:column="67"/></name> <operator pos:line="109" pos:column="68">*<pos:position pos:line="109" pos:column="69"/></operator><operator pos:line="109" pos:column="69">)<pos:position pos:line="109" pos:column="70"/></operator><literal type="string" pos:line="109" pos:column="70">"\t"<pos:position pos:line="109" pos:column="74"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="109" pos:column="76">1<pos:position pos:line="109" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="79"/></expr_stmt>
        <if pos:line="110" pos:column="9">if<condition pos:line="110" pos:column="11">(<expr><name pos:line="110" pos:column="12">writeerr<pos:position pos:line="110" pos:column="20"/></name></expr>)<pos:position pos:line="110" pos:column="21"/></condition><then pos:line="110" pos:column="21"> <block pos:line="110" pos:column="22">{
          <expr_stmt><expr><operator pos:line="111" pos:column="11">*<pos:position pos:line="111" pos:column="12"/></operator><name pos:line="111" pos:column="12">err<pos:position pos:line="111" pos:column="15"/></name> <operator pos:line="111" pos:column="16">=<pos:position pos:line="111" pos:column="17"/></operator> <name pos:line="111" pos:column="18">writeerr<pos:position pos:line="111" pos:column="26"/></name></expr>;<pos:position pos:line="111" pos:column="27"/></expr_stmt>
          <return pos:line="112" pos:column="11">return <expr><operator pos:line="112" pos:column="18">-<pos:position pos:line="112" pos:column="19"/></operator><literal type="number" pos:line="112" pos:column="19">1<pos:position pos:line="112" pos:column="20"/></literal></expr>;<pos:position pos:line="112" pos:column="21"/></return>
        }<pos:position pos:line="113" pos:column="10"/></block></then></if>

       <expr_stmt><expr><name pos:line="115" pos:column="8">writeerr<pos:position pos:line="115" pos:column="16"/></name> <operator pos:line="115" pos:column="17">=<pos:position pos:line="115" pos:column="18"/></operator> <call><name pos:line="115" pos:column="19">Curl_client_write<pos:position pos:line="115" pos:column="36"/></name><argument_list pos:line="115" pos:column="36">(<argument><expr><name pos:line="115" pos:column="37">conn<pos:position pos:line="115" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="43">CLIENTWRITE_BODY<pos:position pos:line="115" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="115" pos:column="61">(<pos:position pos:line="115" pos:column="62"/></operator><name pos:line="115" pos:column="62">char<pos:position pos:line="115" pos:column="66"/></name> <operator pos:line="115" pos:column="67">*<pos:position pos:line="115" pos:column="68"/></operator><operator pos:line="115" pos:column="68">)<pos:position pos:line="115" pos:column="69"/></operator><name><name pos:line="115" pos:column="69">bv<pos:position pos:line="115" pos:column="71"/></name><operator pos:line="115" pos:column="71">.<pos:position pos:line="115" pos:column="72"/></operator><name pos:line="115" pos:column="72">bv_val<pos:position pos:line="115" pos:column="78"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="116" pos:column="37">bv<pos:position pos:line="116" pos:column="39"/></name><operator pos:line="116" pos:column="39">.<pos:position pos:line="116" pos:column="40"/></operator><name pos:line="116" pos:column="40">bv_len<pos:position pos:line="116" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="116" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="48"/></expr_stmt>
       <if pos:line="117" pos:column="8">if<condition pos:line="117" pos:column="10">(<expr><name pos:line="117" pos:column="11">writeerr<pos:position pos:line="117" pos:column="19"/></name></expr>)<pos:position pos:line="117" pos:column="20"/></condition><then pos:line="117" pos:column="20"> <block pos:line="117" pos:column="21">{
         <expr_stmt><expr><operator pos:line="118" pos:column="10">*<pos:position pos:line="118" pos:column="11"/></operator><name pos:line="118" pos:column="11">err<pos:position pos:line="118" pos:column="14"/></name> <operator pos:line="118" pos:column="15">=<pos:position pos:line="118" pos:column="16"/></operator> <name pos:line="118" pos:column="17">writeerr<pos:position pos:line="118" pos:column="25"/></name></expr>;<pos:position pos:line="118" pos:column="26"/></expr_stmt>
         <return pos:line="119" pos:column="10">return <expr><operator pos:line="119" pos:column="17">-<pos:position pos:line="119" pos:column="18"/></operator><literal type="number" pos:line="119" pos:column="18">1<pos:position pos:line="119" pos:column="19"/></literal></expr>;<pos:position pos:line="119" pos:column="20"/></return>
       }<pos:position pos:line="120" pos:column="9"/></block></then></if>

        <expr_stmt><expr><name pos:line="122" pos:column="9">writeerr<pos:position pos:line="122" pos:column="17"/></name> <operator pos:line="122" pos:column="18">=<pos:position pos:line="122" pos:column="19"/></operator> <call><name pos:line="122" pos:column="20">Curl_client_write<pos:position pos:line="122" pos:column="37"/></name><argument_list pos:line="122" pos:column="37">(<argument><expr><name pos:line="122" pos:column="38">conn<pos:position pos:line="122" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="44">CLIENTWRITE_BODY<pos:position pos:line="122" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="122" pos:column="62">(<pos:position pos:line="122" pos:column="63"/></operator><name pos:line="122" pos:column="63">char<pos:position pos:line="122" pos:column="67"/></name> <operator pos:line="122" pos:column="68">*<pos:position pos:line="122" pos:column="69"/></operator><operator pos:line="122" pos:column="69">)<pos:position pos:line="122" pos:column="70"/></operator><literal type="string" pos:line="122" pos:column="70">":"<pos:position pos:line="122" pos:column="73"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="75">1<pos:position pos:line="122" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="78"/></expr_stmt>
       <if pos:line="123" pos:column="8">if<condition pos:line="123" pos:column="10">(<expr><name pos:line="123" pos:column="11">writeerr<pos:position pos:line="123" pos:column="19"/></name></expr>)<pos:position pos:line="123" pos:column="20"/></condition><then pos:line="123" pos:column="20"> <block pos:line="123" pos:column="21">{
         <expr_stmt><expr><operator pos:line="124" pos:column="10">*<pos:position pos:line="124" pos:column="11"/></operator><name pos:line="124" pos:column="11">err<pos:position pos:line="124" pos:column="14"/></name> <operator pos:line="124" pos:column="15">=<pos:position pos:line="124" pos:column="16"/></operator> <name pos:line="124" pos:column="17">writeerr<pos:position pos:line="124" pos:column="25"/></name></expr>;<pos:position pos:line="124" pos:column="26"/></expr_stmt>
         <return pos:line="125" pos:column="10">return <expr><operator pos:line="125" pos:column="17">-<pos:position pos:line="125" pos:column="18"/></operator><literal type="number" pos:line="125" pos:column="18">1<pos:position pos:line="125" pos:column="19"/></literal></expr>;<pos:position pos:line="125" pos:column="20"/></return>
       }<pos:position pos:line="126" pos:column="9"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="127" pos:column="9">data<pos:position pos:line="127" pos:column="13"/></name><operator pos:line="127" pos:column="13">-&gt;<pos:position pos:line="127" pos:column="18"/></operator><name pos:line="127" pos:column="15">req<pos:position pos:line="127" pos:column="18"/></name><operator pos:line="127" pos:column="18">.<pos:position pos:line="127" pos:column="19"/></operator><name pos:line="127" pos:column="19">bytecount<pos:position pos:line="127" pos:column="28"/></name></name> <operator pos:line="127" pos:column="29">+=<pos:position pos:line="127" pos:column="31"/></operator> <name><name pos:line="127" pos:column="32">bv<pos:position pos:line="127" pos:column="34"/></name><operator pos:line="127" pos:column="34">.<pos:position pos:line="127" pos:column="35"/></operator><name pos:line="127" pos:column="35">bv_len<pos:position pos:line="127" pos:column="41"/></name></name> <operator pos:line="127" pos:column="42">+<pos:position pos:line="127" pos:column="43"/></operator> <literal type="number" pos:line="127" pos:column="44">2<pos:position pos:line="127" pos:column="45"/></literal></expr>;<pos:position pos:line="127" pos:column="46"/></expr_stmt>

        <if pos:line="129" pos:column="9">if<condition pos:line="129" pos:column="11">(<expr><operator pos:line="129" pos:column="12">!<pos:position pos:line="129" pos:column="13"/></operator><name pos:line="129" pos:column="13">binary<pos:position pos:line="129" pos:column="19"/></name></expr>)<pos:position pos:line="129" pos:column="20"/></condition><then pos:line="129" pos:column="20"> <block pos:line="129" pos:column="21">{
          <comment type="block" pos:line="130" pos:column="11">/* check for leading or trailing whitespace */</comment>
          <if pos:line="131" pos:column="11">if<condition pos:line="131" pos:column="13">(<expr><call><name pos:line="131" pos:column="14">ISSPACE<pos:position pos:line="131" pos:column="21"/></name><argument_list pos:line="131" pos:column="21">(<argument><expr><name><name pos:line="131" pos:column="22">bvals<pos:position pos:line="131" pos:column="27"/></name><index pos:line="131" pos:column="27">[<expr><name pos:line="131" pos:column="28">i<pos:position pos:line="131" pos:column="29"/></name></expr>]<pos:position pos:line="131" pos:column="30"/></index></name><operator pos:line="131" pos:column="30">.<pos:position pos:line="131" pos:column="31"/></operator><name><name pos:line="131" pos:column="31">bv_val<pos:position pos:line="131" pos:column="37"/></name><index pos:line="131" pos:column="37">[<expr><literal type="number" pos:line="131" pos:column="38">0<pos:position pos:line="131" pos:column="39"/></literal></expr>]<pos:position pos:line="131" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="131" pos:column="41"/></argument_list></call> <operator pos:line="131" pos:column="42">||<pos:position pos:line="131" pos:column="44"/></operator>
              <call><name pos:line="132" pos:column="15">ISSPACE<pos:position pos:line="132" pos:column="22"/></name><argument_list pos:line="132" pos:column="22">(<argument><expr><name><name pos:line="132" pos:column="23">bvals<pos:position pos:line="132" pos:column="28"/></name><index pos:line="132" pos:column="28">[<expr><name pos:line="132" pos:column="29">i<pos:position pos:line="132" pos:column="30"/></name></expr>]<pos:position pos:line="132" pos:column="31"/></index></name><operator pos:line="132" pos:column="31">.<pos:position pos:line="132" pos:column="32"/></operator><name><name pos:line="132" pos:column="32">bv_val<pos:position pos:line="132" pos:column="38"/></name><index pos:line="132" pos:column="38">[<expr><name><name pos:line="132" pos:column="39">bvals<pos:position pos:line="132" pos:column="44"/></name><index pos:line="132" pos:column="44">[<expr><name pos:line="132" pos:column="45">i<pos:position pos:line="132" pos:column="46"/></name></expr>]<pos:position pos:line="132" pos:column="47"/></index></name><operator pos:line="132" pos:column="47">.<pos:position pos:line="132" pos:column="48"/></operator><name pos:line="132" pos:column="48">bv_len<pos:position pos:line="132" pos:column="54"/></name><operator pos:line="132" pos:column="54">-<pos:position pos:line="132" pos:column="55"/></operator><literal type="number" pos:line="132" pos:column="55">1<pos:position pos:line="132" pos:column="56"/></literal></expr>]<pos:position pos:line="132" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="132" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="132" pos:column="59"/></condition><then pos:line="132" pos:column="59">
            <block type="pseudo"><expr_stmt><expr><name pos:line="133" pos:column="13">binval<pos:position pos:line="133" pos:column="19"/></name> <operator pos:line="133" pos:column="20">=<pos:position pos:line="133" pos:column="21"/></operator> <literal type="number" pos:line="133" pos:column="22">1<pos:position pos:line="133" pos:column="23"/></literal></expr>;<pos:position pos:line="133" pos:column="24"/></expr_stmt></block></then>
          <else pos:line="134" pos:column="11">else <block pos:line="134" pos:column="16">{
            <comment type="block" pos:line="135" pos:column="13">/* check for unprintable characters */</comment>
            <decl_stmt><decl><type><name pos:line="136" pos:column="13">unsigned<pos:position pos:line="136" pos:column="21"/></name> <name pos:line="136" pos:column="22">int<pos:position pos:line="136" pos:column="25"/></name></type> <name pos:line="136" pos:column="26">j<pos:position pos:line="136" pos:column="27"/></name></decl>;<pos:position pos:line="136" pos:column="28"/></decl_stmt>
            <for pos:line="137" pos:column="13">for<control pos:line="137" pos:column="16">(<init><expr><name pos:line="137" pos:column="17">j<pos:position pos:line="137" pos:column="18"/></name> <operator pos:line="137" pos:column="19">=<pos:position pos:line="137" pos:column="20"/></operator> <literal type="number" pos:line="137" pos:column="21">0<pos:position pos:line="137" pos:column="22"/></literal></expr>;<pos:position pos:line="137" pos:column="23"/></init> <condition><expr><name pos:line="137" pos:column="24">j<pos:position pos:line="137" pos:column="25"/></name><operator pos:line="137" pos:column="25">&lt;<pos:position pos:line="137" pos:column="29"/></operator><name><name pos:line="137" pos:column="26">bvals<pos:position pos:line="137" pos:column="31"/></name><index pos:line="137" pos:column="31">[<expr><name pos:line="137" pos:column="32">i<pos:position pos:line="137" pos:column="33"/></name></expr>]<pos:position pos:line="137" pos:column="34"/></index></name><operator pos:line="137" pos:column="34">.<pos:position pos:line="137" pos:column="35"/></operator><name pos:line="137" pos:column="35">bv_len<pos:position pos:line="137" pos:column="41"/></name></expr>;<pos:position pos:line="137" pos:column="42"/></condition> <incr><expr><name pos:line="137" pos:column="43">j<pos:position pos:line="137" pos:column="44"/></name><operator pos:line="137" pos:column="44">++<pos:position pos:line="137" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="137" pos:column="47"/></control>
              <block type="pseudo"><if pos:line="138" pos:column="15">if<condition pos:line="138" pos:column="17">(<expr><operator pos:line="138" pos:column="18">!<pos:position pos:line="138" pos:column="19"/></operator><call><name pos:line="138" pos:column="19">ISPRINT<pos:position pos:line="138" pos:column="26"/></name><argument_list pos:line="138" pos:column="26">(<argument><expr><name><name pos:line="138" pos:column="27">bvals<pos:position pos:line="138" pos:column="32"/></name><index pos:line="138" pos:column="32">[<expr><name pos:line="138" pos:column="33">i<pos:position pos:line="138" pos:column="34"/></name></expr>]<pos:position pos:line="138" pos:column="35"/></index></name><operator pos:line="138" pos:column="35">.<pos:position pos:line="138" pos:column="36"/></operator><name><name pos:line="138" pos:column="36">bv_val<pos:position pos:line="138" pos:column="42"/></name><index pos:line="138" pos:column="42">[<expr><name pos:line="138" pos:column="43">j<pos:position pos:line="138" pos:column="44"/></name></expr>]<pos:position pos:line="138" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="138" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="138" pos:column="47"/></condition><then pos:line="138" pos:column="47"> <block pos:line="138" pos:column="48">{
                <expr_stmt><expr><name pos:line="139" pos:column="17">binval<pos:position pos:line="139" pos:column="23"/></name> <operator pos:line="139" pos:column="24">=<pos:position pos:line="139" pos:column="25"/></operator> <literal type="number" pos:line="139" pos:column="26">1<pos:position pos:line="139" pos:column="27"/></literal></expr>;<pos:position pos:line="139" pos:column="28"/></expr_stmt>
                <break pos:line="140" pos:column="17">break;<pos:position pos:line="140" pos:column="23"/></break>
              }<pos:position pos:line="141" pos:column="16"/></block></then></if></block></for>
          }<pos:position pos:line="142" pos:column="12"/></block></else></if>
        }<pos:position pos:line="143" pos:column="10"/></block></then></if>
        <if pos:line="144" pos:column="9">if<condition pos:line="144" pos:column="11">(<expr><name pos:line="144" pos:column="12">binary<pos:position pos:line="144" pos:column="18"/></name> <operator pos:line="144" pos:column="19">||<pos:position pos:line="144" pos:column="21"/></operator> <name pos:line="144" pos:column="22">binval<pos:position pos:line="144" pos:column="28"/></name></expr>)<pos:position pos:line="144" pos:column="29"/></condition><then pos:line="144" pos:column="29"> <block pos:line="144" pos:column="30">{
          <decl_stmt><decl><type><name pos:line="145" pos:column="11">char<pos:position pos:line="145" pos:column="15"/></name> <modifier pos:line="145" pos:column="16">*<pos:position pos:line="145" pos:column="17"/></modifier></type><name pos:line="145" pos:column="17">val_b64<pos:position pos:line="145" pos:column="24"/></name> <init pos:line="145" pos:column="25">= <expr><name pos:line="145" pos:column="27">NULL<pos:position pos:line="145" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="145" pos:column="32"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="146" pos:column="11">size_t<pos:position pos:line="146" pos:column="17"/></name></type> <name pos:line="146" pos:column="18">val_b64_sz<pos:position pos:line="146" pos:column="28"/></name> <init pos:line="146" pos:column="29">= <expr><literal type="number" pos:line="146" pos:column="31">0<pos:position pos:line="146" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="146" pos:column="33"/></decl_stmt>
          <comment type="block" pos:line="147" pos:column="11">/* Binary value, encode to base64. */</comment>
          <decl_stmt><decl><type><name pos:line="148" pos:column="11">CURLcode<pos:position pos:line="148" pos:column="19"/></name></type> <name pos:line="148" pos:column="20">error<pos:position pos:line="148" pos:column="25"/></name> <init pos:line="148" pos:column="26">= <expr><call><name pos:line="148" pos:column="28">Curl_base64_encode<pos:position pos:line="148" pos:column="46"/></name><argument_list pos:line="148" pos:column="46">(<argument><expr><name pos:line="148" pos:column="47">data<pos:position pos:line="148" pos:column="51"/></name></expr></argument>,
                                              <argument><expr><name><name pos:line="149" pos:column="47">bvals<pos:position pos:line="149" pos:column="52"/></name><index pos:line="149" pos:column="52">[<expr><name pos:line="149" pos:column="53">i<pos:position pos:line="149" pos:column="54"/></name></expr>]<pos:position pos:line="149" pos:column="55"/></index></name><operator pos:line="149" pos:column="55">.<pos:position pos:line="149" pos:column="56"/></operator><name pos:line="149" pos:column="56">bv_val<pos:position pos:line="149" pos:column="62"/></name></expr></argument>,
                                              <argument><expr><name><name pos:line="150" pos:column="47">bvals<pos:position pos:line="150" pos:column="52"/></name><index pos:line="150" pos:column="52">[<expr><name pos:line="150" pos:column="53">i<pos:position pos:line="150" pos:column="54"/></name></expr>]<pos:position pos:line="150" pos:column="55"/></index></name><operator pos:line="150" pos:column="55">.<pos:position pos:line="150" pos:column="56"/></operator><name pos:line="150" pos:column="56">bv_len<pos:position pos:line="150" pos:column="62"/></name></expr></argument>,
                                              <argument><expr><operator pos:line="151" pos:column="47">&amp;<pos:position pos:line="151" pos:column="52"/></operator><name pos:line="151" pos:column="48">val_b64<pos:position pos:line="151" pos:column="55"/></name></expr></argument>,
                                              <argument><expr><operator pos:line="152" pos:column="47">&amp;<pos:position pos:line="152" pos:column="52"/></operator><name pos:line="152" pos:column="48">val_b64_sz<pos:position pos:line="152" pos:column="58"/></name></expr></argument>)<pos:position pos:line="152" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="152" pos:column="60"/></decl_stmt>
          <if pos:line="153" pos:column="11">if<condition pos:line="153" pos:column="13">(<expr><name pos:line="153" pos:column="14">error<pos:position pos:line="153" pos:column="19"/></name></expr>)<pos:position pos:line="153" pos:column="20"/></condition><then pos:line="153" pos:column="20"> <block pos:line="153" pos:column="21">{
            <expr_stmt><expr><call><name pos:line="154" pos:column="13">ber_memfree<pos:position pos:line="154" pos:column="24"/></name><argument_list pos:line="154" pos:column="24">(<argument><expr><name pos:line="154" pos:column="25">bvals<pos:position pos:line="154" pos:column="30"/></name></expr></argument>)<pos:position pos:line="154" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="155" pos:column="13">ber_free<pos:position pos:line="155" pos:column="21"/></name><argument_list pos:line="155" pos:column="21">(<argument><expr><name pos:line="155" pos:column="22">ber<pos:position pos:line="155" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="155" pos:column="27">0<pos:position pos:line="155" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="155" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="156" pos:column="13">ldap_msgfree<pos:position pos:line="156" pos:column="25"/></name><argument_list pos:line="156" pos:column="25">(<argument><expr><name pos:line="156" pos:column="26">msg<pos:position pos:line="156" pos:column="29"/></name></expr></argument>)<pos:position pos:line="156" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="157" pos:column="13">*<pos:position pos:line="157" pos:column="14"/></operator><name pos:line="157" pos:column="14">err<pos:position pos:line="157" pos:column="17"/></name> <operator pos:line="157" pos:column="18">=<pos:position pos:line="157" pos:column="19"/></operator> <name pos:line="157" pos:column="20">error<pos:position pos:line="157" pos:column="25"/></name></expr>;<pos:position pos:line="157" pos:column="26"/></expr_stmt>
            <return pos:line="158" pos:column="13">return <expr><operator pos:line="158" pos:column="20">-<pos:position pos:line="158" pos:column="21"/></operator><literal type="number" pos:line="158" pos:column="21">1<pos:position pos:line="158" pos:column="22"/></literal></expr>;<pos:position pos:line="158" pos:column="23"/></return>
          }<pos:position pos:line="159" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name pos:line="160" pos:column="11">writeerr<pos:position pos:line="160" pos:column="19"/></name> <operator pos:line="160" pos:column="20">=<pos:position pos:line="160" pos:column="21"/></operator> <call><name pos:line="160" pos:column="22">Curl_client_write<pos:position pos:line="160" pos:column="39"/></name><argument_list pos:line="160" pos:column="39">(<argument><expr><name pos:line="160" pos:column="40">conn<pos:position pos:line="160" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="46">CLIENTWRITE_BODY<pos:position pos:line="160" pos:column="62"/></name></expr></argument>,
                                       <argument><expr><operator pos:line="161" pos:column="40">(<pos:position pos:line="161" pos:column="41"/></operator><name pos:line="161" pos:column="41">char<pos:position pos:line="161" pos:column="45"/></name> <operator pos:line="161" pos:column="46">*<pos:position pos:line="161" pos:column="47"/></operator><operator pos:line="161" pos:column="47">)<pos:position pos:line="161" pos:column="48"/></operator><literal type="string" pos:line="161" pos:column="48">": "<pos:position pos:line="161" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="161" pos:column="54">2<pos:position pos:line="161" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="161" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="57"/></expr_stmt>
          <if pos:line="162" pos:column="11">if<condition pos:line="162" pos:column="13">(<expr><name pos:line="162" pos:column="14">writeerr<pos:position pos:line="162" pos:column="22"/></name></expr>)<pos:position pos:line="162" pos:column="23"/></condition><then pos:line="162" pos:column="23"> <block pos:line="162" pos:column="24">{
            <expr_stmt><expr><operator pos:line="163" pos:column="13">*<pos:position pos:line="163" pos:column="14"/></operator><name pos:line="163" pos:column="14">err<pos:position pos:line="163" pos:column="17"/></name> <operator pos:line="163" pos:column="18">=<pos:position pos:line="163" pos:column="19"/></operator> <name pos:line="163" pos:column="20">writeerr<pos:position pos:line="163" pos:column="28"/></name></expr>;<pos:position pos:line="163" pos:column="29"/></expr_stmt>
            <return pos:line="164" pos:column="13">return <expr><operator pos:line="164" pos:column="20">-<pos:position pos:line="164" pos:column="21"/></operator><literal type="number" pos:line="164" pos:column="21">1<pos:position pos:line="164" pos:column="22"/></literal></expr>;<pos:position pos:line="164" pos:column="23"/></return>
          }<pos:position pos:line="165" pos:column="12"/></block></then></if>

          <expr_stmt><expr><name><name pos:line="167" pos:column="11">data<pos:position pos:line="167" pos:column="15"/></name><operator pos:line="167" pos:column="15">-&gt;<pos:position pos:line="167" pos:column="20"/></operator><name pos:line="167" pos:column="17">req<pos:position pos:line="167" pos:column="20"/></name><operator pos:line="167" pos:column="20">.<pos:position pos:line="167" pos:column="21"/></operator><name pos:line="167" pos:column="21">bytecount<pos:position pos:line="167" pos:column="30"/></name></name> <operator pos:line="167" pos:column="31">+=<pos:position pos:line="167" pos:column="33"/></operator> <literal type="number" pos:line="167" pos:column="34">2<pos:position pos:line="167" pos:column="35"/></literal></expr>;<pos:position pos:line="167" pos:column="36"/></expr_stmt>
          <if pos:line="168" pos:column="11">if<condition pos:line="168" pos:column="13">(<expr><name pos:line="168" pos:column="14">val_b64_sz<pos:position pos:line="168" pos:column="24"/></name> <operator pos:line="168" pos:column="25">&gt;<pos:position pos:line="168" pos:column="29"/></operator> <literal type="number" pos:line="168" pos:column="27">0<pos:position pos:line="168" pos:column="28"/></literal></expr>)<pos:position pos:line="168" pos:column="29"/></condition><then pos:line="168" pos:column="29"> <block pos:line="168" pos:column="30">{
            <expr_stmt><expr><name pos:line="169" pos:column="13">writeerr<pos:position pos:line="169" pos:column="21"/></name> <operator pos:line="169" pos:column="22">=<pos:position pos:line="169" pos:column="23"/></operator> <call><name pos:line="169" pos:column="24">Curl_client_write<pos:position pos:line="169" pos:column="41"/></name><argument_list pos:line="169" pos:column="41">(<argument><expr><name pos:line="169" pos:column="42">conn<pos:position pos:line="169" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="48">CLIENTWRITE_BODY<pos:position pos:line="169" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="66">val_b64<pos:position pos:line="169" pos:column="73"/></name></expr></argument>,
                                     <argument><expr><name pos:line="170" pos:column="38">val_b64_sz<pos:position pos:line="170" pos:column="48"/></name></expr></argument>)<pos:position pos:line="170" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="50"/></expr_stmt>
            <if pos:line="171" pos:column="13">if<condition pos:line="171" pos:column="15">(<expr><name pos:line="171" pos:column="16">writeerr<pos:position pos:line="171" pos:column="24"/></name></expr>)<pos:position pos:line="171" pos:column="25"/></condition><then pos:line="171" pos:column="25"> <block pos:line="171" pos:column="26">{
              <expr_stmt><expr><operator pos:line="172" pos:column="15">*<pos:position pos:line="172" pos:column="16"/></operator><name pos:line="172" pos:column="16">err<pos:position pos:line="172" pos:column="19"/></name> <operator pos:line="172" pos:column="20">=<pos:position pos:line="172" pos:column="21"/></operator> <name pos:line="172" pos:column="22">writeerr<pos:position pos:line="172" pos:column="30"/></name></expr>;<pos:position pos:line="172" pos:column="31"/></expr_stmt>
              <return pos:line="173" pos:column="15">return <expr><operator pos:line="173" pos:column="22">-<pos:position pos:line="173" pos:column="23"/></operator><literal type="number" pos:line="173" pos:column="23">1<pos:position pos:line="173" pos:column="24"/></literal></expr>;<pos:position pos:line="173" pos:column="25"/></return>
            }<pos:position pos:line="174" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="175" pos:column="13">free<pos:position pos:line="175" pos:column="17"/></name><argument_list pos:line="175" pos:column="17">(<argument><expr><name pos:line="175" pos:column="18">val_b64<pos:position pos:line="175" pos:column="25"/></name></expr></argument>)<pos:position pos:line="175" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="176" pos:column="13">data<pos:position pos:line="176" pos:column="17"/></name><operator pos:line="176" pos:column="17">-&gt;<pos:position pos:line="176" pos:column="22"/></operator><name pos:line="176" pos:column="19">req<pos:position pos:line="176" pos:column="22"/></name><operator pos:line="176" pos:column="22">.<pos:position pos:line="176" pos:column="23"/></operator><name pos:line="176" pos:column="23">bytecount<pos:position pos:line="176" pos:column="32"/></name></name> <operator pos:line="176" pos:column="33">+=<pos:position pos:line="176" pos:column="35"/></operator> <name pos:line="176" pos:column="36">val_b64_sz<pos:position pos:line="176" pos:column="46"/></name></expr>;<pos:position pos:line="176" pos:column="47"/></expr_stmt>
          }<pos:position pos:line="177" pos:column="12"/></block></then></if>
        }<pos:position pos:line="178" pos:column="10"/></block></then>
        <else pos:line="179" pos:column="9">else <block pos:line="179" pos:column="14">{
          <expr_stmt><expr><name pos:line="180" pos:column="11">writeerr<pos:position pos:line="180" pos:column="19"/></name> <operator pos:line="180" pos:column="20">=<pos:position pos:line="180" pos:column="21"/></operator> <call><name pos:line="180" pos:column="22">Curl_client_write<pos:position pos:line="180" pos:column="39"/></name><argument_list pos:line="180" pos:column="39">(<argument><expr><name pos:line="180" pos:column="40">conn<pos:position pos:line="180" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="46">CLIENTWRITE_BODY<pos:position pos:line="180" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="180" pos:column="64">(<pos:position pos:line="180" pos:column="65"/></operator><name pos:line="180" pos:column="65">char<pos:position pos:line="180" pos:column="69"/></name> <operator pos:line="180" pos:column="70">*<pos:position pos:line="180" pos:column="71"/></operator><operator pos:line="180" pos:column="71">)<pos:position pos:line="180" pos:column="72"/></operator><literal type="string" pos:line="180" pos:column="72">" "<pos:position pos:line="180" pos:column="75"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="180" pos:column="77">1<pos:position pos:line="180" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="80"/></expr_stmt>
          <if pos:line="181" pos:column="11">if<condition pos:line="181" pos:column="13">(<expr><name pos:line="181" pos:column="14">writeerr<pos:position pos:line="181" pos:column="22"/></name></expr>)<pos:position pos:line="181" pos:column="23"/></condition><then pos:line="181" pos:column="23"> <block pos:line="181" pos:column="24">{
            <expr_stmt><expr><operator pos:line="182" pos:column="13">*<pos:position pos:line="182" pos:column="14"/></operator><name pos:line="182" pos:column="14">err<pos:position pos:line="182" pos:column="17"/></name> <operator pos:line="182" pos:column="18">=<pos:position pos:line="182" pos:column="19"/></operator> <name pos:line="182" pos:column="20">writeerr<pos:position pos:line="182" pos:column="28"/></name></expr>;<pos:position pos:line="182" pos:column="29"/></expr_stmt>
            <return pos:line="183" pos:column="13">return <expr><operator pos:line="183" pos:column="20">-<pos:position pos:line="183" pos:column="21"/></operator><literal type="number" pos:line="183" pos:column="21">1<pos:position pos:line="183" pos:column="22"/></literal></expr>;<pos:position pos:line="183" pos:column="23"/></return>
          }<pos:position pos:line="184" pos:column="12"/></block></then></if>

          <expr_stmt><expr><name pos:line="186" pos:column="11">writeerr<pos:position pos:line="186" pos:column="19"/></name> <operator pos:line="186" pos:column="20">=<pos:position pos:line="186" pos:column="21"/></operator> <call><name pos:line="186" pos:column="22">Curl_client_write<pos:position pos:line="186" pos:column="39"/></name><argument_list pos:line="186" pos:column="39">(<argument><expr><name pos:line="186" pos:column="40">conn<pos:position pos:line="186" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="46">CLIENTWRITE_BODY<pos:position pos:line="186" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="64">bvals<pos:position pos:line="186" pos:column="69"/></name><index pos:line="186" pos:column="69">[<expr><name pos:line="186" pos:column="70">i<pos:position pos:line="186" pos:column="71"/></name></expr>]<pos:position pos:line="186" pos:column="72"/></index></name><operator pos:line="186" pos:column="72">.<pos:position pos:line="186" pos:column="73"/></operator><name pos:line="186" pos:column="73">bv_val<pos:position pos:line="186" pos:column="79"/></name></expr></argument>,
                                       <argument><expr><name><name pos:line="187" pos:column="40">bvals<pos:position pos:line="187" pos:column="45"/></name><index pos:line="187" pos:column="45">[<expr><name pos:line="187" pos:column="46">i<pos:position pos:line="187" pos:column="47"/></name></expr>]<pos:position pos:line="187" pos:column="48"/></index></name><operator pos:line="187" pos:column="48">.<pos:position pos:line="187" pos:column="49"/></operator><name pos:line="187" pos:column="49">bv_len<pos:position pos:line="187" pos:column="55"/></name></expr></argument>)<pos:position pos:line="187" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="57"/></expr_stmt>
          <if pos:line="188" pos:column="11">if<condition pos:line="188" pos:column="13">(<expr><name pos:line="188" pos:column="14">writeerr<pos:position pos:line="188" pos:column="22"/></name></expr>)<pos:position pos:line="188" pos:column="23"/></condition><then pos:line="188" pos:column="23"> <block pos:line="188" pos:column="24">{
            <expr_stmt><expr><operator pos:line="189" pos:column="13">*<pos:position pos:line="189" pos:column="14"/></operator><name pos:line="189" pos:column="14">err<pos:position pos:line="189" pos:column="17"/></name> <operator pos:line="189" pos:column="18">=<pos:position pos:line="189" pos:column="19"/></operator> <name pos:line="189" pos:column="20">writeerr<pos:position pos:line="189" pos:column="28"/></name></expr>;<pos:position pos:line="189" pos:column="29"/></expr_stmt>
            <return pos:line="190" pos:column="13">return <expr><operator pos:line="190" pos:column="20">-<pos:position pos:line="190" pos:column="21"/></operator><literal type="number" pos:line="190" pos:column="21">1<pos:position pos:line="190" pos:column="22"/></literal></expr>;<pos:position pos:line="190" pos:column="23"/></return>
          }<pos:position pos:line="191" pos:column="12"/></block></then></if>

          <expr_stmt><expr><name><name pos:line="193" pos:column="11">data<pos:position pos:line="193" pos:column="15"/></name><operator pos:line="193" pos:column="15">-&gt;<pos:position pos:line="193" pos:column="20"/></operator><name pos:line="193" pos:column="17">req<pos:position pos:line="193" pos:column="20"/></name><operator pos:line="193" pos:column="20">.<pos:position pos:line="193" pos:column="21"/></operator><name pos:line="193" pos:column="21">bytecount<pos:position pos:line="193" pos:column="30"/></name></name> <operator pos:line="193" pos:column="31">+=<pos:position pos:line="193" pos:column="33"/></operator> <name><name pos:line="193" pos:column="34">bvals<pos:position pos:line="193" pos:column="39"/></name><index pos:line="193" pos:column="39">[<expr><name pos:line="193" pos:column="40">i<pos:position pos:line="193" pos:column="41"/></name></expr>]<pos:position pos:line="193" pos:column="42"/></index></name><operator pos:line="193" pos:column="42">.<pos:position pos:line="193" pos:column="43"/></operator><name pos:line="193" pos:column="43">bv_len<pos:position pos:line="193" pos:column="49"/></name> <operator pos:line="193" pos:column="50">+<pos:position pos:line="193" pos:column="51"/></operator> <literal type="number" pos:line="193" pos:column="52">1<pos:position pos:line="193" pos:column="53"/></literal></expr>;<pos:position pos:line="193" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="194" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="195" pos:column="9">writeerr<pos:position pos:line="195" pos:column="17"/></name> <operator pos:line="195" pos:column="18">=<pos:position pos:line="195" pos:column="19"/></operator> <call><name pos:line="195" pos:column="20">Curl_client_write<pos:position pos:line="195" pos:column="37"/></name><argument_list pos:line="195" pos:column="37">(<argument><expr><name pos:line="195" pos:column="38">conn<pos:position pos:line="195" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="44">CLIENTWRITE_BODY<pos:position pos:line="195" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="195" pos:column="62">(<pos:position pos:line="195" pos:column="63"/></operator><name pos:line="195" pos:column="63">char<pos:position pos:line="195" pos:column="67"/></name> <operator pos:line="195" pos:column="68">*<pos:position pos:line="195" pos:column="69"/></operator><operator pos:line="195" pos:column="69">)<pos:position pos:line="195" pos:column="70"/></operator><literal type="string" pos:line="195" pos:column="70">"\n"<pos:position pos:line="195" pos:column="74"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="195" pos:column="76">0<pos:position pos:line="195" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="79"/></expr_stmt>
        <if pos:line="196" pos:column="9">if<condition pos:line="196" pos:column="11">(<expr><name pos:line="196" pos:column="12">writeerr<pos:position pos:line="196" pos:column="20"/></name></expr>)<pos:position pos:line="196" pos:column="21"/></condition><then pos:line="196" pos:column="21"> <block pos:line="196" pos:column="22">{
          <expr_stmt><expr><operator pos:line="197" pos:column="11">*<pos:position pos:line="197" pos:column="12"/></operator><name pos:line="197" pos:column="12">err<pos:position pos:line="197" pos:column="15"/></name> <operator pos:line="197" pos:column="16">=<pos:position pos:line="197" pos:column="17"/></operator> <name pos:line="197" pos:column="18">writeerr<pos:position pos:line="197" pos:column="26"/></name></expr>;<pos:position pos:line="197" pos:column="27"/></expr_stmt>
          <return pos:line="198" pos:column="11">return <expr><operator pos:line="198" pos:column="18">-<pos:position pos:line="198" pos:column="19"/></operator><literal type="number" pos:line="198" pos:column="19">1<pos:position pos:line="198" pos:column="20"/></literal></expr>;<pos:position pos:line="198" pos:column="21"/></return>
        }<pos:position pos:line="199" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="201" pos:column="9">data<pos:position pos:line="201" pos:column="13"/></name><operator pos:line="201" pos:column="13">-&gt;<pos:position pos:line="201" pos:column="18"/></operator><name pos:line="201" pos:column="15">req<pos:position pos:line="201" pos:column="18"/></name><operator pos:line="201" pos:column="18">.<pos:position pos:line="201" pos:column="19"/></operator><name pos:line="201" pos:column="19">bytecount<pos:position pos:line="201" pos:column="28"/></name></name><operator pos:line="201" pos:column="28">++<pos:position pos:line="201" pos:column="30"/></operator></expr>;<pos:position pos:line="201" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="202" pos:column="8"/></block></for>
      <expr_stmt><expr><call><name pos:line="203" pos:column="7">ber_memfree<pos:position pos:line="203" pos:column="18"/></name><argument_list pos:line="203" pos:column="18">(<argument><expr><name pos:line="203" pos:column="19">bvals<pos:position pos:line="203" pos:column="24"/></name></expr></argument>)<pos:position pos:line="203" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="204" pos:column="7">writeerr<pos:position pos:line="204" pos:column="15"/></name> <operator pos:line="204" pos:column="16">=<pos:position pos:line="204" pos:column="17"/></operator> <call><name pos:line="204" pos:column="18">Curl_client_write<pos:position pos:line="204" pos:column="35"/></name><argument_list pos:line="204" pos:column="35">(<argument><expr><name pos:line="204" pos:column="36">conn<pos:position pos:line="204" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="42">CLIENTWRITE_BODY<pos:position pos:line="204" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="204" pos:column="60">(<pos:position pos:line="204" pos:column="61"/></operator><name pos:line="204" pos:column="61">char<pos:position pos:line="204" pos:column="65"/></name> <operator pos:line="204" pos:column="66">*<pos:position pos:line="204" pos:column="67"/></operator><operator pos:line="204" pos:column="67">)<pos:position pos:line="204" pos:column="68"/></operator><literal type="string" pos:line="204" pos:column="68">"\n"<pos:position pos:line="204" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="204" pos:column="74">0<pos:position pos:line="204" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="204" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="77"/></expr_stmt>
      <if pos:line="205" pos:column="7">if<condition pos:line="205" pos:column="9">(<expr><name pos:line="205" pos:column="10">writeerr<pos:position pos:line="205" pos:column="18"/></name></expr>)<pos:position pos:line="205" pos:column="19"/></condition><then pos:line="205" pos:column="19"> <block pos:line="205" pos:column="20">{
        <expr_stmt><expr><operator pos:line="206" pos:column="9">*<pos:position pos:line="206" pos:column="10"/></operator><name pos:line="206" pos:column="10">err<pos:position pos:line="206" pos:column="13"/></name> <operator pos:line="206" pos:column="14">=<pos:position pos:line="206" pos:column="15"/></operator> <name pos:line="206" pos:column="16">writeerr<pos:position pos:line="206" pos:column="24"/></name></expr>;<pos:position pos:line="206" pos:column="25"/></expr_stmt>
        <return pos:line="207" pos:column="9">return <expr><operator pos:line="207" pos:column="16">-<pos:position pos:line="207" pos:column="17"/></operator><literal type="number" pos:line="207" pos:column="17">1<pos:position pos:line="207" pos:column="18"/></literal></expr>;<pos:position pos:line="207" pos:column="19"/></return>
      }<pos:position pos:line="208" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="209" pos:column="7">data<pos:position pos:line="209" pos:column="11"/></name><operator pos:line="209" pos:column="11">-&gt;<pos:position pos:line="209" pos:column="16"/></operator><name pos:line="209" pos:column="13">req<pos:position pos:line="209" pos:column="16"/></name><operator pos:line="209" pos:column="16">.<pos:position pos:line="209" pos:column="17"/></operator><name pos:line="209" pos:column="17">bytecount<pos:position pos:line="209" pos:column="26"/></name></name><operator pos:line="209" pos:column="26">++<pos:position pos:line="209" pos:column="28"/></operator></expr>;<pos:position pos:line="209" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="210" pos:column="6"/></block></for>
    <expr_stmt><expr><name pos:line="211" pos:column="5">writeerr<pos:position pos:line="211" pos:column="13"/></name> <operator pos:line="211" pos:column="14">=<pos:position pos:line="211" pos:column="15"/></operator> <call><name pos:line="211" pos:column="16">Curl_client_write<pos:position pos:line="211" pos:column="33"/></name><argument_list pos:line="211" pos:column="33">(<argument><expr><name pos:line="211" pos:column="34">conn<pos:position pos:line="211" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="211" pos:column="40">CLIENTWRITE_BODY<pos:position pos:line="211" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="211" pos:column="58">(<pos:position pos:line="211" pos:column="59"/></operator><name pos:line="211" pos:column="59">char<pos:position pos:line="211" pos:column="63"/></name> <operator pos:line="211" pos:column="64">*<pos:position pos:line="211" pos:column="65"/></operator><operator pos:line="211" pos:column="65">)<pos:position pos:line="211" pos:column="66"/></operator><literal type="string" pos:line="211" pos:column="66">"\n"<pos:position pos:line="211" pos:column="70"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="211" pos:column="72">0<pos:position pos:line="211" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="211" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="75"/></expr_stmt>
    <if pos:line="212" pos:column="5">if<condition pos:line="212" pos:column="7">(<expr><name pos:line="212" pos:column="8">writeerr<pos:position pos:line="212" pos:column="16"/></name></expr>)<pos:position pos:line="212" pos:column="17"/></condition><then pos:line="212" pos:column="17"> <block pos:line="212" pos:column="18">{
      <expr_stmt><expr><operator pos:line="213" pos:column="7">*<pos:position pos:line="213" pos:column="8"/></operator><name pos:line="213" pos:column="8">err<pos:position pos:line="213" pos:column="11"/></name> <operator pos:line="213" pos:column="12">=<pos:position pos:line="213" pos:column="13"/></operator> <name pos:line="213" pos:column="14">writeerr<pos:position pos:line="213" pos:column="22"/></name></expr>;<pos:position pos:line="213" pos:column="23"/></expr_stmt>
      <return pos:line="214" pos:column="7">return <expr><operator pos:line="214" pos:column="14">-<pos:position pos:line="214" pos:column="15"/></operator><literal type="number" pos:line="214" pos:column="15">1<pos:position pos:line="214" pos:column="16"/></literal></expr>;<pos:position pos:line="214" pos:column="17"/></return>
    }<pos:position pos:line="215" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="216" pos:column="5">data<pos:position pos:line="216" pos:column="9"/></name><operator pos:line="216" pos:column="9">-&gt;<pos:position pos:line="216" pos:column="14"/></operator><name pos:line="216" pos:column="11">req<pos:position pos:line="216" pos:column="14"/></name><operator pos:line="216" pos:column="14">.<pos:position pos:line="216" pos:column="15"/></operator><name pos:line="216" pos:column="15">bytecount<pos:position pos:line="216" pos:column="24"/></name></name><operator pos:line="216" pos:column="24">++<pos:position pos:line="216" pos:column="26"/></operator></expr>;<pos:position pos:line="216" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="217" pos:column="5">ber_free<pos:position pos:line="217" pos:column="13"/></name><argument_list pos:line="217" pos:column="13">(<argument><expr><name pos:line="217" pos:column="14">ber<pos:position pos:line="217" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="217" pos:column="19">0<pos:position pos:line="217" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="217" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="218" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="219" pos:column="3">ldap_msgfree<pos:position pos:line="219" pos:column="15"/></name><argument_list pos:line="219" pos:column="15">(<argument><expr><name pos:line="219" pos:column="16">msg<pos:position pos:line="219" pos:column="19"/></name></expr></argument>)<pos:position pos:line="219" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="21"/></expr_stmt>
  <return pos:line="220" pos:column="3">return <expr><name pos:line="220" pos:column="10">ret<pos:position pos:line="220" pos:column="13"/></name></expr>;<pos:position pos:line="220" pos:column="14"/></return>
}<pos:position pos:line="221" pos:column="2"/></block></function></unit>
