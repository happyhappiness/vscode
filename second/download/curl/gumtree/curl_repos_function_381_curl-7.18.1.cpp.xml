<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_381_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">bindlocal<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">curl_socket_t<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">sockfd<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">ENABLE_IPV6<pos:position pos:line="4" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">ipv6_addr<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><literal type="number" pos:line="5" pos:column="18">16<pos:position pos:line="5" pos:column="20"/></literal></expr>]<pos:position pos:line="5" pos:column="21"/></index></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SessionHandle<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><name><name pos:line="7" pos:column="32">conn<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">-&gt;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="38">data<pos:position pos:line="7" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">sockaddr_in<pos:position pos:line="8" pos:column="21"/></name></name></type> <name pos:line="8" pos:column="22">me<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">sockaddr<pos:position pos:line="9" pos:column="18"/></name></name> <modifier pos:line="9" pos:column="19">*<pos:position pos:line="9" pos:column="20"/></modifier></type><name pos:line="9" pos:column="20">sock<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name pos:line="9" pos:column="27">NULL<pos:position pos:line="9" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>  <comment type="block" pos:line="9" pos:column="34">/* bind to this address */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">socklen_t<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">socksize<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt> <comment type="block" pos:line="10" pos:column="23">/* size of the data sock points to */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">short<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">port<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><name><name pos:line="11" pos:column="25">data<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">set<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">.<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">localport<pos:position pos:line="11" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="45"/></decl_stmt> <comment type="block" pos:line="11" pos:column="46">/* use this port number, 0 for
                                                "random" */</comment>
  <comment type="block" pos:line="13" pos:column="3">/* how many port numbers to try to bind to, increasing one at a time */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">portnum<pos:position pos:line="14" pos:column="14"/></name> <init pos:line="14" pos:column="15">= <expr><name><name pos:line="14" pos:column="17">data<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">-&gt;<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="23">set<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">.<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">localportrange<pos:position pos:line="14" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="15" pos:column="3">const<pos:position pos:line="15" pos:column="8"/></specifier> <name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">dev<pos:position pos:line="15" pos:column="18"/></name> <init pos:line="15" pos:column="19">= <expr><name><name pos:line="15" pos:column="21">data<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">-&gt;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="27">set<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">.<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">str<pos:position pos:line="15" pos:column="34"/></name><index pos:line="15" pos:column="34">[<expr><name pos:line="15" pos:column="35">STRING_DEVICE<pos:position pos:line="15" pos:column="48"/></name></expr>]<pos:position pos:line="15" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="15" pos:column="50"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="17" pos:column="3">/*************************************************************
   * Select device to bind socket to
   *************************************************************/</comment>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">dev<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">&amp;&amp;<pos:position pos:line="20" pos:column="20"/></operator> <operator pos:line="20" pos:column="13">(<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">strlen<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">dev<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call><operator pos:line="20" pos:column="25">&lt;<pos:position pos:line="20" pos:column="29"/></operator><literal type="number" pos:line="20" pos:column="26">255<pos:position pos:line="20" pos:column="29"/></literal><operator pos:line="20" pos:column="29">)<pos:position pos:line="20" pos:column="30"/></operator></expr> )<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32"> <block pos:line="20" pos:column="33">{
    <decl_stmt><decl><type><name><name pos:line="21" pos:column="5">struct<pos:position pos:line="21" pos:column="11"/></name> <name pos:line="21" pos:column="12">Curl_dns_entry<pos:position pos:line="21" pos:column="26"/></name></name> <modifier pos:line="21" pos:column="27">*<pos:position pos:line="21" pos:column="28"/></modifier></type><name pos:line="21" pos:column="28">h<pos:position pos:line="21" pos:column="29"/></name><init pos:line="21" pos:column="29">=<expr><name pos:line="21" pos:column="30">NULL<pos:position pos:line="21" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">char<pos:position pos:line="22" pos:column="9"/></name></type> <name><name pos:line="22" pos:column="10">myhost<pos:position pos:line="22" pos:column="16"/></name><index pos:line="22" pos:column="16">[<expr><literal type="number" pos:line="22" pos:column="17">256<pos:position pos:line="22" pos:column="20"/></literal></expr>]<pos:position pos:line="22" pos:column="21"/></index></name> <init pos:line="22" pos:column="22">= <expr><literal type="string" pos:line="22" pos:column="24">""<pos:position pos:line="22" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">in_addr_t<pos:position pos:line="23" pos:column="14"/></name></type> <name pos:line="23" pos:column="15">in<pos:position pos:line="23" pos:column="17"/></name></decl>;<pos:position pos:line="23" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">int<pos:position pos:line="24" pos:column="8"/></name></type> <name pos:line="24" pos:column="9">rc<pos:position pos:line="24" pos:column="11"/></name></decl>;<pos:position pos:line="24" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">bool<pos:position pos:line="25" pos:column="9"/></name></type> <name pos:line="25" pos:column="10">was_iface<pos:position pos:line="25" pos:column="19"/></name> <init pos:line="25" pos:column="20">= <expr><name pos:line="25" pos:column="22">FALSE<pos:position pos:line="25" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">int<pos:position pos:line="26" pos:column="8"/></name></type> <name pos:line="26" pos:column="9">in6<pos:position pos:line="26" pos:column="12"/></name> <init pos:line="26" pos:column="13">= <expr><operator pos:line="26" pos:column="15">-<pos:position pos:line="26" pos:column="16"/></operator><literal type="number" pos:line="26" pos:column="16">1<pos:position pos:line="26" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="28" pos:column="5">/* First check if the given name is an IP address */</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">in<pos:position pos:line="29" pos:column="7"/></name><operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator><call><name pos:line="29" pos:column="8">inet_addr<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><operator pos:line="29" pos:column="18">(<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">char<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">*<pos:position pos:line="29" pos:column="25"/></operator><operator pos:line="29" pos:column="25">)<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">dev<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>

    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><operator pos:line="31" pos:column="8">(<pos:position pos:line="31" pos:column="9"/></operator><name pos:line="31" pos:column="9">in<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">==<pos:position pos:line="31" pos:column="14"/></operator> <name pos:line="31" pos:column="15">CURL_INADDR_NONE<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">)<pos:position pos:line="31" pos:column="32"/></operator> <operator pos:line="31" pos:column="33">&amp;&amp;<pos:position pos:line="31" pos:column="43"/></operator>
       <call><name pos:line="32" pos:column="8">Curl_if2ip<pos:position pos:line="32" pos:column="18"/></name><argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">dev<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="24">myhost<pos:position pos:line="32" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="32">sizeof<argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">myhost<pos:position pos:line="32" pos:column="45"/></name></expr></argument>)<pos:position pos:line="32" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="48"/></condition><then pos:line="32" pos:column="48"> <block pos:line="32" pos:column="49">{
      <comment type="block" pos:line="33" pos:column="7">/*
       * We now have the numerical IPv4-style x.y.z.w in the 'myhost' buffer
       */</comment>
      <expr_stmt><expr><name pos:line="36" pos:column="7">rc<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">=<pos:position pos:line="36" pos:column="11"/></operator> <call><name pos:line="36" pos:column="12">Curl_resolv<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><name pos:line="36" pos:column="24">conn<pos:position pos:line="36" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="30">myhost<pos:position pos:line="36" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="38">0<pos:position pos:line="36" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="41">&amp;<pos:position pos:line="36" pos:column="46"/></operator><name pos:line="36" pos:column="42">h<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt>
      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><name pos:line="37" pos:column="10">rc<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">==<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">CURLRESOLV_PENDING<pos:position pos:line="37" pos:column="34"/></name></expr>)<pos:position pos:line="37" pos:column="35"/></condition><then pos:line="37" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="38" pos:column="9">(<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="10">void<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">)<pos:position pos:line="38" pos:column="15"/></operator><call><name pos:line="38" pos:column="15">Curl_wait_for_resolv<pos:position pos:line="38" pos:column="35"/></name><argument_list pos:line="38" pos:column="35">(<argument><expr><name pos:line="38" pos:column="36">conn<pos:position pos:line="38" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="42">&amp;<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="43">h<pos:position pos:line="38" pos:column="44"/></name></expr></argument>)<pos:position pos:line="38" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt></block></then></if>

      <if pos:line="40" pos:column="7">if<condition pos:line="40" pos:column="9">(<expr><name pos:line="40" pos:column="10">h<pos:position pos:line="40" pos:column="11"/></name></expr>)<pos:position pos:line="40" pos:column="12"/></condition><then pos:line="40" pos:column="12"> <block pos:line="40" pos:column="13">{
        <expr_stmt><expr><name pos:line="41" pos:column="9">was_iface<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">=<pos:position pos:line="41" pos:column="20"/></operator> <name pos:line="41" pos:column="21">TRUE<pos:position pos:line="41" pos:column="25"/></name></expr>;<pos:position pos:line="41" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">Curl_resolv_unlock<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">data<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="34">h<pos:position pos:line="42" pos:column="35"/></name></expr></argument>)<pos:position pos:line="42" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="37"/></expr_stmt>
      }<pos:position pos:line="43" pos:column="8"/></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><operator pos:line="46" pos:column="8">!<pos:position pos:line="46" pos:column="9"/></operator><name pos:line="46" pos:column="9">was_iface<pos:position pos:line="46" pos:column="18"/></name></expr>)<pos:position pos:line="46" pos:column="19"/></condition><then pos:line="46" pos:column="19"> <block pos:line="46" pos:column="20">{
      <comment type="block" pos:line="47" pos:column="7">/*
       * This was not an interface, resolve the name as a host name
       * or IP number
       */</comment>
      <expr_stmt><expr><name pos:line="51" pos:column="7">rc<pos:position pos:line="51" pos:column="9"/></name> <operator pos:line="51" pos:column="10">=<pos:position pos:line="51" pos:column="11"/></operator> <call><name pos:line="51" pos:column="12">Curl_resolv<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><name pos:line="51" pos:column="24">conn<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="30">dev<pos:position pos:line="51" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="35">0<pos:position pos:line="51" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="51" pos:column="38">&amp;<pos:position pos:line="51" pos:column="43"/></operator><name pos:line="51" pos:column="39">h<pos:position pos:line="51" pos:column="40"/></name></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
      <if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><name pos:line="52" pos:column="10">rc<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">==<pos:position pos:line="52" pos:column="15"/></operator> <name pos:line="52" pos:column="16">CURLRESOLV_PENDING<pos:position pos:line="52" pos:column="34"/></name></expr>)<pos:position pos:line="52" pos:column="35"/></condition><then pos:line="52" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="53" pos:column="9">(<pos:position pos:line="53" pos:column="10"/></operator><name pos:line="53" pos:column="10">void<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">)<pos:position pos:line="53" pos:column="15"/></operator><call><name pos:line="53" pos:column="15">Curl_wait_for_resolv<pos:position pos:line="53" pos:column="35"/></name><argument_list pos:line="53" pos:column="35">(<argument><expr><name pos:line="53" pos:column="36">conn<pos:position pos:line="53" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="42">&amp;<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="43">h<pos:position pos:line="53" pos:column="44"/></name></expr></argument>)<pos:position pos:line="53" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="46"/></expr_stmt></block></then></if>

      <if pos:line="55" pos:column="7">if<condition pos:line="55" pos:column="9">(<expr><name pos:line="55" pos:column="10">h<pos:position pos:line="55" pos:column="11"/></name></expr>)<pos:position pos:line="55" pos:column="12"/></condition><then pos:line="55" pos:column="12"> <block pos:line="55" pos:column="13">{
        <if pos:line="56" pos:column="9">if<condition pos:line="56" pos:column="11">(<expr><name pos:line="56" pos:column="12">in<pos:position pos:line="56" pos:column="14"/></name> <operator pos:line="56" pos:column="15">==<pos:position pos:line="56" pos:column="17"/></operator> <name pos:line="56" pos:column="18">CURL_INADDR_NONE<pos:position pos:line="56" pos:column="34"/></name></expr>)<pos:position pos:line="56" pos:column="35"/></condition><then pos:line="56" pos:column="35">
          <comment type="block" pos:line="57" pos:column="11">/* convert the resolved address, sizeof myhost &gt;= INET_ADDRSTRLEN */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="11">Curl_inet_ntop<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><name><name pos:line="58" pos:column="26">h<pos:position pos:line="58" pos:column="27"/></name><operator pos:line="58" pos:column="27">-&gt;<pos:position pos:line="58" pos:column="32"/></operator><name pos:line="58" pos:column="29">addr<pos:position pos:line="58" pos:column="33"/></name><operator pos:line="58" pos:column="33">-&gt;<pos:position pos:line="58" pos:column="38"/></operator><name pos:line="58" pos:column="35">ai_addr<pos:position pos:line="58" pos:column="42"/></name><operator pos:line="58" pos:column="42">-&gt;<pos:position pos:line="58" pos:column="47"/></operator><name pos:line="58" pos:column="44">sa_family<pos:position pos:line="58" pos:column="53"/></name></name></expr></argument>,
                         <argument><expr><operator pos:line="59" pos:column="26">&amp;<pos:position pos:line="59" pos:column="31"/></operator><operator pos:line="59" pos:column="27">(<pos:position pos:line="59" pos:column="28"/></operator><operator pos:line="59" pos:column="28">(<pos:position pos:line="59" pos:column="29"/></operator>struct <name pos:line="59" pos:column="36">sockaddr_in<pos:position pos:line="59" pos:column="47"/></name><operator pos:line="59" pos:column="47">*<pos:position pos:line="59" pos:column="48"/></operator><operator pos:line="59" pos:column="48">)<pos:position pos:line="59" pos:column="49"/></operator><name><name pos:line="59" pos:column="49">h<pos:position pos:line="59" pos:column="50"/></name><operator pos:line="59" pos:column="50">-&gt;<pos:position pos:line="59" pos:column="55"/></operator><name pos:line="59" pos:column="52">addr<pos:position pos:line="59" pos:column="56"/></name><operator pos:line="59" pos:column="56">-&gt;<pos:position pos:line="59" pos:column="61"/></operator><name pos:line="59" pos:column="58">ai_addr<pos:position pos:line="59" pos:column="65"/></name></name><operator pos:line="59" pos:column="65">)<pos:position pos:line="59" pos:column="66"/></operator><operator pos:line="59" pos:column="66">-&gt;<pos:position pos:line="59" pos:column="71"/></operator><name pos:line="59" pos:column="68">sin_addr<pos:position pos:line="59" pos:column="76"/></name></expr></argument>,
                         <argument><expr><name pos:line="60" pos:column="26">myhost<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="34">sizeof <name pos:line="60" pos:column="41">myhost<pos:position pos:line="60" pos:column="47"/></name></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="49"/></expr_stmt></block></then>
        <else pos:line="61" pos:column="9">else
          <comment type="block" pos:line="62" pos:column="11">/* we know data-&gt;set.device is shorter than the myhost array */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="11">strcpy<pos:position pos:line="63" pos:column="17"/></name><argument_list pos:line="63" pos:column="17">(<argument><expr><name pos:line="63" pos:column="18">myhost<pos:position pos:line="63" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="26">dev<pos:position pos:line="63" pos:column="29"/></name></expr></argument>)<pos:position pos:line="63" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt></block></else></if>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">Curl_resolv_unlock<pos:position pos:line="64" pos:column="27"/></name><argument_list pos:line="64" pos:column="27">(<argument><expr><name pos:line="64" pos:column="28">data<pos:position pos:line="64" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="34">h<pos:position pos:line="64" pos:column="35"/></name></expr></argument>)<pos:position pos:line="64" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="37"/></expr_stmt>
      }<pos:position pos:line="65" pos:column="8"/></block></then></if>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>

    <if pos:line="68" pos:column="5">if<condition pos:line="68" pos:column="7">(<expr><operator pos:line="68" pos:column="8">!<pos:position pos:line="68" pos:column="9"/></operator> <operator pos:line="68" pos:column="10">*<pos:position pos:line="68" pos:column="11"/></operator><name pos:line="68" pos:column="11">myhost<pos:position pos:line="68" pos:column="17"/></name></expr>)<pos:position pos:line="68" pos:column="18"/></condition><then pos:line="68" pos:column="18"> <block pos:line="68" pos:column="19">{
      <comment type="block" pos:line="69" pos:column="7">/* need to fix this
         h=Curl_gethost(data,
         getmyhost(*myhost,sizeof(myhost)),
         hostent_buf,
         sizeof(hostent_buf));
      */</comment>
      <expr_stmt><expr><call><name pos:line="75" pos:column="7">failf<pos:position pos:line="75" pos:column="12"/></name><argument_list pos:line="75" pos:column="12">(<argument><expr><name pos:line="75" pos:column="13">data<pos:position pos:line="75" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="19">"Couldn't bind to '%s'"<pos:position pos:line="75" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="44">dev<pos:position pos:line="75" pos:column="47"/></name></expr></argument>)<pos:position pos:line="75" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="49"/></expr_stmt>
      <return pos:line="76" pos:column="7">return <expr><name pos:line="76" pos:column="14">CURLE_INTERFACE_FAILED<pos:position pos:line="76" pos:column="36"/></name></expr>;<pos:position pos:line="76" pos:column="37"/></return>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="79" pos:column="5">infof<pos:position pos:line="79" pos:column="10"/></name><argument_list pos:line="79" pos:column="10">(<argument><expr><name pos:line="79" pos:column="11">data<pos:position pos:line="79" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="17">"Bind local address to %s\n"<pos:position pos:line="79" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="47">myhost<pos:position pos:line="79" pos:column="53"/></name></expr></argument>)<pos:position pos:line="79" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="55"/></expr_stmt>

<cpp:ifdef pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">ifdef<pos:position pos:line="81" pos:column="7"/></cpp:directive> <name pos:line="81" pos:column="8">SO_BINDTODEVICE<pos:position pos:line="81" pos:column="23"/></name></cpp:ifdef>
    <comment type="block" pos:line="82" pos:column="5">/* I am not sure any other OSs than Linux that provide this feature, and
     * at the least I cannot test. --Ben
     *
     * This feature allows one to tightly bind the local socket to a
     * particular interface.  This will force even requests to other local
     * interfaces to go out the external interface.
     *
     */</comment>
    <if pos:line="90" pos:column="5">if<condition pos:line="90" pos:column="7">(<expr><name pos:line="90" pos:column="8">was_iface<pos:position pos:line="90" pos:column="17"/></name></expr>)<pos:position pos:line="90" pos:column="18"/></condition><then pos:line="90" pos:column="18"> <block pos:line="90" pos:column="19">{
      <comment type="block" pos:line="91" pos:column="7">/* Only bind to the interface when specified as interface, not just as a
       * hostname or ip address.
       */</comment>
      <if pos:line="94" pos:column="7">if<condition pos:line="94" pos:column="9">(<expr><call><name pos:line="94" pos:column="10">setsockopt<pos:position pos:line="94" pos:column="20"/></name><argument_list pos:line="94" pos:column="20">(<argument><expr><name pos:line="94" pos:column="21">sockfd<pos:position pos:line="94" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="29">SOL_SOCKET<pos:position pos:line="94" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="41">SO_BINDTODEVICE<pos:position pos:line="94" pos:column="56"/></name></expr></argument>,
                     <argument><expr><name pos:line="95" pos:column="22">dev<pos:position pos:line="95" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="95" pos:column="27">strlen<pos:position pos:line="95" pos:column="33"/></name><argument_list pos:line="95" pos:column="33">(<argument><expr><name pos:line="95" pos:column="34">dev<pos:position pos:line="95" pos:column="37"/></name></expr></argument>)<pos:position pos:line="95" pos:column="38"/></argument_list></call><operator pos:line="95" pos:column="38">+<pos:position pos:line="95" pos:column="39"/></operator><literal type="number" pos:line="95" pos:column="39">1<pos:position pos:line="95" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="41"/></argument_list></call> <operator pos:line="95" pos:column="42">!=<pos:position pos:line="95" pos:column="44"/></operator> <literal type="number" pos:line="95" pos:column="45">0<pos:position pos:line="95" pos:column="46"/></literal></expr>)<pos:position pos:line="95" pos:column="47"/></condition><then pos:line="95" pos:column="47"> <block pos:line="95" pos:column="48">{
        <comment type="block" pos:line="96" pos:column="9">/* printf("Failed to BINDTODEVICE, socket: %d  device: %s error: %s\n",
           sockfd, dev, Curl_strerror(SOCKERRNO)); */</comment>
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">infof<pos:position pos:line="98" pos:column="14"/></name><argument_list pos:line="98" pos:column="14">(<argument><expr><name pos:line="98" pos:column="15">data<pos:position pos:line="98" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="21">"SO_BINDTODEVICE %s failed\n"<pos:position pos:line="98" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="52">dev<pos:position pos:line="98" pos:column="55"/></name></expr></argument>)<pos:position pos:line="98" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="57"/></expr_stmt>
        <comment type="block" pos:line="99" pos:column="9">/* This is typically "errno 1, error: Operation not permitted" if
           you're not running as root or another suitable privileged user */</comment>
      }<pos:position pos:line="101" pos:column="8"/></block></then></if>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>
<cpp:endif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">endif<pos:position pos:line="103" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="105" pos:column="5">in<pos:position pos:line="105" pos:column="7"/></name><operator pos:line="105" pos:column="7">=<pos:position pos:line="105" pos:column="8"/></operator><call><name pos:line="105" pos:column="8">inet_addr<pos:position pos:line="105" pos:column="17"/></name><argument_list pos:line="105" pos:column="17">(<argument><expr><name pos:line="105" pos:column="18">myhost<pos:position pos:line="105" pos:column="24"/></name></expr></argument>)<pos:position pos:line="105" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="26"/></expr_stmt>

<cpp:ifdef pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">ifdef<pos:position pos:line="107" pos:column="7"/></cpp:directive> <name pos:line="107" pos:column="8">ENABLE_IPV6<pos:position pos:line="107" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="108" pos:column="5">in6<pos:position pos:line="108" pos:column="8"/></name> <operator pos:line="108" pos:column="9">=<pos:position pos:line="108" pos:column="10"/></operator> <call><name pos:line="108" pos:column="11">Curl_inet_pton<pos:position pos:line="108" pos:column="25"/></name> <argument_list pos:line="108" pos:column="26">(<argument><expr><name pos:line="108" pos:column="27">AF_INET6<pos:position pos:line="108" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="37">myhost<pos:position pos:line="108" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="45">(<pos:position pos:line="108" pos:column="46"/></operator><name pos:line="108" pos:column="46">void<pos:position pos:line="108" pos:column="50"/></name> <operator pos:line="108" pos:column="51">*<pos:position pos:line="108" pos:column="52"/></operator><operator pos:line="108" pos:column="52">)<pos:position pos:line="108" pos:column="53"/></operator><operator pos:line="108" pos:column="53">&amp;<pos:position pos:line="108" pos:column="58"/></operator><name pos:line="108" pos:column="54">ipv6_addr<pos:position pos:line="108" pos:column="63"/></name></expr></argument>)<pos:position pos:line="108" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="65"/></expr_stmt>
<cpp:endif pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">endif<pos:position pos:line="109" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="110" pos:column="5">if<condition pos:line="110" pos:column="7">(<expr><name pos:line="110" pos:column="8">CURL_INADDR_NONE<pos:position pos:line="110" pos:column="24"/></name> <operator pos:line="110" pos:column="25">==<pos:position pos:line="110" pos:column="27"/></operator> <name pos:line="110" pos:column="28">in<pos:position pos:line="110" pos:column="30"/></name> <operator pos:line="110" pos:column="31">&amp;&amp;<pos:position pos:line="110" pos:column="41"/></operator> <operator pos:line="110" pos:column="34">-<pos:position pos:line="110" pos:column="35"/></operator><literal type="number" pos:line="110" pos:column="35">1<pos:position pos:line="110" pos:column="36"/></literal> <operator pos:line="110" pos:column="37">==<pos:position pos:line="110" pos:column="39"/></operator> <name pos:line="110" pos:column="40">in6<pos:position pos:line="110" pos:column="43"/></name></expr>)<pos:position pos:line="110" pos:column="44"/></condition><then pos:line="110" pos:column="44"> <block pos:line="110" pos:column="45">{
      <expr_stmt><expr><call><name pos:line="111" pos:column="7">failf<pos:position pos:line="111" pos:column="12"/></name><argument_list pos:line="111" pos:column="12">(<argument><expr><name pos:line="111" pos:column="13">data<pos:position pos:line="111" pos:column="17"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="111" pos:column="18">"couldn't find my own IP address (%s)"<pos:position pos:line="111" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="58">myhost<pos:position pos:line="111" pos:column="64"/></name></expr></argument>)<pos:position pos:line="111" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="66"/></expr_stmt>
      <return pos:line="112" pos:column="7">return <expr><name pos:line="112" pos:column="14">CURLE_INTERFACE_FAILED<pos:position pos:line="112" pos:column="36"/></name></expr>;<pos:position pos:line="112" pos:column="37"/></return>
    }<pos:position pos:line="113" pos:column="6"/></block></then></if> <comment type="block" pos:line="113" pos:column="7">/* end of inet_addr */</comment>

    <if pos:line="115" pos:column="5">if<condition pos:line="115" pos:column="7">( <expr><name pos:line="115" pos:column="9">h<pos:position pos:line="115" pos:column="10"/></name></expr> )<pos:position pos:line="115" pos:column="12"/></condition><then pos:line="115" pos:column="12"> <block pos:line="115" pos:column="13">{
      <decl_stmt><decl><type><name pos:line="116" pos:column="7">Curl_addrinfo<pos:position pos:line="116" pos:column="20"/></name> <modifier pos:line="116" pos:column="21">*<pos:position pos:line="116" pos:column="22"/></modifier></type><name pos:line="116" pos:column="22">addr<pos:position pos:line="116" pos:column="26"/></name> <init pos:line="116" pos:column="27">= <expr><name><name pos:line="116" pos:column="29">h<pos:position pos:line="116" pos:column="30"/></name><operator pos:line="116" pos:column="30">-&gt;<pos:position pos:line="116" pos:column="35"/></operator><name pos:line="116" pos:column="32">addr<pos:position pos:line="116" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="116" pos:column="37"/></decl_stmt>
      <expr_stmt><expr><name pos:line="117" pos:column="7">sock<pos:position pos:line="117" pos:column="11"/></name> <operator pos:line="117" pos:column="12">=<pos:position pos:line="117" pos:column="13"/></operator> <name><name pos:line="117" pos:column="14">addr<pos:position pos:line="117" pos:column="18"/></name><operator pos:line="117" pos:column="18">-&gt;<pos:position pos:line="117" pos:column="23"/></operator><name pos:line="117" pos:column="20">ai_addr<pos:position pos:line="117" pos:column="27"/></name></name></expr>;<pos:position pos:line="117" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="118" pos:column="7">socksize<pos:position pos:line="118" pos:column="15"/></name> <operator pos:line="118" pos:column="16">=<pos:position pos:line="118" pos:column="17"/></operator> <name><name pos:line="118" pos:column="18">addr<pos:position pos:line="118" pos:column="22"/></name><operator pos:line="118" pos:column="22">-&gt;<pos:position pos:line="118" pos:column="27"/></operator><name pos:line="118" pos:column="24">ai_addrlen<pos:position pos:line="118" pos:column="34"/></name></name></expr>;<pos:position pos:line="118" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="119" pos:column="6"/></block></then>
    <else pos:line="120" pos:column="5">else
      <block type="pseudo"><return pos:line="121" pos:column="7">return <expr><name pos:line="121" pos:column="14">CURLE_INTERFACE_FAILED<pos:position pos:line="121" pos:column="36"/></name></expr>;<pos:position pos:line="121" pos:column="37"/></return></block></else></if>

  }<pos:position pos:line="123" pos:column="4"/></block></then>
  <elseif pos:line="124" pos:column="3">else <if pos:line="124" pos:column="8">if<condition pos:line="124" pos:column="10">(<expr><name pos:line="124" pos:column="11">port<pos:position pos:line="124" pos:column="15"/></name></expr>)<pos:position pos:line="124" pos:column="16"/></condition><then pos:line="124" pos:column="16"> <block pos:line="124" pos:column="17">{
    <comment type="block" pos:line="125" pos:column="5">/* if a local port number is requested but no local IP, extract the
       address from the socket */</comment>
    <expr_stmt><expr><call><name pos:line="127" pos:column="5">memset<pos:position pos:line="127" pos:column="11"/></name><argument_list pos:line="127" pos:column="11">(<argument><expr><operator pos:line="127" pos:column="12">&amp;<pos:position pos:line="127" pos:column="17"/></operator><name pos:line="127" pos:column="13">me<pos:position pos:line="127" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="17">0<pos:position pos:line="127" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="127" pos:column="20">sizeof<argument_list pos:line="127" pos:column="26">(<argument><expr pos:line="127" pos:column="27">struct <name pos:line="127" pos:column="34">sockaddr<pos:position pos:line="127" pos:column="42"/></name></expr></argument>)<pos:position pos:line="127" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="127" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="128" pos:column="5">me<pos:position pos:line="128" pos:column="7"/></name><operator pos:line="128" pos:column="7">.<pos:position pos:line="128" pos:column="8"/></operator><name pos:line="128" pos:column="8">sin_family<pos:position pos:line="128" pos:column="18"/></name></name> <operator pos:line="128" pos:column="19">=<pos:position pos:line="128" pos:column="20"/></operator> <name pos:line="128" pos:column="21">AF_INET<pos:position pos:line="128" pos:column="28"/></name></expr>;<pos:position pos:line="128" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="129" pos:column="5">me<pos:position pos:line="129" pos:column="7"/></name><operator pos:line="129" pos:column="7">.<pos:position pos:line="129" pos:column="8"/></operator><name pos:line="129" pos:column="8">sin_addr<pos:position pos:line="129" pos:column="16"/></name><operator pos:line="129" pos:column="16">.<pos:position pos:line="129" pos:column="17"/></operator><name pos:line="129" pos:column="17">s_addr<pos:position pos:line="129" pos:column="23"/></name></name> <operator pos:line="129" pos:column="24">=<pos:position pos:line="129" pos:column="25"/></operator> <name pos:line="129" pos:column="26">INADDR_ANY<pos:position pos:line="129" pos:column="36"/></name></expr>;<pos:position pos:line="129" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><name pos:line="131" pos:column="5">sock<pos:position pos:line="131" pos:column="9"/></name> <operator pos:line="131" pos:column="10">=<pos:position pos:line="131" pos:column="11"/></operator> <operator pos:line="131" pos:column="12">(<pos:position pos:line="131" pos:column="13"/></operator>struct <name pos:line="131" pos:column="20">sockaddr<pos:position pos:line="131" pos:column="28"/></name> <operator pos:line="131" pos:column="29">*<pos:position pos:line="131" pos:column="30"/></operator><operator pos:line="131" pos:column="30">)<pos:position pos:line="131" pos:column="31"/></operator><operator pos:line="131" pos:column="31">&amp;<pos:position pos:line="131" pos:column="36"/></operator><name pos:line="131" pos:column="32">me<pos:position pos:line="131" pos:column="34"/></name></expr>;<pos:position pos:line="131" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="132" pos:column="5">socksize<pos:position pos:line="132" pos:column="13"/></name> <operator pos:line="132" pos:column="14">=<pos:position pos:line="132" pos:column="15"/></operator> <sizeof pos:line="132" pos:column="16">sizeof<argument_list pos:line="132" pos:column="22">(<argument><expr pos:line="132" pos:column="23">struct <name pos:line="132" pos:column="30">sockaddr<pos:position pos:line="132" pos:column="38"/></name></expr></argument>)<pos:position pos:line="132" pos:column="39"/></argument_list></sizeof></expr>;<pos:position pos:line="132" pos:column="40"/></expr_stmt>

  }<pos:position pos:line="134" pos:column="4"/></block></then></if></elseif>
  <else pos:line="135" pos:column="3">else
    <comment type="block" pos:line="136" pos:column="5">/* no local kind of binding was requested */</comment>
    <block type="pseudo"><return pos:line="137" pos:column="5">return <expr><name pos:line="137" pos:column="12">CURLE_OK<pos:position pos:line="137" pos:column="20"/></name></expr>;<pos:position pos:line="137" pos:column="21"/></return></block></else></if>

  <do pos:line="139" pos:column="3">do <block pos:line="139" pos:column="6">{

    <comment type="block" pos:line="141" pos:column="5">/* Set port number to bind to, 0 makes the system pick one */</comment>
    <if pos:line="142" pos:column="5">if<condition pos:line="142" pos:column="7">(<expr><name><name pos:line="142" pos:column="8">sock<pos:position pos:line="142" pos:column="12"/></name><operator pos:line="142" pos:column="12">-&gt;<pos:position pos:line="142" pos:column="17"/></operator><name pos:line="142" pos:column="14">sa_family<pos:position pos:line="142" pos:column="23"/></name></name> <operator pos:line="142" pos:column="24">==<pos:position pos:line="142" pos:column="26"/></operator> <name pos:line="142" pos:column="27">AF_INET<pos:position pos:line="142" pos:column="34"/></name></expr>)<pos:position pos:line="142" pos:column="35"/></condition><then pos:line="142" pos:column="35">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="143" pos:column="7">(<pos:position pos:line="143" pos:column="8"/></operator><operator pos:line="143" pos:column="8">(<pos:position pos:line="143" pos:column="9"/></operator>struct <name pos:line="143" pos:column="16">sockaddr_in<pos:position pos:line="143" pos:column="27"/></name> <operator pos:line="143" pos:column="28">*<pos:position pos:line="143" pos:column="29"/></operator><operator pos:line="143" pos:column="29">)<pos:position pos:line="143" pos:column="30"/></operator><name pos:line="143" pos:column="30">sock<pos:position pos:line="143" pos:column="34"/></name><operator pos:line="143" pos:column="34">)<pos:position pos:line="143" pos:column="35"/></operator><operator pos:line="143" pos:column="35">-&gt;<pos:position pos:line="143" pos:column="40"/></operator><name pos:line="143" pos:column="37">sin_port<pos:position pos:line="143" pos:column="45"/></name> <operator pos:line="143" pos:column="46">=<pos:position pos:line="143" pos:column="47"/></operator> <call><name pos:line="143" pos:column="48">htons<pos:position pos:line="143" pos:column="53"/></name><argument_list pos:line="143" pos:column="53">(<argument><expr><name pos:line="143" pos:column="54">port<pos:position pos:line="143" pos:column="58"/></name></expr></argument>)<pos:position pos:line="143" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="60"/></expr_stmt></block></then>
<cpp:ifdef pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">ifdef<pos:position pos:line="144" pos:column="7"/></cpp:directive> <name pos:line="144" pos:column="8">ENABLE_IPV6<pos:position pos:line="144" pos:column="19"/></name></cpp:ifdef>
    <else pos:line="145" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><operator pos:line="146" pos:column="7">(<pos:position pos:line="146" pos:column="8"/></operator><operator pos:line="146" pos:column="8">(<pos:position pos:line="146" pos:column="9"/></operator>struct <name pos:line="146" pos:column="16">sockaddr_in6<pos:position pos:line="146" pos:column="28"/></name> <operator pos:line="146" pos:column="29">*<pos:position pos:line="146" pos:column="30"/></operator><operator pos:line="146" pos:column="30">)<pos:position pos:line="146" pos:column="31"/></operator><name pos:line="146" pos:column="31">sock<pos:position pos:line="146" pos:column="35"/></name><operator pos:line="146" pos:column="35">)<pos:position pos:line="146" pos:column="36"/></operator><operator pos:line="146" pos:column="36">-&gt;<pos:position pos:line="146" pos:column="41"/></operator><name pos:line="146" pos:column="38">sin6_port<pos:position pos:line="146" pos:column="47"/></name> <operator pos:line="146" pos:column="48">=<pos:position pos:line="146" pos:column="49"/></operator> <call><name pos:line="146" pos:column="50">htons<pos:position pos:line="146" pos:column="55"/></name><argument_list pos:line="146" pos:column="55">(<argument><expr><name pos:line="146" pos:column="56">port<pos:position pos:line="146" pos:column="60"/></name></expr></argument>)<pos:position pos:line="146" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="62"/></expr_stmt></block></else></if>
<cpp:endif pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">endif<pos:position pos:line="147" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="149" pos:column="5">if<condition pos:line="149" pos:column="7">( <expr><call><name pos:line="149" pos:column="9">bind<pos:position pos:line="149" pos:column="13"/></name><argument_list pos:line="149" pos:column="13">(<argument><expr><name pos:line="149" pos:column="14">sockfd<pos:position pos:line="149" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="22">sock<pos:position pos:line="149" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="28">socksize<pos:position pos:line="149" pos:column="36"/></name></expr></argument>)<pos:position pos:line="149" pos:column="37"/></argument_list></call> <operator pos:line="149" pos:column="38">&gt;=<pos:position pos:line="149" pos:column="43"/></operator> <literal type="number" pos:line="149" pos:column="41">0<pos:position pos:line="149" pos:column="42"/></literal></expr>)<pos:position pos:line="149" pos:column="43"/></condition><then pos:line="149" pos:column="43"> <block pos:line="149" pos:column="44">{
      <comment type="block" pos:line="150" pos:column="7">/* we succeeded to bind */</comment>
      <decl_stmt><decl><type><name><name pos:line="151" pos:column="7">struct<pos:position pos:line="151" pos:column="13"/></name> <name pos:line="151" pos:column="14">Curl_sockaddr_storage<pos:position pos:line="151" pos:column="35"/></name></name></type> <name pos:line="151" pos:column="36">add<pos:position pos:line="151" pos:column="39"/></name></decl>;<pos:position pos:line="151" pos:column="40"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="152" pos:column="7">socklen_t<pos:position pos:line="152" pos:column="16"/></name></type> <name pos:line="152" pos:column="17">size<pos:position pos:line="152" pos:column="21"/></name></decl>;<pos:position pos:line="152" pos:column="22"/></decl_stmt>

      <expr_stmt><expr><name pos:line="154" pos:column="7">size<pos:position pos:line="154" pos:column="11"/></name> <operator pos:line="154" pos:column="12">=<pos:position pos:line="154" pos:column="13"/></operator> <sizeof pos:line="154" pos:column="14">sizeof<argument_list pos:line="154" pos:column="20">(<argument><expr><name pos:line="154" pos:column="21">add<pos:position pos:line="154" pos:column="24"/></name></expr></argument>)<pos:position pos:line="154" pos:column="25"/></argument_list></sizeof></expr>;<pos:position pos:line="154" pos:column="26"/></expr_stmt>
      <if pos:line="155" pos:column="7">if<condition pos:line="155" pos:column="9">(<expr><call><name pos:line="155" pos:column="10">getsockname<pos:position pos:line="155" pos:column="21"/></name><argument_list pos:line="155" pos:column="21">(<argument><expr><name pos:line="155" pos:column="22">sockfd<pos:position pos:line="155" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="30">(<pos:position pos:line="155" pos:column="31"/></operator>struct <name pos:line="155" pos:column="38">sockaddr<pos:position pos:line="155" pos:column="46"/></name> <operator pos:line="155" pos:column="47">*<pos:position pos:line="155" pos:column="48"/></operator><operator pos:line="155" pos:column="48">)<pos:position pos:line="155" pos:column="49"/></operator> <operator pos:line="155" pos:column="50">&amp;<pos:position pos:line="155" pos:column="55"/></operator><name pos:line="155" pos:column="51">add<pos:position pos:line="155" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="56">&amp;<pos:position pos:line="155" pos:column="61"/></operator><name pos:line="155" pos:column="57">size<pos:position pos:line="155" pos:column="61"/></name></expr></argument>)<pos:position pos:line="155" pos:column="62"/></argument_list></call> <operator pos:line="155" pos:column="63">&lt;<pos:position pos:line="155" pos:column="67"/></operator> <literal type="number" pos:line="155" pos:column="65">0<pos:position pos:line="155" pos:column="66"/></literal></expr>)<pos:position pos:line="155" pos:column="67"/></condition><then pos:line="155" pos:column="67"> <block pos:line="155" pos:column="68">{
        <expr_stmt><expr><call><name pos:line="156" pos:column="9">failf<pos:position pos:line="156" pos:column="14"/></name><argument_list pos:line="156" pos:column="14">(<argument><expr><name pos:line="156" pos:column="15">data<pos:position pos:line="156" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="156" pos:column="21">"getsockname() failed"<pos:position pos:line="156" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="45"/></expr_stmt>
        <return pos:line="157" pos:column="9">return <expr><name pos:line="157" pos:column="16">CURLE_INTERFACE_FAILED<pos:position pos:line="157" pos:column="38"/></name></expr>;<pos:position pos:line="157" pos:column="39"/></return>
      }<pos:position pos:line="158" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="159" pos:column="7">/* We re-use/clobber the port variable here below */</comment>
      <if pos:line="160" pos:column="7">if<condition pos:line="160" pos:column="9">(<expr><operator pos:line="160" pos:column="10">(<pos:position pos:line="160" pos:column="11"/></operator><operator pos:line="160" pos:column="11">(<pos:position pos:line="160" pos:column="12"/></operator>struct <name pos:line="160" pos:column="19">sockaddr<pos:position pos:line="160" pos:column="27"/></name> <operator pos:line="160" pos:column="28">*<pos:position pos:line="160" pos:column="29"/></operator><operator pos:line="160" pos:column="29">)<pos:position pos:line="160" pos:column="30"/></operator><operator pos:line="160" pos:column="30">&amp;<pos:position pos:line="160" pos:column="35"/></operator><name pos:line="160" pos:column="31">add<pos:position pos:line="160" pos:column="34"/></name><operator pos:line="160" pos:column="34">)<pos:position pos:line="160" pos:column="35"/></operator><operator pos:line="160" pos:column="35">-&gt;<pos:position pos:line="160" pos:column="40"/></operator><name pos:line="160" pos:column="37">sa_family<pos:position pos:line="160" pos:column="46"/></name> <operator pos:line="160" pos:column="47">==<pos:position pos:line="160" pos:column="49"/></operator> <name pos:line="160" pos:column="50">AF_INET<pos:position pos:line="160" pos:column="57"/></name></expr>)<pos:position pos:line="160" pos:column="58"/></condition><then pos:line="160" pos:column="58">
        <block type="pseudo"><expr_stmt><expr><name pos:line="161" pos:column="9">port<pos:position pos:line="161" pos:column="13"/></name> <operator pos:line="161" pos:column="14">=<pos:position pos:line="161" pos:column="15"/></operator> <call><name pos:line="161" pos:column="16">ntohs<pos:position pos:line="161" pos:column="21"/></name><argument_list pos:line="161" pos:column="21">(<argument><expr><operator pos:line="161" pos:column="22">(<pos:position pos:line="161" pos:column="23"/></operator><operator pos:line="161" pos:column="23">(<pos:position pos:line="161" pos:column="24"/></operator>struct <name pos:line="161" pos:column="31">sockaddr_in<pos:position pos:line="161" pos:column="42"/></name> <operator pos:line="161" pos:column="43">*<pos:position pos:line="161" pos:column="44"/></operator><operator pos:line="161" pos:column="44">)<pos:position pos:line="161" pos:column="45"/></operator><operator pos:line="161" pos:column="45">&amp;<pos:position pos:line="161" pos:column="50"/></operator><name pos:line="161" pos:column="46">add<pos:position pos:line="161" pos:column="49"/></name><operator pos:line="161" pos:column="49">)<pos:position pos:line="161" pos:column="50"/></operator><operator pos:line="161" pos:column="50">-&gt;<pos:position pos:line="161" pos:column="55"/></operator><name pos:line="161" pos:column="52">sin_port<pos:position pos:line="161" pos:column="60"/></name></expr></argument>)<pos:position pos:line="161" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="62"/></expr_stmt></block></then>
<cpp:ifdef pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">ifdef<pos:position pos:line="162" pos:column="7"/></cpp:directive> <name pos:line="162" pos:column="8">ENABLE_IPV6<pos:position pos:line="162" pos:column="19"/></name></cpp:ifdef>
      <else pos:line="163" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="164" pos:column="9">port<pos:position pos:line="164" pos:column="13"/></name> <operator pos:line="164" pos:column="14">=<pos:position pos:line="164" pos:column="15"/></operator> <call><name pos:line="164" pos:column="16">ntohs<pos:position pos:line="164" pos:column="21"/></name><argument_list pos:line="164" pos:column="21">(<argument><expr><operator pos:line="164" pos:column="22">(<pos:position pos:line="164" pos:column="23"/></operator><operator pos:line="164" pos:column="23">(<pos:position pos:line="164" pos:column="24"/></operator>struct <name pos:line="164" pos:column="31">sockaddr_in6<pos:position pos:line="164" pos:column="43"/></name> <operator pos:line="164" pos:column="44">*<pos:position pos:line="164" pos:column="45"/></operator><operator pos:line="164" pos:column="45">)<pos:position pos:line="164" pos:column="46"/></operator><operator pos:line="164" pos:column="46">&amp;<pos:position pos:line="164" pos:column="51"/></operator><name pos:line="164" pos:column="47">add<pos:position pos:line="164" pos:column="50"/></name><operator pos:line="164" pos:column="50">)<pos:position pos:line="164" pos:column="51"/></operator><operator pos:line="164" pos:column="51">-&gt;<pos:position pos:line="164" pos:column="56"/></operator><name pos:line="164" pos:column="53">sin6_port<pos:position pos:line="164" pos:column="62"/></name></expr></argument>)<pos:position pos:line="164" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="64"/></expr_stmt></block></else></if>
<cpp:endif pos:line="165" pos:column="1">#<cpp:directive pos:line="165" pos:column="2">endif<pos:position pos:line="165" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name pos:line="166" pos:column="7">infof<pos:position pos:line="166" pos:column="12"/></name><argument_list pos:line="166" pos:column="12">(<argument><expr><name pos:line="166" pos:column="13">data<pos:position pos:line="166" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="19">"Local port: %d\n"<pos:position pos:line="166" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="39">port<pos:position pos:line="166" pos:column="43"/></name></expr></argument>)<pos:position pos:line="166" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="167" pos:column="7">conn<pos:position pos:line="167" pos:column="11"/></name><operator pos:line="167" pos:column="11">-&gt;<pos:position pos:line="167" pos:column="16"/></operator><name pos:line="167" pos:column="13">bits<pos:position pos:line="167" pos:column="17"/></name><operator pos:line="167" pos:column="17">.<pos:position pos:line="167" pos:column="18"/></operator><name pos:line="167" pos:column="18">bound<pos:position pos:line="167" pos:column="23"/></name></name> <operator pos:line="167" pos:column="24">=<pos:position pos:line="167" pos:column="25"/></operator> <name pos:line="167" pos:column="26">TRUE<pos:position pos:line="167" pos:column="30"/></name></expr>;<pos:position pos:line="167" pos:column="31"/></expr_stmt>
      <return pos:line="168" pos:column="7">return <expr><name pos:line="168" pos:column="14">CURLE_OK<pos:position pos:line="168" pos:column="22"/></name></expr>;<pos:position pos:line="168" pos:column="23"/></return>
    }<pos:position pos:line="169" pos:column="6"/></block></then></if>
    <if pos:line="170" pos:column="5">if<condition pos:line="170" pos:column="7">(<expr><operator pos:line="170" pos:column="8">--<pos:position pos:line="170" pos:column="10"/></operator><name pos:line="170" pos:column="10">portnum<pos:position pos:line="170" pos:column="17"/></name> <operator pos:line="170" pos:column="18">&gt;<pos:position pos:line="170" pos:column="22"/></operator> <literal type="number" pos:line="170" pos:column="20">0<pos:position pos:line="170" pos:column="21"/></literal></expr>)<pos:position pos:line="170" pos:column="22"/></condition><then pos:line="170" pos:column="22"> <block pos:line="170" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="171" pos:column="7">infof<pos:position pos:line="171" pos:column="12"/></name><argument_list pos:line="171" pos:column="12">(<argument><expr><name pos:line="171" pos:column="13">data<pos:position pos:line="171" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="171" pos:column="19">"Bind to local port %d failed, trying next\n"<pos:position pos:line="171" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="171" pos:column="66">port<pos:position pos:line="171" pos:column="70"/></name></expr></argument>)<pos:position pos:line="171" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="72"/></expr_stmt>
      <expr_stmt><expr><name pos:line="172" pos:column="7">port<pos:position pos:line="172" pos:column="11"/></name><operator pos:line="172" pos:column="11">++<pos:position pos:line="172" pos:column="13"/></operator></expr>;<pos:position pos:line="172" pos:column="14"/></expr_stmt> <comment type="block" pos:line="172" pos:column="15">/* try next port */</comment>
    }<pos:position pos:line="173" pos:column="6"/></block></then>
    <else pos:line="174" pos:column="5">else
      <block type="pseudo"><break pos:line="175" pos:column="7">break;<pos:position pos:line="175" pos:column="13"/></break></block></else></if>
  }<pos:position pos:line="176" pos:column="4"/></block> while<condition pos:line="176" pos:column="10">(<expr><literal type="number" pos:line="176" pos:column="11">1<pos:position pos:line="176" pos:column="12"/></literal></expr>)<pos:position pos:line="176" pos:column="13"/></condition>;<pos:position pos:line="176" pos:column="14"/></do>

  <expr_stmt><expr><name><name pos:line="178" pos:column="3">data<pos:position pos:line="178" pos:column="7"/></name><operator pos:line="178" pos:column="7">-&gt;<pos:position pos:line="178" pos:column="12"/></operator><name pos:line="178" pos:column="9">state<pos:position pos:line="178" pos:column="14"/></name><operator pos:line="178" pos:column="14">.<pos:position pos:line="178" pos:column="15"/></operator><name pos:line="178" pos:column="15">os_errno<pos:position pos:line="178" pos:column="23"/></name></name> <operator pos:line="178" pos:column="24">=<pos:position pos:line="178" pos:column="25"/></operator> <name pos:line="178" pos:column="26">SOCKERRNO<pos:position pos:line="178" pos:column="35"/></name></expr>;<pos:position pos:line="178" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="179" pos:column="3">failf<pos:position pos:line="179" pos:column="8"/></name><argument_list pos:line="179" pos:column="8">(<argument><expr><name pos:line="179" pos:column="9">data<pos:position pos:line="179" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="179" pos:column="15">"bind failure: %s"<pos:position pos:line="179" pos:column="33"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="180" pos:column="9">Curl_strerror<pos:position pos:line="180" pos:column="22"/></name><argument_list pos:line="180" pos:column="22">(<argument><expr><name pos:line="180" pos:column="23">conn<pos:position pos:line="180" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="180" pos:column="29">data<pos:position pos:line="180" pos:column="33"/></name><operator pos:line="180" pos:column="33">-&gt;<pos:position pos:line="180" pos:column="38"/></operator><name pos:line="180" pos:column="35">state<pos:position pos:line="180" pos:column="40"/></name><operator pos:line="180" pos:column="40">.<pos:position pos:line="180" pos:column="41"/></operator><name pos:line="180" pos:column="41">os_errno<pos:position pos:line="180" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="180" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="180" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="52"/></expr_stmt>
  <return pos:line="181" pos:column="3">return <expr><name pos:line="181" pos:column="10">CURLE_INTERFACE_FAILED<pos:position pos:line="181" pos:column="32"/></name></expr>;<pos:position pos:line="181" pos:column="33"/></return>

}<pos:position pos:line="183" pos:column="2"/></block></function></unit>
