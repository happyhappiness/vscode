<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_712_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ParseURLAndFillConnection<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">SessionHandle<pos:position pos:line="1" pos:column="63"/></name></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">data<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
                                          <parameter><decl><type><name><name pos:line="2" pos:column="43">struct<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">connectdata<pos:position pos:line="2" pos:column="61"/></name></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">conn<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">at<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">tmp<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">path<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><name><name pos:line="7" pos:column="16">data<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">-&gt;<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="22">state<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">.<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="28">path<pos:position pos:line="7" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="9" pos:column="3">/*************************************************************
   * Parse the URL.
   *
   * We need to parse the url even when using the proxy, because we will need
   * the hostname and port in case we are trying to SSL connect through the
   * proxy -- and we don't know if we will need to use SSL until we parse the
   * url ...
   ************************************************************/</comment>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">(<pos:position pos:line="17" pos:column="7"/></operator><literal type="number" pos:line="17" pos:column="7">2<pos:position pos:line="17" pos:column="8"/></literal> <operator pos:line="17" pos:column="9">==<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">sscanf<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name><name pos:line="17" pos:column="19">data<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">-&gt;<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="25">change<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">.<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="32">url<pos:position pos:line="17" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="37">"%15[^:]:%[^\n]"<pos:position pos:line="17" pos:column="53"/></literal></expr></argument>,
                  <argument><expr><name><name pos:line="18" pos:column="19">conn<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">protostr<pos:position pos:line="18" pos:column="33"/></name></name></expr></argument>,
                  <argument><expr><name pos:line="19" pos:column="19">path<pos:position pos:line="19" pos:column="23"/></name></expr></argument>)<pos:position pos:line="19" pos:column="24"/></argument_list></call><operator pos:line="19" pos:column="24">)<pos:position pos:line="19" pos:column="25"/></operator> <operator pos:line="19" pos:column="26">&amp;&amp;<pos:position pos:line="19" pos:column="36"/></operator> <call><name pos:line="19" pos:column="29">strequal<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><name><name pos:line="19" pos:column="38">conn<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">protostr<pos:position pos:line="19" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="54">"file"<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="62"/></condition><then pos:line="19" pos:column="62"> <block pos:line="19" pos:column="63">{
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name><name pos:line="20" pos:column="8">path<pos:position pos:line="20" pos:column="12"/></name><index pos:line="20" pos:column="12">[<expr><literal type="number" pos:line="20" pos:column="13">0<pos:position pos:line="20" pos:column="14"/></literal></expr>]<pos:position pos:line="20" pos:column="15"/></index></name> <operator pos:line="20" pos:column="16">==<pos:position pos:line="20" pos:column="18"/></operator> <literal type="char" pos:line="20" pos:column="19">'/'<pos:position pos:line="20" pos:column="22"/></literal> <operator pos:line="20" pos:column="23">&amp;&amp;<pos:position pos:line="20" pos:column="33"/></operator> <name><name pos:line="20" pos:column="26">path<pos:position pos:line="20" pos:column="30"/></name><index pos:line="20" pos:column="30">[<expr><literal type="number" pos:line="20" pos:column="31">1<pos:position pos:line="20" pos:column="32"/></literal></expr>]<pos:position pos:line="20" pos:column="33"/></index></name> <operator pos:line="20" pos:column="34">==<pos:position pos:line="20" pos:column="36"/></operator> <literal type="char" pos:line="20" pos:column="37">'/'<pos:position pos:line="20" pos:column="40"/></literal></expr>)<pos:position pos:line="20" pos:column="41"/></condition><then pos:line="20" pos:column="41"> <block pos:line="20" pos:column="42">{
      <comment type="block" pos:line="21" pos:column="7">/* Allow omitted hostname (e.g. file:/&lt;path&gt;).  This is not strictly
       * speaking a valid file: URL by RFC 1738, but treating file:/&lt;path&gt; as
       * file://localhost/&lt;path&gt; is similar to how other schemes treat missing
       * hostnames.  See RFC 1808. */</comment>

      <comment type="block" pos:line="26" pos:column="7">/* This cannot be done with strcpy() in a portable manner, since the
         memory areas overlap! */</comment>
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">memmove<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">path<pos:position pos:line="28" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="21">path<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">+<pos:position pos:line="28" pos:column="27"/></operator> <literal type="number" pos:line="28" pos:column="28">2<pos:position pos:line="28" pos:column="29"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="31">strlen<pos:position pos:line="28" pos:column="37"/></name><argument_list pos:line="28" pos:column="37">(<argument><expr><name pos:line="28" pos:column="38">path<pos:position pos:line="28" pos:column="42"/></name> <operator pos:line="28" pos:column="43">+<pos:position pos:line="28" pos:column="44"/></operator> <literal type="number" pos:line="28" pos:column="45">2<pos:position pos:line="28" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="47"/></argument_list></call><operator pos:line="28" pos:column="47">+<pos:position pos:line="28" pos:column="48"/></operator><literal type="number" pos:line="28" pos:column="48">1<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="30" pos:column="5">/*
     * we deal with file://&lt;host&gt;/&lt;path&gt; differently since it supports no
     * hostname other than "localhost" and "127.0.0.1", which is unique among
     * the URL protocols specified in RFC 1738
     */</comment>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name><name pos:line="35" pos:column="8">path<pos:position pos:line="35" pos:column="12"/></name><index pos:line="35" pos:column="12">[<expr><literal type="number" pos:line="35" pos:column="13">0<pos:position pos:line="35" pos:column="14"/></literal></expr>]<pos:position pos:line="35" pos:column="15"/></index></name> <operator pos:line="35" pos:column="16">!=<pos:position pos:line="35" pos:column="18"/></operator> <literal type="char" pos:line="35" pos:column="19">'/'<pos:position pos:line="35" pos:column="22"/></literal></expr>)<pos:position pos:line="35" pos:column="23"/></condition><then pos:line="35" pos:column="23"> <block pos:line="35" pos:column="24">{
      <comment type="block" pos:line="36" pos:column="7">/* the URL included a host name, we ignore host names in file:// URLs
         as the standards don't define what to do with them */</comment>
      <decl_stmt><decl><type><name pos:line="38" pos:column="7">char<pos:position pos:line="38" pos:column="11"/></name> <modifier pos:line="38" pos:column="12">*<pos:position pos:line="38" pos:column="13"/></modifier></type><name pos:line="38" pos:column="13">ptr<pos:position pos:line="38" pos:column="16"/></name><init pos:line="38" pos:column="16">=<expr><call><name pos:line="38" pos:column="17">strchr<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">path<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="38" pos:column="30">'/'<pos:position pos:line="38" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="35"/></decl_stmt>
      <if pos:line="39" pos:column="7">if<condition pos:line="39" pos:column="9">(<expr><name pos:line="39" pos:column="10">ptr<pos:position pos:line="39" pos:column="13"/></name></expr>)<pos:position pos:line="39" pos:column="14"/></condition><then pos:line="39" pos:column="14"> <block pos:line="39" pos:column="15">{
        <comment type="block" pos:line="40" pos:column="9">/* there was a slash present

           RFC1738 (section 3.1, page 5) says:

           The rest of the locator consists of data specific to the scheme,
           and is known as the "url-path". It supplies the details of how the
           specified resource can be accessed. Note that the "/" between the
           host (or port) and the url-path is NOT part of the url-path.

           As most agents use file://localhost/foo to get '/foo' although the
           slash preceding foo is a separator and not a slash for the path,
           a URL as file://localhost//foo must be valid as well, to refer to
           the same file with an absolute path.
        */</comment>

        <if pos:line="55" pos:column="9">if<condition pos:line="55" pos:column="11">(<expr><name><name pos:line="55" pos:column="12">ptr<pos:position pos:line="55" pos:column="15"/></name><index pos:line="55" pos:column="15">[<expr><literal type="number" pos:line="55" pos:column="16">1<pos:position pos:line="55" pos:column="17"/></literal></expr>]<pos:position pos:line="55" pos:column="18"/></index></name> <operator pos:line="55" pos:column="19">&amp;&amp;<pos:position pos:line="55" pos:column="29"/></operator> <operator pos:line="55" pos:column="22">(<pos:position pos:line="55" pos:column="23"/></operator><literal type="char" pos:line="55" pos:column="23">'/'<pos:position pos:line="55" pos:column="26"/></literal> <operator pos:line="55" pos:column="27">==<pos:position pos:line="55" pos:column="29"/></operator> <name><name pos:line="55" pos:column="30">ptr<pos:position pos:line="55" pos:column="33"/></name><index pos:line="55" pos:column="33">[<expr><literal type="number" pos:line="55" pos:column="34">1<pos:position pos:line="55" pos:column="35"/></literal></expr>]<pos:position pos:line="55" pos:column="36"/></index></name><operator pos:line="55" pos:column="36">)<pos:position pos:line="55" pos:column="37"/></operator></expr>)<pos:position pos:line="55" pos:column="38"/></condition><then pos:line="55" pos:column="38">
          <comment type="block" pos:line="56" pos:column="11">/* if there was two slashes, we skip the first one as that is then
             used truly as a separator */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="11">ptr<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">++<pos:position pos:line="58" pos:column="16"/></operator></expr>;<pos:position pos:line="58" pos:column="17"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="60" pos:column="9">/* This cannot be made with strcpy, as the memory chunks overlap! */</comment>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">memmove<pos:position pos:line="61" pos:column="16"/></name><argument_list pos:line="61" pos:column="16">(<argument><expr><name pos:line="61" pos:column="17">path<pos:position pos:line="61" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="23">ptr<pos:position pos:line="61" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="28">strlen<pos:position pos:line="61" pos:column="34"/></name><argument_list pos:line="61" pos:column="34">(<argument><expr><name pos:line="61" pos:column="35">ptr<pos:position pos:line="61" pos:column="38"/></name></expr></argument>)<pos:position pos:line="61" pos:column="39"/></argument_list></call><operator pos:line="61" pos:column="39">+<pos:position pos:line="61" pos:column="40"/></operator><literal type="number" pos:line="61" pos:column="40">1<pos:position pos:line="61" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="43"/></expr_stmt>
      }<pos:position pos:line="62" pos:column="8"/></block></then></if>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">strcpy<pos:position pos:line="65" pos:column="11"/></name><argument_list pos:line="65" pos:column="11">(<argument><expr><name><name pos:line="65" pos:column="12">conn<pos:position pos:line="65" pos:column="16"/></name><operator pos:line="65" pos:column="16">-&gt;<pos:position pos:line="65" pos:column="21"/></operator><name pos:line="65" pos:column="18">protostr<pos:position pos:line="65" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="28">"file"<pos:position pos:line="65" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="36"/></expr_stmt> <comment type="block" pos:line="65" pos:column="37">/* store protocol string lowercase */</comment>
  }<pos:position pos:line="66" pos:column="4"/></block></then>
  <else pos:line="67" pos:column="3">else <block pos:line="67" pos:column="8">{
    <comment type="block" pos:line="68" pos:column="5">/* clear path */</comment>
    <expr_stmt><expr><name><name pos:line="69" pos:column="5">path<pos:position pos:line="69" pos:column="9"/></name><index pos:line="69" pos:column="9">[<expr><literal type="number" pos:line="69" pos:column="10">0<pos:position pos:line="69" pos:column="11"/></literal></expr>]<pos:position pos:line="69" pos:column="12"/></index></name><operator pos:line="69" pos:column="12">=<pos:position pos:line="69" pos:column="13"/></operator><literal type="number" pos:line="69" pos:column="13">0<pos:position pos:line="69" pos:column="14"/></literal></expr>;<pos:position pos:line="69" pos:column="15"/></expr_stmt>

    <if pos:line="71" pos:column="5">if<condition pos:line="71" pos:column="7">(<expr><literal type="number" pos:line="71" pos:column="8">2<pos:position pos:line="71" pos:column="9"/></literal> <operator pos:line="71" pos:column="10">&gt;<pos:position pos:line="71" pos:column="14"/></operator> <call><name pos:line="71" pos:column="12">sscanf<pos:position pos:line="71" pos:column="18"/></name><argument_list pos:line="71" pos:column="18">(<argument><expr><name><name pos:line="71" pos:column="19">data<pos:position pos:line="71" pos:column="23"/></name><operator pos:line="71" pos:column="23">-&gt;<pos:position pos:line="71" pos:column="28"/></operator><name pos:line="71" pos:column="25">change<pos:position pos:line="71" pos:column="31"/></name><operator pos:line="71" pos:column="31">.<pos:position pos:line="71" pos:column="32"/></operator><name pos:line="71" pos:column="32">url<pos:position pos:line="71" pos:column="35"/></name></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="72" pos:column="20">"%15[^\n:]://%[^\n/]%[^\n]"<pos:position pos:line="72" pos:column="47"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="73" pos:column="20">conn<pos:position pos:line="73" pos:column="24"/></name><operator pos:line="73" pos:column="24">-&gt;<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="26">protostr<pos:position pos:line="73" pos:column="34"/></name></name></expr></argument>,
                   <argument><expr><name><name pos:line="74" pos:column="20">conn<pos:position pos:line="74" pos:column="24"/></name><operator pos:line="74" pos:column="24">-&gt;<pos:position pos:line="74" pos:column="29"/></operator><name pos:line="74" pos:column="26">host<pos:position pos:line="74" pos:column="30"/></name><operator pos:line="74" pos:column="30">.<pos:position pos:line="74" pos:column="31"/></operator><name pos:line="74" pos:column="31">name<pos:position pos:line="74" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="37">path<pos:position pos:line="74" pos:column="41"/></name></expr></argument>)<pos:position pos:line="74" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="43"/></condition><then pos:line="74" pos:column="43"> <block pos:line="74" pos:column="44">{

      <comment type="block" pos:line="76" pos:column="7">/*
       * The URL was badly formatted, let's try the browser-style _without_
       * protocol specified like 'http://'.
       */</comment>
      <if pos:line="80" pos:column="7">if<condition pos:line="80" pos:column="9">(<expr><operator pos:line="80" pos:column="10">(<pos:position pos:line="80" pos:column="11"/></operator><literal type="number" pos:line="80" pos:column="11">1<pos:position pos:line="80" pos:column="12"/></literal> <operator pos:line="80" pos:column="13">&gt;<pos:position pos:line="80" pos:column="17"/></operator> <call><name pos:line="80" pos:column="15">sscanf<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">(<argument><expr><name><name pos:line="80" pos:column="22">data<pos:position pos:line="80" pos:column="26"/></name><operator pos:line="80" pos:column="26">-&gt;<pos:position pos:line="80" pos:column="31"/></operator><name pos:line="80" pos:column="28">change<pos:position pos:line="80" pos:column="34"/></name><operator pos:line="80" pos:column="34">.<pos:position pos:line="80" pos:column="35"/></operator><name pos:line="80" pos:column="35">url<pos:position pos:line="80" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="40">"%[^\n/]%[^\n]"<pos:position pos:line="80" pos:column="55"/></literal></expr></argument>,
                     <argument><expr><name><name pos:line="81" pos:column="22">conn<pos:position pos:line="81" pos:column="26"/></name><operator pos:line="81" pos:column="26">-&gt;<pos:position pos:line="81" pos:column="31"/></operator><name pos:line="81" pos:column="28">host<pos:position pos:line="81" pos:column="32"/></name><operator pos:line="81" pos:column="32">.<pos:position pos:line="81" pos:column="33"/></operator><name pos:line="81" pos:column="33">name<pos:position pos:line="81" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="39">path<pos:position pos:line="81" pos:column="43"/></name></expr></argument>)<pos:position pos:line="81" pos:column="44"/></argument_list></call><operator pos:line="81" pos:column="44">)<pos:position pos:line="81" pos:column="45"/></operator></expr> )<pos:position pos:line="81" pos:column="47"/></condition><then pos:line="81" pos:column="47"> <block pos:line="81" pos:column="48">{
        <comment type="block" pos:line="82" pos:column="9">/*
         * We couldn't even get this format.
         */</comment>
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">failf<pos:position pos:line="85" pos:column="14"/></name><argument_list pos:line="85" pos:column="14">(<argument><expr><name pos:line="85" pos:column="15">data<pos:position pos:line="85" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="21">"&lt;url&gt; malformed"<pos:position pos:line="85" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="40"/></expr_stmt>
        <return pos:line="86" pos:column="9">return <expr><name pos:line="86" pos:column="16">CURLE_URL_MALFORMAT<pos:position pos:line="86" pos:column="35"/></name></expr>;<pos:position pos:line="86" pos:column="36"/></return>
      }<pos:position pos:line="87" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="89" pos:column="7">/*
       * Since there was no protocol part specified, we guess what protocol it
       * is based on the first letters of the server name.
       */</comment>

      <comment type="block" pos:line="94" pos:column="7">/* Note: if you add a new protocol, please update the list in
       * lib/version.c too! */</comment>

      <if pos:line="97" pos:column="7">if<condition pos:line="97" pos:column="9">(<expr><call><name pos:line="97" pos:column="10">checkprefix<pos:position pos:line="97" pos:column="21"/></name><argument_list pos:line="97" pos:column="21">(<argument><expr><literal type="string" pos:line="97" pos:column="22">"FTP."<pos:position pos:line="97" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="30">conn<pos:position pos:line="97" pos:column="34"/></name><operator pos:line="97" pos:column="34">-&gt;<pos:position pos:line="97" pos:column="39"/></operator><name pos:line="97" pos:column="36">host<pos:position pos:line="97" pos:column="40"/></name><operator pos:line="97" pos:column="40">.<pos:position pos:line="97" pos:column="41"/></operator><name pos:line="97" pos:column="41">name<pos:position pos:line="97" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="97" pos:column="47"/></condition><then pos:line="97" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="98" pos:column="9">strcpy<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><name><name pos:line="98" pos:column="16">conn<pos:position pos:line="98" pos:column="20"/></name><operator pos:line="98" pos:column="20">-&gt;<pos:position pos:line="98" pos:column="25"/></operator><name pos:line="98" pos:column="22">protostr<pos:position pos:line="98" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="32">"ftp"<pos:position pos:line="98" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="39"/></expr_stmt></block></then>
      <elseif pos:line="99" pos:column="7">else <if pos:line="99" pos:column="12">if<condition pos:line="99" pos:column="14">(<expr><call><name pos:line="99" pos:column="15">checkprefix<pos:position pos:line="99" pos:column="26"/></name><argument_list pos:line="99" pos:column="26">(<argument><expr><literal type="string" pos:line="99" pos:column="27">"DICT."<pos:position pos:line="99" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="36">conn<pos:position pos:line="99" pos:column="40"/></name><operator pos:line="99" pos:column="40">-&gt;<pos:position pos:line="99" pos:column="45"/></operator><name pos:line="99" pos:column="42">host<pos:position pos:line="99" pos:column="46"/></name><operator pos:line="99" pos:column="46">.<pos:position pos:line="99" pos:column="47"/></operator><name pos:line="99" pos:column="47">name<pos:position pos:line="99" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="53"/></condition><then pos:line="99" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="9">strcpy<pos:position pos:line="100" pos:column="15"/></name><argument_list pos:line="100" pos:column="15">(<argument><expr><name><name pos:line="100" pos:column="16">conn<pos:position pos:line="100" pos:column="20"/></name><operator pos:line="100" pos:column="20">-&gt;<pos:position pos:line="100" pos:column="25"/></operator><name pos:line="100" pos:column="22">protostr<pos:position pos:line="100" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="32">"DICT"<pos:position pos:line="100" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="40"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="101" pos:column="7">else <if pos:line="101" pos:column="12">if<condition pos:line="101" pos:column="14">(<expr><call><name pos:line="101" pos:column="15">checkprefix<pos:position pos:line="101" pos:column="26"/></name><argument_list pos:line="101" pos:column="26">(<argument><expr><literal type="string" pos:line="101" pos:column="27">"LDAP."<pos:position pos:line="101" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="36">conn<pos:position pos:line="101" pos:column="40"/></name><operator pos:line="101" pos:column="40">-&gt;<pos:position pos:line="101" pos:column="45"/></operator><name pos:line="101" pos:column="42">host<pos:position pos:line="101" pos:column="46"/></name><operator pos:line="101" pos:column="46">.<pos:position pos:line="101" pos:column="47"/></operator><name pos:line="101" pos:column="47">name<pos:position pos:line="101" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="101" pos:column="53"/></condition><then pos:line="101" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="102" pos:column="9">strcpy<pos:position pos:line="102" pos:column="15"/></name><argument_list pos:line="102" pos:column="15">(<argument><expr><name><name pos:line="102" pos:column="16">conn<pos:position pos:line="102" pos:column="20"/></name><operator pos:line="102" pos:column="20">-&gt;<pos:position pos:line="102" pos:column="25"/></operator><name pos:line="102" pos:column="22">protostr<pos:position pos:line="102" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="32">"LDAP"<pos:position pos:line="102" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="40"/></expr_stmt></block></then></if></elseif>
      <else pos:line="103" pos:column="7">else <block pos:line="103" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="104" pos:column="9">strcpy<pos:position pos:line="104" pos:column="15"/></name><argument_list pos:line="104" pos:column="15">(<argument><expr><name><name pos:line="104" pos:column="16">conn<pos:position pos:line="104" pos:column="20"/></name><operator pos:line="104" pos:column="20">-&gt;<pos:position pos:line="104" pos:column="25"/></operator><name pos:line="104" pos:column="22">protostr<pos:position pos:line="104" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="32">"http"<pos:position pos:line="104" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="40"/></expr_stmt>
      }<pos:position pos:line="105" pos:column="8"/></block></else></if>

      <expr_stmt><expr><name><name pos:line="107" pos:column="7">conn<pos:position pos:line="107" pos:column="11"/></name><operator pos:line="107" pos:column="11">-&gt;<pos:position pos:line="107" pos:column="16"/></operator><name pos:line="107" pos:column="13">protocol<pos:position pos:line="107" pos:column="21"/></name></name> <operator pos:line="107" pos:column="22">|=<pos:position pos:line="107" pos:column="24"/></operator> <name pos:line="107" pos:column="25">PROT_MISSING<pos:position pos:line="107" pos:column="37"/></name></expr>;<pos:position pos:line="107" pos:column="38"/></expr_stmt> <comment type="block" pos:line="107" pos:column="39">/* not given in URL */</comment>
    }<pos:position pos:line="108" pos:column="6"/></block></then></if>
  }<pos:position pos:line="109" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="111" pos:column="3">/* We search for '?' in the host name (but only on the right side of a
   * @-letter to allow ?-letters in username and password) to handle things
   * like http://example.com?param= (notice the missing '/').
   */</comment>
  <expr_stmt><expr><name pos:line="115" pos:column="3">at<pos:position pos:line="115" pos:column="5"/></name> <operator pos:line="115" pos:column="6">=<pos:position pos:line="115" pos:column="7"/></operator> <call><name pos:line="115" pos:column="8">strchr<pos:position pos:line="115" pos:column="14"/></name><argument_list pos:line="115" pos:column="14">(<argument><expr><name><name pos:line="115" pos:column="15">conn<pos:position pos:line="115" pos:column="19"/></name><operator pos:line="115" pos:column="19">-&gt;<pos:position pos:line="115" pos:column="24"/></operator><name pos:line="115" pos:column="21">host<pos:position pos:line="115" pos:column="25"/></name><operator pos:line="115" pos:column="25">.<pos:position pos:line="115" pos:column="26"/></operator><name pos:line="115" pos:column="26">name<pos:position pos:line="115" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="115" pos:column="32">'@'<pos:position pos:line="115" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="37"/></expr_stmt>
  <if pos:line="116" pos:column="3">if<condition pos:line="116" pos:column="5">(<expr><name pos:line="116" pos:column="6">at<pos:position pos:line="116" pos:column="8"/></name></expr>)<pos:position pos:line="116" pos:column="9"/></condition><then pos:line="116" pos:column="9">
    <block type="pseudo"><expr_stmt><expr><name pos:line="117" pos:column="5">tmp<pos:position pos:line="117" pos:column="8"/></name> <operator pos:line="117" pos:column="9">=<pos:position pos:line="117" pos:column="10"/></operator> <call><name pos:line="117" pos:column="11">strchr<pos:position pos:line="117" pos:column="17"/></name><argument_list pos:line="117" pos:column="17">(<argument><expr><name pos:line="117" pos:column="18">at<pos:position pos:line="117" pos:column="20"/></name><operator pos:line="117" pos:column="20">+<pos:position pos:line="117" pos:column="21"/></operator><literal type="number" pos:line="117" pos:column="21">1<pos:position pos:line="117" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="117" pos:column="24">'?'<pos:position pos:line="117" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="29"/></expr_stmt></block></then>
  <else pos:line="118" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="119" pos:column="5">tmp<pos:position pos:line="119" pos:column="8"/></name> <operator pos:line="119" pos:column="9">=<pos:position pos:line="119" pos:column="10"/></operator> <call><name pos:line="119" pos:column="11">strchr<pos:position pos:line="119" pos:column="17"/></name><argument_list pos:line="119" pos:column="17">(<argument><expr><name><name pos:line="119" pos:column="18">conn<pos:position pos:line="119" pos:column="22"/></name><operator pos:line="119" pos:column="22">-&gt;<pos:position pos:line="119" pos:column="27"/></operator><name pos:line="119" pos:column="24">host<pos:position pos:line="119" pos:column="28"/></name><operator pos:line="119" pos:column="28">.<pos:position pos:line="119" pos:column="29"/></operator><name pos:line="119" pos:column="29">name<pos:position pos:line="119" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="119" pos:column="35">'?'<pos:position pos:line="119" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="40"/></expr_stmt></block></else></if>

  <if pos:line="121" pos:column="3">if<condition pos:line="121" pos:column="5">(<expr><name pos:line="121" pos:column="6">tmp<pos:position pos:line="121" pos:column="9"/></name></expr>)<pos:position pos:line="121" pos:column="10"/></condition><then pos:line="121" pos:column="10"> <block pos:line="121" pos:column="11">{
    <comment type="block" pos:line="122" pos:column="5">/* We must insert a slash before the '?'-letter in the URL. If the URL had
       a slash after the '?', that is where the path currently begins and the
       '?string' is still part of the host name.

       We must move the trailing part from the host name and put it first in
       the path. And have it all prefixed with a slash.
    */</comment>

    <decl_stmt><decl><type><name pos:line="130" pos:column="5">size_t<pos:position pos:line="130" pos:column="11"/></name></type> <name pos:line="130" pos:column="12">hostlen<pos:position pos:line="130" pos:column="19"/></name> <init pos:line="130" pos:column="20">= <expr><call><name pos:line="130" pos:column="22">strlen<pos:position pos:line="130" pos:column="28"/></name><argument_list pos:line="130" pos:column="28">(<argument><expr><name pos:line="130" pos:column="29">tmp<pos:position pos:line="130" pos:column="32"/></name></expr></argument>)<pos:position pos:line="130" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="130" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="131" pos:column="5">size_t<pos:position pos:line="131" pos:column="11"/></name></type> <name pos:line="131" pos:column="12">pathlen<pos:position pos:line="131" pos:column="19"/></name> <init pos:line="131" pos:column="20">= <expr><call><name pos:line="131" pos:column="22">strlen<pos:position pos:line="131" pos:column="28"/></name><argument_list pos:line="131" pos:column="28">(<argument><expr><name pos:line="131" pos:column="29">path<pos:position pos:line="131" pos:column="33"/></name></expr></argument>)<pos:position pos:line="131" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="131" pos:column="35"/></decl_stmt>

    <comment type="block" pos:line="133" pos:column="5">/* move the existing path plus the zero byte forward, to make room for
       the host-name part */</comment>
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">memmove<pos:position pos:line="135" pos:column="12"/></name><argument_list pos:line="135" pos:column="12">(<argument><expr><name pos:line="135" pos:column="13">path<pos:position pos:line="135" pos:column="17"/></name><operator pos:line="135" pos:column="17">+<pos:position pos:line="135" pos:column="18"/></operator><name pos:line="135" pos:column="18">hostlen<pos:position pos:line="135" pos:column="25"/></name><operator pos:line="135" pos:column="25">+<pos:position pos:line="135" pos:column="26"/></operator><literal type="number" pos:line="135" pos:column="26">1<pos:position pos:line="135" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="29">path<pos:position pos:line="135" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="35">pathlen<pos:position pos:line="135" pos:column="42"/></name><operator pos:line="135" pos:column="42">+<pos:position pos:line="135" pos:column="43"/></operator><literal type="number" pos:line="135" pos:column="43">1<pos:position pos:line="135" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="46"/></expr_stmt>

     <comment type="block" pos:line="137" pos:column="6">/* now copy the trailing host part in front of the existing path */</comment>
    <expr_stmt><expr><call><name pos:line="138" pos:column="5">memcpy<pos:position pos:line="138" pos:column="11"/></name><argument_list pos:line="138" pos:column="11">(<argument><expr><name pos:line="138" pos:column="12">path<pos:position pos:line="138" pos:column="16"/></name><operator pos:line="138" pos:column="16">+<pos:position pos:line="138" pos:column="17"/></operator><literal type="number" pos:line="138" pos:column="17">1<pos:position pos:line="138" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="138" pos:column="20">tmp<pos:position pos:line="138" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="25">hostlen<pos:position pos:line="138" pos:column="32"/></name></expr></argument>)<pos:position pos:line="138" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="140" pos:column="5">path<pos:position pos:line="140" pos:column="9"/></name><index pos:line="140" pos:column="9">[<expr><literal type="number" pos:line="140" pos:column="10">0<pos:position pos:line="140" pos:column="11"/></literal></expr>]<pos:position pos:line="140" pos:column="12"/></index></name><operator pos:line="140" pos:column="12">=<pos:position pos:line="140" pos:column="13"/></operator><literal type="char" pos:line="140" pos:column="13">'/'<pos:position pos:line="140" pos:column="16"/></literal></expr>;<pos:position pos:line="140" pos:column="17"/></expr_stmt> <comment type="block" pos:line="140" pos:column="18">/* prepend the missing slash */</comment>

    <expr_stmt><expr><operator pos:line="142" pos:column="5">*<pos:position pos:line="142" pos:column="6"/></operator><name pos:line="142" pos:column="6">tmp<pos:position pos:line="142" pos:column="9"/></name><operator pos:line="142" pos:column="9">=<pos:position pos:line="142" pos:column="10"/></operator><literal type="number" pos:line="142" pos:column="10">0<pos:position pos:line="142" pos:column="11"/></literal></expr>;<pos:position pos:line="142" pos:column="12"/></expr_stmt> <comment type="block" pos:line="142" pos:column="13">/* now cut off the hostname at the ? */</comment>
  }<pos:position pos:line="143" pos:column="4"/></block></then>
  <elseif pos:line="144" pos:column="3">else <if pos:line="144" pos:column="8">if<condition pos:line="144" pos:column="10">(<expr><operator pos:line="144" pos:column="11">!<pos:position pos:line="144" pos:column="12"/></operator><name><name pos:line="144" pos:column="12">path<pos:position pos:line="144" pos:column="16"/></name><index pos:line="144" pos:column="16">[<expr><literal type="number" pos:line="144" pos:column="17">0<pos:position pos:line="144" pos:column="18"/></literal></expr>]<pos:position pos:line="144" pos:column="19"/></index></name></expr>)<pos:position pos:line="144" pos:column="20"/></condition><then pos:line="144" pos:column="20"> <block pos:line="144" pos:column="21">{
    <comment type="block" pos:line="145" pos:column="5">/* if there's no path set, use a single slash */</comment>
    <expr_stmt><expr><call><name pos:line="146" pos:column="5">strcpy<pos:position pos:line="146" pos:column="11"/></name><argument_list pos:line="146" pos:column="11">(<argument><expr><name pos:line="146" pos:column="12">path<pos:position pos:line="146" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="18">"/"<pos:position pos:line="146" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="147" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="149" pos:column="3">/* If the URL is malformatted (missing a '/' after hostname before path) we
   * insert a slash here. The only letter except '/' we accept to start a path
   * is '?'.
   */</comment>
  <if pos:line="153" pos:column="3">if<condition pos:line="153" pos:column="5">(<expr><name><name pos:line="153" pos:column="6">path<pos:position pos:line="153" pos:column="10"/></name><index pos:line="153" pos:column="10">[<expr><literal type="number" pos:line="153" pos:column="11">0<pos:position pos:line="153" pos:column="12"/></literal></expr>]<pos:position pos:line="153" pos:column="13"/></index></name> <operator pos:line="153" pos:column="14">==<pos:position pos:line="153" pos:column="16"/></operator> <literal type="char" pos:line="153" pos:column="17">'?'<pos:position pos:line="153" pos:column="20"/></literal></expr>)<pos:position pos:line="153" pos:column="21"/></condition><then pos:line="153" pos:column="21"> <block pos:line="153" pos:column="22">{
    <comment type="block" pos:line="154" pos:column="5">/* We need this function to deal with overlapping memory areas. We know
       that the memory area 'path' points to is 'urllen' bytes big and that
       is bigger than the path. Use +1 to move the zero byte too. */</comment>
    <expr_stmt><expr><call><name pos:line="157" pos:column="5">memmove<pos:position pos:line="157" pos:column="12"/></name><argument_list pos:line="157" pos:column="12">(<argument><expr><operator pos:line="157" pos:column="13">&amp;<pos:position pos:line="157" pos:column="18"/></operator><name><name pos:line="157" pos:column="14">path<pos:position pos:line="157" pos:column="18"/></name><index pos:line="157" pos:column="18">[<expr><literal type="number" pos:line="157" pos:column="19">1<pos:position pos:line="157" pos:column="20"/></literal></expr>]<pos:position pos:line="157" pos:column="21"/></index></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="23">path<pos:position pos:line="157" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="157" pos:column="29">strlen<pos:position pos:line="157" pos:column="35"/></name><argument_list pos:line="157" pos:column="35">(<argument><expr><name pos:line="157" pos:column="36">path<pos:position pos:line="157" pos:column="40"/></name></expr></argument>)<pos:position pos:line="157" pos:column="41"/></argument_list></call><operator pos:line="157" pos:column="41">+<pos:position pos:line="157" pos:column="42"/></operator><literal type="number" pos:line="157" pos:column="42">1<pos:position pos:line="157" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="157" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="158" pos:column="5">path<pos:position pos:line="158" pos:column="9"/></name><index pos:line="158" pos:column="9">[<expr><literal type="number" pos:line="158" pos:column="10">0<pos:position pos:line="158" pos:column="11"/></literal></expr>]<pos:position pos:line="158" pos:column="12"/></index></name> <operator pos:line="158" pos:column="13">=<pos:position pos:line="158" pos:column="14"/></operator> <literal type="char" pos:line="158" pos:column="15">'/'<pos:position pos:line="158" pos:column="18"/></literal></expr>;<pos:position pos:line="158" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="159" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="161" pos:column="3">/*
   * So if the URL was A://B/C,
   *   conn-&gt;protostr is A
   *   conn-&gt;host.name is B
   *   data-&gt;state.path is /C
   */</comment>

  <return pos:line="168" pos:column="3">return <expr><name pos:line="168" pos:column="10">CURLE_OK<pos:position pos:line="168" pos:column="18"/></name></expr>;<pos:position pos:line="168" pos:column="19"/></return>
}<pos:position pos:line="169" pos:column="2"/></block></function></unit>
