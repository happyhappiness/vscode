<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_40_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">test<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">char<pos:position pos:line="1" pos:column="19"/></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type><name pos:line="1" pos:column="21">URL<pos:position pos:line="1" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="25"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">c<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">ret<pos:position pos:line="4" pos:column="15"/></name><init pos:line="4" pos:column="15">=<expr><name pos:line="4" pos:column="16">CURLE_OK<pos:position pos:line="4" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLM<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">m<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">fd_set<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">rd<pos:position pos:line="6" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="14">wr<pos:position pos:line="6" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="18">exc<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLMcode<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">res<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">running<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">max_fd<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">curl_global_init<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">CURL_GLOBAL_ALL<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">c<pos:position pos:line="12" pos:column="4"/></name> <operator pos:line="12" pos:column="5">=<pos:position pos:line="12" pos:column="6"/></operator> <call><name pos:line="12" pos:column="7">curl_easy_init<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">()<pos:position pos:line="12" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* the point here being that there must not run anything on the given
     proxy port */</comment>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">curl_easy_setopt<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">c<pos:position pos:line="16" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="23">CURLOPT_PROXY<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">arg2<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">curl_easy_setopt<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">c<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">CURLOPT_URL<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="36">URL<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">curl_easy_setopt<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">c<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="23">CURLOPT_VERBOSE<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="40">1<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><name pos:line="20" pos:column="3">m<pos:position pos:line="20" pos:column="4"/></name> <operator pos:line="20" pos:column="5">=<pos:position pos:line="20" pos:column="6"/></operator> <call><name pos:line="20" pos:column="7">curl_multi_init<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">()<pos:position pos:line="20" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><name pos:line="22" pos:column="3">res<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <call><name pos:line="22" pos:column="9">curl_multi_add_handle<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">m<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">c<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name pos:line="23" pos:column="6">res<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">&amp;&amp;<pos:position pos:line="23" pos:column="20"/></operator> <operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">res<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">!=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">)<pos:position pos:line="23" pos:column="46"/></operator></expr>)<pos:position pos:line="23" pos:column="47"/></condition><then pos:line="23" pos:column="47">
	 <block type="pseudo"><return pos:line="24" pos:column="10">return <expr><literal type="number" pos:line="24" pos:column="17">1<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></return></block></then></if> <comment type="block" pos:line="24" pos:column="20">/* major failure */</comment>
  <do pos:line="25" pos:column="3">do <block pos:line="25" pos:column="6">{
    <do pos:line="26" pos:column="5">do <block pos:line="26" pos:column="8">{
      <expr_stmt><expr><name pos:line="27" pos:column="7">res<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <call><name pos:line="27" pos:column="13">curl_multi_perform<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">m<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="35">&amp;<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="36">running<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block> while <condition pos:line="28" pos:column="17">(<expr><name pos:line="28" pos:column="18">res<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">==<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="28" pos:column="49"/></name></expr>)<pos:position pos:line="28" pos:column="50"/></condition>;<pos:position pos:line="28" pos:column="51"/></do>
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><operator pos:line="29" pos:column="8">!<pos:position pos:line="29" pos:column="9"/></operator><name pos:line="29" pos:column="9">running<pos:position pos:line="29" pos:column="16"/></name></expr>)<pos:position pos:line="29" pos:column="17"/></condition><then pos:line="29" pos:column="17"> <block pos:line="29" pos:column="18">{
      <comment type="block" pos:line="30" pos:column="7">/* This is where this code is expected to reach */</comment>
      <decl_stmt><decl><type><name pos:line="31" pos:column="7">int<pos:position pos:line="31" pos:column="10"/></name></type> <name pos:line="31" pos:column="11">numleft<pos:position pos:line="31" pos:column="18"/></name></decl>;<pos:position pos:line="31" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="32" pos:column="7">CURLMsg<pos:position pos:line="32" pos:column="14"/></name> <modifier pos:line="32" pos:column="15">*<pos:position pos:line="32" pos:column="16"/></modifier></type><name pos:line="32" pos:column="16">msg<pos:position pos:line="32" pos:column="19"/></name> <init pos:line="32" pos:column="20">= <expr><call><name pos:line="32" pos:column="22">curl_multi_info_read<pos:position pos:line="32" pos:column="42"/></name><argument_list pos:line="32" pos:column="42">(<argument><expr><name pos:line="32" pos:column="43">m<pos:position pos:line="32" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="46">&amp;<pos:position pos:line="32" pos:column="51"/></operator><name pos:line="32" pos:column="47">numleft<pos:position pos:line="32" pos:column="54"/></name></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="56"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">fprintf<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">stderr<pos:position pos:line="33" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="23">"Not running\n"<pos:position pos:line="33" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>
      <if pos:line="34" pos:column="7">if<condition pos:line="34" pos:column="9">(<expr><name pos:line="34" pos:column="10">msg<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">&amp;&amp;<pos:position pos:line="34" pos:column="24"/></operator> <operator pos:line="34" pos:column="17">!<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">numleft<pos:position pos:line="34" pos:column="25"/></name></expr>)<pos:position pos:line="34" pos:column="26"/></condition><then pos:line="34" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="9">ret<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <literal type="number" pos:line="35" pos:column="15">100<pos:position pos:line="35" pos:column="18"/></literal></expr>;<pos:position pos:line="35" pos:column="19"/></expr_stmt></block></then> <comment type="block" pos:line="35" pos:column="20">/* this is where we should be */</comment>
      <else pos:line="36" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="9">ret<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <literal type="number" pos:line="37" pos:column="15">99<pos:position pos:line="37" pos:column="17"/></literal></expr>;<pos:position pos:line="37" pos:column="18"/></expr_stmt></block></else></if> <comment type="block" pos:line="37" pos:column="19">/* not correct */</comment>
      <break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">fprintf<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">stderr<pos:position pos:line="40" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="25">"running %d res %d\n"<pos:position pos:line="40" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="48">running<pos:position pos:line="40" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="57">res<pos:position pos:line="40" pos:column="60"/></name></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="62"/></expr_stmt>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">res<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">!=<pos:position pos:line="42" pos:column="15"/></operator> <name pos:line="42" pos:column="16">CURLM_OK<pos:position pos:line="42" pos:column="24"/></name></expr>)<pos:position pos:line="42" pos:column="25"/></condition><then pos:line="42" pos:column="25"> <block pos:line="42" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">fprintf<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">stderr<pos:position pos:line="43" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="23">"not okay???\n"<pos:position pos:line="43" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name pos:line="44" pos:column="7">ret<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <literal type="number" pos:line="44" pos:column="13">2<pos:position pos:line="44" pos:column="14"/></literal></expr>;<pos:position pos:line="44" pos:column="15"/></expr_stmt>
      <break pos:line="45" pos:column="7">break;<pos:position pos:line="45" pos:column="13"/></break>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="48" pos:column="5">FD_ZERO<pos:position pos:line="48" pos:column="12"/></name><argument_list pos:line="48" pos:column="12">(<argument><expr><operator pos:line="48" pos:column="13">&amp;<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="14">rd<pos:position pos:line="48" pos:column="16"/></name></expr></argument>)<pos:position pos:line="48" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">FD_ZERO<pos:position pos:line="49" pos:column="12"/></name><argument_list pos:line="49" pos:column="12">(<argument><expr><operator pos:line="49" pos:column="13">&amp;<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="14">wr<pos:position pos:line="49" pos:column="16"/></name></expr></argument>)<pos:position pos:line="49" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">FD_ZERO<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><operator pos:line="50" pos:column="13">&amp;<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="14">exc<pos:position pos:line="50" pos:column="17"/></name></expr></argument>)<pos:position pos:line="50" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="51" pos:column="5">max_fd<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">=<pos:position pos:line="51" pos:column="13"/></operator> <literal type="number" pos:line="51" pos:column="14">0<pos:position pos:line="51" pos:column="15"/></literal></expr>;<pos:position pos:line="51" pos:column="16"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="53" pos:column="9">fprintf<pos:position pos:line="53" pos:column="16"/></name><argument_list pos:line="53" pos:column="16">(<argument><expr><name pos:line="53" pos:column="17">stderr<pos:position pos:line="53" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="25">"_fdset()\n"<pos:position pos:line="53" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><call><name pos:line="54" pos:column="9">curl_multi_fdset<pos:position pos:line="54" pos:column="25"/></name><argument_list pos:line="54" pos:column="25">(<argument><expr><name pos:line="54" pos:column="26">m<pos:position pos:line="54" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="29">&amp;<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="30">rd<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="34">&amp;<pos:position pos:line="54" pos:column="39"/></operator><name pos:line="54" pos:column="35">wr<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="39">&amp;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="40">exc<pos:position pos:line="54" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="45">&amp;<pos:position pos:line="54" pos:column="50"/></operator><name pos:line="54" pos:column="46">max_fd<pos:position pos:line="54" pos:column="52"/></name></expr></argument>)<pos:position pos:line="54" pos:column="53"/></argument_list></call> <operator pos:line="54" pos:column="54">!=<pos:position pos:line="54" pos:column="56"/></operator> <name pos:line="54" pos:column="57">CURLM_OK<pos:position pos:line="54" pos:column="65"/></name></expr>)<pos:position pos:line="54" pos:column="66"/></condition><then pos:line="54" pos:column="66"> <block pos:line="54" pos:column="67">{
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">fprintf<pos:position pos:line="55" pos:column="14"/></name><argument_list pos:line="55" pos:column="14">(<argument><expr><name pos:line="55" pos:column="15">stderr<pos:position pos:line="55" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="23">"unexpected failured of fdset.\n"<pos:position pos:line="55" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><name pos:line="56" pos:column="7">ret<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <literal type="number" pos:line="56" pos:column="13">3<pos:position pos:line="56" pos:column="14"/></literal></expr>;<pos:position pos:line="56" pos:column="15"/></expr_stmt>
      <break pos:line="57" pos:column="7">break;<pos:position pos:line="57" pos:column="13"/></break>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">fprintf<pos:position pos:line="59" pos:column="16"/></name><argument_list pos:line="59" pos:column="16">(<argument><expr><name pos:line="59" pos:column="17">stderr<pos:position pos:line="59" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="25">"select\n"<pos:position pos:line="59" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">select<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><name pos:line="60" pos:column="12">max_fd<pos:position pos:line="60" pos:column="18"/></name><operator pos:line="60" pos:column="18">+<pos:position pos:line="60" pos:column="19"/></operator><literal type="number" pos:line="60" pos:column="19">1<pos:position pos:line="60" pos:column="20"/></literal></expr></argument>, <argument><expr><operator pos:line="60" pos:column="22">&amp;<pos:position pos:line="60" pos:column="27"/></operator><name pos:line="60" pos:column="23">rd<pos:position pos:line="60" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="27">&amp;<pos:position pos:line="60" pos:column="32"/></operator><name pos:line="60" pos:column="28">wr<pos:position pos:line="60" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="32">&amp;<pos:position pos:line="60" pos:column="37"/></operator><name pos:line="60" pos:column="33">exc<pos:position pos:line="60" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="38">NULL<pos:position pos:line="60" pos:column="42"/></name></expr></argument>)<pos:position pos:line="60" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">fprintf<pos:position pos:line="62" pos:column="12"/></name><argument_list pos:line="62" pos:column="12">(<argument><expr><name pos:line="62" pos:column="13">stderr<pos:position pos:line="62" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="21">"loop!\n"<pos:position pos:line="62" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="63" pos:column="4"/></block> while<condition pos:line="63" pos:column="10">(<expr><literal type="number" pos:line="63" pos:column="11">1<pos:position pos:line="63" pos:column="12"/></literal></expr>)<pos:position pos:line="63" pos:column="13"/></condition>;<pos:position pos:line="63" pos:column="14"/></do>

  <expr_stmt><expr><call><name pos:line="65" pos:column="3">curl_multi_remove_handle<pos:position pos:line="65" pos:column="27"/></name><argument_list pos:line="65" pos:column="27">(<argument><expr><name pos:line="65" pos:column="28">m<pos:position pos:line="65" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="31">c<pos:position pos:line="65" pos:column="32"/></name></expr></argument>)<pos:position pos:line="65" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="66" pos:column="3">curl_easy_cleanup<pos:position pos:line="66" pos:column="20"/></name><argument_list pos:line="66" pos:column="20">(<argument><expr><name pos:line="66" pos:column="21">c<pos:position pos:line="66" pos:column="22"/></name></expr></argument>)<pos:position pos:line="66" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">curl_multi_cleanup<pos:position pos:line="67" pos:column="21"/></name><argument_list pos:line="67" pos:column="21">(<argument><expr><name pos:line="67" pos:column="22">m<pos:position pos:line="67" pos:column="23"/></name></expr></argument>)<pos:position pos:line="67" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>

  <return pos:line="69" pos:column="3">return <expr><name pos:line="69" pos:column="10">ret<pos:position pos:line="69" pos:column="13"/></name></expr>;<pos:position pos:line="69" pos:column="14"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
