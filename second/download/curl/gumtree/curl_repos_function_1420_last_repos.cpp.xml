<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1420_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">Curl_compareheader<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">headerline<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <comment type="block" pos:line="2" pos:column="44">/* line to check */</comment>
                   <parameter><decl><type><specifier pos:line="3" pos:column="20">const<pos:position pos:line="3" pos:column="25"/></specifier> <name pos:line="3" pos:column="26">char<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">header<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>,  <comment type="block" pos:line="3" pos:column="41">/* header keyword _with_ colon */</comment>
                   <parameter><decl><type><specifier pos:line="4" pos:column="20">const<pos:position pos:line="4" pos:column="25"/></specifier> <name pos:line="4" pos:column="26">char<pos:position pos:line="4" pos:column="30"/></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">content<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="40"/></parameter_list> <comment type="block" pos:line="4" pos:column="41">/* content string to find */</comment>
<block pos:line="5" pos:column="1">{
  <comment type="block" pos:line="6" pos:column="3">/* RFC2616, section 4.2 says: "Each header field consists of a name followed
   * by a colon (":") and the field value. Field names are case-insensitive.
   * The field value MAY be preceded by any amount of LWS, though a single SP
   * is preferred." */</comment>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">size_t<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">hlen<pos:position pos:line="11" pos:column="14"/></name> <init pos:line="11" pos:column="15">= <expr><call><name pos:line="11" pos:column="17">strlen<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">header<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">size_t<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">clen<pos:position pos:line="12" pos:column="14"/></name></decl>;<pos:position pos:line="12" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">size_t<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">len<pos:position pos:line="13" pos:column="13"/></name></decl>;<pos:position pos:line="13" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">start<pos:position pos:line="14" pos:column="20"/></name></decl>;<pos:position pos:line="14" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="15" pos:column="3">const<pos:position pos:line="15" pos:column="8"/></specifier> <name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">end<pos:position pos:line="15" pos:column="18"/></name></decl>;<pos:position pos:line="15" pos:column="19"/></decl_stmt>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><call><name pos:line="17" pos:column="7">strncasecompare<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">headerline<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="35">header<pos:position pos:line="17" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="43">hlen<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="49"/></condition><then pos:line="17" pos:column="49">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">FALSE<pos:position pos:line="18" pos:column="17"/></name></expr>;<pos:position pos:line="18" pos:column="18"/></return></block></then></if> <comment type="block" pos:line="18" pos:column="19">/* doesn't start with header */</comment>

  <comment type="block" pos:line="20" pos:column="3">/* pass the header */</comment>
  <expr_stmt><expr><name pos:line="21" pos:column="3">start<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <operator pos:line="21" pos:column="11">&amp;<pos:position pos:line="21" pos:column="16"/></operator><name><name pos:line="21" pos:column="12">headerline<pos:position pos:line="21" pos:column="22"/></name><index pos:line="21" pos:column="22">[<expr><name pos:line="21" pos:column="23">hlen<pos:position pos:line="21" pos:column="27"/></name></expr>]<pos:position pos:line="21" pos:column="28"/></index></name></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="23" pos:column="3">/* pass all white spaces */</comment>
  <while pos:line="24" pos:column="3">while<condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">start<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">&amp;&amp;<pos:position pos:line="24" pos:column="26"/></operator> <call><name pos:line="24" pos:column="19">ISSPACE<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><operator pos:line="24" pos:column="27">*<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="28">start<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="35"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="5">start<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">++<pos:position pos:line="25" pos:column="12"/></operator></expr>;<pos:position pos:line="25" pos:column="13"/></expr_stmt></block></while>

  <comment type="block" pos:line="27" pos:column="3">/* find the end of the header line */</comment>
  <expr_stmt><expr><name pos:line="28" pos:column="3">end<pos:position pos:line="28" pos:column="6"/></name> <operator pos:line="28" pos:column="7">=<pos:position pos:line="28" pos:column="8"/></operator> <call><name pos:line="28" pos:column="9">strchr<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">start<pos:position pos:line="28" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="23">'\r'<pos:position pos:line="28" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt> <comment type="block" pos:line="28" pos:column="30">/* lines end with CRLF */</comment>
  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><operator pos:line="29" pos:column="6">!<pos:position pos:line="29" pos:column="7"/></operator><name pos:line="29" pos:column="7">end<pos:position pos:line="29" pos:column="10"/></name></expr>)<pos:position pos:line="29" pos:column="11"/></condition><then pos:line="29" pos:column="11"> <block pos:line="29" pos:column="12">{
    <comment type="block" pos:line="30" pos:column="5">/* in case there's a non-standard compliant line here */</comment>
    <expr_stmt><expr><name pos:line="31" pos:column="5">end<pos:position pos:line="31" pos:column="8"/></name> <operator pos:line="31" pos:column="9">=<pos:position pos:line="31" pos:column="10"/></operator> <call><name pos:line="31" pos:column="11">strchr<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">start<pos:position pos:line="31" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="31" pos:column="25">'\n'<pos:position pos:line="31" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>

    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><operator pos:line="33" pos:column="8">!<pos:position pos:line="33" pos:column="9"/></operator><name pos:line="33" pos:column="9">end<pos:position pos:line="33" pos:column="12"/></name></expr>)<pos:position pos:line="33" pos:column="13"/></condition><then pos:line="33" pos:column="13">
      <comment type="block" pos:line="34" pos:column="7">/* hm, there's no line ending here, use the zero byte! */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="7">end<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <call><name pos:line="35" pos:column="13">strchr<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name pos:line="35" pos:column="20">start<pos:position pos:line="35" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="27">'\0'<pos:position pos:line="35" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="38" pos:column="3">len<pos:position pos:line="38" pos:column="6"/></name> <operator pos:line="38" pos:column="7">=<pos:position pos:line="38" pos:column="8"/></operator> <name pos:line="38" pos:column="9">end<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">start<pos:position pos:line="38" pos:column="18"/></name></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt> <comment type="block" pos:line="38" pos:column="20">/* length of the content part of the input line */</comment>
  <expr_stmt><expr><name pos:line="39" pos:column="3">clen<pos:position pos:line="39" pos:column="7"/></name> <operator pos:line="39" pos:column="8">=<pos:position pos:line="39" pos:column="9"/></operator> <call><name pos:line="39" pos:column="10">strlen<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">content<pos:position pos:line="39" pos:column="24"/></name></expr></argument>)<pos:position pos:line="39" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="26"/></expr_stmt> <comment type="block" pos:line="39" pos:column="27">/* length of the word to find */</comment>

  <comment type="block" pos:line="41" pos:column="3">/* find the content string in the rest of the line */</comment>
  <for pos:line="42" pos:column="3">for<control pos:line="42" pos:column="6">(<init pos:line="42" pos:column="7">;<pos:position pos:line="42" pos:column="8"/></init> <condition><expr><name pos:line="42" pos:column="9">len<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">&gt;=<pos:position pos:line="42" pos:column="18"/></operator> <name pos:line="42" pos:column="16">clen<pos:position pos:line="42" pos:column="20"/></name></expr>;<pos:position pos:line="42" pos:column="21"/></condition> <incr><expr><name pos:line="42" pos:column="22">len<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">--<pos:position pos:line="42" pos:column="27"/></operator></expr><operator pos:line="42" pos:column="27">,<pos:position pos:line="42" pos:column="28"/></operator> <expr><name pos:line="42" pos:column="29">start<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">++<pos:position pos:line="42" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="42" pos:column="37"/></control> <block pos:line="42" pos:column="38">{
    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><call><name pos:line="43" pos:column="8">strncasecompare<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">start<pos:position pos:line="43" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">content<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">clen<pos:position pos:line="43" pos:column="44"/></name></expr></argument>)<pos:position pos:line="43" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="46"/></condition><then pos:line="43" pos:column="46">
      <block type="pseudo"><return pos:line="44" pos:column="7">return <expr><name pos:line="44" pos:column="14">TRUE<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></return></block></then></if> <comment type="block" pos:line="44" pos:column="20">/* match! */</comment>
  }<pos:position pos:line="45" pos:column="4"/></block></for>

  <return pos:line="47" pos:column="3">return <expr><name pos:line="47" pos:column="10">FALSE<pos:position pos:line="47" pos:column="15"/></name></expr>;<pos:position pos:line="47" pos:column="16"/></return> <comment type="block" pos:line="47" pos:column="17">/* no match */</comment>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
