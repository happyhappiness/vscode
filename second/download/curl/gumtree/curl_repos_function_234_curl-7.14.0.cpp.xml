<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_234_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Curl_addrinfo<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">Curl_getaddrinfo<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">connectdata<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">conn<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">hostname<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="3" pos:column="33">int<pos:position pos:line="3" pos:column="36"/></name></type> <name pos:line="3" pos:column="37">port<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="4" pos:column="33">int<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">waitp<pos:position pos:line="4" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="44"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">hints<pos:position pos:line="6" pos:column="24"/></name></decl>, <modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="27">res<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">error<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">sbuf<pos:position pos:line="8" pos:column="12"/></name><index pos:line="8" pos:column="12">[<expr><name pos:line="8" pos:column="13">NI_MAXSERV<pos:position pos:line="8" pos:column="23"/></name></expr>]<pos:position pos:line="8" pos:column="24"/></index></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">curl_socket_t<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">s<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">pf<pos:position pos:line="10" pos:column="9"/></name></decl>;<pos:position pos:line="10" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">SessionHandle<pos:position pos:line="11" pos:column="23"/></name></name> <modifier pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></modifier></type><name pos:line="11" pos:column="25">data<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><name><name pos:line="11" pos:column="32">conn<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">data<pos:position pos:line="11" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">waitp<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <name pos:line="13" pos:column="12">FALSE<pos:position pos:line="13" pos:column="17"/></name></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt> <comment type="block" pos:line="13" pos:column="19">/* default to synch response */</comment>

  <comment type="block" pos:line="15" pos:column="3">/* see if we have an IPv6 stack */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">s<pos:position pos:line="16" pos:column="4"/></name> <operator pos:line="16" pos:column="5">=<pos:position pos:line="16" pos:column="6"/></operator> <call><name pos:line="16" pos:column="7">socket<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><name pos:line="16" pos:column="14">PF_INET6<pos:position pos:line="16" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="24">SOCK_DGRAM<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="36">0<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">s<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">==<pos:position pos:line="17" pos:column="11"/></operator> <name pos:line="17" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="17" pos:column="27"/></name></expr>)<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28"> <block pos:line="17" pos:column="29">{
    <comment type="block" pos:line="18" pos:column="5">/* Some non-IPv6 stacks have been found to make very slow name resolves
     * when PF_UNSPEC is used, so thus we switch to a mere PF_INET lookup if
     * the stack seems to be a non-ipv6 one. */</comment>

    <expr_stmt><expr><name pos:line="22" pos:column="5">pf<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator> <name pos:line="22" pos:column="10">PF_INET<pos:position pos:line="22" pos:column="17"/></name></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block></then>
  <else pos:line="24" pos:column="3">else <block pos:line="24" pos:column="8">{
    <comment type="block" pos:line="25" pos:column="5">/* This seems to be an IPv6-capable stack, use PF_UNSPEC for the widest
     * possible checks. And close the socket again.
     */</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">sclose<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">s<pos:position pos:line="28" pos:column="13"/></name></expr></argument>)<pos:position pos:line="28" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="15"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/*
     * Check if a more limited name resolve has been requested.
     */</comment>
    <switch pos:line="33" pos:column="5">switch<condition pos:line="33" pos:column="11">(<expr><name><name pos:line="33" pos:column="12">data<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">-&gt;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="18">set<pos:position pos:line="33" pos:column="21"/></name><operator pos:line="33" pos:column="21">.<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">ip_version<pos:position pos:line="33" pos:column="32"/></name></name></expr>)<pos:position pos:line="33" pos:column="33"/></condition> <block pos:line="33" pos:column="34">{
    <case pos:line="34" pos:column="5">case <expr><name pos:line="34" pos:column="10">CURL_IPRESOLVE_V4<pos:position pos:line="34" pos:column="27"/></name></expr>:<pos:position pos:line="34" pos:column="28"/></case>
      <expr_stmt><expr><name pos:line="35" pos:column="7">pf<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <name pos:line="35" pos:column="12">PF_INET<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
      <break pos:line="36" pos:column="7">break;<pos:position pos:line="36" pos:column="13"/></break>
    <case pos:line="37" pos:column="5">case <expr><name pos:line="37" pos:column="10">CURL_IPRESOLVE_V6<pos:position pos:line="37" pos:column="27"/></name></expr>:<pos:position pos:line="37" pos:column="28"/></case>
      <expr_stmt><expr><name pos:line="38" pos:column="7">pf<pos:position pos:line="38" pos:column="9"/></name> <operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator> <name pos:line="38" pos:column="12">PF_INET6<pos:position pos:line="38" pos:column="20"/></name></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>
      <break pos:line="39" pos:column="7">break;<pos:position pos:line="39" pos:column="13"/></break>
    <default pos:line="40" pos:column="5">default:<pos:position pos:line="40" pos:column="13"/></default>
      <expr_stmt><expr><name pos:line="41" pos:column="7">pf<pos:position pos:line="41" pos:column="9"/></name> <operator pos:line="41" pos:column="10">=<pos:position pos:line="41" pos:column="11"/></operator> <name pos:line="41" pos:column="12">PF_UNSPEC<pos:position pos:line="41" pos:column="21"/></name></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt>
      <break pos:line="42" pos:column="7">break;<pos:position pos:line="42" pos:column="13"/></break>
    }<pos:position pos:line="43" pos:column="6"/></block></switch>
  }<pos:position pos:line="44" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="46" pos:column="3">memset<pos:position pos:line="46" pos:column="9"/></name><argument_list pos:line="46" pos:column="9">(<argument><expr><operator pos:line="46" pos:column="10">&amp;<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="11">hints<pos:position pos:line="46" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="18">0<pos:position pos:line="46" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="21">sizeof<argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">hints<pos:position pos:line="46" pos:column="33"/></name></expr></argument>)<pos:position pos:line="46" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="47" pos:column="3">hints<pos:position pos:line="47" pos:column="8"/></name><operator pos:line="47" pos:column="8">.<pos:position pos:line="47" pos:column="9"/></operator><name pos:line="47" pos:column="9">ai_family<pos:position pos:line="47" pos:column="18"/></name></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <name pos:line="47" pos:column="21">pf<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="48" pos:column="3">hints<pos:position pos:line="48" pos:column="8"/></name><operator pos:line="48" pos:column="8">.<pos:position pos:line="48" pos:column="9"/></operator><name pos:line="48" pos:column="9">ai_socktype<pos:position pos:line="48" pos:column="20"/></name></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <name pos:line="48" pos:column="23">SOCK_STREAM<pos:position pos:line="48" pos:column="34"/></name></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">hints<pos:position pos:line="49" pos:column="8"/></name><operator pos:line="49" pos:column="8">.<pos:position pos:line="49" pos:column="9"/></operator><name pos:line="49" pos:column="9">ai_flags<pos:position pos:line="49" pos:column="17"/></name></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">AI_CANONNAME<pos:position pos:line="49" pos:column="32"/></name></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="50" pos:column="3">itoa<pos:position pos:line="50" pos:column="7"/></name><argument_list pos:line="50" pos:column="7">(<argument><expr><name pos:line="50" pos:column="8">port<pos:position pos:line="50" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="14">sbuf<pos:position pos:line="50" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="20">10<pos:position pos:line="50" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="52" pos:column="3">/* fire up a new resolver thread! */</comment>
  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><call><name pos:line="53" pos:column="7">init_resolve_thread<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">conn<pos:position pos:line="53" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="33">hostname<pos:position pos:line="53" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="43">port<pos:position pos:line="53" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="49">&amp;<pos:position pos:line="53" pos:column="54"/></operator><name pos:line="53" pos:column="50">hints<pos:position pos:line="53" pos:column="55"/></name></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="57"/></condition><then pos:line="53" pos:column="57"> <block pos:line="53" pos:column="58">{
    <expr_stmt><expr><operator pos:line="54" pos:column="5">*<pos:position pos:line="54" pos:column="6"/></operator><name pos:line="54" pos:column="6">waitp<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">=<pos:position pos:line="54" pos:column="13"/></operator> <name pos:line="54" pos:column="14">TRUE<pos:position pos:line="54" pos:column="18"/></name></expr>;<pos:position pos:line="54" pos:column="19"/></expr_stmt>  <comment type="block" pos:line="54" pos:column="21">/* please wait for the response */</comment>
    <return pos:line="55" pos:column="5">return <expr><name pos:line="55" pos:column="12">NULL<pos:position pos:line="55" pos:column="16"/></name></expr>;<pos:position pos:line="55" pos:column="17"/></return>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="58" pos:column="3">/* fall-back to blocking version */</comment>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">infof<pos:position pos:line="59" pos:column="8"/></name><argument_list pos:line="59" pos:column="8">(<argument><expr><name pos:line="59" pos:column="9">data<pos:position pos:line="59" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="15">"init_resolve_thread() failed for %s; %s\n"<pos:position pos:line="59" pos:column="58"/></literal></expr></argument>,
        <argument><expr><name pos:line="60" pos:column="9">hostname<pos:position pos:line="60" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="60" pos:column="19">Curl_strerror<pos:position pos:line="60" pos:column="32"/></name><argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">conn<pos:position pos:line="60" pos:column="37"/></name></expr></argument>,<argument><expr><call><name pos:line="60" pos:column="38">GetLastError<pos:position pos:line="60" pos:column="50"/></name><argument_list pos:line="60" pos:column="50">()<pos:position pos:line="60" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><name pos:line="62" pos:column="3">error<pos:position pos:line="62" pos:column="8"/></name> <operator pos:line="62" pos:column="9">=<pos:position pos:line="62" pos:column="10"/></operator> <call><name pos:line="62" pos:column="11">getaddrinfo<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">(<argument><expr><name pos:line="62" pos:column="23">hostname<pos:position pos:line="62" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="33">sbuf<pos:position pos:line="62" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="39">&amp;<pos:position pos:line="62" pos:column="44"/></operator><name pos:line="62" pos:column="40">hints<pos:position pos:line="62" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="47">&amp;<pos:position pos:line="62" pos:column="52"/></operator><name pos:line="62" pos:column="48">res<pos:position pos:line="62" pos:column="51"/></name></expr></argument>)<pos:position pos:line="62" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="53"/></expr_stmt>
  <if pos:line="63" pos:column="3">if <condition pos:line="63" pos:column="6">(<expr><name pos:line="63" pos:column="7">error<pos:position pos:line="63" pos:column="12"/></name></expr>)<pos:position pos:line="63" pos:column="13"/></condition><then pos:line="63" pos:column="13"> <block pos:line="63" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">infof<pos:position pos:line="64" pos:column="10"/></name><argument_list pos:line="64" pos:column="10">(<argument><expr><name pos:line="64" pos:column="11">data<pos:position pos:line="64" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="17">"getaddrinfo() failed for %s:%d; %s\n"<pos:position pos:line="64" pos:column="55"/></literal></expr></argument>,
          <argument><expr><name pos:line="65" pos:column="11">hostname<pos:position pos:line="65" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="21">port<pos:position pos:line="65" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="65" pos:column="27">Curl_strerror<pos:position pos:line="65" pos:column="40"/></name><argument_list pos:line="65" pos:column="40">(<argument><expr><name pos:line="65" pos:column="41">conn<pos:position pos:line="65" pos:column="45"/></name></expr></argument>,<argument><expr><call><name pos:line="65" pos:column="46">WSAGetLastError<pos:position pos:line="65" pos:column="61"/></name><argument_list pos:line="65" pos:column="61">()<pos:position pos:line="65" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="66"/></expr_stmt>
    <return pos:line="66" pos:column="5">return <expr><name pos:line="66" pos:column="12">NULL<pos:position pos:line="66" pos:column="16"/></name></expr>;<pos:position pos:line="66" pos:column="17"/></return>
  }<pos:position pos:line="67" pos:column="4"/></block></then></if>
  <return pos:line="68" pos:column="3">return <expr><name pos:line="68" pos:column="10">res<pos:position pos:line="68" pos:column="13"/></name></expr>;<pos:position pos:line="68" pos:column="14"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
