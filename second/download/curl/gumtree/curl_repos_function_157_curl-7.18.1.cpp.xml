<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_157_curl-7.18.1.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">berval<pos:position pos:line="1" pos:column="14"/></name></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier></type>
<name pos:line="2" pos:column="1">Curl_ldap_get_values_len_a<pos:position pos:line="2" pos:column="27"/></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">void<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type> <name pos:line="2" pos:column="35">ld<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">LDAPMessage<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type> <name pos:line="2" pos:column="53">entry<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="60">const<pos:position pos:line="2" pos:column="65"/></specifier> <name pos:line="2" pos:column="66">char<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type> <name pos:line="2" pos:column="73">attr<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>

<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">i<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type> <name pos:line="6" pos:column="10">cp<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">berval<pos:position pos:line="7" pos:column="16"/></name></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type> <name pos:line="7" pos:column="21">result<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">cp<pos:position pos:line="9" pos:column="5"/></name> <operator pos:line="9" pos:column="6">=<pos:position pos:line="9" pos:column="7"/></operator> <operator pos:line="9" pos:column="8">(<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></operator><operator pos:line="9" pos:column="15">)<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">NULL<pos:position pos:line="9" pos:column="21"/></name></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">attr<pos:position pos:line="11" pos:column="11"/></name></expr>)<pos:position pos:line="11" pos:column="12"/></condition><then pos:line="11" pos:column="12"> <block pos:line="11" pos:column="13">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">i<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">strlen<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">attr<pos:position pos:line="12" pos:column="20"/></name></expr></argument>)<pos:position pos:line="12" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><operator pos:line="14" pos:column="10">(<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">cp<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">malloc<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">i<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">+<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="27">1<pos:position pos:line="14" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call><operator pos:line="14" pos:column="29">)<pos:position pos:line="14" pos:column="30"/></operator></expr>)<pos:position pos:line="14" pos:column="31"/></condition><then pos:line="14" pos:column="31"> <block pos:line="14" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">ldap_set_lderrno<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">ld<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">LDAP_NO_MEMORY<pos:position pos:line="15" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="44">NULL<pos:position pos:line="15" pos:column="48"/></name></expr></argument>,
                       <argument><expr><call><name pos:line="16" pos:column="24">ldap_err2string<pos:position pos:line="16" pos:column="39"/></name><argument_list pos:line="16" pos:column="39">(<argument><expr><name pos:line="16" pos:column="40">LDAP_NO_MEMORY<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
      <return pos:line="17" pos:column="7">return <expr><operator pos:line="17" pos:column="14">(<pos:position pos:line="17" pos:column="15"/></operator>struct <name pos:line="17" pos:column="22">berval<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">*<pos:position pos:line="17" pos:column="30"/></operator> <operator pos:line="17" pos:column="31">*<pos:position pos:line="17" pos:column="32"/></operator><operator pos:line="17" pos:column="32">)<pos:position pos:line="17" pos:column="33"/></operator> <name pos:line="17" pos:column="34">NULL<pos:position pos:line="17" pos:column="38"/></name></expr>;<pos:position pos:line="17" pos:column="39"/></return>
      }<pos:position pos:line="18" pos:column="8"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">QadrtConvertA2E<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">cp<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="25">attr<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">i<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">i<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">cp<pos:position pos:line="21" pos:column="7"/></name><index pos:line="21" pos:column="7">[<expr><name pos:line="21" pos:column="8">i<pos:position pos:line="21" pos:column="9"/></name></expr>]<pos:position pos:line="21" pos:column="10"/></index></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <literal type="char" pos:line="21" pos:column="13">'\0'<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="24" pos:column="3">result<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">ldap_get_values_len<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">ld<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="36">entry<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="43">cp<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">cp<pos:position pos:line="26" pos:column="9"/></name></expr>)<pos:position pos:line="26" pos:column="10"/></condition><then pos:line="26" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="5">free<pos:position pos:line="27" pos:column="9"/></name><argument_list pos:line="27" pos:column="9">(<argument><expr><name pos:line="27" pos:column="10">cp<pos:position pos:line="27" pos:column="12"/></name></expr></argument>)<pos:position pos:line="27" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="14"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="29" pos:column="3">/* Result data are binary in nature, so they haven't been converted to EBCDIC.
     Therefore do not convert. */</comment>

  <return pos:line="32" pos:column="3">return <expr><name pos:line="32" pos:column="10">result<pos:position pos:line="32" pos:column="16"/></name></expr>;<pos:position pos:line="32" pos:column="17"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
