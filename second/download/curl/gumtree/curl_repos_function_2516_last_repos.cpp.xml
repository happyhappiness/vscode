<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2516_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">darwinssl_send<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">connectdata<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">conn<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">sockindex<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
                              <parameter><decl><type><specifier pos:line="3" pos:column="31">const<pos:position pos:line="3" pos:column="36"/></specifier> <name pos:line="3" pos:column="37">void<pos:position pos:line="3" pos:column="41"/></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">mem<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="4" pos:column="31">size_t<pos:position pos:line="4" pos:column="37"/></name></type> <name pos:line="4" pos:column="38">len<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="5" pos:column="31">CURLcode<pos:position pos:line="5" pos:column="39"/></name> <modifier pos:line="5" pos:column="40">*<pos:position pos:line="5" pos:column="41"/></modifier></type><name pos:line="5" pos:column="41">curlcode<pos:position pos:line="5" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="50"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <comment type="block" pos:line="7" pos:column="3">/*struct Curl_easy *data = conn-&gt;data;*/</comment>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">ssl_connect_data<pos:position pos:line="8" pos:column="26"/></name></name> <modifier pos:line="8" pos:column="27">*<pos:position pos:line="8" pos:column="28"/></modifier></type><name pos:line="8" pos:column="28">connssl<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name><name pos:line="8" pos:column="39">conn<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">ssl<pos:position pos:line="8" pos:column="48"/></name><index pos:line="8" pos:column="48">[<expr><name pos:line="8" pos:column="49">sockindex<pos:position pos:line="8" pos:column="58"/></name></expr>]<pos:position pos:line="8" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">processed<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><literal type="number" pos:line="9" pos:column="22">0UL<pos:position pos:line="9" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">OSStatus<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">err<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* The SSLWrite() function works a little differently than expected. The
     fourth argument (processed) is currently documented in Apple's
     documentation as: "On return, the length, in bytes, of the data actually
     written."

     Now, one could interpret that as "written to the socket," but actually,
     it returns the amount of data that was written to a buffer internal to
     the SSLContextRef instead. So it's possible for SSLWrite() to return
     errSSLWouldBlock and a number of bytes "written" because those bytes were
     encrypted and written to a buffer, not to the socket.

     So if this happens, then we need to keep calling SSLWrite() over and
     over again with no new data until it quits returning errSSLWouldBlock. */</comment>

  <comment type="block" pos:line="26" pos:column="3">/* Do we have buffered data to write from the last time we were called? */</comment>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name><name pos:line="27" pos:column="6">BACKEND<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">-&gt;<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="15">ssl_write_buffered_length<pos:position pos:line="27" pos:column="40"/></name></name></expr>)<pos:position pos:line="27" pos:column="41"/></condition><then pos:line="27" pos:column="41"> <block pos:line="27" pos:column="42">{
    <comment type="block" pos:line="28" pos:column="5">/* Write the buffered data: */</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">err<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <call><name pos:line="29" pos:column="11">SSLWrite<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name><name pos:line="29" pos:column="20">BACKEND<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">-&gt;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="29">ssl_ctx<pos:position pos:line="29" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="38">NULL<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="44">0UL<pos:position pos:line="29" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="29" pos:column="49">&amp;<pos:position pos:line="29" pos:column="54"/></operator><name pos:line="29" pos:column="50">processed<pos:position pos:line="29" pos:column="59"/></name></expr></argument>)<pos:position pos:line="29" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="61"/></expr_stmt>
    <switch pos:line="30" pos:column="5">switch<condition pos:line="30" pos:column="11">(<expr><name pos:line="30" pos:column="12">err<pos:position pos:line="30" pos:column="15"/></name></expr>)<pos:position pos:line="30" pos:column="16"/></condition> <block pos:line="30" pos:column="17">{
      <case pos:line="31" pos:column="7">case <expr><name pos:line="31" pos:column="12">noErr<pos:position pos:line="31" pos:column="17"/></name></expr>:<pos:position pos:line="31" pos:column="18"/></case>
        <comment type="block" pos:line="32" pos:column="9">/* processed is always going to be 0 because we didn't write to
           the buffer, so return how much was written to the socket */</comment>
        <expr_stmt><expr><name pos:line="34" pos:column="9">processed<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <name><name pos:line="34" pos:column="21">BACKEND<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">-&gt;<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="30">ssl_write_buffered_length<pos:position pos:line="34" pos:column="55"/></name></name></expr>;<pos:position pos:line="34" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">BACKEND<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">ssl_write_buffered_length<pos:position pos:line="35" pos:column="43"/></name></name> <operator pos:line="35" pos:column="44">=<pos:position pos:line="35" pos:column="45"/></operator> <literal type="number" pos:line="35" pos:column="46">0UL<pos:position pos:line="35" pos:column="49"/></literal></expr>;<pos:position pos:line="35" pos:column="50"/></expr_stmt>
        <break pos:line="36" pos:column="9">break;<pos:position pos:line="36" pos:column="15"/></break>
      <case pos:line="37" pos:column="7">case <expr><name pos:line="37" pos:column="12">errSSLWouldBlock<pos:position pos:line="37" pos:column="28"/></name></expr>:<pos:position pos:line="37" pos:column="29"/></case> <comment type="block" pos:line="37" pos:column="30">/* argh, try again */</comment>
        <expr_stmt><expr><operator pos:line="38" pos:column="9">*<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="10">curlcode<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <name pos:line="38" pos:column="21">CURLE_AGAIN<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
        <return pos:line="39" pos:column="9">return <expr><operator pos:line="39" pos:column="16">-<pos:position pos:line="39" pos:column="17"/></operator><literal type="number" pos:line="39" pos:column="17">1L<pos:position pos:line="39" pos:column="19"/></literal></expr>;<pos:position pos:line="39" pos:column="20"/></return>
      <default pos:line="40" pos:column="7">default:<pos:position pos:line="40" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">failf<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name><name pos:line="41" pos:column="15">conn<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">-&gt;<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="21">data<pos:position pos:line="41" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="27">"SSLWrite() returned error %d"<pos:position pos:line="41" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="59">err<pos:position pos:line="41" pos:column="62"/></name></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="42" pos:column="9">*<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">curlcode<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="21">CURLE_SEND_ERROR<pos:position pos:line="42" pos:column="37"/></name></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
        <return pos:line="43" pos:column="9">return <expr><operator pos:line="43" pos:column="16">-<pos:position pos:line="43" pos:column="17"/></operator><literal type="number" pos:line="43" pos:column="17">1L<pos:position pos:line="43" pos:column="19"/></literal></expr>;<pos:position pos:line="43" pos:column="20"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></switch>
  }<pos:position pos:line="45" pos:column="4"/></block></then>
  <else pos:line="46" pos:column="3">else <block pos:line="46" pos:column="8">{
    <comment type="block" pos:line="47" pos:column="5">/* We've got new data to write: */</comment>
    <expr_stmt><expr><name pos:line="48" pos:column="5">err<pos:position pos:line="48" pos:column="8"/></name> <operator pos:line="48" pos:column="9">=<pos:position pos:line="48" pos:column="10"/></operator> <call><name pos:line="48" pos:column="11">SSLWrite<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><name><name pos:line="48" pos:column="20">BACKEND<pos:position pos:line="48" pos:column="27"/></name><operator pos:line="48" pos:column="27">-&gt;<pos:position pos:line="48" pos:column="32"/></operator><name pos:line="48" pos:column="29">ssl_ctx<pos:position pos:line="48" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">mem<pos:position pos:line="48" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="43">len<pos:position pos:line="48" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="48">&amp;<pos:position pos:line="48" pos:column="53"/></operator><name pos:line="48" pos:column="49">processed<pos:position pos:line="48" pos:column="58"/></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt>
    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><name pos:line="49" pos:column="8">err<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">!=<pos:position pos:line="49" pos:column="14"/></operator> <name pos:line="49" pos:column="15">noErr<pos:position pos:line="49" pos:column="20"/></name></expr>)<pos:position pos:line="49" pos:column="21"/></condition><then pos:line="49" pos:column="21"> <block pos:line="49" pos:column="22">{
      <switch pos:line="50" pos:column="7">switch<condition pos:line="50" pos:column="13">(<expr><name pos:line="50" pos:column="14">err<pos:position pos:line="50" pos:column="17"/></name></expr>)<pos:position pos:line="50" pos:column="18"/></condition> <block pos:line="50" pos:column="19">{
        <case pos:line="51" pos:column="9">case <expr><name pos:line="51" pos:column="14">errSSLWouldBlock<pos:position pos:line="51" pos:column="30"/></name></expr>:<pos:position pos:line="51" pos:column="31"/></case>
          <comment type="block" pos:line="52" pos:column="11">/* Data was buffered but not sent, we have to tell the caller
             to try sending again, and remember how much was buffered */</comment>
          <expr_stmt><expr><name><name pos:line="54" pos:column="11">BACKEND<pos:position pos:line="54" pos:column="18"/></name><operator pos:line="54" pos:column="18">-&gt;<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="20">ssl_write_buffered_length<pos:position pos:line="54" pos:column="45"/></name></name> <operator pos:line="54" pos:column="46">=<pos:position pos:line="54" pos:column="47"/></operator> <name pos:line="54" pos:column="48">len<pos:position pos:line="54" pos:column="51"/></name></expr>;<pos:position pos:line="54" pos:column="52"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="55" pos:column="11">*<pos:position pos:line="55" pos:column="12"/></operator><name pos:line="55" pos:column="12">curlcode<pos:position pos:line="55" pos:column="20"/></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <name pos:line="55" pos:column="23">CURLE_AGAIN<pos:position pos:line="55" pos:column="34"/></name></expr>;<pos:position pos:line="55" pos:column="35"/></expr_stmt>
          <return pos:line="56" pos:column="11">return <expr><operator pos:line="56" pos:column="18">-<pos:position pos:line="56" pos:column="19"/></operator><literal type="number" pos:line="56" pos:column="19">1L<pos:position pos:line="56" pos:column="21"/></literal></expr>;<pos:position pos:line="56" pos:column="22"/></return>
        <default pos:line="57" pos:column="9">default:<pos:position pos:line="57" pos:column="17"/></default>
          <expr_stmt><expr><call><name pos:line="58" pos:column="11">failf<pos:position pos:line="58" pos:column="16"/></name><argument_list pos:line="58" pos:column="16">(<argument><expr><name><name pos:line="58" pos:column="17">conn<pos:position pos:line="58" pos:column="21"/></name><operator pos:line="58" pos:column="21">-&gt;<pos:position pos:line="58" pos:column="26"/></operator><name pos:line="58" pos:column="23">data<pos:position pos:line="58" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="29">"SSLWrite() returned error %d"<pos:position pos:line="58" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="61">err<pos:position pos:line="58" pos:column="64"/></name></expr></argument>)<pos:position pos:line="58" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="66"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="59" pos:column="11">*<pos:position pos:line="59" pos:column="12"/></operator><name pos:line="59" pos:column="12">curlcode<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <name pos:line="59" pos:column="23">CURLE_SEND_ERROR<pos:position pos:line="59" pos:column="39"/></name></expr>;<pos:position pos:line="59" pos:column="40"/></expr_stmt>
          <return pos:line="60" pos:column="11">return <expr><operator pos:line="60" pos:column="18">-<pos:position pos:line="60" pos:column="19"/></operator><literal type="number" pos:line="60" pos:column="19">1L<pos:position pos:line="60" pos:column="21"/></literal></expr>;<pos:position pos:line="60" pos:column="22"/></return>
      }<pos:position pos:line="61" pos:column="8"/></block></switch>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
  }<pos:position pos:line="63" pos:column="4"/></block></else></if>
  <return pos:line="64" pos:column="3">return <expr><operator pos:line="64" pos:column="10">(<pos:position pos:line="64" pos:column="11"/></operator><name pos:line="64" pos:column="11">ssize_t<pos:position pos:line="64" pos:column="18"/></name><operator pos:line="64" pos:column="18">)<pos:position pos:line="64" pos:column="19"/></operator><name pos:line="64" pos:column="19">processed<pos:position pos:line="64" pos:column="28"/></name></expr>;<pos:position pos:line="64" pos:column="29"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
