<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1533.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">pausewrite<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">SessionHandle<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">data<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">type<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <comment type="block" pos:line="2" pos:column="38">/* what type of data */</comment>
                           <parameter><decl><type><specifier pos:line="3" pos:column="28">const<pos:position pos:line="3" pos:column="33"/></specifier> <name pos:line="3" pos:column="34">char<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">ptr<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="4" pos:column="28">size_t<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">len<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="39"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <comment type="block" pos:line="6" pos:column="3">/* signalled to pause sending on this connection, but since we have data
     we want to send we need to dup it to save a copy for when the sending
     is again enabled */</comment>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">SingleRequest<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">k<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator><name><name pos:line="9" pos:column="30">data<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">-&gt;<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="36">req<pos:position pos:line="9" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">dupl<pos:position pos:line="10" pos:column="13"/></name> <init pos:line="10" pos:column="14">= <expr><call><name pos:line="10" pos:column="16">malloc<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">len<pos:position pos:line="10" pos:column="26"/></name></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><operator pos:line="11" pos:column="6">!<pos:position pos:line="11" pos:column="7"/></operator><name pos:line="11" pos:column="7">dupl<pos:position pos:line="11" pos:column="11"/></name></expr>)<pos:position pos:line="11" pos:column="12"/></condition><then pos:line="11" pos:column="12">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="12" pos:column="31"/></name></expr>;<pos:position pos:line="12" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memcpy<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">dupl<pos:position pos:line="14" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="16">ptr<pos:position pos:line="14" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="21">len<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* store this information in the state struct for later use */</comment>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">data<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">-&gt;<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="9">state<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">.<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">tempwrite<pos:position pos:line="17" pos:column="24"/></name></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">dupl<pos:position pos:line="17" pos:column="31"/></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">data<pos:position pos:line="18" pos:column="7"/></name><operator pos:line="18" pos:column="7">-&gt;<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="9">state<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">.<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">tempwritesize<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">=<pos:position pos:line="18" pos:column="30"/></operator> <name pos:line="18" pos:column="31">len<pos:position pos:line="18" pos:column="34"/></name></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">data<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">-&gt;<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="9">state<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">tempwritetype<pos:position pos:line="19" pos:column="28"/></name></name> <operator pos:line="19" pos:column="29">=<pos:position pos:line="19" pos:column="30"/></operator> <name pos:line="19" pos:column="31">type<pos:position pos:line="19" pos:column="35"/></name></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* mark the connection as RECV paused */</comment>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">k<pos:position pos:line="22" pos:column="4"/></name><operator pos:line="22" pos:column="4">-&gt;<pos:position pos:line="22" pos:column="9"/></operator><name pos:line="22" pos:column="6">keepon<pos:position pos:line="22" pos:column="12"/></name></name> <operator pos:line="22" pos:column="13">|=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">KEEP_RECV_PAUSE<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="24" pos:column="3">DEBUGF<pos:position pos:line="24" pos:column="9"/></name><argument_list pos:line="24" pos:column="9">(<argument><expr><call><name pos:line="24" pos:column="10">infof<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">data<pos:position pos:line="24" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="22">"Pausing with %zu bytes in buffer for type %02x\n"<pos:position pos:line="24" pos:column="72"/></literal></expr></argument>,
               <argument><expr><name pos:line="25" pos:column="16">len<pos:position pos:line="25" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="21">type<pos:position pos:line="25" pos:column="25"/></name></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>

  <return pos:line="27" pos:column="3">return <expr><name pos:line="27" pos:column="10">CURLE_OK<pos:position pos:line="27" pos:column="18"/></name></expr>;<pos:position pos:line="27" pos:column="19"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
