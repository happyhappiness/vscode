<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1978_curl-7.35.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ossl_seed<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">SessionHandle<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">data<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">buf<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><name><name pos:line="3" pos:column="15">data<pos:position pos:line="3" pos:column="19"/></name><operator pos:line="3" pos:column="19">-&gt;<pos:position pos:line="3" pos:column="24"/></operator><name pos:line="3" pos:column="21">state<pos:position pos:line="3" pos:column="26"/></name><operator pos:line="3" pos:column="26">.<pos:position pos:line="3" pos:column="27"/></operator><name pos:line="3" pos:column="27">buffer<pos:position pos:line="3" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt> <comment type="block" pos:line="3" pos:column="35">/* point to the big buffer */</comment>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">nread<pos:position pos:line="4" pos:column="12"/></name><init pos:line="4" pos:column="12">=<expr><literal type="number" pos:line="4" pos:column="13">0<pos:position pos:line="4" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Q: should we add support for a random file name as a libcurl option?
     A: Yes, it is here */</comment>

<cpp:ifndef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifndef<pos:position pos:line="9" pos:column="8"/></cpp:directive> <name pos:line="9" pos:column="9">RANDOM_FILE<pos:position pos:line="9" pos:column="20"/></name></cpp:ifndef>
  <comment type="block" pos:line="10" pos:column="3">/* if RANDOM_FILE isn't defined, we only perform this if an option tells
     us to! */</comment>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name><name pos:line="12" pos:column="6">data<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">set<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">ssl<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">.<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">random_file<pos:position pos:line="12" pos:column="31"/></name></name></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32">
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define<pos:position pos:line="13" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">RANDOM_FILE<pos:position pos:line="13" pos:column="20"/></name></cpp:macro> <cpp:value pos:line="13" pos:column="21">""<pos:position pos:line="13" pos:column="23"/></cpp:value></cpp:define> <comment type="block" pos:line="13" pos:column="24">/* doesn't matter won't be used */</comment>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
  <block pos:line="15" pos:column="3">{
    <comment type="block" pos:line="16" pos:column="5">/* let the option override the define */</comment>
    <expr_stmt><expr><name pos:line="17" pos:column="5">nread<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">+=<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">RAND_load_file<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><operator pos:line="17" pos:column="29">(<pos:position pos:line="17" pos:column="30"/></operator><ternary><condition><expr><name><name pos:line="17" pos:column="30">data<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">-&gt;<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="36">set<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">.<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">str<pos:position pos:line="17" pos:column="43"/></name><index pos:line="17" pos:column="43">[<expr><name pos:line="17" pos:column="44">STRING_SSL_RANDOM_FILE<pos:position pos:line="17" pos:column="66"/></name></expr>]<pos:position pos:line="17" pos:column="67"/></index></name></expr>?<pos:position pos:line="17" pos:column="68"/></condition><then pos:line="17" pos:column="68">
                             <expr><name><name pos:line="18" pos:column="30">data<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">-&gt;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="36">set<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">.<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="40">str<pos:position pos:line="18" pos:column="43"/></name><index pos:line="18" pos:column="43">[<expr><name pos:line="18" pos:column="44">STRING_SSL_RANDOM_FILE<pos:position pos:line="18" pos:column="66"/></name></expr>]<pos:position pos:line="18" pos:column="67"/></index></name></expr></then><else pos:line="18" pos:column="67">:
                             <expr><name pos:line="19" pos:column="30">RANDOM_FILE<pos:position pos:line="19" pos:column="41"/></name></expr></else></ternary><operator pos:line="19" pos:column="41">)<pos:position pos:line="19" pos:column="42"/></operator></expr></argument>,
                            <argument><expr><name pos:line="20" pos:column="29">RAND_LOAD_LENGTH<pos:position pos:line="20" pos:column="45"/></name></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt>
    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><call><name pos:line="21" pos:column="8">seed_enough<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">nread<pos:position pos:line="21" pos:column="25"/></name></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27">
      <block type="pseudo"><return pos:line="22" pos:column="7">return <expr><name pos:line="22" pos:column="14">nread<pos:position pos:line="22" pos:column="19"/></name></expr>;<pos:position pos:line="22" pos:column="20"/></return></block></then></if>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><call><name pos:line="25" pos:column="5">defined<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name pos:line="25" pos:column="13">HAVE_RAND_EGD<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="26" pos:column="3">/* only available in OpenSSL 0.9.5 and later */</comment>
  <comment type="block" pos:line="27" pos:column="3">/* EGD_SOCKET is set at configure time or not at all */</comment>
<cpp:ifndef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifndef<pos:position pos:line="28" pos:column="8"/></cpp:directive> <name pos:line="28" pos:column="9">EGD_SOCKET<pos:position pos:line="28" pos:column="19"/></name></cpp:ifndef>
  <comment type="block" pos:line="29" pos:column="3">/* If we don't have the define set, we only do this if the egd-option
     is set */</comment>
  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name><name pos:line="31" pos:column="6">data<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">set<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">str<pos:position pos:line="31" pos:column="19"/></name><index pos:line="31" pos:column="19">[<expr><name pos:line="31" pos:column="20">STRING_SSL_EGDSOCKET<pos:position pos:line="31" pos:column="40"/></name></expr>]<pos:position pos:line="31" pos:column="41"/></index></name></expr>)<pos:position pos:line="31" pos:column="42"/></condition><then pos:line="31" pos:column="42">
<cpp:define pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">define<pos:position pos:line="32" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="32" pos:column="9">EGD_SOCKET<pos:position pos:line="32" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="32" pos:column="20">""<pos:position pos:line="32" pos:column="22"/></cpp:value></cpp:define> <comment type="block" pos:line="32" pos:column="23">/* doesn't matter won't be used */</comment>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
  <block pos:line="34" pos:column="3">{
    <comment type="block" pos:line="35" pos:column="5">/* If there's an option and a define, the option overrides the
       define */</comment>
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">int<pos:position pos:line="37" pos:column="8"/></name></type> <name pos:line="37" pos:column="9">ret<pos:position pos:line="37" pos:column="12"/></name> <init pos:line="37" pos:column="13">= <expr><call><name pos:line="37" pos:column="15">RAND_egd<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><ternary><condition><expr><name><name pos:line="37" pos:column="24">data<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">-&gt;<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="30">set<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">.<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="34">str<pos:position pos:line="37" pos:column="37"/></name><index pos:line="37" pos:column="37">[<expr><name pos:line="37" pos:column="38">STRING_SSL_EGDSOCKET<pos:position pos:line="37" pos:column="58"/></name></expr>]<pos:position pos:line="37" pos:column="59"/></index></name></expr>?<pos:position pos:line="37" pos:column="60"/></condition><then pos:line="37" pos:column="60">
                       <expr><name><name pos:line="38" pos:column="24">data<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">-&gt;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="30">set<pos:position pos:line="38" pos:column="33"/></name><operator pos:line="38" pos:column="33">.<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="34">str<pos:position pos:line="38" pos:column="37"/></name><index pos:line="38" pos:column="37">[<expr><name pos:line="38" pos:column="38">STRING_SSL_EGDSOCKET<pos:position pos:line="38" pos:column="58"/></name></expr>]<pos:position pos:line="38" pos:column="59"/></index></name></expr></then><else pos:line="38" pos:column="59">:<expr><name pos:line="38" pos:column="60">EGD_SOCKET<pos:position pos:line="38" pos:column="70"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="38" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="72"/></decl_stmt>
    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><operator pos:line="39" pos:column="8">-<pos:position pos:line="39" pos:column="9"/></operator><literal type="number" pos:line="39" pos:column="9">1<pos:position pos:line="39" pos:column="10"/></literal> <operator pos:line="39" pos:column="11">!=<pos:position pos:line="39" pos:column="13"/></operator> <name pos:line="39" pos:column="14">ret<pos:position pos:line="39" pos:column="17"/></name></expr>)<pos:position pos:line="39" pos:column="18"/></condition><then pos:line="39" pos:column="18"> <block pos:line="39" pos:column="19">{
      <expr_stmt><expr><name pos:line="40" pos:column="7">nread<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">+=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">ret<pos:position pos:line="40" pos:column="19"/></name></expr>;<pos:position pos:line="40" pos:column="20"/></expr_stmt>
      <if pos:line="41" pos:column="7">if<condition pos:line="41" pos:column="9">(<expr><call><name pos:line="41" pos:column="10">seed_enough<pos:position pos:line="41" pos:column="21"/></name><argument_list pos:line="41" pos:column="21">(<argument><expr><name pos:line="41" pos:column="22">nread<pos:position pos:line="41" pos:column="27"/></name></expr></argument>)<pos:position pos:line="41" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="29"/></condition><then pos:line="41" pos:column="29">
        <block type="pseudo"><return pos:line="42" pos:column="9">return <expr><name pos:line="42" pos:column="16">nread<pos:position pos:line="42" pos:column="21"/></name></expr>;<pos:position pos:line="42" pos:column="22"/></return></block></then></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="47" pos:column="3">/* If we get here, it means we need to seed the PRNG using a "silly"
     approach! */</comment>
  <do pos:line="49" pos:column="3">do <block pos:line="49" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="50" pos:column="5">unsigned<pos:position pos:line="50" pos:column="13"/></name> <name pos:line="50" pos:column="14">char<pos:position pos:line="50" pos:column="18"/></name></type> <name><name pos:line="50" pos:column="19">randb<pos:position pos:line="50" pos:column="24"/></name><index pos:line="50" pos:column="24">[<expr><literal type="number" pos:line="50" pos:column="25">64<pos:position pos:line="50" pos:column="27"/></literal></expr>]<pos:position pos:line="50" pos:column="28"/></index></name></decl>;<pos:position pos:line="50" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">int<pos:position pos:line="51" pos:column="8"/></name></type> <name pos:line="51" pos:column="9">len<pos:position pos:line="51" pos:column="12"/></name> <init pos:line="51" pos:column="13">= <expr><sizeof pos:line="51" pos:column="15">sizeof<argument_list pos:line="51" pos:column="21">(<argument><expr><name pos:line="51" pos:column="22">randb<pos:position pos:line="51" pos:column="27"/></name></expr></argument>)<pos:position pos:line="51" pos:column="28"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="51" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">RAND_bytes<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><name pos:line="52" pos:column="16">randb<pos:position pos:line="52" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="23">len<pos:position pos:line="52" pos:column="26"/></name></expr></argument>)<pos:position pos:line="52" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">RAND_add<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><name pos:line="53" pos:column="14">randb<pos:position pos:line="53" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="21">len<pos:position pos:line="53" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="26">(<pos:position pos:line="53" pos:column="27"/></operator><name pos:line="53" pos:column="27">len<pos:position pos:line="53" pos:column="30"/></name> <operator pos:line="53" pos:column="31">&gt;&gt;<pos:position pos:line="53" pos:column="36"/></operator> <literal type="number" pos:line="53" pos:column="34">1<pos:position pos:line="53" pos:column="35"/></literal><operator pos:line="53" pos:column="35">)<pos:position pos:line="53" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="53" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="54" pos:column="4"/></block> while<condition pos:line="54" pos:column="10">(<expr><operator pos:line="54" pos:column="11">!<pos:position pos:line="54" pos:column="12"/></operator><call><name pos:line="54" pos:column="12">RAND_status<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">()<pos:position pos:line="54" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="26"/></condition>;<pos:position pos:line="54" pos:column="27"/></do>

  <comment type="block" pos:line="56" pos:column="3">/* generates a default path for the random seed file */</comment>
  <expr_stmt><expr><name><name pos:line="57" pos:column="3">buf<pos:position pos:line="57" pos:column="6"/></name><index pos:line="57" pos:column="6">[<expr><literal type="number" pos:line="57" pos:column="7">0<pos:position pos:line="57" pos:column="8"/></literal></expr>]<pos:position pos:line="57" pos:column="9"/></index></name><operator pos:line="57" pos:column="9">=<pos:position pos:line="57" pos:column="10"/></operator><literal type="number" pos:line="57" pos:column="10">0<pos:position pos:line="57" pos:column="11"/></literal></expr>;<pos:position pos:line="57" pos:column="12"/></expr_stmt> <comment type="block" pos:line="57" pos:column="13">/* blank it first */</comment>
  <expr_stmt><expr><call><name pos:line="58" pos:column="3">RAND_file_name<pos:position pos:line="58" pos:column="17"/></name><argument_list pos:line="58" pos:column="17">(<argument><expr><name pos:line="58" pos:column="18">buf<pos:position pos:line="58" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="23">BUFSIZE<pos:position pos:line="58" pos:column="30"/></name></expr></argument>)<pos:position pos:line="58" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="32"/></expr_stmt>
  <if pos:line="59" pos:column="3">if<condition pos:line="59" pos:column="5">(<expr><name><name pos:line="59" pos:column="6">buf<pos:position pos:line="59" pos:column="9"/></name><index pos:line="59" pos:column="9">[<expr><literal type="number" pos:line="59" pos:column="10">0<pos:position pos:line="59" pos:column="11"/></literal></expr>]<pos:position pos:line="59" pos:column="12"/></index></name></expr>)<pos:position pos:line="59" pos:column="13"/></condition><then pos:line="59" pos:column="13"> <block pos:line="59" pos:column="14">{
    <comment type="block" pos:line="60" pos:column="5">/* we got a file name to try */</comment>
    <expr_stmt><expr><name pos:line="61" pos:column="5">nread<pos:position pos:line="61" pos:column="10"/></name> <operator pos:line="61" pos:column="11">+=<pos:position pos:line="61" pos:column="13"/></operator> <call><name pos:line="61" pos:column="14">RAND_load_file<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">buf<pos:position pos:line="61" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="34">RAND_LOAD_LENGTH<pos:position pos:line="61" pos:column="50"/></name></expr></argument>)<pos:position pos:line="61" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="52"/></expr_stmt>
    <if pos:line="62" pos:column="5">if<condition pos:line="62" pos:column="7">(<expr><call><name pos:line="62" pos:column="8">seed_enough<pos:position pos:line="62" pos:column="19"/></name><argument_list pos:line="62" pos:column="19">(<argument><expr><name pos:line="62" pos:column="20">nread<pos:position pos:line="62" pos:column="25"/></name></expr></argument>)<pos:position pos:line="62" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="27"/></condition><then pos:line="62" pos:column="27">
      <block type="pseudo"><return pos:line="63" pos:column="7">return <expr><name pos:line="63" pos:column="14">nread<pos:position pos:line="63" pos:column="19"/></name></expr>;<pos:position pos:line="63" pos:column="20"/></return></block></then></if>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="66" pos:column="3">infof<pos:position pos:line="66" pos:column="8"/></name><argument_list pos:line="66" pos:column="8">(<argument><expr><name pos:line="66" pos:column="9">data<pos:position pos:line="66" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="15">"libcurl is now using a weak random seed!\n"<pos:position pos:line="66" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="61"/></expr_stmt>
  <return pos:line="67" pos:column="3">return <expr><name pos:line="67" pos:column="10">nread<pos:position pos:line="67" pos:column="15"/></name></expr>;<pos:position pos:line="67" pos:column="16"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
