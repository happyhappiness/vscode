<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_199_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">AllocAndCopy<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier><modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">buffer<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">buffer_length<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">src<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><operator pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></operator><name pos:line="3" pos:column="22">buffer<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">length<pos:position pos:line="4" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="15">add<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">buffer_length<pos:position pos:line="5" pos:column="20"/></name></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="5">length<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <name pos:line="6" pos:column="14">buffer_length<pos:position pos:line="6" pos:column="27"/></name></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt></block></then>
  <else pos:line="7" pos:column="3">else <block pos:line="7" pos:column="8">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">length<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">strlen<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><operator pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">buffer<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="9" pos:column="5">add<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <literal type="number" pos:line="9" pos:column="11">1<pos:position pos:line="9" pos:column="12"/></literal></expr>;<pos:position pos:line="9" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></else></if>
  <expr_stmt><expr><operator pos:line="11" pos:column="3">*<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">buffer<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <operator pos:line="11" pos:column="13">(<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">char<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></operator><operator pos:line="11" pos:column="19">)<pos:position pos:line="11" pos:column="20"/></operator><call><name pos:line="11" pos:column="20">malloc<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">length<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">+<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">add<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><operator pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">buffer<pos:position pos:line="12" pos:column="15"/></name></expr>)<pos:position pos:line="12" pos:column="16"/></condition><then pos:line="12" pos:column="16">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><literal type="number" pos:line="13" pos:column="12">1<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memcpy<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><operator pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">buffer<pos:position pos:line="14" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="19">src<pos:position pos:line="14" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="24">length<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
  <comment type="block" pos:line="15" pos:column="3">/* if length unknown do null termination */</comment>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">add<pos:position pos:line="16" pos:column="10"/></name></expr>)<pos:position pos:line="16" pos:column="11"/></condition><then pos:line="16" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="17" pos:column="5">(<pos:position pos:line="17" pos:column="6"/></operator><operator pos:line="17" pos:column="6">*<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">buffer<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">)<pos:position pos:line="17" pos:column="14"/></operator><index pos:line="17" pos:column="14">[<expr><name pos:line="17" pos:column="15">length<pos:position pos:line="17" pos:column="21"/></name></expr>]<pos:position pos:line="17" pos:column="22"/></index> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <literal type="char" pos:line="17" pos:column="25">'\0'<pos:position pos:line="17" pos:column="29"/></literal></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt></block></then></if>
  <return pos:line="18" pos:column="3">return <expr><literal type="number" pos:line="18" pos:column="10">0<pos:position pos:line="18" pos:column="11"/></literal></expr>;<pos:position pos:line="18" pos:column="12"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
