<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_50.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type>
<name pos:line="2" pos:column="1">url_fread<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">void<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">ptr<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="22">size_t<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">size<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">size_t<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">nmemb<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">URL_FILE<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">file<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">want<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

    <switch pos:line="6" pos:column="5">switch<condition pos:line="6" pos:column="11">(<expr><name><name pos:line="6" pos:column="12">file<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">-&gt;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="18">type<pos:position pos:line="6" pos:column="22"/></name></name></expr>)<pos:position pos:line="6" pos:column="23"/></condition>
    <block pos:line="7" pos:column="5">{
    <case pos:line="8" pos:column="5">case <expr><name pos:line="8" pos:column="10">CFTYPE_FILE<pos:position pos:line="8" pos:column="21"/></name></expr>:<pos:position pos:line="8" pos:column="22"/></case>
        <expr_stmt><expr><name pos:line="9" pos:column="9">want<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">fread<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">ptr<pos:position pos:line="9" pos:column="23"/></name></expr></argument>,<argument><expr><name pos:line="9" pos:column="24">size<pos:position pos:line="9" pos:column="28"/></name></expr></argument>,<argument><expr><name pos:line="9" pos:column="29">nmemb<pos:position pos:line="9" pos:column="34"/></name></expr></argument>,<argument><expr><name><name pos:line="9" pos:column="35">file<pos:position pos:line="9" pos:column="39"/></name><operator pos:line="9" pos:column="39">-&gt;<pos:position pos:line="9" pos:column="44"/></operator><name pos:line="9" pos:column="41">handle<pos:position pos:line="9" pos:column="47"/></name><operator pos:line="9" pos:column="47">.<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="48">file<pos:position pos:line="9" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt>
        <break pos:line="10" pos:column="9">break;<pos:position pos:line="10" pos:column="15"/></break>

    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">CFTYPE_CURL<pos:position pos:line="12" pos:column="21"/></name></expr>:<pos:position pos:line="12" pos:column="22"/></case>
        <expr_stmt><expr><name pos:line="13" pos:column="9">want<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">nmemb<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">*<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">size<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fill_buffer<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">file<pos:position pos:line="15" pos:column="25"/></name></expr></argument>,<argument><expr><name pos:line="15" pos:column="26">want<pos:position pos:line="15" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="15" pos:column="31">1<pos:position pos:line="15" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>

        <comment type="block" pos:line="17" pos:column="9">/* check if theres data in the buffer - if not fill_buffer()
         * either errored or EOF */</comment>
        <if pos:line="19" pos:column="9">if<condition pos:line="19" pos:column="11">(<expr><operator pos:line="19" pos:column="12">!<pos:position pos:line="19" pos:column="13"/></operator><name><name pos:line="19" pos:column="13">file<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="19">buffer_pos<pos:position pos:line="19" pos:column="29"/></name></name></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30">
            <block type="pseudo"><return pos:line="20" pos:column="13">return <expr><literal type="number" pos:line="20" pos:column="20">0<pos:position pos:line="20" pos:column="21"/></literal></expr>;<pos:position pos:line="20" pos:column="22"/></return></block></then></if>

        <comment type="block" pos:line="22" pos:column="9">/* ensure only available data is considered */</comment>
        <if pos:line="23" pos:column="9">if<condition pos:line="23" pos:column="11">(<expr><name><name pos:line="23" pos:column="12">file<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">buffer_pos<pos:position pos:line="23" pos:column="28"/></name></name> <operator pos:line="23" pos:column="29">&lt;<pos:position pos:line="23" pos:column="33"/></operator> <name pos:line="23" pos:column="31">want<pos:position pos:line="23" pos:column="35"/></name></expr>)<pos:position pos:line="23" pos:column="36"/></condition><then pos:line="23" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="13">want<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <name><name pos:line="24" pos:column="20">file<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">-&gt;<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="26">buffer_pos<pos:position pos:line="24" pos:column="36"/></name></name></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="26" pos:column="9">/* xfer data to caller */</comment>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">memcpy<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">ptr<pos:position pos:line="27" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="21">file<pos:position pos:line="27" pos:column="25"/></name><operator pos:line="27" pos:column="25">-&gt;<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="27">buffer<pos:position pos:line="27" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">want<pos:position pos:line="27" pos:column="39"/></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="29" pos:column="9">use_buffer<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">file<pos:position pos:line="29" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="29" pos:column="25">want<pos:position pos:line="29" pos:column="29"/></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>

        <expr_stmt><expr><name pos:line="31" pos:column="9">want<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">want<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">/<pos:position pos:line="31" pos:column="22"/></operator> <name pos:line="31" pos:column="23">size<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>     <comment type="block" pos:line="31" pos:column="33">/* number of items - nb correct op - checked
                                 * with glibc code*/</comment>

        <comment type="block" pos:line="34" pos:column="9">/*printf("(fread) return %d bytes %d left\n", want,file-&gt;buffer_pos);*/</comment>
        <break pos:line="35" pos:column="9">break;<pos:position pos:line="35" pos:column="15"/></break>

    <default pos:line="37" pos:column="5">default:<pos:position pos:line="37" pos:column="13"/></default> <comment type="block" pos:line="37" pos:column="14">/* unknown or supported type - oh dear */</comment>
        <expr_stmt><expr><name pos:line="38" pos:column="9">want<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator><literal type="number" pos:line="38" pos:column="14">0<pos:position pos:line="38" pos:column="15"/></literal></expr>;<pos:position pos:line="38" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">errno<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="15">EBADF<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
        <break pos:line="40" pos:column="9">break;<pos:position pos:line="40" pos:column="15"/></break>

    }<pos:position pos:line="42" pos:column="6"/></block></switch>
    <return pos:line="43" pos:column="5">return <expr><name pos:line="43" pos:column="12">want<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
