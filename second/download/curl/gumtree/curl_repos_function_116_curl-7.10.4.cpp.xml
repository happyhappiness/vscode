<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_116_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_readwrite<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">connectdata<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conn<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="2" pos:column="25">bool<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">done<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_transfer_keeper<pos:position pos:line="4" pos:column="30"/></name></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">k<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><operator pos:line="4" pos:column="36">&amp;<pos:position pos:line="4" pos:column="41"/></operator><name><name pos:line="4" pos:column="37">conn<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">keep<pos:position pos:line="4" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SessionHandle<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">data<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name><name pos:line="5" pos:column="32">conn<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">data<pos:position pos:line="5" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">result<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">ssize_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">nread<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt> <comment type="block" pos:line="7" pos:column="18">/* number of bytes read */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">didwhat<pos:position pos:line="8" pos:column="14"/></name><init pos:line="8" pos:column="14">=<expr><literal type="number" pos:line="8" pos:column="15">0<pos:position pos:line="8" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
  
  <comment type="block" pos:line="10" pos:column="3">/* These two are used only if no other select() or _fdset() have been
     invoked before this. This typicly happens if you use the multi interface
     and call curl_multi_perform() without calling curl_multi_fdset()
     first. */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">fd_set<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">extrareadfd<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">fd_set<pos:position pos:line="15" pos:column="9"/></name></type> <name pos:line="15" pos:column="10">extrawritefd<pos:position pos:line="15" pos:column="22"/></name></decl>;<pos:position pos:line="15" pos:column="23"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="17" pos:column="3">fd_set<pos:position pos:line="17" pos:column="9"/></name> <modifier pos:line="17" pos:column="10">*<pos:position pos:line="17" pos:column="11"/></modifier></type><name pos:line="17" pos:column="11">readfdp<pos:position pos:line="17" pos:column="18"/></name> <init pos:line="17" pos:column="19">= <expr><name><name pos:line="17" pos:column="21">k<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">-&gt;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="24">readfdp<pos:position pos:line="17" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="17" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">fd_set<pos:position pos:line="18" pos:column="9"/></name> <modifier pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></modifier></type><name pos:line="18" pos:column="11">writefdp<pos:position pos:line="18" pos:column="19"/></name> <init pos:line="18" pos:column="20">= <expr><name><name pos:line="18" pos:column="22">k<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">writefdp<pos:position pos:line="18" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="34"/></decl_stmt>
  
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><operator pos:line="20" pos:column="6">(<pos:position pos:line="20" pos:column="7"/></operator><name><name pos:line="20" pos:column="7">k<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">-&gt;<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="10">keepon<pos:position pos:line="20" pos:column="16"/></name></name> <operator pos:line="20" pos:column="17">&amp;<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="19">KEEP_READ<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">)<pos:position pos:line="20" pos:column="29"/></operator> <operator pos:line="20" pos:column="30">&amp;&amp;<pos:position pos:line="20" pos:column="40"/></operator> <operator pos:line="20" pos:column="33">!<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">readfdp<pos:position pos:line="20" pos:column="41"/></name></expr>)<pos:position pos:line="20" pos:column="42"/></condition><then pos:line="20" pos:column="42"> <block pos:line="20" pos:column="43">{
    <comment type="block" pos:line="21" pos:column="5">/* reading is requested, but no socket descriptor pointer was set */</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">FD_ZERO<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><operator pos:line="22" pos:column="13">&amp;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="14">extrareadfd<pos:position pos:line="22" pos:column="25"/></name></expr></argument>)<pos:position pos:line="22" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">FD_SET<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name><name pos:line="23" pos:column="12">conn<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">sockfd<pos:position pos:line="23" pos:column="24"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="26">&amp;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="27">extrareadfd<pos:position pos:line="23" pos:column="38"/></name></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">readfdp<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <operator pos:line="24" pos:column="15">&amp;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="16">extrareadfd<pos:position pos:line="24" pos:column="27"/></name></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* no write, no exceptions, no timeout */</comment>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">select<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><name><name pos:line="27" pos:column="12">conn<pos:position pos:line="27" pos:column="16"/></name><operator pos:line="27" pos:column="16">-&gt;<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="18">sockfd<pos:position pos:line="27" pos:column="24"/></name></name><operator pos:line="27" pos:column="24">+<pos:position pos:line="27" pos:column="25"/></operator><literal type="number" pos:line="27" pos:column="25">1<pos:position pos:line="27" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">readfdp<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">NULL<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">NULL<pos:position pos:line="27" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="49">&amp;<pos:position pos:line="27" pos:column="54"/></operator><name pos:line="27" pos:column="50">notimeout<pos:position pos:line="27" pos:column="59"/></name></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="61"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>
  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><operator pos:line="29" pos:column="6">(<pos:position pos:line="29" pos:column="7"/></operator><name><name pos:line="29" pos:column="7">k<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">-&gt;<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="10">keepon<pos:position pos:line="29" pos:column="16"/></name></name> <operator pos:line="29" pos:column="17">&amp;<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="19">KEEP_WRITE<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">)<pos:position pos:line="29" pos:column="30"/></operator> <operator pos:line="29" pos:column="31">&amp;&amp;<pos:position pos:line="29" pos:column="41"/></operator> <operator pos:line="29" pos:column="34">!<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="35">writefdp<pos:position pos:line="29" pos:column="43"/></name></expr>)<pos:position pos:line="29" pos:column="44"/></condition><then pos:line="29" pos:column="44"> <block pos:line="29" pos:column="45">{
    <comment type="block" pos:line="30" pos:column="5">/* writing is requested, but no socket descriptor pointer was set */</comment>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">FD_ZERO<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><operator pos:line="31" pos:column="13">&amp;<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="14">extrawritefd<pos:position pos:line="31" pos:column="26"/></name></expr></argument>)<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">FD_SET<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><name><name pos:line="32" pos:column="12">conn<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">writesockfd<pos:position pos:line="32" pos:column="29"/></name></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="31">&amp;<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="32">extrawritefd<pos:position pos:line="32" pos:column="44"/></name></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">writefdp<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <operator pos:line="33" pos:column="16">&amp;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="17">extrawritefd<pos:position pos:line="33" pos:column="29"/></name></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* no read, no exceptions, no timeout */</comment>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">select<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><name><name pos:line="36" pos:column="12">conn<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">-&gt;<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="18">writesockfd<pos:position pos:line="36" pos:column="29"/></name></name><operator pos:line="36" pos:column="29">+<pos:position pos:line="36" pos:column="30"/></operator><literal type="number" pos:line="36" pos:column="30">1<pos:position pos:line="36" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="33">NULL<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="39">writefdp<pos:position pos:line="36" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">NULL<pos:position pos:line="36" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="55">&amp;<pos:position pos:line="36" pos:column="60"/></operator><name pos:line="36" pos:column="56">notimeout<pos:position pos:line="36" pos:column="65"/></name></expr></argument>)<pos:position pos:line="36" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="67"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <do pos:line="39" pos:column="3">do <block pos:line="39" pos:column="6">{
    <comment type="block" pos:line="40" pos:column="5">/* If we still have reading to do, we check if we have a readable
       socket. Sometimes the reafdp is NULL, it no fd_set was done using
       the multi interface and then we can do nothing but to attempt a
       read to be sure. */</comment>
    <if pos:line="44" pos:column="5">if<condition pos:line="44" pos:column="7">(<expr><operator pos:line="44" pos:column="8">(<pos:position pos:line="44" pos:column="9"/></operator><name><name pos:line="44" pos:column="9">k<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">-&gt;<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="12">keepon<pos:position pos:line="44" pos:column="18"/></name></name> <operator pos:line="44" pos:column="19">&amp;<pos:position pos:line="44" pos:column="24"/></operator> <name pos:line="44" pos:column="21">KEEP_READ<pos:position pos:line="44" pos:column="30"/></name><operator pos:line="44" pos:column="30">)<pos:position pos:line="44" pos:column="31"/></operator> <operator pos:line="44" pos:column="32">&amp;&amp;<pos:position pos:line="44" pos:column="42"/></operator>
       <operator pos:line="45" pos:column="8">(<pos:position pos:line="45" pos:column="9"/></operator><call><name pos:line="45" pos:column="9">FD_ISSET<pos:position pos:line="45" pos:column="17"/></name><argument_list pos:line="45" pos:column="17">(<argument><expr><name><name pos:line="45" pos:column="18">conn<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">-&gt;<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="24">sockfd<pos:position pos:line="45" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="32">readfdp<pos:position pos:line="45" pos:column="39"/></name></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call><operator pos:line="45" pos:column="40">)<pos:position pos:line="45" pos:column="41"/></operator></expr>)<pos:position pos:line="45" pos:column="42"/></condition><then pos:line="45" pos:column="42"> <block pos:line="45" pos:column="43">{

      <decl_stmt><decl><type><name pos:line="47" pos:column="7">bool<pos:position pos:line="47" pos:column="11"/></name></type> <name pos:line="47" pos:column="12">readdone<pos:position pos:line="47" pos:column="20"/></name> <init pos:line="47" pos:column="21">= <expr><name pos:line="47" pos:column="23">TRUE<pos:position pos:line="47" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="47" pos:column="28"/></decl_stmt>

      <comment type="block" pos:line="49" pos:column="7">/* This is where we loop until we have read everything there is to
         read or we get a EWOULDBLOCK */</comment>
      <do pos:line="51" pos:column="7">do <block pos:line="51" pos:column="10">{
        <decl_stmt><decl><type><name pos:line="52" pos:column="9">int<pos:position pos:line="52" pos:column="12"/></name></type> <name pos:line="52" pos:column="13">buffersize<pos:position pos:line="52" pos:column="23"/></name> <init pos:line="52" pos:column="24">= <expr><ternary><condition><expr><name><name pos:line="52" pos:column="26">data<pos:position pos:line="52" pos:column="30"/></name><operator pos:line="52" pos:column="30">-&gt;<pos:position pos:line="52" pos:column="35"/></operator><name pos:line="52" pos:column="32">set<pos:position pos:line="52" pos:column="35"/></name><operator pos:line="52" pos:column="35">.<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="36">buffer_size<pos:position pos:line="52" pos:column="47"/></name></name></expr>?<pos:position pos:line="52" pos:column="48"/></condition><then pos:line="52" pos:column="48">
          <expr><name><name pos:line="53" pos:column="11">data<pos:position pos:line="53" pos:column="15"/></name><operator pos:line="53" pos:column="15">-&gt;<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="17">set<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">.<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="21">buffer_size<pos:position pos:line="53" pos:column="32"/></name></name></expr></then><else pos:line="53" pos:column="32">:<expr><name pos:line="53" pos:column="33">BUFSIZE<pos:position pos:line="53" pos:column="40"/></name> <operator pos:line="53" pos:column="41">-<pos:position pos:line="53" pos:column="42"/></operator><literal type="number" pos:line="53" pos:column="42">1<pos:position pos:line="53" pos:column="43"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="53" pos:column="44"/></decl_stmt>

        <comment type="block" pos:line="55" pos:column="9">/* receive data from the network! */</comment>
        <expr_stmt><expr><name pos:line="56" pos:column="9">result<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <call><name pos:line="56" pos:column="18">Curl_read<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">conn<pos:position pos:line="56" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="34">conn<pos:position pos:line="56" pos:column="38"/></name><operator pos:line="56" pos:column="38">-&gt;<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="40">sockfd<pos:position pos:line="56" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="48">k<pos:position pos:line="56" pos:column="49"/></name><operator pos:line="56" pos:column="49">-&gt;<pos:position pos:line="56" pos:column="54"/></operator><name pos:line="56" pos:column="51">buf<pos:position pos:line="56" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="56">buffersize<pos:position pos:line="56" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="68">&amp;<pos:position pos:line="56" pos:column="73"/></operator><name pos:line="56" pos:column="69">nread<pos:position pos:line="56" pos:column="74"/></name></expr></argument>)<pos:position pos:line="56" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="76"/></expr_stmt>

        <if pos:line="58" pos:column="9">if<condition pos:line="58" pos:column="11">(<expr><literal type="number" pos:line="58" pos:column="12">0<pos:position pos:line="58" pos:column="13"/></literal><operator pos:line="58" pos:column="13">&gt;<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="14">result<pos:position pos:line="58" pos:column="20"/></name></expr>)<pos:position pos:line="58" pos:column="21"/></condition><then pos:line="58" pos:column="21">
          <block type="pseudo"><break pos:line="59" pos:column="11">break;<pos:position pos:line="59" pos:column="17"/></break></block></then></if> <comment type="block" pos:line="59" pos:column="18">/* get out of loop */</comment>
        <if pos:line="60" pos:column="9">if<condition pos:line="60" pos:column="11">(<expr><name pos:line="60" pos:column="12">result<pos:position pos:line="60" pos:column="18"/></name><operator pos:line="60" pos:column="18">&gt;<pos:position pos:line="60" pos:column="22"/></operator><literal type="number" pos:line="60" pos:column="19">0<pos:position pos:line="60" pos:column="20"/></literal></expr>)<pos:position pos:line="60" pos:column="21"/></condition><then pos:line="60" pos:column="21">
          <block type="pseudo"><return pos:line="61" pos:column="11">return <expr><name pos:line="61" pos:column="18">result<pos:position pos:line="61" pos:column="24"/></name></expr>;<pos:position pos:line="61" pos:column="25"/></return></block></then></if>

        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><operator pos:line="63" pos:column="13">(<pos:position pos:line="63" pos:column="14"/></operator><name><name pos:line="63" pos:column="14">k<pos:position pos:line="63" pos:column="15"/></name><operator pos:line="63" pos:column="15">-&gt;<pos:position pos:line="63" pos:column="20"/></operator><name pos:line="63" pos:column="17">bytecount<pos:position pos:line="63" pos:column="26"/></name></name> <operator pos:line="63" pos:column="27">==<pos:position pos:line="63" pos:column="29"/></operator> <literal type="number" pos:line="63" pos:column="30">0<pos:position pos:line="63" pos:column="31"/></literal><operator pos:line="63" pos:column="31">)<pos:position pos:line="63" pos:column="32"/></operator> <operator pos:line="63" pos:column="33">&amp;&amp;<pos:position pos:line="63" pos:column="43"/></operator> <operator pos:line="63" pos:column="36">(<pos:position pos:line="63" pos:column="37"/></operator><name><name pos:line="63" pos:column="37">k<pos:position pos:line="63" pos:column="38"/></name><operator pos:line="63" pos:column="38">-&gt;<pos:position pos:line="63" pos:column="43"/></operator><name pos:line="63" pos:column="40">writebytecount<pos:position pos:line="63" pos:column="54"/></name></name> <operator pos:line="63" pos:column="55">==<pos:position pos:line="63" pos:column="57"/></operator> <literal type="number" pos:line="63" pos:column="58">0<pos:position pos:line="63" pos:column="59"/></literal><operator pos:line="63" pos:column="59">)<pos:position pos:line="63" pos:column="60"/></operator></expr>)<pos:position pos:line="63" pos:column="61"/></condition><then pos:line="63" pos:column="61"> <block pos:line="63" pos:column="62">{
          <expr_stmt><expr><call><name pos:line="64" pos:column="11">Curl_pgrsTime<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">data<pos:position pos:line="64" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="31">TIMER_STARTTRANSFER<pos:position pos:line="64" pos:column="50"/></name></expr></argument>)<pos:position pos:line="64" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="52"/></expr_stmt>
          <if pos:line="65" pos:column="11">if<condition pos:line="65" pos:column="13">(<expr><name><name pos:line="65" pos:column="14">k<pos:position pos:line="65" pos:column="15"/></name><operator pos:line="65" pos:column="15">-&gt;<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="17">wait100_after_headers<pos:position pos:line="65" pos:column="38"/></name></name></expr>)<pos:position pos:line="65" pos:column="39"/></condition><then pos:line="65" pos:column="39">
            <comment type="block" pos:line="66" pos:column="13">/* set time stamp to compare with when waiting for the 100 */</comment>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="67" pos:column="13">k<pos:position pos:line="67" pos:column="14"/></name><operator pos:line="67" pos:column="14">-&gt;<pos:position pos:line="67" pos:column="19"/></operator><name pos:line="67" pos:column="16">start100<pos:position pos:line="67" pos:column="24"/></name></name> <operator pos:line="67" pos:column="25">=<pos:position pos:line="67" pos:column="26"/></operator> <call><name pos:line="67" pos:column="27">Curl_tvnow<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">()<pos:position pos:line="67" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt></block></then></if>
        }<pos:position pos:line="68" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="70" pos:column="9">didwhat<pos:position pos:line="70" pos:column="16"/></name> <operator pos:line="70" pos:column="17">|=<pos:position pos:line="70" pos:column="19"/></operator> <name pos:line="70" pos:column="20">KEEP_READ<pos:position pos:line="70" pos:column="29"/></name></expr>;<pos:position pos:line="70" pos:column="30"/></expr_stmt>

        <comment type="block" pos:line="72" pos:column="9">/* NULL terminate, allowing string ops to be used */</comment>
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><literal type="number" pos:line="73" pos:column="13">0<pos:position pos:line="73" pos:column="14"/></literal> <operator pos:line="73" pos:column="15">&lt;<pos:position pos:line="73" pos:column="19"/></operator> <name pos:line="73" pos:column="17">nread<pos:position pos:line="73" pos:column="22"/></name></expr>)<pos:position pos:line="73" pos:column="23"/></condition><then pos:line="73" pos:column="23">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="11">k<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">-&gt;<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="14">buf<pos:position pos:line="74" pos:column="17"/></name><index pos:line="74" pos:column="17">[<expr><name pos:line="74" pos:column="18">nread<pos:position pos:line="74" pos:column="23"/></name></expr>]<pos:position pos:line="74" pos:column="24"/></index></name> <operator pos:line="74" pos:column="25">=<pos:position pos:line="74" pos:column="26"/></operator> <literal type="number" pos:line="74" pos:column="27">0<pos:position pos:line="74" pos:column="28"/></literal></expr>;<pos:position pos:line="74" pos:column="29"/></expr_stmt></block></then>

        <comment type="block" pos:line="76" pos:column="9">/* if we receive 0 or less here, the server closed the connection and
           we bail out from this! */</comment>
        <elseif pos:line="78" pos:column="9">else <if pos:line="78" pos:column="14">if <condition pos:line="78" pos:column="17">(<expr><literal type="number" pos:line="78" pos:column="18">0<pos:position pos:line="78" pos:column="19"/></literal> <operator pos:line="78" pos:column="20">&gt;=<pos:position pos:line="78" pos:column="25"/></operator> <name pos:line="78" pos:column="23">nread<pos:position pos:line="78" pos:column="28"/></name></expr>)<pos:position pos:line="78" pos:column="29"/></condition><then pos:line="78" pos:column="29"> <block pos:line="78" pos:column="30">{
          <expr_stmt><expr><name><name pos:line="79" pos:column="11">k<pos:position pos:line="79" pos:column="12"/></name><operator pos:line="79" pos:column="12">-&gt;<pos:position pos:line="79" pos:column="17"/></operator><name pos:line="79" pos:column="14">keepon<pos:position pos:line="79" pos:column="20"/></name></name> <operator pos:line="79" pos:column="21">&amp;=<pos:position pos:line="79" pos:column="27"/></operator> <operator pos:line="79" pos:column="24">~<pos:position pos:line="79" pos:column="25"/></operator><name pos:line="79" pos:column="25">KEEP_READ<pos:position pos:line="79" pos:column="34"/></name></expr>;<pos:position pos:line="79" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="80" pos:column="11">FD_ZERO<pos:position pos:line="80" pos:column="18"/></name><argument_list pos:line="80" pos:column="18">(<argument><expr><operator pos:line="80" pos:column="19">&amp;<pos:position pos:line="80" pos:column="24"/></operator><name><name pos:line="80" pos:column="20">k<pos:position pos:line="80" pos:column="21"/></name><operator pos:line="80" pos:column="21">-&gt;<pos:position pos:line="80" pos:column="26"/></operator><name pos:line="80" pos:column="23">rkeepfd<pos:position pos:line="80" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="32"/></expr_stmt>
          <expr_stmt><expr><name pos:line="81" pos:column="11">readdone<pos:position pos:line="81" pos:column="19"/></name> <operator pos:line="81" pos:column="20">=<pos:position pos:line="81" pos:column="21"/></operator> <name pos:line="81" pos:column="22">TRUE<pos:position pos:line="81" pos:column="26"/></name></expr>;<pos:position pos:line="81" pos:column="27"/></expr_stmt>
          <break pos:line="82" pos:column="11">break;<pos:position pos:line="82" pos:column="17"/></break>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if></elseif></if>

        <comment type="block" pos:line="85" pos:column="9">/* Default buffer to use when we write the buffer, it may be changed
           in the flow below before the actual storing is done. */</comment>
        <expr_stmt><expr><name><name pos:line="87" pos:column="9">k<pos:position pos:line="87" pos:column="10"/></name><operator pos:line="87" pos:column="10">-&gt;<pos:position pos:line="87" pos:column="15"/></operator><name pos:line="87" pos:column="12">str<pos:position pos:line="87" pos:column="15"/></name></name> <operator pos:line="87" pos:column="16">=<pos:position pos:line="87" pos:column="17"/></operator> <name><name pos:line="87" pos:column="18">k<pos:position pos:line="87" pos:column="19"/></name><operator pos:line="87" pos:column="19">-&gt;<pos:position pos:line="87" pos:column="24"/></operator><name pos:line="87" pos:column="21">buf<pos:position pos:line="87" pos:column="24"/></name></name></expr>;<pos:position pos:line="87" pos:column="25"/></expr_stmt>

        <comment type="block" pos:line="89" pos:column="9">/* Since this is a two-state thing, we check if we are parsing
           headers at the moment or not. */</comment>          
        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name><name pos:line="91" pos:column="13">k<pos:position pos:line="91" pos:column="14"/></name><operator pos:line="91" pos:column="14">-&gt;<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="16">header<pos:position pos:line="91" pos:column="22"/></name></name></expr>)<pos:position pos:line="91" pos:column="23"/></condition><then pos:line="91" pos:column="23"> <block pos:line="91" pos:column="24">{
          <comment type="block" pos:line="92" pos:column="11">/* we are in parse-the-header-mode */</comment>
          <decl_stmt><decl><type><name pos:line="93" pos:column="11">bool<pos:position pos:line="93" pos:column="15"/></name></type> <name pos:line="93" pos:column="16">stop_reading<pos:position pos:line="93" pos:column="28"/></name> <init pos:line="93" pos:column="29">= <expr><name pos:line="93" pos:column="31">FALSE<pos:position pos:line="93" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="93" pos:column="37"/></decl_stmt>

          <comment type="block" pos:line="95" pos:column="11">/* header line within buffer loop */</comment>
          <do pos:line="96" pos:column="11">do <block pos:line="96" pos:column="14">{
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">int<pos:position pos:line="97" pos:column="16"/></name></type> <name pos:line="97" pos:column="17">hbufp_index<pos:position pos:line="97" pos:column="28"/></name></decl>;<pos:position pos:line="97" pos:column="29"/></decl_stmt>
              
            <comment type="block" pos:line="99" pos:column="13">/* str_start is start of line within buf */</comment>
            <expr_stmt><expr><name><name pos:line="100" pos:column="13">k<pos:position pos:line="100" pos:column="14"/></name><operator pos:line="100" pos:column="14">-&gt;<pos:position pos:line="100" pos:column="19"/></operator><name pos:line="100" pos:column="16">str_start<pos:position pos:line="100" pos:column="25"/></name></name> <operator pos:line="100" pos:column="26">=<pos:position pos:line="100" pos:column="27"/></operator> <name><name pos:line="100" pos:column="28">k<pos:position pos:line="100" pos:column="29"/></name><operator pos:line="100" pos:column="29">-&gt;<pos:position pos:line="100" pos:column="34"/></operator><name pos:line="100" pos:column="31">str<pos:position pos:line="100" pos:column="34"/></name></name></expr>;<pos:position pos:line="100" pos:column="35"/></expr_stmt>
              
            <expr_stmt><expr><name><name pos:line="102" pos:column="13">k<pos:position pos:line="102" pos:column="14"/></name><operator pos:line="102" pos:column="14">-&gt;<pos:position pos:line="102" pos:column="19"/></operator><name pos:line="102" pos:column="16">end_ptr<pos:position pos:line="102" pos:column="23"/></name></name> <operator pos:line="102" pos:column="24">=<pos:position pos:line="102" pos:column="25"/></operator> <call><name pos:line="102" pos:column="26">strchr<pos:position pos:line="102" pos:column="32"/></name> <argument_list pos:line="102" pos:column="33">(<argument><expr><name><name pos:line="102" pos:column="34">k<pos:position pos:line="102" pos:column="35"/></name><operator pos:line="102" pos:column="35">-&gt;<pos:position pos:line="102" pos:column="40"/></operator><name pos:line="102" pos:column="37">str_start<pos:position pos:line="102" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="102" pos:column="48">'\n'<pos:position pos:line="102" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="54"/></expr_stmt>
              
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><operator pos:line="104" pos:column="17">!<pos:position pos:line="104" pos:column="18"/></operator><name><name pos:line="104" pos:column="18">k<pos:position pos:line="104" pos:column="19"/></name><operator pos:line="104" pos:column="19">-&gt;<pos:position pos:line="104" pos:column="24"/></operator><name pos:line="104" pos:column="21">end_ptr<pos:position pos:line="104" pos:column="28"/></name></name></expr>)<pos:position pos:line="104" pos:column="29"/></condition><then pos:line="104" pos:column="29"> <block pos:line="104" pos:column="30">{
              <comment type="block" pos:line="105" pos:column="15">/* Not a complete header line within buffer, append the data to
                 the end of the headerbuff. */</comment>

              <if pos:line="108" pos:column="15">if <condition pos:line="108" pos:column="18">(<expr><name><name pos:line="108" pos:column="19">k<pos:position pos:line="108" pos:column="20"/></name><operator pos:line="108" pos:column="20">-&gt;<pos:position pos:line="108" pos:column="25"/></operator><name pos:line="108" pos:column="22">hbuflen<pos:position pos:line="108" pos:column="29"/></name></name> <operator pos:line="108" pos:column="30">+<pos:position pos:line="108" pos:column="31"/></operator> <name pos:line="108" pos:column="32">nread<pos:position pos:line="108" pos:column="37"/></name> <operator pos:line="108" pos:column="38">&gt;=<pos:position pos:line="108" pos:column="43"/></operator> <name><name pos:line="108" pos:column="41">data<pos:position pos:line="108" pos:column="45"/></name><operator pos:line="108" pos:column="45">-&gt;<pos:position pos:line="108" pos:column="50"/></operator><name pos:line="108" pos:column="47">state<pos:position pos:line="108" pos:column="52"/></name><operator pos:line="108" pos:column="52">.<pos:position pos:line="108" pos:column="53"/></operator><name pos:line="108" pos:column="53">headersize<pos:position pos:line="108" pos:column="63"/></name></name></expr>)<pos:position pos:line="108" pos:column="64"/></condition><then pos:line="108" pos:column="64"> <block pos:line="108" pos:column="65">{
                <comment type="block" pos:line="109" pos:column="17">/* We enlarge the header buffer as it is too small */</comment>
                <decl_stmt><decl><type><name pos:line="110" pos:column="17">char<pos:position pos:line="110" pos:column="21"/></name> <modifier pos:line="110" pos:column="22">*<pos:position pos:line="110" pos:column="23"/></modifier></type><name pos:line="110" pos:column="23">newbuff<pos:position pos:line="110" pos:column="30"/></name></decl>;<pos:position pos:line="110" pos:column="31"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="111" pos:column="17">long<pos:position pos:line="111" pos:column="21"/></name></type> <name pos:line="111" pos:column="22">newsize<pos:position pos:line="111" pos:column="29"/></name><init pos:line="111" pos:column="29">=<expr><call><name pos:line="111" pos:column="30">MAX<pos:position pos:line="111" pos:column="33"/></name><argument_list pos:line="111" pos:column="33">(<argument><expr><operator pos:line="111" pos:column="34">(<pos:position pos:line="111" pos:column="35"/></operator><name><name pos:line="111" pos:column="35">k<pos:position pos:line="111" pos:column="36"/></name><operator pos:line="111" pos:column="36">-&gt;<pos:position pos:line="111" pos:column="41"/></operator><name pos:line="111" pos:column="38">hbuflen<pos:position pos:line="111" pos:column="45"/></name></name><operator pos:line="111" pos:column="45">+<pos:position pos:line="111" pos:column="46"/></operator><name pos:line="111" pos:column="46">nread<pos:position pos:line="111" pos:column="51"/></name><operator pos:line="111" pos:column="51">)<pos:position pos:line="111" pos:column="52"/></operator><operator pos:line="111" pos:column="52">*<pos:position pos:line="111" pos:column="53"/></operator><literal type="number" pos:line="111" pos:column="53">3<pos:position pos:line="111" pos:column="54"/></literal><operator pos:line="111" pos:column="54">/<pos:position pos:line="111" pos:column="55"/></operator><literal type="number" pos:line="111" pos:column="55">2<pos:position pos:line="111" pos:column="56"/></literal></expr></argument>,
                                 <argument><expr><name><name pos:line="112" pos:column="34">data<pos:position pos:line="112" pos:column="38"/></name><operator pos:line="112" pos:column="38">-&gt;<pos:position pos:line="112" pos:column="43"/></operator><name pos:line="112" pos:column="40">state<pos:position pos:line="112" pos:column="45"/></name><operator pos:line="112" pos:column="45">.<pos:position pos:line="112" pos:column="46"/></operator><name pos:line="112" pos:column="46">headersize<pos:position pos:line="112" pos:column="56"/></name></name><operator pos:line="112" pos:column="56">*<pos:position pos:line="112" pos:column="57"/></operator><literal type="number" pos:line="112" pos:column="57">2<pos:position pos:line="112" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="112" pos:column="60"/></decl_stmt>
                <expr_stmt><expr><name pos:line="113" pos:column="17">hbufp_index<pos:position pos:line="113" pos:column="28"/></name> <operator pos:line="113" pos:column="29">=<pos:position pos:line="113" pos:column="30"/></operator> <name><name pos:line="113" pos:column="31">k<pos:position pos:line="113" pos:column="32"/></name><operator pos:line="113" pos:column="32">-&gt;<pos:position pos:line="113" pos:column="37"/></operator><name pos:line="113" pos:column="34">hbufp<pos:position pos:line="113" pos:column="39"/></name></name> <operator pos:line="113" pos:column="40">-<pos:position pos:line="113" pos:column="41"/></operator> <name><name pos:line="113" pos:column="42">data<pos:position pos:line="113" pos:column="46"/></name><operator pos:line="113" pos:column="46">-&gt;<pos:position pos:line="113" pos:column="51"/></operator><name pos:line="113" pos:column="48">state<pos:position pos:line="113" pos:column="53"/></name><operator pos:line="113" pos:column="53">.<pos:position pos:line="113" pos:column="54"/></operator><name pos:line="113" pos:column="54">headerbuff<pos:position pos:line="113" pos:column="64"/></name></name></expr>;<pos:position pos:line="113" pos:column="65"/></expr_stmt>
                <expr_stmt><expr><name pos:line="114" pos:column="17">newbuff<pos:position pos:line="114" pos:column="24"/></name> <operator pos:line="114" pos:column="25">=<pos:position pos:line="114" pos:column="26"/></operator> <operator pos:line="114" pos:column="27">(<pos:position pos:line="114" pos:column="28"/></operator><name pos:line="114" pos:column="28">char<pos:position pos:line="114" pos:column="32"/></name> <operator pos:line="114" pos:column="33">*<pos:position pos:line="114" pos:column="34"/></operator><operator pos:line="114" pos:column="34">)<pos:position pos:line="114" pos:column="35"/></operator><call><name pos:line="114" pos:column="35">realloc<pos:position pos:line="114" pos:column="42"/></name><argument_list pos:line="114" pos:column="42">(<argument><expr><name><name pos:line="114" pos:column="43">data<pos:position pos:line="114" pos:column="47"/></name><operator pos:line="114" pos:column="47">-&gt;<pos:position pos:line="114" pos:column="52"/></operator><name pos:line="114" pos:column="49">state<pos:position pos:line="114" pos:column="54"/></name><operator pos:line="114" pos:column="54">.<pos:position pos:line="114" pos:column="55"/></operator><name pos:line="114" pos:column="55">headerbuff<pos:position pos:line="114" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="67">newsize<pos:position pos:line="114" pos:column="74"/></name></expr></argument>)<pos:position pos:line="114" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="76"/></expr_stmt>
                <if pos:line="115" pos:column="17">if<condition pos:line="115" pos:column="19">(<expr><operator pos:line="115" pos:column="20">!<pos:position pos:line="115" pos:column="21"/></operator><name pos:line="115" pos:column="21">newbuff<pos:position pos:line="115" pos:column="28"/></name></expr>)<pos:position pos:line="115" pos:column="29"/></condition><then pos:line="115" pos:column="29"> <block pos:line="115" pos:column="30">{
                  <expr_stmt><expr><call><name pos:line="116" pos:column="19">failf<pos:position pos:line="116" pos:column="24"/></name> <argument_list pos:line="116" pos:column="25">(<argument><expr><name pos:line="116" pos:column="26">data<pos:position pos:line="116" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="32">"Failed to alloc memory for big header!"<pos:position pos:line="116" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="74"/></expr_stmt>
                  <return pos:line="117" pos:column="19">return <expr><name pos:line="117" pos:column="26">CURLE_OUT_OF_MEMORY<pos:position pos:line="117" pos:column="45"/></name></expr>;<pos:position pos:line="117" pos:column="46"/></return>
                }<pos:position pos:line="118" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name><name pos:line="119" pos:column="17">data<pos:position pos:line="119" pos:column="21"/></name><operator pos:line="119" pos:column="21">-&gt;<pos:position pos:line="119" pos:column="26"/></operator><name pos:line="119" pos:column="23">state<pos:position pos:line="119" pos:column="28"/></name><operator pos:line="119" pos:column="28">.<pos:position pos:line="119" pos:column="29"/></operator><name pos:line="119" pos:column="29">headersize<pos:position pos:line="119" pos:column="39"/></name></name><operator pos:line="119" pos:column="39">=<pos:position pos:line="119" pos:column="40"/></operator><name pos:line="119" pos:column="40">newsize<pos:position pos:line="119" pos:column="47"/></name></expr>;<pos:position pos:line="119" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="120" pos:column="17">data<pos:position pos:line="120" pos:column="21"/></name><operator pos:line="120" pos:column="21">-&gt;<pos:position pos:line="120" pos:column="26"/></operator><name pos:line="120" pos:column="23">state<pos:position pos:line="120" pos:column="28"/></name><operator pos:line="120" pos:column="28">.<pos:position pos:line="120" pos:column="29"/></operator><name pos:line="120" pos:column="29">headerbuff<pos:position pos:line="120" pos:column="39"/></name></name> <operator pos:line="120" pos:column="40">=<pos:position pos:line="120" pos:column="41"/></operator> <name pos:line="120" pos:column="42">newbuff<pos:position pos:line="120" pos:column="49"/></name></expr>;<pos:position pos:line="120" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="121" pos:column="17">k<pos:position pos:line="121" pos:column="18"/></name><operator pos:line="121" pos:column="18">-&gt;<pos:position pos:line="121" pos:column="23"/></operator><name pos:line="121" pos:column="20">hbufp<pos:position pos:line="121" pos:column="25"/></name></name> <operator pos:line="121" pos:column="26">=<pos:position pos:line="121" pos:column="27"/></operator> <name><name pos:line="121" pos:column="28">data<pos:position pos:line="121" pos:column="32"/></name><operator pos:line="121" pos:column="32">-&gt;<pos:position pos:line="121" pos:column="37"/></operator><name pos:line="121" pos:column="34">state<pos:position pos:line="121" pos:column="39"/></name><operator pos:line="121" pos:column="39">.<pos:position pos:line="121" pos:column="40"/></operator><name pos:line="121" pos:column="40">headerbuff<pos:position pos:line="121" pos:column="50"/></name></name> <operator pos:line="121" pos:column="51">+<pos:position pos:line="121" pos:column="52"/></operator> <name pos:line="121" pos:column="53">hbufp_index<pos:position pos:line="121" pos:column="64"/></name></expr>;<pos:position pos:line="121" pos:column="65"/></expr_stmt>
              }<pos:position pos:line="122" pos:column="16"/></block></then></if>
              <expr_stmt><expr><call><name pos:line="123" pos:column="15">memcpy<pos:position pos:line="123" pos:column="21"/></name><argument_list pos:line="123" pos:column="21">(<argument><expr><name><name pos:line="123" pos:column="22">k<pos:position pos:line="123" pos:column="23"/></name><operator pos:line="123" pos:column="23">-&gt;<pos:position pos:line="123" pos:column="28"/></operator><name pos:line="123" pos:column="25">hbufp<pos:position pos:line="123" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="32">k<pos:position pos:line="123" pos:column="33"/></name><operator pos:line="123" pos:column="33">-&gt;<pos:position pos:line="123" pos:column="38"/></operator><name pos:line="123" pos:column="35">str<pos:position pos:line="123" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="40">nread<pos:position pos:line="123" pos:column="45"/></name></expr></argument>)<pos:position pos:line="123" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="47"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="124" pos:column="15">k<pos:position pos:line="124" pos:column="16"/></name><operator pos:line="124" pos:column="16">-&gt;<pos:position pos:line="124" pos:column="21"/></operator><name pos:line="124" pos:column="18">hbufp<pos:position pos:line="124" pos:column="23"/></name></name> <operator pos:line="124" pos:column="24">+=<pos:position pos:line="124" pos:column="26"/></operator> <name pos:line="124" pos:column="27">nread<pos:position pos:line="124" pos:column="32"/></name></expr>;<pos:position pos:line="124" pos:column="33"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="125" pos:column="15">k<pos:position pos:line="125" pos:column="16"/></name><operator pos:line="125" pos:column="16">-&gt;<pos:position pos:line="125" pos:column="21"/></operator><name pos:line="125" pos:column="18">hbuflen<pos:position pos:line="125" pos:column="25"/></name></name> <operator pos:line="125" pos:column="26">+=<pos:position pos:line="125" pos:column="28"/></operator> <name pos:line="125" pos:column="29">nread<pos:position pos:line="125" pos:column="34"/></name></expr>;<pos:position pos:line="125" pos:column="35"/></expr_stmt>
              <if pos:line="126" pos:column="15">if <condition pos:line="126" pos:column="18">(<expr><operator pos:line="126" pos:column="19">!<pos:position pos:line="126" pos:column="20"/></operator><name><name pos:line="126" pos:column="20">k<pos:position pos:line="126" pos:column="21"/></name><operator pos:line="126" pos:column="21">-&gt;<pos:position pos:line="126" pos:column="26"/></operator><name pos:line="126" pos:column="23">headerline<pos:position pos:line="126" pos:column="33"/></name></name> <operator pos:line="126" pos:column="34">&amp;&amp;<pos:position pos:line="126" pos:column="44"/></operator> <operator pos:line="126" pos:column="37">(<pos:position pos:line="126" pos:column="38"/></operator><name><name pos:line="126" pos:column="38">k<pos:position pos:line="126" pos:column="39"/></name><operator pos:line="126" pos:column="39">-&gt;<pos:position pos:line="126" pos:column="44"/></operator><name pos:line="126" pos:column="41">hbuflen<pos:position pos:line="126" pos:column="48"/></name></name><operator pos:line="126" pos:column="48">&gt;<pos:position pos:line="126" pos:column="52"/></operator><literal type="number" pos:line="126" pos:column="49">5<pos:position pos:line="126" pos:column="50"/></literal><operator pos:line="126" pos:column="50">)<pos:position pos:line="126" pos:column="51"/></operator></expr>)<pos:position pos:line="126" pos:column="52"/></condition><then pos:line="126" pos:column="52"> <block pos:line="126" pos:column="53">{
                <comment type="block" pos:line="127" pos:column="17">/* make a first check that this looks like a HTTP header */</comment>
                <if pos:line="128" pos:column="17">if<condition pos:line="128" pos:column="19">(<expr><operator pos:line="128" pos:column="20">!<pos:position pos:line="128" pos:column="21"/></operator><call><name pos:line="128" pos:column="21">checkhttpprefix<pos:position pos:line="128" pos:column="36"/></name><argument_list pos:line="128" pos:column="36">(<argument><expr><name pos:line="128" pos:column="37">data<pos:position pos:line="128" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="43">data<pos:position pos:line="128" pos:column="47"/></name><operator pos:line="128" pos:column="47">-&gt;<pos:position pos:line="128" pos:column="52"/></operator><name pos:line="128" pos:column="49">state<pos:position pos:line="128" pos:column="54"/></name><operator pos:line="128" pos:column="54">.<pos:position pos:line="128" pos:column="55"/></operator><name pos:line="128" pos:column="55">headerbuff<pos:position pos:line="128" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="128" pos:column="67"/></condition><then pos:line="128" pos:column="67"> <block pos:line="128" pos:column="68">{
                  <comment type="block" pos:line="129" pos:column="19">/* this is not the beginning of a HTTP first header line */</comment>
                  <expr_stmt><expr><name><name pos:line="130" pos:column="19">k<pos:position pos:line="130" pos:column="20"/></name><operator pos:line="130" pos:column="20">-&gt;<pos:position pos:line="130" pos:column="25"/></operator><name pos:line="130" pos:column="22">header<pos:position pos:line="130" pos:column="28"/></name></name> <operator pos:line="130" pos:column="29">=<pos:position pos:line="130" pos:column="30"/></operator> <name pos:line="130" pos:column="31">FALSE<pos:position pos:line="130" pos:column="36"/></name></expr>;<pos:position pos:line="130" pos:column="37"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="131" pos:column="19">k<pos:position pos:line="131" pos:column="20"/></name><operator pos:line="131" pos:column="20">-&gt;<pos:position pos:line="131" pos:column="25"/></operator><name pos:line="131" pos:column="22">badheader<pos:position pos:line="131" pos:column="31"/></name></name> <operator pos:line="131" pos:column="32">=<pos:position pos:line="131" pos:column="33"/></operator> <name pos:line="131" pos:column="34">HEADER_ALLBAD<pos:position pos:line="131" pos:column="47"/></name></expr>;<pos:position pos:line="131" pos:column="48"/></expr_stmt>
                  <break pos:line="132" pos:column="19">break;<pos:position pos:line="132" pos:column="25"/></break>
                }<pos:position pos:line="133" pos:column="18"/></block></then></if>
              }<pos:position pos:line="134" pos:column="16"/></block></then></if>

              <break pos:line="136" pos:column="15">break;<pos:position pos:line="136" pos:column="21"/></break> <comment type="block" pos:line="136" pos:column="22">/* read more and try again */</comment>
            }<pos:position pos:line="137" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="139" pos:column="13">/* decrease the size of the remaining buffer */</comment>
            <expr_stmt><expr><name pos:line="140" pos:column="13">nread<pos:position pos:line="140" pos:column="18"/></name> <operator pos:line="140" pos:column="19">-=<pos:position pos:line="140" pos:column="21"/></operator> <operator pos:line="140" pos:column="22">(<pos:position pos:line="140" pos:column="23"/></operator><name><name pos:line="140" pos:column="23">k<pos:position pos:line="140" pos:column="24"/></name><operator pos:line="140" pos:column="24">-&gt;<pos:position pos:line="140" pos:column="29"/></operator><name pos:line="140" pos:column="26">end_ptr<pos:position pos:line="140" pos:column="33"/></name></name> <operator pos:line="140" pos:column="34">-<pos:position pos:line="140" pos:column="35"/></operator> <name><name pos:line="140" pos:column="36">k<pos:position pos:line="140" pos:column="37"/></name><operator pos:line="140" pos:column="37">-&gt;<pos:position pos:line="140" pos:column="42"/></operator><name pos:line="140" pos:column="39">str<pos:position pos:line="140" pos:column="42"/></name></name><operator pos:line="140" pos:column="42">)<pos:position pos:line="140" pos:column="43"/></operator><operator pos:line="140" pos:column="43">+<pos:position pos:line="140" pos:column="44"/></operator><literal type="number" pos:line="140" pos:column="44">1<pos:position pos:line="140" pos:column="45"/></literal></expr>;<pos:position pos:line="140" pos:column="46"/></expr_stmt> 

            <expr_stmt><expr><name><name pos:line="142" pos:column="13">k<pos:position pos:line="142" pos:column="14"/></name><operator pos:line="142" pos:column="14">-&gt;<pos:position pos:line="142" pos:column="19"/></operator><name pos:line="142" pos:column="16">str<pos:position pos:line="142" pos:column="19"/></name></name> <operator pos:line="142" pos:column="20">=<pos:position pos:line="142" pos:column="21"/></operator> <name><name pos:line="142" pos:column="22">k<pos:position pos:line="142" pos:column="23"/></name><operator pos:line="142" pos:column="23">-&gt;<pos:position pos:line="142" pos:column="28"/></operator><name pos:line="142" pos:column="25">end_ptr<pos:position pos:line="142" pos:column="32"/></name></name> <operator pos:line="142" pos:column="33">+<pos:position pos:line="142" pos:column="34"/></operator> <literal type="number" pos:line="142" pos:column="35">1<pos:position pos:line="142" pos:column="36"/></literal></expr>;<pos:position pos:line="142" pos:column="37"/></expr_stmt> <comment type="block" pos:line="142" pos:column="38">/* move past new line */</comment>

            <comment type="block" pos:line="144" pos:column="13">/*
             * We're about to copy a chunk of data to the end of the
             * already received header. We make sure that the full string
             * fit in the allocated header buffer, or else we enlarge 
             * it.
             */</comment>
            <if pos:line="150" pos:column="13">if <condition pos:line="150" pos:column="16">(<expr><name><name pos:line="150" pos:column="17">k<pos:position pos:line="150" pos:column="18"/></name><operator pos:line="150" pos:column="18">-&gt;<pos:position pos:line="150" pos:column="23"/></operator><name pos:line="150" pos:column="20">hbuflen<pos:position pos:line="150" pos:column="27"/></name></name> <operator pos:line="150" pos:column="28">+<pos:position pos:line="150" pos:column="29"/></operator> <operator pos:line="150" pos:column="30">(<pos:position pos:line="150" pos:column="31"/></operator><name><name pos:line="150" pos:column="31">k<pos:position pos:line="150" pos:column="32"/></name><operator pos:line="150" pos:column="32">-&gt;<pos:position pos:line="150" pos:column="37"/></operator><name pos:line="150" pos:column="34">str<pos:position pos:line="150" pos:column="37"/></name></name> <operator pos:line="150" pos:column="38">-<pos:position pos:line="150" pos:column="39"/></operator> <name><name pos:line="150" pos:column="40">k<pos:position pos:line="150" pos:column="41"/></name><operator pos:line="150" pos:column="41">-&gt;<pos:position pos:line="150" pos:column="46"/></operator><name pos:line="150" pos:column="43">str_start<pos:position pos:line="150" pos:column="52"/></name></name><operator pos:line="150" pos:column="52">)<pos:position pos:line="150" pos:column="53"/></operator> <operator pos:line="150" pos:column="54">&gt;=<pos:position pos:line="150" pos:column="59"/></operator>
                <name><name pos:line="151" pos:column="17">data<pos:position pos:line="151" pos:column="21"/></name><operator pos:line="151" pos:column="21">-&gt;<pos:position pos:line="151" pos:column="26"/></operator><name pos:line="151" pos:column="23">state<pos:position pos:line="151" pos:column="28"/></name><operator pos:line="151" pos:column="28">.<pos:position pos:line="151" pos:column="29"/></operator><name pos:line="151" pos:column="29">headersize<pos:position pos:line="151" pos:column="39"/></name></name></expr>)<pos:position pos:line="151" pos:column="40"/></condition><then pos:line="151" pos:column="40"> <block pos:line="151" pos:column="41">{
              <decl_stmt><decl><type><name pos:line="152" pos:column="15">char<pos:position pos:line="152" pos:column="19"/></name> <modifier pos:line="152" pos:column="20">*<pos:position pos:line="152" pos:column="21"/></modifier></type><name pos:line="152" pos:column="21">newbuff<pos:position pos:line="152" pos:column="28"/></name></decl>;<pos:position pos:line="152" pos:column="29"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="153" pos:column="15">long<pos:position pos:line="153" pos:column="19"/></name></type> <name pos:line="153" pos:column="20">newsize<pos:position pos:line="153" pos:column="27"/></name><init pos:line="153" pos:column="27">=<expr><call><name pos:line="153" pos:column="28">MAX<pos:position pos:line="153" pos:column="31"/></name><argument_list pos:line="153" pos:column="31">(<argument><expr><operator pos:line="153" pos:column="32">(<pos:position pos:line="153" pos:column="33"/></operator><name><name pos:line="153" pos:column="33">k<pos:position pos:line="153" pos:column="34"/></name><operator pos:line="153" pos:column="34">-&gt;<pos:position pos:line="153" pos:column="39"/></operator><name pos:line="153" pos:column="36">hbuflen<pos:position pos:line="153" pos:column="43"/></name></name><operator pos:line="153" pos:column="43">+<pos:position pos:line="153" pos:column="44"/></operator>
                                <operator pos:line="154" pos:column="33">(<pos:position pos:line="154" pos:column="34"/></operator><name><name pos:line="154" pos:column="34">k<pos:position pos:line="154" pos:column="35"/></name><operator pos:line="154" pos:column="35">-&gt;<pos:position pos:line="154" pos:column="40"/></operator><name pos:line="154" pos:column="37">str<pos:position pos:line="154" pos:column="40"/></name></name><operator pos:line="154" pos:column="40">-<pos:position pos:line="154" pos:column="41"/></operator><name><name pos:line="154" pos:column="41">k<pos:position pos:line="154" pos:column="42"/></name><operator pos:line="154" pos:column="42">-&gt;<pos:position pos:line="154" pos:column="47"/></operator><name pos:line="154" pos:column="44">str_start<pos:position pos:line="154" pos:column="53"/></name></name><operator pos:line="154" pos:column="53">)<pos:position pos:line="154" pos:column="54"/></operator><operator pos:line="154" pos:column="54">)<pos:position pos:line="154" pos:column="55"/></operator><operator pos:line="154" pos:column="55">*<pos:position pos:line="154" pos:column="56"/></operator><literal type="number" pos:line="154" pos:column="56">3<pos:position pos:line="154" pos:column="57"/></literal><operator pos:line="154" pos:column="57">/<pos:position pos:line="154" pos:column="58"/></operator><literal type="number" pos:line="154" pos:column="58">2<pos:position pos:line="154" pos:column="59"/></literal></expr></argument>,
                               <argument><expr><name><name pos:line="155" pos:column="32">data<pos:position pos:line="155" pos:column="36"/></name><operator pos:line="155" pos:column="36">-&gt;<pos:position pos:line="155" pos:column="41"/></operator><name pos:line="155" pos:column="38">state<pos:position pos:line="155" pos:column="43"/></name><operator pos:line="155" pos:column="43">.<pos:position pos:line="155" pos:column="44"/></operator><name pos:line="155" pos:column="44">headersize<pos:position pos:line="155" pos:column="54"/></name></name><operator pos:line="155" pos:column="54">*<pos:position pos:line="155" pos:column="55"/></operator><literal type="number" pos:line="155" pos:column="55">2<pos:position pos:line="155" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="155" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="155" pos:column="58"/></decl_stmt>
              <expr_stmt><expr><name pos:line="156" pos:column="15">hbufp_index<pos:position pos:line="156" pos:column="26"/></name> <operator pos:line="156" pos:column="27">=<pos:position pos:line="156" pos:column="28"/></operator> <name><name pos:line="156" pos:column="29">k<pos:position pos:line="156" pos:column="30"/></name><operator pos:line="156" pos:column="30">-&gt;<pos:position pos:line="156" pos:column="35"/></operator><name pos:line="156" pos:column="32">hbufp<pos:position pos:line="156" pos:column="37"/></name></name> <operator pos:line="156" pos:column="38">-<pos:position pos:line="156" pos:column="39"/></operator> <name><name pos:line="156" pos:column="40">data<pos:position pos:line="156" pos:column="44"/></name><operator pos:line="156" pos:column="44">-&gt;<pos:position pos:line="156" pos:column="49"/></operator><name pos:line="156" pos:column="46">state<pos:position pos:line="156" pos:column="51"/></name><operator pos:line="156" pos:column="51">.<pos:position pos:line="156" pos:column="52"/></operator><name pos:line="156" pos:column="52">headerbuff<pos:position pos:line="156" pos:column="62"/></name></name></expr>;<pos:position pos:line="156" pos:column="63"/></expr_stmt>
              <expr_stmt><expr><name pos:line="157" pos:column="15">newbuff<pos:position pos:line="157" pos:column="22"/></name> <operator pos:line="157" pos:column="23">=<pos:position pos:line="157" pos:column="24"/></operator> <operator pos:line="157" pos:column="25">(<pos:position pos:line="157" pos:column="26"/></operator><name pos:line="157" pos:column="26">char<pos:position pos:line="157" pos:column="30"/></name> <operator pos:line="157" pos:column="31">*<pos:position pos:line="157" pos:column="32"/></operator><operator pos:line="157" pos:column="32">)<pos:position pos:line="157" pos:column="33"/></operator><call><name pos:line="157" pos:column="33">realloc<pos:position pos:line="157" pos:column="40"/></name><argument_list pos:line="157" pos:column="40">(<argument><expr><name><name pos:line="157" pos:column="41">data<pos:position pos:line="157" pos:column="45"/></name><operator pos:line="157" pos:column="45">-&gt;<pos:position pos:line="157" pos:column="50"/></operator><name pos:line="157" pos:column="47">state<pos:position pos:line="157" pos:column="52"/></name><operator pos:line="157" pos:column="52">.<pos:position pos:line="157" pos:column="53"/></operator><name pos:line="157" pos:column="53">headerbuff<pos:position pos:line="157" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="65">newsize<pos:position pos:line="157" pos:column="72"/></name></expr></argument>)<pos:position pos:line="157" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="74"/></expr_stmt>
              <if pos:line="158" pos:column="15">if<condition pos:line="158" pos:column="17">(<expr><operator pos:line="158" pos:column="18">!<pos:position pos:line="158" pos:column="19"/></operator><name pos:line="158" pos:column="19">newbuff<pos:position pos:line="158" pos:column="26"/></name></expr>)<pos:position pos:line="158" pos:column="27"/></condition><then pos:line="158" pos:column="27"> <block pos:line="158" pos:column="28">{
                <expr_stmt><expr><call><name pos:line="159" pos:column="17">failf<pos:position pos:line="159" pos:column="22"/></name> <argument_list pos:line="159" pos:column="23">(<argument><expr><name pos:line="159" pos:column="24">data<pos:position pos:line="159" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="30">"Failed to alloc memory for big header!"<pos:position pos:line="159" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="72"/></expr_stmt>
                <return pos:line="160" pos:column="17">return <expr><name pos:line="160" pos:column="24">CURLE_OUT_OF_MEMORY<pos:position pos:line="160" pos:column="43"/></name></expr>;<pos:position pos:line="160" pos:column="44"/></return>
              }<pos:position pos:line="161" pos:column="16"/></block></then></if>
              <expr_stmt><expr><name><name pos:line="162" pos:column="15">data<pos:position pos:line="162" pos:column="19"/></name><operator pos:line="162" pos:column="19">-&gt;<pos:position pos:line="162" pos:column="24"/></operator><name pos:line="162" pos:column="21">state<pos:position pos:line="162" pos:column="26"/></name><operator pos:line="162" pos:column="26">.<pos:position pos:line="162" pos:column="27"/></operator><name pos:line="162" pos:column="27">headersize<pos:position pos:line="162" pos:column="37"/></name></name><operator pos:line="162" pos:column="37">=<pos:position pos:line="162" pos:column="38"/></operator> <name pos:line="162" pos:column="39">newsize<pos:position pos:line="162" pos:column="46"/></name></expr>;<pos:position pos:line="162" pos:column="47"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="163" pos:column="15">data<pos:position pos:line="163" pos:column="19"/></name><operator pos:line="163" pos:column="19">-&gt;<pos:position pos:line="163" pos:column="24"/></operator><name pos:line="163" pos:column="21">state<pos:position pos:line="163" pos:column="26"/></name><operator pos:line="163" pos:column="26">.<pos:position pos:line="163" pos:column="27"/></operator><name pos:line="163" pos:column="27">headerbuff<pos:position pos:line="163" pos:column="37"/></name></name> <operator pos:line="163" pos:column="38">=<pos:position pos:line="163" pos:column="39"/></operator> <name pos:line="163" pos:column="40">newbuff<pos:position pos:line="163" pos:column="47"/></name></expr>;<pos:position pos:line="163" pos:column="48"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="164" pos:column="15">k<pos:position pos:line="164" pos:column="16"/></name><operator pos:line="164" pos:column="16">-&gt;<pos:position pos:line="164" pos:column="21"/></operator><name pos:line="164" pos:column="18">hbufp<pos:position pos:line="164" pos:column="23"/></name></name> <operator pos:line="164" pos:column="24">=<pos:position pos:line="164" pos:column="25"/></operator> <name><name pos:line="164" pos:column="26">data<pos:position pos:line="164" pos:column="30"/></name><operator pos:line="164" pos:column="30">-&gt;<pos:position pos:line="164" pos:column="35"/></operator><name pos:line="164" pos:column="32">state<pos:position pos:line="164" pos:column="37"/></name><operator pos:line="164" pos:column="37">.<pos:position pos:line="164" pos:column="38"/></operator><name pos:line="164" pos:column="38">headerbuff<pos:position pos:line="164" pos:column="48"/></name></name> <operator pos:line="164" pos:column="49">+<pos:position pos:line="164" pos:column="50"/></operator> <name pos:line="164" pos:column="51">hbufp_index<pos:position pos:line="164" pos:column="62"/></name></expr>;<pos:position pos:line="164" pos:column="63"/></expr_stmt>
            }<pos:position pos:line="165" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="167" pos:column="13">/* copy to end of line */</comment>
            <expr_stmt><expr><call><name pos:line="168" pos:column="13">strncpy<pos:position pos:line="168" pos:column="20"/></name> <argument_list pos:line="168" pos:column="21">(<argument><expr><name><name pos:line="168" pos:column="22">k<pos:position pos:line="168" pos:column="23"/></name><operator pos:line="168" pos:column="23">-&gt;<pos:position pos:line="168" pos:column="28"/></operator><name pos:line="168" pos:column="25">hbufp<pos:position pos:line="168" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="32">k<pos:position pos:line="168" pos:column="33"/></name><operator pos:line="168" pos:column="33">-&gt;<pos:position pos:line="168" pos:column="38"/></operator><name pos:line="168" pos:column="35">str_start<pos:position pos:line="168" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="46">k<pos:position pos:line="168" pos:column="47"/></name><operator pos:line="168" pos:column="47">-&gt;<pos:position pos:line="168" pos:column="52"/></operator><name pos:line="168" pos:column="49">str<pos:position pos:line="168" pos:column="52"/></name></name> <operator pos:line="168" pos:column="53">-<pos:position pos:line="168" pos:column="54"/></operator> <name><name pos:line="168" pos:column="55">k<pos:position pos:line="168" pos:column="56"/></name><operator pos:line="168" pos:column="56">-&gt;<pos:position pos:line="168" pos:column="61"/></operator><name pos:line="168" pos:column="58">str_start<pos:position pos:line="168" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="168" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="169" pos:column="13">k<pos:position pos:line="169" pos:column="14"/></name><operator pos:line="169" pos:column="14">-&gt;<pos:position pos:line="169" pos:column="19"/></operator><name pos:line="169" pos:column="16">hbufp<pos:position pos:line="169" pos:column="21"/></name></name> <operator pos:line="169" pos:column="22">+=<pos:position pos:line="169" pos:column="24"/></operator> <name><name pos:line="169" pos:column="25">k<pos:position pos:line="169" pos:column="26"/></name><operator pos:line="169" pos:column="26">-&gt;<pos:position pos:line="169" pos:column="31"/></operator><name pos:line="169" pos:column="28">str<pos:position pos:line="169" pos:column="31"/></name></name> <operator pos:line="169" pos:column="32">-<pos:position pos:line="169" pos:column="33"/></operator> <name><name pos:line="169" pos:column="34">k<pos:position pos:line="169" pos:column="35"/></name><operator pos:line="169" pos:column="35">-&gt;<pos:position pos:line="169" pos:column="40"/></operator><name pos:line="169" pos:column="37">str_start<pos:position pos:line="169" pos:column="46"/></name></name></expr>;<pos:position pos:line="169" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="170" pos:column="13">k<pos:position pos:line="170" pos:column="14"/></name><operator pos:line="170" pos:column="14">-&gt;<pos:position pos:line="170" pos:column="19"/></operator><name pos:line="170" pos:column="16">hbuflen<pos:position pos:line="170" pos:column="23"/></name></name> <operator pos:line="170" pos:column="24">+=<pos:position pos:line="170" pos:column="26"/></operator> <name><name pos:line="170" pos:column="27">k<pos:position pos:line="170" pos:column="28"/></name><operator pos:line="170" pos:column="28">-&gt;<pos:position pos:line="170" pos:column="33"/></operator><name pos:line="170" pos:column="30">str<pos:position pos:line="170" pos:column="33"/></name></name> <operator pos:line="170" pos:column="34">-<pos:position pos:line="170" pos:column="35"/></operator> <name><name pos:line="170" pos:column="36">k<pos:position pos:line="170" pos:column="37"/></name><operator pos:line="170" pos:column="37">-&gt;<pos:position pos:line="170" pos:column="42"/></operator><name pos:line="170" pos:column="39">str_start<pos:position pos:line="170" pos:column="48"/></name></name></expr>;<pos:position pos:line="170" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="171" pos:column="13">*<pos:position pos:line="171" pos:column="14"/></operator><name><name pos:line="171" pos:column="14">k<pos:position pos:line="171" pos:column="15"/></name><operator pos:line="171" pos:column="15">-&gt;<pos:position pos:line="171" pos:column="20"/></operator><name pos:line="171" pos:column="17">hbufp<pos:position pos:line="171" pos:column="22"/></name></name> <operator pos:line="171" pos:column="23">=<pos:position pos:line="171" pos:column="24"/></operator> <literal type="number" pos:line="171" pos:column="25">0<pos:position pos:line="171" pos:column="26"/></literal></expr>;<pos:position pos:line="171" pos:column="27"/></expr_stmt>
              
            <expr_stmt><expr><name><name pos:line="173" pos:column="13">k<pos:position pos:line="173" pos:column="14"/></name><operator pos:line="173" pos:column="14">-&gt;<pos:position pos:line="173" pos:column="19"/></operator><name pos:line="173" pos:column="16">p<pos:position pos:line="173" pos:column="17"/></name></name> <operator pos:line="173" pos:column="18">=<pos:position pos:line="173" pos:column="19"/></operator> <name><name pos:line="173" pos:column="20">data<pos:position pos:line="173" pos:column="24"/></name><operator pos:line="173" pos:column="24">-&gt;<pos:position pos:line="173" pos:column="29"/></operator><name pos:line="173" pos:column="26">state<pos:position pos:line="173" pos:column="31"/></name><operator pos:line="173" pos:column="31">.<pos:position pos:line="173" pos:column="32"/></operator><name pos:line="173" pos:column="32">headerbuff<pos:position pos:line="173" pos:column="42"/></name></name></expr>;<pos:position pos:line="173" pos:column="43"/></expr_stmt>
              
            <comment type="block" format="doxygen" pos:line="175" pos:column="13">/****
             * We now have a FULL header line that p points to
             *****/</comment>

            <if pos:line="179" pos:column="13">if<condition pos:line="179" pos:column="15">(<expr><operator pos:line="179" pos:column="16">!<pos:position pos:line="179" pos:column="17"/></operator><name><name pos:line="179" pos:column="17">k<pos:position pos:line="179" pos:column="18"/></name><operator pos:line="179" pos:column="18">-&gt;<pos:position pos:line="179" pos:column="23"/></operator><name pos:line="179" pos:column="20">headerline<pos:position pos:line="179" pos:column="30"/></name></name></expr>)<pos:position pos:line="179" pos:column="31"/></condition><then pos:line="179" pos:column="31"> <block pos:line="179" pos:column="32">{
              <comment type="block" pos:line="180" pos:column="15">/* the first read header */</comment>
              <if pos:line="181" pos:column="15">if<condition pos:line="181" pos:column="17">(<expr><operator pos:line="181" pos:column="18">(<pos:position pos:line="181" pos:column="19"/></operator><name><name pos:line="181" pos:column="19">k<pos:position pos:line="181" pos:column="20"/></name><operator pos:line="181" pos:column="20">-&gt;<pos:position pos:line="181" pos:column="25"/></operator><name pos:line="181" pos:column="22">hbuflen<pos:position pos:line="181" pos:column="29"/></name></name><operator pos:line="181" pos:column="29">&gt;<pos:position pos:line="181" pos:column="33"/></operator><literal type="number" pos:line="181" pos:column="30">5<pos:position pos:line="181" pos:column="31"/></literal><operator pos:line="181" pos:column="31">)<pos:position pos:line="181" pos:column="32"/></operator> <operator pos:line="181" pos:column="33">&amp;&amp;<pos:position pos:line="181" pos:column="43"/></operator>
                 <operator pos:line="182" pos:column="18">!<pos:position pos:line="182" pos:column="19"/></operator><call><name pos:line="182" pos:column="19">checkhttpprefix<pos:position pos:line="182" pos:column="34"/></name><argument_list pos:line="182" pos:column="34">(<argument><expr><name pos:line="182" pos:column="35">data<pos:position pos:line="182" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="41">data<pos:position pos:line="182" pos:column="45"/></name><operator pos:line="182" pos:column="45">-&gt;<pos:position pos:line="182" pos:column="50"/></operator><name pos:line="182" pos:column="47">state<pos:position pos:line="182" pos:column="52"/></name><operator pos:line="182" pos:column="52">.<pos:position pos:line="182" pos:column="53"/></operator><name pos:line="182" pos:column="53">headerbuff<pos:position pos:line="182" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="182" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="182" pos:column="65"/></condition><then pos:line="182" pos:column="65"> <block pos:line="182" pos:column="66">{
                <comment type="block" pos:line="183" pos:column="17">/* this is not the beginning of a HTTP first header line */</comment>
                <expr_stmt><expr><name><name pos:line="184" pos:column="17">k<pos:position pos:line="184" pos:column="18"/></name><operator pos:line="184" pos:column="18">-&gt;<pos:position pos:line="184" pos:column="23"/></operator><name pos:line="184" pos:column="20">header<pos:position pos:line="184" pos:column="26"/></name></name> <operator pos:line="184" pos:column="27">=<pos:position pos:line="184" pos:column="28"/></operator> <name pos:line="184" pos:column="29">FALSE<pos:position pos:line="184" pos:column="34"/></name></expr>;<pos:position pos:line="184" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="185" pos:column="17">k<pos:position pos:line="185" pos:column="18"/></name><operator pos:line="185" pos:column="18">-&gt;<pos:position pos:line="185" pos:column="23"/></operator><name pos:line="185" pos:column="20">badheader<pos:position pos:line="185" pos:column="29"/></name></name> <operator pos:line="185" pos:column="30">=<pos:position pos:line="185" pos:column="31"/></operator> <name pos:line="185" pos:column="32">HEADER_PARTHEADER<pos:position pos:line="185" pos:column="49"/></name></expr>;<pos:position pos:line="185" pos:column="50"/></expr_stmt>
                <break pos:line="186" pos:column="17">break;<pos:position pos:line="186" pos:column="23"/></break>
              }<pos:position pos:line="187" pos:column="16"/></block></then></if>
            }<pos:position pos:line="188" pos:column="14"/></block></then></if>

            <if pos:line="190" pos:column="13">if <condition pos:line="190" pos:column="16">(<expr><operator pos:line="190" pos:column="17">(<pos:position pos:line="190" pos:column="18"/></operator><literal type="char" pos:line="190" pos:column="18">'\n'<pos:position pos:line="190" pos:column="22"/></literal> <operator pos:line="190" pos:column="23">==<pos:position pos:line="190" pos:column="25"/></operator> <operator pos:line="190" pos:column="26">*<pos:position pos:line="190" pos:column="27"/></operator><name><name pos:line="190" pos:column="27">k<pos:position pos:line="190" pos:column="28"/></name><operator pos:line="190" pos:column="28">-&gt;<pos:position pos:line="190" pos:column="33"/></operator><name pos:line="190" pos:column="30">p<pos:position pos:line="190" pos:column="31"/></name></name><operator pos:line="190" pos:column="31">)<pos:position pos:line="190" pos:column="32"/></operator> <operator pos:line="190" pos:column="33">||<pos:position pos:line="190" pos:column="35"/></operator> <operator pos:line="190" pos:column="36">(<pos:position pos:line="190" pos:column="37"/></operator><literal type="char" pos:line="190" pos:column="37">'\r'<pos:position pos:line="190" pos:column="41"/></literal> <operator pos:line="190" pos:column="42">==<pos:position pos:line="190" pos:column="44"/></operator> <operator pos:line="190" pos:column="45">*<pos:position pos:line="190" pos:column="46"/></operator><name><name pos:line="190" pos:column="46">k<pos:position pos:line="190" pos:column="47"/></name><operator pos:line="190" pos:column="47">-&gt;<pos:position pos:line="190" pos:column="52"/></operator><name pos:line="190" pos:column="49">p<pos:position pos:line="190" pos:column="50"/></name></name><operator pos:line="190" pos:column="50">)<pos:position pos:line="190" pos:column="51"/></operator></expr>)<pos:position pos:line="190" pos:column="52"/></condition><then pos:line="190" pos:column="52"> <block pos:line="190" pos:column="53">{
              <decl_stmt><decl><type><name pos:line="191" pos:column="15">int<pos:position pos:line="191" pos:column="18"/></name></type> <name pos:line="191" pos:column="19">headerlen<pos:position pos:line="191" pos:column="28"/></name></decl>;<pos:position pos:line="191" pos:column="29"/></decl_stmt>
              <comment type="block" pos:line="192" pos:column="15">/* Zero-length header line means end of headers! */</comment>

              <if pos:line="194" pos:column="15">if <condition pos:line="194" pos:column="18">(<expr><literal type="char" pos:line="194" pos:column="19">'\r'<pos:position pos:line="194" pos:column="23"/></literal> <operator pos:line="194" pos:column="24">==<pos:position pos:line="194" pos:column="26"/></operator> <operator pos:line="194" pos:column="27">*<pos:position pos:line="194" pos:column="28"/></operator><name><name pos:line="194" pos:column="28">k<pos:position pos:line="194" pos:column="29"/></name><operator pos:line="194" pos:column="29">-&gt;<pos:position pos:line="194" pos:column="34"/></operator><name pos:line="194" pos:column="31">p<pos:position pos:line="194" pos:column="32"/></name></name></expr>)<pos:position pos:line="194" pos:column="33"/></condition><then pos:line="194" pos:column="33">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="195" pos:column="17">k<pos:position pos:line="195" pos:column="18"/></name><operator pos:line="195" pos:column="18">-&gt;<pos:position pos:line="195" pos:column="23"/></operator><name pos:line="195" pos:column="20">p<pos:position pos:line="195" pos:column="21"/></name></name><operator pos:line="195" pos:column="21">++<pos:position pos:line="195" pos:column="23"/></operator></expr>;<pos:position pos:line="195" pos:column="24"/></expr_stmt></block></then></if> <comment type="block" pos:line="195" pos:column="25">/* pass the \r byte */</comment>
              <if pos:line="196" pos:column="15">if <condition pos:line="196" pos:column="18">(<expr><literal type="char" pos:line="196" pos:column="19">'\n'<pos:position pos:line="196" pos:column="23"/></literal> <operator pos:line="196" pos:column="24">==<pos:position pos:line="196" pos:column="26"/></operator> <operator pos:line="196" pos:column="27">*<pos:position pos:line="196" pos:column="28"/></operator><name><name pos:line="196" pos:column="28">k<pos:position pos:line="196" pos:column="29"/></name><operator pos:line="196" pos:column="29">-&gt;<pos:position pos:line="196" pos:column="34"/></operator><name pos:line="196" pos:column="31">p<pos:position pos:line="196" pos:column="32"/></name></name></expr>)<pos:position pos:line="196" pos:column="33"/></condition><then pos:line="196" pos:column="33">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="197" pos:column="17">k<pos:position pos:line="197" pos:column="18"/></name><operator pos:line="197" pos:column="18">-&gt;<pos:position pos:line="197" pos:column="23"/></operator><name pos:line="197" pos:column="20">p<pos:position pos:line="197" pos:column="21"/></name></name><operator pos:line="197" pos:column="21">++<pos:position pos:line="197" pos:column="23"/></operator></expr>;<pos:position pos:line="197" pos:column="24"/></expr_stmt></block></then></if> <comment type="block" pos:line="197" pos:column="25">/* pass the \n byte */</comment>

              <if pos:line="199" pos:column="15">if<condition pos:line="199" pos:column="17">(<expr><literal type="number" pos:line="199" pos:column="18">100<pos:position pos:line="199" pos:column="21"/></literal> <operator pos:line="199" pos:column="22">==<pos:position pos:line="199" pos:column="24"/></operator> <name><name pos:line="199" pos:column="25">k<pos:position pos:line="199" pos:column="26"/></name><operator pos:line="199" pos:column="26">-&gt;<pos:position pos:line="199" pos:column="31"/></operator><name pos:line="199" pos:column="28">httpcode<pos:position pos:line="199" pos:column="36"/></name></name></expr>)<pos:position pos:line="199" pos:column="37"/></condition><then pos:line="199" pos:column="37"> <block pos:line="199" pos:column="38">{
                <comment type="block" pos:line="200" pos:column="17">/*
                 * We have made a HTTP PUT or POST and this is 1.1-lingo
                 * that tells us that the server is OK with this and ready
                 * to receive the data.
                 * However, we'll get more headers now so we must get
                 * back into the header-parsing state!
                 */</comment>
                <expr_stmt><expr><name><name pos:line="207" pos:column="17">k<pos:position pos:line="207" pos:column="18"/></name><operator pos:line="207" pos:column="18">-&gt;<pos:position pos:line="207" pos:column="23"/></operator><name pos:line="207" pos:column="20">header<pos:position pos:line="207" pos:column="26"/></name></name> <operator pos:line="207" pos:column="27">=<pos:position pos:line="207" pos:column="28"/></operator> <name pos:line="207" pos:column="29">TRUE<pos:position pos:line="207" pos:column="33"/></name></expr>;<pos:position pos:line="207" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="208" pos:column="17">k<pos:position pos:line="208" pos:column="18"/></name><operator pos:line="208" pos:column="18">-&gt;<pos:position pos:line="208" pos:column="23"/></operator><name pos:line="208" pos:column="20">headerline<pos:position pos:line="208" pos:column="30"/></name></name> <operator pos:line="208" pos:column="31">=<pos:position pos:line="208" pos:column="32"/></operator> <literal type="number" pos:line="208" pos:column="33">0<pos:position pos:line="208" pos:column="34"/></literal></expr>;<pos:position pos:line="208" pos:column="35"/></expr_stmt> <comment type="block" pos:line="208" pos:column="36">/* restart the header line counter */</comment>
                <comment type="block" pos:line="209" pos:column="17">/* if we did wait for this do enable write now! */</comment>
                <if pos:line="210" pos:column="17">if <condition pos:line="210" pos:column="20">(<expr><name><name pos:line="210" pos:column="21">k<pos:position pos:line="210" pos:column="22"/></name><operator pos:line="210" pos:column="22">-&gt;<pos:position pos:line="210" pos:column="27"/></operator><name pos:line="210" pos:column="24">write_after_100_header<pos:position pos:line="210" pos:column="46"/></name></name></expr>)<pos:position pos:line="210" pos:column="47"/></condition><then pos:line="210" pos:column="47"> <block pos:line="210" pos:column="48">{

                  <expr_stmt><expr><name><name pos:line="212" pos:column="19">k<pos:position pos:line="212" pos:column="20"/></name><operator pos:line="212" pos:column="20">-&gt;<pos:position pos:line="212" pos:column="25"/></operator><name pos:line="212" pos:column="22">write_after_100_header<pos:position pos:line="212" pos:column="44"/></name></name> <operator pos:line="212" pos:column="45">=<pos:position pos:line="212" pos:column="46"/></operator> <name pos:line="212" pos:column="47">FALSE<pos:position pos:line="212" pos:column="52"/></name></expr>;<pos:position pos:line="212" pos:column="53"/></expr_stmt>
                  <expr_stmt><expr><call><name pos:line="213" pos:column="19">FD_SET<pos:position pos:line="213" pos:column="25"/></name> <argument_list pos:line="213" pos:column="26">(<argument><expr><name><name pos:line="213" pos:column="27">conn<pos:position pos:line="213" pos:column="31"/></name><operator pos:line="213" pos:column="31">-&gt;<pos:position pos:line="213" pos:column="36"/></operator><name pos:line="213" pos:column="33">writesockfd<pos:position pos:line="213" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="213" pos:column="46">&amp;<pos:position pos:line="213" pos:column="51"/></operator><name><name pos:line="213" pos:column="47">k<pos:position pos:line="213" pos:column="48"/></name><operator pos:line="213" pos:column="48">-&gt;<pos:position pos:line="213" pos:column="53"/></operator><name pos:line="213" pos:column="50">writefd<pos:position pos:line="213" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="213" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="59"/></expr_stmt> <comment type="block" pos:line="213" pos:column="60">/* write */</comment>
                  <expr_stmt><expr><name><name pos:line="214" pos:column="19">k<pos:position pos:line="214" pos:column="20"/></name><operator pos:line="214" pos:column="20">-&gt;<pos:position pos:line="214" pos:column="25"/></operator><name pos:line="214" pos:column="22">keepon<pos:position pos:line="214" pos:column="28"/></name></name> <operator pos:line="214" pos:column="29">|=<pos:position pos:line="214" pos:column="31"/></operator> <name pos:line="214" pos:column="32">KEEP_WRITE<pos:position pos:line="214" pos:column="42"/></name></expr>;<pos:position pos:line="214" pos:column="43"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="215" pos:column="19">k<pos:position pos:line="215" pos:column="20"/></name><operator pos:line="215" pos:column="20">-&gt;<pos:position pos:line="215" pos:column="25"/></operator><name pos:line="215" pos:column="22">wkeepfd<pos:position pos:line="215" pos:column="29"/></name></name> <operator pos:line="215" pos:column="30">=<pos:position pos:line="215" pos:column="31"/></operator> <name><name pos:line="215" pos:column="32">k<pos:position pos:line="215" pos:column="33"/></name><operator pos:line="215" pos:column="33">-&gt;<pos:position pos:line="215" pos:column="38"/></operator><name pos:line="215" pos:column="35">writefd<pos:position pos:line="215" pos:column="42"/></name></name></expr>;<pos:position pos:line="215" pos:column="43"/></expr_stmt>
                }<pos:position pos:line="216" pos:column="18"/></block></then></if>
              }<pos:position pos:line="217" pos:column="16"/></block></then>
              <else pos:line="218" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="219" pos:column="17">k<pos:position pos:line="219" pos:column="18"/></name><operator pos:line="219" pos:column="18">-&gt;<pos:position pos:line="219" pos:column="23"/></operator><name pos:line="219" pos:column="20">header<pos:position pos:line="219" pos:column="26"/></name></name> <operator pos:line="219" pos:column="27">=<pos:position pos:line="219" pos:column="28"/></operator> <name pos:line="219" pos:column="29">FALSE<pos:position pos:line="219" pos:column="34"/></name></expr>;<pos:position pos:line="219" pos:column="35"/></expr_stmt></block></else></if> <comment type="block" pos:line="219" pos:column="36">/* no more header to parse! */</comment>

              <if pos:line="221" pos:column="15">if <condition pos:line="221" pos:column="18">(<expr><literal type="number" pos:line="221" pos:column="19">417<pos:position pos:line="221" pos:column="22"/></literal> <operator pos:line="221" pos:column="23">==<pos:position pos:line="221" pos:column="25"/></operator> <name><name pos:line="221" pos:column="26">k<pos:position pos:line="221" pos:column="27"/></name><operator pos:line="221" pos:column="27">-&gt;<pos:position pos:line="221" pos:column="32"/></operator><name pos:line="221" pos:column="29">httpcode<pos:position pos:line="221" pos:column="37"/></name></name></expr>)<pos:position pos:line="221" pos:column="38"/></condition><then pos:line="221" pos:column="38"> <block pos:line="221" pos:column="39">{
                <comment type="block" pos:line="222" pos:column="17">/*
                 * we got: "417 Expectation Failed" this means:
                 * we have made a HTTP call and our Expect Header
                 * seems to cause a problem =&gt; abort the write operations
                 * (or prevent them from starting).
                 */</comment>
                <expr_stmt><expr><name><name pos:line="228" pos:column="17">k<pos:position pos:line="228" pos:column="18"/></name><operator pos:line="228" pos:column="18">-&gt;<pos:position pos:line="228" pos:column="23"/></operator><name pos:line="228" pos:column="20">write_after_100_header<pos:position pos:line="228" pos:column="42"/></name></name> <operator pos:line="228" pos:column="43">=<pos:position pos:line="228" pos:column="44"/></operator> <name pos:line="228" pos:column="45">FALSE<pos:position pos:line="228" pos:column="50"/></name></expr>;<pos:position pos:line="228" pos:column="51"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="229" pos:column="17">k<pos:position pos:line="229" pos:column="18"/></name><operator pos:line="229" pos:column="18">-&gt;<pos:position pos:line="229" pos:column="23"/></operator><name pos:line="229" pos:column="20">keepon<pos:position pos:line="229" pos:column="26"/></name></name> <operator pos:line="229" pos:column="27">&amp;=<pos:position pos:line="229" pos:column="33"/></operator> <operator pos:line="229" pos:column="30">~<pos:position pos:line="229" pos:column="31"/></operator><name pos:line="229" pos:column="31">KEEP_WRITE<pos:position pos:line="229" pos:column="41"/></name></expr>;<pos:position pos:line="229" pos:column="42"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="230" pos:column="17">FD_ZERO<pos:position pos:line="230" pos:column="24"/></name><argument_list pos:line="230" pos:column="24">(<argument><expr><operator pos:line="230" pos:column="25">&amp;<pos:position pos:line="230" pos:column="30"/></operator><name><name pos:line="230" pos:column="26">k<pos:position pos:line="230" pos:column="27"/></name><operator pos:line="230" pos:column="27">-&gt;<pos:position pos:line="230" pos:column="32"/></operator><name pos:line="230" pos:column="29">wkeepfd<pos:position pos:line="230" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="230" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="38"/></expr_stmt>
              }<pos:position pos:line="231" pos:column="16"/></block></then></if>

              <comment type="block" pos:line="233" pos:column="15">/* now, only output this if the header AND body are requested:
               */</comment>
              <expr_stmt><expr><name><name pos:line="235" pos:column="15">k<pos:position pos:line="235" pos:column="16"/></name><operator pos:line="235" pos:column="16">-&gt;<pos:position pos:line="235" pos:column="21"/></operator><name pos:line="235" pos:column="18">writetype<pos:position pos:line="235" pos:column="27"/></name></name> <operator pos:line="235" pos:column="28">=<pos:position pos:line="235" pos:column="29"/></operator> <name pos:line="235" pos:column="30">CLIENTWRITE_HEADER<pos:position pos:line="235" pos:column="48"/></name></expr>;<pos:position pos:line="235" pos:column="49"/></expr_stmt>
              <if pos:line="236" pos:column="15">if <condition pos:line="236" pos:column="18">(<expr><name><name pos:line="236" pos:column="19">data<pos:position pos:line="236" pos:column="23"/></name><operator pos:line="236" pos:column="23">-&gt;<pos:position pos:line="236" pos:column="28"/></operator><name pos:line="236" pos:column="25">set<pos:position pos:line="236" pos:column="28"/></name><operator pos:line="236" pos:column="28">.<pos:position pos:line="236" pos:column="29"/></operator><name pos:line="236" pos:column="29">http_include_header<pos:position pos:line="236" pos:column="48"/></name></name></expr>)<pos:position pos:line="236" pos:column="49"/></condition><then pos:line="236" pos:column="49">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="237" pos:column="17">k<pos:position pos:line="237" pos:column="18"/></name><operator pos:line="237" pos:column="18">-&gt;<pos:position pos:line="237" pos:column="23"/></operator><name pos:line="237" pos:column="20">writetype<pos:position pos:line="237" pos:column="29"/></name></name> <operator pos:line="237" pos:column="30">|=<pos:position pos:line="237" pos:column="32"/></operator> <name pos:line="237" pos:column="33">CLIENTWRITE_BODY<pos:position pos:line="237" pos:column="49"/></name></expr>;<pos:position pos:line="237" pos:column="50"/></expr_stmt></block></then></if>

              <expr_stmt><expr><name pos:line="239" pos:column="15">headerlen<pos:position pos:line="239" pos:column="24"/></name> <operator pos:line="239" pos:column="25">=<pos:position pos:line="239" pos:column="26"/></operator> <name><name pos:line="239" pos:column="27">k<pos:position pos:line="239" pos:column="28"/></name><operator pos:line="239" pos:column="28">-&gt;<pos:position pos:line="239" pos:column="33"/></operator><name pos:line="239" pos:column="30">p<pos:position pos:line="239" pos:column="31"/></name></name> <operator pos:line="239" pos:column="32">-<pos:position pos:line="239" pos:column="33"/></operator> <name><name pos:line="239" pos:column="34">data<pos:position pos:line="239" pos:column="38"/></name><operator pos:line="239" pos:column="38">-&gt;<pos:position pos:line="239" pos:column="43"/></operator><name pos:line="239" pos:column="40">state<pos:position pos:line="239" pos:column="45"/></name><operator pos:line="239" pos:column="45">.<pos:position pos:line="239" pos:column="46"/></operator><name pos:line="239" pos:column="46">headerbuff<pos:position pos:line="239" pos:column="56"/></name></name></expr>;<pos:position pos:line="239" pos:column="57"/></expr_stmt>

              <expr_stmt><expr><name pos:line="241" pos:column="15">result<pos:position pos:line="241" pos:column="21"/></name> <operator pos:line="241" pos:column="22">=<pos:position pos:line="241" pos:column="23"/></operator> <call><name pos:line="241" pos:column="24">Curl_client_write<pos:position pos:line="241" pos:column="41"/></name><argument_list pos:line="241" pos:column="41">(<argument><expr><name pos:line="241" pos:column="42">data<pos:position pos:line="241" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="241" pos:column="48">k<pos:position pos:line="241" pos:column="49"/></name><operator pos:line="241" pos:column="49">-&gt;<pos:position pos:line="241" pos:column="54"/></operator><name pos:line="241" pos:column="51">writetype<pos:position pos:line="241" pos:column="60"/></name></name></expr></argument>,
                                         <argument><expr><name><name pos:line="242" pos:column="42">data<pos:position pos:line="242" pos:column="46"/></name><operator pos:line="242" pos:column="46">-&gt;<pos:position pos:line="242" pos:column="51"/></operator><name pos:line="242" pos:column="48">state<pos:position pos:line="242" pos:column="53"/></name><operator pos:line="242" pos:column="53">.<pos:position pos:line="242" pos:column="54"/></operator><name pos:line="242" pos:column="54">headerbuff<pos:position pos:line="242" pos:column="64"/></name></name></expr></argument>,
                                         <argument><expr><name pos:line="243" pos:column="42">headerlen<pos:position pos:line="243" pos:column="51"/></name></expr></argument>)<pos:position pos:line="243" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="53"/></expr_stmt>
              <if pos:line="244" pos:column="15">if<condition pos:line="244" pos:column="17">(<expr><name pos:line="244" pos:column="18">result<pos:position pos:line="244" pos:column="24"/></name></expr>)<pos:position pos:line="244" pos:column="25"/></condition><then pos:line="244" pos:column="25">
                <block type="pseudo"><return pos:line="245" pos:column="17">return <expr><name pos:line="245" pos:column="24">result<pos:position pos:line="245" pos:column="30"/></name></expr>;<pos:position pos:line="245" pos:column="31"/></return></block></then></if>

              <expr_stmt><expr><name><name pos:line="247" pos:column="15">data<pos:position pos:line="247" pos:column="19"/></name><operator pos:line="247" pos:column="19">-&gt;<pos:position pos:line="247" pos:column="24"/></operator><name pos:line="247" pos:column="21">info<pos:position pos:line="247" pos:column="25"/></name><operator pos:line="247" pos:column="25">.<pos:position pos:line="247" pos:column="26"/></operator><name pos:line="247" pos:column="26">header_size<pos:position pos:line="247" pos:column="37"/></name></name> <operator pos:line="247" pos:column="38">+=<pos:position pos:line="247" pos:column="40"/></operator> <name pos:line="247" pos:column="41">headerlen<pos:position pos:line="247" pos:column="50"/></name></expr>;<pos:position pos:line="247" pos:column="51"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="248" pos:column="15">conn<pos:position pos:line="248" pos:column="19"/></name><operator pos:line="248" pos:column="19">-&gt;<pos:position pos:line="248" pos:column="24"/></operator><name pos:line="248" pos:column="21">headerbytecount<pos:position pos:line="248" pos:column="36"/></name></name> <operator pos:line="248" pos:column="37">+=<pos:position pos:line="248" pos:column="39"/></operator> <name pos:line="248" pos:column="40">headerlen<pos:position pos:line="248" pos:column="49"/></name></expr>;<pos:position pos:line="248" pos:column="50"/></expr_stmt>

              <if pos:line="250" pos:column="15">if<condition pos:line="250" pos:column="17">(<expr><operator pos:line="250" pos:column="18">!<pos:position pos:line="250" pos:column="19"/></operator><name><name pos:line="250" pos:column="19">k<pos:position pos:line="250" pos:column="20"/></name><operator pos:line="250" pos:column="20">-&gt;<pos:position pos:line="250" pos:column="25"/></operator><name pos:line="250" pos:column="22">header<pos:position pos:line="250" pos:column="28"/></name></name></expr>)<pos:position pos:line="250" pos:column="29"/></condition><then pos:line="250" pos:column="29"> <block pos:line="250" pos:column="30">{
                <comment type="block" pos:line="251" pos:column="17">/*
                 * really end-of-headers.
                 *
                 * If we requested a "no body", this is a good time to get
                 * out and return home.
                 */</comment>
                <if pos:line="257" pos:column="17">if<condition pos:line="257" pos:column="19">(<expr><name><name pos:line="257" pos:column="20">data<pos:position pos:line="257" pos:column="24"/></name><operator pos:line="257" pos:column="24">-&gt;<pos:position pos:line="257" pos:column="29"/></operator><name pos:line="257" pos:column="26">set<pos:position pos:line="257" pos:column="29"/></name><operator pos:line="257" pos:column="29">.<pos:position pos:line="257" pos:column="30"/></operator><name pos:line="257" pos:column="30">no_body<pos:position pos:line="257" pos:column="37"/></name></name></expr>)<pos:position pos:line="257" pos:column="38"/></condition><then pos:line="257" pos:column="38">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="258" pos:column="19">stop_reading<pos:position pos:line="258" pos:column="31"/></name> <operator pos:line="258" pos:column="32">=<pos:position pos:line="258" pos:column="33"/></operator> <name pos:line="258" pos:column="34">TRUE<pos:position pos:line="258" pos:column="38"/></name></expr>;<pos:position pos:line="258" pos:column="39"/></expr_stmt></block></then>
                <elseif pos:line="259" pos:column="17">else <if pos:line="259" pos:column="22">if<condition pos:line="259" pos:column="24">(<expr><operator pos:line="259" pos:column="25">!<pos:position pos:line="259" pos:column="26"/></operator><name><name pos:line="259" pos:column="26">conn<pos:position pos:line="259" pos:column="30"/></name><operator pos:line="259" pos:column="30">-&gt;<pos:position pos:line="259" pos:column="35"/></operator><name pos:line="259" pos:column="32">bits<pos:position pos:line="259" pos:column="36"/></name><operator pos:line="259" pos:column="36">.<pos:position pos:line="259" pos:column="37"/></operator><name pos:line="259" pos:column="37">close<pos:position pos:line="259" pos:column="42"/></name></name></expr>)<pos:position pos:line="259" pos:column="43"/></condition><then pos:line="259" pos:column="43"> <block pos:line="259" pos:column="44">{
                  <comment type="block" pos:line="260" pos:column="19">/* If this is not the last request before a close, we must
                     set the maximum download size to the size of the
                     expected document or else, we won't know when to stop
                     reading! */</comment>
                  <if pos:line="264" pos:column="19">if<condition pos:line="264" pos:column="21">(<expr><operator pos:line="264" pos:column="22">-<pos:position pos:line="264" pos:column="23"/></operator><literal type="number" pos:line="264" pos:column="23">1<pos:position pos:line="264" pos:column="24"/></literal> <operator pos:line="264" pos:column="25">!=<pos:position pos:line="264" pos:column="27"/></operator> <name><name pos:line="264" pos:column="28">conn<pos:position pos:line="264" pos:column="32"/></name><operator pos:line="264" pos:column="32">-&gt;<pos:position pos:line="264" pos:column="37"/></operator><name pos:line="264" pos:column="34">size<pos:position pos:line="264" pos:column="38"/></name></name></expr>)<pos:position pos:line="264" pos:column="39"/></condition><then pos:line="264" pos:column="39">
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="265" pos:column="21">conn<pos:position pos:line="265" pos:column="25"/></name><operator pos:line="265" pos:column="25">-&gt;<pos:position pos:line="265" pos:column="30"/></operator><name pos:line="265" pos:column="27">maxdownload<pos:position pos:line="265" pos:column="38"/></name></name> <operator pos:line="265" pos:column="39">=<pos:position pos:line="265" pos:column="40"/></operator> <name><name pos:line="265" pos:column="41">conn<pos:position pos:line="265" pos:column="45"/></name><operator pos:line="265" pos:column="45">-&gt;<pos:position pos:line="265" pos:column="50"/></operator><name pos:line="265" pos:column="47">size<pos:position pos:line="265" pos:column="51"/></name></name></expr>;<pos:position pos:line="265" pos:column="52"/></expr_stmt></block></then></if>
                }<pos:position pos:line="266" pos:column="18"/></block></then></if></elseif></if>
                <comment type="block" pos:line="267" pos:column="17">/* If max download size is *zero* (nothing) we already
                   have nothing and can safely return ok now! */</comment>
                <if pos:line="269" pos:column="17">if<condition pos:line="269" pos:column="19">(<expr><literal type="number" pos:line="269" pos:column="20">0<pos:position pos:line="269" pos:column="21"/></literal> <operator pos:line="269" pos:column="22">==<pos:position pos:line="269" pos:column="24"/></operator> <name><name pos:line="269" pos:column="25">conn<pos:position pos:line="269" pos:column="29"/></name><operator pos:line="269" pos:column="29">-&gt;<pos:position pos:line="269" pos:column="34"/></operator><name pos:line="269" pos:column="31">maxdownload<pos:position pos:line="269" pos:column="42"/></name></name></expr>)<pos:position pos:line="269" pos:column="43"/></condition><then pos:line="269" pos:column="43">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="270" pos:column="19">stop_reading<pos:position pos:line="270" pos:column="31"/></name> <operator pos:line="270" pos:column="32">=<pos:position pos:line="270" pos:column="33"/></operator> <name pos:line="270" pos:column="34">TRUE<pos:position pos:line="270" pos:column="38"/></name></expr>;<pos:position pos:line="270" pos:column="39"/></expr_stmt></block></then></if>
                    
                <if pos:line="272" pos:column="17">if<condition pos:line="272" pos:column="19">(<expr><name pos:line="272" pos:column="20">stop_reading<pos:position pos:line="272" pos:column="32"/></name></expr>)<pos:position pos:line="272" pos:column="33"/></condition><then pos:line="272" pos:column="33"> <block pos:line="272" pos:column="34">{
                  <comment type="block" pos:line="273" pos:column="19">/* we make sure that this socket isn't read more now */</comment>
                  <expr_stmt><expr><name><name pos:line="274" pos:column="19">k<pos:position pos:line="274" pos:column="20"/></name><operator pos:line="274" pos:column="20">-&gt;<pos:position pos:line="274" pos:column="25"/></operator><name pos:line="274" pos:column="22">keepon<pos:position pos:line="274" pos:column="28"/></name></name> <operator pos:line="274" pos:column="29">&amp;=<pos:position pos:line="274" pos:column="35"/></operator> <operator pos:line="274" pos:column="32">~<pos:position pos:line="274" pos:column="33"/></operator><name pos:line="274" pos:column="33">KEEP_READ<pos:position pos:line="274" pos:column="42"/></name></expr>;<pos:position pos:line="274" pos:column="43"/></expr_stmt>
                  <expr_stmt><expr><call><name pos:line="275" pos:column="19">FD_ZERO<pos:position pos:line="275" pos:column="26"/></name><argument_list pos:line="275" pos:column="26">(<argument><expr><operator pos:line="275" pos:column="27">&amp;<pos:position pos:line="275" pos:column="32"/></operator><name><name pos:line="275" pos:column="28">k<pos:position pos:line="275" pos:column="29"/></name><operator pos:line="275" pos:column="29">-&gt;<pos:position pos:line="275" pos:column="34"/></operator><name pos:line="275" pos:column="31">rkeepfd<pos:position pos:line="275" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="275" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="40"/></expr_stmt>
                }<pos:position pos:line="276" pos:column="18"/></block></then></if>

                <break pos:line="278" pos:column="17">break;<pos:position pos:line="278" pos:column="23"/></break>          <comment type="block" pos:line="278" pos:column="33">/* exit header line loop */</comment>
              }<pos:position pos:line="279" pos:column="16"/></block></then></if>

              <comment type="block" pos:line="281" pos:column="15">/* We continue reading headers, so reset the line-based
                 header parsing variables hbufp &amp;&amp; hbuflen */</comment>
              <expr_stmt><expr><name><name pos:line="283" pos:column="15">k<pos:position pos:line="283" pos:column="16"/></name><operator pos:line="283" pos:column="16">-&gt;<pos:position pos:line="283" pos:column="21"/></operator><name pos:line="283" pos:column="18">hbufp<pos:position pos:line="283" pos:column="23"/></name></name> <operator pos:line="283" pos:column="24">=<pos:position pos:line="283" pos:column="25"/></operator> <name><name pos:line="283" pos:column="26">data<pos:position pos:line="283" pos:column="30"/></name><operator pos:line="283" pos:column="30">-&gt;<pos:position pos:line="283" pos:column="35"/></operator><name pos:line="283" pos:column="32">state<pos:position pos:line="283" pos:column="37"/></name><operator pos:line="283" pos:column="37">.<pos:position pos:line="283" pos:column="38"/></operator><name pos:line="283" pos:column="38">headerbuff<pos:position pos:line="283" pos:column="48"/></name></name></expr>;<pos:position pos:line="283" pos:column="49"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="284" pos:column="15">k<pos:position pos:line="284" pos:column="16"/></name><operator pos:line="284" pos:column="16">-&gt;<pos:position pos:line="284" pos:column="21"/></operator><name pos:line="284" pos:column="18">hbuflen<pos:position pos:line="284" pos:column="25"/></name></name> <operator pos:line="284" pos:column="26">=<pos:position pos:line="284" pos:column="27"/></operator> <literal type="number" pos:line="284" pos:column="28">0<pos:position pos:line="284" pos:column="29"/></literal></expr>;<pos:position pos:line="284" pos:column="30"/></expr_stmt>
              <continue pos:line="285" pos:column="15">continue;<pos:position pos:line="285" pos:column="24"/></continue>
            }<pos:position pos:line="286" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="288" pos:column="13">/*
             * Checks for special headers coming up.
             */</comment>
              
            <if pos:line="292" pos:column="13">if <condition pos:line="292" pos:column="16">(<expr><operator pos:line="292" pos:column="17">!<pos:position pos:line="292" pos:column="18"/></operator><name><name pos:line="292" pos:column="18">k<pos:position pos:line="292" pos:column="19"/></name><operator pos:line="292" pos:column="19">-&gt;<pos:position pos:line="292" pos:column="24"/></operator><name pos:line="292" pos:column="21">headerline<pos:position pos:line="292" pos:column="31"/></name></name><operator pos:line="292" pos:column="31">++<pos:position pos:line="292" pos:column="33"/></operator></expr>)<pos:position pos:line="292" pos:column="34"/></condition><then pos:line="292" pos:column="34"> <block pos:line="292" pos:column="35">{
              <comment type="block" pos:line="293" pos:column="15">/* This is the first header, it MUST be the error code line
                 or else we consiser this to be the body right away! */</comment>
              <decl_stmt><decl><type><name pos:line="295" pos:column="15">int<pos:position pos:line="295" pos:column="18"/></name></type> <name pos:line="295" pos:column="19">httpversion_major<pos:position pos:line="295" pos:column="36"/></name></decl>;<pos:position pos:line="295" pos:column="37"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="296" pos:column="15">int<pos:position pos:line="296" pos:column="18"/></name></type> <name pos:line="296" pos:column="19">nc<pos:position pos:line="296" pos:column="21"/></name><init pos:line="296" pos:column="21">=<expr><call><name pos:line="296" pos:column="22">sscanf<pos:position pos:line="296" pos:column="28"/></name> <argument_list pos:line="296" pos:column="29">(<argument><expr><name><name pos:line="296" pos:column="30">k<pos:position pos:line="296" pos:column="31"/></name><operator pos:line="296" pos:column="31">-&gt;<pos:position pos:line="296" pos:column="36"/></operator><name pos:line="296" pos:column="33">p<pos:position pos:line="296" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="296" pos:column="36">" HTTP/%d.%d %3d"<pos:position pos:line="296" pos:column="53"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="297" pos:column="30">&amp;<pos:position pos:line="297" pos:column="35"/></operator><name pos:line="297" pos:column="31">httpversion_major<pos:position pos:line="297" pos:column="48"/></name></expr></argument>,
                             <argument><expr><operator pos:line="298" pos:column="30">&amp;<pos:position pos:line="298" pos:column="35"/></operator><name><name pos:line="298" pos:column="31">k<pos:position pos:line="298" pos:column="32"/></name><operator pos:line="298" pos:column="32">-&gt;<pos:position pos:line="298" pos:column="37"/></operator><name pos:line="298" pos:column="34">httpversion<pos:position pos:line="298" pos:column="45"/></name></name></expr></argument>,
                             <argument><expr><operator pos:line="299" pos:column="30">&amp;<pos:position pos:line="299" pos:column="35"/></operator><name><name pos:line="299" pos:column="31">k<pos:position pos:line="299" pos:column="32"/></name><operator pos:line="299" pos:column="32">-&gt;<pos:position pos:line="299" pos:column="37"/></operator><name pos:line="299" pos:column="34">httpcode<pos:position pos:line="299" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="299" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="299" pos:column="44"/></decl_stmt>
              <if pos:line="300" pos:column="15">if <condition pos:line="300" pos:column="18">(<expr><name pos:line="300" pos:column="19">nc<pos:position pos:line="300" pos:column="21"/></name><operator pos:line="300" pos:column="21">==<pos:position pos:line="300" pos:column="23"/></operator><literal type="number" pos:line="300" pos:column="23">3<pos:position pos:line="300" pos:column="24"/></literal></expr>)<pos:position pos:line="300" pos:column="25"/></condition><then pos:line="300" pos:column="25"> <block pos:line="300" pos:column="26">{
                <expr_stmt><expr><name><name pos:line="301" pos:column="17">k<pos:position pos:line="301" pos:column="18"/></name><operator pos:line="301" pos:column="18">-&gt;<pos:position pos:line="301" pos:column="23"/></operator><name pos:line="301" pos:column="20">httpversion<pos:position pos:line="301" pos:column="31"/></name></name> <operator pos:line="301" pos:column="32">+=<pos:position pos:line="301" pos:column="34"/></operator> <literal type="number" pos:line="301" pos:column="35">10<pos:position pos:line="301" pos:column="37"/></literal> <operator pos:line="301" pos:column="38">*<pos:position pos:line="301" pos:column="39"/></operator> <name pos:line="301" pos:column="40">httpversion_major<pos:position pos:line="301" pos:column="57"/></name></expr>;<pos:position pos:line="301" pos:column="58"/></expr_stmt>
              }<pos:position pos:line="302" pos:column="16"/></block></then>
              <else pos:line="303" pos:column="15">else <block pos:line="303" pos:column="20">{
                <comment type="block" pos:line="304" pos:column="17">/* this is the real world, not a Nirvana
                   NCSA 1.5.x returns this crap when asked for HTTP/1.1
                */</comment>
                <expr_stmt><expr><name pos:line="307" pos:column="17">nc<pos:position pos:line="307" pos:column="19"/></name><operator pos:line="307" pos:column="19">=<pos:position pos:line="307" pos:column="20"/></operator><call><name pos:line="307" pos:column="20">sscanf<pos:position pos:line="307" pos:column="26"/></name> <argument_list pos:line="307" pos:column="27">(<argument><expr><name><name pos:line="307" pos:column="28">k<pos:position pos:line="307" pos:column="29"/></name><operator pos:line="307" pos:column="29">-&gt;<pos:position pos:line="307" pos:column="34"/></operator><name pos:line="307" pos:column="31">p<pos:position pos:line="307" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="307" pos:column="34">" HTTP %3d"<pos:position pos:line="307" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="307" pos:column="47">&amp;<pos:position pos:line="307" pos:column="52"/></operator><name><name pos:line="307" pos:column="48">k<pos:position pos:line="307" pos:column="49"/></name><operator pos:line="307" pos:column="49">-&gt;<pos:position pos:line="307" pos:column="54"/></operator><name pos:line="307" pos:column="51">httpcode<pos:position pos:line="307" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="307" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="307" pos:column="61"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="308" pos:column="17">k<pos:position pos:line="308" pos:column="18"/></name><operator pos:line="308" pos:column="18">-&gt;<pos:position pos:line="308" pos:column="23"/></operator><name pos:line="308" pos:column="20">httpversion<pos:position pos:line="308" pos:column="31"/></name></name> <operator pos:line="308" pos:column="32">=<pos:position pos:line="308" pos:column="33"/></operator> <literal type="number" pos:line="308" pos:column="34">10<pos:position pos:line="308" pos:column="36"/></literal></expr>;<pos:position pos:line="308" pos:column="37"/></expr_stmt>
               
               <comment type="block" pos:line="310" pos:column="16">/* If user has set option HTTP200ALIASES,
                  compare header line against list of aliases
               */</comment>
                <if pos:line="313" pos:column="17">if <condition pos:line="313" pos:column="20">(<expr><operator pos:line="313" pos:column="21">!<pos:position pos:line="313" pos:column="22"/></operator><name pos:line="313" pos:column="22">nc<pos:position pos:line="313" pos:column="24"/></name></expr>)<pos:position pos:line="313" pos:column="25"/></condition><then pos:line="313" pos:column="25"> <block pos:line="313" pos:column="26">{
                  <if pos:line="314" pos:column="19">if <condition pos:line="314" pos:column="22">(<expr><call><name pos:line="314" pos:column="23">checkhttpprefix<pos:position pos:line="314" pos:column="38"/></name><argument_list pos:line="314" pos:column="38">(<argument><expr><name pos:line="314" pos:column="39">data<pos:position pos:line="314" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="314" pos:column="45">k<pos:position pos:line="314" pos:column="46"/></name><operator pos:line="314" pos:column="46">-&gt;<pos:position pos:line="314" pos:column="51"/></operator><name pos:line="314" pos:column="48">p<pos:position pos:line="314" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="314" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="314" pos:column="51"/></condition><then pos:line="314" pos:column="51"> <block pos:line="314" pos:column="52">{
                    <expr_stmt><expr><name pos:line="315" pos:column="21">nc<pos:position pos:line="315" pos:column="23"/></name> <operator pos:line="315" pos:column="24">=<pos:position pos:line="315" pos:column="25"/></operator> <literal type="number" pos:line="315" pos:column="26">1<pos:position pos:line="315" pos:column="27"/></literal></expr>;<pos:position pos:line="315" pos:column="28"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="316" pos:column="21">k<pos:position pos:line="316" pos:column="22"/></name><operator pos:line="316" pos:column="22">-&gt;<pos:position pos:line="316" pos:column="27"/></operator><name pos:line="316" pos:column="24">httpcode<pos:position pos:line="316" pos:column="32"/></name></name> <operator pos:line="316" pos:column="33">=<pos:position pos:line="316" pos:column="34"/></operator> <literal type="number" pos:line="316" pos:column="35">200<pos:position pos:line="316" pos:column="38"/></literal></expr>;<pos:position pos:line="316" pos:column="39"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="317" pos:column="21">k<pos:position pos:line="317" pos:column="22"/></name><operator pos:line="317" pos:column="22">-&gt;<pos:position pos:line="317" pos:column="27"/></operator><name pos:line="317" pos:column="24">httpversion<pos:position pos:line="317" pos:column="35"/></name></name> <operator pos:line="317" pos:column="36">=<pos:position pos:line="317" pos:column="37"/></operator>
                      <ternary><condition><expr><operator pos:line="318" pos:column="23">(<pos:position pos:line="318" pos:column="24"/></operator><name><name pos:line="318" pos:column="24">data<pos:position pos:line="318" pos:column="28"/></name><operator pos:line="318" pos:column="28">-&gt;<pos:position pos:line="318" pos:column="33"/></operator><name pos:line="318" pos:column="30">set<pos:position pos:line="318" pos:column="33"/></name><operator pos:line="318" pos:column="33">.<pos:position pos:line="318" pos:column="34"/></operator><name pos:line="318" pos:column="34">httpversion<pos:position pos:line="318" pos:column="45"/></name></name><operator pos:line="318" pos:column="45">==<pos:position pos:line="318" pos:column="47"/></operator><name pos:line="318" pos:column="47">CURL_HTTP_VERSION_1_0<pos:position pos:line="318" pos:column="68"/></name><operator pos:line="318" pos:column="68">)<pos:position pos:line="318" pos:column="69"/></operator></expr>?<pos:position pos:line="318" pos:column="70"/></condition><then pos:line="318" pos:column="70"> <expr><literal type="number" pos:line="318" pos:column="71">10<pos:position pos:line="318" pos:column="73"/></literal></expr> <pos:position pos:line="318" pos:column="74"/></then><else pos:line="318" pos:column="74">: <expr><literal type="number" pos:line="318" pos:column="76">11<pos:position pos:line="318" pos:column="78"/></literal></expr></else></ternary></expr>;<pos:position pos:line="318" pos:column="79"/></expr_stmt>
                  }<pos:position pos:line="319" pos:column="20"/></block></then></if>
                }<pos:position pos:line="320" pos:column="18"/></block></then></if>
              }<pos:position pos:line="321" pos:column="16"/></block></else></if>

              <if pos:line="323" pos:column="15">if <condition pos:line="323" pos:column="18">(<expr><name pos:line="323" pos:column="19">nc<pos:position pos:line="323" pos:column="21"/></name></expr>)<pos:position pos:line="323" pos:column="22"/></condition><then pos:line="323" pos:column="22"> <block pos:line="323" pos:column="23">{
                <expr_stmt><expr><name><name pos:line="324" pos:column="17">data<pos:position pos:line="324" pos:column="21"/></name><operator pos:line="324" pos:column="21">-&gt;<pos:position pos:line="324" pos:column="26"/></operator><name pos:line="324" pos:column="23">info<pos:position pos:line="324" pos:column="27"/></name><operator pos:line="324" pos:column="27">.<pos:position pos:line="324" pos:column="28"/></operator><name pos:line="324" pos:column="28">httpcode<pos:position pos:line="324" pos:column="36"/></name></name> <operator pos:line="324" pos:column="37">=<pos:position pos:line="324" pos:column="38"/></operator> <name><name pos:line="324" pos:column="39">k<pos:position pos:line="324" pos:column="40"/></name><operator pos:line="324" pos:column="40">-&gt;<pos:position pos:line="324" pos:column="45"/></operator><name pos:line="324" pos:column="42">httpcode<pos:position pos:line="324" pos:column="50"/></name></name></expr>;<pos:position pos:line="324" pos:column="51"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="325" pos:column="17">data<pos:position pos:line="325" pos:column="21"/></name><operator pos:line="325" pos:column="21">-&gt;<pos:position pos:line="325" pos:column="26"/></operator><name pos:line="325" pos:column="23">info<pos:position pos:line="325" pos:column="27"/></name><operator pos:line="325" pos:column="27">.<pos:position pos:line="325" pos:column="28"/></operator><name pos:line="325" pos:column="28">httpversion<pos:position pos:line="325" pos:column="39"/></name></name> <operator pos:line="325" pos:column="40">=<pos:position pos:line="325" pos:column="41"/></operator> <name><name pos:line="325" pos:column="42">k<pos:position pos:line="325" pos:column="43"/></name><operator pos:line="325" pos:column="43">-&gt;<pos:position pos:line="325" pos:column="48"/></operator><name pos:line="325" pos:column="45">httpversion<pos:position pos:line="325" pos:column="56"/></name></name></expr>;<pos:position pos:line="325" pos:column="57"/></expr_stmt>

                <comment type="block" pos:line="327" pos:column="17">/* 404 -&gt; URL not found! */</comment>
                <if pos:line="328" pos:column="17">if <condition pos:line="328" pos:column="20">(<expr><name><name pos:line="328" pos:column="21">data<pos:position pos:line="328" pos:column="25"/></name><operator pos:line="328" pos:column="25">-&gt;<pos:position pos:line="328" pos:column="30"/></operator><name pos:line="328" pos:column="27">set<pos:position pos:line="328" pos:column="30"/></name><operator pos:line="328" pos:column="30">.<pos:position pos:line="328" pos:column="31"/></operator><name pos:line="328" pos:column="31">http_fail_on_error<pos:position pos:line="328" pos:column="49"/></name></name> <operator pos:line="328" pos:column="50">&amp;&amp;<pos:position pos:line="328" pos:column="60"/></operator>
                    <operator pos:line="329" pos:column="21">(<pos:position pos:line="329" pos:column="22"/></operator><name><name pos:line="329" pos:column="22">k<pos:position pos:line="329" pos:column="23"/></name><operator pos:line="329" pos:column="23">-&gt;<pos:position pos:line="329" pos:column="28"/></operator><name pos:line="329" pos:column="25">httpcode<pos:position pos:line="329" pos:column="33"/></name></name> <operator pos:line="329" pos:column="34">&gt;=<pos:position pos:line="329" pos:column="39"/></operator> <literal type="number" pos:line="329" pos:column="37">400<pos:position pos:line="329" pos:column="40"/></literal><operator pos:line="329" pos:column="40">)<pos:position pos:line="329" pos:column="41"/></operator></expr>)<pos:position pos:line="329" pos:column="42"/></condition><then pos:line="329" pos:column="42"> <block pos:line="329" pos:column="43">{
                  <comment type="block" pos:line="330" pos:column="19">/* If we have been told to fail hard on HTTP-errors,
                     here is the check for that: */</comment>
                  <comment type="block" pos:line="332" pos:column="19">/* serious error, go home! */</comment>
                  <expr_stmt><expr><call><name pos:line="333" pos:column="19">failf<pos:position pos:line="333" pos:column="24"/></name> <argument_list pos:line="333" pos:column="25">(<argument><expr><name pos:line="333" pos:column="26">data<pos:position pos:line="333" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="333" pos:column="32">"The requested file was not found"<pos:position pos:line="333" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="333" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="333" pos:column="68"/></expr_stmt>
                  <return pos:line="334" pos:column="19">return <expr><name pos:line="334" pos:column="26">CURLE_HTTP_RETURNED_ERROR<pos:position pos:line="334" pos:column="51"/></name></expr>;<pos:position pos:line="334" pos:column="52"/></return>
                }<pos:position pos:line="335" pos:column="18"/></block></then></if>

                <if pos:line="337" pos:column="17">if<condition pos:line="337" pos:column="19">(<expr><name><name pos:line="337" pos:column="20">k<pos:position pos:line="337" pos:column="21"/></name><operator pos:line="337" pos:column="21">-&gt;<pos:position pos:line="337" pos:column="26"/></operator><name pos:line="337" pos:column="23">httpversion<pos:position pos:line="337" pos:column="34"/></name></name> <operator pos:line="337" pos:column="35">==<pos:position pos:line="337" pos:column="37"/></operator> <literal type="number" pos:line="337" pos:column="38">10<pos:position pos:line="337" pos:column="40"/></literal></expr>)<pos:position pos:line="337" pos:column="41"/></condition><then pos:line="337" pos:column="41">
                  <comment type="block" pos:line="338" pos:column="19">/* Default action for HTTP/1.0 must be to close, unless
                     we get one of those fancy headers that tell us the
                     server keeps it open for us! */</comment>
                  <block type="pseudo"><expr_stmt><expr><name><name pos:line="341" pos:column="19">conn<pos:position pos:line="341" pos:column="23"/></name><operator pos:line="341" pos:column="23">-&gt;<pos:position pos:line="341" pos:column="28"/></operator><name pos:line="341" pos:column="25">bits<pos:position pos:line="341" pos:column="29"/></name><operator pos:line="341" pos:column="29">.<pos:position pos:line="341" pos:column="30"/></operator><name pos:line="341" pos:column="30">close<pos:position pos:line="341" pos:column="35"/></name></name> <operator pos:line="341" pos:column="36">=<pos:position pos:line="341" pos:column="37"/></operator> <name pos:line="341" pos:column="38">TRUE<pos:position pos:line="341" pos:column="42"/></name></expr>;<pos:position pos:line="341" pos:column="43"/></expr_stmt></block></then></if>

                <switch pos:line="343" pos:column="17">switch<condition pos:line="343" pos:column="23">(<expr><name><name pos:line="343" pos:column="24">k<pos:position pos:line="343" pos:column="25"/></name><operator pos:line="343" pos:column="25">-&gt;<pos:position pos:line="343" pos:column="30"/></operator><name pos:line="343" pos:column="27">httpcode<pos:position pos:line="343" pos:column="35"/></name></name></expr>)<pos:position pos:line="343" pos:column="36"/></condition> <block pos:line="343" pos:column="37">{
                <case pos:line="344" pos:column="17">case <expr><literal type="number" pos:line="344" pos:column="22">204<pos:position pos:line="344" pos:column="25"/></literal></expr>:<pos:position pos:line="344" pos:column="26"/></case>
                  <comment type="block" pos:line="345" pos:column="19">/* (quote from RFC2616, section 10.2.5): The server has
                   * fulfilled the request but does not need to return an
                   * entity-body ... The 204 response MUST NOT include a
                   * message-body, and thus is always terminated by the first
                   * empty line after the header fields. */</comment>
                  <comment type="block" pos:line="350" pos:column="19">/* FALLTHROUGH */</comment>
                <case pos:line="351" pos:column="17">case <expr><literal type="number" pos:line="351" pos:column="22">304<pos:position pos:line="351" pos:column="25"/></literal></expr>:<pos:position pos:line="351" pos:column="26"/></case>
                  <comment type="block" pos:line="352" pos:column="19">/* (quote from RFC2616, section 10.3.5): The 304 response MUST
                   * NOT contain a message-body, and thus is always terminated
                   * by the first empty line after the header fields.  */</comment>
                  <expr_stmt><expr><name><name pos:line="355" pos:column="19">conn<pos:position pos:line="355" pos:column="23"/></name><operator pos:line="355" pos:column="23">-&gt;<pos:position pos:line="355" pos:column="28"/></operator><name pos:line="355" pos:column="25">size<pos:position pos:line="355" pos:column="29"/></name></name><operator pos:line="355" pos:column="29">=<pos:position pos:line="355" pos:column="30"/></operator><literal type="number" pos:line="355" pos:column="30">0<pos:position pos:line="355" pos:column="31"/></literal></expr>;<pos:position pos:line="355" pos:column="32"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="356" pos:column="19">conn<pos:position pos:line="356" pos:column="23"/></name><operator pos:line="356" pos:column="23">-&gt;<pos:position pos:line="356" pos:column="28"/></operator><name pos:line="356" pos:column="25">maxdownload<pos:position pos:line="356" pos:column="36"/></name></name><operator pos:line="356" pos:column="36">=<pos:position pos:line="356" pos:column="37"/></operator><literal type="number" pos:line="356" pos:column="37">0<pos:position pos:line="356" pos:column="38"/></literal></expr>;<pos:position pos:line="356" pos:column="39"/></expr_stmt>
                  <break pos:line="357" pos:column="19">break;<pos:position pos:line="357" pos:column="25"/></break>
                <default pos:line="358" pos:column="17">default:<pos:position pos:line="358" pos:column="25"/></default>
                  <comment type="block" pos:line="359" pos:column="19">/* nothing */</comment>
                  <break pos:line="360" pos:column="19">break;<pos:position pos:line="360" pos:column="25"/></break>
                }<pos:position pos:line="361" pos:column="18"/></block></switch>
              }<pos:position pos:line="362" pos:column="16"/></block></then>
              <else pos:line="363" pos:column="15">else <block pos:line="363" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="364" pos:column="17">k<pos:position pos:line="364" pos:column="18"/></name><operator pos:line="364" pos:column="18">-&gt;<pos:position pos:line="364" pos:column="23"/></operator><name pos:line="364" pos:column="20">header<pos:position pos:line="364" pos:column="26"/></name></name> <operator pos:line="364" pos:column="27">=<pos:position pos:line="364" pos:column="28"/></operator> <name pos:line="364" pos:column="29">FALSE<pos:position pos:line="364" pos:column="34"/></name></expr>;<pos:position pos:line="364" pos:column="35"/></expr_stmt>   <comment type="block" pos:line="364" pos:column="38">/* this is not a header line */</comment>
                <break pos:line="365" pos:column="17">break;<pos:position pos:line="365" pos:column="23"/></break>
              }<pos:position pos:line="366" pos:column="16"/></block></else></if>
            }<pos:position pos:line="367" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="369" pos:column="13">/* check for Content-Length: header lines to get size */</comment>
            <if pos:line="370" pos:column="13">if <condition pos:line="370" pos:column="16">(<expr><call><name pos:line="370" pos:column="17">checkprefix<pos:position pos:line="370" pos:column="28"/></name><argument_list pos:line="370" pos:column="28">(<argument><expr><literal type="string" pos:line="370" pos:column="29">"Content-Length:"<pos:position pos:line="370" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="370" pos:column="48">k<pos:position pos:line="370" pos:column="49"/></name><operator pos:line="370" pos:column="49">-&gt;<pos:position pos:line="370" pos:column="54"/></operator><name pos:line="370" pos:column="51">p<pos:position pos:line="370" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="370" pos:column="53"/></argument_list></call> <operator pos:line="370" pos:column="54">&amp;&amp;<pos:position pos:line="370" pos:column="64"/></operator>
                <call><name pos:line="371" pos:column="17">sscanf<pos:position pos:line="371" pos:column="23"/></name> <argument_list pos:line="371" pos:column="24">(<argument><expr><name><name pos:line="371" pos:column="25">k<pos:position pos:line="371" pos:column="26"/></name><operator pos:line="371" pos:column="26">-&gt;<pos:position pos:line="371" pos:column="31"/></operator><name pos:line="371" pos:column="28">p<pos:position pos:line="371" pos:column="29"/></name></name><operator pos:line="371" pos:column="29">+<pos:position pos:line="371" pos:column="30"/></operator><literal type="number" pos:line="371" pos:column="30">15<pos:position pos:line="371" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="371" pos:column="34">" %ld"<pos:position pos:line="371" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="371" pos:column="42">&amp;<pos:position pos:line="371" pos:column="47"/></operator><name><name pos:line="371" pos:column="43">k<pos:position pos:line="371" pos:column="44"/></name><operator pos:line="371" pos:column="44">-&gt;<pos:position pos:line="371" pos:column="49"/></operator><name pos:line="371" pos:column="46">contentlength<pos:position pos:line="371" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="371" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="371" pos:column="61"/></condition><then pos:line="371" pos:column="61"> <block pos:line="371" pos:column="62">{
              <expr_stmt><expr><name><name pos:line="372" pos:column="15">conn<pos:position pos:line="372" pos:column="19"/></name><operator pos:line="372" pos:column="19">-&gt;<pos:position pos:line="372" pos:column="24"/></operator><name pos:line="372" pos:column="21">size<pos:position pos:line="372" pos:column="25"/></name></name> <operator pos:line="372" pos:column="26">=<pos:position pos:line="372" pos:column="27"/></operator> <name><name pos:line="372" pos:column="28">k<pos:position pos:line="372" pos:column="29"/></name><operator pos:line="372" pos:column="29">-&gt;<pos:position pos:line="372" pos:column="34"/></operator><name pos:line="372" pos:column="31">contentlength<pos:position pos:line="372" pos:column="44"/></name></name></expr>;<pos:position pos:line="372" pos:column="45"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="373" pos:column="15">Curl_pgrsSetDownloadSize<pos:position pos:line="373" pos:column="39"/></name><argument_list pos:line="373" pos:column="39">(<argument><expr><name pos:line="373" pos:column="40">data<pos:position pos:line="373" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="373" pos:column="46">k<pos:position pos:line="373" pos:column="47"/></name><operator pos:line="373" pos:column="47">-&gt;<pos:position pos:line="373" pos:column="52"/></operator><name pos:line="373" pos:column="49">contentlength<pos:position pos:line="373" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="373" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="64"/></expr_stmt>
            }<pos:position pos:line="374" pos:column="14"/></block></then>
            <comment type="block" pos:line="375" pos:column="13">/* check for Content-Type: header lines to get the mime-type */</comment>
            <elseif pos:line="376" pos:column="13">else <if pos:line="376" pos:column="18">if <condition pos:line="376" pos:column="21">(<expr><call><name pos:line="376" pos:column="22">checkprefix<pos:position pos:line="376" pos:column="33"/></name><argument_list pos:line="376" pos:column="33">(<argument><expr><literal type="string" pos:line="376" pos:column="34">"Content-Type:"<pos:position pos:line="376" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="376" pos:column="51">k<pos:position pos:line="376" pos:column="52"/></name><operator pos:line="376" pos:column="52">-&gt;<pos:position pos:line="376" pos:column="57"/></operator><name pos:line="376" pos:column="54">p<pos:position pos:line="376" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="376" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="376" pos:column="57"/></condition><then pos:line="376" pos:column="57"> <block pos:line="376" pos:column="58">{
              <decl_stmt><decl><type><name pos:line="377" pos:column="15">char<pos:position pos:line="377" pos:column="19"/></name> <modifier pos:line="377" pos:column="20">*<pos:position pos:line="377" pos:column="21"/></modifier></type><name pos:line="377" pos:column="21">start<pos:position pos:line="377" pos:column="26"/></name></decl>;<pos:position pos:line="377" pos:column="27"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="378" pos:column="15">char<pos:position pos:line="378" pos:column="19"/></name> <modifier pos:line="378" pos:column="20">*<pos:position pos:line="378" pos:column="21"/></modifier></type><name pos:line="378" pos:column="21">end<pos:position pos:line="378" pos:column="24"/></name></decl>;<pos:position pos:line="378" pos:column="25"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="379" pos:column="15">int<pos:position pos:line="379" pos:column="18"/></name></type> <name pos:line="379" pos:column="19">len<pos:position pos:line="379" pos:column="22"/></name></decl>;<pos:position pos:line="379" pos:column="23"/></decl_stmt>
              
              <comment type="block" pos:line="381" pos:column="15">/* Find the first non-space letter */</comment>
              <for pos:line="382" pos:column="15">for<control pos:line="382" pos:column="18">(<init><expr><name pos:line="382" pos:column="19">start<pos:position pos:line="382" pos:column="24"/></name><operator pos:line="382" pos:column="24">=<pos:position pos:line="382" pos:column="25"/></operator><name><name pos:line="382" pos:column="25">k<pos:position pos:line="382" pos:column="26"/></name><operator pos:line="382" pos:column="26">-&gt;<pos:position pos:line="382" pos:column="31"/></operator><name pos:line="382" pos:column="28">p<pos:position pos:line="382" pos:column="29"/></name></name><operator pos:line="382" pos:column="29">+<pos:position pos:line="382" pos:column="30"/></operator><literal type="number" pos:line="382" pos:column="30">14<pos:position pos:line="382" pos:column="32"/></literal></expr>;<pos:position pos:line="382" pos:column="33"/></init>
                  <condition><expr><operator pos:line="383" pos:column="19">*<pos:position pos:line="383" pos:column="20"/></operator><name pos:line="383" pos:column="20">start<pos:position pos:line="383" pos:column="25"/></name> <operator pos:line="383" pos:column="26">&amp;&amp;<pos:position pos:line="383" pos:column="36"/></operator> <call><name pos:line="383" pos:column="29">isspace<pos:position pos:line="383" pos:column="36"/></name><argument_list pos:line="383" pos:column="36">(<argument><expr><operator pos:line="383" pos:column="37">(<pos:position pos:line="383" pos:column="38"/></operator><name pos:line="383" pos:column="38">int<pos:position pos:line="383" pos:column="41"/></name><operator pos:line="383" pos:column="41">)<pos:position pos:line="383" pos:column="42"/></operator><operator pos:line="383" pos:column="42">*<pos:position pos:line="383" pos:column="43"/></operator><name pos:line="383" pos:column="43">start<pos:position pos:line="383" pos:column="48"/></name></expr></argument>)<pos:position pos:line="383" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="383" pos:column="50"/></condition>
                  <incr><expr><name pos:line="384" pos:column="19">start<pos:position pos:line="384" pos:column="24"/></name><operator pos:line="384" pos:column="24">++<pos:position pos:line="384" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="384" pos:column="27"/></control><block type="pseudo"><empty_stmt pos:line="384" pos:column="27">;<pos:position pos:line="384" pos:column="28"/></empty_stmt></block></for>

              <expr_stmt><expr><name pos:line="386" pos:column="15">end<pos:position pos:line="386" pos:column="18"/></name> <operator pos:line="386" pos:column="19">=<pos:position pos:line="386" pos:column="20"/></operator> <call><name pos:line="386" pos:column="21">strchr<pos:position pos:line="386" pos:column="27"/></name><argument_list pos:line="386" pos:column="27">(<argument><expr><name pos:line="386" pos:column="28">start<pos:position pos:line="386" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="386" pos:column="35">'\r'<pos:position pos:line="386" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="386" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="386" pos:column="41"/></expr_stmt>
              <if pos:line="387" pos:column="15">if<condition pos:line="387" pos:column="17">(<expr><operator pos:line="387" pos:column="18">!<pos:position pos:line="387" pos:column="19"/></operator><name pos:line="387" pos:column="19">end<pos:position pos:line="387" pos:column="22"/></name></expr>)<pos:position pos:line="387" pos:column="23"/></condition><then pos:line="387" pos:column="23">
                <block type="pseudo"><expr_stmt><expr><name pos:line="388" pos:column="17">end<pos:position pos:line="388" pos:column="20"/></name> <operator pos:line="388" pos:column="21">=<pos:position pos:line="388" pos:column="22"/></operator> <call><name pos:line="388" pos:column="23">strchr<pos:position pos:line="388" pos:column="29"/></name><argument_list pos:line="388" pos:column="29">(<argument><expr><name pos:line="388" pos:column="30">start<pos:position pos:line="388" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="388" pos:column="37">'\n'<pos:position pos:line="388" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="388" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="388" pos:column="43"/></expr_stmt></block></then></if>

              <if pos:line="390" pos:column="15">if<condition pos:line="390" pos:column="17">(<expr><name pos:line="390" pos:column="18">end<pos:position pos:line="390" pos:column="21"/></name></expr>)<pos:position pos:line="390" pos:column="22"/></condition><then pos:line="390" pos:column="22"> <block pos:line="390" pos:column="23">{
                <comment type="block" pos:line="391" pos:column="17">/* skip all trailing space letters */</comment>
                <for pos:line="392" pos:column="17">for<control pos:line="392" pos:column="20">(<init pos:line="392" pos:column="21">;<pos:position pos:line="392" pos:column="22"/></init> <condition><expr><call><name pos:line="392" pos:column="23">isspace<pos:position pos:line="392" pos:column="30"/></name><argument_list pos:line="392" pos:column="30">(<argument><expr><operator pos:line="392" pos:column="31">(<pos:position pos:line="392" pos:column="32"/></operator><name pos:line="392" pos:column="32">int<pos:position pos:line="392" pos:column="35"/></name><operator pos:line="392" pos:column="35">)<pos:position pos:line="392" pos:column="36"/></operator><operator pos:line="392" pos:column="36">*<pos:position pos:line="392" pos:column="37"/></operator><name pos:line="392" pos:column="37">end<pos:position pos:line="392" pos:column="40"/></name></expr></argument>)<pos:position pos:line="392" pos:column="41"/></argument_list></call> <operator pos:line="392" pos:column="42">&amp;&amp;<pos:position pos:line="392" pos:column="52"/></operator> <operator pos:line="392" pos:column="45">(<pos:position pos:line="392" pos:column="46"/></operator><name pos:line="392" pos:column="46">end<pos:position pos:line="392" pos:column="49"/></name> <operator pos:line="392" pos:column="50">&gt;<pos:position pos:line="392" pos:column="54"/></operator> <name pos:line="392" pos:column="52">start<pos:position pos:line="392" pos:column="57"/></name><operator pos:line="392" pos:column="57">)<pos:position pos:line="392" pos:column="58"/></operator></expr>;<pos:position pos:line="392" pos:column="59"/></condition> <incr><expr><name pos:line="392" pos:column="60">end<pos:position pos:line="392" pos:column="63"/></name><operator pos:line="392" pos:column="63">--<pos:position pos:line="392" pos:column="65"/></operator></expr></incr>)<pos:position pos:line="392" pos:column="66"/></control><block type="pseudo"><empty_stmt pos:line="392" pos:column="66">;<pos:position pos:line="392" pos:column="67"/></empty_stmt></block></for>

                <comment type="block" pos:line="394" pos:column="17">/* get length of the type */</comment>
                <expr_stmt><expr><name pos:line="395" pos:column="17">len<pos:position pos:line="395" pos:column="20"/></name> <operator pos:line="395" pos:column="21">=<pos:position pos:line="395" pos:column="22"/></operator> <name pos:line="395" pos:column="23">end<pos:position pos:line="395" pos:column="26"/></name><operator pos:line="395" pos:column="26">-<pos:position pos:line="395" pos:column="27"/></operator><name pos:line="395" pos:column="27">start<pos:position pos:line="395" pos:column="32"/></name><operator pos:line="395" pos:column="32">+<pos:position pos:line="395" pos:column="33"/></operator><literal type="number" pos:line="395" pos:column="33">1<pos:position pos:line="395" pos:column="34"/></literal></expr>;<pos:position pos:line="395" pos:column="35"/></expr_stmt>
              
                <comment type="block" pos:line="397" pos:column="17">/* allocate memory of a cloned copy */</comment>
                <if pos:line="398" pos:column="17">if<condition pos:line="398" pos:column="19">(<expr><name><name pos:line="398" pos:column="20">data<pos:position pos:line="398" pos:column="24"/></name><operator pos:line="398" pos:column="24">-&gt;<pos:position pos:line="398" pos:column="29"/></operator><name pos:line="398" pos:column="26">info<pos:position pos:line="398" pos:column="30"/></name><operator pos:line="398" pos:column="30">.<pos:position pos:line="398" pos:column="31"/></operator><name pos:line="398" pos:column="31">contenttype<pos:position pos:line="398" pos:column="42"/></name></name></expr>)<pos:position pos:line="398" pos:column="43"/></condition><then pos:line="398" pos:column="43">
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="399" pos:column="19">free<pos:position pos:line="399" pos:column="23"/></name><argument_list pos:line="399" pos:column="23">(<argument><expr><name><name pos:line="399" pos:column="24">data<pos:position pos:line="399" pos:column="28"/></name><operator pos:line="399" pos:column="28">-&gt;<pos:position pos:line="399" pos:column="33"/></operator><name pos:line="399" pos:column="30">info<pos:position pos:line="399" pos:column="34"/></name><operator pos:line="399" pos:column="34">.<pos:position pos:line="399" pos:column="35"/></operator><name pos:line="399" pos:column="35">contenttype<pos:position pos:line="399" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="399" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="399" pos:column="48"/></expr_stmt></block></then></if>
              
                <expr_stmt><expr><name><name pos:line="401" pos:column="17">data<pos:position pos:line="401" pos:column="21"/></name><operator pos:line="401" pos:column="21">-&gt;<pos:position pos:line="401" pos:column="26"/></operator><name pos:line="401" pos:column="23">info<pos:position pos:line="401" pos:column="27"/></name><operator pos:line="401" pos:column="27">.<pos:position pos:line="401" pos:column="28"/></operator><name pos:line="401" pos:column="28">contenttype<pos:position pos:line="401" pos:column="39"/></name></name> <operator pos:line="401" pos:column="40">=<pos:position pos:line="401" pos:column="41"/></operator> <call><name pos:line="401" pos:column="42">malloc<pos:position pos:line="401" pos:column="48"/></name><argument_list pos:line="401" pos:column="48">(<argument><expr><name pos:line="401" pos:column="49">len<pos:position pos:line="401" pos:column="52"/></name> <operator pos:line="401" pos:column="53">+<pos:position pos:line="401" pos:column="54"/></operator> <literal type="number" pos:line="401" pos:column="55">1<pos:position pos:line="401" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="401" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="401" pos:column="58"/></expr_stmt>
                <if pos:line="402" pos:column="17">if <condition pos:line="402" pos:column="20">(<expr><name pos:line="402" pos:column="21">NULL<pos:position pos:line="402" pos:column="25"/></name> <operator pos:line="402" pos:column="26">==<pos:position pos:line="402" pos:column="28"/></operator> <name><name pos:line="402" pos:column="29">data<pos:position pos:line="402" pos:column="33"/></name><operator pos:line="402" pos:column="33">-&gt;<pos:position pos:line="402" pos:column="38"/></operator><name pos:line="402" pos:column="35">info<pos:position pos:line="402" pos:column="39"/></name><operator pos:line="402" pos:column="39">.<pos:position pos:line="402" pos:column="40"/></operator><name pos:line="402" pos:column="40">contenttype<pos:position pos:line="402" pos:column="51"/></name></name></expr>)<pos:position pos:line="402" pos:column="52"/></condition><then pos:line="402" pos:column="52">
                  <block type="pseudo"><return pos:line="403" pos:column="19">return <expr><name pos:line="403" pos:column="26">CURLE_OUT_OF_MEMORY<pos:position pos:line="403" pos:column="45"/></name></expr>;<pos:position pos:line="403" pos:column="46"/></return></block></then></if>

                <comment type="block" pos:line="405" pos:column="17">/* copy the content-type string */</comment>
                <expr_stmt><expr><call><name pos:line="406" pos:column="17">memcpy<pos:position pos:line="406" pos:column="23"/></name><argument_list pos:line="406" pos:column="23">(<argument><expr><name><name pos:line="406" pos:column="24">data<pos:position pos:line="406" pos:column="28"/></name><operator pos:line="406" pos:column="28">-&gt;<pos:position pos:line="406" pos:column="33"/></operator><name pos:line="406" pos:column="30">info<pos:position pos:line="406" pos:column="34"/></name><operator pos:line="406" pos:column="34">.<pos:position pos:line="406" pos:column="35"/></operator><name pos:line="406" pos:column="35">contenttype<pos:position pos:line="406" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="406" pos:column="48">start<pos:position pos:line="406" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="406" pos:column="55">len<pos:position pos:line="406" pos:column="58"/></name></expr></argument>)<pos:position pos:line="406" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="406" pos:column="60"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="407" pos:column="17">data<pos:position pos:line="407" pos:column="21"/></name><operator pos:line="407" pos:column="21">-&gt;<pos:position pos:line="407" pos:column="26"/></operator><name pos:line="407" pos:column="23">info<pos:position pos:line="407" pos:column="27"/></name><operator pos:line="407" pos:column="27">.<pos:position pos:line="407" pos:column="28"/></operator><name pos:line="407" pos:column="28">contenttype<pos:position pos:line="407" pos:column="39"/></name><index pos:line="407" pos:column="39">[<expr><name pos:line="407" pos:column="40">len<pos:position pos:line="407" pos:column="43"/></name></expr>]<pos:position pos:line="407" pos:column="44"/></index></name> <operator pos:line="407" pos:column="45">=<pos:position pos:line="407" pos:column="46"/></operator> <literal type="number" pos:line="407" pos:column="47">0<pos:position pos:line="407" pos:column="48"/></literal></expr>;<pos:position pos:line="407" pos:column="49"/></expr_stmt> <comment type="block" pos:line="407" pos:column="50">/* zero terminate */</comment>
              }<pos:position pos:line="408" pos:column="16"/></block></then></if>
            }<pos:position pos:line="409" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="410" pos:column="13">else <if pos:line="410" pos:column="18">if<condition pos:line="410" pos:column="20">(<expr><operator pos:line="410" pos:column="21">(<pos:position pos:line="410" pos:column="22"/></operator><name><name pos:line="410" pos:column="22">k<pos:position pos:line="410" pos:column="23"/></name><operator pos:line="410" pos:column="23">-&gt;<pos:position pos:line="410" pos:column="28"/></operator><name pos:line="410" pos:column="25">httpversion<pos:position pos:line="410" pos:column="36"/></name></name> <operator pos:line="410" pos:column="37">==<pos:position pos:line="410" pos:column="39"/></operator> <literal type="number" pos:line="410" pos:column="40">10<pos:position pos:line="410" pos:column="42"/></literal><operator pos:line="410" pos:column="42">)<pos:position pos:line="410" pos:column="43"/></operator> <operator pos:line="410" pos:column="44">&amp;&amp;<pos:position pos:line="410" pos:column="54"/></operator>
                    <name><name pos:line="411" pos:column="21">conn<pos:position pos:line="411" pos:column="25"/></name><operator pos:line="411" pos:column="25">-&gt;<pos:position pos:line="411" pos:column="30"/></operator><name pos:line="411" pos:column="27">bits<pos:position pos:line="411" pos:column="31"/></name><operator pos:line="411" pos:column="31">.<pos:position pos:line="411" pos:column="32"/></operator><name pos:line="411" pos:column="32">httpproxy<pos:position pos:line="411" pos:column="41"/></name></name> <operator pos:line="411" pos:column="42">&amp;&amp;<pos:position pos:line="411" pos:column="52"/></operator>
                    <call><name pos:line="412" pos:column="21">Curl_compareheader<pos:position pos:line="412" pos:column="39"/></name><argument_list pos:line="412" pos:column="39">(<argument><expr><name><name pos:line="412" pos:column="40">k<pos:position pos:line="412" pos:column="41"/></name><operator pos:line="412" pos:column="41">-&gt;<pos:position pos:line="412" pos:column="46"/></operator><name pos:line="412" pos:column="43">p<pos:position pos:line="412" pos:column="44"/></name></name></expr></argument>,
                                       <argument><expr><literal type="string" pos:line="413" pos:column="40">"Proxy-Connection:"<pos:position pos:line="413" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="413" pos:column="61">"keep-alive"<pos:position pos:line="413" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="413" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="413" pos:column="75"/></condition><then pos:line="413" pos:column="75"> <block pos:line="413" pos:column="76">{
              <comment type="block" pos:line="414" pos:column="15">/*
               * When a HTTP/1.0 reply comes when using a proxy, the
               * 'Proxy-Connection: keep-alive' line tells us the
               * connection will be kept alive for our pleasure.
               * Default action for 1.0 is to close.
               */</comment>
              <expr_stmt><expr><name><name pos:line="420" pos:column="15">conn<pos:position pos:line="420" pos:column="19"/></name><operator pos:line="420" pos:column="19">-&gt;<pos:position pos:line="420" pos:column="24"/></operator><name pos:line="420" pos:column="21">bits<pos:position pos:line="420" pos:column="25"/></name><operator pos:line="420" pos:column="25">.<pos:position pos:line="420" pos:column="26"/></operator><name pos:line="420" pos:column="26">close<pos:position pos:line="420" pos:column="31"/></name></name> <operator pos:line="420" pos:column="32">=<pos:position pos:line="420" pos:column="33"/></operator> <name pos:line="420" pos:column="34">FALSE<pos:position pos:line="420" pos:column="39"/></name></expr>;<pos:position pos:line="420" pos:column="40"/></expr_stmt> <comment type="block" pos:line="420" pos:column="41">/* don't close when done */</comment>
              <expr_stmt><expr><call><name pos:line="421" pos:column="15">infof<pos:position pos:line="421" pos:column="20"/></name><argument_list pos:line="421" pos:column="20">(<argument><expr><name pos:line="421" pos:column="21">data<pos:position pos:line="421" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="421" pos:column="27">"HTTP/1.0 proxy connection set to keep alive!\n"<pos:position pos:line="421" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="421" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="421" pos:column="77"/></expr_stmt>
            }<pos:position pos:line="422" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="423" pos:column="13">else <if pos:line="423" pos:column="18">if<condition pos:line="423" pos:column="20">(<expr><operator pos:line="423" pos:column="21">(<pos:position pos:line="423" pos:column="22"/></operator><name><name pos:line="423" pos:column="22">k<pos:position pos:line="423" pos:column="23"/></name><operator pos:line="423" pos:column="23">-&gt;<pos:position pos:line="423" pos:column="28"/></operator><name pos:line="423" pos:column="25">httpversion<pos:position pos:line="423" pos:column="36"/></name></name> <operator pos:line="423" pos:column="37">==<pos:position pos:line="423" pos:column="39"/></operator> <literal type="number" pos:line="423" pos:column="40">10<pos:position pos:line="423" pos:column="42"/></literal><operator pos:line="423" pos:column="42">)<pos:position pos:line="423" pos:column="43"/></operator> <operator pos:line="423" pos:column="44">&amp;&amp;<pos:position pos:line="423" pos:column="54"/></operator>
                    <call><name pos:line="424" pos:column="21">Curl_compareheader<pos:position pos:line="424" pos:column="39"/></name><argument_list pos:line="424" pos:column="39">(<argument><expr><name><name pos:line="424" pos:column="40">k<pos:position pos:line="424" pos:column="41"/></name><operator pos:line="424" pos:column="41">-&gt;<pos:position pos:line="424" pos:column="46"/></operator><name pos:line="424" pos:column="43">p<pos:position pos:line="424" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="424" pos:column="46">"Connection:"<pos:position pos:line="424" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="424" pos:column="61">"keep-alive"<pos:position pos:line="424" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="424" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="424" pos:column="75"/></condition><then pos:line="424" pos:column="75"> <block pos:line="424" pos:column="76">{
              <comment type="block" pos:line="425" pos:column="15">/*
               * A HTTP/1.0 reply with the 'Connection: keep-alive' line
               * tells us the connection will be kept alive for our
               * pleasure.  Default action for 1.0 is to close.
               *
               * [RFC2068, section 19.7.1] */</comment>
              <expr_stmt><expr><name><name pos:line="431" pos:column="15">conn<pos:position pos:line="431" pos:column="19"/></name><operator pos:line="431" pos:column="19">-&gt;<pos:position pos:line="431" pos:column="24"/></operator><name pos:line="431" pos:column="21">bits<pos:position pos:line="431" pos:column="25"/></name><operator pos:line="431" pos:column="25">.<pos:position pos:line="431" pos:column="26"/></operator><name pos:line="431" pos:column="26">close<pos:position pos:line="431" pos:column="31"/></name></name> <operator pos:line="431" pos:column="32">=<pos:position pos:line="431" pos:column="33"/></operator> <name pos:line="431" pos:column="34">FALSE<pos:position pos:line="431" pos:column="39"/></name></expr>;<pos:position pos:line="431" pos:column="40"/></expr_stmt> <comment type="block" pos:line="431" pos:column="41">/* don't close when done */</comment>
              <expr_stmt><expr><call><name pos:line="432" pos:column="15">infof<pos:position pos:line="432" pos:column="20"/></name><argument_list pos:line="432" pos:column="20">(<argument><expr><name pos:line="432" pos:column="21">data<pos:position pos:line="432" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="432" pos:column="27">"HTTP/1.0 connection set to keep alive!\n"<pos:position pos:line="432" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="432" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="432" pos:column="71"/></expr_stmt>
            }<pos:position pos:line="433" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="434" pos:column="13">else <if pos:line="434" pos:column="18">if <condition pos:line="434" pos:column="21">(<expr><call><name pos:line="434" pos:column="22">Curl_compareheader<pos:position pos:line="434" pos:column="40"/></name><argument_list pos:line="434" pos:column="40">(<argument><expr><name><name pos:line="434" pos:column="41">k<pos:position pos:line="434" pos:column="42"/></name><operator pos:line="434" pos:column="42">-&gt;<pos:position pos:line="434" pos:column="47"/></operator><name pos:line="434" pos:column="44">p<pos:position pos:line="434" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="434" pos:column="47">"Connection:"<pos:position pos:line="434" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="434" pos:column="62">"close"<pos:position pos:line="434" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="434" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="434" pos:column="71"/></condition><then pos:line="434" pos:column="71"> <block pos:line="434" pos:column="72">{
              <comment type="block" pos:line="435" pos:column="15">/*
               * [RFC 2616, section 8.1.2.1]
               * "Connection: close" is HTTP/1.1 language and means that
               * the connection will close when this request has been
               * served.
               */</comment>
              <expr_stmt><expr><name><name pos:line="441" pos:column="15">conn<pos:position pos:line="441" pos:column="19"/></name><operator pos:line="441" pos:column="19">-&gt;<pos:position pos:line="441" pos:column="24"/></operator><name pos:line="441" pos:column="21">bits<pos:position pos:line="441" pos:column="25"/></name><operator pos:line="441" pos:column="25">.<pos:position pos:line="441" pos:column="26"/></operator><name pos:line="441" pos:column="26">close<pos:position pos:line="441" pos:column="31"/></name></name> <operator pos:line="441" pos:column="32">=<pos:position pos:line="441" pos:column="33"/></operator> <name pos:line="441" pos:column="34">TRUE<pos:position pos:line="441" pos:column="38"/></name></expr>;<pos:position pos:line="441" pos:column="39"/></expr_stmt> <comment type="block" pos:line="441" pos:column="40">/* close when done */</comment>
            }<pos:position pos:line="442" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="443" pos:column="13">else <if pos:line="443" pos:column="18">if <condition pos:line="443" pos:column="21">(<expr><call><name pos:line="443" pos:column="22">Curl_compareheader<pos:position pos:line="443" pos:column="40"/></name><argument_list pos:line="443" pos:column="40">(<argument><expr><name><name pos:line="443" pos:column="41">k<pos:position pos:line="443" pos:column="42"/></name><operator pos:line="443" pos:column="42">-&gt;<pos:position pos:line="443" pos:column="47"/></operator><name pos:line="443" pos:column="44">p<pos:position pos:line="443" pos:column="45"/></name></name></expr></argument>,
                                        <argument><expr><literal type="string" pos:line="444" pos:column="41">"Transfer-Encoding:"<pos:position pos:line="444" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="444" pos:column="63">"chunked"<pos:position pos:line="444" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="444" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="444" pos:column="74"/></condition><then pos:line="444" pos:column="74"> <block pos:line="444" pos:column="75">{
              <comment type="block" pos:line="445" pos:column="15">/*
               * [RFC 2616, section 3.6.1] A 'chunked' transfer encoding
               * means that the server will send a series of "chunks". Each
               * chunk starts with line with info (including size of the
               * coming block) (terminated with CRLF), then a block of data
               * with the previously mentioned size. There can be any amount
               * of chunks, and a chunk-data set to zero signals the
               * end-of-chunks. */</comment>
              <expr_stmt><expr><name><name pos:line="453" pos:column="15">conn<pos:position pos:line="453" pos:column="19"/></name><operator pos:line="453" pos:column="19">-&gt;<pos:position pos:line="453" pos:column="24"/></operator><name pos:line="453" pos:column="21">bits<pos:position pos:line="453" pos:column="25"/></name><operator pos:line="453" pos:column="25">.<pos:position pos:line="453" pos:column="26"/></operator><name pos:line="453" pos:column="26">chunk<pos:position pos:line="453" pos:column="31"/></name></name> <operator pos:line="453" pos:column="32">=<pos:position pos:line="453" pos:column="33"/></operator> <name pos:line="453" pos:column="34">TRUE<pos:position pos:line="453" pos:column="38"/></name></expr>;<pos:position pos:line="453" pos:column="39"/></expr_stmt> <comment type="block" pos:line="453" pos:column="40">/* chunks coming our way */</comment>

              <comment type="block" pos:line="455" pos:column="15">/* init our chunky engine */</comment>
              <expr_stmt><expr><call><name pos:line="456" pos:column="15">Curl_httpchunk_init<pos:position pos:line="456" pos:column="34"/></name><argument_list pos:line="456" pos:column="34">(<argument><expr><name pos:line="456" pos:column="35">conn<pos:position pos:line="456" pos:column="39"/></name></expr></argument>)<pos:position pos:line="456" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="456" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="457" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="458" pos:column="13">else <if pos:line="458" pos:column="18">if <condition pos:line="458" pos:column="21">(<expr><call><name pos:line="458" pos:column="22">checkprefix<pos:position pos:line="458" pos:column="33"/></name><argument_list pos:line="458" pos:column="33">(<argument><expr><literal type="string" pos:line="458" pos:column="34">"Content-Encoding:"<pos:position pos:line="458" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="458" pos:column="55">k<pos:position pos:line="458" pos:column="56"/></name><operator pos:line="458" pos:column="56">-&gt;<pos:position pos:line="458" pos:column="61"/></operator><name pos:line="458" pos:column="58">p<pos:position pos:line="458" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="458" pos:column="60"/></argument_list></call> <operator pos:line="458" pos:column="61">&amp;&amp;<pos:position pos:line="458" pos:column="71"/></operator>
                     <name><name pos:line="459" pos:column="22">data<pos:position pos:line="459" pos:column="26"/></name><operator pos:line="459" pos:column="26">-&gt;<pos:position pos:line="459" pos:column="31"/></operator><name pos:line="459" pos:column="28">set<pos:position pos:line="459" pos:column="31"/></name><operator pos:line="459" pos:column="31">.<pos:position pos:line="459" pos:column="32"/></operator><name pos:line="459" pos:column="32">encoding<pos:position pos:line="459" pos:column="40"/></name></name></expr>)<pos:position pos:line="459" pos:column="41"/></condition><then pos:line="459" pos:column="41"> <block pos:line="459" pos:column="42">{
              <comment type="block" pos:line="460" pos:column="15">/*
               * Process Content-Encoding. Look for the values: identity, gzip,
               * defalte, compress, x-gzip and x-compress. x-gzip and
               * x-compress are the same as gzip and compress. (Sec 3.5 RFC
               * 2616). zlib cannot handle compress, and gzip is not currently
               * implemented. However, errors are handled further down when the
               * response body is processed 08/27/02 jhrg */</comment>
              <decl_stmt><decl><type><name pos:line="467" pos:column="15">char<pos:position pos:line="467" pos:column="19"/></name> <modifier pos:line="467" pos:column="20">*<pos:position pos:line="467" pos:column="21"/></modifier></type><name pos:line="467" pos:column="21">start<pos:position pos:line="467" pos:column="26"/></name></decl>;<pos:position pos:line="467" pos:column="27"/></decl_stmt>

              <comment type="block" pos:line="469" pos:column="15">/* Find the first non-space letter */</comment>
              <for pos:line="470" pos:column="15">for<control pos:line="470" pos:column="18">(<init><expr><name pos:line="470" pos:column="19">start<pos:position pos:line="470" pos:column="24"/></name><operator pos:line="470" pos:column="24">=<pos:position pos:line="470" pos:column="25"/></operator><name><name pos:line="470" pos:column="25">k<pos:position pos:line="470" pos:column="26"/></name><operator pos:line="470" pos:column="26">-&gt;<pos:position pos:line="470" pos:column="31"/></operator><name pos:line="470" pos:column="28">p<pos:position pos:line="470" pos:column="29"/></name></name><operator pos:line="470" pos:column="29">+<pos:position pos:line="470" pos:column="30"/></operator><literal type="number" pos:line="470" pos:column="30">17<pos:position pos:line="470" pos:column="32"/></literal></expr>;<pos:position pos:line="470" pos:column="33"/></init>
                  <condition><expr><operator pos:line="471" pos:column="19">*<pos:position pos:line="471" pos:column="20"/></operator><name pos:line="471" pos:column="20">start<pos:position pos:line="471" pos:column="25"/></name> <operator pos:line="471" pos:column="26">&amp;&amp;<pos:position pos:line="471" pos:column="36"/></operator> <call><name pos:line="471" pos:column="29">isspace<pos:position pos:line="471" pos:column="36"/></name><argument_list pos:line="471" pos:column="36">(<argument><expr><operator pos:line="471" pos:column="37">(<pos:position pos:line="471" pos:column="38"/></operator><name pos:line="471" pos:column="38">int<pos:position pos:line="471" pos:column="41"/></name><operator pos:line="471" pos:column="41">)<pos:position pos:line="471" pos:column="42"/></operator><operator pos:line="471" pos:column="42">*<pos:position pos:line="471" pos:column="43"/></operator><name pos:line="471" pos:column="43">start<pos:position pos:line="471" pos:column="48"/></name></expr></argument>)<pos:position pos:line="471" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="471" pos:column="50"/></condition>
                  <incr><expr><name pos:line="472" pos:column="19">start<pos:position pos:line="472" pos:column="24"/></name><operator pos:line="472" pos:column="24">++<pos:position pos:line="472" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="472" pos:column="27"/></control><block type="pseudo"><empty_stmt pos:line="472" pos:column="27">;<pos:position pos:line="472" pos:column="28"/></empty_stmt></block></for>

              <comment type="block" pos:line="474" pos:column="15">/* Record the content-encoding for later use. 08/27/02 jhrg */</comment>
              <if pos:line="475" pos:column="15">if <condition pos:line="475" pos:column="18">(<expr><call><name pos:line="475" pos:column="19">checkprefix<pos:position pos:line="475" pos:column="30"/></name><argument_list pos:line="475" pos:column="30">(<argument><expr><literal type="string" pos:line="475" pos:column="31">"identity"<pos:position pos:line="475" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="475" pos:column="43">start<pos:position pos:line="475" pos:column="48"/></name></expr></argument>)<pos:position pos:line="475" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="475" pos:column="50"/></condition><then pos:line="475" pos:column="50">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="476" pos:column="17">k<pos:position pos:line="476" pos:column="18"/></name><operator pos:line="476" pos:column="18">-&gt;<pos:position pos:line="476" pos:column="23"/></operator><name pos:line="476" pos:column="20">content_encoding<pos:position pos:line="476" pos:column="36"/></name></name> <operator pos:line="476" pos:column="37">=<pos:position pos:line="476" pos:column="38"/></operator> <name pos:line="476" pos:column="39">IDENTITY<pos:position pos:line="476" pos:column="47"/></name></expr>;<pos:position pos:line="476" pos:column="48"/></expr_stmt></block></then>
              <elseif pos:line="477" pos:column="15">else <if pos:line="477" pos:column="20">if <condition pos:line="477" pos:column="23">(<expr><call><name pos:line="477" pos:column="24">checkprefix<pos:position pos:line="477" pos:column="35"/></name><argument_list pos:line="477" pos:column="35">(<argument><expr><literal type="string" pos:line="477" pos:column="36">"deflate"<pos:position pos:line="477" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="477" pos:column="47">start<pos:position pos:line="477" pos:column="52"/></name></expr></argument>)<pos:position pos:line="477" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="477" pos:column="54"/></condition><then pos:line="477" pos:column="54">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="478" pos:column="17">k<pos:position pos:line="478" pos:column="18"/></name><operator pos:line="478" pos:column="18">-&gt;<pos:position pos:line="478" pos:column="23"/></operator><name pos:line="478" pos:column="20">content_encoding<pos:position pos:line="478" pos:column="36"/></name></name> <operator pos:line="478" pos:column="37">=<pos:position pos:line="478" pos:column="38"/></operator> <name pos:line="478" pos:column="39">DEFLATE<pos:position pos:line="478" pos:column="46"/></name></expr>;<pos:position pos:line="478" pos:column="47"/></expr_stmt></block></then></if></elseif>
              <elseif pos:line="479" pos:column="15">else <if pos:line="479" pos:column="20">if <condition pos:line="479" pos:column="23">(<expr><call><name pos:line="479" pos:column="24">checkprefix<pos:position pos:line="479" pos:column="35"/></name><argument_list pos:line="479" pos:column="35">(<argument><expr><literal type="string" pos:line="479" pos:column="36">"gzip"<pos:position pos:line="479" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="479" pos:column="44">start<pos:position pos:line="479" pos:column="49"/></name></expr></argument>)<pos:position pos:line="479" pos:column="50"/></argument_list></call> 
                       <operator pos:line="480" pos:column="24">||<pos:position pos:line="480" pos:column="26"/></operator> <call><name pos:line="480" pos:column="27">checkprefix<pos:position pos:line="480" pos:column="38"/></name><argument_list pos:line="480" pos:column="38">(<argument><expr><literal type="string" pos:line="480" pos:column="39">"x-gzip"<pos:position pos:line="480" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="480" pos:column="49">start<pos:position pos:line="480" pos:column="54"/></name></expr></argument>)<pos:position pos:line="480" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="480" pos:column="56"/></condition><then pos:line="480" pos:column="56">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="481" pos:column="17">k<pos:position pos:line="481" pos:column="18"/></name><operator pos:line="481" pos:column="18">-&gt;<pos:position pos:line="481" pos:column="23"/></operator><name pos:line="481" pos:column="20">content_encoding<pos:position pos:line="481" pos:column="36"/></name></name> <operator pos:line="481" pos:column="37">=<pos:position pos:line="481" pos:column="38"/></operator> <name pos:line="481" pos:column="39">GZIP<pos:position pos:line="481" pos:column="43"/></name></expr>;<pos:position pos:line="481" pos:column="44"/></expr_stmt></block></then></if></elseif>
              <elseif pos:line="482" pos:column="15">else <if pos:line="482" pos:column="20">if <condition pos:line="482" pos:column="23">(<expr><call><name pos:line="482" pos:column="24">checkprefix<pos:position pos:line="482" pos:column="35"/></name><argument_list pos:line="482" pos:column="35">(<argument><expr><literal type="string" pos:line="482" pos:column="36">"compress"<pos:position pos:line="482" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="482" pos:column="48">start<pos:position pos:line="482" pos:column="53"/></name></expr></argument>)<pos:position pos:line="482" pos:column="54"/></argument_list></call> 
                       <operator pos:line="483" pos:column="24">||<pos:position pos:line="483" pos:column="26"/></operator> <call><name pos:line="483" pos:column="27">checkprefix<pos:position pos:line="483" pos:column="38"/></name><argument_list pos:line="483" pos:column="38">(<argument><expr><literal type="string" pos:line="483" pos:column="39">"x-compress"<pos:position pos:line="483" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="483" pos:column="53">start<pos:position pos:line="483" pos:column="58"/></name></expr></argument>)<pos:position pos:line="483" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="483" pos:column="60"/></condition><then pos:line="483" pos:column="60">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="484" pos:column="17">k<pos:position pos:line="484" pos:column="18"/></name><operator pos:line="484" pos:column="18">-&gt;<pos:position pos:line="484" pos:column="23"/></operator><name pos:line="484" pos:column="20">content_encoding<pos:position pos:line="484" pos:column="36"/></name></name> <operator pos:line="484" pos:column="37">=<pos:position pos:line="484" pos:column="38"/></operator> <name pos:line="484" pos:column="39">COMPRESS<pos:position pos:line="484" pos:column="47"/></name></expr>;<pos:position pos:line="484" pos:column="48"/></expr_stmt></block></then></if></elseif></if>
            }<pos:position pos:line="485" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="486" pos:column="13">else <if pos:line="486" pos:column="18">if <condition pos:line="486" pos:column="21">(<expr><call><name pos:line="486" pos:column="22">checkprefix<pos:position pos:line="486" pos:column="33"/></name><argument_list pos:line="486" pos:column="33">(<argument><expr><literal type="string" pos:line="486" pos:column="34">"Content-Range:"<pos:position pos:line="486" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="486" pos:column="52">k<pos:position pos:line="486" pos:column="53"/></name><operator pos:line="486" pos:column="53">-&gt;<pos:position pos:line="486" pos:column="58"/></operator><name pos:line="486" pos:column="55">p<pos:position pos:line="486" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="486" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="486" pos:column="58"/></condition><then pos:line="486" pos:column="58"> <block pos:line="486" pos:column="59">{
              <if pos:line="487" pos:column="15">if <condition pos:line="487" pos:column="18">(<expr><call><name pos:line="487" pos:column="19">sscanf<pos:position pos:line="487" pos:column="25"/></name> <argument_list pos:line="487" pos:column="26">(<argument><expr><name><name pos:line="487" pos:column="27">k<pos:position pos:line="487" pos:column="28"/></name><operator pos:line="487" pos:column="28">-&gt;<pos:position pos:line="487" pos:column="33"/></operator><name pos:line="487" pos:column="30">p<pos:position pos:line="487" pos:column="31"/></name></name><operator pos:line="487" pos:column="31">+<pos:position pos:line="487" pos:column="32"/></operator><literal type="number" pos:line="487" pos:column="32">14<pos:position pos:line="487" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="487" pos:column="36">" bytes %d-"<pos:position pos:line="487" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="487" pos:column="50">&amp;<pos:position pos:line="487" pos:column="55"/></operator><name><name pos:line="487" pos:column="51">k<pos:position pos:line="487" pos:column="52"/></name><operator pos:line="487" pos:column="52">-&gt;<pos:position pos:line="487" pos:column="57"/></operator><name pos:line="487" pos:column="54">offset<pos:position pos:line="487" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="487" pos:column="61"/></argument_list></call> <operator pos:line="487" pos:column="62">||<pos:position pos:line="487" pos:column="64"/></operator>
                  <call><name pos:line="488" pos:column="19">sscanf<pos:position pos:line="488" pos:column="25"/></name> <argument_list pos:line="488" pos:column="26">(<argument><expr><name><name pos:line="488" pos:column="27">k<pos:position pos:line="488" pos:column="28"/></name><operator pos:line="488" pos:column="28">-&gt;<pos:position pos:line="488" pos:column="33"/></operator><name pos:line="488" pos:column="30">p<pos:position pos:line="488" pos:column="31"/></name></name><operator pos:line="488" pos:column="31">+<pos:position pos:line="488" pos:column="32"/></operator><literal type="number" pos:line="488" pos:column="32">14<pos:position pos:line="488" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="488" pos:column="36">" bytes: %d-"<pos:position pos:line="488" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="488" pos:column="51">&amp;<pos:position pos:line="488" pos:column="56"/></operator><name><name pos:line="488" pos:column="52">k<pos:position pos:line="488" pos:column="53"/></name><operator pos:line="488" pos:column="53">-&gt;<pos:position pos:line="488" pos:column="58"/></operator><name pos:line="488" pos:column="55">offset<pos:position pos:line="488" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="488" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="488" pos:column="63"/></condition><then pos:line="488" pos:column="63"> <block pos:line="488" pos:column="64">{
                <comment type="block" pos:line="489" pos:column="17">/* This second format was added August 1st 2000 by Igor
                   Khristophorov since Sun's webserver JavaWebServer/1.1.1
                   obviously sends the header this way! :-( */</comment>
                <if pos:line="492" pos:column="17">if <condition pos:line="492" pos:column="20">(<expr><name><name pos:line="492" pos:column="21">conn<pos:position pos:line="492" pos:column="25"/></name><operator pos:line="492" pos:column="25">-&gt;<pos:position pos:line="492" pos:column="30"/></operator><name pos:line="492" pos:column="27">resume_from<pos:position pos:line="492" pos:column="38"/></name></name> <operator pos:line="492" pos:column="39">==<pos:position pos:line="492" pos:column="41"/></operator> <name><name pos:line="492" pos:column="42">k<pos:position pos:line="492" pos:column="43"/></name><operator pos:line="492" pos:column="43">-&gt;<pos:position pos:line="492" pos:column="48"/></operator><name pos:line="492" pos:column="45">offset<pos:position pos:line="492" pos:column="51"/></name></name></expr>)<pos:position pos:line="492" pos:column="52"/></condition><then pos:line="492" pos:column="52"> <block pos:line="492" pos:column="53">{
                  <comment type="block" pos:line="493" pos:column="19">/* we asked for a resume and we got it */</comment>
                  <expr_stmt><expr><name><name pos:line="494" pos:column="19">k<pos:position pos:line="494" pos:column="20"/></name><operator pos:line="494" pos:column="20">-&gt;<pos:position pos:line="494" pos:column="25"/></operator><name pos:line="494" pos:column="22">content_range<pos:position pos:line="494" pos:column="35"/></name></name> <operator pos:line="494" pos:column="36">=<pos:position pos:line="494" pos:column="37"/></operator> <name pos:line="494" pos:column="38">TRUE<pos:position pos:line="494" pos:column="42"/></name></expr>;<pos:position pos:line="494" pos:column="43"/></expr_stmt>
                }<pos:position pos:line="495" pos:column="18"/></block></then></if>
              }<pos:position pos:line="496" pos:column="16"/></block></then></if>
            }<pos:position pos:line="497" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="498" pos:column="13">else <if pos:line="498" pos:column="18">if<condition pos:line="498" pos:column="20">(<expr><name><name pos:line="498" pos:column="21">data<pos:position pos:line="498" pos:column="25"/></name><operator pos:line="498" pos:column="25">-&gt;<pos:position pos:line="498" pos:column="30"/></operator><name pos:line="498" pos:column="27">cookies<pos:position pos:line="498" pos:column="34"/></name></name> <operator pos:line="498" pos:column="35">&amp;&amp;<pos:position pos:line="498" pos:column="45"/></operator>
                    <call><name pos:line="499" pos:column="21">checkprefix<pos:position pos:line="499" pos:column="32"/></name><argument_list pos:line="499" pos:column="32">(<argument><expr><literal type="string" pos:line="499" pos:column="33">"Set-Cookie:"<pos:position pos:line="499" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="499" pos:column="48">k<pos:position pos:line="499" pos:column="49"/></name><operator pos:line="499" pos:column="49">-&gt;<pos:position pos:line="499" pos:column="54"/></operator><name pos:line="499" pos:column="51">p<pos:position pos:line="499" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="499" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="499" pos:column="54"/></condition><then pos:line="499" pos:column="54"> <block pos:line="499" pos:column="55">{
              <expr_stmt><expr><call><name pos:line="500" pos:column="15">Curl_cookie_add<pos:position pos:line="500" pos:column="30"/></name><argument_list pos:line="500" pos:column="30">(<argument><expr><name><name pos:line="500" pos:column="31">data<pos:position pos:line="500" pos:column="35"/></name><operator pos:line="500" pos:column="35">-&gt;<pos:position pos:line="500" pos:column="40"/></operator><name pos:line="500" pos:column="37">cookies<pos:position pos:line="500" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="500" pos:column="46">TRUE<pos:position pos:line="500" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="500" pos:column="52">k<pos:position pos:line="500" pos:column="53"/></name><operator pos:line="500" pos:column="53">-&gt;<pos:position pos:line="500" pos:column="58"/></operator><name pos:line="500" pos:column="55">p<pos:position pos:line="500" pos:column="56"/></name></name><operator pos:line="500" pos:column="56">+<pos:position pos:line="500" pos:column="57"/></operator><literal type="number" pos:line="500" pos:column="57">11<pos:position pos:line="500" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="500" pos:column="61">conn<pos:position pos:line="500" pos:column="65"/></name><operator pos:line="500" pos:column="65">-&gt;<pos:position pos:line="500" pos:column="70"/></operator><name pos:line="500" pos:column="67">name<pos:position pos:line="500" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="500" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="500" pos:column="73"/></expr_stmt>
            }<pos:position pos:line="501" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="502" pos:column="13">else <if pos:line="502" pos:column="18">if<condition pos:line="502" pos:column="20">(<expr><call><name pos:line="502" pos:column="21">checkprefix<pos:position pos:line="502" pos:column="32"/></name><argument_list pos:line="502" pos:column="32">(<argument><expr><literal type="string" pos:line="502" pos:column="33">"Last-Modified:"<pos:position pos:line="502" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="502" pos:column="51">k<pos:position pos:line="502" pos:column="52"/></name><operator pos:line="502" pos:column="52">-&gt;<pos:position pos:line="502" pos:column="57"/></operator><name pos:line="502" pos:column="54">p<pos:position pos:line="502" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="502" pos:column="56"/></argument_list></call> <operator pos:line="502" pos:column="57">&amp;&amp;<pos:position pos:line="502" pos:column="67"/></operator>
                    <operator pos:line="503" pos:column="21">(<pos:position pos:line="503" pos:column="22"/></operator><name><name pos:line="503" pos:column="22">data<pos:position pos:line="503" pos:column="26"/></name><operator pos:line="503" pos:column="26">-&gt;<pos:position pos:line="503" pos:column="31"/></operator><name pos:line="503" pos:column="28">set<pos:position pos:line="503" pos:column="31"/></name><operator pos:line="503" pos:column="31">.<pos:position pos:line="503" pos:column="32"/></operator><name pos:line="503" pos:column="32">timecondition<pos:position pos:line="503" pos:column="45"/></name></name> <operator pos:line="503" pos:column="46">||<pos:position pos:line="503" pos:column="48"/></operator> <name><name pos:line="503" pos:column="49">data<pos:position pos:line="503" pos:column="53"/></name><operator pos:line="503" pos:column="53">-&gt;<pos:position pos:line="503" pos:column="58"/></operator><name pos:line="503" pos:column="55">set<pos:position pos:line="503" pos:column="58"/></name><operator pos:line="503" pos:column="58">.<pos:position pos:line="503" pos:column="59"/></operator><name pos:line="503" pos:column="59">get_filetime<pos:position pos:line="503" pos:column="71"/></name></name><operator pos:line="503" pos:column="71">)<pos:position pos:line="503" pos:column="72"/></operator></expr> )<pos:position pos:line="503" pos:column="74"/></condition><then pos:line="503" pos:column="74"> <block pos:line="503" pos:column="75">{
              <decl_stmt><decl><type><name pos:line="504" pos:column="15">time_t<pos:position pos:line="504" pos:column="21"/></name></type> <name pos:line="504" pos:column="22">secs<pos:position pos:line="504" pos:column="26"/></name><init pos:line="504" pos:column="26">=<expr><call><name pos:line="504" pos:column="27">time<pos:position pos:line="504" pos:column="31"/></name><argument_list pos:line="504" pos:column="31">(<argument><expr><name pos:line="504" pos:column="32">NULL<pos:position pos:line="504" pos:column="36"/></name></expr></argument>)<pos:position pos:line="504" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="504" pos:column="38"/></decl_stmt>
              <expr_stmt><expr><name><name pos:line="505" pos:column="15">k<pos:position pos:line="505" pos:column="16"/></name><operator pos:line="505" pos:column="16">-&gt;<pos:position pos:line="505" pos:column="21"/></operator><name pos:line="505" pos:column="18">timeofdoc<pos:position pos:line="505" pos:column="27"/></name></name> <operator pos:line="505" pos:column="28">=<pos:position pos:line="505" pos:column="29"/></operator> <call><name pos:line="505" pos:column="30">curl_getdate<pos:position pos:line="505" pos:column="42"/></name><argument_list pos:line="505" pos:column="42">(<argument><expr><name><name pos:line="505" pos:column="43">k<pos:position pos:line="505" pos:column="44"/></name><operator pos:line="505" pos:column="44">-&gt;<pos:position pos:line="505" pos:column="49"/></operator><name pos:line="505" pos:column="46">p<pos:position pos:line="505" pos:column="47"/></name></name><operator pos:line="505" pos:column="47">+<pos:position pos:line="505" pos:column="48"/></operator><call><name pos:line="505" pos:column="48">strlen<pos:position pos:line="505" pos:column="54"/></name><argument_list pos:line="505" pos:column="54">(<argument><expr><literal type="string" pos:line="505" pos:column="55">"Last-Modified:"<pos:position pos:line="505" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="505" pos:column="72"/></argument_list></call></expr></argument>,
                                          <argument><expr><operator pos:line="506" pos:column="43">&amp;<pos:position pos:line="506" pos:column="48"/></operator><name pos:line="506" pos:column="44">secs<pos:position pos:line="506" pos:column="48"/></name></expr></argument>)<pos:position pos:line="506" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="506" pos:column="50"/></expr_stmt>
              <if pos:line="507" pos:column="15">if<condition pos:line="507" pos:column="17">(<expr><name><name pos:line="507" pos:column="18">data<pos:position pos:line="507" pos:column="22"/></name><operator pos:line="507" pos:column="22">-&gt;<pos:position pos:line="507" pos:column="27"/></operator><name pos:line="507" pos:column="24">set<pos:position pos:line="507" pos:column="27"/></name><operator pos:line="507" pos:column="27">.<pos:position pos:line="507" pos:column="28"/></operator><name pos:line="507" pos:column="28">get_filetime<pos:position pos:line="507" pos:column="40"/></name></name></expr>)<pos:position pos:line="507" pos:column="41"/></condition><then pos:line="507" pos:column="41">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="508" pos:column="17">data<pos:position pos:line="508" pos:column="21"/></name><operator pos:line="508" pos:column="21">-&gt;<pos:position pos:line="508" pos:column="26"/></operator><name pos:line="508" pos:column="23">info<pos:position pos:line="508" pos:column="27"/></name><operator pos:line="508" pos:column="27">.<pos:position pos:line="508" pos:column="28"/></operator><name pos:line="508" pos:column="28">filetime<pos:position pos:line="508" pos:column="36"/></name></name> <operator pos:line="508" pos:column="37">=<pos:position pos:line="508" pos:column="38"/></operator> <name><name pos:line="508" pos:column="39">k<pos:position pos:line="508" pos:column="40"/></name><operator pos:line="508" pos:column="40">-&gt;<pos:position pos:line="508" pos:column="45"/></operator><name pos:line="508" pos:column="42">timeofdoc<pos:position pos:line="508" pos:column="51"/></name></name></expr>;<pos:position pos:line="508" pos:column="52"/></expr_stmt></block></then></if>
            }<pos:position pos:line="509" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="510" pos:column="13">else <if pos:line="510" pos:column="18">if <condition pos:line="510" pos:column="21">(<expr><operator pos:line="510" pos:column="22">(<pos:position pos:line="510" pos:column="23"/></operator><name><name pos:line="510" pos:column="23">k<pos:position pos:line="510" pos:column="24"/></name><operator pos:line="510" pos:column="24">-&gt;<pos:position pos:line="510" pos:column="29"/></operator><name pos:line="510" pos:column="26">httpcode<pos:position pos:line="510" pos:column="34"/></name></name> <operator pos:line="510" pos:column="35">&gt;=<pos:position pos:line="510" pos:column="40"/></operator> <literal type="number" pos:line="510" pos:column="38">300<pos:position pos:line="510" pos:column="41"/></literal> <operator pos:line="510" pos:column="42">&amp;&amp;<pos:position pos:line="510" pos:column="52"/></operator> <name><name pos:line="510" pos:column="45">k<pos:position pos:line="510" pos:column="46"/></name><operator pos:line="510" pos:column="46">-&gt;<pos:position pos:line="510" pos:column="51"/></operator><name pos:line="510" pos:column="48">httpcode<pos:position pos:line="510" pos:column="56"/></name></name> <operator pos:line="510" pos:column="57">&lt;<pos:position pos:line="510" pos:column="61"/></operator> <literal type="number" pos:line="510" pos:column="59">400<pos:position pos:line="510" pos:column="62"/></literal><operator pos:line="510" pos:column="62">)<pos:position pos:line="510" pos:column="63"/></operator> <operator pos:line="510" pos:column="64">&amp;&amp;<pos:position pos:line="510" pos:column="74"/></operator>
                     <operator pos:line="511" pos:column="22">(<pos:position pos:line="511" pos:column="23"/></operator><name><name pos:line="511" pos:column="23">data<pos:position pos:line="511" pos:column="27"/></name><operator pos:line="511" pos:column="27">-&gt;<pos:position pos:line="511" pos:column="32"/></operator><name pos:line="511" pos:column="29">set<pos:position pos:line="511" pos:column="32"/></name><operator pos:line="511" pos:column="32">.<pos:position pos:line="511" pos:column="33"/></operator><name pos:line="511" pos:column="33">http_follow_location<pos:position pos:line="511" pos:column="53"/></name></name><operator pos:line="511" pos:column="53">)<pos:position pos:line="511" pos:column="54"/></operator> <operator pos:line="511" pos:column="55">&amp;&amp;<pos:position pos:line="511" pos:column="65"/></operator>
                     <call><name pos:line="512" pos:column="22">checkprefix<pos:position pos:line="512" pos:column="33"/></name><argument_list pos:line="512" pos:column="33">(<argument><expr><literal type="string" pos:line="512" pos:column="34">"Location:"<pos:position pos:line="512" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="512" pos:column="47">k<pos:position pos:line="512" pos:column="48"/></name><operator pos:line="512" pos:column="48">-&gt;<pos:position pos:line="512" pos:column="53"/></operator><name pos:line="512" pos:column="50">p<pos:position pos:line="512" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="512" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="512" pos:column="53"/></condition><then pos:line="512" pos:column="53"> <block pos:line="512" pos:column="54">{
              <comment type="block" pos:line="513" pos:column="15">/* this is the URL that the server advices us to get instead */</comment>
              <decl_stmt><decl><type><name pos:line="514" pos:column="15">char<pos:position pos:line="514" pos:column="19"/></name> <modifier pos:line="514" pos:column="20">*<pos:position pos:line="514" pos:column="21"/></modifier></type><name pos:line="514" pos:column="21">ptr<pos:position pos:line="514" pos:column="24"/></name></decl>;<pos:position pos:line="514" pos:column="25"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="515" pos:column="15">char<pos:position pos:line="515" pos:column="19"/></name> <modifier pos:line="515" pos:column="20">*<pos:position pos:line="515" pos:column="21"/></modifier></type><name pos:line="515" pos:column="21">start<pos:position pos:line="515" pos:column="26"/></name><init pos:line="515" pos:column="26">=<expr><name><name pos:line="515" pos:column="27">k<pos:position pos:line="515" pos:column="28"/></name><operator pos:line="515" pos:column="28">-&gt;<pos:position pos:line="515" pos:column="33"/></operator><name pos:line="515" pos:column="30">p<pos:position pos:line="515" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="515" pos:column="32"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="516" pos:column="15">char<pos:position pos:line="516" pos:column="19"/></name></type> <name pos:line="516" pos:column="20">backup<pos:position pos:line="516" pos:column="26"/></name></decl>;<pos:position pos:line="516" pos:column="27"/></decl_stmt>

              <expr_stmt><expr><name pos:line="518" pos:column="15">start<pos:position pos:line="518" pos:column="20"/></name> <operator pos:line="518" pos:column="21">+=<pos:position pos:line="518" pos:column="23"/></operator> <literal type="number" pos:line="518" pos:column="24">9<pos:position pos:line="518" pos:column="25"/></literal></expr>;<pos:position pos:line="518" pos:column="26"/></expr_stmt> <comment type="block" pos:line="518" pos:column="27">/* pass "Location:" */</comment>

              <comment type="block" pos:line="520" pos:column="15">/* Skip spaces and tabs. We do this to support multiple
                 white spaces after the "Location:" keyword. */</comment>
              <while pos:line="522" pos:column="15">while<condition pos:line="522" pos:column="20">(<expr><operator pos:line="522" pos:column="21">*<pos:position pos:line="522" pos:column="22"/></operator><name pos:line="522" pos:column="22">start<pos:position pos:line="522" pos:column="27"/></name> <operator pos:line="522" pos:column="28">&amp;&amp;<pos:position pos:line="522" pos:column="38"/></operator> <call><name pos:line="522" pos:column="31">isspace<pos:position pos:line="522" pos:column="38"/></name><argument_list pos:line="522" pos:column="38">(<argument><expr><operator pos:line="522" pos:column="39">(<pos:position pos:line="522" pos:column="40"/></operator><name pos:line="522" pos:column="40">int<pos:position pos:line="522" pos:column="43"/></name><operator pos:line="522" pos:column="43">)<pos:position pos:line="522" pos:column="44"/></operator><operator pos:line="522" pos:column="44">*<pos:position pos:line="522" pos:column="45"/></operator><name pos:line="522" pos:column="45">start<pos:position pos:line="522" pos:column="50"/></name></expr></argument> )<pos:position pos:line="522" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="522" pos:column="53"/></condition>
                <block type="pseudo"><expr_stmt><expr><name pos:line="523" pos:column="17">start<pos:position pos:line="523" pos:column="22"/></name><operator pos:line="523" pos:column="22">++<pos:position pos:line="523" pos:column="24"/></operator></expr>;<pos:position pos:line="523" pos:column="25"/></expr_stmt></block></while>
              <expr_stmt><expr><name pos:line="524" pos:column="15">ptr<pos:position pos:line="524" pos:column="18"/></name> <operator pos:line="524" pos:column="19">=<pos:position pos:line="524" pos:column="20"/></operator> <name pos:line="524" pos:column="21">start<pos:position pos:line="524" pos:column="26"/></name></expr>;<pos:position pos:line="524" pos:column="27"/></expr_stmt> <comment type="block" pos:line="524" pos:column="28">/* start scanning here */</comment>

              <comment type="block" pos:line="526" pos:column="15">/* scan through the string to find the end */</comment>
              <while pos:line="527" pos:column="15">while<condition pos:line="527" pos:column="20">(<expr><operator pos:line="527" pos:column="21">*<pos:position pos:line="527" pos:column="22"/></operator><name pos:line="527" pos:column="22">ptr<pos:position pos:line="527" pos:column="25"/></name> <operator pos:line="527" pos:column="26">&amp;&amp;<pos:position pos:line="527" pos:column="36"/></operator> <operator pos:line="527" pos:column="29">!<pos:position pos:line="527" pos:column="30"/></operator><call><name pos:line="527" pos:column="30">isspace<pos:position pos:line="527" pos:column="37"/></name><argument_list pos:line="527" pos:column="37">(<argument><expr><operator pos:line="527" pos:column="38">(<pos:position pos:line="527" pos:column="39"/></operator><name pos:line="527" pos:column="39">int<pos:position pos:line="527" pos:column="42"/></name><operator pos:line="527" pos:column="42">)<pos:position pos:line="527" pos:column="43"/></operator><operator pos:line="527" pos:column="43">*<pos:position pos:line="527" pos:column="44"/></operator><name pos:line="527" pos:column="44">ptr<pos:position pos:line="527" pos:column="47"/></name></expr></argument>)<pos:position pos:line="527" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="527" pos:column="49"/></condition>
                <block type="pseudo"><expr_stmt><expr><name pos:line="528" pos:column="17">ptr<pos:position pos:line="528" pos:column="20"/></name><operator pos:line="528" pos:column="20">++<pos:position pos:line="528" pos:column="22"/></operator></expr>;<pos:position pos:line="528" pos:column="23"/></expr_stmt></block></while>
              <expr_stmt><expr><name pos:line="529" pos:column="15">backup<pos:position pos:line="529" pos:column="21"/></name> <operator pos:line="529" pos:column="22">=<pos:position pos:line="529" pos:column="23"/></operator> <operator pos:line="529" pos:column="24">*<pos:position pos:line="529" pos:column="25"/></operator><name pos:line="529" pos:column="25">ptr<pos:position pos:line="529" pos:column="28"/></name></expr>;<pos:position pos:line="529" pos:column="29"/></expr_stmt> <comment type="block" pos:line="529" pos:column="30">/* store the ending letter */</comment>
              <if pos:line="530" pos:column="15">if<condition pos:line="530" pos:column="17">(<expr><name pos:line="530" pos:column="18">ptr<pos:position pos:line="530" pos:column="21"/></name> <operator pos:line="530" pos:column="22">!=<pos:position pos:line="530" pos:column="24"/></operator> <name pos:line="530" pos:column="25">start<pos:position pos:line="530" pos:column="30"/></name></expr>)<pos:position pos:line="530" pos:column="31"/></condition><then pos:line="530" pos:column="31"> <block pos:line="530" pos:column="32">{
                <expr_stmt><expr><operator pos:line="531" pos:column="17">*<pos:position pos:line="531" pos:column="18"/></operator><name pos:line="531" pos:column="18">ptr<pos:position pos:line="531" pos:column="21"/></name> <operator pos:line="531" pos:column="22">=<pos:position pos:line="531" pos:column="23"/></operator> <literal type="char" pos:line="531" pos:column="24">'\0'<pos:position pos:line="531" pos:column="28"/></literal></expr>;<pos:position pos:line="531" pos:column="29"/></expr_stmt>   <comment type="block" pos:line="531" pos:column="32">/* zero terminate */</comment>
                <expr_stmt><expr><name><name pos:line="532" pos:column="17">conn<pos:position pos:line="532" pos:column="21"/></name><operator pos:line="532" pos:column="21">-&gt;<pos:position pos:line="532" pos:column="26"/></operator><name pos:line="532" pos:column="23">newurl<pos:position pos:line="532" pos:column="29"/></name></name> <operator pos:line="532" pos:column="30">=<pos:position pos:line="532" pos:column="31"/></operator> <call><name pos:line="532" pos:column="32">strdup<pos:position pos:line="532" pos:column="38"/></name><argument_list pos:line="532" pos:column="38">(<argument><expr><name pos:line="532" pos:column="39">start<pos:position pos:line="532" pos:column="44"/></name></expr></argument>)<pos:position pos:line="532" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="532" pos:column="46"/></expr_stmt> <comment type="block" pos:line="532" pos:column="47">/* clone string */</comment>
                <expr_stmt><expr><operator pos:line="533" pos:column="17">*<pos:position pos:line="533" pos:column="18"/></operator><name pos:line="533" pos:column="18">ptr<pos:position pos:line="533" pos:column="21"/></name> <operator pos:line="533" pos:column="22">=<pos:position pos:line="533" pos:column="23"/></operator> <name pos:line="533" pos:column="24">backup<pos:position pos:line="533" pos:column="30"/></name></expr>;<pos:position pos:line="533" pos:column="31"/></expr_stmt> <comment type="block" pos:line="533" pos:column="32">/* restore ending letter */</comment>
              }<pos:position pos:line="534" pos:column="16"/></block></then></if>
            }<pos:position pos:line="535" pos:column="14"/></block></then></if></elseif></if>

            <comment type="block" pos:line="537" pos:column="13">/*
             * End of header-checks. Write them to the client.
             */</comment>

            <expr_stmt><expr><name><name pos:line="541" pos:column="13">k<pos:position pos:line="541" pos:column="14"/></name><operator pos:line="541" pos:column="14">-&gt;<pos:position pos:line="541" pos:column="19"/></operator><name pos:line="541" pos:column="16">writetype<pos:position pos:line="541" pos:column="25"/></name></name> <operator pos:line="541" pos:column="26">=<pos:position pos:line="541" pos:column="27"/></operator> <name pos:line="541" pos:column="28">CLIENTWRITE_HEADER<pos:position pos:line="541" pos:column="46"/></name></expr>;<pos:position pos:line="541" pos:column="47"/></expr_stmt>
            <if pos:line="542" pos:column="13">if <condition pos:line="542" pos:column="16">(<expr><name><name pos:line="542" pos:column="17">data<pos:position pos:line="542" pos:column="21"/></name><operator pos:line="542" pos:column="21">-&gt;<pos:position pos:line="542" pos:column="26"/></operator><name pos:line="542" pos:column="23">set<pos:position pos:line="542" pos:column="26"/></name><operator pos:line="542" pos:column="26">.<pos:position pos:line="542" pos:column="27"/></operator><name pos:line="542" pos:column="27">http_include_header<pos:position pos:line="542" pos:column="46"/></name></name></expr>)<pos:position pos:line="542" pos:column="47"/></condition><then pos:line="542" pos:column="47">
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="543" pos:column="15">k<pos:position pos:line="543" pos:column="16"/></name><operator pos:line="543" pos:column="16">-&gt;<pos:position pos:line="543" pos:column="21"/></operator><name pos:line="543" pos:column="18">writetype<pos:position pos:line="543" pos:column="27"/></name></name> <operator pos:line="543" pos:column="28">|=<pos:position pos:line="543" pos:column="30"/></operator> <name pos:line="543" pos:column="31">CLIENTWRITE_BODY<pos:position pos:line="543" pos:column="47"/></name></expr>;<pos:position pos:line="543" pos:column="48"/></expr_stmt></block></then></if>

            <if pos:line="545" pos:column="13">if<condition pos:line="545" pos:column="15">(<expr><name><name pos:line="545" pos:column="16">data<pos:position pos:line="545" pos:column="20"/></name><operator pos:line="545" pos:column="20">-&gt;<pos:position pos:line="545" pos:column="25"/></operator><name pos:line="545" pos:column="22">set<pos:position pos:line="545" pos:column="25"/></name><operator pos:line="545" pos:column="25">.<pos:position pos:line="545" pos:column="26"/></operator><name pos:line="545" pos:column="26">verbose<pos:position pos:line="545" pos:column="33"/></name></name></expr>)<pos:position pos:line="545" pos:column="34"/></condition><then pos:line="545" pos:column="34">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="546" pos:column="15">Curl_debug<pos:position pos:line="546" pos:column="25"/></name><argument_list pos:line="546" pos:column="25">(<argument><expr><name pos:line="546" pos:column="26">data<pos:position pos:line="546" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="546" pos:column="32">CURLINFO_HEADER_IN<pos:position pos:line="546" pos:column="50"/></name></expr></argument>,
                         <argument><expr><name><name pos:line="547" pos:column="26">k<pos:position pos:line="547" pos:column="27"/></name><operator pos:line="547" pos:column="27">-&gt;<pos:position pos:line="547" pos:column="32"/></operator><name pos:line="547" pos:column="29">p<pos:position pos:line="547" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="547" pos:column="32">k<pos:position pos:line="547" pos:column="33"/></name><operator pos:line="547" pos:column="33">-&gt;<pos:position pos:line="547" pos:column="38"/></operator><name pos:line="547" pos:column="35">hbuflen<pos:position pos:line="547" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="547" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="547" pos:column="44"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name pos:line="549" pos:column="13">result<pos:position pos:line="549" pos:column="19"/></name> <operator pos:line="549" pos:column="20">=<pos:position pos:line="549" pos:column="21"/></operator> <call><name pos:line="549" pos:column="22">Curl_client_write<pos:position pos:line="549" pos:column="39"/></name><argument_list pos:line="549" pos:column="39">(<argument><expr><name pos:line="549" pos:column="40">data<pos:position pos:line="549" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="549" pos:column="46">k<pos:position pos:line="549" pos:column="47"/></name><operator pos:line="549" pos:column="47">-&gt;<pos:position pos:line="549" pos:column="52"/></operator><name pos:line="549" pos:column="49">writetype<pos:position pos:line="549" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="549" pos:column="60">k<pos:position pos:line="549" pos:column="61"/></name><operator pos:line="549" pos:column="61">-&gt;<pos:position pos:line="549" pos:column="66"/></operator><name pos:line="549" pos:column="63">p<pos:position pos:line="549" pos:column="64"/></name></name></expr></argument>,
                                       <argument><expr><name><name pos:line="550" pos:column="40">k<pos:position pos:line="550" pos:column="41"/></name><operator pos:line="550" pos:column="41">-&gt;<pos:position pos:line="550" pos:column="46"/></operator><name pos:line="550" pos:column="43">hbuflen<pos:position pos:line="550" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="550" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="550" pos:column="52"/></expr_stmt>
            <if pos:line="551" pos:column="13">if<condition pos:line="551" pos:column="15">(<expr><name pos:line="551" pos:column="16">result<pos:position pos:line="551" pos:column="22"/></name></expr>)<pos:position pos:line="551" pos:column="23"/></condition><then pos:line="551" pos:column="23">
              <block type="pseudo"><return pos:line="552" pos:column="15">return <expr><name pos:line="552" pos:column="22">result<pos:position pos:line="552" pos:column="28"/></name></expr>;<pos:position pos:line="552" pos:column="29"/></return></block></then></if>

            <expr_stmt><expr><name><name pos:line="554" pos:column="13">data<pos:position pos:line="554" pos:column="17"/></name><operator pos:line="554" pos:column="17">-&gt;<pos:position pos:line="554" pos:column="22"/></operator><name pos:line="554" pos:column="19">info<pos:position pos:line="554" pos:column="23"/></name><operator pos:line="554" pos:column="23">.<pos:position pos:line="554" pos:column="24"/></operator><name pos:line="554" pos:column="24">header_size<pos:position pos:line="554" pos:column="35"/></name></name> <operator pos:line="554" pos:column="36">+=<pos:position pos:line="554" pos:column="38"/></operator> <name><name pos:line="554" pos:column="39">k<pos:position pos:line="554" pos:column="40"/></name><operator pos:line="554" pos:column="40">-&gt;<pos:position pos:line="554" pos:column="45"/></operator><name pos:line="554" pos:column="42">hbuflen<pos:position pos:line="554" pos:column="49"/></name></name></expr>;<pos:position pos:line="554" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="555" pos:column="13">conn<pos:position pos:line="555" pos:column="17"/></name><operator pos:line="555" pos:column="17">-&gt;<pos:position pos:line="555" pos:column="22"/></operator><name pos:line="555" pos:column="19">headerbytecount<pos:position pos:line="555" pos:column="34"/></name></name> <operator pos:line="555" pos:column="35">+=<pos:position pos:line="555" pos:column="37"/></operator> <name><name pos:line="555" pos:column="38">k<pos:position pos:line="555" pos:column="39"/></name><operator pos:line="555" pos:column="39">-&gt;<pos:position pos:line="555" pos:column="44"/></operator><name pos:line="555" pos:column="41">hbuflen<pos:position pos:line="555" pos:column="48"/></name></name></expr>;<pos:position pos:line="555" pos:column="49"/></expr_stmt>
              
            <comment type="block" pos:line="557" pos:column="13">/* reset hbufp pointer &amp;&amp; hbuflen */</comment>
            <expr_stmt><expr><name><name pos:line="558" pos:column="13">k<pos:position pos:line="558" pos:column="14"/></name><operator pos:line="558" pos:column="14">-&gt;<pos:position pos:line="558" pos:column="19"/></operator><name pos:line="558" pos:column="16">hbufp<pos:position pos:line="558" pos:column="21"/></name></name> <operator pos:line="558" pos:column="22">=<pos:position pos:line="558" pos:column="23"/></operator> <name><name pos:line="558" pos:column="24">data<pos:position pos:line="558" pos:column="28"/></name><operator pos:line="558" pos:column="28">-&gt;<pos:position pos:line="558" pos:column="33"/></operator><name pos:line="558" pos:column="30">state<pos:position pos:line="558" pos:column="35"/></name><operator pos:line="558" pos:column="35">.<pos:position pos:line="558" pos:column="36"/></operator><name pos:line="558" pos:column="36">headerbuff<pos:position pos:line="558" pos:column="46"/></name></name></expr>;<pos:position pos:line="558" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="559" pos:column="13">k<pos:position pos:line="559" pos:column="14"/></name><operator pos:line="559" pos:column="14">-&gt;<pos:position pos:line="559" pos:column="19"/></operator><name pos:line="559" pos:column="16">hbuflen<pos:position pos:line="559" pos:column="23"/></name></name> <operator pos:line="559" pos:column="24">=<pos:position pos:line="559" pos:column="25"/></operator> <literal type="number" pos:line="559" pos:column="26">0<pos:position pos:line="559" pos:column="27"/></literal></expr>;<pos:position pos:line="559" pos:column="28"/></expr_stmt>
          }<pos:position pos:line="560" pos:column="12"/></block>
          while <condition pos:line="561" pos:column="17">(<expr><operator pos:line="561" pos:column="18">!<pos:position pos:line="561" pos:column="19"/></operator><name pos:line="561" pos:column="19">stop_reading<pos:position pos:line="561" pos:column="31"/></name> <operator pos:line="561" pos:column="32">&amp;&amp;<pos:position pos:line="561" pos:column="42"/></operator> <operator pos:line="561" pos:column="35">*<pos:position pos:line="561" pos:column="36"/></operator><name><name pos:line="561" pos:column="36">k<pos:position pos:line="561" pos:column="37"/></name><operator pos:line="561" pos:column="37">-&gt;<pos:position pos:line="561" pos:column="42"/></operator><name pos:line="561" pos:column="39">str<pos:position pos:line="561" pos:column="42"/></name></name></expr>)<pos:position pos:line="561" pos:column="43"/></condition>;<pos:position pos:line="561" pos:column="44"/></do> <comment type="block" pos:line="561" pos:column="45">/* header line within buffer */</comment>

          <if pos:line="563" pos:column="11">if<condition pos:line="563" pos:column="13">(<expr><name pos:line="563" pos:column="14">stop_reading<pos:position pos:line="563" pos:column="26"/></name></expr>)<pos:position pos:line="563" pos:column="27"/></condition><then pos:line="563" pos:column="27">
            <comment type="block" pos:line="564" pos:column="13">/* We've stopped dealing with input, get out of the do-while loop */</comment>
            <block type="pseudo"><break pos:line="565" pos:column="13">break;<pos:position pos:line="565" pos:column="19"/></break></block></then></if>

          <comment type="block" pos:line="567" pos:column="11">/* We might have reached the end of the header part here, but
             there might be a non-header part left in the end of the read
             buffer. */</comment>

        }<pos:position pos:line="571" pos:column="10"/></block></then></if>                       <comment type="block" pos:line="571" pos:column="33">/* end if header mode */</comment>

        <comment type="block" pos:line="573" pos:column="9">/* This is not an 'else if' since it may be a rest from the header
           parsing, where the beginning of the buffer is headers and the end
           is non-headers. */</comment>
        <if pos:line="576" pos:column="9">if <condition pos:line="576" pos:column="12">(<expr><name><name pos:line="576" pos:column="13">k<pos:position pos:line="576" pos:column="14"/></name><operator pos:line="576" pos:column="14">-&gt;<pos:position pos:line="576" pos:column="19"/></operator><name pos:line="576" pos:column="16">str<pos:position pos:line="576" pos:column="19"/></name></name> <operator pos:line="576" pos:column="20">&amp;&amp;<pos:position pos:line="576" pos:column="30"/></operator> <operator pos:line="576" pos:column="23">!<pos:position pos:line="576" pos:column="24"/></operator><name><name pos:line="576" pos:column="24">k<pos:position pos:line="576" pos:column="25"/></name><operator pos:line="576" pos:column="25">-&gt;<pos:position pos:line="576" pos:column="30"/></operator><name pos:line="576" pos:column="27">header<pos:position pos:line="576" pos:column="33"/></name></name> <operator pos:line="576" pos:column="34">&amp;&amp;<pos:position pos:line="576" pos:column="44"/></operator> <operator pos:line="576" pos:column="37">(<pos:position pos:line="576" pos:column="38"/></operator><name pos:line="576" pos:column="38">nread<pos:position pos:line="576" pos:column="43"/></name> <operator pos:line="576" pos:column="44">&gt;<pos:position pos:line="576" pos:column="48"/></operator> <literal type="number" pos:line="576" pos:column="46">0<pos:position pos:line="576" pos:column="47"/></literal><operator pos:line="576" pos:column="47">)<pos:position pos:line="576" pos:column="48"/></operator></expr>)<pos:position pos:line="576" pos:column="49"/></condition><then pos:line="576" pos:column="49"> <block pos:line="576" pos:column="50">{
            
          <if pos:line="578" pos:column="11">if<condition pos:line="578" pos:column="13">(<expr><literal type="number" pos:line="578" pos:column="14">0<pos:position pos:line="578" pos:column="15"/></literal> <operator pos:line="578" pos:column="16">==<pos:position pos:line="578" pos:column="18"/></operator> <name><name pos:line="578" pos:column="19">k<pos:position pos:line="578" pos:column="20"/></name><operator pos:line="578" pos:column="20">-&gt;<pos:position pos:line="578" pos:column="25"/></operator><name pos:line="578" pos:column="22">bodywrites<pos:position pos:line="578" pos:column="32"/></name></name></expr>)<pos:position pos:line="578" pos:column="33"/></condition><then pos:line="578" pos:column="33"> <block pos:line="578" pos:column="34">{
            <comment type="block" pos:line="579" pos:column="13">/* These checks are only made the first time we are about to
               write a piece of the body */</comment>
            <if pos:line="581" pos:column="13">if<condition pos:line="581" pos:column="15">(<expr><name><name pos:line="581" pos:column="16">conn<pos:position pos:line="581" pos:column="20"/></name><operator pos:line="581" pos:column="20">-&gt;<pos:position pos:line="581" pos:column="25"/></operator><name pos:line="581" pos:column="22">protocol<pos:position pos:line="581" pos:column="30"/></name></name><operator pos:line="581" pos:column="30">&amp;<pos:position pos:line="581" pos:column="35"/></operator><name pos:line="581" pos:column="31">PROT_HTTP<pos:position pos:line="581" pos:column="40"/></name></expr>)<pos:position pos:line="581" pos:column="41"/></condition><then pos:line="581" pos:column="41"> <block pos:line="581" pos:column="42">{
              <comment type="block" pos:line="582" pos:column="15">/* HTTP-only checks */</comment>
              <if pos:line="583" pos:column="15">if <condition pos:line="583" pos:column="18">(<expr><name><name pos:line="583" pos:column="19">conn<pos:position pos:line="583" pos:column="23"/></name><operator pos:line="583" pos:column="23">-&gt;<pos:position pos:line="583" pos:column="28"/></operator><name pos:line="583" pos:column="25">newurl<pos:position pos:line="583" pos:column="31"/></name></name></expr>)<pos:position pos:line="583" pos:column="32"/></condition><then pos:line="583" pos:column="32"> <block pos:line="583" pos:column="33">{
                <comment type="block" pos:line="584" pos:column="17">/* abort after the headers if "follow Location" is set */</comment>
                <expr_stmt><expr><call><name pos:line="585" pos:column="17">infof<pos:position pos:line="585" pos:column="22"/></name> <argument_list pos:line="585" pos:column="23">(<argument><expr><name pos:line="585" pos:column="24">data<pos:position pos:line="585" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="585" pos:column="30">"Follow to new URL: %s\n"<pos:position pos:line="585" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="585" pos:column="57">conn<pos:position pos:line="585" pos:column="61"/></name><operator pos:line="585" pos:column="61">-&gt;<pos:position pos:line="585" pos:column="66"/></operator><name pos:line="585" pos:column="63">newurl<pos:position pos:line="585" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="585" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="585" pos:column="71"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="586" pos:column="17">k<pos:position pos:line="586" pos:column="18"/></name><operator pos:line="586" pos:column="18">-&gt;<pos:position pos:line="586" pos:column="23"/></operator><name pos:line="586" pos:column="20">keepon<pos:position pos:line="586" pos:column="26"/></name></name> <operator pos:line="586" pos:column="27">&amp;=<pos:position pos:line="586" pos:column="33"/></operator> <operator pos:line="586" pos:column="30">~<pos:position pos:line="586" pos:column="31"/></operator><name pos:line="586" pos:column="31">KEEP_READ<pos:position pos:line="586" pos:column="40"/></name></expr>;<pos:position pos:line="586" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="587" pos:column="17">FD_ZERO<pos:position pos:line="587" pos:column="24"/></name><argument_list pos:line="587" pos:column="24">(<argument><expr><operator pos:line="587" pos:column="25">&amp;<pos:position pos:line="587" pos:column="30"/></operator><name><name pos:line="587" pos:column="26">k<pos:position pos:line="587" pos:column="27"/></name><operator pos:line="587" pos:column="27">-&gt;<pos:position pos:line="587" pos:column="32"/></operator><name pos:line="587" pos:column="29">rkeepfd<pos:position pos:line="587" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="587" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="587" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="588" pos:column="17">*<pos:position pos:line="588" pos:column="18"/></operator><name pos:line="588" pos:column="18">done<pos:position pos:line="588" pos:column="22"/></name> <operator pos:line="588" pos:column="23">=<pos:position pos:line="588" pos:column="24"/></operator> <name pos:line="588" pos:column="25">TRUE<pos:position pos:line="588" pos:column="29"/></name></expr>;<pos:position pos:line="588" pos:column="30"/></expr_stmt>
                <return pos:line="589" pos:column="17">return <expr><name pos:line="589" pos:column="24">CURLE_OK<pos:position pos:line="589" pos:column="32"/></name></expr>;<pos:position pos:line="589" pos:column="33"/></return>
              }<pos:position pos:line="590" pos:column="16"/></block></then>
              <elseif pos:line="591" pos:column="15">else <if pos:line="591" pos:column="20">if <condition pos:line="591" pos:column="23">(<expr><name><name pos:line="591" pos:column="24">conn<pos:position pos:line="591" pos:column="28"/></name><operator pos:line="591" pos:column="28">-&gt;<pos:position pos:line="591" pos:column="33"/></operator><name pos:line="591" pos:column="30">resume_from<pos:position pos:line="591" pos:column="41"/></name></name> <operator pos:line="591" pos:column="42">&amp;&amp;<pos:position pos:line="591" pos:column="52"/></operator>
                       <operator pos:line="592" pos:column="24">!<pos:position pos:line="592" pos:column="25"/></operator><name><name pos:line="592" pos:column="25">k<pos:position pos:line="592" pos:column="26"/></name><operator pos:line="592" pos:column="26">-&gt;<pos:position pos:line="592" pos:column="31"/></operator><name pos:line="592" pos:column="28">content_range<pos:position pos:line="592" pos:column="41"/></name></name> <operator pos:line="592" pos:column="42">&amp;&amp;<pos:position pos:line="592" pos:column="52"/></operator>
                       <operator pos:line="593" pos:column="24">(<pos:position pos:line="593" pos:column="25"/></operator><name><name pos:line="593" pos:column="25">data<pos:position pos:line="593" pos:column="29"/></name><operator pos:line="593" pos:column="29">-&gt;<pos:position pos:line="593" pos:column="34"/></operator><name pos:line="593" pos:column="31">set<pos:position pos:line="593" pos:column="34"/></name><operator pos:line="593" pos:column="34">.<pos:position pos:line="593" pos:column="35"/></operator><name pos:line="593" pos:column="35">httpreq<pos:position pos:line="593" pos:column="42"/></name></name><operator pos:line="593" pos:column="42">==<pos:position pos:line="593" pos:column="44"/></operator><name pos:line="593" pos:column="44">HTTPREQ_GET<pos:position pos:line="593" pos:column="55"/></name><operator pos:line="593" pos:column="55">)<pos:position pos:line="593" pos:column="56"/></operator></expr>)<pos:position pos:line="593" pos:column="57"/></condition><then pos:line="593" pos:column="57"> <block pos:line="593" pos:column="58">{
                <comment type="block" pos:line="594" pos:column="17">/* we wanted to resume a download, although the server
                   doesn't seem to support this and we did this with a GET
                   (if it wasn't a GET we did a POST or PUT resume) */</comment>
                <expr_stmt><expr><call><name pos:line="597" pos:column="17">failf<pos:position pos:line="597" pos:column="22"/></name> <argument_list pos:line="597" pos:column="23">(<argument><expr><name pos:line="597" pos:column="24">data<pos:position pos:line="597" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="597" pos:column="30">"HTTP server doesn't seem to support "<pos:position pos:line="597" pos:column="68"/></literal>
                       <literal type="string" pos:line="598" pos:column="24">"byte ranges. Cannot resume."<pos:position pos:line="598" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="598" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="598" pos:column="55"/></expr_stmt>
                <return pos:line="599" pos:column="17">return <expr><name pos:line="599" pos:column="24">CURLE_HTTP_RANGE_ERROR<pos:position pos:line="599" pos:column="46"/></name></expr>;<pos:position pos:line="599" pos:column="47"/></return>
              }<pos:position pos:line="600" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="601" pos:column="15">else <if pos:line="601" pos:column="20">if<condition pos:line="601" pos:column="22">(<expr><name><name pos:line="601" pos:column="23">data<pos:position pos:line="601" pos:column="27"/></name><operator pos:line="601" pos:column="27">-&gt;<pos:position pos:line="601" pos:column="32"/></operator><name pos:line="601" pos:column="29">set<pos:position pos:line="601" pos:column="32"/></name><operator pos:line="601" pos:column="32">.<pos:position pos:line="601" pos:column="33"/></operator><name pos:line="601" pos:column="33">timecondition<pos:position pos:line="601" pos:column="46"/></name></name> <operator pos:line="601" pos:column="47">&amp;&amp;<pos:position pos:line="601" pos:column="57"/></operator> <operator pos:line="601" pos:column="50">!<pos:position pos:line="601" pos:column="51"/></operator><name><name pos:line="601" pos:column="51">conn<pos:position pos:line="601" pos:column="55"/></name><operator pos:line="601" pos:column="55">-&gt;<pos:position pos:line="601" pos:column="60"/></operator><name pos:line="601" pos:column="57">range<pos:position pos:line="601" pos:column="62"/></name></name></expr>)<pos:position pos:line="601" pos:column="63"/></condition><then pos:line="601" pos:column="63"> <block pos:line="601" pos:column="64">{
                <comment type="block" pos:line="602" pos:column="17">/* A time condition has been set AND no ranges have been
                   requested. This seems to be what chapter 13.3.4 of
                   RFC 2616 defines to be the correct action for a
                   HTTP/1.1 client */</comment>
                <if pos:line="606" pos:column="17">if<condition pos:line="606" pos:column="19">(<expr><operator pos:line="606" pos:column="20">(<pos:position pos:line="606" pos:column="21"/></operator><name><name pos:line="606" pos:column="21">k<pos:position pos:line="606" pos:column="22"/></name><operator pos:line="606" pos:column="22">-&gt;<pos:position pos:line="606" pos:column="27"/></operator><name pos:line="606" pos:column="24">timeofdoc<pos:position pos:line="606" pos:column="33"/></name></name> <operator pos:line="606" pos:column="34">&gt;<pos:position pos:line="606" pos:column="38"/></operator> <literal type="number" pos:line="606" pos:column="36">0<pos:position pos:line="606" pos:column="37"/></literal><operator pos:line="606" pos:column="37">)<pos:position pos:line="606" pos:column="38"/></operator> <operator pos:line="606" pos:column="39">&amp;&amp;<pos:position pos:line="606" pos:column="49"/></operator> <operator pos:line="606" pos:column="42">(<pos:position pos:line="606" pos:column="43"/></operator><name><name pos:line="606" pos:column="43">data<pos:position pos:line="606" pos:column="47"/></name><operator pos:line="606" pos:column="47">-&gt;<pos:position pos:line="606" pos:column="52"/></operator><name pos:line="606" pos:column="49">set<pos:position pos:line="606" pos:column="52"/></name><operator pos:line="606" pos:column="52">.<pos:position pos:line="606" pos:column="53"/></operator><name pos:line="606" pos:column="53">timevalue<pos:position pos:line="606" pos:column="62"/></name></name> <operator pos:line="606" pos:column="63">&gt;<pos:position pos:line="606" pos:column="67"/></operator> <literal type="number" pos:line="606" pos:column="65">0<pos:position pos:line="606" pos:column="66"/></literal><operator pos:line="606" pos:column="66">)<pos:position pos:line="606" pos:column="67"/></operator></expr>)<pos:position pos:line="606" pos:column="68"/></condition><then pos:line="606" pos:column="68"> <block pos:line="606" pos:column="69">{
                  <switch pos:line="607" pos:column="19">switch<condition pos:line="607" pos:column="25">(<expr><name><name pos:line="607" pos:column="26">data<pos:position pos:line="607" pos:column="30"/></name><operator pos:line="607" pos:column="30">-&gt;<pos:position pos:line="607" pos:column="35"/></operator><name pos:line="607" pos:column="32">set<pos:position pos:line="607" pos:column="35"/></name><operator pos:line="607" pos:column="35">.<pos:position pos:line="607" pos:column="36"/></operator><name pos:line="607" pos:column="36">timecondition<pos:position pos:line="607" pos:column="49"/></name></name></expr>)<pos:position pos:line="607" pos:column="50"/></condition> <block pos:line="607" pos:column="51">{
                  <case pos:line="608" pos:column="19">case <expr><name pos:line="608" pos:column="24">TIMECOND_IFMODSINCE<pos:position pos:line="608" pos:column="43"/></name></expr>:<pos:position pos:line="608" pos:column="44"/></case>
                  <default pos:line="609" pos:column="19">default:<pos:position pos:line="609" pos:column="27"/></default>
                    <if pos:line="610" pos:column="21">if<condition pos:line="610" pos:column="23">(<expr><name><name pos:line="610" pos:column="24">k<pos:position pos:line="610" pos:column="25"/></name><operator pos:line="610" pos:column="25">-&gt;<pos:position pos:line="610" pos:column="30"/></operator><name pos:line="610" pos:column="27">timeofdoc<pos:position pos:line="610" pos:column="36"/></name></name> <operator pos:line="610" pos:column="37">&lt;<pos:position pos:line="610" pos:column="41"/></operator> <name><name pos:line="610" pos:column="39">data<pos:position pos:line="610" pos:column="43"/></name><operator pos:line="610" pos:column="43">-&gt;<pos:position pos:line="610" pos:column="48"/></operator><name pos:line="610" pos:column="45">set<pos:position pos:line="610" pos:column="48"/></name><operator pos:line="610" pos:column="48">.<pos:position pos:line="610" pos:column="49"/></operator><name pos:line="610" pos:column="49">timevalue<pos:position pos:line="610" pos:column="58"/></name></name></expr>)<pos:position pos:line="610" pos:column="59"/></condition><then pos:line="610" pos:column="59"> <block pos:line="610" pos:column="60">{
                      <expr_stmt><expr><call><name pos:line="611" pos:column="23">infof<pos:position pos:line="611" pos:column="28"/></name><argument_list pos:line="611" pos:column="28">(<argument><expr><name pos:line="611" pos:column="29">data<pos:position pos:line="611" pos:column="33"/></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="612" pos:column="29">"The requested document is not new enough\n"<pos:position pos:line="612" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="612" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="612" pos:column="75"/></expr_stmt>
                      <expr_stmt><expr><operator pos:line="613" pos:column="23">*<pos:position pos:line="613" pos:column="24"/></operator><name pos:line="613" pos:column="24">done<pos:position pos:line="613" pos:column="28"/></name> <operator pos:line="613" pos:column="29">=<pos:position pos:line="613" pos:column="30"/></operator> <name pos:line="613" pos:column="31">TRUE<pos:position pos:line="613" pos:column="35"/></name></expr>;<pos:position pos:line="613" pos:column="36"/></expr_stmt>
                      <return pos:line="614" pos:column="23">return <expr><name pos:line="614" pos:column="30">CURLE_OK<pos:position pos:line="614" pos:column="38"/></name></expr>;<pos:position pos:line="614" pos:column="39"/></return>
                    }<pos:position pos:line="615" pos:column="22"/></block></then></if>
                    <break pos:line="616" pos:column="21">break;<pos:position pos:line="616" pos:column="27"/></break>
                  <case pos:line="617" pos:column="19">case <expr><name pos:line="617" pos:column="24">TIMECOND_IFUNMODSINCE<pos:position pos:line="617" pos:column="45"/></name></expr>:<pos:position pos:line="617" pos:column="46"/></case>
                    <if pos:line="618" pos:column="21">if<condition pos:line="618" pos:column="23">(<expr><name><name pos:line="618" pos:column="24">k<pos:position pos:line="618" pos:column="25"/></name><operator pos:line="618" pos:column="25">-&gt;<pos:position pos:line="618" pos:column="30"/></operator><name pos:line="618" pos:column="27">timeofdoc<pos:position pos:line="618" pos:column="36"/></name></name> <operator pos:line="618" pos:column="37">&gt;<pos:position pos:line="618" pos:column="41"/></operator> <name><name pos:line="618" pos:column="39">data<pos:position pos:line="618" pos:column="43"/></name><operator pos:line="618" pos:column="43">-&gt;<pos:position pos:line="618" pos:column="48"/></operator><name pos:line="618" pos:column="45">set<pos:position pos:line="618" pos:column="48"/></name><operator pos:line="618" pos:column="48">.<pos:position pos:line="618" pos:column="49"/></operator><name pos:line="618" pos:column="49">timevalue<pos:position pos:line="618" pos:column="58"/></name></name></expr>)<pos:position pos:line="618" pos:column="59"/></condition><then pos:line="618" pos:column="59"> <block pos:line="618" pos:column="60">{
                      <expr_stmt><expr><call><name pos:line="619" pos:column="23">infof<pos:position pos:line="619" pos:column="28"/></name><argument_list pos:line="619" pos:column="28">(<argument><expr><name pos:line="619" pos:column="29">data<pos:position pos:line="619" pos:column="33"/></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="620" pos:column="29">"The requested document is not old enough\n"<pos:position pos:line="620" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="620" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="620" pos:column="75"/></expr_stmt>
                      <expr_stmt><expr><operator pos:line="621" pos:column="23">*<pos:position pos:line="621" pos:column="24"/></operator><name pos:line="621" pos:column="24">done<pos:position pos:line="621" pos:column="28"/></name> <operator pos:line="621" pos:column="29">=<pos:position pos:line="621" pos:column="30"/></operator> <name pos:line="621" pos:column="31">TRUE<pos:position pos:line="621" pos:column="35"/></name></expr>;<pos:position pos:line="621" pos:column="36"/></expr_stmt>
                      <return pos:line="622" pos:column="23">return <expr><name pos:line="622" pos:column="30">CURLE_OK<pos:position pos:line="622" pos:column="38"/></name></expr>;<pos:position pos:line="622" pos:column="39"/></return>
                    }<pos:position pos:line="623" pos:column="22"/></block></then></if>
                    <break pos:line="624" pos:column="21">break;<pos:position pos:line="624" pos:column="27"/></break>
                  }<pos:position pos:line="625" pos:column="20"/></block></switch> <comment type="block" pos:line="625" pos:column="21">/* switch */</comment>
                }<pos:position pos:line="626" pos:column="18"/></block></then></if> <comment type="block" pos:line="626" pos:column="19">/* two valid time strings */</comment>
              }<pos:position pos:line="627" pos:column="16"/></block></then></if></elseif></if> <comment type="block" pos:line="627" pos:column="17">/* we have a time condition */</comment>

            }<pos:position pos:line="629" pos:column="14"/></block></then></if> <comment type="block" pos:line="629" pos:column="15">/* this is HTTP */</comment>
          }<pos:position pos:line="630" pos:column="12"/></block></then></if> <comment type="block" pos:line="630" pos:column="13">/* this is the first time we write a body part */</comment>
          <expr_stmt><expr><name><name pos:line="631" pos:column="11">k<pos:position pos:line="631" pos:column="12"/></name><operator pos:line="631" pos:column="12">-&gt;<pos:position pos:line="631" pos:column="17"/></operator><name pos:line="631" pos:column="14">bodywrites<pos:position pos:line="631" pos:column="24"/></name></name><operator pos:line="631" pos:column="24">++<pos:position pos:line="631" pos:column="26"/></operator></expr>;<pos:position pos:line="631" pos:column="27"/></expr_stmt>

          <comment type="block" pos:line="633" pos:column="11">/* pass data to the debug function before it gets "dechunked" */</comment>
          <if pos:line="634" pos:column="11">if<condition pos:line="634" pos:column="13">(<expr><name><name pos:line="634" pos:column="14">data<pos:position pos:line="634" pos:column="18"/></name><operator pos:line="634" pos:column="18">-&gt;<pos:position pos:line="634" pos:column="23"/></operator><name pos:line="634" pos:column="20">set<pos:position pos:line="634" pos:column="23"/></name><operator pos:line="634" pos:column="23">.<pos:position pos:line="634" pos:column="24"/></operator><name pos:line="634" pos:column="24">verbose<pos:position pos:line="634" pos:column="31"/></name></name></expr>)<pos:position pos:line="634" pos:column="32"/></condition><then pos:line="634" pos:column="32"> <block pos:line="634" pos:column="33">{
            <if pos:line="635" pos:column="13">if<condition pos:line="635" pos:column="15">(<expr><name><name pos:line="635" pos:column="16">k<pos:position pos:line="635" pos:column="17"/></name><operator pos:line="635" pos:column="17">-&gt;<pos:position pos:line="635" pos:column="22"/></operator><name pos:line="635" pos:column="19">badheader<pos:position pos:line="635" pos:column="28"/></name></name></expr>)<pos:position pos:line="635" pos:column="29"/></condition><then pos:line="635" pos:column="29"> <block pos:line="635" pos:column="30">{
              <expr_stmt><expr><call><name pos:line="636" pos:column="15">Curl_debug<pos:position pos:line="636" pos:column="25"/></name><argument_list pos:line="636" pos:column="25">(<argument><expr><name pos:line="636" pos:column="26">data<pos:position pos:line="636" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="636" pos:column="32">CURLINFO_DATA_IN<pos:position pos:line="636" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="636" pos:column="50">data<pos:position pos:line="636" pos:column="54"/></name><operator pos:line="636" pos:column="54">-&gt;<pos:position pos:line="636" pos:column="59"/></operator><name pos:line="636" pos:column="56">state<pos:position pos:line="636" pos:column="61"/></name><operator pos:line="636" pos:column="61">.<pos:position pos:line="636" pos:column="62"/></operator><name pos:line="636" pos:column="62">headerbuff<pos:position pos:line="636" pos:column="72"/></name></name></expr></argument>,
                         <argument><expr><name><name pos:line="637" pos:column="26">k<pos:position pos:line="637" pos:column="27"/></name><operator pos:line="637" pos:column="27">-&gt;<pos:position pos:line="637" pos:column="32"/></operator><name pos:line="637" pos:column="29">hbuflen<pos:position pos:line="637" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="637" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="637" pos:column="38"/></expr_stmt>
              <if pos:line="638" pos:column="15">if<condition pos:line="638" pos:column="17">(<expr><name><name pos:line="638" pos:column="18">k<pos:position pos:line="638" pos:column="19"/></name><operator pos:line="638" pos:column="19">-&gt;<pos:position pos:line="638" pos:column="24"/></operator><name pos:line="638" pos:column="21">badheader<pos:position pos:line="638" pos:column="30"/></name></name> <operator pos:line="638" pos:column="31">==<pos:position pos:line="638" pos:column="33"/></operator> <name pos:line="638" pos:column="34">HEADER_PARTHEADER<pos:position pos:line="638" pos:column="51"/></name></expr>)<pos:position pos:line="638" pos:column="52"/></condition><then pos:line="638" pos:column="52">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="639" pos:column="17">Curl_debug<pos:position pos:line="639" pos:column="27"/></name><argument_list pos:line="639" pos:column="27">(<argument><expr><name pos:line="639" pos:column="28">data<pos:position pos:line="639" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="639" pos:column="34">CURLINFO_DATA_IN<pos:position pos:line="639" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="639" pos:column="52">k<pos:position pos:line="639" pos:column="53"/></name><operator pos:line="639" pos:column="53">-&gt;<pos:position pos:line="639" pos:column="58"/></operator><name pos:line="639" pos:column="55">str<pos:position pos:line="639" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="639" pos:column="60">nread<pos:position pos:line="639" pos:column="65"/></name></expr></argument>)<pos:position pos:line="639" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="639" pos:column="67"/></expr_stmt></block></then></if>
            }<pos:position pos:line="640" pos:column="14"/></block></then>
            <else pos:line="641" pos:column="13">else
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="642" pos:column="15">Curl_debug<pos:position pos:line="642" pos:column="25"/></name><argument_list pos:line="642" pos:column="25">(<argument><expr><name pos:line="642" pos:column="26">data<pos:position pos:line="642" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="642" pos:column="32">CURLINFO_DATA_IN<pos:position pos:line="642" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="642" pos:column="50">k<pos:position pos:line="642" pos:column="51"/></name><operator pos:line="642" pos:column="51">-&gt;<pos:position pos:line="642" pos:column="56"/></operator><name pos:line="642" pos:column="53">str<pos:position pos:line="642" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="642" pos:column="58">nread<pos:position pos:line="642" pos:column="63"/></name></expr></argument>)<pos:position pos:line="642" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="642" pos:column="65"/></expr_stmt></block></else></if>
          }<pos:position pos:line="643" pos:column="12"/></block></then></if>

          <if pos:line="645" pos:column="11">if<condition pos:line="645" pos:column="13">(<expr><name><name pos:line="645" pos:column="14">conn<pos:position pos:line="645" pos:column="18"/></name><operator pos:line="645" pos:column="18">-&gt;<pos:position pos:line="645" pos:column="23"/></operator><name pos:line="645" pos:column="20">bits<pos:position pos:line="645" pos:column="24"/></name><operator pos:line="645" pos:column="24">.<pos:position pos:line="645" pos:column="25"/></operator><name pos:line="645" pos:column="25">chunk<pos:position pos:line="645" pos:column="30"/></name></name></expr>)<pos:position pos:line="645" pos:column="31"/></condition><then pos:line="645" pos:column="31"> <block pos:line="645" pos:column="32">{
            <comment type="block" pos:line="646" pos:column="13">/*
             * Bless me father for I have sinned. Here comes a chunked
             * transfer flying and we need to decode this properly.  While
             * the name says read, this function both reads and writes away
             * the data. The returned 'nread' holds the number of actual
             * data it wrote to the client.  */</comment>
            <decl_stmt><decl><type><name pos:line="652" pos:column="13">CHUNKcode<pos:position pos:line="652" pos:column="22"/></name></type> <name pos:line="652" pos:column="23">res<pos:position pos:line="652" pos:column="26"/></name> <init pos:line="652" pos:column="27">=
              <expr><call><name pos:line="653" pos:column="15">Curl_httpchunk_read<pos:position pos:line="653" pos:column="34"/></name><argument_list pos:line="653" pos:column="34">(<argument><expr><name pos:line="653" pos:column="35">conn<pos:position pos:line="653" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="653" pos:column="41">k<pos:position pos:line="653" pos:column="42"/></name><operator pos:line="653" pos:column="42">-&gt;<pos:position pos:line="653" pos:column="47"/></operator><name pos:line="653" pos:column="44">str<pos:position pos:line="653" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="653" pos:column="49">nread<pos:position pos:line="653" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="653" pos:column="56">&amp;<pos:position pos:line="653" pos:column="61"/></operator><name pos:line="653" pos:column="57">nread<pos:position pos:line="653" pos:column="62"/></name></expr></argument>)<pos:position pos:line="653" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="653" pos:column="64"/></decl_stmt>

            <if pos:line="655" pos:column="13">if<condition pos:line="655" pos:column="15">(<expr><name pos:line="655" pos:column="16">CHUNKE_OK<pos:position pos:line="655" pos:column="25"/></name> <operator pos:line="655" pos:column="26">&lt;<pos:position pos:line="655" pos:column="30"/></operator> <name pos:line="655" pos:column="28">res<pos:position pos:line="655" pos:column="31"/></name></expr>)<pos:position pos:line="655" pos:column="32"/></condition><then pos:line="655" pos:column="32"> <block pos:line="655" pos:column="33">{
              <if pos:line="656" pos:column="15">if<condition pos:line="656" pos:column="17">(<expr><name pos:line="656" pos:column="18">CHUNKE_WRITE_ERROR<pos:position pos:line="656" pos:column="36"/></name> <operator pos:line="656" pos:column="37">==<pos:position pos:line="656" pos:column="39"/></operator> <name pos:line="656" pos:column="40">res<pos:position pos:line="656" pos:column="43"/></name></expr>)<pos:position pos:line="656" pos:column="44"/></condition><then pos:line="656" pos:column="44"> <block pos:line="656" pos:column="45">{
                <expr_stmt><expr><call><name pos:line="657" pos:column="17">failf<pos:position pos:line="657" pos:column="22"/></name><argument_list pos:line="657" pos:column="22">(<argument><expr><name pos:line="657" pos:column="23">data<pos:position pos:line="657" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="657" pos:column="29">"Failed writing data"<pos:position pos:line="657" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="657" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="657" pos:column="52"/></expr_stmt>
                <return pos:line="658" pos:column="17">return <expr><name pos:line="658" pos:column="24">CURLE_WRITE_ERROR<pos:position pos:line="658" pos:column="41"/></name></expr>;<pos:position pos:line="658" pos:column="42"/></return>
              }<pos:position pos:line="659" pos:column="16"/></block></then></if>
              <expr_stmt><expr><call><name pos:line="660" pos:column="15">failf<pos:position pos:line="660" pos:column="20"/></name><argument_list pos:line="660" pos:column="20">(<argument><expr><name pos:line="660" pos:column="21">data<pos:position pos:line="660" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="660" pos:column="27">"Received problem %d in the chunky parser"<pos:position pos:line="660" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="660" pos:column="71">res<pos:position pos:line="660" pos:column="74"/></name></expr></argument>)<pos:position pos:line="660" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="660" pos:column="76"/></expr_stmt>
              <return pos:line="661" pos:column="15">return <expr><name pos:line="661" pos:column="22">CURLE_RECV_ERROR<pos:position pos:line="661" pos:column="38"/></name></expr>;<pos:position pos:line="661" pos:column="39"/></return>
            }<pos:position pos:line="662" pos:column="14"/></block></then>
            <elseif pos:line="663" pos:column="13">else <if pos:line="663" pos:column="18">if<condition pos:line="663" pos:column="20">(<expr><name pos:line="663" pos:column="21">CHUNKE_STOP<pos:position pos:line="663" pos:column="32"/></name> <operator pos:line="663" pos:column="33">==<pos:position pos:line="663" pos:column="35"/></operator> <name pos:line="663" pos:column="36">res<pos:position pos:line="663" pos:column="39"/></name></expr>)<pos:position pos:line="663" pos:column="40"/></condition><then pos:line="663" pos:column="40"> <block pos:line="663" pos:column="41">{
              <comment type="block" pos:line="664" pos:column="15">/* we're done reading chunks! */</comment>
              <expr_stmt><expr><name><name pos:line="665" pos:column="15">k<pos:position pos:line="665" pos:column="16"/></name><operator pos:line="665" pos:column="16">-&gt;<pos:position pos:line="665" pos:column="21"/></operator><name pos:line="665" pos:column="18">keepon<pos:position pos:line="665" pos:column="24"/></name></name> <operator pos:line="665" pos:column="25">&amp;=<pos:position pos:line="665" pos:column="31"/></operator> <operator pos:line="665" pos:column="28">~<pos:position pos:line="665" pos:column="29"/></operator><name pos:line="665" pos:column="29">KEEP_READ<pos:position pos:line="665" pos:column="38"/></name></expr>;<pos:position pos:line="665" pos:column="39"/></expr_stmt> <comment type="block" pos:line="665" pos:column="40">/* read no more */</comment>
              <expr_stmt><expr><call><name pos:line="666" pos:column="15">FD_ZERO<pos:position pos:line="666" pos:column="22"/></name><argument_list pos:line="666" pos:column="22">(<argument><expr><operator pos:line="666" pos:column="23">&amp;<pos:position pos:line="666" pos:column="28"/></operator><name><name pos:line="666" pos:column="24">k<pos:position pos:line="666" pos:column="25"/></name><operator pos:line="666" pos:column="25">-&gt;<pos:position pos:line="666" pos:column="30"/></operator><name pos:line="666" pos:column="27">rkeepfd<pos:position pos:line="666" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="666" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="666" pos:column="36"/></expr_stmt>

              <comment type="block" pos:line="668" pos:column="15">/* There are now possibly N number of bytes at the end of the
                 str buffer that weren't written to the client, but we don't
                 care about them right now. */</comment>
            }<pos:position pos:line="671" pos:column="14"/></block></then></if></elseif></if>
            <comment type="block" pos:line="672" pos:column="13">/* If it returned OK, we just keep going */</comment>
          }<pos:position pos:line="673" pos:column="12"/></block></then></if>

          <if pos:line="675" pos:column="11">if<condition pos:line="675" pos:column="13">(<expr><operator pos:line="675" pos:column="14">(<pos:position pos:line="675" pos:column="15"/></operator><operator pos:line="675" pos:column="15">-<pos:position pos:line="675" pos:column="16"/></operator><literal type="number" pos:line="675" pos:column="16">1<pos:position pos:line="675" pos:column="17"/></literal> <operator pos:line="675" pos:column="18">!=<pos:position pos:line="675" pos:column="20"/></operator> <name><name pos:line="675" pos:column="21">conn<pos:position pos:line="675" pos:column="25"/></name><operator pos:line="675" pos:column="25">-&gt;<pos:position pos:line="675" pos:column="30"/></operator><name pos:line="675" pos:column="27">maxdownload<pos:position pos:line="675" pos:column="38"/></name></name><operator pos:line="675" pos:column="38">)<pos:position pos:line="675" pos:column="39"/></operator> <operator pos:line="675" pos:column="40">&amp;&amp;<pos:position pos:line="675" pos:column="50"/></operator>
             <operator pos:line="676" pos:column="14">(<pos:position pos:line="676" pos:column="15"/></operator><name><name pos:line="676" pos:column="15">k<pos:position pos:line="676" pos:column="16"/></name><operator pos:line="676" pos:column="16">-&gt;<pos:position pos:line="676" pos:column="21"/></operator><name pos:line="676" pos:column="18">bytecount<pos:position pos:line="676" pos:column="27"/></name></name> <operator pos:line="676" pos:column="28">+<pos:position pos:line="676" pos:column="29"/></operator> <name pos:line="676" pos:column="30">nread<pos:position pos:line="676" pos:column="35"/></name> <operator pos:line="676" pos:column="36">&gt;=<pos:position pos:line="676" pos:column="41"/></operator> <name><name pos:line="676" pos:column="39">conn<pos:position pos:line="676" pos:column="43"/></name><operator pos:line="676" pos:column="43">-&gt;<pos:position pos:line="676" pos:column="48"/></operator><name pos:line="676" pos:column="45">maxdownload<pos:position pos:line="676" pos:column="56"/></name></name><operator pos:line="676" pos:column="56">)<pos:position pos:line="676" pos:column="57"/></operator></expr>)<pos:position pos:line="676" pos:column="58"/></condition><then pos:line="676" pos:column="58"> <block pos:line="676" pos:column="59">{
            <expr_stmt><expr><name pos:line="677" pos:column="13">nread<pos:position pos:line="677" pos:column="18"/></name> <operator pos:line="677" pos:column="19">=<pos:position pos:line="677" pos:column="20"/></operator> <name><name pos:line="677" pos:column="21">conn<pos:position pos:line="677" pos:column="25"/></name><operator pos:line="677" pos:column="25">-&gt;<pos:position pos:line="677" pos:column="30"/></operator><name pos:line="677" pos:column="27">maxdownload<pos:position pos:line="677" pos:column="38"/></name></name> <operator pos:line="677" pos:column="39">-<pos:position pos:line="677" pos:column="40"/></operator> <name><name pos:line="677" pos:column="41">k<pos:position pos:line="677" pos:column="42"/></name><operator pos:line="677" pos:column="42">-&gt;<pos:position pos:line="677" pos:column="47"/></operator><name pos:line="677" pos:column="44">bytecount<pos:position pos:line="677" pos:column="53"/></name></name></expr>;<pos:position pos:line="677" pos:column="54"/></expr_stmt>
            <if pos:line="678" pos:column="13">if<condition pos:line="678" pos:column="15">(<expr><name pos:line="678" pos:column="16">nread<pos:position pos:line="678" pos:column="21"/></name> <operator pos:line="678" pos:column="22">&lt;<pos:position pos:line="678" pos:column="26"/></operator> <literal type="number" pos:line="678" pos:column="24">0<pos:position pos:line="678" pos:column="25"/></literal></expr> )<pos:position pos:line="678" pos:column="27"/></condition><then pos:line="678" pos:column="27"> <comment type="block" pos:line="678" pos:column="28">/* this should be unusual */</comment>
              <block type="pseudo"><expr_stmt><expr><name pos:line="679" pos:column="15">nread<pos:position pos:line="679" pos:column="20"/></name> <operator pos:line="679" pos:column="21">=<pos:position pos:line="679" pos:column="22"/></operator> <literal type="number" pos:line="679" pos:column="23">0<pos:position pos:line="679" pos:column="24"/></literal></expr>;<pos:position pos:line="679" pos:column="25"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name><name pos:line="681" pos:column="13">k<pos:position pos:line="681" pos:column="14"/></name><operator pos:line="681" pos:column="14">-&gt;<pos:position pos:line="681" pos:column="19"/></operator><name pos:line="681" pos:column="16">keepon<pos:position pos:line="681" pos:column="22"/></name></name> <operator pos:line="681" pos:column="23">&amp;=<pos:position pos:line="681" pos:column="29"/></operator> <operator pos:line="681" pos:column="26">~<pos:position pos:line="681" pos:column="27"/></operator><name pos:line="681" pos:column="27">KEEP_READ<pos:position pos:line="681" pos:column="36"/></name></expr>;<pos:position pos:line="681" pos:column="37"/></expr_stmt> <comment type="block" pos:line="681" pos:column="38">/* we're done reading */</comment>
            <expr_stmt><expr><call><name pos:line="682" pos:column="13">FD_ZERO<pos:position pos:line="682" pos:column="20"/></name><argument_list pos:line="682" pos:column="20">(<argument><expr><operator pos:line="682" pos:column="21">&amp;<pos:position pos:line="682" pos:column="26"/></operator><name><name pos:line="682" pos:column="22">k<pos:position pos:line="682" pos:column="23"/></name><operator pos:line="682" pos:column="23">-&gt;<pos:position pos:line="682" pos:column="28"/></operator><name pos:line="682" pos:column="25">rkeepfd<pos:position pos:line="682" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="682" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="682" pos:column="34"/></expr_stmt>
          }<pos:position pos:line="683" pos:column="12"/></block></then></if>

          <expr_stmt><expr><name><name pos:line="685" pos:column="11">k<pos:position pos:line="685" pos:column="12"/></name><operator pos:line="685" pos:column="12">-&gt;<pos:position pos:line="685" pos:column="17"/></operator><name pos:line="685" pos:column="14">bytecount<pos:position pos:line="685" pos:column="23"/></name></name> <operator pos:line="685" pos:column="24">+=<pos:position pos:line="685" pos:column="26"/></operator> <name pos:line="685" pos:column="27">nread<pos:position pos:line="685" pos:column="32"/></name></expr>;<pos:position pos:line="685" pos:column="33"/></expr_stmt>

          <expr_stmt><expr><call><name pos:line="687" pos:column="11">Curl_pgrsSetDownloadCounter<pos:position pos:line="687" pos:column="38"/></name><argument_list pos:line="687" pos:column="38">(<argument><expr><name pos:line="687" pos:column="39">data<pos:position pos:line="687" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="687" pos:column="45">(<pos:position pos:line="687" pos:column="46"/></operator><name pos:line="687" pos:column="46">double<pos:position pos:line="687" pos:column="52"/></name><operator pos:line="687" pos:column="52">)<pos:position pos:line="687" pos:column="53"/></operator><name><name pos:line="687" pos:column="53">k<pos:position pos:line="687" pos:column="54"/></name><operator pos:line="687" pos:column="54">-&gt;<pos:position pos:line="687" pos:column="59"/></operator><name pos:line="687" pos:column="56">bytecount<pos:position pos:line="687" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="687" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="687" pos:column="67"/></expr_stmt>
            
          <if pos:line="689" pos:column="11">if<condition pos:line="689" pos:column="13">(<expr><operator pos:line="689" pos:column="14">!<pos:position pos:line="689" pos:column="15"/></operator><name><name pos:line="689" pos:column="15">conn<pos:position pos:line="689" pos:column="19"/></name><operator pos:line="689" pos:column="19">-&gt;<pos:position pos:line="689" pos:column="24"/></operator><name pos:line="689" pos:column="21">bits<pos:position pos:line="689" pos:column="25"/></name><operator pos:line="689" pos:column="25">.<pos:position pos:line="689" pos:column="26"/></operator><name pos:line="689" pos:column="26">chunk<pos:position pos:line="689" pos:column="31"/></name></name> <operator pos:line="689" pos:column="32">&amp;&amp;<pos:position pos:line="689" pos:column="42"/></operator> <operator pos:line="689" pos:column="35">(<pos:position pos:line="689" pos:column="36"/></operator><name pos:line="689" pos:column="36">nread<pos:position pos:line="689" pos:column="41"/></name> <operator pos:line="689" pos:column="42">||<pos:position pos:line="689" pos:column="44"/></operator> <name><name pos:line="689" pos:column="45">k<pos:position pos:line="689" pos:column="46"/></name><operator pos:line="689" pos:column="46">-&gt;<pos:position pos:line="689" pos:column="51"/></operator><name pos:line="689" pos:column="48">badheader<pos:position pos:line="689" pos:column="57"/></name></name><operator pos:line="689" pos:column="57">)<pos:position pos:line="689" pos:column="58"/></operator></expr>)<pos:position pos:line="689" pos:column="59"/></condition><then pos:line="689" pos:column="59"> <block pos:line="689" pos:column="60">{
            <comment type="block" pos:line="690" pos:column="13">/* If this is chunky transfer, it was already written */</comment>

            <if pos:line="692" pos:column="13">if<condition pos:line="692" pos:column="15">(<expr><name><name pos:line="692" pos:column="16">k<pos:position pos:line="692" pos:column="17"/></name><operator pos:line="692" pos:column="17">-&gt;<pos:position pos:line="692" pos:column="22"/></operator><name pos:line="692" pos:column="19">badheader<pos:position pos:line="692" pos:column="28"/></name></name></expr>)<pos:position pos:line="692" pos:column="29"/></condition><then pos:line="692" pos:column="29"> <block pos:line="692" pos:column="30">{
              <comment type="block" pos:line="693" pos:column="15">/* we parsed a piece of data wrongly assuming it was a header
                 and now we output it as body instead */</comment>
              <expr_stmt><expr><name pos:line="695" pos:column="15">result<pos:position pos:line="695" pos:column="21"/></name> <operator pos:line="695" pos:column="22">=<pos:position pos:line="695" pos:column="23"/></operator> <call><name pos:line="695" pos:column="24">Curl_client_write<pos:position pos:line="695" pos:column="41"/></name><argument_list pos:line="695" pos:column="41">(<argument><expr><name pos:line="695" pos:column="42">data<pos:position pos:line="695" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="695" pos:column="48">CLIENTWRITE_BODY<pos:position pos:line="695" pos:column="64"/></name></expr></argument>,
                                         <argument><expr><name><name pos:line="696" pos:column="42">data<pos:position pos:line="696" pos:column="46"/></name><operator pos:line="696" pos:column="46">-&gt;<pos:position pos:line="696" pos:column="51"/></operator><name pos:line="696" pos:column="48">state<pos:position pos:line="696" pos:column="53"/></name><operator pos:line="696" pos:column="53">.<pos:position pos:line="696" pos:column="54"/></operator><name pos:line="696" pos:column="54">headerbuff<pos:position pos:line="696" pos:column="64"/></name></name></expr></argument>,
                                         <argument><expr><name><name pos:line="697" pos:column="42">k<pos:position pos:line="697" pos:column="43"/></name><operator pos:line="697" pos:column="43">-&gt;<pos:position pos:line="697" pos:column="48"/></operator><name pos:line="697" pos:column="45">hbuflen<pos:position pos:line="697" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="697" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="697" pos:column="54"/></expr_stmt>
            }<pos:position pos:line="698" pos:column="14"/></block></then></if>
            <if pos:line="699" pos:column="13">if<condition pos:line="699" pos:column="15">(<expr><name><name pos:line="699" pos:column="16">k<pos:position pos:line="699" pos:column="17"/></name><operator pos:line="699" pos:column="17">-&gt;<pos:position pos:line="699" pos:column="22"/></operator><name pos:line="699" pos:column="19">badheader<pos:position pos:line="699" pos:column="28"/></name></name> <operator pos:line="699" pos:column="29">&lt;<pos:position pos:line="699" pos:column="33"/></operator> <name pos:line="699" pos:column="31">HEADER_ALLBAD<pos:position pos:line="699" pos:column="44"/></name></expr>)<pos:position pos:line="699" pos:column="45"/></condition><then pos:line="699" pos:column="45"> <block pos:line="699" pos:column="46">{
              <comment type="block" pos:line="700" pos:column="15">/* This switch handles various content encodings. If there's an
                 error here, be sure to check over the almost identical code
                 in http_chunk.c. 08/29/02 jhrg */</comment>
<cpp:ifdef pos:line="703" pos:column="1">#<cpp:directive pos:line="703" pos:column="2">ifdef<pos:position pos:line="703" pos:column="7"/></cpp:directive> <name pos:line="703" pos:column="8">HAVE_LIBZ<pos:position pos:line="703" pos:column="17"/></name></cpp:ifdef>
              <switch pos:line="704" pos:column="15">switch <condition pos:line="704" pos:column="22">(<expr><name><name pos:line="704" pos:column="23">k<pos:position pos:line="704" pos:column="24"/></name><operator pos:line="704" pos:column="24">-&gt;<pos:position pos:line="704" pos:column="29"/></operator><name pos:line="704" pos:column="26">content_encoding<pos:position pos:line="704" pos:column="42"/></name></name></expr>)<pos:position pos:line="704" pos:column="43"/></condition> <block pos:line="704" pos:column="44">{
              <case pos:line="705" pos:column="15">case <expr><name pos:line="705" pos:column="20">IDENTITY<pos:position pos:line="705" pos:column="28"/></name></expr>:<pos:position pos:line="705" pos:column="29"/></case>
<cpp:endif pos:line="706" pos:column="1">#<cpp:directive pos:line="706" pos:column="2">endif<pos:position pos:line="706" pos:column="7"/></cpp:directive></cpp:endif>
                <comment type="block" pos:line="707" pos:column="17">/* This is the default when the server sends no
                   Content-Encoding header. See Curl_readwrite_init; the
                   memset() call initializes k-&gt;content_encoding to zero.
                   08/28/02 jhrg */</comment>
                <expr_stmt><expr><name pos:line="711" pos:column="17">result<pos:position pos:line="711" pos:column="23"/></name> <operator pos:line="711" pos:column="24">=<pos:position pos:line="711" pos:column="25"/></operator> <call><name pos:line="711" pos:column="26">Curl_client_write<pos:position pos:line="711" pos:column="43"/></name><argument_list pos:line="711" pos:column="43">(<argument><expr><name pos:line="711" pos:column="44">data<pos:position pos:line="711" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="711" pos:column="50">CLIENTWRITE_BODY<pos:position pos:line="711" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="711" pos:column="68">k<pos:position pos:line="711" pos:column="69"/></name><operator pos:line="711" pos:column="69">-&gt;<pos:position pos:line="711" pos:column="74"/></operator><name pos:line="711" pos:column="71">str<pos:position pos:line="711" pos:column="74"/></name></name></expr></argument>, 
                                           <argument><expr><name pos:line="712" pos:column="44">nread<pos:position pos:line="712" pos:column="49"/></name></expr></argument>)<pos:position pos:line="712" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="712" pos:column="51"/></expr_stmt>
<cpp:ifdef pos:line="713" pos:column="1">#<cpp:directive pos:line="713" pos:column="2">ifdef<pos:position pos:line="713" pos:column="7"/></cpp:directive> <name pos:line="713" pos:column="8">HAVE_LIBZ<pos:position pos:line="713" pos:column="17"/></name></cpp:ifdef>
                <break pos:line="714" pos:column="17">break;<pos:position pos:line="714" pos:column="23"/></break>

              <case pos:line="716" pos:column="15">case <expr><name pos:line="716" pos:column="20">DEFLATE<pos:position pos:line="716" pos:column="27"/></name></expr>:<pos:position pos:line="716" pos:column="28"/></case> 
                <comment type="block" pos:line="717" pos:column="17">/* Assume CLIENTWRITE_BODY; headers are not encoded. */</comment>
                <expr_stmt><expr><name pos:line="718" pos:column="17">result<pos:position pos:line="718" pos:column="23"/></name> <operator pos:line="718" pos:column="24">=<pos:position pos:line="718" pos:column="25"/></operator> <call><name pos:line="718" pos:column="26">Curl_unencode_deflate_write<pos:position pos:line="718" pos:column="53"/></name><argument_list pos:line="718" pos:column="53">(<argument><expr><name pos:line="718" pos:column="54">data<pos:position pos:line="718" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="718" pos:column="60">k<pos:position pos:line="718" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="718" pos:column="63">nread<pos:position pos:line="718" pos:column="68"/></name></expr></argument>)<pos:position pos:line="718" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="718" pos:column="70"/></expr_stmt>
                <break pos:line="719" pos:column="17">break;<pos:position pos:line="719" pos:column="23"/></break>

              <case pos:line="721" pos:column="15">case <expr><name pos:line="721" pos:column="20">GZIP<pos:position pos:line="721" pos:column="24"/></name></expr>:<pos:position pos:line="721" pos:column="25"/></case>          <comment type="block" pos:line="721" pos:column="35">/* FIXME 08/27/02 jhrg */</comment>
              <case pos:line="722" pos:column="15">case <expr><name pos:line="722" pos:column="20">COMPRESS<pos:position pos:line="722" pos:column="28"/></name></expr>:<pos:position pos:line="722" pos:column="29"/></case>
              <default pos:line="723" pos:column="15">default:<pos:position pos:line="723" pos:column="23"/></default>
                <expr_stmt><expr><call><name pos:line="724" pos:column="17">failf<pos:position pos:line="724" pos:column="22"/></name> <argument_list pos:line="724" pos:column="23">(<argument><expr><name pos:line="724" pos:column="24">data<pos:position pos:line="724" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="724" pos:column="30">"Unrecognized content encoding type. "<pos:position pos:line="724" pos:column="68"/></literal>
                       <literal type="string" pos:line="725" pos:column="24">"libcurl understands `identity' and `deflate' "<pos:position pos:line="725" pos:column="71"/></literal>
                       <literal type="string" pos:line="726" pos:column="24">"content encodings."<pos:position pos:line="726" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="726" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="726" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><name pos:line="727" pos:column="17">result<pos:position pos:line="727" pos:column="23"/></name> <operator pos:line="727" pos:column="24">=<pos:position pos:line="727" pos:column="25"/></operator> <name pos:line="727" pos:column="26">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="727" pos:column="52"/></name></expr>;<pos:position pos:line="727" pos:column="53"/></expr_stmt>
                <break pos:line="728" pos:column="17">break;<pos:position pos:line="728" pos:column="23"/></break>
              }<pos:position pos:line="729" pos:column="16"/></block></switch>
<cpp:endif pos:line="730" pos:column="1">#<cpp:directive pos:line="730" pos:column="2">endif<pos:position pos:line="730" pos:column="7"/></cpp:directive></cpp:endif>
            }<pos:position pos:line="731" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="732" pos:column="13">k<pos:position pos:line="732" pos:column="14"/></name><operator pos:line="732" pos:column="14">-&gt;<pos:position pos:line="732" pos:column="19"/></operator><name pos:line="732" pos:column="16">badheader<pos:position pos:line="732" pos:column="25"/></name></name> <operator pos:line="732" pos:column="26">=<pos:position pos:line="732" pos:column="27"/></operator> <name pos:line="732" pos:column="28">HEADER_NORMAL<pos:position pos:line="732" pos:column="41"/></name></expr>;<pos:position pos:line="732" pos:column="42"/></expr_stmt> <comment type="block" pos:line="732" pos:column="43">/* taken care of now */</comment>

            <if pos:line="734" pos:column="13">if<condition pos:line="734" pos:column="15">(<expr><name pos:line="734" pos:column="16">result<pos:position pos:line="734" pos:column="22"/></name></expr>)<pos:position pos:line="734" pos:column="23"/></condition><then pos:line="734" pos:column="23">
              <block type="pseudo"><return pos:line="735" pos:column="15">return <expr><name pos:line="735" pos:column="22">result<pos:position pos:line="735" pos:column="28"/></name></expr>;<pos:position pos:line="735" pos:column="29"/></return></block></then></if>
          }<pos:position pos:line="736" pos:column="12"/></block></then></if>

        }<pos:position pos:line="738" pos:column="10"/></block></then></if> <comment type="block" pos:line="738" pos:column="11">/* if (! header and data to read ) */</comment>

      }<pos:position pos:line="740" pos:column="8"/></block> while<condition pos:line="740" pos:column="14">(<expr><operator pos:line="740" pos:column="15">!<pos:position pos:line="740" pos:column="16"/></operator><name pos:line="740" pos:column="16">readdone<pos:position pos:line="740" pos:column="24"/></name></expr>)<pos:position pos:line="740" pos:column="25"/></condition>;<pos:position pos:line="740" pos:column="26"/></do>

    }<pos:position pos:line="742" pos:column="6"/></block></then></if> <comment type="block" pos:line="742" pos:column="7">/* if( read from socket ) */</comment>

    <comment type="block" pos:line="744" pos:column="5">/* If we still have writing to do, we check if we have a writable
       socket. Sometimes the writefdp is NULL, it no fd_set was done using
       the multi interface and then we can do nothing but to attempt a
       write to be sure. */</comment>
    <if pos:line="748" pos:column="5">if<condition pos:line="748" pos:column="7">(<expr><operator pos:line="748" pos:column="8">(<pos:position pos:line="748" pos:column="9"/></operator><name><name pos:line="748" pos:column="9">k<pos:position pos:line="748" pos:column="10"/></name><operator pos:line="748" pos:column="10">-&gt;<pos:position pos:line="748" pos:column="15"/></operator><name pos:line="748" pos:column="12">keepon<pos:position pos:line="748" pos:column="18"/></name></name> <operator pos:line="748" pos:column="19">&amp;<pos:position pos:line="748" pos:column="24"/></operator> <name pos:line="748" pos:column="21">KEEP_WRITE<pos:position pos:line="748" pos:column="31"/></name><operator pos:line="748" pos:column="31">)<pos:position pos:line="748" pos:column="32"/></operator> <operator pos:line="748" pos:column="33">&amp;&amp;<pos:position pos:line="748" pos:column="43"/></operator>
       <operator pos:line="749" pos:column="8">(<pos:position pos:line="749" pos:column="9"/></operator><call><name pos:line="749" pos:column="9">FD_ISSET<pos:position pos:line="749" pos:column="17"/></name><argument_list pos:line="749" pos:column="17">(<argument><expr><name><name pos:line="749" pos:column="18">conn<pos:position pos:line="749" pos:column="22"/></name><operator pos:line="749" pos:column="22">-&gt;<pos:position pos:line="749" pos:column="27"/></operator><name pos:line="749" pos:column="24">writesockfd<pos:position pos:line="749" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="749" pos:column="37">writefdp<pos:position pos:line="749" pos:column="45"/></name></expr></argument>)<pos:position pos:line="749" pos:column="46"/></argument_list></call><operator pos:line="749" pos:column="46">)<pos:position pos:line="749" pos:column="47"/></operator></expr> )<pos:position pos:line="749" pos:column="49"/></condition><then pos:line="749" pos:column="49"> <block pos:line="749" pos:column="50">{
      <comment type="block" pos:line="750" pos:column="7">/* write */</comment>

      <decl_stmt><decl><type><name pos:line="752" pos:column="7">int<pos:position pos:line="752" pos:column="10"/></name></type> <name pos:line="752" pos:column="11">i<pos:position pos:line="752" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="752" pos:column="14">si<pos:position pos:line="752" pos:column="16"/></name></decl>;<pos:position pos:line="752" pos:column="17"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="753" pos:column="7">ssize_t<pos:position pos:line="753" pos:column="14"/></name></type> <name pos:line="753" pos:column="15">bytes_written<pos:position pos:line="753" pos:column="28"/></name></decl>;<pos:position pos:line="753" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="754" pos:column="7">bool<pos:position pos:line="754" pos:column="11"/></name></type> <name pos:line="754" pos:column="12">writedone<pos:position pos:line="754" pos:column="21"/></name><init pos:line="754" pos:column="21">=<expr><name pos:line="754" pos:column="22">FALSE<pos:position pos:line="754" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="754" pos:column="28"/></decl_stmt>

      <if pos:line="756" pos:column="7">if <condition pos:line="756" pos:column="10">(<expr><operator pos:line="756" pos:column="11">(<pos:position pos:line="756" pos:column="12"/></operator><name><name pos:line="756" pos:column="12">k<pos:position pos:line="756" pos:column="13"/></name><operator pos:line="756" pos:column="13">-&gt;<pos:position pos:line="756" pos:column="18"/></operator><name pos:line="756" pos:column="15">bytecount<pos:position pos:line="756" pos:column="24"/></name></name> <operator pos:line="756" pos:column="25">==<pos:position pos:line="756" pos:column="27"/></operator> <literal type="number" pos:line="756" pos:column="28">0<pos:position pos:line="756" pos:column="29"/></literal><operator pos:line="756" pos:column="29">)<pos:position pos:line="756" pos:column="30"/></operator> <operator pos:line="756" pos:column="31">&amp;&amp;<pos:position pos:line="756" pos:column="41"/></operator> <operator pos:line="756" pos:column="34">(<pos:position pos:line="756" pos:column="35"/></operator><name><name pos:line="756" pos:column="35">k<pos:position pos:line="756" pos:column="36"/></name><operator pos:line="756" pos:column="36">-&gt;<pos:position pos:line="756" pos:column="41"/></operator><name pos:line="756" pos:column="38">writebytecount<pos:position pos:line="756" pos:column="52"/></name></name> <operator pos:line="756" pos:column="53">==<pos:position pos:line="756" pos:column="55"/></operator> <literal type="number" pos:line="756" pos:column="56">0<pos:position pos:line="756" pos:column="57"/></literal><operator pos:line="756" pos:column="57">)<pos:position pos:line="756" pos:column="58"/></operator></expr>)<pos:position pos:line="756" pos:column="59"/></condition><then pos:line="756" pos:column="59">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="757" pos:column="9">Curl_pgrsTime<pos:position pos:line="757" pos:column="22"/></name><argument_list pos:line="757" pos:column="22">(<argument><expr><name pos:line="757" pos:column="23">data<pos:position pos:line="757" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="757" pos:column="29">TIMER_STARTTRANSFER<pos:position pos:line="757" pos:column="48"/></name></expr></argument>)<pos:position pos:line="757" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="757" pos:column="50"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name pos:line="759" pos:column="7">didwhat<pos:position pos:line="759" pos:column="14"/></name> <operator pos:line="759" pos:column="15">|=<pos:position pos:line="759" pos:column="17"/></operator> <name pos:line="759" pos:column="18">KEEP_WRITE<pos:position pos:line="759" pos:column="28"/></name></expr>;<pos:position pos:line="759" pos:column="29"/></expr_stmt>

      <comment type="block" pos:line="761" pos:column="7">/*
       * We loop here to do the READ and SEND loop until we run out of
       * data to send or until we get EWOULDBLOCK back
       */</comment>
      <do pos:line="765" pos:column="7">do <block pos:line="765" pos:column="10">{
        
        <comment type="block" pos:line="767" pos:column="9">/* only read more data if there's no upload data already
           present in the upload buffer */</comment>
        <if pos:line="769" pos:column="9">if<condition pos:line="769" pos:column="11">(<expr><literal type="number" pos:line="769" pos:column="12">0<pos:position pos:line="769" pos:column="13"/></literal> <operator pos:line="769" pos:column="14">==<pos:position pos:line="769" pos:column="16"/></operator> <name><name pos:line="769" pos:column="17">conn<pos:position pos:line="769" pos:column="21"/></name><operator pos:line="769" pos:column="21">-&gt;<pos:position pos:line="769" pos:column="26"/></operator><name pos:line="769" pos:column="23">upload_present<pos:position pos:line="769" pos:column="37"/></name></name></expr>)<pos:position pos:line="769" pos:column="38"/></condition><then pos:line="769" pos:column="38"> <block pos:line="769" pos:column="39">{
          <comment type="block" pos:line="770" pos:column="11">/* init the "upload from here" pointer */</comment>
          <expr_stmt><expr><name><name pos:line="771" pos:column="11">conn<pos:position pos:line="771" pos:column="15"/></name><operator pos:line="771" pos:column="15">-&gt;<pos:position pos:line="771" pos:column="20"/></operator><name pos:line="771" pos:column="17">upload_fromhere<pos:position pos:line="771" pos:column="32"/></name></name> <operator pos:line="771" pos:column="33">=<pos:position pos:line="771" pos:column="34"/></operator> <name><name pos:line="771" pos:column="35">k<pos:position pos:line="771" pos:column="36"/></name><operator pos:line="771" pos:column="36">-&gt;<pos:position pos:line="771" pos:column="41"/></operator><name pos:line="771" pos:column="38">uploadbuf<pos:position pos:line="771" pos:column="47"/></name></name></expr>;<pos:position pos:line="771" pos:column="48"/></expr_stmt>

          <if pos:line="773" pos:column="11">if<condition pos:line="773" pos:column="13">(<expr><operator pos:line="773" pos:column="14">!<pos:position pos:line="773" pos:column="15"/></operator><name><name pos:line="773" pos:column="15">k<pos:position pos:line="773" pos:column="16"/></name><operator pos:line="773" pos:column="16">-&gt;<pos:position pos:line="773" pos:column="21"/></operator><name pos:line="773" pos:column="18">upload_done<pos:position pos:line="773" pos:column="29"/></name></name></expr>)<pos:position pos:line="773" pos:column="30"/></condition><then pos:line="773" pos:column="30"> <block pos:line="773" pos:column="31">{
            <comment type="block" pos:line="774" pos:column="13">/* HTTP pollution, this should be written nicer to become more
               protocol agnostic. */</comment>

            <if pos:line="777" pos:column="13">if<condition pos:line="777" pos:column="15">(<expr><name><name pos:line="777" pos:column="16">k<pos:position pos:line="777" pos:column="17"/></name><operator pos:line="777" pos:column="17">-&gt;<pos:position pos:line="777" pos:column="22"/></operator><name pos:line="777" pos:column="19">wait100_after_headers<pos:position pos:line="777" pos:column="40"/></name></name> <operator pos:line="777" pos:column="41">&amp;&amp;<pos:position pos:line="777" pos:column="51"/></operator>
               <operator pos:line="778" pos:column="16">(<pos:position pos:line="778" pos:column="17"/></operator><name><name pos:line="778" pos:column="17">conn<pos:position pos:line="778" pos:column="21"/></name><operator pos:line="778" pos:column="21">-&gt;<pos:position pos:line="778" pos:column="26"/></operator><name pos:line="778" pos:column="23">proto<pos:position pos:line="778" pos:column="28"/></name><operator pos:line="778" pos:column="28">.<pos:position pos:line="778" pos:column="29"/></operator><name pos:line="778" pos:column="29">http<pos:position pos:line="778" pos:column="33"/></name><operator pos:line="778" pos:column="33">-&gt;<pos:position pos:line="778" pos:column="38"/></operator><name pos:line="778" pos:column="35">sending<pos:position pos:line="778" pos:column="42"/></name></name> <operator pos:line="778" pos:column="43">==<pos:position pos:line="778" pos:column="45"/></operator> <name pos:line="778" pos:column="46">HTTPSEND_BODY<pos:position pos:line="778" pos:column="59"/></name><operator pos:line="778" pos:column="59">)<pos:position pos:line="778" pos:column="60"/></operator></expr>)<pos:position pos:line="778" pos:column="61"/></condition><then pos:line="778" pos:column="61"> <block pos:line="778" pos:column="62">{
              <comment type="block" pos:line="779" pos:column="15">/* If this call is to send body data, we must take some action:
                 We have sent off the full HTTP 1.1 request, and we shall now
                 go into the Expect: 100 state and await such a header */</comment>
              <expr_stmt><expr><name><name pos:line="782" pos:column="15">k<pos:position pos:line="782" pos:column="16"/></name><operator pos:line="782" pos:column="16">-&gt;<pos:position pos:line="782" pos:column="21"/></operator><name pos:line="782" pos:column="18">wait100_after_headers<pos:position pos:line="782" pos:column="39"/></name></name> <operator pos:line="782" pos:column="40">=<pos:position pos:line="782" pos:column="41"/></operator> <name pos:line="782" pos:column="42">FALSE<pos:position pos:line="782" pos:column="47"/></name></expr>;<pos:position pos:line="782" pos:column="48"/></expr_stmt> <comment type="block" pos:line="782" pos:column="49">/* headers sent */</comment>
              <expr_stmt><expr><name><name pos:line="783" pos:column="15">k<pos:position pos:line="783" pos:column="16"/></name><operator pos:line="783" pos:column="16">-&gt;<pos:position pos:line="783" pos:column="21"/></operator><name pos:line="783" pos:column="18">write_after_100_header<pos:position pos:line="783" pos:column="40"/></name></name> <operator pos:line="783" pos:column="41">=<pos:position pos:line="783" pos:column="42"/></operator> <name pos:line="783" pos:column="43">TRUE<pos:position pos:line="783" pos:column="47"/></name></expr>;<pos:position pos:line="783" pos:column="48"/></expr_stmt> <comment type="block" pos:line="783" pos:column="49">/* wait for the header */</comment>
              <expr_stmt><expr><call><name pos:line="784" pos:column="15">FD_ZERO<pos:position pos:line="784" pos:column="22"/></name> <argument_list pos:line="784" pos:column="23">(<argument><expr><operator pos:line="784" pos:column="24">&amp;<pos:position pos:line="784" pos:column="29"/></operator><name><name pos:line="784" pos:column="25">k<pos:position pos:line="784" pos:column="26"/></name><operator pos:line="784" pos:column="26">-&gt;<pos:position pos:line="784" pos:column="31"/></operator><name pos:line="784" pos:column="28">writefd<pos:position pos:line="784" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="784" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="784" pos:column="37"/></expr_stmt>            <comment type="block" pos:line="784" pos:column="49">/* clear it */</comment>
              <expr_stmt><expr><name><name pos:line="785" pos:column="15">k<pos:position pos:line="785" pos:column="16"/></name><operator pos:line="785" pos:column="16">-&gt;<pos:position pos:line="785" pos:column="21"/></operator><name pos:line="785" pos:column="18">wkeepfd<pos:position pos:line="785" pos:column="25"/></name></name> <operator pos:line="785" pos:column="26">=<pos:position pos:line="785" pos:column="27"/></operator> <name><name pos:line="785" pos:column="28">k<pos:position pos:line="785" pos:column="29"/></name><operator pos:line="785" pos:column="29">-&gt;<pos:position pos:line="785" pos:column="34"/></operator><name pos:line="785" pos:column="31">writefd<pos:position pos:line="785" pos:column="38"/></name></name></expr>;<pos:position pos:line="785" pos:column="39"/></expr_stmt>          <comment type="block" pos:line="785" pos:column="49">/* set the keeper variable */</comment>
              <expr_stmt><expr><name><name pos:line="786" pos:column="15">k<pos:position pos:line="786" pos:column="16"/></name><operator pos:line="786" pos:column="16">-&gt;<pos:position pos:line="786" pos:column="21"/></operator><name pos:line="786" pos:column="18">keepon<pos:position pos:line="786" pos:column="24"/></name></name> <operator pos:line="786" pos:column="25">&amp;=<pos:position pos:line="786" pos:column="31"/></operator> <operator pos:line="786" pos:column="28">~<pos:position pos:line="786" pos:column="29"/></operator><name pos:line="786" pos:column="29">KEEP_WRITE<pos:position pos:line="786" pos:column="39"/></name></expr>;<pos:position pos:line="786" pos:column="40"/></expr_stmt>         <comment type="block" pos:line="786" pos:column="49">/* disable writing */</comment>
              <expr_stmt><expr><name><name pos:line="787" pos:column="15">k<pos:position pos:line="787" pos:column="16"/></name><operator pos:line="787" pos:column="16">-&gt;<pos:position pos:line="787" pos:column="21"/></operator><name pos:line="787" pos:column="18">start100<pos:position pos:line="787" pos:column="26"/></name></name> <operator pos:line="787" pos:column="27">=<pos:position pos:line="787" pos:column="28"/></operator> <call><name pos:line="787" pos:column="29">Curl_tvnow<pos:position pos:line="787" pos:column="39"/></name><argument_list pos:line="787" pos:column="39">()<pos:position pos:line="787" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="787" pos:column="42"/></expr_stmt>       <comment type="block" pos:line="787" pos:column="49">/* timeout count starts now */</comment>
              <expr_stmt><expr><name pos:line="788" pos:column="15">didwhat<pos:position pos:line="788" pos:column="22"/></name> <operator pos:line="788" pos:column="23">&amp;=<pos:position pos:line="788" pos:column="29"/></operator> <operator pos:line="788" pos:column="26">~<pos:position pos:line="788" pos:column="27"/></operator><name pos:line="788" pos:column="27">KEEP_WRITE<pos:position pos:line="788" pos:column="37"/></name></expr>;<pos:position pos:line="788" pos:column="38"/></expr_stmt>  <comment type="block" pos:line="788" pos:column="40">/* we didn't write anything actually */</comment>
              <break pos:line="789" pos:column="15">break;<pos:position pos:line="789" pos:column="21"/></break>
            }<pos:position pos:line="790" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="792" pos:column="13">nread<pos:position pos:line="792" pos:column="18"/></name> <operator pos:line="792" pos:column="19">=<pos:position pos:line="792" pos:column="20"/></operator> <call><name pos:line="792" pos:column="21">fillbuffer<pos:position pos:line="792" pos:column="31"/></name><argument_list pos:line="792" pos:column="31">(<argument><expr><name pos:line="792" pos:column="32">conn<pos:position pos:line="792" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="792" pos:column="38">BUFSIZE<pos:position pos:line="792" pos:column="45"/></name></expr></argument>)<pos:position pos:line="792" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="792" pos:column="47"/></expr_stmt>
          }<pos:position pos:line="793" pos:column="12"/></block></then>
          <else pos:line="794" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="795" pos:column="13">nread<pos:position pos:line="795" pos:column="18"/></name> <operator pos:line="795" pos:column="19">=<pos:position pos:line="795" pos:column="20"/></operator> <literal type="number" pos:line="795" pos:column="21">0<pos:position pos:line="795" pos:column="22"/></literal></expr>;<pos:position pos:line="795" pos:column="23"/></expr_stmt></block></else></if> <comment type="block" pos:line="795" pos:column="24">/* we're done uploading/reading */</comment>

          <comment type="block" pos:line="797" pos:column="11">/* the signed int typecase of nread of for systems that has
             unsigned size_t */</comment>
          <if pos:line="799" pos:column="11">if <condition pos:line="799" pos:column="14">(<expr><name pos:line="799" pos:column="15">nread<pos:position pos:line="799" pos:column="20"/></name><operator pos:line="799" pos:column="20">&lt;=<pos:position pos:line="799" pos:column="25"/></operator><literal type="number" pos:line="799" pos:column="22">0<pos:position pos:line="799" pos:column="23"/></literal></expr>)<pos:position pos:line="799" pos:column="24"/></condition><then pos:line="799" pos:column="24"> <block pos:line="799" pos:column="25">{
            <comment type="block" pos:line="800" pos:column="13">/* done */</comment>
            <expr_stmt><expr><name><name pos:line="801" pos:column="13">k<pos:position pos:line="801" pos:column="14"/></name><operator pos:line="801" pos:column="14">-&gt;<pos:position pos:line="801" pos:column="19"/></operator><name pos:line="801" pos:column="16">keepon<pos:position pos:line="801" pos:column="22"/></name></name> <operator pos:line="801" pos:column="23">&amp;=<pos:position pos:line="801" pos:column="29"/></operator> <operator pos:line="801" pos:column="26">~<pos:position pos:line="801" pos:column="27"/></operator><name pos:line="801" pos:column="27">KEEP_WRITE<pos:position pos:line="801" pos:column="37"/></name></expr>;<pos:position pos:line="801" pos:column="38"/></expr_stmt> <comment type="block" pos:line="801" pos:column="39">/* we're done writing */</comment>
            <expr_stmt><expr><call><name pos:line="802" pos:column="13">FD_ZERO<pos:position pos:line="802" pos:column="20"/></name><argument_list pos:line="802" pos:column="20">(<argument><expr><operator pos:line="802" pos:column="21">&amp;<pos:position pos:line="802" pos:column="26"/></operator><name><name pos:line="802" pos:column="22">k<pos:position pos:line="802" pos:column="23"/></name><operator pos:line="802" pos:column="23">-&gt;<pos:position pos:line="802" pos:column="28"/></operator><name pos:line="802" pos:column="25">wkeepfd<pos:position pos:line="802" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="802" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="802" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name pos:line="803" pos:column="13">writedone<pos:position pos:line="803" pos:column="22"/></name> <operator pos:line="803" pos:column="23">=<pos:position pos:line="803" pos:column="24"/></operator> <name pos:line="803" pos:column="25">TRUE<pos:position pos:line="803" pos:column="29"/></name></expr>;<pos:position pos:line="803" pos:column="30"/></expr_stmt>
            <break pos:line="804" pos:column="13">break;<pos:position pos:line="804" pos:column="19"/></break>
          }<pos:position pos:line="805" pos:column="12"/></block></then></if>

          <comment type="block" pos:line="807" pos:column="11">/* store number of bytes available for upload */</comment>
          <expr_stmt><expr><name><name pos:line="808" pos:column="11">conn<pos:position pos:line="808" pos:column="15"/></name><operator pos:line="808" pos:column="15">-&gt;<pos:position pos:line="808" pos:column="20"/></operator><name pos:line="808" pos:column="17">upload_present<pos:position pos:line="808" pos:column="31"/></name></name> <operator pos:line="808" pos:column="32">=<pos:position pos:line="808" pos:column="33"/></operator> <name pos:line="808" pos:column="34">nread<pos:position pos:line="808" pos:column="39"/></name></expr>;<pos:position pos:line="808" pos:column="40"/></expr_stmt>

          <comment type="block" pos:line="810" pos:column="11">/* convert LF to CRLF if so asked */</comment>
          <if pos:line="811" pos:column="11">if <condition pos:line="811" pos:column="14">(<expr><name><name pos:line="811" pos:column="15">data<pos:position pos:line="811" pos:column="19"/></name><operator pos:line="811" pos:column="19">-&gt;<pos:position pos:line="811" pos:column="24"/></operator><name pos:line="811" pos:column="21">set<pos:position pos:line="811" pos:column="24"/></name><operator pos:line="811" pos:column="24">.<pos:position pos:line="811" pos:column="25"/></operator><name pos:line="811" pos:column="25">crlf<pos:position pos:line="811" pos:column="29"/></name></name></expr>)<pos:position pos:line="811" pos:column="30"/></condition><then pos:line="811" pos:column="30"> <block pos:line="811" pos:column="31">{
              <if pos:line="812" pos:column="15">if<condition pos:line="812" pos:column="17">(<expr><name><name pos:line="812" pos:column="18">data<pos:position pos:line="812" pos:column="22"/></name><operator pos:line="812" pos:column="22">-&gt;<pos:position pos:line="812" pos:column="27"/></operator><name pos:line="812" pos:column="24">state<pos:position pos:line="812" pos:column="29"/></name><operator pos:line="812" pos:column="29">.<pos:position pos:line="812" pos:column="30"/></operator><name pos:line="812" pos:column="30">scratch<pos:position pos:line="812" pos:column="37"/></name></name> <operator pos:line="812" pos:column="38">==<pos:position pos:line="812" pos:column="40"/></operator> <name pos:line="812" pos:column="41">NULL<pos:position pos:line="812" pos:column="45"/></name></expr>)<pos:position pos:line="812" pos:column="46"/></condition><then pos:line="812" pos:column="46">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="813" pos:column="17">data<pos:position pos:line="813" pos:column="21"/></name><operator pos:line="813" pos:column="21">-&gt;<pos:position pos:line="813" pos:column="26"/></operator><name pos:line="813" pos:column="23">state<pos:position pos:line="813" pos:column="28"/></name><operator pos:line="813" pos:column="28">.<pos:position pos:line="813" pos:column="29"/></operator><name pos:line="813" pos:column="29">scratch<pos:position pos:line="813" pos:column="36"/></name></name> <operator pos:line="813" pos:column="37">=<pos:position pos:line="813" pos:column="38"/></operator> <call><name pos:line="813" pos:column="39">malloc<pos:position pos:line="813" pos:column="45"/></name><argument_list pos:line="813" pos:column="45">(<argument><expr><literal type="number" pos:line="813" pos:column="46">2<pos:position pos:line="813" pos:column="47"/></literal><operator pos:line="813" pos:column="47">*<pos:position pos:line="813" pos:column="48"/></operator><name pos:line="813" pos:column="48">BUFSIZE<pos:position pos:line="813" pos:column="55"/></name></expr></argument>)<pos:position pos:line="813" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="813" pos:column="57"/></expr_stmt></block></then></if>
              <if pos:line="814" pos:column="15">if<condition pos:line="814" pos:column="17">(<expr><name><name pos:line="814" pos:column="18">data<pos:position pos:line="814" pos:column="22"/></name><operator pos:line="814" pos:column="22">-&gt;<pos:position pos:line="814" pos:column="27"/></operator><name pos:line="814" pos:column="24">state<pos:position pos:line="814" pos:column="29"/></name><operator pos:line="814" pos:column="29">.<pos:position pos:line="814" pos:column="30"/></operator><name pos:line="814" pos:column="30">scratch<pos:position pos:line="814" pos:column="37"/></name></name> <operator pos:line="814" pos:column="38">==<pos:position pos:line="814" pos:column="40"/></operator> <name pos:line="814" pos:column="41">NULL<pos:position pos:line="814" pos:column="45"/></name></expr>)<pos:position pos:line="814" pos:column="46"/></condition><then pos:line="814" pos:column="46"> <block pos:line="814" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="815" pos:column="17">failf<pos:position pos:line="815" pos:column="22"/></name> <argument_list pos:line="815" pos:column="23">(<argument><expr><name pos:line="815" pos:column="24">data<pos:position pos:line="815" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="815" pos:column="30">"Failed to alloc scratch buffer!"<pos:position pos:line="815" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="815" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="815" pos:column="65"/></expr_stmt>
                <return pos:line="816" pos:column="17">return <expr><name pos:line="816" pos:column="24">CURLE_OUT_OF_MEMORY<pos:position pos:line="816" pos:column="43"/></name></expr>;<pos:position pos:line="816" pos:column="44"/></return>
              }<pos:position pos:line="817" pos:column="16"/></block></then></if>
            <for pos:line="818" pos:column="13">for<control pos:line="818" pos:column="16">(<init><expr><name pos:line="818" pos:column="17">i<pos:position pos:line="818" pos:column="18"/></name> <operator pos:line="818" pos:column="19">=<pos:position pos:line="818" pos:column="20"/></operator> <literal type="number" pos:line="818" pos:column="21">0<pos:position pos:line="818" pos:column="22"/></literal></expr><operator pos:line="818" pos:column="22">,<pos:position pos:line="818" pos:column="23"/></operator> <expr><name pos:line="818" pos:column="24">si<pos:position pos:line="818" pos:column="26"/></name> <operator pos:line="818" pos:column="27">=<pos:position pos:line="818" pos:column="28"/></operator> <literal type="number" pos:line="818" pos:column="29">0<pos:position pos:line="818" pos:column="30"/></literal></expr>;<pos:position pos:line="818" pos:column="31"/></init> <condition><expr><name pos:line="818" pos:column="32">i<pos:position pos:line="818" pos:column="33"/></name> <operator pos:line="818" pos:column="34">&lt;<pos:position pos:line="818" pos:column="38"/></operator> <name pos:line="818" pos:column="36">nread<pos:position pos:line="818" pos:column="41"/></name></expr>;<pos:position pos:line="818" pos:column="42"/></condition> <incr><expr><name pos:line="818" pos:column="43">i<pos:position pos:line="818" pos:column="44"/></name><operator pos:line="818" pos:column="44">++<pos:position pos:line="818" pos:column="46"/></operator></expr><operator pos:line="818" pos:column="46">,<pos:position pos:line="818" pos:column="47"/></operator> <expr><name pos:line="818" pos:column="48">si<pos:position pos:line="818" pos:column="50"/></name><operator pos:line="818" pos:column="50">++<pos:position pos:line="818" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="818" pos:column="53"/></control> <block pos:line="818" pos:column="54">{
              <if pos:line="819" pos:column="15">if <condition pos:line="819" pos:column="18">(<expr><name><name pos:line="819" pos:column="19">conn<pos:position pos:line="819" pos:column="23"/></name><operator pos:line="819" pos:column="23">-&gt;<pos:position pos:line="819" pos:column="28"/></operator><name pos:line="819" pos:column="25">upload_fromhere<pos:position pos:line="819" pos:column="40"/></name><index pos:line="819" pos:column="40">[<expr><name pos:line="819" pos:column="41">i<pos:position pos:line="819" pos:column="42"/></name></expr>]<pos:position pos:line="819" pos:column="43"/></index></name> <operator pos:line="819" pos:column="44">==<pos:position pos:line="819" pos:column="46"/></operator> <literal type="number" pos:line="819" pos:column="47">0x0a<pos:position pos:line="819" pos:column="51"/></literal></expr>)<pos:position pos:line="819" pos:column="52"/></condition><then pos:line="819" pos:column="52"> <block pos:line="819" pos:column="53">{
                <expr_stmt><expr><name><name pos:line="820" pos:column="17">data<pos:position pos:line="820" pos:column="21"/></name><operator pos:line="820" pos:column="21">-&gt;<pos:position pos:line="820" pos:column="26"/></operator><name pos:line="820" pos:column="23">state<pos:position pos:line="820" pos:column="28"/></name><operator pos:line="820" pos:column="28">.<pos:position pos:line="820" pos:column="29"/></operator><name pos:line="820" pos:column="29">scratch<pos:position pos:line="820" pos:column="36"/></name><index pos:line="820" pos:column="36">[<expr><name pos:line="820" pos:column="37">si<pos:position pos:line="820" pos:column="39"/></name><operator pos:line="820" pos:column="39">++<pos:position pos:line="820" pos:column="41"/></operator></expr>]<pos:position pos:line="820" pos:column="42"/></index></name> <operator pos:line="820" pos:column="43">=<pos:position pos:line="820" pos:column="44"/></operator> <literal type="number" pos:line="820" pos:column="45">0x0d<pos:position pos:line="820" pos:column="49"/></literal></expr>;<pos:position pos:line="820" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="821" pos:column="17">data<pos:position pos:line="821" pos:column="21"/></name><operator pos:line="821" pos:column="21">-&gt;<pos:position pos:line="821" pos:column="26"/></operator><name pos:line="821" pos:column="23">state<pos:position pos:line="821" pos:column="28"/></name><operator pos:line="821" pos:column="28">.<pos:position pos:line="821" pos:column="29"/></operator><name pos:line="821" pos:column="29">scratch<pos:position pos:line="821" pos:column="36"/></name><index pos:line="821" pos:column="36">[<expr><name pos:line="821" pos:column="37">si<pos:position pos:line="821" pos:column="39"/></name></expr>]<pos:position pos:line="821" pos:column="40"/></index></name> <operator pos:line="821" pos:column="41">=<pos:position pos:line="821" pos:column="42"/></operator> <literal type="number" pos:line="821" pos:column="43">0x0a<pos:position pos:line="821" pos:column="47"/></literal></expr>;<pos:position pos:line="821" pos:column="48"/></expr_stmt>
              }<pos:position pos:line="822" pos:column="16"/></block></then>
              <else pos:line="823" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="824" pos:column="17">data<pos:position pos:line="824" pos:column="21"/></name><operator pos:line="824" pos:column="21">-&gt;<pos:position pos:line="824" pos:column="26"/></operator><name pos:line="824" pos:column="23">state<pos:position pos:line="824" pos:column="28"/></name><operator pos:line="824" pos:column="28">.<pos:position pos:line="824" pos:column="29"/></operator><name pos:line="824" pos:column="29">scratch<pos:position pos:line="824" pos:column="36"/></name><index pos:line="824" pos:column="36">[<expr><name pos:line="824" pos:column="37">si<pos:position pos:line="824" pos:column="39"/></name></expr>]<pos:position pos:line="824" pos:column="40"/></index></name> <operator pos:line="824" pos:column="41">=<pos:position pos:line="824" pos:column="42"/></operator> <name><name pos:line="824" pos:column="43">conn<pos:position pos:line="824" pos:column="47"/></name><operator pos:line="824" pos:column="47">-&gt;<pos:position pos:line="824" pos:column="52"/></operator><name pos:line="824" pos:column="49">upload_fromhere<pos:position pos:line="824" pos:column="64"/></name><index pos:line="824" pos:column="64">[<expr><name pos:line="824" pos:column="65">i<pos:position pos:line="824" pos:column="66"/></name></expr>]<pos:position pos:line="824" pos:column="67"/></index></name></expr>;<pos:position pos:line="824" pos:column="68"/></expr_stmt></block></else></if>
            }<pos:position pos:line="825" pos:column="14"/></block></for>
            <if pos:line="826" pos:column="13">if<condition pos:line="826" pos:column="15">(<expr><name pos:line="826" pos:column="16">si<pos:position pos:line="826" pos:column="18"/></name> <operator pos:line="826" pos:column="19">!=<pos:position pos:line="826" pos:column="21"/></operator> <name pos:line="826" pos:column="22">nread<pos:position pos:line="826" pos:column="27"/></name></expr>)<pos:position pos:line="826" pos:column="28"/></condition><then pos:line="826" pos:column="28"> <block pos:line="826" pos:column="29">{
              <comment type="block" pos:line="827" pos:column="15">/* only perform the special operation if we really did replace
                 anything */</comment>
              <expr_stmt><expr><name pos:line="829" pos:column="15">nread<pos:position pos:line="829" pos:column="20"/></name> <operator pos:line="829" pos:column="21">=<pos:position pos:line="829" pos:column="22"/></operator> <name pos:line="829" pos:column="23">si<pos:position pos:line="829" pos:column="25"/></name></expr>;<pos:position pos:line="829" pos:column="26"/></expr_stmt>

              <comment type="block" pos:line="831" pos:column="15">/* upload from the new (replaced) buffer instead */</comment>
              <expr_stmt><expr><name><name pos:line="832" pos:column="15">conn<pos:position pos:line="832" pos:column="19"/></name><operator pos:line="832" pos:column="19">-&gt;<pos:position pos:line="832" pos:column="24"/></operator><name pos:line="832" pos:column="21">upload_fromhere<pos:position pos:line="832" pos:column="36"/></name></name> <operator pos:line="832" pos:column="37">=<pos:position pos:line="832" pos:column="38"/></operator> <name><name pos:line="832" pos:column="39">data<pos:position pos:line="832" pos:column="43"/></name><operator pos:line="832" pos:column="43">-&gt;<pos:position pos:line="832" pos:column="48"/></operator><name pos:line="832" pos:column="45">state<pos:position pos:line="832" pos:column="50"/></name><operator pos:line="832" pos:column="50">.<pos:position pos:line="832" pos:column="51"/></operator><name pos:line="832" pos:column="51">scratch<pos:position pos:line="832" pos:column="58"/></name></name></expr>;<pos:position pos:line="832" pos:column="59"/></expr_stmt>

              <comment type="block" pos:line="834" pos:column="15">/* set the new amount too */</comment>
              <expr_stmt><expr><name><name pos:line="835" pos:column="15">conn<pos:position pos:line="835" pos:column="19"/></name><operator pos:line="835" pos:column="19">-&gt;<pos:position pos:line="835" pos:column="24"/></operator><name pos:line="835" pos:column="21">upload_present<pos:position pos:line="835" pos:column="35"/></name></name> <operator pos:line="835" pos:column="36">=<pos:position pos:line="835" pos:column="37"/></operator> <name pos:line="835" pos:column="38">nread<pos:position pos:line="835" pos:column="43"/></name></expr>;<pos:position pos:line="835" pos:column="44"/></expr_stmt>
            }<pos:position pos:line="836" pos:column="14"/></block></then></if>
          }<pos:position pos:line="837" pos:column="12"/></block></then></if>
        }<pos:position pos:line="838" pos:column="10"/></block></then>
        <else pos:line="839" pos:column="9">else <block pos:line="839" pos:column="14">{
          <comment type="block" pos:line="840" pos:column="11">/* We have a partial buffer left from a previous "round". Use
             that instead of reading more data */</comment>
        }<pos:position pos:line="842" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="844" pos:column="9">/* write to socket (send away data) */</comment>
        <expr_stmt><expr><name pos:line="845" pos:column="9">result<pos:position pos:line="845" pos:column="15"/></name> <operator pos:line="845" pos:column="16">=<pos:position pos:line="845" pos:column="17"/></operator> <call><name pos:line="845" pos:column="18">Curl_write<pos:position pos:line="845" pos:column="28"/></name><argument_list pos:line="845" pos:column="28">(<argument><expr><name pos:line="845" pos:column="29">conn<pos:position pos:line="845" pos:column="33"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="846" pos:column="29">conn<pos:position pos:line="846" pos:column="33"/></name><operator pos:line="846" pos:column="33">-&gt;<pos:position pos:line="846" pos:column="38"/></operator><name pos:line="846" pos:column="35">writesockfd<pos:position pos:line="846" pos:column="46"/></name></name></expr></argument>,     <comment type="block" pos:line="846" pos:column="52">/* socket to send to */</comment>
                            <argument><expr><name><name pos:line="847" pos:column="29">conn<pos:position pos:line="847" pos:column="33"/></name><operator pos:line="847" pos:column="33">-&gt;<pos:position pos:line="847" pos:column="38"/></operator><name pos:line="847" pos:column="35">upload_fromhere<pos:position pos:line="847" pos:column="50"/></name></name></expr></argument>, <comment type="block" pos:line="847" pos:column="52">/* buffer pointer */</comment>
                            <argument><expr><name><name pos:line="848" pos:column="29">conn<pos:position pos:line="848" pos:column="33"/></name><operator pos:line="848" pos:column="33">-&gt;<pos:position pos:line="848" pos:column="38"/></operator><name pos:line="848" pos:column="35">upload_present<pos:position pos:line="848" pos:column="49"/></name></name></expr></argument>,  <comment type="block" pos:line="848" pos:column="52">/* buffer size */</comment>
                            <argument><expr><operator pos:line="849" pos:column="29">&amp;<pos:position pos:line="849" pos:column="34"/></operator><name pos:line="849" pos:column="30">bytes_written<pos:position pos:line="849" pos:column="43"/></name></expr></argument>)<pos:position pos:line="849" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="849" pos:column="45"/></expr_stmt>       <comment type="block" pos:line="849" pos:column="52">/* actually send away */</comment>
        <if pos:line="850" pos:column="9">if<condition pos:line="850" pos:column="11">(<expr><name pos:line="850" pos:column="12">result<pos:position pos:line="850" pos:column="18"/></name></expr>)<pos:position pos:line="850" pos:column="19"/></condition><then pos:line="850" pos:column="19">
          <block type="pseudo"><return pos:line="851" pos:column="11">return <expr><name pos:line="851" pos:column="18">result<pos:position pos:line="851" pos:column="24"/></name></expr>;<pos:position pos:line="851" pos:column="25"/></return></block></then></if>

        <if pos:line="853" pos:column="9">if<condition pos:line="853" pos:column="11">(<expr><name><name pos:line="853" pos:column="12">data<pos:position pos:line="853" pos:column="16"/></name><operator pos:line="853" pos:column="16">-&gt;<pos:position pos:line="853" pos:column="21"/></operator><name pos:line="853" pos:column="18">set<pos:position pos:line="853" pos:column="21"/></name><operator pos:line="853" pos:column="21">.<pos:position pos:line="853" pos:column="22"/></operator><name pos:line="853" pos:column="22">verbose<pos:position pos:line="853" pos:column="29"/></name></name></expr>)<pos:position pos:line="853" pos:column="30"/></condition><then pos:line="853" pos:column="30">
          <comment type="block" pos:line="854" pos:column="11">/* show the data before we change the pointer upload_fromhere */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="855" pos:column="11">Curl_debug<pos:position pos:line="855" pos:column="21"/></name><argument_list pos:line="855" pos:column="21">(<argument><expr><name pos:line="855" pos:column="22">data<pos:position pos:line="855" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="855" pos:column="28">CURLINFO_DATA_OUT<pos:position pos:line="855" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="855" pos:column="47">conn<pos:position pos:line="855" pos:column="51"/></name><operator pos:line="855" pos:column="51">-&gt;<pos:position pos:line="855" pos:column="56"/></operator><name pos:line="855" pos:column="53">upload_fromhere<pos:position pos:line="855" pos:column="68"/></name></name></expr></argument>,
                     <argument><expr><name pos:line="856" pos:column="22">bytes_written<pos:position pos:line="856" pos:column="35"/></name></expr></argument>)<pos:position pos:line="856" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="856" pos:column="37"/></expr_stmt></block></then></if>
      
        <if pos:line="858" pos:column="9">if<condition pos:line="858" pos:column="11">(<expr><name><name pos:line="858" pos:column="12">conn<pos:position pos:line="858" pos:column="16"/></name><operator pos:line="858" pos:column="16">-&gt;<pos:position pos:line="858" pos:column="21"/></operator><name pos:line="858" pos:column="18">upload_present<pos:position pos:line="858" pos:column="32"/></name></name> <operator pos:line="858" pos:column="33">!=<pos:position pos:line="858" pos:column="35"/></operator> <name pos:line="858" pos:column="36">bytes_written<pos:position pos:line="858" pos:column="49"/></name></expr>)<pos:position pos:line="858" pos:column="50"/></condition><then pos:line="858" pos:column="50"> <block pos:line="858" pos:column="51">{
          <comment type="block" pos:line="859" pos:column="11">/* we only wrote a part of the buffer (if anything), deal with it! */</comment>

          <comment type="block" pos:line="861" pos:column="11">/* store the amount of bytes left in the buffer to write */</comment>
          <expr_stmt><expr><name><name pos:line="862" pos:column="11">conn<pos:position pos:line="862" pos:column="15"/></name><operator pos:line="862" pos:column="15">-&gt;<pos:position pos:line="862" pos:column="20"/></operator><name pos:line="862" pos:column="17">upload_present<pos:position pos:line="862" pos:column="31"/></name></name> <operator pos:line="862" pos:column="32">-=<pos:position pos:line="862" pos:column="34"/></operator> <name pos:line="862" pos:column="35">bytes_written<pos:position pos:line="862" pos:column="48"/></name></expr>;<pos:position pos:line="862" pos:column="49"/></expr_stmt>

          <comment type="block" pos:line="864" pos:column="11">/* advance the pointer where to find the buffer when the next send
             is to happen */</comment>
          <expr_stmt><expr><name><name pos:line="866" pos:column="11">conn<pos:position pos:line="866" pos:column="15"/></name><operator pos:line="866" pos:column="15">-&gt;<pos:position pos:line="866" pos:column="20"/></operator><name pos:line="866" pos:column="17">upload_fromhere<pos:position pos:line="866" pos:column="32"/></name></name> <operator pos:line="866" pos:column="33">+=<pos:position pos:line="866" pos:column="35"/></operator> <name pos:line="866" pos:column="36">bytes_written<pos:position pos:line="866" pos:column="49"/></name></expr>;<pos:position pos:line="866" pos:column="50"/></expr_stmt>

          <expr_stmt><expr><name pos:line="868" pos:column="11">writedone<pos:position pos:line="868" pos:column="20"/></name> <operator pos:line="868" pos:column="21">=<pos:position pos:line="868" pos:column="22"/></operator> <name pos:line="868" pos:column="23">TRUE<pos:position pos:line="868" pos:column="27"/></name></expr>;<pos:position pos:line="868" pos:column="28"/></expr_stmt> <comment type="block" pos:line="868" pos:column="29">/* we are done, stop the loop */</comment>
        }<pos:position pos:line="869" pos:column="10"/></block></then>
        <else pos:line="870" pos:column="9">else <block pos:line="870" pos:column="14">{
          <comment type="block" pos:line="871" pos:column="11">/* we've uploaded that buffer now */</comment>
          <expr_stmt><expr><name><name pos:line="872" pos:column="11">conn<pos:position pos:line="872" pos:column="15"/></name><operator pos:line="872" pos:column="15">-&gt;<pos:position pos:line="872" pos:column="20"/></operator><name pos:line="872" pos:column="17">upload_fromhere<pos:position pos:line="872" pos:column="32"/></name></name> <operator pos:line="872" pos:column="33">=<pos:position pos:line="872" pos:column="34"/></operator> <name><name pos:line="872" pos:column="35">k<pos:position pos:line="872" pos:column="36"/></name><operator pos:line="872" pos:column="36">-&gt;<pos:position pos:line="872" pos:column="41"/></operator><name pos:line="872" pos:column="38">uploadbuf<pos:position pos:line="872" pos:column="47"/></name></name></expr>;<pos:position pos:line="872" pos:column="48"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="873" pos:column="11">conn<pos:position pos:line="873" pos:column="15"/></name><operator pos:line="873" pos:column="15">-&gt;<pos:position pos:line="873" pos:column="20"/></operator><name pos:line="873" pos:column="17">upload_present<pos:position pos:line="873" pos:column="31"/></name></name> <operator pos:line="873" pos:column="32">=<pos:position pos:line="873" pos:column="33"/></operator> <literal type="number" pos:line="873" pos:column="34">0<pos:position pos:line="873" pos:column="35"/></literal></expr>;<pos:position pos:line="873" pos:column="36"/></expr_stmt> <comment type="block" pos:line="873" pos:column="37">/* no more bytes left */</comment>

          <if pos:line="875" pos:column="11">if<condition pos:line="875" pos:column="13">(<expr><name><name pos:line="875" pos:column="14">k<pos:position pos:line="875" pos:column="15"/></name><operator pos:line="875" pos:column="15">-&gt;<pos:position pos:line="875" pos:column="20"/></operator><name pos:line="875" pos:column="17">upload_done<pos:position pos:line="875" pos:column="28"/></name></name></expr>)<pos:position pos:line="875" pos:column="29"/></condition><then pos:line="875" pos:column="29"> <block pos:line="875" pos:column="30">{
            <comment type="block" pos:line="876" pos:column="13">/* switch off writing, we're done! */</comment>
            <expr_stmt><expr><name><name pos:line="877" pos:column="13">k<pos:position pos:line="877" pos:column="14"/></name><operator pos:line="877" pos:column="14">-&gt;<pos:position pos:line="877" pos:column="19"/></operator><name pos:line="877" pos:column="16">keepon<pos:position pos:line="877" pos:column="22"/></name></name> <operator pos:line="877" pos:column="23">&amp;=<pos:position pos:line="877" pos:column="29"/></operator> <operator pos:line="877" pos:column="26">~<pos:position pos:line="877" pos:column="27"/></operator><name pos:line="877" pos:column="27">KEEP_WRITE<pos:position pos:line="877" pos:column="37"/></name></expr>;<pos:position pos:line="877" pos:column="38"/></expr_stmt> <comment type="block" pos:line="877" pos:column="39">/* we're done writing */</comment>
            <expr_stmt><expr><call><name pos:line="878" pos:column="13">FD_ZERO<pos:position pos:line="878" pos:column="20"/></name><argument_list pos:line="878" pos:column="20">(<argument><expr><operator pos:line="878" pos:column="21">&amp;<pos:position pos:line="878" pos:column="26"/></operator><name><name pos:line="878" pos:column="22">k<pos:position pos:line="878" pos:column="23"/></name><operator pos:line="878" pos:column="23">-&gt;<pos:position pos:line="878" pos:column="28"/></operator><name pos:line="878" pos:column="25">wkeepfd<pos:position pos:line="878" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="878" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="878" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name pos:line="879" pos:column="13">writedone<pos:position pos:line="879" pos:column="22"/></name> <operator pos:line="879" pos:column="23">=<pos:position pos:line="879" pos:column="24"/></operator> <name pos:line="879" pos:column="25">TRUE<pos:position pos:line="879" pos:column="29"/></name></expr>;<pos:position pos:line="879" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="880" pos:column="12"/></block></then></if>
        }<pos:position pos:line="881" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name><name pos:line="883" pos:column="9">k<pos:position pos:line="883" pos:column="10"/></name><operator pos:line="883" pos:column="10">-&gt;<pos:position pos:line="883" pos:column="15"/></operator><name pos:line="883" pos:column="12">writebytecount<pos:position pos:line="883" pos:column="26"/></name></name> <operator pos:line="883" pos:column="27">+=<pos:position pos:line="883" pos:column="29"/></operator> <name pos:line="883" pos:column="30">bytes_written<pos:position pos:line="883" pos:column="43"/></name></expr>;<pos:position pos:line="883" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="884" pos:column="9">Curl_pgrsSetUploadCounter<pos:position pos:line="884" pos:column="34"/></name><argument_list pos:line="884" pos:column="34">(<argument><expr><name pos:line="884" pos:column="35">data<pos:position pos:line="884" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="884" pos:column="41">(<pos:position pos:line="884" pos:column="42"/></operator><name pos:line="884" pos:column="42">double<pos:position pos:line="884" pos:column="48"/></name><operator pos:line="884" pos:column="48">)<pos:position pos:line="884" pos:column="49"/></operator><name><name pos:line="884" pos:column="49">k<pos:position pos:line="884" pos:column="50"/></name><operator pos:line="884" pos:column="50">-&gt;<pos:position pos:line="884" pos:column="55"/></operator><name pos:line="884" pos:column="52">writebytecount<pos:position pos:line="884" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="884" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="884" pos:column="68"/></expr_stmt>

      }<pos:position pos:line="886" pos:column="8"/></block> while<condition pos:line="886" pos:column="14">(<expr><operator pos:line="886" pos:column="15">!<pos:position pos:line="886" pos:column="16"/></operator><name pos:line="886" pos:column="16">writedone<pos:position pos:line="886" pos:column="25"/></name></expr>)<pos:position pos:line="886" pos:column="26"/></condition>;<pos:position pos:line="886" pos:column="27"/></do> <comment type="block" pos:line="886" pos:column="28">/* loop until we're done writing! */</comment>
      
    }<pos:position pos:line="888" pos:column="6"/></block></then></if>

  }<pos:position pos:line="890" pos:column="4"/></block> while<condition pos:line="890" pos:column="10">(<expr><literal type="number" pos:line="890" pos:column="11">0<pos:position pos:line="890" pos:column="12"/></literal></expr>)<pos:position pos:line="890" pos:column="13"/></condition>;<pos:position pos:line="890" pos:column="14"/></do> <comment type="block" pos:line="890" pos:column="15">/* just to break out from! */</comment>

  <expr_stmt><expr><name><name pos:line="892" pos:column="3">k<pos:position pos:line="892" pos:column="4"/></name><operator pos:line="892" pos:column="4">-&gt;<pos:position pos:line="892" pos:column="9"/></operator><name pos:line="892" pos:column="6">now<pos:position pos:line="892" pos:column="9"/></name></name> <operator pos:line="892" pos:column="10">=<pos:position pos:line="892" pos:column="11"/></operator> <call><name pos:line="892" pos:column="12">Curl_tvnow<pos:position pos:line="892" pos:column="22"/></name><argument_list pos:line="892" pos:column="22">()<pos:position pos:line="892" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="892" pos:column="25"/></expr_stmt>
  <if pos:line="893" pos:column="3">if<condition pos:line="893" pos:column="5">(<expr><name pos:line="893" pos:column="6">didwhat<pos:position pos:line="893" pos:column="13"/></name></expr>)<pos:position pos:line="893" pos:column="14"/></condition><then pos:line="893" pos:column="14"> <block pos:line="893" pos:column="15">{
    <comment type="block" pos:line="894" pos:column="5">/* Update read/write counters */</comment>
    <if pos:line="895" pos:column="5">if<condition pos:line="895" pos:column="7">(<expr><name><name pos:line="895" pos:column="8">conn<pos:position pos:line="895" pos:column="12"/></name><operator pos:line="895" pos:column="12">-&gt;<pos:position pos:line="895" pos:column="17"/></operator><name pos:line="895" pos:column="14">bytecountp<pos:position pos:line="895" pos:column="24"/></name></name></expr>)<pos:position pos:line="895" pos:column="25"/></condition><then pos:line="895" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="896" pos:column="7">*<pos:position pos:line="896" pos:column="8"/></operator><name><name pos:line="896" pos:column="8">conn<pos:position pos:line="896" pos:column="12"/></name><operator pos:line="896" pos:column="12">-&gt;<pos:position pos:line="896" pos:column="17"/></operator><name pos:line="896" pos:column="14">bytecountp<pos:position pos:line="896" pos:column="24"/></name></name> <operator pos:line="896" pos:column="25">=<pos:position pos:line="896" pos:column="26"/></operator> <name><name pos:line="896" pos:column="27">k<pos:position pos:line="896" pos:column="28"/></name><operator pos:line="896" pos:column="28">-&gt;<pos:position pos:line="896" pos:column="33"/></operator><name pos:line="896" pos:column="30">bytecount<pos:position pos:line="896" pos:column="39"/></name></name></expr>;<pos:position pos:line="896" pos:column="40"/></expr_stmt></block></then></if> <comment type="block" pos:line="896" pos:column="41">/* read count */</comment>
    <if pos:line="897" pos:column="5">if<condition pos:line="897" pos:column="7">(<expr><name><name pos:line="897" pos:column="8">conn<pos:position pos:line="897" pos:column="12"/></name><operator pos:line="897" pos:column="12">-&gt;<pos:position pos:line="897" pos:column="17"/></operator><name pos:line="897" pos:column="14">writebytecountp<pos:position pos:line="897" pos:column="29"/></name></name></expr>)<pos:position pos:line="897" pos:column="30"/></condition><then pos:line="897" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="898" pos:column="7">*<pos:position pos:line="898" pos:column="8"/></operator><name><name pos:line="898" pos:column="8">conn<pos:position pos:line="898" pos:column="12"/></name><operator pos:line="898" pos:column="12">-&gt;<pos:position pos:line="898" pos:column="17"/></operator><name pos:line="898" pos:column="14">writebytecountp<pos:position pos:line="898" pos:column="29"/></name></name> <operator pos:line="898" pos:column="30">=<pos:position pos:line="898" pos:column="31"/></operator> <name><name pos:line="898" pos:column="32">k<pos:position pos:line="898" pos:column="33"/></name><operator pos:line="898" pos:column="33">-&gt;<pos:position pos:line="898" pos:column="38"/></operator><name pos:line="898" pos:column="35">writebytecount<pos:position pos:line="898" pos:column="49"/></name></name></expr>;<pos:position pos:line="898" pos:column="50"/></expr_stmt></block></then></if> <comment type="block" pos:line="898" pos:column="51">/* write count */</comment>
  }<pos:position pos:line="899" pos:column="4"/></block></then>
  <else pos:line="900" pos:column="3">else <block pos:line="900" pos:column="8">{
    <comment type="block" pos:line="901" pos:column="5">/* no read no write, this is a timeout? */</comment>
    <if pos:line="902" pos:column="5">if <condition pos:line="902" pos:column="8">(<expr><name><name pos:line="902" pos:column="9">k<pos:position pos:line="902" pos:column="10"/></name><operator pos:line="902" pos:column="10">-&gt;<pos:position pos:line="902" pos:column="15"/></operator><name pos:line="902" pos:column="12">write_after_100_header<pos:position pos:line="902" pos:column="34"/></name></name></expr>)<pos:position pos:line="902" pos:column="35"/></condition><then pos:line="902" pos:column="35"> <block pos:line="902" pos:column="36">{
      <comment type="block" pos:line="903" pos:column="7">/* This should allow some time for the header to arrive, but only a
         very short time as otherwise it'll be too much wasted times too
         often. */</comment>

      <comment type="block" pos:line="907" pos:column="7">/* Quoting RFC2616, section "8.2.3 Use of the 100 (Continue) Status":
         
      Therefore, when a client sends this header field to an origin server
      (possibly via a proxy) from which it has never seen a 100 (Continue)
      status, the client SHOULD NOT wait for an indefinite period before
      sending the request body.

      */</comment>

      <decl_stmt><decl><type><name pos:line="916" pos:column="7">int<pos:position pos:line="916" pos:column="10"/></name></type> <name pos:line="916" pos:column="11">ms<pos:position pos:line="916" pos:column="13"/></name> <init pos:line="916" pos:column="14">= <expr><call><name pos:line="916" pos:column="16">Curl_tvdiff<pos:position pos:line="916" pos:column="27"/></name><argument_list pos:line="916" pos:column="27">(<argument><expr><name><name pos:line="916" pos:column="28">k<pos:position pos:line="916" pos:column="29"/></name><operator pos:line="916" pos:column="29">-&gt;<pos:position pos:line="916" pos:column="34"/></operator><name pos:line="916" pos:column="31">now<pos:position pos:line="916" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="916" pos:column="36">k<pos:position pos:line="916" pos:column="37"/></name><operator pos:line="916" pos:column="37">-&gt;<pos:position pos:line="916" pos:column="42"/></operator><name pos:line="916" pos:column="39">start100<pos:position pos:line="916" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="916" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="916" pos:column="49"/></decl_stmt>
      <if pos:line="917" pos:column="7">if<condition pos:line="917" pos:column="9">(<expr><name pos:line="917" pos:column="10">ms<pos:position pos:line="917" pos:column="12"/></name> <operator pos:line="917" pos:column="13">&gt;<pos:position pos:line="917" pos:column="17"/></operator> <name pos:line="917" pos:column="15">CURL_TIMEOUT_EXPECT_100<pos:position pos:line="917" pos:column="38"/></name></expr>)<pos:position pos:line="917" pos:column="39"/></condition><then pos:line="917" pos:column="39"> <block pos:line="917" pos:column="40">{
        <comment type="block" pos:line="918" pos:column="9">/* we've waited long enough, continue anyway */</comment>
        <expr_stmt><expr><name><name pos:line="919" pos:column="9">k<pos:position pos:line="919" pos:column="10"/></name><operator pos:line="919" pos:column="10">-&gt;<pos:position pos:line="919" pos:column="15"/></operator><name pos:line="919" pos:column="12">write_after_100_header<pos:position pos:line="919" pos:column="34"/></name></name> <operator pos:line="919" pos:column="35">=<pos:position pos:line="919" pos:column="36"/></operator> <name pos:line="919" pos:column="37">FALSE<pos:position pos:line="919" pos:column="42"/></name></expr>;<pos:position pos:line="919" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="920" pos:column="9">FD_SET<pos:position pos:line="920" pos:column="15"/></name> <argument_list pos:line="920" pos:column="16">(<argument><expr><name><name pos:line="920" pos:column="17">conn<pos:position pos:line="920" pos:column="21"/></name><operator pos:line="920" pos:column="21">-&gt;<pos:position pos:line="920" pos:column="26"/></operator><name pos:line="920" pos:column="23">writesockfd<pos:position pos:line="920" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="920" pos:column="36">&amp;<pos:position pos:line="920" pos:column="41"/></operator><name><name pos:line="920" pos:column="37">k<pos:position pos:line="920" pos:column="38"/></name><operator pos:line="920" pos:column="38">-&gt;<pos:position pos:line="920" pos:column="43"/></operator><name pos:line="920" pos:column="40">writefd<pos:position pos:line="920" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="920" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="920" pos:column="49"/></expr_stmt> <comment type="block" pos:line="920" pos:column="50">/* write socket */</comment>
        <expr_stmt><expr><name><name pos:line="921" pos:column="9">k<pos:position pos:line="921" pos:column="10"/></name><operator pos:line="921" pos:column="10">-&gt;<pos:position pos:line="921" pos:column="15"/></operator><name pos:line="921" pos:column="12">keepon<pos:position pos:line="921" pos:column="18"/></name></name> <operator pos:line="921" pos:column="19">|=<pos:position pos:line="921" pos:column="21"/></operator> <name pos:line="921" pos:column="22">KEEP_WRITE<pos:position pos:line="921" pos:column="32"/></name></expr>;<pos:position pos:line="921" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="922" pos:column="9">k<pos:position pos:line="922" pos:column="10"/></name><operator pos:line="922" pos:column="10">-&gt;<pos:position pos:line="922" pos:column="15"/></operator><name pos:line="922" pos:column="12">wkeepfd<pos:position pos:line="922" pos:column="19"/></name></name> <operator pos:line="922" pos:column="20">=<pos:position pos:line="922" pos:column="21"/></operator> <name><name pos:line="922" pos:column="22">k<pos:position pos:line="922" pos:column="23"/></name><operator pos:line="922" pos:column="23">-&gt;<pos:position pos:line="922" pos:column="28"/></operator><name pos:line="922" pos:column="25">writefd<pos:position pos:line="922" pos:column="32"/></name></name></expr>;<pos:position pos:line="922" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="923" pos:column="8"/></block></then></if>
    }<pos:position pos:line="924" pos:column="6"/></block></then></if>    
  }<pos:position pos:line="925" pos:column="4"/></block></else></if>

  <if pos:line="927" pos:column="3">if<condition pos:line="927" pos:column="5">(<expr><call><name pos:line="927" pos:column="6">Curl_pgrsUpdate<pos:position pos:line="927" pos:column="21"/></name><argument_list pos:line="927" pos:column="21">(<argument><expr><name pos:line="927" pos:column="22">conn<pos:position pos:line="927" pos:column="26"/></name></expr></argument>)<pos:position pos:line="927" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="927" pos:column="28"/></condition><then pos:line="927" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="928" pos:column="5">result<pos:position pos:line="928" pos:column="11"/></name> <operator pos:line="928" pos:column="12">=<pos:position pos:line="928" pos:column="13"/></operator> <name pos:line="928" pos:column="14">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="928" pos:column="39"/></name></expr>;<pos:position pos:line="928" pos:column="40"/></expr_stmt></block></then>
  <else pos:line="929" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="930" pos:column="5">result<pos:position pos:line="930" pos:column="11"/></name> <operator pos:line="930" pos:column="12">=<pos:position pos:line="930" pos:column="13"/></operator> <call><name pos:line="930" pos:column="14">Curl_speedcheck<pos:position pos:line="930" pos:column="29"/></name> <argument_list pos:line="930" pos:column="30">(<argument><expr><name pos:line="930" pos:column="31">data<pos:position pos:line="930" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="930" pos:column="37">k<pos:position pos:line="930" pos:column="38"/></name><operator pos:line="930" pos:column="38">-&gt;<pos:position pos:line="930" pos:column="43"/></operator><name pos:line="930" pos:column="40">now<pos:position pos:line="930" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="930" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="930" pos:column="45"/></expr_stmt></block></else></if>
  <if pos:line="931" pos:column="3">if <condition pos:line="931" pos:column="6">(<expr><name pos:line="931" pos:column="7">result<pos:position pos:line="931" pos:column="13"/></name></expr>)<pos:position pos:line="931" pos:column="14"/></condition><then pos:line="931" pos:column="14">
    <block type="pseudo"><return pos:line="932" pos:column="5">return <expr><name pos:line="932" pos:column="12">result<pos:position pos:line="932" pos:column="18"/></name></expr>;<pos:position pos:line="932" pos:column="19"/></return></block></then></if>
    
  <if pos:line="934" pos:column="3">if <condition pos:line="934" pos:column="6">(<expr><name><name pos:line="934" pos:column="7">data<pos:position pos:line="934" pos:column="11"/></name><operator pos:line="934" pos:column="11">-&gt;<pos:position pos:line="934" pos:column="16"/></operator><name pos:line="934" pos:column="13">set<pos:position pos:line="934" pos:column="16"/></name><operator pos:line="934" pos:column="16">.<pos:position pos:line="934" pos:column="17"/></operator><name pos:line="934" pos:column="17">timeout<pos:position pos:line="934" pos:column="24"/></name></name> <operator pos:line="934" pos:column="25">&amp;&amp;<pos:position pos:line="934" pos:column="35"/></operator>
      <operator pos:line="935" pos:column="7">(<pos:position pos:line="935" pos:column="8"/></operator><operator pos:line="935" pos:column="8">(<pos:position pos:line="935" pos:column="9"/></operator><call><name pos:line="935" pos:column="9">Curl_tvdiff<pos:position pos:line="935" pos:column="20"/></name><argument_list pos:line="935" pos:column="20">(<argument><expr><name><name pos:line="935" pos:column="21">k<pos:position pos:line="935" pos:column="22"/></name><operator pos:line="935" pos:column="22">-&gt;<pos:position pos:line="935" pos:column="27"/></operator><name pos:line="935" pos:column="24">now<pos:position pos:line="935" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="935" pos:column="29">k<pos:position pos:line="935" pos:column="30"/></name><operator pos:line="935" pos:column="30">-&gt;<pos:position pos:line="935" pos:column="35"/></operator><name pos:line="935" pos:column="32">start<pos:position pos:line="935" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="935" pos:column="38"/></argument_list></call><operator pos:line="935" pos:column="38">/<pos:position pos:line="935" pos:column="39"/></operator><literal type="number" pos:line="935" pos:column="39">1000<pos:position pos:line="935" pos:column="43"/></literal><operator pos:line="935" pos:column="43">)<pos:position pos:line="935" pos:column="44"/></operator> <operator pos:line="935" pos:column="45">&gt;=<pos:position pos:line="935" pos:column="50"/></operator> <name><name pos:line="935" pos:column="48">data<pos:position pos:line="935" pos:column="52"/></name><operator pos:line="935" pos:column="52">-&gt;<pos:position pos:line="935" pos:column="57"/></operator><name pos:line="935" pos:column="54">set<pos:position pos:line="935" pos:column="57"/></name><operator pos:line="935" pos:column="57">.<pos:position pos:line="935" pos:column="58"/></operator><name pos:line="935" pos:column="58">timeout<pos:position pos:line="935" pos:column="65"/></name></name><operator pos:line="935" pos:column="65">)<pos:position pos:line="935" pos:column="66"/></operator></expr>)<pos:position pos:line="935" pos:column="67"/></condition><then pos:line="935" pos:column="67"> <block pos:line="935" pos:column="68">{
    <expr_stmt><expr><call><name pos:line="936" pos:column="5">failf<pos:position pos:line="936" pos:column="10"/></name> <argument_list pos:line="936" pos:column="11">(<argument><expr><name pos:line="936" pos:column="12">data<pos:position pos:line="936" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="936" pos:column="18">"Operation timed out with %d out of %d bytes received"<pos:position pos:line="936" pos:column="72"/></literal></expr></argument>,
           <argument><expr><name><name pos:line="937" pos:column="12">k<pos:position pos:line="937" pos:column="13"/></name><operator pos:line="937" pos:column="13">-&gt;<pos:position pos:line="937" pos:column="18"/></operator><name pos:line="937" pos:column="15">bytecount<pos:position pos:line="937" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="937" pos:column="26">conn<pos:position pos:line="937" pos:column="30"/></name><operator pos:line="937" pos:column="30">-&gt;<pos:position pos:line="937" pos:column="35"/></operator><name pos:line="937" pos:column="32">size<pos:position pos:line="937" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="937" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="937" pos:column="38"/></expr_stmt>
    <return pos:line="938" pos:column="5">return <expr><name pos:line="938" pos:column="12">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="938" pos:column="37"/></name></expr>;<pos:position pos:line="938" pos:column="38"/></return>
  }<pos:position pos:line="939" pos:column="4"/></block></then></if>

  <if pos:line="941" pos:column="3">if<condition pos:line="941" pos:column="5">(<expr><operator pos:line="941" pos:column="6">!<pos:position pos:line="941" pos:column="7"/></operator><name><name pos:line="941" pos:column="7">k<pos:position pos:line="941" pos:column="8"/></name><operator pos:line="941" pos:column="8">-&gt;<pos:position pos:line="941" pos:column="13"/></operator><name pos:line="941" pos:column="10">keepon<pos:position pos:line="941" pos:column="16"/></name></name></expr>)<pos:position pos:line="941" pos:column="17"/></condition><then pos:line="941" pos:column="17"> <block pos:line="941" pos:column="18">{
    <comment type="block" pos:line="942" pos:column="5">/*
     * The transfer has been performed. Just make some general checks before
     * returning.
     */</comment>

    <if pos:line="947" pos:column="5">if<condition pos:line="947" pos:column="7">(<expr><operator pos:line="947" pos:column="8">!<pos:position pos:line="947" pos:column="9"/></operator><operator pos:line="947" pos:column="9">(<pos:position pos:line="947" pos:column="10"/></operator><name><name pos:line="947" pos:column="10">data<pos:position pos:line="947" pos:column="14"/></name><operator pos:line="947" pos:column="14">-&gt;<pos:position pos:line="947" pos:column="19"/></operator><name pos:line="947" pos:column="16">set<pos:position pos:line="947" pos:column="19"/></name><operator pos:line="947" pos:column="19">.<pos:position pos:line="947" pos:column="20"/></operator><name pos:line="947" pos:column="20">no_body<pos:position pos:line="947" pos:column="27"/></name></name><operator pos:line="947" pos:column="27">)<pos:position pos:line="947" pos:column="28"/></operator> <operator pos:line="947" pos:column="29">&amp;&amp;<pos:position pos:line="947" pos:column="39"/></operator> <name><name pos:line="947" pos:column="32">k<pos:position pos:line="947" pos:column="33"/></name><operator pos:line="947" pos:column="33">-&gt;<pos:position pos:line="947" pos:column="38"/></operator><name pos:line="947" pos:column="35">contentlength<pos:position pos:line="947" pos:column="48"/></name></name> <operator pos:line="947" pos:column="49">&amp;&amp;<pos:position pos:line="947" pos:column="59"/></operator>
       <operator pos:line="948" pos:column="8">(<pos:position pos:line="948" pos:column="9"/></operator><name><name pos:line="948" pos:column="9">k<pos:position pos:line="948" pos:column="10"/></name><operator pos:line="948" pos:column="10">-&gt;<pos:position pos:line="948" pos:column="15"/></operator><name pos:line="948" pos:column="12">bytecount<pos:position pos:line="948" pos:column="21"/></name></name> <operator pos:line="948" pos:column="22">!=<pos:position pos:line="948" pos:column="24"/></operator> <name><name pos:line="948" pos:column="25">k<pos:position pos:line="948" pos:column="26"/></name><operator pos:line="948" pos:column="26">-&gt;<pos:position pos:line="948" pos:column="31"/></operator><name pos:line="948" pos:column="28">contentlength<pos:position pos:line="948" pos:column="41"/></name></name><operator pos:line="948" pos:column="41">)<pos:position pos:line="948" pos:column="42"/></operator> <operator pos:line="948" pos:column="43">&amp;&amp;<pos:position pos:line="948" pos:column="53"/></operator>
       <operator pos:line="949" pos:column="8">!<pos:position pos:line="949" pos:column="9"/></operator><name><name pos:line="949" pos:column="9">conn<pos:position pos:line="949" pos:column="13"/></name><operator pos:line="949" pos:column="13">-&gt;<pos:position pos:line="949" pos:column="18"/></operator><name pos:line="949" pos:column="15">newurl<pos:position pos:line="949" pos:column="21"/></name></name></expr>)<pos:position pos:line="949" pos:column="22"/></condition><then pos:line="949" pos:column="22"> <block pos:line="949" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="950" pos:column="7">failf<pos:position pos:line="950" pos:column="12"/></name><argument_list pos:line="950" pos:column="12">(<argument><expr><name pos:line="950" pos:column="13">data<pos:position pos:line="950" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="950" pos:column="19">"transfer closed with %d bytes remaining to read"<pos:position pos:line="950" pos:column="68"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="951" pos:column="13">k<pos:position pos:line="951" pos:column="14"/></name><operator pos:line="951" pos:column="14">-&gt;<pos:position pos:line="951" pos:column="19"/></operator><name pos:line="951" pos:column="16">contentlength<pos:position pos:line="951" pos:column="29"/></name></name><operator pos:line="951" pos:column="29">-<pos:position pos:line="951" pos:column="30"/></operator><name><name pos:line="951" pos:column="30">k<pos:position pos:line="951" pos:column="31"/></name><operator pos:line="951" pos:column="31">-&gt;<pos:position pos:line="951" pos:column="36"/></operator><name pos:line="951" pos:column="33">bytecount<pos:position pos:line="951" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="951" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="951" pos:column="44"/></expr_stmt>
      <return pos:line="952" pos:column="7">return <expr><name pos:line="952" pos:column="14">CURLE_PARTIAL_FILE<pos:position pos:line="952" pos:column="32"/></name></expr>;<pos:position pos:line="952" pos:column="33"/></return>
    }<pos:position pos:line="953" pos:column="6"/></block></then>
    <elseif pos:line="954" pos:column="5">else <if pos:line="954" pos:column="10">if<condition pos:line="954" pos:column="12">(<expr><name><name pos:line="954" pos:column="13">conn<pos:position pos:line="954" pos:column="17"/></name><operator pos:line="954" pos:column="17">-&gt;<pos:position pos:line="954" pos:column="22"/></operator><name pos:line="954" pos:column="19">bits<pos:position pos:line="954" pos:column="23"/></name><operator pos:line="954" pos:column="23">.<pos:position pos:line="954" pos:column="24"/></operator><name pos:line="954" pos:column="24">chunk<pos:position pos:line="954" pos:column="29"/></name></name> <operator pos:line="954" pos:column="30">&amp;&amp;<pos:position pos:line="954" pos:column="40"/></operator> <name><name pos:line="954" pos:column="33">conn<pos:position pos:line="954" pos:column="37"/></name><operator pos:line="954" pos:column="37">-&gt;<pos:position pos:line="954" pos:column="42"/></operator><name pos:line="954" pos:column="39">proto<pos:position pos:line="954" pos:column="44"/></name><operator pos:line="954" pos:column="44">.<pos:position pos:line="954" pos:column="45"/></operator><name pos:line="954" pos:column="45">http<pos:position pos:line="954" pos:column="49"/></name><operator pos:line="954" pos:column="49">-&gt;<pos:position pos:line="954" pos:column="54"/></operator><name pos:line="954" pos:column="51">chunk<pos:position pos:line="954" pos:column="56"/></name><operator pos:line="954" pos:column="56">.<pos:position pos:line="954" pos:column="57"/></operator><name pos:line="954" pos:column="57">datasize<pos:position pos:line="954" pos:column="65"/></name></name></expr>)<pos:position pos:line="954" pos:column="66"/></condition><then pos:line="954" pos:column="66"> <block pos:line="954" pos:column="67">{
      <expr_stmt><expr><call><name pos:line="955" pos:column="7">failf<pos:position pos:line="955" pos:column="12"/></name><argument_list pos:line="955" pos:column="12">(<argument><expr><name pos:line="955" pos:column="13">data<pos:position pos:line="955" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="955" pos:column="19">"transfer closed with at least %d bytes remaining"<pos:position pos:line="955" pos:column="69"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="956" pos:column="13">conn<pos:position pos:line="956" pos:column="17"/></name><operator pos:line="956" pos:column="17">-&gt;<pos:position pos:line="956" pos:column="22"/></operator><name pos:line="956" pos:column="19">proto<pos:position pos:line="956" pos:column="24"/></name><operator pos:line="956" pos:column="24">.<pos:position pos:line="956" pos:column="25"/></operator><name pos:line="956" pos:column="25">http<pos:position pos:line="956" pos:column="29"/></name><operator pos:line="956" pos:column="29">-&gt;<pos:position pos:line="956" pos:column="34"/></operator><name pos:line="956" pos:column="31">chunk<pos:position pos:line="956" pos:column="36"/></name><operator pos:line="956" pos:column="36">.<pos:position pos:line="956" pos:column="37"/></operator><name pos:line="956" pos:column="37">datasize<pos:position pos:line="956" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="956" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="956" pos:column="47"/></expr_stmt>
      <return pos:line="957" pos:column="7">return <expr><name pos:line="957" pos:column="14">CURLE_PARTIAL_FILE<pos:position pos:line="957" pos:column="32"/></name></expr>;<pos:position pos:line="957" pos:column="33"/></return>
    }<pos:position pos:line="958" pos:column="6"/></block></then></if></elseif></if>
    <if pos:line="959" pos:column="5">if<condition pos:line="959" pos:column="7">(<expr><call><name pos:line="959" pos:column="8">Curl_pgrsUpdate<pos:position pos:line="959" pos:column="23"/></name><argument_list pos:line="959" pos:column="23">(<argument><expr><name pos:line="959" pos:column="24">conn<pos:position pos:line="959" pos:column="28"/></name></expr></argument>)<pos:position pos:line="959" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="959" pos:column="30"/></condition><then pos:line="959" pos:column="30">
      <block type="pseudo"><return pos:line="960" pos:column="7">return <expr><name pos:line="960" pos:column="14">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="960" pos:column="39"/></name></expr>;<pos:position pos:line="960" pos:column="40"/></return></block></then></if>
  }<pos:position pos:line="961" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="963" pos:column="3">/* Now update the "done" boolean we return */</comment>
  <expr_stmt><expr><operator pos:line="964" pos:column="3">*<pos:position pos:line="964" pos:column="4"/></operator><name pos:line="964" pos:column="4">done<pos:position pos:line="964" pos:column="8"/></name> <operator pos:line="964" pos:column="9">=<pos:position pos:line="964" pos:column="10"/></operator> <operator pos:line="964" pos:column="11">!<pos:position pos:line="964" pos:column="12"/></operator><name><name pos:line="964" pos:column="12">k<pos:position pos:line="964" pos:column="13"/></name><operator pos:line="964" pos:column="13">-&gt;<pos:position pos:line="964" pos:column="18"/></operator><name pos:line="964" pos:column="15">keepon<pos:position pos:line="964" pos:column="21"/></name></name></expr>;<pos:position pos:line="964" pos:column="22"/></expr_stmt>

  <return pos:line="966" pos:column="3">return <expr><name pos:line="966" pos:column="10">CURLE_OK<pos:position pos:line="966" pos:column="18"/></name></expr>;<pos:position pos:line="966" pos:column="19"/></return>
}<pos:position pos:line="967" pos:column="2"/></block></function></unit>
