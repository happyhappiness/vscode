<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1838_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_base64_decode<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">src<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="2" pos:column="29">unsigned<pos:position pos:line="2" pos:column="37"/></name> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier><modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">outptr<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">size_t<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">outlen<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">srclen<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">length<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">padding<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">i<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">numQuantums<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">rawlen<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">unsigned<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">char<pos:position pos:line="10" pos:column="16"/></name> <modifier pos:line="10" pos:column="17">*<pos:position pos:line="10" pos:column="18"/></modifier></type><name pos:line="10" pos:column="18">pos<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier></type><name pos:line="11" pos:column="18">newstr<pos:position pos:line="11" pos:column="24"/></name></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">outptr<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">NULL<pos:position pos:line="13" pos:column="17"/></name></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="14" pos:column="3">*<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">outlen<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <literal type="number" pos:line="14" pos:column="13">0<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">srclen<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">strlen<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">src<pos:position pos:line="15" pos:column="22"/></name></expr></argument>)<pos:position pos:line="15" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="17" pos:column="3">/* Check the length of the input string is valid */</comment>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><operator pos:line="18" pos:column="6">!<pos:position pos:line="18" pos:column="7"/></operator><name pos:line="18" pos:column="7">srclen<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">||<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">srclen<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">%<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="26">4<pos:position pos:line="18" pos:column="27"/></literal></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="19" pos:column="38"/></name></expr>;<pos:position pos:line="19" pos:column="39"/></return></block></then></if>

  <comment type="block" pos:line="21" pos:column="3">/* Find the position of any = padding characters */</comment>
  <while pos:line="22" pos:column="3">while<condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">(<pos:position pos:line="22" pos:column="10"/></operator><name><name pos:line="22" pos:column="10">src<pos:position pos:line="22" pos:column="13"/></name><index pos:line="22" pos:column="13">[<expr><name pos:line="22" pos:column="14">length<pos:position pos:line="22" pos:column="20"/></name></expr>]<pos:position pos:line="22" pos:column="21"/></index></name> <operator pos:line="22" pos:column="22">!=<pos:position pos:line="22" pos:column="24"/></operator> <literal type="char" pos:line="22" pos:column="25">'='<pos:position pos:line="22" pos:column="28"/></literal><operator pos:line="22" pos:column="28">)<pos:position pos:line="22" pos:column="29"/></operator> <operator pos:line="22" pos:column="30">&amp;&amp;<pos:position pos:line="22" pos:column="40"/></operator> <name><name pos:line="22" pos:column="33">src<pos:position pos:line="22" pos:column="36"/></name><index pos:line="22" pos:column="36">[<expr><name pos:line="22" pos:column="37">length<pos:position pos:line="22" pos:column="43"/></name></expr>]<pos:position pos:line="22" pos:column="44"/></index></name></expr>)<pos:position pos:line="22" pos:column="45"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="5">length<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">++<pos:position pos:line="23" pos:column="13"/></operator></expr>;<pos:position pos:line="23" pos:column="14"/></expr_stmt></block></while>

  <comment type="block" pos:line="25" pos:column="3">/* A maximum of two = padding characters is allowed */</comment>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name><name pos:line="26" pos:column="6">src<pos:position pos:line="26" pos:column="9"/></name><index pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">length<pos:position pos:line="26" pos:column="16"/></name></expr>]<pos:position pos:line="26" pos:column="17"/></index></name> <operator pos:line="26" pos:column="18">==<pos:position pos:line="26" pos:column="20"/></operator> <literal type="char" pos:line="26" pos:column="21">'='<pos:position pos:line="26" pos:column="24"/></literal></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25"> <block pos:line="26" pos:column="26">{
    <expr_stmt><expr><name pos:line="27" pos:column="5">padding<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">++<pos:position pos:line="27" pos:column="14"/></operator></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>
    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><name><name pos:line="28" pos:column="8">src<pos:position pos:line="28" pos:column="11"/></name><index pos:line="28" pos:column="11">[<expr><name pos:line="28" pos:column="12">length<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">+<pos:position pos:line="28" pos:column="20"/></operator> <literal type="number" pos:line="28" pos:column="21">1<pos:position pos:line="28" pos:column="22"/></literal></expr>]<pos:position pos:line="28" pos:column="23"/></index></name> <operator pos:line="28" pos:column="24">==<pos:position pos:line="28" pos:column="26"/></operator> <literal type="char" pos:line="28" pos:column="27">'='<pos:position pos:line="28" pos:column="30"/></literal></expr>)<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="7">padding<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">++<pos:position pos:line="29" pos:column="16"/></operator></expr>;<pos:position pos:line="29" pos:column="17"/></expr_stmt></block></then></if>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="32" pos:column="3">/* Check the = padding characters weren't part way through the input */</comment>
  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><name pos:line="33" pos:column="6">length<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">+<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">padding<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">!=<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="26">srclen<pos:position pos:line="33" pos:column="32"/></name></expr>)<pos:position pos:line="33" pos:column="33"/></condition><then pos:line="33" pos:column="33">
    <block type="pseudo"><return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="34" pos:column="38"/></name></expr>;<pos:position pos:line="34" pos:column="39"/></return></block></then></if>

  <comment type="block" pos:line="36" pos:column="3">/* Calculate the number of quantums */</comment>
  <expr_stmt><expr><name pos:line="37" pos:column="3">numQuantums<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <name pos:line="37" pos:column="17">srclen<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">/<pos:position pos:line="37" pos:column="25"/></operator> <literal type="number" pos:line="37" pos:column="26">4<pos:position pos:line="37" pos:column="27"/></literal></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="39" pos:column="3">/* Calculate the size of the decoded string */</comment>
  <expr_stmt><expr><name pos:line="40" pos:column="3">rawlen<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="13">numQuantums<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">*<pos:position pos:line="40" pos:column="26"/></operator> <literal type="number" pos:line="40" pos:column="27">3<pos:position pos:line="40" pos:column="28"/></literal><operator pos:line="40" pos:column="28">)<pos:position pos:line="40" pos:column="29"/></operator> <operator pos:line="40" pos:column="30">-<pos:position pos:line="40" pos:column="31"/></operator> <name pos:line="40" pos:column="32">padding<pos:position pos:line="40" pos:column="39"/></name></expr>;<pos:position pos:line="40" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="42" pos:column="3">/* Allocate our buffer including room for a zero terminator */</comment>
  <expr_stmt><expr><name pos:line="43" pos:column="3">newstr<pos:position pos:line="43" pos:column="9"/></name> <operator pos:line="43" pos:column="10">=<pos:position pos:line="43" pos:column="11"/></operator> <call><name pos:line="43" pos:column="12">malloc<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name pos:line="43" pos:column="19">rawlen<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">+<pos:position pos:line="43" pos:column="27"/></operator> <literal type="number" pos:line="43" pos:column="28">1<pos:position pos:line="43" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><operator pos:line="44" pos:column="6">!<pos:position pos:line="44" pos:column="7"/></operator><name pos:line="44" pos:column="7">newstr<pos:position pos:line="44" pos:column="13"/></name></expr>)<pos:position pos:line="44" pos:column="14"/></condition><then pos:line="44" pos:column="14">
    <block type="pseudo"><return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="45" pos:column="31"/></name></expr>;<pos:position pos:line="45" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="47" pos:column="3">pos<pos:position pos:line="47" pos:column="6"/></name> <operator pos:line="47" pos:column="7">=<pos:position pos:line="47" pos:column="8"/></operator> <name pos:line="47" pos:column="9">newstr<pos:position pos:line="47" pos:column="15"/></name></expr>;<pos:position pos:line="47" pos:column="16"/></expr_stmt>

  <comment type="block" pos:line="49" pos:column="3">/* Decode the quantums */</comment>
  <for pos:line="50" pos:column="3">for<control pos:line="50" pos:column="6">(<init><expr><name pos:line="50" pos:column="7">i<pos:position pos:line="50" pos:column="8"/></name> <operator pos:line="50" pos:column="9">=<pos:position pos:line="50" pos:column="10"/></operator> <literal type="number" pos:line="50" pos:column="11">0<pos:position pos:line="50" pos:column="12"/></literal></expr>;<pos:position pos:line="50" pos:column="13"/></init> <condition><expr><name pos:line="50" pos:column="14">i<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">&lt;<pos:position pos:line="50" pos:column="20"/></operator> <name pos:line="50" pos:column="18">numQuantums<pos:position pos:line="50" pos:column="29"/></name></expr>;<pos:position pos:line="50" pos:column="30"/></condition> <incr><expr><name pos:line="50" pos:column="31">i<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">++<pos:position pos:line="50" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="50" pos:column="35"/></control> <block pos:line="50" pos:column="36">{
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">size_t<pos:position pos:line="51" pos:column="11"/></name></type> <name pos:line="51" pos:column="12">result<pos:position pos:line="51" pos:column="18"/></name> <init pos:line="51" pos:column="19">= <expr><call><name pos:line="51" pos:column="21">decodeQuantum<pos:position pos:line="51" pos:column="34"/></name><argument_list pos:line="51" pos:column="34">(<argument><expr><name pos:line="51" pos:column="35">pos<pos:position pos:line="51" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="40">src<pos:position pos:line="51" pos:column="43"/></name></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="45"/></decl_stmt>
    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><operator pos:line="52" pos:column="8">!<pos:position pos:line="52" pos:column="9"/></operator><name pos:line="52" pos:column="9">result<pos:position pos:line="52" pos:column="15"/></name></expr>)<pos:position pos:line="52" pos:column="16"/></condition><then pos:line="52" pos:column="16"> <block pos:line="52" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">free<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><name pos:line="53" pos:column="12">newstr<pos:position pos:line="53" pos:column="18"/></name></expr></argument>)<pos:position pos:line="53" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="20"/></expr_stmt>

      <return pos:line="55" pos:column="7">return <expr><name pos:line="55" pos:column="14">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="55" pos:column="40"/></name></expr>;<pos:position pos:line="55" pos:column="41"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="58" pos:column="5">pos<pos:position pos:line="58" pos:column="8"/></name> <operator pos:line="58" pos:column="9">+=<pos:position pos:line="58" pos:column="11"/></operator> <name pos:line="58" pos:column="12">result<pos:position pos:line="58" pos:column="18"/></name></expr>;<pos:position pos:line="58" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="59" pos:column="5">src<pos:position pos:line="59" pos:column="8"/></name> <operator pos:line="59" pos:column="9">+=<pos:position pos:line="59" pos:column="11"/></operator> <literal type="number" pos:line="59" pos:column="12">4<pos:position pos:line="59" pos:column="13"/></literal></expr>;<pos:position pos:line="59" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="60" pos:column="4"/></block></for>

  <comment type="block" pos:line="62" pos:column="3">/* Zero terminate */</comment>
  <expr_stmt><expr><operator pos:line="63" pos:column="3">*<pos:position pos:line="63" pos:column="4"/></operator><name pos:line="63" pos:column="4">pos<pos:position pos:line="63" pos:column="7"/></name> <operator pos:line="63" pos:column="8">=<pos:position pos:line="63" pos:column="9"/></operator> <literal type="char" pos:line="63" pos:column="10">'\0'<pos:position pos:line="63" pos:column="14"/></literal></expr>;<pos:position pos:line="63" pos:column="15"/></expr_stmt>

  <comment type="block" pos:line="65" pos:column="3">/* Return the decoded data */</comment>
  <expr_stmt><expr><operator pos:line="66" pos:column="3">*<pos:position pos:line="66" pos:column="4"/></operator><name pos:line="66" pos:column="4">outptr<pos:position pos:line="66" pos:column="10"/></name> <operator pos:line="66" pos:column="11">=<pos:position pos:line="66" pos:column="12"/></operator> <name pos:line="66" pos:column="13">newstr<pos:position pos:line="66" pos:column="19"/></name></expr>;<pos:position pos:line="66" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="67" pos:column="3">*<pos:position pos:line="67" pos:column="4"/></operator><name pos:line="67" pos:column="4">outlen<pos:position pos:line="67" pos:column="10"/></name> <operator pos:line="67" pos:column="11">=<pos:position pos:line="67" pos:column="12"/></operator> <name pos:line="67" pos:column="13">rawlen<pos:position pos:line="67" pos:column="19"/></name></expr>;<pos:position pos:line="67" pos:column="20"/></expr_stmt>

  <return pos:line="69" pos:column="3">return <expr><name pos:line="69" pos:column="10">CURLE_OK<pos:position pos:line="69" pos:column="18"/></name></expr>;<pos:position pos:line="69" pos:column="19"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
