<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_722_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">synchnet<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">curl_socket_t<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">f<pos:position pos:line="1" pos:column="36"/></name></decl></parameter> <comment type="block" pos:line="1" pos:column="37">/* socket to flush */</comment>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{

<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><call><name pos:line="4" pos:column="5">defined<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">HAVE_IOCTLSOCKET<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">long<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">i<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">j<pos:position pos:line="9" pos:column="8"/></name> <init pos:line="9" pos:column="9">= <expr><literal type="number" pos:line="9" pos:column="11">0<pos:position pos:line="9" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">rbuf<pos:position pos:line="10" pos:column="12"/></name><index pos:line="10" pos:column="12">[<expr><name pos:line="10" pos:column="13">PKTSIZE<pos:position pos:line="10" pos:column="20"/></name></expr>]<pos:position pos:line="10" pos:column="21"/></index></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">srvr_sockaddr_union_t<pos:position pos:line="11" pos:column="24"/></name></type> <name pos:line="11" pos:column="25">fromaddr<pos:position pos:line="11" pos:column="33"/></name></decl>;<pos:position pos:line="11" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">curl_socklen_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">fromaddrlen<pos:position pos:line="12" pos:column="29"/></name></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>

  <for pos:line="14" pos:column="3">for<control pos:line="14" pos:column="6">(<init pos:line="14" pos:column="7">;<pos:position pos:line="14" pos:column="8"/></init><condition pos:line="14" pos:column="8">;<pos:position pos:line="14" pos:column="9"/></condition><incr/>)<pos:position pos:line="14" pos:column="10"/></control> <block pos:line="14" pos:column="11">{
<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><call><name pos:line="15" pos:column="5">defined<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">HAVE_IOCTLSOCKET<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><operator pos:line="16" pos:column="5">(<pos:position pos:line="16" pos:column="6"/></operator><name pos:line="16" pos:column="6">void<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">)<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">ioctlsocket<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">f<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="27">FIONREAD<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="37">&amp;<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="38">i<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>
<cpp:else pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">else<pos:position pos:line="17" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><operator pos:line="18" pos:column="5">(<pos:position pos:line="18" pos:column="6"/></operator><name pos:line="18" pos:column="6">void<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">)<pos:position pos:line="18" pos:column="11"/></operator> <call><name pos:line="18" pos:column="12">ioctl<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">f<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="21">FIONREAD<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="31">&amp;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="32">i<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">i<pos:position pos:line="20" pos:column="9"/></name></expr>)<pos:position pos:line="20" pos:column="10"/></condition><then pos:line="20" pos:column="10"> <block pos:line="20" pos:column="11">{
      <expr_stmt><expr><name pos:line="21" pos:column="7">j<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">++<pos:position pos:line="21" pos:column="10"/></operator></expr>;<pos:position pos:line="21" pos:column="11"/></expr_stmt>
<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">ENABLE_IPV6<pos:position pos:line="22" pos:column="19"/></name></cpp:ifdef>
      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><operator pos:line="23" pos:column="10">!<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">use_ipv6<pos:position pos:line="23" pos:column="19"/></name></expr>)<pos:position pos:line="23" pos:column="20"/></condition><then pos:line="23" pos:column="20">
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="9">fromaddrlen<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <sizeof pos:line="25" pos:column="23">sizeof<argument_list pos:line="25" pos:column="29">(<argument><expr><name><name pos:line="25" pos:column="30">fromaddr<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">.<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="39">sa4<pos:position pos:line="25" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></sizeof></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt></block></then>
<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive> <name pos:line="26" pos:column="8">ENABLE_IPV6<pos:position pos:line="26" pos:column="19"/></name></cpp:ifdef>
      <else pos:line="27" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="9">fromaddrlen<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <sizeof pos:line="28" pos:column="23">sizeof<argument_list pos:line="28" pos:column="29">(<argument><expr><name><name pos:line="28" pos:column="30">fromaddr<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">.<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="39">sa6<pos:position pos:line="28" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></sizeof></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt></block></else></if>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><operator pos:line="30" pos:column="7">(<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">void<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">)<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">recvfrom<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">f<pos:position pos:line="30" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="26">rbuf<pos:position pos:line="30" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="32">sizeof<argument_list pos:line="30" pos:column="38">(<argument><expr><name pos:line="30" pos:column="39">rbuf<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="46">0<pos:position pos:line="30" pos:column="47"/></literal></expr></argument>,
                      <argument><expr><operator pos:line="31" pos:column="23">&amp;<pos:position pos:line="31" pos:column="28"/></operator><name><name pos:line="31" pos:column="24">fromaddr<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">.<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="33">sa<pos:position pos:line="31" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="37">&amp;<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="38">fromaddrlen<pos:position pos:line="31" pos:column="49"/></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then>
    <else pos:line="33" pos:column="5">else
      <block type="pseudo"><break pos:line="34" pos:column="7">break;<pos:position pos:line="34" pos:column="13"/></break></block></else></if>
  }<pos:position pos:line="35" pos:column="4"/></block></for>
  <return pos:line="36" pos:column="3">return <expr><name pos:line="36" pos:column="10">j<pos:position pos:line="36" pos:column="11"/></name></expr>;<pos:position pos:line="36" pos:column="12"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
