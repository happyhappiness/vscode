<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_209_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">curl_socket_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">singleipconnect<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">connectdata<pos:position pos:line="2" pos:column="35"/></name></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">conn<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="3" pos:column="17">Curl_addrinfo<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">ai<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="4" pos:column="17">long<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">timeout_ms<pos:position pos:line="4" pos:column="32"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="5" pos:column="17">bool<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">connected<pos:position pos:line="5" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="33"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">addr_buf<pos:position pos:line="7" pos:column="16"/></name><index pos:line="7" pos:column="16">[<expr><literal type="number" pos:line="7" pos:column="17">128<pos:position pos:line="7" pos:column="20"/></literal></expr>]<pos:position pos:line="7" pos:column="21"/></index></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">rc<pos:position pos:line="8" pos:column="9"/></name></decl>;<pos:position pos:line="8" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">error<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">conected<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">SessionHandle<pos:position pos:line="11" pos:column="23"/></name></name> <modifier pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></modifier></type><name pos:line="11" pos:column="25">data<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><name><name pos:line="11" pos:column="32">conn<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">data<pos:position pos:line="11" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">curl_socket_t<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">sockfd<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><call><name pos:line="12" pos:column="26">socket<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name><name pos:line="12" pos:column="33">ai<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">-&gt;<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="37">ai_family<pos:position pos:line="12" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="48">ai<pos:position pos:line="12" pos:column="50"/></name><operator pos:line="12" pos:column="50">-&gt;<pos:position pos:line="12" pos:column="55"/></operator><name pos:line="12" pos:column="52">ai_socktype<pos:position pos:line="12" pos:column="63"/></name></name></expr></argument>,
                                <argument><expr><name><name pos:line="13" pos:column="33">ai<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">-&gt;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="37">ai_protocol<pos:position pos:line="13" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="50"/></decl_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">sockfd<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">==<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="14" pos:column="32"/></name></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></return></block></then></if>

  <expr_stmt><expr><operator pos:line="17" pos:column="3">*<pos:position pos:line="17" pos:column="4"/></operator><name pos:line="17" pos:column="4">connected<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">FALSE<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt> <comment type="block" pos:line="17" pos:column="23">/* default is not connected */</comment>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">Curl_printable_address<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">ai<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="30">addr_buf<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="40">sizeof<argument_list pos:line="19" pos:column="46">(<argument><expr><name pos:line="19" pos:column="47">addr_buf<pos:position pos:line="19" pos:column="55"/></name></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">infof<pos:position pos:line="20" pos:column="8"/></name><argument_list pos:line="20" pos:column="8">(<argument><expr><name pos:line="20" pos:column="9">data<pos:position pos:line="20" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="15">"  Trying %s... "<pos:position pos:line="20" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">addr_buf<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>

  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name><name pos:line="22" pos:column="6">data<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">set<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">.<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">tcp_nodelay<pos:position pos:line="22" pos:column="27"/></name></name></expr>)<pos:position pos:line="22" pos:column="28"/></condition><then pos:line="22" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="5">tcpnodelay<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">conn<pos:position pos:line="23" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="22">sockfd<pos:position pos:line="23" pos:column="28"/></name></expr></argument>)<pos:position pos:line="23" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">SO_NOSIGPIPE<pos:position pos:line="25" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">nosigpipe<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">conn<pos:position pos:line="26" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="19">sockfd<pos:position pos:line="26" pos:column="25"/></name></expr></argument>)<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">(<expr><name><name pos:line="28" pos:column="6">conn<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">data<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">set<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">.<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">device<pos:position pos:line="28" pos:column="28"/></name></name></expr>)<pos:position pos:line="28" pos:column="29"/></condition><then pos:line="28" pos:column="29"> <block pos:line="28" pos:column="30">{
    <comment type="block" pos:line="29" pos:column="5">/* user selected to bind the outgoing socket to a specified "device"
       before doing connect */</comment>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">CURLcode<pos:position pos:line="31" pos:column="13"/></name></type> <name pos:line="31" pos:column="14">res<pos:position pos:line="31" pos:column="17"/></name> <init pos:line="31" pos:column="18">= <expr><call><name pos:line="31" pos:column="20">bindlocal<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">conn<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">sockfd<pos:position pos:line="31" pos:column="42"/></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="44"/></decl_stmt>
    <if pos:line="32" pos:column="5">if<condition pos:line="32" pos:column="7">(<expr><name pos:line="32" pos:column="8">res<pos:position pos:line="32" pos:column="11"/></name></expr>)<pos:position pos:line="32" pos:column="12"/></condition><then pos:line="32" pos:column="12"> <block pos:line="32" pos:column="13">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">sclose<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name pos:line="33" pos:column="14">sockfd<pos:position pos:line="33" pos:column="20"/></name></expr></argument>)<pos:position pos:line="33" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt> <comment type="block" pos:line="33" pos:column="23">/* close socket and bail out */</comment>
      <return pos:line="34" pos:column="7">return <expr><name pos:line="34" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="34" pos:column="29"/></name></expr>;<pos:position pos:line="34" pos:column="30"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="38" pos:column="3">/* set socket non-blocking */</comment>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">Curl_nonblock<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">sockfd<pos:position pos:line="39" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="25">TRUE<pos:position pos:line="39" pos:column="29"/></name></expr></argument>)<pos:position pos:line="39" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>

  <expr_stmt><expr><name pos:line="41" pos:column="3">rc<pos:position pos:line="41" pos:column="5"/></name> <operator pos:line="41" pos:column="6">=<pos:position pos:line="41" pos:column="7"/></operator> <call><name pos:line="41" pos:column="8">connect<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">sockfd<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="24">ai<pos:position pos:line="41" pos:column="26"/></name><operator pos:line="41" pos:column="26">-&gt;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="28">ai_addr<pos:position pos:line="41" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="37">(<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">socklen_t<pos:position pos:line="41" pos:column="47"/></name><operator pos:line="41" pos:column="47">)<pos:position pos:line="41" pos:column="48"/></operator><name><name pos:line="41" pos:column="48">ai<pos:position pos:line="41" pos:column="50"/></name><operator pos:line="41" pos:column="50">-&gt;<pos:position pos:line="41" pos:column="55"/></operator><name pos:line="41" pos:column="52">ai_addrlen<pos:position pos:line="41" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt>

  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><operator pos:line="43" pos:column="6">-<pos:position pos:line="43" pos:column="7"/></operator><literal type="number" pos:line="43" pos:column="7">1<pos:position pos:line="43" pos:column="8"/></literal> <operator pos:line="43" pos:column="9">==<pos:position pos:line="43" pos:column="11"/></operator> <name pos:line="43" pos:column="12">rc<pos:position pos:line="43" pos:column="14"/></name></expr>)<pos:position pos:line="43" pos:column="15"/></condition><then pos:line="43" pos:column="15"> <block pos:line="43" pos:column="16">{
    <expr_stmt><expr><name pos:line="44" pos:column="5">error<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <call><name pos:line="44" pos:column="13">Curl_ourerrno<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">()<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>

    <switch pos:line="46" pos:column="5">switch <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">error<pos:position pos:line="46" pos:column="18"/></name></expr>)<pos:position pos:line="46" pos:column="19"/></condition> <block pos:line="46" pos:column="20">{
    <case pos:line="47" pos:column="5">case <expr><name pos:line="47" pos:column="10">EINPROGRESS<pos:position pos:line="47" pos:column="21"/></name></expr>:<pos:position pos:line="47" pos:column="22"/></case>
    <case pos:line="48" pos:column="5">case <expr><name pos:line="48" pos:column="10">EWOULDBLOCK<pos:position pos:line="48" pos:column="21"/></name></expr>:<pos:position pos:line="48" pos:column="22"/></case>
<cpp:if pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">if<pos:position pos:line="49" pos:column="4"/></cpp:directive> <expr><call><name pos:line="49" pos:column="5">defined<pos:position pos:line="49" pos:column="12"/></name><argument_list pos:line="49" pos:column="12">(<argument><expr><name pos:line="49" pos:column="13">EAGAIN<pos:position pos:line="49" pos:column="19"/></name></expr></argument>)<pos:position pos:line="49" pos:column="20"/></argument_list></call> <operator pos:line="49" pos:column="21">&amp;&amp;<pos:position pos:line="49" pos:column="31"/></operator> <name pos:line="49" pos:column="24">EAGAIN<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">!=<pos:position pos:line="49" pos:column="33"/></operator> <name pos:line="49" pos:column="34">EWOULDBLOCK<pos:position pos:line="49" pos:column="45"/></name></expr></cpp:if>
      <comment type="block" pos:line="50" pos:column="7">/* On some platforms EAGAIN and EWOULDBLOCK are the
       * same value, and on others they are different, hence
       * the odd #if
       */</comment>
    <case pos:line="54" pos:column="5">case <expr><name pos:line="54" pos:column="10">EAGAIN<pos:position pos:line="54" pos:column="16"/></name></expr>:<pos:position pos:line="54" pos:column="17"/></case>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="56" pos:column="7">rc<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator> <call><name pos:line="56" pos:column="12">waitconnect<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">sockfd<pos:position pos:line="56" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="32">timeout_ms<pos:position pos:line="56" pos:column="42"/></name></expr></argument>)<pos:position pos:line="56" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="44"/></expr_stmt>
      <break pos:line="57" pos:column="7">break;<pos:position pos:line="57" pos:column="13"/></break>
    <default pos:line="58" pos:column="5">default:<pos:position pos:line="58" pos:column="13"/></default>
      <comment type="block" pos:line="59" pos:column="7">/* unknown error, fallthrough and try another address! */</comment>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">failf<pos:position pos:line="60" pos:column="12"/></name><argument_list pos:line="60" pos:column="12">(<argument><expr><name pos:line="60" pos:column="13">data<pos:position pos:line="60" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="19">"Failed to connect to %s: %s"<pos:position pos:line="60" pos:column="48"/></literal></expr></argument>,
            <argument><expr><name pos:line="61" pos:column="13">addr_buf<pos:position pos:line="61" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="23">Curl_strerror<pos:position pos:line="61" pos:column="36"/></name><argument_list pos:line="61" pos:column="36">(<argument><expr><name pos:line="61" pos:column="37">conn<pos:position pos:line="61" pos:column="41"/></name></expr></argument>,<argument><expr><name pos:line="61" pos:column="42">error<pos:position pos:line="61" pos:column="47"/></name></expr></argument>)<pos:position pos:line="61" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="62" pos:column="7">data<pos:position pos:line="62" pos:column="11"/></name><operator pos:line="62" pos:column="11">-&gt;<pos:position pos:line="62" pos:column="16"/></operator><name pos:line="62" pos:column="13">state<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">.<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="19">os_errno<pos:position pos:line="62" pos:column="27"/></name></name> <operator pos:line="62" pos:column="28">=<pos:position pos:line="62" pos:column="29"/></operator> <name pos:line="62" pos:column="30">error<pos:position pos:line="62" pos:column="35"/></name></expr>;<pos:position pos:line="62" pos:column="36"/></expr_stmt>
      <break pos:line="63" pos:column="7">break;<pos:position pos:line="63" pos:column="13"/></break>
    }<pos:position pos:line="64" pos:column="6"/></block></switch>
  }<pos:position pos:line="65" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="67" pos:column="3">/* The 'WAITCONN_TIMEOUT == rc' comes from the waitconnect(), and not from
     connect(). We can be sure of this since connect() cannot return 1. */</comment>
  <if pos:line="69" pos:column="3">if<condition pos:line="69" pos:column="5">(<expr><operator pos:line="69" pos:column="6">(<pos:position pos:line="69" pos:column="7"/></operator><name pos:line="69" pos:column="7">WAITCONN_TIMEOUT<pos:position pos:line="69" pos:column="23"/></name> <operator pos:line="69" pos:column="24">==<pos:position pos:line="69" pos:column="26"/></operator> <name pos:line="69" pos:column="27">rc<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">)<pos:position pos:line="69" pos:column="30"/></operator> <operator pos:line="69" pos:column="31">&amp;&amp;<pos:position pos:line="69" pos:column="41"/></operator>
     <operator pos:line="70" pos:column="6">(<pos:position pos:line="70" pos:column="7"/></operator><name><name pos:line="70" pos:column="7">data<pos:position pos:line="70" pos:column="11"/></name><operator pos:line="70" pos:column="11">-&gt;<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="13">state<pos:position pos:line="70" pos:column="18"/></name><operator pos:line="70" pos:column="18">.<pos:position pos:line="70" pos:column="19"/></operator><name pos:line="70" pos:column="19">used_interface<pos:position pos:line="70" pos:column="33"/></name></name> <operator pos:line="70" pos:column="34">==<pos:position pos:line="70" pos:column="36"/></operator> <name pos:line="70" pos:column="37">Curl_if_multi<pos:position pos:line="70" pos:column="50"/></name><operator pos:line="70" pos:column="50">)<pos:position pos:line="70" pos:column="51"/></operator></expr>)<pos:position pos:line="70" pos:column="52"/></condition><then pos:line="70" pos:column="52"> <block pos:line="70" pos:column="53">{
    <comment type="block" pos:line="71" pos:column="5">/* Timeout when running the multi interface */</comment>
    <return pos:line="72" pos:column="5">return <expr><name pos:line="72" pos:column="12">sockfd<pos:position pos:line="72" pos:column="18"/></name></expr>;<pos:position pos:line="72" pos:column="19"/></return>
  }<pos:position pos:line="73" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="75" pos:column="3">conected<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">=<pos:position pos:line="75" pos:column="13"/></operator> <call><name pos:line="75" pos:column="14">verifyconnect<pos:position pos:line="75" pos:column="27"/></name><argument_list pos:line="75" pos:column="27">(<argument><expr><name pos:line="75" pos:column="28">sockfd<pos:position pos:line="75" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="36">&amp;<pos:position pos:line="75" pos:column="41"/></operator><name pos:line="75" pos:column="37">error<pos:position pos:line="75" pos:column="42"/></name></expr></argument>)<pos:position pos:line="75" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="44"/></expr_stmt>

  <if pos:line="77" pos:column="3">if<condition pos:line="77" pos:column="5">(<expr><operator pos:line="77" pos:column="6">!<pos:position pos:line="77" pos:column="7"/></operator><name pos:line="77" pos:column="7">rc<pos:position pos:line="77" pos:column="9"/></name> <operator pos:line="77" pos:column="10">&amp;&amp;<pos:position pos:line="77" pos:column="20"/></operator> <name pos:line="77" pos:column="13">conected<pos:position pos:line="77" pos:column="21"/></name></expr>)<pos:position pos:line="77" pos:column="22"/></condition><then pos:line="77" pos:column="22"> <block pos:line="77" pos:column="23">{
    <comment type="block" pos:line="78" pos:column="5">/* we are connected, awesome! */</comment>
    <expr_stmt><expr><operator pos:line="79" pos:column="5">*<pos:position pos:line="79" pos:column="6"/></operator><name pos:line="79" pos:column="6">connected<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">=<pos:position pos:line="79" pos:column="17"/></operator> <name pos:line="79" pos:column="18">TRUE<pos:position pos:line="79" pos:column="22"/></name></expr>;<pos:position pos:line="79" pos:column="23"/></expr_stmt> <comment type="block" pos:line="79" pos:column="24">/* this is a true connect */</comment>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">infof<pos:position pos:line="80" pos:column="10"/></name><argument_list pos:line="80" pos:column="10">(<argument><expr><name pos:line="80" pos:column="11">data<pos:position pos:line="80" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="17">"connected\n"<pos:position pos:line="80" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="32"/></expr_stmt>
    <return pos:line="81" pos:column="5">return <expr><name pos:line="81" pos:column="12">sockfd<pos:position pos:line="81" pos:column="18"/></name></expr>;<pos:position pos:line="81" pos:column="19"/></return>
  }<pos:position pos:line="82" pos:column="4"/></block></then>
  <elseif pos:line="83" pos:column="3">else <if pos:line="83" pos:column="8">if<condition pos:line="83" pos:column="10">(<expr><name pos:line="83" pos:column="11">WAITCONN_TIMEOUT<pos:position pos:line="83" pos:column="27"/></name> <operator pos:line="83" pos:column="28">==<pos:position pos:line="83" pos:column="30"/></operator> <name pos:line="83" pos:column="31">rc<pos:position pos:line="83" pos:column="33"/></name></expr>)<pos:position pos:line="83" pos:column="34"/></condition><then pos:line="83" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="84" pos:column="5">infof<pos:position pos:line="84" pos:column="10"/></name><argument_list pos:line="84" pos:column="10">(<argument><expr><name pos:line="84" pos:column="11">data<pos:position pos:line="84" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="17">"Timeout\n"<pos:position pos:line="84" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="30"/></expr_stmt></block></then></if></elseif>
  <else pos:line="85" pos:column="3">else <block pos:line="85" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="86" pos:column="5">data<pos:position pos:line="86" pos:column="9"/></name><operator pos:line="86" pos:column="9">-&gt;<pos:position pos:line="86" pos:column="14"/></operator><name pos:line="86" pos:column="11">state<pos:position pos:line="86" pos:column="16"/></name><operator pos:line="86" pos:column="16">.<pos:position pos:line="86" pos:column="17"/></operator><name pos:line="86" pos:column="17">os_errno<pos:position pos:line="86" pos:column="25"/></name></name> <operator pos:line="86" pos:column="26">=<pos:position pos:line="86" pos:column="27"/></operator> <name pos:line="86" pos:column="28">error<pos:position pos:line="86" pos:column="33"/></name></expr>;<pos:position pos:line="86" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">infof<pos:position pos:line="87" pos:column="10"/></name><argument_list pos:line="87" pos:column="10">(<argument><expr><name pos:line="87" pos:column="11">data<pos:position pos:line="87" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="17">"%s\n"<pos:position pos:line="87" pos:column="23"/></literal></expr></argument>, <argument><expr><call><name pos:line="87" pos:column="25">Curl_strerror<pos:position pos:line="87" pos:column="38"/></name><argument_list pos:line="87" pos:column="38">(<argument><expr><name pos:line="87" pos:column="39">conn<pos:position pos:line="87" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="45">error<pos:position pos:line="87" pos:column="50"/></name></expr></argument>)<pos:position pos:line="87" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="88" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="90" pos:column="3">/* connect failed or timed out */</comment>
  <expr_stmt><expr><call><name pos:line="91" pos:column="3">sclose<pos:position pos:line="91" pos:column="9"/></name><argument_list pos:line="91" pos:column="9">(<argument><expr><name pos:line="91" pos:column="10">sockfd<pos:position pos:line="91" pos:column="16"/></name></expr></argument>)<pos:position pos:line="91" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="18"/></expr_stmt>

  <return pos:line="93" pos:column="3">return <expr><name pos:line="93" pos:column="10">CURL_SOCKET_BAD<pos:position pos:line="93" pos:column="25"/></name></expr>;<pos:position pos:line="93" pos:column="26"/></return>
}<pos:position pos:line="94" pos:column="2"/></block></function></unit>
