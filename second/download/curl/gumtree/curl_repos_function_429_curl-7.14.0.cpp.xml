<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_429_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">fix_hostname<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="52">struct<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">hostname<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">host<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* set the name we use to display the host name */</comment>
  <expr_stmt><expr><name><name pos:line="4" pos:column="3">host<pos:position pos:line="4" pos:column="7"/></name><operator pos:line="4" pos:column="7">-&gt;<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="9">dispname<pos:position pos:line="4" pos:column="17"/></name></name> <operator pos:line="4" pos:column="18">=<pos:position pos:line="4" pos:column="19"/></operator> <name><name pos:line="4" pos:column="20">host<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">-&gt;<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="26">name<pos:position pos:line="4" pos:column="30"/></name></name></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">USE_LIBIDN<pos:position pos:line="6" pos:column="18"/></name></cpp:ifdef>
  <comment type="block" format="doxygen" pos:line="7" pos:column="3">/*************************************************************
   * Check name for non-ASCII and convert hostname to ACE form.
   *************************************************************/</comment>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">!<pos:position pos:line="10" pos:column="8"/></operator><call><name pos:line="10" pos:column="8">is_ASCII_name<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><name><name pos:line="10" pos:column="22">host<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">-&gt;<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="28">name<pos:position pos:line="10" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call> <operator pos:line="10" pos:column="34">&amp;&amp;<pos:position pos:line="10" pos:column="44"/></operator>
      <call><name pos:line="11" pos:column="7">stringprep_check_version<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">LIBIDN_REQUIRED_VERSION<pos:position pos:line="11" pos:column="55"/></name></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="57"/></condition><then pos:line="11" pos:column="57"> <block pos:line="11" pos:column="58">{
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type><name pos:line="12" pos:column="11">ace_hostname<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name pos:line="12" pos:column="26">NULL<pos:position pos:line="12" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">struct<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">SessionHandle<pos:position pos:line="13" pos:column="25"/></name></name> <modifier pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></modifier></type><name pos:line="13" pos:column="27">data<pos:position pos:line="13" pos:column="31"/></name> <init pos:line="13" pos:column="32">= <expr><name><name pos:line="13" pos:column="34">conn<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">-&gt;<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="40">data<pos:position pos:line="13" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">rc<pos:position pos:line="14" pos:column="11"/></name> <init pos:line="14" pos:column="12">= <expr><call><name pos:line="14" pos:column="14">idna_to_ascii_lz<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name><name pos:line="14" pos:column="31">host<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">-&gt;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="37">name<pos:position pos:line="14" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="43">&amp;<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="44">ace_hostname<pos:position pos:line="14" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="58">0<pos:position pos:line="14" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">infof<pos:position pos:line="15" pos:column="10"/></name> <argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">data<pos:position pos:line="15" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="18">"Input domain encoded as `%s'\n"<pos:position pos:line="15" pos:column="50"/></literal></expr></argument>,
           <argument><expr><call><name pos:line="16" pos:column="12">stringprep_locale_charset<pos:position pos:line="16" pos:column="37"/></name> <argument_list pos:line="16" pos:column="38">()<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">rc<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">!=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">IDNA_SUCCESS<pos:position pos:line="17" pos:column="27"/></name></expr>)<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="7">infof<pos:position pos:line="18" pos:column="12"/></name><argument_list pos:line="18" pos:column="12">(<argument><expr><name pos:line="18" pos:column="13">data<pos:position pos:line="18" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="19">"Failed to convert %s to ACE; %s\n"<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="19" pos:column="13">host<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="19">name<pos:position pos:line="19" pos:column="23"/></name></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="25">Curl_idn_strerror<pos:position pos:line="19" pos:column="42"/></name><argument_list pos:line="19" pos:column="42">(<argument><expr><name pos:line="19" pos:column="43">conn<pos:position pos:line="19" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="19" pos:column="48">rc<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt></block></then>
    <else pos:line="20" pos:column="5">else <block pos:line="20" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">tld_check_name<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">data<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">ace_hostname<pos:position pos:line="21" pos:column="40"/></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="23" pos:column="7">host<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">encalloc<pos:position pos:line="23" pos:column="21"/></name></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="24">ace_hostname<pos:position pos:line="23" pos:column="36"/></name></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
      <comment type="block" pos:line="24" pos:column="7">/* change the name pointer to point to the encoded hostname */</comment>
      <expr_stmt><expr><name><name pos:line="25" pos:column="7">host<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">name<pos:position pos:line="25" pos:column="17"/></name></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <name><name pos:line="25" pos:column="20">host<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">-&gt;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="26">encalloc<pos:position pos:line="25" pos:column="34"/></name></name></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></else></if>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>
<cpp:else pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">else<pos:position pos:line="28" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="29" pos:column="3">(<pos:position pos:line="29" pos:column="4"/></operator><name pos:line="29" pos:column="4">void<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">)<pos:position pos:line="29" pos:column="9"/></operator><name pos:line="29" pos:column="9">conn<pos:position pos:line="29" pos:column="13"/></name></expr>;<pos:position pos:line="29" pos:column="14"/></expr_stmt> <comment type="block" pos:line="29" pos:column="15">/* never used */</comment>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
