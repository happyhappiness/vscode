<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_684.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLdigest<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">Curl_input_digest<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">connectdata<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">conn<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">bool<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">proxy<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">char<pos:position pos:line="3" pos:column="34"/></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type><name pos:line="3" pos:column="36">header<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="43"/></parameter_list> <comment type="block" pos:line="3" pos:column="44">/* rest of the *-authenticate:
                                              header */</comment>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">more<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">TRUE<pos:position pos:line="6" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">token<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name pos:line="7" pos:column="17">NULL<pos:position pos:line="7" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">tmp<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name pos:line="8" pos:column="15">NULL<pos:position pos:line="8" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">bool<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">foundAuth<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><name pos:line="9" pos:column="20">FALSE<pos:position pos:line="9" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">foundAuthInt<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><name pos:line="10" pos:column="23">FALSE<pos:position pos:line="10" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">SessionHandle<pos:position pos:line="11" pos:column="23"/></name></name> <modifier pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></modifier></type><name pos:line="11" pos:column="25">data<pos:position pos:line="11" pos:column="29"/></name><init pos:line="11" pos:column="29">=<expr><name><name pos:line="11" pos:column="30">conn<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">-&gt;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="36">data<pos:position pos:line="11" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">bool<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">before<pos:position pos:line="12" pos:column="14"/></name> <init pos:line="12" pos:column="15">= <expr><name pos:line="12" pos:column="17">FALSE<pos:position pos:line="12" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt> <comment type="block" pos:line="12" pos:column="24">/* got a nonce before */</comment>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">digestdata<pos:position pos:line="13" pos:column="20"/></name></name> <modifier pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></modifier></type><name pos:line="13" pos:column="22">d<pos:position pos:line="13" pos:column="23"/></name></decl>;<pos:position pos:line="13" pos:column="24"/></decl_stmt>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name pos:line="15" pos:column="6">proxy<pos:position pos:line="15" pos:column="11"/></name></expr>)<pos:position pos:line="15" pos:column="12"/></condition><then pos:line="15" pos:column="12"> <block pos:line="15" pos:column="13">{
    <expr_stmt><expr><name pos:line="16" pos:column="5">d<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <operator pos:line="16" pos:column="9">&amp;<pos:position pos:line="16" pos:column="14"/></operator><name><name pos:line="16" pos:column="10">data<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">-&gt;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="16">state<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">.<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">proxydigest<pos:position pos:line="16" pos:column="33"/></name></name></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then>
  <else pos:line="18" pos:column="3">else <block pos:line="18" pos:column="8">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">d<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <operator pos:line="19" pos:column="9">&amp;<pos:position pos:line="19" pos:column="14"/></operator><name><name pos:line="19" pos:column="10">data<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">-&gt;<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="16">state<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">digest<pos:position pos:line="19" pos:column="28"/></name></name></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="22" pos:column="3">/* skip initial whitespaces */</comment>
  <while pos:line="23" pos:column="3">while<condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">*<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">header<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">&amp;&amp;<pos:position pos:line="23" pos:column="27"/></operator> <call><name pos:line="23" pos:column="20">isspace<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><operator pos:line="23" pos:column="28">(<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="29">int<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">)<pos:position pos:line="23" pos:column="33"/></operator><operator pos:line="23" pos:column="33">*<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="34">header<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="42"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="5">header<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">++<pos:position pos:line="24" pos:column="13"/></operator></expr>;<pos:position pos:line="24" pos:column="14"/></expr_stmt></block></while>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><call><name pos:line="26" pos:column="6">checkprefix<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">(<argument><expr><literal type="string" pos:line="26" pos:column="18">"Digest"<pos:position pos:line="26" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">header<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="36"/></condition><then pos:line="26" pos:column="36"> <block pos:line="26" pos:column="37">{
    <expr_stmt><expr><name pos:line="27" pos:column="5">header<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">+=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">strlen<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><literal type="string" pos:line="27" pos:column="22">"Digest"<pos:position pos:line="27" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* If we already have received a nonce, keep that in mind */</comment>
    <if pos:line="30" pos:column="5">if<condition pos:line="30" pos:column="7">(<expr><name><name pos:line="30" pos:column="8">d<pos:position pos:line="30" pos:column="9"/></name><operator pos:line="30" pos:column="9">-&gt;<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="11">nonce<pos:position pos:line="30" pos:column="16"/></name></name></expr>)<pos:position pos:line="30" pos:column="17"/></condition><then pos:line="30" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="7">before<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">TRUE<pos:position pos:line="31" pos:column="20"/></name></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="33" pos:column="5">/* clear off any former leftovers and init to defaults */</comment>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">Curl_digest_cleanup_one<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">d<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>

    <while pos:line="36" pos:column="5">while<condition pos:line="36" pos:column="10">(<expr><name pos:line="36" pos:column="11">more<pos:position pos:line="36" pos:column="15"/></name></expr>)<pos:position pos:line="36" pos:column="16"/></condition> <block pos:line="36" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="37" pos:column="7">char<pos:position pos:line="37" pos:column="11"/></name></type> <name><name pos:line="37" pos:column="12">value<pos:position pos:line="37" pos:column="17"/></name><index pos:line="37" pos:column="17">[<expr><literal type="number" pos:line="37" pos:column="18">32<pos:position pos:line="37" pos:column="20"/></literal></expr>]<pos:position pos:line="37" pos:column="21"/></index></name></decl>;<pos:position pos:line="37" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="38" pos:column="7">char<pos:position pos:line="38" pos:column="11"/></name></type> <name><name pos:line="38" pos:column="12">content<pos:position pos:line="38" pos:column="19"/></name><index pos:line="38" pos:column="19">[<expr><literal type="number" pos:line="38" pos:column="20">128<pos:position pos:line="38" pos:column="23"/></literal></expr>]<pos:position pos:line="38" pos:column="24"/></index></name></decl>;<pos:position pos:line="38" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="39" pos:column="7">size_t<pos:position pos:line="39" pos:column="13"/></name></type> <name pos:line="39" pos:column="14">totlen<pos:position pos:line="39" pos:column="20"/></name><init pos:line="39" pos:column="20">=<expr><literal type="number" pos:line="39" pos:column="21">0<pos:position pos:line="39" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="39" pos:column="23"/></decl_stmt>

      <while pos:line="41" pos:column="7">while<condition pos:line="41" pos:column="12">(<expr><operator pos:line="41" pos:column="13">*<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">header<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">&amp;&amp;<pos:position pos:line="41" pos:column="31"/></operator> <call><name pos:line="41" pos:column="24">isspace<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><operator pos:line="41" pos:column="32">(<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="33">int<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">)<pos:position pos:line="41" pos:column="37"/></operator><operator pos:line="41" pos:column="37">*<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">header<pos:position pos:line="41" pos:column="44"/></name></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="46"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="9">header<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">++<pos:position pos:line="42" pos:column="17"/></operator></expr>;<pos:position pos:line="42" pos:column="18"/></expr_stmt></block></while>

      <comment type="block" pos:line="44" pos:column="7">/* how big can these strings be? */</comment>
      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><operator pos:line="45" pos:column="10">(<pos:position pos:line="45" pos:column="11"/></operator><literal type="number" pos:line="45" pos:column="11">2<pos:position pos:line="45" pos:column="12"/></literal> <operator pos:line="45" pos:column="13">==<pos:position pos:line="45" pos:column="15"/></operator> <call><name pos:line="45" pos:column="16">sscanf<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name pos:line="45" pos:column="23">header<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="31">"%31[^=]=\"%127[^\"]\""<pos:position pos:line="45" pos:column="54"/></literal></expr></argument>,
                      <argument><expr><name pos:line="46" pos:column="23">value<pos:position pos:line="46" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="30">content<pos:position pos:line="46" pos:column="37"/></name></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call><operator pos:line="46" pos:column="38">)<pos:position pos:line="46" pos:column="39"/></operator> <operator pos:line="46" pos:column="40">||<pos:position pos:line="46" pos:column="42"/></operator>
         <comment type="block" pos:line="47" pos:column="10">/* try the same scan but without quotes around the content but don't
            include the possibly trailing comma */</comment>
         <operator pos:line="49" pos:column="10">(<pos:position pos:line="49" pos:column="11"/></operator><literal type="number" pos:line="49" pos:column="11">2<pos:position pos:line="49" pos:column="12"/></literal> <operator pos:line="49" pos:column="13">==<pos:position pos:line="49" pos:column="15"/></operator>  <call><name pos:line="49" pos:column="17">sscanf<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">header<pos:position pos:line="49" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="32">"%31[^=]=%127[^,]"<pos:position pos:line="49" pos:column="50"/></literal></expr></argument>,
                       <argument><expr><name pos:line="50" pos:column="24">value<pos:position pos:line="50" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="31">content<pos:position pos:line="50" pos:column="38"/></name></expr></argument>)<pos:position pos:line="50" pos:column="39"/></argument_list></call><operator pos:line="50" pos:column="39">)<pos:position pos:line="50" pos:column="40"/></operator></expr> )<pos:position pos:line="50" pos:column="42"/></condition><then pos:line="50" pos:column="42"> <block pos:line="50" pos:column="43">{
        <if pos:line="51" pos:column="9">if<condition pos:line="51" pos:column="11">(<expr><call><name pos:line="51" pos:column="12">strequal<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><name pos:line="51" pos:column="21">value<pos:position pos:line="51" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="28">"nonce"<pos:position pos:line="51" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="37"/></condition><then pos:line="51" pos:column="37"> <block pos:line="51" pos:column="38">{
          <expr_stmt><expr><name><name pos:line="52" pos:column="11">d<pos:position pos:line="52" pos:column="12"/></name><operator pos:line="52" pos:column="12">-&gt;<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="14">nonce<pos:position pos:line="52" pos:column="19"/></name></name> <operator pos:line="52" pos:column="20">=<pos:position pos:line="52" pos:column="21"/></operator> <call><name pos:line="52" pos:column="22">strdup<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">content<pos:position pos:line="52" pos:column="36"/></name></expr></argument>)<pos:position pos:line="52" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt>
          <if pos:line="53" pos:column="11">if<condition pos:line="53" pos:column="13">(<expr><operator pos:line="53" pos:column="14">!<pos:position pos:line="53" pos:column="15"/></operator><name><name pos:line="53" pos:column="15">d<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">-&gt;<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="18">nonce<pos:position pos:line="53" pos:column="23"/></name></name></expr>)<pos:position pos:line="53" pos:column="24"/></condition><then pos:line="53" pos:column="24">
            <block type="pseudo"><return pos:line="54" pos:column="13">return <expr><name pos:line="54" pos:column="20">CURLDIGEST_NOMEM<pos:position pos:line="54" pos:column="36"/></name></expr>;<pos:position pos:line="54" pos:column="37"/></return></block></then></if>
        }<pos:position pos:line="55" pos:column="10"/></block></then>
        <elseif pos:line="56" pos:column="9">else <if pos:line="56" pos:column="14">if<condition pos:line="56" pos:column="16">(<expr><call><name pos:line="56" pos:column="17">strequal<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><name pos:line="56" pos:column="26">value<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="33">"stale"<pos:position pos:line="56" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="42"/></condition><then pos:line="56" pos:column="42"> <block pos:line="56" pos:column="43">{
          <if pos:line="57" pos:column="11">if<condition pos:line="57" pos:column="13">(<expr><call><name pos:line="57" pos:column="14">strequal<pos:position pos:line="57" pos:column="22"/></name><argument_list pos:line="57" pos:column="22">(<argument><expr><name pos:line="57" pos:column="23">content<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="32">"true"<pos:position pos:line="57" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="40"/></condition><then pos:line="57" pos:column="40"> <block pos:line="57" pos:column="41">{
            <expr_stmt><expr><name><name pos:line="58" pos:column="13">d<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">-&gt;<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="16">stale<pos:position pos:line="58" pos:column="21"/></name></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <name pos:line="58" pos:column="24">TRUE<pos:position pos:line="58" pos:column="28"/></name></expr>;<pos:position pos:line="58" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="59" pos:column="13">d<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">-&gt;<pos:position pos:line="59" pos:column="19"/></operator><name pos:line="59" pos:column="16">nc<pos:position pos:line="59" pos:column="18"/></name></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <literal type="number" pos:line="59" pos:column="21">1<pos:position pos:line="59" pos:column="22"/></literal></expr>;<pos:position pos:line="59" pos:column="23"/></expr_stmt> <comment type="block" pos:line="59" pos:column="24">/* we make a new nonce now */</comment>
          }<pos:position pos:line="60" pos:column="12"/></block></then></if>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="62" pos:column="9">else <if pos:line="62" pos:column="14">if<condition pos:line="62" pos:column="16">(<expr><call><name pos:line="62" pos:column="17">strequal<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">value<pos:position pos:line="62" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="33">"realm"<pos:position pos:line="62" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="42"/></condition><then pos:line="62" pos:column="42"> <block pos:line="62" pos:column="43">{
          <expr_stmt><expr><name><name pos:line="63" pos:column="11">d<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">-&gt;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="14">realm<pos:position pos:line="63" pos:column="19"/></name></name> <operator pos:line="63" pos:column="20">=<pos:position pos:line="63" pos:column="21"/></operator> <call><name pos:line="63" pos:column="22">strdup<pos:position pos:line="63" pos:column="28"/></name><argument_list pos:line="63" pos:column="28">(<argument><expr><name pos:line="63" pos:column="29">content<pos:position pos:line="63" pos:column="36"/></name></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
          <if pos:line="64" pos:column="11">if<condition pos:line="64" pos:column="13">(<expr><operator pos:line="64" pos:column="14">!<pos:position pos:line="64" pos:column="15"/></operator><name><name pos:line="64" pos:column="15">d<pos:position pos:line="64" pos:column="16"/></name><operator pos:line="64" pos:column="16">-&gt;<pos:position pos:line="64" pos:column="21"/></operator><name pos:line="64" pos:column="18">realm<pos:position pos:line="64" pos:column="23"/></name></name></expr>)<pos:position pos:line="64" pos:column="24"/></condition><then pos:line="64" pos:column="24">
            <block type="pseudo"><return pos:line="65" pos:column="13">return <expr><name pos:line="65" pos:column="20">CURLDIGEST_NOMEM<pos:position pos:line="65" pos:column="36"/></name></expr>;<pos:position pos:line="65" pos:column="37"/></return></block></then></if>
        }<pos:position pos:line="66" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="67" pos:column="9">else <if pos:line="67" pos:column="14">if<condition pos:line="67" pos:column="16">(<expr><call><name pos:line="67" pos:column="17">strequal<pos:position pos:line="67" pos:column="25"/></name><argument_list pos:line="67" pos:column="25">(<argument><expr><name pos:line="67" pos:column="26">value<pos:position pos:line="67" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="33">"opaque"<pos:position pos:line="67" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="43"/></condition><then pos:line="67" pos:column="43"> <block pos:line="67" pos:column="44">{
          <expr_stmt><expr><name><name pos:line="68" pos:column="11">d<pos:position pos:line="68" pos:column="12"/></name><operator pos:line="68" pos:column="12">-&gt;<pos:position pos:line="68" pos:column="17"/></operator><name pos:line="68" pos:column="14">opaque<pos:position pos:line="68" pos:column="20"/></name></name> <operator pos:line="68" pos:column="21">=<pos:position pos:line="68" pos:column="22"/></operator> <call><name pos:line="68" pos:column="23">strdup<pos:position pos:line="68" pos:column="29"/></name><argument_list pos:line="68" pos:column="29">(<argument><expr><name pos:line="68" pos:column="30">content<pos:position pos:line="68" pos:column="37"/></name></expr></argument>)<pos:position pos:line="68" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="39"/></expr_stmt>
          <if pos:line="69" pos:column="11">if<condition pos:line="69" pos:column="13">(<expr><operator pos:line="69" pos:column="14">!<pos:position pos:line="69" pos:column="15"/></operator><name><name pos:line="69" pos:column="15">d<pos:position pos:line="69" pos:column="16"/></name><operator pos:line="69" pos:column="16">-&gt;<pos:position pos:line="69" pos:column="21"/></operator><name pos:line="69" pos:column="18">opaque<pos:position pos:line="69" pos:column="24"/></name></name></expr>)<pos:position pos:line="69" pos:column="25"/></condition><then pos:line="69" pos:column="25">
            <block type="pseudo"><return pos:line="70" pos:column="13">return <expr><name pos:line="70" pos:column="20">CURLDIGEST_NOMEM<pos:position pos:line="70" pos:column="36"/></name></expr>;<pos:position pos:line="70" pos:column="37"/></return></block></then></if>
        }<pos:position pos:line="71" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="72" pos:column="9">else <if pos:line="72" pos:column="14">if<condition pos:line="72" pos:column="16">(<expr><call><name pos:line="72" pos:column="17">strequal<pos:position pos:line="72" pos:column="25"/></name><argument_list pos:line="72" pos:column="25">(<argument><expr><name pos:line="72" pos:column="26">value<pos:position pos:line="72" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="33">"qop"<pos:position pos:line="72" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="40"/></condition><then pos:line="72" pos:column="40"> <block pos:line="72" pos:column="41">{
          <decl_stmt><decl><type><name pos:line="73" pos:column="11">char<pos:position pos:line="73" pos:column="15"/></name> <modifier pos:line="73" pos:column="16">*<pos:position pos:line="73" pos:column="17"/></modifier></type><name pos:line="73" pos:column="17">tok_buf<pos:position pos:line="73" pos:column="24"/></name></decl>;<pos:position pos:line="73" pos:column="25"/></decl_stmt>
          <comment type="block" pos:line="74" pos:column="11">/* tokenize the list and choose auth if possible, use a temporary
             clone of the buffer since strtok_r() ruins it */</comment>
          <expr_stmt><expr><name pos:line="76" pos:column="11">tmp<pos:position pos:line="76" pos:column="14"/></name> <operator pos:line="76" pos:column="15">=<pos:position pos:line="76" pos:column="16"/></operator> <call><name pos:line="76" pos:column="17">strdup<pos:position pos:line="76" pos:column="23"/></name><argument_list pos:line="76" pos:column="23">(<argument><expr><name pos:line="76" pos:column="24">content<pos:position pos:line="76" pos:column="31"/></name></expr></argument>)<pos:position pos:line="76" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="33"/></expr_stmt>
          <if pos:line="77" pos:column="11">if<condition pos:line="77" pos:column="13">(<expr><operator pos:line="77" pos:column="14">!<pos:position pos:line="77" pos:column="15"/></operator><name pos:line="77" pos:column="15">tmp<pos:position pos:line="77" pos:column="18"/></name></expr>)<pos:position pos:line="77" pos:column="19"/></condition><then pos:line="77" pos:column="19">
            <block type="pseudo"><return pos:line="78" pos:column="13">return <expr><name pos:line="78" pos:column="20">CURLDIGEST_NOMEM<pos:position pos:line="78" pos:column="36"/></name></expr>;<pos:position pos:line="78" pos:column="37"/></return></block></then></if>
          <expr_stmt><expr><name pos:line="79" pos:column="11">token<pos:position pos:line="79" pos:column="16"/></name> <operator pos:line="79" pos:column="17">=<pos:position pos:line="79" pos:column="18"/></operator> <call><name pos:line="79" pos:column="19">strtok_r<pos:position pos:line="79" pos:column="27"/></name><argument_list pos:line="79" pos:column="27">(<argument><expr><name pos:line="79" pos:column="28">tmp<pos:position pos:line="79" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="33">","<pos:position pos:line="79" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="79" pos:column="38">&amp;<pos:position pos:line="79" pos:column="43"/></operator><name pos:line="79" pos:column="39">tok_buf<pos:position pos:line="79" pos:column="46"/></name></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="48"/></expr_stmt>
          <while pos:line="80" pos:column="11">while <condition pos:line="80" pos:column="17">(<expr><name pos:line="80" pos:column="18">token<pos:position pos:line="80" pos:column="23"/></name> <operator pos:line="80" pos:column="24">!=<pos:position pos:line="80" pos:column="26"/></operator> <name pos:line="80" pos:column="27">NULL<pos:position pos:line="80" pos:column="31"/></name></expr>)<pos:position pos:line="80" pos:column="32"/></condition> <block pos:line="80" pos:column="33">{
            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><call><name pos:line="81" pos:column="17">strequal<pos:position pos:line="81" pos:column="25"/></name><argument_list pos:line="81" pos:column="25">(<argument><expr><name pos:line="81" pos:column="26">token<pos:position pos:line="81" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="33">"auth"<pos:position pos:line="81" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="41"/></condition><then pos:line="81" pos:column="41"> <block pos:line="81" pos:column="42">{
              <expr_stmt><expr><name pos:line="82" pos:column="15">foundAuth<pos:position pos:line="82" pos:column="24"/></name> <operator pos:line="82" pos:column="25">=<pos:position pos:line="82" pos:column="26"/></operator> <name pos:line="82" pos:column="27">TRUE<pos:position pos:line="82" pos:column="31"/></name></expr>;<pos:position pos:line="82" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="83" pos:column="14"/></block></then>
            <elseif pos:line="84" pos:column="13">else <if pos:line="84" pos:column="18">if <condition pos:line="84" pos:column="21">(<expr><call><name pos:line="84" pos:column="22">strequal<pos:position pos:line="84" pos:column="30"/></name><argument_list pos:line="84" pos:column="30">(<argument><expr><name pos:line="84" pos:column="31">token<pos:position pos:line="84" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="38">"auth-int"<pos:position pos:line="84" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="50"/></condition><then pos:line="84" pos:column="50"> <block pos:line="84" pos:column="51">{
              <expr_stmt><expr><name pos:line="85" pos:column="15">foundAuthInt<pos:position pos:line="85" pos:column="27"/></name> <operator pos:line="85" pos:column="28">=<pos:position pos:line="85" pos:column="29"/></operator> <name pos:line="85" pos:column="30">TRUE<pos:position pos:line="85" pos:column="34"/></name></expr>;<pos:position pos:line="85" pos:column="35"/></expr_stmt>
            }<pos:position pos:line="86" pos:column="14"/></block></then></if></elseif></if>
            <expr_stmt><expr><name pos:line="87" pos:column="13">token<pos:position pos:line="87" pos:column="18"/></name> <operator pos:line="87" pos:column="19">=<pos:position pos:line="87" pos:column="20"/></operator> <call><name pos:line="87" pos:column="21">strtok_r<pos:position pos:line="87" pos:column="29"/></name><argument_list pos:line="87" pos:column="29">(<argument><expr><name pos:line="87" pos:column="30">NULL<pos:position pos:line="87" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="36">","<pos:position pos:line="87" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="87" pos:column="41">&amp;<pos:position pos:line="87" pos:column="46"/></operator><name pos:line="87" pos:column="42">tok_buf<pos:position pos:line="87" pos:column="49"/></name></expr></argument>)<pos:position pos:line="87" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="51"/></expr_stmt>
          }<pos:position pos:line="88" pos:column="12"/></block></while>
          <expr_stmt><expr><call><name pos:line="89" pos:column="11">free<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><name pos:line="89" pos:column="16">tmp<pos:position pos:line="89" pos:column="19"/></name></expr></argument>)<pos:position pos:line="89" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="21"/></expr_stmt>
          <comment type="block" pos:line="90" pos:column="11">/*select only auth o auth-int. Otherwise, ignore*/</comment>
          <if pos:line="91" pos:column="11">if <condition pos:line="91" pos:column="14">(<expr><name pos:line="91" pos:column="15">foundAuth<pos:position pos:line="91" pos:column="24"/></name></expr>)<pos:position pos:line="91" pos:column="25"/></condition><then pos:line="91" pos:column="25"> <block pos:line="91" pos:column="26">{
            <expr_stmt><expr><name><name pos:line="92" pos:column="13">d<pos:position pos:line="92" pos:column="14"/></name><operator pos:line="92" pos:column="14">-&gt;<pos:position pos:line="92" pos:column="19"/></operator><name pos:line="92" pos:column="16">qop<pos:position pos:line="92" pos:column="19"/></name></name> <operator pos:line="92" pos:column="20">=<pos:position pos:line="92" pos:column="21"/></operator> <call><name pos:line="92" pos:column="22">strdup<pos:position pos:line="92" pos:column="28"/></name><argument_list pos:line="92" pos:column="28">(<argument><expr><literal type="string" pos:line="92" pos:column="29">"auth"<pos:position pos:line="92" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="37"/></expr_stmt>
            <if pos:line="93" pos:column="13">if<condition pos:line="93" pos:column="15">(<expr><operator pos:line="93" pos:column="16">!<pos:position pos:line="93" pos:column="17"/></operator><name><name pos:line="93" pos:column="17">d<pos:position pos:line="93" pos:column="18"/></name><operator pos:line="93" pos:column="18">-&gt;<pos:position pos:line="93" pos:column="23"/></operator><name pos:line="93" pos:column="20">qop<pos:position pos:line="93" pos:column="23"/></name></name></expr>)<pos:position pos:line="93" pos:column="24"/></condition><then pos:line="93" pos:column="24">
              <block type="pseudo"><return pos:line="94" pos:column="15">return <expr><name pos:line="94" pos:column="22">CURLDIGEST_NOMEM<pos:position pos:line="94" pos:column="38"/></name></expr>;<pos:position pos:line="94" pos:column="39"/></return></block></then></if>
          }<pos:position pos:line="95" pos:column="12"/></block></then>
          <elseif pos:line="96" pos:column="11">else <if pos:line="96" pos:column="16">if <condition pos:line="96" pos:column="19">(<expr><name pos:line="96" pos:column="20">foundAuthInt<pos:position pos:line="96" pos:column="32"/></name></expr>)<pos:position pos:line="96" pos:column="33"/></condition><then pos:line="96" pos:column="33"> <block pos:line="96" pos:column="34">{
            <expr_stmt><expr><name><name pos:line="97" pos:column="13">d<pos:position pos:line="97" pos:column="14"/></name><operator pos:line="97" pos:column="14">-&gt;<pos:position pos:line="97" pos:column="19"/></operator><name pos:line="97" pos:column="16">qop<pos:position pos:line="97" pos:column="19"/></name></name> <operator pos:line="97" pos:column="20">=<pos:position pos:line="97" pos:column="21"/></operator> <call><name pos:line="97" pos:column="22">strdup<pos:position pos:line="97" pos:column="28"/></name><argument_list pos:line="97" pos:column="28">(<argument><expr><literal type="string" pos:line="97" pos:column="29">"auth-int"<pos:position pos:line="97" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="41"/></expr_stmt>
            <if pos:line="98" pos:column="13">if<condition pos:line="98" pos:column="15">(<expr><operator pos:line="98" pos:column="16">!<pos:position pos:line="98" pos:column="17"/></operator><name><name pos:line="98" pos:column="17">d<pos:position pos:line="98" pos:column="18"/></name><operator pos:line="98" pos:column="18">-&gt;<pos:position pos:line="98" pos:column="23"/></operator><name pos:line="98" pos:column="20">qop<pos:position pos:line="98" pos:column="23"/></name></name></expr>)<pos:position pos:line="98" pos:column="24"/></condition><then pos:line="98" pos:column="24">
              <block type="pseudo"><return pos:line="99" pos:column="15">return <expr><name pos:line="99" pos:column="22">CURLDIGEST_NOMEM<pos:position pos:line="99" pos:column="38"/></name></expr>;<pos:position pos:line="99" pos:column="39"/></return></block></then></if>
          }<pos:position pos:line="100" pos:column="12"/></block></then></if></elseif></if>
        }<pos:position pos:line="101" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="102" pos:column="9">else <if pos:line="102" pos:column="14">if<condition pos:line="102" pos:column="16">(<expr><call><name pos:line="102" pos:column="17">strequal<pos:position pos:line="102" pos:column="25"/></name><argument_list pos:line="102" pos:column="25">(<argument><expr><name pos:line="102" pos:column="26">value<pos:position pos:line="102" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="33">"algorithm"<pos:position pos:line="102" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="102" pos:column="46"/></condition><then pos:line="102" pos:column="46"> <block pos:line="102" pos:column="47">{
          <expr_stmt><expr><name><name pos:line="103" pos:column="11">d<pos:position pos:line="103" pos:column="12"/></name><operator pos:line="103" pos:column="12">-&gt;<pos:position pos:line="103" pos:column="17"/></operator><name pos:line="103" pos:column="14">algorithm<pos:position pos:line="103" pos:column="23"/></name></name> <operator pos:line="103" pos:column="24">=<pos:position pos:line="103" pos:column="25"/></operator> <call><name pos:line="103" pos:column="26">strdup<pos:position pos:line="103" pos:column="32"/></name><argument_list pos:line="103" pos:column="32">(<argument><expr><name pos:line="103" pos:column="33">content<pos:position pos:line="103" pos:column="40"/></name></expr></argument>)<pos:position pos:line="103" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="42"/></expr_stmt>
          <if pos:line="104" pos:column="11">if<condition pos:line="104" pos:column="13">(<expr><operator pos:line="104" pos:column="14">!<pos:position pos:line="104" pos:column="15"/></operator><name><name pos:line="104" pos:column="15">d<pos:position pos:line="104" pos:column="16"/></name><operator pos:line="104" pos:column="16">-&gt;<pos:position pos:line="104" pos:column="21"/></operator><name pos:line="104" pos:column="18">algorithm<pos:position pos:line="104" pos:column="27"/></name></name></expr>)<pos:position pos:line="104" pos:column="28"/></condition><then pos:line="104" pos:column="28">
            <block type="pseudo"><return pos:line="105" pos:column="13">return <expr><name pos:line="105" pos:column="20">CURLDIGEST_NOMEM<pos:position pos:line="105" pos:column="36"/></name></expr>;<pos:position pos:line="105" pos:column="37"/></return></block></then></if>
          <if pos:line="106" pos:column="11">if<condition pos:line="106" pos:column="13">(<expr><call><name pos:line="106" pos:column="14">strequal<pos:position pos:line="106" pos:column="22"/></name><argument_list pos:line="106" pos:column="22">(<argument><expr><name pos:line="106" pos:column="23">content<pos:position pos:line="106" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="32">"MD5-sess"<pos:position pos:line="106" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="44"/></condition><then pos:line="106" pos:column="44">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="107" pos:column="13">d<pos:position pos:line="107" pos:column="14"/></name><operator pos:line="107" pos:column="14">-&gt;<pos:position pos:line="107" pos:column="19"/></operator><name pos:line="107" pos:column="16">algo<pos:position pos:line="107" pos:column="20"/></name></name> <operator pos:line="107" pos:column="21">=<pos:position pos:line="107" pos:column="22"/></operator> <name pos:line="107" pos:column="23">CURLDIGESTALGO_MD5SESS<pos:position pos:line="107" pos:column="45"/></name></expr>;<pos:position pos:line="107" pos:column="46"/></expr_stmt></block></then>
          <elseif pos:line="108" pos:column="11">else <if pos:line="108" pos:column="16">if<condition pos:line="108" pos:column="18">(<expr><call><name pos:line="108" pos:column="19">strequal<pos:position pos:line="108" pos:column="27"/></name><argument_list pos:line="108" pos:column="27">(<argument><expr><name pos:line="108" pos:column="28">content<pos:position pos:line="108" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="37">"MD5"<pos:position pos:line="108" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="108" pos:column="44"/></condition><then pos:line="108" pos:column="44">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="109" pos:column="13">d<pos:position pos:line="109" pos:column="14"/></name><operator pos:line="109" pos:column="14">-&gt;<pos:position pos:line="109" pos:column="19"/></operator><name pos:line="109" pos:column="16">algo<pos:position pos:line="109" pos:column="20"/></name></name> <operator pos:line="109" pos:column="21">=<pos:position pos:line="109" pos:column="22"/></operator> <name pos:line="109" pos:column="23">CURLDIGESTALGO_MD5<pos:position pos:line="109" pos:column="41"/></name></expr>;<pos:position pos:line="109" pos:column="42"/></expr_stmt></block></then></if></elseif>
          <else pos:line="110" pos:column="11">else
            <block type="pseudo"><return pos:line="111" pos:column="13">return <expr><name pos:line="111" pos:column="20">CURLDIGEST_BADALGO<pos:position pos:line="111" pos:column="38"/></name></expr>;<pos:position pos:line="111" pos:column="39"/></return></block></else></if>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if></elseif>
        <else pos:line="113" pos:column="9">else <block pos:line="113" pos:column="14">{
          <comment type="block" pos:line="114" pos:column="11">/* unknown specifier, ignore it! */</comment>
        }<pos:position pos:line="115" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="116" pos:column="9">totlen<pos:position pos:line="116" pos:column="15"/></name> <operator pos:line="116" pos:column="16">=<pos:position pos:line="116" pos:column="17"/></operator> <call><name pos:line="116" pos:column="18">strlen<pos:position pos:line="116" pos:column="24"/></name><argument_list pos:line="116" pos:column="24">(<argument><expr><name pos:line="116" pos:column="25">value<pos:position pos:line="116" pos:column="30"/></name></expr></argument>)<pos:position pos:line="116" pos:column="31"/></argument_list></call><operator pos:line="116" pos:column="31">+<pos:position pos:line="116" pos:column="32"/></operator><call><name pos:line="116" pos:column="32">strlen<pos:position pos:line="116" pos:column="38"/></name><argument_list pos:line="116" pos:column="38">(<argument><expr><name pos:line="116" pos:column="39">content<pos:position pos:line="116" pos:column="46"/></name></expr></argument>)<pos:position pos:line="116" pos:column="47"/></argument_list></call><operator pos:line="116" pos:column="47">+<pos:position pos:line="116" pos:column="48"/></operator><literal type="number" pos:line="116" pos:column="48">1<pos:position pos:line="116" pos:column="49"/></literal></expr>;<pos:position pos:line="116" pos:column="50"/></expr_stmt>

        <if pos:line="118" pos:column="9">if<condition pos:line="118" pos:column="11">(<expr><name><name pos:line="118" pos:column="12">header<pos:position pos:line="118" pos:column="18"/></name><index pos:line="118" pos:column="18">[<expr><call><name pos:line="118" pos:column="19">strlen<pos:position pos:line="118" pos:column="25"/></name><argument_list pos:line="118" pos:column="25">(<argument><expr><name pos:line="118" pos:column="26">value<pos:position pos:line="118" pos:column="31"/></name></expr></argument>)<pos:position pos:line="118" pos:column="32"/></argument_list></call><operator pos:line="118" pos:column="32">+<pos:position pos:line="118" pos:column="33"/></operator><literal type="number" pos:line="118" pos:column="33">1<pos:position pos:line="118" pos:column="34"/></literal></expr>]<pos:position pos:line="118" pos:column="35"/></index></name> <operator pos:line="118" pos:column="36">==<pos:position pos:line="118" pos:column="38"/></operator> <literal type="char" pos:line="118" pos:column="39">'\"'<pos:position pos:line="118" pos:column="43"/></literal></expr>)<pos:position pos:line="118" pos:column="44"/></condition><then pos:line="118" pos:column="44">
          <comment type="block" pos:line="119" pos:column="11">/* the contents were within quotes, then add 2 for them to the
             length */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="11">totlen<pos:position pos:line="121" pos:column="17"/></name> <operator pos:line="121" pos:column="18">+=<pos:position pos:line="121" pos:column="20"/></operator> <literal type="number" pos:line="121" pos:column="21">2<pos:position pos:line="121" pos:column="22"/></literal></expr>;<pos:position pos:line="121" pos:column="23"/></expr_stmt></block></then></if>
      }<pos:position pos:line="122" pos:column="8"/></block></then>
      <else pos:line="123" pos:column="7">else
        <block type="pseudo"><break pos:line="124" pos:column="9">break;<pos:position pos:line="124" pos:column="15"/></break></block></else></if> <comment type="block" pos:line="124" pos:column="16">/* we're done here */</comment>

      <expr_stmt><expr><name pos:line="126" pos:column="7">header<pos:position pos:line="126" pos:column="13"/></name> <operator pos:line="126" pos:column="14">+=<pos:position pos:line="126" pos:column="16"/></operator> <name pos:line="126" pos:column="17">totlen<pos:position pos:line="126" pos:column="23"/></name></expr>;<pos:position pos:line="126" pos:column="24"/></expr_stmt>
      <if pos:line="127" pos:column="7">if<condition pos:line="127" pos:column="9">(<expr><literal type="char" pos:line="127" pos:column="10">','<pos:position pos:line="127" pos:column="13"/></literal> <operator pos:line="127" pos:column="14">==<pos:position pos:line="127" pos:column="16"/></operator> <operator pos:line="127" pos:column="17">*<pos:position pos:line="127" pos:column="18"/></operator><name pos:line="127" pos:column="18">header<pos:position pos:line="127" pos:column="24"/></name></expr>)<pos:position pos:line="127" pos:column="25"/></condition><then pos:line="127" pos:column="25">
        <comment type="block" pos:line="128" pos:column="9">/* allow the list to be comma-separated */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="129" pos:column="9">header<pos:position pos:line="129" pos:column="15"/></name><operator pos:line="129" pos:column="15">++<pos:position pos:line="129" pos:column="17"/></operator></expr>;<pos:position pos:line="129" pos:column="18"/></expr_stmt></block></then></if>
    }<pos:position pos:line="130" pos:column="6"/></block></while>
    <comment type="block" pos:line="131" pos:column="5">/* We had a nonce since before, and we got another one now without
       'stale=true'. This means we provided bad credentials in the previous
       request */</comment>
    <if pos:line="134" pos:column="5">if<condition pos:line="134" pos:column="7">(<expr><name pos:line="134" pos:column="8">before<pos:position pos:line="134" pos:column="14"/></name> <operator pos:line="134" pos:column="15">&amp;&amp;<pos:position pos:line="134" pos:column="25"/></operator> <operator pos:line="134" pos:column="18">!<pos:position pos:line="134" pos:column="19"/></operator><name><name pos:line="134" pos:column="19">d<pos:position pos:line="134" pos:column="20"/></name><operator pos:line="134" pos:column="20">-&gt;<pos:position pos:line="134" pos:column="25"/></operator><name pos:line="134" pos:column="22">stale<pos:position pos:line="134" pos:column="27"/></name></name></expr>)<pos:position pos:line="134" pos:column="28"/></condition><then pos:line="134" pos:column="28">
      <block type="pseudo"><return pos:line="135" pos:column="7">return <expr><name pos:line="135" pos:column="14">CURLDIGEST_BAD<pos:position pos:line="135" pos:column="28"/></name></expr>;<pos:position pos:line="135" pos:column="29"/></return></block></then></if>

    <comment type="block" pos:line="137" pos:column="5">/* We got this header without a nonce, that's a bad Digest line! */</comment>
    <if pos:line="138" pos:column="5">if<condition pos:line="138" pos:column="7">(<expr><operator pos:line="138" pos:column="8">!<pos:position pos:line="138" pos:column="9"/></operator><name><name pos:line="138" pos:column="9">d<pos:position pos:line="138" pos:column="10"/></name><operator pos:line="138" pos:column="10">-&gt;<pos:position pos:line="138" pos:column="15"/></operator><name pos:line="138" pos:column="12">nonce<pos:position pos:line="138" pos:column="17"/></name></name></expr>)<pos:position pos:line="138" pos:column="18"/></condition><then pos:line="138" pos:column="18">
      <block type="pseudo"><return pos:line="139" pos:column="7">return <expr><name pos:line="139" pos:column="14">CURLDIGEST_BAD<pos:position pos:line="139" pos:column="28"/></name></expr>;<pos:position pos:line="139" pos:column="29"/></return></block></then></if>
  }<pos:position pos:line="140" pos:column="4"/></block></then>
  <else pos:line="141" pos:column="3">else
    <comment type="block" pos:line="142" pos:column="5">/* else not a digest, get out */</comment>
    <block type="pseudo"><return pos:line="143" pos:column="5">return <expr><name pos:line="143" pos:column="12">CURLDIGEST_NONE<pos:position pos:line="143" pos:column="27"/></name></expr>;<pos:position pos:line="143" pos:column="28"/></return></block></else></if>

  <return pos:line="145" pos:column="3">return <expr><name pos:line="145" pos:column="10">CURLDIGEST_FINE<pos:position pos:line="145" pos:column="25"/></name></expr>;<pos:position pos:line="145" pos:column="26"/></return>
}<pos:position pos:line="146" pos:column="2"/></block></function></unit>
