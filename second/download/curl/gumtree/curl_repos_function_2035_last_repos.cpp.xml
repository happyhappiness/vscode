<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2035_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_strcasecompare<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">first<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">second<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <while pos:line="3" pos:column="3">while<condition pos:line="3" pos:column="8">(<expr><operator pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></operator><name pos:line="3" pos:column="10">first<pos:position pos:line="3" pos:column="15"/></name> <operator pos:line="3" pos:column="16">&amp;&amp;<pos:position pos:line="3" pos:column="26"/></operator> <operator pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></operator><name pos:line="3" pos:column="20">second<pos:position pos:line="3" pos:column="26"/></name></expr>)<pos:position pos:line="3" pos:column="27"/></condition> <block pos:line="3" pos:column="28">{
    <if pos:line="4" pos:column="5">if<condition pos:line="4" pos:column="7">(<expr><call><name pos:line="4" pos:column="8">Curl_raw_toupper<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><operator pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">first<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call> <operator pos:line="4" pos:column="33">!=<pos:position pos:line="4" pos:column="35"/></operator> <call><name pos:line="4" pos:column="36">Curl_raw_toupper<pos:position pos:line="4" pos:column="52"/></name><argument_list pos:line="4" pos:column="52">(<argument><expr><operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><name pos:line="4" pos:column="54">second<pos:position pos:line="4" pos:column="60"/></name></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="62"/></condition><then pos:line="4" pos:column="62">
      <comment type="block" pos:line="5" pos:column="7">/* get out of the loop as soon as they don't match */</comment>
      <block type="pseudo"><break pos:line="6" pos:column="7">break;<pos:position pos:line="6" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="7" pos:column="5">first<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">++<pos:position pos:line="7" pos:column="12"/></operator></expr>;<pos:position pos:line="7" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">second<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">++<pos:position pos:line="8" pos:column="13"/></operator></expr>;<pos:position pos:line="8" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="9" pos:column="4"/></block></while>
  <comment type="block" pos:line="10" pos:column="3">/* we do the comparison here (possibly again), just to make sure that if the
     loop above is skipped because one of the strings reached zero, we must not
     return this as a successful match */</comment>
  <return pos:line="13" pos:column="3">return <expr><operator pos:line="13" pos:column="10">(<pos:position pos:line="13" pos:column="11"/></operator><call><name pos:line="13" pos:column="11">Curl_raw_toupper<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><operator pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">first<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call> <operator pos:line="13" pos:column="36">==<pos:position pos:line="13" pos:column="38"/></operator> <call><name pos:line="13" pos:column="39">Curl_raw_toupper<pos:position pos:line="13" pos:column="55"/></name><argument_list pos:line="13" pos:column="55">(<argument><expr><operator pos:line="13" pos:column="56">*<pos:position pos:line="13" pos:column="57"/></operator><name pos:line="13" pos:column="57">second<pos:position pos:line="13" pos:column="63"/></name></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call><operator pos:line="13" pos:column="64">)<pos:position pos:line="13" pos:column="65"/></operator></expr>;<pos:position pos:line="13" pos:column="66"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
