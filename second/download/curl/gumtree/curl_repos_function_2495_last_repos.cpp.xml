<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2495_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">read_cert<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">file<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">unsigned<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier><modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">out<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">size_t<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">outlen<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">fd<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ssize_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">n<pos:position pos:line="4" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="14">len<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">cap<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><literal type="number" pos:line="4" pos:column="29">512<pos:position pos:line="4" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name></type> <name><name pos:line="5" pos:column="17">buf<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><literal type="number" pos:line="5" pos:column="21">512<pos:position pos:line="5" pos:column="24"/></literal></expr>]<pos:position pos:line="5" pos:column="25"/></index></name></decl>, <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="28">data<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">fd<pos:position pos:line="7" pos:column="5"/></name> <operator pos:line="7" pos:column="6">=<pos:position pos:line="7" pos:column="7"/></operator> <call><name pos:line="7" pos:column="8">open<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><name pos:line="7" pos:column="13">file<pos:position pos:line="7" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name pos:line="8" pos:column="6">fd<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">&lt;<pos:position pos:line="8" pos:column="13"/></operator> <literal type="number" pos:line="8" pos:column="11">0<pos:position pos:line="8" pos:column="12"/></literal></expr>)<pos:position pos:line="8" pos:column="13"/></condition><then pos:line="8" pos:column="13">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">-<pos:position pos:line="9" pos:column="13"/></operator><literal type="number" pos:line="9" pos:column="13">1<pos:position pos:line="9" pos:column="14"/></literal></expr>;<pos:position pos:line="9" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="11" pos:column="3">data<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <call><name pos:line="11" pos:column="10">malloc<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">cap<pos:position pos:line="11" pos:column="20"/></name></expr></argument>)<pos:position pos:line="11" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">data<pos:position pos:line="12" pos:column="11"/></name></expr>)<pos:position pos:line="12" pos:column="12"/></condition><then pos:line="12" pos:column="12"> <block pos:line="12" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">close<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">fd<pos:position pos:line="13" pos:column="13"/></name></expr></argument>)<pos:position pos:line="13" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="15"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <for pos:line="17" pos:column="3">for<control pos:line="17" pos:column="6">(<init pos:line="17" pos:column="7">;<pos:position pos:line="17" pos:column="8"/></init><condition pos:line="17" pos:column="8">;<pos:position pos:line="17" pos:column="9"/></condition><incr/>)<pos:position pos:line="17" pos:column="10"/></control> <block pos:line="17" pos:column="11">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">n<pos:position pos:line="18" pos:column="6"/></name> <operator pos:line="18" pos:column="7">=<pos:position pos:line="18" pos:column="8"/></operator> <call><name pos:line="18" pos:column="9">read<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">fd<pos:position pos:line="18" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="18">buf<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="23">sizeof<argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">buf<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><name pos:line="19" pos:column="8">n<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">&lt;<pos:position pos:line="19" pos:column="14"/></operator> <literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>)<pos:position pos:line="19" pos:column="14"/></condition><then pos:line="19" pos:column="14"> <block pos:line="19" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">close<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">fd<pos:position pos:line="20" pos:column="15"/></name></expr></argument>)<pos:position pos:line="20" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">free<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name pos:line="21" pos:column="12">data<pos:position pos:line="21" pos:column="16"/></name></expr></argument>)<pos:position pos:line="21" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="18"/></expr_stmt>
      <return pos:line="22" pos:column="7">return <expr><operator pos:line="22" pos:column="14">-<pos:position pos:line="22" pos:column="15"/></operator><literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal></expr>;<pos:position pos:line="22" pos:column="17"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if<condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">n<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">==<pos:position pos:line="24" pos:column="17"/></operator> <literal type="number" pos:line="24" pos:column="18">0<pos:position pos:line="24" pos:column="19"/></literal></expr>)<pos:position pos:line="24" pos:column="20"/></condition><then pos:line="24" pos:column="20"> <block pos:line="24" pos:column="21">{
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">close<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name pos:line="25" pos:column="13">fd<pos:position pos:line="25" pos:column="15"/></name></expr></argument>)<pos:position pos:line="25" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt>
      <break pos:line="26" pos:column="7">break;<pos:position pos:line="26" pos:column="13"/></break>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><name pos:line="29" pos:column="8">len<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">+<pos:position pos:line="29" pos:column="13"/></operator> <name pos:line="29" pos:column="14">n<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">&gt;=<pos:position pos:line="29" pos:column="21"/></operator> <name pos:line="29" pos:column="19">cap<pos:position pos:line="29" pos:column="22"/></name></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23"> <block pos:line="29" pos:column="24">{
      <expr_stmt><expr><name pos:line="30" pos:column="7">cap<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">*=<pos:position pos:line="30" pos:column="13"/></operator> <literal type="number" pos:line="30" pos:column="14">2<pos:position pos:line="30" pos:column="15"/></literal></expr>;<pos:position pos:line="30" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">data<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <call><name pos:line="31" pos:column="14">realloc<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">data<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">cap<pos:position pos:line="31" pos:column="31"/></name></expr></argument>)<pos:position pos:line="31" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
      <if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><operator pos:line="32" pos:column="10">!<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">data<pos:position pos:line="32" pos:column="15"/></name></expr>)<pos:position pos:line="32" pos:column="16"/></condition><then pos:line="32" pos:column="16"> <block pos:line="32" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">close<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">fd<pos:position pos:line="33" pos:column="17"/></name></expr></argument>)<pos:position pos:line="33" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="19"/></expr_stmt>
        <return pos:line="34" pos:column="9">return <expr><operator pos:line="34" pos:column="16">-<pos:position pos:line="34" pos:column="17"/></operator><literal type="number" pos:line="34" pos:column="17">1<pos:position pos:line="34" pos:column="18"/></literal></expr>;<pos:position pos:line="34" pos:column="19"/></return>
      }<pos:position pos:line="35" pos:column="8"/></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">memcpy<pos:position pos:line="38" pos:column="11"/></name><argument_list pos:line="38" pos:column="11">(<argument><expr><name pos:line="38" pos:column="12">data<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">+<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">len<pos:position pos:line="38" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="24">buf<pos:position pos:line="38" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="29">n<pos:position pos:line="38" pos:column="30"/></name></expr></argument>)<pos:position pos:line="38" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="39" pos:column="5">len<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">+=<pos:position pos:line="39" pos:column="11"/></operator> <name pos:line="39" pos:column="12">n<pos:position pos:line="39" pos:column="13"/></name></expr>;<pos:position pos:line="39" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="40" pos:column="4"/></block></for>
  <expr_stmt><expr><name><name pos:line="41" pos:column="3">data<pos:position pos:line="41" pos:column="7"/></name><index pos:line="41" pos:column="7">[<expr><name pos:line="41" pos:column="8">len<pos:position pos:line="41" pos:column="11"/></name></expr>]<pos:position pos:line="41" pos:column="12"/></index></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <literal type="char" pos:line="41" pos:column="15">'\0'<pos:position pos:line="41" pos:column="19"/></literal></expr>;<pos:position pos:line="41" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="43" pos:column="3">*<pos:position pos:line="43" pos:column="4"/></operator><name pos:line="43" pos:column="4">out<pos:position pos:line="43" pos:column="7"/></name> <operator pos:line="43" pos:column="8">=<pos:position pos:line="43" pos:column="9"/></operator> <name pos:line="43" pos:column="10">data<pos:position pos:line="43" pos:column="14"/></name></expr>;<pos:position pos:line="43" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="44" pos:column="3">*<pos:position pos:line="44" pos:column="4"/></operator><name pos:line="44" pos:column="4">outlen<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <name pos:line="44" pos:column="13">len<pos:position pos:line="44" pos:column="16"/></name></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt>

  <return pos:line="46" pos:column="3">return <expr><literal type="number" pos:line="46" pos:column="10">0<pos:position pos:line="46" pos:column="11"/></literal></expr>;<pos:position pos:line="46" pos:column="12"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
