"              Added in 7.19.7.\n"
"\n"
"       --data-ascii <data>\n"
"              (HTTP) This is just an alias for -d, --data.\n"
"\n"
"       --data-binary <data>\n"
"              (HTTP)  This  posts data exactly as specified with no extra pro-\n"
"              cessing whatsoever.\n"
"\n"
"              If you start the data with the letter @, the rest  should  be  a\n"
"              filename.   Data  is  posted  in  a similar manner as -d, --data\n"
, stdout);
 fputs(
"              does, except that newlines and carriage  returns  are  preserved\n"
"              and conversions are never done.\n"
"\n"
"              If  this  option  is  used several times, the ones following the\n"
"              first will append data as described in -d, --data.\n"
"\n"
"       --data-raw <data>\n"
"              (HTTP) This posts data similarly to -d, --data but  without  the\n"
"              special interpretation of the @ character.\n"
"\n"
"              See also -d, --data. Added in 7.43.0.\n"
"\n"
, stdout);
 fputs(
"       --data-urlencode <data>\n"
"              (HTTP)  This posts data, similar to the other -d, --data options\n"
"              with the exception that this performs URL-encoding.\n"
"\n"
"              To be CGI-compliant, the <data> part should begin  with  a  name\n"
"              followed  by a separator and a content specification. The <data>\n"
"              part can be passed to curl using one of the following syntaxes:\n"
"\n"
"              content\n"
, stdout);
 fputs(
"                     This will make curl URL-encode the content and pass  that\n"
"                     on.  Just  be careful so that the content doesn't contain\n"
"                     any = or @ symbols, as that will  then  make  the  syntax\n"
"                     match one of the other cases below!\n"
"\n"
"              =content\n"
"                     This  will make curl URL-encode the content and pass that\n"
"                     on. The preceding = symbol is not included in the data.\n"
"\n"
, stdout);
 fputs(
"              name=content\n"
"                     This will make curl URL-encode the content part and  pass\n"
"                     that  on.  Note that the name part is expected to be URL-\n"
"                     encoded already.\n"
"\n"
"              @filename\n"
"                     This will  make  curl  load  data  from  the  given  file\n"
"                     (including  any  newlines), URL-encode that data and pass\n"
"                     it on in the POST.\n"
"\n"
"              name@filename\n"
, stdout);
 fputs(
"                     This will  make  curl  load  data  from  the  given  file\n"
"                     (including  any  newlines), URL-encode that data and pass\n"
"                     it on in the POST. The  name  part  gets  an  equal  sign\n"
"                     appended, resulting in name=urlencoded-file-content. Note\n"
"                     that the name is expected to be URL-encoded already.\n"
"       See also -d, --data and --data-raw. Added in 7.18.0.\n"
"\n"
"       -d, --data <data>\n"
, stdout);
 fputs(
"              (HTTP) Sends the specified data in a POST request  to  the  HTTP\n"
"              server,  in  the  same  way  that a browser does when a user has\n"
"              filled in an HTML form and presses the submit button. This  will\n"
"              cause curl to pass the data to the server using the content-type\n"
"              application/x-www-form-urlencoded.  Compare to -F, --form.\n"
"\n"
"              --data-raw is almost the same but does not have a special inter-\n"
, stdout);
 fputs(
"              pretation  of  the  @ character. To post data purely binary, you\n"
"              should instead use the --data-binary option.  To URL-encode  the\n"
"              value of a form field you may use --data-urlencode.\n"
"\n"
"              If  any of these options is used more than once on the same com-\n"
"              mand line, the data pieces specified  will  be  merged  together\n"
"              with  a  separating  &-symbol.  Thus,  using  '-d name=daniel -d\n"
, stdout);
 fputs(
"              skill=lousy'  would  generate  a  post  chunk  that  looks  like\n"
"              'name=daniel&skill=lousy'.\n"
"\n"
"              If  you  start  the data with the letter @, the rest should be a\n"
"              file name to read the data from, or - if you want curl  to  read\n"
"              the data from stdin. Multiple files can also be specified. Post-\n"
"              ing data from a file named  from  a  file  like  that,  carriage\n"
, stdout);
 fputs(
"              returns and newlines will be stripped out. If you don't want the\n"
"              @ character to have  a  special  interpretation  use  --data-raw\n"
"              instead.\n"
"\n"
"              See also --data-binary and --data-urlencode and --data-raw. This\n"
"              option overrides -F, --form and -I, --head and --upload.\n"
"\n"
"       --delegation <LEVEL>\n"
"              (GSS/kerberos) Set LEVEL to tell the server what it  is  allowed\n"
, stdout);
 fputs(
"              to delegate when it comes to user credentials.\n"
"\n"
"              none   Don't allow any delegation.\n"
"\n"
"              policy Delegates  if  and only if the OK-AS-DELEGATE flag is set\n"
"                     in the Kerberos service ticket,  which  is  a  matter  of\n"
"                     realm policy.\n"
"\n"
"              always Unconditionally allow the server to delegate.\n"
"\n"
"       --digest\n"
"              (HTTP)  Enables HTTP Digest authentication. This is an authenti-\n"
, stdout);
 fputs(
"              cation scheme that prevents the password from  being  sent  over\n"
"              the  wire in clear text. Use this in combination with the normal\n"
"              -u, --user option to set user name and password.\n"
"\n"
"              If this option is used several times,  only  the  first  one  is\n"
"              used.\n"
"\n"
"              See  also  -u,  --user  and  --proxy-digest  and --anyauth. This\n"
"              option overrides --basic and --ntlm and --negotiate.\n"
"\n"
"       --disable-eprt\n"
, stdout);
 fputs(
"              (FTP) Tell curl to disable the use of the EPRT and LPRT commands\n"
"              when doing active FTP transfers. Curl will normally always first\n"
"              attempt to use EPRT, then LPRT before using PORT, but with  this\n"
"              option,  it  will  use PORT right away. EPRT and LPRT are exten-\n"
"              sions to the original FTP protocol, and  may  not  work  on  all\n"
"              servers, but they enable more functionality in a better way than\n"
, stdout);
 fputs(
"              the traditional PORT command.\n"
"\n"
"              --eprt can be used to explicitly enable EPRT again and --no-eprt\n"
"              is an alias for --disable-eprt.\n"
"\n"
"              If  the  server is accessed using IPv6, this option will have no\n"
"              effect as EPRT is necessary then.\n"
"\n"
"              Disabling EPRT only changes the active behavior. If you want  to\n"
"              switch  to  passive  mode  you need to not use -P, --ftp-port or\n"
"              force it with --ftp-pasv.\n"
"\n"
, stdout);
 fputs(
"       --disable-epsv\n"
"              (FTP) (FTP) Tell curl to disable the use  of  the  EPSV  command\n"
"              when  doing  passive  FTP  transfers.  Curl will normally always\n"
"              first attempt to use EPSV before PASV, but with this option,  it\n"
"              will not try using EPSV.\n"
"\n"
"              --epsv can be used to explicitly enable EPSV again and --no-epsv\n"
"              is an alias for --disable-epsv.\n"
"\n"
, stdout);
 fputs(
"              If the server is an IPv6 host, this option will have  no  effect\n"
"              as EPSV is necessary then.\n"
"\n"
"              Disabling EPSV only changes the passive behavior. If you want to\n"
"              switch to active mode you need to use -P, --ftp-port.\n"
"\n"
"       -q, --disable\n"
"              If used as the first parameter on the command line,  the  curlrc\n"
"              config  file will not be read and used. See the -K, --config for\n"
, stdout);
 fputs(
"              details on the default config file search path.\n"
"\n"
"       --dns-interface <interface>\n"
"              (DNS) Tell curl to send outgoing DNS  requests  through  <inter-\n"
"              face>.  This  option is a counterpart to --interface (which does\n"
"              not affect DNS). The supplied string must be an  interface  name\n"
"              (not an address).\n"
"\n"
"              See  also  --dns-ipv4-addr  and --dns-ipv6-addr. --dns-interface\n"
, stdout);
 fputs(
"              requires that the underlying libcurl was  built  to  support  c-\n"
"              ares. Added in 7.33.0.\n"
"\n"
"       --dns-ipv4-addr <address>\n"
"              (DNS)  Tell  curl  to  bind to <ip-address> when making IPv4 DNS\n"
"              requests, so that the DNS requests originate from this  address.\n"
"              The argument should be a single IPv4 address.\n"
"\n"
"              See  also  --dns-interface  and --dns-ipv6-addr. --dns-ipv4-addr\n"
, stdout);
 fputs(
"              requires that the underlying libcurl was  built  to  support  c-\n"
"              ares. Added in 7.33.0.\n"
"\n"
"       --dns-ipv6-addr <address>\n"
"              (DNS)  Tell  curl  to  bind to <ip-address> when making IPv6 DNS\n"
"              requests, so that the DNS requests originate from this  address.\n"
"              The argument should be a single IPv6 address.\n"
"\n"
"              See  also  --dns-interface  and --dns-ipv4-addr. --dns-ipv6-addr\n"
, stdout);
 fputs(
"              requires that the underlying libcurl was  built  to  support  c-\n"
"              ares. Added in 7.33.0.\n"
"\n"
"       --dns-servers <addresses>\n"
"              Set  the  list  of  DNS servers to be used instead of the system\n"
"              default.  The list of IP addresses should be separated with com-\n"
"              mas. Port numbers may also optionally be given as :<port-number>\n"
"              after each IP address.\n"
"\n"
, stdout);
 fputs(
"              --dns-servers requires that the underlying libcurl was built  to\n"
"              support c-ares. Added in 7.33.0.\n"
"\n"
"       -D, --dump-header <filename>\n"
"              (HTTP  FTP) Write the received protocol headers to the specified\n"
"              file.\n"
"\n"
"              This option is handy to use when you want to store  the  headers\n"
"              that  an  HTTP site sends to you. Cookies from the headers could\n"
"              then be read in a  second  curl  invocation  by  using  the  -b,\n"
, stdout);
 fputs(
"              --cookie  option! The -c, --cookie-jar option is a better way to\n"
"              store cookies.\n"
"\n"
"              When used in FTP, the FTP server response lines  are  considered\n"
"              being \"headers\" and thus are saved there.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"              See also -o, --output.\n"
"\n"
"       --egd-file <file>\n"
"              (TLS)  Specify  the  path  name  to the Entropy Gathering Daemon\n"
, stdout);
 fputs(
"              socket. The socket is used to seed the  random  engine  for  SSL\n"
"              connections.\n"
"\n"
"              See also --random-file.\n"
"\n"
"       --engine <name>\n"
"              (TLS)  Select the OpenSSL crypto engine to use for cipher opera-\n"
"              tions. Use --engine list to print a list of build-time supported\n"
"              engines.  Note  that  not  all  (or  none) of the engines may be\n"
"              available at run-time.\n"
"\n"
"       --environment\n"
, stdout);
 fputs(
"              Sets a range of environment variables, using the names  the  -w,\n"
"              --write-out  option supports, to allow easier extraction of use-\n"
"              ful information after having run curl.\n"
"\n"
"              --environment requires that the underlying libcurl was built  to\n"
"              support RISC OS.\n"
"\n"
"       --expect100-timeout <seconds>\n"
"              (HTTP) Maximum time in seconds that you allow curl to wait for a\n"
, stdout);
 fputs(
"              100-continue response when curl emits an  Expects:  100-continue\n"
"              header  in  its  request.  By default curl will wait one second.\n"
"              This option accepts decimal values! When curl stops waiting,  it\n"
"              will continue as if the response has been received.\n"
"\n"
"              See also --connect-timeout. Added in 7.47.0.\n"
"\n"
"       --fail-early\n"
"              Fail and exit on first detected error.\n"
"\n"
, stdout);
 fputs(
"              When  curl is used to do multiple transfers on the command line,\n"
"              it will attempt to operate on each given URL,  one  by  one.  By\n"
"              default,  it will ignore errors if there are more URLs given and\n"
"              the last URL's  success  will  determine  the  error  code  curl\n"
"              returns.  So  early failures will be \"hidden\" by subsequent suc-\n"
"              cessful transfers.\n"
"\n"
, stdout);
 fputs(
"              Using this option, curl will instead  return  an  error  on  the\n"
"              first  transfers  that  fails, independent on the amount of more\n"
"              URLs that are given on the command line. This way,  no  transfer\n"
"              failures go undetected by scripts and similar.\n"
"\n"
"              This  option  will  apply for all given URLs even if you use -:,\n"
"              --next.\n"
"\n"
"              Added in 7.52.0.\n"
"\n"
"       -f, --fail\n"
, stdout);
 fputs(
"              (HTTP) Fail silently (no output at all) on server  errors.  This\n"
"              is  mostly done to better enable scripts etc to better deal with\n"
"              failed attempts. In normal cases when an HTTP  server  fails  to\n"
"              deliver  a  document,  it  returns  an  HTML document stating so\n"
"              (which often also describes why and more). This flag  will  pre-\n"
"              vent curl from outputting that and return error 22.\n"
"\n"
, stdout);
 fputs(
"              This  method is not fail-safe and there are occasions where non-\n"
"              successful response codes will  slip  through,  especially  when\n"
"              authentication is involved (response codes 401 and 407).\n"
"\n"
"       --false-start\n"
"              (TLS)  Tells  curl  to use false start during the TLS handshake.\n"
"              False start is a mode where a  TLS  client  will  start  sending\n"
"              application data before verifying the server's Finished message,\n"
, stdout);
 fputs(
"              thus saving a round trip when performing a full handshake.\n"
"\n"
"              This is currently only implemented in the NSS and Secure  Trans-\n"
"              port (on iOS 7.0 or later, or OS X 10.9 or later) backends.\n"
"\n"
"              Added in 7.42.0.\n"
"\n"
"       --form-string <name=string>\n"
"              (HTTP)  Similar  to  -F, --form except that the value string for\n"
"              the named parameter is used literally. Leading '@' and '<' char-\n"
, stdout);
 fputs(
"              acters,  and  the  ';type='  string in the value have no special\n"
"              meaning. Use this in preference to -F,  --form  if  there's  any\n"
"              possibility  that  the string value may accidentally trigger the\n"
"              '@' or '<' features of -F, --form.\n"
"\n"
"              See also -F, --form.\n"
"\n"
"       -F, --form <name=content>\n"
"              (HTTP) This lets curl emulate a filled-in form in which  a  user\n"
, stdout);
 fputs(
"              has  pressed  the  submit  button. This causes curl to POST data\n"
"              using the  Content-Type  multipart/form-data  according  to  RFC\n"
"              2388.  This  enables uploading of binary files etc. To force the\n"
"              'content' part to be a file, prefix the  file  name  with  an  @\n"
"              sign.  To just get the content part from a file, prefix the file\n"
"              name with the symbol <. The difference between @ and <  is  then\n"
, stdout);
 fputs(
"              that  @  makes a file get attached in the post as a file upload,\n"
"              while the < makes a text field and just  get  the  contents  for\n"
"              that text field from a file.\n"
"\n"
"              Example:  to  send  an image to a server, where 'profile' is the\n"
"              name of the form-field to which portrait.jpg will be the input:\n"
"\n"
"               curl -F profile=@portrait.jpg https://example.com/upload.cgi\n"
"\n"
, stdout);
 fputs(
"              To read content from stdin instead of a file, use - as the file-\n"
"              name.  This  goes  for both @ and < constructs. Unfortunately it\n"
"              does not support reading the file from a named pipe or  similar,\n"
"              as it needs the full size before the transfer starts.\n"
"\n"
"              You  can  also  tell  curl  what  Content-Type  to  use by using\n"
"              'type=', in a manner similar to:\n"
"\n"
, stdout);
 fputs(
"               curl -F \"web=@index.html;type=text/html\" example.com\n"
"\n"
"              or\n"
"\n"
"               curl -F \"name=daniel;type=text/foo\" example.com\n"
"\n"
"              You can also explicitly change the name field of a  file  upload\n"
"              part by setting filename=, like this:\n"
"\n"
"               curl -F \"file=@localfile;filename=nameinpost\" example.com\n"
"\n"
"              If  filename/path contains ',' or ';', it must be quoted by dou-\n"
"              ble-quotes like:\n"
"\n"
, stdout);
 fputs(
"               curl  -F  \"file=@\\\"localfile\\\";filename=\\\"nameinpost\\\"\"   exam-\n"
"              ple.com\n"
"\n"
"              or\n"
"\n"
"               curl -F 'file=@\"localfile\";filename=\"nameinpost\"' example.com\n"
"\n"
"              Note  that  if  a  filename/path is quoted by double-quotes, any\n"
"              double-quote or backslash within the filename must be escaped by\n"
"              backslash.\n"
"\n"
"              See further examples and details in the MANUAL.\n"
"\n"
, stdout);
