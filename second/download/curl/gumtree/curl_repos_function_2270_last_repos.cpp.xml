<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2270_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">easy_perform<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">Curl_easy<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">data<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">bool<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">events<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_multi<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">multi<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLMcode<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">mcode<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURLE_OK<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">SIGPIPE_VARIABLE<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name pos:line="6" pos:column="20">pipe_st<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><name pos:line="8" pos:column="7">data<pos:position pos:line="8" pos:column="11"/></name></expr>)<pos:position pos:line="8" pos:column="12"/></condition><then pos:line="8" pos:column="12">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">CURLE_BAD_FUNCTION_ARGUMENT<pos:position pos:line="9" pos:column="39"/></name></expr>;<pos:position pos:line="9" pos:column="40"/></return></block></then></if>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name><name pos:line="11" pos:column="6">data<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">multi<pos:position pos:line="11" pos:column="17"/></name></name></expr>)<pos:position pos:line="11" pos:column="18"/></condition><then pos:line="11" pos:column="18"> <block pos:line="11" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">failf<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><name pos:line="12" pos:column="11">data<pos:position pos:line="12" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="17">"easy handle already used in multi handle"<pos:position pos:line="12" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="61"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="13" pos:column="29"/></name></expr>;<pos:position pos:line="13" pos:column="30"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name><name pos:line="16" pos:column="6">data<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">-&gt;<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="12">multi_easy<pos:position pos:line="16" pos:column="22"/></name></name></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="5">multi<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <name><name pos:line="17" pos:column="13">data<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">-&gt;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="19">multi_easy<pos:position pos:line="17" pos:column="29"/></name></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt></block></then>
  <else pos:line="18" pos:column="3">else <block pos:line="18" pos:column="8">{
    <comment type="block" pos:line="19" pos:column="5">/* this multi handle will only ever have a single easy handled attached
       to it, so make it use minimal hashes */</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">multi<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <call><name pos:line="21" pos:column="13">Curl_multi_handle<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><literal type="number" pos:line="21" pos:column="31">1<pos:position pos:line="21" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="34">3<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><operator pos:line="22" pos:column="8">!<pos:position pos:line="22" pos:column="9"/></operator><name pos:line="22" pos:column="9">multi<pos:position pos:line="22" pos:column="14"/></name></expr>)<pos:position pos:line="22" pos:column="15"/></condition><then pos:line="22" pos:column="15">
      <block type="pseudo"><return pos:line="23" pos:column="7">return <expr><name pos:line="23" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="23" pos:column="33"/></name></expr>;<pos:position pos:line="23" pos:column="34"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">data<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">-&gt;<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="11">multi_easy<pos:position pos:line="24" pos:column="21"/></name></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">multi<pos:position pos:line="24" pos:column="29"/></name></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="25" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="27" pos:column="3">/* Copy the MAXCONNECTS option to the multi handle */</comment>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">curl_multi_setopt<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">multi<pos:position pos:line="28" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="28">CURLMOPT_MAXCONNECTS<pos:position pos:line="28" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="50">data<pos:position pos:line="28" pos:column="54"/></name><operator pos:line="28" pos:column="54">-&gt;<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="56">set<pos:position pos:line="28" pos:column="59"/></name><operator pos:line="28" pos:column="59">.<pos:position pos:line="28" pos:column="60"/></operator><name pos:line="28" pos:column="60">maxconnects<pos:position pos:line="28" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="73"/></expr_stmt>

  <expr_stmt><expr><name pos:line="30" pos:column="3">mcode<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <call><name pos:line="30" pos:column="11">curl_multi_add_handle<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">multi<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">data<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name pos:line="31" pos:column="6">mcode<pos:position pos:line="31" pos:column="11"/></name></expr>)<pos:position pos:line="31" pos:column="12"/></condition><then pos:line="31" pos:column="12"> <block pos:line="31" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">curl_multi_cleanup<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">multi<pos:position pos:line="32" pos:column="29"/></name></expr></argument>)<pos:position pos:line="32" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><name pos:line="33" pos:column="8">mcode<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">==<pos:position pos:line="33" pos:column="16"/></operator> <name pos:line="33" pos:column="17">CURLM_OUT_OF_MEMORY<pos:position pos:line="33" pos:column="36"/></name></expr>)<pos:position pos:line="33" pos:column="37"/></condition><then pos:line="33" pos:column="37">
      <block type="pseudo"><return pos:line="34" pos:column="7">return <expr><name pos:line="34" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="34" pos:column="33"/></name></expr>;<pos:position pos:line="34" pos:column="34"/></return></block></then></if>
    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="35" pos:column="29"/></name></expr>;<pos:position pos:line="35" pos:column="30"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="38" pos:column="3">sigpipe_ignore<pos:position pos:line="38" pos:column="17"/></name><argument_list pos:line="38" pos:column="17">(<argument><expr><name pos:line="38" pos:column="18">data<pos:position pos:line="38" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="24">&amp;<pos:position pos:line="38" pos:column="29"/></operator><name pos:line="38" pos:column="25">pipe_st<pos:position pos:line="38" pos:column="32"/></name></expr></argument>)<pos:position pos:line="38" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="40" pos:column="3">/* assign this after curl_multi_add_handle() since that function checks for
     it and rejects this handle otherwise */</comment>
  <expr_stmt><expr><name><name pos:line="42" pos:column="3">data<pos:position pos:line="42" pos:column="7"/></name><operator pos:line="42" pos:column="7">-&gt;<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="9">multi<pos:position pos:line="42" pos:column="14"/></name></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <name pos:line="42" pos:column="17">multi<pos:position pos:line="42" pos:column="22"/></name></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="44" pos:column="3">/* run the transfer */</comment>
  <expr_stmt><expr><name pos:line="45" pos:column="3">result<pos:position pos:line="45" pos:column="9"/></name> <operator pos:line="45" pos:column="10">=<pos:position pos:line="45" pos:column="11"/></operator> <ternary><condition><expr><name pos:line="45" pos:column="12">events<pos:position pos:line="45" pos:column="18"/></name></expr> ?<pos:position pos:line="45" pos:column="20"/></condition><then pos:line="45" pos:column="20"> <expr><call><name pos:line="45" pos:column="21">easy_events<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name pos:line="45" pos:column="33">multi<pos:position pos:line="45" pos:column="38"/></name></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr> <pos:position pos:line="45" pos:column="40"/></then><else pos:line="45" pos:column="40">: <expr><call><name pos:line="45" pos:column="42">easy_transfer<pos:position pos:line="45" pos:column="55"/></name><argument_list pos:line="45" pos:column="55">(<argument><expr><name pos:line="45" pos:column="56">multi<pos:position pos:line="45" pos:column="61"/></name></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="45" pos:column="63"/></expr_stmt>

  <comment type="block" pos:line="47" pos:column="3">/* ignoring the return code isn't nice, but atm we can't really handle
     a failure here, room for future improvement! */</comment>
  <expr_stmt><expr><operator pos:line="49" pos:column="3">(<pos:position pos:line="49" pos:column="4"/></operator><name pos:line="49" pos:column="4">void<pos:position pos:line="49" pos:column="8"/></name><operator pos:line="49" pos:column="8">)<pos:position pos:line="49" pos:column="9"/></operator><call><name pos:line="49" pos:column="9">curl_multi_remove_handle<pos:position pos:line="49" pos:column="33"/></name><argument_list pos:line="49" pos:column="33">(<argument><expr><name pos:line="49" pos:column="34">multi<pos:position pos:line="49" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="41">data<pos:position pos:line="49" pos:column="45"/></name></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="47"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="51" pos:column="3">sigpipe_restore<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><operator pos:line="51" pos:column="19">&amp;<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="20">pipe_st<pos:position pos:line="51" pos:column="27"/></name></expr></argument>)<pos:position pos:line="51" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="53" pos:column="3">/* The multi handle is kept alive, owned by the easy handle */</comment>
  <return pos:line="54" pos:column="3">return <expr><name pos:line="54" pos:column="10">result<pos:position pos:line="54" pos:column="16"/></name></expr>;<pos:position pos:line="54" pos:column="17"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
