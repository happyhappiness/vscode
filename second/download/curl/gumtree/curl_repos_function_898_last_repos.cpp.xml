<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_898_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<cpp:endif pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">endif<pos:position pos:line="2" pos:column="7"/></cpp:directive></cpp:endif>
<type><name pos:line="3" pos:column="1">void<pos:position pos:line="3" pos:column="5"/></name></type> <name pos:line="3" pos:column="6">parse_cert_parameter<pos:position pos:line="3" pos:column="26"/></name><parameter_list pos:line="3" pos:column="26">(<parameter><decl><type><specifier pos:line="3" pos:column="27">const<pos:position pos:line="3" pos:column="32"/></specifier> <name pos:line="3" pos:column="33">char<pos:position pos:line="3" pos:column="37"/></name> <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type><name pos:line="3" pos:column="39">cert_parameter<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="4" pos:column="27">char<pos:position pos:line="4" pos:column="31"/></name> <modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier><modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">certname<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="5" pos:column="27">char<pos:position pos:line="5" pos:column="31"/></name> <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier><modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">passphrase<pos:position pos:line="5" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="45"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">param_length<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><call><name pos:line="7" pos:column="25">strlen<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">cert_parameter<pos:position pos:line="7" pos:column="46"/></name></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">span<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">param_place<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><name pos:line="9" pos:column="29">NULL<pos:position pos:line="9" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">certname_place<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><name pos:line="10" pos:column="26">NULL<pos:position pos:line="10" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="11" pos:column="3">*<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">certname<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name pos:line="11" pos:column="15">NULL<pos:position pos:line="11" pos:column="19"/></name></expr>;<pos:position pos:line="11" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="12" pos:column="3">*<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">passphrase<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">NULL<pos:position pos:line="12" pos:column="21"/></name></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* most trivial assumption: cert_parameter is empty */</comment>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name pos:line="15" pos:column="6">param_length<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">==<pos:position pos:line="15" pos:column="21"/></operator> <literal type="number" pos:line="15" pos:column="22">0<pos:position pos:line="15" pos:column="23"/></literal></expr>)<pos:position pos:line="15" pos:column="24"/></condition><then pos:line="15" pos:column="24">
    <block type="pseudo"><return pos:line="16" pos:column="5">return;<pos:position pos:line="16" pos:column="12"/></return></block></then></if>

  <comment type="block" pos:line="18" pos:column="3">/* next less trivial: cert_parameter starts 'pkcs11:' and thus
   * looks like a RFC7512 PKCS#11 URI which can be used as-is.
   * Also if cert_parameter contains no colon nor backslash, this
   * means no passphrase was given and no characters escaped */</comment>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><operator pos:line="22" pos:column="6">!<pos:position pos:line="22" pos:column="7"/></operator><call><name pos:line="22" pos:column="7">strncmp<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">cert_parameter<pos:position pos:line="22" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="31">"pkcs11:"<pos:position pos:line="22" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="42">7<pos:position pos:line="22" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call> <operator pos:line="22" pos:column="45">||<pos:position pos:line="22" pos:column="47"/></operator>
     <operator pos:line="23" pos:column="6">!<pos:position pos:line="23" pos:column="7"/></operator><call><name pos:line="23" pos:column="7">strpbrk<pos:position pos:line="23" pos:column="14"/></name><argument_list pos:line="23" pos:column="14">(<argument><expr><name pos:line="23" pos:column="15">cert_parameter<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="31">":\\"<pos:position pos:line="23" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="38"/></condition><then pos:line="23" pos:column="38"> <block pos:line="23" pos:column="39">{
    <expr_stmt><expr><operator pos:line="24" pos:column="5">*<pos:position pos:line="24" pos:column="6"/></operator><name pos:line="24" pos:column="6">certname<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <call><name pos:line="24" pos:column="17">strdup<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">cert_parameter<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
    <return pos:line="25" pos:column="5">return;<pos:position pos:line="25" pos:column="12"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="27" pos:column="3">/* deal with escaped chars; find unescaped colon if it exists */</comment>
  <expr_stmt><expr><name pos:line="28" pos:column="3">certname_place<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <call><name pos:line="28" pos:column="20">malloc<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">param_length<pos:position pos:line="28" pos:column="39"/></name> <operator pos:line="28" pos:column="40">+<pos:position pos:line="28" pos:column="41"/></operator> <literal type="number" pos:line="28" pos:column="42">1<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><operator pos:line="29" pos:column="6">!<pos:position pos:line="29" pos:column="7"/></operator><name pos:line="29" pos:column="7">certname_place<pos:position pos:line="29" pos:column="21"/></name></expr>)<pos:position pos:line="29" pos:column="22"/></condition><then pos:line="29" pos:column="22">
    <block type="pseudo"><return pos:line="30" pos:column="5">return;<pos:position pos:line="30" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><operator pos:line="32" pos:column="3">*<pos:position pos:line="32" pos:column="4"/></operator><name pos:line="32" pos:column="4">certname<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">certname_place<pos:position pos:line="32" pos:column="29"/></name></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="33" pos:column="3">param_place<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <name pos:line="33" pos:column="17">cert_parameter<pos:position pos:line="33" pos:column="31"/></name></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
  <while pos:line="34" pos:column="3">while<condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">*<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">param_place<pos:position pos:line="34" pos:column="21"/></name></expr>)<pos:position pos:line="34" pos:column="22"/></condition> <block pos:line="34" pos:column="23">{
    <expr_stmt><expr><name pos:line="35" pos:column="5">span<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">strcspn<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name pos:line="35" pos:column="20">param_place<pos:position pos:line="35" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="33">":\\"<pos:position pos:line="35" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">strncpy<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">certname_place<pos:position pos:line="36" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="29">param_place<pos:position pos:line="36" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="42">span<pos:position pos:line="36" pos:column="46"/></name></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">param_place<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">+=<pos:position pos:line="37" pos:column="19"/></operator> <name pos:line="37" pos:column="20">span<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="38" pos:column="5">certname_place<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">+=<pos:position pos:line="38" pos:column="22"/></operator> <name pos:line="38" pos:column="23">span<pos:position pos:line="38" pos:column="27"/></name></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt>
    <comment type="block" pos:line="39" pos:column="5">/* we just ate all the non-special chars. now we're on either a special
     * char or the end of the string. */</comment>
    <switch pos:line="41" pos:column="5">switch<condition pos:line="41" pos:column="11">(<expr><operator pos:line="41" pos:column="12">*<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">param_place<pos:position pos:line="41" pos:column="24"/></name></expr>)<pos:position pos:line="41" pos:column="25"/></condition> <block pos:line="41" pos:column="26">{
    <case pos:line="42" pos:column="5">case <expr><literal type="char" pos:line="42" pos:column="10">'\0'<pos:position pos:line="42" pos:column="14"/></literal></expr>:<pos:position pos:line="42" pos:column="15"/></case>
      <break pos:line="43" pos:column="7">break;<pos:position pos:line="43" pos:column="13"/></break>
    <case pos:line="44" pos:column="5">case <expr><literal type="char" pos:line="44" pos:column="10">'\\'<pos:position pos:line="44" pos:column="14"/></literal></expr>:<pos:position pos:line="44" pos:column="15"/></case>
      <expr_stmt><expr><name pos:line="45" pos:column="7">param_place<pos:position pos:line="45" pos:column="18"/></name><operator pos:line="45" pos:column="18">++<pos:position pos:line="45" pos:column="20"/></operator></expr>;<pos:position pos:line="45" pos:column="21"/></expr_stmt>
      <switch pos:line="46" pos:column="7">switch<condition pos:line="46" pos:column="13">(<expr><operator pos:line="46" pos:column="14">*<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">param_place<pos:position pos:line="46" pos:column="26"/></name></expr>)<pos:position pos:line="46" pos:column="27"/></condition> <block pos:line="46" pos:column="28">{
        <case pos:line="47" pos:column="9">case <expr><literal type="char" pos:line="47" pos:column="14">'\0'<pos:position pos:line="47" pos:column="18"/></literal></expr>:<pos:position pos:line="47" pos:column="19"/></case>
          <expr_stmt><expr><operator pos:line="48" pos:column="11">*<pos:position pos:line="48" pos:column="12"/></operator><name pos:line="48" pos:column="12">certname_place<pos:position pos:line="48" pos:column="26"/></name><operator pos:line="48" pos:column="26">++<pos:position pos:line="48" pos:column="28"/></operator> <operator pos:line="48" pos:column="29">=<pos:position pos:line="48" pos:column="30"/></operator> <literal type="char" pos:line="48" pos:column="31">'\\'<pos:position pos:line="48" pos:column="35"/></literal></expr>;<pos:position pos:line="48" pos:column="36"/></expr_stmt>
          <break pos:line="49" pos:column="11">break;<pos:position pos:line="49" pos:column="17"/></break>
        <case pos:line="50" pos:column="9">case <expr><literal type="char" pos:line="50" pos:column="14">'\\'<pos:position pos:line="50" pos:column="18"/></literal></expr>:<pos:position pos:line="50" pos:column="19"/></case>
          <expr_stmt><expr><operator pos:line="51" pos:column="11">*<pos:position pos:line="51" pos:column="12"/></operator><name pos:line="51" pos:column="12">certname_place<pos:position pos:line="51" pos:column="26"/></name><operator pos:line="51" pos:column="26">++<pos:position pos:line="51" pos:column="28"/></operator> <operator pos:line="51" pos:column="29">=<pos:position pos:line="51" pos:column="30"/></operator> <literal type="char" pos:line="51" pos:column="31">'\\'<pos:position pos:line="51" pos:column="35"/></literal></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
          <expr_stmt><expr><name pos:line="52" pos:column="11">param_place<pos:position pos:line="52" pos:column="22"/></name><operator pos:line="52" pos:column="22">++<pos:position pos:line="52" pos:column="24"/></operator></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt>
          <break pos:line="53" pos:column="11">break;<pos:position pos:line="53" pos:column="17"/></break>
        <case pos:line="54" pos:column="9">case <expr><literal type="char" pos:line="54" pos:column="14">':'<pos:position pos:line="54" pos:column="17"/></literal></expr>:<pos:position pos:line="54" pos:column="18"/></case>
          <expr_stmt><expr><operator pos:line="55" pos:column="11">*<pos:position pos:line="55" pos:column="12"/></operator><name pos:line="55" pos:column="12">certname_place<pos:position pos:line="55" pos:column="26"/></name><operator pos:line="55" pos:column="26">++<pos:position pos:line="55" pos:column="28"/></operator> <operator pos:line="55" pos:column="29">=<pos:position pos:line="55" pos:column="30"/></operator> <literal type="char" pos:line="55" pos:column="31">':'<pos:position pos:line="55" pos:column="34"/></literal></expr>;<pos:position pos:line="55" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><name pos:line="56" pos:column="11">param_place<pos:position pos:line="56" pos:column="22"/></name><operator pos:line="56" pos:column="22">++<pos:position pos:line="56" pos:column="24"/></operator></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
          <break pos:line="57" pos:column="11">break;<pos:position pos:line="57" pos:column="17"/></break>
        <default pos:line="58" pos:column="9">default:<pos:position pos:line="58" pos:column="17"/></default>
          <expr_stmt><expr><operator pos:line="59" pos:column="11">*<pos:position pos:line="59" pos:column="12"/></operator><name pos:line="59" pos:column="12">certname_place<pos:position pos:line="59" pos:column="26"/></name><operator pos:line="59" pos:column="26">++<pos:position pos:line="59" pos:column="28"/></operator> <operator pos:line="59" pos:column="29">=<pos:position pos:line="59" pos:column="30"/></operator> <literal type="char" pos:line="59" pos:column="31">'\\'<pos:position pos:line="59" pos:column="35"/></literal></expr>;<pos:position pos:line="59" pos:column="36"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="60" pos:column="11">*<pos:position pos:line="60" pos:column="12"/></operator><name pos:line="60" pos:column="12">certname_place<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">++<pos:position pos:line="60" pos:column="28"/></operator> <operator pos:line="60" pos:column="29">=<pos:position pos:line="60" pos:column="30"/></operator> <operator pos:line="60" pos:column="31">*<pos:position pos:line="60" pos:column="32"/></operator><name pos:line="60" pos:column="32">param_place<pos:position pos:line="60" pos:column="43"/></name></expr>;<pos:position pos:line="60" pos:column="44"/></expr_stmt>
          <expr_stmt><expr><name pos:line="61" pos:column="11">param_place<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">++<pos:position pos:line="61" pos:column="24"/></operator></expr>;<pos:position pos:line="61" pos:column="25"/></expr_stmt>
          <break pos:line="62" pos:column="11">break;<pos:position pos:line="62" pos:column="17"/></break>
      }<pos:position pos:line="63" pos:column="8"/></block></switch>
      <break pos:line="64" pos:column="7">break;<pos:position pos:line="64" pos:column="13"/></break>
    <case pos:line="65" pos:column="5">case <expr><literal type="char" pos:line="65" pos:column="10">':'<pos:position pos:line="65" pos:column="13"/></literal></expr>:<pos:position pos:line="65" pos:column="14"/></case>
      <comment type="block" pos:line="66" pos:column="7">/* Since we live in a world of weirdness and confusion, the win32
         dudes can use : when using drive letters and thus c:\file:password
         needs to work. In order not to break compatibility, we still use : as
         separator, but we try to detect when it is used for a file name! On
         windows. */</comment>
<cpp:ifdef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifdef<pos:position pos:line="71" pos:column="7"/></cpp:directive> <name pos:line="71" pos:column="8">WIN32<pos:position pos:line="71" pos:column="13"/></name></cpp:ifdef>
      <if pos:line="72" pos:column="7">if<condition pos:line="72" pos:column="9">(<expr><name pos:line="72" pos:column="10">param_place<pos:position pos:line="72" pos:column="21"/></name> <operator pos:line="72" pos:column="22">&amp;&amp;<pos:position pos:line="72" pos:column="32"/></operator>
          <operator pos:line="73" pos:column="11">(<pos:position pos:line="73" pos:column="12"/></operator><name pos:line="73" pos:column="12">param_place<pos:position pos:line="73" pos:column="23"/></name> <operator pos:line="73" pos:column="24">==<pos:position pos:line="73" pos:column="26"/></operator> <operator pos:line="73" pos:column="27">&amp;<pos:position pos:line="73" pos:column="32"/></operator><name><name pos:line="73" pos:column="28">cert_parameter<pos:position pos:line="73" pos:column="42"/></name><index pos:line="73" pos:column="42">[<expr><literal type="number" pos:line="73" pos:column="43">1<pos:position pos:line="73" pos:column="44"/></literal></expr>]<pos:position pos:line="73" pos:column="45"/></index></name><operator pos:line="73" pos:column="45">)<pos:position pos:line="73" pos:column="46"/></operator> <operator pos:line="73" pos:column="47">&amp;&amp;<pos:position pos:line="73" pos:column="57"/></operator>
          <operator pos:line="74" pos:column="11">(<pos:position pos:line="74" pos:column="12"/></operator><name><name pos:line="74" pos:column="12">cert_parameter<pos:position pos:line="74" pos:column="26"/></name><index pos:line="74" pos:column="26">[<expr><literal type="number" pos:line="74" pos:column="27">2<pos:position pos:line="74" pos:column="28"/></literal></expr>]<pos:position pos:line="74" pos:column="29"/></index></name> <operator pos:line="74" pos:column="30">==<pos:position pos:line="74" pos:column="32"/></operator> <literal type="char" pos:line="74" pos:column="33">'\\'<pos:position pos:line="74" pos:column="37"/></literal> <operator pos:line="74" pos:column="38">||<pos:position pos:line="74" pos:column="40"/></operator> <name><name pos:line="74" pos:column="41">cert_parameter<pos:position pos:line="74" pos:column="55"/></name><index pos:line="74" pos:column="55">[<expr><literal type="number" pos:line="74" pos:column="56">2<pos:position pos:line="74" pos:column="57"/></literal></expr>]<pos:position pos:line="74" pos:column="58"/></index></name> <operator pos:line="74" pos:column="59">==<pos:position pos:line="74" pos:column="61"/></operator> <literal type="char" pos:line="74" pos:column="62">'/'<pos:position pos:line="74" pos:column="65"/></literal><operator pos:line="74" pos:column="65">)<pos:position pos:line="74" pos:column="66"/></operator> <operator pos:line="74" pos:column="67">&amp;&amp;<pos:position pos:line="74" pos:column="77"/></operator>
          <operator pos:line="75" pos:column="11">(<pos:position pos:line="75" pos:column="12"/></operator><call><name pos:line="75" pos:column="12">ISALPHA<pos:position pos:line="75" pos:column="19"/></name><argument_list pos:line="75" pos:column="19">(<argument><expr><name><name pos:line="75" pos:column="20">cert_parameter<pos:position pos:line="75" pos:column="34"/></name><index pos:line="75" pos:column="34">[<expr><literal type="number" pos:line="75" pos:column="35">0<pos:position pos:line="75" pos:column="36"/></literal></expr>]<pos:position pos:line="75" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="75" pos:column="38"/></argument_list></call><operator pos:line="75" pos:column="38">)<pos:position pos:line="75" pos:column="39"/></operator></expr> )<pos:position pos:line="75" pos:column="41"/></condition><then pos:line="75" pos:column="41"> <block pos:line="75" pos:column="42">{
        <comment type="block" pos:line="76" pos:column="9">/* colon in the second column, followed by a backslash, and the
           first character is an alphabetic letter:

           this is a drive letter colon */</comment>
        <expr_stmt><expr><operator pos:line="80" pos:column="9">*<pos:position pos:line="80" pos:column="10"/></operator><name pos:line="80" pos:column="10">certname_place<pos:position pos:line="80" pos:column="24"/></name><operator pos:line="80" pos:column="24">++<pos:position pos:line="80" pos:column="26"/></operator> <operator pos:line="80" pos:column="27">=<pos:position pos:line="80" pos:column="28"/></operator> <literal type="char" pos:line="80" pos:column="29">':'<pos:position pos:line="80" pos:column="32"/></literal></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="81" pos:column="9">param_place<pos:position pos:line="81" pos:column="20"/></name><operator pos:line="81" pos:column="20">++<pos:position pos:line="81" pos:column="22"/></operator></expr>;<pos:position pos:line="81" pos:column="23"/></expr_stmt>
        <break pos:line="82" pos:column="9">break;<pos:position pos:line="82" pos:column="15"/></break>
      }<pos:position pos:line="83" pos:column="8"/></block></then></if>
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>
      <comment type="block" pos:line="85" pos:column="7">/* escaped colons and Windows drive letter colons were handled
       * above; if we're still here, this is a separating colon */</comment>
      <expr_stmt><expr><name pos:line="87" pos:column="7">param_place<pos:position pos:line="87" pos:column="18"/></name><operator pos:line="87" pos:column="18">++<pos:position pos:line="87" pos:column="20"/></operator></expr>;<pos:position pos:line="87" pos:column="21"/></expr_stmt>
      <if pos:line="88" pos:column="7">if<condition pos:line="88" pos:column="9">(<expr><call><name pos:line="88" pos:column="10">strlen<pos:position pos:line="88" pos:column="16"/></name><argument_list pos:line="88" pos:column="16">(<argument><expr><name pos:line="88" pos:column="17">param_place<pos:position pos:line="88" pos:column="28"/></name></expr></argument>)<pos:position pos:line="88" pos:column="29"/></argument_list></call> <operator pos:line="88" pos:column="30">&gt;<pos:position pos:line="88" pos:column="34"/></operator> <literal type="number" pos:line="88" pos:column="32">0<pos:position pos:line="88" pos:column="33"/></literal></expr>)<pos:position pos:line="88" pos:column="34"/></condition><then pos:line="88" pos:column="34"> <block pos:line="88" pos:column="35">{
        <expr_stmt><expr><operator pos:line="89" pos:column="9">*<pos:position pos:line="89" pos:column="10"/></operator><name pos:line="89" pos:column="10">passphrase<pos:position pos:line="89" pos:column="20"/></name> <operator pos:line="89" pos:column="21">=<pos:position pos:line="89" pos:column="22"/></operator> <call><name pos:line="89" pos:column="23">strdup<pos:position pos:line="89" pos:column="29"/></name><argument_list pos:line="89" pos:column="29">(<argument><expr><name pos:line="89" pos:column="30">param_place<pos:position pos:line="89" pos:column="41"/></name></expr></argument>)<pos:position pos:line="89" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="43"/></expr_stmt>
      }<pos:position pos:line="90" pos:column="8"/></block></then></if>
      <goto pos:line="91" pos:column="7">goto <name pos:line="91" pos:column="12">done<pos:position pos:line="91" pos:column="16"/></name>;<pos:position pos:line="91" pos:column="17"/></goto>
    }<pos:position pos:line="92" pos:column="6"/></block></switch>
  }<pos:position pos:line="93" pos:column="4"/></block></while>
<label><name pos:line="94" pos:column="1">done<pos:position pos:line="94" pos:column="5"/></name>:<pos:position pos:line="94" pos:column="6"/></label>
  <expr_stmt><expr><operator pos:line="95" pos:column="3">*<pos:position pos:line="95" pos:column="4"/></operator><name pos:line="95" pos:column="4">certname_place<pos:position pos:line="95" pos:column="18"/></name> <operator pos:line="95" pos:column="19">=<pos:position pos:line="95" pos:column="20"/></operator> <literal type="char" pos:line="95" pos:column="21">'\0'<pos:position pos:line="95" pos:column="25"/></literal></expr>;<pos:position pos:line="95" pos:column="26"/></expr_stmt>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
