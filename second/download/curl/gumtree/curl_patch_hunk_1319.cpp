 "          If this option is used serveral times, the last one\n"
 "          will be used.\n"
 "\n"
 "     -f/--fail\n"
 "          (HTTP) Fail silently (no output at all) on server\n"
 "          errors. This is mostly done like this to better enable\n"
+);
+ puts(
 "          scripts etc to better deal with failed attempts. In\n"
 "          normal cases when a HTTP server fails to deliver a doc­\n"
 "          ument, it returns a HTML document stating so (which\n"
 "          often also describes why and more). This flag will pre­\n"
 "          vent curl from outputting that and fail silently\n"
 "          instead.\n"
 "\n"
 "          If this option is used twice, the second will again\n"
 "          disable silent failure.\n"
 "\n"
 "     -F/--form <name=content>\n"
+);
+ puts(
 "          (HTTP) This lets curl emulate a filled in form in which\n"
 "          a user has pressed the submit button. This causes curl\n"
 "          to POST data using the content-type multipart/form-data\n"
 "          according to RFC1867. This enables uploading of binary\n"
 "          files etc. To force the 'content' part to be be a file,\n"
 "          prefix the file name with an @ sign. To just get the\n"
 "          content part from a file, prefix the file name with the\n"
-"          letter <. The difference between @ and < is then that @\n"
-"          makes a file get attached in the post as a file upload,\n"
 );
  puts(
+"          letter <. The difference between @ and < is then that @\n"
+"          makes a file get attached in the post as a file upload,\n"
 "          while the < makes a text field and just get the con­\n"
 "          tents for that text field from a file.\n"
-"\n"
 "          Example, to send your password file to the server,\n"
 "          where input:\n"
 "\n"
 "          curl -F password=@/etc/passwd www.mypasswords.com\n"
 "\n"
 "          To read the file's content from stdin insted of a file,\n"
+);
+ puts(
 "          use - where the file name should've been. This goes for\n"
 "          both @ and < constructs.\n"
 "\n"
 "          This option can be used multiple times.\n"
 "\n"
 "     -g/--globoff\n"
 "          This option switches off the \"URL globbing parser\".\n"
 "          When you set this option, you can specify URLs that\n"
 "          contain the letters {}[] without having them being\n"
 "          interpreted by curl itself. Note that these letters are\n"
 "          not normal legal URL contents but they should be\n"
+);
+ puts(
 "          encoded according to the URI standard. (Option added in\n"
 "          curl 7.6)\n"
 "\n"
 "     -h/--help\n"
 "          Usage help.\n"
 "\n"
 "     -H/--header <header>\n"
 "          (HTTP) Extra header to use when getting a web page. You\n"
 "          may specify any number of extra headers. Note that if\n"
 "          you should add a custom header that has the same name\n"
 "          as one of the internal ones curl would use, your exter­\n"
 "          nally set header will be used instead of the internal\n"
+);
+ puts(
 "          one. This allows you to make even trickier stuff than\n"
 "          curl would normally do. You should not replace inter­\n"
 "          nally set headers without knowing perfectly well what\n"
 "          you're doing. Replacing an internal header with one\n"
 "          without content on the right side of the colon will\n"
 "          prevent that header from appearing.\n"
 "\n"
 "          This option can be used multiple times.\n"
 "\n"
 "     -i/--include\n"
 "          (HTTP) Include the HTTP-header in the output. The HTTP-\n"
+);
+ puts(
 "          header includes things like server-name, date of the\n"
 "          document, HTTP-version and more...\n"
 "\n"
 "          If this option is used twice, the second will again\n"
 "          disable header include.\n"
 "\n"
 "     --interface <name>\n"
 "          Perform an operation using a specified interface. You\n"
 "          can enter interface name, IP address or host name. An\n"
 "          example could look like:\n"
 "\n"
 "          curl --interface eth0:1 http://www.netscape.com/\n"
-"\n"
+);
+ puts(
 "          If this option is used serveral times, the last one\n"
 "          will be used.\n"
 "\n"
 "     -I/--head\n"
 "          (HTTP/FTP) Fetch the HTTP-header only! HTTP-servers\n"
 "          feature the command HEAD which this uses to get nothing\n"
