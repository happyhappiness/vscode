<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1174_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">imap_state_listsearch_resp<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">connectdata<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">conn<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
                                           <parameter><decl><type><name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">imapcode<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>,
                                           <parameter><decl><type><name pos:line="3" pos:column="44">imapstate<pos:position pos:line="3" pos:column="53"/></name></type> <name pos:line="3" pos:column="54">instate<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="62"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURLE_OK<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">line<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><name><name pos:line="6" pos:column="16">conn<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">-&gt;<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="22">data<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">-&gt;<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="28">state<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">.<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="34">buffer<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">len<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><call><name pos:line="7" pos:column="16">strlen<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">line<pos:position pos:line="7" pos:column="27"/></name></expr></argument>)<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="9" pos:column="3">(<pos:position pos:line="9" pos:column="4"/></operator><name pos:line="9" pos:column="4">void<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">)<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">instate<pos:position pos:line="9" pos:column="16"/></name></expr>;<pos:position pos:line="9" pos:column="17"/></expr_stmt> <comment type="block" pos:line="9" pos:column="18">/* No use for this yet */</comment>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">imapcode<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">==<pos:position pos:line="11" pos:column="17"/></operator> <literal type="char" pos:line="11" pos:column="18">'*'<pos:position pos:line="11" pos:column="21"/></literal></expr>)<pos:position pos:line="11" pos:column="22"/></condition><then pos:line="11" pos:column="22"> <block pos:line="11" pos:column="23">{
    <comment type="block" pos:line="12" pos:column="5">/* Temporarily add the LF character back and send as body to the client */</comment>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">line<pos:position pos:line="13" pos:column="9"/></name><index pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">len<pos:position pos:line="13" pos:column="13"/></name></expr>]<pos:position pos:line="13" pos:column="14"/></index></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <literal type="char" pos:line="13" pos:column="17">'\n'<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">result<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <call><name pos:line="14" pos:column="14">Curl_client_write<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><name pos:line="14" pos:column="32">conn<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">CLIENTWRITE_BODY<pos:position pos:line="14" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="56">line<pos:position pos:line="14" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="62">len<pos:position pos:line="14" pos:column="65"/></name> <operator pos:line="14" pos:column="66">+<pos:position pos:line="14" pos:column="67"/></operator> <literal type="number" pos:line="14" pos:column="68">1<pos:position pos:line="14" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">line<pos:position pos:line="15" pos:column="9"/></name><index pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">len<pos:position pos:line="15" pos:column="13"/></name></expr>]<pos:position pos:line="15" pos:column="14"/></index></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="char" pos:line="15" pos:column="17">'\0'<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then>
  <elseif pos:line="17" pos:column="3">else <if pos:line="17" pos:column="8">if<condition pos:line="17" pos:column="10">(<expr><name pos:line="17" pos:column="11">imapcode<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">!=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">IMAP_RESP_OK<pos:position pos:line="17" pos:column="35"/></name></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="5">result<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <name pos:line="18" pos:column="14">CURLE_QUOTE_ERROR<pos:position pos:line="18" pos:column="31"/></name></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt></block></then></if></elseif> <comment type="block" pos:line="18" pos:column="33">/* TODO: Fix error code */</comment>
  <else pos:line="19" pos:column="3">else
    <comment type="block" pos:line="20" pos:column="5">/* End of DO phase */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="5">state<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><name pos:line="21" pos:column="11">conn<pos:position pos:line="21" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="17">IMAP_STOP<pos:position pos:line="21" pos:column="26"/></name></expr></argument>)<pos:position pos:line="21" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt></block></else></if>

  <return pos:line="23" pos:column="3">return <expr><name pos:line="23" pos:column="10">result<pos:position pos:line="23" pos:column="16"/></name></expr>;<pos:position pos:line="23" pos:column="17"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
