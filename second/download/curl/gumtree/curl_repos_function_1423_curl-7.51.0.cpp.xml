<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1423_curl-7.51.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">resolve_server<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">Curl_easy<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">data<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                               <parameter><decl><type><name><name pos:line="2" pos:column="32">struct<pos:position pos:line="2" pos:column="38"/></name> <name pos:line="2" pos:column="39">connectdata<pos:position pos:line="2" pos:column="50"/></name></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">conn<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="3" pos:column="32">bool<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">async<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="44"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name><init pos:line="5" pos:column="18">=<expr><name pos:line="5" pos:column="19">CURLE_OK<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">long<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">timeout_ms<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><call><name pos:line="6" pos:column="21">Curl_timeleft<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">data<pos:position pos:line="6" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="41">NULL<pos:position pos:line="6" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="47">TRUE<pos:position pos:line="6" pos:column="51"/></name></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="53"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="8" pos:column="3">/*************************************************************
   * Resolve the name of the server or proxy
   *************************************************************/</comment>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name><name pos:line="11" pos:column="6">conn<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">bits<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">reuse<pos:position pos:line="11" pos:column="22"/></name></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23">
    <comment type="block" pos:line="12" pos:column="5">/* We're reusing the connection - no need to resolve anything, and
       fix_hostname() was called already in create_conn() for the re-use
       case. */</comment>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="15" pos:column="5">*<pos:position pos:line="15" pos:column="6"/></operator><name pos:line="15" pos:column="6">async<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name pos:line="15" pos:column="14">FALSE<pos:position pos:line="15" pos:column="19"/></name></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt></block></then>

  <else pos:line="17" pos:column="3">else <block pos:line="17" pos:column="8">{
    <comment type="block" pos:line="18" pos:column="5">/* this is a fresh connect */</comment>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">rc<pos:position pos:line="19" pos:column="11"/></name></decl>;<pos:position pos:line="19" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="20" pos:column="5">struct<pos:position pos:line="20" pos:column="11"/></name> <name pos:line="20" pos:column="12">Curl_dns_entry<pos:position pos:line="20" pos:column="26"/></name></name> <modifier pos:line="20" pos:column="27">*<pos:position pos:line="20" pos:column="28"/></modifier></type><name pos:line="20" pos:column="28">hostaddr<pos:position pos:line="20" pos:column="36"/></name></decl>;<pos:position pos:line="20" pos:column="37"/></decl_stmt>

<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">USE_UNIX_SOCKETS<pos:position pos:line="22" pos:column="24"/></name></cpp:ifdef>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><name><name pos:line="23" pos:column="8">data<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">set<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">.<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">str<pos:position pos:line="23" pos:column="21"/></name><index pos:line="23" pos:column="21">[<expr><name pos:line="23" pos:column="22">STRING_UNIX_SOCKET_PATH<pos:position pos:line="23" pos:column="45"/></name></expr>]<pos:position pos:line="23" pos:column="46"/></index></name></expr>)<pos:position pos:line="23" pos:column="47"/></condition><then pos:line="23" pos:column="47"> <block pos:line="23" pos:column="48">{
      <comment type="block" pos:line="24" pos:column="7">/* Unix domain sockets are local. The host gets ignored, just use the
       * specified domain socket address. Do not cache "DNS entries". There is
       * no DNS involved and we already have the filesystem path available */</comment>
      <decl_stmt><decl><type><specifier pos:line="27" pos:column="7">const<pos:position pos:line="27" pos:column="12"/></specifier> <name pos:line="27" pos:column="13">char<pos:position pos:line="27" pos:column="17"/></name> <modifier pos:line="27" pos:column="18">*<pos:position pos:line="27" pos:column="19"/></modifier></type><name pos:line="27" pos:column="19">path<pos:position pos:line="27" pos:column="23"/></name> <init pos:line="27" pos:column="24">= <expr><name><name pos:line="27" pos:column="26">data<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">-&gt;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="32">set<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">.<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="36">str<pos:position pos:line="27" pos:column="39"/></name><index pos:line="27" pos:column="39">[<expr><name pos:line="27" pos:column="40">STRING_UNIX_SOCKET_PATH<pos:position pos:line="27" pos:column="63"/></name></expr>]<pos:position pos:line="27" pos:column="64"/></index></name></expr></init></decl>;<pos:position pos:line="27" pos:column="65"/></decl_stmt>

      <expr_stmt><expr><name pos:line="29" pos:column="7">hostaddr<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <call><name pos:line="29" pos:column="18">calloc<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><literal type="number" pos:line="29" pos:column="25">1<pos:position pos:line="29" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="28">sizeof<argument_list pos:line="29" pos:column="34">(<argument><expr pos:line="29" pos:column="35">struct <name pos:line="29" pos:column="42">Curl_dns_entry<pos:position pos:line="29" pos:column="56"/></name></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>
      <if pos:line="30" pos:column="7">if<condition pos:line="30" pos:column="9">(<expr><operator pos:line="30" pos:column="10">!<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">hostaddr<pos:position pos:line="30" pos:column="19"/></name></expr>)<pos:position pos:line="30" pos:column="20"/></condition><then pos:line="30" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="9">result<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <name pos:line="31" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="31" pos:column="37"/></name></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt></block></then>
      <elseif pos:line="32" pos:column="7">else <if pos:line="32" pos:column="12">if<condition pos:line="32" pos:column="14">(<expr><operator pos:line="32" pos:column="15">(<pos:position pos:line="32" pos:column="16"/></operator><name><name pos:line="32" pos:column="16">hostaddr<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">-&gt;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="26">addr<pos:position pos:line="32" pos:column="30"/></name></name> <operator pos:line="32" pos:column="31">=<pos:position pos:line="32" pos:column="32"/></operator> <call><name pos:line="32" pos:column="33">Curl_unix2addr<pos:position pos:line="32" pos:column="47"/></name><argument_list pos:line="32" pos:column="47">(<argument><expr><name pos:line="32" pos:column="48">path<pos:position pos:line="32" pos:column="52"/></name></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call><operator pos:line="32" pos:column="53">)<pos:position pos:line="32" pos:column="54"/></operator> <operator pos:line="32" pos:column="55">!=<pos:position pos:line="32" pos:column="57"/></operator> <name pos:line="32" pos:column="58">NULL<pos:position pos:line="32" pos:column="62"/></name></expr>)<pos:position pos:line="32" pos:column="63"/></condition><then pos:line="32" pos:column="63">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="9">hostaddr<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">inuse<pos:position pos:line="33" pos:column="24"/></name></name><operator pos:line="33" pos:column="24">++<pos:position pos:line="33" pos:column="26"/></operator></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt></block></then></if></elseif>
      <else pos:line="34" pos:column="7">else <block pos:line="34" pos:column="12">{
        <comment type="block" pos:line="35" pos:column="9">/* Long paths are not supported for now */</comment>
        <if pos:line="36" pos:column="9">if<condition pos:line="36" pos:column="11">(<expr><call><name pos:line="36" pos:column="12">strlen<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><name pos:line="36" pos:column="19">path<pos:position pos:line="36" pos:column="23"/></name></expr></argument>)<pos:position pos:line="36" pos:column="24"/></argument_list></call> <operator pos:line="36" pos:column="25">&gt;=<pos:position pos:line="36" pos:column="30"/></operator> <sizeof pos:line="36" pos:column="28">sizeof<argument_list pos:line="36" pos:column="34">(<argument><expr><operator pos:line="36" pos:column="35">(<pos:position pos:line="36" pos:column="36"/></operator><operator pos:line="36" pos:column="36">(<pos:position pos:line="36" pos:column="37"/></operator>struct <name pos:line="36" pos:column="44">sockaddr_un<pos:position pos:line="36" pos:column="55"/></name> <operator pos:line="36" pos:column="56">*<pos:position pos:line="36" pos:column="57"/></operator><operator pos:line="36" pos:column="57">)<pos:position pos:line="36" pos:column="58"/></operator><literal type="number" pos:line="36" pos:column="58">0<pos:position pos:line="36" pos:column="59"/></literal><operator pos:line="36" pos:column="59">)<pos:position pos:line="36" pos:column="60"/></operator><operator pos:line="36" pos:column="60">-&gt;<pos:position pos:line="36" pos:column="65"/></operator><name pos:line="36" pos:column="62">sun_path<pos:position pos:line="36" pos:column="70"/></name></expr></argument>)<pos:position pos:line="36" pos:column="71"/></argument_list></sizeof></expr>)<pos:position pos:line="36" pos:column="72"/></condition><then pos:line="36" pos:column="72"> <block pos:line="36" pos:column="73">{
          <expr_stmt><expr><call><name pos:line="37" pos:column="11">failf<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><name pos:line="37" pos:column="17">data<pos:position pos:line="37" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="23">"Unix socket path too long: '%s'"<pos:position pos:line="37" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="58">path<pos:position pos:line="37" pos:column="62"/></name></expr></argument>)<pos:position pos:line="37" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="64"/></expr_stmt>
          <expr_stmt><expr><name pos:line="38" pos:column="11">result<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">=<pos:position pos:line="38" pos:column="19"/></operator> <name pos:line="38" pos:column="20">CURLE_COULDNT_RESOLVE_HOST<pos:position pos:line="38" pos:column="46"/></name></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="39" pos:column="10"/></block></then>
        <else pos:line="40" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="11">result<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <name pos:line="41" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="41" pos:column="39"/></name></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt></block></else></if>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">free<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><name pos:line="42" pos:column="14">hostaddr<pos:position pos:line="42" pos:column="22"/></name></expr></argument>)<pos:position pos:line="42" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="43" pos:column="9">hostaddr<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <name pos:line="43" pos:column="20">NULL<pos:position pos:line="43" pos:column="24"/></name></expr>;<pos:position pos:line="43" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="44" pos:column="8"/></block></else></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then>
    <elseif pos:line="46" pos:column="5">else
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><operator pos:line="48" pos:column="8">!<pos:position pos:line="48" pos:column="9"/></operator><name><name pos:line="48" pos:column="9">conn<pos:position pos:line="48" pos:column="13"/></name><operator pos:line="48" pos:column="13">-&gt;<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="15">proxy<pos:position pos:line="48" pos:column="20"/></name><operator pos:line="48" pos:column="20">.<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="21">name<pos:position pos:line="48" pos:column="25"/></name></name> <operator pos:line="48" pos:column="26">||<pos:position pos:line="48" pos:column="28"/></operator> <operator pos:line="48" pos:column="29">!<pos:position pos:line="48" pos:column="30"/></operator><operator pos:line="48" pos:column="30">*<pos:position pos:line="48" pos:column="31"/></operator><name><name pos:line="48" pos:column="31">conn<pos:position pos:line="48" pos:column="35"/></name><operator pos:line="48" pos:column="35">-&gt;<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="37">proxy<pos:position pos:line="48" pos:column="42"/></name><operator pos:line="48" pos:column="42">.<pos:position pos:line="48" pos:column="43"/></operator><name pos:line="48" pos:column="43">name<pos:position pos:line="48" pos:column="47"/></name></name></expr>)<pos:position pos:line="48" pos:column="48"/></condition><then pos:line="48" pos:column="48"> <block pos:line="48" pos:column="49">{
      <decl_stmt><decl><type><name><name pos:line="49" pos:column="7">struct<pos:position pos:line="49" pos:column="13"/></name> <name pos:line="49" pos:column="14">hostname<pos:position pos:line="49" pos:column="22"/></name></name> <modifier pos:line="49" pos:column="23">*<pos:position pos:line="49" pos:column="24"/></modifier></type><name pos:line="49" pos:column="24">connhost<pos:position pos:line="49" pos:column="32"/></name></decl>;<pos:position pos:line="49" pos:column="33"/></decl_stmt>
      <if pos:line="50" pos:column="7">if<condition pos:line="50" pos:column="9">(<expr><name><name pos:line="50" pos:column="10">conn<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">-&gt;<pos:position pos:line="50" pos:column="19"/></operator><name pos:line="50" pos:column="16">bits<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">.<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="21">conn_to_host<pos:position pos:line="50" pos:column="33"/></name></name></expr>)<pos:position pos:line="50" pos:column="34"/></condition><then pos:line="50" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="9">connhost<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator> <operator pos:line="51" pos:column="20">&amp;<pos:position pos:line="51" pos:column="25"/></operator><name><name pos:line="51" pos:column="21">conn<pos:position pos:line="51" pos:column="25"/></name><operator pos:line="51" pos:column="25">-&gt;<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="27">conn_to_host<pos:position pos:line="51" pos:column="39"/></name></name></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt></block></then>
      <else pos:line="52" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="9">connhost<pos:position pos:line="53" pos:column="17"/></name> <operator pos:line="53" pos:column="18">=<pos:position pos:line="53" pos:column="19"/></operator> <operator pos:line="53" pos:column="20">&amp;<pos:position pos:line="53" pos:column="25"/></operator><name><name pos:line="53" pos:column="21">conn<pos:position pos:line="53" pos:column="25"/></name><operator pos:line="53" pos:column="25">-&gt;<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="27">host<pos:position pos:line="53" pos:column="31"/></name></name></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt></block></else></if>

      <comment type="block" pos:line="55" pos:column="7">/* If not connecting via a proxy, extract the port from the URL, if it is
       * there, thus overriding any defaults that might have been set above. */</comment>
      <if pos:line="57" pos:column="7">if<condition pos:line="57" pos:column="9">(<expr><name><name pos:line="57" pos:column="10">conn<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">-&gt;<pos:position pos:line="57" pos:column="19"/></operator><name pos:line="57" pos:column="16">bits<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">.<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="21">conn_to_port<pos:position pos:line="57" pos:column="33"/></name></name></expr>)<pos:position pos:line="57" pos:column="34"/></condition><then pos:line="57" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="58" pos:column="9">conn<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">-&gt;<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="15">port<pos:position pos:line="58" pos:column="19"/></name></name> <operator pos:line="58" pos:column="20">=<pos:position pos:line="58" pos:column="21"/></operator> <name><name pos:line="58" pos:column="22">conn<pos:position pos:line="58" pos:column="26"/></name><operator pos:line="58" pos:column="26">-&gt;<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="28">conn_to_port<pos:position pos:line="58" pos:column="40"/></name></name></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt></block></then>
      <else pos:line="59" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="60" pos:column="9">conn<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">-&gt;<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="15">port<pos:position pos:line="60" pos:column="19"/></name></name> <operator pos:line="60" pos:column="20">=<pos:position pos:line="60" pos:column="21"/></operator> <name><name pos:line="60" pos:column="22">conn<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">-&gt;<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="28">remote_port<pos:position pos:line="60" pos:column="39"/></name></name></expr>;<pos:position pos:line="60" pos:column="40"/></expr_stmt></block></else></if> <comment type="block" pos:line="60" pos:column="41">/* it is the same port */</comment>

      <comment type="block" pos:line="62" pos:column="7">/* Resolve target host right on */</comment>
      <expr_stmt><expr><name pos:line="63" pos:column="7">rc<pos:position pos:line="63" pos:column="9"/></name> <operator pos:line="63" pos:column="10">=<pos:position pos:line="63" pos:column="11"/></operator> <call><name pos:line="63" pos:column="12">Curl_resolv_timeout<pos:position pos:line="63" pos:column="31"/></name><argument_list pos:line="63" pos:column="31">(<argument><expr><name pos:line="63" pos:column="32">conn<pos:position pos:line="63" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="38">connhost<pos:position pos:line="63" pos:column="46"/></name><operator pos:line="63" pos:column="46">-&gt;<pos:position pos:line="63" pos:column="51"/></operator><name pos:line="63" pos:column="48">name<pos:position pos:line="63" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="54">(<pos:position pos:line="63" pos:column="55"/></operator><name pos:line="63" pos:column="55">int<pos:position pos:line="63" pos:column="58"/></name><operator pos:line="63" pos:column="58">)<pos:position pos:line="63" pos:column="59"/></operator><name><name pos:line="63" pos:column="59">conn<pos:position pos:line="63" pos:column="63"/></name><operator pos:line="63" pos:column="63">-&gt;<pos:position pos:line="63" pos:column="68"/></operator><name pos:line="63" pos:column="65">port<pos:position pos:line="63" pos:column="69"/></name></name></expr></argument>,
                               <argument><expr><operator pos:line="64" pos:column="32">&amp;<pos:position pos:line="64" pos:column="37"/></operator><name pos:line="64" pos:column="33">hostaddr<pos:position pos:line="64" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="43">timeout_ms<pos:position pos:line="64" pos:column="53"/></name></expr></argument>)<pos:position pos:line="64" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="55"/></expr_stmt>
      <if pos:line="65" pos:column="7">if<condition pos:line="65" pos:column="9">(<expr><name pos:line="65" pos:column="10">rc<pos:position pos:line="65" pos:column="12"/></name> <operator pos:line="65" pos:column="13">==<pos:position pos:line="65" pos:column="15"/></operator> <name pos:line="65" pos:column="16">CURLRESOLV_PENDING<pos:position pos:line="65" pos:column="34"/></name></expr>)<pos:position pos:line="65" pos:column="35"/></condition><then pos:line="65" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="66" pos:column="9">*<pos:position pos:line="66" pos:column="10"/></operator><name pos:line="66" pos:column="10">async<pos:position pos:line="66" pos:column="15"/></name> <operator pos:line="66" pos:column="16">=<pos:position pos:line="66" pos:column="17"/></operator> <name pos:line="66" pos:column="18">TRUE<pos:position pos:line="66" pos:column="22"/></name></expr>;<pos:position pos:line="66" pos:column="23"/></expr_stmt></block></then>

      <elseif pos:line="68" pos:column="7">else <if pos:line="68" pos:column="12">if<condition pos:line="68" pos:column="14">(<expr><name pos:line="68" pos:column="15">rc<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">==<pos:position pos:line="68" pos:column="20"/></operator> <name pos:line="68" pos:column="21">CURLRESOLV_TIMEDOUT<pos:position pos:line="68" pos:column="40"/></name></expr>)<pos:position pos:line="68" pos:column="41"/></condition><then pos:line="68" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="9">result<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <name pos:line="69" pos:column="18">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="69" pos:column="42"/></name></expr>;<pos:position pos:line="69" pos:column="43"/></expr_stmt></block></then></if></elseif>

      <elseif pos:line="71" pos:column="7">else <if pos:line="71" pos:column="12">if<condition pos:line="71" pos:column="14">(<expr><operator pos:line="71" pos:column="15">!<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="16">hostaddr<pos:position pos:line="71" pos:column="24"/></name></expr>)<pos:position pos:line="71" pos:column="25"/></condition><then pos:line="71" pos:column="25"> <block pos:line="71" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">failf<pos:position pos:line="72" pos:column="14"/></name><argument_list pos:line="72" pos:column="14">(<argument><expr><name pos:line="72" pos:column="15">data<pos:position pos:line="72" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="21">"Couldn't resolve host '%s'"<pos:position pos:line="72" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="51">connhost<pos:position pos:line="72" pos:column="59"/></name><operator pos:line="72" pos:column="59">-&gt;<pos:position pos:line="72" pos:column="64"/></operator><name pos:line="72" pos:column="61">dispname<pos:position pos:line="72" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><name pos:line="73" pos:column="9">result<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator>  <name pos:line="73" pos:column="19">CURLE_COULDNT_RESOLVE_HOST<pos:position pos:line="73" pos:column="45"/></name></expr>;<pos:position pos:line="73" pos:column="46"/></expr_stmt>
        <comment type="block" pos:line="74" pos:column="9">/* don't return yet, we need to clean up the timeout first */</comment>
      }<pos:position pos:line="75" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if></elseif>
    <else pos:line="77" pos:column="5">else <block pos:line="77" pos:column="10">{
      <comment type="block" pos:line="78" pos:column="7">/* This is a proxy that hasn't been resolved yet. */</comment>

      <comment type="block" pos:line="80" pos:column="7">/* resolve proxy */</comment>
      <expr_stmt><expr><name pos:line="81" pos:column="7">rc<pos:position pos:line="81" pos:column="9"/></name> <operator pos:line="81" pos:column="10">=<pos:position pos:line="81" pos:column="11"/></operator> <call><name pos:line="81" pos:column="12">Curl_resolv_timeout<pos:position pos:line="81" pos:column="31"/></name><argument_list pos:line="81" pos:column="31">(<argument><expr><name pos:line="81" pos:column="32">conn<pos:position pos:line="81" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="38">conn<pos:position pos:line="81" pos:column="42"/></name><operator pos:line="81" pos:column="42">-&gt;<pos:position pos:line="81" pos:column="47"/></operator><name pos:line="81" pos:column="44">proxy<pos:position pos:line="81" pos:column="49"/></name><operator pos:line="81" pos:column="49">.<pos:position pos:line="81" pos:column="50"/></operator><name pos:line="81" pos:column="50">name<pos:position pos:line="81" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="56">(<pos:position pos:line="81" pos:column="57"/></operator><name pos:line="81" pos:column="57">int<pos:position pos:line="81" pos:column="60"/></name><operator pos:line="81" pos:column="60">)<pos:position pos:line="81" pos:column="61"/></operator><name><name pos:line="81" pos:column="61">conn<pos:position pos:line="81" pos:column="65"/></name><operator pos:line="81" pos:column="65">-&gt;<pos:position pos:line="81" pos:column="70"/></operator><name pos:line="81" pos:column="67">port<pos:position pos:line="81" pos:column="71"/></name></name></expr></argument>,
                               <argument><expr><operator pos:line="82" pos:column="32">&amp;<pos:position pos:line="82" pos:column="37"/></operator><name pos:line="82" pos:column="33">hostaddr<pos:position pos:line="82" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="43">timeout_ms<pos:position pos:line="82" pos:column="53"/></name></expr></argument>)<pos:position pos:line="82" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="55"/></expr_stmt>

      <if pos:line="84" pos:column="7">if<condition pos:line="84" pos:column="9">(<expr><name pos:line="84" pos:column="10">rc<pos:position pos:line="84" pos:column="12"/></name> <operator pos:line="84" pos:column="13">==<pos:position pos:line="84" pos:column="15"/></operator> <name pos:line="84" pos:column="16">CURLRESOLV_PENDING<pos:position pos:line="84" pos:column="34"/></name></expr>)<pos:position pos:line="84" pos:column="35"/></condition><then pos:line="84" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="85" pos:column="9">*<pos:position pos:line="85" pos:column="10"/></operator><name pos:line="85" pos:column="10">async<pos:position pos:line="85" pos:column="15"/></name> <operator pos:line="85" pos:column="16">=<pos:position pos:line="85" pos:column="17"/></operator> <name pos:line="85" pos:column="18">TRUE<pos:position pos:line="85" pos:column="22"/></name></expr>;<pos:position pos:line="85" pos:column="23"/></expr_stmt></block></then>

      <elseif pos:line="87" pos:column="7">else <if pos:line="87" pos:column="12">if<condition pos:line="87" pos:column="14">(<expr><name pos:line="87" pos:column="15">rc<pos:position pos:line="87" pos:column="17"/></name> <operator pos:line="87" pos:column="18">==<pos:position pos:line="87" pos:column="20"/></operator> <name pos:line="87" pos:column="21">CURLRESOLV_TIMEDOUT<pos:position pos:line="87" pos:column="40"/></name></expr>)<pos:position pos:line="87" pos:column="41"/></condition><then pos:line="87" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><name pos:line="88" pos:column="9">result<pos:position pos:line="88" pos:column="15"/></name> <operator pos:line="88" pos:column="16">=<pos:position pos:line="88" pos:column="17"/></operator> <name pos:line="88" pos:column="18">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="88" pos:column="42"/></name></expr>;<pos:position pos:line="88" pos:column="43"/></expr_stmt></block></then></if></elseif>

      <elseif pos:line="90" pos:column="7">else <if pos:line="90" pos:column="12">if<condition pos:line="90" pos:column="14">(<expr><operator pos:line="90" pos:column="15">!<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="16">hostaddr<pos:position pos:line="90" pos:column="24"/></name></expr>)<pos:position pos:line="90" pos:column="25"/></condition><then pos:line="90" pos:column="25"> <block pos:line="90" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">failf<pos:position pos:line="91" pos:column="14"/></name><argument_list pos:line="91" pos:column="14">(<argument><expr><name pos:line="91" pos:column="15">data<pos:position pos:line="91" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="21">"Couldn't resolve proxy '%s'"<pos:position pos:line="91" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="52">conn<pos:position pos:line="91" pos:column="56"/></name><operator pos:line="91" pos:column="56">-&gt;<pos:position pos:line="91" pos:column="61"/></operator><name pos:line="91" pos:column="58">proxy<pos:position pos:line="91" pos:column="63"/></name><operator pos:line="91" pos:column="63">.<pos:position pos:line="91" pos:column="64"/></operator><name pos:line="91" pos:column="64">dispname<pos:position pos:line="91" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name pos:line="92" pos:column="9">result<pos:position pos:line="92" pos:column="15"/></name> <operator pos:line="92" pos:column="16">=<pos:position pos:line="92" pos:column="17"/></operator> <name pos:line="92" pos:column="18">CURLE_COULDNT_RESOLVE_PROXY<pos:position pos:line="92" pos:column="45"/></name></expr>;<pos:position pos:line="92" pos:column="46"/></expr_stmt>
        <comment type="block" pos:line="93" pos:column="9">/* don't return yet, we need to clean up the timeout first */</comment>
      }<pos:position pos:line="94" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="95" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">DEBUGASSERT<pos:position pos:line="96" pos:column="16"/></name><argument_list pos:line="96" pos:column="16">(<argument><expr><name><name pos:line="96" pos:column="17">conn<pos:position pos:line="96" pos:column="21"/></name><operator pos:line="96" pos:column="21">-&gt;<pos:position pos:line="96" pos:column="26"/></operator><name pos:line="96" pos:column="23">dns_entry<pos:position pos:line="96" pos:column="32"/></name></name> <operator pos:line="96" pos:column="33">==<pos:position pos:line="96" pos:column="35"/></operator> <name pos:line="96" pos:column="36">NULL<pos:position pos:line="96" pos:column="40"/></name></expr></argument>)<pos:position pos:line="96" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="97" pos:column="5">conn<pos:position pos:line="97" pos:column="9"/></name><operator pos:line="97" pos:column="9">-&gt;<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="11">dns_entry<pos:position pos:line="97" pos:column="20"/></name></name> <operator pos:line="97" pos:column="21">=<pos:position pos:line="97" pos:column="22"/></operator> <name pos:line="97" pos:column="23">hostaddr<pos:position pos:line="97" pos:column="31"/></name></expr>;<pos:position pos:line="97" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="98" pos:column="4"/></block></else></if>

  <return pos:line="100" pos:column="3">return <expr><name pos:line="100" pos:column="10">result<pos:position pos:line="100" pos:column="16"/></name></expr>;<pos:position pos:line="100" pos:column="17"/></return>
}<pos:position pos:line="101" pos:column="2"/></block></function></unit>
