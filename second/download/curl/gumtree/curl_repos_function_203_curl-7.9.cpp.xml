<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_203_curl-7.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">Curl_ftpsendf<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">fd<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">connectdata<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">conn<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">fmt<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="2" pos:column="39">...<pos:position pos:line="2" pos:column="42"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">bytes_written<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">s<pos:position pos:line="5" pos:column="9"/></name><index pos:line="5" pos:column="9">[<expr><literal type="number" pos:line="5" pos:column="10">256<pos:position pos:line="5" pos:column="13"/></literal></expr>]<pos:position pos:line="5" pos:column="14"/></index></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">va_list<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">ap<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">va_start<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">ap<pos:position pos:line="8" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="16">fmt<pos:position pos:line="8" pos:column="19"/></name></expr></argument>)<pos:position pos:line="8" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">vsnprintf<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">s<pos:position pos:line="9" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">250<pos:position pos:line="9" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="21">fmt<pos:position pos:line="9" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="26">ap<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">va_end<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><name pos:line="10" pos:column="10">ap<pos:position pos:line="10" pos:column="12"/></name></expr></argument>)<pos:position pos:line="10" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="14"/></expr_stmt>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name><name pos:line="12" pos:column="6">conn<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">data<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">set<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">.<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">verbose<pos:position pos:line="12" pos:column="29"/></name></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="5">fprintf<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name><name pos:line="13" pos:column="13">conn<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">data<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">-&gt;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="25">set<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">.<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">err<pos:position pos:line="13" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="34">"&gt; %s\n"<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="44">s<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">strcat<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name pos:line="15" pos:column="10">s<pos:position pos:line="15" pos:column="11"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="13">"\r\n"<pos:position pos:line="15" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt> <comment type="block" pos:line="15" pos:column="22">/* append a trailing CRLF */</comment>

  <expr_stmt><expr><name pos:line="17" pos:column="3">bytes_written<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator><literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">Curl_write<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><name pos:line="18" pos:column="14">conn<pos:position pos:line="18" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="20">fd<pos:position pos:line="18" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="24">s<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="27">strlen<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">s<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="18" pos:column="38">&amp;<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="39">bytes_written<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt>

  <return pos:line="20" pos:column="3">return<expr><operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">bytes_written<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">)<pos:position pos:line="20" pos:column="24"/></operator></expr>;<pos:position pos:line="20" pos:column="25"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
