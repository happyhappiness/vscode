<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_851_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">Curl_base64_encode<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">SessionHandle<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">data<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
                          <parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">inp<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">size_t<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">insize<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">char<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier><modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">outptr<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">ibuf<pos:position pos:line="4" pos:column="21"/></name><index pos:line="4" pos:column="21">[<expr><literal type="number" pos:line="4" pos:column="22">3<pos:position pos:line="4" pos:column="23"/></literal></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name></type> <name><name pos:line="5" pos:column="17">obuf<pos:position pos:line="5" pos:column="21"/></name><index pos:line="5" pos:column="21">[<expr><literal type="number" pos:line="5" pos:column="22">4<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name></decl>;<pos:position pos:line="6" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">inputparts<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">output<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">base64data<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="10" pos:column="29"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">convbuf<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><name pos:line="11" pos:column="19">NULL<pos:position pos:line="11" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name pos:line="14" pos:column="3">char<pos:position pos:line="14" pos:column="7"/></name> <modifier pos:line="14" pos:column="8">*<pos:position pos:line="14" pos:column="9"/></modifier></type><name pos:line="14" pos:column="9">indata<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><operator pos:line="14" pos:column="18">(<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">char<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><operator pos:line="14" pos:column="25">)<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">inp<pos:position pos:line="14" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="30"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="16" pos:column="3">*<pos:position pos:line="16" pos:column="4"/></operator><name pos:line="16" pos:column="4">outptr<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="13">NULL<pos:position pos:line="16" pos:column="17"/></name></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt> <comment type="block" pos:line="16" pos:column="19">/* set to NULL in case of failure before we reach the end */</comment>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><literal type="number" pos:line="18" pos:column="6">0<pos:position pos:line="18" pos:column="7"/></literal> <operator pos:line="18" pos:column="8">==<pos:position pos:line="18" pos:column="10"/></operator> <name pos:line="18" pos:column="11">insize<pos:position pos:line="18" pos:column="17"/></name></expr>)<pos:position pos:line="18" pos:column="18"/></condition><then pos:line="18" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="5">insize<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">strlen<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">indata<pos:position pos:line="19" pos:column="27"/></name></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">base64data<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <name pos:line="21" pos:column="16">output<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">char<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">*<pos:position pos:line="21" pos:column="31"/></operator><operator pos:line="21" pos:column="31">)<pos:position pos:line="21" pos:column="32"/></operator><call><name pos:line="21" pos:column="32">malloc<pos:position pos:line="21" pos:column="38"/></name><argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">insize<pos:position pos:line="21" pos:column="45"/></name><operator pos:line="21" pos:column="45">*<pos:position pos:line="21" pos:column="46"/></operator><literal type="number" pos:line="21" pos:column="46">4<pos:position pos:line="21" pos:column="47"/></literal><operator pos:line="21" pos:column="47">/<pos:position pos:line="21" pos:column="48"/></operator><literal type="number" pos:line="21" pos:column="48">3<pos:position pos:line="21" pos:column="49"/></literal><operator pos:line="21" pos:column="49">+<pos:position pos:line="21" pos:column="50"/></operator><literal type="number" pos:line="21" pos:column="50">4<pos:position pos:line="21" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">NULL<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">==<pos:position pos:line="22" pos:column="13"/></operator> <name pos:line="22" pos:column="14">output<pos:position pos:line="22" pos:column="20"/></name></expr>)<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21">
    <block type="pseudo"><return pos:line="23" pos:column="5">return <expr><literal type="number" pos:line="23" pos:column="12">0<pos:position pos:line="23" pos:column="13"/></literal></expr>;<pos:position pos:line="23" pos:column="14"/></return></block></then></if>

<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="25" pos:column="29"/></name></cpp:ifdef>
  <comment type="block" pos:line="26" pos:column="3">/*
   * The base64 data needs to be created using the network encoding
   * not the host encoding.  And we can't change the actual input
   * so we copy it to a buffer, translate it, and use that instead.
   */</comment>
  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name pos:line="31" pos:column="6">data<pos:position pos:line="31" pos:column="10"/></name></expr>)<pos:position pos:line="31" pos:column="11"/></condition><then pos:line="31" pos:column="11"> <block pos:line="31" pos:column="12">{
    <expr_stmt><expr><name pos:line="32" pos:column="5">convbuf<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <operator pos:line="32" pos:column="15">(<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">char<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">*<pos:position pos:line="32" pos:column="21"/></operator><operator pos:line="32" pos:column="21">)<pos:position pos:line="32" pos:column="22"/></operator><call><name pos:line="32" pos:column="22">malloc<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name pos:line="32" pos:column="29">insize<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><operator pos:line="33" pos:column="8">!<pos:position pos:line="33" pos:column="9"/></operator><name pos:line="33" pos:column="9">convbuf<pos:position pos:line="33" pos:column="16"/></name></expr>)<pos:position pos:line="33" pos:column="17"/></condition><then pos:line="33" pos:column="17"> <block pos:line="33" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">free<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><name pos:line="34" pos:column="12">output<pos:position pos:line="34" pos:column="18"/></name></expr></argument>)<pos:position pos:line="34" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="20"/></expr_stmt>
      <return pos:line="35" pos:column="7">return <expr><literal type="number" pos:line="35" pos:column="14">0<pos:position pos:line="35" pos:column="15"/></literal></expr>;<pos:position pos:line="35" pos:column="16"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">memcpy<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><name pos:line="37" pos:column="12">convbuf<pos:position pos:line="37" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="21">indata<pos:position pos:line="37" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="29">insize<pos:position pos:line="37" pos:column="35"/></name></expr></argument>)<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">CURLE_OK<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">!=<pos:position pos:line="38" pos:column="19"/></operator> <call><name pos:line="38" pos:column="20">Curl_convert_to_network<pos:position pos:line="38" pos:column="43"/></name><argument_list pos:line="38" pos:column="43">(<argument><expr><name pos:line="38" pos:column="44">data<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="50">convbuf<pos:position pos:line="38" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="59">insize<pos:position pos:line="38" pos:column="65"/></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="67"/></condition><then pos:line="38" pos:column="67"> <block pos:line="38" pos:column="68">{
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">free<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><name pos:line="39" pos:column="12">convbuf<pos:position pos:line="39" pos:column="19"/></name></expr></argument>)<pos:position pos:line="39" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">free<pos:position pos:line="40" pos:column="11"/></name><argument_list pos:line="40" pos:column="11">(<argument><expr><name pos:line="40" pos:column="12">output<pos:position pos:line="40" pos:column="18"/></name></expr></argument>)<pos:position pos:line="40" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="20"/></expr_stmt>
      <return pos:line="41" pos:column="7">return <expr><literal type="number" pos:line="41" pos:column="14">0<pos:position pos:line="41" pos:column="15"/></literal></expr>;<pos:position pos:line="41" pos:column="16"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="43" pos:column="5">indata<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <name pos:line="43" pos:column="14">convbuf<pos:position pos:line="43" pos:column="21"/></name></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt> <comment type="block" pos:line="43" pos:column="23">/* switch to the converted buffer */</comment>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>
<cpp:else pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">else<pos:position pos:line="45" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="46" pos:column="3">(<pos:position pos:line="46" pos:column="4"/></operator><name pos:line="46" pos:column="4">void<pos:position pos:line="46" pos:column="8"/></name><operator pos:line="46" pos:column="8">)<pos:position pos:line="46" pos:column="9"/></operator><name pos:line="46" pos:column="9">data<pos:position pos:line="46" pos:column="13"/></name></expr>;<pos:position pos:line="46" pos:column="14"/></expr_stmt>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>

  <while pos:line="49" pos:column="3">while<condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">insize<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">&gt;<pos:position pos:line="49" pos:column="20"/></operator> <literal type="number" pos:line="49" pos:column="18">0<pos:position pos:line="49" pos:column="19"/></literal></expr>)<pos:position pos:line="49" pos:column="20"/></condition> <block pos:line="49" pos:column="21">{
    <for pos:line="50" pos:column="5">for <control pos:line="50" pos:column="9">(<init><expr><name pos:line="50" pos:column="10">i<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <name pos:line="50" pos:column="14">inputparts<pos:position pos:line="50" pos:column="24"/></name> <operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator> <literal type="number" pos:line="50" pos:column="27">0<pos:position pos:line="50" pos:column="28"/></literal></expr>;<pos:position pos:line="50" pos:column="29"/></init> <condition><expr><name pos:line="50" pos:column="30">i<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">&lt;<pos:position pos:line="50" pos:column="36"/></operator> <literal type="number" pos:line="50" pos:column="34">3<pos:position pos:line="50" pos:column="35"/></literal></expr>;<pos:position pos:line="50" pos:column="36"/></condition> <incr><expr><name pos:line="50" pos:column="37">i<pos:position pos:line="50" pos:column="38"/></name><operator pos:line="50" pos:column="38">++<pos:position pos:line="50" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="50" pos:column="41"/></control> <block pos:line="50" pos:column="42">{
      <if pos:line="51" pos:column="7">if<condition pos:line="51" pos:column="9">(<expr><name pos:line="51" pos:column="10">insize<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">&gt;<pos:position pos:line="51" pos:column="21"/></operator> <literal type="number" pos:line="51" pos:column="19">0<pos:position pos:line="51" pos:column="20"/></literal></expr>)<pos:position pos:line="51" pos:column="21"/></condition><then pos:line="51" pos:column="21"> <block pos:line="51" pos:column="22">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">inputparts<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">++<pos:position pos:line="52" pos:column="21"/></operator></expr>;<pos:position pos:line="52" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="53" pos:column="9">ibuf<pos:position pos:line="53" pos:column="13"/></name><index pos:line="53" pos:column="13">[<expr><name pos:line="53" pos:column="14">i<pos:position pos:line="53" pos:column="15"/></name></expr>]<pos:position pos:line="53" pos:column="16"/></index></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <operator pos:line="53" pos:column="19">*<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="20">indata<pos:position pos:line="53" pos:column="26"/></name></expr>;<pos:position pos:line="53" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="54" pos:column="9">indata<pos:position pos:line="54" pos:column="15"/></name><operator pos:line="54" pos:column="15">++<pos:position pos:line="54" pos:column="17"/></operator></expr>;<pos:position pos:line="54" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="55" pos:column="9">insize<pos:position pos:line="55" pos:column="15"/></name><operator pos:line="55" pos:column="15">--<pos:position pos:line="55" pos:column="17"/></operator></expr>;<pos:position pos:line="55" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="56" pos:column="8"/></block></then>
      <else pos:line="57" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="58" pos:column="9">ibuf<pos:position pos:line="58" pos:column="13"/></name><index pos:line="58" pos:column="13">[<expr><name pos:line="58" pos:column="14">i<pos:position pos:line="58" pos:column="15"/></name></expr>]<pos:position pos:line="58" pos:column="16"/></index></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <literal type="number" pos:line="58" pos:column="19">0<pos:position pos:line="58" pos:column="20"/></literal></expr>;<pos:position pos:line="58" pos:column="21"/></expr_stmt></block></else></if>
    }<pos:position pos:line="59" pos:column="6"/></block></for>

    <expr_stmt><expr><name><name pos:line="61" pos:column="5">obuf<pos:position pos:line="61" pos:column="9"/></name><index pos:line="61" pos:column="9">[<expr><literal type="number" pos:line="61" pos:column="10">0<pos:position pos:line="61" pos:column="11"/></literal></expr>]<pos:position pos:line="61" pos:column="12"/></index></name> <operator pos:line="61" pos:column="13">=<pos:position pos:line="61" pos:column="14"/></operator> <call pos:line="61" pos:column="15">(<name pos:line="61" pos:column="16">unsigned<pos:position pos:line="61" pos:column="24"/></name> <name pos:line="61" pos:column="25">char<pos:position pos:line="61" pos:column="29"/></name>)  <argument_list pos:line="61" pos:column="32">(<argument><expr><operator pos:line="61" pos:column="33">(<pos:position pos:line="61" pos:column="34"/></operator><name><name pos:line="61" pos:column="34">ibuf<pos:position pos:line="61" pos:column="38"/></name><index pos:line="61" pos:column="38">[<expr><literal type="number" pos:line="61" pos:column="39">0<pos:position pos:line="61" pos:column="40"/></literal></expr>]<pos:position pos:line="61" pos:column="41"/></index></name> <operator pos:line="61" pos:column="42">&amp;<pos:position pos:line="61" pos:column="47"/></operator> <literal type="number" pos:line="61" pos:column="44">0xFC<pos:position pos:line="61" pos:column="48"/></literal><operator pos:line="61" pos:column="48">)<pos:position pos:line="61" pos:column="49"/></operator> <operator pos:line="61" pos:column="50">&gt;&gt;<pos:position pos:line="61" pos:column="55"/></operator> <literal type="number" pos:line="61" pos:column="53">2<pos:position pos:line="61" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">obuf<pos:position pos:line="62" pos:column="9"/></name><index pos:line="62" pos:column="9">[<expr><literal type="number" pos:line="62" pos:column="10">1<pos:position pos:line="62" pos:column="11"/></literal></expr>]<pos:position pos:line="62" pos:column="12"/></index></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <call pos:line="62" pos:column="15">(<name pos:line="62" pos:column="16">unsigned<pos:position pos:line="62" pos:column="24"/></name> <name pos:line="62" pos:column="25">char<pos:position pos:line="62" pos:column="29"/></name>) <argument_list pos:line="62" pos:column="31">(<argument><expr><operator pos:line="62" pos:column="32">(<pos:position pos:line="62" pos:column="33"/></operator><operator pos:line="62" pos:column="33">(<pos:position pos:line="62" pos:column="34"/></operator><name><name pos:line="62" pos:column="34">ibuf<pos:position pos:line="62" pos:column="38"/></name><index pos:line="62" pos:column="38">[<expr><literal type="number" pos:line="62" pos:column="39">0<pos:position pos:line="62" pos:column="40"/></literal></expr>]<pos:position pos:line="62" pos:column="41"/></index></name> <operator pos:line="62" pos:column="42">&amp;<pos:position pos:line="62" pos:column="47"/></operator> <literal type="number" pos:line="62" pos:column="44">0x03<pos:position pos:line="62" pos:column="48"/></literal><operator pos:line="62" pos:column="48">)<pos:position pos:line="62" pos:column="49"/></operator> <operator pos:line="62" pos:column="50">&lt;&lt;<pos:position pos:line="62" pos:column="58"/></operator> <literal type="number" pos:line="62" pos:column="53">4<pos:position pos:line="62" pos:column="54"/></literal><operator pos:line="62" pos:column="54">)<pos:position pos:line="62" pos:column="55"/></operator> <operator pos:line="62" pos:column="56">|<pos:position pos:line="62" pos:column="57"/></operator> \
                               <operator pos:line="63" pos:column="32">(<pos:position pos:line="63" pos:column="33"/></operator><operator pos:line="63" pos:column="33">(<pos:position pos:line="63" pos:column="34"/></operator><name><name pos:line="63" pos:column="34">ibuf<pos:position pos:line="63" pos:column="38"/></name><index pos:line="63" pos:column="38">[<expr><literal type="number" pos:line="63" pos:column="39">1<pos:position pos:line="63" pos:column="40"/></literal></expr>]<pos:position pos:line="63" pos:column="41"/></index></name> <operator pos:line="63" pos:column="42">&amp;<pos:position pos:line="63" pos:column="47"/></operator> <literal type="number" pos:line="63" pos:column="44">0xF0<pos:position pos:line="63" pos:column="48"/></literal><operator pos:line="63" pos:column="48">)<pos:position pos:line="63" pos:column="49"/></operator> <operator pos:line="63" pos:column="50">&gt;&gt;<pos:position pos:line="63" pos:column="55"/></operator> <literal type="number" pos:line="63" pos:column="53">4<pos:position pos:line="63" pos:column="54"/></literal><operator pos:line="63" pos:column="54">)<pos:position pos:line="63" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">obuf<pos:position pos:line="64" pos:column="9"/></name><index pos:line="64" pos:column="9">[<expr><literal type="number" pos:line="64" pos:column="10">2<pos:position pos:line="64" pos:column="11"/></literal></expr>]<pos:position pos:line="64" pos:column="12"/></index></name> <operator pos:line="64" pos:column="13">=<pos:position pos:line="64" pos:column="14"/></operator> <call pos:line="64" pos:column="15">(<name pos:line="64" pos:column="16">unsigned<pos:position pos:line="64" pos:column="24"/></name> <name pos:line="64" pos:column="25">char<pos:position pos:line="64" pos:column="29"/></name>) <argument_list pos:line="64" pos:column="31">(<argument><expr><operator pos:line="64" pos:column="32">(<pos:position pos:line="64" pos:column="33"/></operator><operator pos:line="64" pos:column="33">(<pos:position pos:line="64" pos:column="34"/></operator><name><name pos:line="64" pos:column="34">ibuf<pos:position pos:line="64" pos:column="38"/></name><index pos:line="64" pos:column="38">[<expr><literal type="number" pos:line="64" pos:column="39">1<pos:position pos:line="64" pos:column="40"/></literal></expr>]<pos:position pos:line="64" pos:column="41"/></index></name> <operator pos:line="64" pos:column="42">&amp;<pos:position pos:line="64" pos:column="47"/></operator> <literal type="number" pos:line="64" pos:column="44">0x0F<pos:position pos:line="64" pos:column="48"/></literal><operator pos:line="64" pos:column="48">)<pos:position pos:line="64" pos:column="49"/></operator> <operator pos:line="64" pos:column="50">&lt;&lt;<pos:position pos:line="64" pos:column="58"/></operator> <literal type="number" pos:line="64" pos:column="53">2<pos:position pos:line="64" pos:column="54"/></literal><operator pos:line="64" pos:column="54">)<pos:position pos:line="64" pos:column="55"/></operator> <operator pos:line="64" pos:column="56">|<pos:position pos:line="64" pos:column="57"/></operator> \
                               <operator pos:line="65" pos:column="32">(<pos:position pos:line="65" pos:column="33"/></operator><operator pos:line="65" pos:column="33">(<pos:position pos:line="65" pos:column="34"/></operator><name><name pos:line="65" pos:column="34">ibuf<pos:position pos:line="65" pos:column="38"/></name><index pos:line="65" pos:column="38">[<expr><literal type="number" pos:line="65" pos:column="39">2<pos:position pos:line="65" pos:column="40"/></literal></expr>]<pos:position pos:line="65" pos:column="41"/></index></name> <operator pos:line="65" pos:column="42">&amp;<pos:position pos:line="65" pos:column="47"/></operator> <literal type="number" pos:line="65" pos:column="44">0xC0<pos:position pos:line="65" pos:column="48"/></literal><operator pos:line="65" pos:column="48">)<pos:position pos:line="65" pos:column="49"/></operator> <operator pos:line="65" pos:column="50">&gt;&gt;<pos:position pos:line="65" pos:column="55"/></operator> <literal type="number" pos:line="65" pos:column="53">6<pos:position pos:line="65" pos:column="54"/></literal><operator pos:line="65" pos:column="54">)<pos:position pos:line="65" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="66" pos:column="5">obuf<pos:position pos:line="66" pos:column="9"/></name><index pos:line="66" pos:column="9">[<expr><literal type="number" pos:line="66" pos:column="10">3<pos:position pos:line="66" pos:column="11"/></literal></expr>]<pos:position pos:line="66" pos:column="12"/></index></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <call pos:line="66" pos:column="15">(<name pos:line="66" pos:column="16">unsigned<pos:position pos:line="66" pos:column="24"/></name> <name pos:line="66" pos:column="25">char<pos:position pos:line="66" pos:column="29"/></name>)   <argument_list pos:line="66" pos:column="33">(<argument><expr><name><name pos:line="66" pos:column="34">ibuf<pos:position pos:line="66" pos:column="38"/></name><index pos:line="66" pos:column="38">[<expr><literal type="number" pos:line="66" pos:column="39">2<pos:position pos:line="66" pos:column="40"/></literal></expr>]<pos:position pos:line="66" pos:column="41"/></index></name> <operator pos:line="66" pos:column="42">&amp;<pos:position pos:line="66" pos:column="47"/></operator> <literal type="number" pos:line="66" pos:column="44">0x3F<pos:position pos:line="66" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="50"/></expr_stmt>

    <switch pos:line="68" pos:column="5">switch<condition pos:line="68" pos:column="11">(<expr><name pos:line="68" pos:column="12">inputparts<pos:position pos:line="68" pos:column="22"/></name></expr>)<pos:position pos:line="68" pos:column="23"/></condition> <block pos:line="68" pos:column="24">{
    <case pos:line="69" pos:column="5">case <expr><literal type="number" pos:line="69" pos:column="10">1<pos:position pos:line="69" pos:column="11"/></literal></expr>:<pos:position pos:line="69" pos:column="12"/></case> <comment type="block" pos:line="69" pos:column="13">/* only one byte read */</comment>
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">snprintf<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><name pos:line="70" pos:column="16">output<pos:position pos:line="70" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="24">5<pos:position pos:line="70" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="27">"%c%c=="<pos:position pos:line="70" pos:column="35"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="71" pos:column="16">table64<pos:position pos:line="71" pos:column="23"/></name><index pos:line="71" pos:column="23">[<expr><name><name pos:line="71" pos:column="24">obuf<pos:position pos:line="71" pos:column="28"/></name><index pos:line="71" pos:column="28">[<expr><literal type="number" pos:line="71" pos:column="29">0<pos:position pos:line="71" pos:column="30"/></literal></expr>]<pos:position pos:line="71" pos:column="31"/></index></name></expr>]<pos:position pos:line="71" pos:column="32"/></index></name></expr></argument>,
               <argument><expr><name><name pos:line="72" pos:column="16">table64<pos:position pos:line="72" pos:column="23"/></name><index pos:line="72" pos:column="23">[<expr><name><name pos:line="72" pos:column="24">obuf<pos:position pos:line="72" pos:column="28"/></name><index pos:line="72" pos:column="28">[<expr><literal type="number" pos:line="72" pos:column="29">1<pos:position pos:line="72" pos:column="30"/></literal></expr>]<pos:position pos:line="72" pos:column="31"/></index></name></expr>]<pos:position pos:line="72" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="72" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="34"/></expr_stmt>
      <break pos:line="73" pos:column="7">break;<pos:position pos:line="73" pos:column="13"/></break>
    <case pos:line="74" pos:column="5">case <expr><literal type="number" pos:line="74" pos:column="10">2<pos:position pos:line="74" pos:column="11"/></literal></expr>:<pos:position pos:line="74" pos:column="12"/></case> <comment type="block" pos:line="74" pos:column="13">/* two bytes read */</comment>
      <expr_stmt><expr><call><name pos:line="75" pos:column="7">snprintf<pos:position pos:line="75" pos:column="15"/></name><argument_list pos:line="75" pos:column="15">(<argument><expr><name pos:line="75" pos:column="16">output<pos:position pos:line="75" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="24">5<pos:position pos:line="75" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="27">"%c%c%c="<pos:position pos:line="75" pos:column="36"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="76" pos:column="16">table64<pos:position pos:line="76" pos:column="23"/></name><index pos:line="76" pos:column="23">[<expr><name><name pos:line="76" pos:column="24">obuf<pos:position pos:line="76" pos:column="28"/></name><index pos:line="76" pos:column="28">[<expr><literal type="number" pos:line="76" pos:column="29">0<pos:position pos:line="76" pos:column="30"/></literal></expr>]<pos:position pos:line="76" pos:column="31"/></index></name></expr>]<pos:position pos:line="76" pos:column="32"/></index></name></expr></argument>,
               <argument><expr><name><name pos:line="77" pos:column="16">table64<pos:position pos:line="77" pos:column="23"/></name><index pos:line="77" pos:column="23">[<expr><name><name pos:line="77" pos:column="24">obuf<pos:position pos:line="77" pos:column="28"/></name><index pos:line="77" pos:column="28">[<expr><literal type="number" pos:line="77" pos:column="29">1<pos:position pos:line="77" pos:column="30"/></literal></expr>]<pos:position pos:line="77" pos:column="31"/></index></name></expr>]<pos:position pos:line="77" pos:column="32"/></index></name></expr></argument>,
               <argument><expr><name><name pos:line="78" pos:column="16">table64<pos:position pos:line="78" pos:column="23"/></name><index pos:line="78" pos:column="23">[<expr><name><name pos:line="78" pos:column="24">obuf<pos:position pos:line="78" pos:column="28"/></name><index pos:line="78" pos:column="28">[<expr><literal type="number" pos:line="78" pos:column="29">2<pos:position pos:line="78" pos:column="30"/></literal></expr>]<pos:position pos:line="78" pos:column="31"/></index></name></expr>]<pos:position pos:line="78" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="78" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="34"/></expr_stmt>
      <break pos:line="79" pos:column="7">break;<pos:position pos:line="79" pos:column="13"/></break>
    <default pos:line="80" pos:column="5">default:<pos:position pos:line="80" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="81" pos:column="7">snprintf<pos:position pos:line="81" pos:column="15"/></name><argument_list pos:line="81" pos:column="15">(<argument><expr><name pos:line="81" pos:column="16">output<pos:position pos:line="81" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="24">5<pos:position pos:line="81" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="27">"%c%c%c%c"<pos:position pos:line="81" pos:column="37"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="82" pos:column="16">table64<pos:position pos:line="82" pos:column="23"/></name><index pos:line="82" pos:column="23">[<expr><name><name pos:line="82" pos:column="24">obuf<pos:position pos:line="82" pos:column="28"/></name><index pos:line="82" pos:column="28">[<expr><literal type="number" pos:line="82" pos:column="29">0<pos:position pos:line="82" pos:column="30"/></literal></expr>]<pos:position pos:line="82" pos:column="31"/></index></name></expr>]<pos:position pos:line="82" pos:column="32"/></index></name></expr></argument>,
               <argument><expr><name><name pos:line="83" pos:column="16">table64<pos:position pos:line="83" pos:column="23"/></name><index pos:line="83" pos:column="23">[<expr><name><name pos:line="83" pos:column="24">obuf<pos:position pos:line="83" pos:column="28"/></name><index pos:line="83" pos:column="28">[<expr><literal type="number" pos:line="83" pos:column="29">1<pos:position pos:line="83" pos:column="30"/></literal></expr>]<pos:position pos:line="83" pos:column="31"/></index></name></expr>]<pos:position pos:line="83" pos:column="32"/></index></name></expr></argument>,
               <argument><expr><name><name pos:line="84" pos:column="16">table64<pos:position pos:line="84" pos:column="23"/></name><index pos:line="84" pos:column="23">[<expr><name><name pos:line="84" pos:column="24">obuf<pos:position pos:line="84" pos:column="28"/></name><index pos:line="84" pos:column="28">[<expr><literal type="number" pos:line="84" pos:column="29">2<pos:position pos:line="84" pos:column="30"/></literal></expr>]<pos:position pos:line="84" pos:column="31"/></index></name></expr>]<pos:position pos:line="84" pos:column="32"/></index></name></expr></argument>,
               <argument><expr><name><name pos:line="85" pos:column="16">table64<pos:position pos:line="85" pos:column="23"/></name><index pos:line="85" pos:column="23">[<expr><name><name pos:line="85" pos:column="24">obuf<pos:position pos:line="85" pos:column="28"/></name><index pos:line="85" pos:column="28">[<expr><literal type="number" pos:line="85" pos:column="29">3<pos:position pos:line="85" pos:column="30"/></literal></expr>]<pos:position pos:line="85" pos:column="31"/></index></name></expr>]<pos:position pos:line="85" pos:column="32"/></index></name></expr></argument> )<pos:position pos:line="85" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="35"/></expr_stmt>
      <break pos:line="86" pos:column="7">break;<pos:position pos:line="86" pos:column="13"/></break>
    }<pos:position pos:line="87" pos:column="6"/></block></switch>
    <expr_stmt><expr><name pos:line="88" pos:column="5">output<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">+=<pos:position pos:line="88" pos:column="14"/></operator> <literal type="number" pos:line="88" pos:column="15">4<pos:position pos:line="88" pos:column="16"/></literal></expr>;<pos:position pos:line="88" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="89" pos:column="4"/></block></while>
  <expr_stmt><expr><operator pos:line="90" pos:column="3">*<pos:position pos:line="90" pos:column="4"/></operator><name pos:line="90" pos:column="4">output<pos:position pos:line="90" pos:column="10"/></name><operator pos:line="90" pos:column="10">=<pos:position pos:line="90" pos:column="11"/></operator><literal type="number" pos:line="90" pos:column="11">0<pos:position pos:line="90" pos:column="12"/></literal></expr>;<pos:position pos:line="90" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="91" pos:column="3">*<pos:position pos:line="91" pos:column="4"/></operator><name pos:line="91" pos:column="4">outptr<pos:position pos:line="91" pos:column="10"/></name> <operator pos:line="91" pos:column="11">=<pos:position pos:line="91" pos:column="12"/></operator> <name pos:line="91" pos:column="13">base64data<pos:position pos:line="91" pos:column="23"/></name></expr>;<pos:position pos:line="91" pos:column="24"/></expr_stmt> <comment type="block" pos:line="91" pos:column="25">/* make it return the actual data memory */</comment>

<cpp:ifdef pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">ifdef<pos:position pos:line="93" pos:column="7"/></cpp:directive> <name pos:line="93" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="93" pos:column="29"/></name></cpp:ifdef>
  <if pos:line="94" pos:column="3">if<condition pos:line="94" pos:column="5">(<expr><name pos:line="94" pos:column="6">data<pos:position pos:line="94" pos:column="10"/></name></expr>)<pos:position pos:line="94" pos:column="11"/></condition><then pos:line="94" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="5">free<pos:position pos:line="95" pos:column="9"/></name><argument_list pos:line="95" pos:column="9">(<argument><expr><name pos:line="95" pos:column="10">convbuf<pos:position pos:line="95" pos:column="17"/></name></expr></argument>)<pos:position pos:line="95" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="19"/></expr_stmt></block></then></if>
<cpp:endif pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">endif<pos:position pos:line="96" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="97" pos:column="3">return <expr><call><name pos:line="97" pos:column="10">strlen<pos:position pos:line="97" pos:column="16"/></name><argument_list pos:line="97" pos:column="16">(<argument><expr><name pos:line="97" pos:column="17">base64data<pos:position pos:line="97" pos:column="27"/></name></expr></argument>)<pos:position pos:line="97" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="29"/></return> <comment type="block" pos:line="97" pos:column="30">/* return the length of the new data */</comment>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
