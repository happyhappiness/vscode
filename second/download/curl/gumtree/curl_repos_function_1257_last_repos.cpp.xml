<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1257_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_dorealloc<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">ptr<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">size_t<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">wantedsize<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">line<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">source<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">memdebug<pos:position pos:line="4" pos:column="18"/></name></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">mem<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name pos:line="4" pos:column="26">NULL<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">size<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><sizeof pos:line="6" pos:column="17">sizeof<argument_list pos:line="6" pos:column="23">(<argument><expr pos:line="6" pos:column="24">struct <name pos:line="6" pos:column="31">memdebug<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></sizeof> <operator pos:line="6" pos:column="41">+<pos:position pos:line="6" pos:column="42"/></operator> <name pos:line="6" pos:column="43">wantedsize<pos:position pos:line="6" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">DEBUGASSERT<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">wantedsize<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">!=<pos:position pos:line="8" pos:column="28"/></operator> <literal type="number" pos:line="8" pos:column="29">0<pos:position pos:line="8" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><call><name pos:line="10" pos:column="6">countcheck<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><literal type="string" pos:line="10" pos:column="17">"realloc"<pos:position pos:line="10" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="28">line<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">source<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="42"/></condition><then pos:line="10" pos:column="42">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></return></block></then></if>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">__INTEL_COMPILER<pos:position pos:line="13" pos:column="24"/></name></cpp:ifdef>
<cpp:pragma pos:line="14" pos:column="1">#  <cpp:directive pos:line="14" pos:column="4">pragma<pos:position pos:line="14" pos:column="10"/></cpp:directive> <name pos:line="14" pos:column="11">warning<pos:position pos:line="14" pos:column="18"/></name><name pos:line="14" pos:column="18">(<pos:position pos:line="14" pos:column="19"/></name><name pos:line="14" pos:column="19">push<pos:position pos:line="14" pos:column="23"/></name><name pos:line="14" pos:column="23">)<pos:position pos:line="14" pos:column="24"/></name></cpp:pragma>
<cpp:pragma pos:line="15" pos:column="1">#  <cpp:directive pos:line="15" pos:column="4">pragma<pos:position pos:line="15" pos:column="10"/></cpp:directive> <name pos:line="15" pos:column="11">warning<pos:position pos:line="15" pos:column="18"/></name><name pos:line="15" pos:column="18">(<pos:position pos:line="15" pos:column="19"/></name><name pos:line="15" pos:column="19">disable<pos:position pos:line="15" pos:column="26"/></name><name pos:line="15" pos:column="26">:<pos:position pos:line="15" pos:column="27"/></name><name pos:line="15" pos:column="27">1684<pos:position pos:line="15" pos:column="31"/></name><name pos:line="15" pos:column="31">)<pos:position pos:line="15" pos:column="32"/></name></cpp:pragma>
   <comment type="block" pos:line="16" pos:column="4">/* 1684: conversion from pointer to same-sized integral type */</comment>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">ptr<pos:position pos:line="19" pos:column="9"/></name></expr>)<pos:position pos:line="19" pos:column="10"/></condition><then pos:line="19" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="5">mem<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <operator pos:line="20" pos:column="11">(<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">void<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></operator><operator pos:line="20" pos:column="18">)<pos:position pos:line="20" pos:column="19"/></operator><operator pos:line="20" pos:column="19">(<pos:position pos:line="20" pos:column="20"/></operator><operator pos:line="20" pos:column="20">(<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="21">char<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">*<pos:position pos:line="20" pos:column="27"/></operator><operator pos:line="20" pos:column="27">)<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">ptr<pos:position pos:line="20" pos:column="31"/></name> <operator pos:line="20" pos:column="32">-<pos:position pos:line="20" pos:column="33"/></operator> <call><name pos:line="20" pos:column="34">offsetof<pos:position pos:line="20" pos:column="42"/></name><argument_list pos:line="20" pos:column="42">(<argument><expr pos:line="20" pos:column="43">struct <name pos:line="20" pos:column="50">memdebug<pos:position pos:line="20" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="60">mem<pos:position pos:line="20" pos:column="63"/></name></expr></argument>)<pos:position pos:line="20" pos:column="64"/></argument_list></call><operator pos:line="20" pos:column="64">)<pos:position pos:line="20" pos:column="65"/></operator></expr>;<pos:position pos:line="20" pos:column="66"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">__INTEL_COMPILER<pos:position pos:line="22" pos:column="24"/></name></cpp:ifdef>
<cpp:pragma pos:line="23" pos:column="1">#  <cpp:directive pos:line="23" pos:column="4">pragma<pos:position pos:line="23" pos:column="10"/></cpp:directive> <name pos:line="23" pos:column="11">warning<pos:position pos:line="23" pos:column="18"/></name><name pos:line="23" pos:column="18">(<pos:position pos:line="23" pos:column="19"/></name><name pos:line="23" pos:column="19">pop<pos:position pos:line="23" pos:column="22"/></name><name pos:line="23" pos:column="22">)<pos:position pos:line="23" pos:column="23"/></name></cpp:pragma>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="26" pos:column="3">mem<pos:position pos:line="26" pos:column="6"/></name> <operator pos:line="26" pos:column="7">=<pos:position pos:line="26" pos:column="8"/></operator> <call pos:line="26" pos:column="9">(<name pos:line="26" pos:column="10">Curl_crealloc<pos:position pos:line="26" pos:column="23"/></name>)<argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">mem<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">size<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name pos:line="27" pos:column="6">source<pos:position pos:line="27" pos:column="12"/></name></expr>)<pos:position pos:line="27" pos:column="13"/></condition><then pos:line="27" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="5">curl_memlog<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><literal type="string" pos:line="28" pos:column="17">"MEM %s:%d realloc(%p, %zu) = %p\n"<pos:position pos:line="28" pos:column="52"/></literal></expr></argument>,
                <argument><expr><name pos:line="29" pos:column="17">source<pos:position pos:line="29" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="25">line<pos:position pos:line="29" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="31">(<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">void<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">*<pos:position pos:line="29" pos:column="38"/></operator><operator pos:line="29" pos:column="38">)<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="39">ptr<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="44">wantedsize<pos:position pos:line="29" pos:column="54"/></name></expr></argument>,
                <argument><expr><ternary><condition><expr><name pos:line="30" pos:column="17">mem<pos:position pos:line="30" pos:column="20"/></name></expr> ?<pos:position pos:line="30" pos:column="22"/></condition><then pos:line="30" pos:column="22"> <expr><operator pos:line="30" pos:column="23">(<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="24">void<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">*<pos:position pos:line="30" pos:column="30"/></operator><operator pos:line="30" pos:column="30">)<pos:position pos:line="30" pos:column="31"/></operator><name><name pos:line="30" pos:column="31">mem<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">-&gt;<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="36">mem<pos:position pos:line="30" pos:column="39"/></name></name></expr> <pos:position pos:line="30" pos:column="40"/></then><else pos:line="30" pos:column="40">: <expr><operator pos:line="30" pos:column="42">(<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="43">void<pos:position pos:line="30" pos:column="47"/></name> <operator pos:line="30" pos:column="48">*<pos:position pos:line="30" pos:column="49"/></operator><operator pos:line="30" pos:column="49">)<pos:position pos:line="30" pos:column="50"/></operator><literal type="number" pos:line="30" pos:column="50">0<pos:position pos:line="30" pos:column="51"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt></block></then></if>

  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><name pos:line="32" pos:column="6">mem<pos:position pos:line="32" pos:column="9"/></name></expr>)<pos:position pos:line="32" pos:column="10"/></condition><then pos:line="32" pos:column="10"> <block pos:line="32" pos:column="11">{
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">mem<pos:position pos:line="33" pos:column="8"/></name><operator pos:line="33" pos:column="8">-&gt;<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="10">size<pos:position pos:line="33" pos:column="14"/></name></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <name pos:line="33" pos:column="17">wantedsize<pos:position pos:line="33" pos:column="27"/></name></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name><name pos:line="34" pos:column="12">mem<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">-&gt;<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="17">mem<pos:position pos:line="34" pos:column="20"/></name></name></expr>;<pos:position pos:line="34" pos:column="21"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <return pos:line="37" pos:column="3">return <expr><name pos:line="37" pos:column="10">NULL<pos:position pos:line="37" pos:column="14"/></name></expr>;<pos:position pos:line="37" pos:column="15"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
