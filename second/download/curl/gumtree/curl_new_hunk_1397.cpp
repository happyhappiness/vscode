"     ~/.curlrc\n"
"          Default config file.\n"
"\n"
"ENVIRONMENT\n"
"     HTTP_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for HTTP.\n"
"\n"
"     HTTPS_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for HTTPS.\n"
"\n"
);
 puts(
"     FTP_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for FTP.\n"
"     GOPHER_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use for GOPHER.\n"
"\n"
"     ALL_PROXY [protocol://]<host>[:port]\n"
"          Sets proxy server to use if no protocol-specific  proxy\n"
"          is set.\n"
"\n"
"     NO_PROXY <comma-separated list of hosts>\n"
"          list of host names that shouldn't go through any proxy.\n"
"          If set to a asterisk '*' only, it matches all hosts.\n"
"\n"
);
 puts(
"     COLUMNS <integer>\n"
"          The width of the terminal.  This variable only  affects\n"
"          curl when the --progress-bar option is used.\n"
"\n"
"EXIT CODES\n"
"     There exists a bunch of different error codes and their cor­\n"
"     responding error messages that may appear during bad  condi­\n"
"     tions. At the time of this writing, the exit codes are:\n"
"\n"
"     1    Unsupported protocol. This build of curl has no support\n"
"          for this protocol.\n"
"\n"
"     2    Failed to initialize.\n"
"\n"
);
 puts(
"     3    URL malformat. The syntax was not correct.\n"
"\n"
"     4    URL user malformatted. The user-part of the URL  syntax\n"
"          was not correct.\n"
"\n"
"     5    Couldn't  resolve proxy. The given proxy host could not\n"
"          be resolved.\n"
"\n"
"     6    Couldn't resolve host. The given remote  host  was  not\n"
"          resolved.\n"
"\n"
"     7    Failed to connect to host.\n"
"\n"
"     8    FTP  weird  server  reply.  The  server  sent data curl\n"
"          couldn't parse.\n"
"\n"
);
 puts(
"     9    FTP access denied. The server denied login.\n"
"\n"
"     10   FTP user/password incorrect. Either one  or  both  were\n"
"          not accepted by the server.\n"
"\n"
"     11   FTP  weird  PASS  reply.  Curl couldn't parse the reply\n"
"          sent to the PASS request.\n"
"\n"
"     12   FTP weird USER reply. Curl  couldn't  parse  the  reply\n"
"          sent to the USER request.\n"
"     13   FTP  weird  PASV  reply,  Curl couldn't parse the reply\n"
"          sent to the PASV request.\n"
"\n"
);
 puts(
"     14   FTP weird 227 format. Curl couldn't parse the  227-line\n"
"          the server sent.\n"
"\n"
"     15   FTP can't get host. Couldn't resolve the host IP we got\n"
"          in the 227-line.\n"
"\n"
"     16   FTP can't reconnect. Couldn't connect to  the  host  we\n"
"          got in the 227-line.\n"
"\n"
"     17   FTP  couldn't  set  binary.  Couldn't  change  transfer\n"
"          method to binary.\n"
"\n"
"     18   Partial file. Only a part of the file was transfered.\n"
"\n"
);
 puts(
"     19   FTP couldn't RETR file. The RETR command failed.\n"
"\n"
"     20   FTP write error. The transfer was reported bad  by  the\n"
"          server.\n"
"\n"
"     21   FTP  quote  error.  A quote command returned error from\n"
"          the server.\n"
"\n"
"     22   HTTP not found. The requested page was not found.  This\n"
"          return code only appears if --fail is used.\n"
"\n"
"     23   Write  error.  Curl  couldn't  write  data  to  a local\n"
"          filesystem or similar.\n"
"\n"
);
 puts(
"     24   Malformat user. User name badly specified.\n"
"\n"
"     25   FTP couldn't STOR file.  The  server  denied  the  STOR\n"
"          operation.\n"
"\n"
"     26   Read error. Various reading problems.\n"
"\n"
"     27   Out of memory. A memory allocation request failed.\n"
"\n"
"     28   Operation  timeout.  The  specified time-out period was\n"
"          reached according to the conditions.\n"
"\n"
"     29   FTP couldn't set ASCII. The server returned an  unknown\n"
"          reply.\n"
"\n"
);
 puts(
"     30   FTP PORT failed. The PORT command failed.\n"
"\n"
"     31   FTP couldn't use REST. The REST command failed.\n"
"\n"
"     32   FTP  couldn't  use  SIZE.  The SIZE command failed. The\n"
"          command is an extension to the original  FTP  spec  RFC\n"
"          959.\n"
"\n"
"     33   HTTP range error. The range \"command\" didn't work.\n"
"\n"
"     34   HTTP   post  error.  Internal  post-request  generation\n"
"          error.\n"
"\n"
"     35   SSL connect error. The SSL handshaking failed.\n"
"\n"
);
 puts(
"     36   FTP bad download resume. Couldn't continue  an  earlier\n"
"          aborted download.\n"
"\n"
"     37   FILE  couldn't read file. Failed to open the file. Per­\n"
"          missions?\n"
"\n"
"     38   LDAP cannot bind. LDAP bind operation failed.\n"
"\n"
"     39   LDAP search failed.\n"
"\n"
"     40   Library not found. The LDAP library was not found.\n"
"\n"
"     41   Function not found. A required LDAP  function  was  not\n"
"          found.\n"
"\n"
"     42   Aborted  by callback. An application told curl to abort\n"
);
 puts(
"          the operation.\n"
"\n"
"     43   Internal error. A function was called with a bad param­\n"
"          eter.\n"
"\n"
"     44   Internal error. A function was called in a bad order.\n"
"\n"
"     45   Interface  error.  A specified outgoing interface could\n"
"          not be used.\n"
"\n"
"     46   Bad password entered. An error was signalled  when  the\n"
"          password was entered.\n"
"\n"
"     47   Too  many redirects. When following redirects, curl hit\n"
"          the maximum amount.\n"
"\n"
);
 puts(
"     48   Unknown TELNET option specified.\n"
"\n"
"     49   Malformed telnet option.\n"
"\n"
"     XX   There will appear  more  error  codes  here  in  future\n"
"          releases.  The existing ones are meant to never change.\n"
"\n"
"BUGS\n"
"     If you do find bugs, mail them to curl-bug@haxx.se.\n"
"AUTHORS / CONTRIBUTORS\n"
"     Daniel Stenberg is the main author, but the  whole  list  of\n"
"     contributors is found in the separate THANKS file.\n"
"\n"
"WWW\n"
"     http://curl.haxx.se\n"
"\n"
"FTP\n"
);
 puts(
"     ftp://ftp.sunet.se/pub/www/utilities/curl/\n"
"\n"
"SEE ALSO\n"
"     ftp(1), wget(1), snarf(1)\n"
"\n"
"LATEST VERSION\n"
"\n"
"  You always find news about what's going on as well as the latest versions\n"
"  from the curl web pages, located at:\n"
"\n"
"        http://curl.haxx.se\n"
"\n"
"SIMPLE USAGE\n"
"\n"
"  Get the main page from netscape's web-server:\n"
"\n"
"        curl http://www.netscape.com/\n"
"\n"
"  Get the root README file from funet's ftp-server:\n"
"\n"
"        curl ftp://ftp.funet.fi/README\n"
"\n"
"  Get a web page from a server using port 8000:\n"
"\n"
);
 puts(
"        curl http://www.weirdserver.com:8000/\n"
"\n"
"  Get a list of the root directory of an FTP site:\n"
"\n"
"        curl ftp://cool.haxx.se/\n"
"\n"
"  Get a gopher document from funet's gopher server:\n"
"\n"
"        curl gopher://gopher.funet.fi\n"
"\n"
"  Get the definition of curl from a dictionary:\n"
"\n"
"        curl dict://dict.org/m:curl\n"
"\n"
"  Fetch two documents at once:\n"
"\n"
"        curl ftp://cool.haxx.se/ http://www.weirdserver.com:8000/\n"
"\n"
"DOWNLOAD TO A FILE\n"
"\n"
"  Get a web page and store in a local file:\n"
"\n"
);
 puts(
"        curl -o thatpage.html http://www.netscape.com/\n"
"\n"
"  Get a web page and store in a local file, make the local file get the name\n"
"  of the remote document (if no file name part is specified in the URL, this\n"
"  will fail):\n"
"\n"
"        curl -O http://www.netscape.com/index.html\n"
"\n"
"  Fetch two files and store them with their remote names:\n"
"\n"
"        curl -O www.haxx.se/index.html -O curl.haxx.se/download.html\n"
"\n"
"USING PASSWORDS\n"
"\n"
" FTP\n"
"\n"
"   To ftp files using name+passwd, include them in the URL like:\n"
"\n"
);
 puts(
"        curl ftp://name:passwd@machine.domain:port/full/path/to/file\n"
"\n"
"   or specify them with the -u flag like\n"
"\n"
"        curl -u name:passwd ftp://machine.domain:port/full/path/to/file\n"
"\n"
" HTTP\n"
"\n"
"   The HTTP URL doesn't support user and password in the URL string. Curl\n"
"   does support that anyway to provide a ftp-style interface and thus you can\n"
"   pick a file like:\n"
"\n"
"        curl http://name:passwd@machine.domain/full/path/to/file\n"
"\n"
"   or specify user and password separately like in\n"
"\n"
);
 puts(
"        curl -u name:passwd http://machine.domain/full/path/to/file\n"
"\n"
"   NOTE! Since HTTP URLs don't support user and password, you can't use that\n"
"   style when using Curl via a proxy. You _must_ use the -u style fetch\n"
"   during such circumstances.\n"
"\n"
" HTTPS\n"
"\n"
"   Probably most commonly used with private certificates, as explained below.\n"
