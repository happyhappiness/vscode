<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_264_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLMcode<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">curl_multi_remove_handle<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">CURLM<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">multi_handle<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">CURL<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">curl_handle<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_multi<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">multi<pos:position pos:line="4" pos:column="27"/></name><init pos:line="4" pos:column="27">=<expr><operator pos:line="4" pos:column="28">(<pos:position pos:line="4" pos:column="29"/></operator>struct <name pos:line="4" pos:column="36">Curl_multi<pos:position pos:line="4" pos:column="46"/></name> <operator pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></operator><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">multi_handle<pos:position pos:line="4" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_one_easy<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">easy<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* First, make some basic checks that the CURLM handle is a good handle */</comment>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><call><name pos:line="8" pos:column="7">GOOD_MULTI_HANDLE<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">multi<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">CURLM_BAD_HANDLE<pos:position pos:line="9" pos:column="28"/></name></expr>;<pos:position pos:line="9" pos:column="29"/></return></block></then></if>
  
  <comment type="block" pos:line="11" pos:column="3">/* Verify that we got a somewhat good easy handle too */</comment>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><call><name pos:line="12" pos:column="7">GOOD_EASY_HANDLE<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">curl_handle<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="37"/></condition><then pos:line="12" pos:column="37">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">CURLM_BAD_EASY_HANDLE<pos:position pos:line="13" pos:column="33"/></name></expr>;<pos:position pos:line="13" pos:column="34"/></return></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/* scan through the list and remove the 'curl_handle' */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">easy<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <name><name pos:line="16" pos:column="10">multi<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">easy<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">.<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">next<pos:position pos:line="16" pos:column="26"/></name></name></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>
  <while pos:line="17" pos:column="3">while<condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">easy<pos:position pos:line="17" pos:column="13"/></name></expr>)<pos:position pos:line="17" pos:column="14"/></condition> <block pos:line="17" pos:column="15">{
    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">(<expr><name><name pos:line="18" pos:column="8">easy<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">easy_handle<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">==<pos:position pos:line="18" pos:column="28"/></operator> <name pos:line="18" pos:column="29">curl_handle<pos:position pos:line="18" pos:column="40"/></name></expr>)<pos:position pos:line="18" pos:column="41"/></condition><then pos:line="18" pos:column="41">
      <block type="pseudo"><break pos:line="19" pos:column="7">break;<pos:position pos:line="19" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="20" pos:column="5">easy<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator><name><name pos:line="20" pos:column="10">easy<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">next<pos:position pos:line="20" pos:column="20"/></name></name></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></while>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">easy<pos:position pos:line="22" pos:column="10"/></name></expr>)<pos:position pos:line="22" pos:column="11"/></condition><then pos:line="22" pos:column="11"> <block pos:line="22" pos:column="12">{
    <comment type="block" pos:line="23" pos:column="5">/* If the 'state' is not INIT or COMPLETED, we might need to do something
       nice to put the easy_handle in a good known state when this returns. */</comment>

    <comment type="block" pos:line="26" pos:column="5">/* clear out the usage of the shared DNS cache */</comment>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">easy<pos:position pos:line="27" pos:column="9"/></name><operator pos:line="27" pos:column="9">-&gt;<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="11">easy_handle<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">-&gt;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="24">hostcache<pos:position pos:line="27" pos:column="33"/></name></name> <operator pos:line="27" pos:column="34">=<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">NULL<pos:position pos:line="27" pos:column="40"/></name></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>
    
    <comment type="block" pos:line="29" pos:column="5">/* make the previous node point to our next */</comment>
    <if pos:line="30" pos:column="5">if<condition pos:line="30" pos:column="7">(<expr><name><name pos:line="30" pos:column="8">easy<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">prev<pos:position pos:line="30" pos:column="18"/></name></name></expr>)<pos:position pos:line="30" pos:column="19"/></condition><then pos:line="30" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="7">easy<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">-&gt;<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="13">prev<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">-&gt;<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="19">next<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <name><name pos:line="31" pos:column="26">easy<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">-&gt;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="32">next<pos:position pos:line="31" pos:column="36"/></name></name></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt></block></then></if>
    <comment type="block" pos:line="32" pos:column="5">/* make our next point to our previous node */</comment>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><name><name pos:line="33" pos:column="8">easy<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">next<pos:position pos:line="33" pos:column="18"/></name></name></expr>)<pos:position pos:line="33" pos:column="19"/></condition><then pos:line="33" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="7">easy<pos:position pos:line="34" pos:column="11"/></name><operator pos:line="34" pos:column="11">-&gt;<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="13">next<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">-&gt;<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="19">prev<pos:position pos:line="34" pos:column="23"/></name></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <name><name pos:line="34" pos:column="26">easy<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">-&gt;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="32">prev<pos:position pos:line="34" pos:column="36"/></name></name></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt></block></then></if>
    
    <comment type="block" pos:line="36" pos:column="5">/* NOTE NOTE NOTE
       We do not touch the easy handle here! */</comment>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name><name pos:line="38" pos:column="9">easy<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">-&gt;<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="15">msg<pos:position pos:line="38" pos:column="18"/></name></name></expr>)<pos:position pos:line="38" pos:column="19"/></condition><then pos:line="38" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="7">free<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><name><name pos:line="39" pos:column="12">easy<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">msg<pos:position pos:line="39" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">free<pos:position pos:line="40" pos:column="9"/></name><argument_list pos:line="40" pos:column="9">(<argument><expr><name pos:line="40" pos:column="10">easy<pos:position pos:line="40" pos:column="14"/></name></expr></argument>)<pos:position pos:line="40" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="42" pos:column="5">multi<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">-&gt;<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="12">num_easy<pos:position pos:line="42" pos:column="20"/></name></name><operator pos:line="42" pos:column="20">--<pos:position pos:line="42" pos:column="22"/></operator></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt> <comment type="block" pos:line="42" pos:column="24">/* one less to care about now */</comment>

    <return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">CURLM_OK<pos:position pos:line="44" pos:column="20"/></name></expr>;<pos:position pos:line="44" pos:column="21"/></return>
  }<pos:position pos:line="45" pos:column="4"/></block></then>
  <else pos:line="46" pos:column="3">else
    <block type="pseudo"><return pos:line="47" pos:column="5">return <expr><name pos:line="47" pos:column="12">CURLM_BAD_EASY_HANDLE<pos:position pos:line="47" pos:column="33"/></name></expr>;<pos:position pos:line="47" pos:column="34"/></return></block></else></if> <comment type="block" pos:line="47" pos:column="35">/* twasn't found */</comment>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
