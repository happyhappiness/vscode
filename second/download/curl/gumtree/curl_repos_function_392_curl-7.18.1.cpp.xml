<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_392_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_easy_escape<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">CURL<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">handle<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">string<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">int<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">inlength<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">alloc<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><operator pos:line="3" pos:column="18">(<pos:position pos:line="3" pos:column="19"/></operator><ternary><condition><expr><name pos:line="3" pos:column="19">inlength<pos:position pos:line="3" pos:column="27"/></name></expr>?<pos:position pos:line="3" pos:column="28"/></condition><then><expr><operator pos:line="3" pos:column="28">(<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="29">size_t<pos:position pos:line="3" pos:column="35"/></name><operator pos:line="3" pos:column="35">)<pos:position pos:line="3" pos:column="36"/></operator><name pos:line="3" pos:column="36">inlength<pos:position pos:line="3" pos:column="44"/></name></expr></then><else pos:line="3" pos:column="44">:<expr><call><name pos:line="3" pos:column="45">strlen<pos:position pos:line="3" pos:column="51"/></name><argument_list pos:line="3" pos:column="51">(<argument><expr><name pos:line="3" pos:column="52">string<pos:position pos:line="3" pos:column="58"/></name></expr></argument>)<pos:position pos:line="3" pos:column="59"/></argument_list></call></expr></else></ternary><operator pos:line="3" pos:column="59">)<pos:position pos:line="3" pos:column="60"/></operator><operator pos:line="3" pos:column="60">+<pos:position pos:line="3" pos:column="61"/></operator><literal type="number" pos:line="3" pos:column="61">1<pos:position pos:line="3" pos:column="62"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="63"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">ns<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">testing_ptr<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">NULL<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">in<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt> <comment type="block" pos:line="6" pos:column="21">/* we need to treat the characters unsigned */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">newlen<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><name pos:line="7" pos:column="19">alloc<pos:position pos:line="7" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">strindex<pos:position pos:line="8" pos:column="15"/></name><init pos:line="8" pos:column="15">=<expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">length<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>

<cpp:ifndef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifndef<pos:position pos:line="11" pos:column="8"/></cpp:directive> <name pos:line="11" pos:column="9">CURL_DOES_CONVERSIONS<pos:position pos:line="11" pos:column="30"/></name></cpp:ifndef>
  <comment type="block" pos:line="12" pos:column="3">/* avoid compiler warnings */</comment>
  <expr_stmt><expr><operator pos:line="13" pos:column="3">(<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">void<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">)<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">handle<pos:position pos:line="13" pos:column="15"/></name></expr>;<pos:position pos:line="13" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name pos:line="15" pos:column="3">ns<pos:position pos:line="15" pos:column="5"/></name> <operator pos:line="15" pos:column="6">=<pos:position pos:line="15" pos:column="7"/></operator> <call><name pos:line="15" pos:column="8">malloc<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">alloc<pos:position pos:line="15" pos:column="20"/></name></expr></argument>)<pos:position pos:line="15" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">!<pos:position pos:line="16" pos:column="7"/></operator><name pos:line="16" pos:column="7">ns<pos:position pos:line="16" pos:column="9"/></name></expr>)<pos:position pos:line="16" pos:column="10"/></condition><then pos:line="16" pos:column="10">
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">NULL<pos:position pos:line="17" pos:column="16"/></name></expr>;<pos:position pos:line="17" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="19" pos:column="3">length<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">=<pos:position pos:line="19" pos:column="11"/></operator> <name pos:line="19" pos:column="12">alloc<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-<pos:position pos:line="19" pos:column="18"/></operator><literal type="number" pos:line="19" pos:column="18">1<pos:position pos:line="19" pos:column="19"/></literal></expr>;<pos:position pos:line="19" pos:column="20"/></expr_stmt>
  <while pos:line="20" pos:column="3">while<condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">length<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">--<pos:position pos:line="20" pos:column="17"/></operator></expr>)<pos:position pos:line="20" pos:column="18"/></condition> <block pos:line="20" pos:column="19">{
    <expr_stmt><expr><name pos:line="21" pos:column="5">in<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <operator pos:line="21" pos:column="10">*<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="11">string<pos:position pos:line="21" pos:column="17"/></name></expr>;<pos:position pos:line="21" pos:column="18"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* Portable character check (remember EBCDIC). Do not use isalnum() because
       its behavior is altered by the current locale. */</comment>

    <switch pos:line="26" pos:column="5">switch <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">in<pos:position pos:line="26" pos:column="15"/></name></expr>)<pos:position pos:line="26" pos:column="16"/></condition> <block pos:line="26" pos:column="17">{
    <case pos:line="27" pos:column="5">case <expr><literal type="char" pos:line="27" pos:column="10">'0'<pos:position pos:line="27" pos:column="13"/></literal></expr>:<pos:position pos:line="27" pos:column="14"/></case> <case pos:line="27" pos:column="15">case <expr><literal type="char" pos:line="27" pos:column="20">'1'<pos:position pos:line="27" pos:column="23"/></literal></expr>:<pos:position pos:line="27" pos:column="24"/></case> <case pos:line="27" pos:column="25">case <expr><literal type="char" pos:line="27" pos:column="30">'2'<pos:position pos:line="27" pos:column="33"/></literal></expr>:<pos:position pos:line="27" pos:column="34"/></case> <case pos:line="27" pos:column="35">case <expr><literal type="char" pos:line="27" pos:column="40">'3'<pos:position pos:line="27" pos:column="43"/></literal></expr>:<pos:position pos:line="27" pos:column="44"/></case> <case pos:line="27" pos:column="45">case <expr><literal type="char" pos:line="27" pos:column="50">'4'<pos:position pos:line="27" pos:column="53"/></literal></expr>:<pos:position pos:line="27" pos:column="54"/></case>
    <case pos:line="28" pos:column="5">case <expr><literal type="char" pos:line="28" pos:column="10">'5'<pos:position pos:line="28" pos:column="13"/></literal></expr>:<pos:position pos:line="28" pos:column="14"/></case> <case pos:line="28" pos:column="15">case <expr><literal type="char" pos:line="28" pos:column="20">'6'<pos:position pos:line="28" pos:column="23"/></literal></expr>:<pos:position pos:line="28" pos:column="24"/></case> <case pos:line="28" pos:column="25">case <expr><literal type="char" pos:line="28" pos:column="30">'7'<pos:position pos:line="28" pos:column="33"/></literal></expr>:<pos:position pos:line="28" pos:column="34"/></case> <case pos:line="28" pos:column="35">case <expr><literal type="char" pos:line="28" pos:column="40">'8'<pos:position pos:line="28" pos:column="43"/></literal></expr>:<pos:position pos:line="28" pos:column="44"/></case> <case pos:line="28" pos:column="45">case <expr><literal type="char" pos:line="28" pos:column="50">'9'<pos:position pos:line="28" pos:column="53"/></literal></expr>:<pos:position pos:line="28" pos:column="54"/></case>
    <case pos:line="29" pos:column="5">case <expr><literal type="char" pos:line="29" pos:column="10">'a'<pos:position pos:line="29" pos:column="13"/></literal></expr>:<pos:position pos:line="29" pos:column="14"/></case> <case pos:line="29" pos:column="15">case <expr><literal type="char" pos:line="29" pos:column="20">'b'<pos:position pos:line="29" pos:column="23"/></literal></expr>:<pos:position pos:line="29" pos:column="24"/></case> <case pos:line="29" pos:column="25">case <expr><literal type="char" pos:line="29" pos:column="30">'c'<pos:position pos:line="29" pos:column="33"/></literal></expr>:<pos:position pos:line="29" pos:column="34"/></case> <case pos:line="29" pos:column="35">case <expr><literal type="char" pos:line="29" pos:column="40">'d'<pos:position pos:line="29" pos:column="43"/></literal></expr>:<pos:position pos:line="29" pos:column="44"/></case> <case pos:line="29" pos:column="45">case <expr><literal type="char" pos:line="29" pos:column="50">'e'<pos:position pos:line="29" pos:column="53"/></literal></expr>:<pos:position pos:line="29" pos:column="54"/></case>
    <case pos:line="30" pos:column="5">case <expr><literal type="char" pos:line="30" pos:column="10">'f'<pos:position pos:line="30" pos:column="13"/></literal></expr>:<pos:position pos:line="30" pos:column="14"/></case> <case pos:line="30" pos:column="15">case <expr><literal type="char" pos:line="30" pos:column="20">'g'<pos:position pos:line="30" pos:column="23"/></literal></expr>:<pos:position pos:line="30" pos:column="24"/></case> <case pos:line="30" pos:column="25">case <expr><literal type="char" pos:line="30" pos:column="30">'h'<pos:position pos:line="30" pos:column="33"/></literal></expr>:<pos:position pos:line="30" pos:column="34"/></case> <case pos:line="30" pos:column="35">case <expr><literal type="char" pos:line="30" pos:column="40">'i'<pos:position pos:line="30" pos:column="43"/></literal></expr>:<pos:position pos:line="30" pos:column="44"/></case> <case pos:line="30" pos:column="45">case <expr><literal type="char" pos:line="30" pos:column="50">'j'<pos:position pos:line="30" pos:column="53"/></literal></expr>:<pos:position pos:line="30" pos:column="54"/></case>
    <case pos:line="31" pos:column="5">case <expr><literal type="char" pos:line="31" pos:column="10">'k'<pos:position pos:line="31" pos:column="13"/></literal></expr>:<pos:position pos:line="31" pos:column="14"/></case> <case pos:line="31" pos:column="15">case <expr><literal type="char" pos:line="31" pos:column="20">'l'<pos:position pos:line="31" pos:column="23"/></literal></expr>:<pos:position pos:line="31" pos:column="24"/></case> <case pos:line="31" pos:column="25">case <expr><literal type="char" pos:line="31" pos:column="30">'m'<pos:position pos:line="31" pos:column="33"/></literal></expr>:<pos:position pos:line="31" pos:column="34"/></case> <case pos:line="31" pos:column="35">case <expr><literal type="char" pos:line="31" pos:column="40">'n'<pos:position pos:line="31" pos:column="43"/></literal></expr>:<pos:position pos:line="31" pos:column="44"/></case> <case pos:line="31" pos:column="45">case <expr><literal type="char" pos:line="31" pos:column="50">'o'<pos:position pos:line="31" pos:column="53"/></literal></expr>:<pos:position pos:line="31" pos:column="54"/></case>
    <case pos:line="32" pos:column="5">case <expr><literal type="char" pos:line="32" pos:column="10">'p'<pos:position pos:line="32" pos:column="13"/></literal></expr>:<pos:position pos:line="32" pos:column="14"/></case> <case pos:line="32" pos:column="15">case <expr><literal type="char" pos:line="32" pos:column="20">'q'<pos:position pos:line="32" pos:column="23"/></literal></expr>:<pos:position pos:line="32" pos:column="24"/></case> <case pos:line="32" pos:column="25">case <expr><literal type="char" pos:line="32" pos:column="30">'r'<pos:position pos:line="32" pos:column="33"/></literal></expr>:<pos:position pos:line="32" pos:column="34"/></case> <case pos:line="32" pos:column="35">case <expr><literal type="char" pos:line="32" pos:column="40">'s'<pos:position pos:line="32" pos:column="43"/></literal></expr>:<pos:position pos:line="32" pos:column="44"/></case> <case pos:line="32" pos:column="45">case <expr><literal type="char" pos:line="32" pos:column="50">'t'<pos:position pos:line="32" pos:column="53"/></literal></expr>:<pos:position pos:line="32" pos:column="54"/></case>
    <case pos:line="33" pos:column="5">case <expr><literal type="char" pos:line="33" pos:column="10">'u'<pos:position pos:line="33" pos:column="13"/></literal></expr>:<pos:position pos:line="33" pos:column="14"/></case> <case pos:line="33" pos:column="15">case <expr><literal type="char" pos:line="33" pos:column="20">'v'<pos:position pos:line="33" pos:column="23"/></literal></expr>:<pos:position pos:line="33" pos:column="24"/></case> <case pos:line="33" pos:column="25">case <expr><literal type="char" pos:line="33" pos:column="30">'w'<pos:position pos:line="33" pos:column="33"/></literal></expr>:<pos:position pos:line="33" pos:column="34"/></case> <case pos:line="33" pos:column="35">case <expr><literal type="char" pos:line="33" pos:column="40">'x'<pos:position pos:line="33" pos:column="43"/></literal></expr>:<pos:position pos:line="33" pos:column="44"/></case> <case pos:line="33" pos:column="45">case <expr><literal type="char" pos:line="33" pos:column="50">'y'<pos:position pos:line="33" pos:column="53"/></literal></expr>:<pos:position pos:line="33" pos:column="54"/></case> <case pos:line="33" pos:column="55">case <expr><literal type="char" pos:line="33" pos:column="60">'z'<pos:position pos:line="33" pos:column="63"/></literal></expr>:<pos:position pos:line="33" pos:column="64"/></case>
    <case pos:line="34" pos:column="5">case <expr><literal type="char" pos:line="34" pos:column="10">'A'<pos:position pos:line="34" pos:column="13"/></literal></expr>:<pos:position pos:line="34" pos:column="14"/></case> <case pos:line="34" pos:column="15">case <expr><literal type="char" pos:line="34" pos:column="20">'B'<pos:position pos:line="34" pos:column="23"/></literal></expr>:<pos:position pos:line="34" pos:column="24"/></case> <case pos:line="34" pos:column="25">case <expr><literal type="char" pos:line="34" pos:column="30">'C'<pos:position pos:line="34" pos:column="33"/></literal></expr>:<pos:position pos:line="34" pos:column="34"/></case> <case pos:line="34" pos:column="35">case <expr><literal type="char" pos:line="34" pos:column="40">'D'<pos:position pos:line="34" pos:column="43"/></literal></expr>:<pos:position pos:line="34" pos:column="44"/></case> <case pos:line="34" pos:column="45">case <expr><literal type="char" pos:line="34" pos:column="50">'E'<pos:position pos:line="34" pos:column="53"/></literal></expr>:<pos:position pos:line="34" pos:column="54"/></case>
    <case pos:line="35" pos:column="5">case <expr><literal type="char" pos:line="35" pos:column="10">'F'<pos:position pos:line="35" pos:column="13"/></literal></expr>:<pos:position pos:line="35" pos:column="14"/></case> <case pos:line="35" pos:column="15">case <expr><literal type="char" pos:line="35" pos:column="20">'G'<pos:position pos:line="35" pos:column="23"/></literal></expr>:<pos:position pos:line="35" pos:column="24"/></case> <case pos:line="35" pos:column="25">case <expr><literal type="char" pos:line="35" pos:column="30">'H'<pos:position pos:line="35" pos:column="33"/></literal></expr>:<pos:position pos:line="35" pos:column="34"/></case> <case pos:line="35" pos:column="35">case <expr><literal type="char" pos:line="35" pos:column="40">'I'<pos:position pos:line="35" pos:column="43"/></literal></expr>:<pos:position pos:line="35" pos:column="44"/></case> <case pos:line="35" pos:column="45">case <expr><literal type="char" pos:line="35" pos:column="50">'J'<pos:position pos:line="35" pos:column="53"/></literal></expr>:<pos:position pos:line="35" pos:column="54"/></case>
    <case pos:line="36" pos:column="5">case <expr><literal type="char" pos:line="36" pos:column="10">'K'<pos:position pos:line="36" pos:column="13"/></literal></expr>:<pos:position pos:line="36" pos:column="14"/></case> <case pos:line="36" pos:column="15">case <expr><literal type="char" pos:line="36" pos:column="20">'L'<pos:position pos:line="36" pos:column="23"/></literal></expr>:<pos:position pos:line="36" pos:column="24"/></case> <case pos:line="36" pos:column="25">case <expr><literal type="char" pos:line="36" pos:column="30">'M'<pos:position pos:line="36" pos:column="33"/></literal></expr>:<pos:position pos:line="36" pos:column="34"/></case> <case pos:line="36" pos:column="35">case <expr><literal type="char" pos:line="36" pos:column="40">'N'<pos:position pos:line="36" pos:column="43"/></literal></expr>:<pos:position pos:line="36" pos:column="44"/></case> <case pos:line="36" pos:column="45">case <expr><literal type="char" pos:line="36" pos:column="50">'O'<pos:position pos:line="36" pos:column="53"/></literal></expr>:<pos:position pos:line="36" pos:column="54"/></case>
    <case pos:line="37" pos:column="5">case <expr><literal type="char" pos:line="37" pos:column="10">'P'<pos:position pos:line="37" pos:column="13"/></literal></expr>:<pos:position pos:line="37" pos:column="14"/></case> <case pos:line="37" pos:column="15">case <expr><literal type="char" pos:line="37" pos:column="20">'Q'<pos:position pos:line="37" pos:column="23"/></literal></expr>:<pos:position pos:line="37" pos:column="24"/></case> <case pos:line="37" pos:column="25">case <expr><literal type="char" pos:line="37" pos:column="30">'R'<pos:position pos:line="37" pos:column="33"/></literal></expr>:<pos:position pos:line="37" pos:column="34"/></case> <case pos:line="37" pos:column="35">case <expr><literal type="char" pos:line="37" pos:column="40">'S'<pos:position pos:line="37" pos:column="43"/></literal></expr>:<pos:position pos:line="37" pos:column="44"/></case> <case pos:line="37" pos:column="45">case <expr><literal type="char" pos:line="37" pos:column="50">'T'<pos:position pos:line="37" pos:column="53"/></literal></expr>:<pos:position pos:line="37" pos:column="54"/></case>
    <case pos:line="38" pos:column="5">case <expr><literal type="char" pos:line="38" pos:column="10">'U'<pos:position pos:line="38" pos:column="13"/></literal></expr>:<pos:position pos:line="38" pos:column="14"/></case> <case pos:line="38" pos:column="15">case <expr><literal type="char" pos:line="38" pos:column="20">'V'<pos:position pos:line="38" pos:column="23"/></literal></expr>:<pos:position pos:line="38" pos:column="24"/></case> <case pos:line="38" pos:column="25">case <expr><literal type="char" pos:line="38" pos:column="30">'W'<pos:position pos:line="38" pos:column="33"/></literal></expr>:<pos:position pos:line="38" pos:column="34"/></case> <case pos:line="38" pos:column="35">case <expr><literal type="char" pos:line="38" pos:column="40">'X'<pos:position pos:line="38" pos:column="43"/></literal></expr>:<pos:position pos:line="38" pos:column="44"/></case> <case pos:line="38" pos:column="45">case <expr><literal type="char" pos:line="38" pos:column="50">'Y'<pos:position pos:line="38" pos:column="53"/></literal></expr>:<pos:position pos:line="38" pos:column="54"/></case> <case pos:line="38" pos:column="55">case <expr><literal type="char" pos:line="38" pos:column="60">'Z'<pos:position pos:line="38" pos:column="63"/></literal></expr>:<pos:position pos:line="38" pos:column="64"/></case>
      <comment type="block" pos:line="39" pos:column="7">/* just copy this */</comment>
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">ns<pos:position pos:line="40" pos:column="9"/></name><index pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">strindex<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">++<pos:position pos:line="40" pos:column="20"/></operator></expr>]<pos:position pos:line="40" pos:column="21"/></index></name><operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">in<pos:position pos:line="40" pos:column="24"/></name></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
      <break pos:line="41" pos:column="7">break;<pos:position pos:line="41" pos:column="13"/></break>
    <default pos:line="42" pos:column="5">default:<pos:position pos:line="42" pos:column="13"/></default>
      <comment type="block" pos:line="43" pos:column="7">/* encode it */</comment>
      <expr_stmt><expr><name pos:line="44" pos:column="7">newlen<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">+=<pos:position pos:line="44" pos:column="16"/></operator> <literal type="number" pos:line="44" pos:column="17">2<pos:position pos:line="44" pos:column="18"/></literal></expr>;<pos:position pos:line="44" pos:column="19"/></expr_stmt> <comment type="block" pos:line="44" pos:column="20">/* the size grows with two, since this'll become a %XX */</comment>
      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><name pos:line="45" pos:column="10">newlen<pos:position pos:line="45" pos:column="16"/></name> <operator pos:line="45" pos:column="17">&gt;<pos:position pos:line="45" pos:column="21"/></operator> <name pos:line="45" pos:column="19">alloc<pos:position pos:line="45" pos:column="24"/></name></expr>)<pos:position pos:line="45" pos:column="25"/></condition><then pos:line="45" pos:column="25"> <block pos:line="45" pos:column="26">{
        <expr_stmt><expr><name pos:line="46" pos:column="9">alloc<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">*=<pos:position pos:line="46" pos:column="17"/></operator> <literal type="number" pos:line="46" pos:column="18">2<pos:position pos:line="46" pos:column="19"/></literal></expr>;<pos:position pos:line="46" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="47" pos:column="9">testing_ptr<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator> <call><name pos:line="47" pos:column="23">realloc<pos:position pos:line="47" pos:column="30"/></name><argument_list pos:line="47" pos:column="30">(<argument><expr><name pos:line="47" pos:column="31">ns<pos:position pos:line="47" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="35">alloc<pos:position pos:line="47" pos:column="40"/></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt>
        <if pos:line="48" pos:column="9">if<condition pos:line="48" pos:column="11">(<expr><operator pos:line="48" pos:column="12">!<pos:position pos:line="48" pos:column="13"/></operator><name pos:line="48" pos:column="13">testing_ptr<pos:position pos:line="48" pos:column="24"/></name></expr>)<pos:position pos:line="48" pos:column="25"/></condition><then pos:line="48" pos:column="25"> <block pos:line="48" pos:column="26">{
          <expr_stmt><expr><call><name pos:line="49" pos:column="11">free<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">( <argument><expr><name pos:line="49" pos:column="17">ns<pos:position pos:line="49" pos:column="19"/></name></expr></argument> )<pos:position pos:line="49" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
          <return pos:line="50" pos:column="11">return <expr><name pos:line="50" pos:column="18">NULL<pos:position pos:line="50" pos:column="22"/></name></expr>;<pos:position pos:line="50" pos:column="23"/></return>
        }<pos:position pos:line="51" pos:column="10"/></block></then>
        <else pos:line="52" pos:column="9">else <block pos:line="52" pos:column="14">{
          <expr_stmt><expr><name pos:line="53" pos:column="11">ns<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <name pos:line="53" pos:column="16">testing_ptr<pos:position pos:line="53" pos:column="27"/></name></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></else></if>
      }<pos:position pos:line="55" pos:column="8"/></block></then></if>

<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef<pos:position pos:line="57" pos:column="7"/></cpp:directive> <name pos:line="57" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="57" pos:column="29"/></name></cpp:ifdef>
<comment type="block" pos:line="58" pos:column="1">/* escape sequences are always in ASCII so convert them on non-ASCII hosts */</comment>
      <if pos:line="59" pos:column="7">if<condition pos:line="59" pos:column="9">(<expr><operator pos:line="59" pos:column="10">!<pos:position pos:line="59" pos:column="11"/></operator><name pos:line="59" pos:column="11">handle<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">||<pos:position pos:line="59" pos:column="20"/></operator>
          <operator pos:line="60" pos:column="11">(<pos:position pos:line="60" pos:column="12"/></operator><call><name pos:line="60" pos:column="12">Curl_convert_to_network<pos:position pos:line="60" pos:column="35"/></name><argument_list pos:line="60" pos:column="35">(<argument><expr><name pos:line="60" pos:column="36">handle<pos:position pos:line="60" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="44">&amp;<pos:position pos:line="60" pos:column="49"/></operator><name pos:line="60" pos:column="45">in<pos:position pos:line="60" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="49">1<pos:position pos:line="60" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="51"/></argument_list></call> <operator pos:line="60" pos:column="52">!=<pos:position pos:line="60" pos:column="54"/></operator> <name pos:line="60" pos:column="55">CURLE_OK<pos:position pos:line="60" pos:column="63"/></name><operator pos:line="60" pos:column="63">)<pos:position pos:line="60" pos:column="64"/></operator></expr>)<pos:position pos:line="60" pos:column="65"/></condition><then pos:line="60" pos:column="65"> <block pos:line="60" pos:column="66">{
        <comment type="block" pos:line="61" pos:column="9">/* Curl_convert_to_network calls failf if unsuccessful */</comment>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">free<pos:position pos:line="62" pos:column="13"/></name><argument_list pos:line="62" pos:column="13">(<argument><expr><name pos:line="62" pos:column="14">ns<pos:position pos:line="62" pos:column="16"/></name></expr></argument>)<pos:position pos:line="62" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="18"/></expr_stmt>
        <return pos:line="63" pos:column="9">return <expr><name pos:line="63" pos:column="16">NULL<pos:position pos:line="63" pos:column="20"/></name></expr>;<pos:position pos:line="63" pos:column="21"/></return>
      }<pos:position pos:line="64" pos:column="8"/></block></then></if>
<cpp:endif pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">endif<pos:position pos:line="65" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="65" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

      <expr_stmt><expr><call><name pos:line="67" pos:column="7">snprintf<pos:position pos:line="67" pos:column="15"/></name><argument_list pos:line="67" pos:column="15">(<argument><expr><operator pos:line="67" pos:column="16">&amp;<pos:position pos:line="67" pos:column="21"/></operator><name><name pos:line="67" pos:column="17">ns<pos:position pos:line="67" pos:column="19"/></name><index pos:line="67" pos:column="19">[<expr><name pos:line="67" pos:column="20">strindex<pos:position pos:line="67" pos:column="28"/></name></expr>]<pos:position pos:line="67" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="31">4<pos:position pos:line="67" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="34">"%%%02X"<pos:position pos:line="67" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="44">in<pos:position pos:line="67" pos:column="46"/></name></expr></argument>)<pos:position pos:line="67" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="48"/></expr_stmt>

      <expr_stmt><expr><name pos:line="69" pos:column="7">strindex<pos:position pos:line="69" pos:column="15"/></name><operator pos:line="69" pos:column="15">+=<pos:position pos:line="69" pos:column="17"/></operator><literal type="number" pos:line="69" pos:column="17">3<pos:position pos:line="69" pos:column="18"/></literal></expr>;<pos:position pos:line="69" pos:column="19"/></expr_stmt>
      <break pos:line="70" pos:column="7">break;<pos:position pos:line="70" pos:column="13"/></break>
    }<pos:position pos:line="71" pos:column="6"/></block></switch>
    <expr_stmt><expr><name pos:line="72" pos:column="5">string<pos:position pos:line="72" pos:column="11"/></name><operator pos:line="72" pos:column="11">++<pos:position pos:line="72" pos:column="13"/></operator></expr>;<pos:position pos:line="72" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="73" pos:column="4"/></block></while>
  <expr_stmt><expr><name><name pos:line="74" pos:column="3">ns<pos:position pos:line="74" pos:column="5"/></name><index pos:line="74" pos:column="5">[<expr><name pos:line="74" pos:column="6">strindex<pos:position pos:line="74" pos:column="14"/></name></expr>]<pos:position pos:line="74" pos:column="15"/></index></name><operator pos:line="74" pos:column="15">=<pos:position pos:line="74" pos:column="16"/></operator><literal type="number" pos:line="74" pos:column="16">0<pos:position pos:line="74" pos:column="17"/></literal></expr>;<pos:position pos:line="74" pos:column="18"/></expr_stmt> <comment type="block" pos:line="74" pos:column="19">/* terminate it */</comment>
  <return pos:line="75" pos:column="3">return <expr><name pos:line="75" pos:column="10">ns<pos:position pos:line="75" pos:column="12"/></name></expr>;<pos:position pos:line="75" pos:column="13"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
