<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2102_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">curl_mime<pos:position pos:line="1" pos:column="10"/></name> <modifier pos:line="1" pos:column="11">*<pos:position pos:line="1" pos:column="12"/></modifier></type><name pos:line="1" pos:column="12">curl_mime_init<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">Curl_easy<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">easy<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">curl_mime<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">mime<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">mime<pos:position pos:line="5" pos:column="7"/></name> <operator pos:line="5" pos:column="8">=<pos:position pos:line="5" pos:column="9"/></operator> <operator pos:line="5" pos:column="10">(<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="11">curl_mime<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></operator><operator pos:line="5" pos:column="22">)<pos:position pos:line="5" pos:column="23"/></operator> <call><name pos:line="5" pos:column="24">malloc<pos:position pos:line="5" pos:column="30"/></name><argument_list pos:line="5" pos:column="30">(<argument><expr><sizeof pos:line="5" pos:column="31">sizeof <name><pos:position pos:line="5" pos:column="38"/></name></sizeof>*<name pos:line="5" pos:column="39">mime<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="45"/></expr_stmt>

  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><name pos:line="7" pos:column="6">mime<pos:position pos:line="7" pos:column="10"/></name></expr>)<pos:position pos:line="7" pos:column="11"/></condition><then pos:line="7" pos:column="11"> <block pos:line="7" pos:column="12">{
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">mime<pos:position pos:line="8" pos:column="9"/></name><operator pos:line="8" pos:column="9">-&gt;<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="11">easy<pos:position pos:line="8" pos:column="15"/></name></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <name pos:line="8" pos:column="18">easy<pos:position pos:line="8" pos:column="22"/></name></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">mime<pos:position pos:line="9" pos:column="9"/></name><operator pos:line="9" pos:column="9">-&gt;<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="11">parent<pos:position pos:line="9" pos:column="17"/></name></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="20">NULL<pos:position pos:line="9" pos:column="24"/></name></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">mime<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">-&gt;<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="11">firstpart<pos:position pos:line="10" pos:column="20"/></name></name> <operator pos:line="10" pos:column="21">=<pos:position pos:line="10" pos:column="22"/></operator> <name pos:line="10" pos:column="23">NULL<pos:position pos:line="10" pos:column="27"/></name></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">mime<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">-&gt;<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="11">lastpart<pos:position pos:line="11" pos:column="19"/></name></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">NULL<pos:position pos:line="11" pos:column="26"/></name></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* Get a part boundary. */</comment>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">mime<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">-&gt;<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="11">boundary<pos:position pos:line="14" pos:column="19"/></name></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <call><name pos:line="14" pos:column="22">malloc<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><literal type="number" pos:line="14" pos:column="29">24<pos:position pos:line="14" pos:column="31"/></literal> <operator pos:line="14" pos:column="32">+<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="34">MIME_RAND_BOUNDARY_CHARS<pos:position pos:line="14" pos:column="58"/></name> <operator pos:line="14" pos:column="59">+<pos:position pos:line="14" pos:column="60"/></operator> <literal type="number" pos:line="14" pos:column="61">1<pos:position pos:line="14" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><operator pos:line="15" pos:column="8">!<pos:position pos:line="15" pos:column="9"/></operator><name><name pos:line="15" pos:column="9">mime<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">boundary<pos:position pos:line="15" pos:column="23"/></name></name></expr>)<pos:position pos:line="15" pos:column="24"/></condition><then pos:line="15" pos:column="24"> <block pos:line="15" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">free<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">mime<pos:position pos:line="16" pos:column="16"/></name></expr></argument>)<pos:position pos:line="16" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt>
      <return pos:line="17" pos:column="7">return <expr><name pos:line="17" pos:column="14">NULL<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">memset<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name><name pos:line="20" pos:column="12">mime<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">boundary<pos:position pos:line="20" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="28">'-'<pos:position pos:line="20" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="33">24<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">Curl_rand_hex<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">easy<pos:position pos:line="21" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">unsigned<pos:position pos:line="21" pos:column="34"/></name> <name pos:line="21" pos:column="35">char<pos:position pos:line="21" pos:column="39"/></name> <operator pos:line="21" pos:column="40">*<pos:position pos:line="21" pos:column="41"/></operator><operator pos:line="21" pos:column="41">)<pos:position pos:line="21" pos:column="42"/></operator> <name><name pos:line="21" pos:column="43">mime<pos:position pos:line="21" pos:column="47"/></name><operator pos:line="21" pos:column="47">-&gt;<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="49">boundary<pos:position pos:line="21" pos:column="57"/></name></name> <operator pos:line="21" pos:column="58">+<pos:position pos:line="21" pos:column="59"/></operator> <literal type="number" pos:line="21" pos:column="60">24<pos:position pos:line="21" pos:column="62"/></literal></expr></argument>,
                  <argument><expr><name pos:line="22" pos:column="19">MIME_RAND_BOUNDARY_CHARS<pos:position pos:line="22" pos:column="43"/></name> <operator pos:line="22" pos:column="44">+<pos:position pos:line="22" pos:column="45"/></operator> <literal type="number" pos:line="22" pos:column="46">1<pos:position pos:line="22" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">mimesetstate<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><operator pos:line="23" pos:column="18">&amp;<pos:position pos:line="23" pos:column="23"/></operator><name><name pos:line="23" pos:column="19">mime<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">state<pos:position pos:line="23" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="32">MIMESTATE_BEGIN<pos:position pos:line="23" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="49">NULL<pos:position pos:line="23" pos:column="53"/></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <return pos:line="26" pos:column="3">return <expr><name pos:line="26" pos:column="10">mime<pos:position pos:line="26" pos:column="14"/></name></expr>;<pos:position pos:line="26" pos:column="15"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
