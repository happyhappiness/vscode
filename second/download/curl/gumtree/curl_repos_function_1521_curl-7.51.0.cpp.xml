<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1521_curl-7.51.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">multi_done<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier><modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">connp<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">CURLcode<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">status<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,  <comment type="block" pos:line="2" pos:column="45">/* an error if this is called
                                               after an error was detected */</comment>
                          <parameter><decl><type><name pos:line="4" pos:column="27">bool<pos:position pos:line="4" pos:column="31"/></name></type> <name pos:line="4" pos:column="32">premature<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="42"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">connectdata<pos:position pos:line="7" pos:column="21"/></name></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">conn<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Curl_easy<pos:position pos:line="8" pos:column="19"/></name></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">data<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">DEBUGASSERT<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><operator pos:line="10" pos:column="15">*<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">connp<pos:position pos:line="10" pos:column="21"/></name></expr></argument>)<pos:position pos:line="10" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">conn<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <operator pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">connp<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">data<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <name><name pos:line="13" pos:column="10">conn<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">data<pos:position pos:line="13" pos:column="20"/></name></name></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">DEBUGF<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><call><name pos:line="15" pos:column="10">infof<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">data<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="22">"multi_done\n"<pos:position pos:line="15" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name><name pos:line="17" pos:column="6">data<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">state<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">done<pos:position pos:line="17" pos:column="22"/></name></name></expr>)<pos:position pos:line="17" pos:column="23"/></condition><then pos:line="17" pos:column="23">
    <comment type="block" pos:line="18" pos:column="5">/* Stop if multi_done() has already been called */</comment>
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">CURLE_OK<pos:position pos:line="19" pos:column="20"/></name></expr>;<pos:position pos:line="19" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">Curl_getoff_all_pipelines<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">data<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">conn<pos:position pos:line="21" pos:column="39"/></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>

  <comment type="block" pos:line="23" pos:column="3">/* Cleanup possible redirect junk */</comment>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">free<pos:position pos:line="24" pos:column="7"/></name><argument_list pos:line="24" pos:column="7">(<argument><expr><name><name pos:line="24" pos:column="8">data<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">-&gt;<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="14">req<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">newurl<pos:position pos:line="24" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="25" pos:column="3">data<pos:position pos:line="25" pos:column="7"/></name><operator pos:line="25" pos:column="7">-&gt;<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="9">req<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">.<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">newurl<pos:position pos:line="25" pos:column="19"/></name></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="22">NULL<pos:position pos:line="25" pos:column="26"/></name></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">free<pos:position pos:line="26" pos:column="7"/></name><argument_list pos:line="26" pos:column="7">(<argument><expr><name><name pos:line="26" pos:column="8">data<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">req<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">.<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">location<pos:position pos:line="26" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">data<pos:position pos:line="27" pos:column="7"/></name><operator pos:line="27" pos:column="7">-&gt;<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="9">req<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">.<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">location<pos:position pos:line="27" pos:column="21"/></name></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">NULL<pos:position pos:line="27" pos:column="28"/></name></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>

  <switch pos:line="29" pos:column="3">switch<condition pos:line="29" pos:column="9">(<expr><name pos:line="29" pos:column="10">status<pos:position pos:line="29" pos:column="16"/></name></expr>)<pos:position pos:line="29" pos:column="17"/></condition> <block pos:line="29" pos:column="18">{
  <case pos:line="30" pos:column="3">case <expr><name pos:line="30" pos:column="8">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="30" pos:column="33"/></name></expr>:<pos:position pos:line="30" pos:column="34"/></case>
  <case pos:line="31" pos:column="3">case <expr><name pos:line="31" pos:column="8">CURLE_READ_ERROR<pos:position pos:line="31" pos:column="24"/></name></expr>:<pos:position pos:line="31" pos:column="25"/></case>
  <case pos:line="32" pos:column="3">case <expr><name pos:line="32" pos:column="8">CURLE_WRITE_ERROR<pos:position pos:line="32" pos:column="25"/></name></expr>:<pos:position pos:line="32" pos:column="26"/></case>
    <comment type="block" pos:line="33" pos:column="5">/* When we're aborted due to a callback return code it basically have to
       be counted as premature as there is trouble ahead if we don't. We have
       many callbacks and protocols work differently, we could potentially do
       this more fine-grained in the future. */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">premature<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <name pos:line="37" pos:column="17">TRUE<pos:position pos:line="37" pos:column="21"/></name></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt>
  <default pos:line="38" pos:column="3">default:<pos:position pos:line="38" pos:column="11"/></default>
    <break pos:line="39" pos:column="5">break;<pos:position pos:line="39" pos:column="11"/></break>
  }<pos:position pos:line="40" pos:column="4"/></block></switch>

  <comment type="block" pos:line="42" pos:column="3">/* this calls the protocol-specific function pointer previously set */</comment>
  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><name><name pos:line="43" pos:column="6">conn<pos:position pos:line="43" pos:column="10"/></name><operator pos:line="43" pos:column="10">-&gt;<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="12">handler<pos:position pos:line="43" pos:column="19"/></name><operator pos:line="43" pos:column="19">-&gt;<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="21">done<pos:position pos:line="43" pos:column="25"/></name></name></expr>)<pos:position pos:line="43" pos:column="26"/></condition><then pos:line="43" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="5">result<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name><name pos:line="44" pos:column="14">conn<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">-&gt;<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="20">handler<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">done<pos:position pos:line="44" pos:column="33"/></name></name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">conn<pos:position pos:line="44" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="40">status<pos:position pos:line="44" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="48">premature<pos:position pos:line="44" pos:column="57"/></name></expr></argument>)<pos:position pos:line="44" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="59"/></expr_stmt></block></then>
  <else pos:line="45" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="5">result<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator> <name pos:line="46" pos:column="14">status<pos:position pos:line="46" pos:column="20"/></name></expr>;<pos:position pos:line="46" pos:column="21"/></expr_stmt></block></else></if>

  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><name pos:line="48" pos:column="6">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">!=<pos:position pos:line="48" pos:column="34"/></operator> <name pos:line="48" pos:column="35">result<pos:position pos:line="48" pos:column="41"/></name></expr>)<pos:position pos:line="48" pos:column="42"/></condition><then pos:line="48" pos:column="42"> <block pos:line="48" pos:column="43">{
    <comment type="block" pos:line="49" pos:column="5">/* avoid this if we already aborted by callback to avoid this calling
       another callback */</comment>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">CURLcode<pos:position pos:line="51" pos:column="13"/></name></type> <name pos:line="51" pos:column="14">rc<pos:position pos:line="51" pos:column="16"/></name> <init pos:line="51" pos:column="17">= <expr><call><name pos:line="51" pos:column="19">Curl_pgrsDone<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">conn<pos:position pos:line="51" pos:column="37"/></name></expr></argument>)<pos:position pos:line="51" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="39"/></decl_stmt>
    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><operator pos:line="52" pos:column="8">!<pos:position pos:line="52" pos:column="9"/></operator><name pos:line="52" pos:column="9">result<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">&amp;&amp;<pos:position pos:line="52" pos:column="26"/></operator> <name pos:line="52" pos:column="19">rc<pos:position pos:line="52" pos:column="21"/></name></expr>)<pos:position pos:line="52" pos:column="22"/></condition><then pos:line="52" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="7">result<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <name pos:line="53" pos:column="16">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="53" pos:column="41"/></name></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt></block></then></if>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <if pos:line="56" pos:column="3">if<condition pos:line="56" pos:column="5">(<expr><name><name pos:line="56" pos:column="6">conn<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">send_pipe<pos:position pos:line="56" pos:column="21"/></name><operator pos:line="56" pos:column="21">-&gt;<pos:position pos:line="56" pos:column="26"/></operator><name pos:line="56" pos:column="23">size<pos:position pos:line="56" pos:column="27"/></name></name> <operator pos:line="56" pos:column="28">+<pos:position pos:line="56" pos:column="29"/></operator> <name><name pos:line="56" pos:column="30">conn<pos:position pos:line="56" pos:column="34"/></name><operator pos:line="56" pos:column="34">-&gt;<pos:position pos:line="56" pos:column="39"/></operator><name pos:line="56" pos:column="36">recv_pipe<pos:position pos:line="56" pos:column="45"/></name><operator pos:line="56" pos:column="45">-&gt;<pos:position pos:line="56" pos:column="50"/></operator><name pos:line="56" pos:column="47">size<pos:position pos:line="56" pos:column="51"/></name></name> <operator pos:line="56" pos:column="52">!=<pos:position pos:line="56" pos:column="54"/></operator> <literal type="number" pos:line="56" pos:column="55">0<pos:position pos:line="56" pos:column="56"/></literal> <operator pos:line="56" pos:column="57">&amp;&amp;<pos:position pos:line="56" pos:column="67"/></operator>
     <operator pos:line="57" pos:column="6">!<pos:position pos:line="57" pos:column="7"/></operator><name><name pos:line="57" pos:column="7">data<pos:position pos:line="57" pos:column="11"/></name><operator pos:line="57" pos:column="11">-&gt;<pos:position pos:line="57" pos:column="16"/></operator><name pos:line="57" pos:column="13">set<pos:position pos:line="57" pos:column="16"/></name><operator pos:line="57" pos:column="16">.<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="17">reuse_forbid<pos:position pos:line="57" pos:column="29"/></name></name> <operator pos:line="57" pos:column="30">&amp;&amp;<pos:position pos:line="57" pos:column="40"/></operator>
     <operator pos:line="58" pos:column="6">!<pos:position pos:line="58" pos:column="7"/></operator><name><name pos:line="58" pos:column="7">conn<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">-&gt;<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="13">bits<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">.<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="18">close<pos:position pos:line="58" pos:column="23"/></name></name></expr>)<pos:position pos:line="58" pos:column="24"/></condition><then pos:line="58" pos:column="24"> <block pos:line="58" pos:column="25">{
    <comment type="block" pos:line="59" pos:column="5">/* Stop if pipeline is not empty and we do not have to close
       connection. */</comment>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">data<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">-&gt;<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="11">easy_conn<pos:position pos:line="61" pos:column="20"/></name></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="23">NULL<pos:position pos:line="61" pos:column="27"/></name></expr>;<pos:position pos:line="61" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">DEBUGF<pos:position pos:line="62" pos:column="11"/></name><argument_list pos:line="62" pos:column="11">(<argument><expr><call><name pos:line="62" pos:column="12">infof<pos:position pos:line="62" pos:column="17"/></name><argument_list pos:line="62" pos:column="17">(<argument><expr><name pos:line="62" pos:column="18">data<pos:position pos:line="62" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="24">"Connection still in use, no more multi_done now!\n"<pos:position pos:line="62" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="79"/></expr_stmt>
    <return pos:line="63" pos:column="5">return <expr><name pos:line="63" pos:column="12">CURLE_OK<pos:position pos:line="63" pos:column="20"/></name></expr>;<pos:position pos:line="63" pos:column="21"/></return>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="66" pos:column="3">data<pos:position pos:line="66" pos:column="7"/></name><operator pos:line="66" pos:column="7">-&gt;<pos:position pos:line="66" pos:column="12"/></operator><name pos:line="66" pos:column="9">state<pos:position pos:line="66" pos:column="14"/></name><operator pos:line="66" pos:column="14">.<pos:position pos:line="66" pos:column="15"/></operator><name pos:line="66" pos:column="15">done<pos:position pos:line="66" pos:column="19"/></name></name> <operator pos:line="66" pos:column="20">=<pos:position pos:line="66" pos:column="21"/></operator> <name pos:line="66" pos:column="22">TRUE<pos:position pos:line="66" pos:column="26"/></name></expr>;<pos:position pos:line="66" pos:column="27"/></expr_stmt> <comment type="block" pos:line="66" pos:column="28">/* called just now! */</comment>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">Curl_resolver_cancel<pos:position pos:line="67" pos:column="23"/></name><argument_list pos:line="67" pos:column="23">(<argument><expr><name pos:line="67" pos:column="24">conn<pos:position pos:line="67" pos:column="28"/></name></expr></argument>)<pos:position pos:line="67" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt>

  <if pos:line="69" pos:column="3">if<condition pos:line="69" pos:column="5">(<expr><name><name pos:line="69" pos:column="6">conn<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">-&gt;<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="12">dns_entry<pos:position pos:line="69" pos:column="21"/></name></name></expr>)<pos:position pos:line="69" pos:column="22"/></condition><then pos:line="69" pos:column="22"> <block pos:line="69" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">Curl_resolv_unlock<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><name pos:line="70" pos:column="24">data<pos:position pos:line="70" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="30">conn<pos:position pos:line="70" pos:column="34"/></name><operator pos:line="70" pos:column="34">-&gt;<pos:position pos:line="70" pos:column="39"/></operator><name pos:line="70" pos:column="36">dns_entry<pos:position pos:line="70" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="47"/></expr_stmt> <comment type="block" pos:line="70" pos:column="48">/* done with this */</comment>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">conn<pos:position pos:line="71" pos:column="9"/></name><operator pos:line="71" pos:column="9">-&gt;<pos:position pos:line="71" pos:column="14"/></operator><name pos:line="71" pos:column="11">dns_entry<pos:position pos:line="71" pos:column="20"/></name></name> <operator pos:line="71" pos:column="21">=<pos:position pos:line="71" pos:column="22"/></operator> <name pos:line="71" pos:column="23">NULL<pos:position pos:line="71" pos:column="27"/></name></expr>;<pos:position pos:line="71" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="74" pos:column="3">/* if the transfer was completed in a paused state there can be buffered
     data left to write and then kill */</comment>
  <expr_stmt><expr><call><name pos:line="76" pos:column="3">free<pos:position pos:line="76" pos:column="7"/></name><argument_list pos:line="76" pos:column="7">(<argument><expr><name><name pos:line="76" pos:column="8">data<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">-&gt;<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="14">state<pos:position pos:line="76" pos:column="19"/></name><operator pos:line="76" pos:column="19">.<pos:position pos:line="76" pos:column="20"/></operator><name pos:line="76" pos:column="20">tempwrite<pos:position pos:line="76" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="77" pos:column="3">data<pos:position pos:line="77" pos:column="7"/></name><operator pos:line="77" pos:column="7">-&gt;<pos:position pos:line="77" pos:column="12"/></operator><name pos:line="77" pos:column="9">state<pos:position pos:line="77" pos:column="14"/></name><operator pos:line="77" pos:column="14">.<pos:position pos:line="77" pos:column="15"/></operator><name pos:line="77" pos:column="15">tempwrite<pos:position pos:line="77" pos:column="24"/></name></name> <operator pos:line="77" pos:column="25">=<pos:position pos:line="77" pos:column="26"/></operator> <name pos:line="77" pos:column="27">NULL<pos:position pos:line="77" pos:column="31"/></name></expr>;<pos:position pos:line="77" pos:column="32"/></expr_stmt>

  <comment type="block" pos:line="79" pos:column="3">/* if data-&gt;set.reuse_forbid is TRUE, it means the libcurl client has
     forced us to close this connection. This is ignored for requests taking
     place in a NTLM authentication handshake

     if conn-&gt;bits.close is TRUE, it means that the connection should be
     closed in spite of all our efforts to be nice, due to protocol
     restrictions in our or the server's end

     if premature is TRUE, it means this connection was said to be DONE before
     the entire request operation is complete and thus we can't know in what
     state it is for re-using, so we're forced to close it. In a perfect world
     we can add code that keep track of if we really must close it here or not,
     but currently we have no such detail knowledge.
  */</comment>

  <if pos:line="94" pos:column="3">if<condition pos:line="94" pos:column="5">(<expr><operator pos:line="94" pos:column="6">(<pos:position pos:line="94" pos:column="7"/></operator><name><name pos:line="94" pos:column="7">data<pos:position pos:line="94" pos:column="11"/></name><operator pos:line="94" pos:column="11">-&gt;<pos:position pos:line="94" pos:column="16"/></operator><name pos:line="94" pos:column="13">set<pos:position pos:line="94" pos:column="16"/></name><operator pos:line="94" pos:column="16">.<pos:position pos:line="94" pos:column="17"/></operator><name pos:line="94" pos:column="17">reuse_forbid<pos:position pos:line="94" pos:column="29"/></name></name>
<cpp:if pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">if<pos:position pos:line="95" pos:column="4"/></cpp:directive> <expr><call><name pos:line="95" pos:column="5">defined<pos:position pos:line="95" pos:column="12"/></name><argument_list pos:line="95" pos:column="12">(<argument><expr><name pos:line="95" pos:column="13">USE_NTLM<pos:position pos:line="95" pos:column="21"/></name></expr></argument>)<pos:position pos:line="95" pos:column="22"/></argument_list></call></expr></cpp:if>
      <operator pos:line="96" pos:column="7">&amp;&amp;<pos:position pos:line="96" pos:column="17"/></operator> <operator pos:line="96" pos:column="10">!<pos:position pos:line="96" pos:column="11"/></operator><operator pos:line="96" pos:column="11">(<pos:position pos:line="96" pos:column="12"/></operator><name><name pos:line="96" pos:column="12">conn<pos:position pos:line="96" pos:column="16"/></name><operator pos:line="96" pos:column="16">-&gt;<pos:position pos:line="96" pos:column="21"/></operator><name pos:line="96" pos:column="18">ntlm<pos:position pos:line="96" pos:column="22"/></name><operator pos:line="96" pos:column="22">.<pos:position pos:line="96" pos:column="23"/></operator><name pos:line="96" pos:column="23">state<pos:position pos:line="96" pos:column="28"/></name></name> <operator pos:line="96" pos:column="29">==<pos:position pos:line="96" pos:column="31"/></operator> <name pos:line="96" pos:column="32">NTLMSTATE_TYPE2<pos:position pos:line="96" pos:column="47"/></name> <operator pos:line="96" pos:column="48">||<pos:position pos:line="96" pos:column="50"/></operator>
           <name><name pos:line="97" pos:column="12">conn<pos:position pos:line="97" pos:column="16"/></name><operator pos:line="97" pos:column="16">-&gt;<pos:position pos:line="97" pos:column="21"/></operator><name pos:line="97" pos:column="18">proxyntlm<pos:position pos:line="97" pos:column="27"/></name><operator pos:line="97" pos:column="27">.<pos:position pos:line="97" pos:column="28"/></operator><name pos:line="97" pos:column="28">state<pos:position pos:line="97" pos:column="33"/></name></name> <operator pos:line="97" pos:column="34">==<pos:position pos:line="97" pos:column="36"/></operator> <name pos:line="97" pos:column="37">NTLMSTATE_TYPE2<pos:position pos:line="97" pos:column="52"/></name><operator pos:line="97" pos:column="52">)<pos:position pos:line="97" pos:column="53"/></operator>
<cpp:endif pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">endif<pos:position pos:line="98" pos:column="7"/></cpp:directive></cpp:endif>
     <operator pos:line="99" pos:column="6">)<pos:position pos:line="99" pos:column="7"/></operator> <operator pos:line="99" pos:column="8">||<pos:position pos:line="99" pos:column="10"/></operator> <name><name pos:line="99" pos:column="11">conn<pos:position pos:line="99" pos:column="15"/></name><operator pos:line="99" pos:column="15">-&gt;<pos:position pos:line="99" pos:column="20"/></operator><name pos:line="99" pos:column="17">bits<pos:position pos:line="99" pos:column="21"/></name><operator pos:line="99" pos:column="21">.<pos:position pos:line="99" pos:column="22"/></operator><name pos:line="99" pos:column="22">close<pos:position pos:line="99" pos:column="27"/></name></name> <operator pos:line="99" pos:column="28">||<pos:position pos:line="99" pos:column="30"/></operator> <name pos:line="99" pos:column="31">premature<pos:position pos:line="99" pos:column="40"/></name></expr>)<pos:position pos:line="99" pos:column="41"/></condition><then pos:line="99" pos:column="41"> <block pos:line="99" pos:column="42">{
    <decl_stmt><decl><type><name pos:line="100" pos:column="5">CURLcode<pos:position pos:line="100" pos:column="13"/></name></type> <name pos:line="100" pos:column="14">res2<pos:position pos:line="100" pos:column="18"/></name> <init pos:line="100" pos:column="19">= <expr><call><name pos:line="100" pos:column="21">Curl_disconnect<pos:position pos:line="100" pos:column="36"/></name><argument_list pos:line="100" pos:column="36">(<argument><expr><name pos:line="100" pos:column="37">conn<pos:position pos:line="100" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="43">premature<pos:position pos:line="100" pos:column="52"/></name></expr></argument>)<pos:position pos:line="100" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="100" pos:column="54"/></decl_stmt> <comment type="block" pos:line="100" pos:column="55">/* close connection */</comment>

    <comment type="block" pos:line="102" pos:column="5">/* If we had an error already, make sure we return that one. But
       if we got a new error, return that. */</comment>
    <if pos:line="104" pos:column="5">if<condition pos:line="104" pos:column="7">(<expr><operator pos:line="104" pos:column="8">!<pos:position pos:line="104" pos:column="9"/></operator><name pos:line="104" pos:column="9">result<pos:position pos:line="104" pos:column="15"/></name> <operator pos:line="104" pos:column="16">&amp;&amp;<pos:position pos:line="104" pos:column="26"/></operator> <name pos:line="104" pos:column="19">res2<pos:position pos:line="104" pos:column="23"/></name></expr>)<pos:position pos:line="104" pos:column="24"/></condition><then pos:line="104" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="7">result<pos:position pos:line="105" pos:column="13"/></name> <operator pos:line="105" pos:column="14">=<pos:position pos:line="105" pos:column="15"/></operator> <name pos:line="105" pos:column="16">res2<pos:position pos:line="105" pos:column="20"/></name></expr>;<pos:position pos:line="105" pos:column="21"/></expr_stmt></block></then></if>
  }<pos:position pos:line="106" pos:column="4"/></block></then>
  <else pos:line="107" pos:column="3">else <block pos:line="107" pos:column="8">{
    <comment type="block" pos:line="108" pos:column="5">/* the connection is no longer in use */</comment>
    <if pos:line="109" pos:column="5">if<condition pos:line="109" pos:column="7">(<expr><call><name pos:line="109" pos:column="8">ConnectionDone<pos:position pos:line="109" pos:column="22"/></name><argument_list pos:line="109" pos:column="22">(<argument><expr><name pos:line="109" pos:column="23">data<pos:position pos:line="109" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="29">conn<pos:position pos:line="109" pos:column="33"/></name></expr></argument>)<pos:position pos:line="109" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="35"/></condition><then pos:line="109" pos:column="35"> <block pos:line="109" pos:column="36">{
      <comment type="block" pos:line="110" pos:column="7">/* remember the most recently used connection */</comment>
      <expr_stmt><expr><name><name pos:line="111" pos:column="7">data<pos:position pos:line="111" pos:column="11"/></name><operator pos:line="111" pos:column="11">-&gt;<pos:position pos:line="111" pos:column="16"/></operator><name pos:line="111" pos:column="13">state<pos:position pos:line="111" pos:column="18"/></name><operator pos:line="111" pos:column="18">.<pos:position pos:line="111" pos:column="19"/></operator><name pos:line="111" pos:column="19">lastconnect<pos:position pos:line="111" pos:column="30"/></name></name> <operator pos:line="111" pos:column="31">=<pos:position pos:line="111" pos:column="32"/></operator> <name pos:line="111" pos:column="33">conn<pos:position pos:line="111" pos:column="37"/></name></expr>;<pos:position pos:line="111" pos:column="38"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="113" pos:column="7">infof<pos:position pos:line="113" pos:column="12"/></name><argument_list pos:line="113" pos:column="12">(<argument><expr><name pos:line="113" pos:column="13">data<pos:position pos:line="113" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="19">"Connection #%ld to host %s left intact\n"<pos:position pos:line="113" pos:column="61"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="114" pos:column="13">conn<pos:position pos:line="114" pos:column="17"/></name><operator pos:line="114" pos:column="17">-&gt;<pos:position pos:line="114" pos:column="22"/></operator><name pos:line="114" pos:column="19">connection_id<pos:position pos:line="114" pos:column="32"/></name></name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name pos:line="115" pos:column="13">conn<pos:position pos:line="115" pos:column="17"/></name><operator pos:line="115" pos:column="17">-&gt;<pos:position pos:line="115" pos:column="22"/></operator><name pos:line="115" pos:column="19">bits<pos:position pos:line="115" pos:column="23"/></name><operator pos:line="115" pos:column="23">.<pos:position pos:line="115" pos:column="24"/></operator><name pos:line="115" pos:column="24">httpproxy<pos:position pos:line="115" pos:column="33"/></name></name></expr>?<pos:position pos:line="115" pos:column="34"/></condition><then><expr><name><name pos:line="115" pos:column="34">conn<pos:position pos:line="115" pos:column="38"/></name><operator pos:line="115" pos:column="38">-&gt;<pos:position pos:line="115" pos:column="43"/></operator><name pos:line="115" pos:column="40">proxy<pos:position pos:line="115" pos:column="45"/></name><operator pos:line="115" pos:column="45">.<pos:position pos:line="115" pos:column="46"/></operator><name pos:line="115" pos:column="46">dispname<pos:position pos:line="115" pos:column="54"/></name></name></expr></then><else pos:line="115" pos:column="54">:<expr><name><name pos:line="115" pos:column="55">conn<pos:position pos:line="115" pos:column="59"/></name><operator pos:line="115" pos:column="59">-&gt;<pos:position pos:line="115" pos:column="64"/></operator><name pos:line="115" pos:column="61">host<pos:position pos:line="115" pos:column="65"/></name><operator pos:line="115" pos:column="65">.<pos:position pos:line="115" pos:column="66"/></operator><name pos:line="115" pos:column="66">dispname<pos:position pos:line="115" pos:column="74"/></name></name></expr></else></ternary></expr></argument>)<pos:position pos:line="115" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="76"/></expr_stmt>
    }<pos:position pos:line="116" pos:column="6"/></block></then>
    <else pos:line="117" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="118" pos:column="7">data<pos:position pos:line="118" pos:column="11"/></name><operator pos:line="118" pos:column="11">-&gt;<pos:position pos:line="118" pos:column="16"/></operator><name pos:line="118" pos:column="13">state<pos:position pos:line="118" pos:column="18"/></name><operator pos:line="118" pos:column="18">.<pos:position pos:line="118" pos:column="19"/></operator><name pos:line="118" pos:column="19">lastconnect<pos:position pos:line="118" pos:column="30"/></name></name> <operator pos:line="118" pos:column="31">=<pos:position pos:line="118" pos:column="32"/></operator> <name pos:line="118" pos:column="33">NULL<pos:position pos:line="118" pos:column="37"/></name></expr>;<pos:position pos:line="118" pos:column="38"/></expr_stmt></block></else></if>
  }<pos:position pos:line="119" pos:column="4"/></block></else></if>

  <expr_stmt><expr><operator pos:line="121" pos:column="3">*<pos:position pos:line="121" pos:column="4"/></operator><name pos:line="121" pos:column="4">connp<pos:position pos:line="121" pos:column="9"/></name> <operator pos:line="121" pos:column="10">=<pos:position pos:line="121" pos:column="11"/></operator> <name pos:line="121" pos:column="12">NULL<pos:position pos:line="121" pos:column="16"/></name></expr>;<pos:position pos:line="121" pos:column="17"/></expr_stmt> <comment type="block" pos:line="121" pos:column="18">/* to make the caller of this function better detect that
                    this was either closed or handed over to the connection
                    cache here, and therefore cannot be used from this point on
                 */</comment>
  <expr_stmt><expr><call><name pos:line="125" pos:column="3">Curl_free_request_state<pos:position pos:line="125" pos:column="26"/></name><argument_list pos:line="125" pos:column="26">(<argument><expr><name pos:line="125" pos:column="27">data<pos:position pos:line="125" pos:column="31"/></name></expr></argument>)<pos:position pos:line="125" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="33"/></expr_stmt>

  <return pos:line="127" pos:column="3">return <expr><name pos:line="127" pos:column="10">result<pos:position pos:line="127" pos:column="16"/></name></expr>;<pos:position pos:line="127" pos:column="17"/></return>
}<pos:position pos:line="128" pos:column="2"/></block></function></unit>
