<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1204_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">inflate_stream<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name><name pos:line="2" pos:column="16">struct<pos:position pos:line="2" pos:column="22"/></name> <name pos:line="2" pos:column="23">connectdata<pos:position pos:line="2" pos:column="34"/></name></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">conn<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
               <parameter><decl><type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">SingleRequest<pos:position pos:line="3" pos:column="36"/></name></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">k<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="40"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">allow_restart<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><literal type="number" pos:line="5" pos:column="23">1<pos:position pos:line="5" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">z_stream<pos:position pos:line="6" pos:column="11"/></name> <modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type><name pos:line="6" pos:column="13">z<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><operator pos:line="6" pos:column="17">&amp;<pos:position pos:line="6" pos:column="22"/></operator><name><name pos:line="6" pos:column="18">k<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">-&gt;<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="21">z<pos:position pos:line="6" pos:column="22"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>          <comment type="block" pos:line="6" pos:column="33">/* zlib state structure */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">uInt<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">nread<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><name><name pos:line="7" pos:column="16">z<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">-&gt;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="19">avail_in<pos:position pos:line="7" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">Bytef<pos:position pos:line="8" pos:column="8"/></name> <modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type><name pos:line="8" pos:column="10">orig_in<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><name><name pos:line="8" pos:column="20">z<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">-&gt;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="23">next_in<pos:position pos:line="8" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">status<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>                   <comment type="block" pos:line="9" pos:column="33">/* zlib status */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">CURLcode<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">result<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><name pos:line="10" pos:column="21">CURLE_OK<pos:position pos:line="10" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>   <comment type="block" pos:line="10" pos:column="33">/* Curl_client_write status */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">decomp<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>                 <comment type="block" pos:line="11" pos:column="33">/* Put the decompressed data here. */</comment>

  <comment type="block" pos:line="13" pos:column="3">/* Dynamically allocate a buffer for decompression because it's uncommonly
     large to hold on the stack */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">decomp<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">malloc<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">DSIZ<pos:position pos:line="15" pos:column="23"/></name></expr></argument>)<pos:position pos:line="15" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">decomp<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">==<pos:position pos:line="16" pos:column="15"/></operator> <name pos:line="16" pos:column="16">NULL<pos:position pos:line="16" pos:column="20"/></name></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21"> <block pos:line="16" pos:column="22">{
    <return pos:line="17" pos:column="5">return <expr><call><name pos:line="17" pos:column="12">exit_zlib<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">z<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="25">&amp;<pos:position pos:line="17" pos:column="30"/></operator><name><name pos:line="17" pos:column="26">k<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">-&gt;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="29">zlib_init<pos:position pos:line="17" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="40">CURLE_OUT_OF_MEMORY<pos:position pos:line="17" pos:column="59"/></name></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="20" pos:column="3">/* because the buffer size is fixed, iteratively decompress and transfer to
     the client via client_write. */</comment>
  <for pos:line="22" pos:column="3">for<control pos:line="22" pos:column="6">(<init pos:line="22" pos:column="7">;<pos:position pos:line="22" pos:column="8"/></init><condition pos:line="22" pos:column="8">;<pos:position pos:line="22" pos:column="9"/></condition><incr/>)<pos:position pos:line="22" pos:column="10"/></control> <block pos:line="22" pos:column="11">{
    <comment type="block" pos:line="23" pos:column="5">/* (re)set buffer for decompressed output for every iteration */</comment>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">z<pos:position pos:line="24" pos:column="6"/></name><operator pos:line="24" pos:column="6">-&gt;<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="8">next_out<pos:position pos:line="24" pos:column="16"/></name></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <operator pos:line="24" pos:column="19">(<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">Bytef<pos:position pos:line="24" pos:column="25"/></name> <operator pos:line="24" pos:column="26">*<pos:position pos:line="24" pos:column="27"/></operator><operator pos:line="24" pos:column="27">)<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="28">decomp<pos:position pos:line="24" pos:column="34"/></name></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">z<pos:position pos:line="25" pos:column="6"/></name><operator pos:line="25" pos:column="6">-&gt;<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="8">avail_out<pos:position pos:line="25" pos:column="17"/></name></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">DSIZ<pos:position pos:line="25" pos:column="24"/></name></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">status<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <call><name pos:line="27" pos:column="14">inflate<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">z<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="25">Z_SYNC_FLUSH<pos:position pos:line="27" pos:column="37"/></name></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><name pos:line="28" pos:column="8">status<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">==<pos:position pos:line="28" pos:column="17"/></operator> <name pos:line="28" pos:column="18">Z_OK<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">||<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">status<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">==<pos:position pos:line="28" pos:column="35"/></operator> <name pos:line="28" pos:column="36">Z_STREAM_END<pos:position pos:line="28" pos:column="48"/></name></expr>)<pos:position pos:line="28" pos:column="49"/></condition><then pos:line="28" pos:column="49"> <block pos:line="28" pos:column="50">{
      <expr_stmt><expr><name pos:line="29" pos:column="7">allow_restart<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <literal type="number" pos:line="29" pos:column="23">0<pos:position pos:line="29" pos:column="24"/></literal></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
      <if pos:line="30" pos:column="7">if<condition pos:line="30" pos:column="9">(<expr><operator pos:line="30" pos:column="10">(<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">DSIZ<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">-<pos:position pos:line="30" pos:column="17"/></operator> <name><name pos:line="30" pos:column="18">z<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">-&gt;<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="21">avail_out<pos:position pos:line="30" pos:column="30"/></name></name><operator pos:line="30" pos:column="30">)<pos:position pos:line="30" pos:column="31"/></operator> <operator pos:line="30" pos:column="32">&amp;&amp;<pos:position pos:line="30" pos:column="42"/></operator> <operator pos:line="30" pos:column="35">(<pos:position pos:line="30" pos:column="36"/></operator><operator pos:line="30" pos:column="36">!<pos:position pos:line="30" pos:column="37"/></operator><name><name pos:line="30" pos:column="37">k<pos:position pos:line="30" pos:column="38"/></name><operator pos:line="30" pos:column="38">-&gt;<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="40">ignorebody<pos:position pos:line="30" pos:column="50"/></name></name><operator pos:line="30" pos:column="50">)<pos:position pos:line="30" pos:column="51"/></operator></expr>)<pos:position pos:line="30" pos:column="52"/></condition><then pos:line="30" pos:column="52"> <block pos:line="30" pos:column="53">{
        <expr_stmt><expr><name pos:line="31" pos:column="9">result<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <call><name pos:line="31" pos:column="18">Curl_client_write<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">conn<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="42">CLIENTWRITE_BODY<pos:position pos:line="31" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="60">decomp<pos:position pos:line="31" pos:column="66"/></name></expr></argument>,
                                   <argument><expr><name pos:line="32" pos:column="36">DSIZ<pos:position pos:line="32" pos:column="40"/></name> <operator pos:line="32" pos:column="41">-<pos:position pos:line="32" pos:column="42"/></operator> <name><name pos:line="32" pos:column="43">z<pos:position pos:line="32" pos:column="44"/></name><operator pos:line="32" pos:column="44">-&gt;<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="46">avail_out<pos:position pos:line="32" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
        <comment type="block" pos:line="33" pos:column="9">/* if !CURLE_OK, clean up, return */</comment>
        <if pos:line="34" pos:column="9">if<condition pos:line="34" pos:column="11">(<expr><name pos:line="34" pos:column="12">result<pos:position pos:line="34" pos:column="18"/></name></expr>)<pos:position pos:line="34" pos:column="19"/></condition><then pos:line="34" pos:column="19"> <block pos:line="34" pos:column="20">{
          <expr_stmt><expr><call><name pos:line="35" pos:column="11">free<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">decomp<pos:position pos:line="35" pos:column="22"/></name></expr></argument>)<pos:position pos:line="35" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
          <return pos:line="36" pos:column="11">return <expr><call><name pos:line="36" pos:column="18">exit_zlib<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">z<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="31">&amp;<pos:position pos:line="36" pos:column="36"/></operator><name><name pos:line="36" pos:column="32">k<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">-&gt;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="35">zlib_init<pos:position pos:line="36" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="46">result<pos:position pos:line="36" pos:column="52"/></name></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="54"/></return>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
      }<pos:position pos:line="38" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="40" pos:column="7">/* Done? clean up, return */</comment>
      <if pos:line="41" pos:column="7">if<condition pos:line="41" pos:column="9">(<expr><name pos:line="41" pos:column="10">status<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">==<pos:position pos:line="41" pos:column="19"/></operator> <name pos:line="41" pos:column="20">Z_STREAM_END<pos:position pos:line="41" pos:column="32"/></name></expr>)<pos:position pos:line="41" pos:column="33"/></condition><then pos:line="41" pos:column="33"> <block pos:line="41" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">free<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><name pos:line="42" pos:column="14">decomp<pos:position pos:line="42" pos:column="20"/></name></expr></argument>)<pos:position pos:line="42" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="22"/></expr_stmt>
        <if pos:line="43" pos:column="9">if<condition pos:line="43" pos:column="11">(<expr><call><name pos:line="43" pos:column="12">inflateEnd<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">z<pos:position pos:line="43" pos:column="24"/></name></expr></argument>)<pos:position pos:line="43" pos:column="25"/></argument_list></call> <operator pos:line="43" pos:column="26">==<pos:position pos:line="43" pos:column="28"/></operator> <name pos:line="43" pos:column="29">Z_OK<pos:position pos:line="43" pos:column="33"/></name></expr>)<pos:position pos:line="43" pos:column="34"/></condition><then pos:line="43" pos:column="34">
          <block type="pseudo"><return pos:line="44" pos:column="11">return <expr><call><name pos:line="44" pos:column="18">exit_zlib<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">z<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="31">&amp;<pos:position pos:line="44" pos:column="36"/></operator><name><name pos:line="44" pos:column="32">k<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">zlib_init<pos:position pos:line="44" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="46">result<pos:position pos:line="44" pos:column="52"/></name></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="54"/></return></block></then></if>
        <return pos:line="45" pos:column="9">return <expr><call><name pos:line="45" pos:column="16">exit_zlib<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name pos:line="45" pos:column="26">z<pos:position pos:line="45" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="29">&amp;<pos:position pos:line="45" pos:column="34"/></operator><name><name pos:line="45" pos:column="30">k<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">-&gt;<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="33">zlib_init<pos:position pos:line="45" pos:column="42"/></name></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="44">process_zlib_error<pos:position pos:line="45" pos:column="62"/></name><argument_list pos:line="45" pos:column="62">(<argument><expr><name pos:line="45" pos:column="63">conn<pos:position pos:line="45" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="69">z<pos:position pos:line="45" pos:column="70"/></name></expr></argument>)<pos:position pos:line="45" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="73"/></return>
      }<pos:position pos:line="46" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="48" pos:column="7">/* Done with these bytes, exit */</comment>

      <comment type="block" pos:line="50" pos:column="7">/* status is always Z_OK at this point! */</comment>
      <if pos:line="51" pos:column="7">if<condition pos:line="51" pos:column="9">(<expr><name><name pos:line="51" pos:column="10">z<pos:position pos:line="51" pos:column="11"/></name><operator pos:line="51" pos:column="11">-&gt;<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="13">avail_in<pos:position pos:line="51" pos:column="21"/></name></name> <operator pos:line="51" pos:column="22">==<pos:position pos:line="51" pos:column="24"/></operator> <literal type="number" pos:line="51" pos:column="25">0<pos:position pos:line="51" pos:column="26"/></literal></expr>)<pos:position pos:line="51" pos:column="27"/></condition><then pos:line="51" pos:column="27"> <block pos:line="51" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">free<pos:position pos:line="52" pos:column="13"/></name><argument_list pos:line="52" pos:column="13">(<argument><expr><name pos:line="52" pos:column="14">decomp<pos:position pos:line="52" pos:column="20"/></name></expr></argument>)<pos:position pos:line="52" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="22"/></expr_stmt>
        <return pos:line="53" pos:column="9">return <expr><name pos:line="53" pos:column="16">result<pos:position pos:line="53" pos:column="22"/></name></expr>;<pos:position pos:line="53" pos:column="23"/></return>
      }<pos:position pos:line="54" pos:column="8"/></block></then></if>
    }<pos:position pos:line="55" pos:column="6"/></block></then>
    <elseif pos:line="56" pos:column="5">else <if pos:line="56" pos:column="10">if<condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">allow_restart<pos:position pos:line="56" pos:column="26"/></name> <operator pos:line="56" pos:column="27">&amp;&amp;<pos:position pos:line="56" pos:column="37"/></operator> <name pos:line="56" pos:column="30">status<pos:position pos:line="56" pos:column="36"/></name> <operator pos:line="56" pos:column="37">==<pos:position pos:line="56" pos:column="39"/></operator> <name pos:line="56" pos:column="40">Z_DATA_ERROR<pos:position pos:line="56" pos:column="52"/></name></expr>)<pos:position pos:line="56" pos:column="53"/></condition><then pos:line="56" pos:column="53"> <block pos:line="56" pos:column="54">{
      <comment type="block" pos:line="57" pos:column="7">/* some servers seem to not generate zlib headers, so this is an attempt
         to fix and continue anyway */</comment>

      <expr_stmt><expr><operator pos:line="60" pos:column="7">(<pos:position pos:line="60" pos:column="8"/></operator><name pos:line="60" pos:column="8">void<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">)<pos:position pos:line="60" pos:column="13"/></operator> <call><name pos:line="60" pos:column="14">inflateEnd<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name pos:line="60" pos:column="25">z<pos:position pos:line="60" pos:column="26"/></name></expr></argument>)<pos:position pos:line="60" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>     <comment type="block" pos:line="60" pos:column="33">/* don't care about the return code */</comment>
      <if pos:line="61" pos:column="7">if<condition pos:line="61" pos:column="9">(<expr><call><name pos:line="61" pos:column="10">inflateInit2<pos:position pos:line="61" pos:column="22"/></name><argument_list pos:line="61" pos:column="22">(<argument><expr><name pos:line="61" pos:column="23">z<pos:position pos:line="61" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="26">-<pos:position pos:line="61" pos:column="27"/></operator><name pos:line="61" pos:column="27">MAX_WBITS<pos:position pos:line="61" pos:column="36"/></name></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call> <operator pos:line="61" pos:column="38">!=<pos:position pos:line="61" pos:column="40"/></operator> <name pos:line="61" pos:column="41">Z_OK<pos:position pos:line="61" pos:column="45"/></name></expr>)<pos:position pos:line="61" pos:column="46"/></condition><then pos:line="61" pos:column="46"> <block pos:line="61" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">free<pos:position pos:line="62" pos:column="13"/></name><argument_list pos:line="62" pos:column="13">(<argument><expr><name pos:line="62" pos:column="14">decomp<pos:position pos:line="62" pos:column="20"/></name></expr></argument>)<pos:position pos:line="62" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="22"/></expr_stmt>
        <return pos:line="63" pos:column="9">return <expr><call><name pos:line="63" pos:column="16">exit_zlib<pos:position pos:line="63" pos:column="25"/></name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">z<pos:position pos:line="63" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="29">&amp;<pos:position pos:line="63" pos:column="34"/></operator><name><name pos:line="63" pos:column="30">k<pos:position pos:line="63" pos:column="31"/></name><operator pos:line="63" pos:column="31">-&gt;<pos:position pos:line="63" pos:column="36"/></operator><name pos:line="63" pos:column="33">zlib_init<pos:position pos:line="63" pos:column="42"/></name></name></expr></argument>, <argument><expr><call><name pos:line="63" pos:column="44">process_zlib_error<pos:position pos:line="63" pos:column="62"/></name><argument_list pos:line="63" pos:column="62">(<argument><expr><name pos:line="63" pos:column="63">conn<pos:position pos:line="63" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="69">z<pos:position pos:line="63" pos:column="70"/></name></expr></argument>)<pos:position pos:line="63" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="73"/></return>
      }<pos:position pos:line="64" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="65" pos:column="7">z<pos:position pos:line="65" pos:column="8"/></name><operator pos:line="65" pos:column="8">-&gt;<pos:position pos:line="65" pos:column="13"/></operator><name pos:line="65" pos:column="10">next_in<pos:position pos:line="65" pos:column="17"/></name></name> <operator pos:line="65" pos:column="18">=<pos:position pos:line="65" pos:column="19"/></operator> <name pos:line="65" pos:column="20">orig_in<pos:position pos:line="65" pos:column="27"/></name></expr>;<pos:position pos:line="65" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="66" pos:column="7">z<pos:position pos:line="66" pos:column="8"/></name><operator pos:line="66" pos:column="8">-&gt;<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="10">avail_in<pos:position pos:line="66" pos:column="18"/></name></name> <operator pos:line="66" pos:column="19">=<pos:position pos:line="66" pos:column="20"/></operator> <name pos:line="66" pos:column="21">nread<pos:position pos:line="66" pos:column="26"/></name></expr>;<pos:position pos:line="66" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name pos:line="67" pos:column="7">allow_restart<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">=<pos:position pos:line="67" pos:column="22"/></operator> <literal type="number" pos:line="67" pos:column="23">0<pos:position pos:line="67" pos:column="24"/></literal></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>
      <continue pos:line="68" pos:column="7">continue;<pos:position pos:line="68" pos:column="16"/></continue>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if></elseif>
    <else pos:line="70" pos:column="5">else <block pos:line="70" pos:column="10">{                      <comment type="block" pos:line="70" pos:column="33">/* Error; exit loop, handle below */</comment>
      <expr_stmt><expr><call><name pos:line="71" pos:column="7">free<pos:position pos:line="71" pos:column="11"/></name><argument_list pos:line="71" pos:column="11">(<argument><expr><name pos:line="71" pos:column="12">decomp<pos:position pos:line="71" pos:column="18"/></name></expr></argument>)<pos:position pos:line="71" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="20"/></expr_stmt>
      <return pos:line="72" pos:column="7">return <expr><call><name pos:line="72" pos:column="14">exit_zlib<pos:position pos:line="72" pos:column="23"/></name><argument_list pos:line="72" pos:column="23">(<argument><expr><name pos:line="72" pos:column="24">z<pos:position pos:line="72" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="27">&amp;<pos:position pos:line="72" pos:column="32"/></operator><name><name pos:line="72" pos:column="28">k<pos:position pos:line="72" pos:column="29"/></name><operator pos:line="72" pos:column="29">-&gt;<pos:position pos:line="72" pos:column="34"/></operator><name pos:line="72" pos:column="31">zlib_init<pos:position pos:line="72" pos:column="40"/></name></name></expr></argument>, <argument><expr><call><name pos:line="72" pos:column="42">process_zlib_error<pos:position pos:line="72" pos:column="60"/></name><argument_list pos:line="72" pos:column="60">(<argument><expr><name pos:line="72" pos:column="61">conn<pos:position pos:line="72" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="67">z<pos:position pos:line="72" pos:column="68"/></name></expr></argument>)<pos:position pos:line="72" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="72" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="71"/></return>
    }<pos:position pos:line="73" pos:column="6"/></block></else></if>
  }<pos:position pos:line="74" pos:column="4"/></block></for>
  <comment type="block" pos:line="75" pos:column="3">/* Will never get here */</comment>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
