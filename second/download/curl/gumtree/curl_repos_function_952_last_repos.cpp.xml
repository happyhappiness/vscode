<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_952_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">timeval<pos:position pos:line="1" pos:column="15"/></name></name></type> <name pos:line="1" pos:column="16">tvnow<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/*
  ** GetTickCount() is available on _all_ Windows versions from W95 up
  ** to nowadays. Returns milliseconds elapsed since last system boot,
  ** increases monotonically and wraps once 49.7 days have elapsed.
  **
  ** GetTickCount64() is available on Windows version from Windows Vista
  ** and Windows Server 2008 up to nowadays. The resolution of the
  ** function is limited to the resolution of the system timer, which
  ** is typically in the range of 10 milliseconds to 16 milliseconds.
  */</comment>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">timeval<pos:position pos:line="13" pos:column="17"/></name></name></type> <name pos:line="13" pos:column="18">now<pos:position pos:line="13" pos:column="21"/></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>
<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><call><name pos:line="14" pos:column="5">defined<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">_WIN32_WINNT<pos:position pos:line="14" pos:column="25"/></name></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call> <operator pos:line="14" pos:column="27">&amp;&amp;<pos:position pos:line="14" pos:column="37"/></operator> <operator pos:line="14" pos:column="30">(<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="31">_WIN32_WINNT<pos:position pos:line="14" pos:column="43"/></name> <operator pos:line="14" pos:column="44">&gt;=<pos:position pos:line="14" pos:column="49"/></operator> <literal type="number" pos:line="14" pos:column="47">0x0600<pos:position pos:line="14" pos:column="53"/></literal><operator pos:line="14" pos:column="53">)<pos:position pos:line="14" pos:column="54"/></operator></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">ULONGLONG<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">milliseconds<pos:position pos:line="15" pos:column="25"/></name> <init pos:line="15" pos:column="26">= <expr><call><name pos:line="15" pos:column="28">GetTickCount64<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">()<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="45"/></decl_stmt>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">DWORD<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">milliseconds<pos:position pos:line="17" pos:column="21"/></name> <init pos:line="17" pos:column="22">= <expr><call><name pos:line="17" pos:column="24">GetTickCount<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">()<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="39"/></decl_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">now<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">.<pos:position pos:line="19" pos:column="7"/></operator><name pos:line="19" pos:column="7">tv_sec<pos:position pos:line="19" pos:column="13"/></name></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call pos:line="19" pos:column="16">(<name pos:line="19" pos:column="17">long<pos:position pos:line="19" pos:column="21"/></name>)<argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">milliseconds<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">/<pos:position pos:line="19" pos:column="37"/></operator> <literal type="number" pos:line="19" pos:column="38">1000<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">now<pos:position pos:line="20" pos:column="6"/></name><operator pos:line="20" pos:column="6">.<pos:position pos:line="20" pos:column="7"/></operator><name pos:line="20" pos:column="7">tv_usec<pos:position pos:line="20" pos:column="14"/></name></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">milliseconds<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">%<pos:position pos:line="20" pos:column="32"/></operator> <literal type="number" pos:line="20" pos:column="33">1000<pos:position pos:line="20" pos:column="37"/></literal><operator pos:line="20" pos:column="37">)<pos:position pos:line="20" pos:column="38"/></operator> <operator pos:line="20" pos:column="39">*<pos:position pos:line="20" pos:column="40"/></operator> <literal type="number" pos:line="20" pos:column="41">1000<pos:position pos:line="20" pos:column="45"/></literal></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
  <return pos:line="21" pos:column="3">return <expr><name pos:line="21" pos:column="10">now<pos:position pos:line="21" pos:column="13"/></name></expr>;<pos:position pos:line="21" pos:column="14"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
