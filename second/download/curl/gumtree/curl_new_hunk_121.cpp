"\n"
, stdout);
 fputs(
"              If  this  option  is  used  twice, the second will again disable\n"
"              silent failure.\n"
"\n"
"       --ftp-account [data]\n"
"              (FTP) When an FTP server asks for \"account data\" after user name\n"
"              and  password has been provided, this data is sent off using the\n"
"              ACCT command. (Added in 7.13.0)\n"
"\n"
"              If this option is used twice, the second will override the  pre-\n"
"              vious use.\n"
"\n"
"       --ftp-create-dirs\n"
, stdout);
 fputs(
"              (FTP)  When  an  FTP URL/operation uses a path that doesn't cur-\n"
"              rently exist on the server, the standard behavior of curl is  to\n"
"              fail.  Using  this  option,  curl will instead attempt to create\n"
"              missing directories. (Added in 7.10.7)\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              silent failure.\n"
"\n"
"       --ftp-pasv\n"
"              (FTP)  Use  PASV  when transfering. PASV is the internal default\n"
, stdout);
 fputs(
"              behavior, but using this option can be used to override a previ-\n"
"              ous --ftp-port option. (Added in 7.11.0)\n"
"\n"
"              If  this  option  is  used  twice, the second will again disable\n"
"              silent failure.\n"
"\n"
"       --ftp-ssl\n"
"              (FTP) Make the FTP connection switch to use SSL/TLS.  (Added  in\n"
"              7.11.0)\n"
"\n"
"              If  this  option  is  used  twice, the second will again disable\n"
"              this.\n"
"\n"
"       -F/--form <name=content>\n"
, stdout);
 fputs(
"              (HTTP) This lets curl emulate a filled in form in which  a  user\n"
"              has  pressed  the  submit  button. This causes curl to POST data\n"
"              using the Content-Type multipart/form-data according to RFC1867.\n"
"              This  enables  uploading of binary files etc. To force the 'con-\n"
"              tent' part to be a file, prefix the file name with an @ sign. To\n"
"              just get the content part from a file, prefix the file name with\n"
, stdout);
 fputs(
"              the letter <. The difference between @ and  <  is  then  that  @\n"
"              makes  a  file  get attached in the post as a file upload, while\n"
"              the < makes a text field and just get the contents for that text\n"
"              field from a file.\n"
"\n"
"              Example,  to send your password file to the server, where 'pass-\n"
"              word' is the name of the form-field to which /etc/passwd will be\n"
"              the input:\n"
"\n"
, stdout);
 fputs(
"              curl -F password=@/etc/passwd www.mypasswords.com\n"
"\n"
"              To  read  the file's content from stdin instead of a file, use -\n"
"              where the file name should've been. This goes for both @  and  <\n"
"              constructs.\n"
"\n"
"              You  can  also  tell  curl  what  Content-Type  to  use by using\n"
"              'type=', in a manner similar to:\n"
"\n"
"              curl -F \"web=@index.html;type=text/html\" url.com\n"
"\n"
"              or\n"
"\n"
, stdout);
 fputs(
"              curl -F \"name=daniel;type=text/foo\" url.com\n"
"\n"
"              See further examples and details in the MANUAL.\n"
"\n"
"              This option can be used multiple times.\n"
"\n"
"       -g/--globoff\n"
"              This option switches off the \"URL globbing parser\". When you set\n"
"              this  option, you can specify URLs that contain the letters {}[]\n"
"              without having them being interpreted by curl itself. Note  that\n"
, stdout);
 fputs(
"              these  letters are not normal legal URL contents but they should\n"
"              be encoded according to the URI standard.\n"
"\n"
"       -G/--get\n"
"              When used,  this  option  will  make  all  data  specified  with\n"
"              -d/--data  or  --data-binary  to  be  used in a HTTP GET request\n"
"              instead of the POST request that otherwise would  be  used.  The\n"
"              data will be appended to the URL with a '?'  separator.\n"
"\n"
, stdout);
 fputs(
"              If  used  in  combination with -I, the POST data will instead be\n"
"              appended to the URL with a HEAD request.\n"
"\n"
"              If used multiple times, nothing special happens.\n"
"\n"
"       -h/--help\n"
"              Usage help.\n"
"\n"
"       -H/--header <header>\n"
"              (HTTP) Extra header to use when getting  a  web  page.  You  may\n"
"              specify any number of extra headers. Note that if you should add\n"
, stdout);
 fputs(
"              a custom header that has the same name as one  of  the  internal\n"
"              ones  curl  would  use,  your externally set header will be used\n"
"              instead of the internal one. This allows you to make even trick-\n"
"              ier  stuff  than  curl would normally do. You should not replace\n"
"              internally set  headers  without  knowing  perfectly  well  what\n"
"              you're doing. Replacing an internal header with one without con-\n"
, stdout);
 fputs(
"              tent on the right side of the colon  will  prevent  that  header\n"
"              from appearing.\n"
"\n"
"              See also the -A/--user-agent and -e/--referer options.\n"
"\n"
"              This  option  can  be  used multiple times to add/replace/remove\n"
"              multiple headers.\n"
"\n"
"       -i/--include\n"
"              (HTTP) Include the HTTP-header in the  output.  The  HTTP-header\n"
"              includes  things  like  server-name, date of the document, HTTP-\n"
, stdout);
 fputs(
"              version and more...\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              header include.\n"
"\n"
"       --interface <name>\n"
"              Perform  an operation using a specified interface. You can enter\n"
"              interface name, IP address or host name. An example  could  look\n"
"              like:\n"
"\n"
"               curl --interface eth0:1 http://www.netscape.com/\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
, stdout);
 fputs(
"       -I/--head\n"
"              (HTTP/FTP/FILE) Fetch the HTTP-header only! HTTP-servers feature\n"
"              the  command  HEAD which this uses to get nothing but the header\n"
"              of a document. When used on a FTP or FILE  file,  curl  displays\n"
"              the file size and last modification time only.\n"
"\n"
"              If  this  option  is  used  twice, the second will again disable\n"
"              header only.\n"
"\n"
"       -j/--junk-session-cookies\n"
, stdout);
 fputs(
"              (HTTP) When curl is told to read cookies from a given file, this\n"
"              option  will  make  it  discard all \"session cookies\". This will\n"
"              basically have the same effect as if a new session  is  started.\n"
"              Typical  browsers  always  discard  session cookies when they're\n"
"              closed down. (Added in 7.9.7)\n"
"\n"
"              If this option is used several times, each occurrence will  tog-\n"
"              gle this on/off.\n"
"\n"
"       -k/--insecure\n"
, stdout);
 fputs(
"              (SSL)  This  option explicitly allows curl to perform \"insecure\"\n"
"              SSL connections and transfers. Starting with curl 7.10, all  SSL\n"
"              connections  will be attempted to be made secure by using the CA\n"
"              certificate bundle installed by default. This makes all  connec-\n"
"              tions  considered  \"insecure\"  to  fail  unless -k/--insecure is\n"
"              used.\n"
"\n"
"              If this option is used twice, the second time will again disable\n"
, stdout);
 fputs(
"              it.\n"
"\n"
"       --key <key>\n"
"              (SSL)  Private key file name. Allows you to provide your private\n"
"              key in this separate file.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --key-type <type>\n"
"              (SSL)  Private key file type. Specify which type your --key pro-\n"
"              vided private key is. DER, PEM and ENG are supported.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
, stdout);
 fputs(
"       --krb4 <level>\n"
"              (FTP) Enable kerberos4 authentication and use. The level must be\n"
"              entered and should be one of 'clear', 'safe', 'confidential'  or\n"
"              'private'.  Should  you  use  a  level that is not one of these,\n"
"              'private' will instead be used.\n"
"\n"
"              This option requires that the library was built  with  kerberos4\n"
"              support.  This  is  not  very common. Use -V/--version to see if\n"
, stdout);
 fputs(
"              your curl supports it.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -K/--config <config file>\n"
"              Specify  which config file to read curl arguments from. The con-\n"
"              fig file is a text file in which command line arguments  can  be\n"
"              written  which  then will be used as if they were written on the\n"
"              actual command line. Options and their parameters must be speci-\n"
, stdout);
 fputs(
"              fied  on  the same config file line. If the parameter is to con-\n"
"              tain white spaces, the parameter must be inclosed within quotes.\n"
"              If  the  first  column  of a config line is a '#' character, the\n"
"              rest of the line will be treated as a comment.\n"
"\n"
"              Specify the filename as '-' to make  curl  read  the  file  from\n"
"              stdin.\n"
"\n"
"              Note  that  to  be able to specify a URL in the config file, you\n"
, stdout);
 fputs(
"              need to specify it using the --url option,  and  not  by  simply\n"
"              writing  the  URL  on its own line. So, it could look similar to\n"
"              this:\n"
"\n"
"              url = \"http://curl.haxx.se/docs/\"\n"
"\n"
"              This option can be used multiple times.\n"
"\n"
"       --limit-rate <speed>\n"
"              Specify the maximum transfer rate you want  curl  to  use.  This\n"
"              feature is useful if you have a limited pipe and you'd like your\n"
, stdout);
 fputs(
"              transfer not use your entire bandwidth.\n"
"\n"
"              The given speed is measured in bytes/second, unless a suffix  is\n"
"              appended.   Appending  'k' or 'K' will count the number as kilo-\n"
"              bytes, 'm' or M' makes it megabytes while 'g' or  'G'  makes  it\n"
"              gigabytes. Examples: 200K, 3m and 1G.\n"
"\n"
"              If  you  are also using the -Y/--speed-limit option, that option\n"
, stdout);
 fputs(
"              will  take  precedence  and  might  cripple  the   rate-limiting\n"
"              slightly, to help keeping the speed-limit logic working.\n"
"\n"
"              This option was introduced in curl 7.10.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -l/--list-only\n"
"              (FTP) When listing an FTP directory, this switch forces a  name-\n"
"              only  view.   Especially useful if you want to machine-parse the\n"
, stdout);
 fputs(
"              contents of an FTP directory since  the  normal  directory  view\n"
"              doesn't use a standard look or format.\n"
"\n"
"              This  option  causes  an  FTP NLST command to be sent.  Some FTP\n"
"              servers list only files in their response to NLST; they  do  not\n"
"              include subdirectories and symbolic links.\n"
"\n"
"              If this option is used twice, the second will again disable list\n"
"              only.\n"
"\n"
"       -L/--location\n"
, stdout);
 fputs(
"              (HTTP/HTTPS) If the server reports that the requested page has a\n"
"              different  location  (indicated  with the header line Location:)\n"
"              this flag will let curl attempt to reattempt the get on the  new\n"
"              place.  If used together with -i/--include or -I/--head, headers\n"
"              from all requested pages will be  shown.  If  authentication  is\n"
"              used,  curl  will only send its credentials to the initial host,\n"
, stdout);
 fputs(
"              so if a redirect takes curl to a different host, it won't inter-\n"
"              cept  the  user+password.  See also --location-trusted on how to\n"
"              change this.\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              location following.\n"
"\n"
"       --location-trusted\n"
"              (HTTP/HTTPS) Like -L/--location, but will allow sending the name\n"
"              + password to all hosts that the site may redirect to. This  may\n"
, stdout);
 fputs(
"              or may not introduce a security breach if the site redirects you\n"
"              do a site to which you'll send your authentication  info  (which\n"
"              is plaintext in the case of HTTP Basic authentication).\n"
"\n"
"              If  this  option  is  used  twice, the second will again disable\n"
"              location following.\n"
"\n"
"       --max-filesize <bytes>\n"
"              Specify the maximum size (in bytes) of a file  to  download.  If\n"
, stdout);
 fputs(
"              the  file requested is larger than this value, the transfer will\n"
"              not start and curl will return with exit code 63.\n"
"\n"
"              NOTE: The file size is not always known prior to  download,  and\n"
"              for such files this option has no effect even if the file trans-\n"
"              fer ends up being larger than this given  limit.  This  concerns\n"
"              both FTP and HTTP transfers.\n"
"\n"
"       -m/--max-time <seconds>\n"
, stdout);
 fputs(
"              Maximum  time  in  seconds that you allow the whole operation to\n"
"              take.  This is useful for preventing your batch jobs from  hang-\n"
"              ing  for  hours  due to slow networks or links going down.  This\n"
"              doesn't work fully in win32 systems.  See  also  the  --connect-\n"
"              timeout option.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -M/--manual\n"
"              Manual. Display the huge help text.\n"
"\n"
, stdout);
 fputs(
"       -n/--netrc\n"
"              Makes curl scan the .netrc file in the user's home directory for\n"
"              login name and password. This is typically used for ftp on unix.\n"
"              If used with http, curl will  enable  user  authentication.  See\n"
"              netrc(4) or ftp(1) for details on the file format. Curl will not\n"
"              complain if that file hasn't the right  permissions  (it  should\n"
"              not  be  world  nor  group  readable).  The environment variable\n"
, stdout);
 fputs(
"              \"HOME\" is used to find the home directory.\n"
"\n"
"              A quick and very simple example of how  to  setup  a  .netrc  to\n"
"              allow  curl to ftp to the machine host.domain.com with user name\n"
"              'myself' and password\n"
"\n"
"              machine host.domain.com login myself password secret\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              netrc usage.\n"
"\n"
"       --netrc-optional\n"
, stdout);
 fputs(
"              Very  similar to --netrc, but this option makes the .netrc usage\n"
"              optional and not mandatory as the --netrc does.\n"
"\n"
"       --negotiate\n"
"              (HTTP) Enables GSS-Negotiate authentication.  The  GSS-Negotiate\n"
"              method was designed by Microsoft and is used in their web appli-\n"
"              cations. It is  primarily  meant  as  a  support  for  Kerberos5\n"
"              authentication but may be also used along with another authenti-\n"
, stdout);
 fputs(
"              cation methods. For  more  information  see  IETF  draft  draft-\n"
"              brezak-spnego-http-04.txt. (Added in 7.10.6)\n"
"\n"
"              This option requires that the library was built with GSSAPI sup-\n"
"              port. This is not very common. Use -V/--version to see  if  your\n"
"              version supports GSS-Negotiate.\n"
"\n"
"              If  this option is used several times, the following occurrences\n"
"              make no difference.\n"
"\n"
"       -N/--no-buffer\n"
, stdout);
 fputs(
"              Disables the buffering of the output stream. In normal work sit-\n"
"              uations,  curl  will  use a standard buffered output stream that\n"
"              will have the effect that it will output the data in chunks, not\n"
"              necessarily  exactly  when  the data arrives.  Using this option\n"
"              will disable that buffering.\n"
"\n"
"              If this option is used twice, the second will  again  switch  on\n"
"              buffering.\n"
"\n"
, stdout);
 fputs(
"       --ntlm (HTTP)  Enables  NTLM  authentication.  The  NTLM authentication\n"
"              method was designed by Microsoft and is used by IIS web servers.\n"
"              It is a proprietary protocol, reversed engineered by clever peo-\n"
"              ple and implemented in curl based on their efforts. This kind of\n"
"              behavior  should  not be endorsed, you should encourage everyone\n"
"              who uses NTLM to switch to a public and  documented  authentica-\n"
, stdout);
 fputs(
"              tion method instead. Such as Digest. (Added in 7.10.6)\n"
"\n"
"              If  you  want to enable NTLM for your proxy authentication, then\n"
"              use --proxy-ntlm.\n"
"\n"
"              This option requires that the library was built  with  SSL  sup-\n"
"              port. Use -V/--version to see if your curl supports NTLM.\n"
"\n"
"              If  this option is used several times, the following occurrences\n"
"              make no difference.\n"
"\n"
"       -o/--output <file>\n"
, stdout);
 fputs(
"              Write output to <file> instead of stdout. If you are using {} or\n"
"              []  to  fetch  multiple documents, you can use '#' followed by a\n"
"              number in the <file> specifier. That variable will  be  replaced\n"
"              with the current string for the URL being fetched. Like in:\n"
"\n"
"                curl http://{one,two}.site.com -o \"file_#1.txt\"\n"
"\n"
"              or use several variables like:\n"
"\n"
"                curl http://{site,host}.host[1-5].com -o \"#1_#2\"\n"
"\n"
, stdout);
 fputs(
"              You  may  use  this  option  as many times as you have number of\n"
"              URLs.\n"
"\n"
"              See also the --create-dirs option to create the  local  directo-\n"
"              ries dynamically.\n"
"\n"
"       -O/--remote-name\n"
"              Write  output to a local file named like the remote file we get.\n"
"              (Only the file part of the remote file is used, the path is  cut\n"
"              off.)\n"
"\n"
"              You  may  use  this  option  as many times as you have number of\n"
, stdout);
 fputs(
"              URLs.\n"
"\n"
"       --pass <phrase>\n"
"              (SSL) Pass phrase for the private key\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --proxy-basic\n"
"              Tells  curl  to use HTTP Basic authentication when communicating\n"
"              with the given proxy. Use --basic for enabling HTTP Basic with a\n"
"              remote  host.  Basic  is  the default authentication method curl\n"
"              uses with proxies.\n"
"\n"
, stdout);
 fputs(
"              If this option is used twice,  the  second  will  again  disable\n"
"              proxy HTTP Basic authentication.\n"
"\n"
"       --proxy-digest\n"
"              Tells  curl to use HTTP Digest authentication when communicating\n"
"              with the given proxy. Use --digest for enabling HTTP Digest with\n"
"              a remote host.\n"
"\n"
"              If  this  option  is  used  twice, the second will again disable\n"
"              proxy HTTP Digest.\n"
"\n"
"       --proxy-ntlm\n"
, stdout);
 fputs(
"              Tells curl to use HTTP NTLM  authentication  when  communicating\n"
"              with the given proxy. Use --ntlm for enabling NTLM with a remote\n"
"              host.\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              proxy HTTP NTLM.\n"
"       -p/--proxytunnel\n"
"              When  an HTTP proxy is used (-x/--proxy), this option will cause\n"
"              non-HTTP protocols  to  attempt  to  tunnel  through  the  proxy\n"
, stdout);
 fputs(
"              instead  of merely using it to do HTTP-like operations. The tun-\n"
"              nel approach is made with the HTTP  proxy  CONNECT  request  and\n"
"              requires that the proxy allows direct connect to the remote port\n"
"              number curl wants to tunnel through to.\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              proxy tunnel.\n"
"\n"
"       -P/--ftp-port <address>\n"
, stdout);
 fputs(
"              (FTP) Reverses the initiator/listener roles when connecting with\n"
"              ftp. This switch makes Curl use  the  PORT  command  instead  of\n"
"              PASV.  In  practice,  PORT  tells  the  server to connect to the\n"
"              client's specified address and port, while PASV asks the  server\n"
"              for  an  ip  address and port to connect to. <address> should be\n"
"              one of:\n"
"\n"
"              interface\n"
, stdout);
 fputs(
"                     i.e \"eth0\" to specify which interface's  IP  address  you\n"
"                     want to use  (Unix only)\n"
"\n"
"              IP address\n"
"                     i.e \"192.168.10.1\" to specify exact IP number\n"
"\n"
"              host name\n"
"                     i.e \"my.host.domain\" to specify machine\n"
"\n"
"              -      (any  single-letter string) to make it pick the machine's\n"
"                     default\n"
"\n"
"       If this option is used several times, the last one will be  used.  Dis-\n"
, stdout);
 fputs(
"       able  the  use  of PORT with --ftp-pasv. Disable the attempt to use the\n"
"       EPRT command instead of PORT by using --disable-eprt.  EPRT  is  really\n"
"       PORT++.\n"
"\n"
"       -q     If  used  as  the  first  parameter  on  the  command  line, the\n"
"              $HOME/.curlrc file will not be read and used as a config file.\n"
"\n"
"       -Q/--quote <comand>\n"
"              (FTP) Send an arbitrary command to the remote FTP server.  Quote\n"
, stdout);
 fputs(
"              commands  are  sent  BEFORE  the  transfer is taking place (just\n"
"              after the initial PWD command to be  exact).  To  make  commands\n"
"              take  place after a successful transfer, prefix them with a dash\n"
"              '-'. To make commands get sent after libcurl has changed working\n"
"              directory,  just before the transfer command(s), prefix the com-\n"
"              mand with '+'. You may specify any amount of  commands.  If  the\n"
, stdout);
 fputs(
"              server returns failure for one of the commands, the entire oper-\n"
"              ation will be aborted. You must send syntactically  correct  FTP\n"
"              commands as RFC959 defines.\n"
"\n"
"              This option can be used multiple times.\n"
"\n"
"       --random-file <file>\n"
"              (HTTPS)  Specify  the  path name to file containing what will be\n"
"              considered as random data. The data is used to seed  the  random\n"
, stdout);
 fputs(
"              engine for SSL connections.  See also the --egd-file option.\n"
"\n"
"       -r/--range <range>\n"
"              (HTTP/FTP) Retrieve a byte range (i.e a partial document) from a\n"
"              HTTP/1.1 or FTP server. Ranges can be specified in a  number  of\n"
"              ways.\n"
"\n"
"              0-499     specifies the first 500 bytes\n"
"\n"
"              500-999   specifies the second 500 bytes\n"
"\n"
"              -500      specifies the last 500 bytes\n"
"\n"
, stdout);
 fputs(
"              9500      specifies the bytes from offset 9500 and forward\n"
"\n"
"              0-0,-1    specifies the first and last byte only(*)(H)\n"
"\n"
"              500-700,600-799\n"
"                        specifies 300 bytes from offset 500(H)\n"
"\n"
"              100-199,500-599\n"
"                        specifies two separate 100 bytes ranges(*)(H)\n"
"\n"
"       (*)  =  NOTE  that this will cause the server to reply with a multipart\n"
"       response!\n"
"\n"
, stdout);
 fputs(
"       You should also be aware that many HTTP/1.1 servers do  not  have  this\n"
"       feature  enabled,  so  that  when  you  attempt  to get a range, you'll\n"
"       instead get the whole document.\n"
"\n"
"       FTP  range  downloads  only  support  the  simple  syntax  'start-stop'\n"
"       (optionally with one of the numbers omitted). It depends on the non-RFC\n"
"       command SIZE.\n"
"\n"
"       If this option is used several times, the last one will be used.\n"
"\n"
"       -R/--remote-time\n"
, stdout);
 fputs(
"              When used, this will make libcurl  attempt  to  figure  out  the\n"
"              timestamp  of the remote file, and if that is available make the\n"
"              local file get that same timestamp.\n"
"\n"
"              If this option is used twice,  the  second  time  disables  this\n"
"              again.\n"
"\n"
"       --retry <num>\n"
"              If  a  transient  error is returned when curl tries to perform a\n"
"              transfer, it will retry this number of times before  giving  up.\n"
, stdout);
 fputs(
"              Setting  the  number to 0 makes curl do no retries (which is the\n"
"              default). Transient error means either: a timeout,  an  FTP  5xx\n"
"              response code or an HTTP 5xx response code.\n"
"\n"
"              When  curl  is about to retry a transfer, it will first wait one\n"
"              second and then for all forthcoming retries it will  double  the\n"
"              waiting  time until it reaches 10 minutes which then will be the\n"
, stdout);
 fputs(
"              delay between the rest of the retries.  By  using  --retry-delay\n"
"              you   disable  this  exponential  backoff  algorithm.  See  also\n"
"              --retry-max-time to limit the total time  allowed  for  retries.\n"
"              (Option added in 7.12.3)\n"
"\n"
"              If  this  option  is  used  multiple  times, the last occurrence\n"
"              decide the amount.\n"
"\n"
"       --retry-delay <seconds>\n"
"              Make curl sleep this amount of time between each  retry  when  a\n"
, stdout);
 fputs(
"              transfer  has  failed  with  a  transient  error (it changes the\n"
"              default backoff time algorithm between retries). This option  is\n"
"              only  interesting if --retry is also used. Setting this delay to\n"
"              zero will make curl use the default backoff time.  (Option added\n"
"              in 7.12.3)\n"
"\n"
"              If  this  option  is  used  multiple  times, the last occurrence\n"
"              decide the amount.\n"
"\n"
"       --retry-max-time <seconds>\n"
, stdout);
 fputs(
"              The retry timer is reset  before  the  first  transfer  attempt.\n"
"              Retries will be done as usual (see --retry) as long as the timer\n"
"              hasn't reached this given limit. Notice that if the timer hasn't\n"
"              reached  the  limit, the request will be made and while perform-\n"
"              ing, it may take longer than this given time period. To limit  a\n"
"              single  request's  maximum  time,  use  -m/--max-time.  Set this\n"
, stdout);
 fputs(
"              option to zero to not timeout retries. (Option added in 7.12.3)\n"
"\n"
"              If this option is  used  multiple  times,  the  last  occurrence\n"
"              decide the amount.\n"
"\n"
"       -s/--silent\n"
"              Silent mode. Don't show progress meter or error messages.  Makes\n"
"              Curl mute.\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              mute.\n"
"\n"
"       -S/--show-error\n"
, stdout);
 fputs(
"              When  used with -s it makes curl show error message if it fails.\n"
"              If this option is used twice, the second will again disable show\n"
"              error.\n"
"\n"
"       --socks <host[:port]>\n"
"              Use the specified SOCKS5 proxy. If the port number is not speci-\n"
"              fied, it is assumed at port 1080. (Option added in 7.11.1)\n"
"\n"
"              This option overrides any previous use of  -x/--proxy,  as  they\n"
"              are mutually exclusive.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --stderr <file>\n"
"              Redirect all writes to stderr to the specified file instead.  If\n"
"              the  file  name is a plain '-', it is instead written to stdout.\n"
"              This option has no point when you're using a shell  with  decent\n"
"              redirecting capabilities.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --tcp-nodelay\n"
, stdout);
 fputs(
"              Turn on the TCP_NODELAY option. See the curl_easy_setopt(3)  man\n"
"              page for details about this option. (Added in 7.11.2)\n"
"\n"
"              If  this  option  is used several times, each occurrence toggles\n"
"              this on/off.\n"
"\n"
"       -t/--telnet-option <OPT=val>\n"
"              Pass options to the telnet protocol. Supported options are:\n"
"\n"
"              TTYPE=<term> Sets the terminal type.\n"
"\n"
"              XDISPLOC=<X display> Sets the X display location.\n"
"\n"
, stdout);
 fputs(
"              NEW_ENV=<var,val> Sets an environment variable.\n"
"\n"
"       -T/--upload-file <file>\n"
"              This transfers the specified local file to the  remote  URL.  If\n"
"              there is no file part in the specified URL, Curl will append the\n"
"              local file name. NOTE that you must use a trailing / on the last\n"
"              directory  to really prove to Curl that there is no file name or\n"
"              curl will think that your last directory name is the remote file\n"
, stdout);
 fputs(
"              name to use. That will most likely cause the upload operation to\n"
"              fail. If this is used on a http(s) server, the PUT command  will\n"
"              be used.\n"
"\n"
"              Use  the file name \"-\" (a single dash) to use stdin instead of a\n"
"              given file.\n"
"\n"
"              Before 7.10.8, when this option was used several times, the last\n"
"              one was used.\n"
"\n"
"              In curl 7.10.8 and later, you can specify one -T for each URL on\n"
, stdout);
 fputs(
"              the command line. Each -T + URL pair specifies  what  to  upload\n"
"              and  to where. curl also supports \"globbing\" of the -T argument,\n"
"              meaning that you can upload multiple files to a  single  URL  by\n"
"              using  the  same  URL  globbing style supported in the URL, like\n"
"              this:\n"
"\n"
"              curl -T \"{file1,file2}\" http://www.uploadtothissite.com\n"
"\n"
"              or even\n"
"\n"
, stdout);
 fputs(
"              curl -T \"img[1-1000].png\" ftp://ftp.picturemania.com/upload/\n"
"\n"
"       --trace <file>\n"
"              Enables a full trace dump of all  incoming  and  outgoing  data,\n"
"              including descriptive information, to the given output file. Use\n"
"              \"-\" as filename to have the output sent to stdout.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"              (Added in 7.9.7)\n"
"\n"
"       --trace-ascii <file>\n"
, stdout);
 fputs(
"              Enables  a  full  trace  dump of all incoming and outgoing data,\n"
"              including descriptive information, to the given output file. Use\n"
"              \"-\" as filename to have the output sent to stdout.\n"
"\n"
"              This is very similar to --trace, but leaves out the hex part and\n"
"              only shows the ASCII part of the dump. It makes  smaller  output\n"
"              that might be easier to read for untrained humans.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"              (Added in 7.9.7)\n"
"\n"
"       -u/--user <user:password>\n"
"              Specify user and password  to  use  for  server  authentication.\n"
"              Overrides -n/--netrc and --netrc-optional.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -U/--proxy-user <user:password>\n"
"              Specify user and password to use for proxy authentication.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --url <URL>\n"
"              Specify  a  URL  to  fetch. This option is mostly handy when you\n"
"              want to specify URL(s) in a config file.\n"
"\n"
"              This option may be used any number of times.  To  control  where\n"
"              this URL is written, use the -o/--output or the -O/--remote-name\n"
"              options.\n"
"\n"
"       -v/--verbose\n"
, stdout);
 fputs(
"              Makes the fetching more  verbose/talkative.  Mostly  usable  for\n"
"              debugging.  Lines starting with '>' means data sent by curl, '<'\n"
"              means data received by curl that is hidden in normal  cases  and\n"
"              lines  starting with '*' means additional info provided by curl.\n"
"              Note  that  if  you  only  want  HTTP  headers  in  the  output,\n"
"              -i/--include might be option you're looking for.\n"
"\n"
, stdout);
 fputs(
"              If  you think this option still doesn't give you enough details,\n"
"              consider using --trace or --trace-ascii instead.\n"
"\n"
"              If this option is used twice, the second will again disable ver-\n"
"              bose.\n"
"\n"
"       -V/--version\n"
"              Displays information about curl and the libcurl version it uses.\n"
"              The first line includes the full version of  curl,  libcurl  and\n"
"              other 3rd party libraries linked with the executable.\n"
"\n"
, stdout);
 fputs(
"              The  second  line (starts with \"Protocols:\") shows all protocols\n"
"              that libcurl reports to support.\n"
"\n"
"              The third line (starts with \"Features:\") shows specific features\n"
"              libcurl reports to offer. Available features include:\n"
"\n"
"              IPv6   You can use IPv6 with this.\n"
"\n"
"              krb4   Krb4 for ftp is supported.\n"
"\n"
"              SSL    HTTPS and FTPS are supported.\n"
"\n"
, stdout);
 fputs(
"              libz   Automatic  decompression of compressed files over HTTP is\n"
"                     supported.\n"
"\n"
"              NTLM   NTLM authentication is supported.\n"
"\n"
"              GSS-Negotiate\n"
"                     Negotiate authentication is supported.\n"
"\n"
"              Debug  This curl uses a libcurl built with Debug.  This  enables\n"
"                     more  error-tracking  and memory debugging etc. For curl-\n"
"                     developers only!\n"
"\n"
"              AsynchDNS\n"
, stdout);
 fputs(
"                     This curl uses asynchronous name resolves.\n"
"\n"
"              SPNEGO SPNEGO Negotiate authentication is supported.\n"
"\n"
"              Largefile\n"
"                     This curl supports transfers of large files, files larger\n"
"                     than 2GB.\n"
"\n"
"              IDN    This curl supports IDN - international domain names.\n"
"\n"
"       -w/--write-out <format>\n"
"              Defines  what to display after a completed and successful opera-\n"
, stdout);
 fputs(
"              tion. The format is a string that may contain plain  text  mixed\n"
"              with  any  number  of  variables. The string can be specified as\n"
"              \"string\", to get read from a  particular  file  you  specify  it\n"
"              \"@filename\"  and  to tell curl to read the format from stdin you\n"
"              write \"@-\".\n"
"\n"
"              The variables present in the output format will  be  substituted\n"
, stdout);
 fputs(
"              by  the  value or text that curl thinks fit, as described below.\n"
"              All variables are specified like %{variable_name} and to  output\n"
"              a normal % you just write them like %%. You can output a newline\n"
"              by using \\n, a carriage return with \\r and a tab space with  \\t.\n"
"              NOTE: The %-letter is a special letter in the win32-environment,\n"
"              where all occurrences of %  must  be  doubled  when  using  this\n"
"              option.\n"
"\n"
, stdout);
 fputs(
"              Available variables are at this point:\n"
"\n"
"              url_effective  The  URL  that  was  fetched last. This is mostly\n"
"                             meaningful if you've told curl  to  follow  loca-\n"
"                             tion: headers.\n"
"\n"
"              http_code      The  numerical  code  that  was found in the last\n"
"                             retrieved HTTP(S) page.\n"
"\n"
"              http_connect   The numerical code that was  found  in  the  last\n"
, stdout);
 fputs(
"                             response   (from  a  proxy)  to  a  curl  CONNECT\n"
"                             request. (Added in 7.12.4)\n"
"\n"
"              time_total     The total time, in seconds, that the full  opera-\n"
"                             tion lasted. The time will be displayed with mil-\n"
"                             lisecond resolution.\n"
"\n"
"              time_namelookup\n"
"                             The time, in seconds,  it  took  from  the  start\n"
, stdout);
 fputs(
"                             until the name resolving was completed.\n"
"\n"
"              time_connect   The  time,  in  seconds,  it  took from the start\n"
"                             until the connect to the remote host  (or  proxy)\n"
"                             was completed.\n"
"\n"
"              time_pretransfer\n"
"                             The  time,  in  seconds,  it  took from the start\n"
"                             until the file transfer is just about  to  begin.\n"
, stdout);
 fputs(
"                             This includes all pre-transfer commands and nego-\n"
"                             tiations that are specific to the particular pro-\n"
"                             tocol(s) involved.\n"
"\n"
"              time_redirect  The time, in seconds, it took for all redirection\n"
"                             steps include name lookup,  connect,  pretransfer\n"
"                             and   transfer   before   final  transaction  was\n"
, stdout);
 fputs(
"                             started. time_redirect shows the complete  execu-\n"
"                             tion  time  for  multiple redirections. (Added in\n"
"                             7.12.3)\n"
"\n"
"              time_starttransfer\n"
"                             The time, in seconds,  it  took  from  the  start\n"
"                             until  the  first byte is just about to be trans-\n"
"                             ferred. This includes time_pretransfer  and  also\n"
, stdout);
 fputs(
"                             the  time  the  server  needs  to  calculate  the\n"
"                             result.\n"
"\n"
"              size_download  The total amount of bytes that were downloaded.\n"
