<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1336_curl-7.35.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_proxyCONNECT<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">sockindex<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>,
                           <parameter><decl><type><specifier pos:line="3" pos:column="28">const<pos:position pos:line="3" pos:column="33"/></specifier> <name pos:line="3" pos:column="34">char<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">hostname<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="4" pos:column="28">unsigned<pos:position pos:line="4" pos:column="36"/></name> <name pos:line="4" pos:column="37">short<pos:position pos:line="4" pos:column="42"/></name></type> <name pos:line="4" pos:column="43">remote_port<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="55"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">subversion<pos:position pos:line="6" pos:column="17"/></name><init pos:line="6" pos:column="17">=<expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SessionHandle<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name><init pos:line="7" pos:column="29">=<expr><name><name pos:line="7" pos:column="30">conn<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">data<pos:position pos:line="7" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">SingleRequest<pos:position pos:line="8" pos:column="23"/></name></name> <modifier pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></modifier></type><name pos:line="8" pos:column="25">k<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><operator pos:line="8" pos:column="29">&amp;<pos:position pos:line="8" pos:column="34"/></operator><name><name pos:line="8" pos:column="30">data<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">req<pos:position pos:line="8" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">CURLcode<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">result<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">long<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">timeout<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">=
    <expr><ternary><condition><expr><name><name pos:line="11" pos:column="5">data<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">-&gt;<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="11">set<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">timeout<pos:position pos:line="11" pos:column="22"/></name></name></expr>?<pos:position pos:line="11" pos:column="23"/></condition><then><expr><name><name pos:line="11" pos:column="23">data<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">set<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">.<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">timeout<pos:position pos:line="11" pos:column="40"/></name></name></expr></then><else pos:line="11" pos:column="40">:<expr><name pos:line="11" pos:column="41">PROXY_TIMEOUT<pos:position pos:line="11" pos:column="54"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="11" pos:column="55"/></decl_stmt> <comment type="block" pos:line="11" pos:column="56">/* in milliseconds */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">curl_socket_t<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">tunnelsocket<pos:position pos:line="12" pos:column="29"/></name> <init pos:line="12" pos:column="30">= <expr><name><name pos:line="12" pos:column="32">conn<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">sock<pos:position pos:line="12" pos:column="42"/></name><index pos:line="12" pos:column="42">[<expr><name pos:line="12" pos:column="43">sockindex<pos:position pos:line="12" pos:column="52"/></name></expr>]<pos:position pos:line="12" pos:column="53"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">curl_off_t<pos:position pos:line="13" pos:column="13"/></name></type> <name pos:line="13" pos:column="14">cl<pos:position pos:line="13" pos:column="16"/></name><init pos:line="13" pos:column="16">=<expr><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">bool<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">closeConnection<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><name pos:line="14" pos:column="26">FALSE<pos:position pos:line="14" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">bool<pos:position pos:line="15" pos:column="7"/></name></type> <name pos:line="15" pos:column="8">chunked_encoding<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">= <expr><name pos:line="15" pos:column="27">FALSE<pos:position pos:line="15" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">long<pos:position pos:line="16" pos:column="7"/></name></type> <name pos:line="16" pos:column="8">check<pos:position pos:line="16" pos:column="13"/></name></decl>;<pos:position pos:line="16" pos:column="14"/></decl_stmt>

<cpp:define pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">define<pos:position pos:line="18" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="18" pos:column="9">SELECT_OK<pos:position pos:line="18" pos:column="18"/></name></cpp:macro>      <cpp:value pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">define<pos:position pos:line="19" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="19" pos:column="9">SELECT_ERROR<pos:position pos:line="19" pos:column="21"/></name></cpp:macro>   <cpp:value pos:line="19" pos:column="24">1<pos:position pos:line="19" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">define<pos:position pos:line="20" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="20" pos:column="9">SELECT_TIMEOUT<pos:position pos:line="20" pos:column="23"/></name></cpp:macro> <cpp:value pos:line="20" pos:column="24">2<pos:position pos:line="20" pos:column="25"/></cpp:value></cpp:define>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">error<pos:position pos:line="21" pos:column="12"/></name> <init pos:line="21" pos:column="13">= <expr><name pos:line="21" pos:column="15">SELECT_OK<pos:position pos:line="21" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="25"/></decl_stmt>

  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name><name pos:line="23" pos:column="6">conn<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">-&gt;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="12">tunnel_state<pos:position pos:line="23" pos:column="24"/></name><index pos:line="23" pos:column="24">[<expr><name pos:line="23" pos:column="25">sockindex<pos:position pos:line="23" pos:column="34"/></name></expr>]<pos:position pos:line="23" pos:column="35"/></index></name> <operator pos:line="23" pos:column="36">==<pos:position pos:line="23" pos:column="38"/></operator> <name pos:line="23" pos:column="39">TUNNEL_COMPLETE<pos:position pos:line="23" pos:column="54"/></name></expr>)<pos:position pos:line="23" pos:column="55"/></condition><then pos:line="23" pos:column="55">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">CURLE_OK<pos:position pos:line="24" pos:column="20"/></name></expr>;<pos:position pos:line="24" pos:column="21"/></return></block></then></if> <comment type="block" pos:line="24" pos:column="22">/* CONNECT is already completed */</comment>

  <expr_stmt><expr><name><name pos:line="26" pos:column="3">conn<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">-&gt;<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="9">bits<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">.<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">proxy_connect_closed<pos:position pos:line="26" pos:column="34"/></name></name> <operator pos:line="26" pos:column="35">=<pos:position pos:line="26" pos:column="36"/></operator> <name pos:line="26" pos:column="37">FALSE<pos:position pos:line="26" pos:column="42"/></name></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt>

  <do pos:line="28" pos:column="3">do <block pos:line="28" pos:column="6">{
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><name pos:line="29" pos:column="8">TUNNEL_INIT<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">==<pos:position pos:line="29" pos:column="22"/></operator> <name><name pos:line="29" pos:column="23">conn<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">-&gt;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="29">tunnel_state<pos:position pos:line="29" pos:column="41"/></name><index pos:line="29" pos:column="41">[<expr><name pos:line="29" pos:column="42">sockindex<pos:position pos:line="29" pos:column="51"/></name></expr>]<pos:position pos:line="29" pos:column="52"/></index></name></expr>)<pos:position pos:line="29" pos:column="53"/></condition><then pos:line="29" pos:column="53"> <block pos:line="29" pos:column="54">{
      <comment type="block" pos:line="30" pos:column="7">/* BEGIN CONNECT PHASE */</comment>
      <decl_stmt><decl><type><name pos:line="31" pos:column="7">char<pos:position pos:line="31" pos:column="11"/></name> <modifier pos:line="31" pos:column="12">*<pos:position pos:line="31" pos:column="13"/></modifier></type><name pos:line="31" pos:column="13">host_port<pos:position pos:line="31" pos:column="22"/></name></decl>;<pos:position pos:line="31" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="32" pos:column="7">Curl_send_buffer<pos:position pos:line="32" pos:column="23"/></name> <modifier pos:line="32" pos:column="24">*<pos:position pos:line="32" pos:column="25"/></modifier></type><name pos:line="32" pos:column="25">req_buffer<pos:position pos:line="32" pos:column="35"/></name></decl>;<pos:position pos:line="32" pos:column="36"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="34" pos:column="7">infof<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">data<pos:position pos:line="34" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="19">"Establish HTTP proxy tunnel to %s:%hu\n"<pos:position pos:line="34" pos:column="60"/></literal></expr></argument>,
            <argument><expr><name pos:line="35" pos:column="13">hostname<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="23">remote_port<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>

      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><name><name pos:line="37" pos:column="10">data<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">-&gt;<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="16">req<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">.<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">newurl<pos:position pos:line="37" pos:column="26"/></name></name></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27"> <block pos:line="37" pos:column="28">{
        <comment type="block" pos:line="38" pos:column="9">/* This only happens if we've looped here due to authentication
           reasons, and we don't really use the newly cloned URL here
           then. Just free() it. */</comment>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">free<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><name><name pos:line="41" pos:column="14">data<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">-&gt;<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="20">req<pos:position pos:line="41" pos:column="23"/></name><operator pos:line="41" pos:column="23">.<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="24">newurl<pos:position pos:line="41" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">data<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">-&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">req<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">.<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="19">newurl<pos:position pos:line="42" pos:column="25"/></name></name> <operator pos:line="42" pos:column="26">=<pos:position pos:line="42" pos:column="27"/></operator> <name pos:line="42" pos:column="28">NULL<pos:position pos:line="42" pos:column="32"/></name></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="43" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="45" pos:column="7">/* initialize a dynamic send-buffer */</comment>
      <expr_stmt><expr><name pos:line="46" pos:column="7">req_buffer<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <call><name pos:line="46" pos:column="20">Curl_add_buffer_init<pos:position pos:line="46" pos:column="40"/></name><argument_list pos:line="46" pos:column="40">()<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>

      <if pos:line="48" pos:column="7">if<condition pos:line="48" pos:column="9">(<expr><operator pos:line="48" pos:column="10">!<pos:position pos:line="48" pos:column="11"/></operator><name pos:line="48" pos:column="11">req_buffer<pos:position pos:line="48" pos:column="21"/></name></expr>)<pos:position pos:line="48" pos:column="22"/></condition><then pos:line="48" pos:column="22">
        <block type="pseudo"><return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="49" pos:column="35"/></name></expr>;<pos:position pos:line="49" pos:column="36"/></return></block></then></if>

      <expr_stmt><expr><name pos:line="51" pos:column="7">host_port<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">=<pos:position pos:line="51" pos:column="18"/></operator> <call><name pos:line="51" pos:column="19">aprintf<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><literal type="string" pos:line="51" pos:column="27">"%s:%hu"<pos:position pos:line="51" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="37">hostname<pos:position pos:line="51" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="47">remote_port<pos:position pos:line="51" pos:column="58"/></name></expr></argument>)<pos:position pos:line="51" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="60"/></expr_stmt>
      <if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><operator pos:line="52" pos:column="10">!<pos:position pos:line="52" pos:column="11"/></operator><name pos:line="52" pos:column="11">host_port<pos:position pos:line="52" pos:column="20"/></name></expr>)<pos:position pos:line="52" pos:column="21"/></condition><then pos:line="52" pos:column="21"> <block pos:line="52" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">free<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><name pos:line="53" pos:column="14">req_buffer<pos:position pos:line="53" pos:column="24"/></name></expr></argument>)<pos:position pos:line="53" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>
        <return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="54" pos:column="35"/></name></expr>;<pos:position pos:line="54" pos:column="36"/></return>
      }<pos:position pos:line="55" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="57" pos:column="7">/* Setup the proxy-authorization header, if any */</comment>
      <expr_stmt><expr><name pos:line="58" pos:column="7">result<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">=<pos:position pos:line="58" pos:column="15"/></operator> <call><name pos:line="58" pos:column="16">Curl_http_output_auth<pos:position pos:line="58" pos:column="37"/></name><argument_list pos:line="58" pos:column="37">(<argument><expr><name pos:line="58" pos:column="38">conn<pos:position pos:line="58" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="44">"CONNECT"<pos:position pos:line="58" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="55">host_port<pos:position pos:line="58" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="66">TRUE<pos:position pos:line="58" pos:column="70"/></name></expr></argument>)<pos:position pos:line="58" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="72"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="60" pos:column="7">free<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><name pos:line="60" pos:column="12">host_port<pos:position pos:line="60" pos:column="21"/></name></expr></argument>)<pos:position pos:line="60" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt>

      <if pos:line="62" pos:column="7">if<condition pos:line="62" pos:column="9">(<expr><name pos:line="62" pos:column="10">CURLE_OK<pos:position pos:line="62" pos:column="18"/></name> <operator pos:line="62" pos:column="19">==<pos:position pos:line="62" pos:column="21"/></operator> <name pos:line="62" pos:column="22">result<pos:position pos:line="62" pos:column="28"/></name></expr>)<pos:position pos:line="62" pos:column="29"/></condition><then pos:line="62" pos:column="29"> <block pos:line="62" pos:column="30">{
        <decl_stmt><decl><type><name pos:line="63" pos:column="9">char<pos:position pos:line="63" pos:column="13"/></name> <modifier pos:line="63" pos:column="14">*<pos:position pos:line="63" pos:column="15"/></modifier></type><name pos:line="63" pos:column="15">host<pos:position pos:line="63" pos:column="19"/></name><init pos:line="63" pos:column="19">=<expr><operator pos:line="63" pos:column="20">(<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="21">char<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">*<pos:position pos:line="63" pos:column="27"/></operator><operator pos:line="63" pos:column="27">)<pos:position pos:line="63" pos:column="28"/></operator><literal type="string" pos:line="63" pos:column="28">""<pos:position pos:line="63" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="63" pos:column="31"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="64" pos:column="9">const<pos:position pos:line="64" pos:column="14"/></specifier> <name pos:line="64" pos:column="15">char<pos:position pos:line="64" pos:column="19"/></name> <modifier pos:line="64" pos:column="20">*<pos:position pos:line="64" pos:column="21"/></modifier></type><name pos:line="64" pos:column="21">proxyconn<pos:position pos:line="64" pos:column="30"/></name><init pos:line="64" pos:column="30">=<expr><literal type="string" pos:line="64" pos:column="31">""<pos:position pos:line="64" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="64" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="65" pos:column="9">const<pos:position pos:line="65" pos:column="14"/></specifier> <name pos:line="65" pos:column="15">char<pos:position pos:line="65" pos:column="19"/></name> <modifier pos:line="65" pos:column="20">*<pos:position pos:line="65" pos:column="21"/></modifier></type><name pos:line="65" pos:column="21">useragent<pos:position pos:line="65" pos:column="30"/></name><init pos:line="65" pos:column="30">=<expr><literal type="string" pos:line="65" pos:column="31">""<pos:position pos:line="65" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="65" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">const<pos:position pos:line="66" pos:column="14"/></specifier> <name pos:line="66" pos:column="15">char<pos:position pos:line="66" pos:column="19"/></name> <modifier pos:line="66" pos:column="20">*<pos:position pos:line="66" pos:column="21"/></modifier></type><name pos:line="66" pos:column="21">http<pos:position pos:line="66" pos:column="25"/></name> <init pos:line="66" pos:column="26">= <expr><ternary><condition><expr><operator pos:line="66" pos:column="28">(<pos:position pos:line="66" pos:column="29"/></operator><name><name pos:line="66" pos:column="29">conn<pos:position pos:line="66" pos:column="33"/></name><operator pos:line="66" pos:column="33">-&gt;<pos:position pos:line="66" pos:column="38"/></operator><name pos:line="66" pos:column="35">proxytype<pos:position pos:line="66" pos:column="44"/></name></name> <operator pos:line="66" pos:column="45">==<pos:position pos:line="66" pos:column="47"/></operator> <name pos:line="66" pos:column="48">CURLPROXY_HTTP_1_0<pos:position pos:line="66" pos:column="66"/></name><operator pos:line="66" pos:column="66">)<pos:position pos:line="66" pos:column="67"/></operator></expr> ?<pos:position pos:line="66" pos:column="69"/></condition><then pos:line="66" pos:column="69">
          <expr><literal type="string" pos:line="67" pos:column="11">"1.0"<pos:position pos:line="67" pos:column="16"/></literal></expr> <pos:position pos:line="67" pos:column="17"/></then><else pos:line="67" pos:column="17">: <expr><literal type="string" pos:line="67" pos:column="19">"1.1"<pos:position pos:line="67" pos:column="24"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="67" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="68" pos:column="9">char<pos:position pos:line="68" pos:column="13"/></name> <modifier pos:line="68" pos:column="14">*<pos:position pos:line="68" pos:column="15"/></modifier></type><name pos:line="68" pos:column="15">hostheader<pos:position pos:line="68" pos:column="25"/></name><init pos:line="68" pos:column="25">= <comment type="block" pos:line="68" pos:column="27">/* host:port with IPv6 support */</comment>
          <expr><call><name pos:line="69" pos:column="11">aprintf<pos:position pos:line="69" pos:column="18"/></name><argument_list pos:line="69" pos:column="18">(<argument><expr><literal type="string" pos:line="69" pos:column="19">"%s%s%s:%hu"<pos:position pos:line="69" pos:column="31"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="69" pos:column="33">conn<pos:position pos:line="69" pos:column="37"/></name><operator pos:line="69" pos:column="37">-&gt;<pos:position pos:line="69" pos:column="42"/></operator><name pos:line="69" pos:column="39">bits<pos:position pos:line="69" pos:column="43"/></name><operator pos:line="69" pos:column="43">.<pos:position pos:line="69" pos:column="44"/></operator><name pos:line="69" pos:column="44">ipv6_ip<pos:position pos:line="69" pos:column="51"/></name></name></expr>?<pos:position pos:line="69" pos:column="52"/></condition><then><expr><literal type="string" pos:line="69" pos:column="52">"["<pos:position pos:line="69" pos:column="55"/></literal></expr></then><else pos:line="69" pos:column="55">:<expr><literal type="string" pos:line="69" pos:column="56">""<pos:position pos:line="69" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
                  <argument><expr><name pos:line="70" pos:column="19">hostname<pos:position pos:line="70" pos:column="27"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="70" pos:column="29">conn<pos:position pos:line="70" pos:column="33"/></name><operator pos:line="70" pos:column="33">-&gt;<pos:position pos:line="70" pos:column="38"/></operator><name pos:line="70" pos:column="35">bits<pos:position pos:line="70" pos:column="39"/></name><operator pos:line="70" pos:column="39">.<pos:position pos:line="70" pos:column="40"/></operator><name pos:line="70" pos:column="40">ipv6_ip<pos:position pos:line="70" pos:column="47"/></name></name></expr>?<pos:position pos:line="70" pos:column="48"/></condition><then><expr><literal type="string" pos:line="70" pos:column="48">"]"<pos:position pos:line="70" pos:column="51"/></literal></expr></then><else pos:line="70" pos:column="51">:<expr><literal type="string" pos:line="70" pos:column="52">""<pos:position pos:line="70" pos:column="54"/></literal></expr></else></ternary></expr></argument>,
                  <argument><expr><name pos:line="71" pos:column="19">remote_port<pos:position pos:line="71" pos:column="30"/></name></expr></argument>)<pos:position pos:line="71" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="71" pos:column="32"/></decl_stmt>
        <if pos:line="72" pos:column="9">if<condition pos:line="72" pos:column="11">(<expr><operator pos:line="72" pos:column="12">!<pos:position pos:line="72" pos:column="13"/></operator><name pos:line="72" pos:column="13">hostheader<pos:position pos:line="72" pos:column="23"/></name></expr>)<pos:position pos:line="72" pos:column="24"/></condition><then pos:line="72" pos:column="24"> <block pos:line="72" pos:column="25">{
          <expr_stmt><expr><call><name pos:line="73" pos:column="11">free<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><name pos:line="73" pos:column="16">req_buffer<pos:position pos:line="73" pos:column="26"/></name></expr></argument>)<pos:position pos:line="73" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="28"/></expr_stmt>
          <return pos:line="74" pos:column="11">return <expr><name pos:line="74" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="74" pos:column="37"/></name></expr>;<pos:position pos:line="74" pos:column="38"/></return>
        }<pos:position pos:line="75" pos:column="10"/></block></then></if>

        <if pos:line="77" pos:column="9">if<condition pos:line="77" pos:column="11">(<expr><operator pos:line="77" pos:column="12">!<pos:position pos:line="77" pos:column="13"/></operator><call><name pos:line="77" pos:column="13">Curl_checkheaders<pos:position pos:line="77" pos:column="30"/></name><argument_list pos:line="77" pos:column="30">(<argument><expr><name pos:line="77" pos:column="31">data<pos:position pos:line="77" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="37">"Host:"<pos:position pos:line="77" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="46"/></condition><then pos:line="77" pos:column="46"> <block pos:line="77" pos:column="47">{
          <expr_stmt><expr><name pos:line="78" pos:column="11">host<pos:position pos:line="78" pos:column="15"/></name> <operator pos:line="78" pos:column="16">=<pos:position pos:line="78" pos:column="17"/></operator> <call><name pos:line="78" pos:column="18">aprintf<pos:position pos:line="78" pos:column="25"/></name><argument_list pos:line="78" pos:column="25">(<argument><expr><literal type="string" pos:line="78" pos:column="26">"Host: %s\r\n"<pos:position pos:line="78" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="42">hostheader<pos:position pos:line="78" pos:column="52"/></name></expr></argument>)<pos:position pos:line="78" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="54"/></expr_stmt>
          <if pos:line="79" pos:column="11">if<condition pos:line="79" pos:column="13">(<expr><operator pos:line="79" pos:column="14">!<pos:position pos:line="79" pos:column="15"/></operator><name pos:line="79" pos:column="15">host<pos:position pos:line="79" pos:column="19"/></name></expr>)<pos:position pos:line="79" pos:column="20"/></condition><then pos:line="79" pos:column="20"> <block pos:line="79" pos:column="21">{
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">free<pos:position pos:line="80" pos:column="17"/></name><argument_list pos:line="80" pos:column="17">(<argument><expr><name pos:line="80" pos:column="18">hostheader<pos:position pos:line="80" pos:column="28"/></name></expr></argument>)<pos:position pos:line="80" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">free<pos:position pos:line="81" pos:column="17"/></name><argument_list pos:line="81" pos:column="17">(<argument><expr><name pos:line="81" pos:column="18">req_buffer<pos:position pos:line="81" pos:column="28"/></name></expr></argument>)<pos:position pos:line="81" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="30"/></expr_stmt>
            <return pos:line="82" pos:column="13">return <expr><name pos:line="82" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="82" pos:column="39"/></name></expr>;<pos:position pos:line="82" pos:column="40"/></return>
          }<pos:position pos:line="83" pos:column="12"/></block></then></if>
        }<pos:position pos:line="84" pos:column="10"/></block></then></if>
        <if pos:line="85" pos:column="9">if<condition pos:line="85" pos:column="11">(<expr><operator pos:line="85" pos:column="12">!<pos:position pos:line="85" pos:column="13"/></operator><call><name pos:line="85" pos:column="13">Curl_checkheaders<pos:position pos:line="85" pos:column="30"/></name><argument_list pos:line="85" pos:column="30">(<argument><expr><name pos:line="85" pos:column="31">data<pos:position pos:line="85" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="37">"Proxy-Connection:"<pos:position pos:line="85" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="58"/></condition><then pos:line="85" pos:column="58">
          <block type="pseudo"><expr_stmt><expr><name pos:line="86" pos:column="11">proxyconn<pos:position pos:line="86" pos:column="20"/></name> <operator pos:line="86" pos:column="21">=<pos:position pos:line="86" pos:column="22"/></operator> <literal type="string" pos:line="86" pos:column="23">"Proxy-Connection: Keep-Alive\r\n"<pos:position pos:line="86" pos:column="57"/></literal></expr>;<pos:position pos:line="86" pos:column="58"/></expr_stmt></block></then></if>

        <if pos:line="88" pos:column="9">if<condition pos:line="88" pos:column="11">(<expr><operator pos:line="88" pos:column="12">!<pos:position pos:line="88" pos:column="13"/></operator><call><name pos:line="88" pos:column="13">Curl_checkheaders<pos:position pos:line="88" pos:column="30"/></name><argument_list pos:line="88" pos:column="30">(<argument><expr><name pos:line="88" pos:column="31">data<pos:position pos:line="88" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="37">"User-Agent:"<pos:position pos:line="88" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="51"/></argument_list></call> <operator pos:line="88" pos:column="52">&amp;&amp;<pos:position pos:line="88" pos:column="62"/></operator>
           <name><name pos:line="89" pos:column="12">data<pos:position pos:line="89" pos:column="16"/></name><operator pos:line="89" pos:column="16">-&gt;<pos:position pos:line="89" pos:column="21"/></operator><name pos:line="89" pos:column="18">set<pos:position pos:line="89" pos:column="21"/></name><operator pos:line="89" pos:column="21">.<pos:position pos:line="89" pos:column="22"/></operator><name pos:line="89" pos:column="22">str<pos:position pos:line="89" pos:column="25"/></name><index pos:line="89" pos:column="25">[<expr><name pos:line="89" pos:column="26">STRING_USERAGENT<pos:position pos:line="89" pos:column="42"/></name></expr>]<pos:position pos:line="89" pos:column="43"/></index></name></expr>)<pos:position pos:line="89" pos:column="44"/></condition><then pos:line="89" pos:column="44">
          <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="11">useragent<pos:position pos:line="90" pos:column="20"/></name> <operator pos:line="90" pos:column="21">=<pos:position pos:line="90" pos:column="22"/></operator> <name><name pos:line="90" pos:column="23">conn<pos:position pos:line="90" pos:column="27"/></name><operator pos:line="90" pos:column="27">-&gt;<pos:position pos:line="90" pos:column="32"/></operator><name pos:line="90" pos:column="29">allocptr<pos:position pos:line="90" pos:column="37"/></name><operator pos:line="90" pos:column="37">.<pos:position pos:line="90" pos:column="38"/></operator><name pos:line="90" pos:column="38">uagent<pos:position pos:line="90" pos:column="44"/></name></name></expr>;<pos:position pos:line="90" pos:column="45"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="92" pos:column="9">result<pos:position pos:line="92" pos:column="15"/></name> <operator pos:line="92" pos:column="16">=<pos:position pos:line="92" pos:column="17"/></operator>
          <call><name pos:line="93" pos:column="11">Curl_add_bufferf<pos:position pos:line="93" pos:column="27"/></name><argument_list pos:line="93" pos:column="27">(<argument><expr><name pos:line="93" pos:column="28">req_buffer<pos:position pos:line="93" pos:column="38"/></name></expr></argument>,
                           <argument><expr><literal type="string" pos:line="94" pos:column="28">"CONNECT %s HTTP/%s\r\n"<pos:position pos:line="94" pos:column="52"/></literal>
                           <literal type="string" pos:line="95" pos:column="28">"%s"<pos:position pos:line="95" pos:column="32"/></literal>  <comment type="block" pos:line="95" pos:column="34">/* Host: */</comment>
                           <literal type="string" pos:line="96" pos:column="28">"%s"<pos:position pos:line="96" pos:column="32"/></literal>  <comment type="block" pos:line="96" pos:column="34">/* Proxy-Authorization */</comment>
                           <literal type="string" pos:line="97" pos:column="28">"%s"<pos:position pos:line="97" pos:column="32"/></literal>  <comment type="block" pos:line="97" pos:column="34">/* User-Agent */</comment>
                           <literal type="string" pos:line="98" pos:column="28">"%s"<pos:position pos:line="98" pos:column="32"/></literal></expr></argument>, <comment type="block" pos:line="98" pos:column="34">/* Proxy-Connection */</comment>
                           <argument><expr><name pos:line="99" pos:column="28">hostheader<pos:position pos:line="99" pos:column="38"/></name></expr></argument>,
                           <argument><expr><name pos:line="100" pos:column="28">http<pos:position pos:line="100" pos:column="32"/></name></expr></argument>,
                           <argument><expr><name pos:line="101" pos:column="28">host<pos:position pos:line="101" pos:column="32"/></name></expr></argument>,
                           <argument><expr><ternary><condition><expr><name><name pos:line="102" pos:column="28">conn<pos:position pos:line="102" pos:column="32"/></name><operator pos:line="102" pos:column="32">-&gt;<pos:position pos:line="102" pos:column="37"/></operator><name pos:line="102" pos:column="34">allocptr<pos:position pos:line="102" pos:column="42"/></name><operator pos:line="102" pos:column="42">.<pos:position pos:line="102" pos:column="43"/></operator><name pos:line="102" pos:column="43">proxyuserpwd<pos:position pos:line="102" pos:column="55"/></name></name></expr>?<pos:position pos:line="102" pos:column="56"/></condition><then pos:line="102" pos:column="56">
                           <expr><name><name pos:line="103" pos:column="28">conn<pos:position pos:line="103" pos:column="32"/></name><operator pos:line="103" pos:column="32">-&gt;<pos:position pos:line="103" pos:column="37"/></operator><name pos:line="103" pos:column="34">allocptr<pos:position pos:line="103" pos:column="42"/></name><operator pos:line="103" pos:column="42">.<pos:position pos:line="103" pos:column="43"/></operator><name pos:line="103" pos:column="43">proxyuserpwd<pos:position pos:line="103" pos:column="55"/></name></name></expr></then><else pos:line="103" pos:column="55">:<expr><literal type="string" pos:line="103" pos:column="56">""<pos:position pos:line="103" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
                           <argument><expr><name pos:line="104" pos:column="28">useragent<pos:position pos:line="104" pos:column="37"/></name></expr></argument>,
                           <argument><expr><name pos:line="105" pos:column="28">proxyconn<pos:position pos:line="105" pos:column="37"/></name></expr></argument>)<pos:position pos:line="105" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="39"/></expr_stmt>

        <if pos:line="107" pos:column="9">if<condition pos:line="107" pos:column="11">(<expr><name pos:line="107" pos:column="12">host<pos:position pos:line="107" pos:column="16"/></name> <operator pos:line="107" pos:column="17">&amp;&amp;<pos:position pos:line="107" pos:column="27"/></operator> <operator pos:line="107" pos:column="20">*<pos:position pos:line="107" pos:column="21"/></operator><name pos:line="107" pos:column="21">host<pos:position pos:line="107" pos:column="25"/></name></expr>)<pos:position pos:line="107" pos:column="26"/></condition><then pos:line="107" pos:column="26">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="108" pos:column="11">free<pos:position pos:line="108" pos:column="15"/></name><argument_list pos:line="108" pos:column="15">(<argument><expr><name pos:line="108" pos:column="16">host<pos:position pos:line="108" pos:column="20"/></name></expr></argument>)<pos:position pos:line="108" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="22"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">free<pos:position pos:line="109" pos:column="13"/></name><argument_list pos:line="109" pos:column="13">(<argument><expr><name pos:line="109" pos:column="14">hostheader<pos:position pos:line="109" pos:column="24"/></name></expr></argument>)<pos:position pos:line="109" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="26"/></expr_stmt>

        <if pos:line="111" pos:column="9">if<condition pos:line="111" pos:column="11">(<expr><name pos:line="111" pos:column="12">CURLE_OK<pos:position pos:line="111" pos:column="20"/></name> <operator pos:line="111" pos:column="21">==<pos:position pos:line="111" pos:column="23"/></operator> <name pos:line="111" pos:column="24">result<pos:position pos:line="111" pos:column="30"/></name></expr>)<pos:position pos:line="111" pos:column="31"/></condition><then pos:line="111" pos:column="31">
          <block type="pseudo"><expr_stmt><expr><name pos:line="112" pos:column="11">result<pos:position pos:line="112" pos:column="17"/></name> <operator pos:line="112" pos:column="18">=<pos:position pos:line="112" pos:column="19"/></operator> <call><name pos:line="112" pos:column="20">Curl_add_custom_headers<pos:position pos:line="112" pos:column="43"/></name><argument_list pos:line="112" pos:column="43">(<argument><expr><name pos:line="112" pos:column="44">conn<pos:position pos:line="112" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="50">req_buffer<pos:position pos:line="112" pos:column="60"/></name></expr></argument>)<pos:position pos:line="112" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="62"/></expr_stmt></block></then></if>

        <if pos:line="114" pos:column="9">if<condition pos:line="114" pos:column="11">(<expr><name pos:line="114" pos:column="12">CURLE_OK<pos:position pos:line="114" pos:column="20"/></name> <operator pos:line="114" pos:column="21">==<pos:position pos:line="114" pos:column="23"/></operator> <name pos:line="114" pos:column="24">result<pos:position pos:line="114" pos:column="30"/></name></expr>)<pos:position pos:line="114" pos:column="31"/></condition><then pos:line="114" pos:column="31">
          <comment type="block" pos:line="115" pos:column="11">/* CRLF terminate the request */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="116" pos:column="11">result<pos:position pos:line="116" pos:column="17"/></name> <operator pos:line="116" pos:column="18">=<pos:position pos:line="116" pos:column="19"/></operator> <call><name pos:line="116" pos:column="20">Curl_add_bufferf<pos:position pos:line="116" pos:column="36"/></name><argument_list pos:line="116" pos:column="36">(<argument><expr><name pos:line="116" pos:column="37">req_buffer<pos:position pos:line="116" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="49">"\r\n"<pos:position pos:line="116" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="57"/></expr_stmt></block></then></if>

        <if pos:line="118" pos:column="9">if<condition pos:line="118" pos:column="11">(<expr><name pos:line="118" pos:column="12">CURLE_OK<pos:position pos:line="118" pos:column="20"/></name> <operator pos:line="118" pos:column="21">==<pos:position pos:line="118" pos:column="23"/></operator> <name pos:line="118" pos:column="24">result<pos:position pos:line="118" pos:column="30"/></name></expr>)<pos:position pos:line="118" pos:column="31"/></condition><then pos:line="118" pos:column="31"> <block pos:line="118" pos:column="32">{
          <comment type="block" pos:line="119" pos:column="11">/* Send the connect request to the proxy */</comment>
          <comment type="block" pos:line="120" pos:column="11">/* BLOCKING */</comment>
          <expr_stmt><expr><name pos:line="121" pos:column="11">result<pos:position pos:line="121" pos:column="17"/></name> <operator pos:line="121" pos:column="18">=<pos:position pos:line="121" pos:column="19"/></operator>
            <call><name pos:line="122" pos:column="13">Curl_add_buffer_send<pos:position pos:line="122" pos:column="33"/></name><argument_list pos:line="122" pos:column="33">(<argument><expr><name pos:line="122" pos:column="34">req_buffer<pos:position pos:line="122" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="46">conn<pos:position pos:line="122" pos:column="50"/></name></expr></argument>,
                                 <argument><expr><operator pos:line="123" pos:column="34">&amp;<pos:position pos:line="123" pos:column="39"/></operator><name><name pos:line="123" pos:column="35">data<pos:position pos:line="123" pos:column="39"/></name><operator pos:line="123" pos:column="39">-&gt;<pos:position pos:line="123" pos:column="44"/></operator><name pos:line="123" pos:column="41">info<pos:position pos:line="123" pos:column="45"/></name><operator pos:line="123" pos:column="45">.<pos:position pos:line="123" pos:column="46"/></operator><name pos:line="123" pos:column="46">request_size<pos:position pos:line="123" pos:column="58"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="123" pos:column="60">0<pos:position pos:line="123" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="63">sockindex<pos:position pos:line="123" pos:column="72"/></name></expr></argument>)<pos:position pos:line="123" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="74"/></expr_stmt>
        }<pos:position pos:line="124" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="125" pos:column="9">req_buffer<pos:position pos:line="125" pos:column="19"/></name> <operator pos:line="125" pos:column="20">=<pos:position pos:line="125" pos:column="21"/></operator> <name pos:line="125" pos:column="22">NULL<pos:position pos:line="125" pos:column="26"/></name></expr>;<pos:position pos:line="125" pos:column="27"/></expr_stmt>
        <if pos:line="126" pos:column="9">if<condition pos:line="126" pos:column="11">(<expr><name pos:line="126" pos:column="12">result<pos:position pos:line="126" pos:column="18"/></name></expr>)<pos:position pos:line="126" pos:column="19"/></condition><then pos:line="126" pos:column="19">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="127" pos:column="11">failf<pos:position pos:line="127" pos:column="16"/></name><argument_list pos:line="127" pos:column="16">(<argument><expr><name pos:line="127" pos:column="17">data<pos:position pos:line="127" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="23">"Failed sending CONNECT to proxy"<pos:position pos:line="127" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="58"/></expr_stmt></block></then></if>
      }<pos:position pos:line="128" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="130" pos:column="7">Curl_safefree<pos:position pos:line="130" pos:column="20"/></name><argument_list pos:line="130" pos:column="20">(<argument><expr><name pos:line="130" pos:column="21">req_buffer<pos:position pos:line="130" pos:column="31"/></name></expr></argument>)<pos:position pos:line="130" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="33"/></expr_stmt>
      <if pos:line="131" pos:column="7">if<condition pos:line="131" pos:column="9">(<expr><name pos:line="131" pos:column="10">result<pos:position pos:line="131" pos:column="16"/></name></expr>)<pos:position pos:line="131" pos:column="17"/></condition><then pos:line="131" pos:column="17">
        <block type="pseudo"><return pos:line="132" pos:column="9">return <expr><name pos:line="132" pos:column="16">result<pos:position pos:line="132" pos:column="22"/></name></expr>;<pos:position pos:line="132" pos:column="23"/></return></block></then></if>

      <expr_stmt><expr><name><name pos:line="134" pos:column="7">conn<pos:position pos:line="134" pos:column="11"/></name><operator pos:line="134" pos:column="11">-&gt;<pos:position pos:line="134" pos:column="16"/></operator><name pos:line="134" pos:column="13">tunnel_state<pos:position pos:line="134" pos:column="25"/></name><index pos:line="134" pos:column="25">[<expr><name pos:line="134" pos:column="26">sockindex<pos:position pos:line="134" pos:column="35"/></name></expr>]<pos:position pos:line="134" pos:column="36"/></index></name> <operator pos:line="134" pos:column="37">=<pos:position pos:line="134" pos:column="38"/></operator> <name pos:line="134" pos:column="39">TUNNEL_CONNECT<pos:position pos:line="134" pos:column="53"/></name></expr>;<pos:position pos:line="134" pos:column="54"/></expr_stmt>

      <comment type="block" pos:line="136" pos:column="7">/* now we've issued the CONNECT and we're waiting to hear back, return
         and get called again polling-style */</comment>
      <return pos:line="138" pos:column="7">return <expr><name pos:line="138" pos:column="14">CURLE_OK<pos:position pos:line="138" pos:column="22"/></name></expr>;<pos:position pos:line="138" pos:column="23"/></return>

    }<pos:position pos:line="140" pos:column="6"/></block></then></if> <comment type="block" pos:line="140" pos:column="7">/* END CONNECT PHASE */</comment>

    <block pos:line="142" pos:column="5">{ <comment type="block" pos:line="142" pos:column="7">/* BEGIN NEGOTIATION PHASE */</comment>
      <decl_stmt><decl><type><name pos:line="143" pos:column="7">size_t<pos:position pos:line="143" pos:column="13"/></name></type> <name pos:line="143" pos:column="14">nread<pos:position pos:line="143" pos:column="19"/></name></decl>;<pos:position pos:line="143" pos:column="20"/></decl_stmt>   <comment type="block" pos:line="143" pos:column="23">/* total size read */</comment>
      <decl_stmt><decl><type><name pos:line="144" pos:column="7">int<pos:position pos:line="144" pos:column="10"/></name></type> <name pos:line="144" pos:column="11">perline<pos:position pos:line="144" pos:column="18"/></name></decl>;<pos:position pos:line="144" pos:column="19"/></decl_stmt> <comment type="block" pos:line="144" pos:column="20">/* count bytes per line */</comment>
      <decl_stmt><decl><type><name pos:line="145" pos:column="7">int<pos:position pos:line="145" pos:column="10"/></name></type> <name pos:line="145" pos:column="11">keepon<pos:position pos:line="145" pos:column="17"/></name><init pos:line="145" pos:column="17">=<expr><name pos:line="145" pos:column="18">TRUE<pos:position pos:line="145" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="145" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="146" pos:column="7">ssize_t<pos:position pos:line="146" pos:column="14"/></name></type> <name pos:line="146" pos:column="15">gotbytes<pos:position pos:line="146" pos:column="23"/></name></decl>;<pos:position pos:line="146" pos:column="24"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="147" pos:column="7">char<pos:position pos:line="147" pos:column="11"/></name> <modifier pos:line="147" pos:column="12">*<pos:position pos:line="147" pos:column="13"/></modifier></type><name pos:line="147" pos:column="13">ptr<pos:position pos:line="147" pos:column="16"/></name></decl>;<pos:position pos:line="147" pos:column="17"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="148" pos:column="7">char<pos:position pos:line="148" pos:column="11"/></name> <modifier pos:line="148" pos:column="12">*<pos:position pos:line="148" pos:column="13"/></modifier></type><name pos:line="148" pos:column="13">line_start<pos:position pos:line="148" pos:column="23"/></name></decl>;<pos:position pos:line="148" pos:column="24"/></decl_stmt>

      <expr_stmt><expr><name pos:line="150" pos:column="7">ptr<pos:position pos:line="150" pos:column="10"/></name><operator pos:line="150" pos:column="10">=<pos:position pos:line="150" pos:column="11"/></operator><name><name pos:line="150" pos:column="11">data<pos:position pos:line="150" pos:column="15"/></name><operator pos:line="150" pos:column="15">-&gt;<pos:position pos:line="150" pos:column="20"/></operator><name pos:line="150" pos:column="17">state<pos:position pos:line="150" pos:column="22"/></name><operator pos:line="150" pos:column="22">.<pos:position pos:line="150" pos:column="23"/></operator><name pos:line="150" pos:column="23">buffer<pos:position pos:line="150" pos:column="29"/></name></name></expr>;<pos:position pos:line="150" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name pos:line="151" pos:column="7">line_start<pos:position pos:line="151" pos:column="17"/></name> <operator pos:line="151" pos:column="18">=<pos:position pos:line="151" pos:column="19"/></operator> <name pos:line="151" pos:column="20">ptr<pos:position pos:line="151" pos:column="23"/></name></expr>;<pos:position pos:line="151" pos:column="24"/></expr_stmt>

      <expr_stmt><expr><name pos:line="153" pos:column="7">nread<pos:position pos:line="153" pos:column="12"/></name><operator pos:line="153" pos:column="12">=<pos:position pos:line="153" pos:column="13"/></operator><literal type="number" pos:line="153" pos:column="13">0<pos:position pos:line="153" pos:column="14"/></literal></expr>;<pos:position pos:line="153" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="154" pos:column="7">perline<pos:position pos:line="154" pos:column="14"/></name><operator pos:line="154" pos:column="14">=<pos:position pos:line="154" pos:column="15"/></operator><literal type="number" pos:line="154" pos:column="15">0<pos:position pos:line="154" pos:column="16"/></literal></expr>;<pos:position pos:line="154" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="155" pos:column="7">keepon<pos:position pos:line="155" pos:column="13"/></name><operator pos:line="155" pos:column="13">=<pos:position pos:line="155" pos:column="14"/></operator><name pos:line="155" pos:column="14">TRUE<pos:position pos:line="155" pos:column="18"/></name></expr>;<pos:position pos:line="155" pos:column="19"/></expr_stmt>

      <while pos:line="157" pos:column="7">while<condition pos:line="157" pos:column="12">(<expr><operator pos:line="157" pos:column="13">(<pos:position pos:line="157" pos:column="14"/></operator><name pos:line="157" pos:column="14">nread<pos:position pos:line="157" pos:column="19"/></name><operator pos:line="157" pos:column="19">&lt;<pos:position pos:line="157" pos:column="23"/></operator><name pos:line="157" pos:column="20">BUFSIZE<pos:position pos:line="157" pos:column="27"/></name><operator pos:line="157" pos:column="27">)<pos:position pos:line="157" pos:column="28"/></operator> <operator pos:line="157" pos:column="29">&amp;&amp;<pos:position pos:line="157" pos:column="39"/></operator> <operator pos:line="157" pos:column="32">(<pos:position pos:line="157" pos:column="33"/></operator><name pos:line="157" pos:column="33">keepon<pos:position pos:line="157" pos:column="39"/></name> <operator pos:line="157" pos:column="40">&amp;&amp;<pos:position pos:line="157" pos:column="50"/></operator> <operator pos:line="157" pos:column="43">!<pos:position pos:line="157" pos:column="44"/></operator><name pos:line="157" pos:column="44">error<pos:position pos:line="157" pos:column="49"/></name><operator pos:line="157" pos:column="49">)<pos:position pos:line="157" pos:column="50"/></operator></expr>)<pos:position pos:line="157" pos:column="51"/></condition> <block pos:line="157" pos:column="52">{

        <comment type="block" pos:line="159" pos:column="9">/* if timeout is requested, find out how much remaining time we have */</comment>
        <expr_stmt><expr><name pos:line="160" pos:column="9">check<pos:position pos:line="160" pos:column="14"/></name> <operator pos:line="160" pos:column="15">=<pos:position pos:line="160" pos:column="16"/></operator> <name pos:line="160" pos:column="17">timeout<pos:position pos:line="160" pos:column="24"/></name> <operator pos:line="160" pos:column="25">-<pos:position pos:line="160" pos:column="26"/></operator> <comment type="block" pos:line="160" pos:column="27">/* timeout time */</comment>
          <call><name pos:line="161" pos:column="11">Curl_tvdiff<pos:position pos:line="161" pos:column="22"/></name><argument_list pos:line="161" pos:column="22">(<argument><expr><call><name pos:line="161" pos:column="23">Curl_tvnow<pos:position pos:line="161" pos:column="33"/></name><argument_list pos:line="161" pos:column="33">()<pos:position pos:line="161" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="37">conn<pos:position pos:line="161" pos:column="41"/></name><operator pos:line="161" pos:column="41">-&gt;<pos:position pos:line="161" pos:column="46"/></operator><name pos:line="161" pos:column="43">now<pos:position pos:line="161" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="161" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="48"/></expr_stmt> <comment type="block" pos:line="161" pos:column="49">/* spent time */</comment>
        <if pos:line="162" pos:column="9">if<condition pos:line="162" pos:column="11">(<expr><name pos:line="162" pos:column="12">check<pos:position pos:line="162" pos:column="17"/></name> <operator pos:line="162" pos:column="18">&lt;=<pos:position pos:line="162" pos:column="23"/></operator> <literal type="number" pos:line="162" pos:column="21">0<pos:position pos:line="162" pos:column="22"/></literal></expr>)<pos:position pos:line="162" pos:column="23"/></condition><then pos:line="162" pos:column="23"> <block pos:line="162" pos:column="24">{
          <expr_stmt><expr><call><name pos:line="163" pos:column="11">failf<pos:position pos:line="163" pos:column="16"/></name><argument_list pos:line="163" pos:column="16">(<argument><expr><name pos:line="163" pos:column="17">data<pos:position pos:line="163" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="163" pos:column="23">"Proxy CONNECT aborted due to timeout"<pos:position pos:line="163" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="163" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="63"/></expr_stmt>
          <expr_stmt><expr><name pos:line="164" pos:column="11">error<pos:position pos:line="164" pos:column="16"/></name> <operator pos:line="164" pos:column="17">=<pos:position pos:line="164" pos:column="18"/></operator> <name pos:line="164" pos:column="19">SELECT_TIMEOUT<pos:position pos:line="164" pos:column="33"/></name></expr>;<pos:position pos:line="164" pos:column="34"/></expr_stmt> <comment type="block" pos:line="164" pos:column="35">/* already too little time */</comment>
          <break pos:line="165" pos:column="11">break;<pos:position pos:line="165" pos:column="17"/></break>
        }<pos:position pos:line="166" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="168" pos:column="9">/* loop every second at least, less if the timeout is near */</comment>
        <switch pos:line="169" pos:column="9">switch <condition pos:line="169" pos:column="16">(<expr><call><name pos:line="169" pos:column="17">Curl_socket_ready<pos:position pos:line="169" pos:column="34"/></name><argument_list pos:line="169" pos:column="34">(<argument><expr><name pos:line="169" pos:column="35">tunnelsocket<pos:position pos:line="169" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="49">CURL_SOCKET_BAD<pos:position pos:line="169" pos:column="64"/></name></expr></argument>,
                                  <argument><expr><ternary><condition><expr><name pos:line="170" pos:column="35">check<pos:position pos:line="170" pos:column="40"/></name><operator pos:line="170" pos:column="40">&lt;<pos:position pos:line="170" pos:column="44"/></operator><literal type="number" pos:line="170" pos:column="41">1000L<pos:position pos:line="170" pos:column="46"/></literal></expr>?<pos:position pos:line="170" pos:column="47"/></condition><then><expr><name pos:line="170" pos:column="47">check<pos:position pos:line="170" pos:column="52"/></name></expr></then><else pos:line="170" pos:column="52">:<expr><literal type="number" pos:line="170" pos:column="53">1000<pos:position pos:line="170" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="170" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="170" pos:column="59"/></condition> <block pos:line="170" pos:column="60">{
        <case pos:line="171" pos:column="9">case <expr><operator pos:line="171" pos:column="14">-<pos:position pos:line="171" pos:column="15"/></operator><literal type="number" pos:line="171" pos:column="15">1<pos:position pos:line="171" pos:column="16"/></literal></expr>:<pos:position pos:line="171" pos:column="17"/></case> <comment type="block" pos:line="171" pos:column="18">/* select() error, stop reading */</comment>
          <expr_stmt><expr><name pos:line="172" pos:column="11">error<pos:position pos:line="172" pos:column="16"/></name> <operator pos:line="172" pos:column="17">=<pos:position pos:line="172" pos:column="18"/></operator> <name pos:line="172" pos:column="19">SELECT_ERROR<pos:position pos:line="172" pos:column="31"/></name></expr>;<pos:position pos:line="172" pos:column="32"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="173" pos:column="11">failf<pos:position pos:line="173" pos:column="16"/></name><argument_list pos:line="173" pos:column="16">(<argument><expr><name pos:line="173" pos:column="17">data<pos:position pos:line="173" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="173" pos:column="23">"Proxy CONNECT aborted due to select/poll error"<pos:position pos:line="173" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="73"/></expr_stmt>
          <break pos:line="174" pos:column="11">break;<pos:position pos:line="174" pos:column="17"/></break>
        <case pos:line="175" pos:column="9">case <expr><literal type="number" pos:line="175" pos:column="14">0<pos:position pos:line="175" pos:column="15"/></literal></expr>:<pos:position pos:line="175" pos:column="16"/></case> <comment type="block" pos:line="175" pos:column="17">/* timeout */</comment>
          <break pos:line="176" pos:column="11">break;<pos:position pos:line="176" pos:column="17"/></break>
        <default pos:line="177" pos:column="9">default:<pos:position pos:line="177" pos:column="17"/></default>
          <expr_stmt><expr><call><name pos:line="178" pos:column="11">DEBUGASSERT<pos:position pos:line="178" pos:column="22"/></name><argument_list pos:line="178" pos:column="22">(<argument><expr><name pos:line="178" pos:column="23">ptr<pos:position pos:line="178" pos:column="26"/></name><operator pos:line="178" pos:column="26">+<pos:position pos:line="178" pos:column="27"/></operator><name pos:line="178" pos:column="27">BUFSIZE<pos:position pos:line="178" pos:column="34"/></name><operator pos:line="178" pos:column="34">-<pos:position pos:line="178" pos:column="35"/></operator><name pos:line="178" pos:column="35">nread<pos:position pos:line="178" pos:column="40"/></name> <operator pos:line="178" pos:column="41">&lt;=<pos:position pos:line="178" pos:column="46"/></operator> <name><name pos:line="178" pos:column="44">data<pos:position pos:line="178" pos:column="48"/></name><operator pos:line="178" pos:column="48">-&gt;<pos:position pos:line="178" pos:column="53"/></operator><name pos:line="178" pos:column="50">state<pos:position pos:line="178" pos:column="55"/></name><operator pos:line="178" pos:column="55">.<pos:position pos:line="178" pos:column="56"/></operator><name pos:line="178" pos:column="56">buffer<pos:position pos:line="178" pos:column="62"/></name></name><operator pos:line="178" pos:column="62">+<pos:position pos:line="178" pos:column="63"/></operator><name pos:line="178" pos:column="63">BUFSIZE<pos:position pos:line="178" pos:column="70"/></name><operator pos:line="178" pos:column="70">+<pos:position pos:line="178" pos:column="71"/></operator><literal type="number" pos:line="178" pos:column="71">1<pos:position pos:line="178" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="178" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="74"/></expr_stmt>
          <expr_stmt><expr><name pos:line="179" pos:column="11">result<pos:position pos:line="179" pos:column="17"/></name> <operator pos:line="179" pos:column="18">=<pos:position pos:line="179" pos:column="19"/></operator> <call><name pos:line="179" pos:column="20">Curl_read<pos:position pos:line="179" pos:column="29"/></name><argument_list pos:line="179" pos:column="29">(<argument><expr><name pos:line="179" pos:column="30">conn<pos:position pos:line="179" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="36">tunnelsocket<pos:position pos:line="179" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="50">ptr<pos:position pos:line="179" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="55">BUFSIZE<pos:position pos:line="179" pos:column="62"/></name><operator pos:line="179" pos:column="62">-<pos:position pos:line="179" pos:column="63"/></operator><name pos:line="179" pos:column="63">nread<pos:position pos:line="179" pos:column="68"/></name></expr></argument>,
                             <argument><expr><operator pos:line="180" pos:column="30">&amp;<pos:position pos:line="180" pos:column="35"/></operator><name pos:line="180" pos:column="31">gotbytes<pos:position pos:line="180" pos:column="39"/></name></expr></argument>)<pos:position pos:line="180" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="41"/></expr_stmt>
          <if pos:line="181" pos:column="11">if<condition pos:line="181" pos:column="13">(<expr><name pos:line="181" pos:column="14">result<pos:position pos:line="181" pos:column="20"/></name><operator pos:line="181" pos:column="20">==<pos:position pos:line="181" pos:column="22"/></operator><name pos:line="181" pos:column="22">CURLE_AGAIN<pos:position pos:line="181" pos:column="33"/></name></expr>)<pos:position pos:line="181" pos:column="34"/></condition><then pos:line="181" pos:column="34">
            <block type="pseudo"><continue pos:line="182" pos:column="13">continue;<pos:position pos:line="182" pos:column="22"/></continue></block></then> <comment type="block" pos:line="182" pos:column="23">/* go loop yourself */</comment>
          <elseif pos:line="183" pos:column="11">else <if pos:line="183" pos:column="16">if<condition pos:line="183" pos:column="18">(<expr><name pos:line="183" pos:column="19">result<pos:position pos:line="183" pos:column="25"/></name></expr>)<pos:position pos:line="183" pos:column="26"/></condition><then pos:line="183" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><name pos:line="184" pos:column="13">keepon<pos:position pos:line="184" pos:column="19"/></name> <operator pos:line="184" pos:column="20">=<pos:position pos:line="184" pos:column="21"/></operator> <name pos:line="184" pos:column="22">FALSE<pos:position pos:line="184" pos:column="27"/></name></expr>;<pos:position pos:line="184" pos:column="28"/></expr_stmt></block></then></if></elseif>
          <elseif pos:line="185" pos:column="11">else <if pos:line="185" pos:column="16">if<condition pos:line="185" pos:column="18">(<expr><name pos:line="185" pos:column="19">gotbytes<pos:position pos:line="185" pos:column="27"/></name> <operator pos:line="185" pos:column="28">&lt;=<pos:position pos:line="185" pos:column="33"/></operator> <literal type="number" pos:line="185" pos:column="31">0<pos:position pos:line="185" pos:column="32"/></literal></expr>)<pos:position pos:line="185" pos:column="33"/></condition><then pos:line="185" pos:column="33"> <block pos:line="185" pos:column="34">{
            <expr_stmt><expr><name pos:line="186" pos:column="13">keepon<pos:position pos:line="186" pos:column="19"/></name> <operator pos:line="186" pos:column="20">=<pos:position pos:line="186" pos:column="21"/></operator> <name pos:line="186" pos:column="22">FALSE<pos:position pos:line="186" pos:column="27"/></name></expr>;<pos:position pos:line="186" pos:column="28"/></expr_stmt>
            <if pos:line="187" pos:column="13">if<condition pos:line="187" pos:column="15">(<expr><name><name pos:line="187" pos:column="16">data<pos:position pos:line="187" pos:column="20"/></name><operator pos:line="187" pos:column="20">-&gt;<pos:position pos:line="187" pos:column="25"/></operator><name pos:line="187" pos:column="22">set<pos:position pos:line="187" pos:column="25"/></name><operator pos:line="187" pos:column="25">.<pos:position pos:line="187" pos:column="26"/></operator><name pos:line="187" pos:column="26">proxyauth<pos:position pos:line="187" pos:column="35"/></name></name> <operator pos:line="187" pos:column="36">&amp;&amp;<pos:position pos:line="187" pos:column="46"/></operator> <name><name pos:line="187" pos:column="39">data<pos:position pos:line="187" pos:column="43"/></name><operator pos:line="187" pos:column="43">-&gt;<pos:position pos:line="187" pos:column="48"/></operator><name pos:line="187" pos:column="45">state<pos:position pos:line="187" pos:column="50"/></name><operator pos:line="187" pos:column="50">.<pos:position pos:line="187" pos:column="51"/></operator><name pos:line="187" pos:column="51">authproxy<pos:position pos:line="187" pos:column="60"/></name><operator pos:line="187" pos:column="60">.<pos:position pos:line="187" pos:column="61"/></operator><name pos:line="187" pos:column="61">avail<pos:position pos:line="187" pos:column="66"/></name></name></expr>)<pos:position pos:line="187" pos:column="67"/></condition><then pos:line="187" pos:column="67"> <block pos:line="187" pos:column="68">{
              <comment type="block" pos:line="188" pos:column="15">/* proxy auth was requested and there was proxy auth available,
                 then deem this as "mere" proxy disconnect */</comment>
              <expr_stmt><expr><name><name pos:line="190" pos:column="15">conn<pos:position pos:line="190" pos:column="19"/></name><operator pos:line="190" pos:column="19">-&gt;<pos:position pos:line="190" pos:column="24"/></operator><name pos:line="190" pos:column="21">bits<pos:position pos:line="190" pos:column="25"/></name><operator pos:line="190" pos:column="25">.<pos:position pos:line="190" pos:column="26"/></operator><name pos:line="190" pos:column="26">proxy_connect_closed<pos:position pos:line="190" pos:column="46"/></name></name> <operator pos:line="190" pos:column="47">=<pos:position pos:line="190" pos:column="48"/></operator> <name pos:line="190" pos:column="49">TRUE<pos:position pos:line="190" pos:column="53"/></name></expr>;<pos:position pos:line="190" pos:column="54"/></expr_stmt>
            }<pos:position pos:line="191" pos:column="14"/></block></then>
            <else pos:line="192" pos:column="13">else <block pos:line="192" pos:column="18">{
              <expr_stmt><expr><name pos:line="193" pos:column="15">error<pos:position pos:line="193" pos:column="20"/></name> <operator pos:line="193" pos:column="21">=<pos:position pos:line="193" pos:column="22"/></operator> <name pos:line="193" pos:column="23">SELECT_ERROR<pos:position pos:line="193" pos:column="35"/></name></expr>;<pos:position pos:line="193" pos:column="36"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="194" pos:column="15">failf<pos:position pos:line="194" pos:column="20"/></name><argument_list pos:line="194" pos:column="20">(<argument><expr><name pos:line="194" pos:column="21">data<pos:position pos:line="194" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="194" pos:column="27">"Proxy CONNECT aborted"<pos:position pos:line="194" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="194" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="52"/></expr_stmt>
            }<pos:position pos:line="195" pos:column="14"/></block></else></if>
          }<pos:position pos:line="196" pos:column="12"/></block></then></if></elseif>
          <else pos:line="197" pos:column="11">else <block pos:line="197" pos:column="16">{
            <comment type="block" pos:line="198" pos:column="13">/*
             * We got a whole chunk of data, which can be anything from one
             * byte to a set of lines and possibly just a piece of the last
             * line.
             */</comment>
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">int<pos:position pos:line="203" pos:column="16"/></name></type> <name pos:line="203" pos:column="17">i<pos:position pos:line="203" pos:column="18"/></name></decl>;<pos:position pos:line="203" pos:column="19"/></decl_stmt>

            <expr_stmt><expr><name pos:line="205" pos:column="13">nread<pos:position pos:line="205" pos:column="18"/></name> <operator pos:line="205" pos:column="19">+=<pos:position pos:line="205" pos:column="21"/></operator> <name pos:line="205" pos:column="22">gotbytes<pos:position pos:line="205" pos:column="30"/></name></expr>;<pos:position pos:line="205" pos:column="31"/></expr_stmt>

            <if pos:line="207" pos:column="13">if<condition pos:line="207" pos:column="15">(<expr><name pos:line="207" pos:column="16">keepon<pos:position pos:line="207" pos:column="22"/></name> <operator pos:line="207" pos:column="23">&gt;<pos:position pos:line="207" pos:column="27"/></operator> <name pos:line="207" pos:column="25">TRUE<pos:position pos:line="207" pos:column="29"/></name></expr>)<pos:position pos:line="207" pos:column="30"/></condition><then pos:line="207" pos:column="30"> <block pos:line="207" pos:column="31">{
              <comment type="block" pos:line="208" pos:column="15">/* This means we are currently ignoring a response-body */</comment>

              <expr_stmt><expr><name pos:line="210" pos:column="15">nread<pos:position pos:line="210" pos:column="20"/></name> <operator pos:line="210" pos:column="21">=<pos:position pos:line="210" pos:column="22"/></operator> <literal type="number" pos:line="210" pos:column="23">0<pos:position pos:line="210" pos:column="24"/></literal></expr>;<pos:position pos:line="210" pos:column="25"/></expr_stmt> <comment type="block" pos:line="210" pos:column="26">/* make next read start over in the read buffer */</comment>
              <expr_stmt><expr><name pos:line="211" pos:column="15">ptr<pos:position pos:line="211" pos:column="18"/></name><operator pos:line="211" pos:column="18">=<pos:position pos:line="211" pos:column="19"/></operator><name><name pos:line="211" pos:column="19">data<pos:position pos:line="211" pos:column="23"/></name><operator pos:line="211" pos:column="23">-&gt;<pos:position pos:line="211" pos:column="28"/></operator><name pos:line="211" pos:column="25">state<pos:position pos:line="211" pos:column="30"/></name><operator pos:line="211" pos:column="30">.<pos:position pos:line="211" pos:column="31"/></operator><name pos:line="211" pos:column="31">buffer<pos:position pos:line="211" pos:column="37"/></name></name></expr>;<pos:position pos:line="211" pos:column="38"/></expr_stmt>
              <if pos:line="212" pos:column="15">if<condition pos:line="212" pos:column="17">(<expr><name pos:line="212" pos:column="18">cl<pos:position pos:line="212" pos:column="20"/></name></expr>)<pos:position pos:line="212" pos:column="21"/></condition><then pos:line="212" pos:column="21"> <block pos:line="212" pos:column="22">{
                <comment type="block" pos:line="213" pos:column="17">/* A Content-Length based body: simply count down the counter
                   and make sure to break out of the loop when we're done! */</comment>
                <expr_stmt><expr><name pos:line="215" pos:column="17">cl<pos:position pos:line="215" pos:column="19"/></name> <operator pos:line="215" pos:column="20">-=<pos:position pos:line="215" pos:column="22"/></operator> <name pos:line="215" pos:column="23">gotbytes<pos:position pos:line="215" pos:column="31"/></name></expr>;<pos:position pos:line="215" pos:column="32"/></expr_stmt>
                <if pos:line="216" pos:column="17">if<condition pos:line="216" pos:column="19">(<expr><name pos:line="216" pos:column="20">cl<pos:position pos:line="216" pos:column="22"/></name><operator pos:line="216" pos:column="22">&lt;=<pos:position pos:line="216" pos:column="27"/></operator><literal type="number" pos:line="216" pos:column="24">0<pos:position pos:line="216" pos:column="25"/></literal></expr>)<pos:position pos:line="216" pos:column="26"/></condition><then pos:line="216" pos:column="26"> <block pos:line="216" pos:column="27">{
                  <expr_stmt><expr><name pos:line="217" pos:column="19">keepon<pos:position pos:line="217" pos:column="25"/></name> <operator pos:line="217" pos:column="26">=<pos:position pos:line="217" pos:column="27"/></operator> <name pos:line="217" pos:column="28">FALSE<pos:position pos:line="217" pos:column="33"/></name></expr>;<pos:position pos:line="217" pos:column="34"/></expr_stmt>
                  <break pos:line="218" pos:column="19">break;<pos:position pos:line="218" pos:column="25"/></break>
                }<pos:position pos:line="219" pos:column="18"/></block></then></if>
              }<pos:position pos:line="220" pos:column="16"/></block></then>
              <else pos:line="221" pos:column="15">else <block pos:line="221" pos:column="20">{
                <comment type="block" pos:line="222" pos:column="17">/* chunked-encoded body, so we need to do the chunked dance
                   properly to know when the end of the body is reached */</comment>
                <decl_stmt><decl><type><name pos:line="224" pos:column="17">CHUNKcode<pos:position pos:line="224" pos:column="26"/></name></type> <name pos:line="224" pos:column="27">r<pos:position pos:line="224" pos:column="28"/></name></decl>;<pos:position pos:line="224" pos:column="29"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="225" pos:column="17">ssize_t<pos:position pos:line="225" pos:column="24"/></name></type> <name pos:line="225" pos:column="25">tookcareof<pos:position pos:line="225" pos:column="35"/></name><init pos:line="225" pos:column="35">=<expr><literal type="number" pos:line="225" pos:column="36">0<pos:position pos:line="225" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="225" pos:column="38"/></decl_stmt>

                <comment type="block" pos:line="227" pos:column="17">/* now parse the chunked piece of data so that we can
                   properly tell when the stream ends */</comment>
                <expr_stmt><expr><name pos:line="229" pos:column="17">r<pos:position pos:line="229" pos:column="18"/></name> <operator pos:line="229" pos:column="19">=<pos:position pos:line="229" pos:column="20"/></operator> <call><name pos:line="229" pos:column="21">Curl_httpchunk_read<pos:position pos:line="229" pos:column="40"/></name><argument_list pos:line="229" pos:column="40">(<argument><expr><name pos:line="229" pos:column="41">conn<pos:position pos:line="229" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="229" pos:column="47">ptr<pos:position pos:line="229" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="229" pos:column="52">gotbytes<pos:position pos:line="229" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="229" pos:column="62">&amp;<pos:position pos:line="229" pos:column="67"/></operator><name pos:line="229" pos:column="63">tookcareof<pos:position pos:line="229" pos:column="73"/></name></expr></argument>)<pos:position pos:line="229" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="75"/></expr_stmt>
                <if pos:line="230" pos:column="17">if<condition pos:line="230" pos:column="19">(<expr><name pos:line="230" pos:column="20">r<pos:position pos:line="230" pos:column="21"/></name> <operator pos:line="230" pos:column="22">==<pos:position pos:line="230" pos:column="24"/></operator> <name pos:line="230" pos:column="25">CHUNKE_STOP<pos:position pos:line="230" pos:column="36"/></name></expr>)<pos:position pos:line="230" pos:column="37"/></condition><then pos:line="230" pos:column="37"> <block pos:line="230" pos:column="38">{
                  <comment type="block" pos:line="231" pos:column="19">/* we're done reading chunks! */</comment>
                  <expr_stmt><expr><call><name pos:line="232" pos:column="19">infof<pos:position pos:line="232" pos:column="24"/></name><argument_list pos:line="232" pos:column="24">(<argument><expr><name pos:line="232" pos:column="25">data<pos:position pos:line="232" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="232" pos:column="31">"chunk reading DONE\n"<pos:position pos:line="232" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="232" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="55"/></expr_stmt>
                  <expr_stmt><expr><name pos:line="233" pos:column="19">keepon<pos:position pos:line="233" pos:column="25"/></name> <operator pos:line="233" pos:column="26">=<pos:position pos:line="233" pos:column="27"/></operator> <name pos:line="233" pos:column="28">FALSE<pos:position pos:line="233" pos:column="33"/></name></expr>;<pos:position pos:line="233" pos:column="34"/></expr_stmt>
                  <comment type="block" pos:line="234" pos:column="19">/* we did the full CONNECT treatment, go COMPLETE */</comment>
                  <expr_stmt><expr><name><name pos:line="235" pos:column="19">conn<pos:position pos:line="235" pos:column="23"/></name><operator pos:line="235" pos:column="23">-&gt;<pos:position pos:line="235" pos:column="28"/></operator><name pos:line="235" pos:column="25">tunnel_state<pos:position pos:line="235" pos:column="37"/></name><index pos:line="235" pos:column="37">[<expr><name pos:line="235" pos:column="38">sockindex<pos:position pos:line="235" pos:column="47"/></name></expr>]<pos:position pos:line="235" pos:column="48"/></index></name> <operator pos:line="235" pos:column="49">=<pos:position pos:line="235" pos:column="50"/></operator> <name pos:line="235" pos:column="51">TUNNEL_COMPLETE<pos:position pos:line="235" pos:column="66"/></name></expr>;<pos:position pos:line="235" pos:column="67"/></expr_stmt>
                }<pos:position pos:line="236" pos:column="18"/></block></then>
                <else pos:line="237" pos:column="17">else
                  <block type="pseudo"><expr_stmt><expr><call><name pos:line="238" pos:column="19">infof<pos:position pos:line="238" pos:column="24"/></name><argument_list pos:line="238" pos:column="24">(<argument><expr><name pos:line="238" pos:column="25">data<pos:position pos:line="238" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="238" pos:column="31">"Read %zd bytes of chunk, continue\n"<pos:position pos:line="238" pos:column="68"/></literal></expr></argument>,
                        <argument><expr><name pos:line="239" pos:column="25">tookcareof<pos:position pos:line="239" pos:column="35"/></name></expr></argument>)<pos:position pos:line="239" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="37"/></expr_stmt></block></else></if>
              }<pos:position pos:line="240" pos:column="16"/></block></else></if>
            }<pos:position pos:line="241" pos:column="14"/></block></then>
            <else pos:line="242" pos:column="13">else
              <block type="pseudo"><for pos:line="243" pos:column="15">for<control pos:line="243" pos:column="18">(<init><expr><name pos:line="243" pos:column="19">i<pos:position pos:line="243" pos:column="20"/></name> <operator pos:line="243" pos:column="21">=<pos:position pos:line="243" pos:column="22"/></operator> <literal type="number" pos:line="243" pos:column="23">0<pos:position pos:line="243" pos:column="24"/></literal></expr>;<pos:position pos:line="243" pos:column="25"/></init> <condition><expr><name pos:line="243" pos:column="26">i<pos:position pos:line="243" pos:column="27"/></name> <operator pos:line="243" pos:column="28">&lt;<pos:position pos:line="243" pos:column="32"/></operator> <name pos:line="243" pos:column="30">gotbytes<pos:position pos:line="243" pos:column="38"/></name></expr>;<pos:position pos:line="243" pos:column="39"/></condition> <incr><expr><name pos:line="243" pos:column="40">ptr<pos:position pos:line="243" pos:column="43"/></name><operator pos:line="243" pos:column="43">++<pos:position pos:line="243" pos:column="45"/></operator></expr><operator pos:line="243" pos:column="45">,<pos:position pos:line="243" pos:column="46"/></operator> <expr><name pos:line="243" pos:column="47">i<pos:position pos:line="243" pos:column="48"/></name><operator pos:line="243" pos:column="48">++<pos:position pos:line="243" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="243" pos:column="51"/></control> <block pos:line="243" pos:column="52">{
                <expr_stmt><expr><name pos:line="244" pos:column="17">perline<pos:position pos:line="244" pos:column="24"/></name><operator pos:line="244" pos:column="24">++<pos:position pos:line="244" pos:column="26"/></operator></expr>;<pos:position pos:line="244" pos:column="27"/></expr_stmt> <comment type="block" pos:line="244" pos:column="28">/* amount of bytes in this line so far */</comment>
                <if pos:line="245" pos:column="17">if<condition pos:line="245" pos:column="19">(<expr><operator pos:line="245" pos:column="20">*<pos:position pos:line="245" pos:column="21"/></operator><name pos:line="245" pos:column="21">ptr<pos:position pos:line="245" pos:column="24"/></name> <operator pos:line="245" pos:column="25">==<pos:position pos:line="245" pos:column="27"/></operator> <literal type="number" pos:line="245" pos:column="28">0x0a<pos:position pos:line="245" pos:column="32"/></literal></expr>)<pos:position pos:line="245" pos:column="33"/></condition><then pos:line="245" pos:column="33"> <block pos:line="245" pos:column="34">{
                  <decl_stmt><decl><type><name pos:line="246" pos:column="19">char<pos:position pos:line="246" pos:column="23"/></name></type> <name pos:line="246" pos:column="24">letter<pos:position pos:line="246" pos:column="30"/></name></decl>;<pos:position pos:line="246" pos:column="31"/></decl_stmt>
                  <decl_stmt><decl><type><name pos:line="247" pos:column="19">int<pos:position pos:line="247" pos:column="22"/></name></type> <name pos:line="247" pos:column="23">writetype<pos:position pos:line="247" pos:column="32"/></name></decl>;<pos:position pos:line="247" pos:column="33"/></decl_stmt>

                  <comment type="block" pos:line="249" pos:column="19">/* convert from the network encoding */</comment>
                  <expr_stmt><expr><name pos:line="250" pos:column="19">result<pos:position pos:line="250" pos:column="25"/></name> <operator pos:line="250" pos:column="26">=<pos:position pos:line="250" pos:column="27"/></operator> <call><name pos:line="250" pos:column="28">Curl_convert_from_network<pos:position pos:line="250" pos:column="53"/></name><argument_list pos:line="250" pos:column="53">(<argument><expr><name pos:line="250" pos:column="54">data<pos:position pos:line="250" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="60">line_start<pos:position pos:line="250" pos:column="70"/></name></expr></argument>,
                                                     <argument><expr><name pos:line="251" pos:column="54">perline<pos:position pos:line="251" pos:column="61"/></name></expr></argument>)<pos:position pos:line="251" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="63"/></expr_stmt>
                  <comment type="block" pos:line="252" pos:column="19">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
                  <if pos:line="253" pos:column="19">if<condition pos:line="253" pos:column="21">(<expr><name pos:line="253" pos:column="22">result<pos:position pos:line="253" pos:column="28"/></name></expr>)<pos:position pos:line="253" pos:column="29"/></condition><then pos:line="253" pos:column="29">
                    <block type="pseudo"><return pos:line="254" pos:column="21">return <expr><name pos:line="254" pos:column="28">result<pos:position pos:line="254" pos:column="34"/></name></expr>;<pos:position pos:line="254" pos:column="35"/></return></block></then></if>

                  <comment type="block" pos:line="256" pos:column="19">/* output debug if that is requested */</comment>
                  <if pos:line="257" pos:column="19">if<condition pos:line="257" pos:column="21">(<expr><name><name pos:line="257" pos:column="22">data<pos:position pos:line="257" pos:column="26"/></name><operator pos:line="257" pos:column="26">-&gt;<pos:position pos:line="257" pos:column="31"/></operator><name pos:line="257" pos:column="28">set<pos:position pos:line="257" pos:column="31"/></name><operator pos:line="257" pos:column="31">.<pos:position pos:line="257" pos:column="32"/></operator><name pos:line="257" pos:column="32">verbose<pos:position pos:line="257" pos:column="39"/></name></name></expr>)<pos:position pos:line="257" pos:column="40"/></condition><then pos:line="257" pos:column="40">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="258" pos:column="21">Curl_debug<pos:position pos:line="258" pos:column="31"/></name><argument_list pos:line="258" pos:column="31">(<argument><expr><name pos:line="258" pos:column="32">data<pos:position pos:line="258" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="258" pos:column="38">CURLINFO_HEADER_IN<pos:position pos:line="258" pos:column="56"/></name></expr></argument>,
                               <argument><expr><name pos:line="259" pos:column="32">line_start<pos:position pos:line="259" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="259" pos:column="44">(<pos:position pos:line="259" pos:column="45"/></operator><name pos:line="259" pos:column="45">size_t<pos:position pos:line="259" pos:column="51"/></name><operator pos:line="259" pos:column="51">)<pos:position pos:line="259" pos:column="52"/></operator><name pos:line="259" pos:column="52">perline<pos:position pos:line="259" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="259" pos:column="61">conn<pos:position pos:line="259" pos:column="65"/></name></expr></argument>)<pos:position pos:line="259" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="67"/></expr_stmt></block></then></if>

                  <comment type="block" pos:line="261" pos:column="19">/* send the header to the callback */</comment>
                  <expr_stmt><expr><name pos:line="262" pos:column="19">writetype<pos:position pos:line="262" pos:column="28"/></name> <operator pos:line="262" pos:column="29">=<pos:position pos:line="262" pos:column="30"/></operator> <name pos:line="262" pos:column="31">CLIENTWRITE_HEADER<pos:position pos:line="262" pos:column="49"/></name></expr>;<pos:position pos:line="262" pos:column="50"/></expr_stmt>
                  <if pos:line="263" pos:column="19">if<condition pos:line="263" pos:column="21">(<expr><name><name pos:line="263" pos:column="22">data<pos:position pos:line="263" pos:column="26"/></name><operator pos:line="263" pos:column="26">-&gt;<pos:position pos:line="263" pos:column="31"/></operator><name pos:line="263" pos:column="28">set<pos:position pos:line="263" pos:column="31"/></name><operator pos:line="263" pos:column="31">.<pos:position pos:line="263" pos:column="32"/></operator><name pos:line="263" pos:column="32">include_header<pos:position pos:line="263" pos:column="46"/></name></name></expr>)<pos:position pos:line="263" pos:column="47"/></condition><then pos:line="263" pos:column="47">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="264" pos:column="21">writetype<pos:position pos:line="264" pos:column="30"/></name> <operator pos:line="264" pos:column="31">|=<pos:position pos:line="264" pos:column="33"/></operator> <name pos:line="264" pos:column="34">CLIENTWRITE_BODY<pos:position pos:line="264" pos:column="50"/></name></expr>;<pos:position pos:line="264" pos:column="51"/></expr_stmt></block></then></if>

                  <expr_stmt><expr><name pos:line="266" pos:column="19">result<pos:position pos:line="266" pos:column="25"/></name> <operator pos:line="266" pos:column="26">=<pos:position pos:line="266" pos:column="27"/></operator> <call><name pos:line="266" pos:column="28">Curl_client_write<pos:position pos:line="266" pos:column="45"/></name><argument_list pos:line="266" pos:column="45">(<argument><expr><name pos:line="266" pos:column="46">conn<pos:position pos:line="266" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="266" pos:column="52">writetype<pos:position pos:line="266" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="266" pos:column="63">line_start<pos:position pos:line="266" pos:column="73"/></name></expr></argument>,
                                             <argument><expr><name pos:line="267" pos:column="46">perline<pos:position pos:line="267" pos:column="53"/></name></expr></argument>)<pos:position pos:line="267" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="55"/></expr_stmt>

                  <expr_stmt><expr><name><name pos:line="269" pos:column="19">data<pos:position pos:line="269" pos:column="23"/></name><operator pos:line="269" pos:column="23">-&gt;<pos:position pos:line="269" pos:column="28"/></operator><name pos:line="269" pos:column="25">info<pos:position pos:line="269" pos:column="29"/></name><operator pos:line="269" pos:column="29">.<pos:position pos:line="269" pos:column="30"/></operator><name pos:line="269" pos:column="30">header_size<pos:position pos:line="269" pos:column="41"/></name></name> <operator pos:line="269" pos:column="42">+=<pos:position pos:line="269" pos:column="44"/></operator> <operator pos:line="269" pos:column="45">(<pos:position pos:line="269" pos:column="46"/></operator><name pos:line="269" pos:column="46">long<pos:position pos:line="269" pos:column="50"/></name><operator pos:line="269" pos:column="50">)<pos:position pos:line="269" pos:column="51"/></operator><name pos:line="269" pos:column="51">perline<pos:position pos:line="269" pos:column="58"/></name></expr>;<pos:position pos:line="269" pos:column="59"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="270" pos:column="19">data<pos:position pos:line="270" pos:column="23"/></name><operator pos:line="270" pos:column="23">-&gt;<pos:position pos:line="270" pos:column="28"/></operator><name pos:line="270" pos:column="25">req<pos:position pos:line="270" pos:column="28"/></name><operator pos:line="270" pos:column="28">.<pos:position pos:line="270" pos:column="29"/></operator><name pos:line="270" pos:column="29">headerbytecount<pos:position pos:line="270" pos:column="44"/></name></name> <operator pos:line="270" pos:column="45">+=<pos:position pos:line="270" pos:column="47"/></operator> <operator pos:line="270" pos:column="48">(<pos:position pos:line="270" pos:column="49"/></operator><name pos:line="270" pos:column="49">long<pos:position pos:line="270" pos:column="53"/></name><operator pos:line="270" pos:column="53">)<pos:position pos:line="270" pos:column="54"/></operator><name pos:line="270" pos:column="54">perline<pos:position pos:line="270" pos:column="61"/></name></expr>;<pos:position pos:line="270" pos:column="62"/></expr_stmt>

                  <if pos:line="272" pos:column="19">if<condition pos:line="272" pos:column="21">(<expr><name pos:line="272" pos:column="22">result<pos:position pos:line="272" pos:column="28"/></name></expr>)<pos:position pos:line="272" pos:column="29"/></condition><then pos:line="272" pos:column="29">
                    <block type="pseudo"><return pos:line="273" pos:column="21">return <expr><name pos:line="273" pos:column="28">result<pos:position pos:line="273" pos:column="34"/></name></expr>;<pos:position pos:line="273" pos:column="35"/></return></block></then></if>

                  <comment type="block" pos:line="275" pos:column="19">/* Newlines are CRLF, so the CR is ignored as the line isn't
                     really terminated until the LF comes. Treat a following CR
                     as end-of-headers as well.*/</comment>

                  <if pos:line="279" pos:column="19">if<condition pos:line="279" pos:column="21">(<expr><operator pos:line="279" pos:column="22">(<pos:position pos:line="279" pos:column="23"/></operator><literal type="char" pos:line="279" pos:column="23">'\r'<pos:position pos:line="279" pos:column="27"/></literal> <operator pos:line="279" pos:column="28">==<pos:position pos:line="279" pos:column="30"/></operator> <name><name pos:line="279" pos:column="31">line_start<pos:position pos:line="279" pos:column="41"/></name><index pos:line="279" pos:column="41">[<expr><literal type="number" pos:line="279" pos:column="42">0<pos:position pos:line="279" pos:column="43"/></literal></expr>]<pos:position pos:line="279" pos:column="44"/></index></name><operator pos:line="279" pos:column="44">)<pos:position pos:line="279" pos:column="45"/></operator> <operator pos:line="279" pos:column="46">||<pos:position pos:line="279" pos:column="48"/></operator>
                     <operator pos:line="280" pos:column="22">(<pos:position pos:line="280" pos:column="23"/></operator><literal type="char" pos:line="280" pos:column="23">'\n'<pos:position pos:line="280" pos:column="27"/></literal> <operator pos:line="280" pos:column="28">==<pos:position pos:line="280" pos:column="30"/></operator> <name><name pos:line="280" pos:column="31">line_start<pos:position pos:line="280" pos:column="41"/></name><index pos:line="280" pos:column="41">[<expr><literal type="number" pos:line="280" pos:column="42">0<pos:position pos:line="280" pos:column="43"/></literal></expr>]<pos:position pos:line="280" pos:column="44"/></index></name><operator pos:line="280" pos:column="44">)<pos:position pos:line="280" pos:column="45"/></operator></expr>)<pos:position pos:line="280" pos:column="46"/></condition><then pos:line="280" pos:column="46"> <block pos:line="280" pos:column="47">{
                    <comment type="block" pos:line="281" pos:column="21">/* end of response-headers from the proxy */</comment>
                    <expr_stmt><expr><name pos:line="282" pos:column="21">nread<pos:position pos:line="282" pos:column="26"/></name> <operator pos:line="282" pos:column="27">=<pos:position pos:line="282" pos:column="28"/></operator> <literal type="number" pos:line="282" pos:column="29">0<pos:position pos:line="282" pos:column="30"/></literal></expr>;<pos:position pos:line="282" pos:column="31"/></expr_stmt> <comment type="block" pos:line="282" pos:column="32">/* make next read start over in the read
                                  buffer */</comment>
                    <expr_stmt><expr><name pos:line="284" pos:column="21">ptr<pos:position pos:line="284" pos:column="24"/></name><operator pos:line="284" pos:column="24">=<pos:position pos:line="284" pos:column="25"/></operator><name><name pos:line="284" pos:column="25">data<pos:position pos:line="284" pos:column="29"/></name><operator pos:line="284" pos:column="29">-&gt;<pos:position pos:line="284" pos:column="34"/></operator><name pos:line="284" pos:column="31">state<pos:position pos:line="284" pos:column="36"/></name><operator pos:line="284" pos:column="36">.<pos:position pos:line="284" pos:column="37"/></operator><name pos:line="284" pos:column="37">buffer<pos:position pos:line="284" pos:column="43"/></name></name></expr>;<pos:position pos:line="284" pos:column="44"/></expr_stmt>
                    <if pos:line="285" pos:column="21">if<condition pos:line="285" pos:column="23">(<expr><operator pos:line="285" pos:column="24">(<pos:position pos:line="285" pos:column="25"/></operator><literal type="number" pos:line="285" pos:column="25">407<pos:position pos:line="285" pos:column="28"/></literal> <operator pos:line="285" pos:column="29">==<pos:position pos:line="285" pos:column="31"/></operator> <name><name pos:line="285" pos:column="32">k<pos:position pos:line="285" pos:column="33"/></name><operator pos:line="285" pos:column="33">-&gt;<pos:position pos:line="285" pos:column="38"/></operator><name pos:line="285" pos:column="35">httpcode<pos:position pos:line="285" pos:column="43"/></name></name><operator pos:line="285" pos:column="43">)<pos:position pos:line="285" pos:column="44"/></operator> <operator pos:line="285" pos:column="45">&amp;&amp;<pos:position pos:line="285" pos:column="55"/></operator> <operator pos:line="285" pos:column="48">!<pos:position pos:line="285" pos:column="49"/></operator><name><name pos:line="285" pos:column="49">data<pos:position pos:line="285" pos:column="53"/></name><operator pos:line="285" pos:column="53">-&gt;<pos:position pos:line="285" pos:column="58"/></operator><name pos:line="285" pos:column="55">state<pos:position pos:line="285" pos:column="60"/></name><operator pos:line="285" pos:column="60">.<pos:position pos:line="285" pos:column="61"/></operator><name pos:line="285" pos:column="61">authproblem<pos:position pos:line="285" pos:column="72"/></name></name></expr>)<pos:position pos:line="285" pos:column="73"/></condition><then pos:line="285" pos:column="73"> <block pos:line="285" pos:column="74">{
                      <comment type="block" pos:line="286" pos:column="23">/* If we get a 407 response code with content length
                         when we have no auth problem, we must ignore the
                         whole response-body */</comment>
                      <expr_stmt><expr><name pos:line="289" pos:column="23">keepon<pos:position pos:line="289" pos:column="29"/></name> <operator pos:line="289" pos:column="30">=<pos:position pos:line="289" pos:column="31"/></operator> <literal type="number" pos:line="289" pos:column="32">2<pos:position pos:line="289" pos:column="33"/></literal></expr>;<pos:position pos:line="289" pos:column="34"/></expr_stmt>

                      <if pos:line="291" pos:column="23">if<condition pos:line="291" pos:column="25">(<expr><name pos:line="291" pos:column="26">cl<pos:position pos:line="291" pos:column="28"/></name></expr>)<pos:position pos:line="291" pos:column="29"/></condition><then pos:line="291" pos:column="29"> <block pos:line="291" pos:column="30">{
                        <expr_stmt><expr><call><name pos:line="292" pos:column="25">infof<pos:position pos:line="292" pos:column="30"/></name><argument_list pos:line="292" pos:column="30">(<argument><expr><name pos:line="292" pos:column="31">data<pos:position pos:line="292" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="292" pos:column="37">"Ignore %"<pos:position pos:line="292" pos:column="47"/></literal> <name pos:line="292" pos:column="48">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="292" pos:column="70"/></name>
                              <literal type="string" pos:line="293" pos:column="31">" bytes of response-body\n"<pos:position pos:line="293" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="293" pos:column="60">cl<pos:position pos:line="293" pos:column="62"/></name></expr></argument>)<pos:position pos:line="293" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="64"/></expr_stmt>

                        <comment type="block" pos:line="295" pos:column="25">/* remove the remaining chunk of what we already
                           read */</comment>
                        <expr_stmt><expr><name pos:line="297" pos:column="25">cl<pos:position pos:line="297" pos:column="27"/></name> <operator pos:line="297" pos:column="28">-=<pos:position pos:line="297" pos:column="30"/></operator> <operator pos:line="297" pos:column="31">(<pos:position pos:line="297" pos:column="32"/></operator><name pos:line="297" pos:column="32">gotbytes<pos:position pos:line="297" pos:column="40"/></name> <operator pos:line="297" pos:column="41">-<pos:position pos:line="297" pos:column="42"/></operator> <name pos:line="297" pos:column="43">i<pos:position pos:line="297" pos:column="44"/></name><operator pos:line="297" pos:column="44">)<pos:position pos:line="297" pos:column="45"/></operator></expr>;<pos:position pos:line="297" pos:column="46"/></expr_stmt>

                        <if pos:line="299" pos:column="25">if<condition pos:line="299" pos:column="27">(<expr><name pos:line="299" pos:column="28">cl<pos:position pos:line="299" pos:column="30"/></name><operator pos:line="299" pos:column="30">&lt;=<pos:position pos:line="299" pos:column="35"/></operator><literal type="number" pos:line="299" pos:column="32">0<pos:position pos:line="299" pos:column="33"/></literal></expr>)<pos:position pos:line="299" pos:column="34"/></condition><then pos:line="299" pos:column="34">
                          <comment type="block" pos:line="300" pos:column="27">/* if the whole thing was already read, we are done!
                           */</comment>
                          <block type="pseudo"><expr_stmt><expr><name pos:line="302" pos:column="27">keepon<pos:position pos:line="302" pos:column="33"/></name><operator pos:line="302" pos:column="33">=<pos:position pos:line="302" pos:column="34"/></operator><name pos:line="302" pos:column="34">FALSE<pos:position pos:line="302" pos:column="39"/></name></expr>;<pos:position pos:line="302" pos:column="40"/></expr_stmt></block></then></if>
                      }<pos:position pos:line="303" pos:column="24"/></block></then>
                      <elseif pos:line="304" pos:column="23">else <if pos:line="304" pos:column="28">if<condition pos:line="304" pos:column="30">(<expr><name pos:line="304" pos:column="31">chunked_encoding<pos:position pos:line="304" pos:column="47"/></name></expr>)<pos:position pos:line="304" pos:column="48"/></condition><then pos:line="304" pos:column="48"> <block pos:line="304" pos:column="49">{
                        <decl_stmt><decl><type><name pos:line="305" pos:column="25">CHUNKcode<pos:position pos:line="305" pos:column="34"/></name></type> <name pos:line="305" pos:column="35">r<pos:position pos:line="305" pos:column="36"/></name></decl>;<pos:position pos:line="305" pos:column="37"/></decl_stmt>
                        <comment type="block" pos:line="306" pos:column="25">/* We set ignorebody true here since the chunked
                           decoder function will acknowledge that. Pay
                           attention so that this is cleared again when this
                           function returns! */</comment>
                        <expr_stmt><expr><name><name pos:line="310" pos:column="25">k<pos:position pos:line="310" pos:column="26"/></name><operator pos:line="310" pos:column="26">-&gt;<pos:position pos:line="310" pos:column="31"/></operator><name pos:line="310" pos:column="28">ignorebody<pos:position pos:line="310" pos:column="38"/></name></name> <operator pos:line="310" pos:column="39">=<pos:position pos:line="310" pos:column="40"/></operator> <name pos:line="310" pos:column="41">TRUE<pos:position pos:line="310" pos:column="45"/></name></expr>;<pos:position pos:line="310" pos:column="46"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="311" pos:column="25">infof<pos:position pos:line="311" pos:column="30"/></name><argument_list pos:line="311" pos:column="30">(<argument><expr><name pos:line="311" pos:column="31">data<pos:position pos:line="311" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="311" pos:column="37">"%zd bytes of chunk left\n"<pos:position pos:line="311" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="311" pos:column="66">gotbytes<pos:position pos:line="311" pos:column="74"/></name><operator pos:line="311" pos:column="74">-<pos:position pos:line="311" pos:column="75"/></operator><name pos:line="311" pos:column="75">i<pos:position pos:line="311" pos:column="76"/></name></expr></argument>)<pos:position pos:line="311" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="78"/></expr_stmt>

                        <if pos:line="313" pos:column="25">if<condition pos:line="313" pos:column="27">(<expr><name><name pos:line="313" pos:column="28">line_start<pos:position pos:line="313" pos:column="38"/></name><index pos:line="313" pos:column="38">[<expr><literal type="number" pos:line="313" pos:column="39">1<pos:position pos:line="313" pos:column="40"/></literal></expr>]<pos:position pos:line="313" pos:column="41"/></index></name> <operator pos:line="313" pos:column="42">==<pos:position pos:line="313" pos:column="44"/></operator> <literal type="char" pos:line="313" pos:column="45">'\n'<pos:position pos:line="313" pos:column="49"/></literal></expr>)<pos:position pos:line="313" pos:column="50"/></condition><then pos:line="313" pos:column="50"> <block pos:line="313" pos:column="51">{
                          <comment type="block" pos:line="314" pos:column="27">/* this can only be a LF if the letter at index 0
                             was a CR */</comment>
                          <expr_stmt><expr><name pos:line="316" pos:column="27">line_start<pos:position pos:line="316" pos:column="37"/></name><operator pos:line="316" pos:column="37">++<pos:position pos:line="316" pos:column="39"/></operator></expr>;<pos:position pos:line="316" pos:column="40"/></expr_stmt>
                          <expr_stmt><expr><name pos:line="317" pos:column="27">i<pos:position pos:line="317" pos:column="28"/></name><operator pos:line="317" pos:column="28">++<pos:position pos:line="317" pos:column="30"/></operator></expr>;<pos:position pos:line="317" pos:column="31"/></expr_stmt>
                        }<pos:position pos:line="318" pos:column="26"/></block></then></if>

                        <comment type="block" pos:line="320" pos:column="25">/* now parse the chunked piece of data so that we can
                           properly tell when the stream ends */</comment>
                        <expr_stmt><expr><name pos:line="322" pos:column="25">r<pos:position pos:line="322" pos:column="26"/></name> <operator pos:line="322" pos:column="27">=<pos:position pos:line="322" pos:column="28"/></operator> <call><name pos:line="322" pos:column="29">Curl_httpchunk_read<pos:position pos:line="322" pos:column="48"/></name><argument_list pos:line="322" pos:column="48">(<argument><expr><name pos:line="322" pos:column="49">conn<pos:position pos:line="322" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="322" pos:column="55">line_start<pos:position pos:line="322" pos:column="65"/></name><operator pos:line="322" pos:column="65">+<pos:position pos:line="322" pos:column="66"/></operator><literal type="number" pos:line="322" pos:column="66">1<pos:position pos:line="322" pos:column="67"/></literal></expr></argument>,
                                                  <argument><expr><name pos:line="323" pos:column="51">gotbytes<pos:position pos:line="323" pos:column="59"/></name> <operator pos:line="323" pos:column="60">-<pos:position pos:line="323" pos:column="61"/></operator><name pos:line="323" pos:column="61">i<pos:position pos:line="323" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="323" pos:column="64">&amp;<pos:position pos:line="323" pos:column="69"/></operator><name pos:line="323" pos:column="65">gotbytes<pos:position pos:line="323" pos:column="73"/></name></expr></argument>)<pos:position pos:line="323" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="323" pos:column="75"/></expr_stmt>
                        <if pos:line="324" pos:column="25">if<condition pos:line="324" pos:column="27">(<expr><name pos:line="324" pos:column="28">r<pos:position pos:line="324" pos:column="29"/></name> <operator pos:line="324" pos:column="30">==<pos:position pos:line="324" pos:column="32"/></operator> <name pos:line="324" pos:column="33">CHUNKE_STOP<pos:position pos:line="324" pos:column="44"/></name></expr>)<pos:position pos:line="324" pos:column="45"/></condition><then pos:line="324" pos:column="45"> <block pos:line="324" pos:column="46">{
                          <comment type="block" pos:line="325" pos:column="27">/* we're done reading chunks! */</comment>
                          <expr_stmt><expr><call><name pos:line="326" pos:column="27">infof<pos:position pos:line="326" pos:column="32"/></name><argument_list pos:line="326" pos:column="32">(<argument><expr><name pos:line="326" pos:column="33">data<pos:position pos:line="326" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="326" pos:column="39">"chunk reading DONE\n"<pos:position pos:line="326" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="326" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="326" pos:column="63"/></expr_stmt>
                          <expr_stmt><expr><name pos:line="327" pos:column="27">keepon<pos:position pos:line="327" pos:column="33"/></name> <operator pos:line="327" pos:column="34">=<pos:position pos:line="327" pos:column="35"/></operator> <name pos:line="327" pos:column="36">FALSE<pos:position pos:line="327" pos:column="41"/></name></expr>;<pos:position pos:line="327" pos:column="42"/></expr_stmt>
                          <comment type="block" pos:line="328" pos:column="27">/* we did the full CONNECT treatment, go to
                             COMPLETE */</comment>
                          <expr_stmt><expr><name><name pos:line="330" pos:column="27">conn<pos:position pos:line="330" pos:column="31"/></name><operator pos:line="330" pos:column="31">-&gt;<pos:position pos:line="330" pos:column="36"/></operator><name pos:line="330" pos:column="33">tunnel_state<pos:position pos:line="330" pos:column="45"/></name><index pos:line="330" pos:column="45">[<expr><name pos:line="330" pos:column="46">sockindex<pos:position pos:line="330" pos:column="55"/></name></expr>]<pos:position pos:line="330" pos:column="56"/></index></name> <operator pos:line="330" pos:column="57">=<pos:position pos:line="330" pos:column="58"/></operator> <name pos:line="330" pos:column="59">TUNNEL_COMPLETE<pos:position pos:line="330" pos:column="74"/></name></expr>;<pos:position pos:line="330" pos:column="75"/></expr_stmt>
                        }<pos:position pos:line="331" pos:column="26"/></block></then>
                        <else pos:line="332" pos:column="25">else
                          <block type="pseudo"><expr_stmt><expr><call><name pos:line="333" pos:column="27">infof<pos:position pos:line="333" pos:column="32"/></name><argument_list pos:line="333" pos:column="32">(<argument><expr><name pos:line="333" pos:column="33">data<pos:position pos:line="333" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="333" pos:column="39">"Read %zd bytes of chunk, continue\n"<pos:position pos:line="333" pos:column="76"/></literal></expr></argument>,
                                <argument><expr><name pos:line="334" pos:column="33">gotbytes<pos:position pos:line="334" pos:column="41"/></name></expr></argument>)<pos:position pos:line="334" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="334" pos:column="43"/></expr_stmt></block></else></if>
                      }<pos:position pos:line="335" pos:column="24"/></block></then></if></elseif>
                      <else pos:line="336" pos:column="23">else <block pos:line="336" pos:column="28">{
                        <comment type="block" pos:line="337" pos:column="25">/* without content-length or chunked encoding, we
                           can't keep the connection alive since the close is
                           the end signal so we bail out at once instead */</comment>
                        <expr_stmt><expr><name pos:line="340" pos:column="25">keepon<pos:position pos:line="340" pos:column="31"/></name><operator pos:line="340" pos:column="31">=<pos:position pos:line="340" pos:column="32"/></operator><name pos:line="340" pos:column="32">FALSE<pos:position pos:line="340" pos:column="37"/></name></expr>;<pos:position pos:line="340" pos:column="38"/></expr_stmt>
                      }<pos:position pos:line="341" pos:column="24"/></block></else></if>
                    }<pos:position pos:line="342" pos:column="22"/></block></then>
                    <else pos:line="343" pos:column="21">else <block pos:line="343" pos:column="26">{
                      <expr_stmt><expr><name pos:line="344" pos:column="23">keepon<pos:position pos:line="344" pos:column="29"/></name> <operator pos:line="344" pos:column="30">=<pos:position pos:line="344" pos:column="31"/></operator> <name pos:line="344" pos:column="32">FALSE<pos:position pos:line="344" pos:column="37"/></name></expr>;<pos:position pos:line="344" pos:column="38"/></expr_stmt>
                      <if pos:line="345" pos:column="23">if<condition pos:line="345" pos:column="25">(<expr><literal type="number" pos:line="345" pos:column="26">200<pos:position pos:line="345" pos:column="29"/></literal> <operator pos:line="345" pos:column="30">==<pos:position pos:line="345" pos:column="32"/></operator> <name><name pos:line="345" pos:column="33">data<pos:position pos:line="345" pos:column="37"/></name><operator pos:line="345" pos:column="37">-&gt;<pos:position pos:line="345" pos:column="42"/></operator><name pos:line="345" pos:column="39">info<pos:position pos:line="345" pos:column="43"/></name><operator pos:line="345" pos:column="43">.<pos:position pos:line="345" pos:column="44"/></operator><name pos:line="345" pos:column="44">httpproxycode<pos:position pos:line="345" pos:column="57"/></name></name></expr>)<pos:position pos:line="345" pos:column="58"/></condition><then pos:line="345" pos:column="58"> <block pos:line="345" pos:column="59">{
                        <if pos:line="346" pos:column="25">if<condition pos:line="346" pos:column="27">(<expr><name pos:line="346" pos:column="28">gotbytes<pos:position pos:line="346" pos:column="36"/></name> <operator pos:line="346" pos:column="37">-<pos:position pos:line="346" pos:column="38"/></operator> <operator pos:line="346" pos:column="39">(<pos:position pos:line="346" pos:column="40"/></operator><name pos:line="346" pos:column="40">i<pos:position pos:line="346" pos:column="41"/></name><operator pos:line="346" pos:column="41">+<pos:position pos:line="346" pos:column="42"/></operator><literal type="number" pos:line="346" pos:column="42">1<pos:position pos:line="346" pos:column="43"/></literal><operator pos:line="346" pos:column="43">)<pos:position pos:line="346" pos:column="44"/></operator></expr>)<pos:position pos:line="346" pos:column="45"/></condition><then pos:line="346" pos:column="45">
                          <block type="pseudo"><expr_stmt><expr><call><name pos:line="347" pos:column="27">failf<pos:position pos:line="347" pos:column="32"/></name><argument_list pos:line="347" pos:column="32">(<argument><expr><name pos:line="347" pos:column="33">data<pos:position pos:line="347" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="347" pos:column="39">"Proxy CONNECT followed by %zd bytes "<pos:position pos:line="347" pos:column="77"/></literal>
                                <literal type="string" pos:line="348" pos:column="33">"of opaque data. Data ignored (known bug #39)"<pos:position pos:line="348" pos:column="79"/></literal></expr></argument>,
                                <argument><expr><name pos:line="349" pos:column="33">gotbytes<pos:position pos:line="349" pos:column="41"/></name> <operator pos:line="349" pos:column="42">-<pos:position pos:line="349" pos:column="43"/></operator> <operator pos:line="349" pos:column="44">(<pos:position pos:line="349" pos:column="45"/></operator><name pos:line="349" pos:column="45">i<pos:position pos:line="349" pos:column="46"/></name><operator pos:line="349" pos:column="46">+<pos:position pos:line="349" pos:column="47"/></operator><literal type="number" pos:line="349" pos:column="47">1<pos:position pos:line="349" pos:column="48"/></literal><operator pos:line="349" pos:column="48">)<pos:position pos:line="349" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="349" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="349" pos:column="51"/></expr_stmt></block></then></if>
                      }<pos:position pos:line="350" pos:column="24"/></block></then></if>
                    }<pos:position pos:line="351" pos:column="22"/></block></else></if>
                    <comment type="block" pos:line="352" pos:column="21">/* we did the full CONNECT treatment, go to COMPLETE */</comment>
                    <expr_stmt><expr><name><name pos:line="353" pos:column="21">conn<pos:position pos:line="353" pos:column="25"/></name><operator pos:line="353" pos:column="25">-&gt;<pos:position pos:line="353" pos:column="30"/></operator><name pos:line="353" pos:column="27">tunnel_state<pos:position pos:line="353" pos:column="39"/></name><index pos:line="353" pos:column="39">[<expr><name pos:line="353" pos:column="40">sockindex<pos:position pos:line="353" pos:column="49"/></name></expr>]<pos:position pos:line="353" pos:column="50"/></index></name> <operator pos:line="353" pos:column="51">=<pos:position pos:line="353" pos:column="52"/></operator> <name pos:line="353" pos:column="53">TUNNEL_COMPLETE<pos:position pos:line="353" pos:column="68"/></name></expr>;<pos:position pos:line="353" pos:column="69"/></expr_stmt>
                    <break pos:line="354" pos:column="21">break;<pos:position pos:line="354" pos:column="27"/></break> <comment type="block" pos:line="354" pos:column="28">/* breaks out of for-loop, not switch() */</comment>
                  }<pos:position pos:line="355" pos:column="20"/></block></then></if>

                  <comment type="block" pos:line="357" pos:column="19">/* keep a backup of the position we are about to blank */</comment>
                  <expr_stmt><expr><name pos:line="358" pos:column="19">letter<pos:position pos:line="358" pos:column="25"/></name> <operator pos:line="358" pos:column="26">=<pos:position pos:line="358" pos:column="27"/></operator> <name><name pos:line="358" pos:column="28">line_start<pos:position pos:line="358" pos:column="38"/></name><index pos:line="358" pos:column="38">[<expr><name pos:line="358" pos:column="39">perline<pos:position pos:line="358" pos:column="46"/></name></expr>]<pos:position pos:line="358" pos:column="47"/></index></name></expr>;<pos:position pos:line="358" pos:column="48"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="359" pos:column="19">line_start<pos:position pos:line="359" pos:column="29"/></name><index pos:line="359" pos:column="29">[<expr><name pos:line="359" pos:column="30">perline<pos:position pos:line="359" pos:column="37"/></name></expr>]<pos:position pos:line="359" pos:column="38"/></index></name><operator pos:line="359" pos:column="38">=<pos:position pos:line="359" pos:column="39"/></operator><literal type="number" pos:line="359" pos:column="39">0<pos:position pos:line="359" pos:column="40"/></literal></expr>;<pos:position pos:line="359" pos:column="41"/></expr_stmt> <comment type="block" pos:line="359" pos:column="42">/* zero terminate the buffer */</comment>
                  <if pos:line="360" pos:column="19">if<condition pos:line="360" pos:column="21">(<expr><operator pos:line="360" pos:column="22">(<pos:position pos:line="360" pos:column="23"/></operator><call><name pos:line="360" pos:column="23">checkprefix<pos:position pos:line="360" pos:column="34"/></name><argument_list pos:line="360" pos:column="34">(<argument><expr><literal type="string" pos:line="360" pos:column="35">"WWW-Authenticate:"<pos:position pos:line="360" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="360" pos:column="56">line_start<pos:position pos:line="360" pos:column="66"/></name></expr></argument>)<pos:position pos:line="360" pos:column="67"/></argument_list></call> <operator pos:line="360" pos:column="68">&amp;&amp;<pos:position pos:line="360" pos:column="78"/></operator>
                      <operator pos:line="361" pos:column="23">(<pos:position pos:line="361" pos:column="24"/></operator><literal type="number" pos:line="361" pos:column="24">401<pos:position pos:line="361" pos:column="27"/></literal> <operator pos:line="361" pos:column="28">==<pos:position pos:line="361" pos:column="30"/></operator> <name><name pos:line="361" pos:column="31">k<pos:position pos:line="361" pos:column="32"/></name><operator pos:line="361" pos:column="32">-&gt;<pos:position pos:line="361" pos:column="37"/></operator><name pos:line="361" pos:column="34">httpcode<pos:position pos:line="361" pos:column="42"/></name></name><operator pos:line="361" pos:column="42">)<pos:position pos:line="361" pos:column="43"/></operator><operator pos:line="361" pos:column="43">)<pos:position pos:line="361" pos:column="44"/></operator> <operator pos:line="361" pos:column="45">||<pos:position pos:line="361" pos:column="47"/></operator>
                     <operator pos:line="362" pos:column="22">(<pos:position pos:line="362" pos:column="23"/></operator><call><name pos:line="362" pos:column="23">checkprefix<pos:position pos:line="362" pos:column="34"/></name><argument_list pos:line="362" pos:column="34">(<argument><expr><literal type="string" pos:line="362" pos:column="35">"Proxy-authenticate:"<pos:position pos:line="362" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="362" pos:column="58">line_start<pos:position pos:line="362" pos:column="68"/></name></expr></argument>)<pos:position pos:line="362" pos:column="69"/></argument_list></call> <operator pos:line="362" pos:column="70">&amp;&amp;<pos:position pos:line="362" pos:column="80"/></operator>
                      <operator pos:line="363" pos:column="23">(<pos:position pos:line="363" pos:column="24"/></operator><literal type="number" pos:line="363" pos:column="24">407<pos:position pos:line="363" pos:column="27"/></literal> <operator pos:line="363" pos:column="28">==<pos:position pos:line="363" pos:column="30"/></operator> <name><name pos:line="363" pos:column="31">k<pos:position pos:line="363" pos:column="32"/></name><operator pos:line="363" pos:column="32">-&gt;<pos:position pos:line="363" pos:column="37"/></operator><name pos:line="363" pos:column="34">httpcode<pos:position pos:line="363" pos:column="42"/></name></name><operator pos:line="363" pos:column="42">)<pos:position pos:line="363" pos:column="43"/></operator><operator pos:line="363" pos:column="43">)<pos:position pos:line="363" pos:column="44"/></operator></expr>)<pos:position pos:line="363" pos:column="45"/></condition><then pos:line="363" pos:column="45"> <block pos:line="363" pos:column="46">{

                    <decl_stmt><decl><type><name pos:line="365" pos:column="21">bool<pos:position pos:line="365" pos:column="25"/></name></type> <name pos:line="365" pos:column="26">proxy<pos:position pos:line="365" pos:column="31"/></name> <init pos:line="365" pos:column="32">= <expr><ternary><condition><expr><operator pos:line="365" pos:column="34">(<pos:position pos:line="365" pos:column="35"/></operator><name><name pos:line="365" pos:column="35">k<pos:position pos:line="365" pos:column="36"/></name><operator pos:line="365" pos:column="36">-&gt;<pos:position pos:line="365" pos:column="41"/></operator><name pos:line="365" pos:column="38">httpcode<pos:position pos:line="365" pos:column="46"/></name></name> <operator pos:line="365" pos:column="47">==<pos:position pos:line="365" pos:column="49"/></operator> <literal type="number" pos:line="365" pos:column="50">407<pos:position pos:line="365" pos:column="53"/></literal><operator pos:line="365" pos:column="53">)<pos:position pos:line="365" pos:column="54"/></operator></expr> ?<pos:position pos:line="365" pos:column="56"/></condition><then pos:line="365" pos:column="56"> <expr><name pos:line="365" pos:column="57">TRUE<pos:position pos:line="365" pos:column="61"/></name></expr> <pos:position pos:line="365" pos:column="62"/></then><else pos:line="365" pos:column="62">: <expr><name pos:line="365" pos:column="64">FALSE<pos:position pos:line="365" pos:column="69"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="365" pos:column="70"/></decl_stmt>
                    <decl_stmt><decl><type><name pos:line="366" pos:column="21">char<pos:position pos:line="366" pos:column="25"/></name> <modifier pos:line="366" pos:column="26">*<pos:position pos:line="366" pos:column="27"/></modifier></type><name pos:line="366" pos:column="27">auth<pos:position pos:line="366" pos:column="31"/></name> <init pos:line="366" pos:column="32">= <expr><call><name pos:line="366" pos:column="34">Curl_copy_header_value<pos:position pos:line="366" pos:column="56"/></name><argument_list pos:line="366" pos:column="56">(<argument><expr><name pos:line="366" pos:column="57">line_start<pos:position pos:line="366" pos:column="67"/></name></expr></argument>)<pos:position pos:line="366" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="366" pos:column="69"/></decl_stmt>
                    <if pos:line="367" pos:column="21">if<condition pos:line="367" pos:column="23">(<expr><operator pos:line="367" pos:column="24">!<pos:position pos:line="367" pos:column="25"/></operator><name pos:line="367" pos:column="25">auth<pos:position pos:line="367" pos:column="29"/></name></expr>)<pos:position pos:line="367" pos:column="30"/></condition><then pos:line="367" pos:column="30">
                      <block type="pseudo"><return pos:line="368" pos:column="23">return <expr><name pos:line="368" pos:column="30">CURLE_OUT_OF_MEMORY<pos:position pos:line="368" pos:column="49"/></name></expr>;<pos:position pos:line="368" pos:column="50"/></return></block></then></if>

                    <expr_stmt><expr><name pos:line="370" pos:column="21">result<pos:position pos:line="370" pos:column="27"/></name> <operator pos:line="370" pos:column="28">=<pos:position pos:line="370" pos:column="29"/></operator> <call><name pos:line="370" pos:column="30">Curl_http_input_auth<pos:position pos:line="370" pos:column="50"/></name><argument_list pos:line="370" pos:column="50">(<argument><expr><name pos:line="370" pos:column="51">conn<pos:position pos:line="370" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="370" pos:column="57">proxy<pos:position pos:line="370" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="370" pos:column="64">auth<pos:position pos:line="370" pos:column="68"/></name></expr></argument>)<pos:position pos:line="370" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="370" pos:column="70"/></expr_stmt>

                    <expr_stmt><expr><call><name pos:line="372" pos:column="21">Curl_safefree<pos:position pos:line="372" pos:column="34"/></name><argument_list pos:line="372" pos:column="34">(<argument><expr><name pos:line="372" pos:column="35">auth<pos:position pos:line="372" pos:column="39"/></name></expr></argument>)<pos:position pos:line="372" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="372" pos:column="41"/></expr_stmt>

                    <if pos:line="374" pos:column="21">if<condition pos:line="374" pos:column="23">(<expr><name pos:line="374" pos:column="24">result<pos:position pos:line="374" pos:column="30"/></name></expr>)<pos:position pos:line="374" pos:column="31"/></condition><then pos:line="374" pos:column="31">
                      <block type="pseudo"><return pos:line="375" pos:column="23">return <expr><name pos:line="375" pos:column="30">result<pos:position pos:line="375" pos:column="36"/></name></expr>;<pos:position pos:line="375" pos:column="37"/></return></block></then></if>
                  }<pos:position pos:line="376" pos:column="20"/></block></then>
                  <elseif pos:line="377" pos:column="19">else <if pos:line="377" pos:column="24">if<condition pos:line="377" pos:column="26">(<expr><call><name pos:line="377" pos:column="27">checkprefix<pos:position pos:line="377" pos:column="38"/></name><argument_list pos:line="377" pos:column="38">(<argument><expr><literal type="string" pos:line="377" pos:column="39">"Content-Length:"<pos:position pos:line="377" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="377" pos:column="58">line_start<pos:position pos:line="377" pos:column="68"/></name></expr></argument>)<pos:position pos:line="377" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="377" pos:column="70"/></condition><then pos:line="377" pos:column="70"> <block pos:line="377" pos:column="71">{
                    <expr_stmt><expr><name pos:line="378" pos:column="21">cl<pos:position pos:line="378" pos:column="23"/></name> <operator pos:line="378" pos:column="24">=<pos:position pos:line="378" pos:column="25"/></operator> <call><name pos:line="378" pos:column="26">curlx_strtoofft<pos:position pos:line="378" pos:column="41"/></name><argument_list pos:line="378" pos:column="41">(<argument><expr><name pos:line="378" pos:column="42">line_start<pos:position pos:line="378" pos:column="52"/></name> <operator pos:line="378" pos:column="53">+<pos:position pos:line="378" pos:column="54"/></operator>
                                         <call><name pos:line="379" pos:column="42">strlen<pos:position pos:line="379" pos:column="48"/></name><argument_list pos:line="379" pos:column="48">(<argument><expr><literal type="string" pos:line="379" pos:column="49">"Content-Length:"<pos:position pos:line="379" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="379" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="379" pos:column="69">NULL<pos:position pos:line="379" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="379" pos:column="75">10<pos:position pos:line="379" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="379" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="379" pos:column="79"/></expr_stmt>
                  }<pos:position pos:line="380" pos:column="20"/></block></then></if></elseif>
                  <elseif pos:line="381" pos:column="19">else <if pos:line="381" pos:column="24">if<condition pos:line="381" pos:column="26">(<expr><call><name pos:line="381" pos:column="27">Curl_compareheader<pos:position pos:line="381" pos:column="45"/></name><argument_list pos:line="381" pos:column="45">(<argument><expr><name pos:line="381" pos:column="46">line_start<pos:position pos:line="381" pos:column="56"/></name></expr></argument>,
                                             <argument><expr><literal type="string" pos:line="382" pos:column="46">"Connection:"<pos:position pos:line="382" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="382" pos:column="61">"close"<pos:position pos:line="382" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="382" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="382" pos:column="70"/></condition><then pos:line="382" pos:column="70">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="383" pos:column="21">closeConnection<pos:position pos:line="383" pos:column="36"/></name> <operator pos:line="383" pos:column="37">=<pos:position pos:line="383" pos:column="38"/></operator> <name pos:line="383" pos:column="39">TRUE<pos:position pos:line="383" pos:column="43"/></name></expr>;<pos:position pos:line="383" pos:column="44"/></expr_stmt></block></then></if></elseif>
                  <elseif pos:line="384" pos:column="19">else <if pos:line="384" pos:column="24">if<condition pos:line="384" pos:column="26">(<expr><call><name pos:line="384" pos:column="27">Curl_compareheader<pos:position pos:line="384" pos:column="45"/></name><argument_list pos:line="384" pos:column="45">(<argument><expr><name pos:line="384" pos:column="46">line_start<pos:position pos:line="384" pos:column="56"/></name></expr></argument>,
                                             <argument><expr><literal type="string" pos:line="385" pos:column="46">"Transfer-Encoding:"<pos:position pos:line="385" pos:column="66"/></literal></expr></argument>,
                                             <argument><expr><literal type="string" pos:line="386" pos:column="46">"chunked"<pos:position pos:line="386" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="386" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="386" pos:column="57"/></condition><then pos:line="386" pos:column="57"> <block pos:line="386" pos:column="58">{
                    <expr_stmt><expr><call><name pos:line="387" pos:column="21">infof<pos:position pos:line="387" pos:column="26"/></name><argument_list pos:line="387" pos:column="26">(<argument><expr><name pos:line="387" pos:column="27">data<pos:position pos:line="387" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="387" pos:column="33">"CONNECT responded chunked\n"<pos:position pos:line="387" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="387" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="387" pos:column="64"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="388" pos:column="21">chunked_encoding<pos:position pos:line="388" pos:column="37"/></name> <operator pos:line="388" pos:column="38">=<pos:position pos:line="388" pos:column="39"/></operator> <name pos:line="388" pos:column="40">TRUE<pos:position pos:line="388" pos:column="44"/></name></expr>;<pos:position pos:line="388" pos:column="45"/></expr_stmt>
                    <comment type="block" pos:line="389" pos:column="21">/* init our chunky engine */</comment>
                    <expr_stmt><expr><call><name pos:line="390" pos:column="21">Curl_httpchunk_init<pos:position pos:line="390" pos:column="40"/></name><argument_list pos:line="390" pos:column="40">(<argument><expr><name pos:line="390" pos:column="41">conn<pos:position pos:line="390" pos:column="45"/></name></expr></argument>)<pos:position pos:line="390" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="390" pos:column="47"/></expr_stmt>
                  }<pos:position pos:line="391" pos:column="20"/></block></then></if></elseif>
                  <elseif pos:line="392" pos:column="19">else <if pos:line="392" pos:column="24">if<condition pos:line="392" pos:column="26">(<expr><call><name pos:line="392" pos:column="27">Curl_compareheader<pos:position pos:line="392" pos:column="45"/></name><argument_list pos:line="392" pos:column="45">(<argument><expr><name pos:line="392" pos:column="46">line_start<pos:position pos:line="392" pos:column="56"/></name></expr></argument>,
                                             <argument><expr><literal type="string" pos:line="393" pos:column="46">"Proxy-Connection:"<pos:position pos:line="393" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="393" pos:column="67">"close"<pos:position pos:line="393" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="393" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="393" pos:column="76"/></condition><then pos:line="393" pos:column="76">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="394" pos:column="21">closeConnection<pos:position pos:line="394" pos:column="36"/></name> <operator pos:line="394" pos:column="37">=<pos:position pos:line="394" pos:column="38"/></operator> <name pos:line="394" pos:column="39">TRUE<pos:position pos:line="394" pos:column="43"/></name></expr>;<pos:position pos:line="394" pos:column="44"/></expr_stmt></block></then></if></elseif>
                  <elseif pos:line="395" pos:column="19">else <if pos:line="395" pos:column="24">if<condition pos:line="395" pos:column="26">(<expr><literal type="number" pos:line="395" pos:column="27">2<pos:position pos:line="395" pos:column="28"/></literal> <operator pos:line="395" pos:column="29">==<pos:position pos:line="395" pos:column="31"/></operator> <call><name pos:line="395" pos:column="32">sscanf<pos:position pos:line="395" pos:column="38"/></name><argument_list pos:line="395" pos:column="38">(<argument><expr><name pos:line="395" pos:column="39">line_start<pos:position pos:line="395" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="395" pos:column="51">"HTTP/1.%d %d"<pos:position pos:line="395" pos:column="65"/></literal></expr></argument>,
                                      <argument><expr><operator pos:line="396" pos:column="39">&amp;<pos:position pos:line="396" pos:column="44"/></operator><name pos:line="396" pos:column="40">subversion<pos:position pos:line="396" pos:column="50"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="397" pos:column="39">&amp;<pos:position pos:line="397" pos:column="44"/></operator><name><name pos:line="397" pos:column="40">k<pos:position pos:line="397" pos:column="41"/></name><operator pos:line="397" pos:column="41">-&gt;<pos:position pos:line="397" pos:column="46"/></operator><name pos:line="397" pos:column="43">httpcode<pos:position pos:line="397" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="397" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="397" pos:column="53"/></condition><then pos:line="397" pos:column="53"> <block pos:line="397" pos:column="54">{
                    <comment type="block" pos:line="398" pos:column="21">/* store the HTTP code from the proxy */</comment>
                    <expr_stmt><expr><name><name pos:line="399" pos:column="21">data<pos:position pos:line="399" pos:column="25"/></name><operator pos:line="399" pos:column="25">-&gt;<pos:position pos:line="399" pos:column="30"/></operator><name pos:line="399" pos:column="27">info<pos:position pos:line="399" pos:column="31"/></name><operator pos:line="399" pos:column="31">.<pos:position pos:line="399" pos:column="32"/></operator><name pos:line="399" pos:column="32">httpproxycode<pos:position pos:line="399" pos:column="45"/></name></name> <operator pos:line="399" pos:column="46">=<pos:position pos:line="399" pos:column="47"/></operator> <name><name pos:line="399" pos:column="48">k<pos:position pos:line="399" pos:column="49"/></name><operator pos:line="399" pos:column="49">-&gt;<pos:position pos:line="399" pos:column="54"/></operator><name pos:line="399" pos:column="51">httpcode<pos:position pos:line="399" pos:column="59"/></name></name></expr>;<pos:position pos:line="399" pos:column="60"/></expr_stmt>
                  }<pos:position pos:line="400" pos:column="20"/></block></then></if></elseif></if>
                  <comment type="block" pos:line="401" pos:column="19">/* put back the letter we blanked out before */</comment>
                  <expr_stmt><expr><name><name pos:line="402" pos:column="19">line_start<pos:position pos:line="402" pos:column="29"/></name><index pos:line="402" pos:column="29">[<expr><name pos:line="402" pos:column="30">perline<pos:position pos:line="402" pos:column="37"/></name></expr>]<pos:position pos:line="402" pos:column="38"/></index></name><operator pos:line="402" pos:column="38">=<pos:position pos:line="402" pos:column="39"/></operator> <name pos:line="402" pos:column="40">letter<pos:position pos:line="402" pos:column="46"/></name></expr>;<pos:position pos:line="402" pos:column="47"/></expr_stmt>

                  <expr_stmt><expr><name pos:line="404" pos:column="19">perline<pos:position pos:line="404" pos:column="26"/></name><operator pos:line="404" pos:column="26">=<pos:position pos:line="404" pos:column="27"/></operator><literal type="number" pos:line="404" pos:column="27">0<pos:position pos:line="404" pos:column="28"/></literal></expr>;<pos:position pos:line="404" pos:column="29"/></expr_stmt> <comment type="block" pos:line="404" pos:column="30">/* line starts over here */</comment>
                  <expr_stmt><expr><name pos:line="405" pos:column="19">line_start<pos:position pos:line="405" pos:column="29"/></name> <operator pos:line="405" pos:column="30">=<pos:position pos:line="405" pos:column="31"/></operator> <name pos:line="405" pos:column="32">ptr<pos:position pos:line="405" pos:column="35"/></name><operator pos:line="405" pos:column="35">+<pos:position pos:line="405" pos:column="36"/></operator><literal type="number" pos:line="405" pos:column="36">1<pos:position pos:line="405" pos:column="37"/></literal></expr>;<pos:position pos:line="405" pos:column="38"/></expr_stmt> <comment type="block" pos:line="405" pos:column="39">/* this skips the zero byte we wrote */</comment>
                }<pos:position pos:line="406" pos:column="18"/></block></then></if>
              }<pos:position pos:line="407" pos:column="16"/></block></for></block></else></if>
          }<pos:position pos:line="408" pos:column="12"/></block></else></if>
          <break pos:line="409" pos:column="11">break;<pos:position pos:line="409" pos:column="17"/></break>
        }<pos:position pos:line="410" pos:column="10"/></block></switch> <comment type="block" pos:line="410" pos:column="11">/* switch */</comment>
        <if pos:line="411" pos:column="9">if<condition pos:line="411" pos:column="11">(<expr><call><name pos:line="411" pos:column="12">Curl_pgrsUpdate<pos:position pos:line="411" pos:column="27"/></name><argument_list pos:line="411" pos:column="27">(<argument><expr><name pos:line="411" pos:column="28">conn<pos:position pos:line="411" pos:column="32"/></name></expr></argument>)<pos:position pos:line="411" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="411" pos:column="34"/></condition><then pos:line="411" pos:column="34">
          <block type="pseudo"><return pos:line="412" pos:column="11">return <expr><name pos:line="412" pos:column="18">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="412" pos:column="43"/></name></expr>;<pos:position pos:line="412" pos:column="44"/></return></block></then></if>
      }<pos:position pos:line="413" pos:column="8"/></block></while> <comment type="block" pos:line="413" pos:column="9">/* while there's buffer left and loop is requested */</comment>

      <if pos:line="415" pos:column="7">if<condition pos:line="415" pos:column="9">(<expr><name pos:line="415" pos:column="10">error<pos:position pos:line="415" pos:column="15"/></name></expr>)<pos:position pos:line="415" pos:column="16"/></condition><then pos:line="415" pos:column="16">
        <block type="pseudo"><return pos:line="416" pos:column="9">return <expr><name pos:line="416" pos:column="16">CURLE_RECV_ERROR<pos:position pos:line="416" pos:column="32"/></name></expr>;<pos:position pos:line="416" pos:column="33"/></return></block></then></if>

      <if pos:line="418" pos:column="7">if<condition pos:line="418" pos:column="9">(<expr><name><name pos:line="418" pos:column="10">data<pos:position pos:line="418" pos:column="14"/></name><operator pos:line="418" pos:column="14">-&gt;<pos:position pos:line="418" pos:column="19"/></operator><name pos:line="418" pos:column="16">info<pos:position pos:line="418" pos:column="20"/></name><operator pos:line="418" pos:column="20">.<pos:position pos:line="418" pos:column="21"/></operator><name pos:line="418" pos:column="21">httpproxycode<pos:position pos:line="418" pos:column="34"/></name></name> <operator pos:line="418" pos:column="35">!=<pos:position pos:line="418" pos:column="37"/></operator> <literal type="number" pos:line="418" pos:column="38">200<pos:position pos:line="418" pos:column="41"/></literal></expr>)<pos:position pos:line="418" pos:column="42"/></condition><then pos:line="418" pos:column="42"> <block pos:line="418" pos:column="43">{
        <comment type="block" pos:line="419" pos:column="9">/* Deal with the possibly already received authenticate
           headers. 'newurl' is set to a new URL if we must loop. */</comment>
        <expr_stmt><expr><name pos:line="421" pos:column="9">result<pos:position pos:line="421" pos:column="15"/></name> <operator pos:line="421" pos:column="16">=<pos:position pos:line="421" pos:column="17"/></operator> <call><name pos:line="421" pos:column="18">Curl_http_auth_act<pos:position pos:line="421" pos:column="36"/></name><argument_list pos:line="421" pos:column="36">(<argument><expr><name pos:line="421" pos:column="37">conn<pos:position pos:line="421" pos:column="41"/></name></expr></argument>)<pos:position pos:line="421" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="421" pos:column="43"/></expr_stmt>
        <if pos:line="422" pos:column="9">if<condition pos:line="422" pos:column="11">(<expr><name pos:line="422" pos:column="12">result<pos:position pos:line="422" pos:column="18"/></name></expr>)<pos:position pos:line="422" pos:column="19"/></condition><then pos:line="422" pos:column="19">
          <block type="pseudo"><return pos:line="423" pos:column="11">return <expr><name pos:line="423" pos:column="18">result<pos:position pos:line="423" pos:column="24"/></name></expr>;<pos:position pos:line="423" pos:column="25"/></return></block></then></if>

        <if pos:line="425" pos:column="9">if<condition pos:line="425" pos:column="11">(<expr><name><name pos:line="425" pos:column="12">conn<pos:position pos:line="425" pos:column="16"/></name><operator pos:line="425" pos:column="16">-&gt;<pos:position pos:line="425" pos:column="21"/></operator><name pos:line="425" pos:column="18">bits<pos:position pos:line="425" pos:column="22"/></name><operator pos:line="425" pos:column="22">.<pos:position pos:line="425" pos:column="23"/></operator><name pos:line="425" pos:column="23">close<pos:position pos:line="425" pos:column="28"/></name></name></expr>)<pos:position pos:line="425" pos:column="29"/></condition><then pos:line="425" pos:column="29">
          <comment type="block" pos:line="426" pos:column="11">/* the connection has been marked for closure, most likely in the
             Curl_http_auth_act() function and thus we can kill it at once
             below
          */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="430" pos:column="11">closeConnection<pos:position pos:line="430" pos:column="26"/></name> <operator pos:line="430" pos:column="27">=<pos:position pos:line="430" pos:column="28"/></operator> <name pos:line="430" pos:column="29">TRUE<pos:position pos:line="430" pos:column="33"/></name></expr>;<pos:position pos:line="430" pos:column="34"/></expr_stmt></block></then></if>
      }<pos:position pos:line="431" pos:column="8"/></block></then></if>

      <if pos:line="433" pos:column="7">if<condition pos:line="433" pos:column="9">(<expr><name pos:line="433" pos:column="10">closeConnection<pos:position pos:line="433" pos:column="25"/></name> <operator pos:line="433" pos:column="26">&amp;&amp;<pos:position pos:line="433" pos:column="36"/></operator> <name><name pos:line="433" pos:column="29">data<pos:position pos:line="433" pos:column="33"/></name><operator pos:line="433" pos:column="33">-&gt;<pos:position pos:line="433" pos:column="38"/></operator><name pos:line="433" pos:column="35">req<pos:position pos:line="433" pos:column="38"/></name><operator pos:line="433" pos:column="38">.<pos:position pos:line="433" pos:column="39"/></operator><name pos:line="433" pos:column="39">newurl<pos:position pos:line="433" pos:column="45"/></name></name></expr>)<pos:position pos:line="433" pos:column="46"/></condition><then pos:line="433" pos:column="46"> <block pos:line="433" pos:column="47">{
        <comment type="block" pos:line="434" pos:column="9">/* Connection closed by server. Don't use it anymore */</comment>
        <expr_stmt><expr><call><name pos:line="435" pos:column="9">Curl_closesocket<pos:position pos:line="435" pos:column="25"/></name><argument_list pos:line="435" pos:column="25">(<argument><expr><name pos:line="435" pos:column="26">conn<pos:position pos:line="435" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="435" pos:column="32">conn<pos:position pos:line="435" pos:column="36"/></name><operator pos:line="435" pos:column="36">-&gt;<pos:position pos:line="435" pos:column="41"/></operator><name pos:line="435" pos:column="38">sock<pos:position pos:line="435" pos:column="42"/></name><index pos:line="435" pos:column="42">[<expr><name pos:line="435" pos:column="43">sockindex<pos:position pos:line="435" pos:column="52"/></name></expr>]<pos:position pos:line="435" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="435" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="435" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="436" pos:column="9">conn<pos:position pos:line="436" pos:column="13"/></name><operator pos:line="436" pos:column="13">-&gt;<pos:position pos:line="436" pos:column="18"/></operator><name pos:line="436" pos:column="15">sock<pos:position pos:line="436" pos:column="19"/></name><index pos:line="436" pos:column="19">[<expr><name pos:line="436" pos:column="20">sockindex<pos:position pos:line="436" pos:column="29"/></name></expr>]<pos:position pos:line="436" pos:column="30"/></index></name> <operator pos:line="436" pos:column="31">=<pos:position pos:line="436" pos:column="32"/></operator> <name pos:line="436" pos:column="33">CURL_SOCKET_BAD<pos:position pos:line="436" pos:column="48"/></name></expr>;<pos:position pos:line="436" pos:column="49"/></expr_stmt>
        <break pos:line="437" pos:column="9">break;<pos:position pos:line="437" pos:column="15"/></break>
      }<pos:position pos:line="438" pos:column="8"/></block></then></if>
    }<pos:position pos:line="439" pos:column="6"/></block> <comment type="block" pos:line="439" pos:column="7">/* END NEGOTIATION PHASE */</comment>

    <comment type="block" pos:line="441" pos:column="5">/* If we are supposed to continue and request a new URL, which basically
     * means the HTTP authentication is still going on so if the tunnel
     * is complete we start over in INIT state */</comment>
    <if pos:line="444" pos:column="5">if<condition pos:line="444" pos:column="7">(<expr><name><name pos:line="444" pos:column="8">data<pos:position pos:line="444" pos:column="12"/></name><operator pos:line="444" pos:column="12">-&gt;<pos:position pos:line="444" pos:column="17"/></operator><name pos:line="444" pos:column="14">req<pos:position pos:line="444" pos:column="17"/></name><operator pos:line="444" pos:column="17">.<pos:position pos:line="444" pos:column="18"/></operator><name pos:line="444" pos:column="18">newurl<pos:position pos:line="444" pos:column="24"/></name></name> <operator pos:line="444" pos:column="25">&amp;&amp;<pos:position pos:line="444" pos:column="35"/></operator>
       <operator pos:line="445" pos:column="8">(<pos:position pos:line="445" pos:column="9"/></operator><name pos:line="445" pos:column="9">TUNNEL_COMPLETE<pos:position pos:line="445" pos:column="24"/></name> <operator pos:line="445" pos:column="25">==<pos:position pos:line="445" pos:column="27"/></operator> <name><name pos:line="445" pos:column="28">conn<pos:position pos:line="445" pos:column="32"/></name><operator pos:line="445" pos:column="32">-&gt;<pos:position pos:line="445" pos:column="37"/></operator><name pos:line="445" pos:column="34">tunnel_state<pos:position pos:line="445" pos:column="46"/></name><index pos:line="445" pos:column="46">[<expr><name pos:line="445" pos:column="47">sockindex<pos:position pos:line="445" pos:column="56"/></name></expr>]<pos:position pos:line="445" pos:column="57"/></index></name><operator pos:line="445" pos:column="57">)<pos:position pos:line="445" pos:column="58"/></operator></expr>)<pos:position pos:line="445" pos:column="59"/></condition><then pos:line="445" pos:column="59"> <block pos:line="445" pos:column="60">{
      <expr_stmt><expr><name><name pos:line="446" pos:column="7">conn<pos:position pos:line="446" pos:column="11"/></name><operator pos:line="446" pos:column="11">-&gt;<pos:position pos:line="446" pos:column="16"/></operator><name pos:line="446" pos:column="13">tunnel_state<pos:position pos:line="446" pos:column="25"/></name><index pos:line="446" pos:column="25">[<expr><name pos:line="446" pos:column="26">sockindex<pos:position pos:line="446" pos:column="35"/></name></expr>]<pos:position pos:line="446" pos:column="36"/></index></name> <operator pos:line="446" pos:column="37">=<pos:position pos:line="446" pos:column="38"/></operator> <name pos:line="446" pos:column="39">TUNNEL_INIT<pos:position pos:line="446" pos:column="50"/></name></expr>;<pos:position pos:line="446" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="447" pos:column="7">infof<pos:position pos:line="447" pos:column="12"/></name><argument_list pos:line="447" pos:column="12">(<argument><expr><name pos:line="447" pos:column="13">data<pos:position pos:line="447" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="447" pos:column="19">"TUNNEL_STATE switched to: %d\n"<pos:position pos:line="447" pos:column="51"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="448" pos:column="13">conn<pos:position pos:line="448" pos:column="17"/></name><operator pos:line="448" pos:column="17">-&gt;<pos:position pos:line="448" pos:column="22"/></operator><name pos:line="448" pos:column="19">tunnel_state<pos:position pos:line="448" pos:column="31"/></name><index pos:line="448" pos:column="31">[<expr><name pos:line="448" pos:column="32">sockindex<pos:position pos:line="448" pos:column="41"/></name></expr>]<pos:position pos:line="448" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="448" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="448" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="449" pos:column="6"/></block></then></if>

  }<pos:position pos:line="451" pos:column="4"/></block> while<condition pos:line="451" pos:column="10">(<expr><name><name pos:line="451" pos:column="11">data<pos:position pos:line="451" pos:column="15"/></name><operator pos:line="451" pos:column="15">-&gt;<pos:position pos:line="451" pos:column="20"/></operator><name pos:line="451" pos:column="17">req<pos:position pos:line="451" pos:column="20"/></name><operator pos:line="451" pos:column="20">.<pos:position pos:line="451" pos:column="21"/></operator><name pos:line="451" pos:column="21">newurl<pos:position pos:line="451" pos:column="27"/></name></name></expr>)<pos:position pos:line="451" pos:column="28"/></condition>;<pos:position pos:line="451" pos:column="29"/></do>

  <if pos:line="453" pos:column="3">if<condition pos:line="453" pos:column="5">(<expr><literal type="number" pos:line="453" pos:column="6">200<pos:position pos:line="453" pos:column="9"/></literal> <operator pos:line="453" pos:column="10">!=<pos:position pos:line="453" pos:column="12"/></operator> <name><name pos:line="453" pos:column="13">data<pos:position pos:line="453" pos:column="17"/></name><operator pos:line="453" pos:column="17">-&gt;<pos:position pos:line="453" pos:column="22"/></operator><name pos:line="453" pos:column="19">req<pos:position pos:line="453" pos:column="22"/></name><operator pos:line="453" pos:column="22">.<pos:position pos:line="453" pos:column="23"/></operator><name pos:line="453" pos:column="23">httpcode<pos:position pos:line="453" pos:column="31"/></name></name></expr>)<pos:position pos:line="453" pos:column="32"/></condition><then pos:line="453" pos:column="32"> <block pos:line="453" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="454" pos:column="5">failf<pos:position pos:line="454" pos:column="10"/></name><argument_list pos:line="454" pos:column="10">(<argument><expr><name pos:line="454" pos:column="11">data<pos:position pos:line="454" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="454" pos:column="17">"Received HTTP code %d from proxy after CONNECT"<pos:position pos:line="454" pos:column="65"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="455" pos:column="11">data<pos:position pos:line="455" pos:column="15"/></name><operator pos:line="455" pos:column="15">-&gt;<pos:position pos:line="455" pos:column="20"/></operator><name pos:line="455" pos:column="17">req<pos:position pos:line="455" pos:column="20"/></name><operator pos:line="455" pos:column="20">.<pos:position pos:line="455" pos:column="21"/></operator><name pos:line="455" pos:column="21">httpcode<pos:position pos:line="455" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="455" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="455" pos:column="31"/></expr_stmt>

    <if pos:line="457" pos:column="5">if<condition pos:line="457" pos:column="7">(<expr><name pos:line="457" pos:column="8">closeConnection<pos:position pos:line="457" pos:column="23"/></name> <operator pos:line="457" pos:column="24">&amp;&amp;<pos:position pos:line="457" pos:column="34"/></operator> <name><name pos:line="457" pos:column="27">data<pos:position pos:line="457" pos:column="31"/></name><operator pos:line="457" pos:column="31">-&gt;<pos:position pos:line="457" pos:column="36"/></operator><name pos:line="457" pos:column="33">req<pos:position pos:line="457" pos:column="36"/></name><operator pos:line="457" pos:column="36">.<pos:position pos:line="457" pos:column="37"/></operator><name pos:line="457" pos:column="37">newurl<pos:position pos:line="457" pos:column="43"/></name></name></expr>)<pos:position pos:line="457" pos:column="44"/></condition><then pos:line="457" pos:column="44">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="458" pos:column="7">conn<pos:position pos:line="458" pos:column="11"/></name><operator pos:line="458" pos:column="11">-&gt;<pos:position pos:line="458" pos:column="16"/></operator><name pos:line="458" pos:column="13">bits<pos:position pos:line="458" pos:column="17"/></name><operator pos:line="458" pos:column="17">.<pos:position pos:line="458" pos:column="18"/></operator><name pos:line="458" pos:column="18">proxy_connect_closed<pos:position pos:line="458" pos:column="38"/></name></name> <operator pos:line="458" pos:column="39">=<pos:position pos:line="458" pos:column="40"/></operator> <name pos:line="458" pos:column="41">TRUE<pos:position pos:line="458" pos:column="45"/></name></expr>;<pos:position pos:line="458" pos:column="46"/></expr_stmt></block></then></if>

    <if pos:line="460" pos:column="5">if<condition pos:line="460" pos:column="7">(<expr><name><name pos:line="460" pos:column="8">data<pos:position pos:line="460" pos:column="12"/></name><operator pos:line="460" pos:column="12">-&gt;<pos:position pos:line="460" pos:column="17"/></operator><name pos:line="460" pos:column="14">req<pos:position pos:line="460" pos:column="17"/></name><operator pos:line="460" pos:column="17">.<pos:position pos:line="460" pos:column="18"/></operator><name pos:line="460" pos:column="18">newurl<pos:position pos:line="460" pos:column="24"/></name></name></expr>)<pos:position pos:line="460" pos:column="25"/></condition><then pos:line="460" pos:column="25"> <block pos:line="460" pos:column="26">{
      <comment type="block" pos:line="461" pos:column="7">/* this won't be used anymore for the CONNECT so free it now */</comment>
      <expr_stmt><expr><call><name pos:line="462" pos:column="7">free<pos:position pos:line="462" pos:column="11"/></name><argument_list pos:line="462" pos:column="11">(<argument><expr><name><name pos:line="462" pos:column="12">data<pos:position pos:line="462" pos:column="16"/></name><operator pos:line="462" pos:column="16">-&gt;<pos:position pos:line="462" pos:column="21"/></operator><name pos:line="462" pos:column="18">req<pos:position pos:line="462" pos:column="21"/></name><operator pos:line="462" pos:column="21">.<pos:position pos:line="462" pos:column="22"/></operator><name pos:line="462" pos:column="22">newurl<pos:position pos:line="462" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="462" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="462" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="463" pos:column="7">data<pos:position pos:line="463" pos:column="11"/></name><operator pos:line="463" pos:column="11">-&gt;<pos:position pos:line="463" pos:column="16"/></operator><name pos:line="463" pos:column="13">req<pos:position pos:line="463" pos:column="16"/></name><operator pos:line="463" pos:column="16">.<pos:position pos:line="463" pos:column="17"/></operator><name pos:line="463" pos:column="17">newurl<pos:position pos:line="463" pos:column="23"/></name></name> <operator pos:line="463" pos:column="24">=<pos:position pos:line="463" pos:column="25"/></operator> <name pos:line="463" pos:column="26">NULL<pos:position pos:line="463" pos:column="30"/></name></expr>;<pos:position pos:line="463" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="464" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="466" pos:column="5">/* to back to init state */</comment>
    <expr_stmt><expr><name><name pos:line="467" pos:column="5">conn<pos:position pos:line="467" pos:column="9"/></name><operator pos:line="467" pos:column="9">-&gt;<pos:position pos:line="467" pos:column="14"/></operator><name pos:line="467" pos:column="11">tunnel_state<pos:position pos:line="467" pos:column="23"/></name><index pos:line="467" pos:column="23">[<expr><name pos:line="467" pos:column="24">sockindex<pos:position pos:line="467" pos:column="33"/></name></expr>]<pos:position pos:line="467" pos:column="34"/></index></name> <operator pos:line="467" pos:column="35">=<pos:position pos:line="467" pos:column="36"/></operator> <name pos:line="467" pos:column="37">TUNNEL_INIT<pos:position pos:line="467" pos:column="48"/></name></expr>;<pos:position pos:line="467" pos:column="49"/></expr_stmt>

    <return pos:line="469" pos:column="5">return <expr><name pos:line="469" pos:column="12">CURLE_RECV_ERROR<pos:position pos:line="469" pos:column="28"/></name></expr>;<pos:position pos:line="469" pos:column="29"/></return>
  }<pos:position pos:line="470" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="472" pos:column="3">conn<pos:position pos:line="472" pos:column="7"/></name><operator pos:line="472" pos:column="7">-&gt;<pos:position pos:line="472" pos:column="12"/></operator><name pos:line="472" pos:column="9">tunnel_state<pos:position pos:line="472" pos:column="21"/></name><index pos:line="472" pos:column="21">[<expr><name pos:line="472" pos:column="22">sockindex<pos:position pos:line="472" pos:column="31"/></name></expr>]<pos:position pos:line="472" pos:column="32"/></index></name> <operator pos:line="472" pos:column="33">=<pos:position pos:line="472" pos:column="34"/></operator> <name pos:line="472" pos:column="35">TUNNEL_COMPLETE<pos:position pos:line="472" pos:column="50"/></name></expr>;<pos:position pos:line="472" pos:column="51"/></expr_stmt>

  <comment type="block" pos:line="474" pos:column="3">/* If a proxy-authorization header was used for the proxy, then we should
     make sure that it isn't accidentally used for the document request
     after we've connected. So let's free and clear it here. */</comment>
  <expr_stmt><expr><call><name pos:line="477" pos:column="3">Curl_safefree<pos:position pos:line="477" pos:column="16"/></name><argument_list pos:line="477" pos:column="16">(<argument><expr><name><name pos:line="477" pos:column="17">conn<pos:position pos:line="477" pos:column="21"/></name><operator pos:line="477" pos:column="21">-&gt;<pos:position pos:line="477" pos:column="26"/></operator><name pos:line="477" pos:column="23">allocptr<pos:position pos:line="477" pos:column="31"/></name><operator pos:line="477" pos:column="31">.<pos:position pos:line="477" pos:column="32"/></operator><name pos:line="477" pos:column="32">proxyuserpwd<pos:position pos:line="477" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="477" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="477" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="478" pos:column="3">conn<pos:position pos:line="478" pos:column="7"/></name><operator pos:line="478" pos:column="7">-&gt;<pos:position pos:line="478" pos:column="12"/></operator><name pos:line="478" pos:column="9">allocptr<pos:position pos:line="478" pos:column="17"/></name><operator pos:line="478" pos:column="17">.<pos:position pos:line="478" pos:column="18"/></operator><name pos:line="478" pos:column="18">proxyuserpwd<pos:position pos:line="478" pos:column="30"/></name></name> <operator pos:line="478" pos:column="31">=<pos:position pos:line="478" pos:column="32"/></operator> <name pos:line="478" pos:column="33">NULL<pos:position pos:line="478" pos:column="37"/></name></expr>;<pos:position pos:line="478" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="480" pos:column="3">data<pos:position pos:line="480" pos:column="7"/></name><operator pos:line="480" pos:column="7">-&gt;<pos:position pos:line="480" pos:column="12"/></operator><name pos:line="480" pos:column="9">state<pos:position pos:line="480" pos:column="14"/></name><operator pos:line="480" pos:column="14">.<pos:position pos:line="480" pos:column="15"/></operator><name pos:line="480" pos:column="15">authproxy<pos:position pos:line="480" pos:column="24"/></name><operator pos:line="480" pos:column="24">.<pos:position pos:line="480" pos:column="25"/></operator><name pos:line="480" pos:column="25">done<pos:position pos:line="480" pos:column="29"/></name></name> <operator pos:line="480" pos:column="30">=<pos:position pos:line="480" pos:column="31"/></operator> <name pos:line="480" pos:column="32">TRUE<pos:position pos:line="480" pos:column="36"/></name></expr>;<pos:position pos:line="480" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="482" pos:column="3">infof<pos:position pos:line="482" pos:column="8"/></name> <argument_list pos:line="482" pos:column="9">(<argument><expr><name pos:line="482" pos:column="10">data<pos:position pos:line="482" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="482" pos:column="16">"Proxy replied OK to CONNECT request\n"<pos:position pos:line="482" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="482" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="482" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="483" pos:column="3">data<pos:position pos:line="483" pos:column="7"/></name><operator pos:line="483" pos:column="7">-&gt;<pos:position pos:line="483" pos:column="12"/></operator><name pos:line="483" pos:column="9">req<pos:position pos:line="483" pos:column="12"/></name><operator pos:line="483" pos:column="12">.<pos:position pos:line="483" pos:column="13"/></operator><name pos:line="483" pos:column="13">ignorebody<pos:position pos:line="483" pos:column="23"/></name></name> <operator pos:line="483" pos:column="24">=<pos:position pos:line="483" pos:column="25"/></operator> <name pos:line="483" pos:column="26">FALSE<pos:position pos:line="483" pos:column="31"/></name></expr>;<pos:position pos:line="483" pos:column="32"/></expr_stmt> <comment type="block" pos:line="483" pos:column="33">/* put it (back) to non-ignore state */</comment>
  <expr_stmt><expr><name><name pos:line="484" pos:column="3">conn<pos:position pos:line="484" pos:column="7"/></name><operator pos:line="484" pos:column="7">-&gt;<pos:position pos:line="484" pos:column="12"/></operator><name pos:line="484" pos:column="9">bits<pos:position pos:line="484" pos:column="13"/></name><operator pos:line="484" pos:column="13">.<pos:position pos:line="484" pos:column="14"/></operator><name pos:line="484" pos:column="14">rewindaftersend<pos:position pos:line="484" pos:column="29"/></name></name> <operator pos:line="484" pos:column="30">=<pos:position pos:line="484" pos:column="31"/></operator> <name pos:line="484" pos:column="32">FALSE<pos:position pos:line="484" pos:column="37"/></name></expr>;<pos:position pos:line="484" pos:column="38"/></expr_stmt> <comment type="block" pos:line="484" pos:column="39">/* make sure this isn't set for the
                                         document request  */</comment>
  <return pos:line="486" pos:column="3">return <expr><name pos:line="486" pos:column="10">CURLE_OK<pos:position pos:line="486" pos:column="18"/></name></expr>;<pos:position pos:line="486" pos:column="19"/></return>
}<pos:position pos:line="487" pos:column="2"/></block></function></unit>
