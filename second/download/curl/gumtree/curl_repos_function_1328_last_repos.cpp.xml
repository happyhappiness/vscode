<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1328_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">Curl_strerror<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">err<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">PRESERVE_WINDOWS_ERROR_CODE<pos:position pos:line="3" pos:column="35"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">DWORD<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">old_win_err<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><call><name pos:line="4" pos:column="23">GetLastError<pos:position pos:line="4" pos:column="35"/></name><argument_list pos:line="4" pos:column="35">()<pos:position pos:line="4" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
<cpp:endif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">endif<pos:position pos:line="5" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">old_errno<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><name pos:line="6" pos:column="19">errno<pos:position pos:line="6" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">buf<pos:position pos:line="7" pos:column="12"/></name></decl>, <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="15">p<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">max<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">DEBUGASSERT<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">conn<pos:position pos:line="10" pos:column="19"/></name></expr></argument>)<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">DEBUGASSERT<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">err<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">&gt;=<pos:position pos:line="11" pos:column="24"/></operator> <literal type="number" pos:line="11" pos:column="22">0<pos:position pos:line="11" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">buf<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <name><name pos:line="13" pos:column="9">conn<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">syserr_buf<pos:position pos:line="13" pos:column="25"/></name></name></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">max<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <sizeof pos:line="14" pos:column="9">sizeof<argument_list pos:line="14" pos:column="15">(<argument><expr><name><name pos:line="14" pos:column="16">conn<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-&gt;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="22">syserr_buf<pos:position pos:line="14" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></sizeof><operator pos:line="14" pos:column="33">-<pos:position pos:line="14" pos:column="34"/></operator><literal type="number" pos:line="14" pos:column="34">1<pos:position pos:line="14" pos:column="35"/></literal></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="15" pos:column="3">*<pos:position pos:line="15" pos:column="4"/></operator><name pos:line="15" pos:column="4">buf<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <literal type="char" pos:line="15" pos:column="10">'\0'<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></expr_stmt>

<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">USE_WINSOCK<pos:position pos:line="17" pos:column="19"/></name></cpp:ifdef>

<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">_WIN32_WCE<pos:position pos:line="19" pos:column="18"/></name></cpp:ifdef>
  <block pos:line="20" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">wchar_t<pos:position pos:line="21" pos:column="12"/></name></type> <name><name pos:line="21" pos:column="13">wbuf<pos:position pos:line="21" pos:column="17"/></name><index pos:line="21" pos:column="17">[<expr><literal type="number" pos:line="21" pos:column="18">256<pos:position pos:line="21" pos:column="21"/></literal></expr>]<pos:position pos:line="21" pos:column="22"/></index></name></decl>;<pos:position pos:line="21" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">wbuf<pos:position pos:line="22" pos:column="9"/></name><index pos:line="22" pos:column="9">[<expr><literal type="number" pos:line="22" pos:column="10">0<pos:position pos:line="22" pos:column="11"/></literal></expr>]<pos:position pos:line="22" pos:column="12"/></index></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <literal type="string" pos:line="22" pos:column="15">L'<pos:position pos:line="22" pos:column="17"/></literal>\0'<pos:position pos:line="22" pos:column="20"/></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">FormatMessage<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">FORMAT_MESSAGE_FROM_SYSTEM<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="47">NULL<pos:position pos:line="24" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="53">err<pos:position pos:line="24" pos:column="56"/></name></expr></argument>,
                  <argument><expr><name pos:line="25" pos:column="19">LANG_NEUTRAL<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="33">wbuf<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="39">sizeof<argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">wbuf<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></sizeof><operator pos:line="25" pos:column="51">/<pos:position pos:line="25" pos:column="52"/></operator><sizeof pos:line="25" pos:column="52">sizeof<argument_list pos:line="25" pos:column="58">(<argument><expr><name pos:line="25" pos:column="59">wchar_t<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="25" pos:column="69">NULL<pos:position pos:line="25" pos:column="73"/></name></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">wcstombs<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">buf<pos:position pos:line="26" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="19">wbuf<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="25">max<pos:position pos:line="26" pos:column="28"/></name></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block>
<cpp:else pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">else<pos:position pos:line="28" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="29" pos:column="3">/* 'sys_nerr' is the maximum errno number, it is not widely portable */</comment>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name pos:line="30" pos:column="6">err<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">&gt;=<pos:position pos:line="30" pos:column="15"/></operator> <literal type="number" pos:line="30" pos:column="13">0<pos:position pos:line="30" pos:column="14"/></literal> <operator pos:line="30" pos:column="15">&amp;&amp;<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="18">err<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">&lt;<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="24">sys_nerr<pos:position pos:line="30" pos:column="32"/></name></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="5">strncpy<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">buf<pos:position pos:line="31" pos:column="16"/></name></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="18">strerror<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">err<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="31" pos:column="33">max<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt></block></then>
  <else pos:line="32" pos:column="3">else <block pos:line="32" pos:column="8">{
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><operator pos:line="33" pos:column="8">!<pos:position pos:line="33" pos:column="9"/></operator><call><name pos:line="33" pos:column="9">get_winsock_error<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">err<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="32">buf<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">max<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call> <operator pos:line="33" pos:column="42">&amp;&amp;<pos:position pos:line="33" pos:column="52"/></operator>
       <operator pos:line="34" pos:column="8">!<pos:position pos:line="34" pos:column="9"/></operator><call><name pos:line="34" pos:column="9">FormatMessageA<pos:position pos:line="34" pos:column="23"/></name><argument_list pos:line="34" pos:column="23">(<argument><expr><name pos:line="34" pos:column="24">FORMAT_MESSAGE_FROM_SYSTEM<pos:position pos:line="34" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">NULL<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="58">err<pos:position pos:line="34" pos:column="61"/></name></expr></argument>,
                       <argument><expr><name pos:line="35" pos:column="24">LANG_NEUTRAL<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="38">buf<pos:position pos:line="35" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="43">(<pos:position pos:line="35" pos:column="44"/></operator><name pos:line="35" pos:column="44">DWORD<pos:position pos:line="35" pos:column="49"/></name><operator pos:line="35" pos:column="49">)<pos:position pos:line="35" pos:column="50"/></operator><name pos:line="35" pos:column="50">max<pos:position pos:line="35" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="55">NULL<pos:position pos:line="35" pos:column="59"/></name></expr></argument>)<pos:position pos:line="35" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="61"/></condition><then pos:line="35" pos:column="61">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="7">snprintf<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">buf<pos:position pos:line="36" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="21">max<pos:position pos:line="36" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="26">"Unknown error %d (%#x)"<pos:position pos:line="36" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="52">err<pos:position pos:line="36" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="57">err<pos:position pos:line="36" pos:column="60"/></name></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="62"/></expr_stmt></block></then></if>
  }<pos:position pos:line="37" pos:column="4"/></block></else></if>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:else pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">else<pos:position pos:line="40" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="40" pos:column="7">/* not USE_WINSOCK coming up */</comment>

<cpp:if pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">if<pos:position pos:line="42" pos:column="4"/></cpp:directive> <expr><call><name pos:line="42" pos:column="5">defined<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">HAVE_STRERROR_R<pos:position pos:line="42" pos:column="28"/></name></expr></argument>)<pos:position pos:line="42" pos:column="29"/></argument_list></call> <operator pos:line="42" pos:column="30">&amp;&amp;<pos:position pos:line="42" pos:column="40"/></operator> <call><name pos:line="42" pos:column="33">defined<pos:position pos:line="42" pos:column="40"/></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">HAVE_POSIX_STRERROR_R<pos:position pos:line="42" pos:column="62"/></name></expr></argument>)<pos:position pos:line="42" pos:column="63"/></argument_list></call></expr></cpp:if>
 <comment type="block" pos:line="43" pos:column="2">/*
  * The POSIX-style strerror_r() may set errno to ERANGE if insufficient
  * storage is supplied via 'strerrbuf' and 'buflen' to hold the generated
  * message string, or EINVAL if 'errnum' is not a valid error number.
  */</comment>
  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><literal type="number" pos:line="48" pos:column="6">0<pos:position pos:line="48" pos:column="7"/></literal> <operator pos:line="48" pos:column="8">!=<pos:position pos:line="48" pos:column="10"/></operator> <call><name pos:line="48" pos:column="11">strerror_r<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">(<argument><expr><name pos:line="48" pos:column="22">err<pos:position pos:line="48" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="27">buf<pos:position pos:line="48" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="32">max<pos:position pos:line="48" pos:column="35"/></name></expr></argument>)<pos:position pos:line="48" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="37"/></condition><then pos:line="48" pos:column="37"> <block pos:line="48" pos:column="38">{
    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><literal type="char" pos:line="49" pos:column="8">'\0'<pos:position pos:line="49" pos:column="12"/></literal> <operator pos:line="49" pos:column="13">==<pos:position pos:line="49" pos:column="15"/></operator> <name><name pos:line="49" pos:column="16">buf<pos:position pos:line="49" pos:column="19"/></name><index pos:line="49" pos:column="19">[<expr><literal type="number" pos:line="49" pos:column="20">0<pos:position pos:line="49" pos:column="21"/></literal></expr>]<pos:position pos:line="49" pos:column="22"/></index></name></expr>)<pos:position pos:line="49" pos:column="23"/></condition><then pos:line="49" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="7">snprintf<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><name pos:line="50" pos:column="16">buf<pos:position pos:line="50" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="21">max<pos:position pos:line="50" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="26">"Unknown error %d"<pos:position pos:line="50" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="46">err<pos:position pos:line="50" pos:column="49"/></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt></block></then></if>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>
<cpp:elif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">elif<pos:position pos:line="52" pos:column="6"/></cpp:directive> <expr><call><name pos:line="52" pos:column="7">defined<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><name pos:line="52" pos:column="15">HAVE_STRERROR_R<pos:position pos:line="52" pos:column="30"/></name></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call> <operator pos:line="52" pos:column="32">&amp;&amp;<pos:position pos:line="52" pos:column="42"/></operator> <call><name pos:line="52" pos:column="35">defined<pos:position pos:line="52" pos:column="42"/></name><argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">HAVE_GLIBC_STRERROR_R<pos:position pos:line="52" pos:column="64"/></name></expr></argument>)<pos:position pos:line="52" pos:column="65"/></argument_list></call></expr></cpp:elif>
 <comment type="block" pos:line="53" pos:column="2">/*
  * The glibc-style strerror_r() only *might* use the buffer we pass to
  * the function, but it always returns the error message as a pointer,
  * so we must copy that string unconditionally (if non-NULL).
  */</comment>
  <block pos:line="58" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="59" pos:column="5">char<pos:position pos:line="59" pos:column="9"/></name></type> <name><name pos:line="59" pos:column="10">buffer<pos:position pos:line="59" pos:column="16"/></name><index pos:line="59" pos:column="16">[<expr><literal type="number" pos:line="59" pos:column="17">256<pos:position pos:line="59" pos:column="20"/></literal></expr>]<pos:position pos:line="59" pos:column="21"/></index></name></decl>;<pos:position pos:line="59" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="60" pos:column="5">char<pos:position pos:line="60" pos:column="9"/></name> <modifier pos:line="60" pos:column="10">*<pos:position pos:line="60" pos:column="11"/></modifier></type><name pos:line="60" pos:column="11">msg<pos:position pos:line="60" pos:column="14"/></name> <init pos:line="60" pos:column="15">= <expr><call><name pos:line="60" pos:column="17">strerror_r<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">(<argument><expr><name pos:line="60" pos:column="28">err<pos:position pos:line="60" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="33">buffer<pos:position pos:line="60" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="41">sizeof<argument_list pos:line="60" pos:column="47">(<argument><expr><name pos:line="60" pos:column="48">buffer<pos:position pos:line="60" pos:column="54"/></name></expr></argument>)<pos:position pos:line="60" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="57"/></decl_stmt>
    <if pos:line="61" pos:column="5">if<condition pos:line="61" pos:column="7">(<expr><name pos:line="61" pos:column="8">msg<pos:position pos:line="61" pos:column="11"/></name></expr>)<pos:position pos:line="61" pos:column="12"/></condition><then pos:line="61" pos:column="12">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="7">strncpy<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><name pos:line="62" pos:column="15">buf<pos:position pos:line="62" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="20">msg<pos:position pos:line="62" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="25">max<pos:position pos:line="62" pos:column="28"/></name></expr></argument>)<pos:position pos:line="62" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="30"/></expr_stmt></block></then>
    <else pos:line="63" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="7">snprintf<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><name pos:line="64" pos:column="16">buf<pos:position pos:line="64" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="21">max<pos:position pos:line="64" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="26">"Unknown error %d"<pos:position pos:line="64" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="46">err<pos:position pos:line="64" pos:column="49"/></name></expr></argument>)<pos:position pos:line="64" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="51"/></expr_stmt></block></else></if>
  }<pos:position pos:line="65" pos:column="4"/></block>
<cpp:elif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">elif<pos:position pos:line="66" pos:column="6"/></cpp:directive> <expr><call><name pos:line="66" pos:column="7">defined<pos:position pos:line="66" pos:column="14"/></name><argument_list pos:line="66" pos:column="14">(<argument><expr><name pos:line="66" pos:column="15">HAVE_STRERROR_R<pos:position pos:line="66" pos:column="30"/></name></expr></argument>)<pos:position pos:line="66" pos:column="31"/></argument_list></call> <operator pos:line="66" pos:column="32">&amp;&amp;<pos:position pos:line="66" pos:column="42"/></operator> <call><name pos:line="66" pos:column="35">defined<pos:position pos:line="66" pos:column="42"/></name><argument_list pos:line="66" pos:column="42">(<argument><expr><name pos:line="66" pos:column="43">HAVE_VXWORKS_STRERROR_R<pos:position pos:line="66" pos:column="66"/></name></expr></argument>)<pos:position pos:line="66" pos:column="67"/></argument_list></call></expr></cpp:elif>
 <comment type="block" pos:line="67" pos:column="2">/*
  * The vxworks-style strerror_r() does use the buffer we pass to the function.
  * The buffer size should be at least NAME_MAX (256)
  */</comment>
  <block pos:line="71" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="72" pos:column="5">char<pos:position pos:line="72" pos:column="9"/></name></type> <name><name pos:line="72" pos:column="10">buffer<pos:position pos:line="72" pos:column="16"/></name><index pos:line="72" pos:column="16">[<expr><literal type="number" pos:line="72" pos:column="17">256<pos:position pos:line="72" pos:column="20"/></literal></expr>]<pos:position pos:line="72" pos:column="21"/></index></name></decl>;<pos:position pos:line="72" pos:column="22"/></decl_stmt>
    <if pos:line="73" pos:column="5">if<condition pos:line="73" pos:column="7">(<expr><name pos:line="73" pos:column="8">OK<pos:position pos:line="73" pos:column="10"/></name> <operator pos:line="73" pos:column="11">==<pos:position pos:line="73" pos:column="13"/></operator> <call><name pos:line="73" pos:column="14">strerror_r<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">err<pos:position pos:line="73" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="30">buffer<pos:position pos:line="73" pos:column="36"/></name></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="38"/></condition><then pos:line="73" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="7">strncpy<pos:position pos:line="74" pos:column="14"/></name><argument_list pos:line="74" pos:column="14">(<argument><expr><name pos:line="74" pos:column="15">buf<pos:position pos:line="74" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="20">buffer<pos:position pos:line="74" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="28">max<pos:position pos:line="74" pos:column="31"/></name></expr></argument>)<pos:position pos:line="74" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="33"/></expr_stmt></block></then>
    <else pos:line="75" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="7">snprintf<pos:position pos:line="76" pos:column="15"/></name><argument_list pos:line="76" pos:column="15">(<argument><expr><name pos:line="76" pos:column="16">buf<pos:position pos:line="76" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="21">max<pos:position pos:line="76" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="26">"Unknown error %d"<pos:position pos:line="76" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="46">err<pos:position pos:line="76" pos:column="49"/></name></expr></argument>)<pos:position pos:line="76" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="51"/></expr_stmt></block></else></if>
  }<pos:position pos:line="77" pos:column="4"/></block>
<cpp:else pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">else<pos:position pos:line="78" pos:column="6"/></cpp:directive></cpp:else>
  <block pos:line="79" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="80" pos:column="5">char<pos:position pos:line="80" pos:column="9"/></name> <modifier pos:line="80" pos:column="10">*<pos:position pos:line="80" pos:column="11"/></modifier></type><name pos:line="80" pos:column="11">msg<pos:position pos:line="80" pos:column="14"/></name> <init pos:line="80" pos:column="15">= <expr><call><name pos:line="80" pos:column="17">strerror<pos:position pos:line="80" pos:column="25"/></name><argument_list pos:line="80" pos:column="25">(<argument><expr><name pos:line="80" pos:column="26">err<pos:position pos:line="80" pos:column="29"/></name></expr></argument>)<pos:position pos:line="80" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="80" pos:column="31"/></decl_stmt>
    <if pos:line="81" pos:column="5">if<condition pos:line="81" pos:column="7">(<expr><name pos:line="81" pos:column="8">msg<pos:position pos:line="81" pos:column="11"/></name></expr>)<pos:position pos:line="81" pos:column="12"/></condition><then pos:line="81" pos:column="12">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="7">strncpy<pos:position pos:line="82" pos:column="14"/></name><argument_list pos:line="82" pos:column="14">(<argument><expr><name pos:line="82" pos:column="15">buf<pos:position pos:line="82" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="20">msg<pos:position pos:line="82" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="25">max<pos:position pos:line="82" pos:column="28"/></name></expr></argument>)<pos:position pos:line="82" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="30"/></expr_stmt></block></then>
    <else pos:line="83" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="84" pos:column="7">snprintf<pos:position pos:line="84" pos:column="15"/></name><argument_list pos:line="84" pos:column="15">(<argument><expr><name pos:line="84" pos:column="16">buf<pos:position pos:line="84" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="21">max<pos:position pos:line="84" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="26">"Unknown error %d"<pos:position pos:line="84" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="46">err<pos:position pos:line="84" pos:column="49"/></name></expr></argument>)<pos:position pos:line="84" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="51"/></expr_stmt></block></else></if>
  }<pos:position pos:line="85" pos:column="4"/></block>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="88" pos:column="8">/* end of ! USE_WINSOCK */</comment>

  <expr_stmt><expr><name><name pos:line="90" pos:column="3">buf<pos:position pos:line="90" pos:column="6"/></name><index pos:line="90" pos:column="6">[<expr><name pos:line="90" pos:column="7">max<pos:position pos:line="90" pos:column="10"/></name></expr>]<pos:position pos:line="90" pos:column="11"/></index></name> <operator pos:line="90" pos:column="12">=<pos:position pos:line="90" pos:column="13"/></operator> <literal type="char" pos:line="90" pos:column="14">'\0'<pos:position pos:line="90" pos:column="18"/></literal></expr>;<pos:position pos:line="90" pos:column="19"/></expr_stmt> <comment type="block" pos:line="90" pos:column="20">/* make sure the string is zero terminated */</comment>

  <comment type="block" pos:line="92" pos:column="3">/* strip trailing '\r\n' or '\n'. */</comment>
  <expr_stmt><expr><name pos:line="93" pos:column="3">p<pos:position pos:line="93" pos:column="4"/></name> <operator pos:line="93" pos:column="5">=<pos:position pos:line="93" pos:column="6"/></operator> <call><name pos:line="93" pos:column="7">strrchr<pos:position pos:line="93" pos:column="14"/></name><argument_list pos:line="93" pos:column="14">(<argument><expr><name pos:line="93" pos:column="15">buf<pos:position pos:line="93" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="93" pos:column="20">'\n'<pos:position pos:line="93" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="26"/></expr_stmt>
  <if pos:line="94" pos:column="3">if<condition pos:line="94" pos:column="5">(<expr><name pos:line="94" pos:column="6">p<pos:position pos:line="94" pos:column="7"/></name> <operator pos:line="94" pos:column="8">&amp;&amp;<pos:position pos:line="94" pos:column="18"/></operator> <operator pos:line="94" pos:column="11">(<pos:position pos:line="94" pos:column="12"/></operator><name pos:line="94" pos:column="12">p<pos:position pos:line="94" pos:column="13"/></name> <operator pos:line="94" pos:column="14">-<pos:position pos:line="94" pos:column="15"/></operator> <name pos:line="94" pos:column="16">buf<pos:position pos:line="94" pos:column="19"/></name><operator pos:line="94" pos:column="19">)<pos:position pos:line="94" pos:column="20"/></operator> <operator pos:line="94" pos:column="21">&gt;=<pos:position pos:line="94" pos:column="26"/></operator> <literal type="number" pos:line="94" pos:column="24">2<pos:position pos:line="94" pos:column="25"/></literal></expr>)<pos:position pos:line="94" pos:column="26"/></condition><then pos:line="94" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="95" pos:column="5">*<pos:position pos:line="95" pos:column="6"/></operator><name pos:line="95" pos:column="6">p<pos:position pos:line="95" pos:column="7"/></name> <operator pos:line="95" pos:column="8">=<pos:position pos:line="95" pos:column="9"/></operator> <literal type="char" pos:line="95" pos:column="10">'\0'<pos:position pos:line="95" pos:column="14"/></literal></expr>;<pos:position pos:line="95" pos:column="15"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="96" pos:column="3">p<pos:position pos:line="96" pos:column="4"/></name> <operator pos:line="96" pos:column="5">=<pos:position pos:line="96" pos:column="6"/></operator> <call><name pos:line="96" pos:column="7">strrchr<pos:position pos:line="96" pos:column="14"/></name><argument_list pos:line="96" pos:column="14">(<argument><expr><name pos:line="96" pos:column="15">buf<pos:position pos:line="96" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="96" pos:column="20">'\r'<pos:position pos:line="96" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="26"/></expr_stmt>
  <if pos:line="97" pos:column="3">if<condition pos:line="97" pos:column="5">(<expr><name pos:line="97" pos:column="6">p<pos:position pos:line="97" pos:column="7"/></name> <operator pos:line="97" pos:column="8">&amp;&amp;<pos:position pos:line="97" pos:column="18"/></operator> <operator pos:line="97" pos:column="11">(<pos:position pos:line="97" pos:column="12"/></operator><name pos:line="97" pos:column="12">p<pos:position pos:line="97" pos:column="13"/></name> <operator pos:line="97" pos:column="14">-<pos:position pos:line="97" pos:column="15"/></operator> <name pos:line="97" pos:column="16">buf<pos:position pos:line="97" pos:column="19"/></name><operator pos:line="97" pos:column="19">)<pos:position pos:line="97" pos:column="20"/></operator> <operator pos:line="97" pos:column="21">&gt;=<pos:position pos:line="97" pos:column="26"/></operator> <literal type="number" pos:line="97" pos:column="24">1<pos:position pos:line="97" pos:column="25"/></literal></expr>)<pos:position pos:line="97" pos:column="26"/></condition><then pos:line="97" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="98" pos:column="5">*<pos:position pos:line="98" pos:column="6"/></operator><name pos:line="98" pos:column="6">p<pos:position pos:line="98" pos:column="7"/></name> <operator pos:line="98" pos:column="8">=<pos:position pos:line="98" pos:column="9"/></operator> <literal type="char" pos:line="98" pos:column="10">'\0'<pos:position pos:line="98" pos:column="14"/></literal></expr>;<pos:position pos:line="98" pos:column="15"/></expr_stmt></block></then></if>

  <if pos:line="100" pos:column="3">if<condition pos:line="100" pos:column="5">(<expr><name pos:line="100" pos:column="6">errno<pos:position pos:line="100" pos:column="11"/></name> <operator pos:line="100" pos:column="12">!=<pos:position pos:line="100" pos:column="14"/></operator> <name pos:line="100" pos:column="15">old_errno<pos:position pos:line="100" pos:column="24"/></name></expr>)<pos:position pos:line="100" pos:column="25"/></condition><then pos:line="100" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><name pos:line="101" pos:column="5">errno<pos:position pos:line="101" pos:column="10"/></name> <operator pos:line="101" pos:column="11">=<pos:position pos:line="101" pos:column="12"/></operator> <name pos:line="101" pos:column="13">old_errno<pos:position pos:line="101" pos:column="22"/></name></expr>;<pos:position pos:line="101" pos:column="23"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">ifdef<pos:position pos:line="103" pos:column="7"/></cpp:directive> <name pos:line="103" pos:column="8">PRESERVE_WINDOWS_ERROR_CODE<pos:position pos:line="103" pos:column="35"/></name></cpp:ifdef>
  <if pos:line="104" pos:column="3">if<condition pos:line="104" pos:column="5">(<expr><name pos:line="104" pos:column="6">old_win_err<pos:position pos:line="104" pos:column="17"/></name> <operator pos:line="104" pos:column="18">!=<pos:position pos:line="104" pos:column="20"/></operator> <call><name pos:line="104" pos:column="21">GetLastError<pos:position pos:line="104" pos:column="33"/></name><argument_list pos:line="104" pos:column="33">()<pos:position pos:line="104" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="36"/></condition><then pos:line="104" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="105" pos:column="5">SetLastError<pos:position pos:line="105" pos:column="17"/></name><argument_list pos:line="105" pos:column="17">(<argument><expr><name pos:line="105" pos:column="18">old_win_err<pos:position pos:line="105" pos:column="29"/></name></expr></argument>)<pos:position pos:line="105" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="31"/></expr_stmt></block></then></if>
<cpp:endif pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">endif<pos:position pos:line="106" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="108" pos:column="3">return <expr><name pos:line="108" pos:column="10">buf<pos:position pos:line="108" pos:column="13"/></name></expr>;<pos:position pos:line="108" pos:column="14"/></return>
}<pos:position pos:line="109" pos:column="2"/></block></function></unit>
