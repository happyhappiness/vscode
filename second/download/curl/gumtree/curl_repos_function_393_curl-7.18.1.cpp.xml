<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_393_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_easy_unescape<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">CURL<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">handle<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">string<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">int<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">length<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">int<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">olen<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">alloc<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><operator pos:line="4" pos:column="15">(<pos:position pos:line="4" pos:column="16"/></operator><ternary><condition><expr><name pos:line="4" pos:column="16">length<pos:position pos:line="4" pos:column="22"/></name></expr>?<pos:position pos:line="4" pos:column="23"/></condition><then><expr><name pos:line="4" pos:column="23">length<pos:position pos:line="4" pos:column="29"/></name></expr></then><else pos:line="4" pos:column="29">:<expr><operator pos:line="4" pos:column="30">(<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="31">int<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">)<pos:position pos:line="4" pos:column="35"/></operator><call><name pos:line="4" pos:column="35">strlen<pos:position pos:line="4" pos:column="41"/></name><argument_list pos:line="4" pos:column="41">(<argument><expr><name pos:line="4" pos:column="42">string<pos:position pos:line="4" pos:column="48"/></name></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr></else></ternary><operator pos:line="4" pos:column="49">)<pos:position pos:line="4" pos:column="50"/></operator><operator pos:line="4" pos:column="50">+<pos:position pos:line="4" pos:column="51"/></operator><literal type="number" pos:line="4" pos:column="51">1<pos:position pos:line="4" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="53"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">ns<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><call><name pos:line="5" pos:column="14">malloc<pos:position pos:line="5" pos:column="20"/></name><argument_list pos:line="5" pos:column="20">(<argument><expr><name pos:line="5" pos:column="21">alloc<pos:position pos:line="5" pos:column="26"/></name></expr></argument>)<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">in<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">strindex<pos:position pos:line="7" pos:column="15"/></name><init pos:line="7" pos:column="15">=<expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">long<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">hex<pos:position pos:line="8" pos:column="11"/></name></decl>;<pos:position pos:line="8" pos:column="12"/></decl_stmt>

<cpp:ifndef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifndef<pos:position pos:line="10" pos:column="8"/></cpp:directive> <name pos:line="10" pos:column="9">CURL_DOES_CONVERSIONS<pos:position pos:line="10" pos:column="30"/></name></cpp:ifndef>
  <comment type="block" pos:line="11" pos:column="3">/* avoid compiler warnings */</comment>
  <expr_stmt><expr><operator pos:line="12" pos:column="3">(<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">void<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">)<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">handle<pos:position pos:line="12" pos:column="15"/></name></expr>;<pos:position pos:line="12" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">( <expr><operator pos:line="14" pos:column="7">!<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">ns<pos:position pos:line="14" pos:column="10"/></name></expr> )<pos:position pos:line="14" pos:column="12"/></condition><then pos:line="14" pos:column="12">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">NULL<pos:position pos:line="15" pos:column="16"/></name></expr>;<pos:position pos:line="15" pos:column="17"/></return></block></then></if>

  <while pos:line="17" pos:column="3">while<condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">--<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">alloc<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">&gt;<pos:position pos:line="17" pos:column="21"/></operator> <literal type="number" pos:line="17" pos:column="19">0<pos:position pos:line="17" pos:column="20"/></literal></expr>)<pos:position pos:line="17" pos:column="21"/></condition> <block pos:line="17" pos:column="22">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">in<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <operator pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">string<pos:position pos:line="18" pos:column="17"/></name></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><operator pos:line="19" pos:column="8">(<pos:position pos:line="19" pos:column="9"/></operator><literal type="char" pos:line="19" pos:column="9">'%'<pos:position pos:line="19" pos:column="12"/></literal> <operator pos:line="19" pos:column="13">==<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="16">in<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">)<pos:position pos:line="19" pos:column="19"/></operator> <operator pos:line="19" pos:column="20">&amp;&amp;<pos:position pos:line="19" pos:column="30"/></operator> <call><name pos:line="19" pos:column="23">ISXDIGIT<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name><name pos:line="19" pos:column="32">string<pos:position pos:line="19" pos:column="38"/></name><index pos:line="19" pos:column="38">[<expr><literal type="number" pos:line="19" pos:column="39">1<pos:position pos:line="19" pos:column="40"/></literal></expr>]<pos:position pos:line="19" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call> <operator pos:line="19" pos:column="43">&amp;&amp;<pos:position pos:line="19" pos:column="53"/></operator> <call><name pos:line="19" pos:column="46">ISXDIGIT<pos:position pos:line="19" pos:column="54"/></name><argument_list pos:line="19" pos:column="54">(<argument><expr><name><name pos:line="19" pos:column="55">string<pos:position pos:line="19" pos:column="61"/></name><index pos:line="19" pos:column="61">[<expr><literal type="number" pos:line="19" pos:column="62">2<pos:position pos:line="19" pos:column="63"/></literal></expr>]<pos:position pos:line="19" pos:column="64"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="66"/></condition><then pos:line="19" pos:column="66"> <block pos:line="19" pos:column="67">{
      <comment type="block" pos:line="20" pos:column="7">/* this is two hexadecimal digits following a '%' */</comment>
      <decl_stmt><decl><type><name pos:line="21" pos:column="7">char<pos:position pos:line="21" pos:column="11"/></name></type> <name><name pos:line="21" pos:column="12">hexstr<pos:position pos:line="21" pos:column="18"/></name><index pos:line="21" pos:column="18">[<expr><literal type="number" pos:line="21" pos:column="19">3<pos:position pos:line="21" pos:column="20"/></literal></expr>]<pos:position pos:line="21" pos:column="21"/></index></name></decl>;<pos:position pos:line="21" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="22" pos:column="7">char<pos:position pos:line="22" pos:column="11"/></name> <modifier pos:line="22" pos:column="12">*<pos:position pos:line="22" pos:column="13"/></modifier></type><name pos:line="22" pos:column="13">ptr<pos:position pos:line="22" pos:column="16"/></name></decl>;<pos:position pos:line="22" pos:column="17"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="23" pos:column="7">hexstr<pos:position pos:line="23" pos:column="13"/></name><index pos:line="23" pos:column="13">[<expr><literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr>]<pos:position pos:line="23" pos:column="16"/></index></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name><name pos:line="23" pos:column="19">string<pos:position pos:line="23" pos:column="25"/></name><index pos:line="23" pos:column="25">[<expr><literal type="number" pos:line="23" pos:column="26">1<pos:position pos:line="23" pos:column="27"/></literal></expr>]<pos:position pos:line="23" pos:column="28"/></index></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="24" pos:column="7">hexstr<pos:position pos:line="24" pos:column="13"/></name><index pos:line="24" pos:column="13">[<expr><literal type="number" pos:line="24" pos:column="14">1<pos:position pos:line="24" pos:column="15"/></literal></expr>]<pos:position pos:line="24" pos:column="16"/></index></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name><name pos:line="24" pos:column="19">string<pos:position pos:line="24" pos:column="25"/></name><index pos:line="24" pos:column="25">[<expr><literal type="number" pos:line="24" pos:column="26">2<pos:position pos:line="24" pos:column="27"/></literal></expr>]<pos:position pos:line="24" pos:column="28"/></index></name></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="25" pos:column="7">hexstr<pos:position pos:line="25" pos:column="13"/></name><index pos:line="25" pos:column="13">[<expr><literal type="number" pos:line="25" pos:column="14">2<pos:position pos:line="25" pos:column="15"/></literal></expr>]<pos:position pos:line="25" pos:column="16"/></index></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <literal type="number" pos:line="25" pos:column="19">0<pos:position pos:line="25" pos:column="20"/></literal></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt>

      <expr_stmt><expr><name pos:line="27" pos:column="7">hex<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <call><name pos:line="27" pos:column="13">strtol<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">hexstr<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="28">&amp;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="29">ptr<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="34">16<pos:position pos:line="27" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>

      <expr_stmt><expr><name pos:line="29" pos:column="7">in<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator> <operator pos:line="29" pos:column="12">(<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">unsigned<pos:position pos:line="29" pos:column="21"/></name> <name pos:line="29" pos:column="22">char<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">)<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="27">hex<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt> <comment type="block" pos:line="29" pos:column="32">/* this long is never bigger than 255 anyway */</comment>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="31" pos:column="29"/></name></cpp:ifdef>
<comment type="block" pos:line="32" pos:column="1">/* escape sequences are always in ASCII so convert them on non-ASCII hosts */</comment>
      <if pos:line="33" pos:column="7">if<condition pos:line="33" pos:column="9">(<expr><operator pos:line="33" pos:column="10">!<pos:position pos:line="33" pos:column="11"/></operator><name pos:line="33" pos:column="11">handle<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">||<pos:position pos:line="33" pos:column="20"/></operator>
          <operator pos:line="34" pos:column="11">(<pos:position pos:line="34" pos:column="12"/></operator><call><name pos:line="34" pos:column="12">Curl_convert_from_network<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">handle<pos:position pos:line="34" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="46">&amp;<pos:position pos:line="34" pos:column="51"/></operator><name pos:line="34" pos:column="47">in<pos:position pos:line="34" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="51">1<pos:position pos:line="34" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="53"/></argument_list></call> <operator pos:line="34" pos:column="54">!=<pos:position pos:line="34" pos:column="56"/></operator> <name pos:line="34" pos:column="57">CURLE_OK<pos:position pos:line="34" pos:column="65"/></name><operator pos:line="34" pos:column="65">)<pos:position pos:line="34" pos:column="66"/></operator></expr>)<pos:position pos:line="34" pos:column="67"/></condition><then pos:line="34" pos:column="67"> <block pos:line="34" pos:column="68">{
        <comment type="block" pos:line="35" pos:column="9">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">free<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><name pos:line="36" pos:column="14">ns<pos:position pos:line="36" pos:column="16"/></name></expr></argument>)<pos:position pos:line="36" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="18"/></expr_stmt>
        <return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">NULL<pos:position pos:line="37" pos:column="20"/></name></expr>;<pos:position pos:line="37" pos:column="21"/></return>
      }<pos:position pos:line="38" pos:column="8"/></block></then></if>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="39" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

      <expr_stmt><expr><name pos:line="41" pos:column="7">string<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">+=<pos:position pos:line="41" pos:column="15"/></operator><literal type="number" pos:line="41" pos:column="15">2<pos:position pos:line="41" pos:column="16"/></literal></expr>;<pos:position pos:line="41" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="42" pos:column="7">alloc<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">-=<pos:position pos:line="42" pos:column="14"/></operator><literal type="number" pos:line="42" pos:column="14">2<pos:position pos:line="42" pos:column="15"/></literal></expr>;<pos:position pos:line="42" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="45" pos:column="5">ns<pos:position pos:line="45" pos:column="7"/></name><index pos:line="45" pos:column="7">[<expr><name pos:line="45" pos:column="8">strindex<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">++<pos:position pos:line="45" pos:column="18"/></operator></expr>]<pos:position pos:line="45" pos:column="19"/></index></name> <operator pos:line="45" pos:column="20">=<pos:position pos:line="45" pos:column="21"/></operator> <name pos:line="45" pos:column="22">in<pos:position pos:line="45" pos:column="24"/></name></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="46" pos:column="5">string<pos:position pos:line="46" pos:column="11"/></name><operator pos:line="46" pos:column="11">++<pos:position pos:line="46" pos:column="13"/></operator></expr>;<pos:position pos:line="46" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></while>
  <expr_stmt><expr><name><name pos:line="48" pos:column="3">ns<pos:position pos:line="48" pos:column="5"/></name><index pos:line="48" pos:column="5">[<expr><name pos:line="48" pos:column="6">strindex<pos:position pos:line="48" pos:column="14"/></name></expr>]<pos:position pos:line="48" pos:column="15"/></index></name><operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator><literal type="number" pos:line="48" pos:column="16">0<pos:position pos:line="48" pos:column="17"/></literal></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt> <comment type="block" pos:line="48" pos:column="19">/* terminate it */</comment>

  <if pos:line="50" pos:column="3">if<condition pos:line="50" pos:column="5">(<expr><name pos:line="50" pos:column="6">olen<pos:position pos:line="50" pos:column="10"/></name></expr>)<pos:position pos:line="50" pos:column="11"/></condition><then pos:line="50" pos:column="11">
    <comment type="block" pos:line="51" pos:column="5">/* store output size */</comment>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="52" pos:column="5">*<pos:position pos:line="52" pos:column="6"/></operator><name pos:line="52" pos:column="6">olen<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <name pos:line="52" pos:column="13">strindex<pos:position pos:line="52" pos:column="21"/></name></expr>;<pos:position pos:line="52" pos:column="22"/></expr_stmt></block></then></if>
  <return pos:line="53" pos:column="3">return <expr><name pos:line="53" pos:column="10">ns<pos:position pos:line="53" pos:column="12"/></name></expr>;<pos:position pos:line="53" pos:column="13"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
