<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2331.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">polarssl_connect_step2<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">connectdata<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">conn<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="3" pos:column="22">int<pos:position pos:line="3" pos:column="25"/></name></type> <name pos:line="3" pos:column="26">sockindex<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="36"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">ret<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SessionHandle<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">conn<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">-&gt;<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="38">data<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">ssl_connect_data<pos:position pos:line="7" pos:column="26"/></name></name><modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type> <name pos:line="7" pos:column="28">connssl<pos:position pos:line="7" pos:column="35"/></name> <init pos:line="7" pos:column="36">= <expr><operator pos:line="7" pos:column="38">&amp;<pos:position pos:line="7" pos:column="43"/></operator><name><name pos:line="7" pos:column="39">conn<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">ssl<pos:position pos:line="7" pos:column="48"/></name><index pos:line="7" pos:column="48">[<expr><name pos:line="7" pos:column="49">sockindex<pos:position pos:line="7" pos:column="58"/></name></expr>]<pos:position pos:line="7" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">buffer<pos:position pos:line="8" pos:column="14"/></name><index pos:line="8" pos:column="14">[<expr><literal type="number" pos:line="8" pos:column="15">1024<pos:position pos:line="8" pos:column="19"/></literal></expr>]<pos:position pos:line="8" pos:column="20"/></index></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">HAS_ALPN<pos:position pos:line="10" pos:column="16"/></name></cpp:ifdef>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name><modifier pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></modifier></type> <name pos:line="11" pos:column="15">next_protocol<pos:position pos:line="11" pos:column="28"/></name></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name pos:line="14" pos:column="3">char<pos:position pos:line="14" pos:column="7"/></name></type> <name><name pos:line="14" pos:column="8">errorbuf<pos:position pos:line="14" pos:column="16"/></name><index pos:line="14" pos:column="16">[<expr><literal type="number" pos:line="14" pos:column="17">128<pos:position pos:line="14" pos:column="20"/></literal></expr>]<pos:position pos:line="14" pos:column="21"/></index></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">errorbuf<pos:position pos:line="15" pos:column="11"/></name><index pos:line="15" pos:column="11">[<expr><literal type="number" pos:line="15" pos:column="12">0<pos:position pos:line="15" pos:column="13"/></literal></expr>]<pos:position pos:line="15" pos:column="14"/></index></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="17" pos:column="3">conn<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">-&gt;<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="9">recv<pos:position pos:line="17" pos:column="13"/></name><index pos:line="17" pos:column="13">[<expr><name pos:line="17" pos:column="14">sockindex<pos:position pos:line="17" pos:column="23"/></name></expr>]<pos:position pos:line="17" pos:column="24"/></index></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">polarssl_recv<pos:position pos:line="17" pos:column="40"/></name></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">conn<pos:position pos:line="18" pos:column="7"/></name><operator pos:line="18" pos:column="7">-&gt;<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="9">send<pos:position pos:line="18" pos:column="13"/></name><index pos:line="18" pos:column="13">[<expr><name pos:line="18" pos:column="14">sockindex<pos:position pos:line="18" pos:column="23"/></name></expr>]<pos:position pos:line="18" pos:column="24"/></index></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <name pos:line="18" pos:column="27">polarssl_send<pos:position pos:line="18" pos:column="40"/></name></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>

  <for pos:line="20" pos:column="3">for<control pos:line="20" pos:column="6">(<init pos:line="20" pos:column="7">;<pos:position pos:line="20" pos:column="8"/></init><condition pos:line="20" pos:column="8">;<pos:position pos:line="20" pos:column="9"/></condition><incr/>)<pos:position pos:line="20" pos:column="10"/></control> <block pos:line="20" pos:column="11">{
    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><operator pos:line="21" pos:column="8">!<pos:position pos:line="21" pos:column="9"/></operator><operator pos:line="21" pos:column="9">(<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">ret<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">ssl_handshake<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><operator pos:line="21" pos:column="30">&amp;<pos:position pos:line="21" pos:column="35"/></operator><name><name pos:line="21" pos:column="31">connssl<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">-&gt;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="40">ssl<pos:position pos:line="21" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call><operator pos:line="21" pos:column="44">)<pos:position pos:line="21" pos:column="45"/></operator></expr>)<pos:position pos:line="21" pos:column="46"/></condition><then pos:line="21" pos:column="46">
      <block type="pseudo"><break pos:line="22" pos:column="7">break;<pos:position pos:line="22" pos:column="13"/></break></block></then>
    <elseif pos:line="23" pos:column="5">else <if pos:line="23" pos:column="10">if<condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">ret<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">!=<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="20">POLARSSL_ERR_NET_WANT_READ<pos:position pos:line="23" pos:column="46"/></name> <operator pos:line="23" pos:column="47">&amp;&amp;<pos:position pos:line="23" pos:column="57"/></operator>
            <name pos:line="24" pos:column="13">ret<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">!=<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">POLARSSL_ERR_NET_WANT_WRITE<pos:position pos:line="24" pos:column="47"/></name></expr>)<pos:position pos:line="24" pos:column="48"/></condition><then pos:line="24" pos:column="48"> <block pos:line="24" pos:column="49">{
<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">POLARSSL_ERROR_C<pos:position pos:line="25" pos:column="24"/></name></cpp:ifdef>
     <expr_stmt><expr><call><name pos:line="26" pos:column="6">error_strerror<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">ret<pos:position pos:line="26" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="26">errorbuf<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="36">sizeof<argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">errorbuf<pos:position pos:line="26" pos:column="51"/></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="27" pos:column="8">/* POLARSSL_ERROR_C */</comment>
     <expr_stmt><expr><call><name pos:line="28" pos:column="6">failf<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">data<pos:position pos:line="28" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="18">"ssl_handshake returned - PolarSSL: (-0x%04X) %s"<pos:position pos:line="28" pos:column="67"/></literal></expr></argument>,
                                                    <argument><expr><operator pos:line="29" pos:column="53">-<pos:position pos:line="29" pos:column="54"/></operator><name pos:line="29" pos:column="54">ret<pos:position pos:line="29" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="59">errorbuf<pos:position pos:line="29" pos:column="67"/></name></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>

     <return pos:line="31" pos:column="6">return <expr><name pos:line="31" pos:column="13">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="31" pos:column="36"/></name></expr>;<pos:position pos:line="31" pos:column="37"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if></elseif>
    <else pos:line="33" pos:column="5">else <block pos:line="33" pos:column="10">{
      <if pos:line="34" pos:column="7">if<condition pos:line="34" pos:column="9">(<expr><name pos:line="34" pos:column="10">ret<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">==<pos:position pos:line="34" pos:column="16"/></operator> <name pos:line="34" pos:column="17">POLARSSL_ERR_NET_WANT_READ<pos:position pos:line="34" pos:column="43"/></name></expr>)<pos:position pos:line="34" pos:column="44"/></condition><then pos:line="34" pos:column="44"> <block pos:line="34" pos:column="45">{
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">connssl<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">connecting_state<pos:position pos:line="35" pos:column="34"/></name></name> <operator pos:line="35" pos:column="35">=<pos:position pos:line="35" pos:column="36"/></operator> <name pos:line="35" pos:column="37">ssl_connect_2_reading<pos:position pos:line="35" pos:column="58"/></name></expr>;<pos:position pos:line="35" pos:column="59"/></expr_stmt>
        <return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">CURLE_OK<pos:position pos:line="36" pos:column="24"/></name></expr>;<pos:position pos:line="36" pos:column="25"/></return>
      }<pos:position pos:line="37" pos:column="8"/></block></then></if>
      <if pos:line="38" pos:column="7">if<condition pos:line="38" pos:column="9">(<expr><name pos:line="38" pos:column="10">ret<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">==<pos:position pos:line="38" pos:column="16"/></operator> <name pos:line="38" pos:column="17">POLARSSL_ERR_NET_WANT_WRITE<pos:position pos:line="38" pos:column="44"/></name></expr>)<pos:position pos:line="38" pos:column="45"/></condition><then pos:line="38" pos:column="45"> <block pos:line="38" pos:column="46">{
        <expr_stmt><expr><name><name pos:line="39" pos:column="9">connssl<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">connecting_state<pos:position pos:line="39" pos:column="34"/></name></name> <operator pos:line="39" pos:column="35">=<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="37">ssl_connect_2_writing<pos:position pos:line="39" pos:column="58"/></name></expr>;<pos:position pos:line="39" pos:column="59"/></expr_stmt>
        <return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">CURLE_OK<pos:position pos:line="40" pos:column="24"/></name></expr>;<pos:position pos:line="40" pos:column="25"/></return>
      }<pos:position pos:line="41" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">failf<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">data<pos:position pos:line="42" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="19">"SSL_connect failed with error %d."<pos:position pos:line="42" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="56">ret<pos:position pos:line="42" pos:column="59"/></name></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt>
      <return pos:line="43" pos:column="7">return <expr><name pos:line="43" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="43" pos:column="37"/></name></expr>;<pos:position pos:line="43" pos:column="38"/></return>

    }<pos:position pos:line="45" pos:column="6"/></block></else></if>
  }<pos:position pos:line="46" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="48" pos:column="3">infof<pos:position pos:line="48" pos:column="8"/></name><argument_list pos:line="48" pos:column="8">(<argument><expr><name pos:line="48" pos:column="9">data<pos:position pos:line="48" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="15">"PolarSSL: Handshake complete, cipher is %s\n"<pos:position pos:line="48" pos:column="61"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="49" pos:column="9">ssl_get_ciphersuite<pos:position pos:line="49" pos:column="28"/></name><argument_list pos:line="49" pos:column="28">(<argument><expr><operator pos:line="49" pos:column="29">&amp;<pos:position pos:line="49" pos:column="34"/></operator><name><name pos:line="49" pos:column="30">conn<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">ssl<pos:position pos:line="49" pos:column="39"/></name><index pos:line="49" pos:column="39">[<expr><name pos:line="49" pos:column="40">sockindex<pos:position pos:line="49" pos:column="49"/></name></expr>]<pos:position pos:line="49" pos:column="50"/></index></name><operator pos:line="49" pos:column="50">.<pos:position pos:line="49" pos:column="51"/></operator><name pos:line="49" pos:column="51">ssl<pos:position pos:line="49" pos:column="54"/></name></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr></argument>
    )<pos:position pos:line="50" pos:column="6"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="7"/></expr_stmt>

  <expr_stmt><expr><name pos:line="52" pos:column="3">ret<pos:position pos:line="52" pos:column="6"/></name> <operator pos:line="52" pos:column="7">=<pos:position pos:line="52" pos:column="8"/></operator> <call><name pos:line="52" pos:column="9">ssl_get_verify_result<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><operator pos:line="52" pos:column="31">&amp;<pos:position pos:line="52" pos:column="36"/></operator><name><name pos:line="52" pos:column="32">conn<pos:position pos:line="52" pos:column="36"/></name><operator pos:line="52" pos:column="36">-&gt;<pos:position pos:line="52" pos:column="41"/></operator><name pos:line="52" pos:column="38">ssl<pos:position pos:line="52" pos:column="41"/></name><index pos:line="52" pos:column="41">[<expr><name pos:line="52" pos:column="42">sockindex<pos:position pos:line="52" pos:column="51"/></name></expr>]<pos:position pos:line="52" pos:column="52"/></index></name><operator pos:line="52" pos:column="52">.<pos:position pos:line="52" pos:column="53"/></operator><name pos:line="52" pos:column="53">ssl<pos:position pos:line="52" pos:column="56"/></name></expr></argument>)<pos:position pos:line="52" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="58"/></expr_stmt>

  <if pos:line="54" pos:column="3">if<condition pos:line="54" pos:column="5">(<expr><name pos:line="54" pos:column="6">ret<pos:position pos:line="54" pos:column="9"/></name> <operator pos:line="54" pos:column="10">&amp;&amp;<pos:position pos:line="54" pos:column="20"/></operator> <name><name pos:line="54" pos:column="13">data<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">-&gt;<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="19">set<pos:position pos:line="54" pos:column="22"/></name><operator pos:line="54" pos:column="22">.<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="23">ssl<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">.<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">verifypeer<pos:position pos:line="54" pos:column="37"/></name></name></expr>)<pos:position pos:line="54" pos:column="38"/></condition><then pos:line="54" pos:column="38"> <block pos:line="54" pos:column="39">{
    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">(<expr><name pos:line="55" pos:column="8">ret<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">&amp;<pos:position pos:line="55" pos:column="17"/></operator> <name pos:line="55" pos:column="14">BADCERT_EXPIRED<pos:position pos:line="55" pos:column="29"/></name></expr>)<pos:position pos:line="55" pos:column="30"/></condition><then pos:line="55" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="7">failf<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">data<pos:position pos:line="56" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="19">"Cert verify failed: BADCERT_EXPIRED"<pos:position pos:line="56" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="58"/></expr_stmt></block></then></if>

    <if pos:line="58" pos:column="5">if<condition pos:line="58" pos:column="7">(<expr><name pos:line="58" pos:column="8">ret<pos:position pos:line="58" pos:column="11"/></name> <operator pos:line="58" pos:column="12">&amp;<pos:position pos:line="58" pos:column="17"/></operator> <name pos:line="58" pos:column="14">BADCERT_REVOKED<pos:position pos:line="58" pos:column="29"/></name></expr>)<pos:position pos:line="58" pos:column="30"/></condition><then pos:line="58" pos:column="30"> <block pos:line="58" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">failf<pos:position pos:line="59" pos:column="12"/></name><argument_list pos:line="59" pos:column="12">(<argument><expr><name pos:line="59" pos:column="13">data<pos:position pos:line="59" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="19">"Cert verify failed: BADCERT_REVOKED"<pos:position pos:line="59" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="58"/></expr_stmt>
      <return pos:line="60" pos:column="7">return <expr><name pos:line="60" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="60" pos:column="30"/></name></expr>;<pos:position pos:line="60" pos:column="31"/></return>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <if pos:line="63" pos:column="5">if<condition pos:line="63" pos:column="7">(<expr><name pos:line="63" pos:column="8">ret<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">&amp;<pos:position pos:line="63" pos:column="17"/></operator> <name pos:line="63" pos:column="14">BADCERT_CN_MISMATCH<pos:position pos:line="63" pos:column="33"/></name></expr>)<pos:position pos:line="63" pos:column="34"/></condition><then pos:line="63" pos:column="34">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="7">failf<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name pos:line="64" pos:column="13">data<pos:position pos:line="64" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="19">"Cert verify failed: BADCERT_CN_MISMATCH"<pos:position pos:line="64" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="62"/></expr_stmt></block></then></if>

    <if pos:line="66" pos:column="5">if<condition pos:line="66" pos:column="7">(<expr><name pos:line="66" pos:column="8">ret<pos:position pos:line="66" pos:column="11"/></name> <operator pos:line="66" pos:column="12">&amp;<pos:position pos:line="66" pos:column="17"/></operator> <name pos:line="66" pos:column="14">BADCERT_NOT_TRUSTED<pos:position pos:line="66" pos:column="33"/></name></expr>)<pos:position pos:line="66" pos:column="34"/></condition><then pos:line="66" pos:column="34">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="7">failf<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><name pos:line="67" pos:column="13">data<pos:position pos:line="67" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="19">"Cert verify failed: BADCERT_NOT_TRUSTED"<pos:position pos:line="67" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="62"/></expr_stmt></block></then></if>

    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="69" pos:column="42"/></name></expr>;<pos:position pos:line="69" pos:column="43"/></return>
  }<pos:position pos:line="70" pos:column="4"/></block></then></if>

  <if pos:line="72" pos:column="3">if<condition pos:line="72" pos:column="5">(<expr><call><name pos:line="72" pos:column="6">ssl_get_peer_cert<pos:position pos:line="72" pos:column="23"/></name><argument_list pos:line="72" pos:column="23">(<argument><expr><operator pos:line="72" pos:column="24">&amp;<pos:position pos:line="72" pos:column="29"/></operator><operator pos:line="72" pos:column="25">(<pos:position pos:line="72" pos:column="26"/></operator><name><name pos:line="72" pos:column="26">connssl<pos:position pos:line="72" pos:column="33"/></name><operator pos:line="72" pos:column="33">-&gt;<pos:position pos:line="72" pos:column="38"/></operator><name pos:line="72" pos:column="35">ssl<pos:position pos:line="72" pos:column="38"/></name></name><operator pos:line="72" pos:column="38">)<pos:position pos:line="72" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="41"/></condition><then pos:line="72" pos:column="41"> <block pos:line="72" pos:column="42">{
    <comment type="block" pos:line="73" pos:column="5">/* If the session was resumed, there will be no peer certs */</comment>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">memset<pos:position pos:line="74" pos:column="11"/></name><argument_list pos:line="74" pos:column="11">(<argument><expr><name pos:line="74" pos:column="12">buffer<pos:position pos:line="74" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="20">0<pos:position pos:line="74" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="23">sizeof<argument_list pos:line="74" pos:column="29">(<argument><expr><name pos:line="74" pos:column="30">buffer<pos:position pos:line="74" pos:column="36"/></name></expr></argument>)<pos:position pos:line="74" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="39"/></expr_stmt>

    <if pos:line="76" pos:column="5">if<condition pos:line="76" pos:column="7">(<expr><call><name pos:line="76" pos:column="8">x509_crt_info<pos:position pos:line="76" pos:column="21"/></name><argument_list pos:line="76" pos:column="21">(<argument><expr><name pos:line="76" pos:column="22">buffer<pos:position pos:line="76" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="76" pos:column="30">sizeof<argument_list pos:line="76" pos:column="36">(<argument><expr><name pos:line="76" pos:column="37">buffer<pos:position pos:line="76" pos:column="43"/></name></expr></argument>)<pos:position pos:line="76" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="76" pos:column="46">(<pos:position pos:line="76" pos:column="47"/></operator><name pos:line="76" pos:column="47">char<pos:position pos:line="76" pos:column="51"/></name> <operator pos:line="76" pos:column="52">*<pos:position pos:line="76" pos:column="53"/></operator><operator pos:line="76" pos:column="53">)<pos:position pos:line="76" pos:column="54"/></operator><literal type="string" pos:line="76" pos:column="54">"* "<pos:position pos:line="76" pos:column="58"/></literal></expr></argument>,
                     <argument><expr><call><name pos:line="77" pos:column="22">ssl_get_peer_cert<pos:position pos:line="77" pos:column="39"/></name><argument_list pos:line="77" pos:column="39">(<argument><expr><operator pos:line="77" pos:column="40">&amp;<pos:position pos:line="77" pos:column="45"/></operator><operator pos:line="77" pos:column="41">(<pos:position pos:line="77" pos:column="42"/></operator><name><name pos:line="77" pos:column="42">connssl<pos:position pos:line="77" pos:column="49"/></name><operator pos:line="77" pos:column="49">-&gt;<pos:position pos:line="77" pos:column="54"/></operator><name pos:line="77" pos:column="51">ssl<pos:position pos:line="77" pos:column="54"/></name></name><operator pos:line="77" pos:column="54">)<pos:position pos:line="77" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="77" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="77" pos:column="57"/></argument_list></call> <operator pos:line="77" pos:column="58">!=<pos:position pos:line="77" pos:column="60"/></operator> <operator pos:line="77" pos:column="61">-<pos:position pos:line="77" pos:column="62"/></operator><literal type="number" pos:line="77" pos:column="62">1<pos:position pos:line="77" pos:column="63"/></literal></expr>)<pos:position pos:line="77" pos:column="64"/></condition><then pos:line="77" pos:column="64">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="7">infof<pos:position pos:line="78" pos:column="12"/></name><argument_list pos:line="78" pos:column="12">(<argument><expr><name pos:line="78" pos:column="13">data<pos:position pos:line="78" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="19">"Dumping cert info:\n%s\n"<pos:position pos:line="78" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="47">buffer<pos:position pos:line="78" pos:column="53"/></name></expr></argument>)<pos:position pos:line="78" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="55"/></expr_stmt></block></then></if>
  }<pos:position pos:line="79" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">ifdef<pos:position pos:line="81" pos:column="7"/></cpp:directive> <name pos:line="81" pos:column="8">HAS_ALPN<pos:position pos:line="81" pos:column="16"/></name></cpp:ifdef>
  <if pos:line="82" pos:column="3">if<condition pos:line="82" pos:column="5">(<expr><name><name pos:line="82" pos:column="6">data<pos:position pos:line="82" pos:column="10"/></name><operator pos:line="82" pos:column="10">-&gt;<pos:position pos:line="82" pos:column="15"/></operator><name pos:line="82" pos:column="12">set<pos:position pos:line="82" pos:column="15"/></name><operator pos:line="82" pos:column="15">.<pos:position pos:line="82" pos:column="16"/></operator><name pos:line="82" pos:column="16">ssl_enable_alpn<pos:position pos:line="82" pos:column="31"/></name></name></expr>)<pos:position pos:line="82" pos:column="32"/></condition><then pos:line="82" pos:column="32"> <block pos:line="82" pos:column="33">{
    <expr_stmt><expr><name pos:line="83" pos:column="5">next_protocol<pos:position pos:line="83" pos:column="18"/></name> <operator pos:line="83" pos:column="19">=<pos:position pos:line="83" pos:column="20"/></operator> <call><name pos:line="83" pos:column="21">ssl_get_alpn_protocol<pos:position pos:line="83" pos:column="42"/></name><argument_list pos:line="83" pos:column="42">(<argument><expr><operator pos:line="83" pos:column="43">&amp;<pos:position pos:line="83" pos:column="48"/></operator><name><name pos:line="83" pos:column="44">connssl<pos:position pos:line="83" pos:column="51"/></name><operator pos:line="83" pos:column="51">-&gt;<pos:position pos:line="83" pos:column="56"/></operator><name pos:line="83" pos:column="53">ssl<pos:position pos:line="83" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="58"/></expr_stmt>

    <if pos:line="85" pos:column="5">if<condition pos:line="85" pos:column="7">(<expr><name pos:line="85" pos:column="8">next_protocol<pos:position pos:line="85" pos:column="21"/></name> <operator pos:line="85" pos:column="22">!=<pos:position pos:line="85" pos:column="24"/></operator> <name pos:line="85" pos:column="25">NULL<pos:position pos:line="85" pos:column="29"/></name></expr>)<pos:position pos:line="85" pos:column="30"/></condition><then pos:line="85" pos:column="30"> <block pos:line="85" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">infof<pos:position pos:line="86" pos:column="12"/></name><argument_list pos:line="86" pos:column="12">(<argument><expr><name pos:line="86" pos:column="13">data<pos:position pos:line="86" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="19">"ALPN, server accepted to use %s\n"<pos:position pos:line="86" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="56">next_protocol<pos:position pos:line="86" pos:column="69"/></name></expr></argument>)<pos:position pos:line="86" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="71"/></expr_stmt>

      <if pos:line="88" pos:column="7">if<condition pos:line="88" pos:column="9">(<expr><operator pos:line="88" pos:column="10">!<pos:position pos:line="88" pos:column="11"/></operator><call><name pos:line="88" pos:column="11">strncmp<pos:position pos:line="88" pos:column="18"/></name><argument_list pos:line="88" pos:column="18">(<argument><expr><name pos:line="88" pos:column="19">next_protocol<pos:position pos:line="88" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="34">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="88" pos:column="58"/></name></expr></argument>,
                  <argument><expr><name pos:line="89" pos:column="19">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="89" pos:column="47"/></name></expr></argument>)<pos:position pos:line="89" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="49"/></condition><then pos:line="89" pos:column="49"> <block pos:line="89" pos:column="50">{
        <expr_stmt><expr><name><name pos:line="90" pos:column="9">conn<pos:position pos:line="90" pos:column="13"/></name><operator pos:line="90" pos:column="13">-&gt;<pos:position pos:line="90" pos:column="18"/></operator><name pos:line="90" pos:column="15">negnpn<pos:position pos:line="90" pos:column="21"/></name></name> <operator pos:line="90" pos:column="22">=<pos:position pos:line="90" pos:column="23"/></operator> <name pos:line="90" pos:column="24">NPN_HTTP2<pos:position pos:line="90" pos:column="33"/></name></expr>;<pos:position pos:line="90" pos:column="34"/></expr_stmt>
      }<pos:position pos:line="91" pos:column="8"/></block></then>
      <elseif pos:line="92" pos:column="7">else <if pos:line="92" pos:column="12">if<condition pos:line="92" pos:column="14">(<expr><operator pos:line="92" pos:column="15">!<pos:position pos:line="92" pos:column="16"/></operator><call><name pos:line="92" pos:column="16">strncmp<pos:position pos:line="92" pos:column="23"/></name><argument_list pos:line="92" pos:column="23">(<argument><expr><name pos:line="92" pos:column="24">next_protocol<pos:position pos:line="92" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="39">ALPN_HTTP_1_1<pos:position pos:line="92" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="54">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="92" pos:column="74"/></name></expr></argument>)<pos:position pos:line="92" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="92" pos:column="76"/></condition><then pos:line="92" pos:column="76"> <block pos:line="92" pos:column="77">{
        <expr_stmt><expr><name><name pos:line="93" pos:column="9">conn<pos:position pos:line="93" pos:column="13"/></name><operator pos:line="93" pos:column="13">-&gt;<pos:position pos:line="93" pos:column="18"/></operator><name pos:line="93" pos:column="15">negnpn<pos:position pos:line="93" pos:column="21"/></name></name> <operator pos:line="93" pos:column="22">=<pos:position pos:line="93" pos:column="23"/></operator> <name pos:line="93" pos:column="24">NPN_HTTP1_1<pos:position pos:line="93" pos:column="35"/></name></expr>;<pos:position pos:line="93" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="94" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="95" pos:column="6"/></block></then>
    <elseif pos:line="96" pos:column="5">else <if pos:line="96" pos:column="10">if<condition pos:line="96" pos:column="12">(<expr><name><name pos:line="96" pos:column="13">connssl<pos:position pos:line="96" pos:column="20"/></name><operator pos:line="96" pos:column="20">-&gt;<pos:position pos:line="96" pos:column="25"/></operator><name pos:line="96" pos:column="22">asked_for_h2<pos:position pos:line="96" pos:column="34"/></name></name></expr>)<pos:position pos:line="96" pos:column="35"/></condition><then pos:line="96" pos:column="35"> <block pos:line="96" pos:column="36">{
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">infof<pos:position pos:line="97" pos:column="12"/></name><argument_list pos:line="97" pos:column="12">(<argument><expr><name pos:line="97" pos:column="13">data<pos:position pos:line="97" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="19">"ALPN, server did not agree to a protocol\n"<pos:position pos:line="97" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="99" pos:column="4"/></block></then></if>
<cpp:endif pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">endif<pos:position pos:line="100" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name pos:line="102" pos:column="3">connssl<pos:position pos:line="102" pos:column="10"/></name><operator pos:line="102" pos:column="10">-&gt;<pos:position pos:line="102" pos:column="15"/></operator><name pos:line="102" pos:column="12">connecting_state<pos:position pos:line="102" pos:column="28"/></name></name> <operator pos:line="102" pos:column="29">=<pos:position pos:line="102" pos:column="30"/></operator> <name pos:line="102" pos:column="31">ssl_connect_3<pos:position pos:line="102" pos:column="44"/></name></expr>;<pos:position pos:line="102" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="103" pos:column="3">infof<pos:position pos:line="103" pos:column="8"/></name><argument_list pos:line="103" pos:column="8">(<argument><expr><name pos:line="103" pos:column="9">data<pos:position pos:line="103" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="15">"SSL connected\n"<pos:position pos:line="103" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="34"/></expr_stmt>

  <return pos:line="105" pos:column="3">return <expr><name pos:line="105" pos:column="10">CURLE_OK<pos:position pos:line="105" pos:column="18"/></name></expr>;<pos:position pos:line="105" pos:column="19"/></return>
}<pos:position pos:line="106" pos:column="2"/></block></function></unit>
