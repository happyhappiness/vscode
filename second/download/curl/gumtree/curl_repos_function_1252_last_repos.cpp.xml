<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1252_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">countcheck<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">func<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">line<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">source<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* if source is NULL, then the call is made internally and this check
     should not be made */</comment>
  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><name pos:line="5" pos:column="6">memlimit<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">&amp;&amp;<pos:position pos:line="5" pos:column="25"/></operator> <name pos:line="5" pos:column="18">source<pos:position pos:line="5" pos:column="24"/></name></expr>)<pos:position pos:line="5" pos:column="25"/></condition><then pos:line="5" pos:column="25"> <block pos:line="5" pos:column="26">{
    <if pos:line="6" pos:column="5">if<condition pos:line="6" pos:column="7">(<expr><operator pos:line="6" pos:column="8">!<pos:position pos:line="6" pos:column="9"/></operator><name pos:line="6" pos:column="9">memsize<pos:position pos:line="6" pos:column="16"/></name></expr>)<pos:position pos:line="6" pos:column="17"/></condition><then pos:line="6" pos:column="17"> <block pos:line="6" pos:column="18">{
      <if pos:line="7" pos:column="7">if<condition pos:line="7" pos:column="9">(<expr><name pos:line="7" pos:column="10">source<pos:position pos:line="7" pos:column="16"/></name></expr>)<pos:position pos:line="7" pos:column="17"/></condition><then pos:line="7" pos:column="17"> <block pos:line="7" pos:column="18">{
        <comment type="block" pos:line="8" pos:column="9">/* log to file */</comment>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">curl_memlog<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"LIMIT %s:%d %s reached memlimit\n"<pos:position pos:line="9" pos:column="56"/></literal></expr></argument>,
                    <argument><expr><name pos:line="10" pos:column="21">source<pos:position pos:line="10" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="29">line<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="35">func<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
        <comment type="block" pos:line="11" pos:column="9">/* log to stderr also */</comment>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">fprintf<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">stderr<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="25">"LIMIT %s:%d %s reached memlimit\n"<pos:position pos:line="12" pos:column="60"/></literal></expr></argument>,
                <argument><expr><name pos:line="13" pos:column="17">source<pos:position pos:line="13" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="25">line<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">func<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">fflush<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">logfile<pos:position pos:line="14" pos:column="23"/></name></expr></argument>)<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt> <comment type="block" pos:line="14" pos:column="26">/* because it might crash now */</comment>
      }<pos:position pos:line="15" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="16" pos:column="7">errno<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">ENOMEM<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
      <return pos:line="17" pos:column="7">return <expr><name pos:line="17" pos:column="14">TRUE<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></return> <comment type="block" pos:line="17" pos:column="20">/* RETURN ERROR! */</comment>
    }<pos:position pos:line="18" pos:column="6"/></block></then>
    <else pos:line="19" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="7">memsize<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">--<pos:position pos:line="20" pos:column="16"/></operator></expr>;<pos:position pos:line="20" pos:column="17"/></expr_stmt></block></else></if> <comment type="block" pos:line="20" pos:column="18">/* countdown */</comment>


  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <return pos:line="25" pos:column="3">return <expr><name pos:line="25" pos:column="10">FALSE<pos:position pos:line="25" pos:column="15"/></name></expr>;<pos:position pos:line="25" pos:column="16"/></return> <comment type="block" pos:line="25" pos:column="17">/* allow this */</comment>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
