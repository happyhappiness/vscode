<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_995_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">tool_seek_cb<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">userdata<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">curl_off_t<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">offset<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">whence<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">InStruct<pos:position pos:line="3" pos:column="18"/></name></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">in<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><name pos:line="3" pos:column="25">userdata<pos:position pos:line="3" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>

<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive><expr><operator pos:line="5" pos:column="4">(<pos:position pos:line="5" pos:column="5"/></operator><name pos:line="5" pos:column="5">CURL_SIZEOF_CURL_OFF_T<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&gt;<pos:position pos:line="5" pos:column="32"/></operator> <name pos:line="5" pos:column="30">SIZEOF_OFF_T<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">)<pos:position pos:line="5" pos:column="43"/></operator> <operator pos:line="5" pos:column="44">&amp;&amp;<pos:position pos:line="5" pos:column="54"/></operator> <operator pos:line="5" pos:column="47">!<pos:position pos:line="5" pos:column="48"/></operator><call><name pos:line="5" pos:column="48">defined<pos:position pos:line="5" pos:column="55"/></name><argument_list pos:line="5" pos:column="55">(<argument><expr><name pos:line="5" pos:column="56">USE_WIN32_LARGE_FILES<pos:position pos:line="5" pos:column="77"/></name></expr></argument>)<pos:position pos:line="5" pos:column="78"/></argument_list></call></expr></cpp:if>

  <comment type="block" pos:line="7" pos:column="3">/* The offset check following here is only interesting if curl_off_t is
     larger than off_t and we are not using the WIN32 large file support
     macros that provide the support to do 64bit seeks correctly */</comment>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">offset<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">&gt;<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="15">OUR_MAX_SEEK_O<pos:position pos:line="11" pos:column="29"/></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <block pos:line="11" pos:column="31">{
    <comment type="block" pos:line="12" pos:column="5">/* Some precaution code to work around problems with different data sizes
       to allow seeking &gt;32bit even if off_t is 32bit. Should be very rare and
       is really valid on weirdo-systems. */</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">curl_off_t<pos:position pos:line="15" pos:column="15"/></name></type> <name pos:line="15" pos:column="16">left<pos:position pos:line="15" pos:column="20"/></name> <init pos:line="15" pos:column="21">= <expr><name pos:line="15" pos:column="23">offset<pos:position pos:line="15" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>

    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><name pos:line="17" pos:column="8">whence<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">!=<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">SEEK_SET<pos:position pos:line="17" pos:column="26"/></name></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27">
      <comment type="block" pos:line="18" pos:column="7">/* this code path doesn't support other types */</comment>
      <block type="pseudo"><return pos:line="19" pos:column="7">return <expr><name pos:line="19" pos:column="14">CURL_SEEKFUNC_FAIL<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></return></block></then></if>

    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><name pos:line="21" pos:column="8">LSEEK_ERROR<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">==<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">lseek<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name><name pos:line="21" pos:column="29">in<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">fd<pos:position pos:line="21" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="37">0<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">SEEK_SET<pos:position pos:line="21" pos:column="48"/></name></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="50"/></condition><then pos:line="21" pos:column="50">
      <comment type="block" pos:line="22" pos:column="7">/* couldn't rewind to beginning */</comment>
      <block type="pseudo"><return pos:line="23" pos:column="7">return <expr><name pos:line="23" pos:column="14">CURL_SEEKFUNC_FAIL<pos:position pos:line="23" pos:column="32"/></name></expr>;<pos:position pos:line="23" pos:column="33"/></return></block></then></if>

    <while pos:line="25" pos:column="5">while<condition pos:line="25" pos:column="10">(<expr><name pos:line="25" pos:column="11">left<pos:position pos:line="25" pos:column="15"/></name></expr>)<pos:position pos:line="25" pos:column="16"/></condition> <block pos:line="25" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">long<pos:position pos:line="26" pos:column="11"/></name></type> <name pos:line="26" pos:column="12">step<pos:position pos:line="26" pos:column="16"/></name> <init pos:line="26" pos:column="17">= <expr><ternary><condition><expr><operator pos:line="26" pos:column="19">(<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">left<pos:position pos:line="26" pos:column="24"/></name> <operator pos:line="26" pos:column="25">&gt;<pos:position pos:line="26" pos:column="29"/></operator> <name pos:line="26" pos:column="27">OUR_MAX_SEEK_O<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">)<pos:position pos:line="26" pos:column="42"/></operator></expr> ?<pos:position pos:line="26" pos:column="44"/></condition><then pos:line="26" pos:column="44"> <expr><name pos:line="26" pos:column="45">OUR_MAX_SEEK_L<pos:position pos:line="26" pos:column="59"/></name></expr> <pos:position pos:line="26" pos:column="60"/></then><else pos:line="26" pos:column="60">: <expr><operator pos:line="26" pos:column="62">(<pos:position pos:line="26" pos:column="63"/></operator><name pos:line="26" pos:column="63">long<pos:position pos:line="26" pos:column="67"/></name><operator pos:line="26" pos:column="67">)<pos:position pos:line="26" pos:column="68"/></operator><name pos:line="26" pos:column="68">left<pos:position pos:line="26" pos:column="72"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="26" pos:column="73"/></decl_stmt>
      <if pos:line="27" pos:column="7">if<condition pos:line="27" pos:column="9">(<expr><name pos:line="27" pos:column="10">LSEEK_ERROR<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">==<pos:position pos:line="27" pos:column="24"/></operator> <call><name pos:line="27" pos:column="25">lseek<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name><name pos:line="27" pos:column="31">in<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">-&gt;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="35">fd<pos:position pos:line="27" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">step<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="45">SEEK_CUR<pos:position pos:line="27" pos:column="53"/></name></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="55"/></condition><then pos:line="27" pos:column="55">
        <comment type="block" pos:line="28" pos:column="9">/* couldn't seek forwards the desired amount */</comment>
        <block type="pseudo"><return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">CURL_SEEKFUNC_FAIL<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="30" pos:column="7">left<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">-=<pos:position pos:line="30" pos:column="14"/></operator> <name pos:line="30" pos:column="15">step<pos:position pos:line="30" pos:column="19"/></name></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></while>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">CURL_SEEKFUNC_OK<pos:position pos:line="32" pos:column="28"/></name></expr>;<pos:position pos:line="32" pos:column="29"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="36" pos:column="3">if<condition pos:line="36" pos:column="5">(<expr><name pos:line="36" pos:column="6">LSEEK_ERROR<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">==<pos:position pos:line="36" pos:column="20"/></operator> <call><name pos:line="36" pos:column="21">lseek<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name><name pos:line="36" pos:column="27">in<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">-&gt;<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="31">fd<pos:position pos:line="36" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">offset<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="43">whence<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="51"/></condition><then pos:line="36" pos:column="51">
    <comment type="block" pos:line="37" pos:column="5">/* couldn't rewind, the reason is in errno but errno is just not portable
       enough and we don't actually care that much why we failed. We'll let
       libcurl know that it may try other means if it wants to. */</comment>
    <block type="pseudo"><return pos:line="40" pos:column="5">return <expr><name pos:line="40" pos:column="12">CURL_SEEKFUNC_CANTSEEK<pos:position pos:line="40" pos:column="34"/></name></expr>;<pos:position pos:line="40" pos:column="35"/></return></block></then></if>

  <return pos:line="42" pos:column="3">return <expr><name pos:line="42" pos:column="10">CURL_SEEKFUNC_OK<pos:position pos:line="42" pos:column="26"/></name></expr>;<pos:position pos:line="42" pos:column="27"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
