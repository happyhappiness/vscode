<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1885_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">AcceptServerConnect<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">connectdata<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">conn<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_easy<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name><name pos:line="3" pos:column="28">conn<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">data<pos:position pos:line="3" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">sock<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name><name pos:line="4" pos:column="24">conn<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">sock<pos:position pos:line="4" pos:column="34"/></name><index pos:line="4" pos:column="34">[<expr><name pos:line="4" pos:column="35">SECONDARYSOCKET<pos:position pos:line="4" pos:column="50"/></name></expr>]<pos:position pos:line="4" pos:column="51"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_socket_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">s<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURL_SOCKET_BAD<pos:position pos:line="5" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">ENABLE_IPV6<pos:position pos:line="6" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_sockaddr_storage<pos:position pos:line="7" pos:column="31"/></name></name></type> <name pos:line="7" pos:column="32">add<pos:position pos:line="7" pos:column="35"/></name></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
<cpp:else pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">else<pos:position pos:line="8" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">sockaddr_in<pos:position pos:line="9" pos:column="21"/></name></name></type> <name pos:line="9" pos:column="22">add<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">curl_socklen_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">size<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><operator pos:line="11" pos:column="25">(<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">curl_socklen_t<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">)<pos:position pos:line="11" pos:column="41"/></operator> <sizeof pos:line="11" pos:column="42">sizeof<argument_list pos:line="11" pos:column="48">(<argument><expr><name pos:line="11" pos:column="49">add<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="11" pos:column="54"/></decl_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><literal type="number" pos:line="13" pos:column="6">0<pos:position pos:line="13" pos:column="7"/></literal> <operator pos:line="13" pos:column="8">==<pos:position pos:line="13" pos:column="10"/></operator> <call><name pos:line="13" pos:column="11">getsockname<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">sock<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="29">(<pos:position pos:line="13" pos:column="30"/></operator>struct <name pos:line="13" pos:column="37">sockaddr<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">*<pos:position pos:line="13" pos:column="47"/></operator><operator pos:line="13" pos:column="47">)<pos:position pos:line="13" pos:column="48"/></operator> <operator pos:line="13" pos:column="49">&amp;<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="50">add<pos:position pos:line="13" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="55">&amp;<pos:position pos:line="13" pos:column="60"/></operator><name pos:line="13" pos:column="56">size<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="62"/></condition><then pos:line="13" pos:column="62"> <block pos:line="13" pos:column="63">{
    <expr_stmt><expr><name pos:line="14" pos:column="5">size<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <sizeof pos:line="14" pos:column="12">sizeof<argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">add<pos:position pos:line="14" pos:column="22"/></name></expr></argument>)<pos:position pos:line="14" pos:column="23"/></argument_list></sizeof></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">s<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">accept<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">sock<pos:position pos:line="16" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="22">(<pos:position pos:line="16" pos:column="23"/></operator>struct <name pos:line="16" pos:column="30">sockaddr<pos:position pos:line="16" pos:column="38"/></name> <operator pos:line="16" pos:column="39">*<pos:position pos:line="16" pos:column="40"/></operator><operator pos:line="16" pos:column="40">)<pos:position pos:line="16" pos:column="41"/></operator> <operator pos:line="16" pos:column="42">&amp;<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="43">add<pos:position pos:line="16" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="48">&amp;<pos:position pos:line="16" pos:column="53"/></operator><name pos:line="16" pos:column="49">size<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">Curl_closesocket<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">conn<pos:position pos:line="18" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="26">sock<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt> <comment type="block" pos:line="18" pos:column="33">/* close the first socket */</comment>

  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">CURL_SOCKET_BAD<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">==<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">s<pos:position pos:line="20" pos:column="26"/></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27"> <block pos:line="20" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">failf<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><name pos:line="21" pos:column="11">data<pos:position pos:line="21" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="17">"Error accept()ing server connect"<pos:position pos:line="21" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="22" pos:column="33"/></name></expr>;<pos:position pos:line="22" pos:column="34"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">infof<pos:position pos:line="24" pos:column="8"/></name><argument_list pos:line="24" pos:column="8">(<argument><expr><name pos:line="24" pos:column="9">data<pos:position pos:line="24" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="15">"Connection accepted from server\n"<pos:position pos:line="24" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>
  <comment type="block" pos:line="25" pos:column="3">/* when this happens within the DO state it is important that we mark us as
     not needing DO_MORE anymore */</comment>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">conn<pos:position pos:line="27" pos:column="7"/></name><operator pos:line="27" pos:column="7">-&gt;<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="9">bits<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">.<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">do_more<pos:position pos:line="27" pos:column="21"/></name></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">FALSE<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="29" pos:column="3">conn<pos:position pos:line="29" pos:column="7"/></name><operator pos:line="29" pos:column="7">-&gt;<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="9">sock<pos:position pos:line="29" pos:column="13"/></name><index pos:line="29" pos:column="13">[<expr><name pos:line="29" pos:column="14">SECONDARYSOCKET<pos:position pos:line="29" pos:column="29"/></name></expr>]<pos:position pos:line="29" pos:column="30"/></index></name> <operator pos:line="29" pos:column="31">=<pos:position pos:line="29" pos:column="32"/></operator> <name pos:line="29" pos:column="33">s<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="30" pos:column="3">(<pos:position pos:line="30" pos:column="4"/></operator><name pos:line="30" pos:column="4">void<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">)<pos:position pos:line="30" pos:column="9"/></operator><call><name pos:line="30" pos:column="9">curlx_nonblock<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">s<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="27">TRUE<pos:position pos:line="30" pos:column="31"/></name></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt> <comment type="block" pos:line="30" pos:column="34">/* enable non-blocking */</comment>
  <expr_stmt><expr><name><name pos:line="31" pos:column="3">conn<pos:position pos:line="31" pos:column="7"/></name><operator pos:line="31" pos:column="7">-&gt;<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="9">sock_accepted<pos:position pos:line="31" pos:column="22"/></name><index pos:line="31" pos:column="22">[<expr><name pos:line="31" pos:column="23">SECONDARYSOCKET<pos:position pos:line="31" pos:column="38"/></name></expr>]<pos:position pos:line="31" pos:column="39"/></index></name> <operator pos:line="31" pos:column="40">=<pos:position pos:line="31" pos:column="41"/></operator> <name pos:line="31" pos:column="42">TRUE<pos:position pos:line="31" pos:column="46"/></name></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>

  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><name><name pos:line="33" pos:column="6">data<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">set<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">.<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="16">fsockopt<pos:position pos:line="33" pos:column="24"/></name></name></expr>)<pos:position pos:line="33" pos:column="25"/></condition><then pos:line="33" pos:column="25"> <block pos:line="33" pos:column="26">{
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">int<pos:position pos:line="34" pos:column="8"/></name></type> <name pos:line="34" pos:column="9">error<pos:position pos:line="34" pos:column="14"/></name> <init pos:line="34" pos:column="15">= <expr><literal type="number" pos:line="34" pos:column="17">0<pos:position pos:line="34" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="34" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* activate callback for setting socket options */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">error<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <call><name><name pos:line="37" pos:column="13">data<pos:position pos:line="37" pos:column="17"/></name><operator pos:line="37" pos:column="17">-&gt;<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="19">set<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">.<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">fsockopt<pos:position pos:line="37" pos:column="31"/></name></name><argument_list pos:line="37" pos:column="31">(<argument><expr><name><name pos:line="37" pos:column="32">data<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">-&gt;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="38">set<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">.<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="42">sockopt_client<pos:position pos:line="37" pos:column="56"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="38" pos:column="32">s<pos:position pos:line="38" pos:column="33"/></name></expr></argument>,
                               <argument><expr><name pos:line="39" pos:column="32">CURLSOCKTYPE_ACCEPT<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>

    <if pos:line="41" pos:column="5">if<condition pos:line="41" pos:column="7">(<expr><name pos:line="41" pos:column="8">error<pos:position pos:line="41" pos:column="13"/></name></expr>)<pos:position pos:line="41" pos:column="14"/></condition><then pos:line="41" pos:column="14"> <block pos:line="41" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">close_secondarysocket<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">conn<pos:position pos:line="42" pos:column="33"/></name></expr></argument>)<pos:position pos:line="42" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
      <return pos:line="43" pos:column="7">return <expr><name pos:line="43" pos:column="14">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="43" pos:column="39"/></name></expr>;<pos:position pos:line="43" pos:column="40"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <return pos:line="47" pos:column="3">return <expr><name pos:line="47" pos:column="10">CURLE_OK<pos:position pos:line="47" pos:column="18"/></name></expr>;<pos:position pos:line="47" pos:column="19"/></return>

}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
