<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2378_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">verifyhost<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">X509<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">server_cert<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">bool<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">matched<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">FALSE<pos:position pos:line="3" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">target<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name pos:line="4" pos:column="16">GEN_DNS<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt> <comment type="block" pos:line="4" pos:column="25">/* target type, GEN_DNS or GEN_IPADD */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">addrlen<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">data<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">STACK_OF<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">GENERAL_NAME<pos:position pos:line="7" pos:column="24"/></name></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call> <operator pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">altnames<pos:position pos:line="7" pos:column="35"/></name></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">ENABLE_IPV6<pos:position pos:line="8" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">in6_addr<pos:position pos:line="9" pos:column="18"/></name></name></type> <name pos:line="9" pos:column="19">addr<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">in_addr<pos:position pos:line="11" pos:column="17"/></name></name></type> <name pos:line="11" pos:column="18">addr<pos:position pos:line="11" pos:column="22"/></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">CURLcode<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">result<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><name pos:line="13" pos:column="21">CURLE_OK<pos:position pos:line="13" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">bool<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">dNSName<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><name pos:line="14" pos:column="18">FALSE<pos:position pos:line="14" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt> <comment type="block" pos:line="14" pos:column="25">/* if a dNSName field exists in the cert */</comment>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">bool<pos:position pos:line="15" pos:column="7"/></name></type> <name pos:line="15" pos:column="8">iPAddress<pos:position pos:line="15" pos:column="17"/></name> <init pos:line="15" pos:column="18">= <expr><name pos:line="15" pos:column="20">FALSE<pos:position pos:line="15" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="26"/></decl_stmt> <comment type="block" pos:line="15" pos:column="27">/* if a iPAddress field exists in the cert */</comment>
  <decl_stmt><decl><type><specifier pos:line="16" pos:column="3">const<pos:position pos:line="16" pos:column="8"/></specifier> <name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier> <specifier pos:line="16" pos:column="16">const<pos:position pos:line="16" pos:column="21"/></specifier></type> <name pos:line="16" pos:column="22">hostname<pos:position pos:line="16" pos:column="30"/></name> <init pos:line="16" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="16" pos:column="33">SSL_IS_PROXY<pos:position pos:line="16" pos:column="45"/></name><argument_list pos:line="16" pos:column="45">()<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="16" pos:column="49"/></condition><then pos:line="16" pos:column="49"> <expr><name><name pos:line="16" pos:column="50">conn<pos:position pos:line="16" pos:column="54"/></name><operator pos:line="16" pos:column="54">-&gt;<pos:position pos:line="16" pos:column="59"/></operator><name pos:line="16" pos:column="56">http_proxy<pos:position pos:line="16" pos:column="66"/></name><operator pos:line="16" pos:column="66">.<pos:position pos:line="16" pos:column="67"/></operator><name pos:line="16" pos:column="67">host<pos:position pos:line="16" pos:column="71"/></name><operator pos:line="16" pos:column="71">.<pos:position pos:line="16" pos:column="72"/></operator><name pos:line="16" pos:column="72">name<pos:position pos:line="16" pos:column="76"/></name></name></expr> <pos:position pos:line="16" pos:column="77"/></then><else pos:line="16" pos:column="77">:
    <expr><name><name pos:line="17" pos:column="5">conn<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">-&gt;<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="11">host<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">.<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="16">name<pos:position pos:line="17" pos:column="20"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="17" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="18" pos:column="3">const<pos:position pos:line="18" pos:column="8"/></specifier> <name pos:line="18" pos:column="9">char<pos:position pos:line="18" pos:column="13"/></name> <modifier pos:line="18" pos:column="14">*<pos:position pos:line="18" pos:column="15"/></modifier> <specifier pos:line="18" pos:column="16">const<pos:position pos:line="18" pos:column="21"/></specifier></type> <name pos:line="18" pos:column="22">dispname<pos:position pos:line="18" pos:column="30"/></name> <init pos:line="18" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="18" pos:column="33">SSL_IS_PROXY<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">()<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="18" pos:column="49"/></condition><then pos:line="18" pos:column="49">
    <expr><name><name pos:line="19" pos:column="5">conn<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">http_proxy<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">host<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">.<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">dispname<pos:position pos:line="19" pos:column="35"/></name></name></expr> <pos:position pos:line="19" pos:column="36"/></then><else pos:line="19" pos:column="36">: <expr><name><name pos:line="19" pos:column="38">conn<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">host<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">.<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">dispname<pos:position pos:line="19" pos:column="57"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="19" pos:column="58"/></decl_stmt>

<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">ENABLE_IPV6<pos:position pos:line="21" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name><name pos:line="22" pos:column="6">conn<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">bits<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">.<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">ipv6_ip<pos:position pos:line="22" pos:column="24"/></name></name> <operator pos:line="22" pos:column="25">&amp;&amp;<pos:position pos:line="22" pos:column="35"/></operator>
     <call><name pos:line="23" pos:column="6">Curl_inet_pton<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">AF_INET6<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="31">hostname<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="41">&amp;<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="42">addr<pos:position pos:line="23" pos:column="46"/></name></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48"> <block pos:line="23" pos:column="49">{
    <expr_stmt><expr><name pos:line="24" pos:column="5">target<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <name pos:line="24" pos:column="14">GEN_IPADD<pos:position pos:line="24" pos:column="23"/></name></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">addrlen<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <sizeof pos:line="25" pos:column="15">sizeof<argument_list pos:line="25" pos:column="21">(<argument><expr pos:line="25" pos:column="22">struct <name pos:line="25" pos:column="29">in6_addr<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then>
  <elseif pos:line="27" pos:column="3">else
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><call><name pos:line="29" pos:column="8">Curl_inet_pton<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">AF_INET<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="32">hostname<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="42">&amp;<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="43">addr<pos:position pos:line="29" pos:column="47"/></name></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="49"/></condition><then pos:line="29" pos:column="49"> <block pos:line="29" pos:column="50">{
      <expr_stmt><expr><name pos:line="30" pos:column="7">target<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <name pos:line="30" pos:column="16">GEN_IPADD<pos:position pos:line="30" pos:column="25"/></name></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">addrlen<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">=<pos:position pos:line="31" pos:column="16"/></operator> <sizeof pos:line="31" pos:column="17">sizeof<argument_list pos:line="31" pos:column="23">(<argument><expr pos:line="31" pos:column="24">struct <name pos:line="31" pos:column="31">in_addr<pos:position pos:line="31" pos:column="38"/></name></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></sizeof></expr>;<pos:position pos:line="31" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if></elseif></if>

  <comment type="block" pos:line="34" pos:column="3">/* get a "list" of alternative names */</comment>
  <expr_stmt><expr><name pos:line="35" pos:column="3">altnames<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <call><name pos:line="35" pos:column="14">X509_get_ext_d2i<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">(<argument><expr><name pos:line="35" pos:column="31">server_cert<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">NID_subject_alt_name<pos:position pos:line="35" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="66">NULL<pos:position pos:line="35" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="72">NULL<pos:position pos:line="35" pos:column="76"/></name></expr></argument>)<pos:position pos:line="35" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="78"/></expr_stmt>

  <if pos:line="37" pos:column="3">if<condition pos:line="37" pos:column="5">(<expr><name pos:line="37" pos:column="6">altnames<pos:position pos:line="37" pos:column="14"/></name></expr>)<pos:position pos:line="37" pos:column="15"/></condition><then pos:line="37" pos:column="15"> <block pos:line="37" pos:column="16">{
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">int<pos:position pos:line="38" pos:column="8"/></name></type> <name pos:line="38" pos:column="9">numalts<pos:position pos:line="38" pos:column="16"/></name></decl>;<pos:position pos:line="38" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="39" pos:column="5">int<pos:position pos:line="39" pos:column="8"/></name></type> <name pos:line="39" pos:column="9">i<pos:position pos:line="39" pos:column="10"/></name></decl>;<pos:position pos:line="39" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="40" pos:column="5">bool<pos:position pos:line="40" pos:column="9"/></name></type> <name pos:line="40" pos:column="10">dnsmatched<pos:position pos:line="40" pos:column="20"/></name> <init pos:line="40" pos:column="21">= <expr><name pos:line="40" pos:column="23">FALSE<pos:position pos:line="40" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">bool<pos:position pos:line="41" pos:column="9"/></name></type> <name pos:line="41" pos:column="10">ipmatched<pos:position pos:line="41" pos:column="19"/></name> <init pos:line="41" pos:column="20">= <expr><name pos:line="41" pos:column="22">FALSE<pos:position pos:line="41" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="28"/></decl_stmt>

    <comment type="block" pos:line="43" pos:column="5">/* get amount of alternatives, RFC2459 claims there MUST be at least
       one, but we don't depend on it... */</comment>
    <expr_stmt><expr><name pos:line="45" pos:column="5">numalts<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">sk_GENERAL_NAME_num<pos:position pos:line="45" pos:column="34"/></name><argument_list pos:line="45" pos:column="34">(<argument><expr><name pos:line="45" pos:column="35">altnames<pos:position pos:line="45" pos:column="43"/></name></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>

    <comment type="block" pos:line="47" pos:column="5">/* loop through all alternatives - until a dnsmatch */</comment>
    <for pos:line="48" pos:column="5">for<control pos:line="48" pos:column="8">(<init><expr><name pos:line="48" pos:column="9">i<pos:position pos:line="48" pos:column="10"/></name> <operator pos:line="48" pos:column="11">=<pos:position pos:line="48" pos:column="12"/></operator> <literal type="number" pos:line="48" pos:column="13">0<pos:position pos:line="48" pos:column="14"/></literal></expr>;<pos:position pos:line="48" pos:column="15"/></init> <condition><expr><operator pos:line="48" pos:column="16">(<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="17">i<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">&lt;<pos:position pos:line="48" pos:column="23"/></operator> <name pos:line="48" pos:column="21">numalts<pos:position pos:line="48" pos:column="28"/></name><operator pos:line="48" pos:column="28">)<pos:position pos:line="48" pos:column="29"/></operator> <operator pos:line="48" pos:column="30">&amp;&amp;<pos:position pos:line="48" pos:column="40"/></operator> <operator pos:line="48" pos:column="33">!<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="34">dnsmatched<pos:position pos:line="48" pos:column="44"/></name></expr>;<pos:position pos:line="48" pos:column="45"/></condition> <incr><expr><name pos:line="48" pos:column="46">i<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">++<pos:position pos:line="48" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="48" pos:column="50"/></control> <block pos:line="48" pos:column="51">{
      <comment type="block" pos:line="49" pos:column="7">/* get a handle to alternative name number i */</comment>
      <decl_stmt><decl><type><specifier pos:line="50" pos:column="7">const<pos:position pos:line="50" pos:column="12"/></specifier> <name pos:line="50" pos:column="13">GENERAL_NAME<pos:position pos:line="50" pos:column="25"/></name> <modifier pos:line="50" pos:column="26">*<pos:position pos:line="50" pos:column="27"/></modifier></type><name pos:line="50" pos:column="27">check<pos:position pos:line="50" pos:column="32"/></name> <init pos:line="50" pos:column="33">= <expr><call><name pos:line="50" pos:column="35">sk_GENERAL_NAME_value<pos:position pos:line="50" pos:column="56"/></name><argument_list pos:line="50" pos:column="56">(<argument><expr><name pos:line="50" pos:column="57">altnames<pos:position pos:line="50" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="67">i<pos:position pos:line="50" pos:column="68"/></name></expr></argument>)<pos:position pos:line="50" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="70"/></decl_stmt>

      <if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><name><name pos:line="52" pos:column="10">check<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">-&gt;<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="17">type<pos:position pos:line="52" pos:column="21"/></name></name> <operator pos:line="52" pos:column="22">==<pos:position pos:line="52" pos:column="24"/></operator> <name pos:line="52" pos:column="25">GEN_DNS<pos:position pos:line="52" pos:column="32"/></name></expr>)<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="9">dNSName<pos:position pos:line="53" pos:column="16"/></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">TRUE<pos:position pos:line="53" pos:column="23"/></name></expr>;<pos:position pos:line="53" pos:column="24"/></expr_stmt></block></then>
      <elseif pos:line="54" pos:column="7">else <if pos:line="54" pos:column="12">if<condition pos:line="54" pos:column="14">(<expr><name><name pos:line="54" pos:column="15">check<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">-&gt;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="22">type<pos:position pos:line="54" pos:column="26"/></name></name> <operator pos:line="54" pos:column="27">==<pos:position pos:line="54" pos:column="29"/></operator> <name pos:line="54" pos:column="30">GEN_IPADD<pos:position pos:line="54" pos:column="39"/></name></expr>)<pos:position pos:line="54" pos:column="40"/></condition><then pos:line="54" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="9">iPAddress<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator> <name pos:line="55" pos:column="21">TRUE<pos:position pos:line="55" pos:column="25"/></name></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt></block></then></if></elseif></if>

      <comment type="block" pos:line="57" pos:column="7">/* only check alternatives of the same type the target is */</comment>
      <if pos:line="58" pos:column="7">if<condition pos:line="58" pos:column="9">(<expr><name><name pos:line="58" pos:column="10">check<pos:position pos:line="58" pos:column="15"/></name><operator pos:line="58" pos:column="15">-&gt;<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="17">type<pos:position pos:line="58" pos:column="21"/></name></name> <operator pos:line="58" pos:column="22">==<pos:position pos:line="58" pos:column="24"/></operator> <name pos:line="58" pos:column="25">target<pos:position pos:line="58" pos:column="31"/></name></expr>)<pos:position pos:line="58" pos:column="32"/></condition><then pos:line="58" pos:column="32"> <block pos:line="58" pos:column="33">{
        <comment type="block" pos:line="59" pos:column="9">/* get data and length */</comment>
        <decl_stmt><decl><type><specifier pos:line="60" pos:column="9">const<pos:position pos:line="60" pos:column="14"/></specifier> <name pos:line="60" pos:column="15">char<pos:position pos:line="60" pos:column="19"/></name> <modifier pos:line="60" pos:column="20">*<pos:position pos:line="60" pos:column="21"/></modifier></type><name pos:line="60" pos:column="21">altptr<pos:position pos:line="60" pos:column="27"/></name> <init pos:line="60" pos:column="28">= <expr><operator pos:line="60" pos:column="30">(<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="31">char<pos:position pos:line="60" pos:column="35"/></name> <operator pos:line="60" pos:column="36">*<pos:position pos:line="60" pos:column="37"/></operator><operator pos:line="60" pos:column="37">)<pos:position pos:line="60" pos:column="38"/></operator><call><name pos:line="60" pos:column="38">ASN1_STRING_get0_data<pos:position pos:line="60" pos:column="59"/></name><argument_list pos:line="60" pos:column="59">(<argument><expr><name><name pos:line="60" pos:column="60">check<pos:position pos:line="60" pos:column="65"/></name><operator pos:line="60" pos:column="65">-&gt;<pos:position pos:line="60" pos:column="70"/></operator><name pos:line="60" pos:column="67">d<pos:position pos:line="60" pos:column="68"/></name><operator pos:line="60" pos:column="68">.<pos:position pos:line="60" pos:column="69"/></operator><name pos:line="60" pos:column="69">ia5<pos:position pos:line="60" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="74"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="61" pos:column="9">size_t<pos:position pos:line="61" pos:column="15"/></name></type> <name pos:line="61" pos:column="16">altlen<pos:position pos:line="61" pos:column="22"/></name> <init pos:line="61" pos:column="23">= <expr><operator pos:line="61" pos:column="25">(<pos:position pos:line="61" pos:column="26"/></operator><name pos:line="61" pos:column="26">size_t<pos:position pos:line="61" pos:column="32"/></name><operator pos:line="61" pos:column="32">)<pos:position pos:line="61" pos:column="33"/></operator> <call><name pos:line="61" pos:column="34">ASN1_STRING_length<pos:position pos:line="61" pos:column="52"/></name><argument_list pos:line="61" pos:column="52">(<argument><expr><name><name pos:line="61" pos:column="53">check<pos:position pos:line="61" pos:column="58"/></name><operator pos:line="61" pos:column="58">-&gt;<pos:position pos:line="61" pos:column="63"/></operator><name pos:line="61" pos:column="60">d<pos:position pos:line="61" pos:column="61"/></name><operator pos:line="61" pos:column="61">.<pos:position pos:line="61" pos:column="62"/></operator><name pos:line="61" pos:column="62">ia5<pos:position pos:line="61" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="61" pos:column="67"/></decl_stmt>

        <switch pos:line="63" pos:column="9">switch<condition pos:line="63" pos:column="15">(<expr><name pos:line="63" pos:column="16">target<pos:position pos:line="63" pos:column="22"/></name></expr>)<pos:position pos:line="63" pos:column="23"/></condition> <block pos:line="63" pos:column="24">{
        <case pos:line="64" pos:column="9">case <expr><name pos:line="64" pos:column="14">GEN_DNS<pos:position pos:line="64" pos:column="21"/></name></expr>:<pos:position pos:line="64" pos:column="22"/></case> <comment type="block" pos:line="64" pos:column="23">/* name/pattern comparison */</comment>
          <comment type="block" pos:line="65" pos:column="11">/* The OpenSSL man page explicitly says: "In general it cannot be
             assumed that the data returned by ASN1_STRING_data() is null
             terminated or does not contain embedded nulls." But also that
             "The actual format of the data will depend on the actual string
             type itself: for example for and IA5String the data will be ASCII"

             Gisle researched the OpenSSL sources:
             "I checked the 0.9.6 and 0.9.8 sources before my patch and
             it always 0-terminates an IA5String."
          */</comment>
          <if pos:line="75" pos:column="11">if<condition pos:line="75" pos:column="13">(<expr><operator pos:line="75" pos:column="14">(<pos:position pos:line="75" pos:column="15"/></operator><name pos:line="75" pos:column="15">altlen<pos:position pos:line="75" pos:column="21"/></name> <operator pos:line="75" pos:column="22">==<pos:position pos:line="75" pos:column="24"/></operator> <call><name pos:line="75" pos:column="25">strlen<pos:position pos:line="75" pos:column="31"/></name><argument_list pos:line="75" pos:column="31">(<argument><expr><name pos:line="75" pos:column="32">altptr<pos:position pos:line="75" pos:column="38"/></name></expr></argument>)<pos:position pos:line="75" pos:column="39"/></argument_list></call><operator pos:line="75" pos:column="39">)<pos:position pos:line="75" pos:column="40"/></operator> <operator pos:line="75" pos:column="41">&amp;&amp;<pos:position pos:line="75" pos:column="51"/></operator>
             <comment type="block" pos:line="76" pos:column="14">/* if this isn't true, there was an embedded zero in the name
                string and we cannot match it. */</comment>
             <call><name pos:line="78" pos:column="14">Curl_cert_hostcheck<pos:position pos:line="78" pos:column="33"/></name><argument_list pos:line="78" pos:column="33">(<argument><expr><name pos:line="78" pos:column="34">altptr<pos:position pos:line="78" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="42">hostname<pos:position pos:line="78" pos:column="50"/></name></expr></argument>)<pos:position pos:line="78" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="52"/></condition><then pos:line="78" pos:column="52"> <block pos:line="78" pos:column="53">{
            <expr_stmt><expr><name pos:line="79" pos:column="13">dnsmatched<pos:position pos:line="79" pos:column="23"/></name> <operator pos:line="79" pos:column="24">=<pos:position pos:line="79" pos:column="25"/></operator> <name pos:line="79" pos:column="26">TRUE<pos:position pos:line="79" pos:column="30"/></name></expr>;<pos:position pos:line="79" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">infof<pos:position pos:line="80" pos:column="18"/></name><argument_list pos:line="80" pos:column="18">(<argument><expr><name pos:line="80" pos:column="19">data<pos:position pos:line="80" pos:column="23"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="81" pos:column="19">" subjectAltName: host \"%s\" matched cert's \"%s\"\n"<pos:position pos:line="81" pos:column="73"/></literal></expr></argument>,
                  <argument><expr><name pos:line="82" pos:column="19">dispname<pos:position pos:line="82" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="29">altptr<pos:position pos:line="82" pos:column="35"/></name></expr></argument>)<pos:position pos:line="82" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="37"/></expr_stmt>
          }<pos:position pos:line="83" pos:column="12"/></block></then></if>
          <break pos:line="84" pos:column="11">break;<pos:position pos:line="84" pos:column="17"/></break>

        <case pos:line="86" pos:column="9">case <expr><name pos:line="86" pos:column="14">GEN_IPADD<pos:position pos:line="86" pos:column="23"/></name></expr>:<pos:position pos:line="86" pos:column="24"/></case> <comment type="block" pos:line="86" pos:column="25">/* IP address comparison */</comment>
          <comment type="block" pos:line="87" pos:column="11">/* compare alternative IP address if the data chunk is the same size
             our server IP address is */</comment>
          <if pos:line="89" pos:column="11">if<condition pos:line="89" pos:column="13">(<expr><operator pos:line="89" pos:column="14">(<pos:position pos:line="89" pos:column="15"/></operator><name pos:line="89" pos:column="15">altlen<pos:position pos:line="89" pos:column="21"/></name> <operator pos:line="89" pos:column="22">==<pos:position pos:line="89" pos:column="24"/></operator> <name pos:line="89" pos:column="25">addrlen<pos:position pos:line="89" pos:column="32"/></name><operator pos:line="89" pos:column="32">)<pos:position pos:line="89" pos:column="33"/></operator> <operator pos:line="89" pos:column="34">&amp;&amp;<pos:position pos:line="89" pos:column="44"/></operator> <operator pos:line="89" pos:column="37">!<pos:position pos:line="89" pos:column="38"/></operator><call><name pos:line="89" pos:column="38">memcmp<pos:position pos:line="89" pos:column="44"/></name><argument_list pos:line="89" pos:column="44">(<argument><expr><name pos:line="89" pos:column="45">altptr<pos:position pos:line="89" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="53">&amp;<pos:position pos:line="89" pos:column="58"/></operator><name pos:line="89" pos:column="54">addr<pos:position pos:line="89" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="60">altlen<pos:position pos:line="89" pos:column="66"/></name></expr></argument>)<pos:position pos:line="89" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="68"/></condition><then pos:line="89" pos:column="68"> <block pos:line="89" pos:column="69">{
            <expr_stmt><expr><name pos:line="90" pos:column="13">ipmatched<pos:position pos:line="90" pos:column="22"/></name> <operator pos:line="90" pos:column="23">=<pos:position pos:line="90" pos:column="24"/></operator> <name pos:line="90" pos:column="25">TRUE<pos:position pos:line="90" pos:column="29"/></name></expr>;<pos:position pos:line="90" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">infof<pos:position pos:line="91" pos:column="18"/></name><argument_list pos:line="91" pos:column="18">(<argument><expr><name pos:line="91" pos:column="19">data<pos:position pos:line="91" pos:column="23"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="92" pos:column="19">" subjectAltName: host \"%s\" matched cert's IP address!\n"<pos:position pos:line="92" pos:column="78"/></literal></expr></argument>,
                  <argument><expr><name pos:line="93" pos:column="19">dispname<pos:position pos:line="93" pos:column="27"/></name></expr></argument>)<pos:position pos:line="93" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="29"/></expr_stmt>
          }<pos:position pos:line="94" pos:column="12"/></block></then></if>
          <break pos:line="95" pos:column="11">break;<pos:position pos:line="95" pos:column="17"/></break>
        }<pos:position pos:line="96" pos:column="10"/></block></switch>
      }<pos:position pos:line="97" pos:column="8"/></block></then></if>
    }<pos:position pos:line="98" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">GENERAL_NAMES_free<pos:position pos:line="99" pos:column="23"/></name><argument_list pos:line="99" pos:column="23">(<argument><expr><name pos:line="99" pos:column="24">altnames<pos:position pos:line="99" pos:column="32"/></name></expr></argument>)<pos:position pos:line="99" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="34"/></expr_stmt>

    <if pos:line="101" pos:column="5">if<condition pos:line="101" pos:column="7">(<expr><name pos:line="101" pos:column="8">dnsmatched<pos:position pos:line="101" pos:column="18"/></name> <operator pos:line="101" pos:column="19">||<pos:position pos:line="101" pos:column="21"/></operator> <name pos:line="101" pos:column="22">ipmatched<pos:position pos:line="101" pos:column="31"/></name></expr>)<pos:position pos:line="101" pos:column="32"/></condition><then pos:line="101" pos:column="32">
      <block type="pseudo"><expr_stmt><expr><name pos:line="102" pos:column="7">matched<pos:position pos:line="102" pos:column="14"/></name> <operator pos:line="102" pos:column="15">=<pos:position pos:line="102" pos:column="16"/></operator> <name pos:line="102" pos:column="17">TRUE<pos:position pos:line="102" pos:column="21"/></name></expr>;<pos:position pos:line="102" pos:column="22"/></expr_stmt></block></then></if>
  }<pos:position pos:line="103" pos:column="4"/></block></then></if>

  <if pos:line="105" pos:column="3">if<condition pos:line="105" pos:column="5">(<expr><name pos:line="105" pos:column="6">matched<pos:position pos:line="105" pos:column="13"/></name></expr>)<pos:position pos:line="105" pos:column="14"/></condition><then pos:line="105" pos:column="14">
    <comment type="block" pos:line="106" pos:column="5">/* an alternative name matched */</comment>
    <block type="pseudo"><empty_stmt pos:line="107" pos:column="5">;<pos:position pos:line="107" pos:column="6"/></empty_stmt></block></then>
  <elseif pos:line="108" pos:column="3">else <if pos:line="108" pos:column="8">if<condition pos:line="108" pos:column="10">(<expr><name pos:line="108" pos:column="11">dNSName<pos:position pos:line="108" pos:column="18"/></name> <operator pos:line="108" pos:column="19">||<pos:position pos:line="108" pos:column="21"/></operator> <name pos:line="108" pos:column="22">iPAddress<pos:position pos:line="108" pos:column="31"/></name></expr>)<pos:position pos:line="108" pos:column="32"/></condition><then pos:line="108" pos:column="32"> <block pos:line="108" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="109" pos:column="5">infof<pos:position pos:line="109" pos:column="10"/></name><argument_list pos:line="109" pos:column="10">(<argument><expr><name pos:line="109" pos:column="11">data<pos:position pos:line="109" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="17">" subjectAltName does not match %s\n"<pos:position pos:line="109" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="56">dispname<pos:position pos:line="109" pos:column="64"/></name></expr></argument>)<pos:position pos:line="109" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="110" pos:column="5">failf<pos:position pos:line="110" pos:column="10"/></name><argument_list pos:line="110" pos:column="10">(<argument><expr><name pos:line="110" pos:column="11">data<pos:position pos:line="110" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="17">"SSL: no alternative certificate subject name matches "<pos:position pos:line="110" pos:column="72"/></literal>
          <literal type="string" pos:line="111" pos:column="11">"target host name '%s'"<pos:position pos:line="111" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="36">dispname<pos:position pos:line="111" pos:column="44"/></name></expr></argument>)<pos:position pos:line="111" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name pos:line="112" pos:column="5">result<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">=<pos:position pos:line="112" pos:column="13"/></operator> <name pos:line="112" pos:column="14">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="112" pos:column="44"/></name></expr>;<pos:position pos:line="112" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="113" pos:column="4"/></block></then></if></elseif>
  <else pos:line="114" pos:column="3">else <block pos:line="114" pos:column="8">{
    <comment type="block" pos:line="115" pos:column="5">/* we have to look to the last occurrence of a commonName in the
       distinguished one to get the most significant one. */</comment>
    <decl_stmt><decl><type><name pos:line="117" pos:column="5">int<pos:position pos:line="117" pos:column="8"/></name></type> <name pos:line="117" pos:column="9">j<pos:position pos:line="117" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="117" pos:column="12">i<pos:position pos:line="117" pos:column="13"/></name> <init pos:line="117" pos:column="14">= <expr><operator pos:line="117" pos:column="16">-<pos:position pos:line="117" pos:column="17"/></operator><literal type="number" pos:line="117" pos:column="17">1<pos:position pos:line="117" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="117" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="119" pos:column="5">/* The following is done because of a bug in 0.9.6b */</comment>

    <decl_stmt><decl><type><name pos:line="121" pos:column="5">unsigned<pos:position pos:line="121" pos:column="13"/></name> <name pos:line="121" pos:column="14">char<pos:position pos:line="121" pos:column="18"/></name> <modifier pos:line="121" pos:column="19">*<pos:position pos:line="121" pos:column="20"/></modifier></type><name pos:line="121" pos:column="20">nulstr<pos:position pos:line="121" pos:column="26"/></name> <init pos:line="121" pos:column="27">= <expr><operator pos:line="121" pos:column="29">(<pos:position pos:line="121" pos:column="30"/></operator><name pos:line="121" pos:column="30">unsigned<pos:position pos:line="121" pos:column="38"/></name> <name pos:line="121" pos:column="39">char<pos:position pos:line="121" pos:column="43"/></name> <operator pos:line="121" pos:column="44">*<pos:position pos:line="121" pos:column="45"/></operator><operator pos:line="121" pos:column="45">)<pos:position pos:line="121" pos:column="46"/></operator><literal type="string" pos:line="121" pos:column="46">""<pos:position pos:line="121" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="121" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="122" pos:column="5">unsigned<pos:position pos:line="122" pos:column="13"/></name> <name pos:line="122" pos:column="14">char<pos:position pos:line="122" pos:column="18"/></name> <modifier pos:line="122" pos:column="19">*<pos:position pos:line="122" pos:column="20"/></modifier></type><name pos:line="122" pos:column="20">peer_CN<pos:position pos:line="122" pos:column="27"/></name> <init pos:line="122" pos:column="28">= <expr><name pos:line="122" pos:column="30">nulstr<pos:position pos:line="122" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="122" pos:column="37"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="124" pos:column="5">X509_NAME<pos:position pos:line="124" pos:column="14"/></name> <modifier pos:line="124" pos:column="15">*<pos:position pos:line="124" pos:column="16"/></modifier></type><name pos:line="124" pos:column="16">name<pos:position pos:line="124" pos:column="20"/></name> <init pos:line="124" pos:column="21">= <expr><call><name pos:line="124" pos:column="23">X509_get_subject_name<pos:position pos:line="124" pos:column="44"/></name><argument_list pos:line="124" pos:column="44">(<argument><expr><name pos:line="124" pos:column="45">server_cert<pos:position pos:line="124" pos:column="56"/></name></expr></argument>)<pos:position pos:line="124" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="124" pos:column="58"/></decl_stmt>
    <if pos:line="125" pos:column="5">if<condition pos:line="125" pos:column="7">(<expr><name pos:line="125" pos:column="8">name<pos:position pos:line="125" pos:column="12"/></name></expr>)<pos:position pos:line="125" pos:column="13"/></condition><then pos:line="125" pos:column="13">
      <block type="pseudo"><while pos:line="126" pos:column="7">while<condition pos:line="126" pos:column="12">(<expr><operator pos:line="126" pos:column="13">(<pos:position pos:line="126" pos:column="14"/></operator><name pos:line="126" pos:column="14">j<pos:position pos:line="126" pos:column="15"/></name> <operator pos:line="126" pos:column="16">=<pos:position pos:line="126" pos:column="17"/></operator> <call><name pos:line="126" pos:column="18">X509_NAME_get_index_by_NID<pos:position pos:line="126" pos:column="44"/></name><argument_list pos:line="126" pos:column="44">(<argument><expr><name pos:line="126" pos:column="45">name<pos:position pos:line="126" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="51">NID_commonName<pos:position pos:line="126" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="67">i<pos:position pos:line="126" pos:column="68"/></name></expr></argument>)<pos:position pos:line="126" pos:column="69"/></argument_list></call><operator pos:line="126" pos:column="69">)<pos:position pos:line="126" pos:column="70"/></operator> <operator pos:line="126" pos:column="71">&gt;=<pos:position pos:line="126" pos:column="76"/></operator> <literal type="number" pos:line="126" pos:column="74">0<pos:position pos:line="126" pos:column="75"/></literal></expr>)<pos:position pos:line="126" pos:column="76"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="127" pos:column="9">i<pos:position pos:line="127" pos:column="10"/></name> <operator pos:line="127" pos:column="11">=<pos:position pos:line="127" pos:column="12"/></operator> <name pos:line="127" pos:column="13">j<pos:position pos:line="127" pos:column="14"/></name></expr>;<pos:position pos:line="127" pos:column="15"/></expr_stmt></block></while></block></then></if>

    <comment type="block" pos:line="129" pos:column="5">/* we have the name entry and we will now convert this to a string
       that we can use for comparison. Doing this we support BMPstring,
       UTF8 etc. */</comment>

    <if pos:line="133" pos:column="5">if<condition pos:line="133" pos:column="7">(<expr><name pos:line="133" pos:column="8">i<pos:position pos:line="133" pos:column="9"/></name> <operator pos:line="133" pos:column="10">&gt;=<pos:position pos:line="133" pos:column="15"/></operator> <literal type="number" pos:line="133" pos:column="13">0<pos:position pos:line="133" pos:column="14"/></literal></expr>)<pos:position pos:line="133" pos:column="15"/></condition><then pos:line="133" pos:column="15"> <block pos:line="133" pos:column="16">{
      <decl_stmt><decl><type><name pos:line="134" pos:column="7">ASN1_STRING<pos:position pos:line="134" pos:column="18"/></name> <modifier pos:line="134" pos:column="19">*<pos:position pos:line="134" pos:column="20"/></modifier></type><name pos:line="134" pos:column="20">tmp<pos:position pos:line="134" pos:column="23"/></name> <init pos:line="134" pos:column="24">=
        <expr><call><name pos:line="135" pos:column="9">X509_NAME_ENTRY_get_data<pos:position pos:line="135" pos:column="33"/></name><argument_list pos:line="135" pos:column="33">(<argument><expr><call><name pos:line="135" pos:column="34">X509_NAME_get_entry<pos:position pos:line="135" pos:column="53"/></name><argument_list pos:line="135" pos:column="53">(<argument><expr><name pos:line="135" pos:column="54">name<pos:position pos:line="135" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="60">i<pos:position pos:line="135" pos:column="61"/></name></expr></argument>)<pos:position pos:line="135" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="135" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="135" pos:column="64"/></decl_stmt>

      <comment type="block" pos:line="137" pos:column="7">/* In OpenSSL 0.9.7d and earlier, ASN1_STRING_to_UTF8 fails if the input
         is already UTF-8 encoded. We check for this case and copy the raw
         string manually to avoid the problem. This code can be made
         conditional in the future when OpenSSL has been fixed. Work-around
         brought by Alexis S. L. Carvalho. */</comment>
      <if pos:line="142" pos:column="7">if<condition pos:line="142" pos:column="9">(<expr><name pos:line="142" pos:column="10">tmp<pos:position pos:line="142" pos:column="13"/></name></expr>)<pos:position pos:line="142" pos:column="14"/></condition><then pos:line="142" pos:column="14"> <block pos:line="142" pos:column="15">{
        <if pos:line="143" pos:column="9">if<condition pos:line="143" pos:column="11">(<expr><call><name pos:line="143" pos:column="12">ASN1_STRING_type<pos:position pos:line="143" pos:column="28"/></name><argument_list pos:line="143" pos:column="28">(<argument><expr><name pos:line="143" pos:column="29">tmp<pos:position pos:line="143" pos:column="32"/></name></expr></argument>)<pos:position pos:line="143" pos:column="33"/></argument_list></call> <operator pos:line="143" pos:column="34">==<pos:position pos:line="143" pos:column="36"/></operator> <name pos:line="143" pos:column="37">V_ASN1_UTF8STRING<pos:position pos:line="143" pos:column="54"/></name></expr>)<pos:position pos:line="143" pos:column="55"/></condition><then pos:line="143" pos:column="55"> <block pos:line="143" pos:column="56">{
          <expr_stmt><expr><name pos:line="144" pos:column="11">j<pos:position pos:line="144" pos:column="12"/></name> <operator pos:line="144" pos:column="13">=<pos:position pos:line="144" pos:column="14"/></operator> <call><name pos:line="144" pos:column="15">ASN1_STRING_length<pos:position pos:line="144" pos:column="33"/></name><argument_list pos:line="144" pos:column="33">(<argument><expr><name pos:line="144" pos:column="34">tmp<pos:position pos:line="144" pos:column="37"/></name></expr></argument>)<pos:position pos:line="144" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="39"/></expr_stmt>
          <if pos:line="145" pos:column="11">if<condition pos:line="145" pos:column="13">(<expr><name pos:line="145" pos:column="14">j<pos:position pos:line="145" pos:column="15"/></name> <operator pos:line="145" pos:column="16">&gt;=<pos:position pos:line="145" pos:column="21"/></operator> <literal type="number" pos:line="145" pos:column="19">0<pos:position pos:line="145" pos:column="20"/></literal></expr>)<pos:position pos:line="145" pos:column="21"/></condition><then pos:line="145" pos:column="21"> <block pos:line="145" pos:column="22">{
            <expr_stmt><expr><name pos:line="146" pos:column="13">peer_CN<pos:position pos:line="146" pos:column="20"/></name> <operator pos:line="146" pos:column="21">=<pos:position pos:line="146" pos:column="22"/></operator> <call><name pos:line="146" pos:column="23">OPENSSL_malloc<pos:position pos:line="146" pos:column="37"/></name><argument_list pos:line="146" pos:column="37">(<argument><expr><name pos:line="146" pos:column="38">j<pos:position pos:line="146" pos:column="39"/></name> <operator pos:line="146" pos:column="40">+<pos:position pos:line="146" pos:column="41"/></operator> <literal type="number" pos:line="146" pos:column="42">1<pos:position pos:line="146" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="45"/></expr_stmt>
            <if pos:line="147" pos:column="13">if<condition pos:line="147" pos:column="15">(<expr><name pos:line="147" pos:column="16">peer_CN<pos:position pos:line="147" pos:column="23"/></name></expr>)<pos:position pos:line="147" pos:column="24"/></condition><then pos:line="147" pos:column="24"> <block pos:line="147" pos:column="25">{
              <expr_stmt><expr><call><name pos:line="148" pos:column="15">memcpy<pos:position pos:line="148" pos:column="21"/></name><argument_list pos:line="148" pos:column="21">(<argument><expr><name pos:line="148" pos:column="22">peer_CN<pos:position pos:line="148" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="148" pos:column="31">ASN1_STRING_get0_data<pos:position pos:line="148" pos:column="52"/></name><argument_list pos:line="148" pos:column="52">(<argument><expr><name pos:line="148" pos:column="53">tmp<pos:position pos:line="148" pos:column="56"/></name></expr></argument>)<pos:position pos:line="148" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="148" pos:column="59">j<pos:position pos:line="148" pos:column="60"/></name></expr></argument>)<pos:position pos:line="148" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="62"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="149" pos:column="15">peer_CN<pos:position pos:line="149" pos:column="22"/></name><index pos:line="149" pos:column="22">[<expr><name pos:line="149" pos:column="23">j<pos:position pos:line="149" pos:column="24"/></name></expr>]<pos:position pos:line="149" pos:column="25"/></index></name> <operator pos:line="149" pos:column="26">=<pos:position pos:line="149" pos:column="27"/></operator> <literal type="char" pos:line="149" pos:column="28">'\0'<pos:position pos:line="149" pos:column="32"/></literal></expr>;<pos:position pos:line="149" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="150" pos:column="14"/></block></then></if>
          }<pos:position pos:line="151" pos:column="12"/></block></then></if>
        }<pos:position pos:line="152" pos:column="10"/></block></then>
        <else pos:line="153" pos:column="9">else <comment type="block" pos:line="153" pos:column="14">/* not a UTF8 name */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="154" pos:column="11">j<pos:position pos:line="154" pos:column="12"/></name> <operator pos:line="154" pos:column="13">=<pos:position pos:line="154" pos:column="14"/></operator> <call><name pos:line="154" pos:column="15">ASN1_STRING_to_UTF8<pos:position pos:line="154" pos:column="34"/></name><argument_list pos:line="154" pos:column="34">(<argument><expr><operator pos:line="154" pos:column="35">&amp;<pos:position pos:line="154" pos:column="40"/></operator><name pos:line="154" pos:column="36">peer_CN<pos:position pos:line="154" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="45">tmp<pos:position pos:line="154" pos:column="48"/></name></expr></argument>)<pos:position pos:line="154" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="50"/></expr_stmt></block></else></if>

        <if pos:line="156" pos:column="9">if<condition pos:line="156" pos:column="11">(<expr><name pos:line="156" pos:column="12">peer_CN<pos:position pos:line="156" pos:column="19"/></name> <operator pos:line="156" pos:column="20">&amp;&amp;<pos:position pos:line="156" pos:column="30"/></operator> <operator pos:line="156" pos:column="23">(<pos:position pos:line="156" pos:column="24"/></operator><call><name pos:line="156" pos:column="24">curlx_uztosi<pos:position pos:line="156" pos:column="36"/></name><argument_list pos:line="156" pos:column="36">(<argument><expr><call><name pos:line="156" pos:column="37">strlen<pos:position pos:line="156" pos:column="43"/></name><argument_list pos:line="156" pos:column="43">(<argument><expr><operator pos:line="156" pos:column="44">(<pos:position pos:line="156" pos:column="45"/></operator><name pos:line="156" pos:column="45">char<pos:position pos:line="156" pos:column="49"/></name> <operator pos:line="156" pos:column="50">*<pos:position pos:line="156" pos:column="51"/></operator><operator pos:line="156" pos:column="51">)<pos:position pos:line="156" pos:column="52"/></operator><name pos:line="156" pos:column="52">peer_CN<pos:position pos:line="156" pos:column="59"/></name></expr></argument>)<pos:position pos:line="156" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="156" pos:column="61"/></argument_list></call> <operator pos:line="156" pos:column="62">!=<pos:position pos:line="156" pos:column="64"/></operator> <name pos:line="156" pos:column="65">j<pos:position pos:line="156" pos:column="66"/></name><operator pos:line="156" pos:column="66">)<pos:position pos:line="156" pos:column="67"/></operator></expr>)<pos:position pos:line="156" pos:column="68"/></condition><then pos:line="156" pos:column="68"> <block pos:line="156" pos:column="69">{
          <comment type="block" pos:line="157" pos:column="11">/* there was a terminating zero before the end of string, this
             cannot match and we return failure! */</comment>
          <expr_stmt><expr><call><name pos:line="159" pos:column="11">failf<pos:position pos:line="159" pos:column="16"/></name><argument_list pos:line="159" pos:column="16">(<argument><expr><name pos:line="159" pos:column="17">data<pos:position pos:line="159" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="23">"SSL: illegal cert name field"<pos:position pos:line="159" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="55"/></expr_stmt>
          <expr_stmt><expr><name pos:line="160" pos:column="11">result<pos:position pos:line="160" pos:column="17"/></name> <operator pos:line="160" pos:column="18">=<pos:position pos:line="160" pos:column="19"/></operator> <name pos:line="160" pos:column="20">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="160" pos:column="50"/></name></expr>;<pos:position pos:line="160" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="161" pos:column="10"/></block></then></if>
      }<pos:position pos:line="162" pos:column="8"/></block></then></if>
    }<pos:position pos:line="163" pos:column="6"/></block></then></if>

    <if pos:line="165" pos:column="5">if<condition pos:line="165" pos:column="7">(<expr><name pos:line="165" pos:column="8">peer_CN<pos:position pos:line="165" pos:column="15"/></name> <operator pos:line="165" pos:column="16">==<pos:position pos:line="165" pos:column="18"/></operator> <name pos:line="165" pos:column="19">nulstr<pos:position pos:line="165" pos:column="25"/></name></expr>)<pos:position pos:line="165" pos:column="26"/></condition><then pos:line="165" pos:column="26">
       <block type="pseudo"><expr_stmt><expr><name pos:line="166" pos:column="8">peer_CN<pos:position pos:line="166" pos:column="15"/></name> <operator pos:line="166" pos:column="16">=<pos:position pos:line="166" pos:column="17"/></operator> <name pos:line="166" pos:column="18">NULL<pos:position pos:line="166" pos:column="22"/></name></expr>;<pos:position pos:line="166" pos:column="23"/></expr_stmt></block></then>
    <else pos:line="167" pos:column="5">else <block pos:line="167" pos:column="10">{
      <comment type="block" pos:line="168" pos:column="7">/* convert peer_CN from UTF8 */</comment>
      <decl_stmt><decl><type><name pos:line="169" pos:column="7">CURLcode<pos:position pos:line="169" pos:column="15"/></name></type> <name pos:line="169" pos:column="16">rc<pos:position pos:line="169" pos:column="18"/></name> <init pos:line="169" pos:column="19">= <expr><call><name pos:line="169" pos:column="21">Curl_convert_from_utf8<pos:position pos:line="169" pos:column="43"/></name><argument_list pos:line="169" pos:column="43">(<argument><expr><name pos:line="169" pos:column="44">data<pos:position pos:line="169" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="169" pos:column="50">(<pos:position pos:line="169" pos:column="51"/></operator><name pos:line="169" pos:column="51">char<pos:position pos:line="169" pos:column="55"/></name> <operator pos:line="169" pos:column="56">*<pos:position pos:line="169" pos:column="57"/></operator><operator pos:line="169" pos:column="57">)<pos:position pos:line="169" pos:column="58"/></operator><name pos:line="169" pos:column="58">peer_CN<pos:position pos:line="169" pos:column="65"/></name></expr></argument>,
                                           <argument><expr><call><name pos:line="170" pos:column="44">strlen<pos:position pos:line="170" pos:column="50"/></name><argument_list pos:line="170" pos:column="50">(<argument><expr><operator pos:line="170" pos:column="51">(<pos:position pos:line="170" pos:column="52"/></operator><name pos:line="170" pos:column="52">char<pos:position pos:line="170" pos:column="56"/></name> <operator pos:line="170" pos:column="57">*<pos:position pos:line="170" pos:column="58"/></operator><operator pos:line="170" pos:column="58">)<pos:position pos:line="170" pos:column="59"/></operator><name pos:line="170" pos:column="59">peer_CN<pos:position pos:line="170" pos:column="66"/></name></expr></argument>)<pos:position pos:line="170" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="170" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="170" pos:column="69"/></decl_stmt>
      <comment type="block" pos:line="171" pos:column="7">/* Curl_convert_from_utf8 calls failf if unsuccessful */</comment>
      <if pos:line="172" pos:column="7">if<condition pos:line="172" pos:column="9">(<expr><name pos:line="172" pos:column="10">rc<pos:position pos:line="172" pos:column="12"/></name></expr>)<pos:position pos:line="172" pos:column="13"/></condition><then pos:line="172" pos:column="13"> <block pos:line="172" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="173" pos:column="9">OPENSSL_free<pos:position pos:line="173" pos:column="21"/></name><argument_list pos:line="173" pos:column="21">(<argument><expr><name pos:line="173" pos:column="22">peer_CN<pos:position pos:line="173" pos:column="29"/></name></expr></argument>)<pos:position pos:line="173" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="31"/></expr_stmt>
        <return pos:line="174" pos:column="9">return <expr><name pos:line="174" pos:column="16">rc<pos:position pos:line="174" pos:column="18"/></name></expr>;<pos:position pos:line="174" pos:column="19"/></return>
      }<pos:position pos:line="175" pos:column="8"/></block></then></if>
    }<pos:position pos:line="176" pos:column="6"/></block></else></if>

    <if pos:line="178" pos:column="5">if<condition pos:line="178" pos:column="7">(<expr><name pos:line="178" pos:column="8">result<pos:position pos:line="178" pos:column="14"/></name></expr>)<pos:position pos:line="178" pos:column="15"/></condition><then pos:line="178" pos:column="15">
      <comment type="block" pos:line="179" pos:column="7">/* error already detected, pass through */</comment>
      <block type="pseudo"><empty_stmt pos:line="180" pos:column="7">;<pos:position pos:line="180" pos:column="8"/></empty_stmt></block></then>
    <elseif pos:line="181" pos:column="5">else <if pos:line="181" pos:column="10">if<condition pos:line="181" pos:column="12">(<expr><operator pos:line="181" pos:column="13">!<pos:position pos:line="181" pos:column="14"/></operator><name pos:line="181" pos:column="14">peer_CN<pos:position pos:line="181" pos:column="21"/></name></expr>)<pos:position pos:line="181" pos:column="22"/></condition><then pos:line="181" pos:column="22"> <block pos:line="181" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="182" pos:column="7">failf<pos:position pos:line="182" pos:column="12"/></name><argument_list pos:line="182" pos:column="12">(<argument><expr><name pos:line="182" pos:column="13">data<pos:position pos:line="182" pos:column="17"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="183" pos:column="13">"SSL: unable to obtain common name from peer certificate"<pos:position pos:line="183" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="183" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="72"/></expr_stmt>
      <expr_stmt><expr><name pos:line="184" pos:column="7">result<pos:position pos:line="184" pos:column="13"/></name> <operator pos:line="184" pos:column="14">=<pos:position pos:line="184" pos:column="15"/></operator> <name pos:line="184" pos:column="16">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="184" pos:column="46"/></name></expr>;<pos:position pos:line="184" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="185" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="186" pos:column="5">else <if pos:line="186" pos:column="10">if<condition pos:line="186" pos:column="12">(<expr><operator pos:line="186" pos:column="13">!<pos:position pos:line="186" pos:column="14"/></operator><call><name pos:line="186" pos:column="14">Curl_cert_hostcheck<pos:position pos:line="186" pos:column="33"/></name><argument_list pos:line="186" pos:column="33">(<argument><expr><operator pos:line="186" pos:column="34">(<pos:position pos:line="186" pos:column="35"/></operator><specifier pos:line="186" pos:column="35">const<pos:position pos:line="186" pos:column="40"/></specifier> <name pos:line="186" pos:column="41">char<pos:position pos:line="186" pos:column="45"/></name> <operator pos:line="186" pos:column="46">*<pos:position pos:line="186" pos:column="47"/></operator><operator pos:line="186" pos:column="47">)<pos:position pos:line="186" pos:column="48"/></operator><name pos:line="186" pos:column="48">peer_CN<pos:position pos:line="186" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="57">hostname<pos:position pos:line="186" pos:column="65"/></name></expr></argument>)<pos:position pos:line="186" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="186" pos:column="67"/></condition><then pos:line="186" pos:column="67"> <block pos:line="186" pos:column="68">{
      <expr_stmt><expr><call><name pos:line="187" pos:column="7">failf<pos:position pos:line="187" pos:column="12"/></name><argument_list pos:line="187" pos:column="12">(<argument><expr><name pos:line="187" pos:column="13">data<pos:position pos:line="187" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="187" pos:column="19">"SSL: certificate subject name '%s' does not match "<pos:position pos:line="187" pos:column="71"/></literal>
            <literal type="string" pos:line="188" pos:column="13">"target host name '%s'"<pos:position pos:line="188" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="188" pos:column="38">peer_CN<pos:position pos:line="188" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="47">dispname<pos:position pos:line="188" pos:column="55"/></name></expr></argument>)<pos:position pos:line="188" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><name pos:line="189" pos:column="7">result<pos:position pos:line="189" pos:column="13"/></name> <operator pos:line="189" pos:column="14">=<pos:position pos:line="189" pos:column="15"/></operator> <name pos:line="189" pos:column="16">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="189" pos:column="46"/></name></expr>;<pos:position pos:line="189" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="190" pos:column="6"/></block></then></if></elseif>
    <else pos:line="191" pos:column="5">else <block pos:line="191" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="192" pos:column="7">infof<pos:position pos:line="192" pos:column="12"/></name><argument_list pos:line="192" pos:column="12">(<argument><expr><name pos:line="192" pos:column="13">data<pos:position pos:line="192" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="192" pos:column="19">" common name: %s (matched)\n"<pos:position pos:line="192" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="51">peer_CN<pos:position pos:line="192" pos:column="58"/></name></expr></argument>)<pos:position pos:line="192" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="193" pos:column="6"/></block></else></if>
    <if pos:line="194" pos:column="5">if<condition pos:line="194" pos:column="7">(<expr><name pos:line="194" pos:column="8">peer_CN<pos:position pos:line="194" pos:column="15"/></name></expr>)<pos:position pos:line="194" pos:column="16"/></condition><then pos:line="194" pos:column="16">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="195" pos:column="7">OPENSSL_free<pos:position pos:line="195" pos:column="19"/></name><argument_list pos:line="195" pos:column="19">(<argument><expr><name pos:line="195" pos:column="20">peer_CN<pos:position pos:line="195" pos:column="27"/></name></expr></argument>)<pos:position pos:line="195" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="29"/></expr_stmt></block></then></if>
  }<pos:position pos:line="196" pos:column="4"/></block></else></if>

  <return pos:line="198" pos:column="3">return <expr><name pos:line="198" pos:column="10">result<pos:position pos:line="198" pos:column="16"/></name></expr>;<pos:position pos:line="198" pos:column="17"/></return>
}<pos:position pos:line="199" pos:column="2"/></block></function></unit>
