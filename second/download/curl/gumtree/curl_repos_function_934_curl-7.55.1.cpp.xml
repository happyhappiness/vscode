<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_934_curl-7.55.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">dumpeasysrc<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name><name pos:line="1" pos:column="18">struct<pos:position pos:line="1" pos:column="24"/></name> <name pos:line="1" pos:column="25">GlobalConfig<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">config<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">curl_slist<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">ptr<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">o<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><name><name pos:line="4" pos:column="13">config<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">-&gt;<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="21">libcurl<pos:position pos:line="4" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">FILE<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">out<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">fopened<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><name pos:line="7" pos:column="18">FALSE<pos:position pos:line="7" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><call><name pos:line="8" pos:column="6">strcmp<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">o<pos:position pos:line="8" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="16">"-"<pos:position pos:line="8" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21"> <block pos:line="8" pos:column="22">{
    <expr_stmt><expr><name pos:line="9" pos:column="5">out<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">fopen<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">o<pos:position pos:line="9" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="20">FOPEN_WRITETEXT<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">fopened<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="15">TRUE<pos:position pos:line="10" pos:column="19"/></name></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></then>
  <else pos:line="12" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="5">out<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <name pos:line="13" pos:column="11">stdout<pos:position pos:line="13" pos:column="17"/></name></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt></block></else></if>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">!<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">out<pos:position pos:line="14" pos:column="10"/></name></expr>)<pos:position pos:line="14" pos:column="11"/></condition><then pos:line="14" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="5">warnf<pos:position pos:line="15" pos:column="10"/></name><argument_list pos:line="15" pos:column="10">(<argument><expr><name pos:line="15" pos:column="11">config<pos:position pos:line="15" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="19">"Failed to open %s to write libcurl code!\n"<pos:position pos:line="15" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="65">o<pos:position pos:line="15" pos:column="66"/></name></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt></block></then>
  <else pos:line="16" pos:column="3">else <block pos:line="16" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">i<pos:position pos:line="17" pos:column="10"/></name></decl>;<pos:position pos:line="17" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="18" pos:column="5">const<pos:position pos:line="18" pos:column="10"/></specifier> <name pos:line="18" pos:column="11">char<pos:position pos:line="18" pos:column="15"/></name> <modifier pos:line="18" pos:column="16">*<pos:position pos:line="18" pos:column="17"/></modifier></type><name pos:line="18" pos:column="17">c<pos:position pos:line="18" pos:column="18"/></name></decl>;<pos:position pos:line="18" pos:column="19"/></decl_stmt>

    <for pos:line="20" pos:column="5">for<control pos:line="20" pos:column="8">(<init><expr><name pos:line="20" pos:column="9">i<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator><literal type="number" pos:line="20" pos:column="11">0<pos:position pos:line="20" pos:column="12"/></literal></expr>;<pos:position pos:line="20" pos:column="13"/></init> <condition><expr><operator pos:line="20" pos:column="14">(<pos:position pos:line="20" pos:column="15"/></operator><operator pos:line="20" pos:column="15">(<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">c<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <name><name pos:line="20" pos:column="20">srchead<pos:position pos:line="20" pos:column="27"/></name><index pos:line="20" pos:column="27">[<expr><name pos:line="20" pos:column="28">i<pos:position pos:line="20" pos:column="29"/></name></expr>]<pos:position pos:line="20" pos:column="30"/></index></name><operator pos:line="20" pos:column="30">)<pos:position pos:line="20" pos:column="31"/></operator> <operator pos:line="20" pos:column="32">!=<pos:position pos:line="20" pos:column="34"/></operator> <name pos:line="20" pos:column="35">NULL<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">)<pos:position pos:line="20" pos:column="40"/></operator></expr>;<pos:position pos:line="20" pos:column="41"/></condition> <incr><expr><name pos:line="20" pos:column="42">i<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">++<pos:position pos:line="20" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="46"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="7">fprintf<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><name pos:line="21" pos:column="15">out<pos:position pos:line="21" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="20">"%s\n"<pos:position pos:line="21" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">c<pos:position pos:line="21" pos:column="29"/></name></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt></block></for>

    <comment type="block" pos:line="23" pos:column="5">/* Declare variables used for complex setopt values */</comment>
    <if pos:line="24" pos:column="5">if<condition pos:line="24" pos:column="7">(<expr><name pos:line="24" pos:column="8">easysrc_decl<pos:position pos:line="24" pos:column="20"/></name></expr>)<pos:position pos:line="24" pos:column="21"/></condition><then pos:line="24" pos:column="21"> <block pos:line="24" pos:column="22">{
      <for pos:line="25" pos:column="7">for<control pos:line="25" pos:column="10">(<init><expr><name pos:line="25" pos:column="11">ptr<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator><name><name pos:line="25" pos:column="15">easysrc_decl<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">-&gt;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="29">first<pos:position pos:line="25" pos:column="34"/></name></name></expr>;<pos:position pos:line="25" pos:column="35"/></init> <condition><expr><name pos:line="25" pos:column="36">ptr<pos:position pos:line="25" pos:column="39"/></name></expr>;<pos:position pos:line="25" pos:column="40"/></condition> <incr><expr><name pos:line="25" pos:column="41">ptr<pos:position pos:line="25" pos:column="44"/></name> <operator pos:line="25" pos:column="45">=<pos:position pos:line="25" pos:column="46"/></operator> <name><name pos:line="25" pos:column="47">ptr<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">-&gt;<pos:position pos:line="25" pos:column="55"/></operator><name pos:line="25" pos:column="52">next<pos:position pos:line="25" pos:column="56"/></name></name></expr></incr>)<pos:position pos:line="25" pos:column="57"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="9">fprintf<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">out<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="22">"  %s\n"<pos:position pos:line="26" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="32">ptr<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">-&gt;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="37">data<pos:position pos:line="26" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt></block></for>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="29" pos:column="5">/* Set up complex values for setopt calls */</comment>
    <if pos:line="30" pos:column="5">if<condition pos:line="30" pos:column="7">(<expr><name pos:line="30" pos:column="8">easysrc_data<pos:position pos:line="30" pos:column="20"/></name></expr>)<pos:position pos:line="30" pos:column="21"/></condition><then pos:line="30" pos:column="21"> <block pos:line="30" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="31" pos:column="7">fprintf<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">out<pos:position pos:line="31" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="20">"\n"<pos:position pos:line="31" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>

      <for pos:line="33" pos:column="7">for<control pos:line="33" pos:column="10">(<init><expr><name pos:line="33" pos:column="11">ptr<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator><name><name pos:line="33" pos:column="15">easysrc_data<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">first<pos:position pos:line="33" pos:column="34"/></name></name></expr>;<pos:position pos:line="33" pos:column="35"/></init> <condition><expr><name pos:line="33" pos:column="36">ptr<pos:position pos:line="33" pos:column="39"/></name></expr>;<pos:position pos:line="33" pos:column="40"/></condition> <incr><expr><name pos:line="33" pos:column="41">ptr<pos:position pos:line="33" pos:column="44"/></name> <operator pos:line="33" pos:column="45">=<pos:position pos:line="33" pos:column="46"/></operator> <name><name pos:line="33" pos:column="47">ptr<pos:position pos:line="33" pos:column="50"/></name><operator pos:line="33" pos:column="50">-&gt;<pos:position pos:line="33" pos:column="55"/></operator><name pos:line="33" pos:column="52">next<pos:position pos:line="33" pos:column="56"/></name></name></expr></incr>)<pos:position pos:line="33" pos:column="57"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">fprintf<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">out<pos:position pos:line="34" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="22">"  %s\n"<pos:position pos:line="34" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="32">ptr<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">-&gt;<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="37">data<pos:position pos:line="34" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt></block></for>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">fprintf<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><name pos:line="37" pos:column="13">out<pos:position pos:line="37" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="18">"\n"<pos:position pos:line="37" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">easysrc_code<pos:position pos:line="38" pos:column="20"/></name></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21"> <block pos:line="38" pos:column="22">{
      <for pos:line="39" pos:column="7">for<control pos:line="39" pos:column="10">(<init><expr><name pos:line="39" pos:column="11">ptr<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator><name><name pos:line="39" pos:column="15">easysrc_code<pos:position pos:line="39" pos:column="27"/></name><operator pos:line="39" pos:column="27">-&gt;<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="29">first<pos:position pos:line="39" pos:column="34"/></name></name></expr>;<pos:position pos:line="39" pos:column="35"/></init> <condition><expr><name pos:line="39" pos:column="36">ptr<pos:position pos:line="39" pos:column="39"/></name></expr>;<pos:position pos:line="39" pos:column="40"/></condition> <incr><expr><name pos:line="39" pos:column="41">ptr<pos:position pos:line="39" pos:column="44"/></name> <operator pos:line="39" pos:column="45">=<pos:position pos:line="39" pos:column="46"/></operator> <name><name pos:line="39" pos:column="47">ptr<pos:position pos:line="39" pos:column="50"/></name><operator pos:line="39" pos:column="50">-&gt;<pos:position pos:line="39" pos:column="55"/></operator><name pos:line="39" pos:column="52">next<pos:position pos:line="39" pos:column="56"/></name></name></expr></incr>)<pos:position pos:line="39" pos:column="57"/></control> <block pos:line="39" pos:column="58">{
        <if pos:line="40" pos:column="9">if<condition pos:line="40" pos:column="11">(<expr><name><name pos:line="40" pos:column="12">ptr<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">data<pos:position pos:line="40" pos:column="21"/></name><index pos:line="40" pos:column="21">[<expr><literal type="number" pos:line="40" pos:column="22">0<pos:position pos:line="40" pos:column="23"/></literal></expr>]<pos:position pos:line="40" pos:column="24"/></index></name></expr>)<pos:position pos:line="40" pos:column="25"/></condition><then pos:line="40" pos:column="25"> <block pos:line="40" pos:column="26">{
          <expr_stmt><expr><call><name pos:line="41" pos:column="11">fprintf<pos:position pos:line="41" pos:column="18"/></name><argument_list pos:line="41" pos:column="18">(<argument><expr><name pos:line="41" pos:column="19">out<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="24">"  %s\n"<pos:position pos:line="41" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="34">ptr<pos:position pos:line="41" pos:column="37"/></name><operator pos:line="41" pos:column="37">-&gt;<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="39">data<pos:position pos:line="41" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></then>
        <else pos:line="43" pos:column="9">else <block pos:line="43" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="44" pos:column="11">fprintf<pos:position pos:line="44" pos:column="18"/></name><argument_list pos:line="44" pos:column="18">(<argument><expr><name pos:line="44" pos:column="19">out<pos:position pos:line="44" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="24">"\n"<pos:position pos:line="44" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="45" pos:column="10"/></block></else></if>
      }<pos:position pos:line="46" pos:column="8"/></block></for>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><name pos:line="49" pos:column="8">easysrc_clean<pos:position pos:line="49" pos:column="21"/></name></expr>)<pos:position pos:line="49" pos:column="22"/></condition><then pos:line="49" pos:column="22"> <block pos:line="49" pos:column="23">{
      <for pos:line="50" pos:column="7">for<control pos:line="50" pos:column="10">(<init><expr><name pos:line="50" pos:column="11">ptr<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator><name><name pos:line="50" pos:column="15">easysrc_clean<pos:position pos:line="50" pos:column="28"/></name><operator pos:line="50" pos:column="28">-&gt;<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="30">first<pos:position pos:line="50" pos:column="35"/></name></name></expr>;<pos:position pos:line="50" pos:column="36"/></init> <condition><expr><name pos:line="50" pos:column="37">ptr<pos:position pos:line="50" pos:column="40"/></name></expr>;<pos:position pos:line="50" pos:column="41"/></condition> <incr><expr><name pos:line="50" pos:column="42">ptr<pos:position pos:line="50" pos:column="45"/></name> <operator pos:line="50" pos:column="46">=<pos:position pos:line="50" pos:column="47"/></operator> <name><name pos:line="50" pos:column="48">ptr<pos:position pos:line="50" pos:column="51"/></name><operator pos:line="50" pos:column="51">-&gt;<pos:position pos:line="50" pos:column="56"/></operator><name pos:line="50" pos:column="53">next<pos:position pos:line="50" pos:column="57"/></name></name></expr></incr>)<pos:position pos:line="50" pos:column="58"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="9">fprintf<pos:position pos:line="51" pos:column="16"/></name><argument_list pos:line="51" pos:column="16">(<argument><expr><name pos:line="51" pos:column="17">out<pos:position pos:line="51" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="22">"  %s\n"<pos:position pos:line="51" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="32">ptr<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">-&gt;<pos:position pos:line="51" pos:column="40"/></operator><name pos:line="51" pos:column="37">data<pos:position pos:line="51" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt></block></for>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <for pos:line="54" pos:column="5">for<control pos:line="54" pos:column="8">(<init><expr><name pos:line="54" pos:column="9">i<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator><literal type="number" pos:line="54" pos:column="11">0<pos:position pos:line="54" pos:column="12"/></literal></expr>;<pos:position pos:line="54" pos:column="13"/></init> <condition><expr><operator pos:line="54" pos:column="14">(<pos:position pos:line="54" pos:column="15"/></operator><operator pos:line="54" pos:column="15">(<pos:position pos:line="54" pos:column="16"/></operator><name pos:line="54" pos:column="16">c<pos:position pos:line="54" pos:column="17"/></name> <operator pos:line="54" pos:column="18">=<pos:position pos:line="54" pos:column="19"/></operator> <name><name pos:line="54" pos:column="20">srcend<pos:position pos:line="54" pos:column="26"/></name><index pos:line="54" pos:column="26">[<expr><name pos:line="54" pos:column="27">i<pos:position pos:line="54" pos:column="28"/></name></expr>]<pos:position pos:line="54" pos:column="29"/></index></name><operator pos:line="54" pos:column="29">)<pos:position pos:line="54" pos:column="30"/></operator> <operator pos:line="54" pos:column="31">!=<pos:position pos:line="54" pos:column="33"/></operator> <name pos:line="54" pos:column="34">NULL<pos:position pos:line="54" pos:column="38"/></name><operator pos:line="54" pos:column="38">)<pos:position pos:line="54" pos:column="39"/></operator></expr>;<pos:position pos:line="54" pos:column="40"/></condition> <incr><expr><name pos:line="54" pos:column="41">i<pos:position pos:line="54" pos:column="42"/></name><operator pos:line="54" pos:column="42">++<pos:position pos:line="54" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="54" pos:column="45"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="7">fprintf<pos:position pos:line="55" pos:column="14"/></name><argument_list pos:line="55" pos:column="14">(<argument><expr><name pos:line="55" pos:column="15">out<pos:position pos:line="55" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="20">"%s\n"<pos:position pos:line="55" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="28">c<pos:position pos:line="55" pos:column="29"/></name></expr></argument>)<pos:position pos:line="55" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt></block></for>

    <if pos:line="57" pos:column="5">if<condition pos:line="57" pos:column="7">(<expr><name pos:line="57" pos:column="8">fopened<pos:position pos:line="57" pos:column="15"/></name></expr>)<pos:position pos:line="57" pos:column="16"/></condition><then pos:line="57" pos:column="16">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="7">fclose<pos:position pos:line="58" pos:column="13"/></name><argument_list pos:line="58" pos:column="13">(<argument><expr><name pos:line="58" pos:column="14">out<pos:position pos:line="58" pos:column="17"/></name></expr></argument>)<pos:position pos:line="58" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="19"/></expr_stmt></block></then></if>
  }<pos:position pos:line="59" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="61" pos:column="3">easysrc_free<pos:position pos:line="61" pos:column="15"/></name><argument_list pos:line="61" pos:column="15">()<pos:position pos:line="61" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="18"/></expr_stmt>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
