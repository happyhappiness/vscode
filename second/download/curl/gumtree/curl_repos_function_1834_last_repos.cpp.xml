<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1834_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_verifyhost<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                         <parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">beg<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">end<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_X509certificate<pos:position pos:line="5" pos:column="23"/></name></type> <name pos:line="5" pos:column="24">cert<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">curl_asn1Element<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">dn<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">curl_asn1Element<pos:position pos:line="7" pos:column="19"/></name></type> <name pos:line="7" pos:column="20">elem<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_asn1Element<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">ext<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">curl_asn1Element<pos:position pos:line="9" pos:column="19"/></name></type> <name pos:line="9" pos:column="20">name<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">const<pos:position pos:line="10" pos:column="8"/></specifier> <name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">p<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">q<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">dnsname<pos:position pos:line="12" pos:column="16"/></name></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">matched<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><operator pos:line="13" pos:column="17">-<pos:position pos:line="13" pos:column="18"/></operator><literal type="number" pos:line="13" pos:column="18">1<pos:position pos:line="13" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">size_t<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">addrlen<pos:position pos:line="14" pos:column="17"/></name> <init pos:line="14" pos:column="18">= <expr><operator pos:line="14" pos:column="20">(<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="21">size_t<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">)<pos:position pos:line="14" pos:column="28"/></operator> <operator pos:line="14" pos:column="29">-<pos:position pos:line="14" pos:column="30"/></operator><literal type="number" pos:line="14" pos:column="30">1<pos:position pos:line="14" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">ssize_t<pos:position pos:line="15" pos:column="10"/></name></type> <name pos:line="15" pos:column="11">len<pos:position pos:line="15" pos:column="14"/></name></decl>;<pos:position pos:line="15" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="16" pos:column="3">const<pos:position pos:line="16" pos:column="8"/></specifier> <name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier> <specifier pos:line="16" pos:column="16">const<pos:position pos:line="16" pos:column="21"/></specifier></type> <name pos:line="16" pos:column="22">hostname<pos:position pos:line="16" pos:column="30"/></name> <init pos:line="16" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="16" pos:column="33">SSL_IS_PROXY<pos:position pos:line="16" pos:column="45"/></name><argument_list pos:line="16" pos:column="45">()<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>?<pos:position pos:line="16" pos:column="48"/></condition><then pos:line="16" pos:column="48"> <expr><name><name pos:line="16" pos:column="49">conn<pos:position pos:line="16" pos:column="53"/></name><operator pos:line="16" pos:column="53">-&gt;<pos:position pos:line="16" pos:column="58"/></operator><name pos:line="16" pos:column="55">http_proxy<pos:position pos:line="16" pos:column="65"/></name><operator pos:line="16" pos:column="65">.<pos:position pos:line="16" pos:column="66"/></operator><name pos:line="16" pos:column="66">host<pos:position pos:line="16" pos:column="70"/></name><operator pos:line="16" pos:column="70">.<pos:position pos:line="16" pos:column="71"/></operator><name pos:line="16" pos:column="71">name<pos:position pos:line="16" pos:column="75"/></name></name></expr></then><else pos:line="16" pos:column="75">:
                                                <expr><name><name pos:line="17" pos:column="49">conn<pos:position pos:line="17" pos:column="53"/></name><operator pos:line="17" pos:column="53">-&gt;<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="55">host<pos:position pos:line="17" pos:column="59"/></name><operator pos:line="17" pos:column="59">.<pos:position pos:line="17" pos:column="60"/></operator><name pos:line="17" pos:column="60">name<pos:position pos:line="17" pos:column="64"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="17" pos:column="65"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="18" pos:column="3">const<pos:position pos:line="18" pos:column="8"/></specifier> <name pos:line="18" pos:column="9">char<pos:position pos:line="18" pos:column="13"/></name> <modifier pos:line="18" pos:column="14">*<pos:position pos:line="18" pos:column="15"/></modifier> <specifier pos:line="18" pos:column="16">const<pos:position pos:line="18" pos:column="21"/></specifier></type> <name pos:line="18" pos:column="22">dispname<pos:position pos:line="18" pos:column="30"/></name> <init pos:line="18" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="18" pos:column="33">SSL_IS_PROXY<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">()<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>?<pos:position pos:line="18" pos:column="48"/></condition><then pos:line="18" pos:column="48">
                                  <expr><name><name pos:line="19" pos:column="35">conn<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">-&gt;<pos:position pos:line="19" pos:column="44"/></operator><name pos:line="19" pos:column="41">http_proxy<pos:position pos:line="19" pos:column="51"/></name><operator pos:line="19" pos:column="51">.<pos:position pos:line="19" pos:column="52"/></operator><name pos:line="19" pos:column="52">host<pos:position pos:line="19" pos:column="56"/></name><operator pos:line="19" pos:column="56">.<pos:position pos:line="19" pos:column="57"/></operator><name pos:line="19" pos:column="57">dispname<pos:position pos:line="19" pos:column="65"/></name></name></expr></then><else pos:line="19" pos:column="65">:
                                  <expr><name><name pos:line="20" pos:column="35">conn<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">host<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">.<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="46">dispname<pos:position pos:line="20" pos:column="54"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="20" pos:column="55"/></decl_stmt>
<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">ENABLE_IPV6<pos:position pos:line="21" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="22" pos:column="3">struct<pos:position pos:line="22" pos:column="9"/></name> <name pos:line="22" pos:column="10">in6_addr<pos:position pos:line="22" pos:column="18"/></name></name></type> <name pos:line="22" pos:column="19">addr<pos:position pos:line="22" pos:column="23"/></name></decl>;<pos:position pos:line="22" pos:column="24"/></decl_stmt>
<cpp:else pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">else<pos:position pos:line="23" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name pos:line="24" pos:column="3">struct<pos:position pos:line="24" pos:column="9"/></name> <name pos:line="24" pos:column="10">in_addr<pos:position pos:line="24" pos:column="17"/></name></name></type> <name pos:line="24" pos:column="18">addr<pos:position pos:line="24" pos:column="22"/></name></decl>;<pos:position pos:line="24" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="27" pos:column="3">/* Verify that connection server matches info in X509 certificate at
     `beg'..`end'. */</comment>

  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><operator pos:line="30" pos:column="6">!<pos:position pos:line="30" pos:column="7"/></operator><call><name pos:line="30" pos:column="7">SSL_CONN_CONFIG<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">verifyhost<pos:position pos:line="30" pos:column="33"/></name></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35">
    <block type="pseudo"><return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">CURLE_OK<pos:position pos:line="31" pos:column="20"/></name></expr>;<pos:position pos:line="31" pos:column="21"/></return></block></then></if>

  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><call><name pos:line="33" pos:column="6">Curl_parseX509<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><operator pos:line="33" pos:column="21">&amp;<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="22">cert<pos:position pos:line="33" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="28">beg<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="33">end<pos:position pos:line="33" pos:column="36"/></name></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="38"/></condition><then pos:line="33" pos:column="38">
    <block type="pseudo"><return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="34" pos:column="42"/></name></expr>;<pos:position pos:line="34" pos:column="43"/></return></block></then></if>

  <comment type="block" pos:line="36" pos:column="3">/* Get the server IP address. */</comment>
<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">ENABLE_IPV6<pos:position pos:line="37" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><name><name pos:line="38" pos:column="6">conn<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">bits<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">.<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">ipv6_ip<pos:position pos:line="38" pos:column="24"/></name></name> <operator pos:line="38" pos:column="25">&amp;&amp;<pos:position pos:line="38" pos:column="35"/></operator> <call><name pos:line="38" pos:column="28">Curl_inet_pton<pos:position pos:line="38" pos:column="42"/></name><argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">AF_INET6<pos:position pos:line="38" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="53">hostname<pos:position pos:line="38" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="63">&amp;<pos:position pos:line="38" pos:column="68"/></operator><name pos:line="38" pos:column="64">addr<pos:position pos:line="38" pos:column="68"/></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="70"/></condition><then pos:line="38" pos:column="70">
    <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="5">addrlen<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <sizeof pos:line="39" pos:column="15">sizeof<argument_list pos:line="39" pos:column="21">(<argument><expr pos:line="39" pos:column="22">struct <name pos:line="39" pos:column="29">in6_addr<pos:position pos:line="39" pos:column="37"/></name></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt></block></then>
  <elseif pos:line="40" pos:column="3">else
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">(<expr><call><name pos:line="42" pos:column="6">Curl_inet_pton<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">(<argument><expr><name pos:line="42" pos:column="21">AF_INET<pos:position pos:line="42" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="30">hostname<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="40">&amp;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="41">addr<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="47"/></condition><then pos:line="42" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="5">addrlen<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <sizeof pos:line="43" pos:column="15">sizeof<argument_list pos:line="43" pos:column="21">(<argument><expr pos:line="43" pos:column="22">struct <name pos:line="43" pos:column="29">in_addr<pos:position pos:line="43" pos:column="36"/></name></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt></block></then></if></elseif></if>

  <comment type="block" pos:line="45" pos:column="3">/* Process extensions. */</comment>
  <for pos:line="46" pos:column="3">for<control pos:line="46" pos:column="6">(<init><expr><name pos:line="46" pos:column="7">p<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">=<pos:position pos:line="46" pos:column="10"/></operator> <name><name pos:line="46" pos:column="11">cert<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">.<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="16">extensions<pos:position pos:line="46" pos:column="26"/></name><operator pos:line="46" pos:column="26">.<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">beg<pos:position pos:line="46" pos:column="30"/></name></name></expr>;<pos:position pos:line="46" pos:column="31"/></init> <condition><expr><name pos:line="46" pos:column="32">p<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">&lt;<pos:position pos:line="46" pos:column="38"/></operator> <name><name pos:line="46" pos:column="36">cert<pos:position pos:line="46" pos:column="40"/></name><operator pos:line="46" pos:column="40">.<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="41">extensions<pos:position pos:line="46" pos:column="51"/></name><operator pos:line="46" pos:column="51">.<pos:position pos:line="46" pos:column="52"/></operator><name pos:line="46" pos:column="52">end<pos:position pos:line="46" pos:column="55"/></name></name> <operator pos:line="46" pos:column="56">&amp;&amp;<pos:position pos:line="46" pos:column="66"/></operator> <name pos:line="46" pos:column="59">matched<pos:position pos:line="46" pos:column="66"/></name> <operator pos:line="46" pos:column="67">!=<pos:position pos:line="46" pos:column="69"/></operator> <literal type="number" pos:line="46" pos:column="70">1<pos:position pos:line="46" pos:column="71"/></literal></expr>;<pos:position pos:line="46" pos:column="72"/></condition><incr/>)<pos:position pos:line="46" pos:column="73"/></control> <block pos:line="46" pos:column="74">{
    <expr_stmt><expr><name pos:line="47" pos:column="5">p<pos:position pos:line="47" pos:column="6"/></name> <operator pos:line="47" pos:column="7">=<pos:position pos:line="47" pos:column="8"/></operator> <call><name pos:line="47" pos:column="9">Curl_getASN1Element<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><operator pos:line="47" pos:column="29">&amp;<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="30">ext<pos:position pos:line="47" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="35">p<pos:position pos:line="47" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="38">cert<pos:position pos:line="47" pos:column="42"/></name><operator pos:line="47" pos:column="42">.<pos:position pos:line="47" pos:column="43"/></operator><name pos:line="47" pos:column="43">extensions<pos:position pos:line="47" pos:column="53"/></name><operator pos:line="47" pos:column="53">.<pos:position pos:line="47" pos:column="54"/></operator><name pos:line="47" pos:column="54">end<pos:position pos:line="47" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="59"/></expr_stmt>
    <comment type="block" pos:line="48" pos:column="5">/* Check if extension is a subjectAlternativeName. */</comment>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">ext<pos:position pos:line="49" pos:column="8"/></name><operator pos:line="49" pos:column="8">.<pos:position pos:line="49" pos:column="9"/></operator><name pos:line="49" pos:column="9">beg<pos:position pos:line="49" pos:column="12"/></name></name> <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <call><name pos:line="49" pos:column="15">checkOID<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name><name pos:line="49" pos:column="24">ext<pos:position pos:line="49" pos:column="27"/></name><operator pos:line="49" pos:column="27">.<pos:position pos:line="49" pos:column="28"/></operator><name pos:line="49" pos:column="28">beg<pos:position pos:line="49" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="33">ext<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">.<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="37">end<pos:position pos:line="49" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="42">sanOID<pos:position pos:line="49" pos:column="48"/></name></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt>
    <if pos:line="50" pos:column="5">if<condition pos:line="50" pos:column="7">(<expr><name><name pos:line="50" pos:column="8">ext<pos:position pos:line="50" pos:column="11"/></name><operator pos:line="50" pos:column="11">.<pos:position pos:line="50" pos:column="12"/></operator><name pos:line="50" pos:column="12">beg<pos:position pos:line="50" pos:column="15"/></name></name></expr>)<pos:position pos:line="50" pos:column="16"/></condition><then pos:line="50" pos:column="16"> <block pos:line="50" pos:column="17">{
      <expr_stmt><expr><name><name pos:line="51" pos:column="7">ext<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">.<pos:position pos:line="51" pos:column="11"/></operator><name pos:line="51" pos:column="11">beg<pos:position pos:line="51" pos:column="14"/></name></name> <operator pos:line="51" pos:column="15">=<pos:position pos:line="51" pos:column="16"/></operator> <call><name pos:line="51" pos:column="17">Curl_getASN1Element<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><operator pos:line="51" pos:column="37">&amp;<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="38">elem<pos:position pos:line="51" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="44">ext<pos:position pos:line="51" pos:column="47"/></name><operator pos:line="51" pos:column="47">.<pos:position pos:line="51" pos:column="48"/></operator><name pos:line="51" pos:column="48">beg<pos:position pos:line="51" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="53">ext<pos:position pos:line="51" pos:column="56"/></name><operator pos:line="51" pos:column="56">.<pos:position pos:line="51" pos:column="57"/></operator><name pos:line="51" pos:column="57">end<pos:position pos:line="51" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="62"/></expr_stmt>
      <comment type="block" pos:line="52" pos:column="7">/* Skip critical if present. */</comment>
      <if pos:line="53" pos:column="7">if<condition pos:line="53" pos:column="9">(<expr><name><name pos:line="53" pos:column="10">elem<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">.<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="15">tag<pos:position pos:line="53" pos:column="18"/></name></name> <operator pos:line="53" pos:column="19">==<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">CURL_ASN1_BOOLEAN<pos:position pos:line="53" pos:column="39"/></name></expr>)<pos:position pos:line="53" pos:column="40"/></condition><then pos:line="53" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="9">ext<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">.<pos:position pos:line="54" pos:column="13"/></operator><name pos:line="54" pos:column="13">beg<pos:position pos:line="54" pos:column="16"/></name></name> <operator pos:line="54" pos:column="17">=<pos:position pos:line="54" pos:column="18"/></operator> <call><name pos:line="54" pos:column="19">Curl_getASN1Element<pos:position pos:line="54" pos:column="38"/></name><argument_list pos:line="54" pos:column="38">(<argument><expr><operator pos:line="54" pos:column="39">&amp;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="40">elem<pos:position pos:line="54" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="46">ext<pos:position pos:line="54" pos:column="49"/></name><operator pos:line="54" pos:column="49">.<pos:position pos:line="54" pos:column="50"/></operator><name pos:line="54" pos:column="50">beg<pos:position pos:line="54" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="55">ext<pos:position pos:line="54" pos:column="58"/></name><operator pos:line="54" pos:column="58">.<pos:position pos:line="54" pos:column="59"/></operator><name pos:line="54" pos:column="59">end<pos:position pos:line="54" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt></block></then></if>
      <comment type="block" pos:line="55" pos:column="7">/* Parse the octet string contents: is a single sequence. */</comment>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">Curl_getASN1Element<pos:position pos:line="56" pos:column="26"/></name><argument_list pos:line="56" pos:column="26">(<argument><expr><operator pos:line="56" pos:column="27">&amp;<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="28">elem<pos:position pos:line="56" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="34">elem<pos:position pos:line="56" pos:column="38"/></name><operator pos:line="56" pos:column="38">.<pos:position pos:line="56" pos:column="39"/></operator><name pos:line="56" pos:column="39">beg<pos:position pos:line="56" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="44">elem<pos:position pos:line="56" pos:column="48"/></name><operator pos:line="56" pos:column="48">.<pos:position pos:line="56" pos:column="49"/></operator><name pos:line="56" pos:column="49">end<pos:position pos:line="56" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="54"/></expr_stmt>
      <comment type="block" pos:line="57" pos:column="7">/* Check all GeneralNames. */</comment>
      <for pos:line="58" pos:column="7">for<control pos:line="58" pos:column="10">(<init><expr><name pos:line="58" pos:column="11">q<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">=<pos:position pos:line="58" pos:column="14"/></operator> <name><name pos:line="58" pos:column="15">elem<pos:position pos:line="58" pos:column="19"/></name><operator pos:line="58" pos:column="19">.<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">beg<pos:position pos:line="58" pos:column="23"/></name></name></expr>;<pos:position pos:line="58" pos:column="24"/></init> <condition><expr><name pos:line="58" pos:column="25">matched<pos:position pos:line="58" pos:column="32"/></name> <operator pos:line="58" pos:column="33">!=<pos:position pos:line="58" pos:column="35"/></operator> <literal type="number" pos:line="58" pos:column="36">1<pos:position pos:line="58" pos:column="37"/></literal> <operator pos:line="58" pos:column="38">&amp;&amp;<pos:position pos:line="58" pos:column="48"/></operator> <name pos:line="58" pos:column="41">q<pos:position pos:line="58" pos:column="42"/></name> <operator pos:line="58" pos:column="43">&lt;<pos:position pos:line="58" pos:column="47"/></operator> <name><name pos:line="58" pos:column="45">elem<pos:position pos:line="58" pos:column="49"/></name><operator pos:line="58" pos:column="49">.<pos:position pos:line="58" pos:column="50"/></operator><name pos:line="58" pos:column="50">end<pos:position pos:line="58" pos:column="53"/></name></name></expr>;<pos:position pos:line="58" pos:column="54"/></condition><incr/>)<pos:position pos:line="58" pos:column="55"/></control> <block pos:line="58" pos:column="56">{
        <expr_stmt><expr><name pos:line="59" pos:column="9">q<pos:position pos:line="59" pos:column="10"/></name> <operator pos:line="59" pos:column="11">=<pos:position pos:line="59" pos:column="12"/></operator> <call><name pos:line="59" pos:column="13">Curl_getASN1Element<pos:position pos:line="59" pos:column="32"/></name><argument_list pos:line="59" pos:column="32">(<argument><expr><operator pos:line="59" pos:column="33">&amp;<pos:position pos:line="59" pos:column="38"/></operator><name pos:line="59" pos:column="34">name<pos:position pos:line="59" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="40">q<pos:position pos:line="59" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="43">elem<pos:position pos:line="59" pos:column="47"/></name><operator pos:line="59" pos:column="47">.<pos:position pos:line="59" pos:column="48"/></operator><name pos:line="59" pos:column="48">end<pos:position pos:line="59" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="53"/></expr_stmt>
        <switch pos:line="60" pos:column="9">switch<condition pos:line="60" pos:column="15">(<expr><name><name pos:line="60" pos:column="16">name<pos:position pos:line="60" pos:column="20"/></name><operator pos:line="60" pos:column="20">.<pos:position pos:line="60" pos:column="21"/></operator><name pos:line="60" pos:column="21">tag<pos:position pos:line="60" pos:column="24"/></name></name></expr>)<pos:position pos:line="60" pos:column="25"/></condition> <block pos:line="60" pos:column="26">{
        <case pos:line="61" pos:column="9">case <expr><literal type="number" pos:line="61" pos:column="14">2<pos:position pos:line="61" pos:column="15"/></literal></expr>:<pos:position pos:line="61" pos:column="16"/></case> <comment type="block" pos:line="61" pos:column="17">/* DNS name. */</comment>
          <expr_stmt><expr><name pos:line="62" pos:column="11">len<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">=<pos:position pos:line="62" pos:column="16"/></operator> <call><name pos:line="62" pos:column="17">utf8asn1str<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><operator pos:line="62" pos:column="29">&amp;<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="30">dnsname<pos:position pos:line="62" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="39">CURL_ASN1_IA5_STRING<pos:position pos:line="62" pos:column="59"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="63" pos:column="29">name<pos:position pos:line="63" pos:column="33"/></name><operator pos:line="63" pos:column="33">.<pos:position pos:line="63" pos:column="34"/></operator><name pos:line="63" pos:column="34">beg<pos:position pos:line="63" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="39">name<pos:position pos:line="63" pos:column="43"/></name><operator pos:line="63" pos:column="43">.<pos:position pos:line="63" pos:column="44"/></operator><name pos:line="63" pos:column="44">end<pos:position pos:line="63" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="49"/></expr_stmt>
          <if pos:line="64" pos:column="11">if<condition pos:line="64" pos:column="13">(<expr><name pos:line="64" pos:column="14">len<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">&gt;<pos:position pos:line="64" pos:column="22"/></operator> <literal type="number" pos:line="64" pos:column="20">0<pos:position pos:line="64" pos:column="21"/></literal> <operator pos:line="64" pos:column="22">&amp;&amp;<pos:position pos:line="64" pos:column="32"/></operator> <operator pos:line="64" pos:column="25">(<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="26">size_t<pos:position pos:line="64" pos:column="32"/></name><operator pos:line="64" pos:column="32">)<pos:position pos:line="64" pos:column="33"/></operator><name pos:line="64" pos:column="33">len<pos:position pos:line="64" pos:column="36"/></name> <operator pos:line="64" pos:column="37">==<pos:position pos:line="64" pos:column="39"/></operator> <call><name pos:line="64" pos:column="40">strlen<pos:position pos:line="64" pos:column="46"/></name><argument_list pos:line="64" pos:column="46">(<argument><expr><name pos:line="64" pos:column="47">dnsname<pos:position pos:line="64" pos:column="54"/></name></expr></argument>)<pos:position pos:line="64" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="56"/></condition><then pos:line="64" pos:column="56">
            <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="13">matched<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <call><name pos:line="65" pos:column="23">Curl_cert_hostcheck<pos:position pos:line="65" pos:column="42"/></name><argument_list pos:line="65" pos:column="42">(<argument><expr><name pos:line="65" pos:column="43">dnsname<pos:position pos:line="65" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="52">hostname<pos:position pos:line="65" pos:column="60"/></name></expr></argument>)<pos:position pos:line="65" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="62"/></expr_stmt></block></then>
          <else pos:line="66" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="13">matched<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">=<pos:position pos:line="67" pos:column="22"/></operator> <literal type="number" pos:line="67" pos:column="23">0<pos:position pos:line="67" pos:column="24"/></literal></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt></block></else></if>
          <expr_stmt><expr><call><name pos:line="68" pos:column="11">free<pos:position pos:line="68" pos:column="15"/></name><argument_list pos:line="68" pos:column="15">(<argument><expr><name pos:line="68" pos:column="16">dnsname<pos:position pos:line="68" pos:column="23"/></name></expr></argument>)<pos:position pos:line="68" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt>
          <break pos:line="69" pos:column="11">break;<pos:position pos:line="69" pos:column="17"/></break>

        <case pos:line="71" pos:column="9">case <expr><literal type="number" pos:line="71" pos:column="14">7<pos:position pos:line="71" pos:column="15"/></literal></expr>:<pos:position pos:line="71" pos:column="16"/></case> <comment type="block" pos:line="71" pos:column="17">/* IP address. */</comment>
          <expr_stmt><expr><name pos:line="72" pos:column="11">matched<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">=<pos:position pos:line="72" pos:column="20"/></operator> <call pos:line="72" pos:column="21">(<name pos:line="72" pos:column="22">size_t<pos:position pos:line="72" pos:column="28"/></name>) <argument_list pos:line="72" pos:column="30">(<argument><expr><name><name pos:line="72" pos:column="31">name<pos:position pos:line="72" pos:column="35"/></name><operator pos:line="72" pos:column="35">.<pos:position pos:line="72" pos:column="36"/></operator><name pos:line="72" pos:column="36">end<pos:position pos:line="72" pos:column="39"/></name></name> <operator pos:line="72" pos:column="40">-<pos:position pos:line="72" pos:column="41"/></operator> <name pos:line="72" pos:column="42">q<pos:position pos:line="72" pos:column="43"/></name></expr></argument>)<pos:position pos:line="72" pos:column="44"/></argument_list></call> <operator pos:line="72" pos:column="45">==<pos:position pos:line="72" pos:column="47"/></operator> <name pos:line="72" pos:column="48">addrlen<pos:position pos:line="72" pos:column="55"/></name> <operator pos:line="72" pos:column="56">&amp;&amp;<pos:position pos:line="72" pos:column="66"/></operator>
                    <operator pos:line="73" pos:column="21">!<pos:position pos:line="73" pos:column="22"/></operator><call><name pos:line="73" pos:column="22">memcmp<pos:position pos:line="73" pos:column="28"/></name><argument_list pos:line="73" pos:column="28">(<argument><expr><operator pos:line="73" pos:column="29">&amp;<pos:position pos:line="73" pos:column="34"/></operator><name pos:line="73" pos:column="30">addr<pos:position pos:line="73" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="36">q<pos:position pos:line="73" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="39">addrlen<pos:position pos:line="73" pos:column="46"/></name></expr></argument>)<pos:position pos:line="73" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="48"/></expr_stmt>
          <break pos:line="74" pos:column="11">break;<pos:position pos:line="74" pos:column="17"/></break>
        }<pos:position pos:line="75" pos:column="10"/></block></switch>
      }<pos:position pos:line="76" pos:column="8"/></block></for>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>
  }<pos:position pos:line="78" pos:column="4"/></block></for>

  <switch pos:line="80" pos:column="3">switch<condition pos:line="80" pos:column="9">(<expr><name pos:line="80" pos:column="10">matched<pos:position pos:line="80" pos:column="17"/></name></expr>)<pos:position pos:line="80" pos:column="18"/></condition> <block pos:line="80" pos:column="19">{
  <case pos:line="81" pos:column="3">case <expr><literal type="number" pos:line="81" pos:column="8">1<pos:position pos:line="81" pos:column="9"/></literal></expr>:<pos:position pos:line="81" pos:column="10"/></case>
    <comment type="block" pos:line="82" pos:column="5">/* an alternative name matched the server hostname */</comment>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">infof<pos:position pos:line="83" pos:column="10"/></name><argument_list pos:line="83" pos:column="10">(<argument><expr><name pos:line="83" pos:column="11">data<pos:position pos:line="83" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="17">"\t subjectAltName: %s matched\n"<pos:position pos:line="83" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="52">dispname<pos:position pos:line="83" pos:column="60"/></name></expr></argument>)<pos:position pos:line="83" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="62"/></expr_stmt>
    <return pos:line="84" pos:column="5">return <expr><name pos:line="84" pos:column="12">CURLE_OK<pos:position pos:line="84" pos:column="20"/></name></expr>;<pos:position pos:line="84" pos:column="21"/></return>
  <case pos:line="85" pos:column="3">case <expr><literal type="number" pos:line="85" pos:column="8">0<pos:position pos:line="85" pos:column="9"/></literal></expr>:<pos:position pos:line="85" pos:column="10"/></case>
    <comment type="block" pos:line="86" pos:column="5">/* an alternative name field existed, but didn't match and then
       we MUST fail */</comment>
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">infof<pos:position pos:line="88" pos:column="10"/></name><argument_list pos:line="88" pos:column="10">(<argument><expr><name pos:line="88" pos:column="11">data<pos:position pos:line="88" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="17">"\t subjectAltName does not match %s\n"<pos:position pos:line="88" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="58">dispname<pos:position pos:line="88" pos:column="66"/></name></expr></argument>)<pos:position pos:line="88" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="68"/></expr_stmt>
    <return pos:line="89" pos:column="5">return <expr><name pos:line="89" pos:column="12">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="89" pos:column="42"/></name></expr>;<pos:position pos:line="89" pos:column="43"/></return>
  }<pos:position pos:line="90" pos:column="4"/></block></switch>

  <comment type="block" pos:line="92" pos:column="3">/* Process subject. */</comment>
  <expr_stmt><expr><name><name pos:line="93" pos:column="3">name<pos:position pos:line="93" pos:column="7"/></name><operator pos:line="93" pos:column="7">.<pos:position pos:line="93" pos:column="8"/></operator><name pos:line="93" pos:column="8">header<pos:position pos:line="93" pos:column="14"/></name></name> <operator pos:line="93" pos:column="15">=<pos:position pos:line="93" pos:column="16"/></operator> <name pos:line="93" pos:column="17">NULL<pos:position pos:line="93" pos:column="21"/></name></expr>;<pos:position pos:line="93" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="94" pos:column="3">name<pos:position pos:line="94" pos:column="7"/></name><operator pos:line="94" pos:column="7">.<pos:position pos:line="94" pos:column="8"/></operator><name pos:line="94" pos:column="8">beg<pos:position pos:line="94" pos:column="11"/></name></name> <operator pos:line="94" pos:column="12">=<pos:position pos:line="94" pos:column="13"/></operator> <name><name pos:line="94" pos:column="14">name<pos:position pos:line="94" pos:column="18"/></name><operator pos:line="94" pos:column="18">.<pos:position pos:line="94" pos:column="19"/></operator><name pos:line="94" pos:column="19">end<pos:position pos:line="94" pos:column="22"/></name></name> <operator pos:line="94" pos:column="23">=<pos:position pos:line="94" pos:column="24"/></operator> <literal type="string" pos:line="94" pos:column="25">""<pos:position pos:line="94" pos:column="27"/></literal></expr>;<pos:position pos:line="94" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="95" pos:column="3">q<pos:position pos:line="95" pos:column="4"/></name> <operator pos:line="95" pos:column="5">=<pos:position pos:line="95" pos:column="6"/></operator> <name><name pos:line="95" pos:column="7">cert<pos:position pos:line="95" pos:column="11"/></name><operator pos:line="95" pos:column="11">.<pos:position pos:line="95" pos:column="12"/></operator><name pos:line="95" pos:column="12">subject<pos:position pos:line="95" pos:column="19"/></name><operator pos:line="95" pos:column="19">.<pos:position pos:line="95" pos:column="20"/></operator><name pos:line="95" pos:column="20">beg<pos:position pos:line="95" pos:column="23"/></name></name></expr>;<pos:position pos:line="95" pos:column="24"/></expr_stmt>
  <comment type="block" pos:line="96" pos:column="3">/* we have to look to the last occurrence of a commonName in the
     distinguished one to get the most significant one. */</comment>
  <while pos:line="98" pos:column="3">while<condition pos:line="98" pos:column="8">(<expr><name pos:line="98" pos:column="9">q<pos:position pos:line="98" pos:column="10"/></name> <operator pos:line="98" pos:column="11">&lt;<pos:position pos:line="98" pos:column="15"/></operator> <name><name pos:line="98" pos:column="13">cert<pos:position pos:line="98" pos:column="17"/></name><operator pos:line="98" pos:column="17">.<pos:position pos:line="98" pos:column="18"/></operator><name pos:line="98" pos:column="18">subject<pos:position pos:line="98" pos:column="25"/></name><operator pos:line="98" pos:column="25">.<pos:position pos:line="98" pos:column="26"/></operator><name pos:line="98" pos:column="26">end<pos:position pos:line="98" pos:column="29"/></name></name></expr>)<pos:position pos:line="98" pos:column="30"/></condition> <block pos:line="98" pos:column="31">{
    <expr_stmt><expr><name pos:line="99" pos:column="5">q<pos:position pos:line="99" pos:column="6"/></name> <operator pos:line="99" pos:column="7">=<pos:position pos:line="99" pos:column="8"/></operator> <call><name pos:line="99" pos:column="9">Curl_getASN1Element<pos:position pos:line="99" pos:column="28"/></name><argument_list pos:line="99" pos:column="28">(<argument><expr><operator pos:line="99" pos:column="29">&amp;<pos:position pos:line="99" pos:column="34"/></operator><name pos:line="99" pos:column="30">dn<pos:position pos:line="99" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="34">q<pos:position pos:line="99" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="37">cert<pos:position pos:line="99" pos:column="41"/></name><operator pos:line="99" pos:column="41">.<pos:position pos:line="99" pos:column="42"/></operator><name pos:line="99" pos:column="42">subject<pos:position pos:line="99" pos:column="49"/></name><operator pos:line="99" pos:column="49">.<pos:position pos:line="99" pos:column="50"/></operator><name pos:line="99" pos:column="50">end<pos:position pos:line="99" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="55"/></expr_stmt>
    <for pos:line="100" pos:column="5">for<control pos:line="100" pos:column="8">(<init><expr><name pos:line="100" pos:column="9">p<pos:position pos:line="100" pos:column="10"/></name> <operator pos:line="100" pos:column="11">=<pos:position pos:line="100" pos:column="12"/></operator> <name><name pos:line="100" pos:column="13">dn<pos:position pos:line="100" pos:column="15"/></name><operator pos:line="100" pos:column="15">.<pos:position pos:line="100" pos:column="16"/></operator><name pos:line="100" pos:column="16">beg<pos:position pos:line="100" pos:column="19"/></name></name></expr>;<pos:position pos:line="100" pos:column="20"/></init> <condition><expr><name pos:line="100" pos:column="21">p<pos:position pos:line="100" pos:column="22"/></name> <operator pos:line="100" pos:column="23">&lt;<pos:position pos:line="100" pos:column="27"/></operator> <name><name pos:line="100" pos:column="25">dn<pos:position pos:line="100" pos:column="27"/></name><operator pos:line="100" pos:column="27">.<pos:position pos:line="100" pos:column="28"/></operator><name pos:line="100" pos:column="28">end<pos:position pos:line="100" pos:column="31"/></name></name></expr>;<pos:position pos:line="100" pos:column="32"/></condition><incr/>)<pos:position pos:line="100" pos:column="33"/></control> <block pos:line="100" pos:column="34">{
      <expr_stmt><expr><name pos:line="101" pos:column="7">p<pos:position pos:line="101" pos:column="8"/></name> <operator pos:line="101" pos:column="9">=<pos:position pos:line="101" pos:column="10"/></operator> <call><name pos:line="101" pos:column="11">Curl_getASN1Element<pos:position pos:line="101" pos:column="30"/></name><argument_list pos:line="101" pos:column="30">(<argument><expr><operator pos:line="101" pos:column="31">&amp;<pos:position pos:line="101" pos:column="36"/></operator><name pos:line="101" pos:column="32">elem<pos:position pos:line="101" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="38">p<pos:position pos:line="101" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="41">dn<pos:position pos:line="101" pos:column="43"/></name><operator pos:line="101" pos:column="43">.<pos:position pos:line="101" pos:column="44"/></operator><name pos:line="101" pos:column="44">end<pos:position pos:line="101" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="49"/></expr_stmt>
      <comment type="block" pos:line="102" pos:column="7">/* We have a DN's AttributeTypeAndValue: check it in case it's a CN. */</comment>
      <expr_stmt><expr><name><name pos:line="103" pos:column="7">elem<pos:position pos:line="103" pos:column="11"/></name><operator pos:line="103" pos:column="11">.<pos:position pos:line="103" pos:column="12"/></operator><name pos:line="103" pos:column="12">beg<pos:position pos:line="103" pos:column="15"/></name></name> <operator pos:line="103" pos:column="16">=<pos:position pos:line="103" pos:column="17"/></operator> <call><name pos:line="103" pos:column="18">checkOID<pos:position pos:line="103" pos:column="26"/></name><argument_list pos:line="103" pos:column="26">(<argument><expr><name><name pos:line="103" pos:column="27">elem<pos:position pos:line="103" pos:column="31"/></name><operator pos:line="103" pos:column="31">.<pos:position pos:line="103" pos:column="32"/></operator><name pos:line="103" pos:column="32">beg<pos:position pos:line="103" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="37">elem<pos:position pos:line="103" pos:column="41"/></name><operator pos:line="103" pos:column="41">.<pos:position pos:line="103" pos:column="42"/></operator><name pos:line="103" pos:column="42">end<pos:position pos:line="103" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="47">cnOID<pos:position pos:line="103" pos:column="52"/></name></expr></argument>)<pos:position pos:line="103" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="54"/></expr_stmt>
      <if pos:line="104" pos:column="7">if<condition pos:line="104" pos:column="9">(<expr><name><name pos:line="104" pos:column="10">elem<pos:position pos:line="104" pos:column="14"/></name><operator pos:line="104" pos:column="14">.<pos:position pos:line="104" pos:column="15"/></operator><name pos:line="104" pos:column="15">beg<pos:position pos:line="104" pos:column="18"/></name></name></expr>)<pos:position pos:line="104" pos:column="19"/></condition><then pos:line="104" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="9">name<pos:position pos:line="105" pos:column="13"/></name> <operator pos:line="105" pos:column="14">=<pos:position pos:line="105" pos:column="15"/></operator> <name pos:line="105" pos:column="16">elem<pos:position pos:line="105" pos:column="20"/></name></expr>;<pos:position pos:line="105" pos:column="21"/></expr_stmt></block></then></if>    <comment type="block" pos:line="105" pos:column="25">/* Latch CN. */</comment>
    }<pos:position pos:line="106" pos:column="6"/></block></for>
  }<pos:position pos:line="107" pos:column="4"/></block></while>

  <comment type="block" pos:line="109" pos:column="3">/* Check the CN if found. */</comment>
  <if pos:line="110" pos:column="3">if<condition pos:line="110" pos:column="5">(<expr><operator pos:line="110" pos:column="6">!<pos:position pos:line="110" pos:column="7"/></operator><call><name pos:line="110" pos:column="7">Curl_getASN1Element<pos:position pos:line="110" pos:column="26"/></name><argument_list pos:line="110" pos:column="26">(<argument><expr><operator pos:line="110" pos:column="27">&amp;<pos:position pos:line="110" pos:column="32"/></operator><name pos:line="110" pos:column="28">elem<pos:position pos:line="110" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="34">name<pos:position pos:line="110" pos:column="38"/></name><operator pos:line="110" pos:column="38">.<pos:position pos:line="110" pos:column="39"/></operator><name pos:line="110" pos:column="39">beg<pos:position pos:line="110" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="44">name<pos:position pos:line="110" pos:column="48"/></name><operator pos:line="110" pos:column="48">.<pos:position pos:line="110" pos:column="49"/></operator><name pos:line="110" pos:column="49">end<pos:position pos:line="110" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="110" pos:column="54"/></condition><then pos:line="110" pos:column="54">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="5">failf<pos:position pos:line="111" pos:column="10"/></name><argument_list pos:line="111" pos:column="10">(<argument><expr><name pos:line="111" pos:column="11">data<pos:position pos:line="111" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="17">"SSL: unable to obtain common name from peer certificate"<pos:position pos:line="111" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="76"/></expr_stmt></block></then>
  <else pos:line="112" pos:column="3">else <block pos:line="112" pos:column="8">{
    <expr_stmt><expr><name pos:line="113" pos:column="5">len<pos:position pos:line="113" pos:column="8"/></name> <operator pos:line="113" pos:column="9">=<pos:position pos:line="113" pos:column="10"/></operator> <call><name pos:line="113" pos:column="11">utf8asn1str<pos:position pos:line="113" pos:column="22"/></name><argument_list pos:line="113" pos:column="22">(<argument><expr><operator pos:line="113" pos:column="23">&amp;<pos:position pos:line="113" pos:column="28"/></operator><name pos:line="113" pos:column="24">dnsname<pos:position pos:line="113" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="33">elem<pos:position pos:line="113" pos:column="37"/></name><operator pos:line="113" pos:column="37">.<pos:position pos:line="113" pos:column="38"/></operator><name pos:line="113" pos:column="38">tag<pos:position pos:line="113" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="43">elem<pos:position pos:line="113" pos:column="47"/></name><operator pos:line="113" pos:column="47">.<pos:position pos:line="113" pos:column="48"/></operator><name pos:line="113" pos:column="48">beg<pos:position pos:line="113" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="53">elem<pos:position pos:line="113" pos:column="57"/></name><operator pos:line="113" pos:column="57">.<pos:position pos:line="113" pos:column="58"/></operator><name pos:line="113" pos:column="58">end<pos:position pos:line="113" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="113" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="63"/></expr_stmt>
    <if pos:line="114" pos:column="5">if<condition pos:line="114" pos:column="7">(<expr><name pos:line="114" pos:column="8">len<pos:position pos:line="114" pos:column="11"/></name> <operator pos:line="114" pos:column="12">&lt;<pos:position pos:line="114" pos:column="16"/></operator> <literal type="number" pos:line="114" pos:column="14">0<pos:position pos:line="114" pos:column="15"/></literal></expr>)<pos:position pos:line="114" pos:column="16"/></condition><then pos:line="114" pos:column="16"> <block pos:line="114" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="115" pos:column="7">free<pos:position pos:line="115" pos:column="11"/></name><argument_list pos:line="115" pos:column="11">(<argument><expr><name pos:line="115" pos:column="12">dnsname<pos:position pos:line="115" pos:column="19"/></name></expr></argument>)<pos:position pos:line="115" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="21"/></expr_stmt>
      <return pos:line="116" pos:column="7">return <expr><name pos:line="116" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="116" pos:column="33"/></name></expr>;<pos:position pos:line="116" pos:column="34"/></return>
    }<pos:position pos:line="117" pos:column="6"/></block></then></if>
    <if pos:line="118" pos:column="5">if<condition pos:line="118" pos:column="7">(<expr><call><name pos:line="118" pos:column="8">strlen<pos:position pos:line="118" pos:column="14"/></name><argument_list pos:line="118" pos:column="14">(<argument><expr><name pos:line="118" pos:column="15">dnsname<pos:position pos:line="118" pos:column="22"/></name></expr></argument>)<pos:position pos:line="118" pos:column="23"/></argument_list></call> <operator pos:line="118" pos:column="24">!=<pos:position pos:line="118" pos:column="26"/></operator> <operator pos:line="118" pos:column="27">(<pos:position pos:line="118" pos:column="28"/></operator><name pos:line="118" pos:column="28">size_t<pos:position pos:line="118" pos:column="34"/></name><operator pos:line="118" pos:column="34">)<pos:position pos:line="118" pos:column="35"/></operator> <name pos:line="118" pos:column="36">len<pos:position pos:line="118" pos:column="39"/></name></expr>)<pos:position pos:line="118" pos:column="40"/></condition><then pos:line="118" pos:column="40">         <comment type="block" pos:line="118" pos:column="49">/* Nul byte in string ? */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="119" pos:column="7">failf<pos:position pos:line="119" pos:column="12"/></name><argument_list pos:line="119" pos:column="12">(<argument><expr><name pos:line="119" pos:column="13">data<pos:position pos:line="119" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="19">"SSL: illegal cert name field"<pos:position pos:line="119" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="51"/></expr_stmt></block></then>
    <elseif pos:line="120" pos:column="5">else <if pos:line="120" pos:column="10">if<condition pos:line="120" pos:column="12">(<expr><call><name pos:line="120" pos:column="13">Curl_cert_hostcheck<pos:position pos:line="120" pos:column="32"/></name><argument_list pos:line="120" pos:column="32">(<argument><expr><operator pos:line="120" pos:column="33">(<pos:position pos:line="120" pos:column="34"/></operator><specifier pos:line="120" pos:column="34">const<pos:position pos:line="120" pos:column="39"/></specifier> <name pos:line="120" pos:column="40">char<pos:position pos:line="120" pos:column="44"/></name> <operator pos:line="120" pos:column="45">*<pos:position pos:line="120" pos:column="46"/></operator><operator pos:line="120" pos:column="46">)<pos:position pos:line="120" pos:column="47"/></operator> <name pos:line="120" pos:column="48">dnsname<pos:position pos:line="120" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="57">hostname<pos:position pos:line="120" pos:column="65"/></name></expr></argument>)<pos:position pos:line="120" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="67"/></condition><then pos:line="120" pos:column="67"> <block pos:line="120" pos:column="68">{
      <macro><name pos:line="121" pos:column="7">in<pos:position pos:line="121" pos:column="9"/></name></macro></block></then></if></elseif></if></block></else></if></block></function></unit>
