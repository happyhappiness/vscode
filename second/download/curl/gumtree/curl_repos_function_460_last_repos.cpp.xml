<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_460_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">URL<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">result<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">O_BINARY<pos:position pos:line="6" pos:column="16"/></name></cpp:ifdef>
<cpp:ifdef pos:line="7" pos:column="1">#  <cpp:directive pos:line="7" pos:column="4">ifdef<pos:position pos:line="7" pos:column="9"/></cpp:directive> <name pos:line="7" pos:column="10">__HIGHC__<pos:position pos:line="7" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">_setmode<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">stdout<pos:position pos:line="8" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">O_BINARY<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
<cpp:else pos:line="9" pos:column="1">#  <cpp:directive pos:line="9" pos:column="4">else<pos:position pos:line="9" pos:column="8"/></cpp:directive></cpp:else>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">setmode<pos:position pos:line="10" pos:column="10"/></name><argument_list pos:line="10" pos:column="10">(<argument><expr><call><name pos:line="10" pos:column="11">fileno<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">stdout<pos:position pos:line="10" pos:column="24"/></name></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="10" pos:column="27">O_BINARY<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="11" pos:column="1">#  <cpp:directive pos:line="11" pos:column="4">endif<pos:position pos:line="11" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">memory_tracking_init<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">()<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/*
   * Setup proper locale from environment. This is needed to enable locale-
   * specific behaviour by the C library in order to test for undesired side
   * effects that could cause in libcurl.
   */</comment>
<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">HAVE_SETLOCALE<pos:position pos:line="21" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">setlocale<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">LC_ALL<pos:position pos:line="22" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="21">""<pos:position pos:line="22" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">argc<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">&lt;<pos:position pos:line="25" pos:column="14"/></operator> <literal type="number" pos:line="25" pos:column="12">2<pos:position pos:line="25" pos:column="13"/></literal></expr>)<pos:position pos:line="25" pos:column="14"/></condition><then pos:line="25" pos:column="14"> <block pos:line="25" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">fprintf<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">stderr<pos:position pos:line="26" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="21">"Pass URL as argument please\n"<pos:position pos:line="26" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><literal type="number" pos:line="27" pos:column="12">1<pos:position pos:line="27" pos:column="13"/></literal></expr>;<pos:position pos:line="27" pos:column="14"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="30" pos:column="3">test_argc<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <name pos:line="30" pos:column="15">argc<pos:position pos:line="30" pos:column="19"/></name></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="31" pos:column="3">test_argv<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <name pos:line="31" pos:column="15">argv<pos:position pos:line="31" pos:column="19"/></name></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>

  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><name pos:line="33" pos:column="6">argc<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">&gt;<pos:position pos:line="33" pos:column="14"/></operator><literal type="number" pos:line="33" pos:column="11">2<pos:position pos:line="33" pos:column="12"/></literal></expr>)<pos:position pos:line="33" pos:column="13"/></condition><then pos:line="33" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="5">libtest_arg2<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <name><name pos:line="34" pos:column="20">argv<pos:position pos:line="34" pos:column="24"/></name><index pos:line="34" pos:column="24">[<expr><literal type="number" pos:line="34" pos:column="25">2<pos:position pos:line="34" pos:column="26"/></literal></expr>]<pos:position pos:line="34" pos:column="27"/></index></name></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt></block></then></if>

  <if pos:line="36" pos:column="3">if<condition pos:line="36" pos:column="5">(<expr><name pos:line="36" pos:column="6">argc<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">&gt;<pos:position pos:line="36" pos:column="14"/></operator><literal type="number" pos:line="36" pos:column="11">3<pos:position pos:line="36" pos:column="12"/></literal></expr>)<pos:position pos:line="36" pos:column="13"/></condition><then pos:line="36" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="5">libtest_arg3<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <name><name pos:line="37" pos:column="20">argv<pos:position pos:line="37" pos:column="24"/></name><index pos:line="37" pos:column="24">[<expr><literal type="number" pos:line="37" pos:column="25">3<pos:position pos:line="37" pos:column="26"/></literal></expr>]<pos:position pos:line="37" pos:column="27"/></index></name></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="39" pos:column="3">URL<pos:position pos:line="39" pos:column="6"/></name> <operator pos:line="39" pos:column="7">=<pos:position pos:line="39" pos:column="8"/></operator> <name><name pos:line="39" pos:column="9">argv<pos:position pos:line="39" pos:column="13"/></name><index pos:line="39" pos:column="13">[<expr><literal type="number" pos:line="39" pos:column="14">1<pos:position pos:line="39" pos:column="15"/></literal></expr>]<pos:position pos:line="39" pos:column="16"/></index></name></expr>;<pos:position pos:line="39" pos:column="17"/></expr_stmt> <comment type="block" pos:line="39" pos:column="18">/* provide this to the rest */</comment>

  <expr_stmt><expr><call><name pos:line="41" pos:column="3">fprintf<pos:position pos:line="41" pos:column="10"/></name><argument_list pos:line="41" pos:column="10">(<argument><expr><name pos:line="41" pos:column="11">stderr<pos:position pos:line="41" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="19">"URL: %s\n"<pos:position pos:line="41" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="32">URL<pos:position pos:line="41" pos:column="35"/></name></expr></argument>)<pos:position pos:line="41" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="43" pos:column="3">result<pos:position pos:line="43" pos:column="9"/></name> <operator pos:line="43" pos:column="10">=<pos:position pos:line="43" pos:column="11"/></operator> <call><name pos:line="43" pos:column="12">test<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">URL<pos:position pos:line="43" pos:column="20"/></name></expr></argument>)<pos:position pos:line="43" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>

<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">USE_NSS<pos:position pos:line="45" pos:column="15"/></name></cpp:ifdef>
  <if pos:line="46" pos:column="3">if<condition pos:line="46" pos:column="5">(<expr><call><name pos:line="46" pos:column="6">PR_Initialized<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">()<pos:position pos:line="46" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="23"/></condition><then pos:line="46" pos:column="23">
    <comment type="block" pos:line="47" pos:column="5">/* prevent valgrind from reporting possibly lost memory (fd cache, ...) */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="5">PR_Cleanup<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">()<pos:position pos:line="48" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt></block></then></if>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="51" pos:column="3">return <expr><name pos:line="51" pos:column="10">result<pos:position pos:line="51" pos:column="16"/></name></expr>;<pos:position pos:line="51" pos:column="17"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
