<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1938_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">init_wc_data<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">connectdata<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">conn<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">last_slash<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">path<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name><name pos:line="4" pos:column="16">conn<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">-&gt;<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="22">data<pos:position pos:line="4" pos:column="26"/></name><operator pos:line="4" pos:column="26">-&gt;<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="28">state<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">.<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="34">path<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">WildcardData<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">wildcard<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><operator pos:line="5" pos:column="35">&amp;<pos:position pos:line="5" pos:column="40"/></operator><operator pos:line="5" pos:column="36">(<pos:position pos:line="5" pos:column="37"/></operator><name><name pos:line="5" pos:column="37">conn<pos:position pos:line="5" pos:column="41"/></name><operator pos:line="5" pos:column="41">-&gt;<pos:position pos:line="5" pos:column="46"/></operator><name pos:line="5" pos:column="43">data<pos:position pos:line="5" pos:column="47"/></name><operator pos:line="5" pos:column="47">-&gt;<pos:position pos:line="5" pos:column="52"/></operator><name pos:line="5" pos:column="49">wildcard<pos:position pos:line="5" pos:column="57"/></name></name><operator pos:line="5" pos:column="57">)<pos:position pos:line="5" pos:column="58"/></operator></expr></init></decl>;<pos:position pos:line="5" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">CURLE_OK<pos:position pos:line="6" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">ftp_wc_tmpdata<pos:position pos:line="7" pos:column="24"/></name></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type><name pos:line="7" pos:column="26">ftp_tmp<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">last_slash<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">strrchr<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name><name pos:line="9" pos:column="24">conn<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">data<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">-&gt;<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="36">state<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">.<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">path<pos:position pos:line="9" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="48">'/'<pos:position pos:line="9" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="53"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">last_slash<pos:position pos:line="10" pos:column="16"/></name></expr>)<pos:position pos:line="10" pos:column="17"/></condition><then pos:line="10" pos:column="17"> <block pos:line="10" pos:column="18">{
    <expr_stmt><expr><name pos:line="11" pos:column="5">last_slash<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">++<pos:position pos:line="11" pos:column="17"/></operator></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt>
    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">(<expr><name><name pos:line="12" pos:column="8">last_slash<pos:position pos:line="12" pos:column="18"/></name><index pos:line="12" pos:column="18">[<expr><literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr>]<pos:position pos:line="12" pos:column="21"/></index></name> <operator pos:line="12" pos:column="22">==<pos:position pos:line="12" pos:column="24"/></operator> <literal type="char" pos:line="12" pos:column="25">'\0'<pos:position pos:line="12" pos:column="29"/></literal></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30"> <block pos:line="12" pos:column="31">{
      <expr_stmt><expr><name><name pos:line="13" pos:column="7">wildcard<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">state<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">CURLWC_CLEAN<pos:position pos:line="13" pos:column="37"/></name></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="14" pos:column="7">result<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">ftp_parse_url_path<pos:position pos:line="14" pos:column="34"/></name><argument_list pos:line="14" pos:column="34">(<argument><expr><name pos:line="14" pos:column="35">conn<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
      <return pos:line="15" pos:column="7">return <expr><name pos:line="15" pos:column="14">result<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">wildcard<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">pattern<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <call><name pos:line="17" pos:column="25">strdup<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">last_slash<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">(<expr><operator pos:line="18" pos:column="8">!<pos:position pos:line="18" pos:column="9"/></operator><name><name pos:line="18" pos:column="9">wildcard<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">pattern<pos:position pos:line="18" pos:column="26"/></name></name></expr>)<pos:position pos:line="18" pos:column="27"/></condition><then pos:line="18" pos:column="27">
      <block type="pseudo"><return pos:line="19" pos:column="7">return <expr><name pos:line="19" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="19" pos:column="33"/></name></expr>;<pos:position pos:line="19" pos:column="34"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">last_slash<pos:position pos:line="20" pos:column="15"/></name><index pos:line="20" pos:column="15">[<expr><literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>]<pos:position pos:line="20" pos:column="18"/></index></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <literal type="char" pos:line="20" pos:column="21">'\0'<pos:position pos:line="20" pos:column="25"/></literal></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt> <comment type="block" pos:line="20" pos:column="27">/* cut file from path */</comment>
  }<pos:position pos:line="21" pos:column="4"/></block></then>
  <else pos:line="22" pos:column="3">else <block pos:line="22" pos:column="8">{ <comment type="block" pos:line="22" pos:column="10">/* there is only 'wildcard pattern' or nothing */</comment>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><name><name pos:line="23" pos:column="8">path<pos:position pos:line="23" pos:column="12"/></name><index pos:line="23" pos:column="12">[<expr><literal type="number" pos:line="23" pos:column="13">0<pos:position pos:line="23" pos:column="14"/></literal></expr>]<pos:position pos:line="23" pos:column="15"/></index></name></expr>)<pos:position pos:line="23" pos:column="16"/></condition><then pos:line="23" pos:column="16"> <block pos:line="23" pos:column="17">{
      <expr_stmt><expr><name><name pos:line="24" pos:column="7">wildcard<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">pattern<pos:position pos:line="24" pos:column="24"/></name></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <call><name pos:line="24" pos:column="27">strdup<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">path<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
      <if pos:line="25" pos:column="7">if<condition pos:line="25" pos:column="9">(<expr><operator pos:line="25" pos:column="10">!<pos:position pos:line="25" pos:column="11"/></operator><name><name pos:line="25" pos:column="11">wildcard<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">-&gt;<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="21">pattern<pos:position pos:line="25" pos:column="28"/></name></name></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29">
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">path<pos:position pos:line="27" pos:column="11"/></name><index pos:line="27" pos:column="11">[<expr><literal type="number" pos:line="27" pos:column="12">0<pos:position pos:line="27" pos:column="13"/></literal></expr>]<pos:position pos:line="27" pos:column="14"/></index></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <literal type="char" pos:line="27" pos:column="17">'\0'<pos:position pos:line="27" pos:column="21"/></literal></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then>
    <else pos:line="29" pos:column="5">else <block pos:line="29" pos:column="10">{ <comment type="block" pos:line="29" pos:column="12">/* only list */</comment>
      <expr_stmt><expr><name><name pos:line="30" pos:column="7">wildcard<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">-&gt;<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="17">state<pos:position pos:line="30" pos:column="22"/></name></name> <operator pos:line="30" pos:column="23">=<pos:position pos:line="30" pos:column="24"/></operator> <name pos:line="30" pos:column="25">CURLWC_CLEAN<pos:position pos:line="30" pos:column="37"/></name></expr>;<pos:position pos:line="30" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">result<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <call><name pos:line="31" pos:column="16">ftp_parse_url_path<pos:position pos:line="31" pos:column="34"/></name><argument_list pos:line="31" pos:column="34">(<argument><expr><name pos:line="31" pos:column="35">conn<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
      <return pos:line="32" pos:column="7">return <expr><name pos:line="32" pos:column="14">result<pos:position pos:line="32" pos:column="20"/></name></expr>;<pos:position pos:line="32" pos:column="21"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></else></if>
  }<pos:position pos:line="34" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="36" pos:column="3">/* program continues only if URL is not ending with slash, allocate needed
     resources for wildcard transfer */</comment>

  <comment type="block" pos:line="39" pos:column="3">/* allocate ftp protocol specific temporary wildcard data */</comment>
  <expr_stmt><expr><name pos:line="40" pos:column="3">ftp_tmp<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <call><name pos:line="40" pos:column="13">calloc<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><literal type="number" pos:line="40" pos:column="20">1<pos:position pos:line="40" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="23">sizeof<argument_list pos:line="40" pos:column="29">(<argument><expr pos:line="40" pos:column="30">struct <name pos:line="40" pos:column="37">ftp_wc_tmpdata<pos:position pos:line="40" pos:column="51"/></name></expr></argument>)<pos:position pos:line="40" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">(<expr><operator pos:line="41" pos:column="6">!<pos:position pos:line="41" pos:column="7"/></operator><name pos:line="41" pos:column="7">ftp_tmp<pos:position pos:line="41" pos:column="14"/></name></expr>)<pos:position pos:line="41" pos:column="15"/></condition><then pos:line="41" pos:column="15"> <block pos:line="41" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">Curl_safefree<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><name><name pos:line="42" pos:column="19">wildcard<pos:position pos:line="42" pos:column="27"/></name><operator pos:line="42" pos:column="27">-&gt;<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="29">pattern<pos:position pos:line="42" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
    <return pos:line="43" pos:column="5">return <expr><name pos:line="43" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="43" pos:column="31"/></name></expr>;<pos:position pos:line="43" pos:column="32"/></return>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="46" pos:column="3">/* INITIALIZE parselist structure */</comment>
  <expr_stmt><expr><name><name pos:line="47" pos:column="3">ftp_tmp<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">-&gt;<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="12">parser<pos:position pos:line="47" pos:column="18"/></name></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <call><name pos:line="47" pos:column="21">Curl_ftp_parselist_data_alloc<pos:position pos:line="47" pos:column="50"/></name><argument_list pos:line="47" pos:column="50">()<pos:position pos:line="47" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="53"/></expr_stmt>
  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><operator pos:line="48" pos:column="6">!<pos:position pos:line="48" pos:column="7"/></operator><name><name pos:line="48" pos:column="7">ftp_tmp<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">-&gt;<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="16">parser<pos:position pos:line="48" pos:column="22"/></name></name></expr>)<pos:position pos:line="48" pos:column="23"/></condition><then pos:line="48" pos:column="23"> <block pos:line="48" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">Curl_safefree<pos:position pos:line="49" pos:column="18"/></name><argument_list pos:line="49" pos:column="18">(<argument><expr><name><name pos:line="49" pos:column="19">wildcard<pos:position pos:line="49" pos:column="27"/></name><operator pos:line="49" pos:column="27">-&gt;<pos:position pos:line="49" pos:column="32"/></operator><name pos:line="49" pos:column="29">pattern<pos:position pos:line="49" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">free<pos:position pos:line="50" pos:column="9"/></name><argument_list pos:line="50" pos:column="9">(<argument><expr><name pos:line="50" pos:column="10">ftp_tmp<pos:position pos:line="50" pos:column="17"/></name></expr></argument>)<pos:position pos:line="50" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="19"/></expr_stmt>
    <return pos:line="51" pos:column="5">return <expr><name pos:line="51" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="51" pos:column="31"/></name></expr>;<pos:position pos:line="51" pos:column="32"/></return>
  }<pos:position pos:line="52" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="54" pos:column="3">wildcard<pos:position pos:line="54" pos:column="11"/></name><operator pos:line="54" pos:column="11">-&gt;<pos:position pos:line="54" pos:column="16"/></operator><name pos:line="54" pos:column="13">tmp<pos:position pos:line="54" pos:column="16"/></name></name> <operator pos:line="54" pos:column="17">=<pos:position pos:line="54" pos:column="18"/></operator> <name pos:line="54" pos:column="19">ftp_tmp<pos:position pos:line="54" pos:column="26"/></name></expr>;<pos:position pos:line="54" pos:column="27"/></expr_stmt> <comment type="block" pos:line="54" pos:column="28">/* put it to the WildcardData tmp pointer */</comment>
  <expr_stmt><expr><name><name pos:line="55" pos:column="3">wildcard<pos:position pos:line="55" pos:column="11"/></name><operator pos:line="55" pos:column="11">-&gt;<pos:position pos:line="55" pos:column="16"/></operator><name pos:line="55" pos:column="13">tmp_dtor<pos:position pos:line="55" pos:column="21"/></name></name> <operator pos:line="55" pos:column="22">=<pos:position pos:line="55" pos:column="23"/></operator> <name pos:line="55" pos:column="24">wc_data_dtor<pos:position pos:line="55" pos:column="36"/></name></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="57" pos:column="3">/* wildcard does not support NOCWD option (assert it?) */</comment>
  <if pos:line="58" pos:column="3">if<condition pos:line="58" pos:column="5">(<expr><name><name pos:line="58" pos:column="6">conn<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">data<pos:position pos:line="58" pos:column="16"/></name><operator pos:line="58" pos:column="16">-&gt;<pos:position pos:line="58" pos:column="21"/></operator><name pos:line="58" pos:column="18">set<pos:position pos:line="58" pos:column="21"/></name><operator pos:line="58" pos:column="21">.<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="22">ftp_filemethod<pos:position pos:line="58" pos:column="36"/></name></name> <operator pos:line="58" pos:column="37">==<pos:position pos:line="58" pos:column="39"/></operator> <name pos:line="58" pos:column="40">FTPFILE_NOCWD<pos:position pos:line="58" pos:column="53"/></name></expr>)<pos:position pos:line="58" pos:column="54"/></condition><then pos:line="58" pos:column="54">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="59" pos:column="5">conn<pos:position pos:line="59" pos:column="9"/></name><operator pos:line="59" pos:column="9">-&gt;<pos:position pos:line="59" pos:column="14"/></operator><name pos:line="59" pos:column="11">data<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">-&gt;<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="17">set<pos:position pos:line="59" pos:column="20"/></name><operator pos:line="59" pos:column="20">.<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="21">ftp_filemethod<pos:position pos:line="59" pos:column="35"/></name></name> <operator pos:line="59" pos:column="36">=<pos:position pos:line="59" pos:column="37"/></operator> <name pos:line="59" pos:column="38">FTPFILE_MULTICWD<pos:position pos:line="59" pos:column="54"/></name></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="61" pos:column="3">/* try to parse ftp url */</comment>
  <expr_stmt><expr><name pos:line="62" pos:column="3">result<pos:position pos:line="62" pos:column="9"/></name> <operator pos:line="62" pos:column="10">=<pos:position pos:line="62" pos:column="11"/></operator> <call><name pos:line="62" pos:column="12">ftp_parse_url_path<pos:position pos:line="62" pos:column="30"/></name><argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">conn<pos:position pos:line="62" pos:column="35"/></name></expr></argument>)<pos:position pos:line="62" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt>
  <if pos:line="63" pos:column="3">if<condition pos:line="63" pos:column="5">(<expr><name pos:line="63" pos:column="6">result<pos:position pos:line="63" pos:column="12"/></name></expr>)<pos:position pos:line="63" pos:column="13"/></condition><then pos:line="63" pos:column="13"> <block pos:line="63" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">Curl_safefree<pos:position pos:line="64" pos:column="18"/></name><argument_list pos:line="64" pos:column="18">(<argument><expr><name><name pos:line="64" pos:column="19">wildcard<pos:position pos:line="64" pos:column="27"/></name><operator pos:line="64" pos:column="27">-&gt;<pos:position pos:line="64" pos:column="32"/></operator><name pos:line="64" pos:column="29">pattern<pos:position pos:line="64" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="65" pos:column="5">wildcard<pos:position pos:line="65" pos:column="13"/></name><operator pos:line="65" pos:column="13">-&gt;<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="15">tmp_dtor<pos:position pos:line="65" pos:column="23"/></name></name><argument_list pos:line="65" pos:column="23">(<argument><expr><name><name pos:line="65" pos:column="24">wildcard<pos:position pos:line="65" pos:column="32"/></name><operator pos:line="65" pos:column="32">-&gt;<pos:position pos:line="65" pos:column="37"/></operator><name pos:line="65" pos:column="34">tmp<pos:position pos:line="65" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="66" pos:column="5">wildcard<pos:position pos:line="66" pos:column="13"/></name><operator pos:line="66" pos:column="13">-&gt;<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="15">tmp_dtor<pos:position pos:line="66" pos:column="23"/></name></name> <operator pos:line="66" pos:column="24">=<pos:position pos:line="66" pos:column="25"/></operator> <name pos:line="66" pos:column="26">ZERO_NULL<pos:position pos:line="66" pos:column="35"/></name></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="67" pos:column="5">wildcard<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">-&gt;<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="15">tmp<pos:position pos:line="67" pos:column="18"/></name></name> <operator pos:line="67" pos:column="19">=<pos:position pos:line="67" pos:column="20"/></operator> <name pos:line="67" pos:column="21">NULL<pos:position pos:line="67" pos:column="25"/></name></expr>;<pos:position pos:line="67" pos:column="26"/></expr_stmt>
    <return pos:line="68" pos:column="5">return <expr><name pos:line="68" pos:column="12">result<pos:position pos:line="68" pos:column="18"/></name></expr>;<pos:position pos:line="68" pos:column="19"/></return>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="71" pos:column="3">wildcard<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">path<pos:position pos:line="71" pos:column="17"/></name></name> <operator pos:line="71" pos:column="18">=<pos:position pos:line="71" pos:column="19"/></operator> <call><name pos:line="71" pos:column="20">strdup<pos:position pos:line="71" pos:column="26"/></name><argument_list pos:line="71" pos:column="26">(<argument><expr><name><name pos:line="71" pos:column="27">conn<pos:position pos:line="71" pos:column="31"/></name><operator pos:line="71" pos:column="31">-&gt;<pos:position pos:line="71" pos:column="36"/></operator><name pos:line="71" pos:column="33">data<pos:position pos:line="71" pos:column="37"/></name><operator pos:line="71" pos:column="37">-&gt;<pos:position pos:line="71" pos:column="42"/></operator><name pos:line="71" pos:column="39">state<pos:position pos:line="71" pos:column="44"/></name><operator pos:line="71" pos:column="44">.<pos:position pos:line="71" pos:column="45"/></operator><name pos:line="71" pos:column="45">path<pos:position pos:line="71" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="51"/></expr_stmt>
  <if pos:line="72" pos:column="3">if<condition pos:line="72" pos:column="5">(<expr><operator pos:line="72" pos:column="6">!<pos:position pos:line="72" pos:column="7"/></operator><name><name pos:line="72" pos:column="7">wildcard<pos:position pos:line="72" pos:column="15"/></name><operator pos:line="72" pos:column="15">-&gt;<pos:position pos:line="72" pos:column="20"/></operator><name pos:line="72" pos:column="17">path<pos:position pos:line="72" pos:column="21"/></name></name></expr>)<pos:position pos:line="72" pos:column="22"/></condition><then pos:line="72" pos:column="22"> <block pos:line="72" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">Curl_safefree<pos:position pos:line="73" pos:column="18"/></name><argument_list pos:line="73" pos:column="18">(<argument><expr><name><name pos:line="73" pos:column="19">wildcard<pos:position pos:line="73" pos:column="27"/></name><operator pos:line="73" pos:column="27">-&gt;<pos:position pos:line="73" pos:column="32"/></operator><name pos:line="73" pos:column="29">pattern<pos:position pos:line="73" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="74" pos:column="5">wildcard<pos:position pos:line="74" pos:column="13"/></name><operator pos:line="74" pos:column="13">-&gt;<pos:position pos:line="74" pos:column="18"/></operator><name pos:line="74" pos:column="15">tmp_dtor<pos:position pos:line="74" pos:column="23"/></name></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name><name pos:line="74" pos:column="24">wildcard<pos:position pos:line="74" pos:column="32"/></name><operator pos:line="74" pos:column="32">-&gt;<pos:position pos:line="74" pos:column="37"/></operator><name pos:line="74" pos:column="34">tmp<pos:position pos:line="74" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="75" pos:column="5">wildcard<pos:position pos:line="75" pos:column="13"/></name><operator pos:line="75" pos:column="13">-&gt;<pos:position pos:line="75" pos:column="18"/></operator><name pos:line="75" pos:column="15">tmp_dtor<pos:position pos:line="75" pos:column="23"/></name></name> <operator pos:line="75" pos:column="24">=<pos:position pos:line="75" pos:column="25"/></operator> <name pos:line="75" pos:column="26">ZERO_NULL<pos:position pos:line="75" pos:column="35"/></name></expr>;<pos:position pos:line="75" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="76" pos:column="5">wildcard<pos:position pos:line="76" pos:column="13"/></name><operator pos:line="76" pos:column="13">-&gt;<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="15">tmp<pos:position pos:line="76" pos:column="18"/></name></name> <operator pos:line="76" pos:column="19">=<pos:position pos:line="76" pos:column="20"/></operator> <name pos:line="76" pos:column="21">NULL<pos:position pos:line="76" pos:column="25"/></name></expr>;<pos:position pos:line="76" pos:column="26"/></expr_stmt>
    <return pos:line="77" pos:column="5">return <expr><name pos:line="77" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="77" pos:column="31"/></name></expr>;<pos:position pos:line="77" pos:column="32"/></return>
  }<pos:position pos:line="78" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="80" pos:column="3">/* backup old write_function */</comment>
  <expr_stmt><expr><name><name pos:line="81" pos:column="3">ftp_tmp<pos:position pos:line="81" pos:column="10"/></name><operator pos:line="81" pos:column="10">-&gt;<pos:position pos:line="81" pos:column="15"/></operator><name pos:line="81" pos:column="12">backup<pos:position pos:line="81" pos:column="18"/></name><operator pos:line="81" pos:column="18">.<pos:position pos:line="81" pos:column="19"/></operator><name pos:line="81" pos:column="19">write_function<pos:position pos:line="81" pos:column="33"/></name></name> <operator pos:line="81" pos:column="34">=<pos:position pos:line="81" pos:column="35"/></operator> <name><name pos:line="81" pos:column="36">conn<pos:position pos:line="81" pos:column="40"/></name><operator pos:line="81" pos:column="40">-&gt;<pos:position pos:line="81" pos:column="45"/></operator><name pos:line="81" pos:column="42">data<pos:position pos:line="81" pos:column="46"/></name><operator pos:line="81" pos:column="46">-&gt;<pos:position pos:line="81" pos:column="51"/></operator><name pos:line="81" pos:column="48">set<pos:position pos:line="81" pos:column="51"/></name><operator pos:line="81" pos:column="51">.<pos:position pos:line="81" pos:column="52"/></operator><name pos:line="81" pos:column="52">fwrite_func<pos:position pos:line="81" pos:column="63"/></name></name></expr>;<pos:position pos:line="81" pos:column="64"/></expr_stmt>
  <comment type="block" pos:line="82" pos:column="3">/* parsing write function */</comment>
  <expr_stmt><expr><name><name pos:line="83" pos:column="3">conn<pos:position pos:line="83" pos:column="7"/></name><operator pos:line="83" pos:column="7">-&gt;<pos:position pos:line="83" pos:column="12"/></operator><name pos:line="83" pos:column="9">data<pos:position pos:line="83" pos:column="13"/></name><operator pos:line="83" pos:column="13">-&gt;<pos:position pos:line="83" pos:column="18"/></operator><name pos:line="83" pos:column="15">set<pos:position pos:line="83" pos:column="18"/></name><operator pos:line="83" pos:column="18">.<pos:position pos:line="83" pos:column="19"/></operator><name pos:line="83" pos:column="19">fwrite_func<pos:position pos:line="83" pos:column="30"/></name></name> <operator pos:line="83" pos:column="31">=<pos:position pos:line="83" pos:column="32"/></operator> <name pos:line="83" pos:column="33">Curl_ftp_parselist<pos:position pos:line="83" pos:column="51"/></name></expr>;<pos:position pos:line="83" pos:column="52"/></expr_stmt>
  <comment type="block" pos:line="84" pos:column="3">/* backup old file descriptor */</comment>
  <expr_stmt><expr><name><name pos:line="85" pos:column="3">ftp_tmp<pos:position pos:line="85" pos:column="10"/></name><operator pos:line="85" pos:column="10">-&gt;<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="12">backup<pos:position pos:line="85" pos:column="18"/></name><operator pos:line="85" pos:column="18">.<pos:position pos:line="85" pos:column="19"/></operator><name pos:line="85" pos:column="19">file_descriptor<pos:position pos:line="85" pos:column="34"/></name></name> <operator pos:line="85" pos:column="35">=<pos:position pos:line="85" pos:column="36"/></operator> <name><name pos:line="85" pos:column="37">conn<pos:position pos:line="85" pos:column="41"/></name><operator pos:line="85" pos:column="41">-&gt;<pos:position pos:line="85" pos:column="46"/></operator><name pos:line="85" pos:column="43">data<pos:position pos:line="85" pos:column="47"/></name><operator pos:line="85" pos:column="47">-&gt;<pos:position pos:line="85" pos:column="52"/></operator><name pos:line="85" pos:column="49">set<pos:position pos:line="85" pos:column="52"/></name><operator pos:line="85" pos:column="52">.<pos:position pos:line="85" pos:column="53"/></operator><name pos:line="85" pos:column="53">out<pos:position pos:line="85" pos:column="56"/></name></name></expr>;<pos:position pos:line="85" pos:column="57"/></expr_stmt>
  <comment type="block" pos:line="86" pos:column="3">/* let the writefunc callback know what curl pointer is working with */</comment>
  <expr_stmt><expr><name><name pos:line="87" pos:column="3">conn<pos:position pos:line="87" pos:column="7"/></name><operator pos:line="87" pos:column="7">-&gt;<pos:position pos:line="87" pos:column="12"/></operator><name pos:line="87" pos:column="9">data<pos:position pos:line="87" pos:column="13"/></name><operator pos:line="87" pos:column="13">-&gt;<pos:position pos:line="87" pos:column="18"/></operator><name pos:line="87" pos:column="15">set<pos:position pos:line="87" pos:column="18"/></name><operator pos:line="87" pos:column="18">.<pos:position pos:line="87" pos:column="19"/></operator><name pos:line="87" pos:column="19">out<pos:position pos:line="87" pos:column="22"/></name></name> <operator pos:line="87" pos:column="23">=<pos:position pos:line="87" pos:column="24"/></operator> <name pos:line="87" pos:column="25">conn<pos:position pos:line="87" pos:column="29"/></name></expr>;<pos:position pos:line="87" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="89" pos:column="3">infof<pos:position pos:line="89" pos:column="8"/></name><argument_list pos:line="89" pos:column="8">(<argument><expr><name><name pos:line="89" pos:column="9">conn<pos:position pos:line="89" pos:column="13"/></name><operator pos:line="89" pos:column="13">-&gt;<pos:position pos:line="89" pos:column="18"/></operator><name pos:line="89" pos:column="15">data<pos:position pos:line="89" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="21">"Wildcard - Parsing started\n"<pos:position pos:line="89" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="53"/></expr_stmt>
  <return pos:line="90" pos:column="3">return <expr><name pos:line="90" pos:column="10">CURLE_OK<pos:position pos:line="90" pos:column="18"/></name></expr>;<pos:position pos:line="90" pos:column="19"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
