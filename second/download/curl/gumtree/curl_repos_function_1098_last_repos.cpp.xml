<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1098_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">on_header<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">nghttp2_session<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">session<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">nghttp2_frame<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">frame<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">uint8_t<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">name<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">size_t<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">namelen<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="3" pos:column="22">const<pos:position pos:line="3" pos:column="27"/></specifier> <name pos:line="3" pos:column="28">uint8_t<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">value<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="44">size_t<pos:position pos:line="3" pos:column="50"/></name></type> <name pos:line="3" pos:column="51">valuelen<pos:position pos:line="3" pos:column="59"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="4" pos:column="22">uint8_t<pos:position pos:line="4" pos:column="29"/></name></type> <name pos:line="4" pos:column="30">flags<pos:position pos:line="4" pos:column="35"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="5" pos:column="22">void<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">userp<pos:position pos:line="5" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="34"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">HTTP<pos:position pos:line="7" pos:column="14"/></name></name> <modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">stream<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Curl_easy<pos:position pos:line="8" pos:column="19"/></name></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">data_s<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int32_t<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">stream_id<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><name><name pos:line="9" pos:column="23">frame<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">hd<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">.<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">stream_id<pos:position pos:line="9" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">connectdata<pos:position pos:line="10" pos:column="21"/></name></name> <modifier pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></modifier></type><name pos:line="10" pos:column="23">conn<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><operator pos:line="10" pos:column="30">(<pos:position pos:line="10" pos:column="31"/></operator>struct <name pos:line="10" pos:column="38">connectdata<pos:position pos:line="10" pos:column="49"/></name> <operator pos:line="10" pos:column="50">*<pos:position pos:line="10" pos:column="51"/></operator><operator pos:line="10" pos:column="51">)<pos:position pos:line="10" pos:column="52"/></operator><name pos:line="10" pos:column="52">userp<pos:position pos:line="10" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="58"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="11" pos:column="3">(<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">void<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">)<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">flags<pos:position pos:line="11" pos:column="14"/></name></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">DEBUGASSERT<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">stream_id<pos:position pos:line="13" pos:column="24"/></name></expr></argument>)<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt> <comment type="block" pos:line="13" pos:column="27">/* should never be a zero stream ID here */</comment>

  <comment type="block" pos:line="15" pos:column="3">/* get the stream from the hash based on Stream ID */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">data_s<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">nghttp2_session_get_stream_user_data<pos:position pos:line="16" pos:column="48"/></name><argument_list pos:line="16" pos:column="48">(<argument><expr><name pos:line="16" pos:column="49">session<pos:position pos:line="16" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="58">stream_id<pos:position pos:line="16" pos:column="67"/></name></expr></argument>)<pos:position pos:line="16" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="69"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">data_s<pos:position pos:line="17" pos:column="13"/></name></expr>)<pos:position pos:line="17" pos:column="14"/></condition><then pos:line="17" pos:column="14">
    <comment type="block" pos:line="18" pos:column="5">/* Receiving a Stream ID not in the hash should not happen, this is an
       internal error more than anything else! */</comment>
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">NGHTTP2_ERR_CALLBACK_FAILURE<pos:position pos:line="20" pos:column="40"/></name></expr>;<pos:position pos:line="20" pos:column="41"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">stream<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <name><name pos:line="22" pos:column="12">data_s<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">req<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">.<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">protop<pos:position pos:line="22" pos:column="30"/></name></name></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">!<pos:position pos:line="23" pos:column="7"/></operator><name pos:line="23" pos:column="7">stream<pos:position pos:line="23" pos:column="13"/></name></expr>)<pos:position pos:line="23" pos:column="14"/></condition><then pos:line="23" pos:column="14"> <block pos:line="23" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">failf<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><name pos:line="24" pos:column="11">data_s<pos:position pos:line="24" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="19">"Internal NULL stream! 5\n"<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">NGHTTP2_ERR_CALLBACK_FAILURE<pos:position pos:line="25" pos:column="40"/></name></expr>;<pos:position pos:line="25" pos:column="41"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="28" pos:column="3">/* Store received PUSH_PROMISE headers to be used when the subsequent
     PUSH_PROMISE callback comes */</comment>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name><name pos:line="30" pos:column="6">frame<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">hd<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">.<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">type<pos:position pos:line="30" pos:column="20"/></name></name> <operator pos:line="30" pos:column="21">==<pos:position pos:line="30" pos:column="23"/></operator> <name pos:line="30" pos:column="24">NGHTTP2_PUSH_PROMISE<pos:position pos:line="30" pos:column="44"/></name></expr>)<pos:position pos:line="30" pos:column="45"/></condition><then pos:line="30" pos:column="45"> <block pos:line="30" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">char<pos:position pos:line="31" pos:column="9"/></name> <modifier pos:line="31" pos:column="10">*<pos:position pos:line="31" pos:column="11"/></modifier></type><name pos:line="31" pos:column="11">h<pos:position pos:line="31" pos:column="12"/></name></decl>;<pos:position pos:line="31" pos:column="13"/></decl_stmt>

    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><operator pos:line="33" pos:column="8">!<pos:position pos:line="33" pos:column="9"/></operator><name><name pos:line="33" pos:column="9">stream<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">-&gt;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="17">push_headers<pos:position pos:line="33" pos:column="29"/></name></name></expr>)<pos:position pos:line="33" pos:column="30"/></condition><then pos:line="33" pos:column="30"> <block pos:line="33" pos:column="31">{
      <expr_stmt><expr><name><name pos:line="34" pos:column="7">stream<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">-&gt;<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="15">push_headers_alloc<pos:position pos:line="34" pos:column="33"/></name></name> <operator pos:line="34" pos:column="34">=<pos:position pos:line="34" pos:column="35"/></operator> <literal type="number" pos:line="34" pos:column="36">10<pos:position pos:line="34" pos:column="38"/></literal></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="35" pos:column="7">stream<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">-&gt;<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="15">push_headers<pos:position pos:line="35" pos:column="27"/></name></name> <operator pos:line="35" pos:column="28">=<pos:position pos:line="35" pos:column="29"/></operator> <call><name pos:line="35" pos:column="30">malloc<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><name><name pos:line="35" pos:column="37">stream<pos:position pos:line="35" pos:column="43"/></name><operator pos:line="35" pos:column="43">-&gt;<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="45">push_headers_alloc<pos:position pos:line="35" pos:column="63"/></name></name> <operator pos:line="35" pos:column="64">*<pos:position pos:line="35" pos:column="65"/></operator>
                                    <sizeof pos:line="36" pos:column="37">sizeof<argument_list pos:line="36" pos:column="43">(<argument><expr><name pos:line="36" pos:column="44">char<pos:position pos:line="36" pos:column="48"/></name> <operator pos:line="36" pos:column="49">*<pos:position pos:line="36" pos:column="50"/></operator></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="37" pos:column="7">stream<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">-&gt;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="15">push_headers_used<pos:position pos:line="37" pos:column="32"/></name></name> <operator pos:line="37" pos:column="33">=<pos:position pos:line="37" pos:column="34"/></operator> <literal type="number" pos:line="37" pos:column="35">0<pos:position pos:line="37" pos:column="36"/></literal></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then>
    <elseif pos:line="39" pos:column="5">else <if pos:line="39" pos:column="10">if<condition pos:line="39" pos:column="12">(<expr><name><name pos:line="39" pos:column="13">stream<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">-&gt;<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="21">push_headers_used<pos:position pos:line="39" pos:column="38"/></name></name> <operator pos:line="39" pos:column="39">==<pos:position pos:line="39" pos:column="41"/></operator>
            <name><name pos:line="40" pos:column="13">stream<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">-&gt;<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="21">push_headers_alloc<pos:position pos:line="40" pos:column="39"/></name></name></expr>)<pos:position pos:line="40" pos:column="40"/></condition><then pos:line="40" pos:column="40"> <block pos:line="40" pos:column="41">{
      <decl_stmt><decl><type><name pos:line="41" pos:column="7">char<pos:position pos:line="41" pos:column="11"/></name> <modifier pos:line="41" pos:column="12">*<pos:position pos:line="41" pos:column="13"/></modifier><modifier pos:line="41" pos:column="13">*<pos:position pos:line="41" pos:column="14"/></modifier></type><name pos:line="41" pos:column="14">headp<pos:position pos:line="41" pos:column="19"/></name></decl>;<pos:position pos:line="41" pos:column="20"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="42" pos:column="7">stream<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">-&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">push_headers_alloc<pos:position pos:line="42" pos:column="33"/></name></name> <operator pos:line="42" pos:column="34">*=<pos:position pos:line="42" pos:column="36"/></operator> <literal type="number" pos:line="42" pos:column="37">2<pos:position pos:line="42" pos:column="38"/></literal></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">headp<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <call><name pos:line="43" pos:column="15">Curl_saferealloc<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name><name pos:line="43" pos:column="32">stream<pos:position pos:line="43" pos:column="38"/></name><operator pos:line="43" pos:column="38">-&gt;<pos:position pos:line="43" pos:column="43"/></operator><name pos:line="43" pos:column="40">push_headers<pos:position pos:line="43" pos:column="52"/></name></name></expr></argument>,
                               <argument><expr><name><name pos:line="44" pos:column="32">stream<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">-&gt;<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="40">push_headers_alloc<pos:position pos:line="44" pos:column="58"/></name></name> <operator pos:line="44" pos:column="59">*<pos:position pos:line="44" pos:column="60"/></operator> <sizeof pos:line="44" pos:column="61">sizeof<argument_list pos:line="44" pos:column="67">(<argument><expr><name pos:line="44" pos:column="68">char<pos:position pos:line="44" pos:column="72"/></name> <operator pos:line="44" pos:column="73">*<pos:position pos:line="44" pos:column="74"/></operator></expr></argument>)<pos:position pos:line="44" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="77"/></expr_stmt>
      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><operator pos:line="45" pos:column="10">!<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">headp<pos:position pos:line="45" pos:column="16"/></name></expr>)<pos:position pos:line="45" pos:column="17"/></condition><then pos:line="45" pos:column="17"> <block pos:line="45" pos:column="18">{
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">stream<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">-&gt;<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="17">push_headers<pos:position pos:line="46" pos:column="29"/></name></name> <operator pos:line="46" pos:column="30">=<pos:position pos:line="46" pos:column="31"/></operator> <name pos:line="46" pos:column="32">NULL<pos:position pos:line="46" pos:column="36"/></name></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>
        <return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE<pos:position pos:line="47" pos:column="53"/></name></expr>;<pos:position pos:line="47" pos:column="54"/></return>
      }<pos:position pos:line="48" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="49" pos:column="7">stream<pos:position pos:line="49" pos:column="13"/></name><operator pos:line="49" pos:column="13">-&gt;<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="15">push_headers<pos:position pos:line="49" pos:column="27"/></name></name> <operator pos:line="49" pos:column="28">=<pos:position pos:line="49" pos:column="29"/></operator> <name pos:line="49" pos:column="30">headp<pos:position pos:line="49" pos:column="35"/></name></expr>;<pos:position pos:line="49" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if></elseif></if>
    <expr_stmt><expr><name pos:line="51" pos:column="5">h<pos:position pos:line="51" pos:column="6"/></name> <operator pos:line="51" pos:column="7">=<pos:position pos:line="51" pos:column="8"/></operator> <call><name pos:line="51" pos:column="9">aprintf<pos:position pos:line="51" pos:column="16"/></name><argument_list pos:line="51" pos:column="16">(<argument><expr><literal type="string" pos:line="51" pos:column="17">"%s:%s"<pos:position pos:line="51" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="26">name<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="32">value<pos:position pos:line="51" pos:column="37"/></name></expr></argument>)<pos:position pos:line="51" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><name pos:line="52" pos:column="8">h<pos:position pos:line="52" pos:column="9"/></name></expr>)<pos:position pos:line="52" pos:column="10"/></condition><then pos:line="52" pos:column="10">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="53" pos:column="7">stream<pos:position pos:line="53" pos:column="13"/></name><operator pos:line="53" pos:column="13">-&gt;<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="15">push_headers<pos:position pos:line="53" pos:column="27"/></name><index pos:line="53" pos:column="27">[<expr><name><name pos:line="53" pos:column="28">stream<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">push_headers_used<pos:position pos:line="53" pos:column="53"/></name></name><operator pos:line="53" pos:column="53">++<pos:position pos:line="53" pos:column="55"/></operator></expr>]<pos:position pos:line="53" pos:column="56"/></index></name> <operator pos:line="53" pos:column="57">=<pos:position pos:line="53" pos:column="58"/></operator> <name pos:line="53" pos:column="59">h<pos:position pos:line="53" pos:column="60"/></name></expr>;<pos:position pos:line="53" pos:column="61"/></expr_stmt></block></then></if>
    <return pos:line="54" pos:column="5">return <expr><literal type="number" pos:line="54" pos:column="12">0<pos:position pos:line="54" pos:column="13"/></literal></expr>;<pos:position pos:line="54" pos:column="14"/></return>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

  <if pos:line="57" pos:column="3">if<condition pos:line="57" pos:column="5">(<expr><name><name pos:line="57" pos:column="6">stream<pos:position pos:line="57" pos:column="12"/></name><operator pos:line="57" pos:column="12">-&gt;<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="14">bodystarted<pos:position pos:line="57" pos:column="25"/></name></name></expr>)<pos:position pos:line="57" pos:column="26"/></condition><then pos:line="57" pos:column="26"> <block pos:line="57" pos:column="27">{
    <comment type="block" pos:line="58" pos:column="5">/* This is trailer fields. */</comment>
    <comment type="block" pos:line="59" pos:column="5">/* 3 is for ":" and "\r\n". */</comment>
    <decl_stmt><decl><type><name pos:line="60" pos:column="5">uint32_t<pos:position pos:line="60" pos:column="13"/></name></type> <name pos:line="60" pos:column="14">n<pos:position pos:line="60" pos:column="15"/></name> <init pos:line="60" pos:column="16">= <expr><call pos:line="60" pos:column="18">(<name pos:line="60" pos:column="19">uint32_t<pos:position pos:line="60" pos:column="27"/></name>)<argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">namelen<pos:position pos:line="60" pos:column="36"/></name> <operator pos:line="60" pos:column="37">+<pos:position pos:line="60" pos:column="38"/></operator> <name pos:line="60" pos:column="39">valuelen<pos:position pos:line="60" pos:column="47"/></name> <operator pos:line="60" pos:column="48">+<pos:position pos:line="60" pos:column="49"/></operator> <literal type="number" pos:line="60" pos:column="50">3<pos:position pos:line="60" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="53"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">DEBUGF<pos:position pos:line="62" pos:column="11"/></name><argument_list pos:line="62" pos:column="11">(<argument><expr><call><name pos:line="62" pos:column="12">infof<pos:position pos:line="62" pos:column="17"/></name><argument_list pos:line="62" pos:column="17">(<argument><expr><name pos:line="62" pos:column="18">data_s<pos:position pos:line="62" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="26">"h2 trailer: %.*s: %.*s\n"<pos:position pos:line="62" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="54">namelen<pos:position pos:line="62" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="63">name<pos:position pos:line="62" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="69">valuelen<pos:position pos:line="62" pos:column="77"/></name></expr></argument>,
                 <argument><expr><name pos:line="63" pos:column="18">value<pos:position pos:line="63" pos:column="23"/></name></expr></argument>)<pos:position pos:line="63" pos:column="24"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">Curl_add_buffer<pos:position pos:line="65" pos:column="20"/></name><argument_list pos:line="65" pos:column="20">(<argument><expr><name><name pos:line="65" pos:column="21">stream<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">-&gt;<pos:position pos:line="65" pos:column="32"/></operator><name pos:line="65" pos:column="29">trailer_recvbuf<pos:position pos:line="65" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="46">&amp;<pos:position pos:line="65" pos:column="51"/></operator><name pos:line="65" pos:column="47">n<pos:position pos:line="65" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="50">sizeof<argument_list pos:line="65" pos:column="56">(<argument><expr><name pos:line="65" pos:column="57">n<pos:position pos:line="65" pos:column="58"/></name></expr></argument>)<pos:position pos:line="65" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">Curl_add_buffer<pos:position pos:line="66" pos:column="20"/></name><argument_list pos:line="66" pos:column="20">(<argument><expr><name><name pos:line="66" pos:column="21">stream<pos:position pos:line="66" pos:column="27"/></name><operator pos:line="66" pos:column="27">-&gt;<pos:position pos:line="66" pos:column="32"/></operator><name pos:line="66" pos:column="29">trailer_recvbuf<pos:position pos:line="66" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="46">name<pos:position pos:line="66" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="52">namelen<pos:position pos:line="66" pos:column="59"/></name></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">Curl_add_buffer<pos:position pos:line="67" pos:column="20"/></name><argument_list pos:line="67" pos:column="20">(<argument><expr><name><name pos:line="67" pos:column="21">stream<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">-&gt;<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="29">trailer_recvbuf<pos:position pos:line="67" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="46">": "<pos:position pos:line="67" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="52">2<pos:position pos:line="67" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">Curl_add_buffer<pos:position pos:line="68" pos:column="20"/></name><argument_list pos:line="68" pos:column="20">(<argument><expr><name><name pos:line="68" pos:column="21">stream<pos:position pos:line="68" pos:column="27"/></name><operator pos:line="68" pos:column="27">-&gt;<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="29">trailer_recvbuf<pos:position pos:line="68" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="46">value<pos:position pos:line="68" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="53">valuelen<pos:position pos:line="68" pos:column="61"/></name></expr></argument>)<pos:position pos:line="68" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">Curl_add_buffer<pos:position pos:line="69" pos:column="20"/></name><argument_list pos:line="69" pos:column="20">(<argument><expr><name><name pos:line="69" pos:column="21">stream<pos:position pos:line="69" pos:column="27"/></name><operator pos:line="69" pos:column="27">-&gt;<pos:position pos:line="69" pos:column="32"/></operator><name pos:line="69" pos:column="29">trailer_recvbuf<pos:position pos:line="69" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="46">"\r\n\0"<pos:position pos:line="69" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="56">3<pos:position pos:line="69" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="59"/></expr_stmt>

    <return pos:line="71" pos:column="5">return <expr><literal type="number" pos:line="71" pos:column="12">0<pos:position pos:line="71" pos:column="13"/></literal></expr>;<pos:position pos:line="71" pos:column="14"/></return>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>

  <if pos:line="74" pos:column="3">if<condition pos:line="74" pos:column="5">(<expr><name pos:line="74" pos:column="6">namelen<pos:position pos:line="74" pos:column="13"/></name> <operator pos:line="74" pos:column="14">==<pos:position pos:line="74" pos:column="16"/></operator> <sizeof pos:line="74" pos:column="17">sizeof<argument_list pos:line="74" pos:column="23">(<argument><expr><literal type="string" pos:line="74" pos:column="24">":status"<pos:position pos:line="74" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="34"/></argument_list></sizeof> <operator pos:line="74" pos:column="35">-<pos:position pos:line="74" pos:column="36"/></operator> <literal type="number" pos:line="74" pos:column="37">1<pos:position pos:line="74" pos:column="38"/></literal> <operator pos:line="74" pos:column="39">&amp;&amp;<pos:position pos:line="74" pos:column="49"/></operator>
     <call><name pos:line="75" pos:column="6">memcmp<pos:position pos:line="75" pos:column="12"/></name><argument_list pos:line="75" pos:column="12">(<argument><expr><literal type="string" pos:line="75" pos:column="13">":status"<pos:position pos:line="75" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="24">name<pos:position pos:line="75" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="30">namelen<pos:position pos:line="75" pos:column="37"/></name></expr></argument>)<pos:position pos:line="75" pos:column="38"/></argument_list></call> <operator pos:line="75" pos:column="39">==<pos:position pos:line="75" pos:column="41"/></operator> <literal type="number" pos:line="75" pos:column="42">0<pos:position pos:line="75" pos:column="43"/></literal></expr>)<pos:position pos:line="75" pos:column="44"/></condition><then pos:line="75" pos:column="44"> <block pos:line="75" pos:column="45">{
    <comment type="block" pos:line="76" pos:column="5">/* nghttp2 guarantees :status is received first and only once, and
       value is 3 digits status code, and decode_status_code always
       succeeds. */</comment>
    <expr_stmt><expr><name><name pos:line="79" pos:column="5">stream<pos:position pos:line="79" pos:column="11"/></name><operator pos:line="79" pos:column="11">-&gt;<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="13">status_code<pos:position pos:line="79" pos:column="24"/></name></name> <operator pos:line="79" pos:column="25">=<pos:position pos:line="79" pos:column="26"/></operator> <call><name pos:line="79" pos:column="27">decode_status_code<pos:position pos:line="79" pos:column="45"/></name><argument_list pos:line="79" pos:column="45">(<argument><expr><name pos:line="79" pos:column="46">value<pos:position pos:line="79" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="53">valuelen<pos:position pos:line="79" pos:column="61"/></name></expr></argument>)<pos:position pos:line="79" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">DEBUGASSERT<pos:position pos:line="80" pos:column="16"/></name><argument_list pos:line="80" pos:column="16">(<argument><expr><name><name pos:line="80" pos:column="17">stream<pos:position pos:line="80" pos:column="23"/></name><operator pos:line="80" pos:column="23">-&gt;<pos:position pos:line="80" pos:column="28"/></operator><name pos:line="80" pos:column="25">status_code<pos:position pos:line="80" pos:column="36"/></name></name> <operator pos:line="80" pos:column="37">!=<pos:position pos:line="80" pos:column="39"/></operator> <operator pos:line="80" pos:column="40">-<pos:position pos:line="80" pos:column="41"/></operator><literal type="number" pos:line="80" pos:column="41">1<pos:position pos:line="80" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="82" pos:column="5">Curl_add_buffer<pos:position pos:line="82" pos:column="20"/></name><argument_list pos:line="82" pos:column="20">(<argument><expr><name><name pos:line="82" pos:column="21">stream<pos:position pos:line="82" pos:column="27"/></name><operator pos:line="82" pos:column="27">-&gt;<pos:position pos:line="82" pos:column="32"/></operator><name pos:line="82" pos:column="29">header_recvbuf<pos:position pos:line="82" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="45">"HTTP/2 "<pos:position pos:line="82" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="56">7<pos:position pos:line="82" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">Curl_add_buffer<pos:position pos:line="83" pos:column="20"/></name><argument_list pos:line="83" pos:column="20">(<argument><expr><name><name pos:line="83" pos:column="21">stream<pos:position pos:line="83" pos:column="27"/></name><operator pos:line="83" pos:column="27">-&gt;<pos:position pos:line="83" pos:column="32"/></operator><name pos:line="83" pos:column="29">header_recvbuf<pos:position pos:line="83" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="45">value<pos:position pos:line="83" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="52">valuelen<pos:position pos:line="83" pos:column="60"/></name></expr></argument>)<pos:position pos:line="83" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="62"/></expr_stmt>
    <comment type="block" pos:line="84" pos:column="5">/* the space character after the status code is mandatory */</comment>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">Curl_add_buffer<pos:position pos:line="85" pos:column="20"/></name><argument_list pos:line="85" pos:column="20">(<argument><expr><name><name pos:line="85" pos:column="21">stream<pos:position pos:line="85" pos:column="27"/></name><operator pos:line="85" pos:column="27">-&gt;<pos:position pos:line="85" pos:column="32"/></operator><name pos:line="85" pos:column="29">header_recvbuf<pos:position pos:line="85" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="45">" \r\n"<pos:position pos:line="85" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="54">3<pos:position pos:line="85" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="57"/></expr_stmt>
    <comment type="block" pos:line="86" pos:column="5">/* if we receive data for another handle, wake that up */</comment>
    <if pos:line="87" pos:column="5">if<condition pos:line="87" pos:column="7">(<expr><name><name pos:line="87" pos:column="8">conn<pos:position pos:line="87" pos:column="12"/></name><operator pos:line="87" pos:column="12">-&gt;<pos:position pos:line="87" pos:column="17"/></operator><name pos:line="87" pos:column="14">data<pos:position pos:line="87" pos:column="18"/></name></name> <operator pos:line="87" pos:column="19">!=<pos:position pos:line="87" pos:column="21"/></operator> <name pos:line="87" pos:column="22">data_s<pos:position pos:line="87" pos:column="28"/></name></expr>)<pos:position pos:line="87" pos:column="29"/></condition><then pos:line="87" pos:column="29">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="7">Curl_expire<pos:position pos:line="88" pos:column="18"/></name><argument_list pos:line="88" pos:column="18">(<argument><expr><name pos:line="88" pos:column="19">data_s<pos:position pos:line="88" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="27">0<pos:position pos:line="88" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="30">EXPIRE_RUN_NOW<pos:position pos:line="88" pos:column="44"/></name></expr></argument>)<pos:position pos:line="88" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="46"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="90" pos:column="5">DEBUGF<pos:position pos:line="90" pos:column="11"/></name><argument_list pos:line="90" pos:column="11">(<argument><expr><call><name pos:line="90" pos:column="12">infof<pos:position pos:line="90" pos:column="17"/></name><argument_list pos:line="90" pos:column="17">(<argument><expr><name pos:line="90" pos:column="18">data_s<pos:position pos:line="90" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="26">"h2 status: HTTP/2 %03d (easy %p)\n"<pos:position pos:line="90" pos:column="62"/></literal></expr></argument>,
                 <argument><expr><name><name pos:line="91" pos:column="18">stream<pos:position pos:line="91" pos:column="24"/></name><operator pos:line="91" pos:column="24">-&gt;<pos:position pos:line="91" pos:column="29"/></operator><name pos:line="91" pos:column="26">status_code<pos:position pos:line="91" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="39">data_s<pos:position pos:line="91" pos:column="45"/></name></expr></argument>)<pos:position pos:line="91" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="91" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="48"/></expr_stmt>
    <return pos:line="92" pos:column="5">return <expr><literal type="number" pos:line="92" pos:column="12">0<pos:position pos:line="92" pos:column="13"/></literal></expr>;<pos:position pos:line="92" pos:column="14"/></return>
  }<pos:position pos:line="93" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="95" pos:column="3">/* nghttp2 guarantees that namelen &gt; 0, and :status was already
     received, and this is not pseudo-header field . */</comment>
  <comment type="block" pos:line="97" pos:column="3">/* convert to a HTTP1-style header */</comment>
  <expr_stmt><expr><call><name pos:line="98" pos:column="3">Curl_add_buffer<pos:position pos:line="98" pos:column="18"/></name><argument_list pos:line="98" pos:column="18">(<argument><expr><name><name pos:line="98" pos:column="19">stream<pos:position pos:line="98" pos:column="25"/></name><operator pos:line="98" pos:column="25">-&gt;<pos:position pos:line="98" pos:column="30"/></operator><name pos:line="98" pos:column="27">header_recvbuf<pos:position pos:line="98" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="43">name<pos:position pos:line="98" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="49">namelen<pos:position pos:line="98" pos:column="56"/></name></expr></argument>)<pos:position pos:line="98" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="99" pos:column="3">Curl_add_buffer<pos:position pos:line="99" pos:column="18"/></name><argument_list pos:line="99" pos:column="18">(<argument><expr><name><name pos:line="99" pos:column="19">stream<pos:position pos:line="99" pos:column="25"/></name><operator pos:line="99" pos:column="25">-&gt;<pos:position pos:line="99" pos:column="30"/></operator><name pos:line="99" pos:column="27">header_recvbuf<pos:position pos:line="99" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="43">": "<pos:position pos:line="99" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="49">2<pos:position pos:line="99" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="100" pos:column="3">Curl_add_buffer<pos:position pos:line="100" pos:column="18"/></name><argument_list pos:line="100" pos:column="18">(<argument><expr><name><name pos:line="100" pos:column="19">stream<pos:position pos:line="100" pos:column="25"/></name><operator pos:line="100" pos:column="25">-&gt;<pos:position pos:line="100" pos:column="30"/></operator><name pos:line="100" pos:column="27">header_recvbuf<pos:position pos:line="100" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="43">value<pos:position pos:line="100" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="50">valuelen<pos:position pos:line="100" pos:column="58"/></name></expr></argument>)<pos:position pos:line="100" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="101" pos:column="3">Curl_add_buffer<pos:position pos:line="101" pos:column="18"/></name><argument_list pos:line="101" pos:column="18">(<argument><expr><name><name pos:line="101" pos:column="19">stream<pos:position pos:line="101" pos:column="25"/></name><operator pos:line="101" pos:column="25">-&gt;<pos:position pos:line="101" pos:column="30"/></operator><name pos:line="101" pos:column="27">header_recvbuf<pos:position pos:line="101" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="43">"\r\n"<pos:position pos:line="101" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="51">2<pos:position pos:line="101" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="54"/></expr_stmt>
  <comment type="block" pos:line="102" pos:column="3">/* if we receive data for another handle, wake that up */</comment>
  <if pos:line="103" pos:column="3">if<condition pos:line="103" pos:column="5">(<expr><name><name pos:line="103" pos:column="6">conn<pos:position pos:line="103" pos:column="10"/></name><operator pos:line="103" pos:column="10">-&gt;<pos:position pos:line="103" pos:column="15"/></operator><name pos:line="103" pos:column="12">data<pos:position pos:line="103" pos:column="16"/></name></name> <operator pos:line="103" pos:column="17">!=<pos:position pos:line="103" pos:column="19"/></operator> <name pos:line="103" pos:column="20">data_s<pos:position pos:line="103" pos:column="26"/></name></expr>)<pos:position pos:line="103" pos:column="27"/></condition><then pos:line="103" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="104" pos:column="5">Curl_expire<pos:position pos:line="104" pos:column="16"/></name><argument_list pos:line="104" pos:column="16">(<argument><expr><name pos:line="104" pos:column="17">data_s<pos:position pos:line="104" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="104" pos:column="25">0<pos:position pos:line="104" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="28">EXPIRE_RUN_NOW<pos:position pos:line="104" pos:column="42"/></name></expr></argument>)<pos:position pos:line="104" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="44"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="106" pos:column="3">DEBUGF<pos:position pos:line="106" pos:column="9"/></name><argument_list pos:line="106" pos:column="9">(<argument><expr><call><name pos:line="106" pos:column="10">infof<pos:position pos:line="106" pos:column="15"/></name><argument_list pos:line="106" pos:column="15">(<argument><expr><name pos:line="106" pos:column="16">data_s<pos:position pos:line="106" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="24">"h2 header: %.*s: %.*s\n"<pos:position pos:line="106" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="51">namelen<pos:position pos:line="106" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="60">name<pos:position pos:line="106" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="66">valuelen<pos:position pos:line="106" pos:column="74"/></name></expr></argument>,
               <argument><expr><name pos:line="107" pos:column="16">value<pos:position pos:line="107" pos:column="21"/></name></expr></argument>)<pos:position pos:line="107" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="107" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="24"/></expr_stmt>

  <return pos:line="109" pos:column="3">return <expr><literal type="number" pos:line="109" pos:column="10">0<pos:position pos:line="109" pos:column="11"/></literal></expr>;<pos:position pos:line="109" pos:column="12"/></return> <comment type="block" pos:line="109" pos:column="13">/* 0 is successful */</comment>
}<pos:position pos:line="110" pos:column="2"/></block></function></unit>
