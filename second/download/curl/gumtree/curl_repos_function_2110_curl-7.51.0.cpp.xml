<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2110_curl-7.51.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">easy_transfer<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">Curl_multi<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">multi<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">bool<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">done<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><name pos:line="3" pos:column="15">FALSE<pos:position pos:line="3" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLMcode<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">mcode<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLM_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURLE_OK<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">timeval<pos:position pos:line="6" pos:column="17"/></name></name></type> <name pos:line="6" pos:column="18">before<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">without_fds<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>  <comment type="block" pos:line="7" pos:column="25">/* count number of consecutive returns from
                           curl_multi_wait() without any filedescriptors */</comment>

  <while pos:line="10" pos:column="3">while<condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">done<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">&amp;&amp;<pos:position pos:line="10" pos:column="25"/></operator> <operator pos:line="10" pos:column="18">!<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">mcode<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition> <block pos:line="10" pos:column="26">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">still_running<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><literal type="number" pos:line="11" pos:column="25">0<pos:position pos:line="11" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">rc<pos:position pos:line="12" pos:column="11"/></name></decl>;<pos:position pos:line="12" pos:column="12"/></decl_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">before<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <call><name pos:line="14" pos:column="14">curlx_tvnow<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">()<pos:position pos:line="14" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">mcode<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <call><name pos:line="15" pos:column="13">curl_multi_wait<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">multi<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">NULL<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="42">0<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="45">1000<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="51">&amp;<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="52">rc<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="56"/></expr_stmt>

    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><operator pos:line="17" pos:column="8">!<pos:position pos:line="17" pos:column="9"/></operator><name pos:line="17" pos:column="9">mcode<pos:position pos:line="17" pos:column="14"/></name></expr>)<pos:position pos:line="17" pos:column="15"/></condition><then pos:line="17" pos:column="15"> <block pos:line="17" pos:column="16">{
      <if pos:line="18" pos:column="7">if<condition pos:line="18" pos:column="9">(<expr><operator pos:line="18" pos:column="10">!<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">rc<pos:position pos:line="18" pos:column="13"/></name></expr>)<pos:position pos:line="18" pos:column="14"/></condition><then pos:line="18" pos:column="14"> <block pos:line="18" pos:column="15">{
        <decl_stmt><decl><type><name><name pos:line="19" pos:column="9">struct<pos:position pos:line="19" pos:column="15"/></name> <name pos:line="19" pos:column="16">timeval<pos:position pos:line="19" pos:column="23"/></name></name></type> <name pos:line="19" pos:column="24">after<pos:position pos:line="19" pos:column="29"/></name> <init pos:line="19" pos:column="30">= <expr><call><name pos:line="19" pos:column="32">curlx_tvnow<pos:position pos:line="19" pos:column="43"/></name><argument_list pos:line="19" pos:column="43">()<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="46"/></decl_stmt>

        <comment type="block" pos:line="21" pos:column="9">/* If it returns without any filedescriptor instantly, we need to
           avoid busy-looping during periods where it has nothing particular
           to wait for */</comment>
        <if pos:line="24" pos:column="9">if<condition pos:line="24" pos:column="11">(<expr><call><name pos:line="24" pos:column="12">curlx_tvdiff<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">after<pos:position pos:line="24" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="32">before<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call> <operator pos:line="24" pos:column="40">&lt;=<pos:position pos:line="24" pos:column="45"/></operator> <literal type="number" pos:line="24" pos:column="43">10<pos:position pos:line="24" pos:column="45"/></literal></expr>)<pos:position pos:line="24" pos:column="46"/></condition><then pos:line="24" pos:column="46"> <block pos:line="24" pos:column="47">{
          <expr_stmt><expr><name pos:line="25" pos:column="11">without_fds<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">++<pos:position pos:line="25" pos:column="24"/></operator></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
          <if pos:line="26" pos:column="11">if<condition pos:line="26" pos:column="13">(<expr><name pos:line="26" pos:column="14">without_fds<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">&gt;<pos:position pos:line="26" pos:column="30"/></operator> <literal type="number" pos:line="26" pos:column="28">2<pos:position pos:line="26" pos:column="29"/></literal></expr>)<pos:position pos:line="26" pos:column="30"/></condition><then pos:line="26" pos:column="30"> <block pos:line="26" pos:column="31">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">int<pos:position pos:line="27" pos:column="16"/></name></type> <name pos:line="27" pos:column="17">sleep_ms<pos:position pos:line="27" pos:column="25"/></name> <init pos:line="27" pos:column="26">= <expr><ternary><condition><expr><name pos:line="27" pos:column="28">without_fds<pos:position pos:line="27" pos:column="39"/></name> <operator pos:line="27" pos:column="40">&lt;<pos:position pos:line="27" pos:column="44"/></operator> <literal type="number" pos:line="27" pos:column="42">10<pos:position pos:line="27" pos:column="44"/></literal></expr> ?<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46"> <expr><operator pos:line="27" pos:column="47">(<pos:position pos:line="27" pos:column="48"/></operator><literal type="number" pos:line="27" pos:column="48">1<pos:position pos:line="27" pos:column="49"/></literal> <operator pos:line="27" pos:column="50">&lt;&lt;<pos:position pos:line="27" pos:column="58"/></operator> <operator pos:line="27" pos:column="53">(<pos:position pos:line="27" pos:column="54"/></operator><name pos:line="27" pos:column="54">without_fds<pos:position pos:line="27" pos:column="65"/></name> <operator pos:line="27" pos:column="66">-<pos:position pos:line="27" pos:column="67"/></operator> <literal type="number" pos:line="27" pos:column="68">1<pos:position pos:line="27" pos:column="69"/></literal><operator pos:line="27" pos:column="69">)<pos:position pos:line="27" pos:column="70"/></operator><operator pos:line="27" pos:column="70">)<pos:position pos:line="27" pos:column="71"/></operator></expr> <pos:position pos:line="27" pos:column="72"/></then><else pos:line="27" pos:column="72">: <expr><literal type="number" pos:line="27" pos:column="74">1000<pos:position pos:line="27" pos:column="78"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="27" pos:column="79"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">Curl_wait_ms<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">sleep_ms<pos:position pos:line="28" pos:column="34"/></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
          }<pos:position pos:line="29" pos:column="12"/></block></then></if>
        }<pos:position pos:line="30" pos:column="10"/></block></then>
        <else pos:line="31" pos:column="9">else
          <comment type="block" pos:line="32" pos:column="11">/* it wasn't "instant", restart counter */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="11">without_fds<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">=<pos:position pos:line="33" pos:column="24"/></operator> <literal type="number" pos:line="33" pos:column="25">0<pos:position pos:line="33" pos:column="26"/></literal></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt></block></else></if>
      }<pos:position pos:line="34" pos:column="8"/></block></then>
      <else pos:line="35" pos:column="7">else
        <comment type="block" pos:line="36" pos:column="9">/* got file descriptor, restart counter */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="9">without_fds<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <literal type="number" pos:line="37" pos:column="23">0<pos:position pos:line="37" pos:column="24"/></literal></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt></block></else></if>

      <expr_stmt><expr><name pos:line="39" pos:column="7">mcode<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <call><name pos:line="39" pos:column="15">curl_multi_perform<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">multi<pos:position pos:line="39" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="41">&amp;<pos:position pos:line="39" pos:column="46"/></operator><name pos:line="39" pos:column="42">still_running<pos:position pos:line="39" pos:column="55"/></name></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="42" pos:column="5">/* only read 'still_running' if curl_multi_perform() return OK */</comment>
    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><operator pos:line="43" pos:column="8">!<pos:position pos:line="43" pos:column="9"/></operator><name pos:line="43" pos:column="9">mcode<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">&amp;&amp;<pos:position pos:line="43" pos:column="25"/></operator> <operator pos:line="43" pos:column="18">!<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">still_running<pos:position pos:line="43" pos:column="32"/></name></expr>)<pos:position pos:line="43" pos:column="33"/></condition><then pos:line="43" pos:column="33"> <block pos:line="43" pos:column="34">{
      <decl_stmt><decl><type><name pos:line="44" pos:column="7">CURLMsg<pos:position pos:line="44" pos:column="14"/></name> <modifier pos:line="44" pos:column="15">*<pos:position pos:line="44" pos:column="16"/></modifier></type><name pos:line="44" pos:column="16">msg<pos:position pos:line="44" pos:column="19"/></name> <init pos:line="44" pos:column="20">= <expr><call><name pos:line="44" pos:column="22">curl_multi_info_read<pos:position pos:line="44" pos:column="42"/></name><argument_list pos:line="44" pos:column="42">(<argument><expr><name pos:line="44" pos:column="43">multi<pos:position pos:line="44" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="50">&amp;<pos:position pos:line="44" pos:column="55"/></operator><name pos:line="44" pos:column="51">rc<pos:position pos:line="44" pos:column="53"/></name></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="44" pos:column="55"/></decl_stmt>
      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><name pos:line="45" pos:column="10">msg<pos:position pos:line="45" pos:column="13"/></name></expr>)<pos:position pos:line="45" pos:column="14"/></condition><then pos:line="45" pos:column="14"> <block pos:line="45" pos:column="15">{
        <expr_stmt><expr><name pos:line="46" pos:column="9">result<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">=<pos:position pos:line="46" pos:column="17"/></operator> <name><name pos:line="46" pos:column="18">msg<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">-&gt;<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="23">data<pos:position pos:line="46" pos:column="27"/></name><operator pos:line="46" pos:column="27">.<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="28">result<pos:position pos:line="46" pos:column="34"/></name></name></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="47" pos:column="9">done<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator> <name pos:line="47" pos:column="16">TRUE<pos:position pos:line="47" pos:column="20"/></name></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="48" pos:column="8"/></block></then></if>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>
  }<pos:position pos:line="50" pos:column="4"/></block></while>

  <comment type="block" pos:line="52" pos:column="3">/* Make sure to return some kind of error if there was a multi problem */</comment>
  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><name pos:line="53" pos:column="6">mcode<pos:position pos:line="53" pos:column="11"/></name></expr>)<pos:position pos:line="53" pos:column="12"/></condition><then pos:line="53" pos:column="12"> <block pos:line="53" pos:column="13">{
    <expr_stmt><expr><name pos:line="54" pos:column="5">result<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">=<pos:position pos:line="54" pos:column="13"/></operator> <ternary><condition><expr><operator pos:line="54" pos:column="14">(<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="15">mcode<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">==<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="24">CURLM_OUT_OF_MEMORY<pos:position pos:line="54" pos:column="43"/></name><operator pos:line="54" pos:column="43">)<pos:position pos:line="54" pos:column="44"/></operator></expr> ?<pos:position pos:line="54" pos:column="46"/></condition><then pos:line="54" pos:column="46"> <expr><name pos:line="54" pos:column="47">CURLE_OUT_OF_MEMORY<pos:position pos:line="54" pos:column="66"/></name></expr> <pos:position pos:line="54" pos:column="67"/></then><else pos:line="54" pos:column="67">:
              <comment type="block" pos:line="55" pos:column="15">/* The other multi errors should never happen, so return
                 something suitably generic */</comment>
              <expr><name pos:line="57" pos:column="15">CURLE_BAD_FUNCTION_ARGUMENT<pos:position pos:line="57" pos:column="42"/></name></expr></else></ternary></expr>;<pos:position pos:line="57" pos:column="43"/></expr_stmt>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>

  <return pos:line="60" pos:column="3">return <expr><name pos:line="60" pos:column="10">result<pos:position pos:line="60" pos:column="16"/></name></expr>;<pos:position pos:line="60" pos:column="17"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
