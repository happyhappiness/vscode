<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1311_curl-7.41.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_disconnect<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">bool<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">dead_connection<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">SessionHandle<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">data<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">(<expr><operator pos:line="4" pos:column="6">!<pos:position pos:line="4" pos:column="7"/></operator><name pos:line="4" pos:column="7">conn<pos:position pos:line="4" pos:column="11"/></name></expr>)<pos:position pos:line="4" pos:column="12"/></condition><then pos:line="4" pos:column="12">
    <block type="pseudo"><return pos:line="5" pos:column="5">return <expr><name pos:line="5" pos:column="12">CURLE_OK<pos:position pos:line="5" pos:column="20"/></name></expr>;<pos:position pos:line="5" pos:column="21"/></return></block></then></if> <comment type="block" pos:line="5" pos:column="22">/* this is closed and fine already */</comment>
  <expr_stmt><expr><name pos:line="6" pos:column="3">data<pos:position pos:line="6" pos:column="7"/></name> <operator pos:line="6" pos:column="8">=<pos:position pos:line="6" pos:column="9"/></operator> <name><name pos:line="6" pos:column="10">conn<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">data<pos:position pos:line="6" pos:column="20"/></name></name></expr>;<pos:position pos:line="6" pos:column="21"/></expr_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><name pos:line="8" pos:column="7">data<pos:position pos:line="8" pos:column="11"/></name></expr>)<pos:position pos:line="8" pos:column="12"/></condition><then pos:line="8" pos:column="12"> <block pos:line="8" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">DEBUGF<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><call><name pos:line="9" pos:column="12">fprintf<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">stderr<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="28">"DISCONNECT without easy handle, ignoring\n"<pos:position pos:line="9" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="75"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">CURLE_OK<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name><name pos:line="13" pos:column="6">conn<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">dns_entry<pos:position pos:line="13" pos:column="21"/></name></name> <operator pos:line="13" pos:column="22">!=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">NULL<pos:position pos:line="13" pos:column="29"/></name></expr>)<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30"> <block pos:line="13" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">Curl_resolv_unlock<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">data<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="30">conn<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">dns_entry<pos:position pos:line="14" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">conn<pos:position pos:line="15" pos:column="9"/></name><operator pos:line="15" pos:column="9">-&gt;<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="11">dns_entry<pos:position pos:line="15" pos:column="20"/></name></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">NULL<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">Curl_hostcache_prune<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">data<pos:position pos:line="18" pos:column="28"/></name></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt> <comment type="block" pos:line="18" pos:column="31">/* kill old DNS cache entries */</comment>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><operator pos:line="20" pos:column="5">!<pos:position pos:line="20" pos:column="6"/></operator><call><name pos:line="20" pos:column="6">defined<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">CURL_DISABLE_HTTP<pos:position pos:line="20" pos:column="31"/></name></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call> <operator pos:line="20" pos:column="33">&amp;&amp;<pos:position pos:line="20" pos:column="43"/></operator> <call><name pos:line="20" pos:column="36">defined<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">USE_NTLM<pos:position pos:line="20" pos:column="52"/></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="21" pos:column="3">/* Cleanup NTLM connection-related data */</comment>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">Curl_http_ntlm_cleanup<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">conn<pos:position pos:line="22" pos:column="30"/></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name><name pos:line="25" pos:column="6">conn<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">handler<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">-&gt;<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="21">disconnect<pos:position pos:line="25" pos:column="31"/></name></name></expr>)<pos:position pos:line="25" pos:column="32"/></condition><then pos:line="25" pos:column="32">
    <comment type="block" pos:line="26" pos:column="5">/* This is set if protocol-specific cleanups should be made */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="27" pos:column="5">conn<pos:position pos:line="27" pos:column="9"/></name><operator pos:line="27" pos:column="9">-&gt;<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="11">handler<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">-&gt;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="20">disconnect<pos:position pos:line="27" pos:column="30"/></name></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">conn<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">dead_connection<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="54"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="29" pos:column="5">/* unlink ourselves! */</comment>
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">infof<pos:position pos:line="30" pos:column="8"/></name><argument_list pos:line="30" pos:column="8">(<argument><expr><name pos:line="30" pos:column="9">data<pos:position pos:line="30" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="15">"Closing connection %ld\n"<pos:position pos:line="30" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="43">conn<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">-&gt;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="49">connection_id<pos:position pos:line="30" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="31" pos:column="3">Curl_conncache_remove_conn<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name><name pos:line="31" pos:column="30">data<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">-&gt;<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="36">state<pos:position pos:line="31" pos:column="41"/></name><operator pos:line="31" pos:column="41">.<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="42">conn_cache<pos:position pos:line="31" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="54">conn<pos:position pos:line="31" pos:column="58"/></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="60"/></expr_stmt>

<cpp:if pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">if<pos:position pos:line="33" pos:column="4"/></cpp:directive> <expr><call><name pos:line="33" pos:column="5">defined<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">USE_LIBIDN<pos:position pos:line="33" pos:column="23"/></name></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr></cpp:if>
  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name><name pos:line="34" pos:column="6">conn<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">host<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">.<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">encalloc<pos:position pos:line="34" pos:column="25"/></name></name></expr>)<pos:position pos:line="34" pos:column="26"/></condition><then pos:line="34" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="5">idn_free<pos:position pos:line="35" pos:column="13"/></name><argument_list pos:line="35" pos:column="13">(<argument><expr><name><name pos:line="35" pos:column="14">conn<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">-&gt;<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="20">host<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">.<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">encalloc<pos:position pos:line="35" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt></block></then></if> <comment type="block" pos:line="35" pos:column="36">/* encoded host name buffer, must be freed
                                      with idn_free() since this was allocated
                                      by libidn */</comment>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><name><name pos:line="38" pos:column="6">conn<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">proxy<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">.<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">encalloc<pos:position pos:line="38" pos:column="26"/></name></name></expr>)<pos:position pos:line="38" pos:column="27"/></condition><then pos:line="38" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="5">idn_free<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><name><name pos:line="39" pos:column="14">conn<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">-&gt;<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="20">proxy<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">.<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="26">encalloc<pos:position pos:line="39" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt></block></then></if> <comment type="block" pos:line="39" pos:column="37">/* encoded proxy name buffer, must be
                                       freed with idn_free() since this was
                                       allocated by libidn */</comment>
<cpp:elif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">elif<pos:position pos:line="42" pos:column="6"/></cpp:directive> <expr><call><name pos:line="42" pos:column="7">defined<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">USE_WIN32_IDN<pos:position pos:line="42" pos:column="28"/></name></expr></argument>)<pos:position pos:line="42" pos:column="29"/></argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">free<pos:position pos:line="43" pos:column="7"/></name><argument_list pos:line="43" pos:column="7">(<argument><expr><name><name pos:line="43" pos:column="8">conn<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">host<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">.<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">encalloc<pos:position pos:line="43" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt> <comment type="block" pos:line="43" pos:column="30">/* encoded host name buffer, must be freed with
                                idn_free() since this was allocated by
                                curl_win32_idn_to_ascii */</comment>
  <if pos:line="46" pos:column="3">if<condition pos:line="46" pos:column="5">(<expr><name><name pos:line="46" pos:column="6">conn<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">-&gt;<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="12">proxy<pos:position pos:line="46" pos:column="17"/></name><operator pos:line="46" pos:column="17">.<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">encalloc<pos:position pos:line="46" pos:column="26"/></name></name></expr>)<pos:position pos:line="46" pos:column="27"/></condition><then pos:line="46" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="5">free<pos:position pos:line="47" pos:column="9"/></name><argument_list pos:line="47" pos:column="9">(<argument><expr><name><name pos:line="47" pos:column="10">conn<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">proxy<pos:position pos:line="47" pos:column="21"/></name><operator pos:line="47" pos:column="21">.<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="22">encalloc<pos:position pos:line="47" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="32"/></expr_stmt></block></then></if> <comment type="block" pos:line="47" pos:column="33">/* encoded proxy name buffer, must be freed
                                   with idn_free() since this was allocated by
                                   curl_win32_idn_to_ascii */</comment>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="52" pos:column="3">Curl_ssl_close<pos:position pos:line="52" pos:column="17"/></name><argument_list pos:line="52" pos:column="17">(<argument><expr><name pos:line="52" pos:column="18">conn<pos:position pos:line="52" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="24">FIRSTSOCKET<pos:position pos:line="52" pos:column="35"/></name></expr></argument>)<pos:position pos:line="52" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="54" pos:column="3">/* Indicate to all handles on the pipe that we're dead */</comment>
  <if pos:line="55" pos:column="3">if<condition pos:line="55" pos:column="5">(<expr><call><name pos:line="55" pos:column="6">Curl_multi_pipeline_enabled<pos:position pos:line="55" pos:column="33"/></name><argument_list pos:line="55" pos:column="33">(<argument><expr><name><name pos:line="55" pos:column="34">data<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">-&gt;<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="40">multi<pos:position pos:line="55" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="47"/></condition><then pos:line="55" pos:column="47"> <block pos:line="55" pos:column="48">{
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">signalPipeClose<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><name><name pos:line="56" pos:column="21">conn<pos:position pos:line="56" pos:column="25"/></name><operator pos:line="56" pos:column="25">-&gt;<pos:position pos:line="56" pos:column="30"/></operator><name pos:line="56" pos:column="27">send_pipe<pos:position pos:line="56" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="38">TRUE<pos:position pos:line="56" pos:column="42"/></name></expr></argument>)<pos:position pos:line="56" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">signalPipeClose<pos:position pos:line="57" pos:column="20"/></name><argument_list pos:line="57" pos:column="20">(<argument><expr><name><name pos:line="57" pos:column="21">conn<pos:position pos:line="57" pos:column="25"/></name><operator pos:line="57" pos:column="25">-&gt;<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="27">recv_pipe<pos:position pos:line="57" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="38">TRUE<pos:position pos:line="57" pos:column="42"/></name></expr></argument>)<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="60" pos:column="3">conn_free<pos:position pos:line="60" pos:column="12"/></name><argument_list pos:line="60" pos:column="12">(<argument><expr><name pos:line="60" pos:column="13">conn<pos:position pos:line="60" pos:column="17"/></name></expr></argument>)<pos:position pos:line="60" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="19"/></expr_stmt>

  <return pos:line="62" pos:column="3">return <expr><name pos:line="62" pos:column="10">CURLE_OK<pos:position pos:line="62" pos:column="18"/></name></expr>;<pos:position pos:line="62" pos:column="19"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
