<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2271_curl-7.55.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_ossl_shutdown<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">connectdata<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">conn<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">sockindex<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">retval<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><literal type="number" pos:line="3" pos:column="16">0<pos:position pos:line="3" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">ssl_connect_data<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">connssl<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><operator pos:line="4" pos:column="38">&amp;<pos:position pos:line="4" pos:column="43"/></operator><name><name pos:line="4" pos:column="39">conn<pos:position pos:line="4" pos:column="43"/></name><operator pos:line="4" pos:column="43">-&gt;<pos:position pos:line="4" pos:column="48"/></operator><name pos:line="4" pos:column="45">ssl<pos:position pos:line="4" pos:column="48"/></name><index pos:line="4" pos:column="48">[<expr><name pos:line="4" pos:column="49">sockindex<pos:position pos:line="4" pos:column="58"/></name></expr>]<pos:position pos:line="4" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">buf<pos:position pos:line="6" pos:column="11"/></name><index pos:line="6" pos:column="11">[<expr><literal type="number" pos:line="6" pos:column="12">256<pos:position pos:line="6" pos:column="15"/></literal></expr>]<pos:position pos:line="6" pos:column="16"/></index></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt> <comment type="block" pos:line="6" pos:column="18">/* We will use this for the OpenSSL error buffer, so it has
                    to be at least 256 bytes long. */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">unsigned<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">long<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">sslerror<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">ssize_t<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">nread<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">buffsize<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">err<pos:position pos:line="11" pos:column="10"/></name></decl>;<pos:position pos:line="11" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">done<pos:position pos:line="12" pos:column="11"/></name> <init pos:line="12" pos:column="12">= <expr><literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* This has only been tested on the proftpd server, and the mod_tls code
     sends a close notify alert without waiting for a close notify alert in
     response. Thus we wait for a close notify alert from the server, but
     we do not send one. Let's hope other servers do the same... */</comment>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name><name pos:line="19" pos:column="6">data<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">set<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">ftp_ccc<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">==<pos:position pos:line="19" pos:column="26"/></operator> <name pos:line="19" pos:column="27">CURLFTPSSL_CCC_ACTIVE<pos:position pos:line="19" pos:column="48"/></name></expr>)<pos:position pos:line="19" pos:column="49"/></condition><then pos:line="19" pos:column="49">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="20" pos:column="7">(<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">void<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">)<pos:position pos:line="20" pos:column="13"/></operator><call><name pos:line="20" pos:column="13">SSL_shutdown<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name><name pos:line="20" pos:column="26">connssl<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">handle<pos:position pos:line="20" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt></block></then></if>

  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name><name pos:line="22" pos:column="6">connssl<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">handle<pos:position pos:line="22" pos:column="21"/></name></name></expr>)<pos:position pos:line="22" pos:column="22"/></condition><then pos:line="22" pos:column="22"> <block pos:line="22" pos:column="23">{
    <expr_stmt><expr><name pos:line="23" pos:column="5">buffsize<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">)<pos:position pos:line="23" pos:column="21"/></operator><sizeof pos:line="23" pos:column="21">sizeof<argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">buf<pos:position pos:line="23" pos:column="31"/></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></sizeof></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
    <while pos:line="24" pos:column="5">while<condition pos:line="24" pos:column="10">(<expr><operator pos:line="24" pos:column="11">!<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="12">done<pos:position pos:line="24" pos:column="16"/></name></expr>)<pos:position pos:line="24" pos:column="17"/></condition> <block pos:line="24" pos:column="18">{
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">int<pos:position pos:line="25" pos:column="10"/></name></type> <name pos:line="25" pos:column="11">what<pos:position pos:line="25" pos:column="15"/></name> <init pos:line="25" pos:column="16">= <expr><call><name pos:line="25" pos:column="18">SOCKET_READABLE<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name><name pos:line="25" pos:column="34">conn<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">-&gt;<pos:position pos:line="25" pos:column="43"/></operator><name pos:line="25" pos:column="40">sock<pos:position pos:line="25" pos:column="44"/></name><index pos:line="25" pos:column="44">[<expr><name pos:line="25" pos:column="45">sockindex<pos:position pos:line="25" pos:column="54"/></name></expr>]<pos:position pos:line="25" pos:column="55"/></index></name></expr></argument>,
                                 <argument><expr><name pos:line="26" pos:column="34">SSL_SHUTDOWN_TIMEOUT<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="56"/></decl_stmt>
      <if pos:line="27" pos:column="7">if<condition pos:line="27" pos:column="9">(<expr><name pos:line="27" pos:column="10">what<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">&gt;<pos:position pos:line="27" pos:column="19"/></operator> <literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19"> <block pos:line="27" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">ERR_clear_error<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">()<pos:position pos:line="28" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>

        <comment type="block" pos:line="30" pos:column="9">/* Something to read, let's do it and hope that it is the close
           notify alert from the server */</comment>
        <expr_stmt><expr><name pos:line="32" pos:column="9">nread<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <operator pos:line="32" pos:column="17">(<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">ssize_t<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">)<pos:position pos:line="32" pos:column="26"/></operator><call><name pos:line="32" pos:column="26">SSL_read<pos:position pos:line="32" pos:column="34"/></name><argument_list pos:line="32" pos:column="34">(<argument><expr><name><name pos:line="32" pos:column="35">conn<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">-&gt;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="41">ssl<pos:position pos:line="32" pos:column="44"/></name><index pos:line="32" pos:column="44">[<expr><name pos:line="32" pos:column="45">sockindex<pos:position pos:line="32" pos:column="54"/></name></expr>]<pos:position pos:line="32" pos:column="55"/></index></name><operator pos:line="32" pos:column="55">.<pos:position pos:line="32" pos:column="56"/></operator><name pos:line="32" pos:column="56">handle<pos:position pos:line="32" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="64">buf<pos:position pos:line="32" pos:column="67"/></name></expr></argument>,
                                  <argument><expr><name pos:line="33" pos:column="35">buffsize<pos:position pos:line="33" pos:column="43"/></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="34" pos:column="9">err<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <call><name pos:line="34" pos:column="15">SSL_get_error<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name><name pos:line="34" pos:column="29">conn<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">-&gt;<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="35">ssl<pos:position pos:line="34" pos:column="38"/></name><index pos:line="34" pos:column="38">[<expr><name pos:line="34" pos:column="39">sockindex<pos:position pos:line="34" pos:column="48"/></name></expr>]<pos:position pos:line="34" pos:column="49"/></index></name><operator pos:line="34" pos:column="49">.<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="50">handle<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="58">(<pos:position pos:line="34" pos:column="59"/></operator><name pos:line="34" pos:column="59">int<pos:position pos:line="34" pos:column="62"/></name><operator pos:line="34" pos:column="62">)<pos:position pos:line="34" pos:column="63"/></operator><name pos:line="34" pos:column="63">nread<pos:position pos:line="34" pos:column="68"/></name></expr></argument>)<pos:position pos:line="34" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="70"/></expr_stmt>

        <switch pos:line="36" pos:column="9">switch<condition pos:line="36" pos:column="15">(<expr><name pos:line="36" pos:column="16">err<pos:position pos:line="36" pos:column="19"/></name></expr>)<pos:position pos:line="36" pos:column="20"/></condition> <block pos:line="36" pos:column="21">{
        <case pos:line="37" pos:column="9">case <expr><name pos:line="37" pos:column="14">SSL_ERROR_NONE<pos:position pos:line="37" pos:column="28"/></name></expr>:<pos:position pos:line="37" pos:column="29"/></case> <comment type="block" pos:line="37" pos:column="30">/* this is not an error */</comment>
        <case pos:line="38" pos:column="9">case <expr><name pos:line="38" pos:column="14">SSL_ERROR_ZERO_RETURN<pos:position pos:line="38" pos:column="35"/></name></expr>:<pos:position pos:line="38" pos:column="36"/></case> <comment type="block" pos:line="38" pos:column="37">/* no more data */</comment>
          <comment type="block" pos:line="39" pos:column="11">/* This is the expected response. There was no data but only
             the close notify alert */</comment>
          <expr_stmt><expr><name pos:line="41" pos:column="11">done<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <literal type="number" pos:line="41" pos:column="18">1<pos:position pos:line="41" pos:column="19"/></literal></expr>;<pos:position pos:line="41" pos:column="20"/></expr_stmt>
          <break pos:line="42" pos:column="11">break;<pos:position pos:line="42" pos:column="17"/></break>
        <case pos:line="43" pos:column="9">case <expr><name pos:line="43" pos:column="14">SSL_ERROR_WANT_READ<pos:position pos:line="43" pos:column="33"/></name></expr>:<pos:position pos:line="43" pos:column="34"/></case>
          <comment type="block" pos:line="44" pos:column="11">/* there's data pending, re-invoke SSL_read() */</comment>
          <expr_stmt><expr><call><name pos:line="45" pos:column="11">infof<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">data<pos:position pos:line="45" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="23">"SSL_ERROR_WANT_READ\n"<pos:position pos:line="45" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="48"/></expr_stmt>
          <break pos:line="46" pos:column="11">break;<pos:position pos:line="46" pos:column="17"/></break>
        <case pos:line="47" pos:column="9">case <expr><name pos:line="47" pos:column="14">SSL_ERROR_WANT_WRITE<pos:position pos:line="47" pos:column="34"/></name></expr>:<pos:position pos:line="47" pos:column="35"/></case>
          <comment type="block" pos:line="48" pos:column="11">/* SSL wants a write. Really odd. Let's bail out. */</comment>
          <expr_stmt><expr><call><name pos:line="49" pos:column="11">infof<pos:position pos:line="49" pos:column="16"/></name><argument_list pos:line="49" pos:column="16">(<argument><expr><name pos:line="49" pos:column="17">data<pos:position pos:line="49" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="23">"SSL_ERROR_WANT_WRITE\n"<pos:position pos:line="49" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt>
          <expr_stmt><expr><name pos:line="50" pos:column="11">done<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">=<pos:position pos:line="50" pos:column="17"/></operator> <literal type="number" pos:line="50" pos:column="18">1<pos:position pos:line="50" pos:column="19"/></literal></expr>;<pos:position pos:line="50" pos:column="20"/></expr_stmt>
          <break pos:line="51" pos:column="11">break;<pos:position pos:line="51" pos:column="17"/></break>
        <default pos:line="52" pos:column="9">default:<pos:position pos:line="52" pos:column="17"/></default>
          <comment type="block" pos:line="53" pos:column="11">/* openssl/ssl.h says "look at error stack/return value/errno" */</comment>
          <expr_stmt><expr><name pos:line="54" pos:column="11">sslerror<pos:position pos:line="54" pos:column="19"/></name> <operator pos:line="54" pos:column="20">=<pos:position pos:line="54" pos:column="21"/></operator> <call><name pos:line="54" pos:column="22">ERR_get_error<pos:position pos:line="54" pos:column="35"/></name><argument_list pos:line="54" pos:column="35">()<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="55" pos:column="11">failf<pos:position pos:line="55" pos:column="16"/></name><argument_list pos:line="55" pos:column="16">(<argument><expr><name><name pos:line="55" pos:column="17">conn<pos:position pos:line="55" pos:column="21"/></name><operator pos:line="55" pos:column="21">-&gt;<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="23">data<pos:position pos:line="55" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="29">OSSL_PACKAGE<pos:position pos:line="55" pos:column="41"/></name> <literal type="string" pos:line="55" pos:column="42">" SSL_read on shutdown: %s, errno %d"<pos:position pos:line="55" pos:column="79"/></literal></expr></argument>,
                <argument><expr><operator pos:line="56" pos:column="17">(<pos:position pos:line="56" pos:column="18"/></operator><ternary><condition><expr><name pos:line="56" pos:column="18">sslerror<pos:position pos:line="56" pos:column="26"/></name></expr> ?<pos:position pos:line="56" pos:column="28"/></condition><then pos:line="56" pos:column="28">
                 <expr><call><name pos:line="57" pos:column="18">ossl_strerror<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><name pos:line="57" pos:column="32">sslerror<pos:position pos:line="57" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="42">buf<pos:position pos:line="57" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="47">sizeof<argument_list pos:line="57" pos:column="53">(<argument><expr><name pos:line="57" pos:column="54">buf<pos:position pos:line="57" pos:column="57"/></name></expr></argument>)<pos:position pos:line="57" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="59"/></argument_list></call></expr> <pos:position pos:line="57" pos:column="60"/></then><else pos:line="57" pos:column="60">:
                 <expr><call><name pos:line="58" pos:column="18">SSL_ERROR_to_str<pos:position pos:line="58" pos:column="34"/></name><argument_list pos:line="58" pos:column="34">(<argument><expr><name pos:line="58" pos:column="35">err<pos:position pos:line="58" pos:column="38"/></name></expr></argument>)<pos:position pos:line="58" pos:column="39"/></argument_list></call></expr></else></ternary><operator pos:line="58" pos:column="39">)<pos:position pos:line="58" pos:column="40"/></operator></expr></argument>,
                <argument><expr><name pos:line="59" pos:column="17">SOCKERRNO<pos:position pos:line="59" pos:column="26"/></name></expr></argument>)<pos:position pos:line="59" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><name pos:line="60" pos:column="11">done<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <literal type="number" pos:line="60" pos:column="18">1<pos:position pos:line="60" pos:column="19"/></literal></expr>;<pos:position pos:line="60" pos:column="20"/></expr_stmt>
          <break pos:line="61" pos:column="11">break;<pos:position pos:line="61" pos:column="17"/></break>
        }<pos:position pos:line="62" pos:column="10"/></block></switch>
      }<pos:position pos:line="63" pos:column="8"/></block></then>
      <elseif pos:line="64" pos:column="7">else <if pos:line="64" pos:column="12">if<condition pos:line="64" pos:column="14">(<expr><literal type="number" pos:line="64" pos:column="15">0<pos:position pos:line="64" pos:column="16"/></literal> <operator pos:line="64" pos:column="17">==<pos:position pos:line="64" pos:column="19"/></operator> <name pos:line="64" pos:column="20">what<pos:position pos:line="64" pos:column="24"/></name></expr>)<pos:position pos:line="64" pos:column="25"/></condition><then pos:line="64" pos:column="25"> <block pos:line="64" pos:column="26">{
        <comment type="block" pos:line="65" pos:column="9">/* timeout */</comment>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">failf<pos:position pos:line="66" pos:column="14"/></name><argument_list pos:line="66" pos:column="14">(<argument><expr><name pos:line="66" pos:column="15">data<pos:position pos:line="66" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="21">"SSL shutdown timeout"<pos:position pos:line="66" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="67" pos:column="9">done<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">=<pos:position pos:line="67" pos:column="15"/></operator> <literal type="number" pos:line="67" pos:column="16">1<pos:position pos:line="67" pos:column="17"/></literal></expr>;<pos:position pos:line="67" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="68" pos:column="8"/></block></then></if></elseif>
      <else pos:line="69" pos:column="7">else <block pos:line="69" pos:column="12">{
        <comment type="block" pos:line="70" pos:column="9">/* anything that gets here is fatally bad */</comment>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">failf<pos:position pos:line="71" pos:column="14"/></name><argument_list pos:line="71" pos:column="14">(<argument><expr><name pos:line="71" pos:column="15">data<pos:position pos:line="71" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="21">"select/poll on SSL socket, errno: %d"<pos:position pos:line="71" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="61">SOCKERRNO<pos:position pos:line="71" pos:column="70"/></name></expr></argument>)<pos:position pos:line="71" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name pos:line="72" pos:column="9">retval<pos:position pos:line="72" pos:column="15"/></name> <operator pos:line="72" pos:column="16">=<pos:position pos:line="72" pos:column="17"/></operator> <operator pos:line="72" pos:column="18">-<pos:position pos:line="72" pos:column="19"/></operator><literal type="number" pos:line="72" pos:column="19">1<pos:position pos:line="72" pos:column="20"/></literal></expr>;<pos:position pos:line="72" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="73" pos:column="9">done<pos:position pos:line="73" pos:column="13"/></name> <operator pos:line="73" pos:column="14">=<pos:position pos:line="73" pos:column="15"/></operator> <literal type="number" pos:line="73" pos:column="16">1<pos:position pos:line="73" pos:column="17"/></literal></expr>;<pos:position pos:line="73" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="74" pos:column="8"/></block></else></if>
    }<pos:position pos:line="75" pos:column="6"/></block></while> <comment type="block" pos:line="75" pos:column="7">/* while()-loop for the select() */</comment>

    <if pos:line="77" pos:column="5">if<condition pos:line="77" pos:column="7">(<expr><name><name pos:line="77" pos:column="8">data<pos:position pos:line="77" pos:column="12"/></name><operator pos:line="77" pos:column="12">-&gt;<pos:position pos:line="77" pos:column="17"/></operator><name pos:line="77" pos:column="14">set<pos:position pos:line="77" pos:column="17"/></name><operator pos:line="77" pos:column="17">.<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="18">verbose<pos:position pos:line="77" pos:column="25"/></name></name></expr>)<pos:position pos:line="77" pos:column="26"/></condition><then pos:line="77" pos:column="26"> <block pos:line="77" pos:column="27">{
<cpp:ifdef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifdef<pos:position pos:line="78" pos:column="7"/></cpp:directive> <name pos:line="78" pos:column="8">HAVE_SSL_GET_SHUTDOWN<pos:position pos:line="78" pos:column="29"/></name></cpp:ifdef>
      <switch pos:line="79" pos:column="7">switch<condition pos:line="79" pos:column="13">(<expr><call><name pos:line="79" pos:column="14">SSL_get_shutdown<pos:position pos:line="79" pos:column="30"/></name><argument_list pos:line="79" pos:column="30">(<argument><expr><name><name pos:line="79" pos:column="31">connssl<pos:position pos:line="79" pos:column="38"/></name><operator pos:line="79" pos:column="38">-&gt;<pos:position pos:line="79" pos:column="43"/></operator><name pos:line="79" pos:column="40">handle<pos:position pos:line="79" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="48"/></condition> <block pos:line="79" pos:column="49">{
      <case pos:line="80" pos:column="7">case <expr><name pos:line="80" pos:column="12">SSL_SENT_SHUTDOWN<pos:position pos:line="80" pos:column="29"/></name></expr>:<pos:position pos:line="80" pos:column="30"/></case>
        <expr_stmt><expr><call><name pos:line="81" pos:column="9">infof<pos:position pos:line="81" pos:column="14"/></name><argument_list pos:line="81" pos:column="14">(<argument><expr><name pos:line="81" pos:column="15">data<pos:position pos:line="81" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="21">"SSL_get_shutdown() returned SSL_SENT_SHUTDOWN\n"<pos:position pos:line="81" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="72"/></expr_stmt>
        <break pos:line="82" pos:column="9">break;<pos:position pos:line="82" pos:column="15"/></break>
      <case pos:line="83" pos:column="7">case <expr><name pos:line="83" pos:column="12">SSL_RECEIVED_SHUTDOWN<pos:position pos:line="83" pos:column="33"/></name></expr>:<pos:position pos:line="83" pos:column="34"/></case>
        <expr_stmt><expr><call><name pos:line="84" pos:column="9">infof<pos:position pos:line="84" pos:column="14"/></name><argument_list pos:line="84" pos:column="14">(<argument><expr><name pos:line="84" pos:column="15">data<pos:position pos:line="84" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="21">"SSL_get_shutdown() returned SSL_RECEIVED_SHUTDOWN\n"<pos:position pos:line="84" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="76"/></expr_stmt>
        <break pos:line="85" pos:column="9">break;<pos:position pos:line="85" pos:column="15"/></break>
      <case pos:line="86" pos:column="7">case <expr><name pos:line="86" pos:column="12">SSL_SENT_SHUTDOWN<pos:position pos:line="86" pos:column="29"/></name><operator pos:line="86" pos:column="29">|<pos:position pos:line="86" pos:column="30"/></operator><name pos:line="86" pos:column="30">SSL_RECEIVED_SHUTDOWN<pos:position pos:line="86" pos:column="51"/></name></expr>:<pos:position pos:line="86" pos:column="52"/></case>
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">infof<pos:position pos:line="87" pos:column="14"/></name><argument_list pos:line="87" pos:column="14">(<argument><expr><name pos:line="87" pos:column="15">data<pos:position pos:line="87" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="21">"SSL_get_shutdown() returned SSL_SENT_SHUTDOWN|"<pos:position pos:line="87" pos:column="69"/></literal>
              <literal type="string" pos:line="88" pos:column="15">"SSL_RECEIVED__SHUTDOWN\n"<pos:position pos:line="88" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="43"/></expr_stmt>
        <break pos:line="89" pos:column="9">break;<pos:position pos:line="89" pos:column="15"/></break>
      }<pos:position pos:line="90" pos:column="8"/></block></switch>
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="94" pos:column="5">SSL_free<pos:position pos:line="94" pos:column="13"/></name><argument_list pos:line="94" pos:column="13">(<argument><expr><name><name pos:line="94" pos:column="14">connssl<pos:position pos:line="94" pos:column="21"/></name><operator pos:line="94" pos:column="21">-&gt;<pos:position pos:line="94" pos:column="26"/></operator><name pos:line="94" pos:column="23">handle<pos:position pos:line="94" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="95" pos:column="5">connssl<pos:position pos:line="95" pos:column="12"/></name><operator pos:line="95" pos:column="12">-&gt;<pos:position pos:line="95" pos:column="17"/></operator><name pos:line="95" pos:column="14">handle<pos:position pos:line="95" pos:column="20"/></name></name> <operator pos:line="95" pos:column="21">=<pos:position pos:line="95" pos:column="22"/></operator> <name pos:line="95" pos:column="23">NULL<pos:position pos:line="95" pos:column="27"/></name></expr>;<pos:position pos:line="95" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="96" pos:column="4"/></block></then></if>
  <return pos:line="97" pos:column="3">return <expr><name pos:line="97" pos:column="10">retval<pos:position pos:line="97" pos:column="16"/></name></expr>;<pos:position pos:line="97" pos:column="17"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
