<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1232_curl-7.41.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">curlx_nonblock<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">curl_socket_t<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">sockfd<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>,    <comment type="block" pos:line="1" pos:column="45">/* operate on this */</comment>
                   <parameter><decl><type><name pos:line="2" pos:column="20">int<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">nonblock<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>   <comment type="block" pos:line="2" pos:column="35">/* TRUE or FALSE */</comment>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><call><name pos:line="4" pos:column="5">defined<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">USE_BLOCKING_SOCKETS<pos:position pos:line="4" pos:column="33"/></name></expr></argument>)<pos:position pos:line="4" pos:column="34"/></argument_list></call></expr></cpp:if>

  <return pos:line="6" pos:column="3">return <expr><literal type="number" pos:line="6" pos:column="10">0<pos:position pos:line="6" pos:column="11"/></literal></expr>;<pos:position pos:line="6" pos:column="12"/></return> <comment type="block" pos:line="6" pos:column="13">/* returns success */</comment>

<cpp:elif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">elif<pos:position pos:line="8" pos:column="6"/></cpp:directive> <expr><call><name pos:line="8" pos:column="7">defined<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">HAVE_FCNTL_O_NONBLOCK<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr></cpp:elif>

  <comment type="block" pos:line="10" pos:column="3">/* most recent unix versions */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">flags<pos:position pos:line="11" pos:column="12"/></name></decl>;<pos:position pos:line="11" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">flags<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <call><name pos:line="12" pos:column="11">sfcntl<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><name pos:line="12" pos:column="18">sockfd<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">F_GETFL<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="35">0<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">nonblock<pos:position pos:line="13" pos:column="14"/></name></expr>)<pos:position pos:line="13" pos:column="15"/></condition><then pos:line="13" pos:column="15">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><call><name pos:line="14" pos:column="12">sfcntl<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">sockfd<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">F_SETFL<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="36">flags<pos:position pos:line="14" pos:column="41"/></name> <operator pos:line="14" pos:column="42">|<pos:position pos:line="14" pos:column="43"/></operator> <name pos:line="14" pos:column="44">O_NONBLOCK<pos:position pos:line="14" pos:column="54"/></name></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="56"/></return></block></then>
  <else pos:line="15" pos:column="3">else
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><call><name pos:line="16" pos:column="12">sfcntl<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">sockfd<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="27">F_SETFL<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">flags<pos:position pos:line="16" pos:column="41"/></name> <operator pos:line="16" pos:column="42">&amp;<pos:position pos:line="16" pos:column="47"/></operator> <operator pos:line="16" pos:column="44">(<pos:position pos:line="16" pos:column="45"/></operator><operator pos:line="16" pos:column="45">~<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">O_NONBLOCK<pos:position pos:line="16" pos:column="56"/></name><operator pos:line="16" pos:column="56">)<pos:position pos:line="16" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></return></block></else></if>

<cpp:elif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">elif<pos:position pos:line="18" pos:column="6"/></cpp:directive> <expr><call><name pos:line="18" pos:column="7">defined<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">HAVE_IOCTL_FIONBIO<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr></cpp:elif>

  <comment type="block" pos:line="20" pos:column="3">/* older unix versions */</comment>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">flags<pos:position pos:line="21" pos:column="12"/></name> <init pos:line="21" pos:column="13">= <expr><ternary><condition><expr><name pos:line="21" pos:column="15">nonblock<pos:position pos:line="21" pos:column="23"/></name></expr> ?<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25"> <expr><literal type="number" pos:line="21" pos:column="26">1<pos:position pos:line="21" pos:column="27"/></literal></expr> <pos:position pos:line="21" pos:column="28"/></then><else pos:line="21" pos:column="28">: <expr><literal type="number" pos:line="21" pos:column="30">0<pos:position pos:line="21" pos:column="31"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="21" pos:column="32"/></decl_stmt>
  <return pos:line="22" pos:column="3">return <expr><call><name pos:line="22" pos:column="10">ioctl<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">sockfd<pos:position pos:line="22" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="24">FIONBIO<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="33">&amp;<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="34">flags<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></return>

<cpp:elif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">elif<pos:position pos:line="24" pos:column="6"/></cpp:directive> <expr><call><name pos:line="24" pos:column="7">defined<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">HAVE_IOCTLSOCKET_FIONBIO<pos:position pos:line="24" pos:column="39"/></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr></cpp:elif>

  <comment type="block" pos:line="26" pos:column="3">/* Windows */</comment>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">unsigned<pos:position pos:line="27" pos:column="11"/></name> <name pos:line="27" pos:column="12">long<pos:position pos:line="27" pos:column="16"/></name></type> <name pos:line="27" pos:column="17">flags<pos:position pos:line="27" pos:column="22"/></name> <init pos:line="27" pos:column="23">= <expr><ternary><condition><expr><name pos:line="27" pos:column="25">nonblock<pos:position pos:line="27" pos:column="33"/></name></expr> ?<pos:position pos:line="27" pos:column="35"/></condition><then pos:line="27" pos:column="35"> <expr><literal type="number" pos:line="27" pos:column="36">1UL<pos:position pos:line="27" pos:column="39"/></literal></expr> <pos:position pos:line="27" pos:column="40"/></then><else pos:line="27" pos:column="40">: <expr><literal type="number" pos:line="27" pos:column="42">0UL<pos:position pos:line="27" pos:column="45"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="27" pos:column="46"/></decl_stmt>
  <return pos:line="28" pos:column="3">return <expr><call><name pos:line="28" pos:column="10">ioctlsocket<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">sockfd<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="30">FIONBIO<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="39">&amp;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="40">flags<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></return>

<cpp:elif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">elif<pos:position pos:line="30" pos:column="6"/></cpp:directive> <expr><call><name pos:line="30" pos:column="7">defined<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">HAVE_IOCTLSOCKET_CAMEL_FIONBIO<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call></expr></cpp:elif>

  <comment type="block" pos:line="32" pos:column="3">/* Amiga */</comment>
  <decl_stmt><decl><type><name pos:line="33" pos:column="3">long<pos:position pos:line="33" pos:column="7"/></name></type> <name pos:line="33" pos:column="8">flags<pos:position pos:line="33" pos:column="13"/></name> <init pos:line="33" pos:column="14">= <expr><ternary><condition><expr><name pos:line="33" pos:column="16">nonblock<pos:position pos:line="33" pos:column="24"/></name></expr> ?<pos:position pos:line="33" pos:column="26"/></condition><then pos:line="33" pos:column="26"> <expr><literal type="number" pos:line="33" pos:column="27">1L<pos:position pos:line="33" pos:column="29"/></literal></expr> <pos:position pos:line="33" pos:column="30"/></then><else pos:line="33" pos:column="30">: <expr><literal type="number" pos:line="33" pos:column="32">0L<pos:position pos:line="33" pos:column="34"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="33" pos:column="35"/></decl_stmt>
  <return pos:line="34" pos:column="3">return <expr><call><name pos:line="34" pos:column="10">IoctlSocket<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><name pos:line="34" pos:column="22">sockfd<pos:position pos:line="34" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="30">FIONBIO<pos:position pos:line="34" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="39">flags<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></return>

<cpp:elif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">elif<pos:position pos:line="36" pos:column="6"/></cpp:directive> <expr><call><name pos:line="36" pos:column="7">defined<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">HAVE_SETSOCKOPT_SO_NONBLOCK<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr></cpp:elif>

  <comment type="block" pos:line="38" pos:column="3">/* BeOS */</comment>
  <decl_stmt><decl><type><name pos:line="39" pos:column="3">long<pos:position pos:line="39" pos:column="7"/></name></type> <name pos:line="39" pos:column="8">b<pos:position pos:line="39" pos:column="9"/></name> <init pos:line="39" pos:column="10">= <expr><ternary><condition><expr><name pos:line="39" pos:column="12">nonblock<pos:position pos:line="39" pos:column="20"/></name></expr> ?<pos:position pos:line="39" pos:column="22"/></condition><then pos:line="39" pos:column="22"> <expr><literal type="number" pos:line="39" pos:column="23">1L<pos:position pos:line="39" pos:column="25"/></literal></expr> <pos:position pos:line="39" pos:column="26"/></then><else pos:line="39" pos:column="26">: <expr><literal type="number" pos:line="39" pos:column="28">0L<pos:position pos:line="39" pos:column="30"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="39" pos:column="31"/></decl_stmt>
  <return pos:line="40" pos:column="3">return <expr><call><name pos:line="40" pos:column="10">setsockopt<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><name pos:line="40" pos:column="21">sockfd<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="29">SOL_SOCKET<pos:position pos:line="40" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="41">SO_NONBLOCK<pos:position pos:line="40" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="54">&amp;<pos:position pos:line="40" pos:column="59"/></operator><name pos:line="40" pos:column="55">b<pos:position pos:line="40" pos:column="56"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="58">sizeof<argument_list pos:line="40" pos:column="64">(<argument><expr><name pos:line="40" pos:column="65">b<pos:position pos:line="40" pos:column="66"/></name></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="69"/></return>

<cpp:else pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">else<pos:position pos:line="42" pos:column="6"/></cpp:directive></cpp:else>
<cpp:error pos:line="43" pos:column="1">#  <cpp:directive pos:line="43" pos:column="4">error<pos:position pos:line="43" pos:column="9"/></cpp:directive> <cpp:literal pos:line="43" pos:column="10">"no non-blocking method was found/used/set"<pos:position pos:line="43" pos:column="53"/></cpp:literal></cpp:error>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
