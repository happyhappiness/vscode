<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_289_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="15"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">curl<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">res<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name pos:line="4" pos:column="18">CURLE_OK<pos:position pos:line="4" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">curl_slist<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">recipients<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><name pos:line="5" pos:column="35">NULL<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">upload_status<pos:position pos:line="6" pos:column="23"/></name></name></type> <name pos:line="6" pos:column="24">upload_ctx<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="8" pos:column="3">upload_ctx<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">.<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">lines_read<pos:position pos:line="8" pos:column="24"/></name></name> <operator pos:line="8" pos:column="25">=<pos:position pos:line="8" pos:column="26"/></operator> <literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">curl<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">=<pos:position pos:line="10" pos:column="9"/></operator> <call><name pos:line="10" pos:column="10">curl_easy_init<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">()<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">curl<pos:position pos:line="11" pos:column="10"/></name></expr>)<pos:position pos:line="11" pos:column="11"/></condition><then pos:line="11" pos:column="11"> <block pos:line="11" pos:column="12">{
    <comment type="block" pos:line="12" pos:column="5">/* Set username and password */</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">curl_easy_setopt<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">curl<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="28">CURLOPT_USERNAME<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="46">"user"<pos:position pos:line="13" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">curl_easy_setopt<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">curl<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="28">CURLOPT_PASSWORD<pos:position pos:line="14" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="46">"secret"<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="56"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* This is the URL for your mailserver. Note the use of port 587 here,
     * instead of the normal SMTP port (25). Port 587 is commonly used for
     * secure mail submission (see RFC4403), but you should use whatever
     * matches your server configuration. */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">curl_easy_setopt<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">curl<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="28">CURLOPT_URL<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="41">"smtp://mainserver.example.net:587"<pos:position pos:line="20" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="78"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* In this example, we'll start with a plain text connection, and upgrade
     * to Transport Layer Security (TLS) using the STARTTLS command. Be careful
     * of using CURLUSESSL_TRY here, because if TLS upgrade fails, the transfer
     * will continue anyway - see the security discussion in the libcurl
     * tutorial for more details. */</comment>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">curl_easy_setopt<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">curl<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">CURLOPT_USE_SSL<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="45">(<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="46">long<pos:position pos:line="27" pos:column="50"/></name><operator pos:line="27" pos:column="50">)<pos:position pos:line="27" pos:column="51"/></operator><name pos:line="27" pos:column="51">CURLUSESSL_ALL<pos:position pos:line="27" pos:column="65"/></name></expr></argument>)<pos:position pos:line="27" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="67"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* If your server doesn't have a valid certificate, then you can disable
     * part of the Transport Layer Security protection by setting the
     * CURLOPT_SSL_VERIFYPEER and CURLOPT_SSL_VERIFYHOST options to 0 (false).
     *   curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
     *   curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
     * That is, in general, a bad idea. It is still better than sending your
     * authentication details in plain text though.  Instead, you should get
     * the issuer certificate (or the host certificate if the certificate is
     * self-signed) and add it to the set of certificates that are known to
     * libcurl using CURLOPT_CAINFO and/or CURLOPT_CAPATH. See docs/SSLCERTS
     * for more information. */</comment>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">curl_easy_setopt<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">curl<pos:position pos:line="40" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="28">CURLOPT_CAINFO<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="44">"/path/to/certificate.pem"<pos:position pos:line="40" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="72"/></expr_stmt>

    <comment type="block" pos:line="42" pos:column="5">/* Note that this option isn't strictly required, omitting it will result
     * in libcurl sending the MAIL FROM command with empty sender data. All
     * autoresponses should have an empty reverse-path, and should be directed
     * to the address in the reverse-path which triggered them. Otherwise,
     * they could cause an endless loop. See RFC 5321 Section 4.5.5 for more
     * details.
     */</comment>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">curl_easy_setopt<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name pos:line="49" pos:column="22">curl<pos:position pos:line="49" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="28">CURLOPT_MAIL_FROM<pos:position pos:line="49" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="47">FROM<pos:position pos:line="49" pos:column="51"/></name></expr></argument>)<pos:position pos:line="49" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="53"/></expr_stmt>

    <comment type="block" pos:line="51" pos:column="5">/* Add two recipients, in this particular case they correspond to the
     * To: and Cc: addressees in the header, but they could be any kind of
     * recipient. */</comment>
    <expr_stmt><expr><name pos:line="54" pos:column="5">recipients<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <call><name pos:line="54" pos:column="18">curl_slist_append<pos:position pos:line="54" pos:column="35"/></name><argument_list pos:line="54" pos:column="35">(<argument><expr><name pos:line="54" pos:column="36">recipients<pos:position pos:line="54" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="48">TO<pos:position pos:line="54" pos:column="50"/></name></expr></argument>)<pos:position pos:line="54" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">recipients<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">=<pos:position pos:line="55" pos:column="17"/></operator> <call><name pos:line="55" pos:column="18">curl_slist_append<pos:position pos:line="55" pos:column="35"/></name><argument_list pos:line="55" pos:column="35">(<argument><expr><name pos:line="55" pos:column="36">recipients<pos:position pos:line="55" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="48">CC<pos:position pos:line="55" pos:column="50"/></name></expr></argument>)<pos:position pos:line="55" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">curl_easy_setopt<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">curl<pos:position pos:line="56" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="28">CURLOPT_MAIL_RCPT<pos:position pos:line="56" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="47">recipients<pos:position pos:line="56" pos:column="57"/></name></expr></argument>)<pos:position pos:line="56" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="59"/></expr_stmt>

    <comment type="block" pos:line="58" pos:column="5">/* We're using a callback function to specify the payload (the headers and
     * body of the message). You could just use the CURLOPT_READDATA option to
     * specify a FILE pointer to read from. */</comment>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">curl_easy_setopt<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">curl<pos:position pos:line="61" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="28">CURLOPT_READFUNCTION<pos:position pos:line="61" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="50">payload_source<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">curl_easy_setopt<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">curl<pos:position pos:line="62" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="28">CURLOPT_READDATA<pos:position pos:line="62" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="46">&amp;<pos:position pos:line="62" pos:column="51"/></operator><name pos:line="62" pos:column="47">upload_ctx<pos:position pos:line="62" pos:column="57"/></name></expr></argument>)<pos:position pos:line="62" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">curl_easy_setopt<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">curl<pos:position pos:line="63" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="28">CURLOPT_UPLOAD<pos:position pos:line="63" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="44">1L<pos:position pos:line="63" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="48"/></expr_stmt>

    <comment type="block" pos:line="65" pos:column="5">/* Since the traffic will be encrypted, it is very useful to turn on debug
     * information within libcurl to see what is happening during the transfer.
     */</comment>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">curl_easy_setopt<pos:position pos:line="68" pos:column="21"/></name><argument_list pos:line="68" pos:column="21">(<argument><expr><name pos:line="68" pos:column="22">curl<pos:position pos:line="68" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="28">CURLOPT_VERBOSE<pos:position pos:line="68" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="45">1L<pos:position pos:line="68" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="70" pos:column="5">/* Send the message */</comment>
    <expr_stmt><expr><name pos:line="71" pos:column="5">res<pos:position pos:line="71" pos:column="8"/></name> <operator pos:line="71" pos:column="9">=<pos:position pos:line="71" pos:column="10"/></operator> <call><name pos:line="71" pos:column="11">curl_easy_perform<pos:position pos:line="71" pos:column="28"/></name><argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">curl<pos:position pos:line="71" pos:column="33"/></name></expr></argument>)<pos:position pos:line="71" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="73" pos:column="5">/* Check for errors */</comment>
    <if pos:line="74" pos:column="5">if<condition pos:line="74" pos:column="7">(<expr><name pos:line="74" pos:column="8">res<pos:position pos:line="74" pos:column="11"/></name> <operator pos:line="74" pos:column="12">!=<pos:position pos:line="74" pos:column="14"/></operator> <name pos:line="74" pos:column="15">CURLE_OK<pos:position pos:line="74" pos:column="23"/></name></expr>)<pos:position pos:line="74" pos:column="24"/></condition><then pos:line="74" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="7">fprintf<pos:position pos:line="75" pos:column="14"/></name><argument_list pos:line="75" pos:column="14">(<argument><expr><name pos:line="75" pos:column="15">stderr<pos:position pos:line="75" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="23">"curl_easy_perform() failed: %s\n"<pos:position pos:line="75" pos:column="57"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="76" pos:column="15">curl_easy_strerror<pos:position pos:line="76" pos:column="33"/></name><argument_list pos:line="76" pos:column="33">(<argument><expr><name pos:line="76" pos:column="34">res<pos:position pos:line="76" pos:column="37"/></name></expr></argument>)<pos:position pos:line="76" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="76" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="40"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="78" pos:column="5">/* Free the list of recipients */</comment>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">curl_slist_free_all<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument><expr><name pos:line="79" pos:column="25">recipients<pos:position pos:line="79" pos:column="35"/></name></expr></argument>)<pos:position pos:line="79" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="81" pos:column="5">/* Always cleanup */</comment>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">curl_easy_cleanup<pos:position pos:line="82" pos:column="22"/></name><argument_list pos:line="82" pos:column="22">(<argument><expr><name pos:line="82" pos:column="23">curl<pos:position pos:line="82" pos:column="27"/></name></expr></argument>)<pos:position pos:line="82" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="83" pos:column="4"/></block></then></if>

  <return pos:line="85" pos:column="3">return <expr><operator pos:line="85" pos:column="10">(<pos:position pos:line="85" pos:column="11"/></operator><name pos:line="85" pos:column="11">int<pos:position pos:line="85" pos:column="14"/></name><operator pos:line="85" pos:column="14">)<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="15">res<pos:position pos:line="85" pos:column="18"/></name></expr>;<pos:position pos:line="85" pos:column="19"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
