<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_243_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="15"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">curl<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">res<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">WriteThis<pos:position pos:line="6" pos:column="19"/></name></name></type> <name pos:line="6" pos:column="20">wt<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="8" pos:column="3">wt<pos:position pos:line="8" pos:column="5"/></name><operator pos:line="8" pos:column="5">.<pos:position pos:line="8" pos:column="6"/></operator><name pos:line="8" pos:column="6">readptr<pos:position pos:line="8" pos:column="13"/></name></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">data<pos:position pos:line="8" pos:column="20"/></name></expr>;<pos:position pos:line="8" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="9" pos:column="3">wt<pos:position pos:line="9" pos:column="5"/></name><operator pos:line="9" pos:column="5">.<pos:position pos:line="9" pos:column="6"/></operator><name pos:line="9" pos:column="6">sizeleft<pos:position pos:line="9" pos:column="14"/></name></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <call><name pos:line="9" pos:column="17">strlen<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">data<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* In windows, this will init the winsock stuff */</comment>
  <expr_stmt><expr><name pos:line="12" pos:column="3">res<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">curl_global_init<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">CURL_GLOBAL_DEFAULT<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
  <comment type="block" pos:line="13" pos:column="3">/* Check for errors */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">res<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">!=<pos:position pos:line="14" pos:column="12"/></operator> <name pos:line="14" pos:column="13">CURLE_OK<pos:position pos:line="14" pos:column="21"/></name></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <block pos:line="14" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">fprintf<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">stderr<pos:position pos:line="15" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="21">"curl_global_init() failed: %s\n"<pos:position pos:line="15" pos:column="54"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="16" pos:column="13">curl_easy_strerror<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">res<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><literal type="number" pos:line="17" pos:column="12">1<pos:position pos:line="17" pos:column="13"/></literal></expr>;<pos:position pos:line="17" pos:column="14"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="20" pos:column="3">/* get a curl handle */</comment>
  <expr_stmt><expr><name pos:line="21" pos:column="3">curl<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <call><name pos:line="21" pos:column="10">curl_easy_init<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">()<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">curl<pos:position pos:line="22" pos:column="10"/></name></expr>)<pos:position pos:line="22" pos:column="11"/></condition><then pos:line="22" pos:column="11"> <block pos:line="22" pos:column="12">{
    <comment type="block" pos:line="23" pos:column="5">/* First set the URL that is about to receive our POST. */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">curl_easy_setopt<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">curl<pos:position pos:line="24" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="28">CURLOPT_URL<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="41">"https://example.com/index.cgi"<pos:position pos:line="24" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="74"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* Now specify we want to POST data */</comment>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">curl_easy_setopt<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">curl<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">CURLOPT_POST<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="42">1L<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* we want to use our own read function */</comment>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">curl_easy_setopt<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">curl<pos:position pos:line="30" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="28">CURLOPT_READFUNCTION<pos:position pos:line="30" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="50">read_callback<pos:position pos:line="30" pos:column="63"/></name></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="65"/></expr_stmt>

    <comment type="block" pos:line="32" pos:column="5">/* pointer to pass to our read function */</comment>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">curl_easy_setopt<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">curl<pos:position pos:line="33" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="28">CURLOPT_READDATA<pos:position pos:line="33" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="46">&amp;<pos:position pos:line="33" pos:column="51"/></operator><name pos:line="33" pos:column="47">wt<pos:position pos:line="33" pos:column="49"/></name></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* get verbose debug output please */</comment>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">curl_easy_setopt<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">curl<pos:position pos:line="36" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="28">CURLOPT_VERBOSE<pos:position pos:line="36" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="45">1L<pos:position pos:line="36" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/*
      If you use POST to a HTTP 1.1 server, you can send data without knowing
      the size before starting the POST if you use chunked encoding. You
      enable this by adding a header like "Transfer-Encoding: chunked" with
      CURLOPT_HTTPHEADER. With HTTP 1.0 or without chunked transfer, you must
      specify the size in the request.
    */</comment>
<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">USE_CHUNKED<pos:position pos:line="45" pos:column="19"/></name></cpp:ifdef>
    <block pos:line="46" pos:column="5">{
      <decl_stmt><decl><type><name><name pos:line="47" pos:column="7">struct<pos:position pos:line="47" pos:column="13"/></name> <name pos:line="47" pos:column="14">curl_slist<pos:position pos:line="47" pos:column="24"/></name></name> <modifier pos:line="47" pos:column="25">*<pos:position pos:line="47" pos:column="26"/></modifier></type><name pos:line="47" pos:column="26">chunk<pos:position pos:line="47" pos:column="31"/></name> <init pos:line="47" pos:column="32">= <expr><name pos:line="47" pos:column="34">NULL<pos:position pos:line="47" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="47" pos:column="39"/></decl_stmt>

      <expr_stmt><expr><name pos:line="49" pos:column="7">chunk<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <call><name pos:line="49" pos:column="15">curl_slist_append<pos:position pos:line="49" pos:column="32"/></name><argument_list pos:line="49" pos:column="32">(<argument><expr><name pos:line="49" pos:column="33">chunk<pos:position pos:line="49" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="40">"Transfer-Encoding: chunked"<pos:position pos:line="49" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name pos:line="50" pos:column="7">res<pos:position pos:line="50" pos:column="10"/></name> <operator pos:line="50" pos:column="11">=<pos:position pos:line="50" pos:column="12"/></operator> <call><name pos:line="50" pos:column="13">curl_easy_setopt<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">curl<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">CURLOPT_HTTPHEADER<pos:position pos:line="50" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="56">chunk<pos:position pos:line="50" pos:column="61"/></name></expr></argument>)<pos:position pos:line="50" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="63"/></expr_stmt>
      <comment type="block" pos:line="51" pos:column="7">/* use curl_slist_free_all() after the *perform() call to free this
         list again */</comment>
    }<pos:position pos:line="53" pos:column="6"/></block>
<cpp:else pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">else<pos:position pos:line="54" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="55" pos:column="5">/* Set the expected POST size. If you want to POST large amounts of data,
       consider CURLOPT_POSTFIELDSIZE_LARGE */</comment>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">curl_easy_setopt<pos:position pos:line="57" pos:column="21"/></name><argument_list pos:line="57" pos:column="21">(<argument><expr><name pos:line="57" pos:column="22">curl<pos:position pos:line="57" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="28">CURLOPT_POSTFIELDSIZE<pos:position pos:line="57" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="51">(<pos:position pos:line="57" pos:column="52"/></operator><name pos:line="57" pos:column="52">long<pos:position pos:line="57" pos:column="56"/></name><operator pos:line="57" pos:column="56">)<pos:position pos:line="57" pos:column="57"/></operator><name><name pos:line="57" pos:column="57">wt<pos:position pos:line="57" pos:column="59"/></name><operator pos:line="57" pos:column="59">.<pos:position pos:line="57" pos:column="60"/></operator><name pos:line="57" pos:column="60">sizeleft<pos:position pos:line="57" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="70"/></expr_stmt>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">ifdef<pos:position pos:line="60" pos:column="7"/></cpp:directive> <name pos:line="60" pos:column="8">DISABLE_EXPECT<pos:position pos:line="60" pos:column="22"/></name></cpp:ifdef>
    <comment type="block" pos:line="61" pos:column="5">/*
      Using POST with HTTP 1.1 implies the use of a "Expect: 100-continue"
      header.  You can disable this header with CURLOPT_HTTPHEADER as usual.
      NOTE: if you want chunked transfer too, you need to combine these two
      since you can only set one list of headers with CURLOPT_HTTPHEADER. */</comment>

    <comment type="block" pos:line="67" pos:column="5">/* A less good option would be to enforce HTTP 1.0, but that might also
       have other implications. */</comment>
    <block pos:line="69" pos:column="5">{
      <decl_stmt><decl><type><name><name pos:line="70" pos:column="7">struct<pos:position pos:line="70" pos:column="13"/></name> <name pos:line="70" pos:column="14">curl_slist<pos:position pos:line="70" pos:column="24"/></name></name> <modifier pos:line="70" pos:column="25">*<pos:position pos:line="70" pos:column="26"/></modifier></type><name pos:line="70" pos:column="26">chunk<pos:position pos:line="70" pos:column="31"/></name> <init pos:line="70" pos:column="32">= <expr><name pos:line="70" pos:column="34">NULL<pos:position pos:line="70" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="70" pos:column="39"/></decl_stmt>

      <expr_stmt><expr><name pos:line="72" pos:column="7">chunk<pos:position pos:line="72" pos:column="12"/></name> <operator pos:line="72" pos:column="13">=<pos:position pos:line="72" pos:column="14"/></operator> <call><name pos:line="72" pos:column="15">curl_slist_append<pos:position pos:line="72" pos:column="32"/></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">chunk<pos:position pos:line="72" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="40">"Expect:"<pos:position pos:line="72" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name pos:line="73" pos:column="7">res<pos:position pos:line="73" pos:column="10"/></name> <operator pos:line="73" pos:column="11">=<pos:position pos:line="73" pos:column="12"/></operator> <call><name pos:line="73" pos:column="13">curl_easy_setopt<pos:position pos:line="73" pos:column="29"/></name><argument_list pos:line="73" pos:column="29">(<argument><expr><name pos:line="73" pos:column="30">curl<pos:position pos:line="73" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="36">CURLOPT_HTTPHEADER<pos:position pos:line="73" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="56">chunk<pos:position pos:line="73" pos:column="61"/></name></expr></argument>)<pos:position pos:line="73" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="63"/></expr_stmt>
      <comment type="block" pos:line="74" pos:column="7">/* use curl_slist_free_all() after the *perform() call to free this
         list again */</comment>
    }<pos:position pos:line="76" pos:column="6"/></block>
<cpp:endif pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">endif<pos:position pos:line="77" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="79" pos:column="5">/* Perform the request, res will get the return code */</comment>
    <expr_stmt><expr><name pos:line="80" pos:column="5">res<pos:position pos:line="80" pos:column="8"/></name> <operator pos:line="80" pos:column="9">=<pos:position pos:line="80" pos:column="10"/></operator> <call><name pos:line="80" pos:column="11">curl_easy_perform<pos:position pos:line="80" pos:column="28"/></name><argument_list pos:line="80" pos:column="28">(<argument><expr><name pos:line="80" pos:column="29">curl<pos:position pos:line="80" pos:column="33"/></name></expr></argument>)<pos:position pos:line="80" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="35"/></expr_stmt>
    <comment type="block" pos:line="81" pos:column="5">/* Check for errors */</comment>
    <if pos:line="82" pos:column="5">if<condition pos:line="82" pos:column="7">(<expr><name pos:line="82" pos:column="8">res<pos:position pos:line="82" pos:column="11"/></name> <operator pos:line="82" pos:column="12">!=<pos:position pos:line="82" pos:column="14"/></operator> <name pos:line="82" pos:column="15">CURLE_OK<pos:position pos:line="82" pos:column="23"/></name></expr>)<pos:position pos:line="82" pos:column="24"/></condition><then pos:line="82" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="7">fprintf<pos:position pos:line="83" pos:column="14"/></name><argument_list pos:line="83" pos:column="14">(<argument><expr><name pos:line="83" pos:column="15">stderr<pos:position pos:line="83" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="23">"curl_easy_perform() failed: %s\n"<pos:position pos:line="83" pos:column="57"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="84" pos:column="15">curl_easy_strerror<pos:position pos:line="84" pos:column="33"/></name><argument_list pos:line="84" pos:column="33">(<argument><expr><name pos:line="84" pos:column="34">res<pos:position pos:line="84" pos:column="37"/></name></expr></argument>)<pos:position pos:line="84" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="84" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="40"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="86" pos:column="5">/* always cleanup */</comment>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">curl_easy_cleanup<pos:position pos:line="87" pos:column="22"/></name><argument_list pos:line="87" pos:column="22">(<argument><expr><name pos:line="87" pos:column="23">curl<pos:position pos:line="87" pos:column="27"/></name></expr></argument>)<pos:position pos:line="87" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="88" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="89" pos:column="3">curl_global_cleanup<pos:position pos:line="89" pos:column="22"/></name><argument_list pos:line="89" pos:column="22">()<pos:position pos:line="89" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="25"/></expr_stmt>
  <return pos:line="90" pos:column="3">return <expr><literal type="number" pos:line="90" pos:column="10">0<pos:position pos:line="90" pos:column="11"/></literal></expr>;<pos:position pos:line="90" pos:column="12"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
