 "\n"
 "              If this option is used several times, the last one will be used.\n"
 "\n"
 "       --post301\n"
 "              (HTTP) Tells curl to respect RFC 7231/6.4.2 and not convert POST\n"
 "              requests into GET requests when following a 301 redirection. The\n"
-"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
+"              non-RFC behaviour is ubiquitous in web browsers,  so  curl  does\n"
 , stdout);
  fputs(
-"              the conversion by default to maintain  consistency.  However,  a\n"
-"              server  may  require  a POST to remain a POST after such a redi-\n"
-"              rection. This option is meaningful only when using  -L,  --loca-\n"
+"              the  conversion  by  default to maintain consistency. However, a\n"
+"              server may require a POST to remain a POST after  such  a  redi-\n"
+"              rection.  This  option is meaningful only when using -L, --loca-\n"
 "              tion.\n"
 "\n"
-"              See  also  --post302  and --post303 and -L, --location. Added in\n"
+"              See also --post302 and --post303 and -L,  --location.  Added  in\n"
 "              7.17.1.\n"
 "\n"
 "       --post302\n"
 "              (HTTP) Tells curl to respect RFC 7231/6.4.3 and not convert POST\n"
 , stdout);
  fputs(
 "              requests into GET requests when following a 302 redirection. The\n"
-"              non-RFC behaviour is ubiquitous in web browsers,  so  curl  does\n"
-"              the  conversion  by  default to maintain consistency. However, a\n"
-"              server may require a POST to remain a POST after  such  a  redi-\n"
-"              rection.  This  option is meaningful only when using -L, --loca-\n"
+"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
+"              the conversion by default to maintain  consistency.  However,  a\n"
+"              server  may  require  a POST to remain a POST after such a redi-\n"
+"              rection. This option is meaningful only when using  -L,  --loca-\n"
 "              tion.\n"
 "\n"
-"              See also --post301 and --post303 and -L,  --location.  Added  in\n"
+"              See  also  --post301  and --post303 and -L, --location. Added in\n"
 , stdout);
  fputs(
 "              7.19.1.\n"
 "\n"
 "       --post303\n"
 "              (HTTP) Tells curl to respect RFC 7231/6.4.4 and not convert POST\n"
 "              requests into GET requests when following a 303 redirection. The\n"
-"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
-"              the conversion by default to maintain  consistency.  However,  a\n"
-"              server  may  require  a POST to remain a POST after such a redi-\n"
+"              non-RFC behaviour is ubiquitous in web browsers,  so  curl  does\n"
+"              the  conversion  by  default to maintain consistency. However, a\n"
+"              server may require a POST to remain a POST after  such  a  redi-\n"
 , stdout);
  fputs(
-"              rection. This option is meaningful only when using  -L,  --loca-\n"
+"              rection.  This  option is meaningful only when using -L, --loca-\n"
 "              tion.\n"
 "\n"
-"              See  also  --post302  and --post301 and -L, --location. Added in\n"
+"              See also --post302 and --post301 and -L,  --location.  Added  in\n"
 "              7.26.0.\n"
 "\n"
 "       --preproxy [protocol://]host[:port]\n"
-"              Use the specified SOCKS proxy before connecting to  an  HTTP  or\n"
-"              HTTPS  -x,  --proxy.  In  such a case curl first connects to the\n"
-"              SOCKS proxy and then connects (through SOCKS)  to  the  HTTP  or\n"
+"              Use  the  specified  SOCKS proxy before connecting to an HTTP or\n"
+"              HTTPS -x, --proxy. In such a case curl  first  connects  to  the\n"
+"              SOCKS  proxy  and  then  connects (through SOCKS) to the HTTP or\n"
 , stdout);
  fputs(
 "              HTTPS proxy. Hence pre proxy.\n"
 "\n"
 "              The pre proxy string should be specified with a protocol:// pre-\n"
-"              fix to  specify  alternative  proxy  protocols.  Use  socks4://,\n"
-"              socks4a://,  socks5://  or  socks5h://  to  request the specific\n"
-"              SOCKS version to be used. No protocol specified will  make  curl\n"
+"              fix  to  specify  alternative  proxy  protocols.  Use socks4://,\n"
+"              socks4a://, socks5:// or  socks5h://  to  request  the  specific\n"
+"              SOCKS  version  to be used. No protocol specified will make curl\n"
 "              default to SOCKS4.\n"
 "\n"
-"              If  the  port number is not specified in the proxy string, it is\n"
+"              If the port number is not specified in the proxy string,  it  is\n"
 , stdout);
  fputs(
 "              assumed to be 1080.\n"
 "\n"
 "              User and password that might be provided in the proxy string are\n"
-"              URL  decoded by curl. This allows you to pass in special charac-\n"
+"              URL decoded by curl. This allows you to pass in special  charac-\n"
 "              ters such as @ by using %40 or pass in a colon with %3a.\n"
 "\n"
 "              If this option is used several times, the last one will be used.\n"
 "\n"
 "              Added in 7.52.0.\n"
 "\n"
 "       -#, --progress-bar\n"
-"              Make curl display transfer progress as  a  simple  progress  bar\n"
+"              Make  curl  display  transfer  progress as a simple progress bar\n"
 , stdout);
  fputs(
 "              instead of the standard, more informational, meter.\n"
 "\n"
-"              This  progress  bar draws a single line of '#' characters across\n"
+"              This progress bar draws a single line of '#'  characters  across\n"
 "              the screen and shows a percentage if the transfer size is known.\n"
-"              For  transfers  without a known size, it will instead output one\n"
+"              For transfers without a known size, it will instead  output  one\n"
 "              '#' character for every 1024 bytes transferred.\n"
 "\n"
 "       --proto-default <protocol>\n"
 "              Tells curl to use protocol for any URL missing a scheme name.\n"
 "\n"
 , stdout);
  fputs(
 "              Example:\n"
 "\n"
 "               curl --proto-default https ftp.mozilla.org\n"
 "\n"
-"              An unknown or unsupported  protocol  causes  error  CURLE_UNSUP-\n"
+"              An  unknown  or  unsupported  protocol causes error CURLE_UNSUP-\n"
 "              PORTED_PROTOCOL (1).\n"
 "\n"
 "              This option does not change the default proxy protocol (http).\n"
 "\n"
-"              Without  this  option curl would make a guess based on the host,\n"
+"              Without this option curl would make a guess based on  the  host,\n"
 "              see --url for details.\n"
 "\n"
 "              Added in 7.45.0.\n"
 "\n"
 "       --proto-redir <protocols>\n"
 , stdout);
  fputs(
-"              Tells curl to limit what protocols it may use on redirect.  Pro-\n"
-"              tocols  denied by --proto are not overridden by this option. See\n"
+"              Tells  curl to limit what protocols it may use on redirect. Pro-\n"
+"              tocols denied by --proto are not overridden by this option.  See\n"
 "              --proto for how protocols are represented.\n"
 "\n"
 "              Example, allow only HTTP and HTTPS on redirect:\n"
 "\n"
 "               curl --proto-redir -all,http,https http://example.com\n"
 "\n"
 "              By default curl will allow all protocols on redirect except sev-\n"
 , stdout);
  fputs(
-"              eral  disabled  for  security reasons: Since 7.19.4 FILE and SCP\n"
-"              are disabled, and since 7.40.0 SMB and SMBS are  also  disabled.\n"
-"              Specifying  all  or  +all  enables  all  protocols  on redirect,\n"
+"              eral disabled for security reasons: Since 7.19.4  FILE  and  SCP\n"
+"              are  disabled,  and since 7.40.0 SMB and SMBS are also disabled.\n"
+"              Specifying all  or  +all  enables  all  protocols  on  redirect,\n"
 "              including those disabled for security.\n"
 "\n"
 "              Added in 7.20.2.\n"
 "\n"
 "       --proto <protocols>\n"
-"              Tells curl to limit what protocols it may use in  the  transfer.\n"
+"              Tells  curl  to limit what protocols it may use in the transfer.\n"
 , stdout);
  fputs(
-"              Protocols  are evaluated left to right, are comma separated, and\n"
+"              Protocols are evaluated left to right, are comma separated,  and\n"
 "              are each a protocol name or\n"
 "\n"
 "              +  Permit this protocol in addition to protocols already permit-\n"
 "                 ted (this is the default if no modifier is used).\n"
 "\n"
-"              -  Deny  this  protocol,  removing it from the list of protocols\n"
+"              -  Deny this protocol, removing it from the  list  of  protocols\n"
 "                 already permitted.\n"
 "\n"
-"              =  Permit only this protocol (ignoring the list already  permit-\n"
+"              =  Permit  only this protocol (ignoring the list already permit-\n"
 , stdout);
  fputs(
-"                 ted),  though  subject  to  later  modification by subsequent\n"
+"                 ted), though subject  to  later  modification  by  subsequent\n"
 "                 entries in the comma separated list.\n"
 "\n"
 "              For example:\n"
 "\n"
 "              --proto -ftps  uses the default protocols, but disables ftps\n"
 "\n"
