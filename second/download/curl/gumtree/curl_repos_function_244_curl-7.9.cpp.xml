<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_244_curl-7.9.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">Cookie<pos:position pos:line="1" pos:column="14"/></name></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">Curl_cookie_getlist<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">CookieInfo<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">c<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">host<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">char<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">path<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">bool<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">secure<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
   <decl_stmt><decl><type><name><name pos:line="4" pos:column="4">struct<pos:position pos:line="4" pos:column="10"/></name> <name pos:line="4" pos:column="11">Cookie<pos:position pos:line="4" pos:column="17"/></name></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">newco<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
   <decl_stmt><decl><type><name><name pos:line="5" pos:column="4">struct<pos:position pos:line="5" pos:column="10"/></name> <name pos:line="5" pos:column="11">Cookie<pos:position pos:line="5" pos:column="17"/></name></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">co<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
   <decl_stmt><decl><type><name pos:line="6" pos:column="4">time_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">now<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><call><name pos:line="6" pos:column="17">time<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">NULL<pos:position pos:line="6" pos:column="26"/></name></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
   <decl_stmt><decl><type><name pos:line="7" pos:column="4">int<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">hostlen<pos:position pos:line="7" pos:column="15"/></name><init pos:line="7" pos:column="15">=<expr><call><name pos:line="7" pos:column="16">strlen<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">host<pos:position pos:line="7" pos:column="27"/></name></expr></argument>)<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
   <decl_stmt><decl><type><name pos:line="8" pos:column="4">int<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">domlen<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>

   <decl_stmt><decl><type><name><name pos:line="10" pos:column="4">struct<pos:position pos:line="10" pos:column="10"/></name> <name pos:line="10" pos:column="11">Cookie<pos:position pos:line="10" pos:column="17"/></name></name> <modifier pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></modifier></type><name pos:line="10" pos:column="19">mainco<pos:position pos:line="10" pos:column="25"/></name><init pos:line="10" pos:column="25">=<expr><name pos:line="10" pos:column="26">NULL<pos:position pos:line="10" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>

   <if pos:line="12" pos:column="4">if<condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">c<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">||<pos:position pos:line="12" pos:column="12"/></operator> <operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name><name pos:line="12" pos:column="14">c<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">cookies<pos:position pos:line="12" pos:column="24"/></name></name></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25">
      <block type="pseudo"><return pos:line="13" pos:column="7">return <expr><name pos:line="13" pos:column="14">NULL<pos:position pos:line="13" pos:column="18"/></name></expr>;<pos:position pos:line="13" pos:column="19"/></return></block></then></if> <comment type="block" pos:line="13" pos:column="20">/* no cookie struct or no cookies in the struct */</comment>

   <expr_stmt><expr><name pos:line="15" pos:column="4">co<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <name><name pos:line="15" pos:column="9">c<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">cookies<pos:position pos:line="15" pos:column="19"/></name></name></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt>

   <while pos:line="17" pos:column="4">while<condition pos:line="17" pos:column="9">(<expr><name pos:line="17" pos:column="10">co<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition> <block pos:line="17" pos:column="14">{
      <comment type="block" pos:line="18" pos:column="7">/* only process this cookie if it is not expired or had no expire
	 date AND that if the cookie requires we're secure we must only
	 continue if we are! */</comment>
     <if pos:line="21" pos:column="6">if<condition pos:line="21" pos:column="8">( <expr><operator pos:line="21" pos:column="10">(<pos:position pos:line="21" pos:column="11"/></operator><name><name pos:line="21" pos:column="11">co<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">expires<pos:position pos:line="21" pos:column="22"/></name></name><operator pos:line="21" pos:column="22">&lt;=<pos:position pos:line="21" pos:column="27"/></operator><literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal> <operator pos:line="21" pos:column="26">||<pos:position pos:line="21" pos:column="28"/></operator> <operator pos:line="21" pos:column="29">(<pos:position pos:line="21" pos:column="30"/></operator><name><name pos:line="21" pos:column="30">co<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">expires<pos:position pos:line="21" pos:column="41"/></name></name><operator pos:line="21" pos:column="41">&gt;<pos:position pos:line="21" pos:column="45"/></operator> <name pos:line="21" pos:column="43">now<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">)<pos:position pos:line="21" pos:column="47"/></operator><operator pos:line="21" pos:column="47">)<pos:position pos:line="21" pos:column="48"/></operator> <operator pos:line="21" pos:column="49">&amp;&amp;<pos:position pos:line="21" pos:column="59"/></operator>
         <operator pos:line="22" pos:column="10">(<pos:position pos:line="22" pos:column="11"/></operator><ternary><condition><expr><name><name pos:line="22" pos:column="11">co<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">secure<pos:position pos:line="22" pos:column="21"/></name></name></expr>?<pos:position pos:line="22" pos:column="22"/></condition><then><expr><name pos:line="22" pos:column="22">secure<pos:position pos:line="22" pos:column="28"/></name></expr></then><else pos:line="22" pos:column="28">:<expr><name pos:line="22" pos:column="29">TRUE<pos:position pos:line="22" pos:column="33"/></name></expr></else></ternary><operator pos:line="22" pos:column="33">)<pos:position pos:line="22" pos:column="34"/></operator></expr> )<pos:position pos:line="22" pos:column="36"/></condition><then pos:line="22" pos:column="36"> <block pos:line="22" pos:column="37">{

	 <comment type="block" pos:line="24" pos:column="10">/* now check if the domain is correct */</comment>
	 <expr_stmt><expr><name pos:line="25" pos:column="10">domlen<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator><ternary><condition><expr><name><name pos:line="25" pos:column="17">co<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">-&gt;<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="21">domain<pos:position pos:line="25" pos:column="27"/></name></name></expr>?<pos:position pos:line="25" pos:column="28"/></condition><then><expr><call><name pos:line="25" pos:column="28">strlen<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name><name pos:line="25" pos:column="35">co<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">-&gt;<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="39">domain<pos:position pos:line="25" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr></then><else pos:line="25" pos:column="46">:<expr><literal type="number" pos:line="25" pos:column="47">0<pos:position pos:line="25" pos:column="48"/></literal></expr></else></ternary></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
	 <if pos:line="26" pos:column="10">if<condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><name><name pos:line="26" pos:column="14">co<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">domain<pos:position pos:line="26" pos:column="24"/></name></name> <operator pos:line="26" pos:column="25">||<pos:position pos:line="26" pos:column="27"/></operator>
	    <operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><operator pos:line="27" pos:column="14">(<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">domlen<pos:position pos:line="27" pos:column="21"/></name><operator pos:line="27" pos:column="21">&lt;=<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="23">hostlen<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">)<pos:position pos:line="27" pos:column="31"/></operator> <operator pos:line="27" pos:column="32">&amp;&amp;<pos:position pos:line="27" pos:column="42"/></operator>
	     <call><name pos:line="28" pos:column="14">strequal<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">host<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">+<pos:position pos:line="28" pos:column="28"/></operator><operator pos:line="28" pos:column="28">(<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="29">hostlen<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">-<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="37">domlen<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">)<pos:position pos:line="28" pos:column="44"/></operator></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="46">co<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">-&gt;<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="50">domain<pos:position pos:line="28" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call><operator pos:line="28" pos:column="57">)<pos:position pos:line="28" pos:column="58"/></operator></expr> )<pos:position pos:line="28" pos:column="60"/></condition><then pos:line="28" pos:column="60"> <block pos:line="28" pos:column="61">{
	    <comment type="block" pos:line="29" pos:column="13">/* the right part of the host matches the domain stuff in the
	       cookie data */</comment>

	    <comment type="block" pos:line="32" pos:column="13">/* now check the left part of the path with the cookies path
	       requirement */</comment>
	    <if pos:line="34" pos:column="13">if<condition pos:line="34" pos:column="15">(<expr><operator pos:line="34" pos:column="16">!<pos:position pos:line="34" pos:column="17"/></operator><name><name pos:line="34" pos:column="17">co<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">-&gt;<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="21">path<pos:position pos:line="34" pos:column="25"/></name></name> <operator pos:line="34" pos:column="26">||<pos:position pos:line="34" pos:column="28"/></operator>
	       <call><name pos:line="35" pos:column="16">strnequal<pos:position pos:line="35" pos:column="25"/></name><argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">path<pos:position pos:line="35" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="32">co<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">-&gt;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="36">path<pos:position pos:line="35" pos:column="40"/></name></name></expr></argument>, <argument><expr><call><name pos:line="35" pos:column="42">strlen<pos:position pos:line="35" pos:column="48"/></name><argument_list pos:line="35" pos:column="48">(<argument><expr><name><name pos:line="35" pos:column="49">co<pos:position pos:line="35" pos:column="51"/></name><operator pos:line="35" pos:column="51">-&gt;<pos:position pos:line="35" pos:column="56"/></operator><name pos:line="35" pos:column="53">path<pos:position pos:line="35" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="60"/></condition><then pos:line="35" pos:column="60"> <block pos:line="35" pos:column="61">{

	       <comment type="block" pos:line="37" pos:column="16">/* and now, we know this is a match and we should create an
		  entry for the return-linked-list */</comment>

	       <expr_stmt><expr><name pos:line="40" pos:column="16">newco<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <operator pos:line="40" pos:column="24">(<pos:position pos:line="40" pos:column="25"/></operator>struct <name pos:line="40" pos:column="32">Cookie<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">*<pos:position pos:line="40" pos:column="40"/></operator><operator pos:line="40" pos:column="40">)<pos:position pos:line="40" pos:column="41"/></operator><call><name pos:line="40" pos:column="41">malloc<pos:position pos:line="40" pos:column="47"/></name><argument_list pos:line="40" pos:column="47">(<argument><expr><sizeof pos:line="40" pos:column="48">sizeof<argument_list pos:line="40" pos:column="54">(<argument><expr pos:line="40" pos:column="55">struct <name pos:line="40" pos:column="62">Cookie<pos:position pos:line="40" pos:column="68"/></name></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="71"/></expr_stmt>
	       <if pos:line="41" pos:column="16">if<condition pos:line="41" pos:column="18">(<expr><name pos:line="41" pos:column="19">newco<pos:position pos:line="41" pos:column="24"/></name></expr>)<pos:position pos:line="41" pos:column="25"/></condition><then pos:line="41" pos:column="25"> <block pos:line="41" pos:column="26">{
		  <comment type="block" pos:line="42" pos:column="19">/* first, copy the whole source cookie: */</comment>
		  <expr_stmt><expr><call><name pos:line="43" pos:column="19">memcpy<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><name pos:line="43" pos:column="26">newco<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="33">co<pos:position pos:line="43" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="37">sizeof<argument_list pos:line="43" pos:column="43">(<argument><expr pos:line="43" pos:column="44">struct <name pos:line="43" pos:column="51">Cookie<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="60"/></expr_stmt>

		  <comment type="block" pos:line="45" pos:column="19">/* then modify our next */</comment>
		  <expr_stmt><expr><name><name pos:line="46" pos:column="19">newco<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">-&gt;<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="26">next<pos:position pos:line="46" pos:column="30"/></name></name> <operator pos:line="46" pos:column="31">=<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="33">mainco<pos:position pos:line="46" pos:column="39"/></name></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>

		  <comment type="block" pos:line="48" pos:column="19">/* point the main to us */</comment>
		  <expr_stmt><expr><name pos:line="49" pos:column="19">mainco<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">=<pos:position pos:line="49" pos:column="27"/></operator> <name pos:line="49" pos:column="28">newco<pos:position pos:line="49" pos:column="33"/></name></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
	       }<pos:position pos:line="50" pos:column="17"/></block></then></if>
	    }<pos:position pos:line="51" pos:column="14"/></block></then></if>
	 }<pos:position pos:line="52" pos:column="11"/></block></then></if>
      }<pos:position pos:line="53" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="54" pos:column="7">co<pos:position pos:line="54" pos:column="9"/></name> <operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator> <name><name pos:line="54" pos:column="12">co<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">-&gt;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="16">next<pos:position pos:line="54" pos:column="20"/></name></name></expr>;<pos:position pos:line="54" pos:column="21"/></expr_stmt>
   }<pos:position pos:line="55" pos:column="5"/></block></while>

   <return pos:line="57" pos:column="4">return <expr><name pos:line="57" pos:column="11">mainco<pos:position pos:line="57" pos:column="17"/></name></expr>;<pos:position pos:line="57" pos:column="18"/></return> <comment type="block" pos:line="57" pos:column="19">/* return the new list */</comment>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
