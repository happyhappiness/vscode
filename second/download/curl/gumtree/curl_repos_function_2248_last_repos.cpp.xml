<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2248_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_input_digest<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">bool<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">proxy<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,
                           <parameter><decl><type><specifier pos:line="3" pos:column="28">const<pos:position pos:line="3" pos:column="33"/></specifier> <name pos:line="3" pos:column="34">char<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">header<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list> <comment type="block" pos:line="3" pos:column="48">/* rest of the *-authenticate:
                                                  header */</comment>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">data<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Point to the correct struct with this */</comment>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">digestdata<pos:position pos:line="9" pos:column="20"/></name></name> <modifier pos:line="9" pos:column="21">*<pos:position pos:line="9" pos:column="22"/></modifier></type><name pos:line="9" pos:column="22">digest<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">proxy<pos:position pos:line="11" pos:column="11"/></name></expr>)<pos:position pos:line="11" pos:column="12"/></condition><then pos:line="11" pos:column="12"> <block pos:line="11" pos:column="13">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">digest<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <operator pos:line="12" pos:column="14">&amp;<pos:position pos:line="12" pos:column="19"/></operator><name><name pos:line="12" pos:column="15">data<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">-&gt;<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="21">state<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">.<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">proxydigest<pos:position pos:line="12" pos:column="38"/></name></name></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></then>
  <else pos:line="14" pos:column="3">else <block pos:line="14" pos:column="8">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">digest<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <operator pos:line="15" pos:column="14">&amp;<pos:position pos:line="15" pos:column="19"/></operator><name><name pos:line="15" pos:column="15">data<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">state<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">.<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="27">digest<pos:position pos:line="15" pos:column="33"/></name></name></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></else></if>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><operator pos:line="18" pos:column="6">!<pos:position pos:line="18" pos:column="7"/></operator><call><name pos:line="18" pos:column="7">checkprefix<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><literal type="string" pos:line="18" pos:column="19">"Digest"<pos:position pos:line="18" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="29">header<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="37"/></condition><then pos:line="18" pos:column="37">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="19" pos:column="38"/></name></expr>;<pos:position pos:line="19" pos:column="39"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">header<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">+=<pos:position pos:line="21" pos:column="12"/></operator> <call><name pos:line="21" pos:column="13">strlen<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><literal type="string" pos:line="21" pos:column="20">"Digest"<pos:position pos:line="21" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
  <while pos:line="22" pos:column="3">while<condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">*<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">header<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&amp;&amp;<pos:position pos:line="22" pos:column="27"/></operator> <call><name pos:line="22" pos:column="20">ISSPACE<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><operator pos:line="22" pos:column="28">*<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="29">header<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="37"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="5">header<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">++<pos:position pos:line="23" pos:column="13"/></operator></expr>;<pos:position pos:line="23" pos:column="14"/></expr_stmt></block></while>

  <return pos:line="25" pos:column="3">return <expr><call><name pos:line="25" pos:column="10">Curl_auth_decode_digest_http_message<pos:position pos:line="25" pos:column="46"/></name><argument_list pos:line="25" pos:column="46">(<argument><expr><name pos:line="25" pos:column="47">header<pos:position pos:line="25" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="55">digest<pos:position pos:line="25" pos:column="61"/></name></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="63"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
