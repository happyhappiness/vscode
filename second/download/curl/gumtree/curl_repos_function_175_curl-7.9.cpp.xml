<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_175_curl-7.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">curl_strequal<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">first<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">second<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><call><name pos:line="3" pos:column="5">defined<pos:position pos:line="3" pos:column="12"/></name><argument_list pos:line="3" pos:column="12">(<argument><expr><name pos:line="3" pos:column="13">HAVE_STRCASECMP<pos:position pos:line="3" pos:column="28"/></name></expr></argument>)<pos:position pos:line="3" pos:column="29"/></argument_list></call></expr></cpp:if>
  <return pos:line="4" pos:column="3">return <expr><operator pos:line="4" pos:column="10">!<pos:position pos:line="4" pos:column="11"/></operator><call pos:line="4" pos:column="11">(<name pos:line="4" pos:column="12">strcasecmp<pos:position pos:line="4" pos:column="22"/></name>)<argument_list pos:line="4" pos:column="23">(<argument><expr><name pos:line="4" pos:column="24">first<pos:position pos:line="4" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="31">second<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="39"/></return>
<cpp:elif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">elif<pos:position pos:line="5" pos:column="6"/></cpp:directive> <expr><call><name pos:line="5" pos:column="7">defined<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><expr><name pos:line="5" pos:column="15">HAVE_STRCMPI<pos:position pos:line="5" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr></cpp:elif>
  <return pos:line="6" pos:column="3">return <expr><operator pos:line="6" pos:column="10">!<pos:position pos:line="6" pos:column="11"/></operator><call pos:line="6" pos:column="11">(<name pos:line="6" pos:column="12">strcmpi<pos:position pos:line="6" pos:column="19"/></name>)<argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">first<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="28">second<pos:position pos:line="6" pos:column="34"/></name></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="36"/></return>
<cpp:elif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">elif<pos:position pos:line="7" pos:column="6"/></cpp:directive> <expr><call><name pos:line="7" pos:column="7">defined<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">HAVE_STRICMP<pos:position pos:line="7" pos:column="27"/></name></expr></argument>)<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr></cpp:elif>
  <return pos:line="8" pos:column="3">return <expr><operator pos:line="8" pos:column="10">!<pos:position pos:line="8" pos:column="11"/></operator><call pos:line="8" pos:column="11">(<name pos:line="8" pos:column="12">stricmp<pos:position pos:line="8" pos:column="19"/></name>)<argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">first<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">second<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></return>
<cpp:else pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">else<pos:position pos:line="9" pos:column="6"/></cpp:directive></cpp:else>
  <while pos:line="10" pos:column="3">while <condition pos:line="10" pos:column="9">(<expr><operator pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">first<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">&amp;&amp;<pos:position pos:line="10" pos:column="27"/></operator> <operator pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">second<pos:position pos:line="10" pos:column="27"/></name></expr>)<pos:position pos:line="10" pos:column="28"/></condition> <block pos:line="10" pos:column="29">{
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">toupper<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><operator pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">first<pos:position pos:line="11" pos:column="23"/></name></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call> <operator pos:line="11" pos:column="25">!=<pos:position pos:line="11" pos:column="27"/></operator> <call><name pos:line="11" pos:column="28">toupper<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><operator pos:line="11" pos:column="36">*<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">second<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45"> <block pos:line="11" pos:column="46">{
      <break pos:line="12" pos:column="7">break;<pos:position pos:line="12" pos:column="13"/></break>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="14" pos:column="5">first<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">++<pos:position pos:line="14" pos:column="12"/></operator></expr>;<pos:position pos:line="14" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">second<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">++<pos:position pos:line="15" pos:column="13"/></operator></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></while>
  <return pos:line="17" pos:column="3">return <expr><call><name pos:line="17" pos:column="10">toupper<pos:position pos:line="17" pos:column="17"/></name><argument_list pos:line="17" pos:column="17">(<argument><expr><operator pos:line="17" pos:column="18">*<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">first<pos:position pos:line="17" pos:column="24"/></name></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call> <operator pos:line="17" pos:column="26">==<pos:position pos:line="17" pos:column="28"/></operator> <call><name pos:line="17" pos:column="29">toupper<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><operator pos:line="17" pos:column="37">*<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="38">second<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></return>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
