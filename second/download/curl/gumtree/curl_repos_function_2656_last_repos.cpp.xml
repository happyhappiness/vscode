<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2656_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">nss_load_ca_certificates<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">connectdata<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">conn<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="2" pos:column="42">int<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">sockindex<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">cafile<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><call><name pos:line="5" pos:column="24">SSL_CONN_CONFIG<pos:position pos:line="5" pos:column="39"/></name><argument_list pos:line="5" pos:column="39">(<argument><expr><name pos:line="5" pos:column="40">CAfile<pos:position pos:line="5" pos:column="46"/></name></expr></argument>)<pos:position pos:line="5" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">capath<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><call><name pos:line="6" pos:column="24">SSL_CONN_CONFIG<pos:position pos:line="6" pos:column="39"/></name><argument_list pos:line="6" pos:column="39">(<argument><expr><name pos:line="6" pos:column="40">CApath<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">use_trust_module<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CURLcode<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">result<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name pos:line="8" pos:column="21">CURLE_OK<pos:position pos:line="8" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* treat empty string as unset */</comment>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">cafile<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">&amp;&amp;<pos:position pos:line="11" pos:column="23"/></operator> <operator pos:line="11" pos:column="16">!<pos:position pos:line="11" pos:column="17"/></operator><name><name pos:line="11" pos:column="17">cafile<pos:position pos:line="11" pos:column="23"/></name><index pos:line="11" pos:column="23">[<expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>]<pos:position pos:line="11" pos:column="26"/></index></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="5">cafile<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">NULL<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt></block></then></if>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">capath<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">&amp;&amp;<pos:position pos:line="13" pos:column="23"/></operator> <operator pos:line="13" pos:column="16">!<pos:position pos:line="13" pos:column="17"/></operator><name><name pos:line="13" pos:column="17">capath<pos:position pos:line="13" pos:column="23"/></name><index pos:line="13" pos:column="23">[<expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>]<pos:position pos:line="13" pos:column="26"/></index></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="5">capath<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <name pos:line="14" pos:column="14">NULL<pos:position pos:line="14" pos:column="18"/></name></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">infof<pos:position pos:line="16" pos:column="8"/></name><argument_list pos:line="16" pos:column="8">(<argument><expr><name pos:line="16" pos:column="9">data<pos:position pos:line="16" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="15">"  CAfile: %s\n  CApath: %s\n"<pos:position pos:line="16" pos:column="45"/></literal></expr></argument>,
      <argument><expr><ternary><condition><expr><name pos:line="17" pos:column="7">cafile<pos:position pos:line="17" pos:column="13"/></name></expr> ?<pos:position pos:line="17" pos:column="15"/></condition><then pos:line="17" pos:column="15"> <expr><name pos:line="17" pos:column="16">cafile<pos:position pos:line="17" pos:column="22"/></name></expr> <pos:position pos:line="17" pos:column="23"/></then><else pos:line="17" pos:column="23">: <expr><literal type="string" pos:line="17" pos:column="25">"none"<pos:position pos:line="17" pos:column="31"/></literal></expr></else></ternary></expr></argument>,
      <argument><expr><ternary><condition><expr><name pos:line="18" pos:column="7">capath<pos:position pos:line="18" pos:column="13"/></name></expr> ?<pos:position pos:line="18" pos:column="15"/></condition><then pos:line="18" pos:column="15"> <expr><name pos:line="18" pos:column="16">capath<pos:position pos:line="18" pos:column="22"/></name></expr> <pos:position pos:line="18" pos:column="23"/></then><else pos:line="18" pos:column="23">: <expr><literal type="string" pos:line="18" pos:column="25">"none"<pos:position pos:line="18" pos:column="31"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="20" pos:column="3">/* load libnssckbi.so if no other trust roots were specified */</comment>
  <expr_stmt><expr><name pos:line="21" pos:column="3">use_trust_module<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <operator pos:line="21" pos:column="22">!<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">cafile<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">&amp;&amp;<pos:position pos:line="21" pos:column="40"/></operator> <operator pos:line="21" pos:column="33">!<pos:position pos:line="21" pos:column="34"/></operator><name pos:line="21" pos:column="34">capath<pos:position pos:line="21" pos:column="40"/></name></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="23" pos:column="3">PR_Lock<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><name pos:line="23" pos:column="11">nss_trustload_lock<pos:position pos:line="23" pos:column="29"/></name></expr></argument>)<pos:position pos:line="23" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><name pos:line="24" pos:column="6">use_trust_module<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">&amp;&amp;<pos:position pos:line="24" pos:column="33"/></operator> <operator pos:line="24" pos:column="26">!<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="27">trust_module<pos:position pos:line="24" pos:column="39"/></name></expr>)<pos:position pos:line="24" pos:column="40"/></condition><then pos:line="24" pos:column="40"> <block pos:line="24" pos:column="41">{
    <comment type="block" pos:line="25" pos:column="5">/* libnssckbi.so needed but not yet loaded --&gt; load it! */</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">result<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">nss_load_module<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><operator pos:line="26" pos:column="30">&amp;<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="31">trust_module<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="45">trust_library<pos:position pos:line="26" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="60">"trust"<pos:position pos:line="26" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">infof<pos:position pos:line="27" pos:column="10"/></name><argument_list pos:line="27" pos:column="10">(<argument><expr><name pos:line="27" pos:column="11">data<pos:position pos:line="27" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="17">"%s %s\n"<pos:position pos:line="27" pos:column="26"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="27" pos:column="28">(<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="29">result<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">)<pos:position pos:line="27" pos:column="36"/></operator></expr> ?<pos:position pos:line="27" pos:column="38"/></condition><then pos:line="27" pos:column="38"> <expr><literal type="string" pos:line="27" pos:column="39">"failed to load"<pos:position pos:line="27" pos:column="55"/></literal></expr> <pos:position pos:line="27" pos:column="56"/></then><else pos:line="27" pos:column="56">: <expr><literal type="string" pos:line="27" pos:column="58">"loaded"<pos:position pos:line="27" pos:column="66"/></literal></expr></else></ternary></expr></argument>,
          <argument><expr><name pos:line="28" pos:column="11">trust_library<pos:position pos:line="28" pos:column="24"/></name></expr></argument>)<pos:position pos:line="28" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><name pos:line="29" pos:column="8">result<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">==<pos:position pos:line="29" pos:column="17"/></operator> <name pos:line="29" pos:column="18">CURLE_FAILED_INIT<pos:position pos:line="29" pos:column="35"/></name></expr>)<pos:position pos:line="29" pos:column="36"/></condition><then pos:line="29" pos:column="36">
      <comment type="block" pos:line="30" pos:column="7">/* make the error non-fatal if we are not going to verify peer */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="7">result<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">CURLE_SSL_CACERT_BADFILE<pos:position pos:line="31" pos:column="40"/></name></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then>
  <elseif pos:line="33" pos:column="3">else <if pos:line="33" pos:column="8">if<condition pos:line="33" pos:column="10">(<expr><operator pos:line="33" pos:column="11">!<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">use_trust_module<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">&amp;&amp;<pos:position pos:line="33" pos:column="39"/></operator> <name pos:line="33" pos:column="32">trust_module<pos:position pos:line="33" pos:column="44"/></name></expr>)<pos:position pos:line="33" pos:column="45"/></condition><then pos:line="33" pos:column="45"> <block pos:line="33" pos:column="46">{
    <comment type="block" pos:line="34" pos:column="5">/* libnssckbi.so not needed but already loaded --&gt; unload it! */</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">infof<pos:position pos:line="35" pos:column="10"/></name><argument_list pos:line="35" pos:column="10">(<argument><expr><name pos:line="35" pos:column="11">data<pos:position pos:line="35" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="17">"unloading %s\n"<pos:position pos:line="35" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">trust_library<pos:position pos:line="35" pos:column="48"/></name></expr></argument>)<pos:position pos:line="35" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">nss_unload_module<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><operator pos:line="36" pos:column="23">&amp;<pos:position pos:line="36" pos:column="28"/></operator><name pos:line="36" pos:column="24">trust_module<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if></elseif></if>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">PR_Unlock<pos:position pos:line="38" pos:column="12"/></name><argument_list pos:line="38" pos:column="12">(<argument><expr><name pos:line="38" pos:column="13">nss_trustload_lock<pos:position pos:line="38" pos:column="31"/></name></expr></argument>)<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>

  <if pos:line="40" pos:column="3">if<condition pos:line="40" pos:column="5">(<expr><name pos:line="40" pos:column="6">cafile<pos:position pos:line="40" pos:column="12"/></name></expr>)<pos:position pos:line="40" pos:column="13"/></condition><then pos:line="40" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="5">result<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <call><name pos:line="41" pos:column="14">nss_load_cert<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><operator pos:line="41" pos:column="28">&amp;<pos:position pos:line="41" pos:column="33"/></operator><name><name pos:line="41" pos:column="29">conn<pos:position pos:line="41" pos:column="33"/></name><operator pos:line="41" pos:column="33">-&gt;<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="35">ssl<pos:position pos:line="41" pos:column="38"/></name><index pos:line="41" pos:column="38">[<expr><name pos:line="41" pos:column="39">sockindex<pos:position pos:line="41" pos:column="48"/></name></expr>]<pos:position pos:line="41" pos:column="49"/></index></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="51">cafile<pos:position pos:line="41" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="59">PR_TRUE<pos:position pos:line="41" pos:column="66"/></name></expr></argument>)<pos:position pos:line="41" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="68"/></expr_stmt></block></then></if>

  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><name pos:line="43" pos:column="6">result<pos:position pos:line="43" pos:column="12"/></name></expr>)<pos:position pos:line="43" pos:column="13"/></condition><then pos:line="43" pos:column="13">
    <block type="pseudo"><return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">result<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></return></block></then></if>

  <if pos:line="46" pos:column="3">if<condition pos:line="46" pos:column="5">(<expr><name pos:line="46" pos:column="6">capath<pos:position pos:line="46" pos:column="12"/></name></expr>)<pos:position pos:line="46" pos:column="13"/></condition><then pos:line="46" pos:column="13"> <block pos:line="46" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="47" pos:column="5">struct_stat<pos:position pos:line="47" pos:column="16"/></name></type> <name pos:line="47" pos:column="17">st<pos:position pos:line="47" pos:column="19"/></name></decl>;<pos:position pos:line="47" pos:column="20"/></decl_stmt>
    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><call><name pos:line="48" pos:column="8">stat<pos:position pos:line="48" pos:column="12"/></name><argument_list pos:line="48" pos:column="12">(<argument><expr><name pos:line="48" pos:column="13">capath<pos:position pos:line="48" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="21">&amp;<pos:position pos:line="48" pos:column="26"/></operator><name pos:line="48" pos:column="22">st<pos:position pos:line="48" pos:column="24"/></name></expr></argument>)<pos:position pos:line="48" pos:column="25"/></argument_list></call> <operator pos:line="48" pos:column="26">==<pos:position pos:line="48" pos:column="28"/></operator> <operator pos:line="48" pos:column="29">-<pos:position pos:line="48" pos:column="30"/></operator><literal type="number" pos:line="48" pos:column="30">1<pos:position pos:line="48" pos:column="31"/></literal></expr>)<pos:position pos:line="48" pos:column="32"/></condition><then pos:line="48" pos:column="32">
      <block type="pseudo"><return pos:line="49" pos:column="7">return <expr><name pos:line="49" pos:column="14">CURLE_SSL_CACERT_BADFILE<pos:position pos:line="49" pos:column="38"/></name></expr>;<pos:position pos:line="49" pos:column="39"/></return></block></then></if>

    <if pos:line="51" pos:column="5">if<condition pos:line="51" pos:column="7">(<expr><call><name pos:line="51" pos:column="8">S_ISDIR<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><name><name pos:line="51" pos:column="16">st<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">.<pos:position pos:line="51" pos:column="19"/></operator><name pos:line="51" pos:column="19">st_mode<pos:position pos:line="51" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="28"/></condition><then pos:line="51" pos:column="28"> <block pos:line="51" pos:column="29">{
      <decl_stmt><decl><type><name pos:line="52" pos:column="7">PRDirEntry<pos:position pos:line="52" pos:column="17"/></name> <modifier pos:line="52" pos:column="18">*<pos:position pos:line="52" pos:column="19"/></modifier></type><name pos:line="52" pos:column="19">entry<pos:position pos:line="52" pos:column="24"/></name></decl>;<pos:position pos:line="52" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="53" pos:column="7">PRDir<pos:position pos:line="53" pos:column="12"/></name> <modifier pos:line="53" pos:column="13">*<pos:position pos:line="53" pos:column="14"/></modifier></type><name pos:line="53" pos:column="14">dir<pos:position pos:line="53" pos:column="17"/></name> <init pos:line="53" pos:column="18">= <expr><call><name pos:line="53" pos:column="20">PR_OpenDir<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name pos:line="53" pos:column="31">capath<pos:position pos:line="53" pos:column="37"/></name></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="53" pos:column="39"/></decl_stmt>
      <if pos:line="54" pos:column="7">if<condition pos:line="54" pos:column="9">(<expr><operator pos:line="54" pos:column="10">!<pos:position pos:line="54" pos:column="11"/></operator><name pos:line="54" pos:column="11">dir<pos:position pos:line="54" pos:column="14"/></name></expr>)<pos:position pos:line="54" pos:column="15"/></condition><then pos:line="54" pos:column="15">
        <block type="pseudo"><return pos:line="55" pos:column="9">return <expr><name pos:line="55" pos:column="16">CURLE_SSL_CACERT_BADFILE<pos:position pos:line="55" pos:column="40"/></name></expr>;<pos:position pos:line="55" pos:column="41"/></return></block></then></if>

      <while pos:line="57" pos:column="7">while<condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">(<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">entry<pos:position pos:line="57" pos:column="19"/></name> <operator pos:line="57" pos:column="20">=<pos:position pos:line="57" pos:column="21"/></operator> <call><name pos:line="57" pos:column="22">PR_ReadDir<pos:position pos:line="57" pos:column="32"/></name><argument_list pos:line="57" pos:column="32">(<argument><expr><name pos:line="57" pos:column="33">dir<pos:position pos:line="57" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="38">PR_SKIP_BOTH<pos:position pos:line="57" pos:column="50"/></name> <operator pos:line="57" pos:column="51">|<pos:position pos:line="57" pos:column="52"/></operator> <name pos:line="57" pos:column="53">PR_SKIP_HIDDEN<pos:position pos:line="57" pos:column="67"/></name></expr></argument>)<pos:position pos:line="57" pos:column="68"/></argument_list></call><operator pos:line="57" pos:column="68">)<pos:position pos:line="57" pos:column="69"/></operator></expr>)<pos:position pos:line="57" pos:column="70"/></condition> <block pos:line="57" pos:column="71">{
        <decl_stmt><decl><type><name pos:line="58" pos:column="9">char<pos:position pos:line="58" pos:column="13"/></name> <modifier pos:line="58" pos:column="14">*<pos:position pos:line="58" pos:column="15"/></modifier></type><name pos:line="58" pos:column="15">fullpath<pos:position pos:line="58" pos:column="23"/></name> <init pos:line="58" pos:column="24">= <expr><call><name pos:line="58" pos:column="26">aprintf<pos:position pos:line="58" pos:column="33"/></name><argument_list pos:line="58" pos:column="33">(<argument><expr><literal type="string" pos:line="58" pos:column="34">"%s/%s"<pos:position pos:line="58" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="43">capath<pos:position pos:line="58" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="51">entry<pos:position pos:line="58" pos:column="56"/></name><operator pos:line="58" pos:column="56">-&gt;<pos:position pos:line="58" pos:column="61"/></operator><name pos:line="58" pos:column="58">name<pos:position pos:line="58" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="58" pos:column="64"/></decl_stmt>
        <if pos:line="59" pos:column="9">if<condition pos:line="59" pos:column="11">(<expr><operator pos:line="59" pos:column="12">!<pos:position pos:line="59" pos:column="13"/></operator><name pos:line="59" pos:column="13">fullpath<pos:position pos:line="59" pos:column="21"/></name></expr>)<pos:position pos:line="59" pos:column="22"/></condition><then pos:line="59" pos:column="22"> <block pos:line="59" pos:column="23">{
          <expr_stmt><expr><call><name pos:line="60" pos:column="11">PR_CloseDir<pos:position pos:line="60" pos:column="22"/></name><argument_list pos:line="60" pos:column="22">(<argument><expr><name pos:line="60" pos:column="23">dir<pos:position pos:line="60" pos:column="26"/></name></expr></argument>)<pos:position pos:line="60" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>
          <return pos:line="61" pos:column="11">return <expr><name pos:line="61" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="61" pos:column="37"/></name></expr>;<pos:position pos:line="61" pos:column="38"/></return>
        }<pos:position pos:line="62" pos:column="10"/></block></then></if>

        <if pos:line="64" pos:column="9">if<condition pos:line="64" pos:column="11">(<expr><name pos:line="64" pos:column="12">CURLE_OK<pos:position pos:line="64" pos:column="20"/></name> <operator pos:line="64" pos:column="21">!=<pos:position pos:line="64" pos:column="23"/></operator> <call><name pos:line="64" pos:column="24">nss_load_cert<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><operator pos:line="64" pos:column="38">&amp;<pos:position pos:line="64" pos:column="43"/></operator><name><name pos:line="64" pos:column="39">conn<pos:position pos:line="64" pos:column="43"/></name><operator pos:line="64" pos:column="43">-&gt;<pos:position pos:line="64" pos:column="48"/></operator><name pos:line="64" pos:column="45">ssl<pos:position pos:line="64" pos:column="48"/></name><index pos:line="64" pos:column="48">[<expr><name pos:line="64" pos:column="49">sockindex<pos:position pos:line="64" pos:column="58"/></name></expr>]<pos:position pos:line="64" pos:column="59"/></index></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="61">fullpath<pos:position pos:line="64" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="71">PR_TRUE<pos:position pos:line="64" pos:column="78"/></name></expr></argument>)<pos:position pos:line="64" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="80"/></condition><then pos:line="64" pos:column="80">
          <comment type="block" pos:line="65" pos:column="11">/* This is purposefully tolerant of errors so non-PEM files can
           * be in the same directory */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="11">infof<pos:position pos:line="67" pos:column="16"/></name><argument_list pos:line="67" pos:column="16">(<argument><expr><name pos:line="67" pos:column="17">data<pos:position pos:line="67" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="23">"failed to load '%s' from CURLOPT_CAPATH\n"<pos:position pos:line="67" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="68">fullpath<pos:position pos:line="67" pos:column="76"/></name></expr></argument>)<pos:position pos:line="67" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="78"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="69" pos:column="9">free<pos:position pos:line="69" pos:column="13"/></name><argument_list pos:line="69" pos:column="13">(<argument><expr><name pos:line="69" pos:column="14">fullpath<pos:position pos:line="69" pos:column="22"/></name></expr></argument>)<pos:position pos:line="69" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="70" pos:column="8"/></block></while>

      <expr_stmt><expr><call><name pos:line="72" pos:column="7">PR_CloseDir<pos:position pos:line="72" pos:column="18"/></name><argument_list pos:line="72" pos:column="18">(<argument><expr><name pos:line="72" pos:column="19">dir<pos:position pos:line="72" pos:column="22"/></name></expr></argument>)<pos:position pos:line="72" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then>
    <else pos:line="74" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="7">infof<pos:position pos:line="75" pos:column="12"/></name><argument_list pos:line="75" pos:column="12">(<argument><expr><name pos:line="75" pos:column="13">data<pos:position pos:line="75" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="19">"warning: CURLOPT_CAPATH not a directory (%s)\n"<pos:position pos:line="75" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="69">capath<pos:position pos:line="75" pos:column="75"/></name></expr></argument>)<pos:position pos:line="75" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="77"/></expr_stmt></block></else></if>
  }<pos:position pos:line="76" pos:column="4"/></block></then></if>

  <return pos:line="78" pos:column="3">return <expr><name pos:line="78" pos:column="10">CURLE_OK<pos:position pos:line="78" pos:column="18"/></name></expr>;<pos:position pos:line="78" pos:column="19"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
