<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_241_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_done<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">connectdata<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">conn<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">SessionHandle<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">data<pos:position pos:line="3" pos:column="29"/></name><init pos:line="3" pos:column="29">=<expr><name><name pos:line="3" pos:column="30">conn<pos:position pos:line="3" pos:column="34"/></name><operator pos:line="3" pos:column="34">-&gt;<pos:position pos:line="3" pos:column="39"/></operator><name pos:line="3" pos:column="36">data<pos:position pos:line="3" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* cleanups done even if the connection is re-used */</comment>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name><name pos:line="8" pos:column="6">conn<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">-&gt;<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="12">bits<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">.<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">rangestringalloc<pos:position pos:line="8" pos:column="33"/></name></name></expr>)<pos:position pos:line="8" pos:column="34"/></condition><then pos:line="8" pos:column="34"> <block pos:line="8" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">free<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name><name pos:line="9" pos:column="10">conn<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">-&gt;<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="16">range<pos:position pos:line="9" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">conn<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">-&gt;<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="11">bits<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">rangestringalloc<pos:position pos:line="10" pos:column="32"/></name></name> <operator pos:line="10" pos:column="33">=<pos:position pos:line="10" pos:column="34"/></operator> <name pos:line="10" pos:column="35">FALSE<pos:position pos:line="10" pos:column="40"/></name></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/* Cleanup possible redirect junk */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name><name pos:line="14" pos:column="6">conn<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">newurl<pos:position pos:line="14" pos:column="18"/></name></name></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19"> <block pos:line="14" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">free<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name><name pos:line="15" pos:column="10">conn<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">newurl<pos:position pos:line="15" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">conn<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">-&gt;<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="11">newurl<pos:position pos:line="16" pos:column="17"/></name></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">NULL<pos:position pos:line="16" pos:column="24"/></name></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name><name pos:line="19" pos:column="6">conn<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">connect_addr<pos:position pos:line="19" pos:column="24"/></name></name></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="5">Curl_resolv_unlock<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name><name pos:line="20" pos:column="24">conn<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">data<pos:position pos:line="20" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="36">conn<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">-&gt;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="42">connect_addr<pos:position pos:line="20" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt></block></then></if> <comment type="block" pos:line="20" pos:column="57">/* done with this */</comment>

<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if<pos:position pos:line="22" pos:column="4"/></cpp:directive> <expr><call><name pos:line="22" pos:column="5">defined<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">MALLOCDEBUG<pos:position pos:line="22" pos:column="24"/></name></expr></argument>)<pos:position pos:line="22" pos:column="25"/></argument_list></call> <operator pos:line="22" pos:column="26">&amp;&amp;<pos:position pos:line="22" pos:column="36"/></operator> <call><name pos:line="22" pos:column="29">defined<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><name pos:line="22" pos:column="37">AGGRESIVE_TEST<pos:position pos:line="22" pos:column="51"/></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="23" pos:column="3">/* scan for DNS cache entries still marked as in use */</comment>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">Curl_hash_apply<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name><name pos:line="24" pos:column="19">data<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">hostcache<pos:position pos:line="24" pos:column="34"/></name></name></expr></argument>,
                  <argument><expr><name pos:line="25" pos:column="19">NULL<pos:position pos:line="25" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="25">Curl_scan_cache_used<pos:position pos:line="25" pos:column="45"/></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="28" pos:column="3">/* this calls the protocol-specific function pointer previously set */</comment>
  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><name><name pos:line="29" pos:column="6">conn<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">curl_done<pos:position pos:line="29" pos:column="21"/></name></name></expr>)<pos:position pos:line="29" pos:column="22"/></condition><then pos:line="29" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="5">result<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name><name pos:line="30" pos:column="14">conn<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">-&gt;<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="20">curl_done<pos:position pos:line="30" pos:column="29"/></name></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">conn<pos:position pos:line="30" pos:column="34"/></name></expr></argument>)<pos:position pos:line="30" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt></block></then>
  <else pos:line="31" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="5">result<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <name pos:line="32" pos:column="14">CURLE_OK<pos:position pos:line="32" pos:column="22"/></name></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt></block></else></if>

  <expr_stmt><expr><call><name pos:line="34" pos:column="3">Curl_pgrsDone<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">conn<pos:position pos:line="34" pos:column="21"/></name></expr></argument>)<pos:position pos:line="34" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt> <comment type="block" pos:line="34" pos:column="24">/* done with the operation */</comment>

  <comment type="block" pos:line="36" pos:column="3">/* if data-&gt;set.reuse_forbid is TRUE, it means the libcurl client has
     forced us to close this no matter what we think.

     if conn-&gt;bits.close is TRUE, it means that the connection should be
     closed in spite of all our efforts to be nice, due to protocol
     restrictions in our or the server's end */</comment>
  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">(<expr><name><name pos:line="42" pos:column="6">data<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">-&gt;<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="12">set<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">.<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="16">reuse_forbid<pos:position pos:line="42" pos:column="28"/></name></name> <operator pos:line="42" pos:column="29">||<pos:position pos:line="42" pos:column="31"/></operator>
     <operator pos:line="43" pos:column="6">(<pos:position pos:line="43" pos:column="7"/></operator><operator pos:line="43" pos:column="7">(<pos:position pos:line="43" pos:column="8"/></operator><name pos:line="43" pos:column="8">CURLE_OK<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">==<pos:position pos:line="43" pos:column="19"/></operator> <name pos:line="43" pos:column="20">result<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">)<pos:position pos:line="43" pos:column="27"/></operator> <operator pos:line="43" pos:column="28">&amp;&amp;<pos:position pos:line="43" pos:column="38"/></operator> <name><name pos:line="43" pos:column="31">conn<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">-&gt;<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="37">bits<pos:position pos:line="43" pos:column="41"/></name><operator pos:line="43" pos:column="41">.<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="42">close<pos:position pos:line="43" pos:column="47"/></name></name><operator pos:line="43" pos:column="47">)<pos:position pos:line="43" pos:column="48"/></operator></expr>)<pos:position pos:line="43" pos:column="49"/></condition><then pos:line="43" pos:column="49">
    <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="5">result<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">Curl_disconnect<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">conn<pos:position pos:line="44" pos:column="34"/></name></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt></block></then> <comment type="block" pos:line="44" pos:column="37">/* close the connection */</comment>
  <else pos:line="45" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="5">infof<pos:position pos:line="46" pos:column="10"/></name><argument_list pos:line="46" pos:column="10">(<argument><expr><name pos:line="46" pos:column="11">data<pos:position pos:line="46" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="17">"Connection #%d left intact\n"<pos:position pos:line="46" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="49">conn<pos:position pos:line="46" pos:column="53"/></name><operator pos:line="46" pos:column="53">-&gt;<pos:position pos:line="46" pos:column="58"/></operator><name pos:line="46" pos:column="55">connectindex<pos:position pos:line="46" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="69"/></expr_stmt></block></else></if>

  <return pos:line="48" pos:column="3">return <expr><name pos:line="48" pos:column="10">result<pos:position pos:line="48" pos:column="16"/></name></expr>;<pos:position pos:line="48" pos:column="17"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
