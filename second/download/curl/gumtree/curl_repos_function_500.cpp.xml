<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_500.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Curl_addrinfo<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">Curl_getaddrinfo<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">connectdata<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">conn<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">hostname<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="3" pos:column="33">int<pos:position pos:line="3" pos:column="36"/></name></type> <name pos:line="3" pos:column="37">port<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="4" pos:column="33">int<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">waitp<pos:position pos:line="4" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="44"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">Curl_addrinfo<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">ai<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">hostent<pos:position pos:line="7" pos:column="17"/></name></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">h<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">NULL<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">in_addr_t<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">in<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">SessionHandle<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">data<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><name><name pos:line="9" pos:column="32">conn<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">-&gt;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="38">data<pos:position pos:line="9" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">hostent<pos:position pos:line="10" pos:column="17"/></name></name> <modifier pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></modifier></type><name pos:line="10" pos:column="19">buf<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><name pos:line="10" pos:column="25">NULL<pos:position pos:line="10" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="12" pos:column="3">(<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">void<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">)<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">port<pos:position pos:line="12" pos:column="13"/></name></expr>;<pos:position pos:line="12" pos:column="14"/></expr_stmt> <comment type="block" pos:line="12" pos:column="15">/* unused in IPv4 code */</comment>

  <expr_stmt><expr><operator pos:line="14" pos:column="3">*<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">waitp<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>;<pos:position pos:line="14" pos:column="14"/></expr_stmt> <comment type="block" pos:line="14" pos:column="15">/* don't wait, we act synchronously */</comment>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><literal type="number" pos:line="16" pos:column="6">1<pos:position pos:line="16" pos:column="7"/></literal> <operator pos:line="16" pos:column="8">==<pos:position pos:line="16" pos:column="10"/></operator> <call><name pos:line="16" pos:column="11">Curl_inet_pton<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">AF_INET<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">hostname<pos:position pos:line="16" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="45">&amp;<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="46">in<pos:position pos:line="16" pos:column="48"/></name></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="50"/></condition><then pos:line="16" pos:column="50">
    <comment type="block" pos:line="17" pos:column="5">/* This is a dotted IP address 123.123.123.123-style */</comment>
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><call><name pos:line="18" pos:column="12">Curl_ip2addr<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">in<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="29">hostname<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="39">port<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></return></block></then>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><call><name pos:line="20" pos:column="5">defined<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">HAVE_GETHOSTBYNAME_R<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="21" pos:column="3">/*
   * gethostbyname_r() is the preferred resolve function for many platforms.
   * Since there are three different versions of it, the following code is
   * somewhat #ifdef-ridden.
   */</comment>
  <else pos:line="26" pos:column="3">else <block pos:line="26" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">int<pos:position pos:line="27" pos:column="8"/></name></type> <name pos:line="27" pos:column="9">h_errnop<pos:position pos:line="27" pos:column="17"/></name></decl>;<pos:position pos:line="27" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">int<pos:position pos:line="28" pos:column="8"/></name></type> <name pos:line="28" pos:column="9">res<pos:position pos:line="28" pos:column="12"/></name><init pos:line="28" pos:column="12">=<expr><name pos:line="28" pos:column="13">ERANGE<pos:position pos:line="28" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="30" pos:column="5">buf<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <operator pos:line="30" pos:column="11">(<pos:position pos:line="30" pos:column="12"/></operator>struct <name pos:line="30" pos:column="19">hostent<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">*<pos:position pos:line="30" pos:column="28"/></operator><operator pos:line="30" pos:column="28">)<pos:position pos:line="30" pos:column="29"/></operator><call><name pos:line="30" pos:column="29">calloc<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name pos:line="30" pos:column="36">CURL_HOSTENT_SIZE<pos:position pos:line="30" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="55">1<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="58"/></expr_stmt>
    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><operator pos:line="31" pos:column="8">!<pos:position pos:line="31" pos:column="9"/></operator><name pos:line="31" pos:column="9">buf<pos:position pos:line="31" pos:column="12"/></name></expr>)<pos:position pos:line="31" pos:column="13"/></condition><then pos:line="31" pos:column="13">
      <block type="pseudo"><return pos:line="32" pos:column="7">return <expr><name pos:line="32" pos:column="14">NULL<pos:position pos:line="32" pos:column="18"/></name></expr>;<pos:position pos:line="32" pos:column="19"/></return></block></then></if> <comment type="block" pos:line="32" pos:column="20">/* major failure */</comment>
    <comment type="block" pos:line="33" pos:column="5">/*
     * The clearing of the buffer is a workaround for a gethostbyname_r bug in
     * qnx nto and it is also _required_ for some of these functions on some
     * platforms.
     */</comment>

<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef<pos:position pos:line="39" pos:column="7"/></cpp:directive> <name pos:line="39" pos:column="8">HAVE_GETHOSTBYNAME_R_5<pos:position pos:line="39" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="40" pos:column="5">/* Solaris, IRIX and more */</comment>
    <expr_stmt><expr><operator pos:line="41" pos:column="5">(<pos:position pos:line="41" pos:column="6"/></operator><name pos:line="41" pos:column="6">void<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">)<pos:position pos:line="41" pos:column="11"/></operator><name pos:line="41" pos:column="11">res<pos:position pos:line="41" pos:column="14"/></name></expr>;<pos:position pos:line="41" pos:column="15"/></expr_stmt> <comment type="block" pos:line="41" pos:column="16">/* prevent compiler warning */</comment>
    <expr_stmt><expr><name pos:line="42" pos:column="5">h<pos:position pos:line="42" pos:column="6"/></name> <operator pos:line="42" pos:column="7">=<pos:position pos:line="42" pos:column="8"/></operator> <call><name pos:line="42" pos:column="9">gethostbyname_r<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">hostname<pos:position pos:line="42" pos:column="33"/></name></expr></argument>,
                        <argument><expr><operator pos:line="43" pos:column="25">(<pos:position pos:line="43" pos:column="26"/></operator>struct <name pos:line="43" pos:column="33">hostent<pos:position pos:line="43" pos:column="40"/></name> <operator pos:line="43" pos:column="41">*<pos:position pos:line="43" pos:column="42"/></operator><operator pos:line="43" pos:column="42">)<pos:position pos:line="43" pos:column="43"/></operator><name pos:line="43" pos:column="43">buf<pos:position pos:line="43" pos:column="46"/></name></expr></argument>,
                        <argument><expr><operator pos:line="44" pos:column="25">(<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="26">char<pos:position pos:line="44" pos:column="30"/></name> <operator pos:line="44" pos:column="31">*<pos:position pos:line="44" pos:column="32"/></operator><operator pos:line="44" pos:column="32">)<pos:position pos:line="44" pos:column="33"/></operator><name pos:line="44" pos:column="33">buf<pos:position pos:line="44" pos:column="36"/></name> <operator pos:line="44" pos:column="37">+<pos:position pos:line="44" pos:column="38"/></operator> <sizeof pos:line="44" pos:column="39">sizeof<argument_list pos:line="44" pos:column="45">(<argument><expr pos:line="44" pos:column="46">struct <name pos:line="44" pos:column="53">hostent<pos:position pos:line="44" pos:column="60"/></name></expr></argument>)<pos:position pos:line="44" pos:column="61"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><name pos:line="45" pos:column="25">CURL_HOSTENT_SIZE<pos:position pos:line="45" pos:column="42"/></name> <operator pos:line="45" pos:column="43">-<pos:position pos:line="45" pos:column="44"/></operator> <sizeof pos:line="45" pos:column="45">sizeof<argument_list pos:line="45" pos:column="51">(<argument><expr pos:line="45" pos:column="52">struct <name pos:line="45" pos:column="59">hostent<pos:position pos:line="45" pos:column="66"/></name></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><operator pos:line="46" pos:column="25">&amp;<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="26">h_errnop<pos:position pos:line="46" pos:column="34"/></name></expr></argument>)<pos:position pos:line="46" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="48" pos:column="5">/* If the buffer is too small, it returns NULL and sets errno to
     * ERANGE. The errno is thread safe if this is compiled with
     * -D_REENTRANT as then the 'errno' variable is a macro defined to get
     * used properly for threads.
     */</comment>

    <if pos:line="54" pos:column="5">if<condition pos:line="54" pos:column="7">(<expr><name pos:line="54" pos:column="8">h<pos:position pos:line="54" pos:column="9"/></name></expr>)<pos:position pos:line="54" pos:column="10"/></condition><then pos:line="54" pos:column="10"> <block pos:line="54" pos:column="11">{
      <empty_stmt pos:line="55" pos:column="7">;<pos:position pos:line="55" pos:column="8"/></empty_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then>
    <else pos:line="57" pos:column="5">else
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="58" pos:column="8">/* HAVE_GETHOSTBYNAME_R_5 */</comment>
<cpp:ifdef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifdef<pos:position pos:line="59" pos:column="7"/></cpp:directive> <name pos:line="59" pos:column="8">HAVE_GETHOSTBYNAME_R_6<pos:position pos:line="59" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="60" pos:column="5">/* Linux */</comment>

    <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="5">res<pos:position pos:line="62" pos:column="8"/></name><operator pos:line="62" pos:column="8">=<pos:position pos:line="62" pos:column="9"/></operator><call><name pos:line="62" pos:column="9">gethostbyname_r<pos:position pos:line="62" pos:column="24"/></name><argument_list pos:line="62" pos:column="24">(<argument><expr><name pos:line="62" pos:column="25">hostname<pos:position pos:line="62" pos:column="33"/></name></expr></argument>,
                        <argument><expr><operator pos:line="63" pos:column="25">(<pos:position pos:line="63" pos:column="26"/></operator>struct <name pos:line="63" pos:column="33">hostent<pos:position pos:line="63" pos:column="40"/></name> <operator pos:line="63" pos:column="41">*<pos:position pos:line="63" pos:column="42"/></operator><operator pos:line="63" pos:column="42">)<pos:position pos:line="63" pos:column="43"/></operator><name pos:line="63" pos:column="43">buf<pos:position pos:line="63" pos:column="46"/></name></expr></argument>,
                        <argument><expr><operator pos:line="64" pos:column="25">(<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="26">char<pos:position pos:line="64" pos:column="30"/></name> <operator pos:line="64" pos:column="31">*<pos:position pos:line="64" pos:column="32"/></operator><operator pos:line="64" pos:column="32">)<pos:position pos:line="64" pos:column="33"/></operator><name pos:line="64" pos:column="33">buf<pos:position pos:line="64" pos:column="36"/></name> <operator pos:line="64" pos:column="37">+<pos:position pos:line="64" pos:column="38"/></operator> <sizeof pos:line="64" pos:column="39">sizeof<argument_list pos:line="64" pos:column="45">(<argument><expr pos:line="64" pos:column="46">struct <name pos:line="64" pos:column="53">hostent<pos:position pos:line="64" pos:column="60"/></name></expr></argument>)<pos:position pos:line="64" pos:column="61"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><name pos:line="65" pos:column="25">CURL_HOSTENT_SIZE<pos:position pos:line="65" pos:column="42"/></name> <operator pos:line="65" pos:column="43">-<pos:position pos:line="65" pos:column="44"/></operator> <sizeof pos:line="65" pos:column="45">sizeof<argument_list pos:line="65" pos:column="51">(<argument><expr pos:line="65" pos:column="52">struct <name pos:line="65" pos:column="59">hostent<pos:position pos:line="65" pos:column="66"/></name></expr></argument>)<pos:position pos:line="65" pos:column="67"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><operator pos:line="66" pos:column="25">&amp;<pos:position pos:line="66" pos:column="30"/></operator><name pos:line="66" pos:column="26">h<pos:position pos:line="66" pos:column="27"/></name></expr></argument>, <comment type="block" pos:line="66" pos:column="29">/* DIFFERENCE */</comment>
                        <argument><expr><operator pos:line="67" pos:column="25">&amp;<pos:position pos:line="67" pos:column="30"/></operator><name pos:line="67" pos:column="26">h_errnop<pos:position pos:line="67" pos:column="34"/></name></expr></argument>)<pos:position pos:line="67" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="36"/></expr_stmt></block></else></if>
    <comment type="block" pos:line="68" pos:column="5">/* Redhat 8, using glibc 2.2.93 changed the behavior. Now all of a
     * sudden this function returns EAGAIN if the given buffer size is too
     * small. Previous versions are known to return ERANGE for the same
     * problem.
     *
     * This wouldn't be such a big problem if older versions wouldn't
     * sometimes return EAGAIN on a common failure case. Alas, we can't
     * assume that EAGAIN *or* ERANGE means ERANGE for any given version of
     * glibc.
     *
     * For now, we do that and thus we may call the function repeatedly and
     * fail for older glibc versions that return EAGAIN, until we run out of
     * buffer size (step_size grows beyond CURL_HOSTENT_SIZE).
     *
     * If anyone has a better fix, please tell us!
     *
     * -------------------------------------------------------------------
     *
     * On October 23rd 2003, Dan C dug up more details on the mysteries of
     * gethostbyname_r() in glibc:
     *
     * In glibc 2.2.5 the interface is different (this has also been
     * discovered in glibc 2.1.1-6 as shipped by Redhat 6). What I can't
     * explain, is that tests performed on glibc 2.2.4-34 and 2.2.4-32
     * (shipped/upgraded by Redhat 7.2) don't show this behavior!
     *
     * In this "buggy" version, the return code is -1 on error and 'errno'
     * is set to the ERANGE or EAGAIN code. Note that 'errno' is not a
     * thread-safe variable.
     */</comment>

    <if pos:line="99" pos:column="5">if<condition pos:line="99" pos:column="7">(<expr><operator pos:line="99" pos:column="8">!<pos:position pos:line="99" pos:column="9"/></operator><name pos:line="99" pos:column="9">h<pos:position pos:line="99" pos:column="10"/></name></expr>)<pos:position pos:line="99" pos:column="11"/></condition><then pos:line="99" pos:column="11"> <comment type="block" pos:line="99" pos:column="12">/* failure */</comment>
<cpp:endif pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">endif<pos:position pos:line="100" pos:column="7"/></cpp:directive></cpp:endif><comment type="block" pos:line="100" pos:column="7">/* HAVE_GETHOSTBYNAME_R_6 */</comment>
<cpp:ifdef pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">ifdef<pos:position pos:line="101" pos:column="7"/></cpp:directive> <name pos:line="101" pos:column="8">HAVE_GETHOSTBYNAME_R_3<pos:position pos:line="101" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="102" pos:column="5">/* AIX, Digital Unix/Tru64, HPUX 10, more? */</comment>

    <comment type="block" pos:line="104" pos:column="5">/* For AIX 4.3 or later, we don't use gethostbyname_r() at all, because of
     * the plain fact that it does not return unique full buffers on each
     * call, but instead several of the pointers in the hostent structs will
     * point to the same actual data! This have the unfortunate down-side that
     * our caching system breaks down horribly. Luckily for us though, AIX 4.3
     * and more recent versions have a "completely thread-safe"[*] libc where
     * all the data is stored in thread-specific memory areas making calls to
     * the plain old gethostbyname() work fine even for multi-threaded
     * programs.
     *
     * This AIX 4.3 or later detection is all made in the configure script.
     *
     * Troels Walsted Hansen helped us work this out on March 3rd, 2003.
     *
     * [*] = much later we've found out that it isn't at all "completely
     * thread-safe", but at least the gethostbyname() function is.
     */</comment>

    <block type="pseudo"><if pos:line="122" pos:column="5">if<condition pos:line="122" pos:column="7">(<expr><name pos:line="122" pos:column="8">CURL_HOSTENT_SIZE<pos:position pos:line="122" pos:column="25"/></name> <operator pos:line="122" pos:column="26">&gt;=<pos:position pos:line="122" pos:column="31"/></operator>
       <operator pos:line="123" pos:column="8">(<pos:position pos:line="123" pos:column="9"/></operator><sizeof pos:line="123" pos:column="9">sizeof<argument_list pos:line="123" pos:column="15">(<argument><expr pos:line="123" pos:column="16">struct <name pos:line="123" pos:column="23">hostent<pos:position pos:line="123" pos:column="30"/></name></expr></argument>)<pos:position pos:line="123" pos:column="31"/></argument_list></sizeof><operator pos:line="123" pos:column="31">+<pos:position pos:line="123" pos:column="32"/></operator><sizeof pos:line="123" pos:column="32">sizeof<argument_list pos:line="123" pos:column="38">(<argument><expr pos:line="123" pos:column="39">struct <name pos:line="123" pos:column="46">hostent_data<pos:position pos:line="123" pos:column="58"/></name></expr></argument>)<pos:position pos:line="123" pos:column="59"/></argument_list></sizeof><operator pos:line="123" pos:column="59">)<pos:position pos:line="123" pos:column="60"/></operator></expr>)<pos:position pos:line="123" pos:column="61"/></condition><then pos:line="123" pos:column="61"> <block pos:line="123" pos:column="62">{

      <comment type="block" pos:line="125" pos:column="7">/* August 22nd, 2000: Albert Chin-A-Young brought an updated version
       * that should work! September 20: Richard Prescott worked on the buffer
       * size dilemma.
       */</comment>

      <expr_stmt><expr><name pos:line="130" pos:column="7">res<pos:position pos:line="130" pos:column="10"/></name> <operator pos:line="130" pos:column="11">=<pos:position pos:line="130" pos:column="12"/></operator> <call><name pos:line="130" pos:column="13">gethostbyname_r<pos:position pos:line="130" pos:column="28"/></name><argument_list pos:line="130" pos:column="28">(<argument><expr><name pos:line="130" pos:column="29">hostname<pos:position pos:line="130" pos:column="37"/></name></expr></argument>,
                            <argument><expr><operator pos:line="131" pos:column="29">(<pos:position pos:line="131" pos:column="30"/></operator>struct <name pos:line="131" pos:column="37">hostent<pos:position pos:line="131" pos:column="44"/></name> <operator pos:line="131" pos:column="45">*<pos:position pos:line="131" pos:column="46"/></operator><operator pos:line="131" pos:column="46">)<pos:position pos:line="131" pos:column="47"/></operator><name pos:line="131" pos:column="47">buf<pos:position pos:line="131" pos:column="50"/></name></expr></argument>,
                            <argument><expr><operator pos:line="132" pos:column="29">(<pos:position pos:line="132" pos:column="30"/></operator>struct <name pos:line="132" pos:column="37">hostent_data<pos:position pos:line="132" pos:column="49"/></name> <operator pos:line="132" pos:column="50">*<pos:position pos:line="132" pos:column="51"/></operator><operator pos:line="132" pos:column="51">)<pos:position pos:line="132" pos:column="52"/></operator><operator pos:line="132" pos:column="52">(<pos:position pos:line="132" pos:column="53"/></operator><operator pos:line="132" pos:column="53">(<pos:position pos:line="132" pos:column="54"/></operator><name pos:line="132" pos:column="54">char<pos:position pos:line="132" pos:column="58"/></name> <operator pos:line="132" pos:column="59">*<pos:position pos:line="132" pos:column="60"/></operator><operator pos:line="132" pos:column="60">)<pos:position pos:line="132" pos:column="61"/></operator><name pos:line="132" pos:column="61">buf<pos:position pos:line="132" pos:column="64"/></name> <operator pos:line="132" pos:column="65">+<pos:position pos:line="132" pos:column="66"/></operator>
                                                    <sizeof pos:line="133" pos:column="53">sizeof<argument_list pos:line="133" pos:column="59">(<argument><expr pos:line="133" pos:column="60">struct <name pos:line="133" pos:column="67">hostent<pos:position pos:line="133" pos:column="74"/></name></expr></argument>)<pos:position pos:line="133" pos:column="75"/></argument_list></sizeof><operator pos:line="133" pos:column="75">)<pos:position pos:line="133" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="133" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><name pos:line="134" pos:column="7">h_errnop<pos:position pos:line="134" pos:column="15"/></name><operator pos:line="134" pos:column="15">=<pos:position pos:line="134" pos:column="16"/></operator> <name pos:line="134" pos:column="17">errno<pos:position pos:line="134" pos:column="22"/></name></expr>;<pos:position pos:line="134" pos:column="23"/></expr_stmt> <comment type="block" pos:line="134" pos:column="24">/* we don't deal with this, but set it anyway */</comment>
    }<pos:position pos:line="135" pos:column="6"/></block></then>
    <else pos:line="136" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="137" pos:column="7">res<pos:position pos:line="137" pos:column="10"/></name> <operator pos:line="137" pos:column="11">=<pos:position pos:line="137" pos:column="12"/></operator> <operator pos:line="137" pos:column="13">-<pos:position pos:line="137" pos:column="14"/></operator><literal type="number" pos:line="137" pos:column="14">1<pos:position pos:line="137" pos:column="15"/></literal></expr>;<pos:position pos:line="137" pos:column="16"/></expr_stmt></block></else></if></block></then></if> <comment type="block" pos:line="137" pos:column="17">/* failure, too smallish buffer size */</comment>

    <if pos:line="139" pos:column="5">if<condition pos:line="139" pos:column="7">(<expr><operator pos:line="139" pos:column="8">!<pos:position pos:line="139" pos:column="9"/></operator><name pos:line="139" pos:column="9">res<pos:position pos:line="139" pos:column="12"/></name></expr>)<pos:position pos:line="139" pos:column="13"/></condition><then pos:line="139" pos:column="13"> <block pos:line="139" pos:column="14">{ <comment type="block" pos:line="139" pos:column="16">/* success */</comment>

      <expr_stmt><expr><name pos:line="141" pos:column="7">h<pos:position pos:line="141" pos:column="8"/></name> <operator pos:line="141" pos:column="9">=<pos:position pos:line="141" pos:column="10"/></operator> <name pos:line="141" pos:column="11">buf<pos:position pos:line="141" pos:column="14"/></name></expr>;<pos:position pos:line="141" pos:column="15"/></expr_stmt> <comment type="block" pos:line="141" pos:column="16">/* result expected in h */</comment>

      <comment type="block" pos:line="143" pos:column="7">/* This is the worst kind of the different gethostbyname_r() interfaces.
       * Since we don't know how big buffer this particular lookup required,
       * we can't realloc down the huge alloc without doing closer analysis of
       * the returned data. Thus, we always use CURL_HOSTENT_SIZE for every
       * name lookup. Fixing this would require an extra malloc() and then
       * calling Curl_addrinfo_copy() that subsequent realloc()s down the new
       * memory area to the actually used amount.
       */</comment>
    }<pos:position pos:line="151" pos:column="6"/></block></then>
    <else pos:line="152" pos:column="5">else
<cpp:endif pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">endif<pos:position pos:line="153" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="153" pos:column="8">/* HAVE_GETHOSTBYNAME_R_3 */</comment>
      <block pos:line="154" pos:column="7">{
      <expr_stmt><expr><call><name pos:line="155" pos:column="7">infof<pos:position pos:line="155" pos:column="12"/></name><argument_list pos:line="155" pos:column="12">(<argument><expr><name pos:line="155" pos:column="13">data<pos:position pos:line="155" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="155" pos:column="19">"gethostbyname_r(2) failed for %s\n"<pos:position pos:line="155" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="57">hostname<pos:position pos:line="155" pos:column="65"/></name></expr></argument>)<pos:position pos:line="155" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><name pos:line="156" pos:column="7">h<pos:position pos:line="156" pos:column="8"/></name> <operator pos:line="156" pos:column="9">=<pos:position pos:line="156" pos:column="10"/></operator> <name pos:line="156" pos:column="11">NULL<pos:position pos:line="156" pos:column="15"/></name></expr>;<pos:position pos:line="156" pos:column="16"/></expr_stmt> <comment type="block" pos:line="156" pos:column="17">/* set return code to NULL */</comment>
      <expr_stmt><expr><call><name pos:line="157" pos:column="7">free<pos:position pos:line="157" pos:column="11"/></name><argument_list pos:line="157" pos:column="11">(<argument><expr><name pos:line="157" pos:column="12">buf<pos:position pos:line="157" pos:column="15"/></name></expr></argument>)<pos:position pos:line="157" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="158" pos:column="6"/></block></else></if>
<cpp:else pos:line="159" pos:column="1">#<cpp:directive pos:line="159" pos:column="2">else<pos:position pos:line="159" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="159" pos:column="7">/* HAVE_GETHOSTBYNAME_R */</comment>
    <comment type="block" pos:line="160" pos:column="5">/*
     * Here is code for platforms that don't have gethostbyname_r() or for
     * which the gethostbyname() is the preferred() function.
     */</comment>
  <else pos:line="164" pos:column="3">else <block pos:line="164" pos:column="8">{
    <expr_stmt><expr><name pos:line="165" pos:column="5">h<pos:position pos:line="165" pos:column="6"/></name> <operator pos:line="165" pos:column="7">=<pos:position pos:line="165" pos:column="8"/></operator> <call><name pos:line="165" pos:column="9">gethostbyname<pos:position pos:line="165" pos:column="22"/></name><argument_list pos:line="165" pos:column="22">(<argument><expr><name pos:line="165" pos:column="23">hostname<pos:position pos:line="165" pos:column="31"/></name></expr></argument>)<pos:position pos:line="165" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="33"/></expr_stmt>
    <if pos:line="166" pos:column="5">if <condition pos:line="166" pos:column="8">(<expr><operator pos:line="166" pos:column="9">!<pos:position pos:line="166" pos:column="10"/></operator><name pos:line="166" pos:column="10">h<pos:position pos:line="166" pos:column="11"/></name></expr>)<pos:position pos:line="166" pos:column="12"/></condition><then pos:line="166" pos:column="12">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="167" pos:column="7">infof<pos:position pos:line="167" pos:column="12"/></name><argument_list pos:line="167" pos:column="12">(<argument><expr><name pos:line="167" pos:column="13">data<pos:position pos:line="167" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="167" pos:column="19">"gethostbyname(2) failed for %s\n"<pos:position pos:line="167" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="167" pos:column="55">hostname<pos:position pos:line="167" pos:column="63"/></name></expr></argument>)<pos:position pos:line="167" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="65"/></expr_stmt></block></then></if>
<cpp:endif pos:line="168" pos:column="1">#<cpp:directive pos:line="168" pos:column="2">endif<pos:position pos:line="168" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="168" pos:column="8">/*HAVE_GETHOSTBYNAME_R */</comment>
  }<pos:position pos:line="169" pos:column="4"/></block></else>

  <if pos:line="171" pos:column="3">if<condition pos:line="171" pos:column="5">(<expr><name pos:line="171" pos:column="6">h<pos:position pos:line="171" pos:column="7"/></name></expr>)<pos:position pos:line="171" pos:column="8"/></condition><then pos:line="171" pos:column="8"> <block pos:line="171" pos:column="9">{
    <expr_stmt><expr><name pos:line="172" pos:column="5">ai<pos:position pos:line="172" pos:column="7"/></name> <operator pos:line="172" pos:column="8">=<pos:position pos:line="172" pos:column="9"/></operator> <call><name pos:line="172" pos:column="10">Curl_he2ai<pos:position pos:line="172" pos:column="20"/></name><argument_list pos:line="172" pos:column="20">(<argument><expr><name pos:line="172" pos:column="21">h<pos:position pos:line="172" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="24">port<pos:position pos:line="172" pos:column="28"/></name></expr></argument>)<pos:position pos:line="172" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="30"/></expr_stmt>

    <if pos:line="174" pos:column="5">if <condition pos:line="174" pos:column="8">(<expr><name pos:line="174" pos:column="9">buf<pos:position pos:line="174" pos:column="12"/></name></expr>)<pos:position pos:line="174" pos:column="13"/></condition><then pos:line="174" pos:column="13"> <comment type="block" pos:line="174" pos:column="14">/* used a *_r() function */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="175" pos:column="7">free<pos:position pos:line="175" pos:column="11"/></name><argument_list pos:line="175" pos:column="11">(<argument><expr><name pos:line="175" pos:column="12">buf<pos:position pos:line="175" pos:column="15"/></name></expr></argument>)<pos:position pos:line="175" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="17"/></expr_stmt></block></then></if>
  }<pos:position pos:line="176" pos:column="4"/></block></then></if>

  <return pos:line="178" pos:column="3">return <expr><name pos:line="178" pos:column="10">ai<pos:position pos:line="178" pos:column="12"/></name></expr>;<pos:position pos:line="178" pos:column="13"/></return>
}<pos:position pos:line="179" pos:column="2"/></block></else></if>

<cpp:endif pos:line="181" pos:column="1">#<cpp:directive pos:line="181" pos:column="2">endif<pos:position pos:line="181" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="181" pos:column="8">/* CURLRES_SYNCH */</comment>

<comment type="block" pos:line="183" pos:column="1">/*
 * Curl_he2ai() translates from a hostent struct to a Curl_addrinfo struct.
 * The Curl_addrinfo is meant to work like the addrinfo struct does for IPv6
 * stacks, but for all hosts and environments.

struct Curl_addrinfo {
  int     ai_flags;
  int     ai_family;
  int     ai_socktype;
  int     ai_protocol;
  size_t  ai_addrlen;
  struct sockaddr *ai_addr;
  char   *ai_canonname;
  struct addrinfo *ai_next;
};

struct hostent {
  char    *h_name;        * official name of host *
  char    **h_aliases;    * alias list *
  int     h_addrtype;     * host address type *
  int     h_length;       * length of address *
  char    **h_addr_list;  * list of addresses *
}
#define h_addr  h_addr_list[0]  * for backward compatibility *

*/</comment>

<function><type><name pos:line="210" pos:column="1">Curl_addrinfo<pos:position pos:line="210" pos:column="14"/></name> <modifier pos:line="210" pos:column="15">*<pos:position pos:line="210" pos:column="16"/></modifier></type><name pos:line="210" pos:column="16">Curl_he2ai<pos:position pos:line="210" pos:column="26"/></name><parameter_list pos:line="210" pos:column="26">(<parameter><decl><type><name><name pos:line="210" pos:column="27">struct<pos:position pos:line="210" pos:column="33"/></name> <name pos:line="210" pos:column="34">hostent<pos:position pos:line="210" pos:column="41"/></name></name> <modifier pos:line="210" pos:column="42">*<pos:position pos:line="210" pos:column="43"/></modifier></type><name pos:line="210" pos:column="43">he<pos:position pos:line="210" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="210" pos:column="47">int<pos:position pos:line="210" pos:column="50"/></name></type> <name pos:line="210" pos:column="51">port<pos:position pos:line="210" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="210" pos:column="56"/></parameter_list>
<block pos:line="211" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="212" pos:column="3">Curl_addrinfo<pos:position pos:line="212" pos:column="16"/></name> <modifier pos:line="212" pos:column="17">*<pos:position pos:line="212" pos:column="18"/></modifier></type><name pos:line="212" pos:column="18">ai<pos:position pos:line="212" pos:column="20"/></name></decl>;<pos:position pos:line="212" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="213" pos:column="3">Curl_addrinfo<pos:position pos:line="213" pos:column="16"/></name> <modifier pos:line="213" pos:column="17">*<pos:position pos:line="213" pos:column="18"/></modifier></type><name pos:line="213" pos:column="18">prevai<pos:position pos:line="213" pos:column="24"/></name> <init pos:line="213" pos:column="25">= <expr><name pos:line="213" pos:column="27">NULL<pos:position pos:line="213" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="213" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="214" pos:column="3">Curl_addrinfo<pos:position pos:line="214" pos:column="16"/></name> <modifier pos:line="214" pos:column="17">*<pos:position pos:line="214" pos:column="18"/></modifier></type><name pos:line="214" pos:column="18">firstai<pos:position pos:line="214" pos:column="25"/></name> <init pos:line="214" pos:column="26">= <expr><name pos:line="214" pos:column="28">NULL<pos:position pos:line="214" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="214" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="215" pos:column="3">struct<pos:position pos:line="215" pos:column="9"/></name> <name pos:line="215" pos:column="10">sockaddr_in<pos:position pos:line="215" pos:column="21"/></name></name> <modifier pos:line="215" pos:column="22">*<pos:position pos:line="215" pos:column="23"/></modifier></type><name pos:line="215" pos:column="23">addr<pos:position pos:line="215" pos:column="27"/></name></decl>;<pos:position pos:line="215" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="216" pos:column="3">int<pos:position pos:line="216" pos:column="6"/></name></type> <name pos:line="216" pos:column="7">i<pos:position pos:line="216" pos:column="8"/></name></decl>;<pos:position pos:line="216" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="217" pos:column="3">struct<pos:position pos:line="217" pos:column="9"/></name> <name pos:line="217" pos:column="10">in_addr<pos:position pos:line="217" pos:column="17"/></name></name> <modifier pos:line="217" pos:column="18">*<pos:position pos:line="217" pos:column="19"/></modifier></type><name pos:line="217" pos:column="19">curr<pos:position pos:line="217" pos:column="23"/></name></decl>;<pos:position pos:line="217" pos:column="24"/></decl_stmt>

  <if pos:line="219" pos:column="3">if<condition pos:line="219" pos:column="5">(<expr><operator pos:line="219" pos:column="6">!<pos:position pos:line="219" pos:column="7"/></operator><name pos:line="219" pos:column="7">he<pos:position pos:line="219" pos:column="9"/></name></expr>)<pos:position pos:line="219" pos:column="10"/></condition><then pos:line="219" pos:column="10">
    <comment type="block" pos:line="220" pos:column="5">/* no input == no output! */</comment>
    <block type="pseudo"><return pos:line="221" pos:column="5">return <expr><name pos:line="221" pos:column="12">NULL<pos:position pos:line="221" pos:column="16"/></name></expr>;<pos:position pos:line="221" pos:column="17"/></return></block></then></if>

  <for pos:line="223" pos:column="3">for<control pos:line="223" pos:column="6">(<init><expr><name pos:line="223" pos:column="7">i<pos:position pos:line="223" pos:column="8"/></name><operator pos:line="223" pos:column="8">=<pos:position pos:line="223" pos:column="9"/></operator><literal type="number" pos:line="223" pos:column="9">0<pos:position pos:line="223" pos:column="10"/></literal></expr>;<pos:position pos:line="223" pos:column="11"/></init> <condition><expr><operator pos:line="223" pos:column="12">(<pos:position pos:line="223" pos:column="13"/></operator><name pos:line="223" pos:column="13">curr<pos:position pos:line="223" pos:column="17"/></name> <operator pos:line="223" pos:column="18">=<pos:position pos:line="223" pos:column="19"/></operator> <operator pos:line="223" pos:column="20">(<pos:position pos:line="223" pos:column="21"/></operator>struct <name pos:line="223" pos:column="28">in_addr<pos:position pos:line="223" pos:column="35"/></name> <operator pos:line="223" pos:column="36">*<pos:position pos:line="223" pos:column="37"/></operator><operator pos:line="223" pos:column="37">)<pos:position pos:line="223" pos:column="38"/></operator><name><name pos:line="223" pos:column="38">he<pos:position pos:line="223" pos:column="40"/></name><operator pos:line="223" pos:column="40">-&gt;<pos:position pos:line="223" pos:column="45"/></operator><name pos:line="223" pos:column="42">h_addr_list<pos:position pos:line="223" pos:column="53"/></name><index pos:line="223" pos:column="53">[<expr><name pos:line="223" pos:column="54">i<pos:position pos:line="223" pos:column="55"/></name></expr>]<pos:position pos:line="223" pos:column="56"/></index></name><operator pos:line="223" pos:column="56">)<pos:position pos:line="223" pos:column="57"/></operator></expr>;<pos:position pos:line="223" pos:column="58"/></condition> <incr><expr><name pos:line="223" pos:column="59">i<pos:position pos:line="223" pos:column="60"/></name><operator pos:line="223" pos:column="60">++<pos:position pos:line="223" pos:column="62"/></operator></expr></incr>)<pos:position pos:line="223" pos:column="63"/></control> <block pos:line="223" pos:column="64">{

    <expr_stmt><expr><name pos:line="225" pos:column="5">ai<pos:position pos:line="225" pos:column="7"/></name> <operator pos:line="225" pos:column="8">=<pos:position pos:line="225" pos:column="9"/></operator> <call><name pos:line="225" pos:column="10">calloc<pos:position pos:line="225" pos:column="16"/></name><argument_list pos:line="225" pos:column="16">(<argument><expr><literal type="number" pos:line="225" pos:column="17">1<pos:position pos:line="225" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="225" pos:column="20">sizeof<argument_list pos:line="225" pos:column="26">(<argument><expr><name pos:line="225" pos:column="27">Curl_addrinfo<pos:position pos:line="225" pos:column="40"/></name></expr></argument>)<pos:position pos:line="225" pos:column="41"/></argument_list></sizeof> <operator pos:line="225" pos:column="42">+<pos:position pos:line="225" pos:column="43"/></operator> <sizeof pos:line="225" pos:column="44">sizeof<argument_list pos:line="225" pos:column="50">(<argument><expr pos:line="225" pos:column="51">struct <name pos:line="225" pos:column="58">sockaddr_in<pos:position pos:line="225" pos:column="69"/></name></expr></argument>)<pos:position pos:line="225" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="225" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="72"/></expr_stmt>

    <if pos:line="227" pos:column="5">if<condition pos:line="227" pos:column="7">(<expr><operator pos:line="227" pos:column="8">!<pos:position pos:line="227" pos:column="9"/></operator><name pos:line="227" pos:column="9">ai<pos:position pos:line="227" pos:column="11"/></name></expr>)<pos:position pos:line="227" pos:column="12"/></condition><then pos:line="227" pos:column="12">
      <block type="pseudo"><break pos:line="228" pos:column="7">break;<pos:position pos:line="228" pos:column="13"/></break></block></then></if>

    <if pos:line="230" pos:column="5">if<condition pos:line="230" pos:column="7">(<expr><operator pos:line="230" pos:column="8">!<pos:position pos:line="230" pos:column="9"/></operator><name pos:line="230" pos:column="9">firstai<pos:position pos:line="230" pos:column="16"/></name></expr>)<pos:position pos:line="230" pos:column="17"/></condition><then pos:line="230" pos:column="17">
      <comment type="block" pos:line="231" pos:column="7">/* store the pointer we want to return from this function */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="232" pos:column="7">firstai<pos:position pos:line="232" pos:column="14"/></name> <operator pos:line="232" pos:column="15">=<pos:position pos:line="232" pos:column="16"/></operator> <name pos:line="232" pos:column="17">ai<pos:position pos:line="232" pos:column="19"/></name></expr>;<pos:position pos:line="232" pos:column="20"/></expr_stmt></block></then></if>

    <if pos:line="234" pos:column="5">if<condition pos:line="234" pos:column="7">(<expr><name pos:line="234" pos:column="8">prevai<pos:position pos:line="234" pos:column="14"/></name></expr>)<pos:position pos:line="234" pos:column="15"/></condition><then pos:line="234" pos:column="15">
      <comment type="block" pos:line="235" pos:column="7">/* make the previous entry point to this */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="236" pos:column="7">prevai<pos:position pos:line="236" pos:column="13"/></name><operator pos:line="236" pos:column="13">-&gt;<pos:position pos:line="236" pos:column="18"/></operator><name pos:line="236" pos:column="15">ai_next<pos:position pos:line="236" pos:column="22"/></name></name> <operator pos:line="236" pos:column="23">=<pos:position pos:line="236" pos:column="24"/></operator> <name pos:line="236" pos:column="25">ai<pos:position pos:line="236" pos:column="27"/></name></expr>;<pos:position pos:line="236" pos:column="28"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="238" pos:column="5">ai<pos:position pos:line="238" pos:column="7"/></name><operator pos:line="238" pos:column="7">-&gt;<pos:position pos:line="238" pos:column="12"/></operator><name pos:line="238" pos:column="9">ai_family<pos:position pos:line="238" pos:column="18"/></name></name> <operator pos:line="238" pos:column="19">=<pos:position pos:line="238" pos:column="20"/></operator> <name pos:line="238" pos:column="21">AF_INET<pos:position pos:line="238" pos:column="28"/></name></expr>;<pos:position pos:line="238" pos:column="29"/></expr_stmt>              <comment type="block" pos:line="238" pos:column="43">/* we only support this */</comment>
    <expr_stmt><expr><name><name pos:line="239" pos:column="5">ai<pos:position pos:line="239" pos:column="7"/></name><operator pos:line="239" pos:column="7">-&gt;<pos:position pos:line="239" pos:column="12"/></operator><name pos:line="239" pos:column="9">ai_socktype<pos:position pos:line="239" pos:column="20"/></name></name> <operator pos:line="239" pos:column="21">=<pos:position pos:line="239" pos:column="22"/></operator> <name pos:line="239" pos:column="23">SOCK_STREAM<pos:position pos:line="239" pos:column="34"/></name></expr>;<pos:position pos:line="239" pos:column="35"/></expr_stmt>        <comment type="block" pos:line="239" pos:column="43">/* we only support this */</comment>
    <expr_stmt><expr><name><name pos:line="240" pos:column="5">ai<pos:position pos:line="240" pos:column="7"/></name><operator pos:line="240" pos:column="7">-&gt;<pos:position pos:line="240" pos:column="12"/></operator><name pos:line="240" pos:column="9">ai_addrlen<pos:position pos:line="240" pos:column="19"/></name></name> <operator pos:line="240" pos:column="20">=<pos:position pos:line="240" pos:column="21"/></operator> <sizeof pos:line="240" pos:column="22">sizeof<argument_list pos:line="240" pos:column="28">(<argument><expr pos:line="240" pos:column="29">struct <name pos:line="240" pos:column="36">sockaddr_in<pos:position pos:line="240" pos:column="47"/></name></expr></argument>)<pos:position pos:line="240" pos:column="48"/></argument_list></sizeof></expr>;<pos:position pos:line="240" pos:column="49"/></expr_stmt>
    <comment type="block" pos:line="241" pos:column="5">/* make the ai_addr point to the address immediately following this struct
       and use that area to store the address */</comment>
    <expr_stmt><expr><name><name pos:line="243" pos:column="5">ai<pos:position pos:line="243" pos:column="7"/></name><operator pos:line="243" pos:column="7">-&gt;<pos:position pos:line="243" pos:column="12"/></operator><name pos:line="243" pos:column="9">ai_addr<pos:position pos:line="243" pos:column="16"/></name></name> <operator pos:line="243" pos:column="17">=<pos:position pos:line="243" pos:column="18"/></operator> <operator pos:line="243" pos:column="19">(<pos:position pos:line="243" pos:column="20"/></operator>struct <name pos:line="243" pos:column="27">sockaddr<pos:position pos:line="243" pos:column="35"/></name> <operator pos:line="243" pos:column="36">*<pos:position pos:line="243" pos:column="37"/></operator><operator pos:line="243" pos:column="37">)<pos:position pos:line="243" pos:column="38"/></operator> <operator pos:line="243" pos:column="39">(<pos:position pos:line="243" pos:column="40"/></operator><operator pos:line="243" pos:column="40">(<pos:position pos:line="243" pos:column="41"/></operator><name pos:line="243" pos:column="41">char<pos:position pos:line="243" pos:column="45"/></name><operator pos:line="243" pos:column="45">*<pos:position pos:line="243" pos:column="46"/></operator><operator pos:line="243" pos:column="46">)<pos:position pos:line="243" pos:column="47"/></operator><name pos:line="243" pos:column="47">ai<pos:position pos:line="243" pos:column="49"/></name> <operator pos:line="243" pos:column="50">+<pos:position pos:line="243" pos:column="51"/></operator> <sizeof pos:line="243" pos:column="52">sizeof<argument_list pos:line="243" pos:column="58">(<argument><expr><name pos:line="243" pos:column="59">Curl_addrinfo<pos:position pos:line="243" pos:column="72"/></name></expr></argument>)<pos:position pos:line="243" pos:column="73"/></argument_list></sizeof><operator pos:line="243" pos:column="73">)<pos:position pos:line="243" pos:column="74"/></operator></expr>;<pos:position pos:line="243" pos:column="75"/></expr_stmt>

    <comment type="block" pos:line="245" pos:column="5">/* leave the rest of the struct filled with zero */</comment>

    <expr_stmt><expr><name pos:line="247" pos:column="5">addr<pos:position pos:line="247" pos:column="9"/></name> <operator pos:line="247" pos:column="10">=<pos:position pos:line="247" pos:column="11"/></operator> <operator pos:line="247" pos:column="12">(<pos:position pos:line="247" pos:column="13"/></operator>struct <name pos:line="247" pos:column="20">sockaddr_in<pos:position pos:line="247" pos:column="31"/></name> <operator pos:line="247" pos:column="32">*<pos:position pos:line="247" pos:column="33"/></operator><operator pos:line="247" pos:column="33">)<pos:position pos:line="247" pos:column="34"/></operator><name><name pos:line="247" pos:column="34">ai<pos:position pos:line="247" pos:column="36"/></name><operator pos:line="247" pos:column="36">-&gt;<pos:position pos:line="247" pos:column="41"/></operator><name pos:line="247" pos:column="38">ai_addr<pos:position pos:line="247" pos:column="45"/></name></name></expr>;<pos:position pos:line="247" pos:column="46"/></expr_stmt> <comment type="block" pos:line="247" pos:column="47">/* storage area for this info */</comment>

    <expr_stmt><expr><call><name pos:line="249" pos:column="5">memcpy<pos:position pos:line="249" pos:column="11"/></name><argument_list pos:line="249" pos:column="11">(<argument><expr><operator pos:line="249" pos:column="12">(<pos:position pos:line="249" pos:column="13"/></operator><name pos:line="249" pos:column="13">char<pos:position pos:line="249" pos:column="17"/></name> <operator pos:line="249" pos:column="18">*<pos:position pos:line="249" pos:column="19"/></operator><operator pos:line="249" pos:column="19">)<pos:position pos:line="249" pos:column="20"/></operator><operator pos:line="249" pos:column="20">&amp;<pos:position pos:line="249" pos:column="25"/></operator><operator pos:line="249" pos:column="21">(<pos:position pos:line="249" pos:column="22"/></operator><name><name pos:line="249" pos:column="22">addr<pos:position pos:line="249" pos:column="26"/></name><operator pos:line="249" pos:column="26">-&gt;<pos:position pos:line="249" pos:column="31"/></operator><name pos:line="249" pos:column="28">sin_addr<pos:position pos:line="249" pos:column="36"/></name></name><operator pos:line="249" pos:column="36">)<pos:position pos:line="249" pos:column="37"/></operator></expr></argument>, <argument><expr><name pos:line="249" pos:column="39">curr<pos:position pos:line="249" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="249" pos:column="45">sizeof<argument_list pos:line="249" pos:column="51">(<argument><expr pos:line="249" pos:column="52">struct <name pos:line="249" pos:column="59">in_addr<pos:position pos:line="249" pos:column="66"/></name></expr></argument>)<pos:position pos:line="249" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="249" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="250" pos:column="5">addr<pos:position pos:line="250" pos:column="9"/></name><operator pos:line="250" pos:column="9">-&gt;<pos:position pos:line="250" pos:column="14"/></operator><name pos:line="250" pos:column="11">sin_family<pos:position pos:line="250" pos:column="21"/></name></name> <operator pos:line="250" pos:column="22">=<pos:position pos:line="250" pos:column="23"/></operator> <name><name pos:line="250" pos:column="24">he<pos:position pos:line="250" pos:column="26"/></name><operator pos:line="250" pos:column="26">-&gt;<pos:position pos:line="250" pos:column="31"/></operator><name pos:line="250" pos:column="28">h_addrtype<pos:position pos:line="250" pos:column="38"/></name></name></expr>;<pos:position pos:line="250" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="251" pos:column="5">addr<pos:position pos:line="251" pos:column="9"/></name><operator pos:line="251" pos:column="9">-&gt;<pos:position pos:line="251" pos:column="14"/></operator><name pos:line="251" pos:column="11">sin_port<pos:position pos:line="251" pos:column="19"/></name></name> <operator pos:line="251" pos:column="20">=<pos:position pos:line="251" pos:column="21"/></operator> <call><name pos:line="251" pos:column="22">htons<pos:position pos:line="251" pos:column="27"/></name><argument_list pos:line="251" pos:column="27">(<argument><expr><operator pos:line="251" pos:column="28">(<pos:position pos:line="251" pos:column="29"/></operator><name pos:line="251" pos:column="29">unsigned<pos:position pos:line="251" pos:column="37"/></name> <name pos:line="251" pos:column="38">short<pos:position pos:line="251" pos:column="43"/></name><operator pos:line="251" pos:column="43">)<pos:position pos:line="251" pos:column="44"/></operator><name pos:line="251" pos:column="44">port<pos:position pos:line="251" pos:column="48"/></name></expr></argument>)<pos:position pos:line="251" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><name pos:line="253" pos:column="5">prevai<pos:position pos:line="253" pos:column="11"/></name> <operator pos:line="253" pos:column="12">=<pos:position pos:line="253" pos:column="13"/></operator> <name pos:line="253" pos:column="14">ai<pos:position pos:line="253" pos:column="16"/></name></expr>;<pos:position pos:line="253" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="254" pos:column="4"/></block></for>
  <return pos:line="255" pos:column="3">return <expr><name pos:line="255" pos:column="10">firstai<pos:position pos:line="255" pos:column="17"/></name></expr>;<pos:position pos:line="255" pos:column="18"/></return>
}<pos:position pos:line="256" pos:column="2"/></block></function></block></function></unit>
