<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1672_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_client_write<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">type<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="3" pos:column="28">char<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">ptr<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="4" pos:column="28">size_t<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">len<pos:position pos:line="4" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="39"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">data<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><literal type="number" pos:line="8" pos:column="6">0<pos:position pos:line="8" pos:column="7"/></literal> <operator pos:line="8" pos:column="8">==<pos:position pos:line="8" pos:column="10"/></operator> <name pos:line="8" pos:column="11">len<pos:position pos:line="8" pos:column="14"/></name></expr>)<pos:position pos:line="8" pos:column="15"/></condition><then pos:line="8" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="5">len<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">strlen<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">ptr<pos:position pos:line="9" pos:column="21"/></name></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">DEBUGASSERT<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">type<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">&lt;=<pos:position pos:line="11" pos:column="25"/></operator> <literal type="number" pos:line="11" pos:column="23">3<pos:position pos:line="11" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="13" pos:column="3">/* FTP data may need conversion. */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">(<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">type<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">&amp;<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="14">CLIENTWRITE_BODY<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">)<pos:position pos:line="14" pos:column="31"/></operator> <operator pos:line="14" pos:column="32">&amp;&amp;<pos:position pos:line="14" pos:column="42"/></operator>
    <operator pos:line="15" pos:column="5">(<pos:position pos:line="15" pos:column="6"/></operator><name><name pos:line="15" pos:column="6">conn<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">handler<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">protocol<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">&amp;<pos:position pos:line="15" pos:column="35"/></operator> <name pos:line="15" pos:column="32">PROTO_FAMILY_FTP<pos:position pos:line="15" pos:column="48"/></name><operator pos:line="15" pos:column="48">)<pos:position pos:line="15" pos:column="49"/></operator> <operator pos:line="15" pos:column="50">&amp;&amp;<pos:position pos:line="15" pos:column="60"/></operator>
    <name><name pos:line="16" pos:column="5">conn<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">-&gt;<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="11">proto<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">.<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">ftpc<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">.<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">transfertype<pos:position pos:line="16" pos:column="34"/></name></name> <operator pos:line="16" pos:column="35">==<pos:position pos:line="16" pos:column="37"/></operator> <literal type="char" pos:line="16" pos:column="38">'A'<pos:position pos:line="16" pos:column="41"/></literal></expr>)<pos:position pos:line="16" pos:column="42"/></condition><then pos:line="16" pos:column="42"> <block pos:line="16" pos:column="43">{
    <comment type="block" pos:line="17" pos:column="5">/* convert from the network encoding */</comment>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">CURLcode<pos:position pos:line="18" pos:column="13"/></name></type> <name pos:line="18" pos:column="14">result<pos:position pos:line="18" pos:column="20"/></name> <init pos:line="18" pos:column="21">= <expr><call><name pos:line="18" pos:column="23">Curl_convert_from_network<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><name pos:line="18" pos:column="49">data<pos:position pos:line="18" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="55">ptr<pos:position pos:line="18" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="60">len<pos:position pos:line="18" pos:column="63"/></name></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="65"/></decl_stmt>
    <comment type="block" pos:line="19" pos:column="5">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">result<pos:position pos:line="20" pos:column="14"/></name></expr>)<pos:position pos:line="20" pos:column="15"/></condition><then pos:line="20" pos:column="15">
      <block type="pseudo"><return pos:line="21" pos:column="7">return <expr><name pos:line="21" pos:column="14">result<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></return></block></then></if>

<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">CURL_DO_LINEEND_CONV<pos:position pos:line="23" pos:column="28"/></name></cpp:ifdef>
    <comment type="block" pos:line="24" pos:column="5">/* convert end-of-line markers */</comment>
    <expr_stmt><expr><name pos:line="25" pos:column="5">len<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <call><name pos:line="25" pos:column="11">convert_lineends<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">data<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">ptr<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="39">len<pos:position pos:line="25" pos:column="42"/></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="26" pos:column="8">/* CURL_DO_LINEEND_CONV */</comment>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

  <return pos:line="29" pos:column="3">return <expr><call><name pos:line="29" pos:column="10">Curl_client_chop_write<pos:position pos:line="29" pos:column="32"/></name><argument_list pos:line="29" pos:column="32">(<argument><expr><name pos:line="29" pos:column="33">conn<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">type<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="45">ptr<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="50">len<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
