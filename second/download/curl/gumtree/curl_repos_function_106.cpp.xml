<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_106.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">failf<pos:position pos:line="1" pos:column="11"/></name><parameter_list pos:line="1" pos:column="11">(<parameter><decl><type><name><name pos:line="1" pos:column="12">struct<pos:position pos:line="1" pos:column="18"/></name> <name pos:line="1" pos:column="19">UrlData<pos:position pos:line="1" pos:column="26"/></name></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">data<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">fmt<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="45">...<pos:position pos:line="1" pos:column="48"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">va_list<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">ap<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">va_start<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">ap<pos:position pos:line="4" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="16">fmt<pos:position pos:line="4" pos:column="19"/></name></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>
  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><name><name pos:line="5" pos:column="6">data<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">-&gt;<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="12">errorbuffer<pos:position pos:line="5" pos:column="23"/></name></name></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="5">vsprintf<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">(<argument><expr><name><name pos:line="6" pos:column="14">data<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">-&gt;<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="20">errorbuffer<pos:position pos:line="6" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="33">fmt<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="38">ap<pos:position pos:line="6" pos:column="40"/></name></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt></block></then>
  <else pos:line="7" pos:column="3">else <comment type="block" pos:line="7" pos:column="8">/* no errorbuffer receives this, write to data-&gt;err instead */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="5">vfprintf<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name><name pos:line="8" pos:column="14">data<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">err<pos:position pos:line="8" pos:column="23"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="25">fmt<pos:position pos:line="8" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="30">ap<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt></block></else></if>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">va_end<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">ap<pos:position pos:line="9" pos:column="12"/></name></expr></argument>)<pos:position pos:line="9" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="14"/></expr_stmt>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
