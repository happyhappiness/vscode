"\n"
"              singlecwd\n"
"                     curl does one CWD with the full target directory and then\n"
"                     operates  on  the  file  \"normally\" (like in the multicwd\n"
"                     case). This is somewhat  more  standards  compliant  than\n"
"                     'nocwd' but without the full penalty of 'multicwd'.\n"
"\n"
"       --ftp-pasv\n"
"              (FTP)  Use  PASV when transferring. PASV is the internal default\n"
, stdout);
 fputs(
"              behavior, but using this option can be used to override a previ-\n"
"              ous --ftp-port option. (Added in 7.11.0)\n"
"\n"
"              If  this option is used several times, the following occurrences\n"
"              make no difference. Undoing an enforced PASV really isn't doable\n"
"              but you must then instead enforce the correct EPRT again.\n"
"\n"
"       --ftp-alternative-to-user <command>\n"
"              (FTP)  If  authenticating with the USER and PASS commands fails,\n"
, stdout);
 fputs(
"              send this  command.   When  connecting  to  Tumbleweed's  Secure\n"
"              Transport  server  over  FTPS  using a client certificate, using\n"
"              \"SITE AUTH\" will tell the server to retrieve the  username  from\n"
"              the certificate. (Added in 7.15.5)\n"
"\n"
"       --ftp-skip-pasv-ip\n"
"              (FTP) Tell curl to not use the IP address the server suggests in\n"
"              its response to curl's PASV command when curl connects the  data\n"
, stdout);
 fputs(
"              connection.  Instead  curl  will  re-use  the same IP address it\n"
"              already uses for the control connection. (Added in 7.14.2)\n"
"\n"
"              This option has no effect if PORT, EPRT or EPSV is used  instead\n"
"              of PASV.\n"
"\n"
"       --ftp-ssl\n"
"              (FTP)  Try  to use SSL/TLS for the FTP connection.  Reverts to a\n"
"              non-secure connection if the  server  doesn't  support  SSL/TLS.\n"
, stdout);
 fputs(
"              See also --ftp-ssl-control and --ftp-ssl-reqd for different lev-\n"
"              els of encryption required. (Added in 7.11.0)\n"
"\n"
"       --ftp-ssl-control\n"
"              (FTP) Require SSL/TLS for the ftp  login,  clear  for  transfer.\n"
"              Allows  secure  authentication, but non-encrypted data transfers\n"
"              for efficiency.  Fails the transfer if the server  doesn't  sup-\n"
"              port SSL/TLS.  (Added in 7.16.0)\n"
"\n"
"       --ftp-ssl-reqd\n"
, stdout);
 fputs(
"              (FTP)  Require  SSL/TLS  for the FTP connection.  Terminates the\n"
"              connection if the server doesn't  support  SSL/TLS.   (Added  in\n"
"              7.15.5)\n"
"\n"
"       --ftp-ssl-ccc\n"
"              (FTP)  Use  CCC  (Clear  Command Channel) Shuts down the SSL/TLS\n"
"              layer after authenticating. The rest of the control channel com-\n"
"              munication  will be unencrypted. This allows NAT routers to fol-\n"
, stdout);
 fputs(
"              low the FTP transaction. The default mode is passive. See --ftp-\n"
"              ssl-ccc-mode for other modes.  (Added in 7.16.1)\n"
"\n"
"       --ftp-ssl-ccc-mode [active/passive]\n"
"              (FTP)  Use  CCC  (Clear  Command Channel) Sets the CCC mode. The\n"
"              passive mode will not initiate the shutdown,  but  instead  wait\n"
"              for the server to do it, and will not reply to the shutdown from\n"
, stdout);
 fputs(
"              the server. The active mode initiates the shutdown and waits for\n"
"              a reply from the server.  (Added in 7.16.2)\n"
"\n"
"       -F/--form <name=content>\n"
"              (HTTP)  This  lets curl emulate a filled in form in which a user\n"
"              has pressed the submit button. This causes  curl  to  POST  data\n"
"              using the Content-Type multipart/form-data according to RFC1867.\n"
"              This enables uploading of binary files etc. To force  the  'con-\n"
, stdout);
 fputs(
"              tent' part to be a file, prefix the file name with an @ sign. To\n"
"              just get the content part from a file, prefix the file name with\n"
"              the  letter  <.  The  difference  between @ and < is then that @\n"
"              makes a file get attached in the post as a  file  upload,  while\n"
"              the < makes a text field and just get the contents for that text\n"
"              field from a file.\n"
"\n"
, stdout);
 fputs(
"              Example, to send your password file to the server, where  'pass-\n"
"              word' is the name of the form-field to which /etc/passwd will be\n"
"              the input:\n"
"\n"
"              curl -F password=@/etc/passwd www.mypasswords.com\n"
"\n"
