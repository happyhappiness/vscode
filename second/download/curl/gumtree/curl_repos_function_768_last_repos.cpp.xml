<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_768_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">buf<pos:position pos:line="3" pos:column="11"/></name><index pos:line="3" pos:column="11">[<expr><literal type="number" pos:line="3" pos:column="12">1024<pos:position pos:line="3" pos:column="16"/></literal></expr>]<pos:position pos:line="3" pos:column="17"/></index></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">logfilename<pos:position pos:line="4" pos:column="19"/></name><index pos:line="4" pos:column="19">[<expr><literal type="number" pos:line="4" pos:column="20">256<pos:position pos:line="4" pos:column="23"/></literal></expr>]<pos:position pos:line="4" pos:column="24"/></index></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">FILE<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">stream<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">filename<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">error<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">type1_input<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name pos:line="8" pos:column="23">NULL<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>, <modifier pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="30">type3_input<pos:position pos:line="8" pos:column="41"/></name> <init pos:line="8" pos:column="42">= <expr><name pos:line="8" pos:column="44">NULL<pos:position pos:line="8" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="49"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">type1_output<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name pos:line="9" pos:column="24">NULL<pos:position pos:line="9" pos:column="28"/></name></expr></init></decl>, <modifier pos:line="9" pos:column="30">*<pos:position pos:line="9" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="31">type3_output<pos:position pos:line="9" pos:column="43"/></name> <init pos:line="9" pos:column="44">= <expr><name pos:line="9" pos:column="46">NULL<pos:position pos:line="9" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="51"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">size<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">long<pos:position pos:line="11" pos:column="7"/></name></type> <name pos:line="11" pos:column="8">testnum<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="12" pos:column="3">const<pos:position pos:line="12" pos:column="8"/></specifier> <name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">env<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">arg<pos:position pos:line="13" pos:column="10"/></name> <init pos:line="13" pos:column="11">= <expr><literal type="number" pos:line="13" pos:column="13">1<pos:position pos:line="13" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">helper_user<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><literal type="string" pos:line="14" pos:column="29">"unknown"<pos:position pos:line="14" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="15" pos:column="3">const<pos:position pos:line="15" pos:column="8"/></specifier> <name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">helper_proto<pos:position pos:line="15" pos:column="27"/></name> <init pos:line="15" pos:column="28">= <expr><literal type="string" pos:line="15" pos:column="30">"unknown"<pos:position pos:line="15" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="16" pos:column="3">const<pos:position pos:line="16" pos:column="8"/></specifier> <name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">helper_domain<pos:position pos:line="16" pos:column="28"/></name> <init pos:line="16" pos:column="29">= <expr><literal type="string" pos:line="16" pos:column="31">"unknown"<pos:position pos:line="16" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">bool<pos:position pos:line="17" pos:column="7"/></name></type> <name pos:line="17" pos:column="8">use_cached_creds<pos:position pos:line="17" pos:column="24"/></name> <init pos:line="17" pos:column="25">= <expr><name pos:line="17" pos:column="27">FALSE<pos:position pos:line="17" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name> <modifier pos:line="18" pos:column="8">*<pos:position pos:line="18" pos:column="9"/></modifier></type><name pos:line="18" pos:column="9">msgbuf<pos:position pos:line="18" pos:column="15"/></name></decl>;<pos:position pos:line="18" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="20" pos:column="3">buf<pos:position pos:line="20" pos:column="6"/></name><index pos:line="20" pos:column="6">[<expr><literal type="number" pos:line="20" pos:column="7">0<pos:position pos:line="20" pos:column="8"/></literal></expr>]<pos:position pos:line="20" pos:column="9"/></index></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <literal type="char" pos:line="20" pos:column="12">'\0'<pos:position pos:line="20" pos:column="16"/></literal></expr>;<pos:position pos:line="20" pos:column="17"/></expr_stmt>

  <while pos:line="22" pos:column="3">while<condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">argc<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">&gt;<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="16">arg<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition> <block pos:line="22" pos:column="21">{
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><operator pos:line="23" pos:column="8">!<pos:position pos:line="23" pos:column="9"/></operator><call><name pos:line="23" pos:column="9">strcmp<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="string" pos:line="23" pos:column="16">"--use-cached-creds"<pos:position pos:line="23" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="38">argv<pos:position pos:line="23" pos:column="42"/></name><index pos:line="23" pos:column="42">[<expr><name pos:line="23" pos:column="43">arg<pos:position pos:line="23" pos:column="46"/></name></expr>]<pos:position pos:line="23" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49"> <block pos:line="23" pos:column="50">{
      <expr_stmt><expr><name pos:line="24" pos:column="7">use_cached_creds<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">TRUE<pos:position pos:line="24" pos:column="30"/></name></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="25" pos:column="7">arg<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">++<pos:position pos:line="25" pos:column="12"/></operator></expr>;<pos:position pos:line="25" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then>
    <elseif pos:line="27" pos:column="5">else <if pos:line="27" pos:column="10">if<condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name pos:line="27" pos:column="14">strcmp<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><literal type="string" pos:line="27" pos:column="21">"--helper-protocol"<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="42">argv<pos:position pos:line="27" pos:column="46"/></name><index pos:line="27" pos:column="46">[<expr><name pos:line="27" pos:column="47">arg<pos:position pos:line="27" pos:column="50"/></name></expr>]<pos:position pos:line="27" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="53"/></condition><then pos:line="27" pos:column="53"> <block pos:line="27" pos:column="54">{
      <expr_stmt><expr><name pos:line="28" pos:column="7">arg<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">++<pos:position pos:line="28" pos:column="12"/></operator></expr>;<pos:position pos:line="28" pos:column="13"/></expr_stmt>
      <if pos:line="29" pos:column="7">if<condition pos:line="29" pos:column="9">(<expr><name pos:line="29" pos:column="10">argc<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">&gt;<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="17">arg<pos:position pos:line="29" pos:column="20"/></name></expr>)<pos:position pos:line="29" pos:column="21"/></condition><then pos:line="29" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="9">helper_proto<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator> <name><name pos:line="30" pos:column="24">argv<pos:position pos:line="30" pos:column="28"/></name><index pos:line="30" pos:column="28">[<expr><name pos:line="30" pos:column="29">arg<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">++<pos:position pos:line="30" pos:column="34"/></operator></expr>]<pos:position pos:line="30" pos:column="35"/></index></name></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="32" pos:column="5">else <if pos:line="32" pos:column="10">if<condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><call><name pos:line="32" pos:column="14">strcmp<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><literal type="string" pos:line="32" pos:column="21">"--username"<pos:position pos:line="32" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="35">argv<pos:position pos:line="32" pos:column="39"/></name><index pos:line="32" pos:column="39">[<expr><name pos:line="32" pos:column="40">arg<pos:position pos:line="32" pos:column="43"/></name></expr>]<pos:position pos:line="32" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="46"/></condition><then pos:line="32" pos:column="46"> <block pos:line="32" pos:column="47">{
      <expr_stmt><expr><name pos:line="33" pos:column="7">arg<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">++<pos:position pos:line="33" pos:column="12"/></operator></expr>;<pos:position pos:line="33" pos:column="13"/></expr_stmt>
      <if pos:line="34" pos:column="7">if<condition pos:line="34" pos:column="9">(<expr><name pos:line="34" pos:column="10">argc<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">&gt;<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="17">arg<pos:position pos:line="34" pos:column="20"/></name></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="9">helper_user<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name><name pos:line="35" pos:column="23">argv<pos:position pos:line="35" pos:column="27"/></name><index pos:line="35" pos:column="27">[<expr><name pos:line="35" pos:column="28">arg<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">++<pos:position pos:line="35" pos:column="33"/></operator></expr>]<pos:position pos:line="35" pos:column="34"/></index></name></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="37" pos:column="5">else <if pos:line="37" pos:column="10">if<condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><call><name pos:line="37" pos:column="14">strcmp<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><literal type="string" pos:line="37" pos:column="21">"--domain"<pos:position pos:line="37" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="33">argv<pos:position pos:line="37" pos:column="37"/></name><index pos:line="37" pos:column="37">[<expr><name pos:line="37" pos:column="38">arg<pos:position pos:line="37" pos:column="41"/></name></expr>]<pos:position pos:line="37" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="44"/></condition><then pos:line="37" pos:column="44"> <block pos:line="37" pos:column="45">{
      <expr_stmt><expr><name pos:line="38" pos:column="7">arg<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">++<pos:position pos:line="38" pos:column="12"/></operator></expr>;<pos:position pos:line="38" pos:column="13"/></expr_stmt>
      <if pos:line="39" pos:column="7">if<condition pos:line="39" pos:column="9">(<expr><name pos:line="39" pos:column="10">argc<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">&gt;<pos:position pos:line="39" pos:column="19"/></operator> <name pos:line="39" pos:column="17">arg<pos:position pos:line="39" pos:column="20"/></name></expr>)<pos:position pos:line="39" pos:column="21"/></condition><then pos:line="39" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="9">helper_domain<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <name><name pos:line="40" pos:column="25">argv<pos:position pos:line="40" pos:column="29"/></name><index pos:line="40" pos:column="29">[<expr><name pos:line="40" pos:column="30">arg<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">++<pos:position pos:line="40" pos:column="35"/></operator></expr>]<pos:position pos:line="40" pos:column="36"/></index></name></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if></elseif>
    <else pos:line="42" pos:column="5">else <block pos:line="42" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">puts<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><literal type="string" pos:line="43" pos:column="12">"Usage: fake_ntlm [option]\n"<pos:position pos:line="43" pos:column="41"/></literal>
           <literal type="string" pos:line="44" pos:column="12">" --use-cached-creds\n"<pos:position pos:line="44" pos:column="35"/></literal>
           <literal type="string" pos:line="45" pos:column="12">" --helper-protocol [protocol]\n"<pos:position pos:line="45" pos:column="45"/></literal>
           <literal type="string" pos:line="46" pos:column="12">" --username [username]\n"<pos:position pos:line="46" pos:column="38"/></literal>
           <literal type="string" pos:line="47" pos:column="12">" --domain [domain]"<pos:position pos:line="47" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="48" pos:column="7">exit<pos:position pos:line="48" pos:column="11"/></name><argument_list pos:line="48" pos:column="11">(<argument><expr><literal type="number" pos:line="48" pos:column="12">1<pos:position pos:line="48" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></else></if>
  }<pos:position pos:line="50" pos:column="4"/></block></while>

  <expr_stmt><expr><name pos:line="52" pos:column="3">env<pos:position pos:line="52" pos:column="6"/></name> <operator pos:line="52" pos:column="7">=<pos:position pos:line="52" pos:column="8"/></operator> <call><name pos:line="52" pos:column="9">getenv<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><literal type="string" pos:line="52" pos:column="16">"CURL_NTLM_AUTH_TESTNUM"<pos:position pos:line="52" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><name pos:line="53" pos:column="6">env<pos:position pos:line="53" pos:column="9"/></name></expr>)<pos:position pos:line="53" pos:column="10"/></condition><then pos:line="53" pos:column="10"> <block pos:line="53" pos:column="11">{
    <decl_stmt><decl><type><name pos:line="54" pos:column="5">char<pos:position pos:line="54" pos:column="9"/></name> <modifier pos:line="54" pos:column="10">*<pos:position pos:line="54" pos:column="11"/></modifier></type><name pos:line="54" pos:column="11">endptr<pos:position pos:line="54" pos:column="17"/></name></decl>;<pos:position pos:line="54" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="55" pos:column="5">long<pos:position pos:line="55" pos:column="9"/></name></type> <name pos:line="55" pos:column="10">lnum<pos:position pos:line="55" pos:column="14"/></name> <init pos:line="55" pos:column="15">= <expr><call><name pos:line="55" pos:column="17">strtol<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">env<pos:position pos:line="55" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="29">&amp;<pos:position pos:line="55" pos:column="34"/></operator><name pos:line="55" pos:column="30">endptr<pos:position pos:line="55" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="38">10<pos:position pos:line="55" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="55" pos:column="42"/></decl_stmt>
    <if pos:line="56" pos:column="5">if<condition pos:line="56" pos:column="7">(<expr><operator pos:line="56" pos:column="8">(<pos:position pos:line="56" pos:column="9"/></operator><name pos:line="56" pos:column="9">endptr<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">!=<pos:position pos:line="56" pos:column="18"/></operator> <name pos:line="56" pos:column="19">env<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">+<pos:position pos:line="56" pos:column="24"/></operator> <call><name pos:line="56" pos:column="25">strlen<pos:position pos:line="56" pos:column="31"/></name><argument_list pos:line="56" pos:column="31">(<argument><expr><name pos:line="56" pos:column="32">env<pos:position pos:line="56" pos:column="35"/></name></expr></argument>)<pos:position pos:line="56" pos:column="36"/></argument_list></call><operator pos:line="56" pos:column="36">)<pos:position pos:line="56" pos:column="37"/></operator> <operator pos:line="56" pos:column="38">||<pos:position pos:line="56" pos:column="40"/></operator> <operator pos:line="56" pos:column="41">(<pos:position pos:line="56" pos:column="42"/></operator><name pos:line="56" pos:column="42">lnum<pos:position pos:line="56" pos:column="46"/></name> <operator pos:line="56" pos:column="47">&lt;<pos:position pos:line="56" pos:column="51"/></operator> <literal type="number" pos:line="56" pos:column="49">1L<pos:position pos:line="56" pos:column="51"/></literal><operator pos:line="56" pos:column="51">)<pos:position pos:line="56" pos:column="52"/></operator></expr>)<pos:position pos:line="56" pos:column="53"/></condition><then pos:line="56" pos:column="53"> <block pos:line="56" pos:column="54">{
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">fprintf<pos:position pos:line="57" pos:column="14"/></name><argument_list pos:line="57" pos:column="14">(<argument><expr><name pos:line="57" pos:column="15">stderr<pos:position pos:line="57" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="23">"Test number not valid in CURL_NTLM_AUTH_TESTNUM"<pos:position pos:line="57" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="74"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">exit<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">(<argument><expr><literal type="number" pos:line="58" pos:column="12">1<pos:position pos:line="58" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="60" pos:column="5">testnum<pos:position pos:line="60" pos:column="12"/></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <name pos:line="60" pos:column="15">lnum<pos:position pos:line="60" pos:column="19"/></name></expr>;<pos:position pos:line="60" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="61" pos:column="4"/></block></then>
  <else pos:line="62" pos:column="3">else <block pos:line="62" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">fprintf<pos:position pos:line="63" pos:column="12"/></name><argument_list pos:line="63" pos:column="12">(<argument><expr><name pos:line="63" pos:column="13">stderr<pos:position pos:line="63" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="21">"Test number not specified in CURL_NTLM_AUTH_TESTNUM"<pos:position pos:line="63" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">exit<pos:position pos:line="64" pos:column="9"/></name><argument_list pos:line="64" pos:column="9">(<argument><expr><literal type="number" pos:line="64" pos:column="10">1<pos:position pos:line="64" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="65" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="67" pos:column="3">/* logmsg cannot be used until this file name is set */</comment>
  <expr_stmt><expr><call><name pos:line="68" pos:column="3">snprintf<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><name pos:line="68" pos:column="12">logfilename<pos:position pos:line="68" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="25">sizeof<argument_list pos:line="68" pos:column="31">(<argument><expr><name pos:line="68" pos:column="32">logfilename<pos:position pos:line="68" pos:column="43"/></name></expr></argument>)<pos:position pos:line="68" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="68" pos:column="46">LOGFILE<pos:position pos:line="68" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="55">testnum<pos:position pos:line="68" pos:column="62"/></name></expr></argument>)<pos:position pos:line="68" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><name pos:line="69" pos:column="3">serverlogfile<pos:position pos:line="69" pos:column="16"/></name> <operator pos:line="69" pos:column="17">=<pos:position pos:line="69" pos:column="18"/></operator> <name pos:line="69" pos:column="19">logfilename<pos:position pos:line="69" pos:column="30"/></name></expr>;<pos:position pos:line="69" pos:column="31"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="71" pos:column="3">logmsg<pos:position pos:line="71" pos:column="9"/></name><argument_list pos:line="71" pos:column="9">(<argument><expr><literal type="string" pos:line="71" pos:column="10">"fake_ntlm (user: %s) (proto: %s) (domain: %s) (cached creds: %s)"<pos:position pos:line="71" pos:column="76"/></literal></expr></argument>,
         <argument><expr><name pos:line="72" pos:column="10">helper_user<pos:position pos:line="72" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="23">helper_proto<pos:position pos:line="72" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="37">helper_domain<pos:position pos:line="72" pos:column="50"/></name></expr></argument>,
         <argument><expr><ternary><condition><expr><operator pos:line="73" pos:column="10">(<pos:position pos:line="73" pos:column="11"/></operator><name pos:line="73" pos:column="11">use_cached_creds<pos:position pos:line="73" pos:column="27"/></name><operator pos:line="73" pos:column="27">)<pos:position pos:line="73" pos:column="28"/></operator></expr> ?<pos:position pos:line="73" pos:column="30"/></condition><then pos:line="73" pos:column="30"> <expr><literal type="string" pos:line="73" pos:column="31">"yes"<pos:position pos:line="73" pos:column="36"/></literal></expr> <pos:position pos:line="73" pos:column="37"/></then><else pos:line="73" pos:column="37">: <expr><literal type="string" pos:line="73" pos:column="39">"no"<pos:position pos:line="73" pos:column="43"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="73" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="45"/></expr_stmt>

  <expr_stmt><expr><name pos:line="75" pos:column="3">env<pos:position pos:line="75" pos:column="6"/></name> <operator pos:line="75" pos:column="7">=<pos:position pos:line="75" pos:column="8"/></operator> <call><name pos:line="75" pos:column="9">getenv<pos:position pos:line="75" pos:column="15"/></name><argument_list pos:line="75" pos:column="15">(<argument><expr><literal type="string" pos:line="75" pos:column="16">"CURL_NTLM_AUTH_SRCDIR"<pos:position pos:line="75" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="41"/></expr_stmt>
  <if pos:line="76" pos:column="3">if<condition pos:line="76" pos:column="5">(<expr><name pos:line="76" pos:column="6">env<pos:position pos:line="76" pos:column="9"/></name></expr>)<pos:position pos:line="76" pos:column="10"/></condition><then pos:line="76" pos:column="10"> <block pos:line="76" pos:column="11">{
    <expr_stmt><expr><name pos:line="77" pos:column="5">path<pos:position pos:line="77" pos:column="9"/></name> <operator pos:line="77" pos:column="10">=<pos:position pos:line="77" pos:column="11"/></operator> <name pos:line="77" pos:column="12">env<pos:position pos:line="77" pos:column="15"/></name></expr>;<pos:position pos:line="77" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="78" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="80" pos:column="3">filename<pos:position pos:line="80" pos:column="11"/></name> <operator pos:line="80" pos:column="12">=<pos:position pos:line="80" pos:column="13"/></operator> <call><name pos:line="80" pos:column="14">test2file<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">testnum<pos:position pos:line="80" pos:column="31"/></name></expr></argument>)<pos:position pos:line="80" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="81" pos:column="3">stream<pos:position pos:line="81" pos:column="9"/></name> <operator pos:line="81" pos:column="10">=<pos:position pos:line="81" pos:column="11"/></operator> <call><name pos:line="81" pos:column="12">fopen<pos:position pos:line="81" pos:column="17"/></name><argument_list pos:line="81" pos:column="17">(<argument><expr><name pos:line="81" pos:column="18">filename<pos:position pos:line="81" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="28">"rb"<pos:position pos:line="81" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="34"/></expr_stmt>
  <if pos:line="82" pos:column="3">if<condition pos:line="82" pos:column="5">(<expr><operator pos:line="82" pos:column="6">!<pos:position pos:line="82" pos:column="7"/></operator><name pos:line="82" pos:column="7">stream<pos:position pos:line="82" pos:column="13"/></name></expr>)<pos:position pos:line="82" pos:column="14"/></condition><then pos:line="82" pos:column="14"> <block pos:line="82" pos:column="15">{
    <expr_stmt><expr><name pos:line="83" pos:column="5">error<pos:position pos:line="83" pos:column="10"/></name> <operator pos:line="83" pos:column="11">=<pos:position pos:line="83" pos:column="12"/></operator> <name pos:line="83" pos:column="13">errno<pos:position pos:line="83" pos:column="18"/></name></expr>;<pos:position pos:line="83" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">logmsg<pos:position pos:line="84" pos:column="11"/></name><argument_list pos:line="84" pos:column="11">(<argument><expr><literal type="string" pos:line="84" pos:column="12">"fopen() failed with error: %d %s"<pos:position pos:line="84" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="48">error<pos:position pos:line="84" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="84" pos:column="55">strerror<pos:position pos:line="84" pos:column="63"/></name><argument_list pos:line="84" pos:column="63">(<argument><expr><name pos:line="84" pos:column="64">error<pos:position pos:line="84" pos:column="69"/></name></expr></argument>)<pos:position pos:line="84" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="84" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">logmsg<pos:position pos:line="85" pos:column="11"/></name><argument_list pos:line="85" pos:column="11">(<argument><expr><literal type="string" pos:line="85" pos:column="12">"Error opening file: %s"<pos:position pos:line="85" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="38">filename<pos:position pos:line="85" pos:column="46"/></name></expr></argument>)<pos:position pos:line="85" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">logmsg<pos:position pos:line="86" pos:column="11"/></name><argument_list pos:line="86" pos:column="11">(<argument><expr><literal type="string" pos:line="86" pos:column="12">"Couldn't open test file %ld"<pos:position pos:line="86" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="43">testnum<pos:position pos:line="86" pos:column="50"/></name></expr></argument>)<pos:position pos:line="86" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">exit<pos:position pos:line="87" pos:column="9"/></name><argument_list pos:line="87" pos:column="9">(<argument><expr><literal type="number" pos:line="87" pos:column="10">1<pos:position pos:line="87" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="88" pos:column="4"/></block></then>
  <else pos:line="89" pos:column="3">else <block pos:line="89" pos:column="8">{
    <comment type="block" pos:line="90" pos:column="5">/* get the ntlm_auth input/output */</comment>
    <expr_stmt><expr><name pos:line="91" pos:column="5">error<pos:position pos:line="91" pos:column="10"/></name> <operator pos:line="91" pos:column="11">=<pos:position pos:line="91" pos:column="12"/></operator> <call><name pos:line="91" pos:column="13">getpart<pos:position pos:line="91" pos:column="20"/></name><argument_list pos:line="91" pos:column="20">(<argument><expr><operator pos:line="91" pos:column="21">&amp;<pos:position pos:line="91" pos:column="26"/></operator><name pos:line="91" pos:column="22">type1_input<pos:position pos:line="91" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="35">&amp;<pos:position pos:line="91" pos:column="40"/></operator><name pos:line="91" pos:column="36">size<pos:position pos:line="91" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="42">"ntlm_auth_type1"<pos:position pos:line="91" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="61">"input"<pos:position pos:line="91" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="70">stream<pos:position pos:line="91" pos:column="76"/></name></expr></argument>)<pos:position pos:line="91" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">fclose<pos:position pos:line="92" pos:column="11"/></name><argument_list pos:line="92" pos:column="11">(<argument><expr><name pos:line="92" pos:column="12">stream<pos:position pos:line="92" pos:column="18"/></name></expr></argument>)<pos:position pos:line="92" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="20"/></expr_stmt>
    <if pos:line="93" pos:column="5">if<condition pos:line="93" pos:column="7">(<expr><name pos:line="93" pos:column="8">error<pos:position pos:line="93" pos:column="13"/></name> <operator pos:line="93" pos:column="14">||<pos:position pos:line="93" pos:column="16"/></operator> <name pos:line="93" pos:column="17">size<pos:position pos:line="93" pos:column="21"/></name> <operator pos:line="93" pos:column="22">==<pos:position pos:line="93" pos:column="24"/></operator> <literal type="number" pos:line="93" pos:column="25">0<pos:position pos:line="93" pos:column="26"/></literal></expr>)<pos:position pos:line="93" pos:column="27"/></condition><then pos:line="93" pos:column="27"> <block pos:line="93" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="94" pos:column="7">logmsg<pos:position pos:line="94" pos:column="13"/></name><argument_list pos:line="94" pos:column="13">(<argument><expr><literal type="string" pos:line="94" pos:column="14">"getpart() type 1 input failed with error: %d"<pos:position pos:line="94" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="62">error<pos:position pos:line="94" pos:column="67"/></name></expr></argument>)<pos:position pos:line="94" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="69"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="95" pos:column="7">exit<pos:position pos:line="95" pos:column="11"/></name><argument_list pos:line="95" pos:column="11">(<argument><expr><literal type="number" pos:line="95" pos:column="12">1<pos:position pos:line="95" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>
  }<pos:position pos:line="97" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="99" pos:column="3">stream<pos:position pos:line="99" pos:column="9"/></name> <operator pos:line="99" pos:column="10">=<pos:position pos:line="99" pos:column="11"/></operator> <call><name pos:line="99" pos:column="12">fopen<pos:position pos:line="99" pos:column="17"/></name><argument_list pos:line="99" pos:column="17">(<argument><expr><name pos:line="99" pos:column="18">filename<pos:position pos:line="99" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="28">"rb"<pos:position pos:line="99" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="34"/></expr_stmt>
  <if pos:line="100" pos:column="3">if<condition pos:line="100" pos:column="5">(<expr><operator pos:line="100" pos:column="6">!<pos:position pos:line="100" pos:column="7"/></operator><name pos:line="100" pos:column="7">stream<pos:position pos:line="100" pos:column="13"/></name></expr>)<pos:position pos:line="100" pos:column="14"/></condition><then pos:line="100" pos:column="14"> <block pos:line="100" pos:column="15">{
    <expr_stmt><expr><name pos:line="101" pos:column="5">error<pos:position pos:line="101" pos:column="10"/></name> <operator pos:line="101" pos:column="11">=<pos:position pos:line="101" pos:column="12"/></operator> <name pos:line="101" pos:column="13">errno<pos:position pos:line="101" pos:column="18"/></name></expr>;<pos:position pos:line="101" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">logmsg<pos:position pos:line="102" pos:column="11"/></name><argument_list pos:line="102" pos:column="11">(<argument><expr><literal type="string" pos:line="102" pos:column="12">"fopen() failed with error: %d %s"<pos:position pos:line="102" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="48">error<pos:position pos:line="102" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="102" pos:column="55">strerror<pos:position pos:line="102" pos:column="63"/></name><argument_list pos:line="102" pos:column="63">(<argument><expr><name pos:line="102" pos:column="64">error<pos:position pos:line="102" pos:column="69"/></name></expr></argument>)<pos:position pos:line="102" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="102" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">logmsg<pos:position pos:line="103" pos:column="11"/></name><argument_list pos:line="103" pos:column="11">(<argument><expr><literal type="string" pos:line="103" pos:column="12">"Error opening file: %s"<pos:position pos:line="103" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="38">filename<pos:position pos:line="103" pos:column="46"/></name></expr></argument>)<pos:position pos:line="103" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">logmsg<pos:position pos:line="104" pos:column="11"/></name><argument_list pos:line="104" pos:column="11">(<argument><expr><literal type="string" pos:line="104" pos:column="12">"Couldn't open test file %ld"<pos:position pos:line="104" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="43">testnum<pos:position pos:line="104" pos:column="50"/></name></expr></argument>)<pos:position pos:line="104" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="105" pos:column="5">exit<pos:position pos:line="105" pos:column="9"/></name><argument_list pos:line="105" pos:column="9">(<argument><expr><literal type="number" pos:line="105" pos:column="10">1<pos:position pos:line="105" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="106" pos:column="4"/></block></then>
  <else pos:line="107" pos:column="3">else <block pos:line="107" pos:column="8">{
    <expr_stmt><expr><name pos:line="108" pos:column="5">size<pos:position pos:line="108" pos:column="9"/></name> <operator pos:line="108" pos:column="10">=<pos:position pos:line="108" pos:column="11"/></operator> <literal type="number" pos:line="108" pos:column="12">0<pos:position pos:line="108" pos:column="13"/></literal></expr>;<pos:position pos:line="108" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="109" pos:column="5">error<pos:position pos:line="109" pos:column="10"/></name> <operator pos:line="109" pos:column="11">=<pos:position pos:line="109" pos:column="12"/></operator> <call><name pos:line="109" pos:column="13">getpart<pos:position pos:line="109" pos:column="20"/></name><argument_list pos:line="109" pos:column="20">(<argument><expr><operator pos:line="109" pos:column="21">&amp;<pos:position pos:line="109" pos:column="26"/></operator><name pos:line="109" pos:column="22">type3_input<pos:position pos:line="109" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="35">&amp;<pos:position pos:line="109" pos:column="40"/></operator><name pos:line="109" pos:column="36">size<pos:position pos:line="109" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="42">"ntlm_auth_type3"<pos:position pos:line="109" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="61">"input"<pos:position pos:line="109" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="70">stream<pos:position pos:line="109" pos:column="76"/></name></expr></argument>)<pos:position pos:line="109" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="110" pos:column="5">fclose<pos:position pos:line="110" pos:column="11"/></name><argument_list pos:line="110" pos:column="11">(<argument><expr><name pos:line="110" pos:column="12">stream<pos:position pos:line="110" pos:column="18"/></name></expr></argument>)<pos:position pos:line="110" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="20"/></expr_stmt>
    <if pos:line="111" pos:column="5">if<condition pos:line="111" pos:column="7">(<expr><name pos:line="111" pos:column="8">error<pos:position pos:line="111" pos:column="13"/></name> <operator pos:line="111" pos:column="14">||<pos:position pos:line="111" pos:column="16"/></operator> <name pos:line="111" pos:column="17">size<pos:position pos:line="111" pos:column="21"/></name> <operator pos:line="111" pos:column="22">==<pos:position pos:line="111" pos:column="24"/></operator> <literal type="number" pos:line="111" pos:column="25">0<pos:position pos:line="111" pos:column="26"/></literal></expr>)<pos:position pos:line="111" pos:column="27"/></condition><then pos:line="111" pos:column="27"> <block pos:line="111" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="112" pos:column="7">logmsg<pos:position pos:line="112" pos:column="13"/></name><argument_list pos:line="112" pos:column="13">(<argument><expr><literal type="string" pos:line="112" pos:column="14">"getpart() type 3 input failed with error: %d"<pos:position pos:line="112" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="62">error<pos:position pos:line="112" pos:column="67"/></name></expr></argument>)<pos:position pos:line="112" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="69"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="113" pos:column="7">exit<pos:position pos:line="113" pos:column="11"/></name><argument_list pos:line="113" pos:column="11">(<argument><expr><literal type="number" pos:line="113" pos:column="12">1<pos:position pos:line="113" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="114" pos:column="6"/></block></then></if>
  }<pos:position pos:line="115" pos:column="4"/></block></else></if>

  <while pos:line="117" pos:column="3">while<condition pos:line="117" pos:column="8">(<expr><call><name pos:line="117" pos:column="9">fgets<pos:position pos:line="117" pos:column="14"/></name><argument_list pos:line="117" pos:column="14">(<argument><expr><name pos:line="117" pos:column="15">buf<pos:position pos:line="117" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="117" pos:column="20">sizeof<argument_list pos:line="117" pos:column="26">(<argument><expr><name pos:line="117" pos:column="27">buf<pos:position pos:line="117" pos:column="30"/></name></expr></argument>)<pos:position pos:line="117" pos:column="31"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="117" pos:column="33">stdin<pos:position pos:line="117" pos:column="38"/></name></expr></argument>)<pos:position pos:line="117" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="40"/></condition> <block pos:line="117" pos:column="41">{
    <if pos:line="118" pos:column="5">if<condition pos:line="118" pos:column="7">(<expr><call><name pos:line="118" pos:column="8">strcmp<pos:position pos:line="118" pos:column="14"/></name><argument_list pos:line="118" pos:column="14">(<argument><expr><name pos:line="118" pos:column="15">buf<pos:position pos:line="118" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="20">type1_input<pos:position pos:line="118" pos:column="31"/></name></expr></argument>)<pos:position pos:line="118" pos:column="32"/></argument_list></call> <operator pos:line="118" pos:column="33">==<pos:position pos:line="118" pos:column="35"/></operator> <literal type="number" pos:line="118" pos:column="36">0<pos:position pos:line="118" pos:column="37"/></literal></expr>)<pos:position pos:line="118" pos:column="38"/></condition><then pos:line="118" pos:column="38"> <block pos:line="118" pos:column="39">{
      <expr_stmt><expr><name pos:line="119" pos:column="7">stream<pos:position pos:line="119" pos:column="13"/></name> <operator pos:line="119" pos:column="14">=<pos:position pos:line="119" pos:column="15"/></operator> <call><name pos:line="119" pos:column="16">fopen<pos:position pos:line="119" pos:column="21"/></name><argument_list pos:line="119" pos:column="21">(<argument><expr><name pos:line="119" pos:column="22">filename<pos:position pos:line="119" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="32">"rb"<pos:position pos:line="119" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="38"/></expr_stmt>
      <if pos:line="120" pos:column="7">if<condition pos:line="120" pos:column="9">(<expr><operator pos:line="120" pos:column="10">!<pos:position pos:line="120" pos:column="11"/></operator><name pos:line="120" pos:column="11">stream<pos:position pos:line="120" pos:column="17"/></name></expr>)<pos:position pos:line="120" pos:column="18"/></condition><then pos:line="120" pos:column="18"> <block pos:line="120" pos:column="19">{
        <expr_stmt><expr><name pos:line="121" pos:column="9">error<pos:position pos:line="121" pos:column="14"/></name> <operator pos:line="121" pos:column="15">=<pos:position pos:line="121" pos:column="16"/></operator> <name pos:line="121" pos:column="17">errno<pos:position pos:line="121" pos:column="22"/></name></expr>;<pos:position pos:line="121" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="122" pos:column="9">logmsg<pos:position pos:line="122" pos:column="15"/></name><argument_list pos:line="122" pos:column="15">(<argument><expr><literal type="string" pos:line="122" pos:column="16">"fopen() failed with error: %d %s"<pos:position pos:line="122" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="52">error<pos:position pos:line="122" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="122" pos:column="59">strerror<pos:position pos:line="122" pos:column="67"/></name><argument_list pos:line="122" pos:column="67">(<argument><expr><name pos:line="122" pos:column="68">error<pos:position pos:line="122" pos:column="73"/></name></expr></argument>)<pos:position pos:line="122" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="122" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">logmsg<pos:position pos:line="123" pos:column="15"/></name><argument_list pos:line="123" pos:column="15">(<argument><expr><literal type="string" pos:line="123" pos:column="16">"Error opening file: %s"<pos:position pos:line="123" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="42">filename<pos:position pos:line="123" pos:column="50"/></name></expr></argument>)<pos:position pos:line="123" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="124" pos:column="9">logmsg<pos:position pos:line="124" pos:column="15"/></name><argument_list pos:line="124" pos:column="15">(<argument><expr><literal type="string" pos:line="124" pos:column="16">"Couldn't open test file %ld"<pos:position pos:line="124" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="124" pos:column="47">testnum<pos:position pos:line="124" pos:column="54"/></name></expr></argument>)<pos:position pos:line="124" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="125" pos:column="9">exit<pos:position pos:line="125" pos:column="13"/></name><argument_list pos:line="125" pos:column="13">(<argument><expr><literal type="number" pos:line="125" pos:column="14">1<pos:position pos:line="125" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="17"/></expr_stmt>
      }<pos:position pos:line="126" pos:column="8"/></block></then>
      <else pos:line="127" pos:column="7">else <block pos:line="127" pos:column="12">{
        <expr_stmt><expr><name pos:line="128" pos:column="9">size<pos:position pos:line="128" pos:column="13"/></name> <operator pos:line="128" pos:column="14">=<pos:position pos:line="128" pos:column="15"/></operator> <literal type="number" pos:line="128" pos:column="16">0<pos:position pos:line="128" pos:column="17"/></literal></expr>;<pos:position pos:line="128" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="129" pos:column="9">error<pos:position pos:line="129" pos:column="14"/></name> <operator pos:line="129" pos:column="15">=<pos:position pos:line="129" pos:column="16"/></operator> <call><name pos:line="129" pos:column="17">getpart<pos:position pos:line="129" pos:column="24"/></name><argument_list pos:line="129" pos:column="24">(<argument><expr><operator pos:line="129" pos:column="25">&amp;<pos:position pos:line="129" pos:column="30"/></operator><name pos:line="129" pos:column="26">type1_output<pos:position pos:line="129" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="129" pos:column="40">&amp;<pos:position pos:line="129" pos:column="45"/></operator><name pos:line="129" pos:column="41">size<pos:position pos:line="129" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="129" pos:column="47">"ntlm_auth_type1"<pos:position pos:line="129" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="129" pos:column="66">"output"<pos:position pos:line="129" pos:column="74"/></literal></expr></argument>,
                        <argument><expr><name pos:line="130" pos:column="25">stream<pos:position pos:line="130" pos:column="31"/></name></expr></argument>)<pos:position pos:line="130" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="131" pos:column="9">fclose<pos:position pos:line="131" pos:column="15"/></name><argument_list pos:line="131" pos:column="15">(<argument><expr><name pos:line="131" pos:column="16">stream<pos:position pos:line="131" pos:column="22"/></name></expr></argument>)<pos:position pos:line="131" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="24"/></expr_stmt>
        <if pos:line="132" pos:column="9">if<condition pos:line="132" pos:column="11">(<expr><name pos:line="132" pos:column="12">error<pos:position pos:line="132" pos:column="17"/></name> <operator pos:line="132" pos:column="18">||<pos:position pos:line="132" pos:column="20"/></operator> <name pos:line="132" pos:column="21">size<pos:position pos:line="132" pos:column="25"/></name> <operator pos:line="132" pos:column="26">==<pos:position pos:line="132" pos:column="28"/></operator> <literal type="number" pos:line="132" pos:column="29">0<pos:position pos:line="132" pos:column="30"/></literal></expr>)<pos:position pos:line="132" pos:column="31"/></condition><then pos:line="132" pos:column="31"> <block pos:line="132" pos:column="32">{
          <expr_stmt><expr><call><name pos:line="133" pos:column="11">logmsg<pos:position pos:line="133" pos:column="17"/></name><argument_list pos:line="133" pos:column="17">(<argument><expr><literal type="string" pos:line="133" pos:column="18">"getpart() type 1 output failed with error: %d"<pos:position pos:line="133" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="67">error<pos:position pos:line="133" pos:column="72"/></name></expr></argument>)<pos:position pos:line="133" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="74"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="134" pos:column="11">exit<pos:position pos:line="134" pos:column="15"/></name><argument_list pos:line="134" pos:column="15">(<argument><expr><literal type="number" pos:line="134" pos:column="16">1<pos:position pos:line="134" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="134" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="135" pos:column="10"/></block></then></if>
      }<pos:position pos:line="136" pos:column="8"/></block></else></if>
      <expr_stmt><expr><call><name pos:line="137" pos:column="7">printf<pos:position pos:line="137" pos:column="13"/></name><argument_list pos:line="137" pos:column="13">(<argument><expr><literal type="string" pos:line="137" pos:column="14">"%s"<pos:position pos:line="137" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="137" pos:column="20">type1_output<pos:position pos:line="137" pos:column="32"/></name></expr></argument>)<pos:position pos:line="137" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="138" pos:column="7">fflush<pos:position pos:line="138" pos:column="13"/></name><argument_list pos:line="138" pos:column="13">(<argument><expr><name pos:line="138" pos:column="14">stdout<pos:position pos:line="138" pos:column="20"/></name></expr></argument>)<pos:position pos:line="138" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="139" pos:column="6"/></block></then>
    <elseif pos:line="140" pos:column="5">else <if pos:line="140" pos:column="10">if<condition pos:line="140" pos:column="12">(<expr><call><name pos:line="140" pos:column="13">strncmp<pos:position pos:line="140" pos:column="20"/></name><argument_list pos:line="140" pos:column="20">(<argument><expr><name pos:line="140" pos:column="21">buf<pos:position pos:line="140" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="26">type3_input<pos:position pos:line="140" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="140" pos:column="39">strlen<pos:position pos:line="140" pos:column="45"/></name><argument_list pos:line="140" pos:column="45">(<argument><expr><name pos:line="140" pos:column="46">type3_input<pos:position pos:line="140" pos:column="57"/></name></expr></argument>)<pos:position pos:line="140" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="140" pos:column="59"/></argument_list></call> <operator pos:line="140" pos:column="60">==<pos:position pos:line="140" pos:column="62"/></operator> <literal type="number" pos:line="140" pos:column="63">0<pos:position pos:line="140" pos:column="64"/></literal></expr>)<pos:position pos:line="140" pos:column="65"/></condition><then pos:line="140" pos:column="65"> <block pos:line="140" pos:column="66">{
      <expr_stmt><expr><name pos:line="141" pos:column="7">stream<pos:position pos:line="141" pos:column="13"/></name> <operator pos:line="141" pos:column="14">=<pos:position pos:line="141" pos:column="15"/></operator> <call><name pos:line="141" pos:column="16">fopen<pos:position pos:line="141" pos:column="21"/></name><argument_list pos:line="141" pos:column="21">(<argument><expr><name pos:line="141" pos:column="22">filename<pos:position pos:line="141" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="32">"rb"<pos:position pos:line="141" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="38"/></expr_stmt>
      <if pos:line="142" pos:column="7">if<condition pos:line="142" pos:column="9">(<expr><operator pos:line="142" pos:column="10">!<pos:position pos:line="142" pos:column="11"/></operator><name pos:line="142" pos:column="11">stream<pos:position pos:line="142" pos:column="17"/></name></expr>)<pos:position pos:line="142" pos:column="18"/></condition><then pos:line="142" pos:column="18"> <block pos:line="142" pos:column="19">{
        <expr_stmt><expr><name pos:line="143" pos:column="9">error<pos:position pos:line="143" pos:column="14"/></name> <operator pos:line="143" pos:column="15">=<pos:position pos:line="143" pos:column="16"/></operator> <name pos:line="143" pos:column="17">errno<pos:position pos:line="143" pos:column="22"/></name></expr>;<pos:position pos:line="143" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="144" pos:column="9">logmsg<pos:position pos:line="144" pos:column="15"/></name><argument_list pos:line="144" pos:column="15">(<argument><expr><literal type="string" pos:line="144" pos:column="16">"fopen() failed with error: %d %s"<pos:position pos:line="144" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="144" pos:column="52">error<pos:position pos:line="144" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="144" pos:column="59">strerror<pos:position pos:line="144" pos:column="67"/></name><argument_list pos:line="144" pos:column="67">(<argument><expr><name pos:line="144" pos:column="68">error<pos:position pos:line="144" pos:column="73"/></name></expr></argument>)<pos:position pos:line="144" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="144" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="145" pos:column="9">logmsg<pos:position pos:line="145" pos:column="15"/></name><argument_list pos:line="145" pos:column="15">(<argument><expr><literal type="string" pos:line="145" pos:column="16">"Error opening file: %s"<pos:position pos:line="145" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="42">filename<pos:position pos:line="145" pos:column="50"/></name></expr></argument>)<pos:position pos:line="145" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">logmsg<pos:position pos:line="146" pos:column="15"/></name><argument_list pos:line="146" pos:column="15">(<argument><expr><literal type="string" pos:line="146" pos:column="16">"Couldn't open test file %ld"<pos:position pos:line="146" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="47">testnum<pos:position pos:line="146" pos:column="54"/></name></expr></argument>)<pos:position pos:line="146" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="147" pos:column="9">exit<pos:position pos:line="147" pos:column="13"/></name><argument_list pos:line="147" pos:column="13">(<argument><expr><literal type="number" pos:line="147" pos:column="14">1<pos:position pos:line="147" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="17"/></expr_stmt>
      }<pos:position pos:line="148" pos:column="8"/></block></then>
      <else pos:line="149" pos:column="7">else <block pos:line="149" pos:column="12">{
        <expr_stmt><expr><name pos:line="150" pos:column="9">size<pos:position pos:line="150" pos:column="13"/></name> <operator pos:line="150" pos:column="14">=<pos:position pos:line="150" pos:column="15"/></operator> <literal type="number" pos:line="150" pos:column="16">0<pos:position pos:line="150" pos:column="17"/></literal></expr>;<pos:position pos:line="150" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="151" pos:column="9">error<pos:position pos:line="151" pos:column="14"/></name> <operator pos:line="151" pos:column="15">=<pos:position pos:line="151" pos:column="16"/></operator> <call><name pos:line="151" pos:column="17">getpart<pos:position pos:line="151" pos:column="24"/></name><argument_list pos:line="151" pos:column="24">(<argument><expr><operator pos:line="151" pos:column="25">&amp;<pos:position pos:line="151" pos:column="30"/></operator><name pos:line="151" pos:column="26">type3_output<pos:position pos:line="151" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="151" pos:column="40">&amp;<pos:position pos:line="151" pos:column="45"/></operator><name pos:line="151" pos:column="41">size<pos:position pos:line="151" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="151" pos:column="47">"ntlm_auth_type3"<pos:position pos:line="151" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="151" pos:column="66">"output"<pos:position pos:line="151" pos:column="74"/></literal></expr></argument>,
                        <argument><expr><name pos:line="152" pos:column="25">stream<pos:position pos:line="152" pos:column="31"/></name></expr></argument>)<pos:position pos:line="152" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="153" pos:column="9">fclose<pos:position pos:line="153" pos:column="15"/></name><argument_list pos:line="153" pos:column="15">(<argument><expr><name pos:line="153" pos:column="16">stream<pos:position pos:line="153" pos:column="22"/></name></expr></argument>)<pos:position pos:line="153" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="24"/></expr_stmt>
        <if pos:line="154" pos:column="9">if<condition pos:line="154" pos:column="11">(<expr><name pos:line="154" pos:column="12">error<pos:position pos:line="154" pos:column="17"/></name> <operator pos:line="154" pos:column="18">||<pos:position pos:line="154" pos:column="20"/></operator> <name pos:line="154" pos:column="21">size<pos:position pos:line="154" pos:column="25"/></name> <operator pos:line="154" pos:column="26">==<pos:position pos:line="154" pos:column="28"/></operator> <literal type="number" pos:line="154" pos:column="29">0<pos:position pos:line="154" pos:column="30"/></literal></expr>)<pos:position pos:line="154" pos:column="31"/></condition><then pos:line="154" pos:column="31"> <block pos:line="154" pos:column="32">{
          <expr_stmt><expr><call><name pos:line="155" pos:column="11">logmsg<pos:position pos:line="155" pos:column="17"/></name><argument_list pos:line="155" pos:column="17">(<argument><expr><literal type="string" pos:line="155" pos:column="18">"getpart() type 3 output failed with error: %d"<pos:position pos:line="155" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="67">error<pos:position pos:line="155" pos:column="72"/></name></expr></argument>)<pos:position pos:line="155" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="74"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="156" pos:column="11">exit<pos:position pos:line="156" pos:column="15"/></name><argument_list pos:line="156" pos:column="15">(<argument><expr><literal type="number" pos:line="156" pos:column="16">1<pos:position pos:line="156" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="157" pos:column="10"/></block></then></if>
      }<pos:position pos:line="158" pos:column="8"/></block></else></if>
      <expr_stmt><expr><call><name pos:line="159" pos:column="7">printf<pos:position pos:line="159" pos:column="13"/></name><argument_list pos:line="159" pos:column="13">(<argument><expr><literal type="string" pos:line="159" pos:column="14">"%s"<pos:position pos:line="159" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="159" pos:column="20">type3_output<pos:position pos:line="159" pos:column="32"/></name></expr></argument>)<pos:position pos:line="159" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="160" pos:column="7">fflush<pos:position pos:line="160" pos:column="13"/></name><argument_list pos:line="160" pos:column="13">(<argument><expr><name pos:line="160" pos:column="14">stdout<pos:position pos:line="160" pos:column="20"/></name></expr></argument>)<pos:position pos:line="160" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="161" pos:column="6"/></block></then></if></elseif>
    <else pos:line="162" pos:column="5">else <block pos:line="162" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="163" pos:column="7">printf<pos:position pos:line="163" pos:column="13"/></name><argument_list pos:line="163" pos:column="13">(<argument><expr><literal type="string" pos:line="163" pos:column="14">"Unknown request\n"<pos:position pos:line="163" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="163" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="164" pos:column="7">msgbuf<pos:position pos:line="164" pos:column="13"/></name> <operator pos:line="164" pos:column="14">=<pos:position pos:line="164" pos:column="15"/></operator> <call><name pos:line="164" pos:column="16">printable<pos:position pos:line="164" pos:column="25"/></name><argument_list pos:line="164" pos:column="25">(<argument><expr><name pos:line="164" pos:column="26">buf<pos:position pos:line="164" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="164" pos:column="31">0<pos:position pos:line="164" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="34"/></expr_stmt>
      <if pos:line="165" pos:column="7">if<condition pos:line="165" pos:column="9">(<expr><name pos:line="165" pos:column="10">msgbuf<pos:position pos:line="165" pos:column="16"/></name></expr>)<pos:position pos:line="165" pos:column="17"/></condition><then pos:line="165" pos:column="17"> <block pos:line="165" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="166" pos:column="9">logmsg<pos:position pos:line="166" pos:column="15"/></name><argument_list pos:line="166" pos:column="15">(<argument><expr><literal type="string" pos:line="166" pos:column="16">"invalid input: '%s'\n"<pos:position pos:line="166" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="41">msgbuf<pos:position pos:line="166" pos:column="47"/></name></expr></argument>)<pos:position pos:line="166" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="167" pos:column="9">free<pos:position pos:line="167" pos:column="13"/></name><argument_list pos:line="167" pos:column="13">(<argument><expr><name pos:line="167" pos:column="14">msgbuf<pos:position pos:line="167" pos:column="20"/></name></expr></argument>)<pos:position pos:line="167" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="22"/></expr_stmt>
      }<pos:position pos:line="168" pos:column="8"/></block></then>
      <else pos:line="169" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="170" pos:column="9">logmsg<pos:position pos:line="170" pos:column="15"/></name><argument_list pos:line="170" pos:column="15">(<argument><expr><literal type="string" pos:line="170" pos:column="16">"OOM formatting invalid input: '%s'\n"<pos:position pos:line="170" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="170" pos:column="56">buf<pos:position pos:line="170" pos:column="59"/></name></expr></argument>)<pos:position pos:line="170" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="61"/></expr_stmt></block></else></if>
      <expr_stmt><expr><call><name pos:line="171" pos:column="7">exit<pos:position pos:line="171" pos:column="11"/></name><argument_list pos:line="171" pos:column="11">(<argument><expr><literal type="number" pos:line="171" pos:column="12">1<pos:position pos:line="171" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="171" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="172" pos:column="6"/></block></else></if>
  }<pos:position pos:line="173" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="174" pos:column="3">logmsg<pos:position pos:line="174" pos:column="9"/></name><argument_list pos:line="174" pos:column="9">(<argument><expr><literal type="string" pos:line="174" pos:column="10">"Exit"<pos:position pos:line="174" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="18"/></expr_stmt>
  <return pos:line="175" pos:column="3">return <expr><literal type="number" pos:line="175" pos:column="10">1<pos:position pos:line="175" pos:column="11"/></literal></expr>;<pos:position pos:line="175" pos:column="12"/></return>
}<pos:position pos:line="176" pos:column="2"/></block></function></unit>
