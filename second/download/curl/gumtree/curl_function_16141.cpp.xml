<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_16141.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ossl_keylog_callback<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">SSL<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">ssl<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">line<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><operator pos:line="3" pos:column="3">(<pos:position pos:line="3" pos:column="4"/></operator><name pos:line="3" pos:column="4">void<pos:position pos:line="3" pos:column="8"/></name><operator pos:line="3" pos:column="8">)<pos:position pos:line="3" pos:column="9"/></operator><name pos:line="3" pos:column="9">ssl<pos:position pos:line="3" pos:column="12"/></name></expr>;<pos:position pos:line="3" pos:column="13"/></expr_stmt>

  <comment type="block" pos:line="5" pos:column="3">/* Using fputs here instead of fprintf since libcurl's fprintf replacement
     may not be thread-safe. */</comment>
  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><name pos:line="7" pos:column="6">keylog_file_fp<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">&amp;&amp;<pos:position pos:line="7" pos:column="31"/></operator> <name pos:line="7" pos:column="24">line<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">&amp;&amp;<pos:position pos:line="7" pos:column="39"/></operator> <operator pos:line="7" pos:column="32">*<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">line<pos:position pos:line="7" pos:column="37"/></name></expr>)<pos:position pos:line="7" pos:column="38"/></condition><then pos:line="7" pos:column="38"> <block pos:line="7" pos:column="39">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">stackbuf<pos:position pos:line="8" pos:column="18"/></name><index pos:line="8" pos:column="18">[<expr><literal type="number" pos:line="8" pos:column="19">256<pos:position pos:line="8" pos:column="22"/></literal></expr>]<pos:position pos:line="8" pos:column="23"/></index></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">buf<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">size_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">linelen<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><call><name pos:line="10" pos:column="22">strlen<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">line<pos:position pos:line="10" pos:column="33"/></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>

    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">(<expr><name pos:line="12" pos:column="8">linelen<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">&lt;=<pos:position pos:line="12" pos:column="21"/></operator> <sizeof pos:line="12" pos:column="19">sizeof<argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">stackbuf<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></sizeof> <operator pos:line="12" pos:column="36">-<pos:position pos:line="12" pos:column="37"/></operator> <literal type="number" pos:line="12" pos:column="38">2<pos:position pos:line="12" pos:column="39"/></literal></expr>)<pos:position pos:line="12" pos:column="40"/></condition><then pos:line="12" pos:column="40">
      <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="7">buf<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">stackbuf<pos:position pos:line="13" pos:column="21"/></name></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt></block></then>
    <else pos:line="14" pos:column="5">else <block pos:line="14" pos:column="10">{
      <expr_stmt><expr><name pos:line="15" pos:column="7">buf<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <call><name pos:line="15" pos:column="13">malloc<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">linelen<pos:position pos:line="15" pos:column="27"/></name> <operator pos:line="15" pos:column="28">+<pos:position pos:line="15" pos:column="29"/></operator> <literal type="number" pos:line="15" pos:column="30">2<pos:position pos:line="15" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
      <if pos:line="16" pos:column="7">if<condition pos:line="16" pos:column="9">(<expr><operator pos:line="16" pos:column="10">!<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">buf<pos:position pos:line="16" pos:column="14"/></name></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15">
        <block type="pseudo"><return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">strncpy<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><name pos:line="19" pos:column="13">buf<pos:position pos:line="19" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="18">line<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">linelen<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">buf<pos:position pos:line="20" pos:column="8"/></name><index pos:line="20" pos:column="8">[<expr><name pos:line="20" pos:column="9">linelen<pos:position pos:line="20" pos:column="16"/></name></expr>]<pos:position pos:line="20" pos:column="17"/></index></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <literal type="char" pos:line="20" pos:column="20">'\n'<pos:position pos:line="20" pos:column="24"/></literal></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">buf<pos:position pos:line="21" pos:column="8"/></name><index pos:line="21" pos:column="8">[<expr><name pos:line="21" pos:column="9">linelen<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">+<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="19">1<pos:position pos:line="21" pos:column="20"/></literal></expr>]<pos:position pos:line="21" pos:column="21"/></index></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <literal type="char" pos:line="21" pos:column="24">'\0'<pos:position pos:line="21" pos:column="28"/></literal></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">fputs<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><name pos:line="23" pos:column="11">buf<pos:position pos:line="23" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="16">keylog_file_fp<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
    <if pos:line="24" pos:column="5">if<condition pos:line="24" pos:column="7">(<expr><name pos:line="24" pos:column="8">buf<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">!=<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">stackbuf<pos:position pos:line="24" pos:column="23"/></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="7">free<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><name pos:line="25" pos:column="12">buf<pos:position pos:line="25" pos:column="15"/></name></expr></argument>)<pos:position pos:line="25" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt></block></then></if>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
