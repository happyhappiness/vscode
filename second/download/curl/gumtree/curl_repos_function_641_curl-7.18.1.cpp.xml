<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_641_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">blockread_all<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="52">/* connection data */</comment>
                         <parameter><decl><type><name pos:line="2" pos:column="26">curl_socket_t<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">sockfd<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>,     <comment type="block" pos:line="2" pos:column="52">/* read from this socket */</comment>
                         <parameter><decl><type><name pos:line="3" pos:column="26">char<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">buf<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>,                <comment type="block" pos:line="3" pos:column="52">/* store read data here */</comment>
                         <parameter><decl><type><name pos:line="4" pos:column="26">ssize_t<pos:position pos:line="4" pos:column="33"/></name></type> <name pos:line="4" pos:column="34">buffersize<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>,       <comment type="block" pos:line="4" pos:column="52">/* max amount to read */</comment>
                         <parameter><decl><type><name pos:line="5" pos:column="26">ssize_t<pos:position pos:line="5" pos:column="33"/></name> <modifier pos:line="5" pos:column="34">*<pos:position pos:line="5" pos:column="35"/></modifier></type><name pos:line="5" pos:column="35">n<pos:position pos:line="5" pos:column="36"/></name></decl></parameter>,               <comment type="block" pos:line="5" pos:column="52">/* amount bytes read */</comment>
                         <parameter><decl><type><name pos:line="6" pos:column="26">long<pos:position pos:line="6" pos:column="30"/></name></type> <name pos:line="6" pos:column="31">conn_timeout<pos:position pos:line="6" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="44"/></parameter_list>        <comment type="block" pos:line="6" pos:column="52">/* timeout for data wait
                                                      relative to
                                                      conn-&gt;created */</comment>
<block pos:line="9" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">ssize_t<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">nread<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">ssize_t<pos:position pos:line="11" pos:column="10"/></name></type> <name pos:line="11" pos:column="11">allread<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><literal type="number" pos:line="11" pos:column="21">0<pos:position pos:line="11" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">result<pos:position pos:line="12" pos:column="13"/></name></decl>;<pos:position pos:line="12" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">timeval<pos:position pos:line="13" pos:column="17"/></name></name></type> <name pos:line="13" pos:column="18">tvnow<pos:position pos:line="13" pos:column="23"/></name></decl>;<pos:position pos:line="13" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">long<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">conntime<pos:position pos:line="14" pos:column="16"/></name></decl>;<pos:position pos:line="14" pos:column="17"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="15" pos:column="3">*<pos:position pos:line="15" pos:column="4"/></operator><name pos:line="15" pos:column="4">n<pos:position pos:line="15" pos:column="5"/></name> <operator pos:line="15" pos:column="6">=<pos:position pos:line="15" pos:column="7"/></operator> <literal type="number" pos:line="15" pos:column="8">0<pos:position pos:line="15" pos:column="9"/></literal></expr>;<pos:position pos:line="15" pos:column="10"/></expr_stmt>
  <do pos:line="16" pos:column="3">do <block pos:line="16" pos:column="6">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">tvnow<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <call><name pos:line="17" pos:column="13">Curl_tvnow<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">()<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="18" pos:column="5">/* calculating how long connection is establishing */</comment>
    <expr_stmt><expr><name pos:line="19" pos:column="5">conntime<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">Curl_tvdiff<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">tvnow<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="35">conn<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">-&gt;<pos:position pos:line="19" pos:column="44"/></operator><name pos:line="19" pos:column="41">created<pos:position pos:line="19" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="50"/></expr_stmt>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">conntime<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">&gt;<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="19">conn_timeout<pos:position pos:line="20" pos:column="31"/></name></expr>)<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32"> <block pos:line="20" pos:column="33">{
      <comment type="block" pos:line="21" pos:column="7">/* we already got the timeout */</comment>
      <expr_stmt><expr><name pos:line="22" pos:column="7">result<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <operator pos:line="22" pos:column="16">~<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">CURLE_OK<pos:position pos:line="22" pos:column="25"/></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
      <break pos:line="23" pos:column="7">break;<pos:position pos:line="23" pos:column="13"/></break>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><call><name pos:line="25" pos:column="8">Curl_socket_ready<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">sockfd<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">CURL_SOCKET_BAD<pos:position pos:line="25" pos:column="49"/></name></expr></argument>,
                   <argument><expr><call pos:line="26" pos:column="20">(<name pos:line="26" pos:column="21">int<pos:position pos:line="26" pos:column="24"/></name>)<argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">conn_timeout<pos:position pos:line="26" pos:column="38"/></name> <operator pos:line="26" pos:column="39">-<pos:position pos:line="26" pos:column="40"/></operator> <name pos:line="26" pos:column="41">conntime<pos:position pos:line="26" pos:column="49"/></name></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call> <operator pos:line="26" pos:column="52">&lt;=<pos:position pos:line="26" pos:column="57"/></operator> <literal type="number" pos:line="26" pos:column="55">0<pos:position pos:line="26" pos:column="56"/></literal></expr>)<pos:position pos:line="26" pos:column="57"/></condition><then pos:line="26" pos:column="57"> <block pos:line="26" pos:column="58">{
      <expr_stmt><expr><name pos:line="27" pos:column="7">result<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <operator pos:line="27" pos:column="16">~<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">CURLE_OK<pos:position pos:line="27" pos:column="25"/></name></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
      <break pos:line="28" pos:column="7">break;<pos:position pos:line="28" pos:column="13"/></break>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="30" pos:column="5">result<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">Curl_read<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">conn<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">sockfd<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">buf<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">buffersize<pos:position pos:line="30" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="55">&amp;<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="56">nread<pos:position pos:line="30" pos:column="61"/></name></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="63"/></expr_stmt>
    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><name pos:line="31" pos:column="8">result<pos:position pos:line="31" pos:column="14"/></name></expr>)<pos:position pos:line="31" pos:column="15"/></condition><then pos:line="31" pos:column="15">
      <block type="pseudo"><break pos:line="32" pos:column="7">break;<pos:position pos:line="32" pos:column="13"/></break></block></then></if>

    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name pos:line="34" pos:column="8">buffersize<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">==<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">nread<pos:position pos:line="34" pos:column="27"/></name></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28"> <block pos:line="34" pos:column="29">{
      <expr_stmt><expr><name pos:line="35" pos:column="7">allread<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">+=<pos:position pos:line="35" pos:column="17"/></operator> <name pos:line="35" pos:column="18">nread<pos:position pos:line="35" pos:column="23"/></name></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="36" pos:column="7">*<pos:position pos:line="36" pos:column="8"/></operator><name pos:line="36" pos:column="8">n<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">=<pos:position pos:line="36" pos:column="11"/></operator> <name pos:line="36" pos:column="12">allread<pos:position pos:line="36" pos:column="19"/></name></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="37" pos:column="7">result<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">CURLE_OK<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
      <break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><operator pos:line="40" pos:column="8">!<pos:position pos:line="40" pos:column="9"/></operator><name pos:line="40" pos:column="9">nread<pos:position pos:line="40" pos:column="14"/></name></expr>)<pos:position pos:line="40" pos:column="15"/></condition><then pos:line="40" pos:column="15"> <block pos:line="40" pos:column="16">{
      <expr_stmt><expr><name pos:line="41" pos:column="7">result<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <operator pos:line="41" pos:column="16">~<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="17">CURLE_OK<pos:position pos:line="41" pos:column="25"/></name></expr>;<pos:position pos:line="41" pos:column="26"/></expr_stmt>
      <break pos:line="42" pos:column="7">break;<pos:position pos:line="42" pos:column="13"/></break>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="45" pos:column="5">buffersize<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">-=<pos:position pos:line="45" pos:column="18"/></operator> <name pos:line="45" pos:column="19">nread<pos:position pos:line="45" pos:column="24"/></name></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="46" pos:column="5">buf<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">+=<pos:position pos:line="46" pos:column="11"/></operator> <name pos:line="46" pos:column="12">nread<pos:position pos:line="46" pos:column="17"/></name></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="47" pos:column="5">allread<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">+=<pos:position pos:line="47" pos:column="15"/></operator> <name pos:line="47" pos:column="16">nread<pos:position pos:line="47" pos:column="21"/></name></expr>;<pos:position pos:line="47" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="48" pos:column="4"/></block> while<condition pos:line="48" pos:column="10">(<expr><literal type="number" pos:line="48" pos:column="11">1<pos:position pos:line="48" pos:column="12"/></literal></expr>)<pos:position pos:line="48" pos:column="13"/></condition>;<pos:position pos:line="48" pos:column="14"/></do>
  <return pos:line="49" pos:column="3">return <expr><name pos:line="49" pos:column="10">result<pos:position pos:line="49" pos:column="16"/></name></expr>;<pos:position pos:line="49" pos:column="17"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
