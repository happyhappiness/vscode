<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_763_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLMcode<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">curl_multi_add_handle<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">CURLM<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">multi_handle<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">CURL<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">easy_handle<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_multi<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">multi<pos:position pos:line="4" pos:column="27"/></name><init pos:line="4" pos:column="27">=<expr><operator pos:line="4" pos:column="28">(<pos:position pos:line="4" pos:column="29"/></operator>struct <name pos:line="4" pos:column="36">Curl_multi<pos:position pos:line="4" pos:column="46"/></name> <operator pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></operator><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">multi_handle<pos:position pos:line="4" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_one_easy<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">easy<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">closure<pos:position pos:line="6" pos:column="17"/></name></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">cl<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">closure<pos:position pos:line="7" pos:column="17"/></name></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">prev<pos:position pos:line="7" pos:column="23"/></name><init pos:line="7" pos:column="23">=<expr><name pos:line="7" pos:column="24">NULL<pos:position pos:line="7" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* First, make some basic checks that the CURLM handle is a good handle */</comment>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><call><name pos:line="10" pos:column="7">GOOD_MULTI_HANDLE<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">multi<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="32"/></condition><then pos:line="10" pos:column="32">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">CURLM_BAD_HANDLE<pos:position pos:line="11" pos:column="28"/></name></expr>;<pos:position pos:line="11" pos:column="29"/></return></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/* Verify that we got a somewhat good easy handle too */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">!<pos:position pos:line="14" pos:column="7"/></operator><call><name pos:line="14" pos:column="7">GOOD_EASY_HANDLE<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">easy_handle<pos:position pos:line="14" pos:column="35"/></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">CURLM_BAD_EASY_HANDLE<pos:position pos:line="15" pos:column="33"/></name></expr>;<pos:position pos:line="15" pos:column="34"/></return></block></then></if>

  <comment type="block" pos:line="17" pos:column="3">/* Prevent users to add the same handle more than once! */</comment>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><operator pos:line="18" pos:column="6">(<pos:position pos:line="18" pos:column="7"/></operator><operator pos:line="18" pos:column="7">(<pos:position pos:line="18" pos:column="8"/></operator>struct <name pos:line="18" pos:column="15">SessionHandle<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">*<pos:position pos:line="18" pos:column="30"/></operator><operator pos:line="18" pos:column="30">)<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">easy_handle<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">)<pos:position pos:line="18" pos:column="43"/></operator><operator pos:line="18" pos:column="43">-&gt;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="45">multi<pos:position pos:line="18" pos:column="50"/></name></expr>)<pos:position pos:line="18" pos:column="51"/></condition><then pos:line="18" pos:column="51">
    <comment type="block" pos:line="19" pos:column="5">/* possibly we should create a new unique error code for this condition */</comment>
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">CURLM_BAD_EASY_HANDLE<pos:position pos:line="20" pos:column="33"/></name></expr>;<pos:position pos:line="20" pos:column="34"/></return></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* Now, time to add an easy handle to the multi stack */</comment>
  <expr_stmt><expr><name pos:line="23" pos:column="3">easy<pos:position pos:line="23" pos:column="7"/></name> <operator pos:line="23" pos:column="8">=<pos:position pos:line="23" pos:column="9"/></operator> <operator pos:line="23" pos:column="10">(<pos:position pos:line="23" pos:column="11"/></operator>struct <name pos:line="23" pos:column="18">Curl_one_easy<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">*<pos:position pos:line="23" pos:column="33"/></operator><operator pos:line="23" pos:column="33">)<pos:position pos:line="23" pos:column="34"/></operator><call><name pos:line="23" pos:column="34">calloc<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><sizeof pos:line="23" pos:column="41">sizeof<argument_list pos:line="23" pos:column="47">(<argument><expr pos:line="23" pos:column="48">struct <name pos:line="23" pos:column="55">Curl_one_easy<pos:position pos:line="23" pos:column="68"/></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="71">1<pos:position pos:line="23" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="74"/></expr_stmt>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><operator pos:line="24" pos:column="6">!<pos:position pos:line="24" pos:column="7"/></operator><name pos:line="24" pos:column="7">easy<pos:position pos:line="24" pos:column="11"/></name></expr>)<pos:position pos:line="24" pos:column="12"/></condition><then pos:line="24" pos:column="12">
    <block type="pseudo"><return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">CURLM_OUT_OF_MEMORY<pos:position pos:line="25" pos:column="31"/></name></expr>;<pos:position pos:line="25" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="27" pos:column="3">cl<pos:position pos:line="27" pos:column="5"/></name> <operator pos:line="27" pos:column="6">=<pos:position pos:line="27" pos:column="7"/></operator> <name><name pos:line="27" pos:column="8">multi<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">-&gt;<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="15">closure<pos:position pos:line="27" pos:column="22"/></name></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
  <while pos:line="28" pos:column="3">while<condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">cl<pos:position pos:line="28" pos:column="11"/></name></expr>)<pos:position pos:line="28" pos:column="12"/></condition> <block pos:line="28" pos:column="13">{
    <decl_stmt><decl><type><name><name pos:line="29" pos:column="5">struct<pos:position pos:line="29" pos:column="11"/></name> <name pos:line="29" pos:column="12">closure<pos:position pos:line="29" pos:column="19"/></name></name> <modifier pos:line="29" pos:column="20">*<pos:position pos:line="29" pos:column="21"/></modifier></type><name pos:line="29" pos:column="21">next<pos:position pos:line="29" pos:column="25"/></name> <init pos:line="29" pos:column="26">= <expr><name><name pos:line="29" pos:column="28">cl<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">next<pos:position pos:line="29" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="29" pos:column="37"/></decl_stmt>
    <if pos:line="30" pos:column="5">if<condition pos:line="30" pos:column="7">(<expr><name><name pos:line="30" pos:column="8">cl<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">easy_handle<pos:position pos:line="30" pos:column="23"/></name></name> <operator pos:line="30" pos:column="24">==<pos:position pos:line="30" pos:column="26"/></operator> <operator pos:line="30" pos:column="27">(<pos:position pos:line="30" pos:column="28"/></operator>struct <name pos:line="30" pos:column="35">SessionHandle<pos:position pos:line="30" pos:column="48"/></name> <operator pos:line="30" pos:column="49">*<pos:position pos:line="30" pos:column="50"/></operator><operator pos:line="30" pos:column="50">)<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="51">easy_handle<pos:position pos:line="30" pos:column="62"/></name></expr>)<pos:position pos:line="30" pos:column="63"/></condition><then pos:line="30" pos:column="63"> <block pos:line="30" pos:column="64">{
      <comment type="block" pos:line="31" pos:column="7">/* remove this handle from the closure list */</comment>
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">free<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><name pos:line="32" pos:column="12">cl<pos:position pos:line="32" pos:column="14"/></name></expr></argument>)<pos:position pos:line="32" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="16"/></expr_stmt>
      <if pos:line="33" pos:column="7">if<condition pos:line="33" pos:column="9">(<expr><name pos:line="33" pos:column="10">prev<pos:position pos:line="33" pos:column="14"/></name></expr>)<pos:position pos:line="33" pos:column="15"/></condition><then pos:line="33" pos:column="15">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="9">prev<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">-&gt;<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="15">next<pos:position pos:line="34" pos:column="19"/></name></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">next<pos:position pos:line="34" pos:column="26"/></name></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt></block></then>
      <else pos:line="35" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="9">multi<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">-&gt;<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="16">closure<pos:position pos:line="36" pos:column="23"/></name></name> <operator pos:line="36" pos:column="24">=<pos:position pos:line="36" pos:column="25"/></operator> <name pos:line="36" pos:column="26">next<pos:position pos:line="36" pos:column="30"/></name></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt></block></else></if>
      <break pos:line="37" pos:column="7">break;<pos:position pos:line="37" pos:column="13"/></break> <comment type="block" pos:line="37" pos:column="14">/* no need to continue since this handle can only be present once
                in the list */</comment>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="40" pos:column="5">prev<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <name pos:line="40" pos:column="12">cl<pos:position pos:line="40" pos:column="14"/></name></expr>;<pos:position pos:line="40" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="41" pos:column="5">cl<pos:position pos:line="41" pos:column="7"/></name> <operator pos:line="41" pos:column="8">=<pos:position pos:line="41" pos:column="9"/></operator> <name pos:line="41" pos:column="10">next<pos:position pos:line="41" pos:column="14"/></name></expr>;<pos:position pos:line="41" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="42" pos:column="4"/></block></while>

  <comment type="block" pos:line="44" pos:column="3">/* set the easy handle */</comment>
  <expr_stmt><expr><name><name pos:line="45" pos:column="3">easy<pos:position pos:line="45" pos:column="7"/></name><operator pos:line="45" pos:column="7">-&gt;<pos:position pos:line="45" pos:column="12"/></operator><name pos:line="45" pos:column="9">easy_handle<pos:position pos:line="45" pos:column="20"/></name></name> <operator pos:line="45" pos:column="21">=<pos:position pos:line="45" pos:column="22"/></operator> <name pos:line="45" pos:column="23">easy_handle<pos:position pos:line="45" pos:column="34"/></name></expr>;<pos:position pos:line="45" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="46" pos:column="3">multistate<pos:position pos:line="46" pos:column="13"/></name><argument_list pos:line="46" pos:column="13">(<argument><expr><name pos:line="46" pos:column="14">easy<pos:position pos:line="46" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="20">CURLM_STATE_INIT<pos:position pos:line="46" pos:column="36"/></name></expr></argument>)<pos:position pos:line="46" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="48" pos:column="3">/* set the back pointer to one_easy to assist in removal */</comment>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">easy<pos:position pos:line="49" pos:column="7"/></name><operator pos:line="49" pos:column="7">-&gt;<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="9">easy_handle<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">-&gt;<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="22">multi_pos<pos:position pos:line="49" pos:column="31"/></name></name> <operator pos:line="49" pos:column="32">=<pos:position pos:line="49" pos:column="33"/></operator>  <name pos:line="49" pos:column="35">easy<pos:position pos:line="49" pos:column="39"/></name></expr>;<pos:position pos:line="49" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="51" pos:column="3">/* for multi interface connections, we share DNS cache automatically if the
     easy handle's one is currently private. */</comment>
  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><name><name pos:line="53" pos:column="6">easy<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">-&gt;<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="12">easy_handle<pos:position pos:line="53" pos:column="23"/></name><operator pos:line="53" pos:column="23">-&gt;<pos:position pos:line="53" pos:column="28"/></operator><name pos:line="53" pos:column="25">dns<pos:position pos:line="53" pos:column="28"/></name><operator pos:line="53" pos:column="28">.<pos:position pos:line="53" pos:column="29"/></operator><name pos:line="53" pos:column="29">hostcache<pos:position pos:line="53" pos:column="38"/></name></name> <operator pos:line="53" pos:column="39">&amp;&amp;<pos:position pos:line="53" pos:column="49"/></operator>
      <operator pos:line="54" pos:column="7">(<pos:position pos:line="54" pos:column="8"/></operator><name><name pos:line="54" pos:column="8">easy<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">-&gt;<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="14">easy_handle<pos:position pos:line="54" pos:column="25"/></name><operator pos:line="54" pos:column="25">-&gt;<pos:position pos:line="54" pos:column="30"/></operator><name pos:line="54" pos:column="27">dns<pos:position pos:line="54" pos:column="30"/></name><operator pos:line="54" pos:column="30">.<pos:position pos:line="54" pos:column="31"/></operator><name pos:line="54" pos:column="31">hostcachetype<pos:position pos:line="54" pos:column="44"/></name></name> <operator pos:line="54" pos:column="45">==<pos:position pos:line="54" pos:column="47"/></operator> <name pos:line="54" pos:column="48">HCACHE_PRIVATE<pos:position pos:line="54" pos:column="62"/></name><operator pos:line="54" pos:column="62">)<pos:position pos:line="54" pos:column="63"/></operator></expr>)<pos:position pos:line="54" pos:column="64"/></condition><then pos:line="54" pos:column="64"> <block pos:line="54" pos:column="65">{
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">Curl_hash_destroy<pos:position pos:line="55" pos:column="22"/></name><argument_list pos:line="55" pos:column="22">(<argument><expr><name><name pos:line="55" pos:column="23">easy<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">-&gt;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="29">easy_handle<pos:position pos:line="55" pos:column="40"/></name><operator pos:line="55" pos:column="40">-&gt;<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="42">dns<pos:position pos:line="55" pos:column="45"/></name><operator pos:line="55" pos:column="45">.<pos:position pos:line="55" pos:column="46"/></operator><name pos:line="55" pos:column="46">hostcache<pos:position pos:line="55" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="56" pos:column="5">easy<pos:position pos:line="56" pos:column="9"/></name><operator pos:line="56" pos:column="9">-&gt;<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="11">easy_handle<pos:position pos:line="56" pos:column="22"/></name><operator pos:line="56" pos:column="22">-&gt;<pos:position pos:line="56" pos:column="27"/></operator><name pos:line="56" pos:column="24">dns<pos:position pos:line="56" pos:column="27"/></name><operator pos:line="56" pos:column="27">.<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="28">hostcache<pos:position pos:line="56" pos:column="37"/></name></name> <operator pos:line="56" pos:column="38">=<pos:position pos:line="56" pos:column="39"/></operator> <name pos:line="56" pos:column="40">NULL<pos:position pos:line="56" pos:column="44"/></name></expr>;<pos:position pos:line="56" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">easy<pos:position pos:line="57" pos:column="9"/></name><operator pos:line="57" pos:column="9">-&gt;<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="11">easy_handle<pos:position pos:line="57" pos:column="22"/></name><operator pos:line="57" pos:column="22">-&gt;<pos:position pos:line="57" pos:column="27"/></operator><name pos:line="57" pos:column="24">dns<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">.<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="28">hostcachetype<pos:position pos:line="57" pos:column="41"/></name></name> <operator pos:line="57" pos:column="42">=<pos:position pos:line="57" pos:column="43"/></operator> <name pos:line="57" pos:column="44">HCACHE_NONE<pos:position pos:line="57" pos:column="55"/></name></expr>;<pos:position pos:line="57" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>

  <if pos:line="60" pos:column="3">if<condition pos:line="60" pos:column="5">(<expr><operator pos:line="60" pos:column="6">!<pos:position pos:line="60" pos:column="7"/></operator><name><name pos:line="60" pos:column="7">easy<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">-&gt;<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="13">easy_handle<pos:position pos:line="60" pos:column="24"/></name><operator pos:line="60" pos:column="24">-&gt;<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="26">dns<pos:position pos:line="60" pos:column="29"/></name><operator pos:line="60" pos:column="29">.<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="30">hostcache<pos:position pos:line="60" pos:column="39"/></name></name> <operator pos:line="60" pos:column="40">||<pos:position pos:line="60" pos:column="42"/></operator>
      <operator pos:line="61" pos:column="7">(<pos:position pos:line="61" pos:column="8"/></operator><name><name pos:line="61" pos:column="8">easy<pos:position pos:line="61" pos:column="12"/></name><operator pos:line="61" pos:column="12">-&gt;<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="14">easy_handle<pos:position pos:line="61" pos:column="25"/></name><operator pos:line="61" pos:column="25">-&gt;<pos:position pos:line="61" pos:column="30"/></operator><name pos:line="61" pos:column="27">dns<pos:position pos:line="61" pos:column="30"/></name><operator pos:line="61" pos:column="30">.<pos:position pos:line="61" pos:column="31"/></operator><name pos:line="61" pos:column="31">hostcachetype<pos:position pos:line="61" pos:column="44"/></name></name> <operator pos:line="61" pos:column="45">==<pos:position pos:line="61" pos:column="47"/></operator> <name pos:line="61" pos:column="48">HCACHE_NONE<pos:position pos:line="61" pos:column="59"/></name><operator pos:line="61" pos:column="59">)<pos:position pos:line="61" pos:column="60"/></operator></expr>)<pos:position pos:line="61" pos:column="61"/></condition><then pos:line="61" pos:column="61"> <block pos:line="61" pos:column="62">{
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">easy<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">-&gt;<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="11">easy_handle<pos:position pos:line="62" pos:column="22"/></name><operator pos:line="62" pos:column="22">-&gt;<pos:position pos:line="62" pos:column="27"/></operator><name pos:line="62" pos:column="24">dns<pos:position pos:line="62" pos:column="27"/></name><operator pos:line="62" pos:column="27">.<pos:position pos:line="62" pos:column="28"/></operator><name pos:line="62" pos:column="28">hostcache<pos:position pos:line="62" pos:column="37"/></name></name> <operator pos:line="62" pos:column="38">=<pos:position pos:line="62" pos:column="39"/></operator> <name><name pos:line="62" pos:column="40">multi<pos:position pos:line="62" pos:column="45"/></name><operator pos:line="62" pos:column="45">-&gt;<pos:position pos:line="62" pos:column="50"/></operator><name pos:line="62" pos:column="47">hostcache<pos:position pos:line="62" pos:column="56"/></name></name></expr>;<pos:position pos:line="62" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="63" pos:column="5">easy<pos:position pos:line="63" pos:column="9"/></name><operator pos:line="63" pos:column="9">-&gt;<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="11">easy_handle<pos:position pos:line="63" pos:column="22"/></name><operator pos:line="63" pos:column="22">-&gt;<pos:position pos:line="63" pos:column="27"/></operator><name pos:line="63" pos:column="24">dns<pos:position pos:line="63" pos:column="27"/></name><operator pos:line="63" pos:column="27">.<pos:position pos:line="63" pos:column="28"/></operator><name pos:line="63" pos:column="28">hostcachetype<pos:position pos:line="63" pos:column="41"/></name></name> <operator pos:line="63" pos:column="42">=<pos:position pos:line="63" pos:column="43"/></operator> <name pos:line="63" pos:column="44">HCACHE_MULTI<pos:position pos:line="63" pos:column="56"/></name></expr>;<pos:position pos:line="63" pos:column="57"/></expr_stmt>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <if pos:line="66" pos:column="3">if<condition pos:line="66" pos:column="5">(<expr><name><name pos:line="66" pos:column="6">easy<pos:position pos:line="66" pos:column="10"/></name><operator pos:line="66" pos:column="10">-&gt;<pos:position pos:line="66" pos:column="15"/></operator><name pos:line="66" pos:column="12">easy_handle<pos:position pos:line="66" pos:column="23"/></name><operator pos:line="66" pos:column="23">-&gt;<pos:position pos:line="66" pos:column="28"/></operator><name pos:line="66" pos:column="25">state<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">.<pos:position pos:line="66" pos:column="31"/></operator><name pos:line="66" pos:column="31">connc<pos:position pos:line="66" pos:column="36"/></name></name></expr>)<pos:position pos:line="66" pos:column="37"/></condition><then pos:line="66" pos:column="37"> <block pos:line="66" pos:column="38">{
    <if pos:line="67" pos:column="5">if<condition pos:line="67" pos:column="7">(<expr><name><name pos:line="67" pos:column="8">easy<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">-&gt;<pos:position pos:line="67" pos:column="17"/></operator><name pos:line="67" pos:column="14">easy_handle<pos:position pos:line="67" pos:column="25"/></name><operator pos:line="67" pos:column="25">-&gt;<pos:position pos:line="67" pos:column="30"/></operator><name pos:line="67" pos:column="27">state<pos:position pos:line="67" pos:column="32"/></name><operator pos:line="67" pos:column="32">.<pos:position pos:line="67" pos:column="33"/></operator><name pos:line="67" pos:column="33">connc<pos:position pos:line="67" pos:column="38"/></name><operator pos:line="67" pos:column="38">-&gt;<pos:position pos:line="67" pos:column="43"/></operator><name pos:line="67" pos:column="40">type<pos:position pos:line="67" pos:column="44"/></name></name> <operator pos:line="67" pos:column="45">==<pos:position pos:line="67" pos:column="47"/></operator> <name pos:line="67" pos:column="48">CONNCACHE_PRIVATE<pos:position pos:line="67" pos:column="65"/></name></expr>)<pos:position pos:line="67" pos:column="66"/></condition><then pos:line="67" pos:column="66"> <block pos:line="67" pos:column="67">{
      <comment type="block" pos:line="68" pos:column="7">/* kill old private version */</comment>
      <expr_stmt><expr><call><name pos:line="69" pos:column="7">Curl_rm_connc<pos:position pos:line="69" pos:column="20"/></name><argument_list pos:line="69" pos:column="20">(<argument><expr><name><name pos:line="69" pos:column="21">easy<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">-&gt;<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="27">easy_handle<pos:position pos:line="69" pos:column="38"/></name><operator pos:line="69" pos:column="38">-&gt;<pos:position pos:line="69" pos:column="43"/></operator><name pos:line="69" pos:column="40">state<pos:position pos:line="69" pos:column="45"/></name><operator pos:line="69" pos:column="45">.<pos:position pos:line="69" pos:column="46"/></operator><name pos:line="69" pos:column="46">connc<pos:position pos:line="69" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="53"/></expr_stmt>
      <comment type="block" pos:line="70" pos:column="7">/* point out our shared one instead */</comment>
      <expr_stmt><expr><name><name pos:line="71" pos:column="7">easy<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">easy_handle<pos:position pos:line="71" pos:column="24"/></name><operator pos:line="71" pos:column="24">-&gt;<pos:position pos:line="71" pos:column="29"/></operator><name pos:line="71" pos:column="26">state<pos:position pos:line="71" pos:column="31"/></name><operator pos:line="71" pos:column="31">.<pos:position pos:line="71" pos:column="32"/></operator><name pos:line="71" pos:column="32">connc<pos:position pos:line="71" pos:column="37"/></name></name> <operator pos:line="71" pos:column="38">=<pos:position pos:line="71" pos:column="39"/></operator> <name><name pos:line="71" pos:column="40">multi<pos:position pos:line="71" pos:column="45"/></name><operator pos:line="71" pos:column="45">-&gt;<pos:position pos:line="71" pos:column="50"/></operator><name pos:line="71" pos:column="47">connc<pos:position pos:line="71" pos:column="52"/></name></name></expr>;<pos:position pos:line="71" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="73" pos:column="5">/* else it is already using multi? */</comment>
  }<pos:position pos:line="74" pos:column="4"/></block></then>
  <else pos:line="75" pos:column="3">else
    <comment type="block" pos:line="76" pos:column="5">/* point out our shared one */</comment>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="5">easy<pos:position pos:line="77" pos:column="9"/></name><operator pos:line="77" pos:column="9">-&gt;<pos:position pos:line="77" pos:column="14"/></operator><name pos:line="77" pos:column="11">easy_handle<pos:position pos:line="77" pos:column="22"/></name><operator pos:line="77" pos:column="22">-&gt;<pos:position pos:line="77" pos:column="27"/></operator><name pos:line="77" pos:column="24">state<pos:position pos:line="77" pos:column="29"/></name><operator pos:line="77" pos:column="29">.<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">connc<pos:position pos:line="77" pos:column="35"/></name></name> <operator pos:line="77" pos:column="36">=<pos:position pos:line="77" pos:column="37"/></operator> <name><name pos:line="77" pos:column="38">multi<pos:position pos:line="77" pos:column="43"/></name><operator pos:line="77" pos:column="43">-&gt;<pos:position pos:line="77" pos:column="48"/></operator><name pos:line="77" pos:column="45">connc<pos:position pos:line="77" pos:column="50"/></name></name></expr>;<pos:position pos:line="77" pos:column="51"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="79" pos:column="3">/* Make sure the type is setup correctly */</comment>
  <expr_stmt><expr><name><name pos:line="80" pos:column="3">easy<pos:position pos:line="80" pos:column="7"/></name><operator pos:line="80" pos:column="7">-&gt;<pos:position pos:line="80" pos:column="12"/></operator><name pos:line="80" pos:column="9">easy_handle<pos:position pos:line="80" pos:column="20"/></name><operator pos:line="80" pos:column="20">-&gt;<pos:position pos:line="80" pos:column="25"/></operator><name pos:line="80" pos:column="22">state<pos:position pos:line="80" pos:column="27"/></name><operator pos:line="80" pos:column="27">.<pos:position pos:line="80" pos:column="28"/></operator><name pos:line="80" pos:column="28">connc<pos:position pos:line="80" pos:column="33"/></name><operator pos:line="80" pos:column="33">-&gt;<pos:position pos:line="80" pos:column="38"/></operator><name pos:line="80" pos:column="35">type<pos:position pos:line="80" pos:column="39"/></name></name> <operator pos:line="80" pos:column="40">=<pos:position pos:line="80" pos:column="41"/></operator> <name pos:line="80" pos:column="42">CONNCACHE_MULTI<pos:position pos:line="80" pos:column="57"/></name></expr>;<pos:position pos:line="80" pos:column="58"/></expr_stmt>

  <comment type="block" pos:line="82" pos:column="3">/* This adds the new entry at the back of the list
     to try and maintain a FIFO queue so the pipelined
     requests are in order. */</comment>

  <comment type="block" pos:line="86" pos:column="3">/* We add this new entry last in the list. We make our 'next' point to the
     'first' struct and our 'prev' point to the previous 'prev' */</comment>
  <expr_stmt><expr><name><name pos:line="88" pos:column="3">easy<pos:position pos:line="88" pos:column="7"/></name><operator pos:line="88" pos:column="7">-&gt;<pos:position pos:line="88" pos:column="12"/></operator><name pos:line="88" pos:column="9">next<pos:position pos:line="88" pos:column="13"/></name></name> <operator pos:line="88" pos:column="14">=<pos:position pos:line="88" pos:column="15"/></operator> <operator pos:line="88" pos:column="16">&amp;<pos:position pos:line="88" pos:column="21"/></operator><name><name pos:line="88" pos:column="17">multi<pos:position pos:line="88" pos:column="22"/></name><operator pos:line="88" pos:column="22">-&gt;<pos:position pos:line="88" pos:column="27"/></operator><name pos:line="88" pos:column="24">easy<pos:position pos:line="88" pos:column="28"/></name></name></expr>;<pos:position pos:line="88" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="89" pos:column="3">easy<pos:position pos:line="89" pos:column="7"/></name><operator pos:line="89" pos:column="7">-&gt;<pos:position pos:line="89" pos:column="12"/></operator><name pos:line="89" pos:column="9">prev<pos:position pos:line="89" pos:column="13"/></name></name> <operator pos:line="89" pos:column="14">=<pos:position pos:line="89" pos:column="15"/></operator> <name><name pos:line="89" pos:column="16">multi<pos:position pos:line="89" pos:column="21"/></name><operator pos:line="89" pos:column="21">-&gt;<pos:position pos:line="89" pos:column="26"/></operator><name pos:line="89" pos:column="23">easy<pos:position pos:line="89" pos:column="27"/></name><operator pos:line="89" pos:column="27">.<pos:position pos:line="89" pos:column="28"/></operator><name pos:line="89" pos:column="28">prev<pos:position pos:line="89" pos:column="32"/></name></name></expr>;<pos:position pos:line="89" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="91" pos:column="3">/* make 'easy' the last node in the chain */</comment>
  <expr_stmt><expr><name><name pos:line="92" pos:column="3">multi<pos:position pos:line="92" pos:column="8"/></name><operator pos:line="92" pos:column="8">-&gt;<pos:position pos:line="92" pos:column="13"/></operator><name pos:line="92" pos:column="10">easy<pos:position pos:line="92" pos:column="14"/></name><operator pos:line="92" pos:column="14">.<pos:position pos:line="92" pos:column="15"/></operator><name pos:line="92" pos:column="15">prev<pos:position pos:line="92" pos:column="19"/></name></name> <operator pos:line="92" pos:column="20">=<pos:position pos:line="92" pos:column="21"/></operator> <name pos:line="92" pos:column="22">easy<pos:position pos:line="92" pos:column="26"/></name></expr>;<pos:position pos:line="92" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="94" pos:column="3">/* if there was a prev node, make sure its 'next' pointer links to
     the new node */</comment>
  <expr_stmt><expr><name><name pos:line="96" pos:column="3">easy<pos:position pos:line="96" pos:column="7"/></name><operator pos:line="96" pos:column="7">-&gt;<pos:position pos:line="96" pos:column="12"/></operator><name pos:line="96" pos:column="9">prev<pos:position pos:line="96" pos:column="13"/></name><operator pos:line="96" pos:column="13">-&gt;<pos:position pos:line="96" pos:column="18"/></operator><name pos:line="96" pos:column="15">next<pos:position pos:line="96" pos:column="19"/></name></name> <operator pos:line="96" pos:column="20">=<pos:position pos:line="96" pos:column="21"/></operator> <name pos:line="96" pos:column="22">easy<pos:position pos:line="96" pos:column="26"/></name></expr>;<pos:position pos:line="96" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="98" pos:column="3">Curl_easy_addmulti<pos:position pos:line="98" pos:column="21"/></name><argument_list pos:line="98" pos:column="21">(<argument><expr><name pos:line="98" pos:column="22">easy_handle<pos:position pos:line="98" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="35">multi_handle<pos:position pos:line="98" pos:column="47"/></name></expr></argument>)<pos:position pos:line="98" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="49"/></expr_stmt>

  <comment type="block" pos:line="100" pos:column="3">/* make the SessionHandle struct refer back to this struct */</comment>
  <expr_stmt><expr><name><name pos:line="101" pos:column="3">easy<pos:position pos:line="101" pos:column="7"/></name><operator pos:line="101" pos:column="7">-&gt;<pos:position pos:line="101" pos:column="12"/></operator><name pos:line="101" pos:column="9">easy_handle<pos:position pos:line="101" pos:column="20"/></name><operator pos:line="101" pos:column="20">-&gt;<pos:position pos:line="101" pos:column="25"/></operator><name pos:line="101" pos:column="22">set<pos:position pos:line="101" pos:column="25"/></name><operator pos:line="101" pos:column="25">.<pos:position pos:line="101" pos:column="26"/></operator><name pos:line="101" pos:column="26">one_easy<pos:position pos:line="101" pos:column="34"/></name></name> <operator pos:line="101" pos:column="35">=<pos:position pos:line="101" pos:column="36"/></operator> <name pos:line="101" pos:column="37">easy<pos:position pos:line="101" pos:column="41"/></name></expr>;<pos:position pos:line="101" pos:column="42"/></expr_stmt>

  <comment type="block" pos:line="103" pos:column="3">/* Set the timeout for this handle to expire really soon so that it will
     be taken care of even when this handle is added in the midst of operation
     when only the curl_multi_socket() API is used. During that flow, only
     sockets that time-out or have actions will be dealt with. Since this
     handle has no action yet, we make sure it times out to get things to
     happen. */</comment>
  <expr_stmt><expr><call><name pos:line="109" pos:column="3">Curl_expire<pos:position pos:line="109" pos:column="14"/></name><argument_list pos:line="109" pos:column="14">(<argument><expr><name><name pos:line="109" pos:column="15">easy<pos:position pos:line="109" pos:column="19"/></name><operator pos:line="109" pos:column="19">-&gt;<pos:position pos:line="109" pos:column="24"/></operator><name pos:line="109" pos:column="21">easy_handle<pos:position pos:line="109" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="109" pos:column="34">10<pos:position pos:line="109" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="111" pos:column="3">/* increase the node-counter */</comment>
  <expr_stmt><expr><name><name pos:line="112" pos:column="3">multi<pos:position pos:line="112" pos:column="8"/></name><operator pos:line="112" pos:column="8">-&gt;<pos:position pos:line="112" pos:column="13"/></operator><name pos:line="112" pos:column="10">num_easy<pos:position pos:line="112" pos:column="18"/></name></name><operator pos:line="112" pos:column="18">++<pos:position pos:line="112" pos:column="20"/></operator></expr>;<pos:position pos:line="112" pos:column="21"/></expr_stmt>

  <if pos:line="114" pos:column="3">if<condition pos:line="114" pos:column="5">(<expr><operator pos:line="114" pos:column="6">(<pos:position pos:line="114" pos:column="7"/></operator><name><name pos:line="114" pos:column="7">multi<pos:position pos:line="114" pos:column="12"/></name><operator pos:line="114" pos:column="12">-&gt;<pos:position pos:line="114" pos:column="17"/></operator><name pos:line="114" pos:column="14">num_easy<pos:position pos:line="114" pos:column="22"/></name></name> <operator pos:line="114" pos:column="23">*<pos:position pos:line="114" pos:column="24"/></operator> <literal type="number" pos:line="114" pos:column="25">4<pos:position pos:line="114" pos:column="26"/></literal><operator pos:line="114" pos:column="26">)<pos:position pos:line="114" pos:column="27"/></operator> <operator pos:line="114" pos:column="28">&gt;<pos:position pos:line="114" pos:column="32"/></operator> <name><name pos:line="114" pos:column="30">multi<pos:position pos:line="114" pos:column="35"/></name><operator pos:line="114" pos:column="35">-&gt;<pos:position pos:line="114" pos:column="40"/></operator><name pos:line="114" pos:column="37">connc<pos:position pos:line="114" pos:column="42"/></name><operator pos:line="114" pos:column="42">-&gt;<pos:position pos:line="114" pos:column="47"/></operator><name pos:line="114" pos:column="44">num<pos:position pos:line="114" pos:column="47"/></name></name></expr>)<pos:position pos:line="114" pos:column="48"/></condition><then pos:line="114" pos:column="48"> <block pos:line="114" pos:column="49">{
    <comment type="block" pos:line="115" pos:column="5">/* We want the connection cache to have plenty room. Before we supported
       the shared cache every single easy handle had 5 entries in their cache
       by default. */</comment>
    <decl_stmt><decl><type><name pos:line="118" pos:column="5">long<pos:position pos:line="118" pos:column="9"/></name></type> <name pos:line="118" pos:column="10">newmax<pos:position pos:line="118" pos:column="16"/></name> <init pos:line="118" pos:column="17">= <expr><name><name pos:line="118" pos:column="19">multi<pos:position pos:line="118" pos:column="24"/></name><operator pos:line="118" pos:column="24">-&gt;<pos:position pos:line="118" pos:column="29"/></operator><name pos:line="118" pos:column="26">num_easy<pos:position pos:line="118" pos:column="34"/></name></name> <operator pos:line="118" pos:column="35">*<pos:position pos:line="118" pos:column="36"/></operator> <literal type="number" pos:line="118" pos:column="37">4<pos:position pos:line="118" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="118" pos:column="39"/></decl_stmt>

    <if pos:line="120" pos:column="5">if<condition pos:line="120" pos:column="7">(<expr><name><name pos:line="120" pos:column="8">multi<pos:position pos:line="120" pos:column="13"/></name><operator pos:line="120" pos:column="13">-&gt;<pos:position pos:line="120" pos:column="18"/></operator><name pos:line="120" pos:column="15">maxconnects<pos:position pos:line="120" pos:column="26"/></name></name> <operator pos:line="120" pos:column="27">&amp;&amp;<pos:position pos:line="120" pos:column="37"/></operator> <operator pos:line="120" pos:column="30">(<pos:position pos:line="120" pos:column="31"/></operator><name><name pos:line="120" pos:column="31">multi<pos:position pos:line="120" pos:column="36"/></name><operator pos:line="120" pos:column="36">-&gt;<pos:position pos:line="120" pos:column="41"/></operator><name pos:line="120" pos:column="38">maxconnects<pos:position pos:line="120" pos:column="49"/></name></name> <operator pos:line="120" pos:column="50">&lt;<pos:position pos:line="120" pos:column="54"/></operator> <name pos:line="120" pos:column="52">newmax<pos:position pos:line="120" pos:column="58"/></name><operator pos:line="120" pos:column="58">)<pos:position pos:line="120" pos:column="59"/></operator></expr>)<pos:position pos:line="120" pos:column="60"/></condition><then pos:line="120" pos:column="60">
      <comment type="block" pos:line="121" pos:column="7">/* don't grow beyond the allowed size */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="122" pos:column="7">newmax<pos:position pos:line="122" pos:column="13"/></name> <operator pos:line="122" pos:column="14">=<pos:position pos:line="122" pos:column="15"/></operator> <name><name pos:line="122" pos:column="16">multi<pos:position pos:line="122" pos:column="21"/></name><operator pos:line="122" pos:column="21">-&gt;<pos:position pos:line="122" pos:column="26"/></operator><name pos:line="122" pos:column="23">maxconnects<pos:position pos:line="122" pos:column="34"/></name></name></expr>;<pos:position pos:line="122" pos:column="35"/></expr_stmt></block></then></if>

    <if pos:line="124" pos:column="5">if<condition pos:line="124" pos:column="7">(<expr><name pos:line="124" pos:column="8">newmax<pos:position pos:line="124" pos:column="14"/></name> <operator pos:line="124" pos:column="15">&gt;<pos:position pos:line="124" pos:column="19"/></operator> <name><name pos:line="124" pos:column="17">multi<pos:position pos:line="124" pos:column="22"/></name><operator pos:line="124" pos:column="22">-&gt;<pos:position pos:line="124" pos:column="27"/></operator><name pos:line="124" pos:column="24">connc<pos:position pos:line="124" pos:column="29"/></name><operator pos:line="124" pos:column="29">-&gt;<pos:position pos:line="124" pos:column="34"/></operator><name pos:line="124" pos:column="31">num<pos:position pos:line="124" pos:column="34"/></name></name></expr>)<pos:position pos:line="124" pos:column="35"/></condition><then pos:line="124" pos:column="35"> <block pos:line="124" pos:column="36">{
      <comment type="block" pos:line="125" pos:column="7">/* we only do this is we can in fact grow the cache */</comment>
      <decl_stmt><decl><type><name pos:line="126" pos:column="7">CURLcode<pos:position pos:line="126" pos:column="15"/></name></type> <name pos:line="126" pos:column="16">res<pos:position pos:line="126" pos:column="19"/></name> <init pos:line="126" pos:column="20">= <expr><call><name pos:line="126" pos:column="22">Curl_ch_connc<pos:position pos:line="126" pos:column="35"/></name><argument_list pos:line="126" pos:column="35">(<argument><expr><name pos:line="126" pos:column="36">easy_handle<pos:position pos:line="126" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="49">multi<pos:position pos:line="126" pos:column="54"/></name><operator pos:line="126" pos:column="54">-&gt;<pos:position pos:line="126" pos:column="59"/></operator><name pos:line="126" pos:column="56">connc<pos:position pos:line="126" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="63">newmax<pos:position pos:line="126" pos:column="69"/></name></expr></argument>)<pos:position pos:line="126" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="126" pos:column="71"/></decl_stmt>
      <if pos:line="127" pos:column="7">if<condition pos:line="127" pos:column="9">(<expr><name pos:line="127" pos:column="10">res<pos:position pos:line="127" pos:column="13"/></name> <operator pos:line="127" pos:column="14">!=<pos:position pos:line="127" pos:column="16"/></operator> <name pos:line="127" pos:column="17">CURLE_OK<pos:position pos:line="127" pos:column="25"/></name></expr>)<pos:position pos:line="127" pos:column="26"/></condition><then pos:line="127" pos:column="26"> <block pos:line="127" pos:column="27">{
        <comment type="block" pos:line="128" pos:column="9">/* FIXME: may need to do more cleanup here */</comment>
        <expr_stmt><expr><call><name pos:line="129" pos:column="9">curl_multi_remove_handle<pos:position pos:line="129" pos:column="33"/></name><argument_list pos:line="129" pos:column="33">(<argument><expr><name pos:line="129" pos:column="34">multi_handle<pos:position pos:line="129" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="48">easy_handle<pos:position pos:line="129" pos:column="59"/></name></expr></argument>)<pos:position pos:line="129" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="61"/></expr_stmt>
        <return pos:line="130" pos:column="9">return <expr><name pos:line="130" pos:column="16">CURLM_OUT_OF_MEMORY<pos:position pos:line="130" pos:column="35"/></name></expr>;<pos:position pos:line="130" pos:column="36"/></return>
      }<pos:position pos:line="131" pos:column="8"/></block></then></if>
    }<pos:position pos:line="132" pos:column="6"/></block></then></if>
  }<pos:position pos:line="133" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="135" pos:column="3">/* increase the alive-counter */</comment>
  <expr_stmt><expr><name><name pos:line="136" pos:column="3">multi<pos:position pos:line="136" pos:column="8"/></name><operator pos:line="136" pos:column="8">-&gt;<pos:position pos:line="136" pos:column="13"/></operator><name pos:line="136" pos:column="10">num_alive<pos:position pos:line="136" pos:column="19"/></name></name><operator pos:line="136" pos:column="19">++<pos:position pos:line="136" pos:column="21"/></operator></expr>;<pos:position pos:line="136" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="138" pos:column="3">update_timer<pos:position pos:line="138" pos:column="15"/></name><argument_list pos:line="138" pos:column="15">(<argument><expr><name pos:line="138" pos:column="16">multi<pos:position pos:line="138" pos:column="21"/></name></expr></argument>)<pos:position pos:line="138" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="23"/></expr_stmt>
  <return pos:line="139" pos:column="3">return <expr><name pos:line="139" pos:column="10">CURLM_OK<pos:position pos:line="139" pos:column="18"/></name></expr>;<pos:position pos:line="139" pos:column="19"/></return>
}<pos:position pos:line="140" pos:column="2"/></block></function></unit>
