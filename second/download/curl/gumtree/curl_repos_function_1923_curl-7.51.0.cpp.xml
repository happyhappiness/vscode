<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1923_curl-7.51.0.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">Cookie<pos:position pos:line="1" pos:column="14"/></name></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">Curl_cookie_getlist<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">CookieInfo<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">c<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                                   <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">host<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">char<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">path<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="3" pos:column="36">bool<pos:position pos:line="3" pos:column="40"/></name></type> <name pos:line="3" pos:column="41">secure<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Cookie<pos:position pos:line="5" pos:column="16"/></name></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">newco<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Cookie<pos:position pos:line="6" pos:column="16"/></name></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">co<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">time_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">now<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><call><name pos:line="7" pos:column="16">time<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">NULL<pos:position pos:line="7" pos:column="25"/></name></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Cookie<pos:position pos:line="8" pos:column="16"/></name></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">mainco<pos:position pos:line="8" pos:column="24"/></name><init pos:line="8" pos:column="24">=<expr><name pos:line="8" pos:column="25">NULL<pos:position pos:line="8" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">matches<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">is_ip<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">c<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">||<pos:position pos:line="12" pos:column="11"/></operator> <operator pos:line="12" pos:column="12">!<pos:position pos:line="12" pos:column="13"/></operator><name><name pos:line="12" pos:column="13">c<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">cookies<pos:position pos:line="12" pos:column="23"/></name></name></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">NULL<pos:position pos:line="13" pos:column="16"/></name></expr>;<pos:position pos:line="13" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="13" pos:column="18">/* no cookie struct or no cookies in the struct */</comment>

  <comment type="block" pos:line="15" pos:column="3">/* at first, remove expired cookies */</comment>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">remove_expired<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">c<pos:position pos:line="16" pos:column="19"/></name></expr></argument>)<pos:position pos:line="16" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* check if host is an IP(v4|v6) address */</comment>
  <expr_stmt><expr><name pos:line="19" pos:column="3">is_ip<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <call><name pos:line="19" pos:column="11">isip<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">host<pos:position pos:line="19" pos:column="20"/></name></expr></argument>)<pos:position pos:line="19" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><name pos:line="21" pos:column="3">co<pos:position pos:line="21" pos:column="5"/></name> <operator pos:line="21" pos:column="6">=<pos:position pos:line="21" pos:column="7"/></operator> <name><name pos:line="21" pos:column="8">c<pos:position pos:line="21" pos:column="9"/></name><operator pos:line="21" pos:column="9">-&gt;<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="11">cookies<pos:position pos:line="21" pos:column="18"/></name></name></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>

  <while pos:line="23" pos:column="3">while<condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">co<pos:position pos:line="23" pos:column="11"/></name></expr>)<pos:position pos:line="23" pos:column="12"/></condition> <block pos:line="23" pos:column="13">{
    <comment type="block" pos:line="24" pos:column="5">/* only process this cookie if it is not expired or had no expire
       date AND that if the cookie requires we're secure we must only
       continue if we are! */</comment>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><operator pos:line="27" pos:column="8">(<pos:position pos:line="27" pos:column="9"/></operator><operator pos:line="27" pos:column="9">!<pos:position pos:line="27" pos:column="10"/></operator><name><name pos:line="27" pos:column="10">co<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">expires<pos:position pos:line="27" pos:column="21"/></name></name> <operator pos:line="27" pos:column="22">||<pos:position pos:line="27" pos:column="24"/></operator> <operator pos:line="27" pos:column="25">(<pos:position pos:line="27" pos:column="26"/></operator><name><name pos:line="27" pos:column="26">co<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">expires<pos:position pos:line="27" pos:column="37"/></name></name> <operator pos:line="27" pos:column="38">&gt;<pos:position pos:line="27" pos:column="42"/></operator> <name pos:line="27" pos:column="40">now<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">)<pos:position pos:line="27" pos:column="44"/></operator><operator pos:line="27" pos:column="44">)<pos:position pos:line="27" pos:column="45"/></operator> <operator pos:line="27" pos:column="46">&amp;&amp;<pos:position pos:line="27" pos:column="56"/></operator>
       <operator pos:line="28" pos:column="8">(<pos:position pos:line="28" pos:column="9"/></operator><ternary><condition><expr><name><name pos:line="28" pos:column="9">co<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">-&gt;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="13">secure<pos:position pos:line="28" pos:column="19"/></name></name></expr>?<pos:position pos:line="28" pos:column="20"/></condition><then><expr><name pos:line="28" pos:column="20">secure<pos:position pos:line="28" pos:column="26"/></name></expr></then><else pos:line="28" pos:column="26">:<expr><name pos:line="28" pos:column="27">TRUE<pos:position pos:line="28" pos:column="31"/></name></expr></else></ternary><operator pos:line="28" pos:column="31">)<pos:position pos:line="28" pos:column="32"/></operator></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33"> <block pos:line="28" pos:column="34">{

      <comment type="block" pos:line="30" pos:column="7">/* now check if the domain is correct */</comment>
      <if pos:line="31" pos:column="7">if<condition pos:line="31" pos:column="9">(<expr><operator pos:line="31" pos:column="10">!<pos:position pos:line="31" pos:column="11"/></operator><name><name pos:line="31" pos:column="11">co<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">-&gt;<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="15">domain<pos:position pos:line="31" pos:column="21"/></name></name> <operator pos:line="31" pos:column="22">||<pos:position pos:line="31" pos:column="24"/></operator>
         <operator pos:line="32" pos:column="10">(<pos:position pos:line="32" pos:column="11"/></operator><name><name pos:line="32" pos:column="11">co<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">tailmatch<pos:position pos:line="32" pos:column="24"/></name></name> <operator pos:line="32" pos:column="25">&amp;&amp;<pos:position pos:line="32" pos:column="35"/></operator> <operator pos:line="32" pos:column="28">!<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="29">is_ip<pos:position pos:line="32" pos:column="34"/></name> <operator pos:line="32" pos:column="35">&amp;&amp;<pos:position pos:line="32" pos:column="45"/></operator> <call><name pos:line="32" pos:column="38">tailmatch<pos:position pos:line="32" pos:column="47"/></name><argument_list pos:line="32" pos:column="47">(<argument><expr><name><name pos:line="32" pos:column="48">co<pos:position pos:line="32" pos:column="50"/></name><operator pos:line="32" pos:column="50">-&gt;<pos:position pos:line="32" pos:column="55"/></operator><name pos:line="32" pos:column="52">domain<pos:position pos:line="32" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="60">host<pos:position pos:line="32" pos:column="64"/></name></expr></argument>)<pos:position pos:line="32" pos:column="65"/></argument_list></call><operator pos:line="32" pos:column="65">)<pos:position pos:line="32" pos:column="66"/></operator> <operator pos:line="32" pos:column="67">||<pos:position pos:line="32" pos:column="69"/></operator>
         <operator pos:line="33" pos:column="10">(<pos:position pos:line="33" pos:column="11"/></operator><operator pos:line="33" pos:column="11">(<pos:position pos:line="33" pos:column="12"/></operator><operator pos:line="33" pos:column="12">!<pos:position pos:line="33" pos:column="13"/></operator><name><name pos:line="33" pos:column="13">co<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">-&gt;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="17">tailmatch<pos:position pos:line="33" pos:column="26"/></name></name> <operator pos:line="33" pos:column="27">||<pos:position pos:line="33" pos:column="29"/></operator> <name pos:line="33" pos:column="30">is_ip<pos:position pos:line="33" pos:column="35"/></name><operator pos:line="33" pos:column="35">)<pos:position pos:line="33" pos:column="36"/></operator> <operator pos:line="33" pos:column="37">&amp;&amp;<pos:position pos:line="33" pos:column="47"/></operator> <call><name pos:line="33" pos:column="40">strcasecompare<pos:position pos:line="33" pos:column="54"/></name><argument_list pos:line="33" pos:column="54">(<argument><expr><name pos:line="33" pos:column="55">host<pos:position pos:line="33" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="61">co<pos:position pos:line="33" pos:column="63"/></name><operator pos:line="33" pos:column="63">-&gt;<pos:position pos:line="33" pos:column="68"/></operator><name pos:line="33" pos:column="65">domain<pos:position pos:line="33" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="72"/></argument_list></call><operator pos:line="33" pos:column="72">)<pos:position pos:line="33" pos:column="73"/></operator></expr> )<pos:position pos:line="33" pos:column="75"/></condition><then pos:line="33" pos:column="75"> <block pos:line="33" pos:column="76">{
        <comment type="block" pos:line="34" pos:column="9">/* the right part of the host matches the domain stuff in the
           cookie data */</comment>

        <comment type="block" pos:line="37" pos:column="9">/* now check the left part of the path with the cookies path
           requirement */</comment>
        <if pos:line="39" pos:column="9">if<condition pos:line="39" pos:column="11">(<expr><operator pos:line="39" pos:column="12">!<pos:position pos:line="39" pos:column="13"/></operator><name><name pos:line="39" pos:column="13">co<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">-&gt;<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="17">spath<pos:position pos:line="39" pos:column="22"/></name></name> <operator pos:line="39" pos:column="23">||<pos:position pos:line="39" pos:column="25"/></operator> <call><name pos:line="39" pos:column="26">pathmatch<pos:position pos:line="39" pos:column="35"/></name><argument_list pos:line="39" pos:column="35">(<argument><expr><name><name pos:line="39" pos:column="36">co<pos:position pos:line="39" pos:column="38"/></name><operator pos:line="39" pos:column="38">-&gt;<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="40">spath<pos:position pos:line="39" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="47">path<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr> )<pos:position pos:line="39" pos:column="54"/></condition><then pos:line="39" pos:column="54"> <block pos:line="39" pos:column="55">{

          <comment type="block" pos:line="41" pos:column="11">/* and now, we know this is a match and we should create an
             entry for the return-linked-list */</comment>

          <expr_stmt><expr><name pos:line="44" pos:column="11">newco<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <call><name pos:line="44" pos:column="19">dup_cookie<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">co<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
          <if pos:line="45" pos:column="11">if<condition pos:line="45" pos:column="13">(<expr><name pos:line="45" pos:column="14">newco<pos:position pos:line="45" pos:column="19"/></name></expr>)<pos:position pos:line="45" pos:column="20"/></condition><then pos:line="45" pos:column="20"> <block pos:line="45" pos:column="21">{
            <comment type="block" pos:line="46" pos:column="13">/* then modify our next */</comment>
            <expr_stmt><expr><name><name pos:line="47" pos:column="13">newco<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">-&gt;<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="20">next<pos:position pos:line="47" pos:column="24"/></name></name> <operator pos:line="47" pos:column="25">=<pos:position pos:line="47" pos:column="26"/></operator> <name pos:line="47" pos:column="27">mainco<pos:position pos:line="47" pos:column="33"/></name></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>

            <comment type="block" pos:line="49" pos:column="13">/* point the main to us */</comment>
            <expr_stmt><expr><name pos:line="50" pos:column="13">mainco<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">newco<pos:position pos:line="50" pos:column="27"/></name></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>

            <expr_stmt><expr><name pos:line="52" pos:column="13">matches<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">++<pos:position pos:line="52" pos:column="22"/></operator></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>
          }<pos:position pos:line="53" pos:column="12"/></block></then>
          <else pos:line="54" pos:column="11">else <block pos:line="54" pos:column="16">{
            <label><name pos:line="55" pos:column="13">fail<pos:position pos:line="55" pos:column="17"/></name>:<pos:position pos:line="55" pos:column="18"/></label>
            <comment type="block" pos:line="56" pos:column="13">/* failure, clear up the allocated chain and return NULL */</comment>
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">Curl_cookie_freelist<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><name pos:line="57" pos:column="34">mainco<pos:position pos:line="57" pos:column="40"/></name></expr></argument>)<pos:position pos:line="57" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="42"/></expr_stmt>
            <return pos:line="58" pos:column="13">return <expr><name pos:line="58" pos:column="20">NULL<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></return>
          }<pos:position pos:line="59" pos:column="12"/></block></else></if>
        }<pos:position pos:line="60" pos:column="10"/></block></then></if>
      }<pos:position pos:line="61" pos:column="8"/></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="63" pos:column="5">co<pos:position pos:line="63" pos:column="7"/></name> <operator pos:line="63" pos:column="8">=<pos:position pos:line="63" pos:column="9"/></operator> <name><name pos:line="63" pos:column="10">co<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">-&gt;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="14">next<pos:position pos:line="63" pos:column="18"/></name></name></expr>;<pos:position pos:line="63" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="64" pos:column="4"/></block></while>

  <if pos:line="66" pos:column="3">if<condition pos:line="66" pos:column="5">(<expr><name pos:line="66" pos:column="6">matches<pos:position pos:line="66" pos:column="13"/></name></expr>)<pos:position pos:line="66" pos:column="14"/></condition><then pos:line="66" pos:column="14"> <block pos:line="66" pos:column="15">{
    <comment type="block" pos:line="67" pos:column="5">/* Now we need to make sure that if there is a name appearing more than
       once, the longest specified path version comes first. To make this
       the swiftest way, we just sort them all based on path length. */</comment>
    <decl_stmt><decl><type><name><name pos:line="70" pos:column="5">struct<pos:position pos:line="70" pos:column="11"/></name> <name pos:line="70" pos:column="12">Cookie<pos:position pos:line="70" pos:column="18"/></name></name> <modifier pos:line="70" pos:column="19">*<pos:position pos:line="70" pos:column="20"/></modifier><modifier pos:line="70" pos:column="20">*<pos:position pos:line="70" pos:column="21"/></modifier></type><name pos:line="70" pos:column="21">array<pos:position pos:line="70" pos:column="26"/></name></decl>;<pos:position pos:line="70" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="71" pos:column="5">size_t<pos:position pos:line="71" pos:column="11"/></name></type> <name pos:line="71" pos:column="12">i<pos:position pos:line="71" pos:column="13"/></name></decl>;<pos:position pos:line="71" pos:column="14"/></decl_stmt>

    <comment type="block" pos:line="73" pos:column="5">/* alloc an array and store all cookie pointers */</comment>
    <expr_stmt><expr><name pos:line="74" pos:column="5">array<pos:position pos:line="74" pos:column="10"/></name> <operator pos:line="74" pos:column="11">=<pos:position pos:line="74" pos:column="12"/></operator> <call><name pos:line="74" pos:column="13">malloc<pos:position pos:line="74" pos:column="19"/></name><argument_list pos:line="74" pos:column="19">(<argument><expr><sizeof pos:line="74" pos:column="20">sizeof<argument_list pos:line="74" pos:column="26">(<argument><expr pos:line="74" pos:column="27">struct <name pos:line="74" pos:column="34">Cookie<pos:position pos:line="74" pos:column="40"/></name> <operator pos:line="74" pos:column="41">*<pos:position pos:line="74" pos:column="42"/></operator></expr></argument>)<pos:position pos:line="74" pos:column="43"/></argument_list></sizeof> <operator pos:line="74" pos:column="44">*<pos:position pos:line="74" pos:column="45"/></operator> <name pos:line="74" pos:column="46">matches<pos:position pos:line="74" pos:column="53"/></name></expr></argument>)<pos:position pos:line="74" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="55"/></expr_stmt>
    <if pos:line="75" pos:column="5">if<condition pos:line="75" pos:column="7">(<expr><operator pos:line="75" pos:column="8">!<pos:position pos:line="75" pos:column="9"/></operator><name pos:line="75" pos:column="9">array<pos:position pos:line="75" pos:column="14"/></name></expr>)<pos:position pos:line="75" pos:column="15"/></condition><then pos:line="75" pos:column="15">
      <block type="pseudo"><goto pos:line="76" pos:column="7">goto <name pos:line="76" pos:column="12">fail<pos:position pos:line="76" pos:column="16"/></name>;<pos:position pos:line="76" pos:column="17"/></goto></block></then></if>

    <expr_stmt><expr><name pos:line="78" pos:column="5">co<pos:position pos:line="78" pos:column="7"/></name> <operator pos:line="78" pos:column="8">=<pos:position pos:line="78" pos:column="9"/></operator> <name pos:line="78" pos:column="10">mainco<pos:position pos:line="78" pos:column="16"/></name></expr>;<pos:position pos:line="78" pos:column="17"/></expr_stmt>

    <for pos:line="80" pos:column="5">for<control pos:line="80" pos:column="8">(<init><expr><name pos:line="80" pos:column="9">i<pos:position pos:line="80" pos:column="10"/></name><operator pos:line="80" pos:column="10">=<pos:position pos:line="80" pos:column="11"/></operator><literal type="number" pos:line="80" pos:column="11">0<pos:position pos:line="80" pos:column="12"/></literal></expr>;<pos:position pos:line="80" pos:column="13"/></init> <condition><expr><name pos:line="80" pos:column="14">co<pos:position pos:line="80" pos:column="16"/></name></expr>;<pos:position pos:line="80" pos:column="17"/></condition> <incr><expr><name pos:line="80" pos:column="18">co<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">=<pos:position pos:line="80" pos:column="22"/></operator> <name><name pos:line="80" pos:column="23">co<pos:position pos:line="80" pos:column="25"/></name><operator pos:line="80" pos:column="25">-&gt;<pos:position pos:line="80" pos:column="30"/></operator><name pos:line="80" pos:column="27">next<pos:position pos:line="80" pos:column="31"/></name></name></expr></incr>)<pos:position pos:line="80" pos:column="32"/></control>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="81" pos:column="7">array<pos:position pos:line="81" pos:column="12"/></name><index pos:line="81" pos:column="12">[<expr><name pos:line="81" pos:column="13">i<pos:position pos:line="81" pos:column="14"/></name><operator pos:line="81" pos:column="14">++<pos:position pos:line="81" pos:column="16"/></operator></expr>]<pos:position pos:line="81" pos:column="17"/></index></name> <operator pos:line="81" pos:column="18">=<pos:position pos:line="81" pos:column="19"/></operator> <name pos:line="81" pos:column="20">co<pos:position pos:line="81" pos:column="22"/></name></expr>;<pos:position pos:line="81" pos:column="23"/></expr_stmt></block></for>

    <comment type="block" pos:line="83" pos:column="5">/* now sort the cookie pointers in path length order */</comment>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">qsort<pos:position pos:line="84" pos:column="10"/></name><argument_list pos:line="84" pos:column="10">(<argument><expr><name pos:line="84" pos:column="11">array<pos:position pos:line="84" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="18">matches<pos:position pos:line="84" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="84" pos:column="27">sizeof<argument_list pos:line="84" pos:column="33">(<argument><expr pos:line="84" pos:column="34">struct <name pos:line="84" pos:column="41">Cookie<pos:position pos:line="84" pos:column="47"/></name> <operator pos:line="84" pos:column="48">*<pos:position pos:line="84" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="84" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="84" pos:column="52">cookie_sort<pos:position pos:line="84" pos:column="63"/></name></expr></argument>)<pos:position pos:line="84" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="65"/></expr_stmt>

    <comment type="block" pos:line="86" pos:column="5">/* remake the linked list order according to the new order */</comment>

    <expr_stmt><expr><name pos:line="88" pos:column="5">mainco<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">=<pos:position pos:line="88" pos:column="13"/></operator> <name><name pos:line="88" pos:column="14">array<pos:position pos:line="88" pos:column="19"/></name><index pos:line="88" pos:column="19">[<expr><literal type="number" pos:line="88" pos:column="20">0<pos:position pos:line="88" pos:column="21"/></literal></expr>]<pos:position pos:line="88" pos:column="22"/></index></name></expr>;<pos:position pos:line="88" pos:column="23"/></expr_stmt> <comment type="block" pos:line="88" pos:column="24">/* start here */</comment>
    <for pos:line="89" pos:column="5">for<control pos:line="89" pos:column="8">(<init><expr><name pos:line="89" pos:column="9">i<pos:position pos:line="89" pos:column="10"/></name><operator pos:line="89" pos:column="10">=<pos:position pos:line="89" pos:column="11"/></operator><literal type="number" pos:line="89" pos:column="11">0<pos:position pos:line="89" pos:column="12"/></literal></expr>;<pos:position pos:line="89" pos:column="13"/></init> <condition><expr><name pos:line="89" pos:column="14">i<pos:position pos:line="89" pos:column="15"/></name><operator pos:line="89" pos:column="15">&lt;<pos:position pos:line="89" pos:column="19"/></operator><name pos:line="89" pos:column="16">matches<pos:position pos:line="89" pos:column="23"/></name><operator pos:line="89" pos:column="23">-<pos:position pos:line="89" pos:column="24"/></operator><literal type="number" pos:line="89" pos:column="24">1<pos:position pos:line="89" pos:column="25"/></literal></expr>;<pos:position pos:line="89" pos:column="26"/></condition> <incr><expr><name pos:line="89" pos:column="27">i<pos:position pos:line="89" pos:column="28"/></name><operator pos:line="89" pos:column="28">++<pos:position pos:line="89" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="89" pos:column="31"/></control>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="90" pos:column="7">array<pos:position pos:line="90" pos:column="12"/></name><index pos:line="90" pos:column="12">[<expr><name pos:line="90" pos:column="13">i<pos:position pos:line="90" pos:column="14"/></name></expr>]<pos:position pos:line="90" pos:column="15"/></index></name><operator pos:line="90" pos:column="15">-&gt;<pos:position pos:line="90" pos:column="20"/></operator><name pos:line="90" pos:column="17">next<pos:position pos:line="90" pos:column="21"/></name> <operator pos:line="90" pos:column="22">=<pos:position pos:line="90" pos:column="23"/></operator> <name><name pos:line="90" pos:column="24">array<pos:position pos:line="90" pos:column="29"/></name><index pos:line="90" pos:column="29">[<expr><name pos:line="90" pos:column="30">i<pos:position pos:line="90" pos:column="31"/></name><operator pos:line="90" pos:column="31">+<pos:position pos:line="90" pos:column="32"/></operator><literal type="number" pos:line="90" pos:column="32">1<pos:position pos:line="90" pos:column="33"/></literal></expr>]<pos:position pos:line="90" pos:column="34"/></index></name></expr>;<pos:position pos:line="90" pos:column="35"/></expr_stmt></block></for>
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">array<pos:position pos:line="91" pos:column="10"/></name><index pos:line="91" pos:column="10">[<expr><name pos:line="91" pos:column="11">matches<pos:position pos:line="91" pos:column="18"/></name><operator pos:line="91" pos:column="18">-<pos:position pos:line="91" pos:column="19"/></operator><literal type="number" pos:line="91" pos:column="19">1<pos:position pos:line="91" pos:column="20"/></literal></expr>]<pos:position pos:line="91" pos:column="21"/></index></name><operator pos:line="91" pos:column="21">-&gt;<pos:position pos:line="91" pos:column="26"/></operator><name pos:line="91" pos:column="23">next<pos:position pos:line="91" pos:column="27"/></name> <operator pos:line="91" pos:column="28">=<pos:position pos:line="91" pos:column="29"/></operator> <name pos:line="91" pos:column="30">NULL<pos:position pos:line="91" pos:column="34"/></name></expr>;<pos:position pos:line="91" pos:column="35"/></expr_stmt> <comment type="block" pos:line="91" pos:column="36">/* terminate the list */</comment>

    <expr_stmt><expr><call><name pos:line="93" pos:column="5">free<pos:position pos:line="93" pos:column="9"/></name><argument_list pos:line="93" pos:column="9">(<argument><expr><name pos:line="93" pos:column="10">array<pos:position pos:line="93" pos:column="15"/></name></expr></argument>)<pos:position pos:line="93" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="17"/></expr_stmt> <comment type="block" pos:line="93" pos:column="18">/* remove the temporary data again */</comment>
  }<pos:position pos:line="94" pos:column="4"/></block></then></if>

  <return pos:line="96" pos:column="3">return <expr><name pos:line="96" pos:column="10">mainco<pos:position pos:line="96" pos:column="16"/></name></expr>;<pos:position pos:line="96" pos:column="17"/></return> <comment type="block" pos:line="96" pos:column="18">/* return the new list */</comment>
}<pos:position pos:line="97" pos:column="2"/></block></function></unit>
