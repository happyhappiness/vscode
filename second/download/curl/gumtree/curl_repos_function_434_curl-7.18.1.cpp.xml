<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_434_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">Transfer<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name><name pos:line="2" pos:column="10">struct<pos:position pos:line="2" pos:column="16"/></name> <name pos:line="2" pos:column="17">connectdata<pos:position pos:line="2" pos:column="28"/></name></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">conn<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SessionHandle<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">data<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name><name pos:line="5" pos:column="32">conn<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">data<pos:position pos:line="5" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SingleRequest<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">k<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name><name pos:line="6" pos:column="30">data<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">-&gt;<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="36">req<pos:position pos:line="6" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">done<pos:position pos:line="7" pos:column="12"/></name><init pos:line="7" pos:column="12">=<expr><name pos:line="7" pos:column="13">FALSE<pos:position pos:line="7" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><operator pos:line="9" pos:column="6">(<pos:position pos:line="9" pos:column="7"/></operator><name><name pos:line="9" pos:column="7">conn<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">sockfd<pos:position pos:line="9" pos:column="19"/></name></name> <operator pos:line="9" pos:column="20">==<pos:position pos:line="9" pos:column="22"/></operator> <name pos:line="9" pos:column="23">CURL_SOCKET_BAD<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">)<pos:position pos:line="9" pos:column="39"/></operator> <operator pos:line="9" pos:column="40">&amp;&amp;<pos:position pos:line="9" pos:column="50"/></operator>
     <operator pos:line="10" pos:column="6">(<pos:position pos:line="10" pos:column="7"/></operator><name><name pos:line="10" pos:column="7">conn<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">-&gt;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="13">writesockfd<pos:position pos:line="10" pos:column="24"/></name></name> <operator pos:line="10" pos:column="25">==<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="28">CURL_SOCKET_BAD<pos:position pos:line="10" pos:column="43"/></name><operator pos:line="10" pos:column="43">)<pos:position pos:line="10" pos:column="44"/></operator></expr>)<pos:position pos:line="10" pos:column="45"/></condition><then pos:line="10" pos:column="45">
    <comment type="block" pos:line="11" pos:column="5">/* nothing to read, nothing to write, we're already OK! */</comment>
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">CURLE_OK<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></return></block></then></if>

  <comment type="block" pos:line="14" pos:column="3">/* we want header and/or body, if neither then don't do this! */</comment>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">!<pos:position pos:line="15" pos:column="7"/></operator><name><name pos:line="15" pos:column="7">k<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">getheader<pos:position pos:line="15" pos:column="19"/></name></name> <operator pos:line="15" pos:column="20">&amp;&amp;<pos:position pos:line="15" pos:column="30"/></operator> <name><name pos:line="15" pos:column="23">data<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">-&gt;<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="29">set<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">.<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="33">opt_no_body<pos:position pos:line="15" pos:column="44"/></name></name></expr>)<pos:position pos:line="15" pos:column="45"/></condition><then pos:line="15" pos:column="45">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">CURLE_OK<pos:position pos:line="16" pos:column="20"/></name></expr>;<pos:position pos:line="16" pos:column="21"/></return></block></then></if>

  <while pos:line="18" pos:column="3">while<condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">done<pos:position pos:line="18" pos:column="14"/></name></expr>)<pos:position pos:line="18" pos:column="15"/></condition> <block pos:line="18" pos:column="16">{
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">curl_socket_t<pos:position pos:line="19" pos:column="18"/></name></type> <name pos:line="19" pos:column="19">fd_read<pos:position pos:line="19" pos:column="26"/></name></decl>;<pos:position pos:line="19" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">curl_socket_t<pos:position pos:line="20" pos:column="18"/></name></type> <name pos:line="20" pos:column="19">fd_write<pos:position pos:line="20" pos:column="27"/></name></decl>;<pos:position pos:line="20" pos:column="28"/></decl_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* limit-rate logic: if speed exceeds threshold, then do not include fd in
       select set. The current speed is recalculated in each Curl_readwrite()
       call */</comment>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><operator pos:line="25" pos:column="8">(<pos:position pos:line="25" pos:column="9"/></operator><name><name pos:line="25" pos:column="9">k<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">keepon<pos:position pos:line="25" pos:column="18"/></name></name> <operator pos:line="25" pos:column="19">&amp;<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="21">KEEP_WRITE<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">)<pos:position pos:line="25" pos:column="32"/></operator> <operator pos:line="25" pos:column="33">&amp;&amp;<pos:position pos:line="25" pos:column="43"/></operator>
        <operator pos:line="26" pos:column="9">(<pos:position pos:line="26" pos:column="10"/></operator><operator pos:line="26" pos:column="10">!<pos:position pos:line="26" pos:column="11"/></operator><name><name pos:line="26" pos:column="11">data<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">-&gt;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="17">set<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">.<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">max_send_speed<pos:position pos:line="26" pos:column="35"/></name></name> <operator pos:line="26" pos:column="36">||<pos:position pos:line="26" pos:column="38"/></operator>
         <operator pos:line="27" pos:column="10">(<pos:position pos:line="27" pos:column="11"/></operator><name><name pos:line="27" pos:column="11">data<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">progress<pos:position pos:line="27" pos:column="25"/></name><operator pos:line="27" pos:column="25">.<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="26">ulspeed<pos:position pos:line="27" pos:column="33"/></name></name> <operator pos:line="27" pos:column="34">&lt;<pos:position pos:line="27" pos:column="38"/></operator> <name><name pos:line="27" pos:column="36">data<pos:position pos:line="27" pos:column="40"/></name><operator pos:line="27" pos:column="40">-&gt;<pos:position pos:line="27" pos:column="45"/></operator><name pos:line="27" pos:column="42">set<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">.<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="46">max_send_speed<pos:position pos:line="27" pos:column="60"/></name></name><operator pos:line="27" pos:column="60">)<pos:position pos:line="27" pos:column="61"/></operator> <operator pos:line="27" pos:column="62">)<pos:position pos:line="27" pos:column="63"/></operator></expr>)<pos:position pos:line="27" pos:column="64"/></condition><then pos:line="27" pos:column="64"> <block pos:line="27" pos:column="65">{
      <expr_stmt><expr><name pos:line="28" pos:column="7">fd_write<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <name><name pos:line="28" pos:column="18">conn<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">-&gt;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="24">writesockfd<pos:position pos:line="28" pos:column="35"/></name></name></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="29" pos:column="7">k<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">-&gt;<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="10">keepon<pos:position pos:line="29" pos:column="16"/></name></name> <operator pos:line="29" pos:column="17">&amp;=<pos:position pos:line="29" pos:column="23"/></operator> <operator pos:line="29" pos:column="20">~<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="21">KEEP_WRITE_HOLD<pos:position pos:line="29" pos:column="36"/></name></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then>
    <else pos:line="31" pos:column="5">else <block pos:line="31" pos:column="10">{
      <expr_stmt><expr><name pos:line="32" pos:column="7">fd_write<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <name pos:line="32" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
      <if pos:line="33" pos:column="7">if<condition pos:line="33" pos:column="9">(<expr><name><name pos:line="33" pos:column="10">k<pos:position pos:line="33" pos:column="11"/></name><operator pos:line="33" pos:column="11">-&gt;<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="13">keepon<pos:position pos:line="33" pos:column="19"/></name></name> <operator pos:line="33" pos:column="20">&amp;<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="22">KEEP_WRITE<pos:position pos:line="33" pos:column="32"/></name></expr>)<pos:position pos:line="33" pos:column="33"/></condition><then pos:line="33" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="9">k<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">keepon<pos:position pos:line="34" pos:column="18"/></name></name> <operator pos:line="34" pos:column="19">|=<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">KEEP_WRITE_HOLD<pos:position pos:line="34" pos:column="37"/></name></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt></block></then></if> <comment type="block" pos:line="34" pos:column="39">/* hold it */</comment>
    }<pos:position pos:line="35" pos:column="6"/></block></else></if>

    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">(<expr><operator pos:line="37" pos:column="8">(<pos:position pos:line="37" pos:column="9"/></operator><name><name pos:line="37" pos:column="9">k<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">keepon<pos:position pos:line="37" pos:column="18"/></name></name> <operator pos:line="37" pos:column="19">&amp;<pos:position pos:line="37" pos:column="24"/></operator> <name pos:line="37" pos:column="21">KEEP_READ<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">)<pos:position pos:line="37" pos:column="31"/></operator> <operator pos:line="37" pos:column="32">&amp;&amp;<pos:position pos:line="37" pos:column="42"/></operator>
        <operator pos:line="38" pos:column="9">(<pos:position pos:line="38" pos:column="10"/></operator><operator pos:line="38" pos:column="10">!<pos:position pos:line="38" pos:column="11"/></operator><name><name pos:line="38" pos:column="11">data<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">-&gt;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="17">set<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">.<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="21">max_recv_speed<pos:position pos:line="38" pos:column="35"/></name></name> <operator pos:line="38" pos:column="36">||<pos:position pos:line="38" pos:column="38"/></operator>
         <operator pos:line="39" pos:column="10">(<pos:position pos:line="39" pos:column="11"/></operator><name><name pos:line="39" pos:column="11">data<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">-&gt;<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="17">progress<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">.<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="26">dlspeed<pos:position pos:line="39" pos:column="33"/></name></name> <operator pos:line="39" pos:column="34">&lt;<pos:position pos:line="39" pos:column="38"/></operator> <name><name pos:line="39" pos:column="36">data<pos:position pos:line="39" pos:column="40"/></name><operator pos:line="39" pos:column="40">-&gt;<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="42">set<pos:position pos:line="39" pos:column="45"/></name><operator pos:line="39" pos:column="45">.<pos:position pos:line="39" pos:column="46"/></operator><name pos:line="39" pos:column="46">max_recv_speed<pos:position pos:line="39" pos:column="60"/></name></name><operator pos:line="39" pos:column="60">)<pos:position pos:line="39" pos:column="61"/></operator><operator pos:line="39" pos:column="61">)<pos:position pos:line="39" pos:column="62"/></operator></expr> )<pos:position pos:line="39" pos:column="64"/></condition><then pos:line="39" pos:column="64"> <block pos:line="39" pos:column="65">{
      <expr_stmt><expr><name pos:line="40" pos:column="7">fd_read<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">=<pos:position pos:line="40" pos:column="16"/></operator> <name><name pos:line="40" pos:column="17">conn<pos:position pos:line="40" pos:column="21"/></name><operator pos:line="40" pos:column="21">-&gt;<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="23">sockfd<pos:position pos:line="40" pos:column="29"/></name></name></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="41" pos:column="7">k<pos:position pos:line="41" pos:column="8"/></name><operator pos:line="41" pos:column="8">-&gt;<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="10">keepon<pos:position pos:line="41" pos:column="16"/></name></name> <operator pos:line="41" pos:column="17">&amp;=<pos:position pos:line="41" pos:column="23"/></operator> <operator pos:line="41" pos:column="20">~<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="21">KEEP_READ_HOLD<pos:position pos:line="41" pos:column="35"/></name></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
    <else pos:line="43" pos:column="5">else <block pos:line="43" pos:column="10">{
      <expr_stmt><expr><name pos:line="44" pos:column="7">fd_read<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <name pos:line="44" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="44" pos:column="32"/></name></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><name><name pos:line="45" pos:column="10">k<pos:position pos:line="45" pos:column="11"/></name><operator pos:line="45" pos:column="11">-&gt;<pos:position pos:line="45" pos:column="16"/></operator><name pos:line="45" pos:column="13">keepon<pos:position pos:line="45" pos:column="19"/></name></name> <operator pos:line="45" pos:column="20">&amp;<pos:position pos:line="45" pos:column="25"/></operator> <name pos:line="45" pos:column="22">KEEP_READ<pos:position pos:line="45" pos:column="31"/></name></expr>)<pos:position pos:line="45" pos:column="32"/></condition><then pos:line="45" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="46" pos:column="9">k<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">-&gt;<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="12">keepon<pos:position pos:line="46" pos:column="18"/></name></name> <operator pos:line="46" pos:column="19">|=<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="22">KEEP_READ_HOLD<pos:position pos:line="46" pos:column="36"/></name></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt></block></then></if> <comment type="block" pos:line="46" pos:column="38">/* hold it */</comment>
    }<pos:position pos:line="47" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="49" pos:column="5">/* pause logic. Don't check descriptors for paused connections */</comment>
    <if pos:line="50" pos:column="5">if<condition pos:line="50" pos:column="7">(<expr><name><name pos:line="50" pos:column="8">k<pos:position pos:line="50" pos:column="9"/></name><operator pos:line="50" pos:column="9">-&gt;<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="11">keepon<pos:position pos:line="50" pos:column="17"/></name></name> <operator pos:line="50" pos:column="18">&amp;<pos:position pos:line="50" pos:column="23"/></operator> <name pos:line="50" pos:column="20">KEEP_READ_PAUSE<pos:position pos:line="50" pos:column="35"/></name></expr>)<pos:position pos:line="50" pos:column="36"/></condition><then pos:line="50" pos:column="36">
      <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="7">fd_read<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">=<pos:position pos:line="51" pos:column="16"/></operator> <name pos:line="51" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="51" pos:column="32"/></name></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt></block></then></if>
    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><name><name pos:line="52" pos:column="8">k<pos:position pos:line="52" pos:column="9"/></name><operator pos:line="52" pos:column="9">-&gt;<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="11">keepon<pos:position pos:line="52" pos:column="17"/></name></name> <operator pos:line="52" pos:column="18">&amp;<pos:position pos:line="52" pos:column="23"/></operator> <name pos:line="52" pos:column="20">KEEP_WRITE_PAUSE<pos:position pos:line="52" pos:column="36"/></name></expr>)<pos:position pos:line="52" pos:column="37"/></condition><then pos:line="52" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="7">fd_write<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="53" pos:column="33"/></name></expr>;<pos:position pos:line="53" pos:column="34"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="55" pos:column="5">/* The *_HOLD and *_PAUSE logic is necessary since even though there might
       be no traffic during the select interval, we still call
       Curl_readwrite() for the timeout case and if we limit transfer speed we
       must make sure that this function doesn't transfer anything while in
       HOLD status. */</comment>

    <switch pos:line="61" pos:column="5">switch <condition pos:line="61" pos:column="12">(<expr><call><name pos:line="61" pos:column="13">Curl_socket_ready<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><name pos:line="61" pos:column="31">fd_read<pos:position pos:line="61" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="40">fd_write<pos:position pos:line="61" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="50">1000<pos:position pos:line="61" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="56"/></condition> <block pos:line="61" pos:column="57">{
    <case pos:line="62" pos:column="5">case <expr><operator pos:line="62" pos:column="10">-<pos:position pos:line="62" pos:column="11"/></operator><literal type="number" pos:line="62" pos:column="11">1<pos:position pos:line="62" pos:column="12"/></literal></expr>:<pos:position pos:line="62" pos:column="13"/></case> <comment type="block" pos:line="62" pos:column="14">/* select() error, stop reading */</comment>
<cpp:ifdef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifdef<pos:position pos:line="63" pos:column="7"/></cpp:directive> <name pos:line="63" pos:column="8">EINTR<pos:position pos:line="63" pos:column="13"/></name></cpp:ifdef>
      <comment type="block" pos:line="64" pos:column="7">/* The EINTR is not serious, and it seems you might get this more
         ofen when using the lib in a multi-threaded environment! */</comment>
      <if pos:line="66" pos:column="7">if<condition pos:line="66" pos:column="9">(<expr><name pos:line="66" pos:column="10">SOCKERRNO<pos:position pos:line="66" pos:column="19"/></name> <operator pos:line="66" pos:column="20">==<pos:position pos:line="66" pos:column="22"/></operator> <name pos:line="66" pos:column="23">EINTR<pos:position pos:line="66" pos:column="28"/></name></expr>)<pos:position pos:line="66" pos:column="29"/></condition><then pos:line="66" pos:column="29">
        <block type="pseudo"><empty_stmt pos:line="67" pos:column="9">;<pos:position pos:line="67" pos:column="10"/></empty_stmt></block></then>
      <else pos:line="68" pos:column="7">else
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="9">done<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">=<pos:position pos:line="70" pos:column="15"/></operator> <name pos:line="70" pos:column="16">TRUE<pos:position pos:line="70" pos:column="20"/></name></expr>;<pos:position pos:line="70" pos:column="21"/></expr_stmt></block></else></if> <comment type="block" pos:line="70" pos:column="22">/* no more read or write */</comment>
      <continue pos:line="71" pos:column="7">continue;<pos:position pos:line="71" pos:column="16"/></continue>
    <case pos:line="72" pos:column="5">case <expr><literal type="number" pos:line="72" pos:column="10">0<pos:position pos:line="72" pos:column="11"/></literal></expr>:<pos:position pos:line="72" pos:column="12"/></case>  <comment type="block" pos:line="72" pos:column="14">/* timeout */</comment>
    <default pos:line="73" pos:column="5">default:<pos:position pos:line="73" pos:column="13"/></default> <comment type="block" pos:line="73" pos:column="14">/* readable descriptors */</comment>

      <expr_stmt><expr><name pos:line="75" pos:column="7">result<pos:position pos:line="75" pos:column="13"/></name> <operator pos:line="75" pos:column="14">=<pos:position pos:line="75" pos:column="15"/></operator> <call><name pos:line="75" pos:column="16">Curl_readwrite<pos:position pos:line="75" pos:column="30"/></name><argument_list pos:line="75" pos:column="30">(<argument><expr><name pos:line="75" pos:column="31">conn<pos:position pos:line="75" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="37">&amp;<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="38">done<pos:position pos:line="75" pos:column="42"/></name></expr></argument>)<pos:position pos:line="75" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="44"/></expr_stmt>
      <break pos:line="76" pos:column="7">break;<pos:position pos:line="76" pos:column="13"/></break>
    }<pos:position pos:line="77" pos:column="6"/></block></switch>
    <if pos:line="78" pos:column="5">if<condition pos:line="78" pos:column="7">(<expr><name pos:line="78" pos:column="8">result<pos:position pos:line="78" pos:column="14"/></name></expr>)<pos:position pos:line="78" pos:column="15"/></condition><then pos:line="78" pos:column="15">
      <block type="pseudo"><return pos:line="79" pos:column="7">return <expr><name pos:line="79" pos:column="14">result<pos:position pos:line="79" pos:column="20"/></name></expr>;<pos:position pos:line="79" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="81" pos:column="5">/* "done" signals to us if the transfer(s) are ready */</comment>
  }<pos:position pos:line="82" pos:column="4"/></block></while>

  <return pos:line="84" pos:column="3">return <expr><name pos:line="84" pos:column="10">CURLE_OK<pos:position pos:line="84" pos:column="18"/></name></expr>;<pos:position pos:line="84" pos:column="19"/></return>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
