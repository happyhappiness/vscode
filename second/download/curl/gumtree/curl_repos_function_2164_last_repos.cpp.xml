<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2164_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_pp_statemach<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">pingpong<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">pp<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">bool<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">block<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">connectdata<pos:position pos:line="3" pos:column="21"/></name></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">conn<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><name><name pos:line="3" pos:column="30">pp<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">conn<pos:position pos:line="3" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">sock<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name><name pos:line="4" pos:column="24">conn<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">sock<pos:position pos:line="4" pos:column="34"/></name><index pos:line="4" pos:column="34">[<expr><name pos:line="4" pos:column="35">FIRSTSOCKET<pos:position pos:line="4" pos:column="46"/></name></expr>]<pos:position pos:line="4" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">time_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">interval_ms<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">time_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">timeout_ms<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><call><name pos:line="7" pos:column="23">Curl_pp_state_timeout<pos:position pos:line="7" pos:column="44"/></name><argument_list pos:line="7" pos:column="44">(<argument><expr><name pos:line="7" pos:column="45">pp<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Curl_easy<pos:position pos:line="8" pos:column="19"/></name></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">data<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name><name pos:line="8" pos:column="28">conn<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">-&gt;<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="34">data<pos:position pos:line="8" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">CURLcode<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">result<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><name pos:line="9" pos:column="21">CURLE_OK<pos:position pos:line="9" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">timeout_ms<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&lt;=<pos:position pos:line="11" pos:column="22"/></operator> <literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr>)<pos:position pos:line="11" pos:column="22"/></condition><then pos:line="11" pos:column="22"> <block pos:line="11" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">failf<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><name pos:line="12" pos:column="11">data<pos:position pos:line="12" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="17">"server response timeout"<pos:position pos:line="12" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="13" pos:column="36"/></name></expr>;<pos:position pos:line="13" pos:column="37"/></return> <comment type="block" pos:line="13" pos:column="38">/* already too little time */</comment>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">block<pos:position pos:line="16" pos:column="11"/></name></expr>)<pos:position pos:line="16" pos:column="12"/></condition><then pos:line="16" pos:column="12"> <block pos:line="16" pos:column="13">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">interval_ms<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <literal type="number" pos:line="17" pos:column="19">1000<pos:position pos:line="17" pos:column="23"/></literal></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>  <comment type="block" pos:line="17" pos:column="26">/* use 1 second timeout intervals */</comment>
    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">(<expr><name pos:line="18" pos:column="8">timeout_ms<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&lt;<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="21">interval_ms<pos:position pos:line="18" pos:column="32"/></name></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="7">interval_ms<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">timeout_ms<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt></block></then></if>
  }<pos:position pos:line="20" pos:column="4"/></block></then>
  <else pos:line="21" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="5">interval_ms<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <literal type="number" pos:line="22" pos:column="19">0<pos:position pos:line="22" pos:column="20"/></literal></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt></block></else></if> <comment type="block" pos:line="22" pos:column="22">/* immediate */</comment>

  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><call><name pos:line="24" pos:column="6">Curl_ssl_data_pending<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">conn<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">FIRSTSOCKET<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="47"/></condition><then pos:line="24" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="5">rc<pos:position pos:line="25" pos:column="7"/></name> <operator pos:line="25" pos:column="8">=<pos:position pos:line="25" pos:column="9"/></operator> <literal type="number" pos:line="25" pos:column="10">1<pos:position pos:line="25" pos:column="11"/></literal></expr>;<pos:position pos:line="25" pos:column="12"/></expr_stmt></block></then>
  <elseif pos:line="26" pos:column="3">else <if pos:line="26" pos:column="8">if<condition pos:line="26" pos:column="10">(<expr><call><name pos:line="26" pos:column="11">Curl_pp_moredata<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">pp<pos:position pos:line="26" pos:column="30"/></name></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32">
    <comment type="block" pos:line="27" pos:column="5">/* We are receiving and there is data in the cache so just read it */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="5">rc<pos:position pos:line="28" pos:column="7"/></name> <operator pos:line="28" pos:column="8">=<pos:position pos:line="28" pos:column="9"/></operator> <literal type="number" pos:line="28" pos:column="10">1<pos:position pos:line="28" pos:column="11"/></literal></expr>;<pos:position pos:line="28" pos:column="12"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="29" pos:column="3">else <if pos:line="29" pos:column="8">if<condition pos:line="29" pos:column="10">(<expr><operator pos:line="29" pos:column="11">!<pos:position pos:line="29" pos:column="12"/></operator><name><name pos:line="29" pos:column="12">pp<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">sendleft<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">&amp;&amp;<pos:position pos:line="29" pos:column="35"/></operator> <call><name pos:line="29" pos:column="28">Curl_ssl_data_pending<pos:position pos:line="29" pos:column="49"/></name><argument_list pos:line="29" pos:column="49">(<argument><expr><name pos:line="29" pos:column="50">conn<pos:position pos:line="29" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="56">FIRSTSOCKET<pos:position pos:line="29" pos:column="67"/></name></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="69"/></condition><then pos:line="29" pos:column="69">
    <comment type="block" pos:line="30" pos:column="5">/* We are receiving and there is data ready in the SSL library */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="5">rc<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <literal type="number" pos:line="31" pos:column="10">1<pos:position pos:line="31" pos:column="11"/></literal></expr>;<pos:position pos:line="31" pos:column="12"/></expr_stmt></block></then></if></elseif>
  <else pos:line="32" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="5">rc<pos:position pos:line="33" pos:column="7"/></name> <operator pos:line="33" pos:column="8">=<pos:position pos:line="33" pos:column="9"/></operator> <call><name pos:line="33" pos:column="10">Curl_socket_check<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><ternary><condition><expr><name><name pos:line="33" pos:column="28">pp<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">-&gt;<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="32">sendleft<pos:position pos:line="33" pos:column="40"/></name></name></expr>?<pos:position pos:line="33" pos:column="41"/></condition><then><expr><name pos:line="33" pos:column="41">CURL_SOCKET_BAD<pos:position pos:line="33" pos:column="56"/></name></expr></then><else pos:line="33" pos:column="56">:<expr><name pos:line="33" pos:column="57">sock<pos:position pos:line="33" pos:column="61"/></name></expr></else></ternary></expr></argument>, <comment type="block" pos:line="33" pos:column="63">/* reading */</comment>
                           <argument><expr><name pos:line="34" pos:column="28">CURL_SOCKET_BAD<pos:position pos:line="34" pos:column="43"/></name></expr></argument>,
                           <argument><expr><ternary><condition><expr><name><name pos:line="35" pos:column="28">pp<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">-&gt;<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="32">sendleft<pos:position pos:line="35" pos:column="40"/></name></name></expr>?<pos:position pos:line="35" pos:column="41"/></condition><then><expr><name pos:line="35" pos:column="41">sock<pos:position pos:line="35" pos:column="45"/></name></expr></then><else pos:line="35" pos:column="45">:<expr><name pos:line="35" pos:column="46">CURL_SOCKET_BAD<pos:position pos:line="35" pos:column="61"/></name></expr></else></ternary></expr></argument>, <comment type="block" pos:line="35" pos:column="63">/* writing */</comment>
                           <argument><expr><name pos:line="36" pos:column="28">interval_ms<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt></block></else></if>

  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><name pos:line="38" pos:column="6">block<pos:position pos:line="38" pos:column="11"/></name></expr>)<pos:position pos:line="38" pos:column="12"/></condition><then pos:line="38" pos:column="12"> <block pos:line="38" pos:column="13">{
    <comment type="block" pos:line="39" pos:column="5">/* if we didn't wait, we don't have to spend time on this now */</comment>
    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><call><name pos:line="40" pos:column="8">Curl_pgrsUpdate<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">conn<pos:position pos:line="40" pos:column="28"/></name></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="30"/></condition><then pos:line="40" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="7">result<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <name pos:line="41" pos:column="16">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="41" pos:column="41"/></name></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt></block></then>
    <else pos:line="42" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="7">result<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <call><name pos:line="43" pos:column="16">Curl_speedcheck<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">data<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="38">Curl_tvnow<pos:position pos:line="43" pos:column="48"/></name><argument_list pos:line="43" pos:column="48">()<pos:position pos:line="43" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt></block></else></if>

    <if pos:line="45" pos:column="5">if<condition pos:line="45" pos:column="7">(<expr><name pos:line="45" pos:column="8">result<pos:position pos:line="45" pos:column="14"/></name></expr>)<pos:position pos:line="45" pos:column="15"/></condition><then pos:line="45" pos:column="15">
      <block type="pseudo"><return pos:line="46" pos:column="7">return <expr><name pos:line="46" pos:column="14">result<pos:position pos:line="46" pos:column="20"/></name></expr>;<pos:position pos:line="46" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><name pos:line="49" pos:column="6">rc<pos:position pos:line="49" pos:column="8"/></name> <operator pos:line="49" pos:column="9">==<pos:position pos:line="49" pos:column="11"/></operator> <operator pos:line="49" pos:column="12">-<pos:position pos:line="49" pos:column="13"/></operator><literal type="number" pos:line="49" pos:column="13">1<pos:position pos:line="49" pos:column="14"/></literal></expr>)<pos:position pos:line="49" pos:column="15"/></condition><then pos:line="49" pos:column="15"> <block pos:line="49" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">failf<pos:position pos:line="50" pos:column="10"/></name><argument_list pos:line="50" pos:column="10">(<argument><expr><name pos:line="50" pos:column="11">data<pos:position pos:line="50" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="17">"select/poll error"<pos:position pos:line="50" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="51" pos:column="5">result<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">=<pos:position pos:line="51" pos:column="13"/></operator> <name pos:line="51" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="51" pos:column="33"/></name></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="52" pos:column="4"/></block></then>
  <elseif pos:line="53" pos:column="3">else <if pos:line="53" pos:column="8">if<condition pos:line="53" pos:column="10">(<expr><name pos:line="53" pos:column="11">rc<pos:position pos:line="53" pos:column="13"/></name></expr>)<pos:position pos:line="53" pos:column="14"/></condition><then pos:line="53" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="5">result<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">=<pos:position pos:line="54" pos:column="13"/></operator> <call><name><name pos:line="54" pos:column="14">pp<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">-&gt;<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="18">statemach_act<pos:position pos:line="54" pos:column="31"/></name></name><argument_list pos:line="54" pos:column="31">(<argument><expr><name pos:line="54" pos:column="32">conn<pos:position pos:line="54" pos:column="36"/></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt></block></then></if></elseif></if>

  <return pos:line="56" pos:column="3">return <expr><name pos:line="56" pos:column="10">result<pos:position pos:line="56" pos:column="16"/></name></expr>;<pos:position pos:line="56" pos:column="17"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
