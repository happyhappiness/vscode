<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_932_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">tool_setopt<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">CURL<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">curl<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">bool<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">str<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">GlobalConfig<pos:position pos:line="1" pos:column="63"/></name></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">config<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">name<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">CURLoption<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">tag<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="2" pos:column="56">...<pos:position pos:line="2" pos:column="59"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">va_list<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">arg<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">buf<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><literal type="number" pos:line="5" pos:column="12">256<pos:position pos:line="5" pos:column="15"/></literal></expr>]<pos:position pos:line="5" pos:column="16"/></index></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">value<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">remark<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name pos:line="7" pos:column="17">FALSE<pos:position pos:line="7" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">skip<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name pos:line="8" pos:column="15">FALSE<pos:position pos:line="8" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">bool<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">escape<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><name pos:line="9" pos:column="17">FALSE<pos:position pos:line="9" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">escaped<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><name pos:line="10" pos:column="19">NULL<pos:position pos:line="10" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CURLcode<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">ret<pos:position pos:line="11" pos:column="15"/></name> <init pos:line="11" pos:column="16">= <expr><name pos:line="11" pos:column="18">CURLE_OK<pos:position pos:line="11" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">va_start<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name pos:line="13" pos:column="12">arg<pos:position pos:line="13" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="17">tag<pos:position pos:line="13" pos:column="20"/></name></expr></argument>)<pos:position pos:line="13" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name pos:line="15" pos:column="6">tag<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">&lt;<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="12">CURLOPTTYPE_OBJECTPOINT<pos:position pos:line="15" pos:column="35"/></name></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <block pos:line="15" pos:column="37">{
    <comment type="block" pos:line="16" pos:column="5">/* Value is expected to be a long */</comment>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">long<pos:position pos:line="17" pos:column="9"/></name></type> <name pos:line="17" pos:column="10">lval<pos:position pos:line="17" pos:column="14"/></name> <init pos:line="17" pos:column="15">= <expr><call><name pos:line="17" pos:column="17">va_arg<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">arg<pos:position pos:line="17" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="29">long<pos:position pos:line="17" pos:column="33"/></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">long<pos:position pos:line="18" pos:column="9"/></name></type> <name pos:line="18" pos:column="10">defval<pos:position pos:line="18" pos:column="16"/></name> <init pos:line="18" pos:column="17">= <expr><literal type="number" pos:line="18" pos:column="19">0L<pos:position pos:line="18" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="19" pos:column="5">const<pos:position pos:line="19" pos:column="10"/></specifier> <name pos:line="19" pos:column="11">NameValue<pos:position pos:line="19" pos:column="20"/></name> <modifier pos:line="19" pos:column="21">*<pos:position pos:line="19" pos:column="22"/></modifier></type><name pos:line="19" pos:column="22">nv<pos:position pos:line="19" pos:column="24"/></name> <init pos:line="19" pos:column="25">= <expr><name pos:line="19" pos:column="27">NULL<pos:position pos:line="19" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="32"/></decl_stmt>
    <for pos:line="20" pos:column="5">for<control pos:line="20" pos:column="8">(<init><expr><name pos:line="20" pos:column="9">nv<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name pos:line="20" pos:column="14">setopt_nv_CURLNONZERODEFAULTS<pos:position pos:line="20" pos:column="43"/></name></expr>;<pos:position pos:line="20" pos:column="44"/></init> <condition><expr><name><name pos:line="20" pos:column="45">nv<pos:position pos:line="20" pos:column="47"/></name><operator pos:line="20" pos:column="47">-&gt;<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="49">name<pos:position pos:line="20" pos:column="53"/></name></name></expr>;<pos:position pos:line="20" pos:column="54"/></condition> <incr><expr><name pos:line="20" pos:column="55">nv<pos:position pos:line="20" pos:column="57"/></name><operator pos:line="20" pos:column="57">++<pos:position pos:line="20" pos:column="59"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="60"/></control> <block pos:line="20" pos:column="61">{
      <if pos:line="21" pos:column="7">if<condition pos:line="21" pos:column="9">(<expr><operator pos:line="21" pos:column="10">!<pos:position pos:line="21" pos:column="11"/></operator><call><name pos:line="21" pos:column="11">strcmp<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">name<pos:position pos:line="21" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="24">nv<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">-&gt;<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="28">name<pos:position pos:line="21" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">defval<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <name><name pos:line="22" pos:column="18">nv<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">-&gt;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="22">value<pos:position pos:line="22" pos:column="27"/></name></name></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
        <break pos:line="23" pos:column="9">break;<pos:position pos:line="23" pos:column="15"/></break> <comment type="block" pos:line="23" pos:column="16">/* found it */</comment>
      }<pos:position pos:line="24" pos:column="8"/></block></then></if>
    }<pos:position pos:line="25" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">snprintf<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name pos:line="27" pos:column="14">buf<pos:position pos:line="27" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="19">sizeof<argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">buf<pos:position pos:line="27" pos:column="29"/></name></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="32">"%ldL"<pos:position pos:line="27" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="40">lval<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">value<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <name pos:line="28" pos:column="13">buf<pos:position pos:line="28" pos:column="16"/></name></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">ret<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <call><name pos:line="29" pos:column="11">curl_easy_setopt<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">curl<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="34">tag<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">lval<pos:position pos:line="29" pos:column="43"/></name></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>
    <if pos:line="30" pos:column="5">if<condition pos:line="30" pos:column="7">(<expr><name pos:line="30" pos:column="8">lval<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">==<pos:position pos:line="30" pos:column="15"/></operator> <name pos:line="30" pos:column="16">defval<pos:position pos:line="30" pos:column="22"/></name></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="7">skip<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <name pos:line="31" pos:column="14">TRUE<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></expr_stmt></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then>
  <elseif pos:line="33" pos:column="3">else <if pos:line="33" pos:column="8">if<condition pos:line="33" pos:column="10">(<expr><name pos:line="33" pos:column="11">tag<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">&lt;<pos:position pos:line="33" pos:column="19"/></operator> <name pos:line="33" pos:column="17">CURLOPTTYPE_OFF_T<pos:position pos:line="33" pos:column="34"/></name></expr>)<pos:position pos:line="33" pos:column="35"/></condition><then pos:line="33" pos:column="35"> <block pos:line="33" pos:column="36">{
    <comment type="block" pos:line="34" pos:column="5">/* Value is some sort of object pointer */</comment>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">void<pos:position pos:line="35" pos:column="9"/></name> <modifier pos:line="35" pos:column="10">*<pos:position pos:line="35" pos:column="11"/></modifier></type><name pos:line="35" pos:column="11">pval<pos:position pos:line="35" pos:column="15"/></name> <init pos:line="35" pos:column="16">= <expr><call><name pos:line="35" pos:column="18">va_arg<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">arg<pos:position pos:line="35" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="30">void<pos:position pos:line="35" pos:column="34"/></name> <operator pos:line="35" pos:column="35">*<pos:position pos:line="35" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="38"/></decl_stmt>

    <comment type="block" pos:line="37" pos:column="5">/* function pointers are never printable */</comment>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">tag<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">&gt;=<pos:position pos:line="38" pos:column="17"/></operator> <name pos:line="38" pos:column="15">CURLOPTTYPE_FUNCTIONPOINT<pos:position pos:line="38" pos:column="40"/></name></expr>)<pos:position pos:line="38" pos:column="41"/></condition><then pos:line="38" pos:column="41"> <block pos:line="38" pos:column="42">{
      <if pos:line="39" pos:column="7">if<condition pos:line="39" pos:column="9">(<expr><name pos:line="39" pos:column="10">pval<pos:position pos:line="39" pos:column="14"/></name></expr>)<pos:position pos:line="39" pos:column="15"/></condition><then pos:line="39" pos:column="15"> <block pos:line="39" pos:column="16">{
        <expr_stmt><expr><name pos:line="40" pos:column="9">value<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">=<pos:position pos:line="40" pos:column="16"/></operator> <literal type="string" pos:line="40" pos:column="17">"functionpointer"<pos:position pos:line="40" pos:column="34"/></literal></expr>;<pos:position pos:line="40" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">remark<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <name pos:line="41" pos:column="18">TRUE<pos:position pos:line="41" pos:column="22"/></name></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="42" pos:column="8"/></block></then>
      <else pos:line="43" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="9">skip<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <name pos:line="44" pos:column="16">TRUE<pos:position pos:line="44" pos:column="20"/></name></expr>;<pos:position pos:line="44" pos:column="21"/></expr_stmt></block></else></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then>

    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if<condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">pval<pos:position pos:line="47" pos:column="17"/></name> <operator pos:line="47" pos:column="18">&amp;&amp;<pos:position pos:line="47" pos:column="28"/></operator> <name pos:line="47" pos:column="21">str<pos:position pos:line="47" pos:column="24"/></name></expr>)<pos:position pos:line="47" pos:column="25"/></condition><then pos:line="47" pos:column="25"> <block pos:line="47" pos:column="26">{
      <expr_stmt><expr><name pos:line="48" pos:column="7">value<pos:position pos:line="48" pos:column="12"/></name> <operator pos:line="48" pos:column="13">=<pos:position pos:line="48" pos:column="14"/></operator> <operator pos:line="48" pos:column="15">(<pos:position pos:line="48" pos:column="16"/></operator><name pos:line="48" pos:column="16">char<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">*<pos:position pos:line="48" pos:column="22"/></operator><operator pos:line="48" pos:column="22">)<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">pval<pos:position pos:line="48" pos:column="27"/></name></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="49" pos:column="7">escape<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <name pos:line="49" pos:column="16">TRUE<pos:position pos:line="49" pos:column="20"/></name></expr>;<pos:position pos:line="49" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="51" pos:column="5">else <if pos:line="51" pos:column="10">if<condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">pval<pos:position pos:line="51" pos:column="17"/></name></expr>)<pos:position pos:line="51" pos:column="18"/></condition><then pos:line="51" pos:column="18"> <block pos:line="51" pos:column="19">{
      <expr_stmt><expr><name pos:line="52" pos:column="7">value<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <literal type="string" pos:line="52" pos:column="15">"objectpointer"<pos:position pos:line="52" pos:column="30"/></literal></expr>;<pos:position pos:line="52" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="53" pos:column="7">remark<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <name pos:line="53" pos:column="16">TRUE<pos:position pos:line="53" pos:column="20"/></name></expr>;<pos:position pos:line="53" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if></elseif>
    <else pos:line="55" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="7">skip<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator> <name pos:line="56" pos:column="14">TRUE<pos:position pos:line="56" pos:column="18"/></name></expr>;<pos:position pos:line="56" pos:column="19"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="58" pos:column="5">ret<pos:position pos:line="58" pos:column="8"/></name> <operator pos:line="58" pos:column="9">=<pos:position pos:line="58" pos:column="10"/></operator> <call><name pos:line="58" pos:column="11">curl_easy_setopt<pos:position pos:line="58" pos:column="27"/></name><argument_list pos:line="58" pos:column="27">(<argument><expr><name pos:line="58" pos:column="28">curl<pos:position pos:line="58" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">tag<pos:position pos:line="58" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="39">pval<pos:position pos:line="58" pos:column="43"/></name></expr></argument>)<pos:position pos:line="58" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="45"/></expr_stmt>

  }<pos:position pos:line="60" pos:column="4"/></block></then></if></elseif>
  <else pos:line="61" pos:column="3">else <block pos:line="61" pos:column="8">{
    <comment type="block" pos:line="62" pos:column="5">/* Value is expected to be curl_off_t */</comment>
    <decl_stmt><decl><type><name pos:line="63" pos:column="5">curl_off_t<pos:position pos:line="63" pos:column="15"/></name></type> <name pos:line="63" pos:column="16">oval<pos:position pos:line="63" pos:column="20"/></name> <init pos:line="63" pos:column="21">= <expr><call><name pos:line="63" pos:column="23">va_arg<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">arg<pos:position pos:line="63" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="35">curl_off_t<pos:position pos:line="63" pos:column="45"/></name></expr></argument>)<pos:position pos:line="63" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="63" pos:column="47"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">snprintf<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><name pos:line="64" pos:column="14">buf<pos:position pos:line="64" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="19">sizeof<argument_list pos:line="64" pos:column="25">(<argument><expr><name pos:line="64" pos:column="26">buf<pos:position pos:line="64" pos:column="29"/></name></expr></argument>)<pos:position pos:line="64" pos:column="30"/></argument_list></sizeof></expr></argument>,
             <argument><expr><literal type="string" pos:line="65" pos:column="14">"(curl_off_t)%"<pos:position pos:line="65" pos:column="29"/></literal> <name pos:line="65" pos:column="30">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="65" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="54">oval<pos:position pos:line="65" pos:column="58"/></name></expr></argument>)<pos:position pos:line="65" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name pos:line="66" pos:column="5">value<pos:position pos:line="66" pos:column="10"/></name> <operator pos:line="66" pos:column="11">=<pos:position pos:line="66" pos:column="12"/></operator> <name pos:line="66" pos:column="13">buf<pos:position pos:line="66" pos:column="16"/></name></expr>;<pos:position pos:line="66" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="67" pos:column="5">ret<pos:position pos:line="67" pos:column="8"/></name> <operator pos:line="67" pos:column="9">=<pos:position pos:line="67" pos:column="10"/></operator> <call><name pos:line="67" pos:column="11">curl_easy_setopt<pos:position pos:line="67" pos:column="27"/></name><argument_list pos:line="67" pos:column="27">(<argument><expr><name pos:line="67" pos:column="28">curl<pos:position pos:line="67" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="34">tag<pos:position pos:line="67" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="39">oval<pos:position pos:line="67" pos:column="43"/></name></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>

    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">(<expr><operator pos:line="69" pos:column="8">!<pos:position pos:line="69" pos:column="9"/></operator><name pos:line="69" pos:column="9">oval<pos:position pos:line="69" pos:column="13"/></name></expr>)<pos:position pos:line="69" pos:column="14"/></condition><then pos:line="69" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="7">skip<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">=<pos:position pos:line="70" pos:column="13"/></operator> <name pos:line="70" pos:column="14">TRUE<pos:position pos:line="70" pos:column="18"/></name></expr>;<pos:position pos:line="70" pos:column="19"/></expr_stmt></block></then></if>
  }<pos:position pos:line="71" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="73" pos:column="3">va_end<pos:position pos:line="73" pos:column="9"/></name><argument_list pos:line="73" pos:column="9">(<argument><expr><name pos:line="73" pos:column="10">arg<pos:position pos:line="73" pos:column="13"/></name></expr></argument>)<pos:position pos:line="73" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="15"/></expr_stmt>

  <if pos:line="75" pos:column="3">if<condition pos:line="75" pos:column="5">(<expr><name><name pos:line="75" pos:column="6">config<pos:position pos:line="75" pos:column="12"/></name><operator pos:line="75" pos:column="12">-&gt;<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="14">libcurl<pos:position pos:line="75" pos:column="21"/></name></name> <operator pos:line="75" pos:column="22">&amp;&amp;<pos:position pos:line="75" pos:column="32"/></operator> <operator pos:line="75" pos:column="25">!<pos:position pos:line="75" pos:column="26"/></operator><name pos:line="75" pos:column="26">skip<pos:position pos:line="75" pos:column="30"/></name> <operator pos:line="75" pos:column="31">&amp;&amp;<pos:position pos:line="75" pos:column="41"/></operator> <operator pos:line="75" pos:column="34">!<pos:position pos:line="75" pos:column="35"/></operator><name pos:line="75" pos:column="35">ret<pos:position pos:line="75" pos:column="38"/></name></expr>)<pos:position pos:line="75" pos:column="39"/></condition><then pos:line="75" pos:column="39"> <block pos:line="75" pos:column="40">{
    <comment type="block" pos:line="76" pos:column="5">/* we only use this for real if --libcurl was used */</comment>

    <if pos:line="78" pos:column="5">if<condition pos:line="78" pos:column="7">(<expr><name pos:line="78" pos:column="8">remark<pos:position pos:line="78" pos:column="14"/></name></expr>)<pos:position pos:line="78" pos:column="15"/></condition><then pos:line="78" pos:column="15">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="7">REM2<pos:position pos:line="79" pos:column="11"/></name><argument_list pos:line="79" pos:column="11">(<argument><expr><literal type="string" pos:line="79" pos:column="12">"%s set to a %s"<pos:position pos:line="79" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="30">name<pos:position pos:line="79" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="36">value<pos:position pos:line="79" pos:column="41"/></name></expr></argument>)<pos:position pos:line="79" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="43"/></expr_stmt></block></then>
    <else pos:line="80" pos:column="5">else <block pos:line="80" pos:column="10">{
      <if pos:line="81" pos:column="7">if<condition pos:line="81" pos:column="9">(<expr><name pos:line="81" pos:column="10">escape<pos:position pos:line="81" pos:column="16"/></name></expr>)<pos:position pos:line="81" pos:column="17"/></condition><then pos:line="81" pos:column="17"> <block pos:line="81" pos:column="18">{
        <expr_stmt><expr><name pos:line="82" pos:column="9">escaped<pos:position pos:line="82" pos:column="16"/></name> <operator pos:line="82" pos:column="17">=<pos:position pos:line="82" pos:column="18"/></operator> <call><name pos:line="82" pos:column="19">c_escape<pos:position pos:line="82" pos:column="27"/></name><argument_list pos:line="82" pos:column="27">(<argument><expr><name pos:line="82" pos:column="28">value<pos:position pos:line="82" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="35">CURL_ZERO_TERMINATED<pos:position pos:line="82" pos:column="55"/></name></expr></argument>)<pos:position pos:line="82" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="57"/></expr_stmt>
        <if pos:line="83" pos:column="9">if<condition pos:line="83" pos:column="11">(<expr><operator pos:line="83" pos:column="12">!<pos:position pos:line="83" pos:column="13"/></operator><name pos:line="83" pos:column="13">escaped<pos:position pos:line="83" pos:column="20"/></name></expr>)<pos:position pos:line="83" pos:column="21"/></condition><then pos:line="83" pos:column="21"> <block pos:line="83" pos:column="22">{
          <expr_stmt><expr><name pos:line="84" pos:column="11">ret<pos:position pos:line="84" pos:column="14"/></name> <operator pos:line="84" pos:column="15">=<pos:position pos:line="84" pos:column="16"/></operator> <name pos:line="84" pos:column="17">CURLE_OUT_OF_MEMORY<pos:position pos:line="84" pos:column="36"/></name></expr>;<pos:position pos:line="84" pos:column="37"/></expr_stmt>
          <goto pos:line="85" pos:column="11">goto <name pos:line="85" pos:column="16">nomem<pos:position pos:line="85" pos:column="21"/></name>;<pos:position pos:line="85" pos:column="22"/></goto>
        }<pos:position pos:line="86" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">CODE2<pos:position pos:line="87" pos:column="14"/></name><argument_list pos:line="87" pos:column="14">(<argument><expr><literal type="string" pos:line="87" pos:column="15">"curl_easy_setopt(hnd, %s, \"%s\");"<pos:position pos:line="87" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="53">name<pos:position pos:line="87" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="59">escaped<pos:position pos:line="87" pos:column="66"/></name></expr></argument>)<pos:position pos:line="87" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="68"/></expr_stmt>
      }<pos:position pos:line="88" pos:column="8"/></block></then>
      <else pos:line="89" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="9">CODE2<pos:position pos:line="90" pos:column="14"/></name><argument_list pos:line="90" pos:column="14">(<argument><expr><literal type="string" pos:line="90" pos:column="15">"curl_easy_setopt(hnd, %s, %s);"<pos:position pos:line="90" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="49">name<pos:position pos:line="90" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="55">value<pos:position pos:line="90" pos:column="60"/></name></expr></argument>)<pos:position pos:line="90" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="62"/></expr_stmt></block></else></if>
    }<pos:position pos:line="91" pos:column="6"/></block></else></if>
  }<pos:position pos:line="92" pos:column="4"/></block></then></if>

 <label><name pos:line="94" pos:column="2">nomem<pos:position pos:line="94" pos:column="7"/></name>:<pos:position pos:line="94" pos:column="8"/></label>
  <expr_stmt><expr><call><name pos:line="95" pos:column="3">Curl_safefree<pos:position pos:line="95" pos:column="16"/></name><argument_list pos:line="95" pos:column="16">(<argument><expr><name pos:line="95" pos:column="17">escaped<pos:position pos:line="95" pos:column="24"/></name></expr></argument>)<pos:position pos:line="95" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="26"/></expr_stmt>
  <return pos:line="96" pos:column="3">return <expr><name pos:line="96" pos:column="10">ret<pos:position pos:line="96" pos:column="13"/></name></expr>;<pos:position pos:line="96" pos:column="14"/></return>
}<pos:position pos:line="97" pos:column="2"/></block></function></unit>
