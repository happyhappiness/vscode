<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_501.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Curl_addrinfo<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">Curl_he2ai<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">hostent<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">he<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">int<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">port<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">Curl_addrinfo<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">ai<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">Curl_addrinfo<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">prevai<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name pos:line="4" pos:column="27">NULL<pos:position pos:line="4" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">Curl_addrinfo<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">firstai<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">sockaddr_in<pos:position pos:line="6" pos:column="21"/></name></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">addr<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">in_addr<pos:position pos:line="8" pos:column="17"/></name></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">curr<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">he<pos:position pos:line="10" pos:column="9"/></name></expr>)<pos:position pos:line="10" pos:column="10"/></condition><then pos:line="10" pos:column="10">
    <comment type="block" pos:line="11" pos:column="5">/* no input == no output! */</comment>
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return></block></then></if>

  <for pos:line="14" pos:column="3">for<control pos:line="14" pos:column="6">(<init><expr><name pos:line="14" pos:column="7">i<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">=<pos:position pos:line="14" pos:column="9"/></operator><literal type="number" pos:line="14" pos:column="9">0<pos:position pos:line="14" pos:column="10"/></literal></expr>;<pos:position pos:line="14" pos:column="11"/></init> <condition><expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">curr<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <operator pos:line="14" pos:column="20">(<pos:position pos:line="14" pos:column="21"/></operator>struct <name pos:line="14" pos:column="28">in_addr<pos:position pos:line="14" pos:column="35"/></name> <operator pos:line="14" pos:column="36">*<pos:position pos:line="14" pos:column="37"/></operator><operator pos:line="14" pos:column="37">)<pos:position pos:line="14" pos:column="38"/></operator><name><name pos:line="14" pos:column="38">he<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">-&gt;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="42">h_addr_list<pos:position pos:line="14" pos:column="53"/></name><index pos:line="14" pos:column="53">[<expr><name pos:line="14" pos:column="54">i<pos:position pos:line="14" pos:column="55"/></name></expr>]<pos:position pos:line="14" pos:column="56"/></index></name><operator pos:line="14" pos:column="56">)<pos:position pos:line="14" pos:column="57"/></operator></expr>;<pos:position pos:line="14" pos:column="58"/></condition> <incr><expr><name pos:line="14" pos:column="59">i<pos:position pos:line="14" pos:column="60"/></name><operator pos:line="14" pos:column="60">++<pos:position pos:line="14" pos:column="62"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="63"/></control> <block pos:line="14" pos:column="64">{

    <expr_stmt><expr><name pos:line="16" pos:column="5">ai<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <call><name pos:line="16" pos:column="10">calloc<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">(<argument><expr><literal type="number" pos:line="16" pos:column="17">1<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="20">sizeof<argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">Curl_addrinfo<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></sizeof> <operator pos:line="16" pos:column="42">+<pos:position pos:line="16" pos:column="43"/></operator> <sizeof pos:line="16" pos:column="44">sizeof<argument_list pos:line="16" pos:column="50">(<argument><expr pos:line="16" pos:column="51">struct <name pos:line="16" pos:column="58">sockaddr_in<pos:position pos:line="16" pos:column="69"/></name></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="72"/></expr_stmt>

    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">(<expr><operator pos:line="18" pos:column="8">!<pos:position pos:line="18" pos:column="9"/></operator><name pos:line="18" pos:column="9">ai<pos:position pos:line="18" pos:column="11"/></name></expr>)<pos:position pos:line="18" pos:column="12"/></condition><then pos:line="18" pos:column="12">
      <block type="pseudo"><break pos:line="19" pos:column="7">break;<pos:position pos:line="19" pos:column="13"/></break></block></then></if>

    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><operator pos:line="21" pos:column="8">!<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">firstai<pos:position pos:line="21" pos:column="16"/></name></expr>)<pos:position pos:line="21" pos:column="17"/></condition><then pos:line="21" pos:column="17">
      <comment type="block" pos:line="22" pos:column="7">/* store the pointer we want to return from this function */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="7">firstai<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <name pos:line="23" pos:column="17">ai<pos:position pos:line="23" pos:column="19"/></name></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt></block></then></if>

    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">prevai<pos:position pos:line="25" pos:column="14"/></name></expr>)<pos:position pos:line="25" pos:column="15"/></condition><then pos:line="25" pos:column="15">
      <comment type="block" pos:line="26" pos:column="7">/* make the previous entry point to this */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="7">prevai<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">-&gt;<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="15">ai_next<pos:position pos:line="27" pos:column="22"/></name></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">ai<pos:position pos:line="27" pos:column="27"/></name></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="29" pos:column="5">ai<pos:position pos:line="29" pos:column="7"/></name><operator pos:line="29" pos:column="7">-&gt;<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="9">ai_family<pos:position pos:line="29" pos:column="18"/></name></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">AF_INET<pos:position pos:line="29" pos:column="28"/></name></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>              <comment type="block" pos:line="29" pos:column="43">/* we only support this */</comment>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">ai<pos:position pos:line="30" pos:column="7"/></name><operator pos:line="30" pos:column="7">-&gt;<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="9">ai_socktype<pos:position pos:line="30" pos:column="20"/></name></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <name pos:line="30" pos:column="23">SOCK_STREAM<pos:position pos:line="30" pos:column="34"/></name></expr>;<pos:position pos:line="30" pos:column="35"/></expr_stmt>        <comment type="block" pos:line="30" pos:column="43">/* we only support this */</comment>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">ai<pos:position pos:line="31" pos:column="7"/></name><operator pos:line="31" pos:column="7">-&gt;<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="9">ai_addrlen<pos:position pos:line="31" pos:column="19"/></name></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <sizeof pos:line="31" pos:column="22">sizeof<argument_list pos:line="31" pos:column="28">(<argument><expr pos:line="31" pos:column="29">struct <name pos:line="31" pos:column="36">sockaddr_in<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></sizeof></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
    <comment type="block" pos:line="32" pos:column="5">/* make the ai_addr point to the address immediately following this struct
       and use that area to store the address */</comment>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">ai<pos:position pos:line="34" pos:column="7"/></name><operator pos:line="34" pos:column="7">-&gt;<pos:position pos:line="34" pos:column="12"/></operator><name pos:line="34" pos:column="9">ai_addr<pos:position pos:line="34" pos:column="16"/></name></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <operator pos:line="34" pos:column="19">(<pos:position pos:line="34" pos:column="20"/></operator>struct <name pos:line="34" pos:column="27">sockaddr<pos:position pos:line="34" pos:column="35"/></name> <operator pos:line="34" pos:column="36">*<pos:position pos:line="34" pos:column="37"/></operator><operator pos:line="34" pos:column="37">)<pos:position pos:line="34" pos:column="38"/></operator> <operator pos:line="34" pos:column="39">(<pos:position pos:line="34" pos:column="40"/></operator><operator pos:line="34" pos:column="40">(<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="41">char<pos:position pos:line="34" pos:column="45"/></name><operator pos:line="34" pos:column="45">*<pos:position pos:line="34" pos:column="46"/></operator><operator pos:line="34" pos:column="46">)<pos:position pos:line="34" pos:column="47"/></operator><name pos:line="34" pos:column="47">ai<pos:position pos:line="34" pos:column="49"/></name> <operator pos:line="34" pos:column="50">+<pos:position pos:line="34" pos:column="51"/></operator> <sizeof pos:line="34" pos:column="52">sizeof<argument_list pos:line="34" pos:column="58">(<argument><expr><name pos:line="34" pos:column="59">Curl_addrinfo<pos:position pos:line="34" pos:column="72"/></name></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></sizeof><operator pos:line="34" pos:column="73">)<pos:position pos:line="34" pos:column="74"/></operator></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* leave the rest of the struct filled with zero */</comment>

    <expr_stmt><expr><name pos:line="38" pos:column="5">addr<pos:position pos:line="38" pos:column="9"/></name> <operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator> <operator pos:line="38" pos:column="12">(<pos:position pos:line="38" pos:column="13"/></operator>struct <name pos:line="38" pos:column="20">sockaddr_in<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">*<pos:position pos:line="38" pos:column="33"/></operator><operator pos:line="38" pos:column="33">)<pos:position pos:line="38" pos:column="34"/></operator><name><name pos:line="38" pos:column="34">ai<pos:position pos:line="38" pos:column="36"/></name><operator pos:line="38" pos:column="36">-&gt;<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="38">ai_addr<pos:position pos:line="38" pos:column="45"/></name></name></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt> <comment type="block" pos:line="38" pos:column="47">/* storage area for this info */</comment>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">memcpy<pos:position pos:line="40" pos:column="11"/></name><argument_list pos:line="40" pos:column="11">(<argument><expr><operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="13">char<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">*<pos:position pos:line="40" pos:column="19"/></operator><operator pos:line="40" pos:column="19">)<pos:position pos:line="40" pos:column="20"/></operator><operator pos:line="40" pos:column="20">&amp;<pos:position pos:line="40" pos:column="25"/></operator><operator pos:line="40" pos:column="21">(<pos:position pos:line="40" pos:column="22"/></operator><name><name pos:line="40" pos:column="22">addr<pos:position pos:line="40" pos:column="26"/></name><operator pos:line="40" pos:column="26">-&gt;<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="28">sin_addr<pos:position pos:line="40" pos:column="36"/></name></name><operator pos:line="40" pos:column="36">)<pos:position pos:line="40" pos:column="37"/></operator></expr></argument>, <argument><expr><name pos:line="40" pos:column="39">curr<pos:position pos:line="40" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="45">sizeof<argument_list pos:line="40" pos:column="51">(<argument><expr pos:line="40" pos:column="52">struct <name pos:line="40" pos:column="59">in_addr<pos:position pos:line="40" pos:column="66"/></name></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">addr<pos:position pos:line="41" pos:column="9"/></name><operator pos:line="41" pos:column="9">-&gt;<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="11">sin_family<pos:position pos:line="41" pos:column="21"/></name></name> <operator pos:line="41" pos:column="22">=<pos:position pos:line="41" pos:column="23"/></operator> <name><name pos:line="41" pos:column="24">he<pos:position pos:line="41" pos:column="26"/></name><operator pos:line="41" pos:column="26">-&gt;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="28">h_addrtype<pos:position pos:line="41" pos:column="38"/></name></name></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="42" pos:column="5">addr<pos:position pos:line="42" pos:column="9"/></name><operator pos:line="42" pos:column="9">-&gt;<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="11">sin_port<pos:position pos:line="42" pos:column="19"/></name></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <call><name pos:line="42" pos:column="22">htons<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><operator pos:line="42" pos:column="28">(<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="29">unsigned<pos:position pos:line="42" pos:column="37"/></name> <name pos:line="42" pos:column="38">short<pos:position pos:line="42" pos:column="43"/></name><operator pos:line="42" pos:column="43">)<pos:position pos:line="42" pos:column="44"/></operator><name pos:line="42" pos:column="44">port<pos:position pos:line="42" pos:column="48"/></name></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><name pos:line="44" pos:column="5">prevai<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <name pos:line="44" pos:column="14">ai<pos:position pos:line="44" pos:column="16"/></name></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="45" pos:column="4"/></block></for>
  <return pos:line="46" pos:column="3">return <expr><name pos:line="46" pos:column="10">firstai<pos:position pos:line="46" pos:column="17"/></name></expr>;<pos:position pos:line="46" pos:column="18"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
