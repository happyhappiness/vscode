<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1816_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">int2str<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">beg<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">end<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">long<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">val<pos:position pos:line="3" pos:column="11"/></name> <init pos:line="3" pos:column="12">= <expr><literal type="number" pos:line="3" pos:column="14">0<pos:position pos:line="3" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">n<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><name pos:line="4" pos:column="14">end<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">-<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="20">beg<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Convert an ASN.1 integer value into its string representation.
     Return the dynamically allocated string, or NULL if source is not an
     ASN.1 integer value. */</comment>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">n<pos:position pos:line="10" pos:column="8"/></name></expr>)<pos:position pos:line="10" pos:column="9"/></condition><then pos:line="10" pos:column="9">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><specifier pos:line="11" pos:column="13">const<pos:position pos:line="11" pos:column="18"/></specifier> <name pos:line="11" pos:column="19">char<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></operator><operator pos:line="11" pos:column="25">)<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">NULL<pos:position pos:line="11" pos:column="31"/></name></expr>;<pos:position pos:line="11" pos:column="32"/></return></block></then></if>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">n<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">&gt;<pos:position pos:line="13" pos:column="12"/></operator> <literal type="number" pos:line="13" pos:column="10">4<pos:position pos:line="13" pos:column="11"/></literal></expr>)<pos:position pos:line="13" pos:column="12"/></condition><then pos:line="13" pos:column="12">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><call><name pos:line="14" pos:column="12">octet2str<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">beg<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">end<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></return></block></then></if>

  <comment type="block" pos:line="16" pos:column="3">/* Represent integers &lt;= 32-bit as a single value. */</comment>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">*<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">beg<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">&amp;<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="13">0x80<pos:position pos:line="17" pos:column="17"/></literal></expr>)<pos:position pos:line="17" pos:column="18"/></condition><then pos:line="17" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="5">val<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <operator pos:line="18" pos:column="11">~<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">val<pos:position pos:line="18" pos:column="15"/></name></expr>;<pos:position pos:line="18" pos:column="16"/></expr_stmt></block></then></if>

  <do pos:line="20" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="5">val<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <operator pos:line="21" pos:column="11">(<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">val<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">&lt;&lt;<pos:position pos:line="21" pos:column="24"/></operator> <literal type="number" pos:line="21" pos:column="19">8<pos:position pos:line="21" pos:column="20"/></literal><operator pos:line="21" pos:column="20">)<pos:position pos:line="21" pos:column="21"/></operator> <operator pos:line="21" pos:column="22">|<pos:position pos:line="21" pos:column="23"/></operator> <operator pos:line="21" pos:column="24">*<pos:position pos:line="21" pos:column="25"/></operator><operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><specifier pos:line="21" pos:column="26">const<pos:position pos:line="21" pos:column="31"/></specifier> <name pos:line="21" pos:column="32">unsigned<pos:position pos:line="21" pos:column="40"/></name> <name pos:line="21" pos:column="41">char<pos:position pos:line="21" pos:column="45"/></name> <operator pos:line="21" pos:column="46">*<pos:position pos:line="21" pos:column="47"/></operator><operator pos:line="21" pos:column="47">)<pos:position pos:line="21" pos:column="48"/></operator> <name pos:line="21" pos:column="49">beg<pos:position pos:line="21" pos:column="52"/></name><operator pos:line="21" pos:column="52">++<pos:position pos:line="21" pos:column="54"/></operator></expr>;<pos:position pos:line="21" pos:column="55"/></expr_stmt></block>
  while<condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">beg<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">&lt;<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="15">end<pos:position pos:line="22" pos:column="18"/></name></expr>)<pos:position pos:line="22" pos:column="19"/></condition>;<pos:position pos:line="22" pos:column="20"/></do>
  <return pos:line="23" pos:column="3">return <expr><call><name pos:line="23" pos:column="10">curl_maprintf<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><literal type="string" pos:line="23" pos:column="24">"%s%lx"<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="23" pos:column="33">(<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="34">val<pos:position pos:line="23" pos:column="37"/></name> <operator pos:line="23" pos:column="38">&lt;<pos:position pos:line="23" pos:column="42"/></operator> <literal type="number" pos:line="23" pos:column="40">0<pos:position pos:line="23" pos:column="41"/></literal> <operator pos:line="23" pos:column="42">||<pos:position pos:line="23" pos:column="44"/></operator> <name pos:line="23" pos:column="45">val<pos:position pos:line="23" pos:column="48"/></name> <operator pos:line="23" pos:column="49">&gt;=<pos:position pos:line="23" pos:column="54"/></operator> <literal type="number" pos:line="23" pos:column="52">10<pos:position pos:line="23" pos:column="54"/></literal><operator pos:line="23" pos:column="54">)<pos:position pos:line="23" pos:column="55"/></operator></expr>?<pos:position pos:line="23" pos:column="56"/></condition><then pos:line="23" pos:column="56"> <expr><literal type="string" pos:line="23" pos:column="57">"0x"<pos:position pos:line="23" pos:column="61"/></literal></expr></then><else pos:line="23" pos:column="61">: <expr><literal type="string" pos:line="23" pos:column="63">""<pos:position pos:line="23" pos:column="65"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="23" pos:column="67">val<pos:position pos:line="23" pos:column="70"/></name></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="72"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
