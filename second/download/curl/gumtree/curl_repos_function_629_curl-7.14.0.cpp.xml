<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_629_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">dynafunc<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">DynaGetFunction<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">name<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">dynafunc<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">func<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><operator pos:line="3" pos:column="19">(<pos:position pos:line="3" pos:column="20"/></operator><name pos:line="3" pos:column="20">dynafunc<pos:position pos:line="3" pos:column="28"/></name><operator pos:line="3" pos:column="28">)<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="29">NULL<pos:position pos:line="3" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>

<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><call><name pos:line="5" pos:column="5">defined<pos:position pos:line="5" pos:column="12"/></name><argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">HAVE_DLOPEN<pos:position pos:line="5" pos:column="24"/></name></expr></argument>)<pos:position pos:line="5" pos:column="25"/></argument_list></call> <operator pos:line="5" pos:column="26">||<pos:position pos:line="5" pos:column="28"/></operator> <call><name pos:line="5" pos:column="29">defined<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">(<argument><expr><name pos:line="5" pos:column="37">HAVE_LIBDL<pos:position pos:line="5" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr></cpp:if>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">libldap<pos:position pos:line="6" pos:column="14"/></name></expr>)<pos:position pos:line="6" pos:column="15"/></condition><then pos:line="6" pos:column="15"> <block pos:line="6" pos:column="16">{
    <comment type="block" pos:line="7" pos:column="5">/* This typecast magic below was brought by Joe Halpin. In ISO C, you
     * cannot typecast a data pointer to a function pointer, but that's
     * exactly what we need to do here to avoid compiler warnings on picky
     * compilers! */</comment>
    <expr_stmt><expr><operator pos:line="11" pos:column="5">*<pos:position pos:line="11" pos:column="6"/></operator><operator pos:line="11" pos:column="6">(<pos:position pos:line="11" pos:column="7"/></operator><name pos:line="11" pos:column="7">void<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">*<pos:position pos:line="11" pos:column="12"/></operator><operator pos:line="11" pos:column="12">*<pos:position pos:line="11" pos:column="13"/></operator><operator pos:line="11" pos:column="13">)<pos:position pos:line="11" pos:column="14"/></operator> <operator pos:line="11" pos:column="15">(<pos:position pos:line="11" pos:column="16"/></operator><operator pos:line="11" pos:column="16">&amp;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="17">func<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">)<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <call><name pos:line="11" pos:column="25">dlsym<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">libldap<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">name<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
<cpp:elif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">elif<pos:position pos:line="13" pos:column="6"/></cpp:directive> <expr><call><name pos:line="13" pos:column="7">defined<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">WIN32<pos:position pos:line="13" pos:column="20"/></name></expr></argument>)<pos:position pos:line="13" pos:column="21"/></argument_list></call></expr></cpp:elif>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">libldap<pos:position pos:line="14" pos:column="14"/></name></expr>)<pos:position pos:line="14" pos:column="15"/></condition><then pos:line="14" pos:column="15"> <block pos:line="14" pos:column="16">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">func<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">dynafunc<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">)<pos:position pos:line="15" pos:column="22"/></operator><call><name pos:line="15" pos:column="22">GetProcAddress<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><operator pos:line="15" pos:column="37">(<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="38">HINSTANCE<pos:position pos:line="15" pos:column="47"/></name><operator pos:line="15" pos:column="47">)<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="48">libldap<pos:position pos:line="15" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">name<pos:position pos:line="15" pos:column="61"/></name></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="63"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>
<cpp:else pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">else<pos:position pos:line="17" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="18" pos:column="3">(<pos:position pos:line="18" pos:column="4"/></operator><name pos:line="18" pos:column="4">void<pos:position pos:line="18" pos:column="8"/></name><operator pos:line="18" pos:column="8">)<pos:position pos:line="18" pos:column="9"/></operator> <name pos:line="18" pos:column="10">name<pos:position pos:line="18" pos:column="14"/></name></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="20" pos:column="3">return <expr><name pos:line="20" pos:column="10">func<pos:position pos:line="20" pos:column="14"/></name></expr>;<pos:position pos:line="20" pos:column="15"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
