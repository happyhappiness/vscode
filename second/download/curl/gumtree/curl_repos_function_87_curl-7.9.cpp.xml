<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_87_curl-7.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">curl_dofree<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">ptr<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">line<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">source<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if<condition pos:line="3" pos:column="5">(<expr><name pos:line="3" pos:column="6">NULL<pos:position pos:line="3" pos:column="10"/></name> <operator pos:line="3" pos:column="11">==<pos:position pos:line="3" pos:column="13"/></operator> <name pos:line="3" pos:column="14">ptr<pos:position pos:line="3" pos:column="17"/></name></expr>)<pos:position pos:line="3" pos:column="18"/></condition><then pos:line="3" pos:column="18"> <block pos:line="3" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">fprintf<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">stderr<pos:position pos:line="4" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="21">"ILLEGAL free() on NULL at %s:%d\n"<pos:position pos:line="4" pos:column="56"/></literal></expr></argument>,
            <argument><expr><name pos:line="5" pos:column="13">source<pos:position pos:line="5" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="21">line<pos:position pos:line="5" pos:column="25"/></name></expr></argument>)<pos:position pos:line="5" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">exit<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><literal type="number" pos:line="6" pos:column="10">2<pos:position pos:line="6" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="7" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call pos:line="9" pos:column="3">(<name pos:line="9" pos:column="4">free<pos:position pos:line="9" pos:column="8"/></name>)<argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">ptr<pos:position pos:line="9" pos:column="13"/></name></expr></argument>)<pos:position pos:line="9" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">fprintf<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">(<argument><expr><ternary><condition><expr><name pos:line="11" pos:column="11">logfile<pos:position pos:line="11" pos:column="18"/></name></expr>?<pos:position pos:line="11" pos:column="19"/></condition><then><expr><name pos:line="11" pos:column="19">logfile<pos:position pos:line="11" pos:column="26"/></name></expr></then><else pos:line="11" pos:column="26">:<expr><name pos:line="11" pos:column="27">stderr<pos:position pos:line="11" pos:column="33"/></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">"MEM %s:%d free(%p)\n"<pos:position pos:line="11" pos:column="57"/></literal></expr></argument>,
          <argument><expr><name pos:line="12" pos:column="11">source<pos:position pos:line="12" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="19">line<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="25">ptr<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
