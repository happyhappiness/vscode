<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2463_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">schannel_connect_step2<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">connectdata<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">conn<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">sockindex<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">i<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ssize_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">nread<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><operator pos:line="5" pos:column="19">-<pos:position pos:line="5" pos:column="20"/></operator><literal type="number" pos:line="5" pos:column="20">1<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="23">written<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><operator pos:line="5" pos:column="33">-<pos:position pos:line="5" pos:column="34"/></operator><literal type="number" pos:line="5" pos:column="34">1<pos:position pos:line="5" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">data<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">ssl_connect_data<pos:position pos:line="7" pos:column="26"/></name></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">connssl<pos:position pos:line="7" pos:column="35"/></name> <init pos:line="7" pos:column="36">= <expr><operator pos:line="7" pos:column="38">&amp;<pos:position pos:line="7" pos:column="43"/></operator><name><name pos:line="7" pos:column="39">conn<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">ssl<pos:position pos:line="7" pos:column="48"/></name><index pos:line="7" pos:column="48">[<expr><name pos:line="7" pos:column="49">sockindex<pos:position pos:line="7" pos:column="58"/></name></expr>]<pos:position pos:line="7" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">unsigned<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">char<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">reallocated_buffer<pos:position pos:line="8" pos:column="36"/></name></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">reallocated_length<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">SecBuffer<pos:position pos:line="10" pos:column="12"/></name></type> <name><name pos:line="10" pos:column="13">outbuf<pos:position pos:line="10" pos:column="19"/></name><index pos:line="10" pos:column="19">[<expr><literal type="number" pos:line="10" pos:column="20">3<pos:position pos:line="10" pos:column="21"/></literal></expr>]<pos:position pos:line="10" pos:column="22"/></index></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">SecBufferDesc<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">outbuf_desc<pos:position pos:line="11" pos:column="28"/></name></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">SecBuffer<pos:position pos:line="12" pos:column="12"/></name></type> <name><name pos:line="12" pos:column="13">inbuf<pos:position pos:line="12" pos:column="18"/></name><index pos:line="12" pos:column="18">[<expr><literal type="number" pos:line="12" pos:column="19">2<pos:position pos:line="12" pos:column="20"/></literal></expr>]<pos:position pos:line="12" pos:column="21"/></index></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">SecBufferDesc<pos:position pos:line="13" pos:column="16"/></name></type> <name pos:line="13" pos:column="17">inbuf_desc<pos:position pos:line="13" pos:column="27"/></name></decl>;<pos:position pos:line="13" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">SECURITY_STATUS<pos:position pos:line="14" pos:column="18"/></name></type> <name pos:line="14" pos:column="19">sspi_status<pos:position pos:line="14" pos:column="30"/></name> <init pos:line="14" pos:column="31">= <expr><name pos:line="14" pos:column="33">SEC_E_OK<pos:position pos:line="14" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">TCHAR<pos:position pos:line="15" pos:column="8"/></name> <modifier pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></modifier></type><name pos:line="15" pos:column="10">host_name<pos:position pos:line="15" pos:column="19"/></name></decl>;<pos:position pos:line="15" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">CURLcode<pos:position pos:line="16" pos:column="11"/></name></type> <name pos:line="16" pos:column="12">result<pos:position pos:line="16" pos:column="18"/></name></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">bool<pos:position pos:line="17" pos:column="7"/></name></type> <name pos:line="17" pos:column="8">doread<pos:position pos:line="17" pos:column="14"/></name></decl>;<pos:position pos:line="17" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name> <modifier pos:line="18" pos:column="8">*<pos:position pos:line="18" pos:column="9"/></modifier> <specifier pos:line="18" pos:column="10">const<pos:position pos:line="18" pos:column="15"/></specifier></type> <name pos:line="18" pos:column="16">hostname<pos:position pos:line="18" pos:column="24"/></name> <init pos:line="18" pos:column="25">= <expr><ternary><condition><expr><call><name pos:line="18" pos:column="27">SSL_IS_PROXY<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">()<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr> ?<pos:position pos:line="18" pos:column="43"/></condition><then pos:line="18" pos:column="43"> <expr><name><name pos:line="18" pos:column="44">conn<pos:position pos:line="18" pos:column="48"/></name><operator pos:line="18" pos:column="48">-&gt;<pos:position pos:line="18" pos:column="53"/></operator><name pos:line="18" pos:column="50">http_proxy<pos:position pos:line="18" pos:column="60"/></name><operator pos:line="18" pos:column="60">.<pos:position pos:line="18" pos:column="61"/></operator><name pos:line="18" pos:column="61">host<pos:position pos:line="18" pos:column="65"/></name><operator pos:line="18" pos:column="65">.<pos:position pos:line="18" pos:column="66"/></operator><name pos:line="18" pos:column="66">name<pos:position pos:line="18" pos:column="70"/></name></name></expr> <pos:position pos:line="18" pos:column="71"/></then><else pos:line="18" pos:column="71">:
    <expr><name><name pos:line="19" pos:column="5">conn<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">host<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">name<pos:position pos:line="19" pos:column="20"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="19" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="21" pos:column="3">doread<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <ternary><condition><expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><name><name pos:line="21" pos:column="13">connssl<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">-&gt;<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="22">connecting_state<pos:position pos:line="21" pos:column="38"/></name></name> <operator pos:line="21" pos:column="39">!=<pos:position pos:line="21" pos:column="41"/></operator> <name pos:line="21" pos:column="42">ssl_connect_2_writing<pos:position pos:line="21" pos:column="63"/></name><operator pos:line="21" pos:column="63">)<pos:position pos:line="21" pos:column="64"/></operator></expr> ?<pos:position pos:line="21" pos:column="66"/></condition><then pos:line="21" pos:column="66"> <expr><name pos:line="21" pos:column="67">TRUE<pos:position pos:line="21" pos:column="71"/></name></expr> <pos:position pos:line="21" pos:column="72"/></then><else pos:line="21" pos:column="72">: <expr><name pos:line="21" pos:column="74">FALSE<pos:position pos:line="21" pos:column="79"/></name></expr></else></ternary></expr>;<pos:position pos:line="21" pos:column="80"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="23" pos:column="3">infof<pos:position pos:line="23" pos:column="8"/></name><argument_list pos:line="23" pos:column="8">(<argument><expr><name pos:line="23" pos:column="9">data<pos:position pos:line="23" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="15">"schannel: SSL/TLS connection with %s port %hu (step 2/3)\n"<pos:position pos:line="23" pos:column="75"/></literal></expr></argument>,
        <argument><expr><name pos:line="24" pos:column="9">hostname<pos:position pos:line="24" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="19">conn<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">remote_port<pos:position pos:line="24" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><operator pos:line="26" pos:column="6">!<pos:position pos:line="26" pos:column="7"/></operator><name><name pos:line="26" pos:column="7">BACKEND<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">cred<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">||<pos:position pos:line="26" pos:column="23"/></operator> <operator pos:line="26" pos:column="24">!<pos:position pos:line="26" pos:column="25"/></operator><name><name pos:line="26" pos:column="25">BACKEND<pos:position pos:line="26" pos:column="32"/></name><operator pos:line="26" pos:column="32">-&gt;<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="34">ctxt<pos:position pos:line="26" pos:column="38"/></name></name></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39">
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="27" pos:column="35"/></name></expr>;<pos:position pos:line="27" pos:column="36"/></return></block></then></if>

  <comment type="block" pos:line="29" pos:column="3">/* buffer to store previously received and decrypted data */</comment>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name><name pos:line="30" pos:column="6">BACKEND<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">-&gt;<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="15">decdata_buffer<pos:position pos:line="30" pos:column="29"/></name></name> <operator pos:line="30" pos:column="30">==<pos:position pos:line="30" pos:column="32"/></operator> <name pos:line="30" pos:column="33">NULL<pos:position pos:line="30" pos:column="37"/></name></expr>)<pos:position pos:line="30" pos:column="38"/></condition><then pos:line="30" pos:column="38"> <block pos:line="30" pos:column="39">{
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">BACKEND<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">-&gt;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="14">decdata_offset<pos:position pos:line="31" pos:column="28"/></name></name> <operator pos:line="31" pos:column="29">=<pos:position pos:line="31" pos:column="30"/></operator> <literal type="number" pos:line="31" pos:column="31">0<pos:position pos:line="31" pos:column="32"/></literal></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">BACKEND<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">-&gt;<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="14">decdata_length<pos:position pos:line="32" pos:column="28"/></name></name> <operator pos:line="32" pos:column="29">=<pos:position pos:line="32" pos:column="30"/></operator> <name pos:line="32" pos:column="31">CURL_SCHANNEL_BUFFER_INIT_SIZE<pos:position pos:line="32" pos:column="61"/></name></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">BACKEND<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">decdata_buffer<pos:position pos:line="33" pos:column="28"/></name></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <call><name pos:line="33" pos:column="31">malloc<pos:position pos:line="33" pos:column="37"/></name><argument_list pos:line="33" pos:column="37">(<argument><expr><name><name pos:line="33" pos:column="38">BACKEND<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">-&gt;<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="47">decdata_length<pos:position pos:line="33" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt>
    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name><name pos:line="34" pos:column="8">BACKEND<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">-&gt;<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="17">decdata_buffer<pos:position pos:line="34" pos:column="31"/></name></name> <operator pos:line="34" pos:column="32">==<pos:position pos:line="34" pos:column="34"/></operator> <name pos:line="34" pos:column="35">NULL<pos:position pos:line="34" pos:column="39"/></name></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40"> <block pos:line="34" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">failf<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">data<pos:position pos:line="35" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="19">"schannel: unable to allocate memory"<pos:position pos:line="35" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="58"/></expr_stmt>
      <return pos:line="36" pos:column="7">return <expr><name pos:line="36" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="36" pos:column="33"/></name></expr>;<pos:position pos:line="36" pos:column="34"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="40" pos:column="3">/* buffer to store previously received and encrypted data */</comment>
  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">(<expr><name><name pos:line="41" pos:column="6">BACKEND<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">-&gt;<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="15">encdata_buffer<pos:position pos:line="41" pos:column="29"/></name></name> <operator pos:line="41" pos:column="30">==<pos:position pos:line="41" pos:column="32"/></operator> <name pos:line="41" pos:column="33">NULL<pos:position pos:line="41" pos:column="37"/></name></expr>)<pos:position pos:line="41" pos:column="38"/></condition><then pos:line="41" pos:column="38"> <block pos:line="41" pos:column="39">{
    <expr_stmt><expr><name><name pos:line="42" pos:column="5">BACKEND<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">-&gt;<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="14">encdata_is_incomplete<pos:position pos:line="42" pos:column="35"/></name></name> <operator pos:line="42" pos:column="36">=<pos:position pos:line="42" pos:column="37"/></operator> <literal type="boolean" pos:line="42" pos:column="38">false<pos:position pos:line="42" pos:column="43"/></literal></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="43" pos:column="5">BACKEND<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">encdata_offset<pos:position pos:line="43" pos:column="28"/></name></name> <operator pos:line="43" pos:column="29">=<pos:position pos:line="43" pos:column="30"/></operator> <literal type="number" pos:line="43" pos:column="31">0<pos:position pos:line="43" pos:column="32"/></literal></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">BACKEND<pos:position pos:line="44" pos:column="12"/></name><operator pos:line="44" pos:column="12">-&gt;<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="14">encdata_length<pos:position pos:line="44" pos:column="28"/></name></name> <operator pos:line="44" pos:column="29">=<pos:position pos:line="44" pos:column="30"/></operator> <name pos:line="44" pos:column="31">CURL_SCHANNEL_BUFFER_INIT_SIZE<pos:position pos:line="44" pos:column="61"/></name></expr>;<pos:position pos:line="44" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">BACKEND<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">-&gt;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="14">encdata_buffer<pos:position pos:line="45" pos:column="28"/></name></name> <operator pos:line="45" pos:column="29">=<pos:position pos:line="45" pos:column="30"/></operator> <call><name pos:line="45" pos:column="31">malloc<pos:position pos:line="45" pos:column="37"/></name><argument_list pos:line="45" pos:column="37">(<argument><expr><name><name pos:line="45" pos:column="38">BACKEND<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">-&gt;<pos:position pos:line="45" pos:column="50"/></operator><name pos:line="45" pos:column="47">encdata_length<pos:position pos:line="45" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="63"/></expr_stmt>
    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><name><name pos:line="46" pos:column="8">BACKEND<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">-&gt;<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="17">encdata_buffer<pos:position pos:line="46" pos:column="31"/></name></name> <operator pos:line="46" pos:column="32">==<pos:position pos:line="46" pos:column="34"/></operator> <name pos:line="46" pos:column="35">NULL<pos:position pos:line="46" pos:column="39"/></name></expr>)<pos:position pos:line="46" pos:column="40"/></condition><then pos:line="46" pos:column="40"> <block pos:line="46" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">failf<pos:position pos:line="47" pos:column="12"/></name><argument_list pos:line="47" pos:column="12">(<argument><expr><name pos:line="47" pos:column="13">data<pos:position pos:line="47" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="19">"schannel: unable to allocate memory"<pos:position pos:line="47" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="58"/></expr_stmt>
      <return pos:line="48" pos:column="7">return <expr><name pos:line="48" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="48" pos:column="33"/></name></expr>;<pos:position pos:line="48" pos:column="34"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="52" pos:column="3">/* if we need a bigger buffer to read a full message, increase buffer now */</comment>
  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><name><name pos:line="53" pos:column="6">BACKEND<pos:position pos:line="53" pos:column="13"/></name><operator pos:line="53" pos:column="13">-&gt;<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="15">encdata_length<pos:position pos:line="53" pos:column="29"/></name></name> <operator pos:line="53" pos:column="30">-<pos:position pos:line="53" pos:column="31"/></operator> <name><name pos:line="53" pos:column="32">BACKEND<pos:position pos:line="53" pos:column="39"/></name><operator pos:line="53" pos:column="39">-&gt;<pos:position pos:line="53" pos:column="44"/></operator><name pos:line="53" pos:column="41">encdata_offset<pos:position pos:line="53" pos:column="55"/></name></name> <operator pos:line="53" pos:column="56">&lt;<pos:position pos:line="53" pos:column="60"/></operator>
     <name pos:line="54" pos:column="6">CURL_SCHANNEL_BUFFER_FREE_SIZE<pos:position pos:line="54" pos:column="36"/></name></expr>)<pos:position pos:line="54" pos:column="37"/></condition><then pos:line="54" pos:column="37"> <block pos:line="54" pos:column="38">{
    <comment type="block" pos:line="55" pos:column="5">/* increase internal encrypted data buffer */</comment>
    <expr_stmt><expr><name pos:line="56" pos:column="5">reallocated_length<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <name><name pos:line="56" pos:column="26">BACKEND<pos:position pos:line="56" pos:column="33"/></name><operator pos:line="56" pos:column="33">-&gt;<pos:position pos:line="56" pos:column="38"/></operator><name pos:line="56" pos:column="35">encdata_offset<pos:position pos:line="56" pos:column="49"/></name></name> <operator pos:line="56" pos:column="50">+<pos:position pos:line="56" pos:column="51"/></operator>
      <name pos:line="57" pos:column="7">CURL_SCHANNEL_BUFFER_FREE_SIZE<pos:position pos:line="57" pos:column="37"/></name></expr>;<pos:position pos:line="57" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="58" pos:column="5">reallocated_buffer<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <call><name pos:line="58" pos:column="26">realloc<pos:position pos:line="58" pos:column="33"/></name><argument_list pos:line="58" pos:column="33">(<argument><expr><name><name pos:line="58" pos:column="34">BACKEND<pos:position pos:line="58" pos:column="41"/></name><operator pos:line="58" pos:column="41">-&gt;<pos:position pos:line="58" pos:column="46"/></operator><name pos:line="58" pos:column="43">encdata_buffer<pos:position pos:line="58" pos:column="57"/></name></name></expr></argument>,
                                 <argument><expr><name pos:line="59" pos:column="34">reallocated_length<pos:position pos:line="59" pos:column="52"/></name></expr></argument>)<pos:position pos:line="59" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="54"/></expr_stmt>

    <if pos:line="61" pos:column="5">if<condition pos:line="61" pos:column="7">(<expr><name pos:line="61" pos:column="8">reallocated_buffer<pos:position pos:line="61" pos:column="26"/></name> <operator pos:line="61" pos:column="27">==<pos:position pos:line="61" pos:column="29"/></operator> <name pos:line="61" pos:column="30">NULL<pos:position pos:line="61" pos:column="34"/></name></expr>)<pos:position pos:line="61" pos:column="35"/></condition><then pos:line="61" pos:column="35"> <block pos:line="61" pos:column="36">{
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">failf<pos:position pos:line="62" pos:column="12"/></name><argument_list pos:line="62" pos:column="12">(<argument><expr><name pos:line="62" pos:column="13">data<pos:position pos:line="62" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="19">"schannel: unable to re-allocate memory"<pos:position pos:line="62" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="61"/></expr_stmt>
      <return pos:line="63" pos:column="7">return <expr><name pos:line="63" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="63" pos:column="33"/></name></expr>;<pos:position pos:line="63" pos:column="34"/></return>
    }<pos:position pos:line="64" pos:column="6"/></block></then>
    <else pos:line="65" pos:column="5">else <block pos:line="65" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="66" pos:column="7">BACKEND<pos:position pos:line="66" pos:column="14"/></name><operator pos:line="66" pos:column="14">-&gt;<pos:position pos:line="66" pos:column="19"/></operator><name pos:line="66" pos:column="16">encdata_buffer<pos:position pos:line="66" pos:column="30"/></name></name> <operator pos:line="66" pos:column="31">=<pos:position pos:line="66" pos:column="32"/></operator> <name pos:line="66" pos:column="33">reallocated_buffer<pos:position pos:line="66" pos:column="51"/></name></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="67" pos:column="7">BACKEND<pos:position pos:line="67" pos:column="14"/></name><operator pos:line="67" pos:column="14">-&gt;<pos:position pos:line="67" pos:column="19"/></operator><name pos:line="67" pos:column="16">encdata_length<pos:position pos:line="67" pos:column="30"/></name></name> <operator pos:line="67" pos:column="31">=<pos:position pos:line="67" pos:column="32"/></operator> <name pos:line="67" pos:column="33">reallocated_length<pos:position pos:line="67" pos:column="51"/></name></expr>;<pos:position pos:line="67" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></else></if>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <for pos:line="71" pos:column="3">for<control pos:line="71" pos:column="6">(<init pos:line="71" pos:column="7">;<pos:position pos:line="71" pos:column="8"/></init><condition pos:line="71" pos:column="8">;<pos:position pos:line="71" pos:column="9"/></condition><incr/>)<pos:position pos:line="71" pos:column="10"/></control> <block pos:line="71" pos:column="11">{
    <if pos:line="72" pos:column="5">if<condition pos:line="72" pos:column="7">(<expr><name pos:line="72" pos:column="8">doread<pos:position pos:line="72" pos:column="14"/></name></expr>)<pos:position pos:line="72" pos:column="15"/></condition><then pos:line="72" pos:column="15"> <block pos:line="72" pos:column="16">{
      <comment type="block" pos:line="73" pos:column="7">/* read encrypted handshake data from socket */</comment>
      <expr_stmt><expr><name pos:line="74" pos:column="7">result<pos:position pos:line="74" pos:column="13"/></name> <operator pos:line="74" pos:column="14">=<pos:position pos:line="74" pos:column="15"/></operator> <call><name pos:line="74" pos:column="16">Curl_read_plain<pos:position pos:line="74" pos:column="31"/></name><argument_list pos:line="74" pos:column="31">(<argument><expr><name><name pos:line="74" pos:column="32">conn<pos:position pos:line="74" pos:column="36"/></name><operator pos:line="74" pos:column="36">-&gt;<pos:position pos:line="74" pos:column="41"/></operator><name pos:line="74" pos:column="38">sock<pos:position pos:line="74" pos:column="42"/></name><index pos:line="74" pos:column="42">[<expr><name pos:line="74" pos:column="43">sockindex<pos:position pos:line="74" pos:column="52"/></name></expr>]<pos:position pos:line="74" pos:column="53"/></index></name></expr></argument>,
                               <argument><expr><operator pos:line="75" pos:column="32">(<pos:position pos:line="75" pos:column="33"/></operator><name pos:line="75" pos:column="33">char<pos:position pos:line="75" pos:column="37"/></name> <operator pos:line="75" pos:column="38">*<pos:position pos:line="75" pos:column="39"/></operator><operator pos:line="75" pos:column="39">)<pos:position pos:line="75" pos:column="40"/></operator> <operator pos:line="75" pos:column="41">(<pos:position pos:line="75" pos:column="42"/></operator><name><name pos:line="75" pos:column="42">BACKEND<pos:position pos:line="75" pos:column="49"/></name><operator pos:line="75" pos:column="49">-&gt;<pos:position pos:line="75" pos:column="54"/></operator><name pos:line="75" pos:column="51">encdata_buffer<pos:position pos:line="75" pos:column="65"/></name></name> <operator pos:line="75" pos:column="66">+<pos:position pos:line="75" pos:column="67"/></operator>
                                         <name><name pos:line="76" pos:column="42">BACKEND<pos:position pos:line="76" pos:column="49"/></name><operator pos:line="76" pos:column="49">-&gt;<pos:position pos:line="76" pos:column="54"/></operator><name pos:line="76" pos:column="51">encdata_offset<pos:position pos:line="76" pos:column="65"/></name></name><operator pos:line="76" pos:column="65">)<pos:position pos:line="76" pos:column="66"/></operator></expr></argument>,
                               <argument><expr><name><name pos:line="77" pos:column="32">BACKEND<pos:position pos:line="77" pos:column="39"/></name><operator pos:line="77" pos:column="39">-&gt;<pos:position pos:line="77" pos:column="44"/></operator><name pos:line="77" pos:column="41">encdata_length<pos:position pos:line="77" pos:column="55"/></name></name> <operator pos:line="77" pos:column="56">-<pos:position pos:line="77" pos:column="57"/></operator>
                               <name><name pos:line="78" pos:column="32">BACKEND<pos:position pos:line="78" pos:column="39"/></name><operator pos:line="78" pos:column="39">-&gt;<pos:position pos:line="78" pos:column="44"/></operator><name pos:line="78" pos:column="41">encdata_offset<pos:position pos:line="78" pos:column="55"/></name></name></expr></argument>,
                               <argument><expr><operator pos:line="79" pos:column="32">&amp;<pos:position pos:line="79" pos:column="37"/></operator><name pos:line="79" pos:column="33">nread<pos:position pos:line="79" pos:column="38"/></name></expr></argument>)<pos:position pos:line="79" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt>
      <if pos:line="80" pos:column="7">if<condition pos:line="80" pos:column="9">(<expr><name pos:line="80" pos:column="10">result<pos:position pos:line="80" pos:column="16"/></name> <operator pos:line="80" pos:column="17">==<pos:position pos:line="80" pos:column="19"/></operator> <name pos:line="80" pos:column="20">CURLE_AGAIN<pos:position pos:line="80" pos:column="31"/></name></expr>)<pos:position pos:line="80" pos:column="32"/></condition><then pos:line="80" pos:column="32"> <block pos:line="80" pos:column="33">{
        <if pos:line="81" pos:column="9">if<condition pos:line="81" pos:column="11">(<expr><name><name pos:line="81" pos:column="12">connssl<pos:position pos:line="81" pos:column="19"/></name><operator pos:line="81" pos:column="19">-&gt;<pos:position pos:line="81" pos:column="24"/></operator><name pos:line="81" pos:column="21">connecting_state<pos:position pos:line="81" pos:column="37"/></name></name> <operator pos:line="81" pos:column="38">!=<pos:position pos:line="81" pos:column="40"/></operator> <name pos:line="81" pos:column="41">ssl_connect_2_writing<pos:position pos:line="81" pos:column="62"/></name></expr>)<pos:position pos:line="81" pos:column="63"/></condition><then pos:line="81" pos:column="63">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="82" pos:column="11">connssl<pos:position pos:line="82" pos:column="18"/></name><operator pos:line="82" pos:column="18">-&gt;<pos:position pos:line="82" pos:column="23"/></operator><name pos:line="82" pos:column="20">connecting_state<pos:position pos:line="82" pos:column="36"/></name></name> <operator pos:line="82" pos:column="37">=<pos:position pos:line="82" pos:column="38"/></operator> <name pos:line="82" pos:column="39">ssl_connect_2_reading<pos:position pos:line="82" pos:column="60"/></name></expr>;<pos:position pos:line="82" pos:column="61"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">infof<pos:position pos:line="83" pos:column="14"/></name><argument_list pos:line="83" pos:column="14">(<argument><expr><name pos:line="83" pos:column="15">data<pos:position pos:line="83" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="21">"schannel: failed to receive handshake, "<pos:position pos:line="83" pos:column="62"/></literal>
              <literal type="string" pos:line="84" pos:column="15">"need more data\n"<pos:position pos:line="84" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="35"/></expr_stmt>
        <return pos:line="85" pos:column="9">return <expr><name pos:line="85" pos:column="16">CURLE_OK<pos:position pos:line="85" pos:column="24"/></name></expr>;<pos:position pos:line="85" pos:column="25"/></return>
      }<pos:position pos:line="86" pos:column="8"/></block></then>
      <elseif pos:line="87" pos:column="7">else <if pos:line="87" pos:column="12">if<condition pos:line="87" pos:column="14">(<expr><operator pos:line="87" pos:column="15">(<pos:position pos:line="87" pos:column="16"/></operator><name pos:line="87" pos:column="16">result<pos:position pos:line="87" pos:column="22"/></name> <operator pos:line="87" pos:column="23">!=<pos:position pos:line="87" pos:column="25"/></operator> <name pos:line="87" pos:column="26">CURLE_OK<pos:position pos:line="87" pos:column="34"/></name><operator pos:line="87" pos:column="34">)<pos:position pos:line="87" pos:column="35"/></operator> <operator pos:line="87" pos:column="36">||<pos:position pos:line="87" pos:column="38"/></operator> <operator pos:line="87" pos:column="39">(<pos:position pos:line="87" pos:column="40"/></operator><name pos:line="87" pos:column="40">nread<pos:position pos:line="87" pos:column="45"/></name> <operator pos:line="87" pos:column="46">==<pos:position pos:line="87" pos:column="48"/></operator> <literal type="number" pos:line="87" pos:column="49">0<pos:position pos:line="87" pos:column="50"/></literal><operator pos:line="87" pos:column="50">)<pos:position pos:line="87" pos:column="51"/></operator></expr>)<pos:position pos:line="87" pos:column="52"/></condition><then pos:line="87" pos:column="52"> <block pos:line="87" pos:column="53">{
        <expr_stmt><expr><call><name pos:line="88" pos:column="9">failf<pos:position pos:line="88" pos:column="14"/></name><argument_list pos:line="88" pos:column="14">(<argument><expr><name pos:line="88" pos:column="15">data<pos:position pos:line="88" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="21">"schannel: failed to receive handshake, "<pos:position pos:line="88" pos:column="62"/></literal>
              <literal type="string" pos:line="89" pos:column="15">"SSL/TLS connection failed"<pos:position pos:line="89" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="44"/></expr_stmt>
        <return pos:line="90" pos:column="9">return <expr><name pos:line="90" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="90" pos:column="39"/></name></expr>;<pos:position pos:line="90" pos:column="40"/></return>
      }<pos:position pos:line="91" pos:column="8"/></block></then></if></elseif></if>

      <comment type="block" pos:line="93" pos:column="7">/* increase encrypted data buffer offset */</comment>
      <expr_stmt><expr><name><name pos:line="94" pos:column="7">BACKEND<pos:position pos:line="94" pos:column="14"/></name><operator pos:line="94" pos:column="14">-&gt;<pos:position pos:line="94" pos:column="19"/></operator><name pos:line="94" pos:column="16">encdata_offset<pos:position pos:line="94" pos:column="30"/></name></name> <operator pos:line="94" pos:column="31">+=<pos:position pos:line="94" pos:column="33"/></operator> <name pos:line="94" pos:column="34">nread<pos:position pos:line="94" pos:column="39"/></name></expr>;<pos:position pos:line="94" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="95" pos:column="7">BACKEND<pos:position pos:line="95" pos:column="14"/></name><operator pos:line="95" pos:column="14">-&gt;<pos:position pos:line="95" pos:column="19"/></operator><name pos:line="95" pos:column="16">encdata_is_incomplete<pos:position pos:line="95" pos:column="37"/></name></name> <operator pos:line="95" pos:column="38">=<pos:position pos:line="95" pos:column="39"/></operator> <literal type="boolean" pos:line="95" pos:column="40">false<pos:position pos:line="95" pos:column="45"/></literal></expr>;<pos:position pos:line="95" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="96" pos:column="7">infof<pos:position pos:line="96" pos:column="12"/></name><argument_list pos:line="96" pos:column="12">(<argument><expr><name pos:line="96" pos:column="13">data<pos:position pos:line="96" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="19">"schannel: encrypted data got %zd\n"<pos:position pos:line="96" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="57">nread<pos:position pos:line="96" pos:column="62"/></name></expr></argument>)<pos:position pos:line="96" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="99" pos:column="5">infof<pos:position pos:line="99" pos:column="10"/></name><argument_list pos:line="99" pos:column="10">(<argument><expr><name pos:line="99" pos:column="11">data<pos:position pos:line="99" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="17">"schannel: encrypted data buffer: offset %zu length %zu\n"<pos:position pos:line="99" pos:column="75"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="100" pos:column="11">BACKEND<pos:position pos:line="100" pos:column="18"/></name><operator pos:line="100" pos:column="18">-&gt;<pos:position pos:line="100" pos:column="23"/></operator><name pos:line="100" pos:column="20">encdata_offset<pos:position pos:line="100" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="36">BACKEND<pos:position pos:line="100" pos:column="43"/></name><operator pos:line="100" pos:column="43">-&gt;<pos:position pos:line="100" pos:column="48"/></operator><name pos:line="100" pos:column="45">encdata_length<pos:position pos:line="100" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="102" pos:column="5">/* setup input buffers */</comment>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">InitSecBuffer<pos:position pos:line="103" pos:column="18"/></name><argument_list pos:line="103" pos:column="18">(<argument><expr><operator pos:line="103" pos:column="19">&amp;<pos:position pos:line="103" pos:column="24"/></operator><name><name pos:line="103" pos:column="20">inbuf<pos:position pos:line="103" pos:column="25"/></name><index pos:line="103" pos:column="25">[<expr><literal type="number" pos:line="103" pos:column="26">0<pos:position pos:line="103" pos:column="27"/></literal></expr>]<pos:position pos:line="103" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="30">SECBUFFER_TOKEN<pos:position pos:line="103" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="103" pos:column="47">malloc<pos:position pos:line="103" pos:column="53"/></name><argument_list pos:line="103" pos:column="53">(<argument><expr><name><name pos:line="103" pos:column="54">BACKEND<pos:position pos:line="103" pos:column="61"/></name><operator pos:line="103" pos:column="61">-&gt;<pos:position pos:line="103" pos:column="66"/></operator><name pos:line="103" pos:column="63">encdata_offset<pos:position pos:line="103" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="78"/></argument_list></call></expr></argument>,
                  <argument><expr><call><name pos:line="104" pos:column="19">curlx_uztoul<pos:position pos:line="104" pos:column="31"/></name><argument_list pos:line="104" pos:column="31">(<argument><expr><name><name pos:line="104" pos:column="32">BACKEND<pos:position pos:line="104" pos:column="39"/></name><operator pos:line="104" pos:column="39">-&gt;<pos:position pos:line="104" pos:column="44"/></operator><name pos:line="104" pos:column="41">encdata_offset<pos:position pos:line="104" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="104" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="105" pos:column="5">InitSecBuffer<pos:position pos:line="105" pos:column="18"/></name><argument_list pos:line="105" pos:column="18">(<argument><expr><operator pos:line="105" pos:column="19">&amp;<pos:position pos:line="105" pos:column="24"/></operator><name><name pos:line="105" pos:column="20">inbuf<pos:position pos:line="105" pos:column="25"/></name><index pos:line="105" pos:column="25">[<expr><literal type="number" pos:line="105" pos:column="26">1<pos:position pos:line="105" pos:column="27"/></literal></expr>]<pos:position pos:line="105" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="30">SECBUFFER_EMPTY<pos:position pos:line="105" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="47">NULL<pos:position pos:line="105" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="105" pos:column="53">0<pos:position pos:line="105" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="106" pos:column="5">InitSecBufferDesc<pos:position pos:line="106" pos:column="22"/></name><argument_list pos:line="106" pos:column="22">(<argument><expr><operator pos:line="106" pos:column="23">&amp;<pos:position pos:line="106" pos:column="28"/></operator><name pos:line="106" pos:column="24">inbuf_desc<pos:position pos:line="106" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="36">inbuf<pos:position pos:line="106" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="43">2<pos:position pos:line="106" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="46"/></expr_stmt>

    <comment type="block" pos:line="108" pos:column="5">/* setup output buffers */</comment>
    <expr_stmt><expr><call><name pos:line="109" pos:column="5">InitSecBuffer<pos:position pos:line="109" pos:column="18"/></name><argument_list pos:line="109" pos:column="18">(<argument><expr><operator pos:line="109" pos:column="19">&amp;<pos:position pos:line="109" pos:column="24"/></operator><name><name pos:line="109" pos:column="20">outbuf<pos:position pos:line="109" pos:column="26"/></name><index pos:line="109" pos:column="26">[<expr><literal type="number" pos:line="109" pos:column="27">0<pos:position pos:line="109" pos:column="28"/></literal></expr>]<pos:position pos:line="109" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="31">SECBUFFER_TOKEN<pos:position pos:line="109" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="48">NULL<pos:position pos:line="109" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="109" pos:column="54">0<pos:position pos:line="109" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="110" pos:column="5">InitSecBuffer<pos:position pos:line="110" pos:column="18"/></name><argument_list pos:line="110" pos:column="18">(<argument><expr><operator pos:line="110" pos:column="19">&amp;<pos:position pos:line="110" pos:column="24"/></operator><name><name pos:line="110" pos:column="20">outbuf<pos:position pos:line="110" pos:column="26"/></name><index pos:line="110" pos:column="26">[<expr><literal type="number" pos:line="110" pos:column="27">1<pos:position pos:line="110" pos:column="28"/></literal></expr>]<pos:position pos:line="110" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="31">SECBUFFER_ALERT<pos:position pos:line="110" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="48">NULL<pos:position pos:line="110" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="54">0<pos:position pos:line="110" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="111" pos:column="5">InitSecBuffer<pos:position pos:line="111" pos:column="18"/></name><argument_list pos:line="111" pos:column="18">(<argument><expr><operator pos:line="111" pos:column="19">&amp;<pos:position pos:line="111" pos:column="24"/></operator><name><name pos:line="111" pos:column="20">outbuf<pos:position pos:line="111" pos:column="26"/></name><index pos:line="111" pos:column="26">[<expr><literal type="number" pos:line="111" pos:column="27">2<pos:position pos:line="111" pos:column="28"/></literal></expr>]<pos:position pos:line="111" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="31">SECBUFFER_EMPTY<pos:position pos:line="111" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="48">NULL<pos:position pos:line="111" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="111" pos:column="54">0<pos:position pos:line="111" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">InitSecBufferDesc<pos:position pos:line="112" pos:column="22"/></name><argument_list pos:line="112" pos:column="22">(<argument><expr><operator pos:line="112" pos:column="23">&amp;<pos:position pos:line="112" pos:column="28"/></operator><name pos:line="112" pos:column="24">outbuf_desc<pos:position pos:line="112" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="37">outbuf<pos:position pos:line="112" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="45">3<pos:position pos:line="112" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="48"/></expr_stmt>

    <if pos:line="114" pos:column="5">if<condition pos:line="114" pos:column="7">(<expr><name><name pos:line="114" pos:column="8">inbuf<pos:position pos:line="114" pos:column="13"/></name><index pos:line="114" pos:column="13">[<expr><literal type="number" pos:line="114" pos:column="14">0<pos:position pos:line="114" pos:column="15"/></literal></expr>]<pos:position pos:line="114" pos:column="16"/></index></name><operator pos:line="114" pos:column="16">.<pos:position pos:line="114" pos:column="17"/></operator><name pos:line="114" pos:column="17">pvBuffer<pos:position pos:line="114" pos:column="25"/></name> <operator pos:line="114" pos:column="26">==<pos:position pos:line="114" pos:column="28"/></operator> <name pos:line="114" pos:column="29">NULL<pos:position pos:line="114" pos:column="33"/></name></expr>)<pos:position pos:line="114" pos:column="34"/></condition><then pos:line="114" pos:column="34"> <block pos:line="114" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="115" pos:column="7">failf<pos:position pos:line="115" pos:column="12"/></name><argument_list pos:line="115" pos:column="12">(<argument><expr><name pos:line="115" pos:column="13">data<pos:position pos:line="115" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="19">"schannel: unable to allocate memory"<pos:position pos:line="115" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="58"/></expr_stmt>
      <return pos:line="116" pos:column="7">return <expr><name pos:line="116" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="116" pos:column="33"/></name></expr>;<pos:position pos:line="116" pos:column="34"/></return>
    }<pos:position pos:line="117" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="119" pos:column="5">/* copy received handshake data into input buffer */</comment>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">memcpy<pos:position pos:line="120" pos:column="11"/></name><argument_list pos:line="120" pos:column="11">(<argument><expr><name><name pos:line="120" pos:column="12">inbuf<pos:position pos:line="120" pos:column="17"/></name><index pos:line="120" pos:column="17">[<expr><literal type="number" pos:line="120" pos:column="18">0<pos:position pos:line="120" pos:column="19"/></literal></expr>]<pos:position pos:line="120" pos:column="20"/></index></name><operator pos:line="120" pos:column="20">.<pos:position pos:line="120" pos:column="21"/></operator><name pos:line="120" pos:column="21">pvBuffer<pos:position pos:line="120" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="31">BACKEND<pos:position pos:line="120" pos:column="38"/></name><operator pos:line="120" pos:column="38">-&gt;<pos:position pos:line="120" pos:column="43"/></operator><name pos:line="120" pos:column="40">encdata_buffer<pos:position pos:line="120" pos:column="54"/></name></name></expr></argument>,
           <argument><expr><name><name pos:line="121" pos:column="12">BACKEND<pos:position pos:line="121" pos:column="19"/></name><operator pos:line="121" pos:column="19">-&gt;<pos:position pos:line="121" pos:column="24"/></operator><name pos:line="121" pos:column="21">encdata_offset<pos:position pos:line="121" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><name pos:line="123" pos:column="5">host_name<pos:position pos:line="123" pos:column="14"/></name> <operator pos:line="123" pos:column="15">=<pos:position pos:line="123" pos:column="16"/></operator> <call><name pos:line="123" pos:column="17">Curl_convert_UTF8_to_tchar<pos:position pos:line="123" pos:column="43"/></name><argument_list pos:line="123" pos:column="43">(<argument><expr><name pos:line="123" pos:column="44">hostname<pos:position pos:line="123" pos:column="52"/></name></expr></argument>)<pos:position pos:line="123" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="54"/></expr_stmt>
    <if pos:line="124" pos:column="5">if<condition pos:line="124" pos:column="7">(<expr><operator pos:line="124" pos:column="8">!<pos:position pos:line="124" pos:column="9"/></operator><name pos:line="124" pos:column="9">host_name<pos:position pos:line="124" pos:column="18"/></name></expr>)<pos:position pos:line="124" pos:column="19"/></condition><then pos:line="124" pos:column="19">
      <block type="pseudo"><return pos:line="125" pos:column="7">return <expr><name pos:line="125" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="125" pos:column="33"/></name></expr>;<pos:position pos:line="125" pos:column="34"/></return></block></then></if>

    <comment type="block" pos:line="127" pos:column="5">/* https://msdn.microsoft.com/en-us/library/windows/desktop/aa375924.aspx
       */</comment>
    <expr_stmt><expr><name pos:line="129" pos:column="5">sspi_status<pos:position pos:line="129" pos:column="16"/></name> <operator pos:line="129" pos:column="17">=<pos:position pos:line="129" pos:column="18"/></operator> <call><name><name pos:line="129" pos:column="19">s_pSecFn<pos:position pos:line="129" pos:column="27"/></name><operator pos:line="129" pos:column="27">-&gt;<pos:position pos:line="129" pos:column="32"/></operator><name pos:line="129" pos:column="29">InitializeSecurityContext<pos:position pos:line="129" pos:column="54"/></name></name><argument_list pos:line="129" pos:column="54">(
      <argument><expr><operator pos:line="130" pos:column="7">&amp;<pos:position pos:line="130" pos:column="12"/></operator><name><name pos:line="130" pos:column="8">BACKEND<pos:position pos:line="130" pos:column="15"/></name><operator pos:line="130" pos:column="15">-&gt;<pos:position pos:line="130" pos:column="20"/></operator><name pos:line="130" pos:column="17">cred<pos:position pos:line="130" pos:column="21"/></name><operator pos:line="130" pos:column="21">-&gt;<pos:position pos:line="130" pos:column="26"/></operator><name pos:line="130" pos:column="23">cred_handle<pos:position pos:line="130" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="130" pos:column="36">&amp;<pos:position pos:line="130" pos:column="41"/></operator><name><name pos:line="130" pos:column="37">BACKEND<pos:position pos:line="130" pos:column="44"/></name><operator pos:line="130" pos:column="44">-&gt;<pos:position pos:line="130" pos:column="49"/></operator><name pos:line="130" pos:column="46">ctxt<pos:position pos:line="130" pos:column="50"/></name><operator pos:line="130" pos:column="50">-&gt;<pos:position pos:line="130" pos:column="55"/></operator><name pos:line="130" pos:column="52">ctxt_handle<pos:position pos:line="130" pos:column="63"/></name></name></expr></argument>,
      <argument><expr><name pos:line="131" pos:column="7">host_name<pos:position pos:line="131" pos:column="16"/></name></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="18">BACKEND<pos:position pos:line="131" pos:column="25"/></name><operator pos:line="131" pos:column="25">-&gt;<pos:position pos:line="131" pos:column="30"/></operator><name pos:line="131" pos:column="27">req_flags<pos:position pos:line="131" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="131" pos:column="38">0<pos:position pos:line="131" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="131" pos:column="41">0<pos:position pos:line="131" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="131" pos:column="44">&amp;<pos:position pos:line="131" pos:column="49"/></operator><name pos:line="131" pos:column="45">inbuf_desc<pos:position pos:line="131" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="131" pos:column="57">0<pos:position pos:line="131" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="60">NULL<pos:position pos:line="131" pos:column="64"/></name></expr></argument>,
      <argument><expr><operator pos:line="132" pos:column="7">&amp;<pos:position pos:line="132" pos:column="12"/></operator><name pos:line="132" pos:column="8">outbuf_desc<pos:position pos:line="132" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="21">&amp;<pos:position pos:line="132" pos:column="26"/></operator><name><name pos:line="132" pos:column="22">BACKEND<pos:position pos:line="132" pos:column="29"/></name><operator pos:line="132" pos:column="29">-&gt;<pos:position pos:line="132" pos:column="34"/></operator><name pos:line="132" pos:column="31">ret_flags<pos:position pos:line="132" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="42">&amp;<pos:position pos:line="132" pos:column="47"/></operator><name><name pos:line="132" pos:column="43">BACKEND<pos:position pos:line="132" pos:column="50"/></name><operator pos:line="132" pos:column="50">-&gt;<pos:position pos:line="132" pos:column="55"/></operator><name pos:line="132" pos:column="52">ctxt<pos:position pos:line="132" pos:column="56"/></name><operator pos:line="132" pos:column="56">-&gt;<pos:position pos:line="132" pos:column="61"/></operator><name pos:line="132" pos:column="58">time_stamp<pos:position pos:line="132" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="132" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="70"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="134" pos:column="5">Curl_unicodefree<pos:position pos:line="134" pos:column="21"/></name><argument_list pos:line="134" pos:column="21">(<argument><expr><name pos:line="134" pos:column="22">host_name<pos:position pos:line="134" pos:column="31"/></name></expr></argument>)<pos:position pos:line="134" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="136" pos:column="5">/* free buffer for received handshake data */</comment>
    <expr_stmt><expr><call><name pos:line="137" pos:column="5">Curl_safefree<pos:position pos:line="137" pos:column="18"/></name><argument_list pos:line="137" pos:column="18">(<argument><expr><name><name pos:line="137" pos:column="19">inbuf<pos:position pos:line="137" pos:column="24"/></name><index pos:line="137" pos:column="24">[<expr><literal type="number" pos:line="137" pos:column="25">0<pos:position pos:line="137" pos:column="26"/></literal></expr>]<pos:position pos:line="137" pos:column="27"/></index></name><operator pos:line="137" pos:column="27">.<pos:position pos:line="137" pos:column="28"/></operator><name pos:line="137" pos:column="28">pvBuffer<pos:position pos:line="137" pos:column="36"/></name></expr></argument>)<pos:position pos:line="137" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="38"/></expr_stmt>

    <comment type="block" pos:line="139" pos:column="5">/* check if the handshake was incomplete */</comment>
    <if pos:line="140" pos:column="5">if<condition pos:line="140" pos:column="7">(<expr><name pos:line="140" pos:column="8">sspi_status<pos:position pos:line="140" pos:column="19"/></name> <operator pos:line="140" pos:column="20">==<pos:position pos:line="140" pos:column="22"/></operator> <name pos:line="140" pos:column="23">SEC_E_INCOMPLETE_MESSAGE<pos:position pos:line="140" pos:column="47"/></name></expr>)<pos:position pos:line="140" pos:column="48"/></condition><then pos:line="140" pos:column="48"> <block pos:line="140" pos:column="49">{
      <expr_stmt><expr><name><name pos:line="141" pos:column="7">BACKEND<pos:position pos:line="141" pos:column="14"/></name><operator pos:line="141" pos:column="14">-&gt;<pos:position pos:line="141" pos:column="19"/></operator><name pos:line="141" pos:column="16">encdata_is_incomplete<pos:position pos:line="141" pos:column="37"/></name></name> <operator pos:line="141" pos:column="38">=<pos:position pos:line="141" pos:column="39"/></operator> <literal type="boolean" pos:line="141" pos:column="40">true<pos:position pos:line="141" pos:column="44"/></literal></expr>;<pos:position pos:line="141" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="142" pos:column="7">connssl<pos:position pos:line="142" pos:column="14"/></name><operator pos:line="142" pos:column="14">-&gt;<pos:position pos:line="142" pos:column="19"/></operator><name pos:line="142" pos:column="16">connecting_state<pos:position pos:line="142" pos:column="32"/></name></name> <operator pos:line="142" pos:column="33">=<pos:position pos:line="142" pos:column="34"/></operator> <name pos:line="142" pos:column="35">ssl_connect_2_reading<pos:position pos:line="142" pos:column="56"/></name></expr>;<pos:position pos:line="142" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="143" pos:column="7">infof<pos:position pos:line="143" pos:column="12"/></name><argument_list pos:line="143" pos:column="12">(<argument><expr><name pos:line="143" pos:column="13">data<pos:position pos:line="143" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="19">"schannel: received incomplete message, need more data\n"<pos:position pos:line="143" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="78"/></expr_stmt>
      <return pos:line="144" pos:column="7">return <expr><name pos:line="144" pos:column="14">CURLE_OK<pos:position pos:line="144" pos:column="22"/></name></expr>;<pos:position pos:line="144" pos:column="23"/></return>
    }<pos:position pos:line="145" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="147" pos:column="5">/* If the server has requested a client certificate, attempt to continue
       the handshake without one. This will allow connections to servers which
       request a client certificate but do not require it. */</comment>
    <if pos:line="150" pos:column="5">if<condition pos:line="150" pos:column="7">(<expr><name pos:line="150" pos:column="8">sspi_status<pos:position pos:line="150" pos:column="19"/></name> <operator pos:line="150" pos:column="20">==<pos:position pos:line="150" pos:column="22"/></operator> <name pos:line="150" pos:column="23">SEC_I_INCOMPLETE_CREDENTIALS<pos:position pos:line="150" pos:column="51"/></name> <operator pos:line="150" pos:column="52">&amp;&amp;<pos:position pos:line="150" pos:column="62"/></operator>
       <operator pos:line="151" pos:column="8">!<pos:position pos:line="151" pos:column="9"/></operator><operator pos:line="151" pos:column="9">(<pos:position pos:line="151" pos:column="10"/></operator><name><name pos:line="151" pos:column="10">BACKEND<pos:position pos:line="151" pos:column="17"/></name><operator pos:line="151" pos:column="17">-&gt;<pos:position pos:line="151" pos:column="22"/></operator><name pos:line="151" pos:column="19">req_flags<pos:position pos:line="151" pos:column="28"/></name></name> <operator pos:line="151" pos:column="29">&amp;<pos:position pos:line="151" pos:column="34"/></operator> <name pos:line="151" pos:column="31">ISC_REQ_USE_SUPPLIED_CREDS<pos:position pos:line="151" pos:column="57"/></name><operator pos:line="151" pos:column="57">)<pos:position pos:line="151" pos:column="58"/></operator></expr>)<pos:position pos:line="151" pos:column="59"/></condition><then pos:line="151" pos:column="59"> <block pos:line="151" pos:column="60">{
      <expr_stmt><expr><name><name pos:line="152" pos:column="7">BACKEND<pos:position pos:line="152" pos:column="14"/></name><operator pos:line="152" pos:column="14">-&gt;<pos:position pos:line="152" pos:column="19"/></operator><name pos:line="152" pos:column="16">req_flags<pos:position pos:line="152" pos:column="25"/></name></name> <operator pos:line="152" pos:column="26">|=<pos:position pos:line="152" pos:column="28"/></operator> <name pos:line="152" pos:column="29">ISC_REQ_USE_SUPPLIED_CREDS<pos:position pos:line="152" pos:column="55"/></name></expr>;<pos:position pos:line="152" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="153" pos:column="7">connssl<pos:position pos:line="153" pos:column="14"/></name><operator pos:line="153" pos:column="14">-&gt;<pos:position pos:line="153" pos:column="19"/></operator><name pos:line="153" pos:column="16">connecting_state<pos:position pos:line="153" pos:column="32"/></name></name> <operator pos:line="153" pos:column="33">=<pos:position pos:line="153" pos:column="34"/></operator> <name pos:line="153" pos:column="35">ssl_connect_2_writing<pos:position pos:line="153" pos:column="56"/></name></expr>;<pos:position pos:line="153" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="154" pos:column="7">infof<pos:position pos:line="154" pos:column="12"/></name><argument_list pos:line="154" pos:column="12">(<argument><expr><name pos:line="154" pos:column="13">data<pos:position pos:line="154" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="154" pos:column="19">"schannel: a client certificate has been requested\n"<pos:position pos:line="154" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="74"/></expr_stmt>
      <return pos:line="155" pos:column="7">return <expr><name pos:line="155" pos:column="14">CURLE_OK<pos:position pos:line="155" pos:column="22"/></name></expr>;<pos:position pos:line="155" pos:column="23"/></return>
    }<pos:position pos:line="156" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="158" pos:column="5">/* check if the handshake needs to be continued */</comment>
    <if pos:line="159" pos:column="5">if<condition pos:line="159" pos:column="7">(<expr><name pos:line="159" pos:column="8">sspi_status<pos:position pos:line="159" pos:column="19"/></name> <operator pos:line="159" pos:column="20">==<pos:position pos:line="159" pos:column="22"/></operator> <name pos:line="159" pos:column="23">SEC_I_CONTINUE_NEEDED<pos:position pos:line="159" pos:column="44"/></name> <operator pos:line="159" pos:column="45">||<pos:position pos:line="159" pos:column="47"/></operator> <name pos:line="159" pos:column="48">sspi_status<pos:position pos:line="159" pos:column="59"/></name> <operator pos:line="159" pos:column="60">==<pos:position pos:line="159" pos:column="62"/></operator> <name pos:line="159" pos:column="63">SEC_E_OK<pos:position pos:line="159" pos:column="71"/></name></expr>)<pos:position pos:line="159" pos:column="72"/></condition><then pos:line="159" pos:column="72"> <block pos:line="159" pos:column="73">{
      <for pos:line="160" pos:column="7">for<control pos:line="160" pos:column="10">(<init><expr><name pos:line="160" pos:column="11">i<pos:position pos:line="160" pos:column="12"/></name> <operator pos:line="160" pos:column="13">=<pos:position pos:line="160" pos:column="14"/></operator> <literal type="number" pos:line="160" pos:column="15">0<pos:position pos:line="160" pos:column="16"/></literal></expr>;<pos:position pos:line="160" pos:column="17"/></init> <condition><expr><name pos:line="160" pos:column="18">i<pos:position pos:line="160" pos:column="19"/></name> <operator pos:line="160" pos:column="20">&lt;<pos:position pos:line="160" pos:column="24"/></operator> <literal type="number" pos:line="160" pos:column="22">3<pos:position pos:line="160" pos:column="23"/></literal></expr>;<pos:position pos:line="160" pos:column="24"/></condition> <incr><expr><name pos:line="160" pos:column="25">i<pos:position pos:line="160" pos:column="26"/></name><operator pos:line="160" pos:column="26">++<pos:position pos:line="160" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="160" pos:column="29"/></control> <block pos:line="160" pos:column="30">{
        <comment type="block" pos:line="161" pos:column="9">/* search for handshake tokens that need to be send */</comment>
        <if pos:line="162" pos:column="9">if<condition pos:line="162" pos:column="11">(<expr><name><name pos:line="162" pos:column="12">outbuf<pos:position pos:line="162" pos:column="18"/></name><index pos:line="162" pos:column="18">[<expr><name pos:line="162" pos:column="19">i<pos:position pos:line="162" pos:column="20"/></name></expr>]<pos:position pos:line="162" pos:column="21"/></index></name><operator pos:line="162" pos:column="21">.<pos:position pos:line="162" pos:column="22"/></operator><name pos:line="162" pos:column="22">BufferType<pos:position pos:line="162" pos:column="32"/></name> <operator pos:line="162" pos:column="33">==<pos:position pos:line="162" pos:column="35"/></operator> <name pos:line="162" pos:column="36">SECBUFFER_TOKEN<pos:position pos:line="162" pos:column="51"/></name> <operator pos:line="162" pos:column="52">&amp;&amp;<pos:position pos:line="162" pos:column="62"/></operator> <name><name pos:line="162" pos:column="55">outbuf<pos:position pos:line="162" pos:column="61"/></name><index pos:line="162" pos:column="61">[<expr><name pos:line="162" pos:column="62">i<pos:position pos:line="162" pos:column="63"/></name></expr>]<pos:position pos:line="162" pos:column="64"/></index></name><operator pos:line="162" pos:column="64">.<pos:position pos:line="162" pos:column="65"/></operator><name pos:line="162" pos:column="65">cbBuffer<pos:position pos:line="162" pos:column="73"/></name> <operator pos:line="162" pos:column="74">&gt;<pos:position pos:line="162" pos:column="78"/></operator> <literal type="number" pos:line="162" pos:column="76">0<pos:position pos:line="162" pos:column="77"/></literal></expr>)<pos:position pos:line="162" pos:column="78"/></condition><then pos:line="162" pos:column="78"> <block pos:line="162" pos:column="79">{
          <expr_stmt><expr><call><name pos:line="163" pos:column="11">infof<pos:position pos:line="163" pos:column="16"/></name><argument_list pos:line="163" pos:column="16">(<argument><expr><name pos:line="163" pos:column="17">data<pos:position pos:line="163" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="163" pos:column="23">"schannel: sending next handshake data: "<pos:position pos:line="163" pos:column="64"/></literal>
                <literal type="string" pos:line="164" pos:column="17">"sending %lu bytes...\n"<pos:position pos:line="164" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="164" pos:column="43">outbuf<pos:position pos:line="164" pos:column="49"/></name><index pos:line="164" pos:column="49">[<expr><name pos:line="164" pos:column="50">i<pos:position pos:line="164" pos:column="51"/></name></expr>]<pos:position pos:line="164" pos:column="52"/></index></name><operator pos:line="164" pos:column="52">.<pos:position pos:line="164" pos:column="53"/></operator><name pos:line="164" pos:column="53">cbBuffer<pos:position pos:line="164" pos:column="61"/></name></expr></argument>)<pos:position pos:line="164" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="63"/></expr_stmt>

          <comment type="block" pos:line="166" pos:column="11">/* send handshake token to server */</comment>
          <expr_stmt><expr><name pos:line="167" pos:column="11">result<pos:position pos:line="167" pos:column="17"/></name> <operator pos:line="167" pos:column="18">=<pos:position pos:line="167" pos:column="19"/></operator> <call><name pos:line="167" pos:column="20">Curl_write_plain<pos:position pos:line="167" pos:column="36"/></name><argument_list pos:line="167" pos:column="36">(<argument><expr><name pos:line="167" pos:column="37">conn<pos:position pos:line="167" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="43">conn<pos:position pos:line="167" pos:column="47"/></name><operator pos:line="167" pos:column="47">-&gt;<pos:position pos:line="167" pos:column="52"/></operator><name pos:line="167" pos:column="49">sock<pos:position pos:line="167" pos:column="53"/></name><index pos:line="167" pos:column="53">[<expr><name pos:line="167" pos:column="54">sockindex<pos:position pos:line="167" pos:column="63"/></name></expr>]<pos:position pos:line="167" pos:column="64"/></index></name></expr></argument>,
                                    <argument><expr><name><name pos:line="168" pos:column="37">outbuf<pos:position pos:line="168" pos:column="43"/></name><index pos:line="168" pos:column="43">[<expr><name pos:line="168" pos:column="44">i<pos:position pos:line="168" pos:column="45"/></name></expr>]<pos:position pos:line="168" pos:column="46"/></index></name><operator pos:line="168" pos:column="46">.<pos:position pos:line="168" pos:column="47"/></operator><name pos:line="168" pos:column="47">pvBuffer<pos:position pos:line="168" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="57">outbuf<pos:position pos:line="168" pos:column="63"/></name><index pos:line="168" pos:column="63">[<expr><name pos:line="168" pos:column="64">i<pos:position pos:line="168" pos:column="65"/></name></expr>]<pos:position pos:line="168" pos:column="66"/></index></name><operator pos:line="168" pos:column="66">.<pos:position pos:line="168" pos:column="67"/></operator><name pos:line="168" pos:column="67">cbBuffer<pos:position pos:line="168" pos:column="75"/></name></expr></argument>,
                                    <argument><expr><operator pos:line="169" pos:column="37">&amp;<pos:position pos:line="169" pos:column="42"/></operator><name pos:line="169" pos:column="38">written<pos:position pos:line="169" pos:column="45"/></name></expr></argument>)<pos:position pos:line="169" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="47"/></expr_stmt>
          <if pos:line="170" pos:column="11">if<condition pos:line="170" pos:column="13">(<expr><operator pos:line="170" pos:column="14">(<pos:position pos:line="170" pos:column="15"/></operator><name pos:line="170" pos:column="15">result<pos:position pos:line="170" pos:column="21"/></name> <operator pos:line="170" pos:column="22">!=<pos:position pos:line="170" pos:column="24"/></operator> <name pos:line="170" pos:column="25">CURLE_OK<pos:position pos:line="170" pos:column="33"/></name><operator pos:line="170" pos:column="33">)<pos:position pos:line="170" pos:column="34"/></operator> <operator pos:line="170" pos:column="35">||<pos:position pos:line="170" pos:column="37"/></operator>
             <operator pos:line="171" pos:column="14">(<pos:position pos:line="171" pos:column="15"/></operator><name><name pos:line="171" pos:column="15">outbuf<pos:position pos:line="171" pos:column="21"/></name><index pos:line="171" pos:column="21">[<expr><name pos:line="171" pos:column="22">i<pos:position pos:line="171" pos:column="23"/></name></expr>]<pos:position pos:line="171" pos:column="24"/></index></name><operator pos:line="171" pos:column="24">.<pos:position pos:line="171" pos:column="25"/></operator><name pos:line="171" pos:column="25">cbBuffer<pos:position pos:line="171" pos:column="33"/></name> <operator pos:line="171" pos:column="34">!=<pos:position pos:line="171" pos:column="36"/></operator> <operator pos:line="171" pos:column="37">(<pos:position pos:line="171" pos:column="38"/></operator><name pos:line="171" pos:column="38">size_t<pos:position pos:line="171" pos:column="44"/></name><operator pos:line="171" pos:column="44">)<pos:position pos:line="171" pos:column="45"/></operator> <name pos:line="171" pos:column="46">written<pos:position pos:line="171" pos:column="53"/></name><operator pos:line="171" pos:column="53">)<pos:position pos:line="171" pos:column="54"/></operator></expr>)<pos:position pos:line="171" pos:column="55"/></condition><then pos:line="171" pos:column="55"> <block pos:line="171" pos:column="56">{
            <expr_stmt><expr><call><name pos:line="172" pos:column="13">failf<pos:position pos:line="172" pos:column="18"/></name><argument_list pos:line="172" pos:column="18">(<argument><expr><name pos:line="172" pos:column="19">data<pos:position pos:line="172" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="172" pos:column="25">"schannel: failed to send next handshake data: "<pos:position pos:line="172" pos:column="73"/></literal>
                  <literal type="string" pos:line="173" pos:column="19">"sent %zd of %lu bytes"<pos:position pos:line="173" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="44">written<pos:position pos:line="173" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="173" pos:column="53">outbuf<pos:position pos:line="173" pos:column="59"/></name><index pos:line="173" pos:column="59">[<expr><name pos:line="173" pos:column="60">i<pos:position pos:line="173" pos:column="61"/></name></expr>]<pos:position pos:line="173" pos:column="62"/></index></name><operator pos:line="173" pos:column="62">.<pos:position pos:line="173" pos:column="63"/></operator><name pos:line="173" pos:column="63">cbBuffer<pos:position pos:line="173" pos:column="71"/></name></expr></argument>)<pos:position pos:line="173" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="73"/></expr_stmt>
            <return pos:line="174" pos:column="13">return <expr><name pos:line="174" pos:column="20">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="174" pos:column="43"/></name></expr>;<pos:position pos:line="174" pos:column="44"/></return>
          }<pos:position pos:line="175" pos:column="12"/></block></then></if>
        }<pos:position pos:line="176" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="178" pos:column="9">/* free obsolete buffer */</comment>
        <if pos:line="179" pos:column="9">if<condition pos:line="179" pos:column="11">(<expr><name><name pos:line="179" pos:column="12">outbuf<pos:position pos:line="179" pos:column="18"/></name><index pos:line="179" pos:column="18">[<expr><name pos:line="179" pos:column="19">i<pos:position pos:line="179" pos:column="20"/></name></expr>]<pos:position pos:line="179" pos:column="21"/></index></name><operator pos:line="179" pos:column="21">.<pos:position pos:line="179" pos:column="22"/></operator><name pos:line="179" pos:column="22">pvBuffer<pos:position pos:line="179" pos:column="30"/></name> <operator pos:line="179" pos:column="31">!=<pos:position pos:line="179" pos:column="33"/></operator> <name pos:line="179" pos:column="34">NULL<pos:position pos:line="179" pos:column="38"/></name></expr>)<pos:position pos:line="179" pos:column="39"/></condition><then pos:line="179" pos:column="39"> <block pos:line="179" pos:column="40">{
          <expr_stmt><expr><call><name><name pos:line="180" pos:column="11">s_pSecFn<pos:position pos:line="180" pos:column="19"/></name><operator pos:line="180" pos:column="19">-&gt;<pos:position pos:line="180" pos:column="24"/></operator><name pos:line="180" pos:column="21">FreeContextBuffer<pos:position pos:line="180" pos:column="38"/></name></name><argument_list pos:line="180" pos:column="38">(<argument><expr><name><name pos:line="180" pos:column="39">outbuf<pos:position pos:line="180" pos:column="45"/></name><index pos:line="180" pos:column="45">[<expr><name pos:line="180" pos:column="46">i<pos:position pos:line="180" pos:column="47"/></name></expr>]<pos:position pos:line="180" pos:column="48"/></index></name><operator pos:line="180" pos:column="48">.<pos:position pos:line="180" pos:column="49"/></operator><name pos:line="180" pos:column="49">pvBuffer<pos:position pos:line="180" pos:column="57"/></name></expr></argument>)<pos:position pos:line="180" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="59"/></expr_stmt>
        }<pos:position pos:line="181" pos:column="10"/></block></then></if>
      }<pos:position pos:line="182" pos:column="8"/></block></for>
    }<pos:position pos:line="183" pos:column="6"/></block></then>
    <else pos:line="184" pos:column="5">else <block pos:line="184" pos:column="10">{
      <if pos:line="185" pos:column="7">if<condition pos:line="185" pos:column="9">(<expr><name pos:line="185" pos:column="10">sspi_status<pos:position pos:line="185" pos:column="21"/></name> <operator pos:line="185" pos:column="22">==<pos:position pos:line="185" pos:column="24"/></operator> <name pos:line="185" pos:column="25">SEC_E_WRONG_PRINCIPAL<pos:position pos:line="185" pos:column="46"/></name></expr>)<pos:position pos:line="185" pos:column="47"/></condition><then pos:line="185" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="186" pos:column="9">failf<pos:position pos:line="186" pos:column="14"/></name><argument_list pos:line="186" pos:column="14">(<argument><expr><name pos:line="186" pos:column="15">data<pos:position pos:line="186" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="186" pos:column="21">"schannel: SNI or certificate check failed: %s"<pos:position pos:line="186" pos:column="68"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="187" pos:column="15">Curl_sspi_strerror<pos:position pos:line="187" pos:column="33"/></name><argument_list pos:line="187" pos:column="33">(<argument><expr><name pos:line="187" pos:column="34">conn<pos:position pos:line="187" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="40">sspi_status<pos:position pos:line="187" pos:column="51"/></name></expr></argument>)<pos:position pos:line="187" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="187" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="54"/></expr_stmt></block></then>
      <else pos:line="188" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="189" pos:column="9">failf<pos:position pos:line="189" pos:column="14"/></name><argument_list pos:line="189" pos:column="14">(<argument><expr><name pos:line="189" pos:column="15">data<pos:position pos:line="189" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="21">"schannel: next InitializeSecurityContext failed: %s"<pos:position pos:line="189" pos:column="74"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="190" pos:column="15">Curl_sspi_strerror<pos:position pos:line="190" pos:column="33"/></name><argument_list pos:line="190" pos:column="33">(<argument><expr><name pos:line="190" pos:column="34">conn<pos:position pos:line="190" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="40">sspi_status<pos:position pos:line="190" pos:column="51"/></name></expr></argument>)<pos:position pos:line="190" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="190" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="54"/></expr_stmt></block></else></if>
      <return pos:line="191" pos:column="7">return <expr><ternary><condition><expr><name pos:line="191" pos:column="14">sspi_status<pos:position pos:line="191" pos:column="25"/></name> <operator pos:line="191" pos:column="26">==<pos:position pos:line="191" pos:column="28"/></operator> <name pos:line="191" pos:column="29">SEC_E_UNTRUSTED_ROOT<pos:position pos:line="191" pos:column="49"/></name></expr> ?<pos:position pos:line="191" pos:column="51"/></condition><then pos:line="191" pos:column="51">
          <expr><name pos:line="192" pos:column="11">CURLE_SSL_CACERT<pos:position pos:line="192" pos:column="27"/></name></expr> <pos:position pos:line="192" pos:column="28"/></then><else pos:line="192" pos:column="28">: <expr><name pos:line="192" pos:column="30">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="192" pos:column="53"/></name></expr></else></ternary></expr>;<pos:position pos:line="192" pos:column="54"/></return>
    }<pos:position pos:line="193" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="195" pos:column="5">/* check if there was additional remaining encrypted data */</comment>
    <if pos:line="196" pos:column="5">if<condition pos:line="196" pos:column="7">(<expr><name><name pos:line="196" pos:column="8">inbuf<pos:position pos:line="196" pos:column="13"/></name><index pos:line="196" pos:column="13">[<expr><literal type="number" pos:line="196" pos:column="14">1<pos:position pos:line="196" pos:column="15"/></literal></expr>]<pos:position pos:line="196" pos:column="16"/></index></name><operator pos:line="196" pos:column="16">.<pos:position pos:line="196" pos:column="17"/></operator><name pos:line="196" pos:column="17">BufferType<pos:position pos:line="196" pos:column="27"/></name> <operator pos:line="196" pos:column="28">==<pos:position pos:line="196" pos:column="30"/></operator> <name pos:line="196" pos:column="31">SECBUFFER_EXTRA<pos:position pos:line="196" pos:column="46"/></name> <operator pos:line="196" pos:column="47">&amp;&amp;<pos:position pos:line="196" pos:column="57"/></operator> <name><name pos:line="196" pos:column="50">inbuf<pos:position pos:line="196" pos:column="55"/></name><index pos:line="196" pos:column="55">[<expr><literal type="number" pos:line="196" pos:column="56">1<pos:position pos:line="196" pos:column="57"/></literal></expr>]<pos:position pos:line="196" pos:column="58"/></index></name><operator pos:line="196" pos:column="58">.<pos:position pos:line="196" pos:column="59"/></operator><name pos:line="196" pos:column="59">cbBuffer<pos:position pos:line="196" pos:column="67"/></name> <operator pos:line="196" pos:column="68">&gt;<pos:position pos:line="196" pos:column="72"/></operator> <literal type="number" pos:line="196" pos:column="70">0<pos:position pos:line="196" pos:column="71"/></literal></expr>)<pos:position pos:line="196" pos:column="72"/></condition><then pos:line="196" pos:column="72"> <block pos:line="196" pos:column="73">{
      <expr_stmt><expr><call><name pos:line="197" pos:column="7">infof<pos:position pos:line="197" pos:column="12"/></name><argument_list pos:line="197" pos:column="12">(<argument><expr><name pos:line="197" pos:column="13">data<pos:position pos:line="197" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="197" pos:column="19">"schannel: encrypted data length: %lu\n"<pos:position pos:line="197" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="61">inbuf<pos:position pos:line="197" pos:column="66"/></name><index pos:line="197" pos:column="66">[<expr><literal type="number" pos:line="197" pos:column="67">1<pos:position pos:line="197" pos:column="68"/></literal></expr>]<pos:position pos:line="197" pos:column="69"/></index></name><operator pos:line="197" pos:column="69">.<pos:position pos:line="197" pos:column="70"/></operator><name pos:line="197" pos:column="70">cbBuffer<pos:position pos:line="197" pos:column="78"/></name></expr></argument>)<pos:position pos:line="197" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="80"/></expr_stmt>
      <comment type="block" pos:line="198" pos:column="7">/*
        There are two cases where we could be getting extra data here:
        1) If we're renegotiating a connection and the handshake is already
        complete (from the server perspective), it can encrypted app data
        (not handshake data) in an extra buffer at this point.
        2) (sspi_status == SEC_I_CONTINUE_NEEDED) We are negotiating a
        connection and this extra data is part of the handshake.
        We should process the data immediately; waiting for the socket to
        be ready may fail since the server is done sending handshake data.
      */</comment>
      <comment type="block" pos:line="208" pos:column="7">/* check if the remaining data is less than the total amount
         and therefore begins after the already processed data */</comment>
      <if pos:line="210" pos:column="7">if<condition pos:line="210" pos:column="9">(<expr><name><name pos:line="210" pos:column="10">BACKEND<pos:position pos:line="210" pos:column="17"/></name><operator pos:line="210" pos:column="17">-&gt;<pos:position pos:line="210" pos:column="22"/></operator><name pos:line="210" pos:column="19">encdata_offset<pos:position pos:line="210" pos:column="33"/></name></name> <operator pos:line="210" pos:column="34">&gt;<pos:position pos:line="210" pos:column="38"/></operator> <name><name pos:line="210" pos:column="36">inbuf<pos:position pos:line="210" pos:column="41"/></name><index pos:line="210" pos:column="41">[<expr><literal type="number" pos:line="210" pos:column="42">1<pos:position pos:line="210" pos:column="43"/></literal></expr>]<pos:position pos:line="210" pos:column="44"/></index></name><operator pos:line="210" pos:column="44">.<pos:position pos:line="210" pos:column="45"/></operator><name pos:line="210" pos:column="45">cbBuffer<pos:position pos:line="210" pos:column="53"/></name></expr>)<pos:position pos:line="210" pos:column="54"/></condition><then pos:line="210" pos:column="54"> <block pos:line="210" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="211" pos:column="9">memmove<pos:position pos:line="211" pos:column="16"/></name><argument_list pos:line="211" pos:column="16">(<argument><expr><name><name pos:line="211" pos:column="17">BACKEND<pos:position pos:line="211" pos:column="24"/></name><operator pos:line="211" pos:column="24">-&gt;<pos:position pos:line="211" pos:column="29"/></operator><name pos:line="211" pos:column="26">encdata_buffer<pos:position pos:line="211" pos:column="40"/></name></name></expr></argument>,
                <argument><expr><operator pos:line="212" pos:column="17">(<pos:position pos:line="212" pos:column="18"/></operator><name><name pos:line="212" pos:column="18">BACKEND<pos:position pos:line="212" pos:column="25"/></name><operator pos:line="212" pos:column="25">-&gt;<pos:position pos:line="212" pos:column="30"/></operator><name pos:line="212" pos:column="27">encdata_buffer<pos:position pos:line="212" pos:column="41"/></name></name> <operator pos:line="212" pos:column="42">+<pos:position pos:line="212" pos:column="43"/></operator> <name><name pos:line="212" pos:column="44">BACKEND<pos:position pos:line="212" pos:column="51"/></name><operator pos:line="212" pos:column="51">-&gt;<pos:position pos:line="212" pos:column="56"/></operator><name pos:line="212" pos:column="53">encdata_offset<pos:position pos:line="212" pos:column="67"/></name></name><operator pos:line="212" pos:column="67">)<pos:position pos:line="212" pos:column="68"/></operator> <operator pos:line="212" pos:column="69">-<pos:position pos:line="212" pos:column="70"/></operator>
                <name><name pos:line="213" pos:column="17">inbuf<pos:position pos:line="213" pos:column="22"/></name><index pos:line="213" pos:column="22">[<expr><literal type="number" pos:line="213" pos:column="23">1<pos:position pos:line="213" pos:column="24"/></literal></expr>]<pos:position pos:line="213" pos:column="25"/></index></name><operator pos:line="213" pos:column="25">.<pos:position pos:line="213" pos:column="26"/></operator><name pos:line="213" pos:column="26">cbBuffer<pos:position pos:line="213" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="213" pos:column="36">inbuf<pos:position pos:line="213" pos:column="41"/></name><index pos:line="213" pos:column="41">[<expr><literal type="number" pos:line="213" pos:column="42">1<pos:position pos:line="213" pos:column="43"/></literal></expr>]<pos:position pos:line="213" pos:column="44"/></index></name><operator pos:line="213" pos:column="44">.<pos:position pos:line="213" pos:column="45"/></operator><name pos:line="213" pos:column="45">cbBuffer<pos:position pos:line="213" pos:column="53"/></name></expr></argument>)<pos:position pos:line="213" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="214" pos:column="9">BACKEND<pos:position pos:line="214" pos:column="16"/></name><operator pos:line="214" pos:column="16">-&gt;<pos:position pos:line="214" pos:column="21"/></operator><name pos:line="214" pos:column="18">encdata_offset<pos:position pos:line="214" pos:column="32"/></name></name> <operator pos:line="214" pos:column="33">=<pos:position pos:line="214" pos:column="34"/></operator> <name><name pos:line="214" pos:column="35">inbuf<pos:position pos:line="214" pos:column="40"/></name><index pos:line="214" pos:column="40">[<expr><literal type="number" pos:line="214" pos:column="41">1<pos:position pos:line="214" pos:column="42"/></literal></expr>]<pos:position pos:line="214" pos:column="43"/></index></name><operator pos:line="214" pos:column="43">.<pos:position pos:line="214" pos:column="44"/></operator><name pos:line="214" pos:column="44">cbBuffer<pos:position pos:line="214" pos:column="52"/></name></expr>;<pos:position pos:line="214" pos:column="53"/></expr_stmt>
        <if pos:line="215" pos:column="9">if<condition pos:line="215" pos:column="11">(<expr><name pos:line="215" pos:column="12">sspi_status<pos:position pos:line="215" pos:column="23"/></name> <operator pos:line="215" pos:column="24">==<pos:position pos:line="215" pos:column="26"/></operator> <name pos:line="215" pos:column="27">SEC_I_CONTINUE_NEEDED<pos:position pos:line="215" pos:column="48"/></name></expr>)<pos:position pos:line="215" pos:column="49"/></condition><then pos:line="215" pos:column="49"> <block pos:line="215" pos:column="50">{
          <expr_stmt><expr><name pos:line="216" pos:column="11">doread<pos:position pos:line="216" pos:column="17"/></name> <operator pos:line="216" pos:column="18">=<pos:position pos:line="216" pos:column="19"/></operator> <name pos:line="216" pos:column="20">FALSE<pos:position pos:line="216" pos:column="25"/></name></expr>;<pos:position pos:line="216" pos:column="26"/></expr_stmt>
          <continue pos:line="217" pos:column="11">continue;<pos:position pos:line="217" pos:column="20"/></continue>
        }<pos:position pos:line="218" pos:column="10"/></block></then></if>
      }<pos:position pos:line="219" pos:column="8"/></block></then></if>
    }<pos:position pos:line="220" pos:column="6"/></block></then>
    <else pos:line="221" pos:column="5">else <block pos:line="221" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="222" pos:column="7">BACKEND<pos:position pos:line="222" pos:column="14"/></name><operator pos:line="222" pos:column="14">-&gt;<pos:position pos:line="222" pos:column="19"/></operator><name pos:line="222" pos:column="16">encdata_offset<pos:position pos:line="222" pos:column="30"/></name></name> <operator pos:line="222" pos:column="31">=<pos:position pos:line="222" pos:column="32"/></operator> <literal type="number" pos:line="222" pos:column="33">0<pos:position pos:line="222" pos:column="34"/></literal></expr>;<pos:position pos:line="222" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="223" pos:column="6"/></block></else></if>
    <break pos:line="224" pos:column="5">break;<pos:position pos:line="224" pos:column="11"/></break>
  }<pos:position pos:line="225" pos:column="4"/></block></for>

  <comment type="block" pos:line="227" pos:column="3">/* check if the handshake needs to be continued */</comment>
  <if pos:line="228" pos:column="3">if<condition pos:line="228" pos:column="5">(<expr><name pos:line="228" pos:column="6">sspi_status<pos:position pos:line="228" pos:column="17"/></name> <operator pos:line="228" pos:column="18">==<pos:position pos:line="228" pos:column="20"/></operator> <name pos:line="228" pos:column="21">SEC_I_CONTINUE_NEEDED<pos:position pos:line="228" pos:column="42"/></name></expr>)<pos:position pos:line="228" pos:column="43"/></condition><then pos:line="228" pos:column="43"> <block pos:line="228" pos:column="44">{
    <expr_stmt><expr><name><name pos:line="229" pos:column="5">connssl<pos:position pos:line="229" pos:column="12"/></name><operator pos:line="229" pos:column="12">-&gt;<pos:position pos:line="229" pos:column="17"/></operator><name pos:line="229" pos:column="14">connecting_state<pos:position pos:line="229" pos:column="30"/></name></name> <operator pos:line="229" pos:column="31">=<pos:position pos:line="229" pos:column="32"/></operator> <name pos:line="229" pos:column="33">ssl_connect_2_reading<pos:position pos:line="229" pos:column="54"/></name></expr>;<pos:position pos:line="229" pos:column="55"/></expr_stmt>
    <return pos:line="230" pos:column="5">return <expr><name pos:line="230" pos:column="12">CURLE_OK<pos:position pos:line="230" pos:column="20"/></name></expr>;<pos:position pos:line="230" pos:column="21"/></return>
  }<pos:position pos:line="231" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="233" pos:column="3">/* check if the handshake is complete */</comment>
  <if pos:line="234" pos:column="3">if<condition pos:line="234" pos:column="5">(<expr><name pos:line="234" pos:column="6">sspi_status<pos:position pos:line="234" pos:column="17"/></name> <operator pos:line="234" pos:column="18">==<pos:position pos:line="234" pos:column="20"/></operator> <name pos:line="234" pos:column="21">SEC_E_OK<pos:position pos:line="234" pos:column="29"/></name></expr>)<pos:position pos:line="234" pos:column="30"/></condition><then pos:line="234" pos:column="30"> <block pos:line="234" pos:column="31">{
    <expr_stmt><expr><name><name pos:line="235" pos:column="5">connssl<pos:position pos:line="235" pos:column="12"/></name><operator pos:line="235" pos:column="12">-&gt;<pos:position pos:line="235" pos:column="17"/></operator><name pos:line="235" pos:column="14">connecting_state<pos:position pos:line="235" pos:column="30"/></name></name> <operator pos:line="235" pos:column="31">=<pos:position pos:line="235" pos:column="32"/></operator> <name pos:line="235" pos:column="33">ssl_connect_3<pos:position pos:line="235" pos:column="46"/></name></expr>;<pos:position pos:line="235" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="236" pos:column="5">infof<pos:position pos:line="236" pos:column="10"/></name><argument_list pos:line="236" pos:column="10">(<argument><expr><name pos:line="236" pos:column="11">data<pos:position pos:line="236" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="236" pos:column="17">"schannel: SSL/TLS handshake complete\n"<pos:position pos:line="236" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="59"/></expr_stmt>
  }<pos:position pos:line="237" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="239" pos:column="1">#<cpp:directive pos:line="239" pos:column="2">ifdef<pos:position pos:line="239" pos:column="7"/></cpp:directive> <name pos:line="239" pos:column="8">_WIN32_WCE<pos:position pos:line="239" pos:column="18"/></name></cpp:ifdef>
  <comment type="block" pos:line="240" pos:column="3">/* Windows CE doesn't do any server certificate validation.
     We have to do it manually. */</comment>
  <if pos:line="242" pos:column="3">if<condition pos:line="242" pos:column="5">(<expr><name><name pos:line="242" pos:column="6">conn<pos:position pos:line="242" pos:column="10"/></name><operator pos:line="242" pos:column="10">-&gt;<pos:position pos:line="242" pos:column="15"/></operator><name pos:line="242" pos:column="12">ssl_config<pos:position pos:line="242" pos:column="22"/></name><operator pos:line="242" pos:column="22">.<pos:position pos:line="242" pos:column="23"/></operator><name pos:line="242" pos:column="23">verifypeer<pos:position pos:line="242" pos:column="33"/></name></name></expr>)<pos:position pos:line="242" pos:column="34"/></condition><then pos:line="242" pos:column="34">
    <block type="pseudo"><return pos:line="243" pos:column="5">return <expr><call><name pos:line="243" pos:column="12">verify_certificate<pos:position pos:line="243" pos:column="30"/></name><argument_list pos:line="243" pos:column="30">(<argument><expr><name pos:line="243" pos:column="31">conn<pos:position pos:line="243" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="243" pos:column="37">sockindex<pos:position pos:line="243" pos:column="46"/></name></expr></argument>)<pos:position pos:line="243" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="48"/></return></block></then></if>
<cpp:endif pos:line="244" pos:column="1">#<cpp:directive pos:line="244" pos:column="2">endif<pos:position pos:line="244" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="246" pos:column="3">return <expr><name pos:line="246" pos:column="10">CURLE_OK<pos:position pos:line="246" pos:column="18"/></name></expr>;<pos:position pos:line="246" pos:column="19"/></return>
}<pos:position pos:line="247" pos:column="2"/></block></function></unit>
