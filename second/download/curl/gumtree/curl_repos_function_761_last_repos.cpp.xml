<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_761_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">DWORD<pos:position pos:line="1" pos:column="13"/></name> <name pos:line="1" pos:column="14">WINAPI<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">select_ws_wait_thread<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">LPVOID<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">lpParameter<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">select_ws_wait_data<pos:position pos:line="3" pos:column="29"/></name></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">data<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">HANDLE<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">handle<pos:position pos:line="4" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="18">handles<pos:position pos:line="4" pos:column="25"/></name><index pos:line="4" pos:column="25">[<expr><literal type="number" pos:line="4" pos:column="26">2<pos:position pos:line="4" pos:column="27"/></literal></expr>]<pos:position pos:line="4" pos:column="28"/></index></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">INPUT_RECORD<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">inputrecord<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">LARGE_INTEGER<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">size<pos:position pos:line="6" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="23">pos<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">DWORD<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">type<pos:position pos:line="7" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="15">length<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* retrieve handles from internal structure */</comment>
  <expr_stmt><expr><name pos:line="10" pos:column="3">data<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">=<pos:position pos:line="10" pos:column="9"/></operator> <operator pos:line="10" pos:column="10">(<pos:position pos:line="10" pos:column="11"/></operator>struct <name pos:line="10" pos:column="18">select_ws_wait_data<pos:position pos:line="10" pos:column="37"/></name> <operator pos:line="10" pos:column="38">*<pos:position pos:line="10" pos:column="39"/></operator><operator pos:line="10" pos:column="39">)<pos:position pos:line="10" pos:column="40"/></operator> <name pos:line="10" pos:column="41">lpParameter<pos:position pos:line="10" pos:column="52"/></name></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">data<pos:position pos:line="11" pos:column="10"/></name></expr>)<pos:position pos:line="11" pos:column="11"/></condition><then pos:line="11" pos:column="11"> <block pos:line="11" pos:column="12">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">handle<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <name><name pos:line="12" pos:column="14">data<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">-&gt;<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="20">handle<pos:position pos:line="12" pos:column="26"/></name></name></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">handles<pos:position pos:line="13" pos:column="12"/></name><index pos:line="13" pos:column="12">[<expr><literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal></expr>]<pos:position pos:line="13" pos:column="15"/></index></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name><name pos:line="13" pos:column="18">data<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">-&gt;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="24">event<pos:position pos:line="13" pos:column="29"/></name></name></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">handles<pos:position pos:line="14" pos:column="12"/></name><index pos:line="14" pos:column="12">[<expr><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>]<pos:position pos:line="14" pos:column="15"/></index></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">handle<pos:position pos:line="14" pos:column="24"/></name></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">free<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name pos:line="15" pos:column="10">data<pos:position pos:line="15" pos:column="14"/></name></expr></argument>)<pos:position pos:line="15" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then>
  <else pos:line="17" pos:column="3">else
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">DWORD<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">)<pos:position pos:line="18" pos:column="19"/></operator><operator pos:line="18" pos:column="19">-<pos:position pos:line="18" pos:column="20"/></operator><literal type="number" pos:line="18" pos:column="20">1<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></return></block></else></if>

  <comment type="block" pos:line="20" pos:column="3">/* retrieve the type of file to wait on */</comment>
  <expr_stmt><expr><name pos:line="21" pos:column="3">type<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <call><name pos:line="21" pos:column="10">GetFileType<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">handle<pos:position pos:line="21" pos:column="28"/></name></expr></argument>)<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
  <switch pos:line="22" pos:column="3">switch<condition pos:line="22" pos:column="9">(<expr><name pos:line="22" pos:column="10">type<pos:position pos:line="22" pos:column="14"/></name></expr>)<pos:position pos:line="22" pos:column="15"/></condition> <block pos:line="22" pos:column="16">{
    <case pos:line="23" pos:column="5">case <expr><name pos:line="23" pos:column="10">FILE_TYPE_DISK<pos:position pos:line="23" pos:column="24"/></name></expr>:<pos:position pos:line="23" pos:column="25"/></case>
       <comment type="block" pos:line="24" pos:column="8">/* The handle represents a file on disk, this means:
        * - WaitForMultipleObjectsEx will always be signalled for it.
        * - comparison of current position in file and total size of
        *   the file can be used to check if we reached the end yet.
        *
        * Approach: Loop till either the internal event is signalled
        *           or if the end of the file has already been reached.
        */</comment>
      <while pos:line="32" pos:column="7">while<condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">WaitForMultipleObjectsEx<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><literal type="number" pos:line="32" pos:column="38">1<pos:position pos:line="32" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="41">handles<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="50">FALSE<pos:position pos:line="32" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="57">0<pos:position pos:line="32" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="60">FALSE<pos:position pos:line="32" pos:column="65"/></name></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call>
            <operator pos:line="33" pos:column="13">==<pos:position pos:line="33" pos:column="15"/></operator> <name pos:line="33" pos:column="16">WAIT_TIMEOUT<pos:position pos:line="33" pos:column="28"/></name></expr>)<pos:position pos:line="33" pos:column="29"/></condition> <block pos:line="33" pos:column="30">{
        <comment type="block" pos:line="34" pos:column="9">/* get total size of file */</comment>
        <expr_stmt><expr><name pos:line="35" pos:column="9">length<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <literal type="number" pos:line="35" pos:column="18">0<pos:position pos:line="35" pos:column="19"/></literal></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">size<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">.<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">QuadPart<pos:position pos:line="36" pos:column="22"/></name></name> <operator pos:line="36" pos:column="23">=<pos:position pos:line="36" pos:column="24"/></operator> <literal type="number" pos:line="36" pos:column="25">0<pos:position pos:line="36" pos:column="26"/></literal></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">size<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">.<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">LowPart<pos:position pos:line="37" pos:column="21"/></name></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <call><name pos:line="37" pos:column="24">GetFileSize<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name pos:line="37" pos:column="36">handle<pos:position pos:line="37" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="44">&amp;<pos:position pos:line="37" pos:column="49"/></operator><name pos:line="37" pos:column="45">length<pos:position pos:line="37" pos:column="51"/></name></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="53"/></expr_stmt>
        <if pos:line="38" pos:column="9">if<condition pos:line="38" pos:column="11">(<expr><operator pos:line="38" pos:column="12">(<pos:position pos:line="38" pos:column="13"/></operator><name><name pos:line="38" pos:column="13">size<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">.<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">LowPart<pos:position pos:line="38" pos:column="25"/></name></name> <operator pos:line="38" pos:column="26">!=<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="29">INVALID_FILE_SIZE<pos:position pos:line="38" pos:column="46"/></name><operator pos:line="38" pos:column="46">)<pos:position pos:line="38" pos:column="47"/></operator> <operator pos:line="38" pos:column="48">||<pos:position pos:line="38" pos:column="50"/></operator>
           <operator pos:line="39" pos:column="12">(<pos:position pos:line="39" pos:column="13"/></operator><call><name pos:line="39" pos:column="13">GetLastError<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">()<pos:position pos:line="39" pos:column="27"/></argument_list></call> <operator pos:line="39" pos:column="28">==<pos:position pos:line="39" pos:column="30"/></operator> <name pos:line="39" pos:column="31">NO_ERROR<pos:position pos:line="39" pos:column="39"/></name><operator pos:line="39" pos:column="39">)<pos:position pos:line="39" pos:column="40"/></operator></expr>)<pos:position pos:line="39" pos:column="41"/></condition><then pos:line="39" pos:column="41"> <block pos:line="39" pos:column="42">{
          <expr_stmt><expr><name><name pos:line="40" pos:column="11">size<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">.<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="16">HighPart<pos:position pos:line="40" pos:column="24"/></name></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <name pos:line="40" pos:column="27">length<pos:position pos:line="40" pos:column="33"/></name></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
          <comment type="block" pos:line="41" pos:column="11">/* get the current position within the file */</comment>
          <expr_stmt><expr><name><name pos:line="42" pos:column="11">pos<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">.<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">QuadPart<pos:position pos:line="42" pos:column="23"/></name></name> <operator pos:line="42" pos:column="24">=<pos:position pos:line="42" pos:column="25"/></operator> <literal type="number" pos:line="42" pos:column="26">0<pos:position pos:line="42" pos:column="27"/></literal></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="43" pos:column="11">pos<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">.<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">LowPart<pos:position pos:line="43" pos:column="22"/></name></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <call><name pos:line="43" pos:column="25">SetFilePointer<pos:position pos:line="43" pos:column="39"/></name><argument_list pos:line="43" pos:column="39">(<argument><expr><name pos:line="43" pos:column="40">handle<pos:position pos:line="43" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="48">0<pos:position pos:line="43" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="43" pos:column="51">&amp;<pos:position pos:line="43" pos:column="56"/></operator><name><name pos:line="43" pos:column="52">pos<pos:position pos:line="43" pos:column="55"/></name><operator pos:line="43" pos:column="55">.<pos:position pos:line="43" pos:column="56"/></operator><name pos:line="43" pos:column="56">HighPart<pos:position pos:line="43" pos:column="64"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="44" pos:column="40">FILE_CURRENT<pos:position pos:line="44" pos:column="52"/></name></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt>
          <if pos:line="45" pos:column="11">if<condition pos:line="45" pos:column="13">(<expr><operator pos:line="45" pos:column="14">(<pos:position pos:line="45" pos:column="15"/></operator><name><name pos:line="45" pos:column="15">pos<pos:position pos:line="45" pos:column="18"/></name><operator pos:line="45" pos:column="18">.<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">LowPart<pos:position pos:line="45" pos:column="26"/></name></name> <operator pos:line="45" pos:column="27">!=<pos:position pos:line="45" pos:column="29"/></operator> <name pos:line="45" pos:column="30">INVALID_SET_FILE_POINTER<pos:position pos:line="45" pos:column="54"/></name><operator pos:line="45" pos:column="54">)<pos:position pos:line="45" pos:column="55"/></operator> <operator pos:line="45" pos:column="56">||<pos:position pos:line="45" pos:column="58"/></operator>
             <operator pos:line="46" pos:column="14">(<pos:position pos:line="46" pos:column="15"/></operator><call><name pos:line="46" pos:column="15">GetLastError<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">()<pos:position pos:line="46" pos:column="29"/></argument_list></call> <operator pos:line="46" pos:column="30">==<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="33">NO_ERROR<pos:position pos:line="46" pos:column="41"/></name><operator pos:line="46" pos:column="41">)<pos:position pos:line="46" pos:column="42"/></operator></expr>)<pos:position pos:line="46" pos:column="43"/></condition><then pos:line="46" pos:column="43"> <block pos:line="46" pos:column="44">{
            <comment type="block" pos:line="47" pos:column="13">/* compare position with size, abort if not equal */</comment>
            <if pos:line="48" pos:column="13">if<condition pos:line="48" pos:column="15">(<expr><name><name pos:line="48" pos:column="16">size<pos:position pos:line="48" pos:column="20"/></name><operator pos:line="48" pos:column="20">.<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="21">QuadPart<pos:position pos:line="48" pos:column="29"/></name></name> <operator pos:line="48" pos:column="30">==<pos:position pos:line="48" pos:column="32"/></operator> <name><name pos:line="48" pos:column="33">pos<pos:position pos:line="48" pos:column="36"/></name><operator pos:line="48" pos:column="36">.<pos:position pos:line="48" pos:column="37"/></operator><name pos:line="48" pos:column="37">QuadPart<pos:position pos:line="48" pos:column="45"/></name></name></expr>)<pos:position pos:line="48" pos:column="46"/></condition><then pos:line="48" pos:column="46"> <block pos:line="48" pos:column="47">{
              <comment type="block" pos:line="49" pos:column="15">/* sleep and continue waiting */</comment>
              <expr_stmt><expr><call><name pos:line="50" pos:column="15">SleepEx<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><literal type="number" pos:line="50" pos:column="23">0<pos:position pos:line="50" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="26">FALSE<pos:position pos:line="50" pos:column="31"/></name></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt>
              <continue pos:line="51" pos:column="15">continue;<pos:position pos:line="51" pos:column="24"/></continue>
            }<pos:position pos:line="52" pos:column="14"/></block></then></if>
          }<pos:position pos:line="53" pos:column="12"/></block></then></if>
        }<pos:position pos:line="54" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="55" pos:column="9">/* there is some data available, stop waiting */</comment>
        <break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break>
      }<pos:position pos:line="57" pos:column="8"/></block></while>
      <break pos:line="58" pos:column="7">break;<pos:position pos:line="58" pos:column="13"/></break>

    <case pos:line="60" pos:column="5">case <expr><name pos:line="60" pos:column="10">FILE_TYPE_CHAR<pos:position pos:line="60" pos:column="24"/></name></expr>:<pos:position pos:line="60" pos:column="25"/></case>
       <comment type="block" pos:line="61" pos:column="8">/* The handle represents a character input, this means:
        * - WaitForMultipleObjectsEx will be signalled on any kind of input,
        *   including mouse and window size events we do not care about.
        *
        * Approach: Loop till either the internal event is signalled
        *           or we get signalled for an actual key-event.
        */</comment>
      <while pos:line="68" pos:column="7">while<condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">WaitForMultipleObjectsEx<pos:position pos:line="68" pos:column="37"/></name><argument_list pos:line="68" pos:column="37">(<argument><expr><literal type="number" pos:line="68" pos:column="38">2<pos:position pos:line="68" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="41">handles<pos:position pos:line="68" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="50">FALSE<pos:position pos:line="68" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="57">INFINITE<pos:position pos:line="68" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="67">FALSE<pos:position pos:line="68" pos:column="72"/></name></expr></argument>)<pos:position pos:line="68" pos:column="73"/></argument_list></call>
            <operator pos:line="69" pos:column="13">==<pos:position pos:line="69" pos:column="15"/></operator> <name pos:line="69" pos:column="16">WAIT_OBJECT_0<pos:position pos:line="69" pos:column="29"/></name> <operator pos:line="69" pos:column="30">+<pos:position pos:line="69" pos:column="31"/></operator> <literal type="number" pos:line="69" pos:column="32">1<pos:position pos:line="69" pos:column="33"/></literal></expr>)<pos:position pos:line="69" pos:column="34"/></condition> <block pos:line="69" pos:column="35">{
        <comment type="block" pos:line="70" pos:column="9">/* check if this is an actual console handle */</comment>
        <expr_stmt><expr><name pos:line="71" pos:column="9">length<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">=<pos:position pos:line="71" pos:column="17"/></operator> <literal type="number" pos:line="71" pos:column="18">0<pos:position pos:line="71" pos:column="19"/></literal></expr>;<pos:position pos:line="71" pos:column="20"/></expr_stmt>
        <if pos:line="72" pos:column="9">if<condition pos:line="72" pos:column="11">(<expr><call><name pos:line="72" pos:column="12">GetConsoleMode<pos:position pos:line="72" pos:column="26"/></name><argument_list pos:line="72" pos:column="26">(<argument><expr><name pos:line="72" pos:column="27">handle<pos:position pos:line="72" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="35">&amp;<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="36">length<pos:position pos:line="72" pos:column="42"/></name></expr></argument>)<pos:position pos:line="72" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="44"/></condition><then pos:line="72" pos:column="44"> <block pos:line="72" pos:column="45">{
          <comment type="block" pos:line="73" pos:column="11">/* retrieve an event from the console buffer */</comment>
          <expr_stmt><expr><name pos:line="74" pos:column="11">length<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">=<pos:position pos:line="74" pos:column="19"/></operator> <literal type="number" pos:line="74" pos:column="20">0<pos:position pos:line="74" pos:column="21"/></literal></expr>;<pos:position pos:line="74" pos:column="22"/></expr_stmt>
          <if pos:line="75" pos:column="11">if<condition pos:line="75" pos:column="13">(<expr><call><name pos:line="75" pos:column="14">PeekConsoleInput<pos:position pos:line="75" pos:column="30"/></name><argument_list pos:line="75" pos:column="30">(<argument><expr><name pos:line="75" pos:column="31">handle<pos:position pos:line="75" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="39">&amp;<pos:position pos:line="75" pos:column="44"/></operator><name pos:line="75" pos:column="40">inputrecord<pos:position pos:line="75" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="53">1<pos:position pos:line="75" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="75" pos:column="56">&amp;<pos:position pos:line="75" pos:column="61"/></operator><name pos:line="75" pos:column="57">length<pos:position pos:line="75" pos:column="63"/></name></expr></argument>)<pos:position pos:line="75" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="65"/></condition><then pos:line="75" pos:column="65"> <block pos:line="75" pos:column="66">{
            <comment type="block" pos:line="76" pos:column="13">/* check if the event is not an actual key-event */</comment>
            <if pos:line="77" pos:column="13">if<condition pos:line="77" pos:column="15">(<expr><name pos:line="77" pos:column="16">length<pos:position pos:line="77" pos:column="22"/></name> <operator pos:line="77" pos:column="23">==<pos:position pos:line="77" pos:column="25"/></operator> <literal type="number" pos:line="77" pos:column="26">1<pos:position pos:line="77" pos:column="27"/></literal> <operator pos:line="77" pos:column="28">&amp;&amp;<pos:position pos:line="77" pos:column="38"/></operator> <name><name pos:line="77" pos:column="31">inputrecord<pos:position pos:line="77" pos:column="42"/></name><operator pos:line="77" pos:column="42">.<pos:position pos:line="77" pos:column="43"/></operator><name pos:line="77" pos:column="43">EventType<pos:position pos:line="77" pos:column="52"/></name></name> <operator pos:line="77" pos:column="53">!=<pos:position pos:line="77" pos:column="55"/></operator> <name pos:line="77" pos:column="56">KEY_EVENT<pos:position pos:line="77" pos:column="65"/></name></expr>)<pos:position pos:line="77" pos:column="66"/></condition><then pos:line="77" pos:column="66"> <block pos:line="77" pos:column="67">{
              <comment type="block" pos:line="78" pos:column="15">/* purge the non-key-event and continue waiting */</comment>
              <expr_stmt><expr><call><name pos:line="79" pos:column="15">ReadConsoleInput<pos:position pos:line="79" pos:column="31"/></name><argument_list pos:line="79" pos:column="31">(<argument><expr><name pos:line="79" pos:column="32">handle<pos:position pos:line="79" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="40">&amp;<pos:position pos:line="79" pos:column="45"/></operator><name pos:line="79" pos:column="41">inputrecord<pos:position pos:line="79" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="54">1<pos:position pos:line="79" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="79" pos:column="57">&amp;<pos:position pos:line="79" pos:column="62"/></operator><name pos:line="79" pos:column="58">length<pos:position pos:line="79" pos:column="64"/></name></expr></argument>)<pos:position pos:line="79" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="66"/></expr_stmt>
              <continue pos:line="80" pos:column="15">continue;<pos:position pos:line="80" pos:column="24"/></continue>
            }<pos:position pos:line="81" pos:column="14"/></block></then></if>
          }<pos:position pos:line="82" pos:column="12"/></block></then></if>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="84" pos:column="9">/* there is some data available, stop waiting */</comment>
        <break pos:line="85" pos:column="9">break;<pos:position pos:line="85" pos:column="15"/></break>
      }<pos:position pos:line="86" pos:column="8"/></block></while>
      <break pos:line="87" pos:column="7">break;<pos:position pos:line="87" pos:column="13"/></break>

    <case pos:line="89" pos:column="5">case <expr><name pos:line="89" pos:column="10">FILE_TYPE_PIPE<pos:position pos:line="89" pos:column="24"/></name></expr>:<pos:position pos:line="89" pos:column="25"/></case>
       <comment type="block" pos:line="90" pos:column="8">/* The handle represents an anonymous or named pipe, this means:
        * - WaitForMultipleObjectsEx will always be signalled for it.
        * - peek into the pipe and retrieve the amount of data available.
        *
        * Approach: Loop till either the internal event is signalled
        *           or there is data in the pipe available for reading.
        */</comment>
      <while pos:line="97" pos:column="7">while<condition pos:line="97" pos:column="12">(<expr><call><name pos:line="97" pos:column="13">WaitForMultipleObjectsEx<pos:position pos:line="97" pos:column="37"/></name><argument_list pos:line="97" pos:column="37">(<argument><expr><literal type="number" pos:line="97" pos:column="38">1<pos:position pos:line="97" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="41">handles<pos:position pos:line="97" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="50">FALSE<pos:position pos:line="97" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="57">0<pos:position pos:line="97" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="60">FALSE<pos:position pos:line="97" pos:column="65"/></name></expr></argument>)<pos:position pos:line="97" pos:column="66"/></argument_list></call>
            <operator pos:line="98" pos:column="13">==<pos:position pos:line="98" pos:column="15"/></operator> <name pos:line="98" pos:column="16">WAIT_TIMEOUT<pos:position pos:line="98" pos:column="28"/></name></expr>)<pos:position pos:line="98" pos:column="29"/></condition> <block pos:line="98" pos:column="30">{
        <comment type="block" pos:line="99" pos:column="9">/* peek into the pipe and retrieve the amount of data available */</comment>
        <expr_stmt><expr><name pos:line="100" pos:column="9">length<pos:position pos:line="100" pos:column="15"/></name> <operator pos:line="100" pos:column="16">=<pos:position pos:line="100" pos:column="17"/></operator> <literal type="number" pos:line="100" pos:column="18">0<pos:position pos:line="100" pos:column="19"/></literal></expr>;<pos:position pos:line="100" pos:column="20"/></expr_stmt>
        <if pos:line="101" pos:column="9">if<condition pos:line="101" pos:column="11">(<expr><call><name pos:line="101" pos:column="12">PeekNamedPipe<pos:position pos:line="101" pos:column="25"/></name><argument_list pos:line="101" pos:column="25">(<argument><expr><name pos:line="101" pos:column="26">handle<pos:position pos:line="101" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="34">NULL<pos:position pos:line="101" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="40">0<pos:position pos:line="101" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="43">NULL<pos:position pos:line="101" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="49">&amp;<pos:position pos:line="101" pos:column="54"/></operator><name pos:line="101" pos:column="50">length<pos:position pos:line="101" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="58">NULL<pos:position pos:line="101" pos:column="62"/></name></expr></argument>)<pos:position pos:line="101" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="101" pos:column="64"/></condition><then pos:line="101" pos:column="64"> <block pos:line="101" pos:column="65">{
          <comment type="block" pos:line="102" pos:column="11">/* if there is no data available, sleep and continue waiting */</comment>
          <if pos:line="103" pos:column="11">if<condition pos:line="103" pos:column="13">(<expr><name pos:line="103" pos:column="14">length<pos:position pos:line="103" pos:column="20"/></name> <operator pos:line="103" pos:column="21">==<pos:position pos:line="103" pos:column="23"/></operator> <literal type="number" pos:line="103" pos:column="24">0<pos:position pos:line="103" pos:column="25"/></literal></expr>)<pos:position pos:line="103" pos:column="26"/></condition><then pos:line="103" pos:column="26"> <block pos:line="103" pos:column="27">{
            <expr_stmt><expr><call><name pos:line="104" pos:column="13">SleepEx<pos:position pos:line="104" pos:column="20"/></name><argument_list pos:line="104" pos:column="20">(<argument><expr><literal type="number" pos:line="104" pos:column="21">0<pos:position pos:line="104" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="24">FALSE<pos:position pos:line="104" pos:column="29"/></name></expr></argument>)<pos:position pos:line="104" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="31"/></expr_stmt>
            <continue pos:line="105" pos:column="13">continue;<pos:position pos:line="105" pos:column="22"/></continue>
          }<pos:position pos:line="106" pos:column="12"/></block></then></if>
        }<pos:position pos:line="107" pos:column="10"/></block></then>
        <else pos:line="108" pos:column="9">else <block pos:line="108" pos:column="14">{
          <comment type="block" pos:line="109" pos:column="11">/* if the pipe has been closed, sleep and continue waiting */</comment>
          <if pos:line="110" pos:column="11">if<condition pos:line="110" pos:column="13">(<expr><call><name pos:line="110" pos:column="14">GetLastError<pos:position pos:line="110" pos:column="26"/></name><argument_list pos:line="110" pos:column="26">()<pos:position pos:line="110" pos:column="28"/></argument_list></call> <operator pos:line="110" pos:column="29">==<pos:position pos:line="110" pos:column="31"/></operator> <name pos:line="110" pos:column="32">ERROR_BROKEN_PIPE<pos:position pos:line="110" pos:column="49"/></name></expr>)<pos:position pos:line="110" pos:column="50"/></condition><then pos:line="110" pos:column="50"> <block pos:line="110" pos:column="51">{
            <expr_stmt><expr><call><name pos:line="111" pos:column="13">SleepEx<pos:position pos:line="111" pos:column="20"/></name><argument_list pos:line="111" pos:column="20">(<argument><expr><literal type="number" pos:line="111" pos:column="21">0<pos:position pos:line="111" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="24">FALSE<pos:position pos:line="111" pos:column="29"/></name></expr></argument>)<pos:position pos:line="111" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="31"/></expr_stmt>
            <continue pos:line="112" pos:column="13">continue;<pos:position pos:line="112" pos:column="22"/></continue>
          }<pos:position pos:line="113" pos:column="12"/></block></then></if>
        }<pos:position pos:line="114" pos:column="10"/></block></else></if>
        <comment type="block" pos:line="115" pos:column="9">/* there is some data available, stop waiting */</comment>
        <break pos:line="116" pos:column="9">break;<pos:position pos:line="116" pos:column="15"/></break>
      }<pos:position pos:line="117" pos:column="8"/></block></while>
      <break pos:line="118" pos:column="7">break;<pos:position pos:line="118" pos:column="13"/></break>

    <default pos:line="120" pos:column="5">default:<pos:position pos:line="120" pos:column="13"/></default>
      <comment type="block" pos:line="121" pos:column="7">/* The handle has an unknown type, try to wait on it */</comment>
      <expr_stmt><expr><call><name pos:line="122" pos:column="7">WaitForMultipleObjectsEx<pos:position pos:line="122" pos:column="31"/></name><argument_list pos:line="122" pos:column="31">(<argument><expr><literal type="number" pos:line="122" pos:column="32">2<pos:position pos:line="122" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="35">handles<pos:position pos:line="122" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="44">FALSE<pos:position pos:line="122" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="51">INFINITE<pos:position pos:line="122" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="61">FALSE<pos:position pos:line="122" pos:column="66"/></name></expr></argument>)<pos:position pos:line="122" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="68"/></expr_stmt>
      <break pos:line="123" pos:column="7">break;<pos:position pos:line="123" pos:column="13"/></break>
  }<pos:position pos:line="124" pos:column="4"/></block></switch>

  <return pos:line="126" pos:column="3">return <expr><literal type="number" pos:line="126" pos:column="10">0<pos:position pos:line="126" pos:column="11"/></literal></expr>;<pos:position pos:line="126" pos:column="12"/></return>
}<pos:position pos:line="127" pos:column="2"/></block></function></unit>
