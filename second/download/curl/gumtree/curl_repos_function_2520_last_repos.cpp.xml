<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2520_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">cyassl_connect_step1<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name><name pos:line="2" pos:column="22">struct<pos:position pos:line="2" pos:column="28"/></name> <name pos:line="2" pos:column="29">connectdata<pos:position pos:line="2" pos:column="40"/></name></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">conn<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="3" pos:column="22">int<pos:position pos:line="3" pos:column="25"/></name></type> <name pos:line="3" pos:column="26">sockindex<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="36"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">error_buffer<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><name pos:line="5" pos:column="21">CYASSL_MAX_ERROR_SZ<pos:position pos:line="5" pos:column="40"/></name></expr>]<pos:position pos:line="5" pos:column="41"/></index></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">ciphers<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_easy<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">data<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name><name pos:line="7" pos:column="28">conn<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">data<pos:position pos:line="7" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">ssl_connect_data<pos:position pos:line="8" pos:column="26"/></name></name><modifier pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></modifier></type> <name pos:line="8" pos:column="28">connssl<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name><name pos:line="8" pos:column="39">conn<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">ssl<pos:position pos:line="8" pos:column="48"/></name><index pos:line="8" pos:column="48">[<expr><name pos:line="8" pos:column="49">sockindex<pos:position pos:line="8" pos:column="58"/></name></expr>]<pos:position pos:line="8" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">SSL_METHOD<pos:position pos:line="9" pos:column="13"/></name><modifier pos:line="9" pos:column="13">*<pos:position pos:line="9" pos:column="14"/></modifier></type> <name pos:line="9" pos:column="15">req_method<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><name pos:line="9" pos:column="28">NULL<pos:position pos:line="9" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">curl_socket_t<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">sockfd<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><name><name pos:line="10" pos:column="26">conn<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">-&gt;<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="32">sock<pos:position pos:line="10" pos:column="36"/></name><index pos:line="10" pos:column="36">[<expr><name pos:line="10" pos:column="37">sockindex<pos:position pos:line="10" pos:column="46"/></name></expr>]<pos:position pos:line="10" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>
<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">HAVE_SNI<pos:position pos:line="11" pos:column="16"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">bool<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">sni<pos:position pos:line="12" pos:column="11"/></name> <init pos:line="12" pos:column="12">= <expr><name pos:line="12" pos:column="14">FALSE<pos:position pos:line="12" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define<pos:position pos:line="13" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">use_sni<pos:position pos:line="13" pos:column="16"/></name><parameter_list pos:line="13" pos:column="16">(<parameter><type><name pos:line="13" pos:column="17">x<pos:position pos:line="13" pos:column="18"/></name></type></parameter>)<pos:position pos:line="13" pos:column="19"/></parameter_list></cpp:macro>  <cpp:value pos:line="13" pos:column="21">sni = (x)<pos:position pos:line="13" pos:column="30"/></cpp:value></cpp:define>
<cpp:else pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">else<pos:position pos:line="14" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">define<pos:position pos:line="15" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="15" pos:column="9">use_sni<pos:position pos:line="15" pos:column="16"/></name><parameter_list pos:line="15" pos:column="16">(<parameter><type><name pos:line="15" pos:column="17">x<pos:position pos:line="15" pos:column="18"/></name></type></parameter>)<pos:position pos:line="15" pos:column="19"/></parameter_list></cpp:macro>  <cpp:value pos:line="15" pos:column="21">Curl_nop_stmt<pos:position pos:line="15" pos:column="34"/></cpp:value></cpp:define>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name><name pos:line="18" pos:column="6">connssl<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">-&gt;<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="15">state<pos:position pos:line="18" pos:column="20"/></name></name> <operator pos:line="18" pos:column="21">==<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">ssl_connection_complete<pos:position pos:line="18" pos:column="47"/></name></expr>)<pos:position pos:line="18" pos:column="48"/></condition><then pos:line="18" pos:column="48">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">CURLE_OK<pos:position pos:line="19" pos:column="20"/></name></expr>;<pos:position pos:line="19" pos:column="21"/></return></block></then></if>

  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><call><name pos:line="21" pos:column="6">SSL_CONN_CONFIG<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">version_max<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call> <operator pos:line="21" pos:column="35">!=<pos:position pos:line="21" pos:column="37"/></operator> <name pos:line="21" pos:column="38">CURL_SSLVERSION_MAX_NONE<pos:position pos:line="21" pos:column="62"/></name></expr>)<pos:position pos:line="21" pos:column="63"/></condition><then pos:line="21" pos:column="63"> <block pos:line="21" pos:column="64">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">failf<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><name pos:line="22" pos:column="11">data<pos:position pos:line="22" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="17">"CyaSSL does not support to set maximum SSL/TLS version"<pos:position pos:line="22" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="75"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="23" pos:column="35"/></name></expr>;<pos:position pos:line="23" pos:column="36"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="26" pos:column="3">/* check to see if we've been told to use an explicit SSL/TLS version */</comment>
  <switch pos:line="27" pos:column="3">switch<condition pos:line="27" pos:column="9">(<expr><call><name pos:line="27" pos:column="10">SSL_CONN_CONFIG<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">version<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="35"/></condition> <block pos:line="27" pos:column="36">{
  <case pos:line="28" pos:column="3">case <expr><name pos:line="28" pos:column="8">CURL_SSLVERSION_DEFAULT<pos:position pos:line="28" pos:column="31"/></name></expr>:<pos:position pos:line="28" pos:column="32"/></case>
  <case pos:line="29" pos:column="3">case <expr><name pos:line="29" pos:column="8">CURL_SSLVERSION_TLSv1<pos:position pos:line="29" pos:column="29"/></name></expr>:<pos:position pos:line="29" pos:column="30"/></case>
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">LIBCYASSL_VERSION_HEX<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">&gt;=<pos:position pos:line="30" pos:column="32"/></operator> <literal type="number" pos:line="30" pos:column="30">0x03003000<pos:position pos:line="30" pos:column="40"/></literal></expr></cpp:if> <comment type="block" pos:line="30" pos:column="41">/* &gt;= 3.3.0 */</comment>
    <comment type="block" pos:line="31" pos:column="5">/* minimum protocol version is set later after the CTX object is created */</comment>
    <expr_stmt><expr><name pos:line="32" pos:column="5">req_method<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <call><name pos:line="32" pos:column="18">SSLv23_client_method<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">()<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
<cpp:else pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">else<pos:position pos:line="33" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">infof<pos:position pos:line="34" pos:column="10"/></name><argument_list pos:line="34" pos:column="10">(<argument><expr><name pos:line="34" pos:column="11">data<pos:position pos:line="34" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="17">"CyaSSL &lt;3.3.0 cannot be configured to use TLS 1.0-1.2, "<pos:position pos:line="34" pos:column="77"/></literal>
          <literal type="string" pos:line="35" pos:column="11">"TLS 1.0 is used exclusively\n"<pos:position pos:line="35" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">req_method<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <call><name pos:line="36" pos:column="18">TLSv1_client_method<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">()<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif<pos:position pos:line="37" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">use_sni<pos:position pos:line="38" pos:column="12"/></name><argument_list pos:line="38" pos:column="12">(<argument><expr><name pos:line="38" pos:column="13">TRUE<pos:position pos:line="38" pos:column="17"/></name></expr></argument>)<pos:position pos:line="38" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>
    <break pos:line="39" pos:column="5">break;<pos:position pos:line="39" pos:column="11"/></break>
  <case pos:line="40" pos:column="3">case <expr><name pos:line="40" pos:column="8">CURL_SSLVERSION_TLSv1_0<pos:position pos:line="40" pos:column="31"/></name></expr>:<pos:position pos:line="40" pos:column="32"/></case>
    <expr_stmt><expr><name pos:line="41" pos:column="5">req_method<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <call><name pos:line="41" pos:column="18">TLSv1_client_method<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">()<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">use_sni<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">TRUE<pos:position pos:line="42" pos:column="17"/></name></expr></argument>)<pos:position pos:line="42" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="19"/></expr_stmt>
    <break pos:line="43" pos:column="5">break;<pos:position pos:line="43" pos:column="11"/></break>
  <case pos:line="44" pos:column="3">case <expr><name pos:line="44" pos:column="8">CURL_SSLVERSION_TLSv1_1<pos:position pos:line="44" pos:column="31"/></name></expr>:<pos:position pos:line="44" pos:column="32"/></case>
    <expr_stmt><expr><name pos:line="45" pos:column="5">req_method<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <call><name pos:line="45" pos:column="18">TLSv1_1_client_method<pos:position pos:line="45" pos:column="39"/></name><argument_list pos:line="45" pos:column="39">()<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">use_sni<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><name pos:line="46" pos:column="13">TRUE<pos:position pos:line="46" pos:column="17"/></name></expr></argument>)<pos:position pos:line="46" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="19"/></expr_stmt>
    <break pos:line="47" pos:column="5">break;<pos:position pos:line="47" pos:column="11"/></break>
  <case pos:line="48" pos:column="3">case <expr><name pos:line="48" pos:column="8">CURL_SSLVERSION_TLSv1_2<pos:position pos:line="48" pos:column="31"/></name></expr>:<pos:position pos:line="48" pos:column="32"/></case>
    <expr_stmt><expr><name pos:line="49" pos:column="5">req_method<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <call><name pos:line="49" pos:column="18">TLSv1_2_client_method<pos:position pos:line="49" pos:column="39"/></name><argument_list pos:line="49" pos:column="39">()<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">use_sni<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><name pos:line="50" pos:column="13">TRUE<pos:position pos:line="50" pos:column="17"/></name></expr></argument>)<pos:position pos:line="50" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="19"/></expr_stmt>
    <break pos:line="51" pos:column="5">break;<pos:position pos:line="51" pos:column="11"/></break>
  <case pos:line="52" pos:column="3">case <expr><name pos:line="52" pos:column="8">CURL_SSLVERSION_TLSv1_3<pos:position pos:line="52" pos:column="31"/></name></expr>:<pos:position pos:line="52" pos:column="32"/></case>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">failf<pos:position pos:line="53" pos:column="10"/></name><argument_list pos:line="53" pos:column="10">(<argument><expr><name pos:line="53" pos:column="11">data<pos:position pos:line="53" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="17">"CyaSSL: TLS 1.3 is not yet supported"<pos:position pos:line="53" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="57"/></expr_stmt>
    <return pos:line="54" pos:column="5">return <expr><name pos:line="54" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="54" pos:column="35"/></name></expr>;<pos:position pos:line="54" pos:column="36"/></return>
  <case pos:line="55" pos:column="3">case <expr><name pos:line="55" pos:column="8">CURL_SSLVERSION_SSLv3<pos:position pos:line="55" pos:column="29"/></name></expr>:<pos:position pos:line="55" pos:column="30"/></case>
<cpp:ifdef pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">ifdef<pos:position pos:line="56" pos:column="7"/></cpp:directive> <name pos:line="56" pos:column="8">WOLFSSL_ALLOW_SSLV3<pos:position pos:line="56" pos:column="27"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="57" pos:column="5">req_method<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <call><name pos:line="57" pos:column="18">SSLv3_client_method<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">()<pos:position pos:line="57" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">use_sni<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">FALSE<pos:position pos:line="58" pos:column="18"/></name></expr></argument>)<pos:position pos:line="58" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="20"/></expr_stmt>
<cpp:else pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">else<pos:position pos:line="59" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">failf<pos:position pos:line="60" pos:column="10"/></name><argument_list pos:line="60" pos:column="10">(<argument><expr><name pos:line="60" pos:column="11">data<pos:position pos:line="60" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="17">"CyaSSL does not support SSLv3"<pos:position pos:line="60" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="50"/></expr_stmt>
    <return pos:line="61" pos:column="5">return <expr><name pos:line="61" pos:column="12">CURLE_NOT_BUILT_IN<pos:position pos:line="61" pos:column="30"/></name></expr>;<pos:position pos:line="61" pos:column="31"/></return>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif>
    <break pos:line="63" pos:column="5">break;<pos:position pos:line="63" pos:column="11"/></break>
  <case pos:line="64" pos:column="3">case <expr><name pos:line="64" pos:column="8">CURL_SSLVERSION_SSLv2<pos:position pos:line="64" pos:column="29"/></name></expr>:<pos:position pos:line="64" pos:column="30"/></case>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">failf<pos:position pos:line="65" pos:column="10"/></name><argument_list pos:line="65" pos:column="10">(<argument><expr><name pos:line="65" pos:column="11">data<pos:position pos:line="65" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="17">"CyaSSL does not support SSLv2"<pos:position pos:line="65" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="50"/></expr_stmt>
    <return pos:line="66" pos:column="5">return <expr><name pos:line="66" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="66" pos:column="35"/></name></expr>;<pos:position pos:line="66" pos:column="36"/></return>
  <default pos:line="67" pos:column="3">default:<pos:position pos:line="67" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">failf<pos:position pos:line="68" pos:column="10"/></name><argument_list pos:line="68" pos:column="10">(<argument><expr><name pos:line="68" pos:column="11">data<pos:position pos:line="68" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="17">"Unrecognized parameter passed via CURLOPT_SSLVERSION"<pos:position pos:line="68" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="73"/></expr_stmt>
    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="69" pos:column="35"/></name></expr>;<pos:position pos:line="69" pos:column="36"/></return>
  }<pos:position pos:line="70" pos:column="4"/></block></switch>

  <if pos:line="72" pos:column="3">if<condition pos:line="72" pos:column="5">(<expr><operator pos:line="72" pos:column="6">!<pos:position pos:line="72" pos:column="7"/></operator><name pos:line="72" pos:column="7">req_method<pos:position pos:line="72" pos:column="17"/></name></expr>)<pos:position pos:line="72" pos:column="18"/></condition><then pos:line="72" pos:column="18"> <block pos:line="72" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">failf<pos:position pos:line="73" pos:column="10"/></name><argument_list pos:line="73" pos:column="10">(<argument><expr><name pos:line="73" pos:column="11">data<pos:position pos:line="73" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="17">"SSL: couldn't create a method!"<pos:position pos:line="73" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="51"/></expr_stmt>
    <return pos:line="74" pos:column="5">return <expr><name pos:line="74" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="74" pos:column="31"/></name></expr>;<pos:position pos:line="74" pos:column="32"/></return>
  }<pos:position pos:line="75" pos:column="4"/></block></then></if>

  <if pos:line="77" pos:column="3">if<condition pos:line="77" pos:column="5">(<expr><name><name pos:line="77" pos:column="6">BACKEND<pos:position pos:line="77" pos:column="13"/></name><operator pos:line="77" pos:column="13">-&gt;<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="15">ctx<pos:position pos:line="77" pos:column="18"/></name></name></expr>)<pos:position pos:line="77" pos:column="19"/></condition><then pos:line="77" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="5">SSL_CTX_free<pos:position pos:line="78" pos:column="17"/></name><argument_list pos:line="78" pos:column="17">(<argument><expr><name><name pos:line="78" pos:column="18">BACKEND<pos:position pos:line="78" pos:column="25"/></name><operator pos:line="78" pos:column="25">-&gt;<pos:position pos:line="78" pos:column="30"/></operator><name pos:line="78" pos:column="27">ctx<pos:position pos:line="78" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="79" pos:column="3">BACKEND<pos:position pos:line="79" pos:column="10"/></name><operator pos:line="79" pos:column="10">-&gt;<pos:position pos:line="79" pos:column="15"/></operator><name pos:line="79" pos:column="12">ctx<pos:position pos:line="79" pos:column="15"/></name></name> <operator pos:line="79" pos:column="16">=<pos:position pos:line="79" pos:column="17"/></operator> <call><name pos:line="79" pos:column="18">SSL_CTX_new<pos:position pos:line="79" pos:column="29"/></name><argument_list pos:line="79" pos:column="29">(<argument><expr><name pos:line="79" pos:column="30">req_method<pos:position pos:line="79" pos:column="40"/></name></expr></argument>)<pos:position pos:line="79" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="42"/></expr_stmt>

  <if pos:line="81" pos:column="3">if<condition pos:line="81" pos:column="5">(<expr><operator pos:line="81" pos:column="6">!<pos:position pos:line="81" pos:column="7"/></operator><name><name pos:line="81" pos:column="7">BACKEND<pos:position pos:line="81" pos:column="14"/></name><operator pos:line="81" pos:column="14">-&gt;<pos:position pos:line="81" pos:column="19"/></operator><name pos:line="81" pos:column="16">ctx<pos:position pos:line="81" pos:column="19"/></name></name></expr>)<pos:position pos:line="81" pos:column="20"/></condition><then pos:line="81" pos:column="20"> <block pos:line="81" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">failf<pos:position pos:line="82" pos:column="10"/></name><argument_list pos:line="82" pos:column="10">(<argument><expr><name pos:line="82" pos:column="11">data<pos:position pos:line="82" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="17">"SSL: couldn't create a context!"<pos:position pos:line="82" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="52"/></expr_stmt>
    <return pos:line="83" pos:column="5">return <expr><name pos:line="83" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="83" pos:column="31"/></name></expr>;<pos:position pos:line="83" pos:column="32"/></return>
  }<pos:position pos:line="84" pos:column="4"/></block></then></if>

  <switch pos:line="86" pos:column="3">switch<condition pos:line="86" pos:column="9">(<expr><call><name pos:line="86" pos:column="10">SSL_CONN_CONFIG<pos:position pos:line="86" pos:column="25"/></name><argument_list pos:line="86" pos:column="25">(<argument><expr><name pos:line="86" pos:column="26">version<pos:position pos:line="86" pos:column="33"/></name></expr></argument>)<pos:position pos:line="86" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="35"/></condition> <block pos:line="86" pos:column="36">{
  <case pos:line="87" pos:column="3">case <expr><name pos:line="87" pos:column="8">CURL_SSLVERSION_DEFAULT<pos:position pos:line="87" pos:column="31"/></name></expr>:<pos:position pos:line="87" pos:column="32"/></case>
  <case pos:line="88" pos:column="3">case <expr><name pos:line="88" pos:column="8">CURL_SSLVERSION_TLSv1<pos:position pos:line="88" pos:column="29"/></name></expr>:<pos:position pos:line="88" pos:column="30"/></case>
<cpp:if pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">if<pos:position pos:line="89" pos:column="4"/></cpp:directive> <expr><name pos:line="89" pos:column="5">LIBCYASSL_VERSION_HEX<pos:position pos:line="89" pos:column="26"/></name> <operator pos:line="89" pos:column="27">&gt;<pos:position pos:line="89" pos:column="31"/></operator> <literal type="number" pos:line="89" pos:column="29">0x03004006<pos:position pos:line="89" pos:column="39"/></literal></expr></cpp:if> <comment type="block" pos:line="89" pos:column="40">/* &gt; 3.4.6 */</comment>
    <comment type="block" pos:line="90" pos:column="5">/* Versions 3.3.0 to 3.4.6 we know the minimum protocol version is whatever
    minimum version of TLS was built in and at least TLS 1.0. For later library
    versions that could change (eg TLS 1.0 built in but defaults to TLS 1.1) so
    we have this short circuit evaluation to find the minimum supported TLS
    version. We use wolfSSL_CTX_SetMinVersion and not CyaSSL_SetMinVersion
    because only the former will work before the user's CTX callback is called.
    */</comment>
    <if pos:line="97" pos:column="5">if<condition pos:line="97" pos:column="7">(<expr><operator pos:line="97" pos:column="8">(<pos:position pos:line="97" pos:column="9"/></operator><call><name pos:line="97" pos:column="9">wolfSSL_CTX_SetMinVersion<pos:position pos:line="97" pos:column="34"/></name><argument_list pos:line="97" pos:column="34">(<argument><expr><name><name pos:line="97" pos:column="35">BACKEND<pos:position pos:line="97" pos:column="42"/></name><operator pos:line="97" pos:column="42">-&gt;<pos:position pos:line="97" pos:column="47"/></operator><name pos:line="97" pos:column="44">ctx<pos:position pos:line="97" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="49">WOLFSSL_TLSV1<pos:position pos:line="97" pos:column="62"/></name></expr></argument>)<pos:position pos:line="97" pos:column="63"/></argument_list></call> <operator pos:line="97" pos:column="64">!=<pos:position pos:line="97" pos:column="66"/></operator> <literal type="number" pos:line="97" pos:column="67">1<pos:position pos:line="97" pos:column="68"/></literal><operator pos:line="97" pos:column="68">)<pos:position pos:line="97" pos:column="69"/></operator> <operator pos:line="97" pos:column="70">&amp;&amp;<pos:position pos:line="97" pos:column="80"/></operator>
       <operator pos:line="98" pos:column="8">(<pos:position pos:line="98" pos:column="9"/></operator><call><name pos:line="98" pos:column="9">wolfSSL_CTX_SetMinVersion<pos:position pos:line="98" pos:column="34"/></name><argument_list pos:line="98" pos:column="34">(<argument><expr><name><name pos:line="98" pos:column="35">BACKEND<pos:position pos:line="98" pos:column="42"/></name><operator pos:line="98" pos:column="42">-&gt;<pos:position pos:line="98" pos:column="47"/></operator><name pos:line="98" pos:column="44">ctx<pos:position pos:line="98" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="49">WOLFSSL_TLSV1_1<pos:position pos:line="98" pos:column="64"/></name></expr></argument>)<pos:position pos:line="98" pos:column="65"/></argument_list></call> <operator pos:line="98" pos:column="66">!=<pos:position pos:line="98" pos:column="68"/></operator> <literal type="number" pos:line="98" pos:column="69">1<pos:position pos:line="98" pos:column="70"/></literal><operator pos:line="98" pos:column="70">)<pos:position pos:line="98" pos:column="71"/></operator> <operator pos:line="98" pos:column="72">&amp;&amp;<pos:position pos:line="98" pos:column="82"/></operator>
       <operator pos:line="99" pos:column="8">(<pos:position pos:line="99" pos:column="9"/></operator><call><name pos:line="99" pos:column="9">wolfSSL_CTX_SetMinVersion<pos:position pos:line="99" pos:column="34"/></name><argument_list pos:line="99" pos:column="34">(<argument><expr><name><name pos:line="99" pos:column="35">BACKEND<pos:position pos:line="99" pos:column="42"/></name><operator pos:line="99" pos:column="42">-&gt;<pos:position pos:line="99" pos:column="47"/></operator><name pos:line="99" pos:column="44">ctx<pos:position pos:line="99" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="49">WOLFSSL_TLSV1_2<pos:position pos:line="99" pos:column="64"/></name></expr></argument>)<pos:position pos:line="99" pos:column="65"/></argument_list></call> <operator pos:line="99" pos:column="66">!=<pos:position pos:line="99" pos:column="68"/></operator> <literal type="number" pos:line="99" pos:column="69">1<pos:position pos:line="99" pos:column="70"/></literal><operator pos:line="99" pos:column="70">)<pos:position pos:line="99" pos:column="71"/></operator></expr>)<pos:position pos:line="99" pos:column="72"/></condition><then pos:line="99" pos:column="72"> <block pos:line="99" pos:column="73">{
      <expr_stmt><expr><call><name pos:line="100" pos:column="7">failf<pos:position pos:line="100" pos:column="12"/></name><argument_list pos:line="100" pos:column="12">(<argument><expr><name pos:line="100" pos:column="13">data<pos:position pos:line="100" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="19">"SSL: couldn't set the minimum protocol version"<pos:position pos:line="100" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="69"/></expr_stmt>
      <return pos:line="101" pos:column="7">return <expr><name pos:line="101" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="101" pos:column="37"/></name></expr>;<pos:position pos:line="101" pos:column="38"/></return>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>
<cpp:endif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">endif<pos:position pos:line="103" pos:column="7"/></cpp:directive></cpp:endif>
    <break pos:line="104" pos:column="5">break;<pos:position pos:line="104" pos:column="11"/></break>
  }<pos:position pos:line="105" pos:column="4"/></block></switch>

  <expr_stmt><expr><name pos:line="107" pos:column="3">ciphers<pos:position pos:line="107" pos:column="10"/></name> <operator pos:line="107" pos:column="11">=<pos:position pos:line="107" pos:column="12"/></operator> <call><name pos:line="107" pos:column="13">SSL_CONN_CONFIG<pos:position pos:line="107" pos:column="28"/></name><argument_list pos:line="107" pos:column="28">(<argument><expr><name pos:line="107" pos:column="29">cipher_list<pos:position pos:line="107" pos:column="40"/></name></expr></argument>)<pos:position pos:line="107" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="42"/></expr_stmt>
  <if pos:line="108" pos:column="3">if<condition pos:line="108" pos:column="5">(<expr><name pos:line="108" pos:column="6">ciphers<pos:position pos:line="108" pos:column="13"/></name></expr>)<pos:position pos:line="108" pos:column="14"/></condition><then pos:line="108" pos:column="14"> <block pos:line="108" pos:column="15">{
    <if pos:line="109" pos:column="5">if<condition pos:line="109" pos:column="7">(<expr><operator pos:line="109" pos:column="8">!<pos:position pos:line="109" pos:column="9"/></operator><call><name pos:line="109" pos:column="9">SSL_CTX_set_cipher_list<pos:position pos:line="109" pos:column="32"/></name><argument_list pos:line="109" pos:column="32">(<argument><expr><name><name pos:line="109" pos:column="33">BACKEND<pos:position pos:line="109" pos:column="40"/></name><operator pos:line="109" pos:column="40">-&gt;<pos:position pos:line="109" pos:column="45"/></operator><name pos:line="109" pos:column="42">ctx<pos:position pos:line="109" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="47">ciphers<pos:position pos:line="109" pos:column="54"/></name></expr></argument>)<pos:position pos:line="109" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="56"/></condition><then pos:line="109" pos:column="56"> <block pos:line="109" pos:column="57">{
      <expr_stmt><expr><call><name pos:line="110" pos:column="7">failf<pos:position pos:line="110" pos:column="12"/></name><argument_list pos:line="110" pos:column="12">(<argument><expr><name pos:line="110" pos:column="13">data<pos:position pos:line="110" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="19">"failed setting cipher list: %s"<pos:position pos:line="110" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="53">ciphers<pos:position pos:line="110" pos:column="60"/></name></expr></argument>)<pos:position pos:line="110" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="62"/></expr_stmt>
      <return pos:line="111" pos:column="7">return <expr><name pos:line="111" pos:column="14">CURLE_SSL_CIPHER<pos:position pos:line="111" pos:column="30"/></name></expr>;<pos:position pos:line="111" pos:column="31"/></return>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="113" pos:column="5">infof<pos:position pos:line="113" pos:column="10"/></name><argument_list pos:line="113" pos:column="10">(<argument><expr><name pos:line="113" pos:column="11">data<pos:position pos:line="113" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="17">"Cipher selection: %s\n"<pos:position pos:line="113" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="43">ciphers<pos:position pos:line="113" pos:column="50"/></name></expr></argument>)<pos:position pos:line="113" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="52"/></expr_stmt>
  }<pos:position pos:line="114" pos:column="4"/></block></then></if>

<cpp:ifndef pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">ifndef<pos:position pos:line="116" pos:column="8"/></cpp:directive> <name pos:line="116" pos:column="9">NO_FILESYSTEM<pos:position pos:line="116" pos:column="22"/></name></cpp:ifndef>
  <comment type="block" pos:line="117" pos:column="3">/* load trusted cacert */</comment>
  <if pos:line="118" pos:column="3">if<condition pos:line="118" pos:column="5">(<expr><call><name pos:line="118" pos:column="6">SSL_CONN_CONFIG<pos:position pos:line="118" pos:column="21"/></name><argument_list pos:line="118" pos:column="21">(<argument><expr><name pos:line="118" pos:column="22">CAfile<pos:position pos:line="118" pos:column="28"/></name></expr></argument>)<pos:position pos:line="118" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="118" pos:column="30"/></condition><then pos:line="118" pos:column="30"> <block pos:line="118" pos:column="31">{
    <if pos:line="119" pos:column="5">if<condition pos:line="119" pos:column="7">(<expr><literal type="number" pos:line="119" pos:column="8">1<pos:position pos:line="119" pos:column="9"/></literal> <operator pos:line="119" pos:column="10">!=<pos:position pos:line="119" pos:column="12"/></operator> <call><name pos:line="119" pos:column="13">SSL_CTX_load_verify_locations<pos:position pos:line="119" pos:column="42"/></name><argument_list pos:line="119" pos:column="42">(<argument><expr><name><name pos:line="119" pos:column="43">BACKEND<pos:position pos:line="119" pos:column="50"/></name><operator pos:line="119" pos:column="50">-&gt;<pos:position pos:line="119" pos:column="55"/></operator><name pos:line="119" pos:column="52">ctx<pos:position pos:line="119" pos:column="55"/></name></name></expr></argument>,
                                      <argument><expr><call><name pos:line="120" pos:column="39">SSL_CONN_CONFIG<pos:position pos:line="120" pos:column="54"/></name><argument_list pos:line="120" pos:column="54">(<argument><expr><name pos:line="120" pos:column="55">CAfile<pos:position pos:line="120" pos:column="61"/></name></expr></argument>)<pos:position pos:line="120" pos:column="62"/></argument_list></call></expr></argument>,
                                      <argument><expr><call><name pos:line="121" pos:column="39">SSL_CONN_CONFIG<pos:position pos:line="121" pos:column="54"/></name><argument_list pos:line="121" pos:column="54">(<argument><expr><name pos:line="121" pos:column="55">CApath<pos:position pos:line="121" pos:column="61"/></name></expr></argument>)<pos:position pos:line="121" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="121" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="121" pos:column="64"/></condition><then pos:line="121" pos:column="64"> <block pos:line="121" pos:column="65">{
      <if pos:line="122" pos:column="7">if<condition pos:line="122" pos:column="9">(<expr><call><name pos:line="122" pos:column="10">SSL_CONN_CONFIG<pos:position pos:line="122" pos:column="25"/></name><argument_list pos:line="122" pos:column="25">(<argument><expr><name pos:line="122" pos:column="26">verifypeer<pos:position pos:line="122" pos:column="36"/></name></expr></argument>)<pos:position pos:line="122" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="38"/></condition><then pos:line="122" pos:column="38"> <block pos:line="122" pos:column="39">{
        <comment type="block" pos:line="123" pos:column="9">/* Fail if we insist on successfully verifying the server. */</comment>
        <expr_stmt><expr><call><name pos:line="124" pos:column="9">failf<pos:position pos:line="124" pos:column="14"/></name><argument_list pos:line="124" pos:column="14">(<argument><expr><name pos:line="124" pos:column="15">data<pos:position pos:line="124" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="21">"error setting certificate verify locations:\n"<pos:position pos:line="124" pos:column="68"/></literal>
              <literal type="string" pos:line="125" pos:column="15">"  CAfile: %s\n  CApath: %s"<pos:position pos:line="125" pos:column="43"/></literal></expr></argument>,
              <argument><expr><ternary><condition><expr><call><name pos:line="126" pos:column="15">SSL_CONN_CONFIG<pos:position pos:line="126" pos:column="30"/></name><argument_list pos:line="126" pos:column="30">(<argument><expr><name pos:line="126" pos:column="31">CAfile<pos:position pos:line="126" pos:column="37"/></name></expr></argument>)<pos:position pos:line="126" pos:column="38"/></argument_list></call></expr>?<pos:position pos:line="126" pos:column="39"/></condition><then pos:line="126" pos:column="39">
              <expr><call><name pos:line="127" pos:column="15">SSL_CONN_CONFIG<pos:position pos:line="127" pos:column="30"/></name><argument_list pos:line="127" pos:column="30">(<argument><expr><name pos:line="127" pos:column="31">CAfile<pos:position pos:line="127" pos:column="37"/></name></expr></argument>)<pos:position pos:line="127" pos:column="38"/></argument_list></call></expr></then><else pos:line="127" pos:column="38">: <expr><literal type="string" pos:line="127" pos:column="40">"none"<pos:position pos:line="127" pos:column="46"/></literal></expr></else></ternary></expr></argument>,
              <argument><expr><ternary><condition><expr><call><name pos:line="128" pos:column="15">SSL_CONN_CONFIG<pos:position pos:line="128" pos:column="30"/></name><argument_list pos:line="128" pos:column="30">(<argument><expr><name pos:line="128" pos:column="31">CApath<pos:position pos:line="128" pos:column="37"/></name></expr></argument>)<pos:position pos:line="128" pos:column="38"/></argument_list></call></expr>?<pos:position pos:line="128" pos:column="39"/></condition><then pos:line="128" pos:column="39">
              <expr><call><name pos:line="129" pos:column="15">SSL_CONN_CONFIG<pos:position pos:line="129" pos:column="30"/></name><argument_list pos:line="129" pos:column="30">(<argument><expr><name pos:line="129" pos:column="31">CApath<pos:position pos:line="129" pos:column="37"/></name></expr></argument>)<pos:position pos:line="129" pos:column="38"/></argument_list></call></expr> <pos:position pos:line="129" pos:column="39"/></then><else pos:line="129" pos:column="39">: <expr><literal type="string" pos:line="129" pos:column="41">"none"<pos:position pos:line="129" pos:column="47"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="129" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="49"/></expr_stmt>
        <return pos:line="130" pos:column="9">return <expr><name pos:line="130" pos:column="16">CURLE_SSL_CACERT_BADFILE<pos:position pos:line="130" pos:column="40"/></name></expr>;<pos:position pos:line="130" pos:column="41"/></return>
      }<pos:position pos:line="131" pos:column="8"/></block></then>
      <else pos:line="132" pos:column="7">else <block pos:line="132" pos:column="12">{
        <comment type="block" pos:line="133" pos:column="9">/* Just continue with a warning if no strict certificate
           verification is required. */</comment>
        <expr_stmt><expr><call><name pos:line="135" pos:column="9">infof<pos:position pos:line="135" pos:column="14"/></name><argument_list pos:line="135" pos:column="14">(<argument><expr><name pos:line="135" pos:column="15">data<pos:position pos:line="135" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="21">"error setting certificate verify locations,"<pos:position pos:line="135" pos:column="66"/></literal>
              <literal type="string" pos:line="136" pos:column="15">" continuing anyway:\n"<pos:position pos:line="136" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="40"/></expr_stmt>
      }<pos:position pos:line="137" pos:column="8"/></block></else></if>
    }<pos:position pos:line="138" pos:column="6"/></block></then>
    <else pos:line="139" pos:column="5">else <block pos:line="139" pos:column="10">{
      <comment type="block" pos:line="140" pos:column="7">/* Everything is fine. */</comment>
      <expr_stmt><expr><call><name pos:line="141" pos:column="7">infof<pos:position pos:line="141" pos:column="12"/></name><argument_list pos:line="141" pos:column="12">(<argument><expr><name pos:line="141" pos:column="13">data<pos:position pos:line="141" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="19">"successfully set certificate verify locations:\n"<pos:position pos:line="141" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="142" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="143" pos:column="5">infof<pos:position pos:line="143" pos:column="10"/></name><argument_list pos:line="143" pos:column="10">(<argument><expr><name pos:line="143" pos:column="11">data<pos:position pos:line="143" pos:column="15"/></name></expr></argument>,
          <argument><expr><literal type="string" pos:line="144" pos:column="11">"  CAfile: %s\n"<pos:position pos:line="144" pos:column="27"/></literal>
          <literal type="string" pos:line="145" pos:column="11">"  CApath: %s\n"<pos:position pos:line="145" pos:column="27"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><call><name pos:line="146" pos:column="11">SSL_CONN_CONFIG<pos:position pos:line="146" pos:column="26"/></name><argument_list pos:line="146" pos:column="26">(<argument><expr><name pos:line="146" pos:column="27">CAfile<pos:position pos:line="146" pos:column="33"/></name></expr></argument>)<pos:position pos:line="146" pos:column="34"/></argument_list></call></expr> ?<pos:position pos:line="146" pos:column="36"/></condition><then pos:line="146" pos:column="36"> <expr><call><name pos:line="146" pos:column="37">SSL_CONN_CONFIG<pos:position pos:line="146" pos:column="52"/></name><argument_list pos:line="146" pos:column="52">(<argument><expr><name pos:line="146" pos:column="53">CAfile<pos:position pos:line="146" pos:column="59"/></name></expr></argument>)<pos:position pos:line="146" pos:column="60"/></argument_list></call></expr></then><else pos:line="146" pos:column="60">:
          <expr><literal type="string" pos:line="147" pos:column="11">"none"<pos:position pos:line="147" pos:column="17"/></literal></expr></else></ternary></expr></argument>,
          <argument><expr><ternary><condition><expr><call><name pos:line="148" pos:column="11">SSL_CONN_CONFIG<pos:position pos:line="148" pos:column="26"/></name><argument_list pos:line="148" pos:column="26">(<argument><expr><name pos:line="148" pos:column="27">CApath<pos:position pos:line="148" pos:column="33"/></name></expr></argument>)<pos:position pos:line="148" pos:column="34"/></argument_list></call></expr> ?<pos:position pos:line="148" pos:column="36"/></condition><then pos:line="148" pos:column="36"> <expr><call><name pos:line="148" pos:column="37">SSL_CONN_CONFIG<pos:position pos:line="148" pos:column="52"/></name><argument_list pos:line="148" pos:column="52">(<argument><expr><name pos:line="148" pos:column="53">CApath<pos:position pos:line="148" pos:column="59"/></name></expr></argument>)<pos:position pos:line="148" pos:column="60"/></argument_list></call></expr></then><else pos:line="148" pos:column="60">:
          <expr><literal type="string" pos:line="149" pos:column="11">"none"<pos:position pos:line="149" pos:column="17"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="149" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="150" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="152" pos:column="3">/* Load the client certificate, and private key */</comment>
  <if pos:line="153" pos:column="3">if<condition pos:line="153" pos:column="5">(<expr><call><name pos:line="153" pos:column="6">SSL_SET_OPTION<pos:position pos:line="153" pos:column="20"/></name><argument_list pos:line="153" pos:column="20">(<argument><expr><name pos:line="153" pos:column="21">cert<pos:position pos:line="153" pos:column="25"/></name></expr></argument>)<pos:position pos:line="153" pos:column="26"/></argument_list></call> <operator pos:line="153" pos:column="27">&amp;&amp;<pos:position pos:line="153" pos:column="37"/></operator> <call><name pos:line="153" pos:column="30">SSL_SET_OPTION<pos:position pos:line="153" pos:column="44"/></name><argument_list pos:line="153" pos:column="44">(<argument><expr><name pos:line="153" pos:column="45">key<pos:position pos:line="153" pos:column="48"/></name></expr></argument>)<pos:position pos:line="153" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="153" pos:column="50"/></condition><then pos:line="153" pos:column="50"> <block pos:line="153" pos:column="51">{
    <decl_stmt><decl><type><name pos:line="154" pos:column="5">int<pos:position pos:line="154" pos:column="8"/></name></type> <name pos:line="154" pos:column="9">file_type<pos:position pos:line="154" pos:column="18"/></name> <init pos:line="154" pos:column="19">= <expr><call><name pos:line="154" pos:column="21">do_file_type<pos:position pos:line="154" pos:column="33"/></name><argument_list pos:line="154" pos:column="33">(<argument><expr><call><name pos:line="154" pos:column="34">SSL_SET_OPTION<pos:position pos:line="154" pos:column="48"/></name><argument_list pos:line="154" pos:column="48">(<argument><expr><name pos:line="154" pos:column="49">cert_type<pos:position pos:line="154" pos:column="58"/></name></expr></argument>)<pos:position pos:line="154" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="154" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="154" pos:column="61"/></decl_stmt>

    <if pos:line="156" pos:column="5">if<condition pos:line="156" pos:column="7">(<expr><call><name pos:line="156" pos:column="8">SSL_CTX_use_certificate_file<pos:position pos:line="156" pos:column="36"/></name><argument_list pos:line="156" pos:column="36">(<argument><expr><name><name pos:line="156" pos:column="37">BACKEND<pos:position pos:line="156" pos:column="44"/></name><operator pos:line="156" pos:column="44">-&gt;<pos:position pos:line="156" pos:column="49"/></operator><name pos:line="156" pos:column="46">ctx<pos:position pos:line="156" pos:column="49"/></name></name></expr></argument>, <argument><expr><call><name pos:line="156" pos:column="51">SSL_SET_OPTION<pos:position pos:line="156" pos:column="65"/></name><argument_list pos:line="156" pos:column="65">(<argument><expr><name pos:line="156" pos:column="66">cert<pos:position pos:line="156" pos:column="70"/></name></expr></argument>)<pos:position pos:line="156" pos:column="71"/></argument_list></call></expr></argument>,
                                     <argument><expr><name pos:line="157" pos:column="38">file_type<pos:position pos:line="157" pos:column="47"/></name></expr></argument>)<pos:position pos:line="157" pos:column="48"/></argument_list></call> <operator pos:line="157" pos:column="49">!=<pos:position pos:line="157" pos:column="51"/></operator> <literal type="number" pos:line="157" pos:column="52">1<pos:position pos:line="157" pos:column="53"/></literal></expr>)<pos:position pos:line="157" pos:column="54"/></condition><then pos:line="157" pos:column="54"> <block pos:line="157" pos:column="55">{
      <expr_stmt><expr><call><name pos:line="158" pos:column="7">failf<pos:position pos:line="158" pos:column="12"/></name><argument_list pos:line="158" pos:column="12">(<argument><expr><name pos:line="158" pos:column="13">data<pos:position pos:line="158" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="158" pos:column="19">"unable to use client certificate (no key or wrong pass"<pos:position pos:line="158" pos:column="75"/></literal>
            <literal type="string" pos:line="159" pos:column="13">" phrase?)"<pos:position pos:line="159" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="26"/></expr_stmt>
      <return pos:line="160" pos:column="7">return <expr><name pos:line="160" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="160" pos:column="37"/></name></expr>;<pos:position pos:line="160" pos:column="38"/></return>
    }<pos:position pos:line="161" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="163" pos:column="5">file_type<pos:position pos:line="163" pos:column="14"/></name> <operator pos:line="163" pos:column="15">=<pos:position pos:line="163" pos:column="16"/></operator> <call><name pos:line="163" pos:column="17">do_file_type<pos:position pos:line="163" pos:column="29"/></name><argument_list pos:line="163" pos:column="29">(<argument><expr><call><name pos:line="163" pos:column="30">SSL_SET_OPTION<pos:position pos:line="163" pos:column="44"/></name><argument_list pos:line="163" pos:column="44">(<argument><expr><name pos:line="163" pos:column="45">key_type<pos:position pos:line="163" pos:column="53"/></name></expr></argument>)<pos:position pos:line="163" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="163" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="56"/></expr_stmt>
    <if pos:line="164" pos:column="5">if<condition pos:line="164" pos:column="7">(<expr><call><name pos:line="164" pos:column="8">SSL_CTX_use_PrivateKey_file<pos:position pos:line="164" pos:column="35"/></name><argument_list pos:line="164" pos:column="35">(<argument><expr><name><name pos:line="164" pos:column="36">BACKEND<pos:position pos:line="164" pos:column="43"/></name><operator pos:line="164" pos:column="43">-&gt;<pos:position pos:line="164" pos:column="48"/></operator><name pos:line="164" pos:column="45">ctx<pos:position pos:line="164" pos:column="48"/></name></name></expr></argument>, <argument><expr><call><name pos:line="164" pos:column="50">SSL_SET_OPTION<pos:position pos:line="164" pos:column="64"/></name><argument_list pos:line="164" pos:column="64">(<argument><expr><name pos:line="164" pos:column="65">key<pos:position pos:line="164" pos:column="68"/></name></expr></argument>)<pos:position pos:line="164" pos:column="69"/></argument_list></call></expr></argument>,
                                    <argument><expr><name pos:line="165" pos:column="37">file_type<pos:position pos:line="165" pos:column="46"/></name></expr></argument>)<pos:position pos:line="165" pos:column="47"/></argument_list></call> <operator pos:line="165" pos:column="48">!=<pos:position pos:line="165" pos:column="50"/></operator> <literal type="number" pos:line="165" pos:column="51">1<pos:position pos:line="165" pos:column="52"/></literal></expr>)<pos:position pos:line="165" pos:column="53"/></condition><then pos:line="165" pos:column="53"> <block pos:line="165" pos:column="54">{
      <expr_stmt><expr><call><name pos:line="166" pos:column="7">failf<pos:position pos:line="166" pos:column="12"/></name><argument_list pos:line="166" pos:column="12">(<argument><expr><name pos:line="166" pos:column="13">data<pos:position pos:line="166" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="19">"unable to set private key"<pos:position pos:line="166" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="166" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="48"/></expr_stmt>
      <return pos:line="167" pos:column="7">return <expr><name pos:line="167" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="167" pos:column="37"/></name></expr>;<pos:position pos:line="167" pos:column="38"/></return>
    }<pos:position pos:line="168" pos:column="6"/></block></then></if>
  }<pos:position pos:line="169" pos:column="4"/></block></then></if>
<cpp:endif pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">endif<pos:position pos:line="170" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="170" pos:column="8">/* !NO_FILESYSTEM */</comment>

  <comment type="block" pos:line="172" pos:column="3">/* SSL always tries to verify the peer, this only says whether it should
   * fail to connect if the verification fails, or if it should continue
   * anyway. In the latter case the result of the verification is checked with
   * SSL_get_verify_result() below. */</comment>
  <expr_stmt><expr><call><name pos:line="176" pos:column="3">SSL_CTX_set_verify<pos:position pos:line="176" pos:column="21"/></name><argument_list pos:line="176" pos:column="21">(<argument><expr><name><name pos:line="176" pos:column="22">BACKEND<pos:position pos:line="176" pos:column="29"/></name><operator pos:line="176" pos:column="29">-&gt;<pos:position pos:line="176" pos:column="34"/></operator><name pos:line="176" pos:column="31">ctx<pos:position pos:line="176" pos:column="34"/></name></name></expr></argument>,
                     <argument><expr><ternary><condition><expr><call><name pos:line="177" pos:column="22">SSL_CONN_CONFIG<pos:position pos:line="177" pos:column="37"/></name><argument_list pos:line="177" pos:column="37">(<argument><expr><name pos:line="177" pos:column="38">verifypeer<pos:position pos:line="177" pos:column="48"/></name></expr></argument>)<pos:position pos:line="177" pos:column="49"/></argument_list></call></expr>?<pos:position pos:line="177" pos:column="50"/></condition><then><expr><name pos:line="177" pos:column="50">SSL_VERIFY_PEER<pos:position pos:line="177" pos:column="65"/></name></expr></then><else pos:line="177" pos:column="65">:
                                                 <expr><name pos:line="178" pos:column="50">SSL_VERIFY_NONE<pos:position pos:line="178" pos:column="65"/></name></expr></else></ternary></expr></argument>,
                     <argument><expr><name pos:line="179" pos:column="22">NULL<pos:position pos:line="179" pos:column="26"/></name></expr></argument>)<pos:position pos:line="179" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="28"/></expr_stmt>

<cpp:ifdef pos:line="181" pos:column="1">#<cpp:directive pos:line="181" pos:column="2">ifdef<pos:position pos:line="181" pos:column="7"/></cpp:directive> <name pos:line="181" pos:column="8">HAVE_SNI<pos:position pos:line="181" pos:column="16"/></name></cpp:ifdef>
  <if pos:line="182" pos:column="3">if<condition pos:line="182" pos:column="5">(<expr><name pos:line="182" pos:column="6">sni<pos:position pos:line="182" pos:column="9"/></name></expr>)<pos:position pos:line="182" pos:column="10"/></condition><then pos:line="182" pos:column="10"> <block pos:line="182" pos:column="11">{
    <decl_stmt><decl><type><name><name pos:line="183" pos:column="5">struct<pos:position pos:line="183" pos:column="11"/></name> <name pos:line="183" pos:column="12">in_addr<pos:position pos:line="183" pos:column="19"/></name></name></type> <name pos:line="183" pos:column="20">addr4<pos:position pos:line="183" pos:column="25"/></name></decl>;<pos:position pos:line="183" pos:column="26"/></decl_stmt>
<cpp:ifdef pos:line="184" pos:column="1">#<cpp:directive pos:line="184" pos:column="2">ifdef<pos:position pos:line="184" pos:column="7"/></cpp:directive> <name pos:line="184" pos:column="8">ENABLE_IPV6<pos:position pos:line="184" pos:column="19"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name><name pos:line="185" pos:column="5">struct<pos:position pos:line="185" pos:column="11"/></name> <name pos:line="185" pos:column="12">in6_addr<pos:position pos:line="185" pos:column="20"/></name></name></type> <name pos:line="185" pos:column="21">addr6<pos:position pos:line="185" pos:column="26"/></name></decl>;<pos:position pos:line="185" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="186" pos:column="1">#<cpp:directive pos:line="186" pos:column="2">endif<pos:position pos:line="186" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><specifier pos:line="187" pos:column="5">const<pos:position pos:line="187" pos:column="10"/></specifier> <name pos:line="187" pos:column="11">char<pos:position pos:line="187" pos:column="15"/></name> <modifier pos:line="187" pos:column="16">*<pos:position pos:line="187" pos:column="17"/></modifier> <specifier pos:line="187" pos:column="18">const<pos:position pos:line="187" pos:column="23"/></specifier></type> <name pos:line="187" pos:column="24">hostname<pos:position pos:line="187" pos:column="32"/></name> <init pos:line="187" pos:column="33">= <expr><ternary><condition><expr><call><name pos:line="187" pos:column="35">SSL_IS_PROXY<pos:position pos:line="187" pos:column="47"/></name><argument_list pos:line="187" pos:column="47">()<pos:position pos:line="187" pos:column="49"/></argument_list></call></expr> ?<pos:position pos:line="187" pos:column="51"/></condition><then pos:line="187" pos:column="51"> <expr><name><name pos:line="187" pos:column="52">conn<pos:position pos:line="187" pos:column="56"/></name><operator pos:line="187" pos:column="56">-&gt;<pos:position pos:line="187" pos:column="61"/></operator><name pos:line="187" pos:column="58">http_proxy<pos:position pos:line="187" pos:column="68"/></name><operator pos:line="187" pos:column="68">.<pos:position pos:line="187" pos:column="69"/></operator><name pos:line="187" pos:column="69">host<pos:position pos:line="187" pos:column="73"/></name><operator pos:line="187" pos:column="73">.<pos:position pos:line="187" pos:column="74"/></operator><name pos:line="187" pos:column="74">name<pos:position pos:line="187" pos:column="78"/></name></name></expr> <pos:position pos:line="187" pos:column="79"/></then><else pos:line="187" pos:column="79">:
      <expr><name><name pos:line="188" pos:column="7">conn<pos:position pos:line="188" pos:column="11"/></name><operator pos:line="188" pos:column="11">-&gt;<pos:position pos:line="188" pos:column="16"/></operator><name pos:line="188" pos:column="13">host<pos:position pos:line="188" pos:column="17"/></name><operator pos:line="188" pos:column="17">.<pos:position pos:line="188" pos:column="18"/></operator><name pos:line="188" pos:column="18">name<pos:position pos:line="188" pos:column="22"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="188" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="189" pos:column="5">size_t<pos:position pos:line="189" pos:column="11"/></name></type> <name pos:line="189" pos:column="12">hostname_len<pos:position pos:line="189" pos:column="24"/></name> <init pos:line="189" pos:column="25">= <expr><call><name pos:line="189" pos:column="27">strlen<pos:position pos:line="189" pos:column="33"/></name><argument_list pos:line="189" pos:column="33">(<argument><expr><name pos:line="189" pos:column="34">hostname<pos:position pos:line="189" pos:column="42"/></name></expr></argument>)<pos:position pos:line="189" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="189" pos:column="44"/></decl_stmt>
    <if pos:line="190" pos:column="5">if<condition pos:line="190" pos:column="7">(<expr><operator pos:line="190" pos:column="8">(<pos:position pos:line="190" pos:column="9"/></operator><name pos:line="190" pos:column="9">hostname_len<pos:position pos:line="190" pos:column="21"/></name> <operator pos:line="190" pos:column="22">&lt;<pos:position pos:line="190" pos:column="26"/></operator> <name pos:line="190" pos:column="24">USHRT_MAX<pos:position pos:line="190" pos:column="33"/></name><operator pos:line="190" pos:column="33">)<pos:position pos:line="190" pos:column="34"/></operator> <operator pos:line="190" pos:column="35">&amp;&amp;<pos:position pos:line="190" pos:column="45"/></operator>
       <operator pos:line="191" pos:column="8">(<pos:position pos:line="191" pos:column="9"/></operator><literal type="number" pos:line="191" pos:column="9">0<pos:position pos:line="191" pos:column="10"/></literal> <operator pos:line="191" pos:column="11">==<pos:position pos:line="191" pos:column="13"/></operator> <call><name pos:line="191" pos:column="14">Curl_inet_pton<pos:position pos:line="191" pos:column="28"/></name><argument_list pos:line="191" pos:column="28">(<argument><expr><name pos:line="191" pos:column="29">AF_INET<pos:position pos:line="191" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="38">hostname<pos:position pos:line="191" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="191" pos:column="48">&amp;<pos:position pos:line="191" pos:column="53"/></operator><name pos:line="191" pos:column="49">addr4<pos:position pos:line="191" pos:column="54"/></name></expr></argument>)<pos:position pos:line="191" pos:column="55"/></argument_list></call><operator pos:line="191" pos:column="55">)<pos:position pos:line="191" pos:column="56"/></operator> <operator pos:line="191" pos:column="57">&amp;&amp;<pos:position pos:line="191" pos:column="67"/></operator>
<cpp:ifdef pos:line="192" pos:column="1">#<cpp:directive pos:line="192" pos:column="2">ifdef<pos:position pos:line="192" pos:column="7"/></cpp:directive> <name pos:line="192" pos:column="8">ENABLE_IPV6<pos:position pos:line="192" pos:column="19"/></name></cpp:ifdef>
       <operator pos:line="193" pos:column="8">(<pos:position pos:line="193" pos:column="9"/></operator><literal type="number" pos:line="193" pos:column="9">0<pos:position pos:line="193" pos:column="10"/></literal> <operator pos:line="193" pos:column="11">==<pos:position pos:line="193" pos:column="13"/></operator> <call><name pos:line="193" pos:column="14">Curl_inet_pton<pos:position pos:line="193" pos:column="28"/></name><argument_list pos:line="193" pos:column="28">(<argument><expr><name pos:line="193" pos:column="29">AF_INET6<pos:position pos:line="193" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="39">hostname<pos:position pos:line="193" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="193" pos:column="49">&amp;<pos:position pos:line="193" pos:column="54"/></operator><name pos:line="193" pos:column="50">addr6<pos:position pos:line="193" pos:column="55"/></name></expr></argument>)<pos:position pos:line="193" pos:column="56"/></argument_list></call><operator pos:line="193" pos:column="56">)<pos:position pos:line="193" pos:column="57"/></operator> <operator pos:line="193" pos:column="58">&amp;&amp;<pos:position pos:line="193" pos:column="68"/></operator>
<cpp:endif pos:line="194" pos:column="1">#<cpp:directive pos:line="194" pos:column="2">endif<pos:position pos:line="194" pos:column="7"/></cpp:directive></cpp:endif>
       <operator pos:line="195" pos:column="8">(<pos:position pos:line="195" pos:column="9"/></operator><call><name pos:line="195" pos:column="9">CyaSSL_CTX_UseSNI<pos:position pos:line="195" pos:column="26"/></name><argument_list pos:line="195" pos:column="26">(<argument><expr><name><name pos:line="195" pos:column="27">BACKEND<pos:position pos:line="195" pos:column="34"/></name><operator pos:line="195" pos:column="34">-&gt;<pos:position pos:line="195" pos:column="39"/></operator><name pos:line="195" pos:column="36">ctx<pos:position pos:line="195" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="41">CYASSL_SNI_HOST_NAME<pos:position pos:line="195" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="63">hostname<pos:position pos:line="195" pos:column="71"/></name></expr></argument>,
                          <argument><expr><operator pos:line="196" pos:column="27">(<pos:position pos:line="196" pos:column="28"/></operator><name pos:line="196" pos:column="28">unsigned<pos:position pos:line="196" pos:column="36"/></name> <name pos:line="196" pos:column="37">short<pos:position pos:line="196" pos:column="42"/></name><operator pos:line="196" pos:column="42">)<pos:position pos:line="196" pos:column="43"/></operator><name pos:line="196" pos:column="43">hostname_len<pos:position pos:line="196" pos:column="55"/></name></expr></argument>)<pos:position pos:line="196" pos:column="56"/></argument_list></call> <operator pos:line="196" pos:column="57">!=<pos:position pos:line="196" pos:column="59"/></operator> <literal type="number" pos:line="196" pos:column="60">1<pos:position pos:line="196" pos:column="61"/></literal><operator pos:line="196" pos:column="61">)<pos:position pos:line="196" pos:column="62"/></operator></expr>)<pos:position pos:line="196" pos:column="63"/></condition><then pos:line="196" pos:column="63"> <block pos:line="196" pos:column="64">{
      <expr_stmt><expr><call><name pos:line="197" pos:column="7">infof<pos:position pos:line="197" pos:column="12"/></name><argument_list pos:line="197" pos:column="12">(<argument><expr><name pos:line="197" pos:column="13">data<pos:position pos:line="197" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="197" pos:column="19">"WARNING: failed to configure server name indication (SNI) "<pos:position pos:line="197" pos:column="79"/></literal>
            <literal type="string" pos:line="198" pos:column="13">"TLS extension\n"<pos:position pos:line="198" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="198" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="199" pos:column="6"/></block></then></if>
  }<pos:position pos:line="200" pos:column="4"/></block></then></if>
<cpp:endif pos:line="201" pos:column="1">#<cpp:directive pos:line="201" pos:column="2">endif<pos:position pos:line="201" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="203" pos:column="1">#<cpp:directive pos:line="203" pos:column="2">ifdef<pos:position pos:line="203" pos:column="7"/></cpp:directive> <name pos:line="203" pos:column="8">HAVE_SUPPORTED_CURVES<pos:position pos:line="203" pos:column="29"/></name></cpp:ifdef>
  <comment type="block" pos:line="204" pos:column="3">/* CyaSSL/wolfSSL does not send the supported ECC curves ext automatically:
     https://github.com/wolfSSL/wolfssl/issues/366
     The supported curves below are those also supported by OpenSSL 1.0.2 and
     in the same order. */</comment>
  <expr_stmt><expr><call><name pos:line="208" pos:column="3">CyaSSL_CTX_UseSupportedCurve<pos:position pos:line="208" pos:column="31"/></name><argument_list pos:line="208" pos:column="31">(<argument><expr><name><name pos:line="208" pos:column="32">BACKEND<pos:position pos:line="208" pos:column="39"/></name><operator pos:line="208" pos:column="39">-&gt;<pos:position pos:line="208" pos:column="44"/></operator><name pos:line="208" pos:column="41">ctx<pos:position pos:line="208" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="208" pos:column="46">0x17<pos:position pos:line="208" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="52"/></expr_stmt> <comment type="block" pos:line="208" pos:column="53">/* secp256r1 */</comment>
  <expr_stmt><expr><call><name pos:line="209" pos:column="3">CyaSSL_CTX_UseSupportedCurve<pos:position pos:line="209" pos:column="31"/></name><argument_list pos:line="209" pos:column="31">(<argument><expr><name><name pos:line="209" pos:column="32">BACKEND<pos:position pos:line="209" pos:column="39"/></name><operator pos:line="209" pos:column="39">-&gt;<pos:position pos:line="209" pos:column="44"/></operator><name pos:line="209" pos:column="41">ctx<pos:position pos:line="209" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="209" pos:column="46">0x19<pos:position pos:line="209" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="209" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="52"/></expr_stmt> <comment type="block" pos:line="209" pos:column="53">/* secp521r1 */</comment>
  <expr_stmt><expr><call><name pos:line="210" pos:column="3">CyaSSL_CTX_UseSupportedCurve<pos:position pos:line="210" pos:column="31"/></name><argument_list pos:line="210" pos:column="31">(<argument><expr><name><name pos:line="210" pos:column="32">BACKEND<pos:position pos:line="210" pos:column="39"/></name><operator pos:line="210" pos:column="39">-&gt;<pos:position pos:line="210" pos:column="44"/></operator><name pos:line="210" pos:column="41">ctx<pos:position pos:line="210" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="210" pos:column="46">0x18<pos:position pos:line="210" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="210" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="52"/></expr_stmt> <comment type="block" pos:line="210" pos:column="53">/* secp384r1 */</comment>
<cpp:endif pos:line="211" pos:column="1">#<cpp:directive pos:line="211" pos:column="2">endif<pos:position pos:line="211" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="213" pos:column="3">/* give application a chance to interfere with SSL set up. */</comment>
  <if pos:line="214" pos:column="3">if<condition pos:line="214" pos:column="5">(<expr><name><name pos:line="214" pos:column="6">data<pos:position pos:line="214" pos:column="10"/></name><operator pos:line="214" pos:column="10">-&gt;<pos:position pos:line="214" pos:column="15"/></operator><name pos:line="214" pos:column="12">set<pos:position pos:line="214" pos:column="15"/></name><operator pos:line="214" pos:column="15">.<pos:position pos:line="214" pos:column="16"/></operator><name pos:line="214" pos:column="16">ssl<pos:position pos:line="214" pos:column="19"/></name><operator pos:line="214" pos:column="19">.<pos:position pos:line="214" pos:column="20"/></operator><name pos:line="214" pos:column="20">fsslctx<pos:position pos:line="214" pos:column="27"/></name></name></expr>)<pos:position pos:line="214" pos:column="28"/></condition><then pos:line="214" pos:column="28"> <block pos:line="214" pos:column="29">{
    <decl_stmt><decl><type><name pos:line="215" pos:column="5">CURLcode<pos:position pos:line="215" pos:column="13"/></name></type> <name pos:line="215" pos:column="14">result<pos:position pos:line="215" pos:column="20"/></name> <init pos:line="215" pos:column="21">= <expr><name pos:line="215" pos:column="23">CURLE_OK<pos:position pos:line="215" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="215" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><name pos:line="216" pos:column="5">result<pos:position pos:line="216" pos:column="11"/></name> <operator pos:line="216" pos:column="12">=<pos:position pos:line="216" pos:column="13"/></operator> <call pos:line="216" pos:column="14">(<modifier pos:line="216" pos:column="15">*<pos:position pos:line="216" pos:column="16"/></modifier><name><name pos:line="216" pos:column="16">data<pos:position pos:line="216" pos:column="20"/></name><operator pos:line="216" pos:column="20">-&gt;<pos:position pos:line="216" pos:column="25"/></operator><name pos:line="216" pos:column="22">set<pos:position pos:line="216" pos:column="25"/></name><operator pos:line="216" pos:column="25">.<pos:position pos:line="216" pos:column="26"/></operator><name pos:line="216" pos:column="26">ssl<pos:position pos:line="216" pos:column="29"/></name><operator pos:line="216" pos:column="29">.<pos:position pos:line="216" pos:column="30"/></operator><name pos:line="216" pos:column="30">fsslctx<pos:position pos:line="216" pos:column="37"/></name></name>)<argument_list pos:line="216" pos:column="38">(<argument><expr><name pos:line="216" pos:column="39">data<pos:position pos:line="216" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="216" pos:column="45">BACKEND<pos:position pos:line="216" pos:column="52"/></name><operator pos:line="216" pos:column="52">-&gt;<pos:position pos:line="216" pos:column="57"/></operator><name pos:line="216" pos:column="54">ctx<pos:position pos:line="216" pos:column="57"/></name></name></expr></argument>,
                                      <argument><expr><name><name pos:line="217" pos:column="39">data<pos:position pos:line="217" pos:column="43"/></name><operator pos:line="217" pos:column="43">-&gt;<pos:position pos:line="217" pos:column="48"/></operator><name pos:line="217" pos:column="45">set<pos:position pos:line="217" pos:column="48"/></name><operator pos:line="217" pos:column="48">.<pos:position pos:line="217" pos:column="49"/></operator><name pos:line="217" pos:column="49">ssl<pos:position pos:line="217" pos:column="52"/></name><operator pos:line="217" pos:column="52">.<pos:position pos:line="217" pos:column="53"/></operator><name pos:line="217" pos:column="53">fsslctxp<pos:position pos:line="217" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="217" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="63"/></expr_stmt>
    <if pos:line="218" pos:column="5">if<condition pos:line="218" pos:column="7">(<expr><name pos:line="218" pos:column="8">result<pos:position pos:line="218" pos:column="14"/></name></expr>)<pos:position pos:line="218" pos:column="15"/></condition><then pos:line="218" pos:column="15"> <block pos:line="218" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="219" pos:column="7">failf<pos:position pos:line="219" pos:column="12"/></name><argument_list pos:line="219" pos:column="12">(<argument><expr><name pos:line="219" pos:column="13">data<pos:position pos:line="219" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="19">"error signaled by ssl ctx callback"<pos:position pos:line="219" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="219" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="57"/></expr_stmt>
      <return pos:line="220" pos:column="7">return <expr><name pos:line="220" pos:column="14">result<pos:position pos:line="220" pos:column="20"/></name></expr>;<pos:position pos:line="220" pos:column="21"/></return>
    }<pos:position pos:line="221" pos:column="6"/></block></then></if>
  }<pos:position pos:line="222" pos:column="4"/></block></then>
<cpp:ifdef pos:line="223" pos:column="1">#<cpp:directive pos:line="223" pos:column="2">ifdef<pos:position pos:line="223" pos:column="7"/></cpp:directive> <name pos:line="223" pos:column="8">NO_FILESYSTEM<pos:position pos:line="223" pos:column="21"/></name></cpp:ifdef>
  <elseif pos:line="224" pos:column="3">else <if pos:line="224" pos:column="8">if<condition pos:line="224" pos:column="10">(<expr><call><name pos:line="224" pos:column="11">SSL_CONN_CONFIG<pos:position pos:line="224" pos:column="26"/></name><argument_list pos:line="224" pos:column="26">(<argument><expr><name pos:line="224" pos:column="27">verifypeer<pos:position pos:line="224" pos:column="37"/></name></expr></argument>)<pos:position pos:line="224" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="224" pos:column="39"/></condition><then pos:line="224" pos:column="39"> <block pos:line="224" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="225" pos:column="5">failf<pos:position pos:line="225" pos:column="10"/></name><argument_list pos:line="225" pos:column="10">(<argument><expr><name pos:line="225" pos:column="11">data<pos:position pos:line="225" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="225" pos:column="17">"SSL: Certificates couldn't be loaded because CyaSSL was built"<pos:position pos:line="225" pos:column="80"/></literal>
          <literal type="string" pos:line="226" pos:column="11">" with \"no filesystem\". Either disable peer verification"<pos:position pos:line="226" pos:column="70"/></literal>
          <literal type="string" pos:line="227" pos:column="11">" (insecure) or if you are building an application with libcurl you"<pos:position pos:line="227" pos:column="79"/></literal>
          <literal type="string" pos:line="228" pos:column="11">" can load certificates via CURLOPT_SSL_CTX_FUNCTION."<pos:position pos:line="228" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="228" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="67"/></expr_stmt>
    <return pos:line="229" pos:column="5">return <expr><name pos:line="229" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="229" pos:column="35"/></name></expr>;<pos:position pos:line="229" pos:column="36"/></return>
  }<pos:position pos:line="230" pos:column="4"/></block></then></if></elseif></if>
<cpp:endif pos:line="231" pos:column="1">#<cpp:directive pos:line="231" pos:column="2">endif<pos:position pos:line="231" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="233" pos:column="3">/* Let's make an SSL structure */</comment>
  <if pos:line="234" pos:column="3">if<condition pos:line="234" pos:column="5">(<expr><name><name pos:line="234" pos:column="6">BACKEND<pos:position pos:line="234" pos:column="13"/></name><operator pos:line="234" pos:column="13">-&gt;<pos:position pos:line="234" pos:column="18"/></operator><name pos:line="234" pos:column="15">handle<pos:position pos:line="234" pos:column="21"/></name></name></expr>)<pos:position pos:line="234" pos:column="22"/></condition><then pos:line="234" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="235" pos:column="5">SSL_free<pos:position pos:line="235" pos:column="13"/></name><argument_list pos:line="235" pos:column="13">(<argument><expr><name><name pos:line="235" pos:column="14">BACKEND<pos:position pos:line="235" pos:column="21"/></name><operator pos:line="235" pos:column="21">-&gt;<pos:position pos:line="235" pos:column="26"/></operator><name pos:line="235" pos:column="23">handle<pos:position pos:line="235" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="235" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="31"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="236" pos:column="3">BACKEND<pos:position pos:line="236" pos:column="10"/></name><operator pos:line="236" pos:column="10">-&gt;<pos:position pos:line="236" pos:column="15"/></operator><name pos:line="236" pos:column="12">handle<pos:position pos:line="236" pos:column="18"/></name></name> <operator pos:line="236" pos:column="19">=<pos:position pos:line="236" pos:column="20"/></operator> <call><name pos:line="236" pos:column="21">SSL_new<pos:position pos:line="236" pos:column="28"/></name><argument_list pos:line="236" pos:column="28">(<argument><expr><name><name pos:line="236" pos:column="29">BACKEND<pos:position pos:line="236" pos:column="36"/></name><operator pos:line="236" pos:column="36">-&gt;<pos:position pos:line="236" pos:column="41"/></operator><name pos:line="236" pos:column="38">ctx<pos:position pos:line="236" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="236" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="43"/></expr_stmt>
  <if pos:line="237" pos:column="3">if<condition pos:line="237" pos:column="5">(<expr><operator pos:line="237" pos:column="6">!<pos:position pos:line="237" pos:column="7"/></operator><name><name pos:line="237" pos:column="7">BACKEND<pos:position pos:line="237" pos:column="14"/></name><operator pos:line="237" pos:column="14">-&gt;<pos:position pos:line="237" pos:column="19"/></operator><name pos:line="237" pos:column="16">handle<pos:position pos:line="237" pos:column="22"/></name></name></expr>)<pos:position pos:line="237" pos:column="23"/></condition><then pos:line="237" pos:column="23"> <block pos:line="237" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="238" pos:column="5">failf<pos:position pos:line="238" pos:column="10"/></name><argument_list pos:line="238" pos:column="10">(<argument><expr><name pos:line="238" pos:column="11">data<pos:position pos:line="238" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="238" pos:column="17">"SSL: couldn't create a context (handle)!"<pos:position pos:line="238" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="238" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="61"/></expr_stmt>
    <return pos:line="239" pos:column="5">return <expr><name pos:line="239" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="239" pos:column="31"/></name></expr>;<pos:position pos:line="239" pos:column="32"/></return>
  }<pos:position pos:line="240" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="242" pos:column="1">#<cpp:directive pos:line="242" pos:column="2">ifdef<pos:position pos:line="242" pos:column="7"/></cpp:directive> <name pos:line="242" pos:column="8">HAVE_ALPN<pos:position pos:line="242" pos:column="17"/></name></cpp:ifdef>
  <if pos:line="243" pos:column="3">if<condition pos:line="243" pos:column="5">(<expr><name><name pos:line="243" pos:column="6">conn<pos:position pos:line="243" pos:column="10"/></name><operator pos:line="243" pos:column="10">-&gt;<pos:position pos:line="243" pos:column="15"/></operator><name pos:line="243" pos:column="12">bits<pos:position pos:line="243" pos:column="16"/></name><operator pos:line="243" pos:column="16">.<pos:position pos:line="243" pos:column="17"/></operator><name pos:line="243" pos:column="17">tls_enable_alpn<pos:position pos:line="243" pos:column="32"/></name></name></expr>)<pos:position pos:line="243" pos:column="33"/></condition><then pos:line="243" pos:column="33"> <block pos:line="243" pos:column="34">{
    <decl_stmt><decl><type><name pos:line="244" pos:column="5">char<pos:position pos:line="244" pos:column="9"/></name></type> <name><name pos:line="244" pos:column="10">protocols<pos:position pos:line="244" pos:column="19"/></name><index pos:line="244" pos:column="19">[<expr><literal type="number" pos:line="244" pos:column="20">128<pos:position pos:line="244" pos:column="23"/></literal></expr>]<pos:position pos:line="244" pos:column="24"/></index></name></decl>;<pos:position pos:line="244" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="245" pos:column="5">*<pos:position pos:line="245" pos:column="6"/></operator><name pos:line="245" pos:column="6">protocols<pos:position pos:line="245" pos:column="15"/></name> <operator pos:line="245" pos:column="16">=<pos:position pos:line="245" pos:column="17"/></operator> <literal type="char" pos:line="245" pos:column="18">'\0'<pos:position pos:line="245" pos:column="22"/></literal></expr>;<pos:position pos:line="245" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="247" pos:column="5">/* wolfSSL's ALPN protocol name list format is a comma separated string of
       protocols in descending order of preference, eg: "h2,http/1.1" */</comment>

<cpp:ifdef pos:line="250" pos:column="1">#<cpp:directive pos:line="250" pos:column="2">ifdef<pos:position pos:line="250" pos:column="7"/></cpp:directive> <name pos:line="250" pos:column="8">USE_NGHTTP2<pos:position pos:line="250" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="251" pos:column="5">if<condition pos:line="251" pos:column="7">(<expr><name><name pos:line="251" pos:column="8">data<pos:position pos:line="251" pos:column="12"/></name><operator pos:line="251" pos:column="12">-&gt;<pos:position pos:line="251" pos:column="17"/></operator><name pos:line="251" pos:column="14">set<pos:position pos:line="251" pos:column="17"/></name><operator pos:line="251" pos:column="17">.<pos:position pos:line="251" pos:column="18"/></operator><name pos:line="251" pos:column="18">httpversion<pos:position pos:line="251" pos:column="29"/></name></name> <operator pos:line="251" pos:column="30">&gt;=<pos:position pos:line="251" pos:column="35"/></operator> <name pos:line="251" pos:column="33">CURL_HTTP_VERSION_2<pos:position pos:line="251" pos:column="52"/></name></expr>)<pos:position pos:line="251" pos:column="53"/></condition><then pos:line="251" pos:column="53"> <block pos:line="251" pos:column="54">{
      <expr_stmt><expr><call><name pos:line="252" pos:column="7">strcpy<pos:position pos:line="252" pos:column="13"/></name><argument_list pos:line="252" pos:column="13">(<argument><expr><name pos:line="252" pos:column="14">protocols<pos:position pos:line="252" pos:column="23"/></name> <operator pos:line="252" pos:column="24">+<pos:position pos:line="252" pos:column="25"/></operator> <call><name pos:line="252" pos:column="26">strlen<pos:position pos:line="252" pos:column="32"/></name><argument_list pos:line="252" pos:column="32">(<argument><expr><name pos:line="252" pos:column="33">protocols<pos:position pos:line="252" pos:column="42"/></name></expr></argument>)<pos:position pos:line="252" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="252" pos:column="45">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="252" pos:column="69"/></name> <literal type="string" pos:line="252" pos:column="70">","<pos:position pos:line="252" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="252" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="75"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="253" pos:column="7">infof<pos:position pos:line="253" pos:column="12"/></name><argument_list pos:line="253" pos:column="12">(<argument><expr><name pos:line="253" pos:column="13">data<pos:position pos:line="253" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="253" pos:column="19">"ALPN, offering %s\n"<pos:position pos:line="253" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="253" pos:column="42">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="253" pos:column="66"/></name></expr></argument>)<pos:position pos:line="253" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="254" pos:column="6"/></block></then></if>
<cpp:endif pos:line="255" pos:column="1">#<cpp:directive pos:line="255" pos:column="2">endif<pos:position pos:line="255" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="257" pos:column="5">strcpy<pos:position pos:line="257" pos:column="11"/></name><argument_list pos:line="257" pos:column="11">(<argument><expr><name pos:line="257" pos:column="12">protocols<pos:position pos:line="257" pos:column="21"/></name> <operator pos:line="257" pos:column="22">+<pos:position pos:line="257" pos:column="23"/></operator> <call><name pos:line="257" pos:column="24">strlen<pos:position pos:line="257" pos:column="30"/></name><argument_list pos:line="257" pos:column="30">(<argument><expr><name pos:line="257" pos:column="31">protocols<pos:position pos:line="257" pos:column="40"/></name></expr></argument>)<pos:position pos:line="257" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="257" pos:column="43">ALPN_HTTP_1_1<pos:position pos:line="257" pos:column="56"/></name></expr></argument>)<pos:position pos:line="257" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="258" pos:column="5">infof<pos:position pos:line="258" pos:column="10"/></name><argument_list pos:line="258" pos:column="10">(<argument><expr><name pos:line="258" pos:column="11">data<pos:position pos:line="258" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="258" pos:column="17">"ALPN, offering %s\n"<pos:position pos:line="258" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="258" pos:column="40">ALPN_HTTP_1_1<pos:position pos:line="258" pos:column="53"/></name></expr></argument>)<pos:position pos:line="258" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="55"/></expr_stmt>

    <if pos:line="260" pos:column="5">if<condition pos:line="260" pos:column="7">(<expr><call><name pos:line="260" pos:column="8">wolfSSL_UseALPN<pos:position pos:line="260" pos:column="23"/></name><argument_list pos:line="260" pos:column="23">(<argument><expr><name><name pos:line="260" pos:column="24">BACKEND<pos:position pos:line="260" pos:column="31"/></name><operator pos:line="260" pos:column="31">-&gt;<pos:position pos:line="260" pos:column="36"/></operator><name pos:line="260" pos:column="33">handle<pos:position pos:line="260" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="260" pos:column="41">protocols<pos:position pos:line="260" pos:column="50"/></name></expr></argument>,
                       <argument><expr><operator pos:line="261" pos:column="24">(<pos:position pos:line="261" pos:column="25"/></operator><name pos:line="261" pos:column="25">unsigned<pos:position pos:line="261" pos:column="33"/></name><operator pos:line="261" pos:column="33">)<pos:position pos:line="261" pos:column="34"/></operator><call><name pos:line="261" pos:column="34">strlen<pos:position pos:line="261" pos:column="40"/></name><argument_list pos:line="261" pos:column="40">(<argument><expr><name pos:line="261" pos:column="41">protocols<pos:position pos:line="261" pos:column="50"/></name></expr></argument>)<pos:position pos:line="261" pos:column="51"/></argument_list></call></expr></argument>,
                       <argument><expr><name pos:line="262" pos:column="24">WOLFSSL_ALPN_CONTINUE_ON_MISMATCH<pos:position pos:line="262" pos:column="57"/></name></expr></argument>)<pos:position pos:line="262" pos:column="58"/></argument_list></call> <operator pos:line="262" pos:column="59">!=<pos:position pos:line="262" pos:column="61"/></operator> <name pos:line="262" pos:column="62">SSL_SUCCESS<pos:position pos:line="262" pos:column="73"/></name></expr>)<pos:position pos:line="262" pos:column="74"/></condition><then pos:line="262" pos:column="74"> <block pos:line="262" pos:column="75">{
      <expr_stmt><expr><call><name pos:line="263" pos:column="7">failf<pos:position pos:line="263" pos:column="12"/></name><argument_list pos:line="263" pos:column="12">(<argument><expr><name pos:line="263" pos:column="13">data<pos:position pos:line="263" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="263" pos:column="19">"SSL: failed setting ALPN protocols"<pos:position pos:line="263" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="263" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="57"/></expr_stmt>
      <return pos:line="264" pos:column="7">return <expr><name pos:line="264" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="264" pos:column="37"/></name></expr>;<pos:position pos:line="264" pos:column="38"/></return>
    }<pos:position pos:line="265" pos:column="6"/></block></then></if>
  }<pos:position pos:line="266" pos:column="4"/></block></then></if>
<cpp:endif pos:line="267" pos:column="1">#<cpp:directive pos:line="267" pos:column="2">endif<pos:position pos:line="267" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="267" pos:column="8">/* HAVE_ALPN */</comment>

  <comment type="block" pos:line="269" pos:column="3">/* Check if there's a cached ID we can/should use here! */</comment>
  <if pos:line="270" pos:column="3">if<condition pos:line="270" pos:column="5">(<expr><call><name pos:line="270" pos:column="6">SSL_SET_OPTION<pos:position pos:line="270" pos:column="20"/></name><argument_list pos:line="270" pos:column="20">(<argument><expr><name><name pos:line="270" pos:column="21">primary<pos:position pos:line="270" pos:column="28"/></name><operator pos:line="270" pos:column="28">.<pos:position pos:line="270" pos:column="29"/></operator><name pos:line="270" pos:column="29">sessionid<pos:position pos:line="270" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="270" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="270" pos:column="40"/></condition><then pos:line="270" pos:column="40"> <block pos:line="270" pos:column="41">{
    <decl_stmt><decl><type><name pos:line="271" pos:column="5">void<pos:position pos:line="271" pos:column="9"/></name> <modifier pos:line="271" pos:column="10">*<pos:position pos:line="271" pos:column="11"/></modifier></type><name pos:line="271" pos:column="11">ssl_sessionid<pos:position pos:line="271" pos:column="24"/></name> <init pos:line="271" pos:column="25">= <expr><name pos:line="271" pos:column="27">NULL<pos:position pos:line="271" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="271" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="273" pos:column="5">Curl_ssl_sessionid_lock<pos:position pos:line="273" pos:column="28"/></name><argument_list pos:line="273" pos:column="28">(<argument><expr><name pos:line="273" pos:column="29">conn<pos:position pos:line="273" pos:column="33"/></name></expr></argument>)<pos:position pos:line="273" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="35"/></expr_stmt>
    <if pos:line="274" pos:column="5">if<condition pos:line="274" pos:column="7">(<expr><operator pos:line="274" pos:column="8">!<pos:position pos:line="274" pos:column="9"/></operator><call><name pos:line="274" pos:column="9">Curl_ssl_getsessionid<pos:position pos:line="274" pos:column="30"/></name><argument_list pos:line="274" pos:column="30">(<argument><expr><name pos:line="274" pos:column="31">conn<pos:position pos:line="274" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="274" pos:column="37">&amp;<pos:position pos:line="274" pos:column="42"/></operator><name pos:line="274" pos:column="38">ssl_sessionid<pos:position pos:line="274" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="274" pos:column="53">NULL<pos:position pos:line="274" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="274" pos:column="59">sockindex<pos:position pos:line="274" pos:column="68"/></name></expr></argument>)<pos:position pos:line="274" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="274" pos:column="70"/></condition><then pos:line="274" pos:column="70"> <block pos:line="274" pos:column="71">{
      <comment type="block" pos:line="275" pos:column="7">/* we got a session id, use it! */</comment>
      <if pos:line="276" pos:column="7">if<condition pos:line="276" pos:column="9">(<expr><operator pos:line="276" pos:column="10">!<pos:position pos:line="276" pos:column="11"/></operator><call><name pos:line="276" pos:column="11">SSL_set_session<pos:position pos:line="276" pos:column="26"/></name><argument_list pos:line="276" pos:column="26">(<argument><expr><name><name pos:line="276" pos:column="27">BACKEND<pos:position pos:line="276" pos:column="34"/></name><operator pos:line="276" pos:column="34">-&gt;<pos:position pos:line="276" pos:column="39"/></operator><name pos:line="276" pos:column="36">handle<pos:position pos:line="276" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="276" pos:column="44">ssl_sessionid<pos:position pos:line="276" pos:column="57"/></name></expr></argument>)<pos:position pos:line="276" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="276" pos:column="59"/></condition><then pos:line="276" pos:column="59"> <block pos:line="276" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="277" pos:column="9">Curl_ssl_sessionid_unlock<pos:position pos:line="277" pos:column="34"/></name><argument_list pos:line="277" pos:column="34">(<argument><expr><name pos:line="277" pos:column="35">conn<pos:position pos:line="277" pos:column="39"/></name></expr></argument>)<pos:position pos:line="277" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="277" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="278" pos:column="9">failf<pos:position pos:line="278" pos:column="14"/></name><argument_list pos:line="278" pos:column="14">(<argument><expr><name pos:line="278" pos:column="15">data<pos:position pos:line="278" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="278" pos:column="21">"SSL: SSL_set_session failed: %s"<pos:position pos:line="278" pos:column="54"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="279" pos:column="15">ERR_error_string<pos:position pos:line="279" pos:column="31"/></name><argument_list pos:line="279" pos:column="31">(<argument><expr><call><name pos:line="279" pos:column="32">SSL_get_error<pos:position pos:line="279" pos:column="45"/></name><argument_list pos:line="279" pos:column="45">(<argument><expr><name><name pos:line="279" pos:column="46">BACKEND<pos:position pos:line="279" pos:column="53"/></name><operator pos:line="279" pos:column="53">-&gt;<pos:position pos:line="279" pos:column="58"/></operator><name pos:line="279" pos:column="55">handle<pos:position pos:line="279" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="279" pos:column="63">0<pos:position pos:line="279" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="279" pos:column="65"/></argument_list></call></expr></argument>,
              <argument><expr><name pos:line="280" pos:column="15">error_buffer<pos:position pos:line="280" pos:column="27"/></name></expr></argument>)<pos:position pos:line="280" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="280" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="30"/></expr_stmt>
        <return pos:line="281" pos:column="9">return <expr><name pos:line="281" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="281" pos:column="39"/></name></expr>;<pos:position pos:line="281" pos:column="40"/></return>
      }<pos:position pos:line="282" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="283" pos:column="7">/* Informational message */</comment>
      <expr_stmt><expr><call><name pos:line="284" pos:column="7">infof<pos:position pos:line="284" pos:column="12"/></name><argument_list pos:line="284" pos:column="12">(<argument><expr><name pos:line="284" pos:column="13">data<pos:position pos:line="284" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="284" pos:column="19">"SSL re-using session ID\n"<pos:position pos:line="284" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="284" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="285" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="286" pos:column="5">Curl_ssl_sessionid_unlock<pos:position pos:line="286" pos:column="30"/></name><argument_list pos:line="286" pos:column="30">(<argument><expr><name pos:line="286" pos:column="31">conn<pos:position pos:line="286" pos:column="35"/></name></expr></argument>)<pos:position pos:line="286" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="286" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="287" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="289" pos:column="3">/* pass the raw socket into the SSL layer */</comment>
  <if pos:line="290" pos:column="3">if<condition pos:line="290" pos:column="5">(<expr><operator pos:line="290" pos:column="6">!<pos:position pos:line="290" pos:column="7"/></operator><call><name pos:line="290" pos:column="7">SSL_set_fd<pos:position pos:line="290" pos:column="17"/></name><argument_list pos:line="290" pos:column="17">(<argument><expr><name><name pos:line="290" pos:column="18">BACKEND<pos:position pos:line="290" pos:column="25"/></name><operator pos:line="290" pos:column="25">-&gt;<pos:position pos:line="290" pos:column="30"/></operator><name pos:line="290" pos:column="27">handle<pos:position pos:line="290" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="290" pos:column="35">(<pos:position pos:line="290" pos:column="36"/></operator><name pos:line="290" pos:column="36">int<pos:position pos:line="290" pos:column="39"/></name><operator pos:line="290" pos:column="39">)<pos:position pos:line="290" pos:column="40"/></operator><name pos:line="290" pos:column="40">sockfd<pos:position pos:line="290" pos:column="46"/></name></expr></argument>)<pos:position pos:line="290" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="290" pos:column="48"/></condition><then pos:line="290" pos:column="48"> <block pos:line="290" pos:column="49">{
    <expr_stmt><expr><call><name pos:line="291" pos:column="5">failf<pos:position pos:line="291" pos:column="10"/></name><argument_list pos:line="291" pos:column="10">(<argument><expr><name pos:line="291" pos:column="11">data<pos:position pos:line="291" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="291" pos:column="17">"SSL: SSL_set_fd failed"<pos:position pos:line="291" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="291" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="43"/></expr_stmt>
    <return pos:line="292" pos:column="5">return <expr><name pos:line="292" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="292" pos:column="35"/></name></expr>;<pos:position pos:line="292" pos:column="36"/></return>
  }<pos:position pos:line="293" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="295" pos:column="3">connssl<pos:position pos:line="295" pos:column="10"/></name><operator pos:line="295" pos:column="10">-&gt;<pos:position pos:line="295" pos:column="15"/></operator><name pos:line="295" pos:column="12">connecting_state<pos:position pos:line="295" pos:column="28"/></name></name> <operator pos:line="295" pos:column="29">=<pos:position pos:line="295" pos:column="30"/></operator> <name pos:line="295" pos:column="31">ssl_connect_2<pos:position pos:line="295" pos:column="44"/></name></expr>;<pos:position pos:line="295" pos:column="45"/></expr_stmt>
  <return pos:line="296" pos:column="3">return <expr><name pos:line="296" pos:column="10">CURLE_OK<pos:position pos:line="296" pos:column="18"/></name></expr>;<pos:position pos:line="296" pos:column="19"/></return>
}<pos:position pos:line="297" pos:column="2"/></block></function></unit>
