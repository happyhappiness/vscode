<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_945_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">BOOL<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">amiga_init<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">()<pos:position pos:line="1" pos:column="18"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if<condition pos:line="3" pos:column="11">(<expr><operator pos:line="3" pos:column="12">!<pos:position pos:line="3" pos:column="13"/></operator><name pos:line="3" pos:column="13">SocketBase<pos:position pos:line="3" pos:column="23"/></name></expr>)<pos:position pos:line="3" pos:column="24"/></condition><then pos:line="3" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="17">SocketBase<pos:position pos:line="4" pos:column="27"/></name> <operator pos:line="4" pos:column="28">=<pos:position pos:line="4" pos:column="29"/></operator> <call><name pos:line="4" pos:column="30">OpenLibrary<pos:position pos:line="4" pos:column="41"/></name><argument_list pos:line="4" pos:column="41">(<argument><expr><literal type="string" pos:line="4" pos:column="42">"bsdsocket.library"<pos:position pos:line="4" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="63">4<pos:position pos:line="4" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="66"/></expr_stmt></block></then></if>
	
	<if pos:line="6" pos:column="9">if<condition pos:line="6" pos:column="11">(<expr><operator pos:line="6" pos:column="12">!<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">SocketBase<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24"> <block pos:line="6" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">__request<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><literal type="string" pos:line="7" pos:column="27">"No TCP/IP Stack running!"<pos:position pos:line="7" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="55"/></expr_stmt>
		<return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">FALSE<pos:position pos:line="8" pos:column="29"/></name></expr>;<pos:position pos:line="8" pos:column="30"/></return>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>
	
	<if pos:line="11" pos:column="9">if<condition pos:line="11" pos:column="11">(<expr><call><name pos:line="11" pos:column="12">SocketBaseTags<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(
		<argument><expr><call><name pos:line="12" pos:column="17">SBTM_SETVAL<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><call><name pos:line="12" pos:column="29">SBTC_ERRNOPTR<pos:position pos:line="12" pos:column="42"/></name><argument_list pos:line="12" pos:column="42">(<argument><expr><sizeof pos:line="12" pos:column="43">sizeof<argument_list pos:line="12" pos:column="49">(<argument><expr><name pos:line="12" pos:column="50">errno<pos:position pos:line="12" pos:column="55"/></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="12" pos:column="60">(<pos:position pos:line="12" pos:column="61"/></operator><name pos:line="12" pos:column="61">ULONG<pos:position pos:line="12" pos:column="66"/></name><operator pos:line="12" pos:column="66">)<pos:position pos:line="12" pos:column="67"/></operator> <operator pos:line="12" pos:column="68">&amp;<pos:position pos:line="12" pos:column="73"/></operator><name pos:line="12" pos:column="69">errno<pos:position pos:line="12" pos:column="74"/></name></expr></argument>,
<comment type="line" pos:line="13" pos:column="1">//		SBTM_SETVAL(SBTC_HERRNOLONGPTR),	   (ULONG) &amp;h_errno,</comment>
		<argument><expr><call><name pos:line="14" pos:column="17">SBTM_SETVAL<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">SBTC_LOGTAGPTR<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr></argument>,		   <argument><expr><operator pos:line="14" pos:column="60">(<pos:position pos:line="14" pos:column="61"/></operator><name pos:line="14" pos:column="61">ULONG<pos:position pos:line="14" pos:column="66"/></name><operator pos:line="14" pos:column="66">)<pos:position pos:line="14" pos:column="67"/></operator> <literal type="string" pos:line="14" pos:column="68">"cURL"<pos:position pos:line="14" pos:column="74"/></literal></expr></argument>,
	<argument><expr><name pos:line="15" pos:column="9">TAG_DONE<pos:position pos:line="15" pos:column="17"/></name></expr></argument>)<pos:position pos:line="15" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19"> <block pos:line="15" pos:column="20">{
		
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">__request<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><literal type="string" pos:line="17" pos:column="27">"SocketBaseTags ERROR"<pos:position pos:line="17" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><name pos:line="18" pos:column="24">FALSE<pos:position pos:line="18" pos:column="29"/></name></expr>;<pos:position pos:line="18" pos:column="30"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	
<cpp:ifndef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifndef<pos:position pos:line="21" pos:column="8"/></cpp:directive> <name pos:line="21" pos:column="9">__libnix__<pos:position pos:line="21" pos:column="19"/></name></cpp:ifndef>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">atexit<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">amiga_cleanup<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
	
	<return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">TRUE<pos:position pos:line="25" pos:column="20"/></name></expr>;<pos:position pos:line="25" pos:column="21"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
