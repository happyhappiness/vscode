<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1053_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">data_pending<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">connectdata<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">conn<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* in the case of libssh2, we can never be really sure that we have emptied
     its internal buffers so we MUST always try until we get EAGAIN back */</comment>
  <return pos:line="5" pos:column="3">return <expr><name><name pos:line="5" pos:column="10">conn<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">-&gt;<pos:position pos:line="5" pos:column="19"/></operator><name pos:line="5" pos:column="16">handler<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">-&gt;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="25">protocol<pos:position pos:line="5" pos:column="33"/></name></name><operator pos:line="5" pos:column="33">&amp;<pos:position pos:line="5" pos:column="38"/></operator><operator pos:line="5" pos:column="34">(<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="35">CURLPROTO_SCP<pos:position pos:line="5" pos:column="48"/></name><operator pos:line="5" pos:column="48">|<pos:position pos:line="5" pos:column="49"/></operator><name pos:line="5" pos:column="49">CURLPROTO_SFTP<pos:position pos:line="5" pos:column="63"/></name><operator pos:line="5" pos:column="63">)<pos:position pos:line="5" pos:column="64"/></operator> <operator pos:line="5" pos:column="65">||<pos:position pos:line="5" pos:column="67"/></operator>
<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><call><name pos:line="6" pos:column="5">defined<pos:position pos:line="6" pos:column="12"/></name><argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">USE_NGHTTP2<pos:position pos:line="6" pos:column="24"/></name></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr></cpp:if>
    <call><name pos:line="7" pos:column="5">Curl_ssl_data_pending<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">conn<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="33">FIRSTSOCKET<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call> <operator pos:line="7" pos:column="46">||<pos:position pos:line="7" pos:column="48"/></operator>
    <comment type="block" pos:line="8" pos:column="5">/* For HTTP/2, we may read up everything including responde body
       with header fields in Curl_http_readwrite_headers. If no
       content-length is provided, curl waits for the connection
       close, which we emulate it using conn-&gt;proto.httpc.closed =
       TRUE. The thing is if we read everything, then http2_recv won't
       be called and we cannot signal the HTTP/2 stream has closed. As
       a workaround, we return nonzero here to call http2_recv. */</comment>
    <operator pos:line="15" pos:column="5">(<pos:position pos:line="15" pos:column="6"/></operator><operator pos:line="15" pos:column="6">(<pos:position pos:line="15" pos:column="7"/></operator><name><name pos:line="15" pos:column="7">conn<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">-&gt;<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="13">handler<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">protocol<pos:position pos:line="15" pos:column="30"/></name></name><operator pos:line="15" pos:column="30">&amp;<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="31">PROTO_FAMILY_HTTP<pos:position pos:line="15" pos:column="48"/></name><operator pos:line="15" pos:column="48">)<pos:position pos:line="15" pos:column="49"/></operator> <operator pos:line="15" pos:column="50">&amp;&amp;<pos:position pos:line="15" pos:column="60"/></operator> <name><name pos:line="15" pos:column="53">conn<pos:position pos:line="15" pos:column="57"/></name><operator pos:line="15" pos:column="57">-&gt;<pos:position pos:line="15" pos:column="62"/></operator><name pos:line="15" pos:column="59">httpversion<pos:position pos:line="15" pos:column="70"/></name></name> <operator pos:line="15" pos:column="71">==<pos:position pos:line="15" pos:column="73"/></operator> <literal type="number" pos:line="15" pos:column="74">20<pos:position pos:line="15" pos:column="76"/></literal><operator pos:line="15" pos:column="76">)<pos:position pos:line="15" pos:column="77"/></operator></expr>;<pos:position pos:line="15" pos:column="78"/></return>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">Curl_ssl_data_pending<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">conn<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">FIRSTSOCKET<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
