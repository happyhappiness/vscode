<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_7622.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">tool_header_cb<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">ptr<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">size_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">size<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">size_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">nmemb<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">void<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">userdata<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">OutStruct<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">outs<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">userdata<pos:position pos:line="3" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">str<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">ptr<pos:position pos:line="4" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">cb<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">size<pos:position pos:line="5" pos:column="25"/></name> <operator pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></operator> <name pos:line="5" pos:column="28">nmemb<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">end<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><operator pos:line="6" pos:column="21">(<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">char<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></operator><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">ptr<pos:position pos:line="6" pos:column="31"/></name> <operator pos:line="6" pos:column="32">+<pos:position pos:line="6" pos:column="33"/></operator> <name pos:line="6" pos:column="34">cb<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/*
   * Once that libcurl has called back tool_header_cb() the returned value
   * is checked against the amount that was intended to be written, if
   * it does not match then it fails with CURLE_WRITE_ERROR. So at this
   * point returning a value different from sz*nmemb indicates failure.
   */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">size_t<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">failure<pos:position pos:line="14" pos:column="17"/></name> <init pos:line="14" pos:column="18">= <expr><ternary><condition><expr><operator pos:line="14" pos:column="20">(<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="21">size<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">*<pos:position pos:line="14" pos:column="27"/></operator> <name pos:line="14" pos:column="28">nmemb<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">)<pos:position pos:line="14" pos:column="34"/></operator></expr> ?<pos:position pos:line="14" pos:column="36"/></condition><then pos:line="14" pos:column="36"> <expr><literal type="number" pos:line="14" pos:column="37">0<pos:position pos:line="14" pos:column="38"/></literal></expr> <pos:position pos:line="14" pos:column="39"/></then><else pos:line="14" pos:column="39">: <expr><literal type="number" pos:line="14" pos:column="41">1<pos:position pos:line="14" pos:column="42"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="14" pos:column="43"/></decl_stmt>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">!<pos:position pos:line="16" pos:column="7"/></operator><name><name pos:line="16" pos:column="7">outs<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">-&gt;<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="13">config<pos:position pos:line="16" pos:column="19"/></name></name></expr>)<pos:position pos:line="16" pos:column="20"/></condition><then pos:line="16" pos:column="20">
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">failure<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></return></block></then></if>

<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">DEBUGBUILD<pos:position pos:line="19" pos:column="18"/></name></cpp:ifdef>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">size<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">*<pos:position pos:line="20" pos:column="12"/></operator> <name pos:line="20" pos:column="13">nmemb<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">&gt;<pos:position pos:line="20" pos:column="23"/></operator> <operator pos:line="20" pos:column="21">(<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">size_t<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">)<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="29">CURL_MAX_HTTP_HEADER<pos:position pos:line="20" pos:column="49"/></name></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50"> <block pos:line="20" pos:column="51">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">warnf<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><name><name pos:line="21" pos:column="11">outs<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">config<pos:position pos:line="21" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="25">"Header data exceeds single call write limit!\n"<pos:position pos:line="21" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="75"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">failure<pos:position pos:line="22" pos:column="19"/></name></expr>;<pos:position pos:line="22" pos:column="20"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><operator pos:line="26" pos:column="6">(<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">cb<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">&gt;<pos:position pos:line="26" pos:column="14"/></operator> <literal type="number" pos:line="26" pos:column="12">20<pos:position pos:line="26" pos:column="14"/></literal><operator pos:line="26" pos:column="14">)<pos:position pos:line="26" pos:column="15"/></operator> <operator pos:line="26" pos:column="16">&amp;&amp;<pos:position pos:line="26" pos:column="26"/></operator> <call><name pos:line="26" pos:column="19">checkprefix<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><literal type="string" pos:line="26" pos:column="31">"Content-disposition:"<pos:position pos:line="26" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="55">str<pos:position pos:line="26" pos:column="58"/></name></expr></argument>)<pos:position pos:line="26" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="60"/></condition><then pos:line="26" pos:column="60"> <block pos:line="26" pos:column="61">{
    <decl_stmt><decl><type><specifier pos:line="27" pos:column="5">const<pos:position pos:line="27" pos:column="10"/></specifier> <name pos:line="27" pos:column="11">char<pos:position pos:line="27" pos:column="15"/></name> <modifier pos:line="27" pos:column="16">*<pos:position pos:line="27" pos:column="17"/></modifier></type><name pos:line="27" pos:column="17">p<pos:position pos:line="27" pos:column="18"/></name> <init pos:line="27" pos:column="19">= <expr><name pos:line="27" pos:column="21">str<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">+<pos:position pos:line="27" pos:column="26"/></operator> <literal type="number" pos:line="27" pos:column="27">20<pos:position pos:line="27" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="30"/></decl_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* look for the 'filename=' parameter
       (encoded filenames (*=) are not supported) */</comment>
    <for pos:line="31" pos:column="5">for<control pos:line="31" pos:column="8">(<init pos:line="31" pos:column="9">;<pos:position pos:line="31" pos:column="10"/></init><condition pos:line="31" pos:column="10">;<pos:position pos:line="31" pos:column="11"/></condition><incr/>)<pos:position pos:line="31" pos:column="12"/></control> <block pos:line="31" pos:column="13">{
      <decl_stmt><decl><type><name pos:line="32" pos:column="7">char<pos:position pos:line="32" pos:column="11"/></name> <modifier pos:line="32" pos:column="12">*<pos:position pos:line="32" pos:column="13"/></modifier></type><name pos:line="32" pos:column="13">filename<pos:position pos:line="32" pos:column="21"/></name></decl>;<pos:position pos:line="32" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="33" pos:column="7">size_t<pos:position pos:line="33" pos:column="13"/></name></type> <name pos:line="33" pos:column="14">len<pos:position pos:line="33" pos:column="17"/></name></decl>;<pos:position pos:line="33" pos:column="18"/></decl_stmt>

      <while pos:line="35" pos:column="7">while<condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">*<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">p<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">&amp;&amp;<pos:position pos:line="35" pos:column="26"/></operator> <operator pos:line="35" pos:column="19">(<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="20">p<pos:position pos:line="35" pos:column="21"/></name> <operator pos:line="35" pos:column="22">&lt;<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="24">end<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">)<pos:position pos:line="35" pos:column="28"/></operator> <operator pos:line="35" pos:column="29">&amp;&amp;<pos:position pos:line="35" pos:column="39"/></operator> <operator pos:line="35" pos:column="32">!<pos:position pos:line="35" pos:column="33"/></operator><call><name pos:line="35" pos:column="33">ISALPHA<pos:position pos:line="35" pos:column="40"/></name><argument_list pos:line="35" pos:column="40">(<argument><expr><operator pos:line="35" pos:column="41">*<pos:position pos:line="35" pos:column="42"/></operator><name pos:line="35" pos:column="42">p<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="45"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="9">p<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">++<pos:position pos:line="36" pos:column="12"/></operator></expr>;<pos:position pos:line="36" pos:column="13"/></expr_stmt></block></while>
      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><name pos:line="37" pos:column="10">p<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">&gt;<pos:position pos:line="37" pos:column="16"/></operator> <name pos:line="37" pos:column="14">end<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">-<pos:position pos:line="37" pos:column="19"/></operator> <literal type="number" pos:line="37" pos:column="20">9<pos:position pos:line="37" pos:column="21"/></literal></expr>)<pos:position pos:line="37" pos:column="22"/></condition><then pos:line="37" pos:column="22">
        <block type="pseudo"><break pos:line="38" pos:column="9">break;<pos:position pos:line="38" pos:column="15"/></break></block></then></if>

      <if pos:line="40" pos:column="7">if<condition pos:line="40" pos:column="9">(<expr><call><name pos:line="40" pos:column="10">memcmp<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">p<pos:position pos:line="40" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="20">"filename="<pos:position pos:line="40" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="33">9<pos:position pos:line="40" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="36"/></condition><then pos:line="40" pos:column="36"> <block pos:line="40" pos:column="37">{
        <comment type="block" pos:line="41" pos:column="9">/* no match, find next parameter */</comment>
        <while pos:line="42" pos:column="9">while<condition pos:line="42" pos:column="14">(<expr><operator pos:line="42" pos:column="15">(<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="16">p<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">&lt;<pos:position pos:line="42" pos:column="22"/></operator> <name pos:line="42" pos:column="20">end<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">)<pos:position pos:line="42" pos:column="24"/></operator> <operator pos:line="42" pos:column="25">&amp;&amp;<pos:position pos:line="42" pos:column="35"/></operator> <operator pos:line="42" pos:column="28">(<pos:position pos:line="42" pos:column="29"/></operator><operator pos:line="42" pos:column="29">*<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">p<pos:position pos:line="42" pos:column="31"/></name> <operator pos:line="42" pos:column="32">!=<pos:position pos:line="42" pos:column="34"/></operator> <literal type="char" pos:line="42" pos:column="35">';'<pos:position pos:line="42" pos:column="38"/></literal><operator pos:line="42" pos:column="38">)<pos:position pos:line="42" pos:column="39"/></operator></expr>)<pos:position pos:line="42" pos:column="40"/></condition>
          <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="11">p<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">++<pos:position pos:line="43" pos:column="14"/></operator></expr>;<pos:position pos:line="43" pos:column="15"/></expr_stmt></block></while>
        <continue pos:line="44" pos:column="9">continue;<pos:position pos:line="44" pos:column="18"/></continue>
      }<pos:position pos:line="45" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="46" pos:column="7">p<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">+=<pos:position pos:line="46" pos:column="11"/></operator> <literal type="number" pos:line="46" pos:column="12">9<pos:position pos:line="46" pos:column="13"/></literal></expr>;<pos:position pos:line="46" pos:column="14"/></expr_stmt>

      <comment type="block" pos:line="48" pos:column="7">/* this expression below typecasts 'cb' only to avoid
         warning: signed and unsigned type in conditional expression
      */</comment>
      <expr_stmt><expr><name pos:line="51" pos:column="7">len<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">=<pos:position pos:line="51" pos:column="12"/></operator> <operator pos:line="51" pos:column="13">(<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">ssize_t<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">)<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">cb<pos:position pos:line="51" pos:column="24"/></name> <operator pos:line="51" pos:column="25">-<pos:position pos:line="51" pos:column="26"/></operator> <operator pos:line="51" pos:column="27">(<pos:position pos:line="51" pos:column="28"/></operator><name pos:line="51" pos:column="28">p<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">-<pos:position pos:line="51" pos:column="31"/></operator> <name pos:line="51" pos:column="32">str<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">)<pos:position pos:line="51" pos:column="36"/></operator></expr>;<pos:position pos:line="51" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name pos:line="52" pos:column="7">filename<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <call><name pos:line="52" pos:column="18">parse_filename<pos:position pos:line="52" pos:column="32"/></name><argument_list pos:line="52" pos:column="32">(<argument><expr><name pos:line="52" pos:column="33">p<pos:position pos:line="52" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="36">len<pos:position pos:line="52" pos:column="39"/></name></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>
      <if pos:line="53" pos:column="7">if<condition pos:line="53" pos:column="9">(<expr><name pos:line="53" pos:column="10">filename<pos:position pos:line="53" pos:column="18"/></name></expr>)<pos:position pos:line="53" pos:column="19"/></condition><then pos:line="53" pos:column="19"> <block pos:line="53" pos:column="20">{
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">outs<pos:position pos:line="54" pos:column="13"/></name><operator pos:line="54" pos:column="13">-&gt;<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="15">filename<pos:position pos:line="54" pos:column="23"/></name></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <name pos:line="54" pos:column="26">filename<pos:position pos:line="54" pos:column="34"/></name></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">outs<pos:position pos:line="55" pos:column="13"/></name><operator pos:line="55" pos:column="13">-&gt;<pos:position pos:line="55" pos:column="18"/></operator><name pos:line="55" pos:column="15">alloc_filename<pos:position pos:line="55" pos:column="29"/></name></name> <operator pos:line="55" pos:column="30">=<pos:position pos:line="55" pos:column="31"/></operator> <name pos:line="55" pos:column="32">TRUE<pos:position pos:line="55" pos:column="36"/></name></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">outs<pos:position pos:line="56" pos:column="13"/></name><operator pos:line="56" pos:column="13">-&gt;<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="15">s_isreg<pos:position pos:line="56" pos:column="22"/></name></name> <operator pos:line="56" pos:column="23">=<pos:position pos:line="56" pos:column="24"/></operator> <name pos:line="56" pos:column="25">TRUE<pos:position pos:line="56" pos:column="29"/></name></expr>;<pos:position pos:line="56" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="57" pos:column="9">outs<pos:position pos:line="57" pos:column="13"/></name><operator pos:line="57" pos:column="13">-&gt;<pos:position pos:line="57" pos:column="18"/></operator><name pos:line="57" pos:column="15">fopened<pos:position pos:line="57" pos:column="22"/></name></name> <operator pos:line="57" pos:column="23">=<pos:position pos:line="57" pos:column="24"/></operator> <name pos:line="57" pos:column="25">FALSE<pos:position pos:line="57" pos:column="30"/></name></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">outs<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">-&gt;<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="15">stream<pos:position pos:line="58" pos:column="21"/></name></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <name pos:line="58" pos:column="24">NULL<pos:position pos:line="58" pos:column="28"/></name></expr>;<pos:position pos:line="58" pos:column="29"/></expr_stmt>
        <break pos:line="59" pos:column="9">break;<pos:position pos:line="59" pos:column="15"/></break>
      }<pos:position pos:line="60" pos:column="8"/></block></then>
      <else pos:line="61" pos:column="7">else
        <block type="pseudo"><return pos:line="62" pos:column="9">return <expr><name pos:line="62" pos:column="16">failure<pos:position pos:line="62" pos:column="23"/></name></expr>;<pos:position pos:line="62" pos:column="24"/></return></block></else></if>
    }<pos:position pos:line="63" pos:column="6"/></block></for>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <return pos:line="66" pos:column="3">return <expr><name pos:line="66" pos:column="10">cb<pos:position pos:line="66" pos:column="12"/></name></expr>;<pos:position pos:line="66" pos:column="13"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
