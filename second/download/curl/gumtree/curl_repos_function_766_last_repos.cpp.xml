<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_766_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">srvr_sockaddr_union_t<pos:position pos:line="3" pos:column="24"/></name></type> <name pos:line="3" pos:column="25">me<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">sock<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name pos:line="4" pos:column="24">CURL_SOCKET_BAD<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_socket_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">msgsock<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">CURL_SOCKET_BAD<pos:position pos:line="5" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">wrotepidfile<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">pidname<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><literal type="string" pos:line="7" pos:column="25">".sockfilt.pid"<pos:position pos:line="7" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">juggle_again<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">rc<pos:position pos:line="9" pos:column="9"/></name></decl>;<pos:position pos:line="9" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">error<pos:position pos:line="10" pos:column="12"/></name></decl>;<pos:position pos:line="10" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">arg<pos:position pos:line="11" pos:column="10"/></name> <init pos:line="11" pos:column="11">= <expr><literal type="number" pos:line="11" pos:column="13">1<pos:position pos:line="11" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="12" pos:column="3">enum<pos:position pos:line="12" pos:column="7"/></name> <name pos:line="12" pos:column="8">sockmode<pos:position pos:line="12" pos:column="16"/></name></name></type> <name pos:line="12" pos:column="17">mode<pos:position pos:line="12" pos:column="21"/></name> <init pos:line="12" pos:column="22">= <expr><name pos:line="12" pos:column="24">PASSIVE_LISTEN<pos:position pos:line="12" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="39"/></decl_stmt> <comment type="block" pos:line="12" pos:column="40">/* default */</comment>
  <decl_stmt><decl><type><specifier pos:line="13" pos:column="3">const<pos:position pos:line="13" pos:column="8"/></specifier> <name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name> <modifier pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></modifier></type><name pos:line="13" pos:column="15">addr<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><name pos:line="13" pos:column="22">NULL<pos:position pos:line="13" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>

  <while pos:line="15" pos:column="3">while<condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">argc<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">arg<pos:position pos:line="15" pos:column="17"/></name></expr>)<pos:position pos:line="15" pos:column="18"/></condition> <block pos:line="15" pos:column="19">{
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><operator pos:line="16" pos:column="8">!<pos:position pos:line="16" pos:column="9"/></operator><call><name pos:line="16" pos:column="9">strcmp<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="string" pos:line="16" pos:column="16">"--version"<pos:position pos:line="16" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="29">argv<pos:position pos:line="16" pos:column="33"/></name><index pos:line="16" pos:column="33">[<expr><name pos:line="16" pos:column="34">arg<pos:position pos:line="16" pos:column="37"/></name></expr>]<pos:position pos:line="16" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="40"/></condition><then pos:line="16" pos:column="40"> <block pos:line="16" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">printf<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><literal type="string" pos:line="17" pos:column="14">"sockfilt IPv4%s\n"<pos:position pos:line="17" pos:column="33"/></literal></expr></argument>,
<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">ENABLE_IPV6<pos:position pos:line="18" pos:column="19"/></name></cpp:ifdef>
             <argument><expr><literal type="string" pos:line="19" pos:column="14">"/IPv6"<pos:position pos:line="19" pos:column="21"/></literal>
<cpp:else pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">else<pos:position pos:line="20" pos:column="6"/></cpp:directive></cpp:else>
             <literal type="string" pos:line="21" pos:column="14">""<pos:position pos:line="21" pos:column="16"/></literal></expr></argument>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
             )<pos:position pos:line="23" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="16"/></expr_stmt>
      <return pos:line="24" pos:column="7">return <expr><literal type="number" pos:line="24" pos:column="14">0<pos:position pos:line="24" pos:column="15"/></literal></expr>;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then>
    <elseif pos:line="26" pos:column="5">else <if pos:line="26" pos:column="10">if<condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><call><name pos:line="26" pos:column="14">strcmp<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><literal type="string" pos:line="26" pos:column="21">"--verbose"<pos:position pos:line="26" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="34">argv<pos:position pos:line="26" pos:column="38"/></name><index pos:line="26" pos:column="38">[<expr><name pos:line="26" pos:column="39">arg<pos:position pos:line="26" pos:column="42"/></name></expr>]<pos:position pos:line="26" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45"> <block pos:line="26" pos:column="46">{
      <expr_stmt><expr><name pos:line="27" pos:column="7">verbose<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">TRUE<pos:position pos:line="27" pos:column="21"/></name></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="28" pos:column="7">arg<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">++<pos:position pos:line="28" pos:column="12"/></operator></expr>;<pos:position pos:line="28" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if<condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><call><name pos:line="30" pos:column="14">strcmp<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><literal type="string" pos:line="30" pos:column="21">"--pidfile"<pos:position pos:line="30" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="34">argv<pos:position pos:line="30" pos:column="38"/></name><index pos:line="30" pos:column="38">[<expr><name pos:line="30" pos:column="39">arg<pos:position pos:line="30" pos:column="42"/></name></expr>]<pos:position pos:line="30" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="45"/></condition><then pos:line="30" pos:column="45"> <block pos:line="30" pos:column="46">{
      <expr_stmt><expr><name pos:line="31" pos:column="7">arg<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">++<pos:position pos:line="31" pos:column="12"/></operator></expr>;<pos:position pos:line="31" pos:column="13"/></expr_stmt>
      <if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><name pos:line="32" pos:column="10">argc<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">arg<pos:position pos:line="32" pos:column="18"/></name></expr>)<pos:position pos:line="32" pos:column="19"/></condition><then pos:line="32" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="9">pidname<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <name><name pos:line="33" pos:column="19">argv<pos:position pos:line="33" pos:column="23"/></name><index pos:line="33" pos:column="23">[<expr><name pos:line="33" pos:column="24">arg<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">++<pos:position pos:line="33" pos:column="29"/></operator></expr>]<pos:position pos:line="33" pos:column="30"/></index></name></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="35" pos:column="5">else <if pos:line="35" pos:column="10">if<condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><call><name pos:line="35" pos:column="14">strcmp<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><literal type="string" pos:line="35" pos:column="21">"--logfile"<pos:position pos:line="35" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="34">argv<pos:position pos:line="35" pos:column="38"/></name><index pos:line="35" pos:column="38">[<expr><name pos:line="35" pos:column="39">arg<pos:position pos:line="35" pos:column="42"/></name></expr>]<pos:position pos:line="35" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="45"/></condition><then pos:line="35" pos:column="45"> <block pos:line="35" pos:column="46">{
      <expr_stmt><expr><name pos:line="36" pos:column="7">arg<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">++<pos:position pos:line="36" pos:column="12"/></operator></expr>;<pos:position pos:line="36" pos:column="13"/></expr_stmt>
      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><name pos:line="37" pos:column="10">argc<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">&gt;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="15">arg<pos:position pos:line="37" pos:column="18"/></name></expr>)<pos:position pos:line="37" pos:column="19"/></condition><then pos:line="37" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="9">serverlogfile<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">=<pos:position pos:line="38" pos:column="24"/></operator> <name><name pos:line="38" pos:column="25">argv<pos:position pos:line="38" pos:column="29"/></name><index pos:line="38" pos:column="29">[<expr><name pos:line="38" pos:column="30">arg<pos:position pos:line="38" pos:column="33"/></name><operator pos:line="38" pos:column="33">++<pos:position pos:line="38" pos:column="35"/></operator></expr>]<pos:position pos:line="38" pos:column="36"/></index></name></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt></block></then></if>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="40" pos:column="5">else <if pos:line="40" pos:column="10">if<condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">!<pos:position pos:line="40" pos:column="14"/></operator><call><name pos:line="40" pos:column="14">strcmp<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><literal type="string" pos:line="40" pos:column="21">"--ipv6"<pos:position pos:line="40" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="31">argv<pos:position pos:line="40" pos:column="35"/></name><index pos:line="40" pos:column="35">[<expr><name pos:line="40" pos:column="36">arg<pos:position pos:line="40" pos:column="39"/></name></expr>]<pos:position pos:line="40" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="42"/></condition><then pos:line="40" pos:column="42"> <block pos:line="40" pos:column="43">{
<cpp:ifdef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifdef<pos:position pos:line="41" pos:column="7"/></cpp:directive> <name pos:line="41" pos:column="8">ENABLE_IPV6<pos:position pos:line="41" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="42" pos:column="7">ipv_inuse<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <literal type="string" pos:line="42" pos:column="19">"IPv6"<pos:position pos:line="42" pos:column="25"/></literal></expr>;<pos:position pos:line="42" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">use_ipv6<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <name pos:line="43" pos:column="18">TRUE<pos:position pos:line="43" pos:column="22"/></name></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="45" pos:column="7">arg<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">++<pos:position pos:line="45" pos:column="12"/></operator></expr>;<pos:position pos:line="45" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if<condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><call><name pos:line="47" pos:column="14">strcmp<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><literal type="string" pos:line="47" pos:column="21">"--ipv4"<pos:position pos:line="47" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="31">argv<pos:position pos:line="47" pos:column="35"/></name><index pos:line="47" pos:column="35">[<expr><name pos:line="47" pos:column="36">arg<pos:position pos:line="47" pos:column="39"/></name></expr>]<pos:position pos:line="47" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="42"/></condition><then pos:line="47" pos:column="42"> <block pos:line="47" pos:column="43">{
      <comment type="block" pos:line="48" pos:column="7">/* for completeness, we support this option as well */</comment>
<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">ENABLE_IPV6<pos:position pos:line="49" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="50" pos:column="7">ipv_inuse<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <literal type="string" pos:line="50" pos:column="19">"IPv4"<pos:position pos:line="50" pos:column="25"/></literal></expr>;<pos:position pos:line="50" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="51" pos:column="7">use_ipv6<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <name pos:line="51" pos:column="18">FALSE<pos:position pos:line="51" pos:column="23"/></name></expr>;<pos:position pos:line="51" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="53" pos:column="7">arg<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">++<pos:position pos:line="53" pos:column="12"/></operator></expr>;<pos:position pos:line="53" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="55" pos:column="5">else <if pos:line="55" pos:column="10">if<condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><call><name pos:line="55" pos:column="14">strcmp<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><literal type="string" pos:line="55" pos:column="21">"--bindonly"<pos:position pos:line="55" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="35">argv<pos:position pos:line="55" pos:column="39"/></name><index pos:line="55" pos:column="39">[<expr><name pos:line="55" pos:column="40">arg<pos:position pos:line="55" pos:column="43"/></name></expr>]<pos:position pos:line="55" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="46"/></condition><then pos:line="55" pos:column="46"> <block pos:line="55" pos:column="47">{
      <expr_stmt><expr><name pos:line="56" pos:column="7">bind_only<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <name pos:line="56" pos:column="19">TRUE<pos:position pos:line="56" pos:column="23"/></name></expr>;<pos:position pos:line="56" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><name pos:line="57" pos:column="7">arg<pos:position pos:line="57" pos:column="10"/></name><operator pos:line="57" pos:column="10">++<pos:position pos:line="57" pos:column="12"/></operator></expr>;<pos:position pos:line="57" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="59" pos:column="5">else <if pos:line="59" pos:column="10">if<condition pos:line="59" pos:column="12">(<expr><operator pos:line="59" pos:column="13">!<pos:position pos:line="59" pos:column="14"/></operator><call><name pos:line="59" pos:column="14">strcmp<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><literal type="string" pos:line="59" pos:column="21">"--port"<pos:position pos:line="59" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="31">argv<pos:position pos:line="59" pos:column="35"/></name><index pos:line="59" pos:column="35">[<expr><name pos:line="59" pos:column="36">arg<pos:position pos:line="59" pos:column="39"/></name></expr>]<pos:position pos:line="59" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="42"/></condition><then pos:line="59" pos:column="42"> <block pos:line="59" pos:column="43">{
      <expr_stmt><expr><name pos:line="60" pos:column="7">arg<pos:position pos:line="60" pos:column="10"/></name><operator pos:line="60" pos:column="10">++<pos:position pos:line="60" pos:column="12"/></operator></expr>;<pos:position pos:line="60" pos:column="13"/></expr_stmt>
      <if pos:line="61" pos:column="7">if<condition pos:line="61" pos:column="9">(<expr><name pos:line="61" pos:column="10">argc<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">&gt;<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="15">arg<pos:position pos:line="61" pos:column="18"/></name></expr>)<pos:position pos:line="61" pos:column="19"/></condition><then pos:line="61" pos:column="19"> <block pos:line="61" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="62" pos:column="9">char<pos:position pos:line="62" pos:column="13"/></name> <modifier pos:line="62" pos:column="14">*<pos:position pos:line="62" pos:column="15"/></modifier></type><name pos:line="62" pos:column="15">endptr<pos:position pos:line="62" pos:column="21"/></name></decl>;<pos:position pos:line="62" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="63" pos:column="9">unsigned<pos:position pos:line="63" pos:column="17"/></name> <name pos:line="63" pos:column="18">long<pos:position pos:line="63" pos:column="22"/></name></type> <name pos:line="63" pos:column="23">ulnum<pos:position pos:line="63" pos:column="28"/></name> <init pos:line="63" pos:column="29">= <expr><call><name pos:line="63" pos:column="31">strtoul<pos:position pos:line="63" pos:column="38"/></name><argument_list pos:line="63" pos:column="38">(<argument><expr><name><name pos:line="63" pos:column="39">argv<pos:position pos:line="63" pos:column="43"/></name><index pos:line="63" pos:column="43">[<expr><name pos:line="63" pos:column="44">arg<pos:position pos:line="63" pos:column="47"/></name></expr>]<pos:position pos:line="63" pos:column="48"/></index></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="50">&amp;<pos:position pos:line="63" pos:column="55"/></operator><name pos:line="63" pos:column="51">endptr<pos:position pos:line="63" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="59">10<pos:position pos:line="63" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="63" pos:column="63"/></decl_stmt>
        <if pos:line="64" pos:column="9">if<condition pos:line="64" pos:column="11">(<expr><operator pos:line="64" pos:column="12">(<pos:position pos:line="64" pos:column="13"/></operator><name pos:line="64" pos:column="13">endptr<pos:position pos:line="64" pos:column="19"/></name> <operator pos:line="64" pos:column="20">!=<pos:position pos:line="64" pos:column="22"/></operator> <name><name pos:line="64" pos:column="23">argv<pos:position pos:line="64" pos:column="27"/></name><index pos:line="64" pos:column="27">[<expr><name pos:line="64" pos:column="28">arg<pos:position pos:line="64" pos:column="31"/></name></expr>]<pos:position pos:line="64" pos:column="32"/></index></name> <operator pos:line="64" pos:column="33">+<pos:position pos:line="64" pos:column="34"/></operator> <call><name pos:line="64" pos:column="35">strlen<pos:position pos:line="64" pos:column="41"/></name><argument_list pos:line="64" pos:column="41">(<argument><expr><name><name pos:line="64" pos:column="42">argv<pos:position pos:line="64" pos:column="46"/></name><index pos:line="64" pos:column="46">[<expr><name pos:line="64" pos:column="47">arg<pos:position pos:line="64" pos:column="50"/></name></expr>]<pos:position pos:line="64" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="64" pos:column="52"/></argument_list></call><operator pos:line="64" pos:column="52">)<pos:position pos:line="64" pos:column="53"/></operator> <operator pos:line="64" pos:column="54">||<pos:position pos:line="64" pos:column="56"/></operator>
           <operator pos:line="65" pos:column="12">(<pos:position pos:line="65" pos:column="13"/></operator><operator pos:line="65" pos:column="13">(<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">ulnum<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">!=<pos:position pos:line="65" pos:column="22"/></operator> <literal type="number" pos:line="65" pos:column="23">0UL<pos:position pos:line="65" pos:column="26"/></literal><operator pos:line="65" pos:column="26">)<pos:position pos:line="65" pos:column="27"/></operator> <operator pos:line="65" pos:column="28">&amp;&amp;<pos:position pos:line="65" pos:column="38"/></operator> <operator pos:line="65" pos:column="31">(<pos:position pos:line="65" pos:column="32"/></operator><operator pos:line="65" pos:column="32">(<pos:position pos:line="65" pos:column="33"/></operator><name pos:line="65" pos:column="33">ulnum<pos:position pos:line="65" pos:column="38"/></name> <operator pos:line="65" pos:column="39">&lt;<pos:position pos:line="65" pos:column="43"/></operator> <literal type="number" pos:line="65" pos:column="41">1025UL<pos:position pos:line="65" pos:column="47"/></literal><operator pos:line="65" pos:column="47">)<pos:position pos:line="65" pos:column="48"/></operator> <operator pos:line="65" pos:column="49">||<pos:position pos:line="65" pos:column="51"/></operator> <operator pos:line="65" pos:column="52">(<pos:position pos:line="65" pos:column="53"/></operator><name pos:line="65" pos:column="53">ulnum<pos:position pos:line="65" pos:column="58"/></name> <operator pos:line="65" pos:column="59">&gt;<pos:position pos:line="65" pos:column="63"/></operator> <literal type="number" pos:line="65" pos:column="61">65535UL<pos:position pos:line="65" pos:column="68"/></literal><operator pos:line="65" pos:column="68">)<pos:position pos:line="65" pos:column="69"/></operator><operator pos:line="65" pos:column="69">)<pos:position pos:line="65" pos:column="70"/></operator><operator pos:line="65" pos:column="70">)<pos:position pos:line="65" pos:column="71"/></operator></expr>)<pos:position pos:line="65" pos:column="72"/></condition><then pos:line="65" pos:column="72"> <block pos:line="65" pos:column="73">{
          <expr_stmt><expr><call><name pos:line="66" pos:column="11">fprintf<pos:position pos:line="66" pos:column="18"/></name><argument_list pos:line="66" pos:column="18">(<argument><expr><name pos:line="66" pos:column="19">stderr<pos:position pos:line="66" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="27">"sockfilt: invalid --port argument (%s)\n"<pos:position pos:line="66" pos:column="69"/></literal></expr></argument>,
                  <argument><expr><name><name pos:line="67" pos:column="19">argv<pos:position pos:line="67" pos:column="23"/></name><index pos:line="67" pos:column="23">[<expr><name pos:line="67" pos:column="24">arg<pos:position pos:line="67" pos:column="27"/></name></expr>]<pos:position pos:line="67" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="67" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt>
          <return pos:line="68" pos:column="11">return <expr><literal type="number" pos:line="68" pos:column="18">0<pos:position pos:line="68" pos:column="19"/></literal></expr>;<pos:position pos:line="68" pos:column="20"/></return>
        }<pos:position pos:line="69" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="70" pos:column="9">port<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">=<pos:position pos:line="70" pos:column="15"/></operator> <call><name pos:line="70" pos:column="16">curlx_ultous<pos:position pos:line="70" pos:column="28"/></name><argument_list pos:line="70" pos:column="28">(<argument><expr><name pos:line="70" pos:column="29">ulnum<pos:position pos:line="70" pos:column="34"/></name></expr></argument>)<pos:position pos:line="70" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="71" pos:column="9">arg<pos:position pos:line="71" pos:column="12"/></name><operator pos:line="71" pos:column="12">++<pos:position pos:line="71" pos:column="14"/></operator></expr>;<pos:position pos:line="71" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="72" pos:column="8"/></block></then></if>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="74" pos:column="5">else <if pos:line="74" pos:column="10">if<condition pos:line="74" pos:column="12">(<expr><operator pos:line="74" pos:column="13">!<pos:position pos:line="74" pos:column="14"/></operator><call><name pos:line="74" pos:column="14">strcmp<pos:position pos:line="74" pos:column="20"/></name><argument_list pos:line="74" pos:column="20">(<argument><expr><literal type="string" pos:line="74" pos:column="21">"--connect"<pos:position pos:line="74" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="34">argv<pos:position pos:line="74" pos:column="38"/></name><index pos:line="74" pos:column="38">[<expr><name pos:line="74" pos:column="39">arg<pos:position pos:line="74" pos:column="42"/></name></expr>]<pos:position pos:line="74" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="74" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="45"/></condition><then pos:line="74" pos:column="45"> <block pos:line="74" pos:column="46">{
      <comment type="block" pos:line="75" pos:column="7">/* Asked to actively connect to the specified local port instead of
         doing a passive server-style listening. */</comment>
      <expr_stmt><expr><name pos:line="77" pos:column="7">arg<pos:position pos:line="77" pos:column="10"/></name><operator pos:line="77" pos:column="10">++<pos:position pos:line="77" pos:column="12"/></operator></expr>;<pos:position pos:line="77" pos:column="13"/></expr_stmt>
      <if pos:line="78" pos:column="7">if<condition pos:line="78" pos:column="9">(<expr><name pos:line="78" pos:column="10">argc<pos:position pos:line="78" pos:column="14"/></name><operator pos:line="78" pos:column="14">&gt;<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="15">arg<pos:position pos:line="78" pos:column="18"/></name></expr>)<pos:position pos:line="78" pos:column="19"/></condition><then pos:line="78" pos:column="19"> <block pos:line="78" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="79" pos:column="9">char<pos:position pos:line="79" pos:column="13"/></name> <modifier pos:line="79" pos:column="14">*<pos:position pos:line="79" pos:column="15"/></modifier></type><name pos:line="79" pos:column="15">endptr<pos:position pos:line="79" pos:column="21"/></name></decl>;<pos:position pos:line="79" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="80" pos:column="9">unsigned<pos:position pos:line="80" pos:column="17"/></name> <name pos:line="80" pos:column="18">long<pos:position pos:line="80" pos:column="22"/></name></type> <name pos:line="80" pos:column="23">ulnum<pos:position pos:line="80" pos:column="28"/></name> <init pos:line="80" pos:column="29">= <expr><call><name pos:line="80" pos:column="31">strtoul<pos:position pos:line="80" pos:column="38"/></name><argument_list pos:line="80" pos:column="38">(<argument><expr><name><name pos:line="80" pos:column="39">argv<pos:position pos:line="80" pos:column="43"/></name><index pos:line="80" pos:column="43">[<expr><name pos:line="80" pos:column="44">arg<pos:position pos:line="80" pos:column="47"/></name></expr>]<pos:position pos:line="80" pos:column="48"/></index></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="50">&amp;<pos:position pos:line="80" pos:column="55"/></operator><name pos:line="80" pos:column="51">endptr<pos:position pos:line="80" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="59">10<pos:position pos:line="80" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="80" pos:column="63"/></decl_stmt>
        <if pos:line="81" pos:column="9">if<condition pos:line="81" pos:column="11">(<expr><operator pos:line="81" pos:column="12">(<pos:position pos:line="81" pos:column="13"/></operator><name pos:line="81" pos:column="13">endptr<pos:position pos:line="81" pos:column="19"/></name> <operator pos:line="81" pos:column="20">!=<pos:position pos:line="81" pos:column="22"/></operator> <name><name pos:line="81" pos:column="23">argv<pos:position pos:line="81" pos:column="27"/></name><index pos:line="81" pos:column="27">[<expr><name pos:line="81" pos:column="28">arg<pos:position pos:line="81" pos:column="31"/></name></expr>]<pos:position pos:line="81" pos:column="32"/></index></name> <operator pos:line="81" pos:column="33">+<pos:position pos:line="81" pos:column="34"/></operator> <call><name pos:line="81" pos:column="35">strlen<pos:position pos:line="81" pos:column="41"/></name><argument_list pos:line="81" pos:column="41">(<argument><expr><name><name pos:line="81" pos:column="42">argv<pos:position pos:line="81" pos:column="46"/></name><index pos:line="81" pos:column="46">[<expr><name pos:line="81" pos:column="47">arg<pos:position pos:line="81" pos:column="50"/></name></expr>]<pos:position pos:line="81" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="81" pos:column="52"/></argument_list></call><operator pos:line="81" pos:column="52">)<pos:position pos:line="81" pos:column="53"/></operator> <operator pos:line="81" pos:column="54">||<pos:position pos:line="81" pos:column="56"/></operator>
           <operator pos:line="82" pos:column="12">(<pos:position pos:line="82" pos:column="13"/></operator><name pos:line="82" pos:column="13">ulnum<pos:position pos:line="82" pos:column="18"/></name> <operator pos:line="82" pos:column="19">&lt;<pos:position pos:line="82" pos:column="23"/></operator> <literal type="number" pos:line="82" pos:column="21">1025UL<pos:position pos:line="82" pos:column="27"/></literal><operator pos:line="82" pos:column="27">)<pos:position pos:line="82" pos:column="28"/></operator> <operator pos:line="82" pos:column="29">||<pos:position pos:line="82" pos:column="31"/></operator> <operator pos:line="82" pos:column="32">(<pos:position pos:line="82" pos:column="33"/></operator><name pos:line="82" pos:column="33">ulnum<pos:position pos:line="82" pos:column="38"/></name> <operator pos:line="82" pos:column="39">&gt;<pos:position pos:line="82" pos:column="43"/></operator> <literal type="number" pos:line="82" pos:column="41">65535UL<pos:position pos:line="82" pos:column="48"/></literal><operator pos:line="82" pos:column="48">)<pos:position pos:line="82" pos:column="49"/></operator></expr>)<pos:position pos:line="82" pos:column="50"/></condition><then pos:line="82" pos:column="50"> <block pos:line="82" pos:column="51">{
          <expr_stmt><expr><call><name pos:line="83" pos:column="11">fprintf<pos:position pos:line="83" pos:column="18"/></name><argument_list pos:line="83" pos:column="18">(<argument><expr><name pos:line="83" pos:column="19">stderr<pos:position pos:line="83" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="27">"sockfilt: invalid --connect argument (%s)\n"<pos:position pos:line="83" pos:column="72"/></literal></expr></argument>,
                  <argument><expr><name><name pos:line="84" pos:column="19">argv<pos:position pos:line="84" pos:column="23"/></name><index pos:line="84" pos:column="23">[<expr><name pos:line="84" pos:column="24">arg<pos:position pos:line="84" pos:column="27"/></name></expr>]<pos:position pos:line="84" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="84" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="30"/></expr_stmt>
          <return pos:line="85" pos:column="11">return <expr><literal type="number" pos:line="85" pos:column="18">0<pos:position pos:line="85" pos:column="19"/></literal></expr>;<pos:position pos:line="85" pos:column="20"/></return>
        }<pos:position pos:line="86" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="87" pos:column="9">connectport<pos:position pos:line="87" pos:column="20"/></name> <operator pos:line="87" pos:column="21">=<pos:position pos:line="87" pos:column="22"/></operator> <call><name pos:line="87" pos:column="23">curlx_ultous<pos:position pos:line="87" pos:column="35"/></name><argument_list pos:line="87" pos:column="35">(<argument><expr><name pos:line="87" pos:column="36">ulnum<pos:position pos:line="87" pos:column="41"/></name></expr></argument>)<pos:position pos:line="87" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="88" pos:column="9">arg<pos:position pos:line="88" pos:column="12"/></name><operator pos:line="88" pos:column="12">++<pos:position pos:line="88" pos:column="14"/></operator></expr>;<pos:position pos:line="88" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="89" pos:column="8"/></block></then></if>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="91" pos:column="5">else <if pos:line="91" pos:column="10">if<condition pos:line="91" pos:column="12">(<expr><operator pos:line="91" pos:column="13">!<pos:position pos:line="91" pos:column="14"/></operator><call><name pos:line="91" pos:column="14">strcmp<pos:position pos:line="91" pos:column="20"/></name><argument_list pos:line="91" pos:column="20">(<argument><expr><literal type="string" pos:line="91" pos:column="21">"--addr"<pos:position pos:line="91" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="31">argv<pos:position pos:line="91" pos:column="35"/></name><index pos:line="91" pos:column="35">[<expr><name pos:line="91" pos:column="36">arg<pos:position pos:line="91" pos:column="39"/></name></expr>]<pos:position pos:line="91" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="91" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="42"/></condition><then pos:line="91" pos:column="42"> <block pos:line="91" pos:column="43">{
      <comment type="block" pos:line="92" pos:column="7">/* Set an IP address to use with --connect; otherwise use localhost */</comment>
      <expr_stmt><expr><name pos:line="93" pos:column="7">arg<pos:position pos:line="93" pos:column="10"/></name><operator pos:line="93" pos:column="10">++<pos:position pos:line="93" pos:column="12"/></operator></expr>;<pos:position pos:line="93" pos:column="13"/></expr_stmt>
      <if pos:line="94" pos:column="7">if<condition pos:line="94" pos:column="9">(<expr><name pos:line="94" pos:column="10">argc<pos:position pos:line="94" pos:column="14"/></name><operator pos:line="94" pos:column="14">&gt;<pos:position pos:line="94" pos:column="18"/></operator><name pos:line="94" pos:column="15">arg<pos:position pos:line="94" pos:column="18"/></name></expr>)<pos:position pos:line="94" pos:column="19"/></condition><then pos:line="94" pos:column="19"> <block pos:line="94" pos:column="20">{
        <expr_stmt><expr><name pos:line="95" pos:column="9">addr<pos:position pos:line="95" pos:column="13"/></name> <operator pos:line="95" pos:column="14">=<pos:position pos:line="95" pos:column="15"/></operator> <name><name pos:line="95" pos:column="16">argv<pos:position pos:line="95" pos:column="20"/></name><index pos:line="95" pos:column="20">[<expr><name pos:line="95" pos:column="21">arg<pos:position pos:line="95" pos:column="24"/></name></expr>]<pos:position pos:line="95" pos:column="25"/></index></name></expr>;<pos:position pos:line="95" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="96" pos:column="9">arg<pos:position pos:line="96" pos:column="12"/></name><operator pos:line="96" pos:column="12">++<pos:position pos:line="96" pos:column="14"/></operator></expr>;<pos:position pos:line="96" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="97" pos:column="8"/></block></then></if>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if></elseif>
    <else pos:line="99" pos:column="5">else <block pos:line="99" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="100" pos:column="7">puts<pos:position pos:line="100" pos:column="11"/></name><argument_list pos:line="100" pos:column="11">(<argument><expr><literal type="string" pos:line="100" pos:column="12">"Usage: sockfilt [option]\n"<pos:position pos:line="100" pos:column="40"/></literal>
           <literal type="string" pos:line="101" pos:column="12">" --version\n"<pos:position pos:line="101" pos:column="26"/></literal>
           <literal type="string" pos:line="102" pos:column="12">" --verbose\n"<pos:position pos:line="102" pos:column="26"/></literal>
           <literal type="string" pos:line="103" pos:column="12">" --logfile [file]\n"<pos:position pos:line="103" pos:column="33"/></literal>
           <literal type="string" pos:line="104" pos:column="12">" --pidfile [file]\n"<pos:position pos:line="104" pos:column="33"/></literal>
           <literal type="string" pos:line="105" pos:column="12">" --ipv4\n"<pos:position pos:line="105" pos:column="23"/></literal>
           <literal type="string" pos:line="106" pos:column="12">" --ipv6\n"<pos:position pos:line="106" pos:column="23"/></literal>
           <literal type="string" pos:line="107" pos:column="12">" --bindonly\n"<pos:position pos:line="107" pos:column="27"/></literal>
           <literal type="string" pos:line="108" pos:column="12">" --port [port]\n"<pos:position pos:line="108" pos:column="30"/></literal>
           <literal type="string" pos:line="109" pos:column="12">" --connect [port]\n"<pos:position pos:line="109" pos:column="33"/></literal>
           <literal type="string" pos:line="110" pos:column="12">" --addr [address]"<pos:position pos:line="110" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="33"/></expr_stmt>
      <return pos:line="111" pos:column="7">return <expr><literal type="number" pos:line="111" pos:column="14">0<pos:position pos:line="111" pos:column="15"/></literal></expr>;<pos:position pos:line="111" pos:column="16"/></return>
    }<pos:position pos:line="112" pos:column="6"/></block></else></if>
  }<pos:position pos:line="113" pos:column="4"/></block></while>

<cpp:ifdef pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">ifdef<pos:position pos:line="115" pos:column="7"/></cpp:directive> <name pos:line="115" pos:column="8">WIN32<pos:position pos:line="115" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="116" pos:column="3">win32_init<pos:position pos:line="116" pos:column="13"/></name><argument_list pos:line="116" pos:column="13">()<pos:position pos:line="116" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="117" pos:column="3">atexit<pos:position pos:line="117" pos:column="9"/></name><argument_list pos:line="117" pos:column="9">(<argument><expr><name pos:line="117" pos:column="10">win32_cleanup<pos:position pos:line="117" pos:column="23"/></name></expr></argument>)<pos:position pos:line="117" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="119" pos:column="3">setmode<pos:position pos:line="119" pos:column="10"/></name><argument_list pos:line="119" pos:column="10">(<argument><expr><call><name pos:line="119" pos:column="11">fileno<pos:position pos:line="119" pos:column="17"/></name><argument_list pos:line="119" pos:column="17">(<argument><expr><name pos:line="119" pos:column="18">stdin<pos:position pos:line="119" pos:column="23"/></name></expr></argument>)<pos:position pos:line="119" pos:column="24"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="119" pos:column="26">O_BINARY<pos:position pos:line="119" pos:column="34"/></name></expr></argument>)<pos:position pos:line="119" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="120" pos:column="3">setmode<pos:position pos:line="120" pos:column="10"/></name><argument_list pos:line="120" pos:column="10">(<argument><expr><call><name pos:line="120" pos:column="11">fileno<pos:position pos:line="120" pos:column="17"/></name><argument_list pos:line="120" pos:column="17">(<argument><expr><name pos:line="120" pos:column="18">stdout<pos:position pos:line="120" pos:column="24"/></name></expr></argument>)<pos:position pos:line="120" pos:column="25"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="120" pos:column="27">O_BINARY<pos:position pos:line="120" pos:column="35"/></name></expr></argument>)<pos:position pos:line="120" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="121" pos:column="3">setmode<pos:position pos:line="121" pos:column="10"/></name><argument_list pos:line="121" pos:column="10">(<argument><expr><call><name pos:line="121" pos:column="11">fileno<pos:position pos:line="121" pos:column="17"/></name><argument_list pos:line="121" pos:column="17">(<argument><expr><name pos:line="121" pos:column="18">stderr<pos:position pos:line="121" pos:column="24"/></name></expr></argument>)<pos:position pos:line="121" pos:column="25"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="121" pos:column="27">O_BINARY<pos:position pos:line="121" pos:column="35"/></name></expr></argument>)<pos:position pos:line="121" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">endif<pos:position pos:line="122" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="124" pos:column="3">install_signal_handlers<pos:position pos:line="124" pos:column="26"/></name><argument_list pos:line="124" pos:column="26">()<pos:position pos:line="124" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="29"/></expr_stmt>

<cpp:ifdef pos:line="126" pos:column="1">#<cpp:directive pos:line="126" pos:column="2">ifdef<pos:position pos:line="126" pos:column="7"/></cpp:directive> <name pos:line="126" pos:column="8">ENABLE_IPV6<pos:position pos:line="126" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="127" pos:column="3">if<condition pos:line="127" pos:column="5">(<expr><operator pos:line="127" pos:column="6">!<pos:position pos:line="127" pos:column="7"/></operator><name pos:line="127" pos:column="7">use_ipv6<pos:position pos:line="127" pos:column="15"/></name></expr>)<pos:position pos:line="127" pos:column="16"/></condition><then pos:line="127" pos:column="16">
<cpp:endif pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">endif<pos:position pos:line="128" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><name pos:line="129" pos:column="5">sock<pos:position pos:line="129" pos:column="9"/></name> <operator pos:line="129" pos:column="10">=<pos:position pos:line="129" pos:column="11"/></operator> <call><name pos:line="129" pos:column="12">socket<pos:position pos:line="129" pos:column="18"/></name><argument_list pos:line="129" pos:column="18">(<argument><expr><name pos:line="129" pos:column="19">AF_INET<pos:position pos:line="129" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="28">SOCK_STREAM<pos:position pos:line="129" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="129" pos:column="41">0<pos:position pos:line="129" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="44"/></expr_stmt></block></then>
<cpp:ifdef pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">ifdef<pos:position pos:line="130" pos:column="7"/></cpp:directive> <name pos:line="130" pos:column="8">ENABLE_IPV6<pos:position pos:line="130" pos:column="19"/></name></cpp:ifdef>
  <else pos:line="131" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="132" pos:column="5">sock<pos:position pos:line="132" pos:column="9"/></name> <operator pos:line="132" pos:column="10">=<pos:position pos:line="132" pos:column="11"/></operator> <call><name pos:line="132" pos:column="12">socket<pos:position pos:line="132" pos:column="18"/></name><argument_list pos:line="132" pos:column="18">(<argument><expr><name pos:line="132" pos:column="19">AF_INET6<pos:position pos:line="132" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="29">SOCK_STREAM<pos:position pos:line="132" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="132" pos:column="42">0<pos:position pos:line="132" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="45"/></expr_stmt></block></else></if>
<cpp:endif pos:line="133" pos:column="1">#<cpp:directive pos:line="133" pos:column="2">endif<pos:position pos:line="133" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="135" pos:column="3">if<condition pos:line="135" pos:column="5">(<expr><name pos:line="135" pos:column="6">CURL_SOCKET_BAD<pos:position pos:line="135" pos:column="21"/></name> <operator pos:line="135" pos:column="22">==<pos:position pos:line="135" pos:column="24"/></operator> <name pos:line="135" pos:column="25">sock<pos:position pos:line="135" pos:column="29"/></name></expr>)<pos:position pos:line="135" pos:column="30"/></condition><then pos:line="135" pos:column="30"> <block pos:line="135" pos:column="31">{
    <expr_stmt><expr><name pos:line="136" pos:column="5">error<pos:position pos:line="136" pos:column="10"/></name> <operator pos:line="136" pos:column="11">=<pos:position pos:line="136" pos:column="12"/></operator> <name pos:line="136" pos:column="13">SOCKERRNO<pos:position pos:line="136" pos:column="22"/></name></expr>;<pos:position pos:line="136" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="137" pos:column="5">logmsg<pos:position pos:line="137" pos:column="11"/></name><argument_list pos:line="137" pos:column="11">(<argument><expr><literal type="string" pos:line="137" pos:column="12">"Error creating socket: (%d) %s"<pos:position pos:line="137" pos:column="44"/></literal></expr></argument>,
           <argument><expr><name pos:line="138" pos:column="12">error<pos:position pos:line="138" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="138" pos:column="19">strerror<pos:position pos:line="138" pos:column="27"/></name><argument_list pos:line="138" pos:column="27">(<argument><expr><name pos:line="138" pos:column="28">error<pos:position pos:line="138" pos:column="33"/></name></expr></argument>)<pos:position pos:line="138" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="138" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="139" pos:column="5">write_stdout<pos:position pos:line="139" pos:column="17"/></name><argument_list pos:line="139" pos:column="17">(<argument><expr><literal type="string" pos:line="139" pos:column="18">"FAIL\n"<pos:position pos:line="139" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="139" pos:column="28">5<pos:position pos:line="139" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="31"/></expr_stmt>
    <goto pos:line="140" pos:column="5">goto <name pos:line="140" pos:column="10">sockfilt_cleanup<pos:position pos:line="140" pos:column="26"/></name>;<pos:position pos:line="140" pos:column="27"/></goto>
  }<pos:position pos:line="141" pos:column="4"/></block></then></if>

  <if pos:line="143" pos:column="3">if<condition pos:line="143" pos:column="5">(<expr><name pos:line="143" pos:column="6">connectport<pos:position pos:line="143" pos:column="17"/></name></expr>)<pos:position pos:line="143" pos:column="18"/></condition><then pos:line="143" pos:column="18"> <block pos:line="143" pos:column="19">{
    <comment type="block" pos:line="144" pos:column="5">/* Active mode, we should connect to the given port number */</comment>
    <expr_stmt><expr><name pos:line="145" pos:column="5">mode<pos:position pos:line="145" pos:column="9"/></name> <operator pos:line="145" pos:column="10">=<pos:position pos:line="145" pos:column="11"/></operator> <name pos:line="145" pos:column="12">ACTIVE<pos:position pos:line="145" pos:column="18"/></name></expr>;<pos:position pos:line="145" pos:column="19"/></expr_stmt>
<cpp:ifdef pos:line="146" pos:column="1">#<cpp:directive pos:line="146" pos:column="2">ifdef<pos:position pos:line="146" pos:column="7"/></cpp:directive> <name pos:line="146" pos:column="8">ENABLE_IPV6<pos:position pos:line="146" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="147" pos:column="5">if<condition pos:line="147" pos:column="7">(<expr><operator pos:line="147" pos:column="8">!<pos:position pos:line="147" pos:column="9"/></operator><name pos:line="147" pos:column="9">use_ipv6<pos:position pos:line="147" pos:column="17"/></name></expr>)<pos:position pos:line="147" pos:column="18"/></condition><then pos:line="147" pos:column="18"> <block pos:line="147" pos:column="19">{
<cpp:endif pos:line="148" pos:column="1">#<cpp:directive pos:line="148" pos:column="2">endif<pos:position pos:line="148" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name pos:line="149" pos:column="7">memset<pos:position pos:line="149" pos:column="13"/></name><argument_list pos:line="149" pos:column="13">(<argument><expr><operator pos:line="149" pos:column="14">&amp;<pos:position pos:line="149" pos:column="19"/></operator><name><name pos:line="149" pos:column="15">me<pos:position pos:line="149" pos:column="17"/></name><operator pos:line="149" pos:column="17">.<pos:position pos:line="149" pos:column="18"/></operator><name pos:line="149" pos:column="18">sa4<pos:position pos:line="149" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="149" pos:column="23">0<pos:position pos:line="149" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="149" pos:column="26">sizeof<argument_list pos:line="149" pos:column="32">(<argument><expr><name><name pos:line="149" pos:column="33">me<pos:position pos:line="149" pos:column="35"/></name><operator pos:line="149" pos:column="35">.<pos:position pos:line="149" pos:column="36"/></operator><name pos:line="149" pos:column="36">sa4<pos:position pos:line="149" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="149" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="149" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="150" pos:column="7">me<pos:position pos:line="150" pos:column="9"/></name><operator pos:line="150" pos:column="9">.<pos:position pos:line="150" pos:column="10"/></operator><name pos:line="150" pos:column="10">sa4<pos:position pos:line="150" pos:column="13"/></name><operator pos:line="150" pos:column="13">.<pos:position pos:line="150" pos:column="14"/></operator><name pos:line="150" pos:column="14">sin_family<pos:position pos:line="150" pos:column="24"/></name></name> <operator pos:line="150" pos:column="25">=<pos:position pos:line="150" pos:column="26"/></operator> <name pos:line="150" pos:column="27">AF_INET<pos:position pos:line="150" pos:column="34"/></name></expr>;<pos:position pos:line="150" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="151" pos:column="7">me<pos:position pos:line="151" pos:column="9"/></name><operator pos:line="151" pos:column="9">.<pos:position pos:line="151" pos:column="10"/></operator><name pos:line="151" pos:column="10">sa4<pos:position pos:line="151" pos:column="13"/></name><operator pos:line="151" pos:column="13">.<pos:position pos:line="151" pos:column="14"/></operator><name pos:line="151" pos:column="14">sin_port<pos:position pos:line="151" pos:column="22"/></name></name> <operator pos:line="151" pos:column="23">=<pos:position pos:line="151" pos:column="24"/></operator> <call><name pos:line="151" pos:column="25">htons<pos:position pos:line="151" pos:column="30"/></name><argument_list pos:line="151" pos:column="30">(<argument><expr><name pos:line="151" pos:column="31">connectport<pos:position pos:line="151" pos:column="42"/></name></expr></argument>)<pos:position pos:line="151" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="152" pos:column="7">me<pos:position pos:line="152" pos:column="9"/></name><operator pos:line="152" pos:column="9">.<pos:position pos:line="152" pos:column="10"/></operator><name pos:line="152" pos:column="10">sa4<pos:position pos:line="152" pos:column="13"/></name><operator pos:line="152" pos:column="13">.<pos:position pos:line="152" pos:column="14"/></operator><name pos:line="152" pos:column="14">sin_addr<pos:position pos:line="152" pos:column="22"/></name><operator pos:line="152" pos:column="22">.<pos:position pos:line="152" pos:column="23"/></operator><name pos:line="152" pos:column="23">s_addr<pos:position pos:line="152" pos:column="29"/></name></name> <operator pos:line="152" pos:column="30">=<pos:position pos:line="152" pos:column="31"/></operator> <name pos:line="152" pos:column="32">INADDR_ANY<pos:position pos:line="152" pos:column="42"/></name></expr>;<pos:position pos:line="152" pos:column="43"/></expr_stmt>
      <if pos:line="153" pos:column="7">if<condition pos:line="153" pos:column="9">(<expr><operator pos:line="153" pos:column="10">!<pos:position pos:line="153" pos:column="11"/></operator><name pos:line="153" pos:column="11">addr<pos:position pos:line="153" pos:column="15"/></name></expr>)<pos:position pos:line="153" pos:column="16"/></condition><then pos:line="153" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><name pos:line="154" pos:column="9">addr<pos:position pos:line="154" pos:column="13"/></name> <operator pos:line="154" pos:column="14">=<pos:position pos:line="154" pos:column="15"/></operator> <literal type="string" pos:line="154" pos:column="16">"127.0.0.1"<pos:position pos:line="154" pos:column="27"/></literal></expr>;<pos:position pos:line="154" pos:column="28"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="155" pos:column="7">Curl_inet_pton<pos:position pos:line="155" pos:column="21"/></name><argument_list pos:line="155" pos:column="21">(<argument><expr><name pos:line="155" pos:column="22">AF_INET<pos:position pos:line="155" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="31">addr<pos:position pos:line="155" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="37">&amp;<pos:position pos:line="155" pos:column="42"/></operator><name><name pos:line="155" pos:column="38">me<pos:position pos:line="155" pos:column="40"/></name><operator pos:line="155" pos:column="40">.<pos:position pos:line="155" pos:column="41"/></operator><name pos:line="155" pos:column="41">sa4<pos:position pos:line="155" pos:column="44"/></name><operator pos:line="155" pos:column="44">.<pos:position pos:line="155" pos:column="45"/></operator><name pos:line="155" pos:column="45">sin_addr<pos:position pos:line="155" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="155" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="55"/></expr_stmt>

      <expr_stmt><expr><name pos:line="157" pos:column="7">rc<pos:position pos:line="157" pos:column="9"/></name> <operator pos:line="157" pos:column="10">=<pos:position pos:line="157" pos:column="11"/></operator> <call><name pos:line="157" pos:column="12">connect<pos:position pos:line="157" pos:column="19"/></name><argument_list pos:line="157" pos:column="19">(<argument><expr><name pos:line="157" pos:column="20">sock<pos:position pos:line="157" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="157" pos:column="26">&amp;<pos:position pos:line="157" pos:column="31"/></operator><name><name pos:line="157" pos:column="27">me<pos:position pos:line="157" pos:column="29"/></name><operator pos:line="157" pos:column="29">.<pos:position pos:line="157" pos:column="30"/></operator><name pos:line="157" pos:column="30">sa<pos:position pos:line="157" pos:column="32"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="157" pos:column="34">sizeof<argument_list pos:line="157" pos:column="40">(<argument><expr><name><name pos:line="157" pos:column="41">me<pos:position pos:line="157" pos:column="43"/></name><operator pos:line="157" pos:column="43">.<pos:position pos:line="157" pos:column="44"/></operator><name pos:line="157" pos:column="44">sa4<pos:position pos:line="157" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="157" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="157" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="50"/></expr_stmt>
<cpp:ifdef pos:line="158" pos:column="1">#<cpp:directive pos:line="158" pos:column="2">ifdef<pos:position pos:line="158" pos:column="7"/></cpp:directive> <name pos:line="158" pos:column="8">ENABLE_IPV6<pos:position pos:line="158" pos:column="19"/></name></cpp:ifdef>
    }<pos:position pos:line="159" pos:column="6"/></block></then>
    <else pos:line="160" pos:column="5">else <block pos:line="160" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="161" pos:column="7">memset<pos:position pos:line="161" pos:column="13"/></name><argument_list pos:line="161" pos:column="13">(<argument><expr><operator pos:line="161" pos:column="14">&amp;<pos:position pos:line="161" pos:column="19"/></operator><name><name pos:line="161" pos:column="15">me<pos:position pos:line="161" pos:column="17"/></name><operator pos:line="161" pos:column="17">.<pos:position pos:line="161" pos:column="18"/></operator><name pos:line="161" pos:column="18">sa6<pos:position pos:line="161" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="161" pos:column="23">0<pos:position pos:line="161" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="161" pos:column="26">sizeof<argument_list pos:line="161" pos:column="32">(<argument><expr><name><name pos:line="161" pos:column="33">me<pos:position pos:line="161" pos:column="35"/></name><operator pos:line="161" pos:column="35">.<pos:position pos:line="161" pos:column="36"/></operator><name pos:line="161" pos:column="36">sa6<pos:position pos:line="161" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="161" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="161" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="162" pos:column="7">me<pos:position pos:line="162" pos:column="9"/></name><operator pos:line="162" pos:column="9">.<pos:position pos:line="162" pos:column="10"/></operator><name pos:line="162" pos:column="10">sa6<pos:position pos:line="162" pos:column="13"/></name><operator pos:line="162" pos:column="13">.<pos:position pos:line="162" pos:column="14"/></operator><name pos:line="162" pos:column="14">sin6_family<pos:position pos:line="162" pos:column="25"/></name></name> <operator pos:line="162" pos:column="26">=<pos:position pos:line="162" pos:column="27"/></operator> <name pos:line="162" pos:column="28">AF_INET6<pos:position pos:line="162" pos:column="36"/></name></expr>;<pos:position pos:line="162" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="163" pos:column="7">me<pos:position pos:line="163" pos:column="9"/></name><operator pos:line="163" pos:column="9">.<pos:position pos:line="163" pos:column="10"/></operator><name pos:line="163" pos:column="10">sa6<pos:position pos:line="163" pos:column="13"/></name><operator pos:line="163" pos:column="13">.<pos:position pos:line="163" pos:column="14"/></operator><name pos:line="163" pos:column="14">sin6_port<pos:position pos:line="163" pos:column="23"/></name></name> <operator pos:line="163" pos:column="24">=<pos:position pos:line="163" pos:column="25"/></operator> <call><name pos:line="163" pos:column="26">htons<pos:position pos:line="163" pos:column="31"/></name><argument_list pos:line="163" pos:column="31">(<argument><expr><name pos:line="163" pos:column="32">connectport<pos:position pos:line="163" pos:column="43"/></name></expr></argument>)<pos:position pos:line="163" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="45"/></expr_stmt>
      <if pos:line="164" pos:column="7">if<condition pos:line="164" pos:column="9">(<expr><operator pos:line="164" pos:column="10">!<pos:position pos:line="164" pos:column="11"/></operator><name pos:line="164" pos:column="11">addr<pos:position pos:line="164" pos:column="15"/></name></expr>)<pos:position pos:line="164" pos:column="16"/></condition><then pos:line="164" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><name pos:line="165" pos:column="9">addr<pos:position pos:line="165" pos:column="13"/></name> <operator pos:line="165" pos:column="14">=<pos:position pos:line="165" pos:column="15"/></operator> <literal type="string" pos:line="165" pos:column="16">"::1"<pos:position pos:line="165" pos:column="21"/></literal></expr>;<pos:position pos:line="165" pos:column="22"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="166" pos:column="7">Curl_inet_pton<pos:position pos:line="166" pos:column="21"/></name><argument_list pos:line="166" pos:column="21">(<argument><expr><name pos:line="166" pos:column="22">AF_INET6<pos:position pos:line="166" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="32">addr<pos:position pos:line="166" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="166" pos:column="38">&amp;<pos:position pos:line="166" pos:column="43"/></operator><name><name pos:line="166" pos:column="39">me<pos:position pos:line="166" pos:column="41"/></name><operator pos:line="166" pos:column="41">.<pos:position pos:line="166" pos:column="42"/></operator><name pos:line="166" pos:column="42">sa6<pos:position pos:line="166" pos:column="45"/></name><operator pos:line="166" pos:column="45">.<pos:position pos:line="166" pos:column="46"/></operator><name pos:line="166" pos:column="46">sin6_addr<pos:position pos:line="166" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="166" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="57"/></expr_stmt>

      <expr_stmt><expr><name pos:line="168" pos:column="7">rc<pos:position pos:line="168" pos:column="9"/></name> <operator pos:line="168" pos:column="10">=<pos:position pos:line="168" pos:column="11"/></operator> <call><name pos:line="168" pos:column="12">connect<pos:position pos:line="168" pos:column="19"/></name><argument_list pos:line="168" pos:column="19">(<argument><expr><name pos:line="168" pos:column="20">sock<pos:position pos:line="168" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="168" pos:column="26">&amp;<pos:position pos:line="168" pos:column="31"/></operator><name><name pos:line="168" pos:column="27">me<pos:position pos:line="168" pos:column="29"/></name><operator pos:line="168" pos:column="29">.<pos:position pos:line="168" pos:column="30"/></operator><name pos:line="168" pos:column="30">sa<pos:position pos:line="168" pos:column="32"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="168" pos:column="34">sizeof<argument_list pos:line="168" pos:column="40">(<argument><expr><name><name pos:line="168" pos:column="41">me<pos:position pos:line="168" pos:column="43"/></name><operator pos:line="168" pos:column="43">.<pos:position pos:line="168" pos:column="44"/></operator><name pos:line="168" pos:column="44">sa6<pos:position pos:line="168" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="168" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="168" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="169" pos:column="6"/></block></else></if>
<cpp:endif pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">endif<pos:position pos:line="170" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="170" pos:column="8">/* ENABLE_IPV6 */</comment>
    <if pos:line="171" pos:column="5">if<condition pos:line="171" pos:column="7">(<expr><name pos:line="171" pos:column="8">rc<pos:position pos:line="171" pos:column="10"/></name></expr>)<pos:position pos:line="171" pos:column="11"/></condition><then pos:line="171" pos:column="11"> <block pos:line="171" pos:column="12">{
      <expr_stmt><expr><name pos:line="172" pos:column="7">error<pos:position pos:line="172" pos:column="12"/></name> <operator pos:line="172" pos:column="13">=<pos:position pos:line="172" pos:column="14"/></operator> <name pos:line="172" pos:column="15">SOCKERRNO<pos:position pos:line="172" pos:column="24"/></name></expr>;<pos:position pos:line="172" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="173" pos:column="7">logmsg<pos:position pos:line="173" pos:column="13"/></name><argument_list pos:line="173" pos:column="13">(<argument><expr><literal type="string" pos:line="173" pos:column="14">"Error connecting to port %hu: (%d) %s"<pos:position pos:line="173" pos:column="53"/></literal></expr></argument>,
             <argument><expr><name pos:line="174" pos:column="14">connectport<pos:position pos:line="174" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="174" pos:column="27">error<pos:position pos:line="174" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="174" pos:column="34">strerror<pos:position pos:line="174" pos:column="42"/></name><argument_list pos:line="174" pos:column="42">(<argument><expr><name pos:line="174" pos:column="43">error<pos:position pos:line="174" pos:column="48"/></name></expr></argument>)<pos:position pos:line="174" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="174" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="175" pos:column="7">write_stdout<pos:position pos:line="175" pos:column="19"/></name><argument_list pos:line="175" pos:column="19">(<argument><expr><literal type="string" pos:line="175" pos:column="20">"FAIL\n"<pos:position pos:line="175" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="175" pos:column="30">5<pos:position pos:line="175" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="33"/></expr_stmt>
      <goto pos:line="176" pos:column="7">goto <name pos:line="176" pos:column="12">sockfilt_cleanup<pos:position pos:line="176" pos:column="28"/></name>;<pos:position pos:line="176" pos:column="29"/></goto>
    }<pos:position pos:line="177" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="178" pos:column="5">logmsg<pos:position pos:line="178" pos:column="11"/></name><argument_list pos:line="178" pos:column="11">(<argument><expr><literal type="string" pos:line="178" pos:column="12">"====&gt; Client connect"<pos:position pos:line="178" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="178" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="179" pos:column="5">msgsock<pos:position pos:line="179" pos:column="12"/></name> <operator pos:line="179" pos:column="13">=<pos:position pos:line="179" pos:column="14"/></operator> <name pos:line="179" pos:column="15">sock<pos:position pos:line="179" pos:column="19"/></name></expr>;<pos:position pos:line="179" pos:column="20"/></expr_stmt> <comment type="block" pos:line="179" pos:column="21">/* use this as stream */</comment>
  }<pos:position pos:line="180" pos:column="4"/></block></then>
  <else pos:line="181" pos:column="3">else <block pos:line="181" pos:column="8">{
    <comment type="block" pos:line="182" pos:column="5">/* passive daemon style */</comment>
    <expr_stmt><expr><name pos:line="183" pos:column="5">sock<pos:position pos:line="183" pos:column="9"/></name> <operator pos:line="183" pos:column="10">=<pos:position pos:line="183" pos:column="11"/></operator> <call><name pos:line="183" pos:column="12">sockdaemon<pos:position pos:line="183" pos:column="22"/></name><argument_list pos:line="183" pos:column="22">(<argument><expr><name pos:line="183" pos:column="23">sock<pos:position pos:line="183" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="183" pos:column="29">&amp;<pos:position pos:line="183" pos:column="34"/></operator><name pos:line="183" pos:column="30">port<pos:position pos:line="183" pos:column="34"/></name></expr></argument>)<pos:position pos:line="183" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="36"/></expr_stmt>
    <if pos:line="184" pos:column="5">if<condition pos:line="184" pos:column="7">(<expr><name pos:line="184" pos:column="8">CURL_SOCKET_BAD<pos:position pos:line="184" pos:column="23"/></name> <operator pos:line="184" pos:column="24">==<pos:position pos:line="184" pos:column="26"/></operator> <name pos:line="184" pos:column="27">sock<pos:position pos:line="184" pos:column="31"/></name></expr>)<pos:position pos:line="184" pos:column="32"/></condition><then pos:line="184" pos:column="32"> <block pos:line="184" pos:column="33">{
      <expr_stmt><expr><call><name pos:line="185" pos:column="7">write_stdout<pos:position pos:line="185" pos:column="19"/></name><argument_list pos:line="185" pos:column="19">(<argument><expr><literal type="string" pos:line="185" pos:column="20">"FAIL\n"<pos:position pos:line="185" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="185" pos:column="30">5<pos:position pos:line="185" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="185" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="33"/></expr_stmt>
      <goto pos:line="186" pos:column="7">goto <name pos:line="186" pos:column="12">sockfilt_cleanup<pos:position pos:line="186" pos:column="28"/></name>;<pos:position pos:line="186" pos:column="29"/></goto>
    }<pos:position pos:line="187" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="188" pos:column="5">msgsock<pos:position pos:line="188" pos:column="12"/></name> <operator pos:line="188" pos:column="13">=<pos:position pos:line="188" pos:column="14"/></operator> <name pos:line="188" pos:column="15">CURL_SOCKET_BAD<pos:position pos:line="188" pos:column="30"/></name></expr>;<pos:position pos:line="188" pos:column="31"/></expr_stmt> <comment type="block" pos:line="188" pos:column="32">/* no stream socket yet */</comment>
  }<pos:position pos:line="189" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="191" pos:column="3">logmsg<pos:position pos:line="191" pos:column="9"/></name><argument_list pos:line="191" pos:column="9">(<argument><expr><literal type="string" pos:line="191" pos:column="10">"Running %s version"<pos:position pos:line="191" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="191" pos:column="32">ipv_inuse<pos:position pos:line="191" pos:column="41"/></name></expr></argument>)<pos:position pos:line="191" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="43"/></expr_stmt>

  <if pos:line="193" pos:column="3">if<condition pos:line="193" pos:column="5">(<expr><name pos:line="193" pos:column="6">connectport<pos:position pos:line="193" pos:column="17"/></name></expr>)<pos:position pos:line="193" pos:column="18"/></condition><then pos:line="193" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="194" pos:column="5">logmsg<pos:position pos:line="194" pos:column="11"/></name><argument_list pos:line="194" pos:column="11">(<argument><expr><literal type="string" pos:line="194" pos:column="12">"Connected to port %hu"<pos:position pos:line="194" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="194" pos:column="37">connectport<pos:position pos:line="194" pos:column="48"/></name></expr></argument>)<pos:position pos:line="194" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="50"/></expr_stmt></block></then>
  <elseif pos:line="195" pos:column="3">else <if pos:line="195" pos:column="8">if<condition pos:line="195" pos:column="10">(<expr><name pos:line="195" pos:column="11">bind_only<pos:position pos:line="195" pos:column="20"/></name></expr>)<pos:position pos:line="195" pos:column="21"/></condition><then pos:line="195" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="196" pos:column="5">logmsg<pos:position pos:line="196" pos:column="11"/></name><argument_list pos:line="196" pos:column="11">(<argument><expr><literal type="string" pos:line="196" pos:column="12">"Bound without listening on port %hu"<pos:position pos:line="196" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="196" pos:column="51">port<pos:position pos:line="196" pos:column="55"/></name></expr></argument>)<pos:position pos:line="196" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="57"/></expr_stmt></block></then></if></elseif>
  <else pos:line="197" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="198" pos:column="5">logmsg<pos:position pos:line="198" pos:column="11"/></name><argument_list pos:line="198" pos:column="11">(<argument><expr><literal type="string" pos:line="198" pos:column="12">"Listening on port %hu"<pos:position pos:line="198" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="37">port<pos:position pos:line="198" pos:column="41"/></name></expr></argument>)<pos:position pos:line="198" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="43"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="200" pos:column="3">wrotepidfile<pos:position pos:line="200" pos:column="15"/></name> <operator pos:line="200" pos:column="16">=<pos:position pos:line="200" pos:column="17"/></operator> <call><name pos:line="200" pos:column="18">write_pidfile<pos:position pos:line="200" pos:column="31"/></name><argument_list pos:line="200" pos:column="31">(<argument><expr><name pos:line="200" pos:column="32">pidname<pos:position pos:line="200" pos:column="39"/></name></expr></argument>)<pos:position pos:line="200" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="41"/></expr_stmt>
  <if pos:line="201" pos:column="3">if<condition pos:line="201" pos:column="5">(<expr><operator pos:line="201" pos:column="6">!<pos:position pos:line="201" pos:column="7"/></operator><name pos:line="201" pos:column="7">wrotepidfile<pos:position pos:line="201" pos:column="19"/></name></expr>)<pos:position pos:line="201" pos:column="20"/></condition><then pos:line="201" pos:column="20"> <block pos:line="201" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="202" pos:column="5">write_stdout<pos:position pos:line="202" pos:column="17"/></name><argument_list pos:line="202" pos:column="17">(<argument><expr><literal type="string" pos:line="202" pos:column="18">"FAIL\n"<pos:position pos:line="202" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="202" pos:column="28">5<pos:position pos:line="202" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="31"/></expr_stmt>
    <goto pos:line="203" pos:column="5">goto <name pos:line="203" pos:column="10">sockfilt_cleanup<pos:position pos:line="203" pos:column="26"/></name>;<pos:position pos:line="203" pos:column="27"/></goto>
  }<pos:position pos:line="204" pos:column="4"/></block></then></if>

  <do pos:line="206" pos:column="3">do <block pos:line="206" pos:column="6">{
    <expr_stmt><expr><name pos:line="207" pos:column="5">juggle_again<pos:position pos:line="207" pos:column="17"/></name> <operator pos:line="207" pos:column="18">=<pos:position pos:line="207" pos:column="19"/></operator> <call><name pos:line="207" pos:column="20">juggle<pos:position pos:line="207" pos:column="26"/></name><argument_list pos:line="207" pos:column="26">(<argument><expr><operator pos:line="207" pos:column="27">&amp;<pos:position pos:line="207" pos:column="32"/></operator><name pos:line="207" pos:column="28">msgsock<pos:position pos:line="207" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="207" pos:column="37">sock<pos:position pos:line="207" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="207" pos:column="43">&amp;<pos:position pos:line="207" pos:column="48"/></operator><name pos:line="207" pos:column="44">mode<pos:position pos:line="207" pos:column="48"/></name></expr></argument>)<pos:position pos:line="207" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="208" pos:column="4"/></block> while<condition pos:line="208" pos:column="10">(<expr><name pos:line="208" pos:column="11">juggle_again<pos:position pos:line="208" pos:column="23"/></name></expr>)<pos:position pos:line="208" pos:column="24"/></condition>;<pos:position pos:line="208" pos:column="25"/></do>

<label><name pos:line="210" pos:column="1">sockfilt_cleanup<pos:position pos:line="210" pos:column="17"/></name>:<pos:position pos:line="210" pos:column="18"/></label>

  <if pos:line="212" pos:column="3">if<condition pos:line="212" pos:column="5">(<expr><operator pos:line="212" pos:column="6">(<pos:position pos:line="212" pos:column="7"/></operator><name pos:line="212" pos:column="7">msgsock<pos:position pos:line="212" pos:column="14"/></name> <operator pos:line="212" pos:column="15">!=<pos:position pos:line="212" pos:column="17"/></operator> <name pos:line="212" pos:column="18">sock<pos:position pos:line="212" pos:column="22"/></name><operator pos:line="212" pos:column="22">)<pos:position pos:line="212" pos:column="23"/></operator> <operator pos:line="212" pos:column="24">&amp;&amp;<pos:position pos:line="212" pos:column="34"/></operator> <operator pos:line="212" pos:column="27">(<pos:position pos:line="212" pos:column="28"/></operator><name pos:line="212" pos:column="28">msgsock<pos:position pos:line="212" pos:column="35"/></name> <operator pos:line="212" pos:column="36">!=<pos:position pos:line="212" pos:column="38"/></operator> <name pos:line="212" pos:column="39">CURL_SOCKET_BAD<pos:position pos:line="212" pos:column="54"/></name><operator pos:line="212" pos:column="54">)<pos:position pos:line="212" pos:column="55"/></operator></expr>)<pos:position pos:line="212" pos:column="56"/></condition><then pos:line="212" pos:column="56">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="213" pos:column="5">sclose<pos:position pos:line="213" pos:column="11"/></name><argument_list pos:line="213" pos:column="11">(<argument><expr><name pos:line="213" pos:column="12">msgsock<pos:position pos:line="213" pos:column="19"/></name></expr></argument>)<pos:position pos:line="213" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="21"/></expr_stmt></block></then></if>

  <if pos:line="215" pos:column="3">if<condition pos:line="215" pos:column="5">(<expr><name pos:line="215" pos:column="6">sock<pos:position pos:line="215" pos:column="10"/></name> <operator pos:line="215" pos:column="11">!=<pos:position pos:line="215" pos:column="13"/></operator> <name pos:line="215" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="215" pos:column="29"/></name></expr>)<pos:position pos:line="215" pos:column="30"/></condition><then pos:line="215" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="216" pos:column="5">sclose<pos:position pos:line="216" pos:column="11"/></name><argument_list pos:line="216" pos:column="11">(<argument><expr><name pos:line="216" pos:column="12">sock<pos:position pos:line="216" pos:column="16"/></name></expr></argument>)<pos:position pos:line="216" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="18"/></expr_stmt></block></then></if>

  <if pos:line="218" pos:column="3">if<condition pos:line="218" pos:column="5">(<expr><name pos:line="218" pos:column="6">wrotepidfile<pos:position pos:line="218" pos:column="18"/></name></expr>)<pos:position pos:line="218" pos:column="19"/></condition><then pos:line="218" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="219" pos:column="5">unlink<pos:position pos:line="219" pos:column="11"/></name><argument_list pos:line="219" pos:column="11">(<argument><expr><name pos:line="219" pos:column="12">pidname<pos:position pos:line="219" pos:column="19"/></name></expr></argument>)<pos:position pos:line="219" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="21"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="221" pos:column="3">restore_signal_handlers<pos:position pos:line="221" pos:column="26"/></name><argument_list pos:line="221" pos:column="26">()<pos:position pos:line="221" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="29"/></expr_stmt>

  <if pos:line="223" pos:column="3">if<condition pos:line="223" pos:column="5">(<expr><name pos:line="223" pos:column="6">got_exit_signal<pos:position pos:line="223" pos:column="21"/></name></expr>)<pos:position pos:line="223" pos:column="22"/></condition><then pos:line="223" pos:column="22"> <block pos:line="223" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="224" pos:column="5">logmsg<pos:position pos:line="224" pos:column="11"/></name><argument_list pos:line="224" pos:column="11">(<argument><expr><literal type="string" pos:line="224" pos:column="12">"============&gt; sockfilt exits with signal (%d)"<pos:position pos:line="224" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="224" pos:column="61">exit_signal<pos:position pos:line="224" pos:column="72"/></name></expr></argument>)<pos:position pos:line="224" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="74"/></expr_stmt>
    <comment type="block" pos:line="225" pos:column="5">/*
     * To properly set the return status of the process we
     * must raise the same signal SIGINT or SIGTERM that we
     * caught and let the old handler take care of it.
     */</comment>
    <expr_stmt><expr><call><name pos:line="230" pos:column="5">raise<pos:position pos:line="230" pos:column="10"/></name><argument_list pos:line="230" pos:column="10">(<argument><expr><name pos:line="230" pos:column="11">exit_signal<pos:position pos:line="230" pos:column="22"/></name></expr></argument>)<pos:position pos:line="230" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="231" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="233" pos:column="3">logmsg<pos:position pos:line="233" pos:column="9"/></name><argument_list pos:line="233" pos:column="9">(<argument><expr><literal type="string" pos:line="233" pos:column="10">"============&gt; sockfilt quits"<pos:position pos:line="233" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="233" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="42"/></expr_stmt>
  <return pos:line="234" pos:column="3">return <expr><literal type="number" pos:line="234" pos:column="10">0<pos:position pos:line="234" pos:column="11"/></literal></expr>;<pos:position pos:line="234" pos:column="12"/></return>
}<pos:position pos:line="235" pos:column="2"/></block></function></unit>
