<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_837_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_hash<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">filename<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>,
                      <parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">metalink_digest_def<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">digest_def<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>,
                      <parameter><decl><type><specifier pos:line="3" pos:column="23">const<pos:position pos:line="3" pos:column="28"/></specifier> <name pos:line="3" pos:column="29">unsigned<pos:position pos:line="3" pos:column="37"/></name> <name pos:line="3" pos:column="38">char<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">digest<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="52">FILE<pos:position pos:line="3" pos:column="56"/></name> <modifier pos:line="3" pos:column="57">*<pos:position pos:line="3" pos:column="58"/></modifier></type><name pos:line="3" pos:column="58">error<pos:position pos:line="3" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="64"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">result<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">digest_context<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">dctx<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">check_ok<pos:position pos:line="7" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="17">flags<pos:position pos:line="7" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="24">fd<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">flags<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <name pos:line="9" pos:column="11">O_RDONLY<pos:position pos:line="9" pos:column="19"/></name></expr>;<pos:position pos:line="9" pos:column="20"/></expr_stmt>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">O_BINARY<pos:position pos:line="10" pos:column="16"/></name></cpp:ifdef>
  <comment type="block" pos:line="11" pos:column="3">/* O_BINARY is required in order to avoid binary EOF in text mode */</comment>
  <expr_stmt><expr><name pos:line="12" pos:column="3">flags<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">|=<pos:position pos:line="12" pos:column="11"/></operator> <name pos:line="12" pos:column="12">O_BINARY<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="15" pos:column="3">fd<pos:position pos:line="15" pos:column="5"/></name> <operator pos:line="15" pos:column="6">=<pos:position pos:line="15" pos:column="7"/></operator> <call><name pos:line="15" pos:column="8">open<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">filename<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="23">flags<pos:position pos:line="15" pos:column="28"/></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">fd<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">==<pos:position pos:line="16" pos:column="11"/></operator> <operator pos:line="16" pos:column="12">-<pos:position pos:line="16" pos:column="13"/></operator><literal type="number" pos:line="16" pos:column="13">1<pos:position pos:line="16" pos:column="14"/></literal></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15"> <block pos:line="16" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">fprintf<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">error<pos:position pos:line="17" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="20">"Metalink: validating (%s) [%s] FAILED (%s)\n"<pos:position pos:line="17" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="68">filename<pos:position pos:line="17" pos:column="76"/></name></expr></argument>,
            <argument><expr><name><name pos:line="18" pos:column="13">digest_def<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">hash_name<pos:position pos:line="18" pos:column="34"/></name></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="36">strerror<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><name pos:line="18" pos:column="45">errno<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">-<pos:position pos:line="19" pos:column="13"/></operator><literal type="number" pos:line="19" pos:column="13">1<pos:position pos:line="19" pos:column="14"/></literal></expr>;<pos:position pos:line="19" pos:column="15"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">dctx<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator> <call><name pos:line="22" pos:column="10">Curl_digest_init<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name><name pos:line="22" pos:column="27">digest_def<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">-&gt;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="39">dparams<pos:position pos:line="22" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">!<pos:position pos:line="23" pos:column="7"/></operator><name pos:line="23" pos:column="7">dctx<pos:position pos:line="23" pos:column="11"/></name></expr>)<pos:position pos:line="23" pos:column="12"/></condition><then pos:line="23" pos:column="12"> <block pos:line="23" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">fprintf<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">error<pos:position pos:line="24" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="20">"Metalink: validating (%s) [%s] FAILED (%s)\n"<pos:position pos:line="24" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="68">filename<pos:position pos:line="24" pos:column="76"/></name></expr></argument>,
            <argument><expr><name><name pos:line="25" pos:column="13">digest_def<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">-&gt;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="25">hash_name<pos:position pos:line="25" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="36">"failed to initialize hash algorithm"<pos:position pos:line="25" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">close<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><name pos:line="26" pos:column="11">fd<pos:position pos:line="26" pos:column="13"/></name></expr></argument>)<pos:position pos:line="26" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="15"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><operator pos:line="27" pos:column="12">-<pos:position pos:line="27" pos:column="13"/></operator><literal type="number" pos:line="27" pos:column="13">2<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="30" pos:column="3">result<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <call><name pos:line="30" pos:column="12">malloc<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name><name pos:line="30" pos:column="19">digest_def<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">-&gt;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="31">dparams<pos:position pos:line="30" pos:column="38"/></name><operator pos:line="30" pos:column="38">-&gt;<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="40">digest_resultlen<pos:position pos:line="30" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="58"/></expr_stmt>
  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><operator pos:line="31" pos:column="6">!<pos:position pos:line="31" pos:column="7"/></operator><name pos:line="31" pos:column="7">result<pos:position pos:line="31" pos:column="13"/></name></expr>)<pos:position pos:line="31" pos:column="14"/></condition><then pos:line="31" pos:column="14"> <block pos:line="31" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">close<pos:position pos:line="32" pos:column="10"/></name><argument_list pos:line="32" pos:column="10">(<argument><expr><name pos:line="32" pos:column="11">fd<pos:position pos:line="32" pos:column="13"/></name></expr></argument>)<pos:position pos:line="32" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="15"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><operator pos:line="33" pos:column="12">-<pos:position pos:line="33" pos:column="13"/></operator><literal type="number" pos:line="33" pos:column="13">1<pos:position pos:line="33" pos:column="14"/></literal></expr>;<pos:position pos:line="33" pos:column="15"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <while pos:line="35" pos:column="3">while<condition pos:line="35" pos:column="8">(<expr><literal type="number" pos:line="35" pos:column="9">1<pos:position pos:line="35" pos:column="10"/></literal></expr>)<pos:position pos:line="35" pos:column="11"/></condition> <block pos:line="35" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">unsigned<pos:position pos:line="36" pos:column="13"/></name> <name pos:line="36" pos:column="14">char<pos:position pos:line="36" pos:column="18"/></name></type> <name><name pos:line="36" pos:column="19">buf<pos:position pos:line="36" pos:column="22"/></name><index pos:line="36" pos:column="22">[<expr><literal type="number" pos:line="36" pos:column="23">4096<pos:position pos:line="36" pos:column="27"/></literal></expr>]<pos:position pos:line="36" pos:column="28"/></index></name></decl>;<pos:position pos:line="36" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">ssize_t<pos:position pos:line="37" pos:column="12"/></name></type> <name pos:line="37" pos:column="13">len<pos:position pos:line="37" pos:column="16"/></name> <init pos:line="37" pos:column="17">= <expr><call><name pos:line="37" pos:column="19">read<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><name pos:line="37" pos:column="24">fd<pos:position pos:line="37" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="28">buf<pos:position pos:line="37" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="33">sizeof<argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">buf<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="46"/></decl_stmt>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">len<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">==<pos:position pos:line="38" pos:column="14"/></operator> <literal type="number" pos:line="38" pos:column="15">0<pos:position pos:line="38" pos:column="16"/></literal></expr>)<pos:position pos:line="38" pos:column="17"/></condition><then pos:line="38" pos:column="17"> <block pos:line="38" pos:column="18">{
      <break pos:line="39" pos:column="7">break;<pos:position pos:line="39" pos:column="13"/></break>
    }<pos:position pos:line="40" pos:column="6"/></block></then>
    <elseif pos:line="41" pos:column="5">else <if pos:line="41" pos:column="10">if<condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">len<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">==<pos:position pos:line="41" pos:column="19"/></operator> <operator pos:line="41" pos:column="20">-<pos:position pos:line="41" pos:column="21"/></operator><literal type="number" pos:line="41" pos:column="21">1<pos:position pos:line="41" pos:column="22"/></literal></expr>)<pos:position pos:line="41" pos:column="23"/></condition><then pos:line="41" pos:column="23"> <block pos:line="41" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">fprintf<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">error<pos:position pos:line="42" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="22">"Metalink: validating (%s) [%s] FAILED (%s)\n"<pos:position pos:line="42" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="70">filename<pos:position pos:line="42" pos:column="78"/></name></expr></argument>,
              <argument><expr><name><name pos:line="43" pos:column="15">digest_def<pos:position pos:line="43" pos:column="25"/></name><operator pos:line="43" pos:column="25">-&gt;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="27">hash_name<pos:position pos:line="43" pos:column="36"/></name></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="38">strerror<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">(<argument><expr><name pos:line="43" pos:column="47">errno<pos:position pos:line="43" pos:column="52"/></name></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">Curl_digest_final<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">dctx<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="31">result<pos:position pos:line="44" pos:column="37"/></name></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">close<pos:position pos:line="45" pos:column="12"/></name><argument_list pos:line="45" pos:column="12">(<argument><expr><name pos:line="45" pos:column="13">fd<pos:position pos:line="45" pos:column="15"/></name></expr></argument>)<pos:position pos:line="45" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
      <return pos:line="46" pos:column="7">return <expr><operator pos:line="46" pos:column="14">-<pos:position pos:line="46" pos:column="15"/></operator><literal type="number" pos:line="46" pos:column="15">1<pos:position pos:line="46" pos:column="16"/></literal></expr>;<pos:position pos:line="46" pos:column="17"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if></elseif></if>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">Curl_digest_update<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">dctx<pos:position pos:line="48" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="30">buf<pos:position pos:line="48" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="35">(<pos:position pos:line="48" pos:column="36"/></operator><name pos:line="48" pos:column="36">unsigned<pos:position pos:line="48" pos:column="44"/></name> <name pos:line="48" pos:column="45">int<pos:position pos:line="48" pos:column="48"/></name><operator pos:line="48" pos:column="48">)<pos:position pos:line="48" pos:column="49"/></operator><name pos:line="48" pos:column="49">len<pos:position pos:line="48" pos:column="52"/></name></expr></argument>)<pos:position pos:line="48" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="54"/></expr_stmt>
  }<pos:position pos:line="49" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="50" pos:column="3">Curl_digest_final<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name pos:line="50" pos:column="21">dctx<pos:position pos:line="50" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="27">result<pos:position pos:line="50" pos:column="33"/></name></expr></argument>)<pos:position pos:line="50" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="51" pos:column="3">check_ok<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">=<pos:position pos:line="51" pos:column="13"/></operator> <call><name pos:line="51" pos:column="14">memcmp<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><name pos:line="51" pos:column="21">result<pos:position pos:line="51" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="29">digest<pos:position pos:line="51" pos:column="35"/></name></expr></argument>,
                    <argument><expr><name><name pos:line="52" pos:column="21">digest_def<pos:position pos:line="52" pos:column="31"/></name><operator pos:line="52" pos:column="31">-&gt;<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="33">dparams<pos:position pos:line="52" pos:column="40"/></name><operator pos:line="52" pos:column="40">-&gt;<pos:position pos:line="52" pos:column="45"/></operator><name pos:line="52" pos:column="42">digest_resultlen<pos:position pos:line="52" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="59"/></argument_list></call> <operator pos:line="52" pos:column="60">==<pos:position pos:line="52" pos:column="62"/></operator> <literal type="number" pos:line="52" pos:column="63">0<pos:position pos:line="52" pos:column="64"/></literal></expr>;<pos:position pos:line="52" pos:column="65"/></expr_stmt>
  <comment type="block" pos:line="53" pos:column="3">/* sha*sum style verdict output */</comment>
  <if pos:line="54" pos:column="3">if<condition pos:line="54" pos:column="5">(<expr><name pos:line="54" pos:column="6">check_ok<pos:position pos:line="54" pos:column="14"/></name></expr>)<pos:position pos:line="54" pos:column="15"/></condition><then pos:line="54" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="5">fprintf<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><name pos:line="55" pos:column="13">error<pos:position pos:line="55" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="20">"Metalink: validating (%s) [%s] OK\n"<pos:position pos:line="55" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="59">filename<pos:position pos:line="55" pos:column="67"/></name></expr></argument>,
            <argument><expr><name><name pos:line="56" pos:column="13">digest_def<pos:position pos:line="56" pos:column="23"/></name><operator pos:line="56" pos:column="23">-&gt;<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="25">hash_name<pos:position pos:line="56" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt></block></then>
  <else pos:line="57" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="5">fprintf<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">error<pos:position pos:line="58" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="20">"Metalink: validating (%s) [%s] FAILED (digest mismatch)\n"<pos:position pos:line="58" pos:column="79"/></literal></expr></argument>,
            <argument><expr><name pos:line="59" pos:column="13">filename<pos:position pos:line="59" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="23">digest_def<pos:position pos:line="59" pos:column="33"/></name><operator pos:line="59" pos:column="33">-&gt;<pos:position pos:line="59" pos:column="38"/></operator><name pos:line="59" pos:column="35">hash_name<pos:position pos:line="59" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="46"/></expr_stmt></block></else></if>

  <expr_stmt><expr><call><name pos:line="61" pos:column="3">free<pos:position pos:line="61" pos:column="7"/></name><argument_list pos:line="61" pos:column="7">(<argument><expr><name pos:line="61" pos:column="8">result<pos:position pos:line="61" pos:column="14"/></name></expr></argument>)<pos:position pos:line="61" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">close<pos:position pos:line="62" pos:column="8"/></name><argument_list pos:line="62" pos:column="8">(<argument><expr><name pos:line="62" pos:column="9">fd<pos:position pos:line="62" pos:column="11"/></name></expr></argument>)<pos:position pos:line="62" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="13"/></expr_stmt>
  <return pos:line="63" pos:column="3">return <expr><name pos:line="63" pos:column="10">check_ok<pos:position pos:line="63" pos:column="18"/></name></expr>;<pos:position pos:line="63" pos:column="19"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
