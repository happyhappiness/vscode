<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1497_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_setup_conn<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">bool<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">protocol_done<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">Curl_pgrsTime<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">data<pos:position pos:line="7" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">TIMER_NAMELOOKUP<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="41"/></expr_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name><name pos:line="9" pos:column="6">conn<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">handler<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">-&gt;<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="21">flags<pos:position pos:line="9" pos:column="26"/></name></name> <operator pos:line="9" pos:column="27">&amp;<pos:position pos:line="9" pos:column="32"/></operator> <name pos:line="9" pos:column="29">PROTOPT_NONETWORK<pos:position pos:line="9" pos:column="46"/></name></expr>)<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47"> <block pos:line="9" pos:column="48">{
    <comment type="block" pos:line="10" pos:column="5">/* nothing to setup when not using a network */</comment>
    <expr_stmt><expr><operator pos:line="11" pos:column="5">*<pos:position pos:line="11" pos:column="6"/></operator><name pos:line="11" pos:column="6">protocol_done<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">TRUE<pos:position pos:line="11" pos:column="26"/></name></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">result<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
  <expr_stmt><expr><operator pos:line="14" pos:column="3">*<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">protocol_done<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="20">FALSE<pos:position pos:line="14" pos:column="25"/></name></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt> <comment type="block" pos:line="14" pos:column="27">/* default to not done */</comment>

  <comment type="block" pos:line="16" pos:column="3">/* set proxy_connect_closed to false unconditionally already here since it
     is used strictly to provide extra information to a parent function in the
     case of proxy CONNECT failures and we must make sure we don't have it
     lingering set from a previous invoke */</comment>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">conn<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">-&gt;<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="9">bits<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">.<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">proxy_connect_closed<pos:position pos:line="20" pos:column="34"/></name></name> <operator pos:line="20" pos:column="35">=<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="37">FALSE<pos:position pos:line="20" pos:column="42"/></name></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>

  <comment type="block" pos:line="22" pos:column="3">/*
   * Set user-agent. Used for HTTP, but since we can attempt to tunnel
   * basically anything through a http proxy we can't limit this based on
   * protocol.
   */</comment>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name><name pos:line="27" pos:column="6">data<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">set<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">.<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">str<pos:position pos:line="27" pos:column="19"/></name><index pos:line="27" pos:column="19">[<expr><name pos:line="27" pos:column="20">STRING_USERAGENT<pos:position pos:line="27" pos:column="36"/></name></expr>]<pos:position pos:line="27" pos:column="37"/></index></name></expr>)<pos:position pos:line="27" pos:column="38"/></condition><then pos:line="27" pos:column="38"> <block pos:line="27" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">Curl_safefree<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">(<argument><expr><name><name pos:line="28" pos:column="19">conn<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">allocptr<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">.<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="34">uagent<pos:position pos:line="28" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">conn<pos:position pos:line="29" pos:column="9"/></name><operator pos:line="29" pos:column="9">-&gt;<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="11">allocptr<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">.<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">uagent<pos:position pos:line="29" pos:column="26"/></name></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator>
      <call><name pos:line="30" pos:column="7">aprintf<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><literal type="string" pos:line="30" pos:column="15">"User-Agent: %s\r\n"<pos:position pos:line="30" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="37">data<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">-&gt;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="43">set<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">.<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="47">str<pos:position pos:line="30" pos:column="50"/></name><index pos:line="30" pos:column="50">[<expr><name pos:line="30" pos:column="51">STRING_USERAGENT<pos:position pos:line="30" pos:column="67"/></name></expr>]<pos:position pos:line="30" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="70"/></expr_stmt>
    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><operator pos:line="31" pos:column="8">!<pos:position pos:line="31" pos:column="9"/></operator><name><name pos:line="31" pos:column="9">conn<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">-&gt;<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="15">allocptr<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">.<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">uagent<pos:position pos:line="31" pos:column="30"/></name></name></expr>)<pos:position pos:line="31" pos:column="31"/></condition><then pos:line="31" pos:column="31">
      <block type="pseudo"><return pos:line="32" pos:column="7">return <expr><name pos:line="32" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></return></block></then></if>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="35" pos:column="3">data<pos:position pos:line="35" pos:column="7"/></name><operator pos:line="35" pos:column="7">-&gt;<pos:position pos:line="35" pos:column="12"/></operator><name pos:line="35" pos:column="9">req<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">.<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="13">headerbytecount<pos:position pos:line="35" pos:column="28"/></name></name> <operator pos:line="35" pos:column="29">=<pos:position pos:line="35" pos:column="30"/></operator> <literal type="number" pos:line="35" pos:column="31">0<pos:position pos:line="35" pos:column="32"/></literal></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">CURL_DO_LINEEND_CONV<pos:position pos:line="37" pos:column="28"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="38" pos:column="3">data<pos:position pos:line="38" pos:column="7"/></name><operator pos:line="38" pos:column="7">-&gt;<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="9">state<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">.<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">crlf_conversions<pos:position pos:line="38" pos:column="31"/></name></name> <operator pos:line="38" pos:column="32">=<pos:position pos:line="38" pos:column="33"/></operator> <literal type="number" pos:line="38" pos:column="34">0<pos:position pos:line="38" pos:column="35"/></literal></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt> <comment type="block" pos:line="38" pos:column="37">/* reset CRLF conversion counter */</comment>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="39" pos:column="8">/* CURL_DO_LINEEND_CONV */</comment>

  <comment type="block" pos:line="41" pos:column="3">/* set start time here for timeout purposes in the connect procedure, it
     is later set again for the progress meter purpose */</comment>
  <expr_stmt><expr><name><name pos:line="43" pos:column="3">conn<pos:position pos:line="43" pos:column="7"/></name><operator pos:line="43" pos:column="7">-&gt;<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="9">now<pos:position pos:line="43" pos:column="12"/></name></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <call><name pos:line="43" pos:column="15">Curl_tvnow<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">()<pos:position pos:line="43" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="28"/></expr_stmt>

  <if pos:line="45" pos:column="3">if<condition pos:line="45" pos:column="5">(<expr><name pos:line="45" pos:column="6">CURL_SOCKET_BAD<pos:position pos:line="45" pos:column="21"/></name> <operator pos:line="45" pos:column="22">==<pos:position pos:line="45" pos:column="24"/></operator> <name><name pos:line="45" pos:column="25">conn<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">-&gt;<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="31">sock<pos:position pos:line="45" pos:column="35"/></name><index pos:line="45" pos:column="35">[<expr><name pos:line="45" pos:column="36">FIRSTSOCKET<pos:position pos:line="45" pos:column="47"/></name></expr>]<pos:position pos:line="45" pos:column="48"/></index></name></expr>)<pos:position pos:line="45" pos:column="49"/></condition><then pos:line="45" pos:column="49"> <block pos:line="45" pos:column="50">{
    <expr_stmt><expr><name><name pos:line="46" pos:column="5">conn<pos:position pos:line="46" pos:column="9"/></name><operator pos:line="46" pos:column="9">-&gt;<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="11">bits<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">.<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="16">tcpconnect<pos:position pos:line="46" pos:column="26"/></name><index pos:line="46" pos:column="26">[<expr><name pos:line="46" pos:column="27">FIRSTSOCKET<pos:position pos:line="46" pos:column="38"/></name></expr>]<pos:position pos:line="46" pos:column="39"/></index></name> <operator pos:line="46" pos:column="40">=<pos:position pos:line="46" pos:column="41"/></operator> <name pos:line="46" pos:column="42">FALSE<pos:position pos:line="46" pos:column="47"/></name></expr>;<pos:position pos:line="46" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="47" pos:column="5">result<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">Curl_connecthost<pos:position pos:line="47" pos:column="30"/></name><argument_list pos:line="47" pos:column="30">(<argument><expr><name pos:line="47" pos:column="31">conn<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="37">conn<pos:position pos:line="47" pos:column="41"/></name><operator pos:line="47" pos:column="41">-&gt;<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="43">dns_entry<pos:position pos:line="47" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="54"/></expr_stmt>
    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><name pos:line="48" pos:column="8">result<pos:position pos:line="48" pos:column="14"/></name></expr>)<pos:position pos:line="48" pos:column="15"/></condition><then pos:line="48" pos:column="15">
      <block type="pseudo"><return pos:line="49" pos:column="7">return <expr><name pos:line="49" pos:column="14">result<pos:position pos:line="49" pos:column="20"/></name></expr>;<pos:position pos:line="49" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="50" pos:column="4"/></block></then>
  <else pos:line="51" pos:column="3">else <block pos:line="51" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">Curl_pgrsTime<pos:position pos:line="52" pos:column="18"/></name><argument_list pos:line="52" pos:column="18">(<argument><expr><name pos:line="52" pos:column="19">data<pos:position pos:line="52" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="25">TIMER_CONNECT<pos:position pos:line="52" pos:column="38"/></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt>    <comment type="block" pos:line="52" pos:column="44">/* we're connected already */</comment>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">Curl_pgrsTime<pos:position pos:line="53" pos:column="18"/></name><argument_list pos:line="53" pos:column="18">(<argument><expr><name pos:line="53" pos:column="19">data<pos:position pos:line="53" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="25">TIMER_APPCONNECT<pos:position pos:line="53" pos:column="41"/></name></expr></argument>)<pos:position pos:line="53" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="43"/></expr_stmt> <comment type="block" pos:line="53" pos:column="44">/* we're connected already */</comment>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">conn<pos:position pos:line="54" pos:column="9"/></name><operator pos:line="54" pos:column="9">-&gt;<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="11">bits<pos:position pos:line="54" pos:column="15"/></name><operator pos:line="54" pos:column="15">.<pos:position pos:line="54" pos:column="16"/></operator><name pos:line="54" pos:column="16">tcpconnect<pos:position pos:line="54" pos:column="26"/></name><index pos:line="54" pos:column="26">[<expr><name pos:line="54" pos:column="27">FIRSTSOCKET<pos:position pos:line="54" pos:column="38"/></name></expr>]<pos:position pos:line="54" pos:column="39"/></index></name> <operator pos:line="54" pos:column="40">=<pos:position pos:line="54" pos:column="41"/></operator> <name pos:line="54" pos:column="42">TRUE<pos:position pos:line="54" pos:column="46"/></name></expr>;<pos:position pos:line="54" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="55" pos:column="5">*<pos:position pos:line="55" pos:column="6"/></operator><name pos:line="55" pos:column="6">protocol_done<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">=<pos:position pos:line="55" pos:column="21"/></operator> <name pos:line="55" pos:column="22">TRUE<pos:position pos:line="55" pos:column="26"/></name></expr>;<pos:position pos:line="55" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">Curl_updateconninfo<pos:position pos:line="56" pos:column="24"/></name><argument_list pos:line="56" pos:column="24">(<argument><expr><name pos:line="56" pos:column="25">conn<pos:position pos:line="56" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="31">conn<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">-&gt;<pos:position pos:line="56" pos:column="40"/></operator><name pos:line="56" pos:column="37">sock<pos:position pos:line="56" pos:column="41"/></name><index pos:line="56" pos:column="41">[<expr><name pos:line="56" pos:column="42">FIRSTSOCKET<pos:position pos:line="56" pos:column="53"/></name></expr>]<pos:position pos:line="56" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="56" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">Curl_verboseconnect<pos:position pos:line="57" pos:column="24"/></name><argument_list pos:line="57" pos:column="24">(<argument><expr><name pos:line="57" pos:column="25">conn<pos:position pos:line="57" pos:column="29"/></name></expr></argument>)<pos:position pos:line="57" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="58" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name><name pos:line="60" pos:column="3">conn<pos:position pos:line="60" pos:column="7"/></name><operator pos:line="60" pos:column="7">-&gt;<pos:position pos:line="60" pos:column="12"/></operator><name pos:line="60" pos:column="9">now<pos:position pos:line="60" pos:column="12"/></name></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <call><name pos:line="60" pos:column="15">Curl_tvnow<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">()<pos:position pos:line="60" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt> <comment type="block" pos:line="60" pos:column="29">/* time this *after* the connect is done, we
                               set this here perhaps a second time */</comment>

<cpp:ifdef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifdef<pos:position pos:line="63" pos:column="7"/></cpp:directive> <name pos:line="63" pos:column="8">__EMX__<pos:position pos:line="63" pos:column="15"/></name></cpp:ifdef>
  <comment type="block" pos:line="64" pos:column="3">/*
   * This check is quite a hack. We're calling _fsetmode to fix the problem
   * with fwrite converting newline characters (you get mangled text files,
   * and corrupted binary files when you download to stdout and redirect it to
   * a file).
   */</comment>

  <if pos:line="71" pos:column="3">if<condition pos:line="71" pos:column="5">(<expr><name><operator pos:line="71" pos:column="6">(<pos:position pos:line="71" pos:column="7"/></operator><name><name pos:line="71" pos:column="7">data<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">set<pos:position pos:line="71" pos:column="16"/></name><operator pos:line="71" pos:column="16">.<pos:position pos:line="71" pos:column="17"/></operator><name pos:line="71" pos:column="17">out<pos:position pos:line="71" pos:column="20"/></name></name><operator pos:line="71" pos:column="20">)<pos:position pos:line="71" pos:column="21"/></operator><operator pos:line="71" pos:column="21">-&gt;<pos:position pos:line="71" pos:column="26"/></operator><name pos:line="71" pos:column="23">_handle<pos:position pos:line="71" pos:column="30"/></name></name> <operator pos:line="71" pos:column="31">==<pos:position pos:line="71" pos:column="33"/></operator> <name pos:line="71" pos:column="34">NULL<pos:position pos:line="71" pos:column="38"/></name></expr>)<pos:position pos:line="71" pos:column="39"/></condition><then pos:line="71" pos:column="39"> <block pos:line="71" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">_fsetmode<pos:position pos:line="72" pos:column="14"/></name><argument_list pos:line="72" pos:column="14">(<argument><expr><name pos:line="72" pos:column="15">stdout<pos:position pos:line="72" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="23">"b"<pos:position pos:line="72" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="73" pos:column="4"/></block></then></if>
<cpp:endif pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">endif<pos:position pos:line="74" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="76" pos:column="3">return <expr><name pos:line="76" pos:column="10">result<pos:position pos:line="76" pos:column="16"/></name></expr>;<pos:position pos:line="76" pos:column="17"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
