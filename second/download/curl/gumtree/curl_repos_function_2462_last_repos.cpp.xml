<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2462_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">schannel_connect_step1<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">connectdata<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">conn<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">sockindex<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ssize_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">written<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><operator pos:line="4" pos:column="21">-<pos:position pos:line="4" pos:column="22"/></operator><literal type="number" pos:line="4" pos:column="22">1<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">ssl_connect_data<pos:position pos:line="6" pos:column="26"/></name></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier></type><name pos:line="6" pos:column="28">connssl<pos:position pos:line="6" pos:column="35"/></name> <init pos:line="6" pos:column="36">= <expr><operator pos:line="6" pos:column="38">&amp;<pos:position pos:line="6" pos:column="43"/></operator><name><name pos:line="6" pos:column="39">conn<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">-&gt;<pos:position pos:line="6" pos:column="48"/></operator><name pos:line="6" pos:column="45">ssl<pos:position pos:line="6" pos:column="48"/></name><index pos:line="6" pos:column="48">[<expr><name pos:line="6" pos:column="49">sockindex<pos:position pos:line="6" pos:column="58"/></name></expr>]<pos:position pos:line="6" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">SecBuffer<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">outbuf<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">SecBufferDesc<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">outbuf_desc<pos:position pos:line="8" pos:column="28"/></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">SecBuffer<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">inbuf<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">SecBufferDesc<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">inbuf_desc<pos:position pos:line="10" pos:column="27"/></name></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">HAS_ALPN<pos:position pos:line="11" pos:column="16"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">unsigned<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">char<pos:position pos:line="12" pos:column="16"/></name></type> <name><name pos:line="12" pos:column="17">alpn_buffer<pos:position pos:line="12" pos:column="28"/></name><index pos:line="12" pos:column="28">[<expr><literal type="number" pos:line="12" pos:column="29">128<pos:position pos:line="12" pos:column="32"/></literal></expr>]<pos:position pos:line="12" pos:column="33"/></index></name></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">SCHANNEL_CRED<pos:position pos:line="14" pos:column="16"/></name></type> <name pos:line="14" pos:column="17">schannel_cred<pos:position pos:line="14" pos:column="30"/></name></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">SECURITY_STATUS<pos:position pos:line="15" pos:column="18"/></name></type> <name pos:line="15" pos:column="19">sspi_status<pos:position pos:line="15" pos:column="30"/></name> <init pos:line="15" pos:column="31">= <expr><name pos:line="15" pos:column="33">SEC_E_OK<pos:position pos:line="15" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="16" pos:column="3">struct<pos:position pos:line="16" pos:column="9"/></name> <name pos:line="16" pos:column="10">curl_schannel_cred<pos:position pos:line="16" pos:column="28"/></name></name> <modifier pos:line="16" pos:column="29">*<pos:position pos:line="16" pos:column="30"/></modifier></type><name pos:line="16" pos:column="30">old_cred<pos:position pos:line="16" pos:column="38"/></name> <init pos:line="16" pos:column="39">= <expr><name pos:line="16" pos:column="41">NULL<pos:position pos:line="16" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">in_addr<pos:position pos:line="17" pos:column="17"/></name></name></type> <name pos:line="17" pos:column="18">addr<pos:position pos:line="17" pos:column="22"/></name></decl>;<pos:position pos:line="17" pos:column="23"/></decl_stmt>
<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">ENABLE_IPV6<pos:position pos:line="18" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">struct<pos:position pos:line="19" pos:column="9"/></name> <name pos:line="19" pos:column="10">in6_addr<pos:position pos:line="19" pos:column="18"/></name></name></type> <name pos:line="19" pos:column="19">addr6<pos:position pos:line="19" pos:column="24"/></name></decl>;<pos:position pos:line="19" pos:column="25"/></decl_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">TCHAR<pos:position pos:line="21" pos:column="8"/></name> <modifier pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></modifier></type><name pos:line="21" pos:column="10">host_name<pos:position pos:line="21" pos:column="19"/></name></decl>;<pos:position pos:line="21" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">CURLcode<pos:position pos:line="22" pos:column="11"/></name></type> <name pos:line="22" pos:column="12">result<pos:position pos:line="22" pos:column="18"/></name></decl>;<pos:position pos:line="22" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">char<pos:position pos:line="23" pos:column="7"/></name> <modifier pos:line="23" pos:column="8">*<pos:position pos:line="23" pos:column="9"/></modifier> <specifier pos:line="23" pos:column="10">const<pos:position pos:line="23" pos:column="15"/></specifier></type> <name pos:line="23" pos:column="16">hostname<pos:position pos:line="23" pos:column="24"/></name> <init pos:line="23" pos:column="25">= <expr><ternary><condition><expr><call><name pos:line="23" pos:column="27">SSL_IS_PROXY<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">()<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr> ?<pos:position pos:line="23" pos:column="43"/></condition><then pos:line="23" pos:column="43"> <expr><name><name pos:line="23" pos:column="44">conn<pos:position pos:line="23" pos:column="48"/></name><operator pos:line="23" pos:column="48">-&gt;<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="50">http_proxy<pos:position pos:line="23" pos:column="60"/></name><operator pos:line="23" pos:column="60">.<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="61">host<pos:position pos:line="23" pos:column="65"/></name><operator pos:line="23" pos:column="65">.<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="66">name<pos:position pos:line="23" pos:column="70"/></name></name></expr> <pos:position pos:line="23" pos:column="71"/></then><else pos:line="23" pos:column="71">:
    <expr><name><name pos:line="24" pos:column="5">conn<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">-&gt;<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="11">host<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">.<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">name<pos:position pos:line="24" pos:column="20"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="24" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">infof<pos:position pos:line="26" pos:column="8"/></name><argument_list pos:line="26" pos:column="8">(<argument><expr><name pos:line="26" pos:column="9">data<pos:position pos:line="26" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="15">"schannel: SSL/TLS connection with %s port %hu (step 1/3)\n"<pos:position pos:line="26" pos:column="75"/></literal></expr></argument>,
        <argument><expr><name pos:line="27" pos:column="9">hostname<pos:position pos:line="27" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="19">conn<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">-&gt;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="25">remote_port<pos:position pos:line="27" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>

  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><call><name pos:line="29" pos:column="6">Curl_verify_windows_version<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><literal type="number" pos:line="29" pos:column="34">5<pos:position pos:line="29" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="37">1<pos:position pos:line="29" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="40">PLATFORM_WINNT<pos:position pos:line="29" pos:column="54"/></name></expr></argument>,
                                 <argument><expr><name pos:line="30" pos:column="34">VERSION_LESS_THAN_EQUAL<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="59"/></condition><then pos:line="30" pos:column="59"> <block pos:line="30" pos:column="60">{
     <comment type="block" pos:line="31" pos:column="6">/* SChannel in Windows XP (OS version 5.1) uses legacy handshakes and
        algorithms that may not be supported by all servers. */</comment>
     <expr_stmt><expr><call><name pos:line="33" pos:column="6">infof<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><name pos:line="33" pos:column="12">data<pos:position pos:line="33" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="18">"schannel: WinSSL version is old and may not be able to "<pos:position pos:line="33" pos:column="75"/></literal>
           <literal type="string" pos:line="34" pos:column="12">"connect to some servers due to lack of SNI, algorithms, etc.\n"<pos:position pos:line="34" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="78"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">HAS_ALPN<pos:position pos:line="37" pos:column="16"/></name></cpp:ifdef>
  <comment type="block" pos:line="38" pos:column="3">/* ALPN is only supported on Windows 8.1 / Server 2012 R2 and above.
     Also it doesn't seem to be supported for Wine, see curl bug #983. */</comment>
  <expr_stmt><expr><name><name pos:line="40" pos:column="3">BACKEND<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">use_alpn<pos:position pos:line="40" pos:column="20"/></name></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <name><name pos:line="40" pos:column="23">conn<pos:position pos:line="40" pos:column="27"/></name><operator pos:line="40" pos:column="27">-&gt;<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="29">bits<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">.<pos:position pos:line="40" pos:column="34"/></operator><name pos:line="40" pos:column="34">tls_enable_alpn<pos:position pos:line="40" pos:column="49"/></name></name> <operator pos:line="40" pos:column="50">&amp;&amp;<pos:position pos:line="40" pos:column="60"/></operator>
                      <operator pos:line="41" pos:column="23">!<pos:position pos:line="41" pos:column="24"/></operator><call><name pos:line="41" pos:column="24">GetProcAddress<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><call><name pos:line="41" pos:column="39">GetModuleHandleA<pos:position pos:line="41" pos:column="55"/></name><argument_list pos:line="41" pos:column="55">(<argument><expr><literal type="string" pos:line="41" pos:column="56">"ntdll"<pos:position pos:line="41" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr></argument>,
                                      <argument><expr><literal type="string" pos:line="42" pos:column="39">"wine_get_version"<pos:position pos:line="42" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call> <operator pos:line="42" pos:column="59">&amp;&amp;<pos:position pos:line="42" pos:column="69"/></operator>
                      <call><name pos:line="43" pos:column="23">Curl_verify_windows_version<pos:position pos:line="43" pos:column="50"/></name><argument_list pos:line="43" pos:column="50">(<argument><expr><literal type="number" pos:line="43" pos:column="51">6<pos:position pos:line="43" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="54">3<pos:position pos:line="43" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="57">PLATFORM_WINNT<pos:position pos:line="43" pos:column="71"/></name></expr></argument>,
                                                  <argument><expr><name pos:line="44" pos:column="51">VERSION_GREATER_THAN_EQUAL<pos:position pos:line="44" pos:column="77"/></name></expr></argument>)<pos:position pos:line="44" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="79"/></expr_stmt>
<cpp:else pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">else<pos:position pos:line="45" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name><name pos:line="46" pos:column="3">BACKEND<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">-&gt;<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="12">use_alpn<pos:position pos:line="46" pos:column="20"/></name></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <literal type="boolean" pos:line="46" pos:column="23">false<pos:position pos:line="46" pos:column="28"/></literal></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name pos:line="49" pos:column="3">BACKEND<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">-&gt;<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="12">cred<pos:position pos:line="49" pos:column="16"/></name></name> <operator pos:line="49" pos:column="17">=<pos:position pos:line="49" pos:column="18"/></operator> <name pos:line="49" pos:column="19">NULL<pos:position pos:line="49" pos:column="23"/></name></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="51" pos:column="3">/* check for an existing re-usable credential handle */</comment>
  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">(<expr><call><name pos:line="52" pos:column="6">SSL_SET_OPTION<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name><name pos:line="52" pos:column="21">primary<pos:position pos:line="52" pos:column="28"/></name><operator pos:line="52" pos:column="28">.<pos:position pos:line="52" pos:column="29"/></operator><name pos:line="52" pos:column="29">sessionid<pos:position pos:line="52" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="40"/></condition><then pos:line="52" pos:column="40"> <block pos:line="52" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">Curl_ssl_sessionid_lock<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">conn<pos:position pos:line="53" pos:column="33"/></name></expr></argument>)<pos:position pos:line="53" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>
    <if pos:line="54" pos:column="5">if<condition pos:line="54" pos:column="7">(<expr><operator pos:line="54" pos:column="8">!<pos:position pos:line="54" pos:column="9"/></operator><call><name pos:line="54" pos:column="9">Curl_ssl_getsessionid<pos:position pos:line="54" pos:column="30"/></name><argument_list pos:line="54" pos:column="30">(<argument><expr><name pos:line="54" pos:column="31">conn<pos:position pos:line="54" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="37">(<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="38">void<pos:position pos:line="54" pos:column="42"/></name> <operator pos:line="54" pos:column="43">*<pos:position pos:line="54" pos:column="44"/></operator><operator pos:line="54" pos:column="44">*<pos:position pos:line="54" pos:column="45"/></operator><operator pos:line="54" pos:column="45">)<pos:position pos:line="54" pos:column="46"/></operator><operator pos:line="54" pos:column="46">&amp;<pos:position pos:line="54" pos:column="51"/></operator><name pos:line="54" pos:column="47">old_cred<pos:position pos:line="54" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="57">NULL<pos:position pos:line="54" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="63">sockindex<pos:position pos:line="54" pos:column="72"/></name></expr></argument>)<pos:position pos:line="54" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="74"/></condition><then pos:line="54" pos:column="74"> <block pos:line="54" pos:column="75">{
      <expr_stmt><expr><name><name pos:line="55" pos:column="7">BACKEND<pos:position pos:line="55" pos:column="14"/></name><operator pos:line="55" pos:column="14">-&gt;<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="16">cred<pos:position pos:line="55" pos:column="20"/></name></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <name pos:line="55" pos:column="23">old_cred<pos:position pos:line="55" pos:column="31"/></name></expr>;<pos:position pos:line="55" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">infof<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">data<pos:position pos:line="56" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="19">"schannel: re-using existing credential handle\n"<pos:position pos:line="56" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="70"/></expr_stmt>

      <comment type="block" pos:line="58" pos:column="7">/* increment the reference counter of the credential/session handle */</comment>
      <expr_stmt><expr><name><name pos:line="59" pos:column="7">BACKEND<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">-&gt;<pos:position pos:line="59" pos:column="19"/></operator><name pos:line="59" pos:column="16">cred<pos:position pos:line="59" pos:column="20"/></name><operator pos:line="59" pos:column="20">-&gt;<pos:position pos:line="59" pos:column="25"/></operator><name pos:line="59" pos:column="22">refcount<pos:position pos:line="59" pos:column="30"/></name></name><operator pos:line="59" pos:column="30">++<pos:position pos:line="59" pos:column="32"/></operator></expr>;<pos:position pos:line="59" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">infof<pos:position pos:line="60" pos:column="12"/></name><argument_list pos:line="60" pos:column="12">(<argument><expr><name pos:line="60" pos:column="13">data<pos:position pos:line="60" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="19">"schannel: incremented credential handle refcount = %d\n"<pos:position pos:line="60" pos:column="76"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="61" pos:column="13">BACKEND<pos:position pos:line="61" pos:column="20"/></name><operator pos:line="61" pos:column="20">-&gt;<pos:position pos:line="61" pos:column="25"/></operator><name pos:line="61" pos:column="22">cred<pos:position pos:line="61" pos:column="26"/></name><operator pos:line="61" pos:column="26">-&gt;<pos:position pos:line="61" pos:column="31"/></operator><name pos:line="61" pos:column="28">refcount<pos:position pos:line="61" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">Curl_ssl_sessionid_unlock<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><name pos:line="63" pos:column="31">conn<pos:position pos:line="63" pos:column="35"/></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <if pos:line="66" pos:column="3">if<condition pos:line="66" pos:column="5">(<expr><operator pos:line="66" pos:column="6">!<pos:position pos:line="66" pos:column="7"/></operator><name><name pos:line="66" pos:column="7">BACKEND<pos:position pos:line="66" pos:column="14"/></name><operator pos:line="66" pos:column="14">-&gt;<pos:position pos:line="66" pos:column="19"/></operator><name pos:line="66" pos:column="16">cred<pos:position pos:line="66" pos:column="20"/></name></name></expr>)<pos:position pos:line="66" pos:column="21"/></condition><then pos:line="66" pos:column="21"> <block pos:line="66" pos:column="22">{
    <comment type="block" pos:line="67" pos:column="5">/* setup Schannel API options */</comment>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">memset<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><operator pos:line="68" pos:column="12">&amp;<pos:position pos:line="68" pos:column="17"/></operator><name pos:line="68" pos:column="13">schannel_cred<pos:position pos:line="68" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="28">0<pos:position pos:line="68" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="31">sizeof<argument_list pos:line="68" pos:column="37">(<argument><expr><name pos:line="68" pos:column="38">schannel_cred<pos:position pos:line="68" pos:column="51"/></name></expr></argument>)<pos:position pos:line="68" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="69" pos:column="5">schannel_cred<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">.<pos:position pos:line="69" pos:column="19"/></operator><name pos:line="69" pos:column="19">dwVersion<pos:position pos:line="69" pos:column="28"/></name></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <name pos:line="69" pos:column="31">SCHANNEL_CRED_VERSION<pos:position pos:line="69" pos:column="52"/></name></expr>;<pos:position pos:line="69" pos:column="53"/></expr_stmt>

    <if pos:line="71" pos:column="5">if<condition pos:line="71" pos:column="7">(<expr><name><name pos:line="71" pos:column="8">conn<pos:position pos:line="71" pos:column="12"/></name><operator pos:line="71" pos:column="12">-&gt;<pos:position pos:line="71" pos:column="17"/></operator><name pos:line="71" pos:column="14">ssl_config<pos:position pos:line="71" pos:column="24"/></name><operator pos:line="71" pos:column="24">.<pos:position pos:line="71" pos:column="25"/></operator><name pos:line="71" pos:column="25">verifypeer<pos:position pos:line="71" pos:column="35"/></name></name></expr>)<pos:position pos:line="71" pos:column="36"/></condition><then pos:line="71" pos:column="36"> <block pos:line="71" pos:column="37">{
<cpp:ifdef pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">ifdef<pos:position pos:line="72" pos:column="7"/></cpp:directive> <name pos:line="72" pos:column="8">_WIN32_WCE<pos:position pos:line="72" pos:column="18"/></name></cpp:ifdef>
      <comment type="block" pos:line="73" pos:column="7">/* certificate validation on CE doesn't seem to work right; we'll
         do it following a more manual process. */</comment>
      <expr_stmt><expr><name><name pos:line="75" pos:column="7">schannel_cred<pos:position pos:line="75" pos:column="20"/></name><operator pos:line="75" pos:column="20">.<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="21">dwFlags<pos:position pos:line="75" pos:column="28"/></name></name> <operator pos:line="75" pos:column="29">=<pos:position pos:line="75" pos:column="30"/></operator> <name pos:line="75" pos:column="31">SCH_CRED_MANUAL_CRED_VALIDATION<pos:position pos:line="75" pos:column="62"/></name> <operator pos:line="75" pos:column="63">|<pos:position pos:line="75" pos:column="64"/></operator>
        <name pos:line="76" pos:column="9">SCH_CRED_IGNORE_NO_REVOCATION_CHECK<pos:position pos:line="76" pos:column="44"/></name> <operator pos:line="76" pos:column="45">|<pos:position pos:line="76" pos:column="46"/></operator>
        <name pos:line="77" pos:column="9">SCH_CRED_IGNORE_REVOCATION_OFFLINE<pos:position pos:line="77" pos:column="43"/></name></expr>;<pos:position pos:line="77" pos:column="44"/></expr_stmt>
<cpp:else pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">else<pos:position pos:line="78" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><name><name pos:line="79" pos:column="7">schannel_cred<pos:position pos:line="79" pos:column="20"/></name><operator pos:line="79" pos:column="20">.<pos:position pos:line="79" pos:column="21"/></operator><name pos:line="79" pos:column="21">dwFlags<pos:position pos:line="79" pos:column="28"/></name></name> <operator pos:line="79" pos:column="29">=<pos:position pos:line="79" pos:column="30"/></operator> <name pos:line="79" pos:column="31">SCH_CRED_AUTO_CRED_VALIDATION<pos:position pos:line="79" pos:column="60"/></name></expr>;<pos:position pos:line="79" pos:column="61"/></expr_stmt>
      <comment type="block" pos:line="80" pos:column="7">/* TODO s/data-&gt;set.ssl.no_revoke/SSL_SET_OPTION(no_revoke)/g */</comment>
      <if pos:line="81" pos:column="7">if<condition pos:line="81" pos:column="9">(<expr><name><name pos:line="81" pos:column="10">data<pos:position pos:line="81" pos:column="14"/></name><operator pos:line="81" pos:column="14">-&gt;<pos:position pos:line="81" pos:column="19"/></operator><name pos:line="81" pos:column="16">set<pos:position pos:line="81" pos:column="19"/></name><operator pos:line="81" pos:column="19">.<pos:position pos:line="81" pos:column="20"/></operator><name pos:line="81" pos:column="20">ssl<pos:position pos:line="81" pos:column="23"/></name><operator pos:line="81" pos:column="23">.<pos:position pos:line="81" pos:column="24"/></operator><name pos:line="81" pos:column="24">no_revoke<pos:position pos:line="81" pos:column="33"/></name></name></expr>)<pos:position pos:line="81" pos:column="34"/></condition><then pos:line="81" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="82" pos:column="9">schannel_cred<pos:position pos:line="82" pos:column="22"/></name><operator pos:line="82" pos:column="22">.<pos:position pos:line="82" pos:column="23"/></operator><name pos:line="82" pos:column="23">dwFlags<pos:position pos:line="82" pos:column="30"/></name></name> <operator pos:line="82" pos:column="31">|=<pos:position pos:line="82" pos:column="33"/></operator> <name pos:line="82" pos:column="34">SCH_CRED_IGNORE_NO_REVOCATION_CHECK<pos:position pos:line="82" pos:column="69"/></name> <operator pos:line="82" pos:column="70">|<pos:position pos:line="82" pos:column="71"/></operator>
                                 <name pos:line="83" pos:column="34">SCH_CRED_IGNORE_REVOCATION_OFFLINE<pos:position pos:line="83" pos:column="68"/></name></expr>;<pos:position pos:line="83" pos:column="69"/></expr_stmt></block></then>
      <else pos:line="84" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="85" pos:column="9">schannel_cred<pos:position pos:line="85" pos:column="22"/></name><operator pos:line="85" pos:column="22">.<pos:position pos:line="85" pos:column="23"/></operator><name pos:line="85" pos:column="23">dwFlags<pos:position pos:line="85" pos:column="30"/></name></name> <operator pos:line="85" pos:column="31">|=<pos:position pos:line="85" pos:column="33"/></operator> <name pos:line="85" pos:column="34">SCH_CRED_REVOCATION_CHECK_CHAIN<pos:position pos:line="85" pos:column="65"/></name></expr>;<pos:position pos:line="85" pos:column="66"/></expr_stmt></block></else></if>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>
      <if pos:line="87" pos:column="7">if<condition pos:line="87" pos:column="9">(<expr><name><name pos:line="87" pos:column="10">data<pos:position pos:line="87" pos:column="14"/></name><operator pos:line="87" pos:column="14">-&gt;<pos:position pos:line="87" pos:column="19"/></operator><name pos:line="87" pos:column="16">set<pos:position pos:line="87" pos:column="19"/></name><operator pos:line="87" pos:column="19">.<pos:position pos:line="87" pos:column="20"/></operator><name pos:line="87" pos:column="20">ssl<pos:position pos:line="87" pos:column="23"/></name><operator pos:line="87" pos:column="23">.<pos:position pos:line="87" pos:column="24"/></operator><name pos:line="87" pos:column="24">no_revoke<pos:position pos:line="87" pos:column="33"/></name></name></expr>)<pos:position pos:line="87" pos:column="34"/></condition><then pos:line="87" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="9">infof<pos:position pos:line="88" pos:column="14"/></name><argument_list pos:line="88" pos:column="14">(<argument><expr><name pos:line="88" pos:column="15">data<pos:position pos:line="88" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="21">"schannel: disabled server certificate revocation "<pos:position pos:line="88" pos:column="72"/></literal>
                    <literal type="string" pos:line="89" pos:column="21">"checks\n"<pos:position pos:line="89" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="33"/></expr_stmt></block></then>
      <else pos:line="90" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="91" pos:column="9">infof<pos:position pos:line="91" pos:column="14"/></name><argument_list pos:line="91" pos:column="14">(<argument><expr><name pos:line="91" pos:column="15">data<pos:position pos:line="91" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="21">"schannel: checking server certificate revocation\n"<pos:position pos:line="91" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="75"/></expr_stmt></block></else></if>
    }<pos:position pos:line="92" pos:column="6"/></block></then>
    <else pos:line="93" pos:column="5">else <block pos:line="93" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="94" pos:column="7">schannel_cred<pos:position pos:line="94" pos:column="20"/></name><operator pos:line="94" pos:column="20">.<pos:position pos:line="94" pos:column="21"/></operator><name pos:line="94" pos:column="21">dwFlags<pos:position pos:line="94" pos:column="28"/></name></name> <operator pos:line="94" pos:column="29">=<pos:position pos:line="94" pos:column="30"/></operator> <name pos:line="94" pos:column="31">SCH_CRED_MANUAL_CRED_VALIDATION<pos:position pos:line="94" pos:column="62"/></name> <operator pos:line="94" pos:column="63">|<pos:position pos:line="94" pos:column="64"/></operator>
        <name pos:line="95" pos:column="9">SCH_CRED_IGNORE_NO_REVOCATION_CHECK<pos:position pos:line="95" pos:column="44"/></name> <operator pos:line="95" pos:column="45">|<pos:position pos:line="95" pos:column="46"/></operator>
        <name pos:line="96" pos:column="9">SCH_CRED_IGNORE_REVOCATION_OFFLINE<pos:position pos:line="96" pos:column="43"/></name></expr>;<pos:position pos:line="96" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">infof<pos:position pos:line="97" pos:column="12"/></name><argument_list pos:line="97" pos:column="12">(<argument><expr><name pos:line="97" pos:column="13">data<pos:position pos:line="97" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="19">"schannel: disabled server certificate revocation checks\n"<pos:position pos:line="97" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></else></if>

    <if pos:line="100" pos:column="5">if<condition pos:line="100" pos:column="7">(<expr><operator pos:line="100" pos:column="8">!<pos:position pos:line="100" pos:column="9"/></operator><name><name pos:line="100" pos:column="9">conn<pos:position pos:line="100" pos:column="13"/></name><operator pos:line="100" pos:column="13">-&gt;<pos:position pos:line="100" pos:column="18"/></operator><name pos:line="100" pos:column="15">ssl_config<pos:position pos:line="100" pos:column="25"/></name><operator pos:line="100" pos:column="25">.<pos:position pos:line="100" pos:column="26"/></operator><name pos:line="100" pos:column="26">verifyhost<pos:position pos:line="100" pos:column="36"/></name></name></expr>)<pos:position pos:line="100" pos:column="37"/></condition><then pos:line="100" pos:column="37"> <block pos:line="100" pos:column="38">{
      <expr_stmt><expr><name><name pos:line="101" pos:column="7">schannel_cred<pos:position pos:line="101" pos:column="20"/></name><operator pos:line="101" pos:column="20">.<pos:position pos:line="101" pos:column="21"/></operator><name pos:line="101" pos:column="21">dwFlags<pos:position pos:line="101" pos:column="28"/></name></name> <operator pos:line="101" pos:column="29">|=<pos:position pos:line="101" pos:column="31"/></operator> <name pos:line="101" pos:column="32">SCH_CRED_NO_SERVERNAME_CHECK<pos:position pos:line="101" pos:column="60"/></name></expr>;<pos:position pos:line="101" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="102" pos:column="7">infof<pos:position pos:line="102" pos:column="12"/></name><argument_list pos:line="102" pos:column="12">(<argument><expr><name pos:line="102" pos:column="13">data<pos:position pos:line="102" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="19">"schannel: verifyhost setting prevents Schannel from "<pos:position pos:line="102" pos:column="73"/></literal>
            <literal type="string" pos:line="103" pos:column="13">"comparing the supplied target name with the subject "<pos:position pos:line="103" pos:column="67"/></literal>
            <literal type="string" pos:line="104" pos:column="13">"names in server certificates.\n"<pos:position pos:line="104" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>

    <switch pos:line="107" pos:column="5">switch<condition pos:line="107" pos:column="11">(<expr><name><name pos:line="107" pos:column="12">conn<pos:position pos:line="107" pos:column="16"/></name><operator pos:line="107" pos:column="16">-&gt;<pos:position pos:line="107" pos:column="21"/></operator><name pos:line="107" pos:column="18">ssl_config<pos:position pos:line="107" pos:column="28"/></name><operator pos:line="107" pos:column="28">.<pos:position pos:line="107" pos:column="29"/></operator><name pos:line="107" pos:column="29">version<pos:position pos:line="107" pos:column="36"/></name></name></expr>)<pos:position pos:line="107" pos:column="37"/></condition> <block pos:line="107" pos:column="38">{
    <case pos:line="108" pos:column="5">case <expr><name pos:line="108" pos:column="10">CURL_SSLVERSION_DEFAULT<pos:position pos:line="108" pos:column="33"/></name></expr>:<pos:position pos:line="108" pos:column="34"/></case>
    <case pos:line="109" pos:column="5">case <expr><name pos:line="109" pos:column="10">CURL_SSLVERSION_TLSv1<pos:position pos:line="109" pos:column="31"/></name></expr>:<pos:position pos:line="109" pos:column="32"/></case>
      <expr_stmt><expr><name><name pos:line="110" pos:column="7">schannel_cred<pos:position pos:line="110" pos:column="20"/></name><operator pos:line="110" pos:column="20">.<pos:position pos:line="110" pos:column="21"/></operator><name pos:line="110" pos:column="21">grbitEnabledProtocols<pos:position pos:line="110" pos:column="42"/></name></name> <operator pos:line="110" pos:column="43">=<pos:position pos:line="110" pos:column="44"/></operator> <name pos:line="110" pos:column="45">SP_PROT_TLS1_0_CLIENT<pos:position pos:line="110" pos:column="66"/></name> <operator pos:line="110" pos:column="67">|<pos:position pos:line="110" pos:column="68"/></operator>
        <name pos:line="111" pos:column="9">SP_PROT_TLS1_1_CLIENT<pos:position pos:line="111" pos:column="30"/></name> <operator pos:line="111" pos:column="31">|<pos:position pos:line="111" pos:column="32"/></operator>
        <name pos:line="112" pos:column="9">SP_PROT_TLS1_2_CLIENT<pos:position pos:line="112" pos:column="30"/></name></expr>;<pos:position pos:line="112" pos:column="31"/></expr_stmt>
      <break pos:line="113" pos:column="7">break;<pos:position pos:line="113" pos:column="13"/></break>
    <case pos:line="114" pos:column="5">case <expr><name pos:line="114" pos:column="10">CURL_SSLVERSION_TLSv1_0<pos:position pos:line="114" pos:column="33"/></name></expr>:<pos:position pos:line="114" pos:column="34"/></case>
    <case pos:line="115" pos:column="5">case <expr><name pos:line="115" pos:column="10">CURL_SSLVERSION_TLSv1_1<pos:position pos:line="115" pos:column="33"/></name></expr>:<pos:position pos:line="115" pos:column="34"/></case>
    <case pos:line="116" pos:column="5">case <expr><name pos:line="116" pos:column="10">CURL_SSLVERSION_TLSv1_2<pos:position pos:line="116" pos:column="33"/></name></expr>:<pos:position pos:line="116" pos:column="34"/></case>
    <case pos:line="117" pos:column="5">case <expr><name pos:line="117" pos:column="10">CURL_SSLVERSION_TLSv1_3<pos:position pos:line="117" pos:column="33"/></name></expr>:<pos:position pos:line="117" pos:column="34"/></case>
      <block pos:line="118" pos:column="7">{
        <expr_stmt><expr><name pos:line="119" pos:column="9">result<pos:position pos:line="119" pos:column="15"/></name> <operator pos:line="119" pos:column="16">=<pos:position pos:line="119" pos:column="17"/></operator> <call><name pos:line="119" pos:column="18">set_ssl_version_min_max<pos:position pos:line="119" pos:column="41"/></name><argument_list pos:line="119" pos:column="41">(<argument><expr><operator pos:line="119" pos:column="42">&amp;<pos:position pos:line="119" pos:column="47"/></operator><name pos:line="119" pos:column="43">schannel_cred<pos:position pos:line="119" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="58">conn<pos:position pos:line="119" pos:column="62"/></name></expr></argument>)<pos:position pos:line="119" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="64"/></expr_stmt>
        <if pos:line="120" pos:column="9">if<condition pos:line="120" pos:column="11">(<expr><name pos:line="120" pos:column="12">result<pos:position pos:line="120" pos:column="18"/></name> <operator pos:line="120" pos:column="19">!=<pos:position pos:line="120" pos:column="21"/></operator> <name pos:line="120" pos:column="22">CURLE_OK<pos:position pos:line="120" pos:column="30"/></name></expr>)<pos:position pos:line="120" pos:column="31"/></condition><then pos:line="120" pos:column="31">
          <block type="pseudo"><return pos:line="121" pos:column="11">return <expr><name pos:line="121" pos:column="18">result<pos:position pos:line="121" pos:column="24"/></name></expr>;<pos:position pos:line="121" pos:column="25"/></return></block></then></if>
        <break pos:line="122" pos:column="9">break;<pos:position pos:line="122" pos:column="15"/></break>
      }<pos:position pos:line="123" pos:column="8"/></block>
    <case pos:line="124" pos:column="5">case <expr><name pos:line="124" pos:column="10">CURL_SSLVERSION_SSLv3<pos:position pos:line="124" pos:column="31"/></name></expr>:<pos:position pos:line="124" pos:column="32"/></case>
      <expr_stmt><expr><name><name pos:line="125" pos:column="7">schannel_cred<pos:position pos:line="125" pos:column="20"/></name><operator pos:line="125" pos:column="20">.<pos:position pos:line="125" pos:column="21"/></operator><name pos:line="125" pos:column="21">grbitEnabledProtocols<pos:position pos:line="125" pos:column="42"/></name></name> <operator pos:line="125" pos:column="43">=<pos:position pos:line="125" pos:column="44"/></operator> <name pos:line="125" pos:column="45">SP_PROT_SSL3_CLIENT<pos:position pos:line="125" pos:column="64"/></name></expr>;<pos:position pos:line="125" pos:column="65"/></expr_stmt>
      <break pos:line="126" pos:column="7">break;<pos:position pos:line="126" pos:column="13"/></break>
    <case pos:line="127" pos:column="5">case <expr><name pos:line="127" pos:column="10">CURL_SSLVERSION_SSLv2<pos:position pos:line="127" pos:column="31"/></name></expr>:<pos:position pos:line="127" pos:column="32"/></case>
      <expr_stmt><expr><name><name pos:line="128" pos:column="7">schannel_cred<pos:position pos:line="128" pos:column="20"/></name><operator pos:line="128" pos:column="20">.<pos:position pos:line="128" pos:column="21"/></operator><name pos:line="128" pos:column="21">grbitEnabledProtocols<pos:position pos:line="128" pos:column="42"/></name></name> <operator pos:line="128" pos:column="43">=<pos:position pos:line="128" pos:column="44"/></operator> <name pos:line="128" pos:column="45">SP_PROT_SSL2_CLIENT<pos:position pos:line="128" pos:column="64"/></name></expr>;<pos:position pos:line="128" pos:column="65"/></expr_stmt>
      <break pos:line="129" pos:column="7">break;<pos:position pos:line="129" pos:column="13"/></break>
    <default pos:line="130" pos:column="5">default:<pos:position pos:line="130" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="131" pos:column="7">failf<pos:position pos:line="131" pos:column="12"/></name><argument_list pos:line="131" pos:column="12">(<argument><expr><name pos:line="131" pos:column="13">data<pos:position pos:line="131" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="19">"Unrecognized parameter passed via CURLOPT_SSLVERSION"<pos:position pos:line="131" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="75"/></expr_stmt>
      <return pos:line="132" pos:column="7">return <expr><name pos:line="132" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="132" pos:column="37"/></name></expr>;<pos:position pos:line="132" pos:column="38"/></return>
    }<pos:position pos:line="133" pos:column="6"/></block></switch>

    <comment type="block" pos:line="135" pos:column="5">/* allocate memory for the re-usable credential handle */</comment>
    <expr_stmt><expr><name><name pos:line="136" pos:column="5">BACKEND<pos:position pos:line="136" pos:column="12"/></name><operator pos:line="136" pos:column="12">-&gt;<pos:position pos:line="136" pos:column="17"/></operator><name pos:line="136" pos:column="14">cred<pos:position pos:line="136" pos:column="18"/></name></name> <operator pos:line="136" pos:column="19">=<pos:position pos:line="136" pos:column="20"/></operator> <operator pos:line="136" pos:column="21">(<pos:position pos:line="136" pos:column="22"/></operator>struct <name pos:line="136" pos:column="29">curl_schannel_cred<pos:position pos:line="136" pos:column="47"/></name> <operator pos:line="136" pos:column="48">*<pos:position pos:line="136" pos:column="49"/></operator><operator pos:line="136" pos:column="49">)<pos:position pos:line="136" pos:column="50"/></operator>
      <call><name pos:line="137" pos:column="7">malloc<pos:position pos:line="137" pos:column="13"/></name><argument_list pos:line="137" pos:column="13">(<argument><expr><sizeof pos:line="137" pos:column="14">sizeof<argument_list pos:line="137" pos:column="20">(<argument><expr pos:line="137" pos:column="21">struct <name pos:line="137" pos:column="28">curl_schannel_cred<pos:position pos:line="137" pos:column="46"/></name></expr></argument>)<pos:position pos:line="137" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="137" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="49"/></expr_stmt>
    <if pos:line="138" pos:column="5">if<condition pos:line="138" pos:column="7">(<expr><operator pos:line="138" pos:column="8">!<pos:position pos:line="138" pos:column="9"/></operator><name><name pos:line="138" pos:column="9">BACKEND<pos:position pos:line="138" pos:column="16"/></name><operator pos:line="138" pos:column="16">-&gt;<pos:position pos:line="138" pos:column="21"/></operator><name pos:line="138" pos:column="18">cred<pos:position pos:line="138" pos:column="22"/></name></name></expr>)<pos:position pos:line="138" pos:column="23"/></condition><then pos:line="138" pos:column="23"> <block pos:line="138" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="139" pos:column="7">failf<pos:position pos:line="139" pos:column="12"/></name><argument_list pos:line="139" pos:column="12">(<argument><expr><name pos:line="139" pos:column="13">data<pos:position pos:line="139" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="139" pos:column="19">"schannel: unable to allocate memory"<pos:position pos:line="139" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="58"/></expr_stmt>
      <return pos:line="140" pos:column="7">return <expr><name pos:line="140" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="140" pos:column="33"/></name></expr>;<pos:position pos:line="140" pos:column="34"/></return>
    }<pos:position pos:line="141" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="142" pos:column="5">memset<pos:position pos:line="142" pos:column="11"/></name><argument_list pos:line="142" pos:column="11">(<argument><expr><name><name pos:line="142" pos:column="12">BACKEND<pos:position pos:line="142" pos:column="19"/></name><operator pos:line="142" pos:column="19">-&gt;<pos:position pos:line="142" pos:column="24"/></operator><name pos:line="142" pos:column="21">cred<pos:position pos:line="142" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="142" pos:column="27">0<pos:position pos:line="142" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="142" pos:column="30">sizeof<argument_list pos:line="142" pos:column="36">(<argument><expr pos:line="142" pos:column="37">struct <name pos:line="142" pos:column="44">curl_schannel_cred<pos:position pos:line="142" pos:column="62"/></name></expr></argument>)<pos:position pos:line="142" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="142" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="143" pos:column="5">BACKEND<pos:position pos:line="143" pos:column="12"/></name><operator pos:line="143" pos:column="12">-&gt;<pos:position pos:line="143" pos:column="17"/></operator><name pos:line="143" pos:column="14">cred<pos:position pos:line="143" pos:column="18"/></name><operator pos:line="143" pos:column="18">-&gt;<pos:position pos:line="143" pos:column="23"/></operator><name pos:line="143" pos:column="20">refcount<pos:position pos:line="143" pos:column="28"/></name></name> <operator pos:line="143" pos:column="29">=<pos:position pos:line="143" pos:column="30"/></operator> <literal type="number" pos:line="143" pos:column="31">1<pos:position pos:line="143" pos:column="32"/></literal></expr>;<pos:position pos:line="143" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="145" pos:column="5">/* https://msdn.microsoft.com/en-us/library/windows/desktop/aa374716.aspx
       */</comment>
    <expr_stmt><expr><name pos:line="147" pos:column="5">sspi_status<pos:position pos:line="147" pos:column="16"/></name> <operator pos:line="147" pos:column="17">=<pos:position pos:line="147" pos:column="18"/></operator>
      <call><name><name pos:line="148" pos:column="7">s_pSecFn<pos:position pos:line="148" pos:column="15"/></name><operator pos:line="148" pos:column="15">-&gt;<pos:position pos:line="148" pos:column="20"/></operator><name pos:line="148" pos:column="17">AcquireCredentialsHandle<pos:position pos:line="148" pos:column="41"/></name></name><argument_list pos:line="148" pos:column="41">(<argument><expr><name pos:line="148" pos:column="42">NULL<pos:position pos:line="148" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="148" pos:column="48">(<pos:position pos:line="148" pos:column="49"/></operator><name pos:line="148" pos:column="49">TCHAR<pos:position pos:line="148" pos:column="54"/></name> <operator pos:line="148" pos:column="55">*<pos:position pos:line="148" pos:column="56"/></operator><operator pos:line="148" pos:column="56">)<pos:position pos:line="148" pos:column="57"/></operator><name pos:line="148" pos:column="57">UNISP_NAME<pos:position pos:line="148" pos:column="67"/></name></expr></argument>,
                                         <argument><expr><name pos:line="149" pos:column="42">SECPKG_CRED_OUTBOUND<pos:position pos:line="149" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="64">NULL<pos:position pos:line="149" pos:column="68"/></name></expr></argument>,
                                         <argument><expr><operator pos:line="150" pos:column="42">&amp;<pos:position pos:line="150" pos:column="47"/></operator><name pos:line="150" pos:column="43">schannel_cred<pos:position pos:line="150" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="58">NULL<pos:position pos:line="150" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="64">NULL<pos:position pos:line="150" pos:column="68"/></name></expr></argument>,
                                         <argument><expr><operator pos:line="151" pos:column="42">&amp;<pos:position pos:line="151" pos:column="47"/></operator><name><name pos:line="151" pos:column="43">BACKEND<pos:position pos:line="151" pos:column="50"/></name><operator pos:line="151" pos:column="50">-&gt;<pos:position pos:line="151" pos:column="55"/></operator><name pos:line="151" pos:column="52">cred<pos:position pos:line="151" pos:column="56"/></name><operator pos:line="151" pos:column="56">-&gt;<pos:position pos:line="151" pos:column="61"/></operator><name pos:line="151" pos:column="58">cred_handle<pos:position pos:line="151" pos:column="69"/></name></name></expr></argument>,
                                         <argument><expr><operator pos:line="152" pos:column="42">&amp;<pos:position pos:line="152" pos:column="47"/></operator><name><name pos:line="152" pos:column="43">BACKEND<pos:position pos:line="152" pos:column="50"/></name><operator pos:line="152" pos:column="50">-&gt;<pos:position pos:line="152" pos:column="55"/></operator><name pos:line="152" pos:column="52">cred<pos:position pos:line="152" pos:column="56"/></name><operator pos:line="152" pos:column="56">-&gt;<pos:position pos:line="152" pos:column="61"/></operator><name pos:line="152" pos:column="58">time_stamp<pos:position pos:line="152" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="152" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="70"/></expr_stmt>

    <if pos:line="154" pos:column="5">if<condition pos:line="154" pos:column="7">(<expr><name pos:line="154" pos:column="8">sspi_status<pos:position pos:line="154" pos:column="19"/></name> <operator pos:line="154" pos:column="20">!=<pos:position pos:line="154" pos:column="22"/></operator> <name pos:line="154" pos:column="23">SEC_E_OK<pos:position pos:line="154" pos:column="31"/></name></expr>)<pos:position pos:line="154" pos:column="32"/></condition><then pos:line="154" pos:column="32"> <block pos:line="154" pos:column="33">{
      <if pos:line="155" pos:column="7">if<condition pos:line="155" pos:column="9">(<expr><name pos:line="155" pos:column="10">sspi_status<pos:position pos:line="155" pos:column="21"/></name> <operator pos:line="155" pos:column="22">==<pos:position pos:line="155" pos:column="24"/></operator> <name pos:line="155" pos:column="25">SEC_E_WRONG_PRINCIPAL<pos:position pos:line="155" pos:column="46"/></name></expr>)<pos:position pos:line="155" pos:column="47"/></condition><then pos:line="155" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="156" pos:column="9">failf<pos:position pos:line="156" pos:column="14"/></name><argument_list pos:line="156" pos:column="14">(<argument><expr><name pos:line="156" pos:column="15">data<pos:position pos:line="156" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="156" pos:column="21">"schannel: SNI or certificate check failed: %s"<pos:position pos:line="156" pos:column="68"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="157" pos:column="15">Curl_sspi_strerror<pos:position pos:line="157" pos:column="33"/></name><argument_list pos:line="157" pos:column="33">(<argument><expr><name pos:line="157" pos:column="34">conn<pos:position pos:line="157" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="40">sspi_status<pos:position pos:line="157" pos:column="51"/></name></expr></argument>)<pos:position pos:line="157" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="157" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="54"/></expr_stmt></block></then>
      <else pos:line="158" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="159" pos:column="9">failf<pos:position pos:line="159" pos:column="14"/></name><argument_list pos:line="159" pos:column="14">(<argument><expr><name pos:line="159" pos:column="15">data<pos:position pos:line="159" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="21">"schannel: AcquireCredentialsHandle failed: %s"<pos:position pos:line="159" pos:column="68"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="160" pos:column="15">Curl_sspi_strerror<pos:position pos:line="160" pos:column="33"/></name><argument_list pos:line="160" pos:column="33">(<argument><expr><name pos:line="160" pos:column="34">conn<pos:position pos:line="160" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="40">sspi_status<pos:position pos:line="160" pos:column="51"/></name></expr></argument>)<pos:position pos:line="160" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="160" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="54"/></expr_stmt></block></else></if>
      <expr_stmt><expr><call><name pos:line="161" pos:column="7">Curl_safefree<pos:position pos:line="161" pos:column="20"/></name><argument_list pos:line="161" pos:column="20">(<argument><expr><name><name pos:line="161" pos:column="21">BACKEND<pos:position pos:line="161" pos:column="28"/></name><operator pos:line="161" pos:column="28">-&gt;<pos:position pos:line="161" pos:column="33"/></operator><name pos:line="161" pos:column="30">cred<pos:position pos:line="161" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="161" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="36"/></expr_stmt>
      <return pos:line="162" pos:column="7">return <expr><name pos:line="162" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="162" pos:column="37"/></name></expr>;<pos:position pos:line="162" pos:column="38"/></return>
    }<pos:position pos:line="163" pos:column="6"/></block></then></if>
  }<pos:position pos:line="164" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="166" pos:column="3">/* Warn if SNI is disabled due to use of an IP address */</comment>
  <if pos:line="167" pos:column="3">if<condition pos:line="167" pos:column="5">(<expr><call><name pos:line="167" pos:column="6">Curl_inet_pton<pos:position pos:line="167" pos:column="20"/></name><argument_list pos:line="167" pos:column="20">(<argument><expr><name pos:line="167" pos:column="21">AF_INET<pos:position pos:line="167" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="30">hostname<pos:position pos:line="167" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="167" pos:column="40">&amp;<pos:position pos:line="167" pos:column="45"/></operator><name pos:line="167" pos:column="41">addr<pos:position pos:line="167" pos:column="45"/></name></expr></argument>)<pos:position pos:line="167" pos:column="46"/></argument_list></call>
<cpp:ifdef pos:line="168" pos:column="1">#<cpp:directive pos:line="168" pos:column="2">ifdef<pos:position pos:line="168" pos:column="7"/></cpp:directive> <name pos:line="168" pos:column="8">ENABLE_IPV6<pos:position pos:line="168" pos:column="19"/></name></cpp:ifdef>
     <operator pos:line="169" pos:column="6">||<pos:position pos:line="169" pos:column="8"/></operator> <call><name pos:line="169" pos:column="9">Curl_inet_pton<pos:position pos:line="169" pos:column="23"/></name><argument_list pos:line="169" pos:column="23">(<argument><expr><name pos:line="169" pos:column="24">AF_INET6<pos:position pos:line="169" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="34">hostname<pos:position pos:line="169" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="169" pos:column="44">&amp;<pos:position pos:line="169" pos:column="49"/></operator><name pos:line="169" pos:column="45">addr6<pos:position pos:line="169" pos:column="50"/></name></expr></argument>)<pos:position pos:line="169" pos:column="51"/></argument_list></call></expr>
<cpp:endif pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">endif<pos:position pos:line="170" pos:column="7"/></cpp:directive></cpp:endif>
    )<pos:position pos:line="171" pos:column="6"/></condition><then pos:line="171" pos:column="6"> <block pos:line="171" pos:column="7">{
    <expr_stmt><expr><call><name pos:line="172" pos:column="5">infof<pos:position pos:line="172" pos:column="10"/></name><argument_list pos:line="172" pos:column="10">(<argument><expr><name pos:line="172" pos:column="11">data<pos:position pos:line="172" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="172" pos:column="17">"schannel: using IP address, SNI is not supported by OS.\n"<pos:position pos:line="172" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="78"/></expr_stmt>
  }<pos:position pos:line="173" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">ifdef<pos:position pos:line="175" pos:column="7"/></cpp:directive> <name pos:line="175" pos:column="8">HAS_ALPN<pos:position pos:line="175" pos:column="16"/></name></cpp:ifdef>
  <if pos:line="176" pos:column="3">if<condition pos:line="176" pos:column="5">(<expr><name><name pos:line="176" pos:column="6">BACKEND<pos:position pos:line="176" pos:column="13"/></name><operator pos:line="176" pos:column="13">-&gt;<pos:position pos:line="176" pos:column="18"/></operator><name pos:line="176" pos:column="15">use_alpn<pos:position pos:line="176" pos:column="23"/></name></name></expr>)<pos:position pos:line="176" pos:column="24"/></condition><then pos:line="176" pos:column="24"> <block pos:line="176" pos:column="25">{
    <decl_stmt><decl><type><name pos:line="177" pos:column="5">int<pos:position pos:line="177" pos:column="8"/></name></type> <name pos:line="177" pos:column="9">cur<pos:position pos:line="177" pos:column="12"/></name> <init pos:line="177" pos:column="13">= <expr><literal type="number" pos:line="177" pos:column="15">0<pos:position pos:line="177" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="177" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="178" pos:column="5">int<pos:position pos:line="178" pos:column="8"/></name></type> <name pos:line="178" pos:column="9">list_start_index<pos:position pos:line="178" pos:column="25"/></name> <init pos:line="178" pos:column="26">= <expr><literal type="number" pos:line="178" pos:column="28">0<pos:position pos:line="178" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="178" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="179" pos:column="5">unsigned<pos:position pos:line="179" pos:column="13"/></name> <name pos:line="179" pos:column="14">int<pos:position pos:line="179" pos:column="17"/></name> <modifier pos:line="179" pos:column="18">*<pos:position pos:line="179" pos:column="19"/></modifier></type><name pos:line="179" pos:column="19">extension_len<pos:position pos:line="179" pos:column="32"/></name> <init pos:line="179" pos:column="33">= <expr><name pos:line="179" pos:column="35">NULL<pos:position pos:line="179" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="179" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="180" pos:column="5">unsigned<pos:position pos:line="180" pos:column="13"/></name> <name pos:line="180" pos:column="14">short<pos:position pos:line="180" pos:column="19"/></name><modifier pos:line="180" pos:column="19">*<pos:position pos:line="180" pos:column="20"/></modifier></type> <name pos:line="180" pos:column="21">list_len<pos:position pos:line="180" pos:column="29"/></name> <init pos:line="180" pos:column="30">= <expr><name pos:line="180" pos:column="32">NULL<pos:position pos:line="180" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="180" pos:column="37"/></decl_stmt>

    <comment type="block" pos:line="182" pos:column="5">/* The first four bytes will be an unsigned int indicating number
       of bytes of data in the rest of the the buffer. */</comment>
    <expr_stmt><expr><name pos:line="184" pos:column="5">extension_len<pos:position pos:line="184" pos:column="18"/></name> <operator pos:line="184" pos:column="19">=<pos:position pos:line="184" pos:column="20"/></operator> <operator pos:line="184" pos:column="21">(<pos:position pos:line="184" pos:column="22"/></operator><name pos:line="184" pos:column="22">unsigned<pos:position pos:line="184" pos:column="30"/></name> <name pos:line="184" pos:column="31">int<pos:position pos:line="184" pos:column="34"/></name> <operator pos:line="184" pos:column="35">*<pos:position pos:line="184" pos:column="36"/></operator><operator pos:line="184" pos:column="36">)<pos:position pos:line="184" pos:column="37"/></operator><operator pos:line="184" pos:column="37">(<pos:position pos:line="184" pos:column="38"/></operator><operator pos:line="184" pos:column="38">&amp;<pos:position pos:line="184" pos:column="43"/></operator><name><name pos:line="184" pos:column="39">alpn_buffer<pos:position pos:line="184" pos:column="50"/></name><index pos:line="184" pos:column="50">[<expr><name pos:line="184" pos:column="51">cur<pos:position pos:line="184" pos:column="54"/></name></expr>]<pos:position pos:line="184" pos:column="55"/></index></name><operator pos:line="184" pos:column="55">)<pos:position pos:line="184" pos:column="56"/></operator></expr>;<pos:position pos:line="184" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="185" pos:column="5">cur<pos:position pos:line="185" pos:column="8"/></name> <operator pos:line="185" pos:column="9">+=<pos:position pos:line="185" pos:column="11"/></operator> sizeof<operator pos:line="185" pos:column="18">(<pos:position pos:line="185" pos:column="19"/></operator><name pos:line="185" pos:column="19">unsigned<pos:position pos:line="185" pos:column="27"/></name> <name pos:line="185" pos:column="28">int<pos:position pos:line="185" pos:column="31"/></name><operator pos:line="185" pos:column="31">)<pos:position pos:line="185" pos:column="32"/></operator></expr>;<pos:position pos:line="185" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="187" pos:column="5">/* The next four bytes are an indicator that this buffer will contain
       ALPN data, as opposed to NPN, for example. */</comment>
    <expr_stmt><expr><operator pos:line="189" pos:column="5">*<pos:position pos:line="189" pos:column="6"/></operator><operator pos:line="189" pos:column="6">(<pos:position pos:line="189" pos:column="7"/></operator><name pos:line="189" pos:column="7">unsigned<pos:position pos:line="189" pos:column="15"/></name> <name pos:line="189" pos:column="16">int<pos:position pos:line="189" pos:column="19"/></name> <operator pos:line="189" pos:column="20">*<pos:position pos:line="189" pos:column="21"/></operator><operator pos:line="189" pos:column="21">)<pos:position pos:line="189" pos:column="22"/></operator><operator pos:line="189" pos:column="22">&amp;<pos:position pos:line="189" pos:column="27"/></operator><name><name pos:line="189" pos:column="23">alpn_buffer<pos:position pos:line="189" pos:column="34"/></name><index pos:line="189" pos:column="34">[<expr><name pos:line="189" pos:column="35">cur<pos:position pos:line="189" pos:column="38"/></name></expr>]<pos:position pos:line="189" pos:column="39"/></index></name> <operator pos:line="189" pos:column="40">=<pos:position pos:line="189" pos:column="41"/></operator>
      <name pos:line="190" pos:column="7">SecApplicationProtocolNegotiationExt_ALPN<pos:position pos:line="190" pos:column="48"/></name></expr>;<pos:position pos:line="190" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="191" pos:column="5">cur<pos:position pos:line="191" pos:column="8"/></name> <operator pos:line="191" pos:column="9">+=<pos:position pos:line="191" pos:column="11"/></operator> sizeof<operator pos:line="191" pos:column="18">(<pos:position pos:line="191" pos:column="19"/></operator><name pos:line="191" pos:column="19">unsigned<pos:position pos:line="191" pos:column="27"/></name> <name pos:line="191" pos:column="28">int<pos:position pos:line="191" pos:column="31"/></name><operator pos:line="191" pos:column="31">)<pos:position pos:line="191" pos:column="32"/></operator></expr>;<pos:position pos:line="191" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="193" pos:column="5">/* The next two bytes will be an unsigned short indicating the number
       of bytes used to list the preferred protocols. */</comment>
    <expr_stmt><expr><name pos:line="195" pos:column="5">list_len<pos:position pos:line="195" pos:column="13"/></name> <operator pos:line="195" pos:column="14">=<pos:position pos:line="195" pos:column="15"/></operator> <operator pos:line="195" pos:column="16">(<pos:position pos:line="195" pos:column="17"/></operator><name pos:line="195" pos:column="17">unsigned<pos:position pos:line="195" pos:column="25"/></name> <name pos:line="195" pos:column="26">short<pos:position pos:line="195" pos:column="31"/></name><operator pos:line="195" pos:column="31">*<pos:position pos:line="195" pos:column="32"/></operator><operator pos:line="195" pos:column="32">)<pos:position pos:line="195" pos:column="33"/></operator><operator pos:line="195" pos:column="33">(<pos:position pos:line="195" pos:column="34"/></operator><operator pos:line="195" pos:column="34">&amp;<pos:position pos:line="195" pos:column="39"/></operator><name><name pos:line="195" pos:column="35">alpn_buffer<pos:position pos:line="195" pos:column="46"/></name><index pos:line="195" pos:column="46">[<expr><name pos:line="195" pos:column="47">cur<pos:position pos:line="195" pos:column="50"/></name></expr>]<pos:position pos:line="195" pos:column="51"/></index></name><operator pos:line="195" pos:column="51">)<pos:position pos:line="195" pos:column="52"/></operator></expr>;<pos:position pos:line="195" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name pos:line="196" pos:column="5">cur<pos:position pos:line="196" pos:column="8"/></name> <operator pos:line="196" pos:column="9">+=<pos:position pos:line="196" pos:column="11"/></operator> sizeof<operator pos:line="196" pos:column="18">(<pos:position pos:line="196" pos:column="19"/></operator><name pos:line="196" pos:column="19">unsigned<pos:position pos:line="196" pos:column="27"/></name> <name pos:line="196" pos:column="28">short<pos:position pos:line="196" pos:column="33"/></name><operator pos:line="196" pos:column="33">)<pos:position pos:line="196" pos:column="34"/></operator></expr>;<pos:position pos:line="196" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><name pos:line="198" pos:column="5">list_start_index<pos:position pos:line="198" pos:column="21"/></name> <operator pos:line="198" pos:column="22">=<pos:position pos:line="198" pos:column="23"/></operator> <name pos:line="198" pos:column="24">cur<pos:position pos:line="198" pos:column="27"/></name></expr>;<pos:position pos:line="198" pos:column="28"/></expr_stmt>

<cpp:ifdef pos:line="200" pos:column="1">#<cpp:directive pos:line="200" pos:column="2">ifdef<pos:position pos:line="200" pos:column="7"/></cpp:directive> <name pos:line="200" pos:column="8">USE_NGHTTP2<pos:position pos:line="200" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="201" pos:column="5">if<condition pos:line="201" pos:column="7">(<expr><name><name pos:line="201" pos:column="8">data<pos:position pos:line="201" pos:column="12"/></name><operator pos:line="201" pos:column="12">-&gt;<pos:position pos:line="201" pos:column="17"/></operator><name pos:line="201" pos:column="14">set<pos:position pos:line="201" pos:column="17"/></name><operator pos:line="201" pos:column="17">.<pos:position pos:line="201" pos:column="18"/></operator><name pos:line="201" pos:column="18">httpversion<pos:position pos:line="201" pos:column="29"/></name></name> <operator pos:line="201" pos:column="30">&gt;=<pos:position pos:line="201" pos:column="35"/></operator> <name pos:line="201" pos:column="33">CURL_HTTP_VERSION_2<pos:position pos:line="201" pos:column="52"/></name></expr>)<pos:position pos:line="201" pos:column="53"/></condition><then pos:line="201" pos:column="53"> <block pos:line="201" pos:column="54">{
      <expr_stmt><expr><call><name pos:line="202" pos:column="7">memcpy<pos:position pos:line="202" pos:column="13"/></name><argument_list pos:line="202" pos:column="13">(<argument><expr><operator pos:line="202" pos:column="14">&amp;<pos:position pos:line="202" pos:column="19"/></operator><name><name pos:line="202" pos:column="15">alpn_buffer<pos:position pos:line="202" pos:column="26"/></name><index pos:line="202" pos:column="26">[<expr><name pos:line="202" pos:column="27">cur<pos:position pos:line="202" pos:column="30"/></name></expr>]<pos:position pos:line="202" pos:column="31"/></index></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="33">NGHTTP2_PROTO_ALPN<pos:position pos:line="202" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="53">NGHTTP2_PROTO_ALPN_LEN<pos:position pos:line="202" pos:column="75"/></name></expr></argument>)<pos:position pos:line="202" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="77"/></expr_stmt>
      <expr_stmt><expr><name pos:line="203" pos:column="7">cur<pos:position pos:line="203" pos:column="10"/></name> <operator pos:line="203" pos:column="11">+=<pos:position pos:line="203" pos:column="13"/></operator> <name pos:line="203" pos:column="14">NGHTTP2_PROTO_ALPN_LEN<pos:position pos:line="203" pos:column="36"/></name></expr>;<pos:position pos:line="203" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="204" pos:column="7">infof<pos:position pos:line="204" pos:column="12"/></name><argument_list pos:line="204" pos:column="12">(<argument><expr><name pos:line="204" pos:column="13">data<pos:position pos:line="204" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="204" pos:column="19">"schannel: ALPN, offering %s\n"<pos:position pos:line="204" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="52">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="204" pos:column="76"/></name></expr></argument>)<pos:position pos:line="204" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="205" pos:column="6"/></block></then></if>
<cpp:endif pos:line="206" pos:column="1">#<cpp:directive pos:line="206" pos:column="2">endif<pos:position pos:line="206" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name pos:line="208" pos:column="5">alpn_buffer<pos:position pos:line="208" pos:column="16"/></name><index pos:line="208" pos:column="16">[<expr><name pos:line="208" pos:column="17">cur<pos:position pos:line="208" pos:column="20"/></name><operator pos:line="208" pos:column="20">++<pos:position pos:line="208" pos:column="22"/></operator></expr>]<pos:position pos:line="208" pos:column="23"/></index></name> <operator pos:line="208" pos:column="24">=<pos:position pos:line="208" pos:column="25"/></operator> <name pos:line="208" pos:column="26">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="208" pos:column="46"/></name></expr>;<pos:position pos:line="208" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="209" pos:column="5">memcpy<pos:position pos:line="209" pos:column="11"/></name><argument_list pos:line="209" pos:column="11">(<argument><expr><operator pos:line="209" pos:column="12">&amp;<pos:position pos:line="209" pos:column="17"/></operator><name><name pos:line="209" pos:column="13">alpn_buffer<pos:position pos:line="209" pos:column="24"/></name><index pos:line="209" pos:column="24">[<expr><name pos:line="209" pos:column="25">cur<pos:position pos:line="209" pos:column="28"/></name></expr>]<pos:position pos:line="209" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="209" pos:column="31">ALPN_HTTP_1_1<pos:position pos:line="209" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="209" pos:column="46">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="209" pos:column="66"/></name></expr></argument>)<pos:position pos:line="209" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name pos:line="210" pos:column="5">cur<pos:position pos:line="210" pos:column="8"/></name> <operator pos:line="210" pos:column="9">+=<pos:position pos:line="210" pos:column="11"/></operator> <name pos:line="210" pos:column="12">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="210" pos:column="32"/></name></expr>;<pos:position pos:line="210" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="211" pos:column="5">infof<pos:position pos:line="211" pos:column="10"/></name><argument_list pos:line="211" pos:column="10">(<argument><expr><name pos:line="211" pos:column="11">data<pos:position pos:line="211" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="211" pos:column="17">"schannel: ALPN, offering %s\n"<pos:position pos:line="211" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="211" pos:column="50">ALPN_HTTP_1_1<pos:position pos:line="211" pos:column="63"/></name></expr></argument>)<pos:position pos:line="211" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="65"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="213" pos:column="5">*<pos:position pos:line="213" pos:column="6"/></operator><name pos:line="213" pos:column="6">list_len<pos:position pos:line="213" pos:column="14"/></name> <operator pos:line="213" pos:column="15">=<pos:position pos:line="213" pos:column="16"/></operator> <call><name pos:line="213" pos:column="17">curlx_uitous<pos:position pos:line="213" pos:column="29"/></name><argument_list pos:line="213" pos:column="29">(<argument><expr><name pos:line="213" pos:column="30">cur<pos:position pos:line="213" pos:column="33"/></name> <operator pos:line="213" pos:column="34">-<pos:position pos:line="213" pos:column="35"/></operator> <name pos:line="213" pos:column="36">list_start_index<pos:position pos:line="213" pos:column="52"/></name></expr></argument>)<pos:position pos:line="213" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="214" pos:column="5">*<pos:position pos:line="214" pos:column="6"/></operator><name pos:line="214" pos:column="6">extension_len<pos:position pos:line="214" pos:column="19"/></name> <operator pos:line="214" pos:column="20">=<pos:position pos:line="214" pos:column="21"/></operator> <operator pos:line="214" pos:column="22">*<pos:position pos:line="214" pos:column="23"/></operator><name pos:line="214" pos:column="23">list_len<pos:position pos:line="214" pos:column="31"/></name> <operator pos:line="214" pos:column="32">+<pos:position pos:line="214" pos:column="33"/></operator> sizeof<operator pos:line="214" pos:column="40">(<pos:position pos:line="214" pos:column="41"/></operator><name pos:line="214" pos:column="41">unsigned<pos:position pos:line="214" pos:column="49"/></name> <name pos:line="214" pos:column="50">int<pos:position pos:line="214" pos:column="53"/></name><operator pos:line="214" pos:column="53">)<pos:position pos:line="214" pos:column="54"/></operator> <operator pos:line="214" pos:column="55">+<pos:position pos:line="214" pos:column="56"/></operator> sizeof<operator pos:line="214" pos:column="63">(<pos:position pos:line="214" pos:column="64"/></operator><name pos:line="214" pos:column="64">unsigned<pos:position pos:line="214" pos:column="72"/></name> <name pos:line="214" pos:column="73">short<pos:position pos:line="214" pos:column="78"/></name><operator pos:line="214" pos:column="78">)<pos:position pos:line="214" pos:column="79"/></operator></expr>;<pos:position pos:line="214" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="216" pos:column="5">InitSecBuffer<pos:position pos:line="216" pos:column="18"/></name><argument_list pos:line="216" pos:column="18">(<argument><expr><operator pos:line="216" pos:column="19">&amp;<pos:position pos:line="216" pos:column="24"/></operator><name pos:line="216" pos:column="20">inbuf<pos:position pos:line="216" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="27">SECBUFFER_APPLICATION_PROTOCOLS<pos:position pos:line="216" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="60">alpn_buffer<pos:position pos:line="216" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="73">cur<pos:position pos:line="216" pos:column="76"/></name></expr></argument>)<pos:position pos:line="216" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="217" pos:column="5">InitSecBufferDesc<pos:position pos:line="217" pos:column="22"/></name><argument_list pos:line="217" pos:column="22">(<argument><expr><operator pos:line="217" pos:column="23">&amp;<pos:position pos:line="217" pos:column="28"/></operator><name pos:line="217" pos:column="24">inbuf_desc<pos:position pos:line="217" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="217" pos:column="36">&amp;<pos:position pos:line="217" pos:column="41"/></operator><name pos:line="217" pos:column="37">inbuf<pos:position pos:line="217" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="217" pos:column="44">1<pos:position pos:line="217" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="217" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="218" pos:column="4"/></block></then>
  <else pos:line="219" pos:column="3">else
  <block pos:line="220" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="221" pos:column="5">InitSecBuffer<pos:position pos:line="221" pos:column="18"/></name><argument_list pos:line="221" pos:column="18">(<argument><expr><operator pos:line="221" pos:column="19">&amp;<pos:position pos:line="221" pos:column="24"/></operator><name pos:line="221" pos:column="20">inbuf<pos:position pos:line="221" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="27">SECBUFFER_EMPTY<pos:position pos:line="221" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="44">NULL<pos:position pos:line="221" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="221" pos:column="50">0<pos:position pos:line="221" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="221" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="222" pos:column="5">InitSecBufferDesc<pos:position pos:line="222" pos:column="22"/></name><argument_list pos:line="222" pos:column="22">(<argument><expr><operator pos:line="222" pos:column="23">&amp;<pos:position pos:line="222" pos:column="28"/></operator><name pos:line="222" pos:column="24">inbuf_desc<pos:position pos:line="222" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="222" pos:column="36">&amp;<pos:position pos:line="222" pos:column="41"/></operator><name pos:line="222" pos:column="37">inbuf<pos:position pos:line="222" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="222" pos:column="44">1<pos:position pos:line="222" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="222" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="223" pos:column="4"/></block></else></if>
<cpp:else pos:line="224" pos:column="1">#<cpp:directive pos:line="224" pos:column="2">else<pos:position pos:line="224" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="224" pos:column="7">/* HAS_ALPN */</comment>
  <expr_stmt><expr><call><name pos:line="225" pos:column="3">InitSecBuffer<pos:position pos:line="225" pos:column="16"/></name><argument_list pos:line="225" pos:column="16">(<argument><expr><operator pos:line="225" pos:column="17">&amp;<pos:position pos:line="225" pos:column="22"/></operator><name pos:line="225" pos:column="18">inbuf<pos:position pos:line="225" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="25">SECBUFFER_EMPTY<pos:position pos:line="225" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="42">NULL<pos:position pos:line="225" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="225" pos:column="48">0<pos:position pos:line="225" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="225" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="226" pos:column="3">InitSecBufferDesc<pos:position pos:line="226" pos:column="20"/></name><argument_list pos:line="226" pos:column="20">(<argument><expr><operator pos:line="226" pos:column="21">&amp;<pos:position pos:line="226" pos:column="26"/></operator><name pos:line="226" pos:column="22">inbuf_desc<pos:position pos:line="226" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="226" pos:column="34">&amp;<pos:position pos:line="226" pos:column="39"/></operator><name pos:line="226" pos:column="35">inbuf<pos:position pos:line="226" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="226" pos:column="42">1<pos:position pos:line="226" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="226" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="227" pos:column="1">#<cpp:directive pos:line="227" pos:column="2">endif<pos:position pos:line="227" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="229" pos:column="3">/* setup output buffer */</comment>
  <expr_stmt><expr><call><name pos:line="230" pos:column="3">InitSecBuffer<pos:position pos:line="230" pos:column="16"/></name><argument_list pos:line="230" pos:column="16">(<argument><expr><operator pos:line="230" pos:column="17">&amp;<pos:position pos:line="230" pos:column="22"/></operator><name pos:line="230" pos:column="18">outbuf<pos:position pos:line="230" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="230" pos:column="26">SECBUFFER_EMPTY<pos:position pos:line="230" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="230" pos:column="43">NULL<pos:position pos:line="230" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="230" pos:column="49">0<pos:position pos:line="230" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="230" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="231" pos:column="3">InitSecBufferDesc<pos:position pos:line="231" pos:column="20"/></name><argument_list pos:line="231" pos:column="20">(<argument><expr><operator pos:line="231" pos:column="21">&amp;<pos:position pos:line="231" pos:column="26"/></operator><name pos:line="231" pos:column="22">outbuf_desc<pos:position pos:line="231" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="231" pos:column="35">&amp;<pos:position pos:line="231" pos:column="40"/></operator><name pos:line="231" pos:column="36">outbuf<pos:position pos:line="231" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="231" pos:column="44">1<pos:position pos:line="231" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="231" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="47"/></expr_stmt>

  <comment type="block" pos:line="233" pos:column="3">/* setup request flags */</comment>
  <expr_stmt><expr><name><name pos:line="234" pos:column="3">BACKEND<pos:position pos:line="234" pos:column="10"/></name><operator pos:line="234" pos:column="10">-&gt;<pos:position pos:line="234" pos:column="15"/></operator><name pos:line="234" pos:column="12">req_flags<pos:position pos:line="234" pos:column="21"/></name></name> <operator pos:line="234" pos:column="22">=<pos:position pos:line="234" pos:column="23"/></operator> <name pos:line="234" pos:column="24">ISC_REQ_SEQUENCE_DETECT<pos:position pos:line="234" pos:column="47"/></name> <operator pos:line="234" pos:column="48">|<pos:position pos:line="234" pos:column="49"/></operator> <name pos:line="234" pos:column="50">ISC_REQ_REPLAY_DETECT<pos:position pos:line="234" pos:column="71"/></name> <operator pos:line="234" pos:column="72">|<pos:position pos:line="234" pos:column="73"/></operator>
    <name pos:line="235" pos:column="5">ISC_REQ_CONFIDENTIALITY<pos:position pos:line="235" pos:column="28"/></name> <operator pos:line="235" pos:column="29">|<pos:position pos:line="235" pos:column="30"/></operator> <name pos:line="235" pos:column="31">ISC_REQ_ALLOCATE_MEMORY<pos:position pos:line="235" pos:column="54"/></name> <operator pos:line="235" pos:column="55">|<pos:position pos:line="235" pos:column="56"/></operator>
    <name pos:line="236" pos:column="5">ISC_REQ_STREAM<pos:position pos:line="236" pos:column="19"/></name></expr>;<pos:position pos:line="236" pos:column="20"/></expr_stmt>

  <comment type="block" pos:line="238" pos:column="3">/* allocate memory for the security context handle */</comment>
  <expr_stmt><expr><name><name pos:line="239" pos:column="3">BACKEND<pos:position pos:line="239" pos:column="10"/></name><operator pos:line="239" pos:column="10">-&gt;<pos:position pos:line="239" pos:column="15"/></operator><name pos:line="239" pos:column="12">ctxt<pos:position pos:line="239" pos:column="16"/></name></name> <operator pos:line="239" pos:column="17">=<pos:position pos:line="239" pos:column="18"/></operator> <operator pos:line="239" pos:column="19">(<pos:position pos:line="239" pos:column="20"/></operator>struct <name pos:line="239" pos:column="27">curl_schannel_ctxt<pos:position pos:line="239" pos:column="45"/></name> <operator pos:line="239" pos:column="46">*<pos:position pos:line="239" pos:column="47"/></operator><operator pos:line="239" pos:column="47">)<pos:position pos:line="239" pos:column="48"/></operator>
    <call><name pos:line="240" pos:column="5">malloc<pos:position pos:line="240" pos:column="11"/></name><argument_list pos:line="240" pos:column="11">(<argument><expr><sizeof pos:line="240" pos:column="12">sizeof<argument_list pos:line="240" pos:column="18">(<argument><expr pos:line="240" pos:column="19">struct <name pos:line="240" pos:column="26">curl_schannel_ctxt<pos:position pos:line="240" pos:column="44"/></name></expr></argument>)<pos:position pos:line="240" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="240" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="47"/></expr_stmt>
  <if pos:line="241" pos:column="3">if<condition pos:line="241" pos:column="5">(<expr><operator pos:line="241" pos:column="6">!<pos:position pos:line="241" pos:column="7"/></operator><name><name pos:line="241" pos:column="7">BACKEND<pos:position pos:line="241" pos:column="14"/></name><operator pos:line="241" pos:column="14">-&gt;<pos:position pos:line="241" pos:column="19"/></operator><name pos:line="241" pos:column="16">ctxt<pos:position pos:line="241" pos:column="20"/></name></name></expr>)<pos:position pos:line="241" pos:column="21"/></condition><then pos:line="241" pos:column="21"> <block pos:line="241" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="242" pos:column="5">failf<pos:position pos:line="242" pos:column="10"/></name><argument_list pos:line="242" pos:column="10">(<argument><expr><name pos:line="242" pos:column="11">data<pos:position pos:line="242" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="242" pos:column="17">"schannel: unable to allocate memory"<pos:position pos:line="242" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="242" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="56"/></expr_stmt>
    <return pos:line="243" pos:column="5">return <expr><name pos:line="243" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="243" pos:column="31"/></name></expr>;<pos:position pos:line="243" pos:column="32"/></return>
  }<pos:position pos:line="244" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="245" pos:column="3">memset<pos:position pos:line="245" pos:column="9"/></name><argument_list pos:line="245" pos:column="9">(<argument><expr><name><name pos:line="245" pos:column="10">BACKEND<pos:position pos:line="245" pos:column="17"/></name><operator pos:line="245" pos:column="17">-&gt;<pos:position pos:line="245" pos:column="22"/></operator><name pos:line="245" pos:column="19">ctxt<pos:position pos:line="245" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="245" pos:column="25">0<pos:position pos:line="245" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="245" pos:column="28">sizeof<argument_list pos:line="245" pos:column="34">(<argument><expr pos:line="245" pos:column="35">struct <name pos:line="245" pos:column="42">curl_schannel_ctxt<pos:position pos:line="245" pos:column="60"/></name></expr></argument>)<pos:position pos:line="245" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="245" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="63"/></expr_stmt>

  <expr_stmt><expr><name pos:line="247" pos:column="3">host_name<pos:position pos:line="247" pos:column="12"/></name> <operator pos:line="247" pos:column="13">=<pos:position pos:line="247" pos:column="14"/></operator> <call><name pos:line="247" pos:column="15">Curl_convert_UTF8_to_tchar<pos:position pos:line="247" pos:column="41"/></name><argument_list pos:line="247" pos:column="41">(<argument><expr><name pos:line="247" pos:column="42">hostname<pos:position pos:line="247" pos:column="50"/></name></expr></argument>)<pos:position pos:line="247" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="52"/></expr_stmt>
  <if pos:line="248" pos:column="3">if<condition pos:line="248" pos:column="5">(<expr><operator pos:line="248" pos:column="6">!<pos:position pos:line="248" pos:column="7"/></operator><name pos:line="248" pos:column="7">host_name<pos:position pos:line="248" pos:column="16"/></name></expr>)<pos:position pos:line="248" pos:column="17"/></condition><then pos:line="248" pos:column="17">
    <block type="pseudo"><return pos:line="249" pos:column="5">return <expr><name pos:line="249" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="249" pos:column="31"/></name></expr>;<pos:position pos:line="249" pos:column="32"/></return></block></then></if>

  <comment type="block" pos:line="251" pos:column="3">/* Schannel InitializeSecurityContext:
     https://msdn.microsoft.com/en-us/library/windows/desktop/aa375924.aspx

     At the moment we don't pass inbuf unless we're using ALPN since we only
     use it for that, and Wine (for which we currently disable ALPN) is giving
     us problems with inbuf regardless. https://github.com/curl/curl/issues/983
  */</comment>
  <expr_stmt><expr><name pos:line="258" pos:column="3">sspi_status<pos:position pos:line="258" pos:column="14"/></name> <operator pos:line="258" pos:column="15">=<pos:position pos:line="258" pos:column="16"/></operator> <call><name><name pos:line="258" pos:column="17">s_pSecFn<pos:position pos:line="258" pos:column="25"/></name><operator pos:line="258" pos:column="25">-&gt;<pos:position pos:line="258" pos:column="30"/></operator><name pos:line="258" pos:column="27">InitializeSecurityContext<pos:position pos:line="258" pos:column="52"/></name></name><argument_list pos:line="258" pos:column="52">(
    <argument><expr><operator pos:line="259" pos:column="5">&amp;<pos:position pos:line="259" pos:column="10"/></operator><name><name pos:line="259" pos:column="6">BACKEND<pos:position pos:line="259" pos:column="13"/></name><operator pos:line="259" pos:column="13">-&gt;<pos:position pos:line="259" pos:column="18"/></operator><name pos:line="259" pos:column="15">cred<pos:position pos:line="259" pos:column="19"/></name><operator pos:line="259" pos:column="19">-&gt;<pos:position pos:line="259" pos:column="24"/></operator><name pos:line="259" pos:column="21">cred_handle<pos:position pos:line="259" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="259" pos:column="34">NULL<pos:position pos:line="259" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="259" pos:column="40">host_name<pos:position pos:line="259" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="259" pos:column="51">BACKEND<pos:position pos:line="259" pos:column="58"/></name><operator pos:line="259" pos:column="58">-&gt;<pos:position pos:line="259" pos:column="63"/></operator><name pos:line="259" pos:column="60">req_flags<pos:position pos:line="259" pos:column="69"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="259" pos:column="71">0<pos:position pos:line="259" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="259" pos:column="74">0<pos:position pos:line="259" pos:column="75"/></literal></expr></argument>,
    <argument><expr><operator pos:line="260" pos:column="5">(<pos:position pos:line="260" pos:column="6"/></operator><ternary><condition><expr><name><name pos:line="260" pos:column="6">BACKEND<pos:position pos:line="260" pos:column="13"/></name><operator pos:line="260" pos:column="13">-&gt;<pos:position pos:line="260" pos:column="18"/></operator><name pos:line="260" pos:column="15">use_alpn<pos:position pos:line="260" pos:column="23"/></name></name></expr> ?<pos:position pos:line="260" pos:column="25"/></condition><then pos:line="260" pos:column="25"> <expr><operator pos:line="260" pos:column="26">&amp;<pos:position pos:line="260" pos:column="31"/></operator><name pos:line="260" pos:column="27">inbuf_desc<pos:position pos:line="260" pos:column="37"/></name></expr> <pos:position pos:line="260" pos:column="38"/></then><else pos:line="260" pos:column="38">: <expr><name pos:line="260" pos:column="40">NULL<pos:position pos:line="260" pos:column="44"/></name></expr></else></ternary><operator pos:line="260" pos:column="44">)<pos:position pos:line="260" pos:column="45"/></operator></expr></argument>,
    <argument><expr><literal type="number" pos:line="261" pos:column="5">0<pos:position pos:line="261" pos:column="6"/></literal></expr></argument>, <argument><expr><operator pos:line="261" pos:column="8">&amp;<pos:position pos:line="261" pos:column="13"/></operator><name><name pos:line="261" pos:column="9">BACKEND<pos:position pos:line="261" pos:column="16"/></name><operator pos:line="261" pos:column="16">-&gt;<pos:position pos:line="261" pos:column="21"/></operator><name pos:line="261" pos:column="18">ctxt<pos:position pos:line="261" pos:column="22"/></name><operator pos:line="261" pos:column="22">-&gt;<pos:position pos:line="261" pos:column="27"/></operator><name pos:line="261" pos:column="24">ctxt_handle<pos:position pos:line="261" pos:column="35"/></name></name></expr></argument>,
    <argument><expr><operator pos:line="262" pos:column="5">&amp;<pos:position pos:line="262" pos:column="10"/></operator><name pos:line="262" pos:column="6">outbuf_desc<pos:position pos:line="262" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="262" pos:column="19">&amp;<pos:position pos:line="262" pos:column="24"/></operator><name><name pos:line="262" pos:column="20">BACKEND<pos:position pos:line="262" pos:column="27"/></name><operator pos:line="262" pos:column="27">-&gt;<pos:position pos:line="262" pos:column="32"/></operator><name pos:line="262" pos:column="29">ret_flags<pos:position pos:line="262" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="262" pos:column="40">&amp;<pos:position pos:line="262" pos:column="45"/></operator><name><name pos:line="262" pos:column="41">BACKEND<pos:position pos:line="262" pos:column="48"/></name><operator pos:line="262" pos:column="48">-&gt;<pos:position pos:line="262" pos:column="53"/></operator><name pos:line="262" pos:column="50">ctxt<pos:position pos:line="262" pos:column="54"/></name><operator pos:line="262" pos:column="54">-&gt;<pos:position pos:line="262" pos:column="59"/></operator><name pos:line="262" pos:column="56">time_stamp<pos:position pos:line="262" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="262" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="68"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="264" pos:column="3">Curl_unicodefree<pos:position pos:line="264" pos:column="19"/></name><argument_list pos:line="264" pos:column="19">(<argument><expr><name pos:line="264" pos:column="20">host_name<pos:position pos:line="264" pos:column="29"/></name></expr></argument>)<pos:position pos:line="264" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="31"/></expr_stmt>

  <if pos:line="266" pos:column="3">if<condition pos:line="266" pos:column="5">(<expr><name pos:line="266" pos:column="6">sspi_status<pos:position pos:line="266" pos:column="17"/></name> <operator pos:line="266" pos:column="18">!=<pos:position pos:line="266" pos:column="20"/></operator> <name pos:line="266" pos:column="21">SEC_I_CONTINUE_NEEDED<pos:position pos:line="266" pos:column="42"/></name></expr>)<pos:position pos:line="266" pos:column="43"/></condition><then pos:line="266" pos:column="43"> <block pos:line="266" pos:column="44">{
    <if pos:line="267" pos:column="5">if<condition pos:line="267" pos:column="7">(<expr><name pos:line="267" pos:column="8">sspi_status<pos:position pos:line="267" pos:column="19"/></name> <operator pos:line="267" pos:column="20">==<pos:position pos:line="267" pos:column="22"/></operator> <name pos:line="267" pos:column="23">SEC_E_WRONG_PRINCIPAL<pos:position pos:line="267" pos:column="44"/></name></expr>)<pos:position pos:line="267" pos:column="45"/></condition><then pos:line="267" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="268" pos:column="7">failf<pos:position pos:line="268" pos:column="12"/></name><argument_list pos:line="268" pos:column="12">(<argument><expr><name pos:line="268" pos:column="13">data<pos:position pos:line="268" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="268" pos:column="19">"schannel: SNI or certificate check failed: %s"<pos:position pos:line="268" pos:column="66"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="269" pos:column="13">Curl_sspi_strerror<pos:position pos:line="269" pos:column="31"/></name><argument_list pos:line="269" pos:column="31">(<argument><expr><name pos:line="269" pos:column="32">conn<pos:position pos:line="269" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="269" pos:column="38">sspi_status<pos:position pos:line="269" pos:column="49"/></name></expr></argument>)<pos:position pos:line="269" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="269" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="52"/></expr_stmt></block></then>
    <else pos:line="270" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="271" pos:column="7">failf<pos:position pos:line="271" pos:column="12"/></name><argument_list pos:line="271" pos:column="12">(<argument><expr><name pos:line="271" pos:column="13">data<pos:position pos:line="271" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="271" pos:column="19">"schannel: initial InitializeSecurityContext failed: %s"<pos:position pos:line="271" pos:column="75"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="272" pos:column="13">Curl_sspi_strerror<pos:position pos:line="272" pos:column="31"/></name><argument_list pos:line="272" pos:column="31">(<argument><expr><name pos:line="272" pos:column="32">conn<pos:position pos:line="272" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="272" pos:column="38">sspi_status<pos:position pos:line="272" pos:column="49"/></name></expr></argument>)<pos:position pos:line="272" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="272" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="52"/></expr_stmt></block></else></if>
    <expr_stmt><expr><call><name pos:line="273" pos:column="5">Curl_safefree<pos:position pos:line="273" pos:column="18"/></name><argument_list pos:line="273" pos:column="18">(<argument><expr><name><name pos:line="273" pos:column="19">BACKEND<pos:position pos:line="273" pos:column="26"/></name><operator pos:line="273" pos:column="26">-&gt;<pos:position pos:line="273" pos:column="31"/></operator><name pos:line="273" pos:column="28">ctxt<pos:position pos:line="273" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="273" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="34"/></expr_stmt>
    <return pos:line="274" pos:column="5">return <expr><name pos:line="274" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="274" pos:column="35"/></name></expr>;<pos:position pos:line="274" pos:column="36"/></return>
  }<pos:position pos:line="275" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="277" pos:column="3">infof<pos:position pos:line="277" pos:column="8"/></name><argument_list pos:line="277" pos:column="8">(<argument><expr><name pos:line="277" pos:column="9">data<pos:position pos:line="277" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="277" pos:column="15">"schannel: sending initial handshake data: "<pos:position pos:line="277" pos:column="59"/></literal>
        <literal type="string" pos:line="278" pos:column="9">"sending %lu bytes...\n"<pos:position pos:line="278" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="278" pos:column="35">outbuf<pos:position pos:line="278" pos:column="41"/></name><operator pos:line="278" pos:column="41">.<pos:position pos:line="278" pos:column="42"/></operator><name pos:line="278" pos:column="42">cbBuffer<pos:position pos:line="278" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="278" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="278" pos:column="52"/></expr_stmt>

  <comment type="block" pos:line="280" pos:column="3">/* send initial handshake data which is now stored in output buffer */</comment>
  <expr_stmt><expr><name pos:line="281" pos:column="3">result<pos:position pos:line="281" pos:column="9"/></name> <operator pos:line="281" pos:column="10">=<pos:position pos:line="281" pos:column="11"/></operator> <call><name pos:line="281" pos:column="12">Curl_write_plain<pos:position pos:line="281" pos:column="28"/></name><argument_list pos:line="281" pos:column="28">(<argument><expr><name pos:line="281" pos:column="29">conn<pos:position pos:line="281" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="281" pos:column="35">conn<pos:position pos:line="281" pos:column="39"/></name><operator pos:line="281" pos:column="39">-&gt;<pos:position pos:line="281" pos:column="44"/></operator><name pos:line="281" pos:column="41">sock<pos:position pos:line="281" pos:column="45"/></name><index pos:line="281" pos:column="45">[<expr><name pos:line="281" pos:column="46">sockindex<pos:position pos:line="281" pos:column="55"/></name></expr>]<pos:position pos:line="281" pos:column="56"/></index></name></expr></argument>, <argument><expr><name><name pos:line="281" pos:column="58">outbuf<pos:position pos:line="281" pos:column="64"/></name><operator pos:line="281" pos:column="64">.<pos:position pos:line="281" pos:column="65"/></operator><name pos:line="281" pos:column="65">pvBuffer<pos:position pos:line="281" pos:column="73"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="282" pos:column="29">outbuf<pos:position pos:line="282" pos:column="35"/></name><operator pos:line="282" pos:column="35">.<pos:position pos:line="282" pos:column="36"/></operator><name pos:line="282" pos:column="36">cbBuffer<pos:position pos:line="282" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="282" pos:column="46">&amp;<pos:position pos:line="282" pos:column="51"/></operator><name pos:line="282" pos:column="47">written<pos:position pos:line="282" pos:column="54"/></name></expr></argument>)<pos:position pos:line="282" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="282" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><call><name><name pos:line="283" pos:column="3">s_pSecFn<pos:position pos:line="283" pos:column="11"/></name><operator pos:line="283" pos:column="11">-&gt;<pos:position pos:line="283" pos:column="16"/></operator><name pos:line="283" pos:column="13">FreeContextBuffer<pos:position pos:line="283" pos:column="30"/></name></name><argument_list pos:line="283" pos:column="30">(<argument><expr><name><name pos:line="283" pos:column="31">outbuf<pos:position pos:line="283" pos:column="37"/></name><operator pos:line="283" pos:column="37">.<pos:position pos:line="283" pos:column="38"/></operator><name pos:line="283" pos:column="38">pvBuffer<pos:position pos:line="283" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="283" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="48"/></expr_stmt>
  <if pos:line="284" pos:column="3">if<condition pos:line="284" pos:column="5">(<expr><operator pos:line="284" pos:column="6">(<pos:position pos:line="284" pos:column="7"/></operator><name pos:line="284" pos:column="7">result<pos:position pos:line="284" pos:column="13"/></name> <operator pos:line="284" pos:column="14">!=<pos:position pos:line="284" pos:column="16"/></operator> <name pos:line="284" pos:column="17">CURLE_OK<pos:position pos:line="284" pos:column="25"/></name><operator pos:line="284" pos:column="25">)<pos:position pos:line="284" pos:column="26"/></operator> <operator pos:line="284" pos:column="27">||<pos:position pos:line="284" pos:column="29"/></operator> <operator pos:line="284" pos:column="30">(<pos:position pos:line="284" pos:column="31"/></operator><name><name pos:line="284" pos:column="31">outbuf<pos:position pos:line="284" pos:column="37"/></name><operator pos:line="284" pos:column="37">.<pos:position pos:line="284" pos:column="38"/></operator><name pos:line="284" pos:column="38">cbBuffer<pos:position pos:line="284" pos:column="46"/></name></name> <operator pos:line="284" pos:column="47">!=<pos:position pos:line="284" pos:column="49"/></operator> <operator pos:line="284" pos:column="50">(<pos:position pos:line="284" pos:column="51"/></operator><name pos:line="284" pos:column="51">size_t<pos:position pos:line="284" pos:column="57"/></name><operator pos:line="284" pos:column="57">)<pos:position pos:line="284" pos:column="58"/></operator> <name pos:line="284" pos:column="59">written<pos:position pos:line="284" pos:column="66"/></name><operator pos:line="284" pos:column="66">)<pos:position pos:line="284" pos:column="67"/></operator></expr>)<pos:position pos:line="284" pos:column="68"/></condition><then pos:line="284" pos:column="68"> <block pos:line="284" pos:column="69">{
    <expr_stmt><expr><call><name pos:line="285" pos:column="5">failf<pos:position pos:line="285" pos:column="10"/></name><argument_list pos:line="285" pos:column="10">(<argument><expr><name pos:line="285" pos:column="11">data<pos:position pos:line="285" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="285" pos:column="17">"schannel: failed to send initial handshake data: "<pos:position pos:line="285" pos:column="68"/></literal>
          <literal type="string" pos:line="286" pos:column="11">"sent %zd of %lu bytes"<pos:position pos:line="286" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="286" pos:column="36">written<pos:position pos:line="286" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="286" pos:column="45">outbuf<pos:position pos:line="286" pos:column="51"/></name><operator pos:line="286" pos:column="51">.<pos:position pos:line="286" pos:column="52"/></operator><name pos:line="286" pos:column="52">cbBuffer<pos:position pos:line="286" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="286" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="286" pos:column="62"/></expr_stmt>
    <return pos:line="287" pos:column="5">return <expr><name pos:line="287" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="287" pos:column="35"/></name></expr>;<pos:position pos:line="287" pos:column="36"/></return>
  }<pos:position pos:line="288" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="290" pos:column="3">infof<pos:position pos:line="290" pos:column="8"/></name><argument_list pos:line="290" pos:column="8">(<argument><expr><name pos:line="290" pos:column="9">data<pos:position pos:line="290" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="290" pos:column="15">"schannel: sent initial handshake data: "<pos:position pos:line="290" pos:column="56"/></literal>
        <literal type="string" pos:line="291" pos:column="9">"sent %zd bytes\n"<pos:position pos:line="291" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="291" pos:column="29">written<pos:position pos:line="291" pos:column="36"/></name></expr></argument>)<pos:position pos:line="291" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="293" pos:column="3">BACKEND<pos:position pos:line="293" pos:column="10"/></name><operator pos:line="293" pos:column="10">-&gt;<pos:position pos:line="293" pos:column="15"/></operator><name pos:line="293" pos:column="12">recv_unrecoverable_err<pos:position pos:line="293" pos:column="34"/></name></name> <operator pos:line="293" pos:column="35">=<pos:position pos:line="293" pos:column="36"/></operator> <name pos:line="293" pos:column="37">CURLE_OK<pos:position pos:line="293" pos:column="45"/></name></expr>;<pos:position pos:line="293" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="294" pos:column="3">BACKEND<pos:position pos:line="294" pos:column="10"/></name><operator pos:line="294" pos:column="10">-&gt;<pos:position pos:line="294" pos:column="15"/></operator><name pos:line="294" pos:column="12">recv_sspi_close_notify<pos:position pos:line="294" pos:column="34"/></name></name> <operator pos:line="294" pos:column="35">=<pos:position pos:line="294" pos:column="36"/></operator> <literal type="boolean" pos:line="294" pos:column="37">false<pos:position pos:line="294" pos:column="42"/></literal></expr>;<pos:position pos:line="294" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="295" pos:column="3">BACKEND<pos:position pos:line="295" pos:column="10"/></name><operator pos:line="295" pos:column="10">-&gt;<pos:position pos:line="295" pos:column="15"/></operator><name pos:line="295" pos:column="12">recv_connection_closed<pos:position pos:line="295" pos:column="34"/></name></name> <operator pos:line="295" pos:column="35">=<pos:position pos:line="295" pos:column="36"/></operator> <literal type="boolean" pos:line="295" pos:column="37">false<pos:position pos:line="295" pos:column="42"/></literal></expr>;<pos:position pos:line="295" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="296" pos:column="3">BACKEND<pos:position pos:line="296" pos:column="10"/></name><operator pos:line="296" pos:column="10">-&gt;<pos:position pos:line="296" pos:column="15"/></operator><name pos:line="296" pos:column="12">encdata_is_incomplete<pos:position pos:line="296" pos:column="33"/></name></name> <operator pos:line="296" pos:column="34">=<pos:position pos:line="296" pos:column="35"/></operator> <literal type="boolean" pos:line="296" pos:column="36">false<pos:position pos:line="296" pos:column="41"/></literal></expr>;<pos:position pos:line="296" pos:column="42"/></expr_stmt>

  <comment type="block" pos:line="298" pos:column="3">/* continue to second handshake step */</comment>
  <expr_stmt><expr><name><name pos:line="299" pos:column="3">connssl<pos:position pos:line="299" pos:column="10"/></name><operator pos:line="299" pos:column="10">-&gt;<pos:position pos:line="299" pos:column="15"/></operator><name pos:line="299" pos:column="12">connecting_state<pos:position pos:line="299" pos:column="28"/></name></name> <operator pos:line="299" pos:column="29">=<pos:position pos:line="299" pos:column="30"/></operator> <name pos:line="299" pos:column="31">ssl_connect_2<pos:position pos:line="299" pos:column="44"/></name></expr>;<pos:position pos:line="299" pos:column="45"/></expr_stmt>

  <return pos:line="301" pos:column="3">return <expr><name pos:line="301" pos:column="10">CURLE_OK<pos:position pos:line="301" pos:column="18"/></name></expr>;<pos:position pos:line="301" pos:column="19"/></return>
}<pos:position pos:line="302" pos:column="2"/></block></function></unit>
