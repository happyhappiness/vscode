<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_698_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ProcessRequest<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">httprequest<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">req<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">line<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><operator pos:line="3" pos:column="16">&amp;<pos:position pos:line="3" pos:column="21"/></operator><name><name pos:line="3" pos:column="17">req<pos:position pos:line="3" pos:column="20"/></name><operator pos:line="3" pos:column="20">-&gt;<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="22">reqbuf<pos:position pos:line="3" pos:column="28"/></name><index pos:line="3" pos:column="28">[<expr><name><name pos:line="3" pos:column="29">req<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">checkindex<pos:position pos:line="3" pos:column="44"/></name></name></expr>]<pos:position pos:line="3" pos:column="45"/></index></name></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">bool<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">chunked<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name pos:line="4" pos:column="18">FALSE<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><name pos:line="5" pos:column="10">char<pos:position pos:line="5" pos:column="14"/></name></type> <name><name pos:line="5" pos:column="15">request<pos:position pos:line="5" pos:column="22"/></name><index pos:line="5" pos:column="22">[<expr><name pos:line="5" pos:column="23">REQUEST_KEYWORD_SIZE<pos:position pos:line="5" pos:column="43"/></name></expr>]<pos:position pos:line="5" pos:column="44"/></index></name></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="6" pos:column="3">static<pos:position pos:line="6" pos:column="9"/></specifier> <type><name pos:line="6" pos:column="10">char<pos:position pos:line="6" pos:column="14"/></name></type> <name><name pos:line="6" pos:column="15">doc<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">MAXDOCNAMELEN<pos:position pos:line="6" pos:column="32"/></name></expr>]<pos:position pos:line="6" pos:column="33"/></index></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">logbuf<pos:position pos:line="7" pos:column="14"/></name><index pos:line="7" pos:column="14">[<expr><literal type="number" pos:line="7" pos:column="15">456<pos:position pos:line="7" pos:column="18"/></literal></expr>]<pos:position pos:line="7" pos:column="19"/></index></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">prot_major<pos:position pos:line="8" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="19">prot_minor<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">end<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><call><name pos:line="9" pos:column="15">strstr<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">line<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">end_of_headers<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="11" pos:column="3">req<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">-&gt;<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="8">callcount<pos:position pos:line="11" pos:column="17"/></name></name><operator pos:line="11" pos:column="17">++<pos:position pos:line="11" pos:column="19"/></operator></expr>;<pos:position pos:line="11" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">logmsg<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><literal type="string" pos:line="13" pos:column="10">"Process %d bytes request%s"<pos:position pos:line="13" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="40">req<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">-&gt;<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="45">offset<pos:position pos:line="13" pos:column="51"/></name></name></expr></argument>,
         <argument><expr><ternary><condition><expr><name><name pos:line="14" pos:column="10">req<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">-&gt;<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="15">callcount<pos:position pos:line="14" pos:column="24"/></name></name> <operator pos:line="14" pos:column="25">&gt;<pos:position pos:line="14" pos:column="29"/></operator> <literal type="number" pos:line="14" pos:column="27">1<pos:position pos:line="14" pos:column="28"/></literal></expr>?<pos:position pos:line="14" pos:column="29"/></condition><then><expr><literal type="string" pos:line="14" pos:column="29">" [CONTINUED]"<pos:position pos:line="14" pos:column="43"/></literal></expr></then><else pos:line="14" pos:column="43">:<expr><literal type="string" pos:line="14" pos:column="44">""<pos:position pos:line="14" pos:column="46"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* try to figure out the request characteristics as soon as possible, but
     only once! */</comment>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">use_gopher<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">&amp;&amp;<pos:position pos:line="19" pos:column="27"/></operator>
     <operator pos:line="20" pos:column="6">(<pos:position pos:line="20" pos:column="7"/></operator><name><name pos:line="20" pos:column="7">req<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">testno<pos:position pos:line="20" pos:column="18"/></name></name> <operator pos:line="20" pos:column="19">==<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">DOCNUMBER_NOTHING<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">)<pos:position pos:line="20" pos:column="40"/></operator> <operator pos:line="20" pos:column="41">&amp;&amp;<pos:position pos:line="20" pos:column="51"/></operator>
     <operator pos:line="21" pos:column="6">!<pos:position pos:line="21" pos:column="7"/></operator><call><name pos:line="21" pos:column="7">strncmp<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><literal type="string" pos:line="21" pos:column="15">"/verifiedserver"<pos:position pos:line="21" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="34">line<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="40">15<pos:position pos:line="21" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="44"/></condition><then pos:line="21" pos:column="44"> <block pos:line="21" pos:column="45">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">logmsg<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="string" pos:line="22" pos:column="12">"Are-we-friendly question received"<pos:position pos:line="22" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">req<pos:position pos:line="23" pos:column="8"/></name><operator pos:line="23" pos:column="8">-&gt;<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="10">testno<pos:position pos:line="23" pos:column="16"/></name></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">DOCNUMBER_WERULEZ<pos:position pos:line="23" pos:column="36"/></name></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><literal type="number" pos:line="24" pos:column="12">1<pos:position pos:line="24" pos:column="13"/></literal></expr>;<pos:position pos:line="24" pos:column="14"/></return> <comment type="block" pos:line="24" pos:column="15">/* done */</comment>
  }<pos:position pos:line="25" pos:column="4"/></block></then>

  <elseif pos:line="27" pos:column="3">else <if pos:line="27" pos:column="8">if<condition pos:line="27" pos:column="10">(<expr><operator pos:line="27" pos:column="11">(<pos:position pos:line="27" pos:column="12"/></operator><name><name pos:line="27" pos:column="12">req<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">testno<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">==<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">DOCNUMBER_NOTHING<pos:position pos:line="27" pos:column="44"/></name><operator pos:line="27" pos:column="44">)<pos:position pos:line="27" pos:column="45"/></operator> <operator pos:line="27" pos:column="46">&amp;&amp;<pos:position pos:line="27" pos:column="56"/></operator>
     <call><name pos:line="28" pos:column="6">sscanf<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name pos:line="28" pos:column="13">line<pos:position pos:line="28" pos:column="17"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="29" pos:column="13">"%"<pos:position pos:line="29" pos:column="16"/></literal> <name pos:line="29" pos:column="17">REQUEST_KEYWORD_SIZE_TXT<pos:position pos:line="29" pos:column="41"/></name><literal type="string" pos:line="29" pos:column="41">"s %"<pos:position pos:line="29" pos:column="46"/></literal> <name pos:line="29" pos:column="47">MAXDOCNAMELEN_TXT<pos:position pos:line="29" pos:column="64"/></name> <literal type="string" pos:line="29" pos:column="65">"s HTTP/%d.%d"<pos:position pos:line="29" pos:column="79"/></literal></expr></argument>,
            <argument><expr><name pos:line="30" pos:column="13">request<pos:position pos:line="30" pos:column="20"/></name></expr></argument>,
            <argument><expr><name pos:line="31" pos:column="13">doc<pos:position pos:line="31" pos:column="16"/></name></expr></argument>,
            <argument><expr><operator pos:line="32" pos:column="13">&amp;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="14">prot_major<pos:position pos:line="32" pos:column="24"/></name></expr></argument>,
            <argument><expr><operator pos:line="33" pos:column="13">&amp;<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="14">prot_minor<pos:position pos:line="33" pos:column="24"/></name></expr></argument>)<pos:position pos:line="33" pos:column="25"/></argument_list></call> <operator pos:line="33" pos:column="26">==<pos:position pos:line="33" pos:column="28"/></operator> <literal type="number" pos:line="33" pos:column="29">4<pos:position pos:line="33" pos:column="30"/></literal></expr>)<pos:position pos:line="33" pos:column="31"/></condition><then pos:line="33" pos:column="31"> <block pos:line="33" pos:column="32">{
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">char<pos:position pos:line="34" pos:column="9"/></name> <modifier pos:line="34" pos:column="10">*<pos:position pos:line="34" pos:column="11"/></modifier></type><name pos:line="34" pos:column="11">ptr<pos:position pos:line="34" pos:column="14"/></name></decl>;<pos:position pos:line="34" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="36" pos:column="5">req<pos:position pos:line="36" pos:column="8"/></name><operator pos:line="36" pos:column="8">-&gt;<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="10">prot_version<pos:position pos:line="36" pos:column="22"/></name></name> <operator pos:line="36" pos:column="23">=<pos:position pos:line="36" pos:column="24"/></operator> <name pos:line="36" pos:column="25">prot_major<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">*<pos:position pos:line="36" pos:column="36"/></operator><literal type="number" pos:line="36" pos:column="36">10<pos:position pos:line="36" pos:column="38"/></literal> <operator pos:line="36" pos:column="39">+<pos:position pos:line="36" pos:column="40"/></operator> <name pos:line="36" pos:column="41">prot_minor<pos:position pos:line="36" pos:column="51"/></name></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* find the last slash */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">ptr<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">=<pos:position pos:line="39" pos:column="10"/></operator> <call><name pos:line="39" pos:column="11">strrchr<pos:position pos:line="39" pos:column="18"/></name><argument_list pos:line="39" pos:column="18">(<argument><expr><name pos:line="39" pos:column="19">doc<pos:position pos:line="39" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="39" pos:column="24">'/'<pos:position pos:line="39" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="41" pos:column="5">/* get the number after it */</comment>
    <if pos:line="42" pos:column="5">if<condition pos:line="42" pos:column="7">(<expr><name pos:line="42" pos:column="8">ptr<pos:position pos:line="42" pos:column="11"/></name></expr>)<pos:position pos:line="42" pos:column="12"/></condition><then pos:line="42" pos:column="12"> <block pos:line="42" pos:column="13">{
      <if pos:line="43" pos:column="7">if<condition pos:line="43" pos:column="9">(<expr><operator pos:line="43" pos:column="10">(<pos:position pos:line="43" pos:column="11"/></operator><call><name pos:line="43" pos:column="11">strlen<pos:position pos:line="43" pos:column="17"/></name><argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">doc<pos:position pos:line="43" pos:column="21"/></name></expr></argument>)<pos:position pos:line="43" pos:column="22"/></argument_list></call> <operator pos:line="43" pos:column="23">+<pos:position pos:line="43" pos:column="24"/></operator> <call><name pos:line="43" pos:column="25">strlen<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">request<pos:position pos:line="43" pos:column="39"/></name></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></call><operator pos:line="43" pos:column="40">)<pos:position pos:line="43" pos:column="41"/></operator> <operator pos:line="43" pos:column="42">&lt;<pos:position pos:line="43" pos:column="46"/></operator> <literal type="number" pos:line="43" pos:column="44">400<pos:position pos:line="43" pos:column="47"/></literal></expr>)<pos:position pos:line="43" pos:column="48"/></condition><then pos:line="43" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="9">snprintf<pos:position pos:line="44" pos:column="17"/></name><argument_list pos:line="44" pos:column="17">(<argument><expr><name pos:line="44" pos:column="18">logbuf<pos:position pos:line="44" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="26">sizeof<argument_list pos:line="44" pos:column="32">(<argument><expr><name pos:line="44" pos:column="33">logbuf<pos:position pos:line="44" pos:column="39"/></name></expr></argument>)<pos:position pos:line="44" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="42">"Got request: %s %s HTTP/%d.%d"<pos:position pos:line="44" pos:column="73"/></literal></expr></argument>,
                 <argument><expr><name pos:line="45" pos:column="18">request<pos:position pos:line="45" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="27">doc<pos:position pos:line="45" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="32">prot_major<pos:position pos:line="45" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="44">prot_minor<pos:position pos:line="45" pos:column="54"/></name></expr></argument>)<pos:position pos:line="45" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="56"/></expr_stmt></block></then>
      <else pos:line="46" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="9">snprintf<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">logbuf<pos:position pos:line="47" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="26">sizeof<argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">logbuf<pos:position pos:line="47" pos:column="39"/></name></expr></argument>)<pos:position pos:line="47" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="42">"Got a *HUGE* request HTTP/%d.%d"<pos:position pos:line="47" pos:column="75"/></literal></expr></argument>,
                 <argument><expr><name pos:line="48" pos:column="18">prot_major<pos:position pos:line="48" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="30">prot_minor<pos:position pos:line="48" pos:column="40"/></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt></block></else></if>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">logmsg<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><literal type="string" pos:line="49" pos:column="14">"%s"<pos:position pos:line="49" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="20">logbuf<pos:position pos:line="49" pos:column="26"/></name></expr></argument>)<pos:position pos:line="49" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>

      <if pos:line="51" pos:column="7">if<condition pos:line="51" pos:column="9">(<expr><operator pos:line="51" pos:column="10">!<pos:position pos:line="51" pos:column="11"/></operator><call><name pos:line="51" pos:column="11">strncmp<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><literal type="string" pos:line="51" pos:column="19">"/verifiedserver"<pos:position pos:line="51" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="38">ptr<pos:position pos:line="51" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="43">15<pos:position pos:line="51" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="47"/></condition><then pos:line="51" pos:column="47"> <block pos:line="51" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">logmsg<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><literal type="string" pos:line="52" pos:column="16">"Are-we-friendly question received"<pos:position pos:line="52" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="53" pos:column="9">req<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">testno<pos:position pos:line="53" pos:column="20"/></name></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <name pos:line="53" pos:column="23">DOCNUMBER_WERULEZ<pos:position pos:line="53" pos:column="40"/></name></expr>;<pos:position pos:line="53" pos:column="41"/></expr_stmt>
        <return pos:line="54" pos:column="9">return <expr><literal type="number" pos:line="54" pos:column="16">1<pos:position pos:line="54" pos:column="17"/></literal></expr>;<pos:position pos:line="54" pos:column="18"/></return> <comment type="block" pos:line="54" pos:column="19">/* done */</comment>
      }<pos:position pos:line="55" pos:column="8"/></block></then></if>

      <if pos:line="57" pos:column="7">if<condition pos:line="57" pos:column="9">(<expr><operator pos:line="57" pos:column="10">!<pos:position pos:line="57" pos:column="11"/></operator><call><name pos:line="57" pos:column="11">strncmp<pos:position pos:line="57" pos:column="18"/></name><argument_list pos:line="57" pos:column="18">(<argument><expr><literal type="string" pos:line="57" pos:column="19">"/quit"<pos:position pos:line="57" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="28">ptr<pos:position pos:line="57" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="33">5<pos:position pos:line="57" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="36"/></condition><then pos:line="57" pos:column="36"> <block pos:line="57" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">logmsg<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><literal type="string" pos:line="58" pos:column="16">"Request-to-quit received"<pos:position pos:line="58" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">req<pos:position pos:line="59" pos:column="12"/></name><operator pos:line="59" pos:column="12">-&gt;<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="14">testno<pos:position pos:line="59" pos:column="20"/></name></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <name pos:line="59" pos:column="23">DOCNUMBER_QUIT<pos:position pos:line="59" pos:column="37"/></name></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>
        <return pos:line="60" pos:column="9">return <expr><literal type="number" pos:line="60" pos:column="16">1<pos:position pos:line="60" pos:column="17"/></literal></expr>;<pos:position pos:line="60" pos:column="18"/></return> <comment type="block" pos:line="60" pos:column="19">/* done */</comment>
      }<pos:position pos:line="61" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="63" pos:column="7">ptr<pos:position pos:line="63" pos:column="10"/></name><operator pos:line="63" pos:column="10">++<pos:position pos:line="63" pos:column="12"/></operator></expr>;<pos:position pos:line="63" pos:column="13"/></expr_stmt> <comment type="block" pos:line="63" pos:column="14">/* skip the slash */</comment>

      <comment type="block" pos:line="65" pos:column="7">/* skip all non-numericals following the slash */</comment>
      <while pos:line="66" pos:column="7">while<condition pos:line="66" pos:column="12">(<expr><operator pos:line="66" pos:column="13">*<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">ptr<pos:position pos:line="66" pos:column="17"/></name> <operator pos:line="66" pos:column="18">&amp;&amp;<pos:position pos:line="66" pos:column="28"/></operator> <operator pos:line="66" pos:column="21">!<pos:position pos:line="66" pos:column="22"/></operator><call><name pos:line="66" pos:column="22">ISDIGIT<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">(<argument><expr><operator pos:line="66" pos:column="30">*<pos:position pos:line="66" pos:column="31"/></operator><name pos:line="66" pos:column="31">ptr<pos:position pos:line="66" pos:column="34"/></name></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="36"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="9">ptr<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">++<pos:position pos:line="67" pos:column="14"/></operator></expr>;<pos:position pos:line="67" pos:column="15"/></expr_stmt></block></while>

      <expr_stmt><expr><name><name pos:line="69" pos:column="7">req<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">-&gt;<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="12">testno<pos:position pos:line="69" pos:column="18"/></name></name> <operator pos:line="69" pos:column="19">=<pos:position pos:line="69" pos:column="20"/></operator> <call><name pos:line="69" pos:column="21">strtol<pos:position pos:line="69" pos:column="27"/></name><argument_list pos:line="69" pos:column="27">(<argument><expr><name pos:line="69" pos:column="28">ptr<pos:position pos:line="69" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="33">&amp;<pos:position pos:line="69" pos:column="38"/></operator><name pos:line="69" pos:column="34">ptr<pos:position pos:line="69" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="39">10<pos:position pos:line="69" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="43"/></expr_stmt>

      <if pos:line="71" pos:column="7">if<condition pos:line="71" pos:column="9">(<expr><name><name pos:line="71" pos:column="10">req<pos:position pos:line="71" pos:column="13"/></name><operator pos:line="71" pos:column="13">-&gt;<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="15">testno<pos:position pos:line="71" pos:column="21"/></name></name> <operator pos:line="71" pos:column="22">&gt;<pos:position pos:line="71" pos:column="26"/></operator> <literal type="number" pos:line="71" pos:column="24">10000<pos:position pos:line="71" pos:column="29"/></literal></expr>)<pos:position pos:line="71" pos:column="30"/></condition><then pos:line="71" pos:column="30"> <block pos:line="71" pos:column="31">{
        <expr_stmt><expr><name><name pos:line="72" pos:column="9">req<pos:position pos:line="72" pos:column="12"/></name><operator pos:line="72" pos:column="12">-&gt;<pos:position pos:line="72" pos:column="17"/></operator><name pos:line="72" pos:column="14">partno<pos:position pos:line="72" pos:column="20"/></name></name> <operator pos:line="72" pos:column="21">=<pos:position pos:line="72" pos:column="22"/></operator> <name><name pos:line="72" pos:column="23">req<pos:position pos:line="72" pos:column="26"/></name><operator pos:line="72" pos:column="26">-&gt;<pos:position pos:line="72" pos:column="31"/></operator><name pos:line="72" pos:column="28">testno<pos:position pos:line="72" pos:column="34"/></name></name> <operator pos:line="72" pos:column="35">%<pos:position pos:line="72" pos:column="36"/></operator> <literal type="number" pos:line="72" pos:column="37">10000<pos:position pos:line="72" pos:column="42"/></literal></expr>;<pos:position pos:line="72" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="73" pos:column="9">req<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">-&gt;<pos:position pos:line="73" pos:column="17"/></operator><name pos:line="73" pos:column="14">testno<pos:position pos:line="73" pos:column="20"/></name></name> <operator pos:line="73" pos:column="21">/=<pos:position pos:line="73" pos:column="23"/></operator> <literal type="number" pos:line="73" pos:column="24">10000<pos:position pos:line="73" pos:column="29"/></literal></expr>;<pos:position pos:line="73" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="74" pos:column="8"/></block></then>
      <else pos:line="75" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="76" pos:column="9">req<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">-&gt;<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="14">partno<pos:position pos:line="76" pos:column="20"/></name></name> <operator pos:line="76" pos:column="21">=<pos:position pos:line="76" pos:column="22"/></operator> <literal type="number" pos:line="76" pos:column="23">0<pos:position pos:line="76" pos:column="24"/></literal></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt></block></else></if>

      <if pos:line="78" pos:column="7">if<condition pos:line="78" pos:column="9">(<expr><name><name pos:line="78" pos:column="10">req<pos:position pos:line="78" pos:column="13"/></name><operator pos:line="78" pos:column="13">-&gt;<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="15">testno<pos:position pos:line="78" pos:column="21"/></name></name></expr>)<pos:position pos:line="78" pos:column="22"/></condition><then pos:line="78" pos:column="22"> <block pos:line="78" pos:column="23">{

        <expr_stmt><expr><call><name pos:line="80" pos:column="9">snprintf<pos:position pos:line="80" pos:column="17"/></name><argument_list pos:line="80" pos:column="17">(<argument><expr><name pos:line="80" pos:column="18">logbuf<pos:position pos:line="80" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="80" pos:column="26">sizeof<argument_list pos:line="80" pos:column="32">(<argument><expr><name pos:line="80" pos:column="33">logbuf<pos:position pos:line="80" pos:column="39"/></name></expr></argument>)<pos:position pos:line="80" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="42">"Requested test number %ld part %ld"<pos:position pos:line="80" pos:column="78"/></literal></expr></argument>,
                 <argument><expr><name><name pos:line="81" pos:column="18">req<pos:position pos:line="81" pos:column="21"/></name><operator pos:line="81" pos:column="21">-&gt;<pos:position pos:line="81" pos:column="26"/></operator><name pos:line="81" pos:column="23">testno<pos:position pos:line="81" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="31">req<pos:position pos:line="81" pos:column="34"/></name><operator pos:line="81" pos:column="34">-&gt;<pos:position pos:line="81" pos:column="39"/></operator><name pos:line="81" pos:column="36">partno<pos:position pos:line="81" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">logmsg<pos:position pos:line="82" pos:column="15"/></name><argument_list pos:line="82" pos:column="15">(<argument><expr><literal type="string" pos:line="82" pos:column="16">"%s"<pos:position pos:line="82" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="22">logbuf<pos:position pos:line="82" pos:column="28"/></name></expr></argument>)<pos:position pos:line="82" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="30"/></expr_stmt>

        <comment type="block" pos:line="84" pos:column="9">/* find and parse &lt;servercmd&gt; for this test */</comment>
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">parse_servercmd<pos:position pos:line="85" pos:column="24"/></name><argument_list pos:line="85" pos:column="24">(<argument><expr><name pos:line="85" pos:column="25">req<pos:position pos:line="85" pos:column="28"/></name></expr></argument>)<pos:position pos:line="85" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="86" pos:column="8"/></block></then>
      <else pos:line="87" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="88" pos:column="9">req<pos:position pos:line="88" pos:column="12"/></name><operator pos:line="88" pos:column="12">-&gt;<pos:position pos:line="88" pos:column="17"/></operator><name pos:line="88" pos:column="14">testno<pos:position pos:line="88" pos:column="20"/></name></name> <operator pos:line="88" pos:column="21">=<pos:position pos:line="88" pos:column="22"/></operator> <name pos:line="88" pos:column="23">DOCNUMBER_NOTHING<pos:position pos:line="88" pos:column="40"/></name></expr>;<pos:position pos:line="88" pos:column="41"/></expr_stmt></block></else></if>

    }<pos:position pos:line="90" pos:column="6"/></block></then></if>

    <if pos:line="92" pos:column="5">if<condition pos:line="92" pos:column="7">(<expr><name><name pos:line="92" pos:column="8">req<pos:position pos:line="92" pos:column="11"/></name><operator pos:line="92" pos:column="11">-&gt;<pos:position pos:line="92" pos:column="16"/></operator><name pos:line="92" pos:column="13">testno<pos:position pos:line="92" pos:column="19"/></name></name> <operator pos:line="92" pos:column="20">==<pos:position pos:line="92" pos:column="22"/></operator> <name pos:line="92" pos:column="23">DOCNUMBER_NOTHING<pos:position pos:line="92" pos:column="40"/></name></expr>)<pos:position pos:line="92" pos:column="41"/></condition><then pos:line="92" pos:column="41"> <block pos:line="92" pos:column="42">{
      <comment type="block" pos:line="93" pos:column="7">/* didn't find any in the first scan, try alternative test case
         number placements */</comment>

      <if pos:line="96" pos:column="7">if<condition pos:line="96" pos:column="9">(<expr><call><name pos:line="96" pos:column="10">sscanf<pos:position pos:line="96" pos:column="16"/></name><argument_list pos:line="96" pos:column="16">(<argument><expr><name><name pos:line="96" pos:column="17">req<pos:position pos:line="96" pos:column="20"/></name><operator pos:line="96" pos:column="20">-&gt;<pos:position pos:line="96" pos:column="25"/></operator><name pos:line="96" pos:column="22">reqbuf<pos:position pos:line="96" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="30">"CONNECT %"<pos:position pos:line="96" pos:column="41"/></literal> <name pos:line="96" pos:column="42">MAXDOCNAMELEN_TXT<pos:position pos:line="96" pos:column="59"/></name> <literal type="string" pos:line="96" pos:column="60">"s HTTP/%d.%d"<pos:position pos:line="96" pos:column="74"/></literal></expr></argument>,
                <argument><expr><name pos:line="97" pos:column="17">doc<pos:position pos:line="97" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="22">&amp;<pos:position pos:line="97" pos:column="27"/></operator><name pos:line="97" pos:column="23">prot_major<pos:position pos:line="97" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="35">&amp;<pos:position pos:line="97" pos:column="40"/></operator><name pos:line="97" pos:column="36">prot_minor<pos:position pos:line="97" pos:column="46"/></name></expr></argument>)<pos:position pos:line="97" pos:column="47"/></argument_list></call> <operator pos:line="97" pos:column="48">==<pos:position pos:line="97" pos:column="50"/></operator> <literal type="number" pos:line="97" pos:column="51">3<pos:position pos:line="97" pos:column="52"/></literal></expr>)<pos:position pos:line="97" pos:column="53"/></condition><then pos:line="97" pos:column="53"> <block pos:line="97" pos:column="54">{
        <decl_stmt><decl><type><name pos:line="98" pos:column="9">char<pos:position pos:line="98" pos:column="13"/></name> <modifier pos:line="98" pos:column="14">*<pos:position pos:line="98" pos:column="15"/></modifier></type><name pos:line="98" pos:column="15">portp<pos:position pos:line="98" pos:column="20"/></name> <init pos:line="98" pos:column="21">= <expr><name pos:line="98" pos:column="23">NULL<pos:position pos:line="98" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="98" pos:column="28"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="99" pos:column="9">unsigned<pos:position pos:line="99" pos:column="17"/></name> <name pos:line="99" pos:column="18">long<pos:position pos:line="99" pos:column="22"/></name></type> <name pos:line="99" pos:column="23">part<pos:position pos:line="99" pos:column="27"/></name> <init pos:line="99" pos:column="28">= <expr><literal type="number" pos:line="99" pos:column="30">0<pos:position pos:line="99" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="99" pos:column="32"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="101" pos:column="9">snprintf<pos:position pos:line="101" pos:column="17"/></name><argument_list pos:line="101" pos:column="17">(<argument><expr><name pos:line="101" pos:column="18">logbuf<pos:position pos:line="101" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="101" pos:column="26">sizeof<argument_list pos:line="101" pos:column="32">(<argument><expr><name pos:line="101" pos:column="33">logbuf<pos:position pos:line="101" pos:column="39"/></name></expr></argument>)<pos:position pos:line="101" pos:column="40"/></argument_list></sizeof></expr></argument>,
                 <argument><expr><literal type="string" pos:line="102" pos:column="18">"Received a CONNECT %s HTTP/%d.%d request"<pos:position pos:line="102" pos:column="60"/></literal></expr></argument>,
                 <argument><expr><name pos:line="103" pos:column="18">doc<pos:position pos:line="103" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="23">prot_major<pos:position pos:line="103" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="35">prot_minor<pos:position pos:line="103" pos:column="45"/></name></expr></argument>)<pos:position pos:line="103" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="104" pos:column="9">logmsg<pos:position pos:line="104" pos:column="15"/></name><argument_list pos:line="104" pos:column="15">(<argument><expr><literal type="string" pos:line="104" pos:column="16">"%s"<pos:position pos:line="104" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="22">logbuf<pos:position pos:line="104" pos:column="28"/></name></expr></argument>)<pos:position pos:line="104" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="30"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="106" pos:column="9">req<pos:position pos:line="106" pos:column="12"/></name><operator pos:line="106" pos:column="12">-&gt;<pos:position pos:line="106" pos:column="17"/></operator><name pos:line="106" pos:column="14">connect_request<pos:position pos:line="106" pos:column="29"/></name></name> <operator pos:line="106" pos:column="30">=<pos:position pos:line="106" pos:column="31"/></operator> <name pos:line="106" pos:column="32">TRUE<pos:position pos:line="106" pos:column="36"/></name></expr>;<pos:position pos:line="106" pos:column="37"/></expr_stmt>

        <if pos:line="108" pos:column="9">if<condition pos:line="108" pos:column="11">(<expr><name><name pos:line="108" pos:column="12">req<pos:position pos:line="108" pos:column="15"/></name><operator pos:line="108" pos:column="15">-&gt;<pos:position pos:line="108" pos:column="20"/></operator><name pos:line="108" pos:column="17">prot_version<pos:position pos:line="108" pos:column="29"/></name></name> <operator pos:line="108" pos:column="30">==<pos:position pos:line="108" pos:column="32"/></operator> <literal type="number" pos:line="108" pos:column="33">10<pos:position pos:line="108" pos:column="35"/></literal></expr>)<pos:position pos:line="108" pos:column="36"/></condition><then pos:line="108" pos:column="36">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="109" pos:column="11">req<pos:position pos:line="109" pos:column="14"/></name><operator pos:line="109" pos:column="14">-&gt;<pos:position pos:line="109" pos:column="19"/></operator><name pos:line="109" pos:column="16">open<pos:position pos:line="109" pos:column="20"/></name></name> <operator pos:line="109" pos:column="21">=<pos:position pos:line="109" pos:column="22"/></operator> <name pos:line="109" pos:column="23">FALSE<pos:position pos:line="109" pos:column="28"/></name></expr>;<pos:position pos:line="109" pos:column="29"/></expr_stmt></block></then></if> <comment type="block" pos:line="109" pos:column="30">/* HTTP 1.0 closes connection by default */</comment>

        <if pos:line="111" pos:column="9">if<condition pos:line="111" pos:column="11">(<expr><name><name pos:line="111" pos:column="12">doc<pos:position pos:line="111" pos:column="15"/></name><index pos:line="111" pos:column="15">[<expr><literal type="number" pos:line="111" pos:column="16">0<pos:position pos:line="111" pos:column="17"/></literal></expr>]<pos:position pos:line="111" pos:column="18"/></index></name> <operator pos:line="111" pos:column="19">==<pos:position pos:line="111" pos:column="21"/></operator> <literal type="char" pos:line="111" pos:column="22">'['<pos:position pos:line="111" pos:column="25"/></literal></expr>)<pos:position pos:line="111" pos:column="26"/></condition><then pos:line="111" pos:column="26"> <block pos:line="111" pos:column="27">{
          <decl_stmt><decl><type><name pos:line="112" pos:column="11">char<pos:position pos:line="112" pos:column="15"/></name> <modifier pos:line="112" pos:column="16">*<pos:position pos:line="112" pos:column="17"/></modifier></type><name pos:line="112" pos:column="17">p<pos:position pos:line="112" pos:column="18"/></name> <init pos:line="112" pos:column="19">= <expr><operator pos:line="112" pos:column="21">&amp;<pos:position pos:line="112" pos:column="26"/></operator><name><name pos:line="112" pos:column="22">doc<pos:position pos:line="112" pos:column="25"/></name><index pos:line="112" pos:column="25">[<expr><literal type="number" pos:line="112" pos:column="26">1<pos:position pos:line="112" pos:column="27"/></literal></expr>]<pos:position pos:line="112" pos:column="28"/></index></name></expr></init></decl>;<pos:position pos:line="112" pos:column="29"/></decl_stmt>
          <comment type="block" pos:line="113" pos:column="11">/* scan through the hexgroups and store the value of the last group
             in the 'part' variable and use as test case number!! */</comment>
          <while pos:line="115" pos:column="11">while<condition pos:line="115" pos:column="16">(<expr><operator pos:line="115" pos:column="17">*<pos:position pos:line="115" pos:column="18"/></operator><name pos:line="115" pos:column="18">p<pos:position pos:line="115" pos:column="19"/></name> <operator pos:line="115" pos:column="20">&amp;&amp;<pos:position pos:line="115" pos:column="30"/></operator> <operator pos:line="115" pos:column="23">(<pos:position pos:line="115" pos:column="24"/></operator><call><name pos:line="115" pos:column="24">ISXDIGIT<pos:position pos:line="115" pos:column="32"/></name><argument_list pos:line="115" pos:column="32">(<argument><expr><operator pos:line="115" pos:column="33">*<pos:position pos:line="115" pos:column="34"/></operator><name pos:line="115" pos:column="34">p<pos:position pos:line="115" pos:column="35"/></name></expr></argument>)<pos:position pos:line="115" pos:column="36"/></argument_list></call> <operator pos:line="115" pos:column="37">||<pos:position pos:line="115" pos:column="39"/></operator> <operator pos:line="115" pos:column="40">(<pos:position pos:line="115" pos:column="41"/></operator><operator pos:line="115" pos:column="41">*<pos:position pos:line="115" pos:column="42"/></operator><name pos:line="115" pos:column="42">p<pos:position pos:line="115" pos:column="43"/></name> <operator pos:line="115" pos:column="44">==<pos:position pos:line="115" pos:column="46"/></operator> <literal type="char" pos:line="115" pos:column="47">':'<pos:position pos:line="115" pos:column="50"/></literal><operator pos:line="115" pos:column="50">)<pos:position pos:line="115" pos:column="51"/></operator> <operator pos:line="115" pos:column="52">||<pos:position pos:line="115" pos:column="54"/></operator> <operator pos:line="115" pos:column="55">(<pos:position pos:line="115" pos:column="56"/></operator><operator pos:line="115" pos:column="56">*<pos:position pos:line="115" pos:column="57"/></operator><name pos:line="115" pos:column="57">p<pos:position pos:line="115" pos:column="58"/></name> <operator pos:line="115" pos:column="59">==<pos:position pos:line="115" pos:column="61"/></operator> <literal type="char" pos:line="115" pos:column="62">'.'<pos:position pos:line="115" pos:column="65"/></literal><operator pos:line="115" pos:column="65">)<pos:position pos:line="115" pos:column="66"/></operator><operator pos:line="115" pos:column="66">)<pos:position pos:line="115" pos:column="67"/></operator></expr>)<pos:position pos:line="115" pos:column="68"/></condition> <block pos:line="115" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="116" pos:column="13">char<pos:position pos:line="116" pos:column="17"/></name> <modifier pos:line="116" pos:column="18">*<pos:position pos:line="116" pos:column="19"/></modifier></type><name pos:line="116" pos:column="19">endp<pos:position pos:line="116" pos:column="23"/></name></decl>;<pos:position pos:line="116" pos:column="24"/></decl_stmt>
            <expr_stmt><expr><name pos:line="117" pos:column="13">part<pos:position pos:line="117" pos:column="17"/></name> <operator pos:line="117" pos:column="18">=<pos:position pos:line="117" pos:column="19"/></operator> <call><name pos:line="117" pos:column="20">strtoul<pos:position pos:line="117" pos:column="27"/></name><argument_list pos:line="117" pos:column="27">(<argument><expr><name pos:line="117" pos:column="28">p<pos:position pos:line="117" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="117" pos:column="31">&amp;<pos:position pos:line="117" pos:column="36"/></operator><name pos:line="117" pos:column="32">endp<pos:position pos:line="117" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="38">16<pos:position pos:line="117" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="42"/></expr_stmt>
            <if pos:line="118" pos:column="13">if<condition pos:line="118" pos:column="15">(<expr><call><name pos:line="118" pos:column="16">ISXDIGIT<pos:position pos:line="118" pos:column="24"/></name><argument_list pos:line="118" pos:column="24">(<argument><expr><operator pos:line="118" pos:column="25">*<pos:position pos:line="118" pos:column="26"/></operator><name pos:line="118" pos:column="26">p<pos:position pos:line="118" pos:column="27"/></name></expr></argument>)<pos:position pos:line="118" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="118" pos:column="29"/></condition><then pos:line="118" pos:column="29">
              <block type="pseudo"><expr_stmt><expr><name pos:line="119" pos:column="15">p<pos:position pos:line="119" pos:column="16"/></name> <operator pos:line="119" pos:column="17">=<pos:position pos:line="119" pos:column="18"/></operator> <name pos:line="119" pos:column="19">endp<pos:position pos:line="119" pos:column="23"/></name></expr>;<pos:position pos:line="119" pos:column="24"/></expr_stmt></block></then>
            <else pos:line="120" pos:column="13">else
              <block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="15">p<pos:position pos:line="121" pos:column="16"/></name><operator pos:line="121" pos:column="16">++<pos:position pos:line="121" pos:column="18"/></operator></expr>;<pos:position pos:line="121" pos:column="19"/></expr_stmt></block></else></if>
          }<pos:position pos:line="122" pos:column="12"/></block></while>
          <if pos:line="123" pos:column="11">if<condition pos:line="123" pos:column="13">(<expr><operator pos:line="123" pos:column="14">*<pos:position pos:line="123" pos:column="15"/></operator><name pos:line="123" pos:column="15">p<pos:position pos:line="123" pos:column="16"/></name> <operator pos:line="123" pos:column="17">!=<pos:position pos:line="123" pos:column="19"/></operator> <literal type="char" pos:line="123" pos:column="20">']'<pos:position pos:line="123" pos:column="23"/></literal></expr>)<pos:position pos:line="123" pos:column="24"/></condition><then pos:line="123" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="124" pos:column="13">logmsg<pos:position pos:line="124" pos:column="19"/></name><argument_list pos:line="124" pos:column="19">(<argument><expr><literal type="string" pos:line="124" pos:column="20">"Invalid CONNECT IPv6 address format"<pos:position pos:line="124" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="59"/></expr_stmt></block></then>
          <elseif pos:line="125" pos:column="11">else <if pos:line="125" pos:column="16">if<condition pos:line="125" pos:column="18">(<expr><operator pos:line="125" pos:column="19">*<pos:position pos:line="125" pos:column="20"/></operator><operator pos:line="125" pos:column="20">(<pos:position pos:line="125" pos:column="21"/></operator><name pos:line="125" pos:column="21">p<pos:position pos:line="125" pos:column="22"/></name> <operator pos:line="125" pos:column="23">+<pos:position pos:line="125" pos:column="24"/></operator> <literal type="number" pos:line="125" pos:column="25">1<pos:position pos:line="125" pos:column="26"/></literal><operator pos:line="125" pos:column="26">)<pos:position pos:line="125" pos:column="27"/></operator> <operator pos:line="125" pos:column="28">!=<pos:position pos:line="125" pos:column="30"/></operator> <literal type="char" pos:line="125" pos:column="31">':'<pos:position pos:line="125" pos:column="34"/></literal></expr>)<pos:position pos:line="125" pos:column="35"/></condition><then pos:line="125" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="126" pos:column="13">logmsg<pos:position pos:line="126" pos:column="19"/></name><argument_list pos:line="126" pos:column="19">(<argument><expr><literal type="string" pos:line="126" pos:column="20">"Invalid CONNECT IPv6 port format"<pos:position pos:line="126" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="56"/></expr_stmt></block></then></if></elseif>
          <else pos:line="127" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="128" pos:column="13">portp<pos:position pos:line="128" pos:column="18"/></name> <operator pos:line="128" pos:column="19">=<pos:position pos:line="128" pos:column="20"/></operator> <name pos:line="128" pos:column="21">p<pos:position pos:line="128" pos:column="22"/></name> <operator pos:line="128" pos:column="23">+<pos:position pos:line="128" pos:column="24"/></operator> <literal type="number" pos:line="128" pos:column="25">1<pos:position pos:line="128" pos:column="26"/></literal></expr>;<pos:position pos:line="128" pos:column="27"/></expr_stmt></block></else></if>

          <expr_stmt><expr><name><name pos:line="130" pos:column="11">req<pos:position pos:line="130" pos:column="14"/></name><operator pos:line="130" pos:column="14">-&gt;<pos:position pos:line="130" pos:column="19"/></operator><name pos:line="130" pos:column="16">testno<pos:position pos:line="130" pos:column="22"/></name></name> <operator pos:line="130" pos:column="23">=<pos:position pos:line="130" pos:column="24"/></operator> <name pos:line="130" pos:column="25">part<pos:position pos:line="130" pos:column="29"/></name></expr>;<pos:position pos:line="130" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="131" pos:column="10"/></block></then>
        <else pos:line="132" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="133" pos:column="11">portp<pos:position pos:line="133" pos:column="16"/></name> <operator pos:line="133" pos:column="17">=<pos:position pos:line="133" pos:column="18"/></operator> <call><name pos:line="133" pos:column="19">strchr<pos:position pos:line="133" pos:column="25"/></name><argument_list pos:line="133" pos:column="25">(<argument><expr><name pos:line="133" pos:column="26">doc<pos:position pos:line="133" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="133" pos:column="31">':'<pos:position pos:line="133" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="36"/></expr_stmt></block></else></if>

        <if pos:line="135" pos:column="9">if<condition pos:line="135" pos:column="11">(<expr><name pos:line="135" pos:column="12">portp<pos:position pos:line="135" pos:column="17"/></name> <operator pos:line="135" pos:column="18">&amp;&amp;<pos:position pos:line="135" pos:column="28"/></operator> <operator pos:line="135" pos:column="21">(<pos:position pos:line="135" pos:column="22"/></operator><operator pos:line="135" pos:column="22">*<pos:position pos:line="135" pos:column="23"/></operator><operator pos:line="135" pos:column="23">(<pos:position pos:line="135" pos:column="24"/></operator><name pos:line="135" pos:column="24">portp<pos:position pos:line="135" pos:column="29"/></name> <operator pos:line="135" pos:column="30">+<pos:position pos:line="135" pos:column="31"/></operator> <literal type="number" pos:line="135" pos:column="32">1<pos:position pos:line="135" pos:column="33"/></literal><operator pos:line="135" pos:column="33">)<pos:position pos:line="135" pos:column="34"/></operator> <operator pos:line="135" pos:column="35">!=<pos:position pos:line="135" pos:column="37"/></operator> <literal type="char" pos:line="135" pos:column="38">'\0'<pos:position pos:line="135" pos:column="42"/></literal><operator pos:line="135" pos:column="42">)<pos:position pos:line="135" pos:column="43"/></operator> <operator pos:line="135" pos:column="44">&amp;&amp;<pos:position pos:line="135" pos:column="54"/></operator> <call><name pos:line="135" pos:column="47">ISDIGIT<pos:position pos:line="135" pos:column="54"/></name><argument_list pos:line="135" pos:column="54">(<argument><expr><operator pos:line="135" pos:column="55">*<pos:position pos:line="135" pos:column="56"/></operator><operator pos:line="135" pos:column="56">(<pos:position pos:line="135" pos:column="57"/></operator><name pos:line="135" pos:column="57">portp<pos:position pos:line="135" pos:column="62"/></name> <operator pos:line="135" pos:column="63">+<pos:position pos:line="135" pos:column="64"/></operator> <literal type="number" pos:line="135" pos:column="65">1<pos:position pos:line="135" pos:column="66"/></literal><operator pos:line="135" pos:column="66">)<pos:position pos:line="135" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="135" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="135" pos:column="69"/></condition><then pos:line="135" pos:column="69"> <block pos:line="135" pos:column="70">{
          <decl_stmt><decl><type><name pos:line="136" pos:column="11">unsigned<pos:position pos:line="136" pos:column="19"/></name> <name pos:line="136" pos:column="20">long<pos:position pos:line="136" pos:column="24"/></name></type> <name pos:line="136" pos:column="25">ulnum<pos:position pos:line="136" pos:column="30"/></name> <init pos:line="136" pos:column="31">= <expr><call><name pos:line="136" pos:column="33">strtoul<pos:position pos:line="136" pos:column="40"/></name><argument_list pos:line="136" pos:column="40">(<argument><expr><name pos:line="136" pos:column="41">portp<pos:position pos:line="136" pos:column="46"/></name> <operator pos:line="136" pos:column="47">+<pos:position pos:line="136" pos:column="48"/></operator> <literal type="number" pos:line="136" pos:column="49">1<pos:position pos:line="136" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="52">NULL<pos:position pos:line="136" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="136" pos:column="58">10<pos:position pos:line="136" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="136" pos:column="62"/></decl_stmt>
          <if pos:line="137" pos:column="11">if<condition pos:line="137" pos:column="13">(<expr><operator pos:line="137" pos:column="14">!<pos:position pos:line="137" pos:column="15"/></operator><name pos:line="137" pos:column="15">ulnum<pos:position pos:line="137" pos:column="20"/></name> <operator pos:line="137" pos:column="21">||<pos:position pos:line="137" pos:column="23"/></operator> <operator pos:line="137" pos:column="24">(<pos:position pos:line="137" pos:column="25"/></operator><name pos:line="137" pos:column="25">ulnum<pos:position pos:line="137" pos:column="30"/></name> <operator pos:line="137" pos:column="31">&gt;<pos:position pos:line="137" pos:column="35"/></operator> <literal type="number" pos:line="137" pos:column="33">65535UL<pos:position pos:line="137" pos:column="40"/></literal><operator pos:line="137" pos:column="40">)<pos:position pos:line="137" pos:column="41"/></operator></expr>)<pos:position pos:line="137" pos:column="42"/></condition><then pos:line="137" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="138" pos:column="13">logmsg<pos:position pos:line="138" pos:column="19"/></name><argument_list pos:line="138" pos:column="19">(<argument><expr><literal type="string" pos:line="138" pos:column="20">"Invalid CONNECT port received"<pos:position pos:line="138" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="53"/></expr_stmt></block></then>
          <else pos:line="139" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="140" pos:column="13">req<pos:position pos:line="140" pos:column="16"/></name><operator pos:line="140" pos:column="16">-&gt;<pos:position pos:line="140" pos:column="21"/></operator><name pos:line="140" pos:column="18">connect_port<pos:position pos:line="140" pos:column="30"/></name></name> <operator pos:line="140" pos:column="31">=<pos:position pos:line="140" pos:column="32"/></operator> <call><name pos:line="140" pos:column="33">curlx_ultous<pos:position pos:line="140" pos:column="45"/></name><argument_list pos:line="140" pos:column="45">(<argument><expr><name pos:line="140" pos:column="46">ulnum<pos:position pos:line="140" pos:column="51"/></name></expr></argument>)<pos:position pos:line="140" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="53"/></expr_stmt></block></else></if>

        }<pos:position pos:line="142" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="143" pos:column="9">logmsg<pos:position pos:line="143" pos:column="15"/></name><argument_list pos:line="143" pos:column="15">(<argument><expr><literal type="string" pos:line="143" pos:column="16">"Port number: %d, test case number: %ld"<pos:position pos:line="143" pos:column="56"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="144" pos:column="16">req<pos:position pos:line="144" pos:column="19"/></name><operator pos:line="144" pos:column="19">-&gt;<pos:position pos:line="144" pos:column="24"/></operator><name pos:line="144" pos:column="21">connect_port<pos:position pos:line="144" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="35">req<pos:position pos:line="144" pos:column="38"/></name><operator pos:line="144" pos:column="38">-&gt;<pos:position pos:line="144" pos:column="43"/></operator><name pos:line="144" pos:column="40">testno<pos:position pos:line="144" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="144" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="145" pos:column="8"/></block></then></if>
    }<pos:position pos:line="146" pos:column="6"/></block></then></if>

    <if pos:line="148" pos:column="5">if<condition pos:line="148" pos:column="7">(<expr><name><name pos:line="148" pos:column="8">req<pos:position pos:line="148" pos:column="11"/></name><operator pos:line="148" pos:column="11">-&gt;<pos:position pos:line="148" pos:column="16"/></operator><name pos:line="148" pos:column="13">testno<pos:position pos:line="148" pos:column="19"/></name></name> <operator pos:line="148" pos:column="20">==<pos:position pos:line="148" pos:column="22"/></operator> <name pos:line="148" pos:column="23">DOCNUMBER_NOTHING<pos:position pos:line="148" pos:column="40"/></name></expr>)<pos:position pos:line="148" pos:column="41"/></condition><then pos:line="148" pos:column="41"> <block pos:line="148" pos:column="42">{
      <comment type="block" pos:line="149" pos:column="7">/* check for a Testno: header with the test case number */</comment>
      <decl_stmt><decl><type><name pos:line="150" pos:column="7">char<pos:position pos:line="150" pos:column="11"/></name> <modifier pos:line="150" pos:column="12">*<pos:position pos:line="150" pos:column="13"/></modifier></type><name pos:line="150" pos:column="13">testno<pos:position pos:line="150" pos:column="19"/></name> <init pos:line="150" pos:column="20">= <expr><call><name pos:line="150" pos:column="22">strstr<pos:position pos:line="150" pos:column="28"/></name><argument_list pos:line="150" pos:column="28">(<argument><expr><name pos:line="150" pos:column="29">line<pos:position pos:line="150" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="35">"\nTestno: "<pos:position pos:line="150" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="150" pos:column="49"/></decl_stmt>
      <if pos:line="151" pos:column="7">if<condition pos:line="151" pos:column="9">(<expr><name pos:line="151" pos:column="10">testno<pos:position pos:line="151" pos:column="16"/></name></expr>)<pos:position pos:line="151" pos:column="17"/></condition><then pos:line="151" pos:column="17"> <block pos:line="151" pos:column="18">{
        <expr_stmt><expr><name><name pos:line="152" pos:column="9">req<pos:position pos:line="152" pos:column="12"/></name><operator pos:line="152" pos:column="12">-&gt;<pos:position pos:line="152" pos:column="17"/></operator><name pos:line="152" pos:column="14">testno<pos:position pos:line="152" pos:column="20"/></name></name> <operator pos:line="152" pos:column="21">=<pos:position pos:line="152" pos:column="22"/></operator> <call><name pos:line="152" pos:column="23">strtol<pos:position pos:line="152" pos:column="29"/></name><argument_list pos:line="152" pos:column="29">(<argument><expr><operator pos:line="152" pos:column="30">&amp;<pos:position pos:line="152" pos:column="35"/></operator><name><name pos:line="152" pos:column="31">testno<pos:position pos:line="152" pos:column="37"/></name><index pos:line="152" pos:column="37">[<expr><literal type="number" pos:line="152" pos:column="38">9<pos:position pos:line="152" pos:column="39"/></literal></expr>]<pos:position pos:line="152" pos:column="40"/></index></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="42">NULL<pos:position pos:line="152" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="152" pos:column="48">10<pos:position pos:line="152" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="153" pos:column="9">logmsg<pos:position pos:line="153" pos:column="15"/></name><argument_list pos:line="153" pos:column="15">(<argument><expr><literal type="string" pos:line="153" pos:column="16">"Found test number %d in Testno: header!"<pos:position pos:line="153" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="153" pos:column="59">req<pos:position pos:line="153" pos:column="62"/></name><operator pos:line="153" pos:column="62">-&gt;<pos:position pos:line="153" pos:column="67"/></operator><name pos:line="153" pos:column="64">testno<pos:position pos:line="153" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="153" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="72"/></expr_stmt>
      }<pos:position pos:line="154" pos:column="8"/></block></then></if>
    }<pos:position pos:line="155" pos:column="6"/></block></then></if>
    <if pos:line="156" pos:column="5">if<condition pos:line="156" pos:column="7">(<expr><name><name pos:line="156" pos:column="8">req<pos:position pos:line="156" pos:column="11"/></name><operator pos:line="156" pos:column="11">-&gt;<pos:position pos:line="156" pos:column="16"/></operator><name pos:line="156" pos:column="13">testno<pos:position pos:line="156" pos:column="19"/></name></name> <operator pos:line="156" pos:column="20">==<pos:position pos:line="156" pos:column="22"/></operator> <name pos:line="156" pos:column="23">DOCNUMBER_NOTHING<pos:position pos:line="156" pos:column="40"/></name></expr>)<pos:position pos:line="156" pos:column="41"/></condition><then pos:line="156" pos:column="41"> <block pos:line="156" pos:column="42">{
      <comment type="block" pos:line="157" pos:column="7">/* Still no test case number. Try to get the the number off the last dot
         instead, IE we consider the TLD to be the test number. Test 123 can
         then be written as "example.com.123". */</comment>

      <comment type="block" pos:line="161" pos:column="7">/* find the last dot */</comment>
      <expr_stmt><expr><name pos:line="162" pos:column="7">ptr<pos:position pos:line="162" pos:column="10"/></name> <operator pos:line="162" pos:column="11">=<pos:position pos:line="162" pos:column="12"/></operator> <call><name pos:line="162" pos:column="13">strrchr<pos:position pos:line="162" pos:column="20"/></name><argument_list pos:line="162" pos:column="20">(<argument><expr><name pos:line="162" pos:column="21">doc<pos:position pos:line="162" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="162" pos:column="26">'.'<pos:position pos:line="162" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="31"/></expr_stmt>

      <comment type="block" pos:line="164" pos:column="7">/* get the number after it */</comment>
      <if pos:line="165" pos:column="7">if<condition pos:line="165" pos:column="9">(<expr><name pos:line="165" pos:column="10">ptr<pos:position pos:line="165" pos:column="13"/></name></expr>)<pos:position pos:line="165" pos:column="14"/></condition><then pos:line="165" pos:column="14"> <block pos:line="165" pos:column="15">{
        <expr_stmt><expr><name pos:line="166" pos:column="9">ptr<pos:position pos:line="166" pos:column="12"/></name><operator pos:line="166" pos:column="12">++<pos:position pos:line="166" pos:column="14"/></operator></expr>;<pos:position pos:line="166" pos:column="15"/></expr_stmt> <comment type="block" pos:line="166" pos:column="16">/* skip the dot */</comment>

        <expr_stmt><expr><name><name pos:line="168" pos:column="9">req<pos:position pos:line="168" pos:column="12"/></name><operator pos:line="168" pos:column="12">-&gt;<pos:position pos:line="168" pos:column="17"/></operator><name pos:line="168" pos:column="14">testno<pos:position pos:line="168" pos:column="20"/></name></name> <operator pos:line="168" pos:column="21">=<pos:position pos:line="168" pos:column="22"/></operator> <call><name pos:line="168" pos:column="23">strtol<pos:position pos:line="168" pos:column="29"/></name><argument_list pos:line="168" pos:column="29">(<argument><expr><name pos:line="168" pos:column="30">ptr<pos:position pos:line="168" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="168" pos:column="35">&amp;<pos:position pos:line="168" pos:column="40"/></operator><name pos:line="168" pos:column="36">ptr<pos:position pos:line="168" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="168" pos:column="41">10<pos:position pos:line="168" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="168" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="45"/></expr_stmt>

        <if pos:line="170" pos:column="9">if<condition pos:line="170" pos:column="11">(<expr><name><name pos:line="170" pos:column="12">req<pos:position pos:line="170" pos:column="15"/></name><operator pos:line="170" pos:column="15">-&gt;<pos:position pos:line="170" pos:column="20"/></operator><name pos:line="170" pos:column="17">testno<pos:position pos:line="170" pos:column="23"/></name></name> <operator pos:line="170" pos:column="24">&gt;<pos:position pos:line="170" pos:column="28"/></operator> <literal type="number" pos:line="170" pos:column="26">10000<pos:position pos:line="170" pos:column="31"/></literal></expr>)<pos:position pos:line="170" pos:column="32"/></condition><then pos:line="170" pos:column="32"> <block pos:line="170" pos:column="33">{
          <expr_stmt><expr><name><name pos:line="171" pos:column="11">req<pos:position pos:line="171" pos:column="14"/></name><operator pos:line="171" pos:column="14">-&gt;<pos:position pos:line="171" pos:column="19"/></operator><name pos:line="171" pos:column="16">partno<pos:position pos:line="171" pos:column="22"/></name></name> <operator pos:line="171" pos:column="23">=<pos:position pos:line="171" pos:column="24"/></operator> <name><name pos:line="171" pos:column="25">req<pos:position pos:line="171" pos:column="28"/></name><operator pos:line="171" pos:column="28">-&gt;<pos:position pos:line="171" pos:column="33"/></operator><name pos:line="171" pos:column="30">testno<pos:position pos:line="171" pos:column="36"/></name></name> <operator pos:line="171" pos:column="37">%<pos:position pos:line="171" pos:column="38"/></operator> <literal type="number" pos:line="171" pos:column="39">10000<pos:position pos:line="171" pos:column="44"/></literal></expr>;<pos:position pos:line="171" pos:column="45"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="172" pos:column="11">req<pos:position pos:line="172" pos:column="14"/></name><operator pos:line="172" pos:column="14">-&gt;<pos:position pos:line="172" pos:column="19"/></operator><name pos:line="172" pos:column="16">testno<pos:position pos:line="172" pos:column="22"/></name></name> <operator pos:line="172" pos:column="23">/=<pos:position pos:line="172" pos:column="25"/></operator> <literal type="number" pos:line="172" pos:column="26">10000<pos:position pos:line="172" pos:column="31"/></literal></expr>;<pos:position pos:line="172" pos:column="32"/></expr_stmt>

          <expr_stmt><expr><call><name pos:line="174" pos:column="11">logmsg<pos:position pos:line="174" pos:column="17"/></name><argument_list pos:line="174" pos:column="17">(<argument><expr><literal type="string" pos:line="174" pos:column="18">"found test %d in requested host name"<pos:position pos:line="174" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="174" pos:column="58">req<pos:position pos:line="174" pos:column="61"/></name><operator pos:line="174" pos:column="61">-&gt;<pos:position pos:line="174" pos:column="66"/></operator><name pos:line="174" pos:column="63">testno<pos:position pos:line="174" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="174" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="71"/></expr_stmt>

        }<pos:position pos:line="176" pos:column="10"/></block></then>
        <else pos:line="177" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="178" pos:column="11">req<pos:position pos:line="178" pos:column="14"/></name><operator pos:line="178" pos:column="14">-&gt;<pos:position pos:line="178" pos:column="19"/></operator><name pos:line="178" pos:column="16">partno<pos:position pos:line="178" pos:column="22"/></name></name> <operator pos:line="178" pos:column="23">=<pos:position pos:line="178" pos:column="24"/></operator> <literal type="number" pos:line="178" pos:column="25">0<pos:position pos:line="178" pos:column="26"/></literal></expr>;<pos:position pos:line="178" pos:column="27"/></expr_stmt></block></else></if>

        <expr_stmt><expr><call><name pos:line="180" pos:column="9">snprintf<pos:position pos:line="180" pos:column="17"/></name><argument_list pos:line="180" pos:column="17">(<argument><expr><name pos:line="180" pos:column="18">logbuf<pos:position pos:line="180" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="180" pos:column="26">sizeof<argument_list pos:line="180" pos:column="32">(<argument><expr><name pos:line="180" pos:column="33">logbuf<pos:position pos:line="180" pos:column="39"/></name></expr></argument>)<pos:position pos:line="180" pos:column="40"/></argument_list></sizeof></expr></argument>,
                 <argument><expr><literal type="string" pos:line="181" pos:column="18">"Requested test number %ld part %ld (from host name)"<pos:position pos:line="181" pos:column="71"/></literal></expr></argument>,
                 <argument><expr><name><name pos:line="182" pos:column="18">req<pos:position pos:line="182" pos:column="21"/></name><operator pos:line="182" pos:column="21">-&gt;<pos:position pos:line="182" pos:column="26"/></operator><name pos:line="182" pos:column="23">testno<pos:position pos:line="182" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="31">req<pos:position pos:line="182" pos:column="34"/></name><operator pos:line="182" pos:column="34">-&gt;<pos:position pos:line="182" pos:column="39"/></operator><name pos:line="182" pos:column="36">partno<pos:position pos:line="182" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="182" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="183" pos:column="9">logmsg<pos:position pos:line="183" pos:column="15"/></name><argument_list pos:line="183" pos:column="15">(<argument><expr><literal type="string" pos:line="183" pos:column="16">"%s"<pos:position pos:line="183" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="183" pos:column="22">logbuf<pos:position pos:line="183" pos:column="28"/></name></expr></argument>)<pos:position pos:line="183" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="30"/></expr_stmt>

      }<pos:position pos:line="185" pos:column="8"/></block></then></if>

      <if pos:line="187" pos:column="7">if<condition pos:line="187" pos:column="9">(<expr><operator pos:line="187" pos:column="10">!<pos:position pos:line="187" pos:column="11"/></operator><name><name pos:line="187" pos:column="11">req<pos:position pos:line="187" pos:column="14"/></name><operator pos:line="187" pos:column="14">-&gt;<pos:position pos:line="187" pos:column="19"/></operator><name pos:line="187" pos:column="16">testno<pos:position pos:line="187" pos:column="22"/></name></name></expr>)<pos:position pos:line="187" pos:column="23"/></condition><then pos:line="187" pos:column="23"> <block pos:line="187" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="188" pos:column="9">logmsg<pos:position pos:line="188" pos:column="15"/></name><argument_list pos:line="188" pos:column="15">(<argument><expr><literal type="string" pos:line="188" pos:column="16">"Did not find test number in PATH"<pos:position pos:line="188" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="188" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="189" pos:column="9">req<pos:position pos:line="189" pos:column="12"/></name><operator pos:line="189" pos:column="12">-&gt;<pos:position pos:line="189" pos:column="17"/></operator><name pos:line="189" pos:column="14">testno<pos:position pos:line="189" pos:column="20"/></name></name> <operator pos:line="189" pos:column="21">=<pos:position pos:line="189" pos:column="22"/></operator> <name pos:line="189" pos:column="23">DOCNUMBER_404<pos:position pos:line="189" pos:column="36"/></name></expr>;<pos:position pos:line="189" pos:column="37"/></expr_stmt>
      }<pos:position pos:line="190" pos:column="8"/></block></then>
      <else pos:line="191" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="192" pos:column="9">parse_servercmd<pos:position pos:line="192" pos:column="24"/></name><argument_list pos:line="192" pos:column="24">(<argument><expr><name pos:line="192" pos:column="25">req<pos:position pos:line="192" pos:column="28"/></name></expr></argument>)<pos:position pos:line="192" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="30"/></expr_stmt></block></else></if>
    }<pos:position pos:line="193" pos:column="6"/></block></then></if>
  }<pos:position pos:line="194" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="195" pos:column="3">else <if pos:line="195" pos:column="8">if<condition pos:line="195" pos:column="10">(<expr><operator pos:line="195" pos:column="11">(<pos:position pos:line="195" pos:column="12"/></operator><name><name pos:line="195" pos:column="12">req<pos:position pos:line="195" pos:column="15"/></name><operator pos:line="195" pos:column="15">-&gt;<pos:position pos:line="195" pos:column="20"/></operator><name pos:line="195" pos:column="17">offset<pos:position pos:line="195" pos:column="23"/></name></name> <operator pos:line="195" pos:column="24">&gt;=<pos:position pos:line="195" pos:column="29"/></operator> <literal type="number" pos:line="195" pos:column="27">3<pos:position pos:line="195" pos:column="28"/></literal><operator pos:line="195" pos:column="28">)<pos:position pos:line="195" pos:column="29"/></operator> <operator pos:line="195" pos:column="30">&amp;&amp;<pos:position pos:line="195" pos:column="40"/></operator> <operator pos:line="195" pos:column="33">(<pos:position pos:line="195" pos:column="34"/></operator><name><name pos:line="195" pos:column="34">req<pos:position pos:line="195" pos:column="37"/></name><operator pos:line="195" pos:column="37">-&gt;<pos:position pos:line="195" pos:column="42"/></operator><name pos:line="195" pos:column="39">testno<pos:position pos:line="195" pos:column="45"/></name></name> <operator pos:line="195" pos:column="46">==<pos:position pos:line="195" pos:column="48"/></operator> <name pos:line="195" pos:column="49">DOCNUMBER_NOTHING<pos:position pos:line="195" pos:column="66"/></name><operator pos:line="195" pos:column="66">)<pos:position pos:line="195" pos:column="67"/></operator></expr>)<pos:position pos:line="195" pos:column="68"/></condition><then pos:line="195" pos:column="68"> <block pos:line="195" pos:column="69">{
    <expr_stmt><expr><call><name pos:line="196" pos:column="5">logmsg<pos:position pos:line="196" pos:column="11"/></name><argument_list pos:line="196" pos:column="11">(<argument><expr><literal type="string" pos:line="196" pos:column="12">"** Unusual request. Starts with %02x %02x %02x"<pos:position pos:line="196" pos:column="60"/></literal></expr></argument>,
           <argument><expr><name><name pos:line="197" pos:column="12">line<pos:position pos:line="197" pos:column="16"/></name><index pos:line="197" pos:column="16">[<expr><literal type="number" pos:line="197" pos:column="17">0<pos:position pos:line="197" pos:column="18"/></literal></expr>]<pos:position pos:line="197" pos:column="19"/></index></name></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="21">line<pos:position pos:line="197" pos:column="25"/></name><index pos:line="197" pos:column="25">[<expr><literal type="number" pos:line="197" pos:column="26">1<pos:position pos:line="197" pos:column="27"/></literal></expr>]<pos:position pos:line="197" pos:column="28"/></index></name></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="30">line<pos:position pos:line="197" pos:column="34"/></name><index pos:line="197" pos:column="34">[<expr><literal type="number" pos:line="197" pos:column="35">2<pos:position pos:line="197" pos:column="36"/></literal></expr>]<pos:position pos:line="197" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="197" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="198" pos:column="4"/></block></then></if></elseif></if>

  <if pos:line="200" pos:column="3">if<condition pos:line="200" pos:column="5">(<expr><operator pos:line="200" pos:column="6">!<pos:position pos:line="200" pos:column="7"/></operator><name pos:line="200" pos:column="7">end<pos:position pos:line="200" pos:column="10"/></name></expr>)<pos:position pos:line="200" pos:column="11"/></condition><then pos:line="200" pos:column="11"> <block pos:line="200" pos:column="12">{
    <comment type="block" pos:line="201" pos:column="5">/* we don't have a complete request yet! */</comment>
    <expr_stmt><expr><call><name pos:line="202" pos:column="5">logmsg<pos:position pos:line="202" pos:column="11"/></name><argument_list pos:line="202" pos:column="11">(<argument><expr><literal type="string" pos:line="202" pos:column="12">"request not complete yet"<pos:position pos:line="202" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="40"/></expr_stmt>
    <return pos:line="203" pos:column="5">return <expr><literal type="number" pos:line="203" pos:column="12">0<pos:position pos:line="203" pos:column="13"/></literal></expr>;<pos:position pos:line="203" pos:column="14"/></return> <comment type="block" pos:line="203" pos:column="15">/* not complete yet */</comment>
  }<pos:position pos:line="204" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="205" pos:column="3">logmsg<pos:position pos:line="205" pos:column="9"/></name><argument_list pos:line="205" pos:column="9">(<argument><expr><literal type="string" pos:line="205" pos:column="10">"- request found to be complete"<pos:position pos:line="205" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="205" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="44"/></expr_stmt>

  <if pos:line="207" pos:column="3">if<condition pos:line="207" pos:column="5">(<expr><name pos:line="207" pos:column="6">use_gopher<pos:position pos:line="207" pos:column="16"/></name></expr>)<pos:position pos:line="207" pos:column="17"/></condition><then pos:line="207" pos:column="17"> <block pos:line="207" pos:column="18">{
    <comment type="block" pos:line="208" pos:column="5">/* when using gopher we cannot check the request until the entire
       thing has been received */</comment>
    <decl_stmt><decl><type><name pos:line="210" pos:column="5">char<pos:position pos:line="210" pos:column="9"/></name> <modifier pos:line="210" pos:column="10">*<pos:position pos:line="210" pos:column="11"/></modifier></type><name pos:line="210" pos:column="11">ptr<pos:position pos:line="210" pos:column="14"/></name></decl>;<pos:position pos:line="210" pos:column="15"/></decl_stmt>

    <comment type="block" pos:line="212" pos:column="5">/* find the last slash in the line */</comment>
    <expr_stmt><expr><name pos:line="213" pos:column="5">ptr<pos:position pos:line="213" pos:column="8"/></name> <operator pos:line="213" pos:column="9">=<pos:position pos:line="213" pos:column="10"/></operator> <call><name pos:line="213" pos:column="11">strrchr<pos:position pos:line="213" pos:column="18"/></name><argument_list pos:line="213" pos:column="18">(<argument><expr><name pos:line="213" pos:column="19">line<pos:position pos:line="213" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="213" pos:column="25">'/'<pos:position pos:line="213" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="213" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="30"/></expr_stmt>

    <if pos:line="215" pos:column="5">if<condition pos:line="215" pos:column="7">(<expr><name pos:line="215" pos:column="8">ptr<pos:position pos:line="215" pos:column="11"/></name></expr>)<pos:position pos:line="215" pos:column="12"/></condition><then pos:line="215" pos:column="12"> <block pos:line="215" pos:column="13">{
      <expr_stmt><expr><name pos:line="216" pos:column="7">ptr<pos:position pos:line="216" pos:column="10"/></name><operator pos:line="216" pos:column="10">++<pos:position pos:line="216" pos:column="12"/></operator></expr>;<pos:position pos:line="216" pos:column="13"/></expr_stmt> <comment type="block" pos:line="216" pos:column="14">/* skip the slash */</comment>

      <comment type="block" pos:line="218" pos:column="7">/* skip all non-numericals following the slash */</comment>
      <while pos:line="219" pos:column="7">while<condition pos:line="219" pos:column="12">(<expr><operator pos:line="219" pos:column="13">*<pos:position pos:line="219" pos:column="14"/></operator><name pos:line="219" pos:column="14">ptr<pos:position pos:line="219" pos:column="17"/></name> <operator pos:line="219" pos:column="18">&amp;&amp;<pos:position pos:line="219" pos:column="28"/></operator> <operator pos:line="219" pos:column="21">!<pos:position pos:line="219" pos:column="22"/></operator><call><name pos:line="219" pos:column="22">ISDIGIT<pos:position pos:line="219" pos:column="29"/></name><argument_list pos:line="219" pos:column="29">(<argument><expr><operator pos:line="219" pos:column="30">*<pos:position pos:line="219" pos:column="31"/></operator><name pos:line="219" pos:column="31">ptr<pos:position pos:line="219" pos:column="34"/></name></expr></argument>)<pos:position pos:line="219" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="219" pos:column="36"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="220" pos:column="9">ptr<pos:position pos:line="220" pos:column="12"/></name><operator pos:line="220" pos:column="12">++<pos:position pos:line="220" pos:column="14"/></operator></expr>;<pos:position pos:line="220" pos:column="15"/></expr_stmt></block></while>

      <expr_stmt><expr><name><name pos:line="222" pos:column="7">req<pos:position pos:line="222" pos:column="10"/></name><operator pos:line="222" pos:column="10">-&gt;<pos:position pos:line="222" pos:column="15"/></operator><name pos:line="222" pos:column="12">testno<pos:position pos:line="222" pos:column="18"/></name></name> <operator pos:line="222" pos:column="19">=<pos:position pos:line="222" pos:column="20"/></operator> <call><name pos:line="222" pos:column="21">strtol<pos:position pos:line="222" pos:column="27"/></name><argument_list pos:line="222" pos:column="27">(<argument><expr><name pos:line="222" pos:column="28">ptr<pos:position pos:line="222" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="222" pos:column="33">&amp;<pos:position pos:line="222" pos:column="38"/></operator><name pos:line="222" pos:column="34">ptr<pos:position pos:line="222" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="222" pos:column="39">10<pos:position pos:line="222" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="222" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="43"/></expr_stmt>

      <if pos:line="224" pos:column="7">if<condition pos:line="224" pos:column="9">(<expr><name><name pos:line="224" pos:column="10">req<pos:position pos:line="224" pos:column="13"/></name><operator pos:line="224" pos:column="13">-&gt;<pos:position pos:line="224" pos:column="18"/></operator><name pos:line="224" pos:column="15">testno<pos:position pos:line="224" pos:column="21"/></name></name> <operator pos:line="224" pos:column="22">&gt;<pos:position pos:line="224" pos:column="26"/></operator> <literal type="number" pos:line="224" pos:column="24">10000<pos:position pos:line="224" pos:column="29"/></literal></expr>)<pos:position pos:line="224" pos:column="30"/></condition><then pos:line="224" pos:column="30"> <block pos:line="224" pos:column="31">{
        <expr_stmt><expr><name><name pos:line="225" pos:column="9">req<pos:position pos:line="225" pos:column="12"/></name><operator pos:line="225" pos:column="12">-&gt;<pos:position pos:line="225" pos:column="17"/></operator><name pos:line="225" pos:column="14">partno<pos:position pos:line="225" pos:column="20"/></name></name> <operator pos:line="225" pos:column="21">=<pos:position pos:line="225" pos:column="22"/></operator> <name><name pos:line="225" pos:column="23">req<pos:position pos:line="225" pos:column="26"/></name><operator pos:line="225" pos:column="26">-&gt;<pos:position pos:line="225" pos:column="31"/></operator><name pos:line="225" pos:column="28">testno<pos:position pos:line="225" pos:column="34"/></name></name> <operator pos:line="225" pos:column="35">%<pos:position pos:line="225" pos:column="36"/></operator> <literal type="number" pos:line="225" pos:column="37">10000<pos:position pos:line="225" pos:column="42"/></literal></expr>;<pos:position pos:line="225" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="226" pos:column="9">req<pos:position pos:line="226" pos:column="12"/></name><operator pos:line="226" pos:column="12">-&gt;<pos:position pos:line="226" pos:column="17"/></operator><name pos:line="226" pos:column="14">testno<pos:position pos:line="226" pos:column="20"/></name></name> <operator pos:line="226" pos:column="21">/=<pos:position pos:line="226" pos:column="23"/></operator> <literal type="number" pos:line="226" pos:column="24">10000<pos:position pos:line="226" pos:column="29"/></literal></expr>;<pos:position pos:line="226" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="227" pos:column="8"/></block></then>
      <else pos:line="228" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="229" pos:column="9">req<pos:position pos:line="229" pos:column="12"/></name><operator pos:line="229" pos:column="12">-&gt;<pos:position pos:line="229" pos:column="17"/></operator><name pos:line="229" pos:column="14">partno<pos:position pos:line="229" pos:column="20"/></name></name> <operator pos:line="229" pos:column="21">=<pos:position pos:line="229" pos:column="22"/></operator> <literal type="number" pos:line="229" pos:column="23">0<pos:position pos:line="229" pos:column="24"/></literal></expr>;<pos:position pos:line="229" pos:column="25"/></expr_stmt></block></else></if>

      <expr_stmt><expr><call><name pos:line="231" pos:column="7">snprintf<pos:position pos:line="231" pos:column="15"/></name><argument_list pos:line="231" pos:column="15">(<argument><expr><name pos:line="231" pos:column="16">logbuf<pos:position pos:line="231" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="231" pos:column="24">sizeof<argument_list pos:line="231" pos:column="30">(<argument><expr><name pos:line="231" pos:column="31">logbuf<pos:position pos:line="231" pos:column="37"/></name></expr></argument>)<pos:position pos:line="231" pos:column="38"/></argument_list></sizeof></expr></argument>,
               <argument><expr><literal type="string" pos:line="232" pos:column="16">"Requested GOPHER test number %ld part %ld"<pos:position pos:line="232" pos:column="59"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="233" pos:column="16">req<pos:position pos:line="233" pos:column="19"/></name><operator pos:line="233" pos:column="19">-&gt;<pos:position pos:line="233" pos:column="24"/></operator><name pos:line="233" pos:column="21">testno<pos:position pos:line="233" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="233" pos:column="29">req<pos:position pos:line="233" pos:column="32"/></name><operator pos:line="233" pos:column="32">-&gt;<pos:position pos:line="233" pos:column="37"/></operator><name pos:line="233" pos:column="34">partno<pos:position pos:line="233" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="233" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="234" pos:column="7">logmsg<pos:position pos:line="234" pos:column="13"/></name><argument_list pos:line="234" pos:column="13">(<argument><expr><literal type="string" pos:line="234" pos:column="14">"%s"<pos:position pos:line="234" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="234" pos:column="20">logbuf<pos:position pos:line="234" pos:column="26"/></name></expr></argument>)<pos:position pos:line="234" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="235" pos:column="6"/></block></then></if>
  }<pos:position pos:line="236" pos:column="4"/></block></then></if>

  <if pos:line="238" pos:column="3">if<condition pos:line="238" pos:column="5">(<expr><name><name pos:line="238" pos:column="6">req<pos:position pos:line="238" pos:column="9"/></name><operator pos:line="238" pos:column="9">-&gt;<pos:position pos:line="238" pos:column="14"/></operator><name pos:line="238" pos:column="11">pipe<pos:position pos:line="238" pos:column="15"/></name></name></expr>)<pos:position pos:line="238" pos:column="16"/></condition><then pos:line="238" pos:column="16">
    <comment type="block" pos:line="239" pos:column="5">/* we do have a full set, advance the checkindex to after the end of the
       headers, for the pipelining case mostly */</comment>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="241" pos:column="5">req<pos:position pos:line="241" pos:column="8"/></name><operator pos:line="241" pos:column="8">-&gt;<pos:position pos:line="241" pos:column="13"/></operator><name pos:line="241" pos:column="10">checkindex<pos:position pos:line="241" pos:column="20"/></name></name> <operator pos:line="241" pos:column="21">+=<pos:position pos:line="241" pos:column="23"/></operator> <operator pos:line="241" pos:column="24">(<pos:position pos:line="241" pos:column="25"/></operator><name pos:line="241" pos:column="25">end<pos:position pos:line="241" pos:column="28"/></name> <operator pos:line="241" pos:column="29">-<pos:position pos:line="241" pos:column="30"/></operator> <name pos:line="241" pos:column="31">line<pos:position pos:line="241" pos:column="35"/></name><operator pos:line="241" pos:column="35">)<pos:position pos:line="241" pos:column="36"/></operator> <operator pos:line="241" pos:column="37">+<pos:position pos:line="241" pos:column="38"/></operator> <call><name pos:line="241" pos:column="39">strlen<pos:position pos:line="241" pos:column="45"/></name><argument_list pos:line="241" pos:column="45">(<argument><expr><name pos:line="241" pos:column="46">end_of_headers<pos:position pos:line="241" pos:column="60"/></name></expr></argument>)<pos:position pos:line="241" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="62"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="243" pos:column="3">/* **** Persistence ****
   *
   * If the request is a HTTP/1.0 one, we close the connection unconditionally
   * when we're done.
   *
   * If the request is a HTTP/1.1 one, we MUST check for a "Connection:"
   * header that might say "close". If it does, we close a connection when
   * this request is processed. Otherwise, we keep the connection alive for X
   * seconds.
   */</comment>

  <do pos:line="254" pos:column="3">do <block pos:line="254" pos:column="6">{
    <if pos:line="255" pos:column="5">if<condition pos:line="255" pos:column="7">(<expr><name pos:line="255" pos:column="8">got_exit_signal<pos:position pos:line="255" pos:column="23"/></name></expr>)<pos:position pos:line="255" pos:column="24"/></condition><then pos:line="255" pos:column="24">
      <block type="pseudo"><return pos:line="256" pos:column="7">return <expr><literal type="number" pos:line="256" pos:column="14">1<pos:position pos:line="256" pos:column="15"/></literal></expr>;<pos:position pos:line="256" pos:column="16"/></return></block></then></if> <comment type="block" pos:line="256" pos:column="17">/* done */</comment>

    <if pos:line="258" pos:column="5">if<condition pos:line="258" pos:column="7">(<expr><operator pos:line="258" pos:column="8">(<pos:position pos:line="258" pos:column="9"/></operator><name><name pos:line="258" pos:column="9">req<pos:position pos:line="258" pos:column="12"/></name><operator pos:line="258" pos:column="12">-&gt;<pos:position pos:line="258" pos:column="17"/></operator><name pos:line="258" pos:column="14">cl<pos:position pos:line="258" pos:column="16"/></name></name> <operator pos:line="258" pos:column="17">==<pos:position pos:line="258" pos:column="19"/></operator> <literal type="number" pos:line="258" pos:column="20">0<pos:position pos:line="258" pos:column="21"/></literal><operator pos:line="258" pos:column="21">)<pos:position pos:line="258" pos:column="22"/></operator> <operator pos:line="258" pos:column="23">&amp;&amp;<pos:position pos:line="258" pos:column="33"/></operator> <call><name pos:line="258" pos:column="26">strncasecompare<pos:position pos:line="258" pos:column="41"/></name><argument_list pos:line="258" pos:column="41">(<argument><expr><literal type="string" pos:line="258" pos:column="42">"Content-Length:"<pos:position pos:line="258" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="258" pos:column="61">line<pos:position pos:line="258" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="258" pos:column="67">15<pos:position pos:line="258" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="258" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="258" pos:column="71"/></condition><then pos:line="258" pos:column="71"> <block pos:line="258" pos:column="72">{
      <comment type="block" pos:line="259" pos:column="7">/* If we don't ignore content-length, we read it and we read the whole
         request including the body before we return. If we've been told to
         ignore the content-length, we will return as soon as all headers
         have been received */</comment>
      <decl_stmt><decl><type><name pos:line="263" pos:column="7">char<pos:position pos:line="263" pos:column="11"/></name> <modifier pos:line="263" pos:column="12">*<pos:position pos:line="263" pos:column="13"/></modifier></type><name pos:line="263" pos:column="13">endptr<pos:position pos:line="263" pos:column="19"/></name></decl>;<pos:position pos:line="263" pos:column="20"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="264" pos:column="7">char<pos:position pos:line="264" pos:column="11"/></name> <modifier pos:line="264" pos:column="12">*<pos:position pos:line="264" pos:column="13"/></modifier></type><name pos:line="264" pos:column="13">ptr<pos:position pos:line="264" pos:column="16"/></name> <init pos:line="264" pos:column="17">= <expr><name pos:line="264" pos:column="19">line<pos:position pos:line="264" pos:column="23"/></name> <operator pos:line="264" pos:column="24">+<pos:position pos:line="264" pos:column="25"/></operator> <literal type="number" pos:line="264" pos:column="26">15<pos:position pos:line="264" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="264" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="265" pos:column="7">unsigned<pos:position pos:line="265" pos:column="15"/></name> <name pos:line="265" pos:column="16">long<pos:position pos:line="265" pos:column="20"/></name></type> <name pos:line="265" pos:column="21">clen<pos:position pos:line="265" pos:column="25"/></name> <init pos:line="265" pos:column="26">= <expr><literal type="number" pos:line="265" pos:column="28">0<pos:position pos:line="265" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="265" pos:column="30"/></decl_stmt>
      <while pos:line="266" pos:column="7">while<condition pos:line="266" pos:column="12">(<expr><operator pos:line="266" pos:column="13">*<pos:position pos:line="266" pos:column="14"/></operator><name pos:line="266" pos:column="14">ptr<pos:position pos:line="266" pos:column="17"/></name> <operator pos:line="266" pos:column="18">&amp;&amp;<pos:position pos:line="266" pos:column="28"/></operator> <call><name pos:line="266" pos:column="21">ISSPACE<pos:position pos:line="266" pos:column="28"/></name><argument_list pos:line="266" pos:column="28">(<argument><expr><operator pos:line="266" pos:column="29">*<pos:position pos:line="266" pos:column="30"/></operator><name pos:line="266" pos:column="30">ptr<pos:position pos:line="266" pos:column="33"/></name></expr></argument>)<pos:position pos:line="266" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="266" pos:column="35"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="267" pos:column="9">ptr<pos:position pos:line="267" pos:column="12"/></name><operator pos:line="267" pos:column="12">++<pos:position pos:line="267" pos:column="14"/></operator></expr>;<pos:position pos:line="267" pos:column="15"/></expr_stmt></block></while>
      <expr_stmt><expr><name pos:line="268" pos:column="7">endptr<pos:position pos:line="268" pos:column="13"/></name> <operator pos:line="268" pos:column="14">=<pos:position pos:line="268" pos:column="15"/></operator> <name pos:line="268" pos:column="16">ptr<pos:position pos:line="268" pos:column="19"/></name></expr>;<pos:position pos:line="268" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="269" pos:column="7">errno<pos:position pos:line="269" pos:column="12"/></name> <operator pos:line="269" pos:column="13">=<pos:position pos:line="269" pos:column="14"/></operator> <literal type="number" pos:line="269" pos:column="15">0<pos:position pos:line="269" pos:column="16"/></literal></expr>;<pos:position pos:line="269" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="270" pos:column="7">clen<pos:position pos:line="270" pos:column="11"/></name> <operator pos:line="270" pos:column="12">=<pos:position pos:line="270" pos:column="13"/></operator> <call><name pos:line="270" pos:column="14">strtoul<pos:position pos:line="270" pos:column="21"/></name><argument_list pos:line="270" pos:column="21">(<argument><expr><name pos:line="270" pos:column="22">ptr<pos:position pos:line="270" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="270" pos:column="27">&amp;<pos:position pos:line="270" pos:column="32"/></operator><name pos:line="270" pos:column="28">endptr<pos:position pos:line="270" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="270" pos:column="36">10<pos:position pos:line="270" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="270" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="40"/></expr_stmt>
      <if pos:line="271" pos:column="7">if<condition pos:line="271" pos:column="9">(<expr><operator pos:line="271" pos:column="10">(<pos:position pos:line="271" pos:column="11"/></operator><name pos:line="271" pos:column="11">ptr<pos:position pos:line="271" pos:column="14"/></name> <operator pos:line="271" pos:column="15">==<pos:position pos:line="271" pos:column="17"/></operator> <name pos:line="271" pos:column="18">endptr<pos:position pos:line="271" pos:column="24"/></name><operator pos:line="271" pos:column="24">)<pos:position pos:line="271" pos:column="25"/></operator> <operator pos:line="271" pos:column="26">||<pos:position pos:line="271" pos:column="28"/></operator> <operator pos:line="271" pos:column="29">!<pos:position pos:line="271" pos:column="30"/></operator><call><name pos:line="271" pos:column="30">ISSPACE<pos:position pos:line="271" pos:column="37"/></name><argument_list pos:line="271" pos:column="37">(<argument><expr><operator pos:line="271" pos:column="38">*<pos:position pos:line="271" pos:column="39"/></operator><name pos:line="271" pos:column="39">endptr<pos:position pos:line="271" pos:column="45"/></name></expr></argument>)<pos:position pos:line="271" pos:column="46"/></argument_list></call> <operator pos:line="271" pos:column="47">||<pos:position pos:line="271" pos:column="49"/></operator> <operator pos:line="271" pos:column="50">(<pos:position pos:line="271" pos:column="51"/></operator><name pos:line="271" pos:column="51">ERANGE<pos:position pos:line="271" pos:column="57"/></name> <operator pos:line="271" pos:column="58">==<pos:position pos:line="271" pos:column="60"/></operator> <name pos:line="271" pos:column="61">errno<pos:position pos:line="271" pos:column="66"/></name><operator pos:line="271" pos:column="66">)<pos:position pos:line="271" pos:column="67"/></operator></expr>)<pos:position pos:line="271" pos:column="68"/></condition><then pos:line="271" pos:column="68"> <block pos:line="271" pos:column="69">{
        <comment type="block" pos:line="272" pos:column="9">/* this assumes that a zero Content-Length is valid */</comment>
        <expr_stmt><expr><call><name pos:line="273" pos:column="9">logmsg<pos:position pos:line="273" pos:column="15"/></name><argument_list pos:line="273" pos:column="15">(<argument><expr><literal type="string" pos:line="273" pos:column="16">"Found invalid Content-Length: (%s) in the request"<pos:position pos:line="273" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="273" pos:column="69">ptr<pos:position pos:line="273" pos:column="72"/></name></expr></argument>)<pos:position pos:line="273" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="274" pos:column="9">req<pos:position pos:line="274" pos:column="12"/></name><operator pos:line="274" pos:column="12">-&gt;<pos:position pos:line="274" pos:column="17"/></operator><name pos:line="274" pos:column="14">open<pos:position pos:line="274" pos:column="18"/></name></name> <operator pos:line="274" pos:column="19">=<pos:position pos:line="274" pos:column="20"/></operator> <name pos:line="274" pos:column="21">FALSE<pos:position pos:line="274" pos:column="26"/></name></expr>;<pos:position pos:line="274" pos:column="27"/></expr_stmt> <comment type="block" pos:line="274" pos:column="28">/* closes connection */</comment>
        <return pos:line="275" pos:column="9">return <expr><literal type="number" pos:line="275" pos:column="16">1<pos:position pos:line="275" pos:column="17"/></literal></expr>;<pos:position pos:line="275" pos:column="18"/></return> <comment type="block" pos:line="275" pos:column="19">/* done */</comment>
      }<pos:position pos:line="276" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="277" pos:column="7">req<pos:position pos:line="277" pos:column="10"/></name><operator pos:line="277" pos:column="10">-&gt;<pos:position pos:line="277" pos:column="15"/></operator><name pos:line="277" pos:column="12">cl<pos:position pos:line="277" pos:column="14"/></name></name> <operator pos:line="277" pos:column="15">=<pos:position pos:line="277" pos:column="16"/></operator> <name pos:line="277" pos:column="17">clen<pos:position pos:line="277" pos:column="21"/></name> <operator pos:line="277" pos:column="22">-<pos:position pos:line="277" pos:column="23"/></operator> <name><name pos:line="277" pos:column="24">req<pos:position pos:line="277" pos:column="27"/></name><operator pos:line="277" pos:column="27">-&gt;<pos:position pos:line="277" pos:column="32"/></operator><name pos:line="277" pos:column="29">skip<pos:position pos:line="277" pos:column="33"/></name></name></expr>;<pos:position pos:line="277" pos:column="34"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="279" pos:column="7">logmsg<pos:position pos:line="279" pos:column="13"/></name><argument_list pos:line="279" pos:column="13">(<argument><expr><literal type="string" pos:line="279" pos:column="14">"Found Content-Length: %lu in the request"<pos:position pos:line="279" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="279" pos:column="58">clen<pos:position pos:line="279" pos:column="62"/></name></expr></argument>)<pos:position pos:line="279" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="64"/></expr_stmt>
      <if pos:line="280" pos:column="7">if<condition pos:line="280" pos:column="9">(<expr><name><name pos:line="280" pos:column="10">req<pos:position pos:line="280" pos:column="13"/></name><operator pos:line="280" pos:column="13">-&gt;<pos:position pos:line="280" pos:column="18"/></operator><name pos:line="280" pos:column="15">skip<pos:position pos:line="280" pos:column="19"/></name></name></expr>)<pos:position pos:line="280" pos:column="20"/></condition><then pos:line="280" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="281" pos:column="9">logmsg<pos:position pos:line="281" pos:column="15"/></name><argument_list pos:line="281" pos:column="15">(<argument><expr><literal type="string" pos:line="281" pos:column="16">"... but will abort after %zu bytes"<pos:position pos:line="281" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="281" pos:column="54">req<pos:position pos:line="281" pos:column="57"/></name><operator pos:line="281" pos:column="57">-&gt;<pos:position pos:line="281" pos:column="62"/></operator><name pos:line="281" pos:column="59">cl<pos:position pos:line="281" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="281" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="281" pos:column="63"/></expr_stmt></block></then></if>
      <break pos:line="282" pos:column="7">break;<pos:position pos:line="282" pos:column="13"/></break>
    }<pos:position pos:line="283" pos:column="6"/></block></then>
    <elseif pos:line="284" pos:column="5">else <if pos:line="284" pos:column="10">if<condition pos:line="284" pos:column="12">(<expr><call><name pos:line="284" pos:column="13">strncasecompare<pos:position pos:line="284" pos:column="28"/></name><argument_list pos:line="284" pos:column="28">(<argument><expr><literal type="string" pos:line="284" pos:column="29">"Transfer-Encoding: chunked"<pos:position pos:line="284" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="284" pos:column="59">line<pos:position pos:line="284" pos:column="63"/></name></expr></argument>,
                            <argument><expr><call><name pos:line="285" pos:column="29">strlen<pos:position pos:line="285" pos:column="35"/></name><argument_list pos:line="285" pos:column="35">(<argument><expr><literal type="string" pos:line="285" pos:column="36">"Transfer-Encoding: chunked"<pos:position pos:line="285" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="285" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="285" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="285" pos:column="67"/></condition><then pos:line="285" pos:column="67"> <block pos:line="285" pos:column="68">{
      <comment type="block" pos:line="286" pos:column="7">/* chunked data coming in */</comment>
      <expr_stmt><expr><name pos:line="287" pos:column="7">chunked<pos:position pos:line="287" pos:column="14"/></name> <operator pos:line="287" pos:column="15">=<pos:position pos:line="287" pos:column="16"/></operator> <name pos:line="287" pos:column="17">TRUE<pos:position pos:line="287" pos:column="21"/></name></expr>;<pos:position pos:line="287" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="288" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="290" pos:column="5">if<condition pos:line="290" pos:column="7">(<expr><name pos:line="290" pos:column="8">chunked<pos:position pos:line="290" pos:column="15"/></name></expr>)<pos:position pos:line="290" pos:column="16"/></condition><then pos:line="290" pos:column="16"> <block pos:line="290" pos:column="17">{
      <if pos:line="291" pos:column="7">if<condition pos:line="291" pos:column="9">(<expr><call><name pos:line="291" pos:column="10">strstr<pos:position pos:line="291" pos:column="16"/></name><argument_list pos:line="291" pos:column="16">(<argument><expr><name><name pos:line="291" pos:column="17">req<pos:position pos:line="291" pos:column="20"/></name><operator pos:line="291" pos:column="20">-&gt;<pos:position pos:line="291" pos:column="25"/></operator><name pos:line="291" pos:column="22">reqbuf<pos:position pos:line="291" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="291" pos:column="30">"\r\n0\r\n\r\n"<pos:position pos:line="291" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="291" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="291" pos:column="47"/></condition><then pos:line="291" pos:column="47">
        <comment type="block" pos:line="292" pos:column="9">/* end of chunks reached */</comment>
        <block type="pseudo"><return pos:line="293" pos:column="9">return <expr><literal type="number" pos:line="293" pos:column="16">1<pos:position pos:line="293" pos:column="17"/></literal></expr>;<pos:position pos:line="293" pos:column="18"/></return></block></then> <comment type="block" pos:line="293" pos:column="19">/* done */</comment>
      <else pos:line="294" pos:column="7">else
        <block type="pseudo"><return pos:line="295" pos:column="9">return <expr><literal type="number" pos:line="295" pos:column="16">0<pos:position pos:line="295" pos:column="17"/></literal></expr>;<pos:position pos:line="295" pos:column="18"/></return></block></else></if> <comment type="block" pos:line="295" pos:column="19">/* not done */</comment>
    }<pos:position pos:line="296" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="298" pos:column="5">line<pos:position pos:line="298" pos:column="9"/></name> <operator pos:line="298" pos:column="10">=<pos:position pos:line="298" pos:column="11"/></operator> <call><name pos:line="298" pos:column="12">strchr<pos:position pos:line="298" pos:column="18"/></name><argument_list pos:line="298" pos:column="18">(<argument><expr><name pos:line="298" pos:column="19">line<pos:position pos:line="298" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="298" pos:column="25">'\n'<pos:position pos:line="298" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="298" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="298" pos:column="31"/></expr_stmt>
    <if pos:line="299" pos:column="5">if<condition pos:line="299" pos:column="7">(<expr><name pos:line="299" pos:column="8">line<pos:position pos:line="299" pos:column="12"/></name></expr>)<pos:position pos:line="299" pos:column="13"/></condition><then pos:line="299" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><name pos:line="300" pos:column="7">line<pos:position pos:line="300" pos:column="11"/></name><operator pos:line="300" pos:column="11">++<pos:position pos:line="300" pos:column="13"/></operator></expr>;<pos:position pos:line="300" pos:column="14"/></expr_stmt></block></then></if>

  }<pos:position pos:line="302" pos:column="4"/></block> while<condition pos:line="302" pos:column="10">(<expr><name pos:line="302" pos:column="11">line<pos:position pos:line="302" pos:column="15"/></name></expr>)<pos:position pos:line="302" pos:column="16"/></condition>;<pos:position pos:line="302" pos:column="17"/></do>

  <if pos:line="304" pos:column="3">if<condition pos:line="304" pos:column="5">(<expr><operator pos:line="304" pos:column="6">!<pos:position pos:line="304" pos:column="7"/></operator><name><name pos:line="304" pos:column="7">req<pos:position pos:line="304" pos:column="10"/></name><operator pos:line="304" pos:column="10">-&gt;<pos:position pos:line="304" pos:column="15"/></operator><name pos:line="304" pos:column="12">auth<pos:position pos:line="304" pos:column="16"/></name></name> <operator pos:line="304" pos:column="17">&amp;&amp;<pos:position pos:line="304" pos:column="27"/></operator> <call><name pos:line="304" pos:column="20">strstr<pos:position pos:line="304" pos:column="26"/></name><argument_list pos:line="304" pos:column="26">(<argument><expr><name><name pos:line="304" pos:column="27">req<pos:position pos:line="304" pos:column="30"/></name><operator pos:line="304" pos:column="30">-&gt;<pos:position pos:line="304" pos:column="35"/></operator><name pos:line="304" pos:column="32">reqbuf<pos:position pos:line="304" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="304" pos:column="40">"Authorization:"<pos:position pos:line="304" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="304" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="304" pos:column="58"/></condition><then pos:line="304" pos:column="58"> <block pos:line="304" pos:column="59">{
    <expr_stmt><expr><name><name pos:line="305" pos:column="5">req<pos:position pos:line="305" pos:column="8"/></name><operator pos:line="305" pos:column="8">-&gt;<pos:position pos:line="305" pos:column="13"/></operator><name pos:line="305" pos:column="10">auth<pos:position pos:line="305" pos:column="14"/></name></name> <operator pos:line="305" pos:column="15">=<pos:position pos:line="305" pos:column="16"/></operator> <name pos:line="305" pos:column="17">TRUE<pos:position pos:line="305" pos:column="21"/></name></expr>;<pos:position pos:line="305" pos:column="22"/></expr_stmt> <comment type="block" pos:line="305" pos:column="23">/* Authorization: header present! */</comment>
    <if pos:line="306" pos:column="5">if<condition pos:line="306" pos:column="7">(<expr><name><name pos:line="306" pos:column="8">req<pos:position pos:line="306" pos:column="11"/></name><operator pos:line="306" pos:column="11">-&gt;<pos:position pos:line="306" pos:column="16"/></operator><name pos:line="306" pos:column="13">auth_req<pos:position pos:line="306" pos:column="21"/></name></name></expr>)<pos:position pos:line="306" pos:column="22"/></condition><then pos:line="306" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="307" pos:column="7">logmsg<pos:position pos:line="307" pos:column="13"/></name><argument_list pos:line="307" pos:column="13">(<argument><expr><literal type="string" pos:line="307" pos:column="14">"Authorization header found, as required"<pos:position pos:line="307" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="307" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="307" pos:column="57"/></expr_stmt></block></then></if>
  }<pos:position pos:line="308" pos:column="4"/></block></then></if>

  <if pos:line="310" pos:column="3">if<condition pos:line="310" pos:column="5">(<expr><call><name pos:line="310" pos:column="6">strstr<pos:position pos:line="310" pos:column="12"/></name><argument_list pos:line="310" pos:column="12">(<argument><expr><name><name pos:line="310" pos:column="13">req<pos:position pos:line="310" pos:column="16"/></name><operator pos:line="310" pos:column="16">-&gt;<pos:position pos:line="310" pos:column="21"/></operator><name pos:line="310" pos:column="18">reqbuf<pos:position pos:line="310" pos:column="24"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="310" pos:column="26">"Authorization: Negotiate"<pos:position pos:line="310" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="310" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="310" pos:column="54"/></condition><then pos:line="310" pos:column="54"> <block pos:line="310" pos:column="55">{
    <comment type="block" pos:line="311" pos:column="5">/* Negotiate iterations */</comment>
    <decl_stmt><decl><specifier pos:line="312" pos:column="5">static<pos:position pos:line="312" pos:column="11"/></specifier> <type><name pos:line="312" pos:column="12">long<pos:position pos:line="312" pos:column="16"/></name></type> <name pos:line="312" pos:column="17">prev_testno<pos:position pos:line="312" pos:column="28"/></name> <init pos:line="312" pos:column="29">= <expr><operator pos:line="312" pos:column="31">-<pos:position pos:line="312" pos:column="32"/></operator><literal type="number" pos:line="312" pos:column="32">1<pos:position pos:line="312" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="312" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="313" pos:column="5">static<pos:position pos:line="313" pos:column="11"/></specifier> <type><name pos:line="313" pos:column="12">long<pos:position pos:line="313" pos:column="16"/></name></type> <name pos:line="313" pos:column="17">prev_partno<pos:position pos:line="313" pos:column="28"/></name> <init pos:line="313" pos:column="29">= <expr><operator pos:line="313" pos:column="31">-<pos:position pos:line="313" pos:column="32"/></operator><literal type="number" pos:line="313" pos:column="32">1<pos:position pos:line="313" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="313" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="314" pos:column="5">logmsg<pos:position pos:line="314" pos:column="11"/></name><argument_list pos:line="314" pos:column="11">(<argument><expr><literal type="string" pos:line="314" pos:column="12">"Negotiate: prev_testno: %d, prev_partno: %d"<pos:position pos:line="314" pos:column="57"/></literal></expr></argument>,
            <argument><expr><name pos:line="315" pos:column="13">prev_testno<pos:position pos:line="315" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="315" pos:column="26">prev_partno<pos:position pos:line="315" pos:column="37"/></name></expr></argument>)<pos:position pos:line="315" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="39"/></expr_stmt>
    <if pos:line="316" pos:column="5">if<condition pos:line="316" pos:column="7">(<expr><name><name pos:line="316" pos:column="8">req<pos:position pos:line="316" pos:column="11"/></name><operator pos:line="316" pos:column="11">-&gt;<pos:position pos:line="316" pos:column="16"/></operator><name pos:line="316" pos:column="13">testno<pos:position pos:line="316" pos:column="19"/></name></name> <operator pos:line="316" pos:column="20">!=<pos:position pos:line="316" pos:column="22"/></operator> <name pos:line="316" pos:column="23">prev_testno<pos:position pos:line="316" pos:column="34"/></name></expr>)<pos:position pos:line="316" pos:column="35"/></condition><then pos:line="316" pos:column="35"> <block pos:line="316" pos:column="36">{
      <expr_stmt><expr><name pos:line="317" pos:column="7">prev_testno<pos:position pos:line="317" pos:column="18"/></name> <operator pos:line="317" pos:column="19">=<pos:position pos:line="317" pos:column="20"/></operator> <name><name pos:line="317" pos:column="21">req<pos:position pos:line="317" pos:column="24"/></name><operator pos:line="317" pos:column="24">-&gt;<pos:position pos:line="317" pos:column="29"/></operator><name pos:line="317" pos:column="26">testno<pos:position pos:line="317" pos:column="32"/></name></name></expr>;<pos:position pos:line="317" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="318" pos:column="7">prev_partno<pos:position pos:line="318" pos:column="18"/></name> <operator pos:line="318" pos:column="19">=<pos:position pos:line="318" pos:column="20"/></operator> <name><name pos:line="318" pos:column="21">req<pos:position pos:line="318" pos:column="24"/></name><operator pos:line="318" pos:column="24">-&gt;<pos:position pos:line="318" pos:column="29"/></operator><name pos:line="318" pos:column="26">partno<pos:position pos:line="318" pos:column="32"/></name></name></expr>;<pos:position pos:line="318" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="319" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="320" pos:column="5">prev_partno<pos:position pos:line="320" pos:column="16"/></name> <operator pos:line="320" pos:column="17">+=<pos:position pos:line="320" pos:column="19"/></operator> <literal type="number" pos:line="320" pos:column="20">1<pos:position pos:line="320" pos:column="21"/></literal></expr>;<pos:position pos:line="320" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="321" pos:column="5">req<pos:position pos:line="321" pos:column="8"/></name><operator pos:line="321" pos:column="8">-&gt;<pos:position pos:line="321" pos:column="13"/></operator><name pos:line="321" pos:column="10">partno<pos:position pos:line="321" pos:column="16"/></name></name> <operator pos:line="321" pos:column="17">=<pos:position pos:line="321" pos:column="18"/></operator> <name pos:line="321" pos:column="19">prev_partno<pos:position pos:line="321" pos:column="30"/></name></expr>;<pos:position pos:line="321" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="322" pos:column="4"/></block></then>
  <elseif pos:line="323" pos:column="3">else <if pos:line="323" pos:column="8">if<condition pos:line="323" pos:column="10">(<expr><operator pos:line="323" pos:column="11">!<pos:position pos:line="323" pos:column="12"/></operator><name><name pos:line="323" pos:column="12">req<pos:position pos:line="323" pos:column="15"/></name><operator pos:line="323" pos:column="15">-&gt;<pos:position pos:line="323" pos:column="20"/></operator><name pos:line="323" pos:column="17">digest<pos:position pos:line="323" pos:column="23"/></name></name> <operator pos:line="323" pos:column="24">&amp;&amp;<pos:position pos:line="323" pos:column="34"/></operator> <call><name pos:line="323" pos:column="27">strstr<pos:position pos:line="323" pos:column="33"/></name><argument_list pos:line="323" pos:column="33">(<argument><expr><name><name pos:line="323" pos:column="34">req<pos:position pos:line="323" pos:column="37"/></name><operator pos:line="323" pos:column="37">-&gt;<pos:position pos:line="323" pos:column="42"/></operator><name pos:line="323" pos:column="39">reqbuf<pos:position pos:line="323" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="323" pos:column="47">"Authorization: Digest"<pos:position pos:line="323" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="323" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="323" pos:column="72"/></condition><then pos:line="323" pos:column="72"> <block pos:line="323" pos:column="73">{
    <comment type="block" pos:line="324" pos:column="5">/* If the client is passing this Digest-header, we set the part number
       to 1000. Not only to spice up the complexity of this, but to make
       Digest stuff to work in the test suite. */</comment>
    <expr_stmt><expr><name><name pos:line="327" pos:column="5">req<pos:position pos:line="327" pos:column="8"/></name><operator pos:line="327" pos:column="8">-&gt;<pos:position pos:line="327" pos:column="13"/></operator><name pos:line="327" pos:column="10">partno<pos:position pos:line="327" pos:column="16"/></name></name> <operator pos:line="327" pos:column="17">+=<pos:position pos:line="327" pos:column="19"/></operator> <literal type="number" pos:line="327" pos:column="20">1000<pos:position pos:line="327" pos:column="24"/></literal></expr>;<pos:position pos:line="327" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="328" pos:column="5">req<pos:position pos:line="328" pos:column="8"/></name><operator pos:line="328" pos:column="8">-&gt;<pos:position pos:line="328" pos:column="13"/></operator><name pos:line="328" pos:column="10">digest<pos:position pos:line="328" pos:column="16"/></name></name> <operator pos:line="328" pos:column="17">=<pos:position pos:line="328" pos:column="18"/></operator> <name pos:line="328" pos:column="19">TRUE<pos:position pos:line="328" pos:column="23"/></name></expr>;<pos:position pos:line="328" pos:column="24"/></expr_stmt> <comment type="block" pos:line="328" pos:column="25">/* header found */</comment>
    <expr_stmt><expr><call><name pos:line="329" pos:column="5">logmsg<pos:position pos:line="329" pos:column="11"/></name><argument_list pos:line="329" pos:column="11">(<argument><expr><literal type="string" pos:line="329" pos:column="12">"Received Digest request, sending back data %ld"<pos:position pos:line="329" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="329" pos:column="62">req<pos:position pos:line="329" pos:column="65"/></name><operator pos:line="329" pos:column="65">-&gt;<pos:position pos:line="329" pos:column="70"/></operator><name pos:line="329" pos:column="67">partno<pos:position pos:line="329" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="329" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="329" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="330" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="331" pos:column="3">else <if pos:line="331" pos:column="8">if<condition pos:line="331" pos:column="10">(<expr><operator pos:line="331" pos:column="11">!<pos:position pos:line="331" pos:column="12"/></operator><name><name pos:line="331" pos:column="12">req<pos:position pos:line="331" pos:column="15"/></name><operator pos:line="331" pos:column="15">-&gt;<pos:position pos:line="331" pos:column="20"/></operator><name pos:line="331" pos:column="17">ntlm<pos:position pos:line="331" pos:column="21"/></name></name> <operator pos:line="331" pos:column="22">&amp;&amp;<pos:position pos:line="331" pos:column="32"/></operator>
          <call><name pos:line="332" pos:column="11">strstr<pos:position pos:line="332" pos:column="17"/></name><argument_list pos:line="332" pos:column="17">(<argument><expr><name><name pos:line="332" pos:column="18">req<pos:position pos:line="332" pos:column="21"/></name><operator pos:line="332" pos:column="21">-&gt;<pos:position pos:line="332" pos:column="26"/></operator><name pos:line="332" pos:column="23">reqbuf<pos:position pos:line="332" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="332" pos:column="31">"Authorization: NTLM TlRMTVNTUAAD"<pos:position pos:line="332" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="332" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="332" pos:column="67"/></condition><then pos:line="332" pos:column="67"> <block pos:line="332" pos:column="68">{
    <comment type="block" pos:line="333" pos:column="5">/* If the client is passing this type-3 NTLM header */</comment>
    <expr_stmt><expr><name><name pos:line="334" pos:column="5">req<pos:position pos:line="334" pos:column="8"/></name><operator pos:line="334" pos:column="8">-&gt;<pos:position pos:line="334" pos:column="13"/></operator><name pos:line="334" pos:column="10">partno<pos:position pos:line="334" pos:column="16"/></name></name> <operator pos:line="334" pos:column="17">+=<pos:position pos:line="334" pos:column="19"/></operator> <literal type="number" pos:line="334" pos:column="20">1002<pos:position pos:line="334" pos:column="24"/></literal></expr>;<pos:position pos:line="334" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="335" pos:column="5">req<pos:position pos:line="335" pos:column="8"/></name><operator pos:line="335" pos:column="8">-&gt;<pos:position pos:line="335" pos:column="13"/></operator><name pos:line="335" pos:column="10">ntlm<pos:position pos:line="335" pos:column="14"/></name></name> <operator pos:line="335" pos:column="15">=<pos:position pos:line="335" pos:column="16"/></operator> <name pos:line="335" pos:column="17">TRUE<pos:position pos:line="335" pos:column="21"/></name></expr>;<pos:position pos:line="335" pos:column="22"/></expr_stmt> <comment type="block" pos:line="335" pos:column="23">/* NTLM found */</comment>
    <expr_stmt><expr><call><name pos:line="336" pos:column="5">logmsg<pos:position pos:line="336" pos:column="11"/></name><argument_list pos:line="336" pos:column="11">(<argument><expr><literal type="string" pos:line="336" pos:column="12">"Received NTLM type-3, sending back data %ld"<pos:position pos:line="336" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="336" pos:column="59">req<pos:position pos:line="336" pos:column="62"/></name><operator pos:line="336" pos:column="62">-&gt;<pos:position pos:line="336" pos:column="67"/></operator><name pos:line="336" pos:column="64">partno<pos:position pos:line="336" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="336" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="336" pos:column="72"/></expr_stmt>
    <if pos:line="337" pos:column="5">if<condition pos:line="337" pos:column="7">(<expr><name><name pos:line="337" pos:column="8">req<pos:position pos:line="337" pos:column="11"/></name><operator pos:line="337" pos:column="11">-&gt;<pos:position pos:line="337" pos:column="16"/></operator><name pos:line="337" pos:column="13">cl<pos:position pos:line="337" pos:column="15"/></name></name></expr>)<pos:position pos:line="337" pos:column="16"/></condition><then pos:line="337" pos:column="16"> <block pos:line="337" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="338" pos:column="7">logmsg<pos:position pos:line="338" pos:column="13"/></name><argument_list pos:line="338" pos:column="13">(<argument><expr><literal type="string" pos:line="338" pos:column="14">"  Expecting %zu POSTed bytes"<pos:position pos:line="338" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="338" pos:column="46">req<pos:position pos:line="338" pos:column="49"/></name><operator pos:line="338" pos:column="49">-&gt;<pos:position pos:line="338" pos:column="54"/></operator><name pos:line="338" pos:column="51">cl<pos:position pos:line="338" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="338" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="338" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="339" pos:column="6"/></block></then></if>
  }<pos:position pos:line="340" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="341" pos:column="3">else <if pos:line="341" pos:column="8">if<condition pos:line="341" pos:column="10">(<expr><operator pos:line="341" pos:column="11">!<pos:position pos:line="341" pos:column="12"/></operator><name><name pos:line="341" pos:column="12">req<pos:position pos:line="341" pos:column="15"/></name><operator pos:line="341" pos:column="15">-&gt;<pos:position pos:line="341" pos:column="20"/></operator><name pos:line="341" pos:column="17">ntlm<pos:position pos:line="341" pos:column="21"/></name></name> <operator pos:line="341" pos:column="22">&amp;&amp;<pos:position pos:line="341" pos:column="32"/></operator>
          <call><name pos:line="342" pos:column="11">strstr<pos:position pos:line="342" pos:column="17"/></name><argument_list pos:line="342" pos:column="17">(<argument><expr><name><name pos:line="342" pos:column="18">req<pos:position pos:line="342" pos:column="21"/></name><operator pos:line="342" pos:column="21">-&gt;<pos:position pos:line="342" pos:column="26"/></operator><name pos:line="342" pos:column="23">reqbuf<pos:position pos:line="342" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="342" pos:column="31">"Authorization: NTLM TlRMTVNTUAAB"<pos:position pos:line="342" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="342" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="342" pos:column="67"/></condition><then pos:line="342" pos:column="67"> <block pos:line="342" pos:column="68">{
    <comment type="block" pos:line="343" pos:column="5">/* If the client is passing this type-1 NTLM header */</comment>
    <expr_stmt><expr><name><name pos:line="344" pos:column="5">req<pos:position pos:line="344" pos:column="8"/></name><operator pos:line="344" pos:column="8">-&gt;<pos:position pos:line="344" pos:column="13"/></operator><name pos:line="344" pos:column="10">partno<pos:position pos:line="344" pos:column="16"/></name></name> <operator pos:line="344" pos:column="17">+=<pos:position pos:line="344" pos:column="19"/></operator> <literal type="number" pos:line="344" pos:column="20">1001<pos:position pos:line="344" pos:column="24"/></literal></expr>;<pos:position pos:line="344" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="345" pos:column="5">req<pos:position pos:line="345" pos:column="8"/></name><operator pos:line="345" pos:column="8">-&gt;<pos:position pos:line="345" pos:column="13"/></operator><name pos:line="345" pos:column="10">ntlm<pos:position pos:line="345" pos:column="14"/></name></name> <operator pos:line="345" pos:column="15">=<pos:position pos:line="345" pos:column="16"/></operator> <name pos:line="345" pos:column="17">TRUE<pos:position pos:line="345" pos:column="21"/></name></expr>;<pos:position pos:line="345" pos:column="22"/></expr_stmt> <comment type="block" pos:line="345" pos:column="23">/* NTLM found */</comment>
    <expr_stmt><expr><call><name pos:line="346" pos:column="5">logmsg<pos:position pos:line="346" pos:column="11"/></name><argument_list pos:line="346" pos:column="11">(<argument><expr><literal type="string" pos:line="346" pos:column="12">"Received NTLM type-1, sending back data %ld"<pos:position pos:line="346" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="346" pos:column="59">req<pos:position pos:line="346" pos:column="62"/></name><operator pos:line="346" pos:column="62">-&gt;<pos:position pos:line="346" pos:column="67"/></operator><name pos:line="346" pos:column="64">partno<pos:position pos:line="346" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="346" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="346" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="347" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="348" pos:column="3">else <if pos:line="348" pos:column="8">if<condition pos:line="348" pos:column="10">(<expr><operator pos:line="348" pos:column="11">(<pos:position pos:line="348" pos:column="12"/></operator><name><name pos:line="348" pos:column="12">req<pos:position pos:line="348" pos:column="15"/></name><operator pos:line="348" pos:column="15">-&gt;<pos:position pos:line="348" pos:column="20"/></operator><name pos:line="348" pos:column="17">partno<pos:position pos:line="348" pos:column="23"/></name></name> <operator pos:line="348" pos:column="24">&gt;=<pos:position pos:line="348" pos:column="29"/></operator> <literal type="number" pos:line="348" pos:column="27">1000<pos:position pos:line="348" pos:column="31"/></literal><operator pos:line="348" pos:column="31">)<pos:position pos:line="348" pos:column="32"/></operator> <operator pos:line="348" pos:column="33">&amp;&amp;<pos:position pos:line="348" pos:column="43"/></operator>
          <call><name pos:line="349" pos:column="11">strstr<pos:position pos:line="349" pos:column="17"/></name><argument_list pos:line="349" pos:column="17">(<argument><expr><name><name pos:line="349" pos:column="18">req<pos:position pos:line="349" pos:column="21"/></name><operator pos:line="349" pos:column="21">-&gt;<pos:position pos:line="349" pos:column="26"/></operator><name pos:line="349" pos:column="23">reqbuf<pos:position pos:line="349" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="349" pos:column="31">"Authorization: Basic"<pos:position pos:line="349" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="349" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="349" pos:column="55"/></condition><then pos:line="349" pos:column="55"> <block pos:line="349" pos:column="56">{
    <comment type="block" pos:line="350" pos:column="5">/* If the client is passing this Basic-header and the part number is
       already &gt;=1000, we add 1 to the part number.  This allows simple Basic
       authentication negotiation to work in the test suite. */</comment>
    <expr_stmt><expr><name><name pos:line="353" pos:column="5">req<pos:position pos:line="353" pos:column="8"/></name><operator pos:line="353" pos:column="8">-&gt;<pos:position pos:line="353" pos:column="13"/></operator><name pos:line="353" pos:column="10">partno<pos:position pos:line="353" pos:column="16"/></name></name> <operator pos:line="353" pos:column="17">+=<pos:position pos:line="353" pos:column="19"/></operator> <literal type="number" pos:line="353" pos:column="20">1<pos:position pos:line="353" pos:column="21"/></literal></expr>;<pos:position pos:line="353" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="354" pos:column="5">logmsg<pos:position pos:line="354" pos:column="11"/></name><argument_list pos:line="354" pos:column="11">(<argument><expr><literal type="string" pos:line="354" pos:column="12">"Received Basic request, sending back data %ld"<pos:position pos:line="354" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="354" pos:column="61">req<pos:position pos:line="354" pos:column="64"/></name><operator pos:line="354" pos:column="64">-&gt;<pos:position pos:line="354" pos:column="69"/></operator><name pos:line="354" pos:column="66">partno<pos:position pos:line="354" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="354" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="354" pos:column="74"/></expr_stmt>
  }<pos:position pos:line="355" pos:column="4"/></block></then></if></elseif></if>
  <if pos:line="356" pos:column="3">if<condition pos:line="356" pos:column="5">(<expr><call><name pos:line="356" pos:column="6">strstr<pos:position pos:line="356" pos:column="12"/></name><argument_list pos:line="356" pos:column="12">(<argument><expr><name><name pos:line="356" pos:column="13">req<pos:position pos:line="356" pos:column="16"/></name><operator pos:line="356" pos:column="16">-&gt;<pos:position pos:line="356" pos:column="21"/></operator><name pos:line="356" pos:column="18">reqbuf<pos:position pos:line="356" pos:column="24"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="356" pos:column="26">"Connection: close"<pos:position pos:line="356" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="356" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="356" pos:column="47"/></condition><then pos:line="356" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="357" pos:column="5">req<pos:position pos:line="357" pos:column="8"/></name><operator pos:line="357" pos:column="8">-&gt;<pos:position pos:line="357" pos:column="13"/></operator><name pos:line="357" pos:column="10">open<pos:position pos:line="357" pos:column="14"/></name></name> <operator pos:line="357" pos:column="15">=<pos:position pos:line="357" pos:column="16"/></operator> <name pos:line="357" pos:column="17">FALSE<pos:position pos:line="357" pos:column="22"/></name></expr>;<pos:position pos:line="357" pos:column="23"/></expr_stmt></block></then></if> <comment type="block" pos:line="357" pos:column="24">/* close connection after this request */</comment>

  <if pos:line="359" pos:column="3">if<condition pos:line="359" pos:column="5">(<expr><operator pos:line="359" pos:column="6">!<pos:position pos:line="359" pos:column="7"/></operator><name><name pos:line="359" pos:column="7">req<pos:position pos:line="359" pos:column="10"/></name><operator pos:line="359" pos:column="10">-&gt;<pos:position pos:line="359" pos:column="15"/></operator><name pos:line="359" pos:column="12">pipe<pos:position pos:line="359" pos:column="16"/></name></name> <operator pos:line="359" pos:column="17">&amp;&amp;<pos:position pos:line="359" pos:column="27"/></operator>
     <name><name pos:line="360" pos:column="6">req<pos:position pos:line="360" pos:column="9"/></name><operator pos:line="360" pos:column="9">-&gt;<pos:position pos:line="360" pos:column="14"/></operator><name pos:line="360" pos:column="11">open<pos:position pos:line="360" pos:column="15"/></name></name> <operator pos:line="360" pos:column="16">&amp;&amp;<pos:position pos:line="360" pos:column="26"/></operator>
     <name><name pos:line="361" pos:column="6">req<pos:position pos:line="361" pos:column="9"/></name><operator pos:line="361" pos:column="9">-&gt;<pos:position pos:line="361" pos:column="14"/></operator><name pos:line="361" pos:column="11">prot_version<pos:position pos:line="361" pos:column="23"/></name></name> <operator pos:line="361" pos:column="24">&gt;=<pos:position pos:line="361" pos:column="29"/></operator> <literal type="number" pos:line="361" pos:column="27">11<pos:position pos:line="361" pos:column="29"/></literal> <operator pos:line="361" pos:column="30">&amp;&amp;<pos:position pos:line="361" pos:column="40"/></operator>
     <name pos:line="362" pos:column="6">end<pos:position pos:line="362" pos:column="9"/></name> <operator pos:line="362" pos:column="10">&amp;&amp;<pos:position pos:line="362" pos:column="20"/></operator>
     <name><name pos:line="363" pos:column="6">req<pos:position pos:line="363" pos:column="9"/></name><operator pos:line="363" pos:column="9">-&gt;<pos:position pos:line="363" pos:column="14"/></operator><name pos:line="363" pos:column="11">reqbuf<pos:position pos:line="363" pos:column="17"/></name></name> <operator pos:line="363" pos:column="18">+<pos:position pos:line="363" pos:column="19"/></operator> <name><name pos:line="363" pos:column="20">req<pos:position pos:line="363" pos:column="23"/></name><operator pos:line="363" pos:column="23">-&gt;<pos:position pos:line="363" pos:column="28"/></operator><name pos:line="363" pos:column="25">offset<pos:position pos:line="363" pos:column="31"/></name></name> <operator pos:line="363" pos:column="32">&gt;<pos:position pos:line="363" pos:column="36"/></operator> <name pos:line="363" pos:column="34">end<pos:position pos:line="363" pos:column="37"/></name> <operator pos:line="363" pos:column="38">+<pos:position pos:line="363" pos:column="39"/></operator> <call><name pos:line="363" pos:column="40">strlen<pos:position pos:line="363" pos:column="46"/></name><argument_list pos:line="363" pos:column="46">(<argument><expr><name pos:line="363" pos:column="47">end_of_headers<pos:position pos:line="363" pos:column="61"/></name></expr></argument>)<pos:position pos:line="363" pos:column="62"/></argument_list></call> <operator pos:line="363" pos:column="63">&amp;&amp;<pos:position pos:line="363" pos:column="73"/></operator>
     <operator pos:line="364" pos:column="6">!<pos:position pos:line="364" pos:column="7"/></operator><name><name pos:line="364" pos:column="7">req<pos:position pos:line="364" pos:column="10"/></name><operator pos:line="364" pos:column="10">-&gt;<pos:position pos:line="364" pos:column="15"/></operator><name pos:line="364" pos:column="12">cl<pos:position pos:line="364" pos:column="14"/></name></name> <operator pos:line="364" pos:column="15">&amp;&amp;<pos:position pos:line="364" pos:column="25"/></operator>
     <operator pos:line="365" pos:column="6">(<pos:position pos:line="365" pos:column="7"/></operator><operator pos:line="365" pos:column="7">!<pos:position pos:line="365" pos:column="8"/></operator><call><name pos:line="365" pos:column="8">strncmp<pos:position pos:line="365" pos:column="15"/></name><argument_list pos:line="365" pos:column="15">(<argument><expr><name><name pos:line="365" pos:column="16">req<pos:position pos:line="365" pos:column="19"/></name><operator pos:line="365" pos:column="19">-&gt;<pos:position pos:line="365" pos:column="24"/></operator><name pos:line="365" pos:column="21">reqbuf<pos:position pos:line="365" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="365" pos:column="29">"GET"<pos:position pos:line="365" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="365" pos:column="36">strlen<pos:position pos:line="365" pos:column="42"/></name><argument_list pos:line="365" pos:column="42">(<argument><expr><literal type="string" pos:line="365" pos:column="43">"GET"<pos:position pos:line="365" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="365" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="365" pos:column="50"/></argument_list></call> <operator pos:line="365" pos:column="51">||<pos:position pos:line="365" pos:column="53"/></operator>
      <operator pos:line="366" pos:column="7">!<pos:position pos:line="366" pos:column="8"/></operator><call><name pos:line="366" pos:column="8">strncmp<pos:position pos:line="366" pos:column="15"/></name><argument_list pos:line="366" pos:column="15">(<argument><expr><name><name pos:line="366" pos:column="16">req<pos:position pos:line="366" pos:column="19"/></name><operator pos:line="366" pos:column="19">-&gt;<pos:position pos:line="366" pos:column="24"/></operator><name pos:line="366" pos:column="21">reqbuf<pos:position pos:line="366" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="366" pos:column="29">"HEAD"<pos:position pos:line="366" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="366" pos:column="37">strlen<pos:position pos:line="366" pos:column="43"/></name><argument_list pos:line="366" pos:column="43">(<argument><expr><literal type="string" pos:line="366" pos:column="44">"HEAD"<pos:position pos:line="366" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="366" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="366" pos:column="52"/></argument_list></call><operator pos:line="366" pos:column="52">)<pos:position pos:line="366" pos:column="53"/></operator></expr>)<pos:position pos:line="366" pos:column="54"/></condition><then pos:line="366" pos:column="54"> <block pos:line="366" pos:column="55">{
    <comment type="block" pos:line="367" pos:column="5">/* If we have a persistent connection, HTTP version &gt;= 1.1
       and GET/HEAD request, enable pipelining. */</comment>
    <expr_stmt><expr><name><name pos:line="369" pos:column="5">req<pos:position pos:line="369" pos:column="8"/></name><operator pos:line="369" pos:column="8">-&gt;<pos:position pos:line="369" pos:column="13"/></operator><name pos:line="369" pos:column="10">checkindex<pos:position pos:line="369" pos:column="20"/></name></name> <operator pos:line="369" pos:column="21">=<pos:position pos:line="369" pos:column="22"/></operator> <operator pos:line="369" pos:column="23">(<pos:position pos:line="369" pos:column="24"/></operator><name pos:line="369" pos:column="24">end<pos:position pos:line="369" pos:column="27"/></name> <operator pos:line="369" pos:column="28">-<pos:position pos:line="369" pos:column="29"/></operator> <name><name pos:line="369" pos:column="30">req<pos:position pos:line="369" pos:column="33"/></name><operator pos:line="369" pos:column="33">-&gt;<pos:position pos:line="369" pos:column="38"/></operator><name pos:line="369" pos:column="35">reqbuf<pos:position pos:line="369" pos:column="41"/></name></name><operator pos:line="369" pos:column="41">)<pos:position pos:line="369" pos:column="42"/></operator> <operator pos:line="369" pos:column="43">+<pos:position pos:line="369" pos:column="44"/></operator> <call><name pos:line="369" pos:column="45">strlen<pos:position pos:line="369" pos:column="51"/></name><argument_list pos:line="369" pos:column="51">(<argument><expr><name pos:line="369" pos:column="52">end_of_headers<pos:position pos:line="369" pos:column="66"/></name></expr></argument>)<pos:position pos:line="369" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="369" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="370" pos:column="5">req<pos:position pos:line="370" pos:column="8"/></name><operator pos:line="370" pos:column="8">-&gt;<pos:position pos:line="370" pos:column="13"/></operator><name pos:line="370" pos:column="10">pipelining<pos:position pos:line="370" pos:column="20"/></name></name> <operator pos:line="370" pos:column="21">=<pos:position pos:line="370" pos:column="22"/></operator> <name pos:line="370" pos:column="23">TRUE<pos:position pos:line="370" pos:column="27"/></name></expr>;<pos:position pos:line="370" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="371" pos:column="4"/></block></then></if>

  <while pos:line="373" pos:column="3">while<condition pos:line="373" pos:column="8">(<expr><name><name pos:line="373" pos:column="9">req<pos:position pos:line="373" pos:column="12"/></name><operator pos:line="373" pos:column="12">-&gt;<pos:position pos:line="373" pos:column="17"/></operator><name pos:line="373" pos:column="14">pipe<pos:position pos:line="373" pos:column="18"/></name></name></expr>)<pos:position pos:line="373" pos:column="19"/></condition> <block pos:line="373" pos:column="20">{
    <if pos:line="374" pos:column="5">if<condition pos:line="374" pos:column="7">(<expr><name pos:line="374" pos:column="8">got_exit_signal<pos:position pos:line="374" pos:column="23"/></name></expr>)<pos:position pos:line="374" pos:column="24"/></condition><then pos:line="374" pos:column="24">
      <block type="pseudo"><return pos:line="375" pos:column="7">return <expr><literal type="number" pos:line="375" pos:column="14">1<pos:position pos:line="375" pos:column="15"/></literal></expr>;<pos:position pos:line="375" pos:column="16"/></return></block></then></if> <comment type="block" pos:line="375" pos:column="17">/* done */</comment>
    <comment type="block" pos:line="376" pos:column="5">/* scan for more header ends within this chunk */</comment>
    <expr_stmt><expr><name pos:line="377" pos:column="5">line<pos:position pos:line="377" pos:column="9"/></name> <operator pos:line="377" pos:column="10">=<pos:position pos:line="377" pos:column="11"/></operator> <operator pos:line="377" pos:column="12">&amp;<pos:position pos:line="377" pos:column="17"/></operator><name><name pos:line="377" pos:column="13">req<pos:position pos:line="377" pos:column="16"/></name><operator pos:line="377" pos:column="16">-&gt;<pos:position pos:line="377" pos:column="21"/></operator><name pos:line="377" pos:column="18">reqbuf<pos:position pos:line="377" pos:column="24"/></name><index pos:line="377" pos:column="24">[<expr><name><name pos:line="377" pos:column="25">req<pos:position pos:line="377" pos:column="28"/></name><operator pos:line="377" pos:column="28">-&gt;<pos:position pos:line="377" pos:column="33"/></operator><name pos:line="377" pos:column="30">checkindex<pos:position pos:line="377" pos:column="40"/></name></name></expr>]<pos:position pos:line="377" pos:column="41"/></index></name></expr>;<pos:position pos:line="377" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="378" pos:column="5">end<pos:position pos:line="378" pos:column="8"/></name> <operator pos:line="378" pos:column="9">=<pos:position pos:line="378" pos:column="10"/></operator> <call><name pos:line="378" pos:column="11">strstr<pos:position pos:line="378" pos:column="17"/></name><argument_list pos:line="378" pos:column="17">(<argument><expr><name pos:line="378" pos:column="18">line<pos:position pos:line="378" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="378" pos:column="24">end_of_headers<pos:position pos:line="378" pos:column="38"/></name></expr></argument>)<pos:position pos:line="378" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="378" pos:column="40"/></expr_stmt>
    <if pos:line="379" pos:column="5">if<condition pos:line="379" pos:column="7">(<expr><operator pos:line="379" pos:column="8">!<pos:position pos:line="379" pos:column="9"/></operator><name pos:line="379" pos:column="9">end<pos:position pos:line="379" pos:column="12"/></name></expr>)<pos:position pos:line="379" pos:column="13"/></condition><then pos:line="379" pos:column="13">
      <block type="pseudo"><break pos:line="380" pos:column="7">break;<pos:position pos:line="380" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name><name pos:line="381" pos:column="5">req<pos:position pos:line="381" pos:column="8"/></name><operator pos:line="381" pos:column="8">-&gt;<pos:position pos:line="381" pos:column="13"/></operator><name pos:line="381" pos:column="10">checkindex<pos:position pos:line="381" pos:column="20"/></name></name> <operator pos:line="381" pos:column="21">+=<pos:position pos:line="381" pos:column="23"/></operator> <operator pos:line="381" pos:column="24">(<pos:position pos:line="381" pos:column="25"/></operator><name pos:line="381" pos:column="25">end<pos:position pos:line="381" pos:column="28"/></name> <operator pos:line="381" pos:column="29">-<pos:position pos:line="381" pos:column="30"/></operator> <name pos:line="381" pos:column="31">line<pos:position pos:line="381" pos:column="35"/></name><operator pos:line="381" pos:column="35">)<pos:position pos:line="381" pos:column="36"/></operator> <operator pos:line="381" pos:column="37">+<pos:position pos:line="381" pos:column="38"/></operator> <call><name pos:line="381" pos:column="39">strlen<pos:position pos:line="381" pos:column="45"/></name><argument_list pos:line="381" pos:column="45">(<argument><expr><name pos:line="381" pos:column="46">end_of_headers<pos:position pos:line="381" pos:column="60"/></name></expr></argument>)<pos:position pos:line="381" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="381" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="382" pos:column="5">req<pos:position pos:line="382" pos:column="8"/></name><operator pos:line="382" pos:column="8">-&gt;<pos:position pos:line="382" pos:column="13"/></operator><name pos:line="382" pos:column="10">pipe<pos:position pos:line="382" pos:column="14"/></name></name><operator pos:line="382" pos:column="14">--<pos:position pos:line="382" pos:column="16"/></operator></expr>;<pos:position pos:line="382" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="383" pos:column="4"/></block></while>

  <comment type="block" pos:line="385" pos:column="3">/* If authentication is required and no auth was provided, end now. This
     makes the server NOT wait for PUT/POST data and you can then make the
     test case send a rejection before any such data has been sent. Test case
     154 uses this.*/</comment>
  <if pos:line="389" pos:column="3">if<condition pos:line="389" pos:column="5">(<expr><name><name pos:line="389" pos:column="6">req<pos:position pos:line="389" pos:column="9"/></name><operator pos:line="389" pos:column="9">-&gt;<pos:position pos:line="389" pos:column="14"/></operator><name pos:line="389" pos:column="11">auth_req<pos:position pos:line="389" pos:column="19"/></name></name> <operator pos:line="389" pos:column="20">&amp;&amp;<pos:position pos:line="389" pos:column="30"/></operator> <operator pos:line="389" pos:column="23">!<pos:position pos:line="389" pos:column="24"/></operator><name><name pos:line="389" pos:column="24">req<pos:position pos:line="389" pos:column="27"/></name><operator pos:line="389" pos:column="27">-&gt;<pos:position pos:line="389" pos:column="32"/></operator><name pos:line="389" pos:column="29">auth<pos:position pos:line="389" pos:column="33"/></name></name></expr>)<pos:position pos:line="389" pos:column="34"/></condition><then pos:line="389" pos:column="34"> <block pos:line="389" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="390" pos:column="5">logmsg<pos:position pos:line="390" pos:column="11"/></name><argument_list pos:line="390" pos:column="11">(<argument><expr><literal type="string" pos:line="390" pos:column="12">"Return early due to auth requested by none provided"<pos:position pos:line="390" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="390" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="390" pos:column="67"/></expr_stmt>
    <return pos:line="391" pos:column="5">return <expr><literal type="number" pos:line="391" pos:column="12">1<pos:position pos:line="391" pos:column="13"/></literal></expr>;<pos:position pos:line="391" pos:column="14"/></return> <comment type="block" pos:line="391" pos:column="15">/* done */</comment>
  }<pos:position pos:line="392" pos:column="4"/></block></then></if>

  <if pos:line="394" pos:column="3">if<condition pos:line="394" pos:column="5">(<expr><name><name pos:line="394" pos:column="6">req<pos:position pos:line="394" pos:column="9"/></name><operator pos:line="394" pos:column="9">-&gt;<pos:position pos:line="394" pos:column="14"/></operator><name pos:line="394" pos:column="11">upgrade<pos:position pos:line="394" pos:column="18"/></name></name> <operator pos:line="394" pos:column="19">&amp;&amp;<pos:position pos:line="394" pos:column="29"/></operator> <call><name pos:line="394" pos:column="22">strstr<pos:position pos:line="394" pos:column="28"/></name><argument_list pos:line="394" pos:column="28">(<argument><expr><name><name pos:line="394" pos:column="29">req<pos:position pos:line="394" pos:column="32"/></name><operator pos:line="394" pos:column="32">-&gt;<pos:position pos:line="394" pos:column="37"/></operator><name pos:line="394" pos:column="34">reqbuf<pos:position pos:line="394" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="394" pos:column="42">"Upgrade:"<pos:position pos:line="394" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="394" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="394" pos:column="54"/></condition><then pos:line="394" pos:column="54"> <block pos:line="394" pos:column="55">{
    <comment type="block" pos:line="395" pos:column="5">/* we allow upgrade and there was one! */</comment>
    <expr_stmt><expr><call><name pos:line="396" pos:column="5">logmsg<pos:position pos:line="396" pos:column="11"/></name><argument_list pos:line="396" pos:column="11">(<argument><expr><literal type="string" pos:line="396" pos:column="12">"Found Upgrade: in request and allows it"<pos:position pos:line="396" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="396" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="396" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="397" pos:column="5">req<pos:position pos:line="397" pos:column="8"/></name><operator pos:line="397" pos:column="8">-&gt;<pos:position pos:line="397" pos:column="13"/></operator><name pos:line="397" pos:column="10">upgrade_request<pos:position pos:line="397" pos:column="25"/></name></name> <operator pos:line="397" pos:column="26">=<pos:position pos:line="397" pos:column="27"/></operator> <name pos:line="397" pos:column="28">TRUE<pos:position pos:line="397" pos:column="32"/></name></expr>;<pos:position pos:line="397" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="398" pos:column="4"/></block></then></if>

  <if pos:line="400" pos:column="3">if<condition pos:line="400" pos:column="5">(<expr><name><name pos:line="400" pos:column="6">req<pos:position pos:line="400" pos:column="9"/></name><operator pos:line="400" pos:column="9">-&gt;<pos:position pos:line="400" pos:column="14"/></operator><name pos:line="400" pos:column="11">cl<pos:position pos:line="400" pos:column="13"/></name></name> <operator pos:line="400" pos:column="14">&gt;<pos:position pos:line="400" pos:column="18"/></operator> <literal type="number" pos:line="400" pos:column="16">0<pos:position pos:line="400" pos:column="17"/></literal></expr>)<pos:position pos:line="400" pos:column="18"/></condition><then pos:line="400" pos:column="18"> <block pos:line="400" pos:column="19">{
    <if pos:line="401" pos:column="5">if<condition pos:line="401" pos:column="7">(<expr><name><name pos:line="401" pos:column="8">req<pos:position pos:line="401" pos:column="11"/></name><operator pos:line="401" pos:column="11">-&gt;<pos:position pos:line="401" pos:column="16"/></operator><name pos:line="401" pos:column="13">cl<pos:position pos:line="401" pos:column="15"/></name></name> <operator pos:line="401" pos:column="16">&lt;=<pos:position pos:line="401" pos:column="21"/></operator> <name><name pos:line="401" pos:column="19">req<pos:position pos:line="401" pos:column="22"/></name><operator pos:line="401" pos:column="22">-&gt;<pos:position pos:line="401" pos:column="27"/></operator><name pos:line="401" pos:column="24">offset<pos:position pos:line="401" pos:column="30"/></name></name> <operator pos:line="401" pos:column="31">-<pos:position pos:line="401" pos:column="32"/></operator> <operator pos:line="401" pos:column="33">(<pos:position pos:line="401" pos:column="34"/></operator><name pos:line="401" pos:column="34">end<pos:position pos:line="401" pos:column="37"/></name> <operator pos:line="401" pos:column="38">-<pos:position pos:line="401" pos:column="39"/></operator> <name><name pos:line="401" pos:column="40">req<pos:position pos:line="401" pos:column="43"/></name><operator pos:line="401" pos:column="43">-&gt;<pos:position pos:line="401" pos:column="48"/></operator><name pos:line="401" pos:column="45">reqbuf<pos:position pos:line="401" pos:column="51"/></name></name><operator pos:line="401" pos:column="51">)<pos:position pos:line="401" pos:column="52"/></operator> <operator pos:line="401" pos:column="53">-<pos:position pos:line="401" pos:column="54"/></operator> <call><name pos:line="401" pos:column="55">strlen<pos:position pos:line="401" pos:column="61"/></name><argument_list pos:line="401" pos:column="61">(<argument><expr><name pos:line="401" pos:column="62">end_of_headers<pos:position pos:line="401" pos:column="76"/></name></expr></argument>)<pos:position pos:line="401" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="401" pos:column="78"/></condition><then pos:line="401" pos:column="78">
      <block type="pseudo"><return pos:line="402" pos:column="7">return <expr><literal type="number" pos:line="402" pos:column="14">1<pos:position pos:line="402" pos:column="15"/></literal></expr>;<pos:position pos:line="402" pos:column="16"/></return></block></then> <comment type="block" pos:line="402" pos:column="17">/* done */</comment>
    <else pos:line="403" pos:column="5">else
      <block type="pseudo"><return pos:line="404" pos:column="7">return <expr><literal type="number" pos:line="404" pos:column="14">0<pos:position pos:line="404" pos:column="15"/></literal></expr>;<pos:position pos:line="404" pos:column="16"/></return></block></else></if> <comment type="block" pos:line="404" pos:column="17">/* not complete yet */</comment>
  }<pos:position pos:line="405" pos:column="4"/></block></then></if>

  <return pos:line="407" pos:column="3">return <expr><literal type="number" pos:line="407" pos:column="10">1<pos:position pos:line="407" pos:column="11"/></literal></expr>;<pos:position pos:line="407" pos:column="12"/></return> <comment type="block" pos:line="407" pos:column="13">/* done */</comment>
}<pos:position pos:line="408" pos:column="2"/></block></function></unit>
