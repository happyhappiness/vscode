<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_784_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">ii<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">FILE<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">infile<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">uint8_t<pos:position pos:line="5" pos:column="10"/></name> <modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">buffer<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">buffer_len<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

  <for pos:line="8" pos:column="3">for<control pos:line="8" pos:column="6">(<init><expr><name pos:line="8" pos:column="7">ii<pos:position pos:line="8" pos:column="9"/></name> <operator pos:line="8" pos:column="10">=<pos:position pos:line="8" pos:column="11"/></operator> <literal type="number" pos:line="8" pos:column="12">1<pos:position pos:line="8" pos:column="13"/></literal></expr>;<pos:position pos:line="8" pos:column="14"/></init> <condition><expr><name pos:line="8" pos:column="15">ii<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">&lt;<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="20">argc<pos:position pos:line="8" pos:column="24"/></name></expr>;<pos:position pos:line="8" pos:column="25"/></condition> <incr><expr><name pos:line="8" pos:column="26">ii<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">++<pos:position pos:line="8" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="31"/></control> <block pos:line="8" pos:column="32">{
    <comment type="block" pos:line="9" pos:column="5">/* Try and open the file. */</comment>
    <expr_stmt><expr><name pos:line="10" pos:column="5">infile<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">fopen<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name><name pos:line="10" pos:column="20">argv<pos:position pos:line="10" pos:column="24"/></name><index pos:line="10" pos:column="24">[<expr><name pos:line="10" pos:column="25">ii<pos:position pos:line="10" pos:column="27"/></name></expr>]<pos:position pos:line="10" pos:column="28"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="30">"rb"<pos:position pos:line="10" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt>
    <if pos:line="11" pos:column="5">if<condition pos:line="11" pos:column="7">(<expr><name pos:line="11" pos:column="8">infile<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15"> <block pos:line="11" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">printf<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><literal type="string" pos:line="12" pos:column="14">"[%s] Open succeeded! \n"<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="41">argv<pos:position pos:line="12" pos:column="45"/></name><index pos:line="12" pos:column="45">[<expr><name pos:line="12" pos:column="46">ii<pos:position pos:line="12" pos:column="48"/></name></expr>]<pos:position pos:line="12" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>

      <comment type="block" pos:line="14" pos:column="7">/* Get the length of the file. */</comment>
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">fseek<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">infile<pos:position pos:line="15" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="21">0L<pos:position pos:line="15" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="25">SEEK_END<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="16" pos:column="7">buffer_len<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <call><name pos:line="16" pos:column="20">ftell<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">infile<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>

      <comment type="block" pos:line="18" pos:column="7">/* Reset the file indicator to the beginning of the file. */</comment>
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">fseek<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><name pos:line="19" pos:column="13">infile<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="21">0L<pos:position pos:line="19" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="25">SEEK_SET<pos:position pos:line="19" pos:column="33"/></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>

      <comment type="block" pos:line="21" pos:column="7">/* Allocate a buffer for the file contents. */</comment>
      <expr_stmt><expr><name pos:line="22" pos:column="7">buffer<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">uint8_t<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">*<pos:position pos:line="22" pos:column="26"/></operator><operator pos:line="22" pos:column="26">)<pos:position pos:line="22" pos:column="27"/></operator><call><name pos:line="22" pos:column="27">calloc<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">buffer_len<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="46">sizeof<argument_list pos:line="22" pos:column="52">(<argument><expr><name pos:line="22" pos:column="53">uint8_t<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt>
      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><name pos:line="23" pos:column="10">buffer<pos:position pos:line="23" pos:column="16"/></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17"> <block pos:line="23" pos:column="18">{
        <comment type="block" pos:line="24" pos:column="9">/* Read all the text from the file into the buffer. */</comment>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">fread<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">buffer<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="23">sizeof<argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">uint8_t<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">buffer_len<pos:position pos:line="25" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="52">infile<pos:position pos:line="25" pos:column="58"/></name></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">printf<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="string" pos:line="26" pos:column="16">"[%s] Read %zu bytes, calling fuzzer\n"<pos:position pos:line="26" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="57">argv<pos:position pos:line="26" pos:column="61"/></name><index pos:line="26" pos:column="61">[<expr><name pos:line="26" pos:column="62">ii<pos:position pos:line="26" pos:column="64"/></name></expr>]<pos:position pos:line="26" pos:column="65"/></index></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="67">buffer_len<pos:position pos:line="26" pos:column="77"/></name></expr></argument>)<pos:position pos:line="26" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="79"/></expr_stmt>

        <comment type="block" pos:line="28" pos:column="9">/* Call the fuzzer with the data. */</comment>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">LLVMFuzzerTestOneInput<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">buffer<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="40">buffer_len<pos:position pos:line="29" pos:column="50"/></name></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="31" pos:column="9">printf<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="string" pos:line="31" pos:column="16">"[%s] Fuzzing complete\n"<pos:position pos:line="31" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="43">argv<pos:position pos:line="31" pos:column="47"/></name><index pos:line="31" pos:column="47">[<expr><name pos:line="31" pos:column="48">ii<pos:position pos:line="31" pos:column="50"/></name></expr>]<pos:position pos:line="31" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>

        <comment type="block" pos:line="33" pos:column="9">/* Free the buffer as it's no longer needed. */</comment>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">free<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">buffer<pos:position pos:line="34" pos:column="20"/></name></expr></argument>)<pos:position pos:line="34" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">buffer<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <name pos:line="35" pos:column="18">NULL<pos:position pos:line="35" pos:column="22"/></name></expr>;<pos:position pos:line="35" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="36" pos:column="8"/></block></then>
      <else pos:line="37" pos:column="7">else
      <block pos:line="38" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">fprintf<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">stderr<pos:position pos:line="39" pos:column="23"/></name></expr></argument>,
                <argument><expr><literal type="string" pos:line="40" pos:column="17">"[%s] Failed to allocate %zu bytes \n"<pos:position pos:line="40" pos:column="55"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="41" pos:column="17">argv<pos:position pos:line="41" pos:column="21"/></name><index pos:line="41" pos:column="21">[<expr><name pos:line="41" pos:column="22">ii<pos:position pos:line="41" pos:column="24"/></name></expr>]<pos:position pos:line="41" pos:column="25"/></index></name></expr></argument>,
                <argument><expr><name pos:line="42" pos:column="17">buffer_len<pos:position pos:line="42" pos:column="27"/></name></expr></argument>)<pos:position pos:line="42" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="43" pos:column="8"/></block></else></if>

      <comment type="block" pos:line="45" pos:column="7">/* Close the file as it's no longer needed. */</comment>
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">fclose<pos:position pos:line="46" pos:column="13"/></name><argument_list pos:line="46" pos:column="13">(<argument><expr><name pos:line="46" pos:column="14">infile<pos:position pos:line="46" pos:column="20"/></name></expr></argument>)<pos:position pos:line="46" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="47" pos:column="7">infile<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator> <name pos:line="47" pos:column="16">NULL<pos:position pos:line="47" pos:column="20"/></name></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then>
    <else pos:line="49" pos:column="5">else
    <block pos:line="50" pos:column="5">{
      <comment type="block" pos:line="51" pos:column="7">/* Failed to open the file. Maybe wrong name or wrong permissions? */</comment>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">fprintf<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><name pos:line="52" pos:column="15">stderr<pos:position pos:line="52" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="23">"[%s] Open failed. \n"<pos:position pos:line="52" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="47">argv<pos:position pos:line="52" pos:column="51"/></name><index pos:line="52" pos:column="51">[<expr><name pos:line="52" pos:column="52">ii<pos:position pos:line="52" pos:column="54"/></name></expr>]<pos:position pos:line="52" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></else></if>
  }<pos:position pos:line="54" pos:column="4"/></block></for>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
