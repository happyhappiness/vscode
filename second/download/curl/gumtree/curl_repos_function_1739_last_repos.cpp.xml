<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1739_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">query_completed_cb<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">arg<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>,  <comment type="block" pos:line="1" pos:column="44">/* (struct connectdata *) */</comment>
                               <parameter><decl><type><name pos:line="2" pos:column="32">int<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">status<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">HAVE_CARES_CALLBACK_TIMEOUTS<pos:position pos:line="3" pos:column="36"/></name></cpp:ifdef>
                               <parameter><decl><type><name pos:line="4" pos:column="32">int<pos:position pos:line="4" pos:column="35"/></name></type> <name pos:line="4" pos:column="36">timeouts<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>,
<cpp:endif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">endif<pos:position pos:line="5" pos:column="7"/></cpp:directive></cpp:endif>
                               <parameter><decl><type><name><name pos:line="6" pos:column="32">struct<pos:position pos:line="6" pos:column="38"/></name> <name pos:line="6" pos:column="39">hostent<pos:position pos:line="6" pos:column="46"/></name></name> <modifier pos:line="6" pos:column="47">*<pos:position pos:line="6" pos:column="48"/></modifier></type><name pos:line="6" pos:column="48">hostent<pos:position pos:line="6" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="56"/></parameter_list>
<block pos:line="7" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">connectdata<pos:position pos:line="8" pos:column="21"/></name></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">conn<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><operator pos:line="8" pos:column="30">(<pos:position pos:line="8" pos:column="31"/></operator>struct <name pos:line="8" pos:column="38">connectdata<pos:position pos:line="8" pos:column="49"/></name> <operator pos:line="8" pos:column="50">*<pos:position pos:line="8" pos:column="51"/></operator><operator pos:line="8" pos:column="51">)<pos:position pos:line="8" pos:column="52"/></operator><name pos:line="8" pos:column="52">arg<pos:position pos:line="8" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="56"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">ResolverResults<pos:position pos:line="9" pos:column="25"/></name></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">res<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">HAVE_CARES_CALLBACK_TIMEOUTS<pos:position pos:line="11" pos:column="36"/></name></cpp:ifdef>
  <expr_stmt><expr><operator pos:line="12" pos:column="3">(<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">void<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">)<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">timeouts<pos:position pos:line="12" pos:column="17"/></name></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt> <comment type="block" pos:line="12" pos:column="19">/* ignored */</comment>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name pos:line="15" pos:column="6">ARES_EDESTRUCTION<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">==<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">status<pos:position pos:line="15" pos:column="33"/></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34">
    <comment type="block" pos:line="16" pos:column="5">/* when this ares handle is getting destroyed, the 'arg' pointer may not
       be valid so only defer it when we know the 'status' says its fine! */</comment>
    <block type="pseudo"><return pos:line="18" pos:column="5">return;<pos:position pos:line="18" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">res<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator>struct <name pos:line="20" pos:column="17">ResolverResults<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">*<pos:position pos:line="20" pos:column="34"/></operator><operator pos:line="20" pos:column="34">)<pos:position pos:line="20" pos:column="35"/></operator><name><name pos:line="20" pos:column="35">conn<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">async<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">.<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">os_specific<pos:position pos:line="20" pos:column="58"/></name></name></expr>;<pos:position pos:line="20" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">res<pos:position pos:line="21" pos:column="6"/></name><operator pos:line="21" pos:column="6">-&gt;<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="8">num_pending<pos:position pos:line="21" pos:column="19"/></name></name><operator pos:line="21" pos:column="19">--<pos:position pos:line="21" pos:column="21"/></operator></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt>

  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name pos:line="23" pos:column="6">CURL_ASYNC_SUCCESS<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">==<pos:position pos:line="23" pos:column="27"/></operator> <name pos:line="23" pos:column="28">status<pos:position pos:line="23" pos:column="34"/></name></expr>)<pos:position pos:line="23" pos:column="35"/></condition><then pos:line="23" pos:column="35"> <block pos:line="23" pos:column="36">{
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">Curl_addrinfo<pos:position pos:line="24" pos:column="18"/></name> <modifier pos:line="24" pos:column="19">*<pos:position pos:line="24" pos:column="20"/></modifier></type><name pos:line="24" pos:column="20">ai<pos:position pos:line="24" pos:column="22"/></name> <init pos:line="24" pos:column="23">= <expr><call><name pos:line="24" pos:column="25">Curl_he2ai<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">hostent<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="45">conn<pos:position pos:line="24" pos:column="49"/></name><operator pos:line="24" pos:column="49">-&gt;<pos:position pos:line="24" pos:column="54"/></operator><name pos:line="24" pos:column="51">async<pos:position pos:line="24" pos:column="56"/></name><operator pos:line="24" pos:column="56">.<pos:position pos:line="24" pos:column="57"/></operator><name pos:line="24" pos:column="57">port<pos:position pos:line="24" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="63"/></decl_stmt>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">ai<pos:position pos:line="25" pos:column="10"/></name></expr>)<pos:position pos:line="25" pos:column="11"/></condition><then pos:line="25" pos:column="11"> <block pos:line="25" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">compound_results<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">res<pos:position pos:line="26" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="29">ai<pos:position pos:line="26" pos:column="31"/></name></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="29" pos:column="3">/* A successful result overwrites any previous error */</comment>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name><name pos:line="30" pos:column="6">res<pos:position pos:line="30" pos:column="9"/></name><operator pos:line="30" pos:column="9">-&gt;<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="11">last_status<pos:position pos:line="30" pos:column="22"/></name></name> <operator pos:line="30" pos:column="23">!=<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="26">ARES_SUCCESS<pos:position pos:line="30" pos:column="38"/></name></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="5">res<pos:position pos:line="31" pos:column="8"/></name><operator pos:line="31" pos:column="8">-&gt;<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="10">last_status<pos:position pos:line="31" pos:column="21"/></name></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">status<pos:position pos:line="31" pos:column="30"/></name></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt></block></then></if>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
