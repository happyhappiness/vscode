<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_297_curl-7.10.4.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">Curl_dns_entry<pos:position pos:line="1" pos:column="22"/></name></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">Curl_resolv<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">SessionHandle<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">data<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">hostname<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="3" pos:column="36">int<pos:position pos:line="3" pos:column="39"/></name></type> <name pos:line="3" pos:column="40">port<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="45"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">entry_id<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name pos:line="5" pos:column="20">NULL<pos:position pos:line="5" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_dns_entry<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">dns<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name pos:line="6" pos:column="32">NULL<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">ssize_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">entry_len<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">time_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">now<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">bufp<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">HAVE_SIGSETJMP<pos:position pos:line="11" pos:column="22"/></name></cpp:ifdef>
  <comment type="block" pos:line="12" pos:column="3">/* this allows us to time-out from the name resolver, as the timeout
     will generate a signal and we will siglongjmp() from that here */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">!<pos:position pos:line="14" pos:column="7"/></operator><name><name pos:line="14" pos:column="7">data<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">-&gt;<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="13">set<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">.<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">no_signal<pos:position pos:line="14" pos:column="26"/></name></name> <operator pos:line="14" pos:column="27">&amp;&amp;<pos:position pos:line="14" pos:column="37"/></operator> <call><name pos:line="14" pos:column="30">sigsetjmp<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><name pos:line="14" pos:column="40">curl_jmpenv<pos:position pos:line="14" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="53">1<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="56"/></condition><then pos:line="14" pos:column="56"> <block pos:line="14" pos:column="57">{
    <comment type="block" pos:line="15" pos:column="5">/* this is coming from a siglongjmp() */</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">failf<pos:position pos:line="16" pos:column="10"/></name><argument_list pos:line="16" pos:column="10">(<argument><expr><name pos:line="16" pos:column="11">data<pos:position pos:line="16" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="17">"name lookup time-outed"<pos:position pos:line="16" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">NULL<pos:position pos:line="17" pos:column="16"/></name></expr>;<pos:position pos:line="17" pos:column="17"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="21" pos:column="3">/* Create an entry id, based upon the hostname and port */</comment>
  <expr_stmt><expr><name pos:line="22" pos:column="3">entry_len<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">strlen<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">hostname<pos:position pos:line="22" pos:column="30"/></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name pos:line="23" pos:column="3">entry_id<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">create_hostcache_id<pos:position pos:line="23" pos:column="33"/></name><argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">hostname<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="44">port<pos:position pos:line="23" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="50">&amp;<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="51">entry_len<pos:position pos:line="23" pos:column="60"/></name></expr></argument>)<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="62"/></expr_stmt>
  <comment type="block" pos:line="24" pos:column="3">/* If we can't create the entry id, fail */</comment>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><operator pos:line="25" pos:column="7">!<pos:position pos:line="25" pos:column="8"/></operator><name pos:line="25" pos:column="8">entry_id<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17">
    <block type="pseudo"><return pos:line="26" pos:column="5">return <expr><name pos:line="26" pos:column="12">NULL<pos:position pos:line="26" pos:column="16"/></name></expr>;<pos:position pos:line="26" pos:column="17"/></return></block></then></if>

  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">(<expr><name><name pos:line="28" pos:column="6">data<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">share<pos:position pos:line="28" pos:column="17"/></name></name></expr>)<pos:position pos:line="28" pos:column="18"/></condition><then pos:line="28" pos:column="18">
  <block pos:line="29" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">Curl_share_lock<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">data<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="27">CURL_LOCK_DATA_DNS<pos:position pos:line="30" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">CURL_LOCK_ACCESS_SINGLE<pos:position pos:line="30" pos:column="70"/></name></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* See if its already in our dns cache */</comment>
  <expr_stmt><expr><name pos:line="34" pos:column="3">dns<pos:position pos:line="34" pos:column="6"/></name> <operator pos:line="34" pos:column="7">=<pos:position pos:line="34" pos:column="8"/></operator> <call><name pos:line="34" pos:column="9">Curl_hash_pick<pos:position pos:line="34" pos:column="23"/></name><argument_list pos:line="34" pos:column="23">(<argument><expr><name><name pos:line="34" pos:column="24">data<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">-&gt;<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="30">hostcache<pos:position pos:line="34" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">entry_id<pos:position pos:line="34" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="51">entry_len<pos:position pos:line="34" pos:column="60"/></name><operator pos:line="34" pos:column="60">+<pos:position pos:line="34" pos:column="61"/></operator><literal type="number" pos:line="34" pos:column="61">1<pos:position pos:line="34" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="64"/></expr_stmt>

  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><operator pos:line="36" pos:column="7">!<pos:position pos:line="36" pos:column="8"/></operator><name pos:line="36" pos:column="8">dns<pos:position pos:line="36" pos:column="11"/></name></expr>)<pos:position pos:line="36" pos:column="12"/></condition><then pos:line="36" pos:column="12"> <block pos:line="36" pos:column="13">{
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">Curl_addrinfo<pos:position pos:line="37" pos:column="18"/></name> <modifier pos:line="37" pos:column="19">*<pos:position pos:line="37" pos:column="20"/></modifier></type><name pos:line="37" pos:column="20">addr<pos:position pos:line="37" pos:column="24"/></name> <init pos:line="37" pos:column="25">= <expr><call><name pos:line="37" pos:column="27">my_getaddrinfo<pos:position pos:line="37" pos:column="41"/></name><argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">data<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">hostname<pos:position pos:line="37" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="58">port<pos:position pos:line="37" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="64">&amp;<pos:position pos:line="37" pos:column="69"/></operator><name pos:line="37" pos:column="65">bufp<pos:position pos:line="37" pos:column="69"/></name></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="71"/></decl_stmt>
    
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">!<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">addr<pos:position pos:line="39" pos:column="14"/></name></expr>)<pos:position pos:line="39" pos:column="15"/></condition><then pos:line="39" pos:column="15"> <block pos:line="39" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">HOSTCACHE_RETURN<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">NULL<pos:position pos:line="40" pos:column="28"/></name></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="43" pos:column="5">/* Create a new cache entry */</comment>
    <expr_stmt><expr><name pos:line="44" pos:column="5">dns<pos:position pos:line="44" pos:column="8"/></name> <operator pos:line="44" pos:column="9">=<pos:position pos:line="44" pos:column="10"/></operator> <operator pos:line="44" pos:column="11">(<pos:position pos:line="44" pos:column="12"/></operator>struct <name pos:line="44" pos:column="19">Curl_dns_entry<pos:position pos:line="44" pos:column="33"/></name> <operator pos:line="44" pos:column="34">*<pos:position pos:line="44" pos:column="35"/></operator><operator pos:line="44" pos:column="35">)<pos:position pos:line="44" pos:column="36"/></operator> <call><name pos:line="44" pos:column="37">malloc<pos:position pos:line="44" pos:column="43"/></name><argument_list pos:line="44" pos:column="43">(<argument><expr><sizeof pos:line="44" pos:column="44">sizeof<argument_list pos:line="44" pos:column="50">(<argument><expr pos:line="44" pos:column="51">struct <name pos:line="44" pos:column="58">Curl_dns_entry<pos:position pos:line="44" pos:column="72"/></name></expr></argument>)<pos:position pos:line="44" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="75"/></expr_stmt>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><operator pos:line="45" pos:column="9">!<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">dns<pos:position pos:line="45" pos:column="13"/></name></expr>)<pos:position pos:line="45" pos:column="14"/></condition><then pos:line="45" pos:column="14"> <block pos:line="45" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">Curl_freeaddrinfo<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">addr<pos:position pos:line="46" pos:column="29"/></name></expr></argument>)<pos:position pos:line="46" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">HOSTCACHE_RETURN<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><name pos:line="47" pos:column="24">NULL<pos:position pos:line="47" pos:column="28"/></name></expr></argument>)<pos:position pos:line="47" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="50" pos:column="5">dns<pos:position pos:line="50" pos:column="8"/></name><operator pos:line="50" pos:column="8">-&gt;<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="10">inuse<pos:position pos:line="50" pos:column="15"/></name></name> <operator pos:line="50" pos:column="16">=<pos:position pos:line="50" pos:column="17"/></operator> <literal type="number" pos:line="50" pos:column="18">0<pos:position pos:line="50" pos:column="19"/></literal></expr>;<pos:position pos:line="50" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">dns<pos:position pos:line="51" pos:column="8"/></name><operator pos:line="51" pos:column="8">-&gt;<pos:position pos:line="51" pos:column="13"/></operator><name pos:line="51" pos:column="10">addr<pos:position pos:line="51" pos:column="14"/></name></name> <operator pos:line="51" pos:column="15">=<pos:position pos:line="51" pos:column="16"/></operator> <name pos:line="51" pos:column="17">addr<pos:position pos:line="51" pos:column="21"/></name></expr>;<pos:position pos:line="51" pos:column="22"/></expr_stmt>
    <comment type="block" pos:line="52" pos:column="5">/* Save it in our host cache */</comment>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">Curl_hash_add<pos:position pos:line="53" pos:column="18"/></name><argument_list pos:line="53" pos:column="18">(<argument><expr><name><name pos:line="53" pos:column="19">data<pos:position pos:line="53" pos:column="23"/></name><operator pos:line="53" pos:column="23">-&gt;<pos:position pos:line="53" pos:column="28"/></operator><name pos:line="53" pos:column="25">hostcache<pos:position pos:line="53" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="36">entry_id<pos:position pos:line="53" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="46">entry_len<pos:position pos:line="53" pos:column="55"/></name><operator pos:line="53" pos:column="55">+<pos:position pos:line="53" pos:column="56"/></operator><literal type="number" pos:line="53" pos:column="56">1<pos:position pos:line="53" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="53" pos:column="59">(<pos:position pos:line="53" pos:column="60"/></operator><specifier pos:line="53" pos:column="60">const<pos:position pos:line="53" pos:column="65"/></specifier> <name pos:line="53" pos:column="66">void<pos:position pos:line="53" pos:column="70"/></name> <operator pos:line="53" pos:column="71">*<pos:position pos:line="53" pos:column="72"/></operator><operator pos:line="53" pos:column="72">)<pos:position pos:line="53" pos:column="73"/></operator> <name pos:line="53" pos:column="74">dns<pos:position pos:line="53" pos:column="77"/></name></expr></argument>)<pos:position pos:line="53" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="79"/></expr_stmt>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="55" pos:column="3">time<pos:position pos:line="55" pos:column="7"/></name><argument_list pos:line="55" pos:column="7">(<argument><expr><operator pos:line="55" pos:column="8">&amp;<pos:position pos:line="55" pos:column="13"/></operator><name pos:line="55" pos:column="9">now<pos:position pos:line="55" pos:column="12"/></name></expr></argument>)<pos:position pos:line="55" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="14"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="57" pos:column="3">dns<pos:position pos:line="57" pos:column="6"/></name><operator pos:line="57" pos:column="6">-&gt;<pos:position pos:line="57" pos:column="11"/></operator><name pos:line="57" pos:column="8">timestamp<pos:position pos:line="57" pos:column="17"/></name></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <name pos:line="57" pos:column="20">now<pos:position pos:line="57" pos:column="23"/></name></expr>;<pos:position pos:line="57" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="58" pos:column="3">dns<pos:position pos:line="58" pos:column="6"/></name><operator pos:line="58" pos:column="6">-&gt;<pos:position pos:line="58" pos:column="11"/></operator><name pos:line="58" pos:column="8">inuse<pos:position pos:line="58" pos:column="13"/></name></name><operator pos:line="58" pos:column="13">++<pos:position pos:line="58" pos:column="15"/></operator></expr>;<pos:position pos:line="58" pos:column="16"/></expr_stmt>         <comment type="block" pos:line="58" pos:column="25">/* mark entry as in-use */</comment>
<cpp:ifdef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifdef<pos:position pos:line="59" pos:column="7"/></cpp:directive> <name pos:line="59" pos:column="8">MALLOCDEBUG<pos:position pos:line="59" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="60" pos:column="3">dns<pos:position pos:line="60" pos:column="6"/></name><operator pos:line="60" pos:column="6">-&gt;<pos:position pos:line="60" pos:column="11"/></operator><name pos:line="60" pos:column="8">entry_id<pos:position pos:line="60" pos:column="16"/></name></name> <operator pos:line="60" pos:column="17">=<pos:position pos:line="60" pos:column="18"/></operator> <name pos:line="60" pos:column="19">entry_id<pos:position pos:line="60" pos:column="27"/></name></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="63" pos:column="3">/* Remove outdated and unused entries from the hostcache */</comment>
  <expr_stmt><expr><call><name pos:line="64" pos:column="3">hostcache_prune<pos:position pos:line="64" pos:column="18"/></name><argument_list pos:line="64" pos:column="18">(<argument><expr><name><name pos:line="64" pos:column="19">data<pos:position pos:line="64" pos:column="23"/></name><operator pos:line="64" pos:column="23">-&gt;<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="25">hostcache<pos:position pos:line="64" pos:column="34"/></name></name></expr></argument>, 
                  <argument><expr><name><name pos:line="65" pos:column="19">data<pos:position pos:line="65" pos:column="23"/></name><operator pos:line="65" pos:column="23">-&gt;<pos:position pos:line="65" pos:column="28"/></operator><name pos:line="65" pos:column="25">set<pos:position pos:line="65" pos:column="28"/></name><operator pos:line="65" pos:column="28">.<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="29">dns_cache_timeout<pos:position pos:line="65" pos:column="46"/></name></name></expr></argument>, 
                  <argument><expr><name pos:line="66" pos:column="19">now<pos:position pos:line="66" pos:column="22"/></name></expr></argument>)<pos:position pos:line="66" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="68" pos:column="3">HOSTCACHE_RETURN<pos:position pos:line="68" pos:column="19"/></name><argument_list pos:line="68" pos:column="19">(<argument><expr><name pos:line="68" pos:column="20">dns<pos:position pos:line="68" pos:column="23"/></name></expr></argument>)<pos:position pos:line="68" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
