<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2284_curl-7.55.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ossl_connect_step2<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">int<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">sockindex<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_easy<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name><name pos:line="3" pos:column="28">conn<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">data<pos:position pos:line="3" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">err<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">ssl_connect_data<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">connssl<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><operator pos:line="5" pos:column="38">&amp;<pos:position pos:line="5" pos:column="43"/></operator><name><name pos:line="5" pos:column="39">conn<pos:position pos:line="5" pos:column="43"/></name><operator pos:line="5" pos:column="43">-&gt;<pos:position pos:line="5" pos:column="48"/></operator><name pos:line="5" pos:column="45">ssl<pos:position pos:line="5" pos:column="48"/></name><index pos:line="5" pos:column="48">[<expr><name pos:line="5" pos:column="49">sockindex<pos:position pos:line="5" pos:column="58"/></name></expr>]<pos:position pos:line="5" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">long<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier> <specifier pos:line="6" pos:column="10">const<pos:position pos:line="6" pos:column="15"/></specifier></type> <name pos:line="6" pos:column="16">certverifyresult<pos:position pos:line="6" pos:column="32"/></name> <init pos:line="6" pos:column="33">= <expr><ternary><condition><expr><call><name pos:line="6" pos:column="35">SSL_IS_PROXY<pos:position pos:line="6" pos:column="47"/></name><argument_list pos:line="6" pos:column="47">()<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr> ?<pos:position pos:line="6" pos:column="51"/></condition><then pos:line="6" pos:column="51">
    <expr><operator pos:line="7" pos:column="5">&amp;<pos:position pos:line="7" pos:column="10"/></operator><name><name pos:line="7" pos:column="6">data<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">set<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">proxy_ssl<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">.<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="26">certverifyresult<pos:position pos:line="7" pos:column="42"/></name></name></expr> <pos:position pos:line="7" pos:column="43"/></then><else pos:line="7" pos:column="43">: <expr><operator pos:line="7" pos:column="45">&amp;<pos:position pos:line="7" pos:column="50"/></operator><name><name pos:line="7" pos:column="46">data<pos:position pos:line="7" pos:column="50"/></name><operator pos:line="7" pos:column="50">-&gt;<pos:position pos:line="7" pos:column="55"/></operator><name pos:line="7" pos:column="52">set<pos:position pos:line="7" pos:column="55"/></name><operator pos:line="7" pos:column="55">.<pos:position pos:line="7" pos:column="56"/></operator><name pos:line="7" pos:column="56">ssl<pos:position pos:line="7" pos:column="59"/></name><operator pos:line="7" pos:column="59">.<pos:position pos:line="7" pos:column="60"/></operator><name pos:line="7" pos:column="60">certverifyresult<pos:position pos:line="7" pos:column="76"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="77"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">DEBUGASSERT<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">ssl_connect_2<pos:position pos:line="8" pos:column="28"/></name> <operator pos:line="8" pos:column="29">==<pos:position pos:line="8" pos:column="31"/></operator> <name><name pos:line="8" pos:column="32">connssl<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">-&gt;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="41">connecting_state<pos:position pos:line="8" pos:column="57"/></name></name>
              <operator pos:line="9" pos:column="15">||<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">ssl_connect_2_reading<pos:position pos:line="9" pos:column="39"/></name> <operator pos:line="9" pos:column="40">==<pos:position pos:line="9" pos:column="42"/></operator> <name><name pos:line="9" pos:column="43">connssl<pos:position pos:line="9" pos:column="50"/></name><operator pos:line="9" pos:column="50">-&gt;<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="52">connecting_state<pos:position pos:line="9" pos:column="68"/></name></name>
              <operator pos:line="10" pos:column="15">||<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">ssl_connect_2_writing<pos:position pos:line="10" pos:column="39"/></name> <operator pos:line="10" pos:column="40">==<pos:position pos:line="10" pos:column="42"/></operator> <name><name pos:line="10" pos:column="43">connssl<pos:position pos:line="10" pos:column="50"/></name><operator pos:line="10" pos:column="50">-&gt;<pos:position pos:line="10" pos:column="55"/></operator><name pos:line="10" pos:column="52">connecting_state<pos:position pos:line="10" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="70"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">ERR_clear_error<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">()<pos:position pos:line="12" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">err<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <call><name pos:line="14" pos:column="9">SSL_connect<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name><name pos:line="14" pos:column="21">connssl<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">-&gt;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="30">handle<pos:position pos:line="14" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* 1  is fine
     0  is "not successful but was shut down controlled"
     &lt;0 is "handshake was not successful, because a fatal error occurred" */</comment>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><literal type="number" pos:line="19" pos:column="6">1<pos:position pos:line="19" pos:column="7"/></literal> <operator pos:line="19" pos:column="8">!=<pos:position pos:line="19" pos:column="10"/></operator> <name pos:line="19" pos:column="11">err<pos:position pos:line="19" pos:column="14"/></name></expr>)<pos:position pos:line="19" pos:column="15"/></condition><then pos:line="19" pos:column="15"> <block pos:line="19" pos:column="16">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">int<pos:position pos:line="20" pos:column="8"/></name></type> <name pos:line="20" pos:column="9">detail<pos:position pos:line="20" pos:column="15"/></name> <init pos:line="20" pos:column="16">= <expr><call><name pos:line="20" pos:column="18">SSL_get_error<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name><name pos:line="20" pos:column="32">connssl<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">handle<pos:position pos:line="20" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="49">err<pos:position pos:line="20" pos:column="52"/></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="54"/></decl_stmt>

    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><name pos:line="22" pos:column="8">SSL_ERROR_WANT_READ<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">==<pos:position pos:line="22" pos:column="30"/></operator> <name pos:line="22" pos:column="31">detail<pos:position pos:line="22" pos:column="37"/></name></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38"> <block pos:line="22" pos:column="39">{
      <expr_stmt><expr><name><name pos:line="23" pos:column="7">connssl<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">connecting_state<pos:position pos:line="23" pos:column="32"/></name></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <name pos:line="23" pos:column="35">ssl_connect_2_reading<pos:position pos:line="23" pos:column="56"/></name></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>
      <return pos:line="24" pos:column="7">return <expr><name pos:line="24" pos:column="14">CURLE_OK<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><name pos:line="26" pos:column="8">SSL_ERROR_WANT_WRITE<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">==<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">detail<pos:position pos:line="26" pos:column="38"/></name></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39"> <block pos:line="26" pos:column="40">{
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">connssl<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">-&gt;<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="16">connecting_state<pos:position pos:line="27" pos:column="32"/></name></name> <operator pos:line="27" pos:column="33">=<pos:position pos:line="27" pos:column="34"/></operator> <name pos:line="27" pos:column="35">ssl_connect_2_writing<pos:position pos:line="27" pos:column="56"/></name></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
      <return pos:line="28" pos:column="7">return <expr><name pos:line="28" pos:column="14">CURLE_OK<pos:position pos:line="28" pos:column="22"/></name></expr>;<pos:position pos:line="28" pos:column="23"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then>
    <else pos:line="30" pos:column="5">else <block pos:line="30" pos:column="10">{
      <comment type="block" pos:line="31" pos:column="7">/* untreated error */</comment>
      <decl_stmt><decl><type><name pos:line="32" pos:column="7">unsigned<pos:position pos:line="32" pos:column="15"/></name> <name pos:line="32" pos:column="16">long<pos:position pos:line="32" pos:column="20"/></name></type> <name pos:line="32" pos:column="21">errdetail<pos:position pos:line="32" pos:column="30"/></name></decl>;<pos:position pos:line="32" pos:column="31"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="33" pos:column="7">char<pos:position pos:line="33" pos:column="11"/></name></type> <name><name pos:line="33" pos:column="12">error_buffer<pos:position pos:line="33" pos:column="24"/></name><index pos:line="33" pos:column="24">[<expr><literal type="number" pos:line="33" pos:column="25">256<pos:position pos:line="33" pos:column="28"/></literal></expr>]<pos:position pos:line="33" pos:column="29"/></index></name><init pos:line="33" pos:column="29">=<expr><literal type="string" pos:line="33" pos:column="30">""<pos:position pos:line="33" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="33" pos:column="33"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="34" pos:column="7">CURLcode<pos:position pos:line="34" pos:column="15"/></name></type> <name pos:line="34" pos:column="16">result<pos:position pos:line="34" pos:column="22"/></name></decl>;<pos:position pos:line="34" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="35" pos:column="7">long<pos:position pos:line="35" pos:column="11"/></name></type> <name pos:line="35" pos:column="12">lerr<pos:position pos:line="35" pos:column="16"/></name></decl>;<pos:position pos:line="35" pos:column="17"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="36" pos:column="7">int<pos:position pos:line="36" pos:column="10"/></name></type> <name pos:line="36" pos:column="11">lib<pos:position pos:line="36" pos:column="14"/></name></decl>;<pos:position pos:line="36" pos:column="15"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="37" pos:column="7">int<pos:position pos:line="37" pos:column="10"/></name></type> <name pos:line="37" pos:column="11">reason<pos:position pos:line="37" pos:column="17"/></name></decl>;<pos:position pos:line="37" pos:column="18"/></decl_stmt>

      <comment type="block" pos:line="39" pos:column="7">/* the connection failed, we're not waiting for anything else. */</comment>
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">connssl<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">-&gt;<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="16">connecting_state<pos:position pos:line="40" pos:column="32"/></name></name> <operator pos:line="40" pos:column="33">=<pos:position pos:line="40" pos:column="34"/></operator> <name pos:line="40" pos:column="35">ssl_connect_2<pos:position pos:line="40" pos:column="48"/></name></expr>;<pos:position pos:line="40" pos:column="49"/></expr_stmt>

      <comment type="block" pos:line="42" pos:column="7">/* Get the earliest error code from the thread's error queue and removes
         the entry. */</comment>
      <expr_stmt><expr><name pos:line="44" pos:column="7">errdetail<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <call><name pos:line="44" pos:column="19">ERR_get_error<pos:position pos:line="44" pos:column="32"/></name><argument_list pos:line="44" pos:column="32">()<pos:position pos:line="44" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt>

      <comment type="block" pos:line="46" pos:column="7">/* Extract which lib and reason */</comment>
      <expr_stmt><expr><name pos:line="47" pos:column="7">lib<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">=<pos:position pos:line="47" pos:column="12"/></operator> <call><name pos:line="47" pos:column="13">ERR_GET_LIB<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">errdetail<pos:position pos:line="47" pos:column="34"/></name></expr></argument>)<pos:position pos:line="47" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name pos:line="48" pos:column="7">reason<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <call><name pos:line="48" pos:column="16">ERR_GET_REASON<pos:position pos:line="48" pos:column="30"/></name><argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">errdetail<pos:position pos:line="48" pos:column="40"/></name></expr></argument>)<pos:position pos:line="48" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="42"/></expr_stmt>

      <if pos:line="50" pos:column="7">if<condition pos:line="50" pos:column="9">(<expr><operator pos:line="50" pos:column="10">(<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">lib<pos:position pos:line="50" pos:column="14"/></name> <operator pos:line="50" pos:column="15">==<pos:position pos:line="50" pos:column="17"/></operator> <name pos:line="50" pos:column="18">ERR_LIB_SSL<pos:position pos:line="50" pos:column="29"/></name><operator pos:line="50" pos:column="29">)<pos:position pos:line="50" pos:column="30"/></operator> <operator pos:line="50" pos:column="31">&amp;&amp;<pos:position pos:line="50" pos:column="41"/></operator>
         <operator pos:line="51" pos:column="10">(<pos:position pos:line="51" pos:column="11"/></operator><name pos:line="51" pos:column="11">reason<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">==<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="21">SSL_R_CERTIFICATE_VERIFY_FAILED<pos:position pos:line="51" pos:column="52"/></name><operator pos:line="51" pos:column="52">)<pos:position pos:line="51" pos:column="53"/></operator></expr>)<pos:position pos:line="51" pos:column="54"/></condition><then pos:line="51" pos:column="54"> <block pos:line="51" pos:column="55">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">result<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <name pos:line="52" pos:column="18">CURLE_SSL_CACERT<pos:position pos:line="52" pos:column="34"/></name></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>

        <expr_stmt><expr><name pos:line="54" pos:column="9">lerr<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <call><name pos:line="54" pos:column="16">SSL_get_verify_result<pos:position pos:line="54" pos:column="37"/></name><argument_list pos:line="54" pos:column="37">(<argument><expr><name><name pos:line="54" pos:column="38">connssl<pos:position pos:line="54" pos:column="45"/></name><operator pos:line="54" pos:column="45">-&gt;<pos:position pos:line="54" pos:column="50"/></operator><name pos:line="54" pos:column="47">handle<pos:position pos:line="54" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="55"/></expr_stmt>
        <if pos:line="55" pos:column="9">if<condition pos:line="55" pos:column="11">(<expr><name pos:line="55" pos:column="12">lerr<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">!=<pos:position pos:line="55" pos:column="19"/></operator> <name pos:line="55" pos:column="20">X509_V_OK<pos:position pos:line="55" pos:column="29"/></name></expr>)<pos:position pos:line="55" pos:column="30"/></condition><then pos:line="55" pos:column="30"> <block pos:line="55" pos:column="31">{
          <expr_stmt><expr><operator pos:line="56" pos:column="11">*<pos:position pos:line="56" pos:column="12"/></operator><name pos:line="56" pos:column="12">certverifyresult<pos:position pos:line="56" pos:column="28"/></name> <operator pos:line="56" pos:column="29">=<pos:position pos:line="56" pos:column="30"/></operator> <name pos:line="56" pos:column="31">lerr<pos:position pos:line="56" pos:column="35"/></name></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="57" pos:column="11">snprintf<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><name pos:line="57" pos:column="20">error_buffer<pos:position pos:line="57" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="34">sizeof<argument_list pos:line="57" pos:column="40">(<argument><expr><name pos:line="57" pos:column="41">error_buffer<pos:position pos:line="57" pos:column="53"/></name></expr></argument>)<pos:position pos:line="57" pos:column="54"/></argument_list></sizeof></expr></argument>,
                   <argument><expr><literal type="string" pos:line="58" pos:column="20">"SSL certificate problem: %s"<pos:position pos:line="58" pos:column="49"/></literal></expr></argument>,
                   <argument><expr><call><name pos:line="59" pos:column="20">X509_verify_cert_error_string<pos:position pos:line="59" pos:column="49"/></name><argument_list pos:line="59" pos:column="49">(<argument><expr><name pos:line="59" pos:column="50">lerr<pos:position pos:line="59" pos:column="54"/></name></expr></argument>)<pos:position pos:line="59" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="60" pos:column="10"/></block></then>
        <else pos:line="61" pos:column="9">else
          <comment type="block" pos:line="62" pos:column="11">/* strcpy() is fine here as long as the string fits within
             error_buffer */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="11">strcpy<pos:position pos:line="64" pos:column="17"/></name><argument_list pos:line="64" pos:column="17">(<argument><expr><name pos:line="64" pos:column="18">error_buffer<pos:position pos:line="64" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="32">"SSL certificate verification failed"<pos:position pos:line="64" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="71"/></expr_stmt></block></else></if>
      }<pos:position pos:line="65" pos:column="8"/></block></then>
      <else pos:line="66" pos:column="7">else <block pos:line="66" pos:column="12">{
        <expr_stmt><expr><name pos:line="67" pos:column="9">result<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <name pos:line="67" pos:column="18">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="67" pos:column="41"/></name></expr>;<pos:position pos:line="67" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">ossl_strerror<pos:position pos:line="68" pos:column="22"/></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name pos:line="68" pos:column="23">errdetail<pos:position pos:line="68" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="34">error_buffer<pos:position pos:line="68" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="48">sizeof<argument_list pos:line="68" pos:column="54">(<argument><expr><name pos:line="68" pos:column="55">error_buffer<pos:position pos:line="68" pos:column="67"/></name></expr></argument>)<pos:position pos:line="68" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="70"/></expr_stmt>
      }<pos:position pos:line="69" pos:column="8"/></block></else></if>

      <comment type="block" pos:line="71" pos:column="7">/* detail is already set to the SSL error above */</comment>

      <comment type="block" pos:line="73" pos:column="7">/* If we e.g. use SSLv2 request-method and the server doesn't like us
       * (RST connection etc.), OpenSSL gives no explanation whatsoever and
       * the SO_ERROR is also lost.
       */</comment>
      <if pos:line="77" pos:column="7">if<condition pos:line="77" pos:column="9">(<expr><name pos:line="77" pos:column="10">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="77" pos:column="33"/></name> <operator pos:line="77" pos:column="34">==<pos:position pos:line="77" pos:column="36"/></operator> <name pos:line="77" pos:column="37">result<pos:position pos:line="77" pos:column="43"/></name> <operator pos:line="77" pos:column="44">&amp;&amp;<pos:position pos:line="77" pos:column="54"/></operator> <name pos:line="77" pos:column="47">errdetail<pos:position pos:line="77" pos:column="56"/></name> <operator pos:line="77" pos:column="57">==<pos:position pos:line="77" pos:column="59"/></operator> <literal type="number" pos:line="77" pos:column="60">0<pos:position pos:line="77" pos:column="61"/></literal></expr>)<pos:position pos:line="77" pos:column="62"/></condition><then pos:line="77" pos:column="62"> <block pos:line="77" pos:column="63">{
        <decl_stmt><decl><type><specifier pos:line="78" pos:column="9">const<pos:position pos:line="78" pos:column="14"/></specifier> <name pos:line="78" pos:column="15">char<pos:position pos:line="78" pos:column="19"/></name> <modifier pos:line="78" pos:column="20">*<pos:position pos:line="78" pos:column="21"/></modifier> <specifier pos:line="78" pos:column="22">const<pos:position pos:line="78" pos:column="27"/></specifier></type> <name pos:line="78" pos:column="28">hostname<pos:position pos:line="78" pos:column="36"/></name> <init pos:line="78" pos:column="37">= <expr><ternary><condition><expr><call><name pos:line="78" pos:column="39">SSL_IS_PROXY<pos:position pos:line="78" pos:column="51"/></name><argument_list pos:line="78" pos:column="51">()<pos:position pos:line="78" pos:column="53"/></argument_list></call></expr> ?<pos:position pos:line="78" pos:column="55"/></condition><then pos:line="78" pos:column="55">
          <expr><name><name pos:line="79" pos:column="11">conn<pos:position pos:line="79" pos:column="15"/></name><operator pos:line="79" pos:column="15">-&gt;<pos:position pos:line="79" pos:column="20"/></operator><name pos:line="79" pos:column="17">http_proxy<pos:position pos:line="79" pos:column="27"/></name><operator pos:line="79" pos:column="27">.<pos:position pos:line="79" pos:column="28"/></operator><name pos:line="79" pos:column="28">host<pos:position pos:line="79" pos:column="32"/></name><operator pos:line="79" pos:column="32">.<pos:position pos:line="79" pos:column="33"/></operator><name pos:line="79" pos:column="33">name<pos:position pos:line="79" pos:column="37"/></name></name></expr> <pos:position pos:line="79" pos:column="38"/></then><else pos:line="79" pos:column="38">: <expr><name><name pos:line="79" pos:column="40">conn<pos:position pos:line="79" pos:column="44"/></name><operator pos:line="79" pos:column="44">-&gt;<pos:position pos:line="79" pos:column="49"/></operator><name pos:line="79" pos:column="46">host<pos:position pos:line="79" pos:column="50"/></name><operator pos:line="79" pos:column="50">.<pos:position pos:line="79" pos:column="51"/></operator><name pos:line="79" pos:column="51">name<pos:position pos:line="79" pos:column="55"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="79" pos:column="56"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="80" pos:column="9">const<pos:position pos:line="80" pos:column="14"/></specifier> <name pos:line="80" pos:column="15">long<pos:position pos:line="80" pos:column="19"/></name> <name pos:line="80" pos:column="20">int<pos:position pos:line="80" pos:column="23"/></name></type> <name pos:line="80" pos:column="24">port<pos:position pos:line="80" pos:column="28"/></name> <init pos:line="80" pos:column="29">= <expr><ternary><condition><expr><call><name pos:line="80" pos:column="31">SSL_IS_PROXY<pos:position pos:line="80" pos:column="43"/></name><argument_list pos:line="80" pos:column="43">()<pos:position pos:line="80" pos:column="45"/></argument_list></call></expr> ?<pos:position pos:line="80" pos:column="47"/></condition><then pos:line="80" pos:column="47"> <expr><name><name pos:line="80" pos:column="48">conn<pos:position pos:line="80" pos:column="52"/></name><operator pos:line="80" pos:column="52">-&gt;<pos:position pos:line="80" pos:column="57"/></operator><name pos:line="80" pos:column="54">port<pos:position pos:line="80" pos:column="58"/></name></name></expr> <pos:position pos:line="80" pos:column="59"/></then><else pos:line="80" pos:column="59">: <expr><name><name pos:line="80" pos:column="61">conn<pos:position pos:line="80" pos:column="65"/></name><operator pos:line="80" pos:column="65">-&gt;<pos:position pos:line="80" pos:column="70"/></operator><name pos:line="80" pos:column="67">remote_port<pos:position pos:line="80" pos:column="78"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="80" pos:column="79"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="81" pos:column="9">failf<pos:position pos:line="81" pos:column="14"/></name><argument_list pos:line="81" pos:column="14">(<argument><expr><name pos:line="81" pos:column="15">data<pos:position pos:line="81" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="21">OSSL_PACKAGE<pos:position pos:line="81" pos:column="33"/></name> <literal type="string" pos:line="81" pos:column="34">" SSL_connect: %s in connection to %s:%ld "<pos:position pos:line="81" pos:column="77"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="82" pos:column="15">SSL_ERROR_to_str<pos:position pos:line="82" pos:column="31"/></name><argument_list pos:line="82" pos:column="31">(<argument><expr><name pos:line="82" pos:column="32">detail<pos:position pos:line="82" pos:column="38"/></name></expr></argument>)<pos:position pos:line="82" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="82" pos:column="41">hostname<pos:position pos:line="82" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="51">port<pos:position pos:line="82" pos:column="55"/></name></expr></argument>)<pos:position pos:line="82" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="57"/></expr_stmt>
        <return pos:line="83" pos:column="9">return <expr><name pos:line="83" pos:column="16">result<pos:position pos:line="83" pos:column="22"/></name></expr>;<pos:position pos:line="83" pos:column="23"/></return>
      }<pos:position pos:line="84" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="86" pos:column="7">/* Could be a CERT problem */</comment>
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">failf<pos:position pos:line="87" pos:column="12"/></name><argument_list pos:line="87" pos:column="12">(<argument><expr><name pos:line="87" pos:column="13">data<pos:position pos:line="87" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="19">"%s"<pos:position pos:line="87" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="25">error_buffer<pos:position pos:line="87" pos:column="37"/></name></expr></argument>)<pos:position pos:line="87" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="39"/></expr_stmt>

      <return pos:line="89" pos:column="7">return <expr><name pos:line="89" pos:column="14">result<pos:position pos:line="89" pos:column="20"/></name></expr>;<pos:position pos:line="89" pos:column="21"/></return>
    }<pos:position pos:line="90" pos:column="6"/></block></else></if>
  }<pos:position pos:line="91" pos:column="4"/></block></then>
  <else pos:line="92" pos:column="3">else <block pos:line="92" pos:column="8">{
    <comment type="block" pos:line="93" pos:column="5">/* we have been connected fine, we're not waiting for anything else. */</comment>
    <expr_stmt><expr><name><name pos:line="94" pos:column="5">connssl<pos:position pos:line="94" pos:column="12"/></name><operator pos:line="94" pos:column="12">-&gt;<pos:position pos:line="94" pos:column="17"/></operator><name pos:line="94" pos:column="14">connecting_state<pos:position pos:line="94" pos:column="30"/></name></name> <operator pos:line="94" pos:column="31">=<pos:position pos:line="94" pos:column="32"/></operator> <name pos:line="94" pos:column="33">ssl_connect_3<pos:position pos:line="94" pos:column="46"/></name></expr>;<pos:position pos:line="94" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="96" pos:column="5">/* Informational message */</comment>
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">infof<pos:position pos:line="97" pos:column="10"/></name><argument_list pos:line="97" pos:column="10">(<argument><expr><name pos:line="97" pos:column="11">data<pos:position pos:line="97" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="17">"SSL connection using %s / %s\n"<pos:position pos:line="97" pos:column="49"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="98" pos:column="11">get_ssl_version_txt<pos:position pos:line="98" pos:column="30"/></name><argument_list pos:line="98" pos:column="30">(<argument><expr><name><name pos:line="98" pos:column="31">connssl<pos:position pos:line="98" pos:column="38"/></name><operator pos:line="98" pos:column="38">-&gt;<pos:position pos:line="98" pos:column="43"/></operator><name pos:line="98" pos:column="40">handle<pos:position pos:line="98" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="47"/></argument_list></call></expr></argument>,
          <argument><expr><call><name pos:line="99" pos:column="11">SSL_get_cipher<pos:position pos:line="99" pos:column="25"/></name><argument_list pos:line="99" pos:column="25">(<argument><expr><name><name pos:line="99" pos:column="26">connssl<pos:position pos:line="99" pos:column="33"/></name><operator pos:line="99" pos:column="33">-&gt;<pos:position pos:line="99" pos:column="38"/></operator><name pos:line="99" pos:column="35">handle<pos:position pos:line="99" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="99" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="44"/></expr_stmt>

<cpp:ifdef pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">ifdef<pos:position pos:line="101" pos:column="7"/></cpp:directive> <name pos:line="101" pos:column="8">HAS_ALPN<pos:position pos:line="101" pos:column="16"/></name></cpp:ifdef>
    <comment type="block" pos:line="102" pos:column="5">/* Sets data and len to negotiated protocol, len is 0 if no protocol was
     * negotiated
     */</comment>
    <if pos:line="105" pos:column="5">if<condition pos:line="105" pos:column="7">(<expr><name><name pos:line="105" pos:column="8">conn<pos:position pos:line="105" pos:column="12"/></name><operator pos:line="105" pos:column="12">-&gt;<pos:position pos:line="105" pos:column="17"/></operator><name pos:line="105" pos:column="14">bits<pos:position pos:line="105" pos:column="18"/></name><operator pos:line="105" pos:column="18">.<pos:position pos:line="105" pos:column="19"/></operator><name pos:line="105" pos:column="19">tls_enable_alpn<pos:position pos:line="105" pos:column="34"/></name></name></expr>)<pos:position pos:line="105" pos:column="35"/></condition><then pos:line="105" pos:column="35"> <block pos:line="105" pos:column="36">{
      <decl_stmt><decl><type><specifier pos:line="106" pos:column="7">const<pos:position pos:line="106" pos:column="12"/></specifier> <name pos:line="106" pos:column="13">unsigned<pos:position pos:line="106" pos:column="21"/></name> <name pos:line="106" pos:column="22">char<pos:position pos:line="106" pos:column="26"/></name> <modifier pos:line="106" pos:column="27">*<pos:position pos:line="106" pos:column="28"/></modifier></type><name pos:line="106" pos:column="28">neg_protocol<pos:position pos:line="106" pos:column="40"/></name></decl>;<pos:position pos:line="106" pos:column="41"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="107" pos:column="7">unsigned<pos:position pos:line="107" pos:column="15"/></name> <name pos:line="107" pos:column="16">int<pos:position pos:line="107" pos:column="19"/></name></type> <name pos:line="107" pos:column="20">len<pos:position pos:line="107" pos:column="23"/></name></decl>;<pos:position pos:line="107" pos:column="24"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="108" pos:column="7">SSL_get0_alpn_selected<pos:position pos:line="108" pos:column="29"/></name><argument_list pos:line="108" pos:column="29">(<argument><expr><name><name pos:line="108" pos:column="30">connssl<pos:position pos:line="108" pos:column="37"/></name><operator pos:line="108" pos:column="37">-&gt;<pos:position pos:line="108" pos:column="42"/></operator><name pos:line="108" pos:column="39">handle<pos:position pos:line="108" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="47">&amp;<pos:position pos:line="108" pos:column="52"/></operator><name pos:line="108" pos:column="48">neg_protocol<pos:position pos:line="108" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="62">&amp;<pos:position pos:line="108" pos:column="67"/></operator><name pos:line="108" pos:column="63">len<pos:position pos:line="108" pos:column="66"/></name></expr></argument>)<pos:position pos:line="108" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="68"/></expr_stmt>
      <if pos:line="109" pos:column="7">if<condition pos:line="109" pos:column="9">(<expr><name pos:line="109" pos:column="10">len<pos:position pos:line="109" pos:column="13"/></name> <operator pos:line="109" pos:column="14">!=<pos:position pos:line="109" pos:column="16"/></operator> <literal type="number" pos:line="109" pos:column="17">0<pos:position pos:line="109" pos:column="18"/></literal></expr>)<pos:position pos:line="109" pos:column="19"/></condition><then pos:line="109" pos:column="19"> <block pos:line="109" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="110" pos:column="9">infof<pos:position pos:line="110" pos:column="14"/></name><argument_list pos:line="110" pos:column="14">(<argument><expr><name pos:line="110" pos:column="15">data<pos:position pos:line="110" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="21">"ALPN, server accepted to use %.*s\n"<pos:position pos:line="110" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="60">len<pos:position pos:line="110" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="65">neg_protocol<pos:position pos:line="110" pos:column="77"/></name></expr></argument>)<pos:position pos:line="110" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="79"/></expr_stmt>

<cpp:ifdef pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">ifdef<pos:position pos:line="112" pos:column="7"/></cpp:directive> <name pos:line="112" pos:column="8">USE_NGHTTP2<pos:position pos:line="112" pos:column="19"/></name></cpp:ifdef>
        <if pos:line="113" pos:column="9">if<condition pos:line="113" pos:column="11">(<expr><name pos:line="113" pos:column="12">len<pos:position pos:line="113" pos:column="15"/></name> <operator pos:line="113" pos:column="16">==<pos:position pos:line="113" pos:column="18"/></operator> <name pos:line="113" pos:column="19">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="113" pos:column="47"/></name> <operator pos:line="113" pos:column="48">&amp;&amp;<pos:position pos:line="113" pos:column="58"/></operator>
           <operator pos:line="114" pos:column="12">!<pos:position pos:line="114" pos:column="13"/></operator><call><name pos:line="114" pos:column="13">memcmp<pos:position pos:line="114" pos:column="19"/></name><argument_list pos:line="114" pos:column="19">(<argument><expr><name pos:line="114" pos:column="20">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="114" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="46">neg_protocol<pos:position pos:line="114" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="60">len<pos:position pos:line="114" pos:column="63"/></name></expr></argument>)<pos:position pos:line="114" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="114" pos:column="65"/></condition><then pos:line="114" pos:column="65"> <block pos:line="114" pos:column="66">{
          <expr_stmt><expr><name><name pos:line="115" pos:column="11">conn<pos:position pos:line="115" pos:column="15"/></name><operator pos:line="115" pos:column="15">-&gt;<pos:position pos:line="115" pos:column="20"/></operator><name pos:line="115" pos:column="17">negnpn<pos:position pos:line="115" pos:column="23"/></name></name> <operator pos:line="115" pos:column="24">=<pos:position pos:line="115" pos:column="25"/></operator> <name pos:line="115" pos:column="26">CURL_HTTP_VERSION_2<pos:position pos:line="115" pos:column="45"/></name></expr>;<pos:position pos:line="115" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="116" pos:column="10"/></block></then>
        <elseif pos:line="117" pos:column="9">else
<cpp:endif pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">endif<pos:position pos:line="118" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="119" pos:column="9">if<condition pos:line="119" pos:column="11">(<expr><name pos:line="119" pos:column="12">len<pos:position pos:line="119" pos:column="15"/></name> <operator pos:line="119" pos:column="16">==<pos:position pos:line="119" pos:column="18"/></operator> <name pos:line="119" pos:column="19">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="119" pos:column="39"/></name> <operator pos:line="119" pos:column="40">&amp;&amp;<pos:position pos:line="119" pos:column="50"/></operator>
           <operator pos:line="120" pos:column="12">!<pos:position pos:line="120" pos:column="13"/></operator><call><name pos:line="120" pos:column="13">memcmp<pos:position pos:line="120" pos:column="19"/></name><argument_list pos:line="120" pos:column="19">(<argument><expr><name pos:line="120" pos:column="20">ALPN_HTTP_1_1<pos:position pos:line="120" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="35">neg_protocol<pos:position pos:line="120" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="49">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="120" pos:column="69"/></name></expr></argument>)<pos:position pos:line="120" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="71"/></condition><then pos:line="120" pos:column="71"> <block pos:line="120" pos:column="72">{
          <expr_stmt><expr><name><name pos:line="121" pos:column="11">conn<pos:position pos:line="121" pos:column="15"/></name><operator pos:line="121" pos:column="15">-&gt;<pos:position pos:line="121" pos:column="20"/></operator><name pos:line="121" pos:column="17">negnpn<pos:position pos:line="121" pos:column="23"/></name></name> <operator pos:line="121" pos:column="24">=<pos:position pos:line="121" pos:column="25"/></operator> <name pos:line="121" pos:column="26">CURL_HTTP_VERSION_1_1<pos:position pos:line="121" pos:column="47"/></name></expr>;<pos:position pos:line="121" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="122" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="123" pos:column="8"/></block></then>
      <else pos:line="124" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="125" pos:column="9">infof<pos:position pos:line="125" pos:column="14"/></name><argument_list pos:line="125" pos:column="14">(<argument><expr><name pos:line="125" pos:column="15">data<pos:position pos:line="125" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="21">"ALPN, server did not agree to a protocol\n"<pos:position pos:line="125" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="67"/></expr_stmt></block></else></if>
    }<pos:position pos:line="126" pos:column="6"/></block></then></if>
<cpp:endif pos:line="127" pos:column="1">#<cpp:directive pos:line="127" pos:column="2">endif<pos:position pos:line="127" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="129" pos:column="5">return <expr><name pos:line="129" pos:column="12">CURLE_OK<pos:position pos:line="129" pos:column="20"/></name></expr>;<pos:position pos:line="129" pos:column="21"/></return>
  }<pos:position pos:line="130" pos:column="4"/></block></else></if>
}<pos:position pos:line="131" pos:column="2"/></block></function></unit>
