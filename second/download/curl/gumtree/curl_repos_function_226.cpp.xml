<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_226.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">__stdcall<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">gethostbyname_thread<pos:position pos:line="1" pos:column="47"/></name> <parameter_list pos:line="1" pos:column="48">(<parameter><decl><type><name pos:line="1" pos:column="49">void<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">arg<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">connectdata<pos:position pos:line="3" pos:column="21"/></name></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">conn<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><operator pos:line="3" pos:column="30">(<pos:position pos:line="3" pos:column="31"/></operator>struct <name pos:line="3" pos:column="38">connectdata<pos:position pos:line="3" pos:column="49"/></name><operator pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></operator><operator pos:line="3" pos:column="50">)<pos:position pos:line="3" pos:column="51"/></operator> <name pos:line="3" pos:column="52">arg<pos:position pos:line="3" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="56"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">thread_data<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">td<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><operator pos:line="4" pos:column="28">(<pos:position pos:line="4" pos:column="29"/></operator>struct <name pos:line="4" pos:column="36">thread_data<pos:position pos:line="4" pos:column="47"/></name><operator pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></operator><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator> <name><name pos:line="4" pos:column="50">conn<pos:position pos:line="4" pos:column="54"/></name><operator pos:line="4" pos:column="54">-&gt;<pos:position pos:line="4" pos:column="59"/></operator><name pos:line="4" pos:column="56">async<pos:position pos:line="4" pos:column="61"/></name><operator pos:line="4" pos:column="61">.<pos:position pos:line="4" pos:column="62"/></operator><name pos:line="4" pos:column="62">os_specific<pos:position pos:line="4" pos:column="73"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="74"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">hostent<pos:position pos:line="5" pos:column="17"/></name></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">he<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type>    <name pos:line="6" pos:column="10">rc<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><literal type="number" pos:line="6" pos:column="15">0<pos:position pos:line="6" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Duplicate the passed mutex handle.
   * This allows us to use it even after the container gets destroyed
   * due to a resolver timeout.
   */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">HANDLE<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">mutex_waiting<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name pos:line="12" pos:column="26">NULL<pos:position pos:line="12" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">HANDLE<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">curr_proc<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><call><name pos:line="13" pos:column="22">GetCurrentProcess<pos:position pos:line="13" pos:column="39"/></name><argument_list pos:line="13" pos:column="39">()<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="42"/></decl_stmt>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><operator pos:line="15" pos:column="7">!<pos:position pos:line="15" pos:column="8"/></operator><call><name pos:line="15" pos:column="8">DuplicateHandle<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">curr_proc<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="35">td<pos:position pos:line="15" pos:column="37"/></name><operator pos:line="15" pos:column="37">-&gt;<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="39">mutex_waiting<pos:position pos:line="15" pos:column="52"/></name></name></expr></argument>,
                       <argument><expr><name pos:line="16" pos:column="24">curr_proc<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="35">&amp;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="36">mutex_waiting<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="51">0<pos:position pos:line="16" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="54">FALSE<pos:position pos:line="16" pos:column="59"/></name></expr></argument>,
                       <argument><expr><name pos:line="17" pos:column="24">DUPLICATE_SAME_ACCESS<pos:position pos:line="17" pos:column="45"/></name></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47"> <block pos:line="17" pos:column="48">{
    <comment type="block" pos:line="18" pos:column="5">/* failed to duplicate the mutex, no point in continuing */</comment>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">-<pos:position pos:line="19" pos:column="13"/></operator><literal type="number" pos:line="19" pos:column="13">1<pos:position pos:line="19" pos:column="14"/></literal></expr>;<pos:position pos:line="19" pos:column="15"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* Sharing the same _iob[] element with our parent thread should
   * hopefully make printouts synchronised. I'm not sure it works
   * with a static runtime lib (MSVC's libc.lib).
   */</comment>
<cpp:ifndef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifndef<pos:position pos:line="26" pos:column="8"/></cpp:directive> <name pos:line="26" pos:column="9">_WIN32_WCE<pos:position pos:line="26" pos:column="19"/></name></cpp:ifndef>
  <expr_stmt><expr><operator pos:line="27" pos:column="3">*<pos:position pos:line="27" pos:column="4"/></operator><name pos:line="27" pos:column="4">stderr<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><name><name pos:line="27" pos:column="14">td<pos:position pos:line="27" pos:column="16"/></name><operator pos:line="27" pos:column="16">-&gt;<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="18">stderr_file<pos:position pos:line="27" pos:column="29"/></name></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="30" pos:column="3">WSASetLastError<pos:position pos:line="30" pos:column="18"/></name> <argument_list pos:line="30" pos:column="19">(<argument><expr><name><name pos:line="30" pos:column="20">conn<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">-&gt;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="26">async<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">.<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="32">status<pos:position pos:line="30" pos:column="38"/></name></name> <operator pos:line="30" pos:column="39">=<pos:position pos:line="30" pos:column="40"/></operator> <name pos:line="30" pos:column="41">NO_DATA<pos:position pos:line="30" pos:column="48"/></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt> <comment type="block" pos:line="30" pos:column="51">/* pending status */</comment>
  <expr_stmt><expr><name pos:line="31" pos:column="3">he<pos:position pos:line="31" pos:column="5"/></name> <operator pos:line="31" pos:column="6">=<pos:position pos:line="31" pos:column="7"/></operator> <call><name pos:line="31" pos:column="8">gethostbyname<pos:position pos:line="31" pos:column="21"/></name> <argument_list pos:line="31" pos:column="22">(<argument><expr><name><name pos:line="31" pos:column="23">conn<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">-&gt;<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="29">async<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">.<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="35">hostname<pos:position pos:line="31" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>

  <comment type="block" pos:line="33" pos:column="3">/* is the thread initiator still waiting for us ? */</comment>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><call><name pos:line="34" pos:column="7">WaitForSingleObject<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">mutex_waiting<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="42">0<pos:position pos:line="34" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call> <operator pos:line="34" pos:column="45">==<pos:position pos:line="34" pos:column="47"/></operator> <name pos:line="34" pos:column="48">WAIT_TIMEOUT<pos:position pos:line="34" pos:column="60"/></name></expr>)<pos:position pos:line="34" pos:column="61"/></condition><then pos:line="34" pos:column="61"> <block pos:line="34" pos:column="62">{
    <comment type="block" pos:line="35" pos:column="5">/* yes, it is */</comment>

    <comment type="block" pos:line="37" pos:column="5">/* Mark that we have obtained the information, and that we are
     * calling back with it.
     */</comment>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">SetEvent<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name><name pos:line="40" pos:column="14">td<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">-&gt;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="18">event_resolved<pos:position pos:line="40" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">he<pos:position pos:line="42" pos:column="11"/></name></expr>)<pos:position pos:line="42" pos:column="12"/></condition><then pos:line="42" pos:column="12"> <block pos:line="42" pos:column="13">{
      <expr_stmt><expr><name pos:line="43" pos:column="7">rc<pos:position pos:line="43" pos:column="9"/></name> <operator pos:line="43" pos:column="10">=<pos:position pos:line="43" pos:column="11"/></operator> <call><name pos:line="43" pos:column="12">Curl_addrinfo4_callback<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">conn<pos:position pos:line="43" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="42">CURL_ASYNC_SUCCESS<pos:position pos:line="43" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="62">he<pos:position pos:line="43" pos:column="64"/></name></expr></argument>)<pos:position pos:line="43" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then>
    <else pos:line="45" pos:column="5">else <block pos:line="45" pos:column="10">{
      <expr_stmt><expr><name pos:line="46" pos:column="7">rc<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <call><name pos:line="46" pos:column="12">Curl_addrinfo4_callback<pos:position pos:line="46" pos:column="35"/></name><argument_list pos:line="46" pos:column="35">(<argument><expr><name pos:line="46" pos:column="36">conn<pos:position pos:line="46" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="42">(<pos:position pos:line="46" pos:column="43"/></operator><name pos:line="46" pos:column="43">int<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">)<pos:position pos:line="46" pos:column="47"/></operator><call><name pos:line="46" pos:column="47">WSAGetLastError<pos:position pos:line="46" pos:column="62"/></name><argument_list pos:line="46" pos:column="62">()<pos:position pos:line="46" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="46" pos:column="66">NULL<pos:position pos:line="46" pos:column="70"/></name></expr></argument>)<pos:position pos:line="46" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">TRACE<pos:position pos:line="48" pos:column="10"/></name><argument_list pos:line="48" pos:column="10">(<argument><expr><operator pos:line="48" pos:column="11">(<pos:position pos:line="48" pos:column="12"/></operator><literal type="string" pos:line="48" pos:column="12">"Winsock-error %d, addr %s\n"<pos:position pos:line="48" pos:column="41"/></literal><operator pos:line="48" pos:column="41">,<pos:position pos:line="48" pos:column="42"/></operator> <name><name pos:line="48" pos:column="43">conn<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">-&gt;<pos:position pos:line="48" pos:column="52"/></operator><name pos:line="48" pos:column="49">async<pos:position pos:line="48" pos:column="54"/></name><operator pos:line="48" pos:column="54">.<pos:position pos:line="48" pos:column="55"/></operator><name pos:line="48" pos:column="55">status<pos:position pos:line="48" pos:column="61"/></name></name><operator pos:line="48" pos:column="61">,<pos:position pos:line="48" pos:column="62"/></operator>
           <ternary><condition><expr><name pos:line="49" pos:column="12">he<pos:position pos:line="49" pos:column="14"/></name></expr> ?<pos:position pos:line="49" pos:column="16"/></condition><then pos:line="49" pos:column="16"> <expr><call><name pos:line="49" pos:column="17">inet_ntoa<pos:position pos:line="49" pos:column="26"/></name><argument_list pos:line="49" pos:column="26">(<argument><expr><operator pos:line="49" pos:column="27">*<pos:position pos:line="49" pos:column="28"/></operator><operator pos:line="49" pos:column="28">(<pos:position pos:line="49" pos:column="29"/></operator>struct <name pos:line="49" pos:column="36">in_addr<pos:position pos:line="49" pos:column="43"/></name><operator pos:line="49" pos:column="43">*<pos:position pos:line="49" pos:column="44"/></operator><operator pos:line="49" pos:column="44">)<pos:position pos:line="49" pos:column="45"/></operator><name><name pos:line="49" pos:column="45">he<pos:position pos:line="49" pos:column="47"/></name><operator pos:line="49" pos:column="47">-&gt;<pos:position pos:line="49" pos:column="52"/></operator><name pos:line="49" pos:column="49">h_addr<pos:position pos:line="49" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="56"/></argument_list></call></expr> <pos:position pos:line="49" pos:column="57"/></then><else pos:line="49" pos:column="57">: <expr><literal type="string" pos:line="49" pos:column="59">"unknown"<pos:position pos:line="49" pos:column="68"/></literal></expr></else></ternary><operator pos:line="49" pos:column="68">)<pos:position pos:line="49" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="71"/></expr_stmt>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="52" pos:column="3">/* clean up */</comment>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">CloseHandle<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">mutex_waiting<pos:position pos:line="53" pos:column="28"/></name></expr></argument>)<pos:position pos:line="53" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>

  <return pos:line="55" pos:column="3">return <expr><operator pos:line="55" pos:column="10">(<pos:position pos:line="55" pos:column="11"/></operator><name pos:line="55" pos:column="11">rc<pos:position pos:line="55" pos:column="13"/></name><operator pos:line="55" pos:column="13">)<pos:position pos:line="55" pos:column="14"/></operator></expr>;<pos:position pos:line="55" pos:column="15"/></return>
  <comment type="block" pos:line="56" pos:column="3">/* An implicit _endthreadex() here */</comment>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
