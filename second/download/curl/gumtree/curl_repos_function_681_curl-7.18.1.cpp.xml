<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_681_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_dupset<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">SessionHandle<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type> <name pos:line="1" pos:column="45">dst<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="50">struct<pos:position pos:line="1" pos:column="56"/></name> <name pos:line="1" pos:column="57">SessionHandle<pos:position pos:line="1" pos:column="70"/></name></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type> <name pos:line="1" pos:column="73">src<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">r<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><name pos:line="3" pos:column="16">CURLE_OK<pos:position pos:line="3" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">enum<pos:position pos:line="4" pos:column="7"/></name> <name pos:line="4" pos:column="8">dupstring<pos:position pos:line="4" pos:column="17"/></name></name></type> <name pos:line="4" pos:column="18">i<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Copy src-&gt;set into dst-&gt;set first, then deal with the strings
     afterwards */</comment>
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">dst<pos:position pos:line="8" pos:column="6"/></name><operator pos:line="8" pos:column="6">-&gt;<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="8">set<pos:position pos:line="8" pos:column="11"/></name></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <name><name pos:line="8" pos:column="14">src<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">set<pos:position pos:line="8" pos:column="22"/></name></name></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* clear all string pointers first */</comment>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">memset<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><name><name pos:line="11" pos:column="10">dst<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">set<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">str<pos:position pos:line="11" pos:column="22"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="27">STRING_LAST<pos:position pos:line="11" pos:column="38"/></name> <operator pos:line="11" pos:column="39">*<pos:position pos:line="11" pos:column="40"/></operator> <sizeof pos:line="11" pos:column="41">sizeof<argument_list pos:line="11" pos:column="47">(<argument><expr><name pos:line="11" pos:column="48">char<pos:position pos:line="11" pos:column="52"/></name> <operator pos:line="11" pos:column="53">*<pos:position pos:line="11" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="57"/></expr_stmt>

  <comment type="block" pos:line="13" pos:column="3">/* duplicate all strings */</comment>
  <for pos:line="14" pos:column="3">for<control pos:line="14" pos:column="6">(<init><expr><name pos:line="14" pos:column="7">i<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">=<pos:position pos:line="14" pos:column="9"/></operator><operator pos:line="14" pos:column="9">(<pos:position pos:line="14" pos:column="10"/></operator>enum <name pos:line="14" pos:column="15">dupstring<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">)<pos:position pos:line="14" pos:column="25"/></operator><literal type="number" pos:line="14" pos:column="25">0<pos:position pos:line="14" pos:column="26"/></literal></expr>;<pos:position pos:line="14" pos:column="27"/></init> <condition><expr><name pos:line="14" pos:column="28">i<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">&lt;<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="31">STRING_LAST<pos:position pos:line="14" pos:column="42"/></name></expr>;<pos:position pos:line="14" pos:column="43"/></condition> <incr><expr><name pos:line="14" pos:column="44">i<pos:position pos:line="14" pos:column="45"/></name><operator pos:line="14" pos:column="45">++<pos:position pos:line="14" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="48"/></control> <block pos:line="14" pos:column="49">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">r<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <call><name pos:line="15" pos:column="9">setstropt<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><operator pos:line="15" pos:column="19">&amp;<pos:position pos:line="15" pos:column="24"/></operator><name><name pos:line="15" pos:column="20">dst<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">-&gt;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="25">set<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">.<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">str<pos:position pos:line="15" pos:column="32"/></name><index pos:line="15" pos:column="32">[<expr><name pos:line="15" pos:column="33">i<pos:position pos:line="15" pos:column="34"/></name></expr>]<pos:position pos:line="15" pos:column="35"/></index></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="37">src<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">-&gt;<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="42">set<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">.<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="46">str<pos:position pos:line="15" pos:column="49"/></name><index pos:line="15" pos:column="49">[<expr><name pos:line="15" pos:column="50">i<pos:position pos:line="15" pos:column="51"/></name></expr>]<pos:position pos:line="15" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><name pos:line="16" pos:column="8">r<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">!=<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="13">CURLE_OK<pos:position pos:line="16" pos:column="21"/></name></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22">
      <block type="pseudo"><break pos:line="17" pos:column="7">break;<pos:position pos:line="17" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="18" pos:column="4"/></block></for>

  <comment type="block" pos:line="20" pos:column="3">/* If a failure occurred, freeing has to be performed externally. */</comment>
  <return pos:line="21" pos:column="3">return <expr><name pos:line="21" pos:column="10">r<pos:position pos:line="21" pos:column="11"/></name></expr>;<pos:position pos:line="21" pos:column="12"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
