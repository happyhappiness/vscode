<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1518_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">tftp_tx<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">tftp_state_data_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">state<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">tftp_event_t<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">event<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_easy<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name><name pos:line="3" pos:column="28">state<pos:position pos:line="3" pos:column="33"/></name><operator pos:line="3" pos:column="33">-&gt;<pos:position pos:line="3" pos:column="38"/></operator><name pos:line="3" pos:column="35">conn<pos:position pos:line="3" pos:column="39"/></name><operator pos:line="3" pos:column="39">-&gt;<pos:position pos:line="3" pos:column="44"/></operator><name pos:line="3" pos:column="41">data<pos:position pos:line="3" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ssize_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">sbytes<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rblock<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">CURLE_OK<pos:position pos:line="6" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SingleRequest<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">k<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><operator pos:line="7" pos:column="29">&amp;<pos:position pos:line="7" pos:column="34"/></operator><name><name pos:line="7" pos:column="30">data<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">req<pos:position pos:line="7" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">cb<pos:position pos:line="8" pos:column="9"/></name></decl>;<pos:position pos:line="8" pos:column="10"/></decl_stmt> <comment type="block" pos:line="8" pos:column="11">/* Bytes currently read */</comment>

  <switch pos:line="10" pos:column="3">switch<condition pos:line="10" pos:column="9">(<expr><name pos:line="10" pos:column="10">event<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition> <block pos:line="10" pos:column="17">{

  <case pos:line="12" pos:column="3">case <expr><name pos:line="12" pos:column="8">TFTP_EVENT_ACK<pos:position pos:line="12" pos:column="22"/></name></expr>:<pos:position pos:line="12" pos:column="23"/></case>
  <case pos:line="13" pos:column="3">case <expr><name pos:line="13" pos:column="8">TFTP_EVENT_OACK<pos:position pos:line="13" pos:column="23"/></name></expr>:<pos:position pos:line="13" pos:column="24"/></case>
    <if pos:line="14" pos:column="5">if<condition pos:line="14" pos:column="7">(<expr><name pos:line="14" pos:column="8">event<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">==<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">TFTP_EVENT_ACK<pos:position pos:line="14" pos:column="31"/></name></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32"> <block pos:line="14" pos:column="33">{
      <comment type="block" pos:line="15" pos:column="7">/* Ack the packet */</comment>
      <expr_stmt><expr><name pos:line="16" pos:column="7">rblock<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">getrpacketblock<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><operator pos:line="16" pos:column="32">&amp;<pos:position pos:line="16" pos:column="37"/></operator><name><name pos:line="16" pos:column="33">state<pos:position pos:line="16" pos:column="38"/></name><operator pos:line="16" pos:column="38">-&gt;<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="40">rpacket<pos:position pos:line="16" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>

      <if pos:line="18" pos:column="7">if<condition pos:line="18" pos:column="9">(<expr><name pos:line="18" pos:column="10">rblock<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">!=<pos:position pos:line="18" pos:column="19"/></operator> <name><name pos:line="18" pos:column="20">state<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">-&gt;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="27">block<pos:position pos:line="18" pos:column="32"/></name></name> <operator pos:line="18" pos:column="33">&amp;&amp;<pos:position pos:line="18" pos:column="43"/></operator>
         <comment type="block" pos:line="19" pos:column="10">/* There's a bug in tftpd-hpa that causes it to send us an ack for
          * 65535 when the block number wraps to 0. So when we're expecting
          * 0, also accept 65535. See
          * http://syslinux.zytor.com/archives/2010-September/015253.html
          * */</comment>
         <operator pos:line="24" pos:column="10">!<pos:position pos:line="24" pos:column="11"/></operator><operator pos:line="24" pos:column="11">(<pos:position pos:line="24" pos:column="12"/></operator><name><name pos:line="24" pos:column="12">state<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">-&gt;<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="19">block<pos:position pos:line="24" pos:column="24"/></name></name> <operator pos:line="24" pos:column="25">==<pos:position pos:line="24" pos:column="27"/></operator> <literal type="number" pos:line="24" pos:column="28">0<pos:position pos:line="24" pos:column="29"/></literal> <operator pos:line="24" pos:column="30">&amp;&amp;<pos:position pos:line="24" pos:column="40"/></operator> <name pos:line="24" pos:column="33">rblock<pos:position pos:line="24" pos:column="39"/></name> <operator pos:line="24" pos:column="40">==<pos:position pos:line="24" pos:column="42"/></operator> <literal type="number" pos:line="24" pos:column="43">65535<pos:position pos:line="24" pos:column="48"/></literal><operator pos:line="24" pos:column="48">)<pos:position pos:line="24" pos:column="49"/></operator></expr>)<pos:position pos:line="24" pos:column="50"/></condition><then pos:line="24" pos:column="50"> <block pos:line="24" pos:column="51">{
        <comment type="block" pos:line="25" pos:column="9">/* This isn't the expected block.  Log it and up the retry counter */</comment>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">infof<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><name pos:line="26" pos:column="15">data<pos:position pos:line="26" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="21">"Received ACK for block %d, expecting %d\n"<pos:position pos:line="26" pos:column="64"/></literal></expr></argument>,
              <argument><expr><name pos:line="27" pos:column="15">rblock<pos:position pos:line="27" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="23">state<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">block<pos:position pos:line="27" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">state<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">-&gt;<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="16">retries<pos:position pos:line="28" pos:column="23"/></name></name><operator pos:line="28" pos:column="23">++<pos:position pos:line="28" pos:column="25"/></operator></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>
        <comment type="block" pos:line="29" pos:column="9">/* Bail out if over the maximum */</comment>
        <if pos:line="30" pos:column="9">if<condition pos:line="30" pos:column="11">(<expr><name><name pos:line="30" pos:column="12">state<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">-&gt;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="19">retries<pos:position pos:line="30" pos:column="26"/></name></name><operator pos:line="30" pos:column="26">&gt;<pos:position pos:line="30" pos:column="30"/></operator><name><name pos:line="30" pos:column="27">state<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">-&gt;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="34">retry_max<pos:position pos:line="30" pos:column="43"/></name></name></expr>)<pos:position pos:line="30" pos:column="44"/></condition><then pos:line="30" pos:column="44"> <block pos:line="30" pos:column="45">{
          <expr_stmt><expr><call><name pos:line="31" pos:column="11">failf<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">data<pos:position pos:line="31" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="23">"tftp_tx: giving up waiting for block %d ack"<pos:position pos:line="31" pos:column="68"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="32" pos:column="17">state<pos:position pos:line="32" pos:column="22"/></name><operator pos:line="32" pos:column="22">-&gt;<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="24">block<pos:position pos:line="32" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
          <expr_stmt><expr><name pos:line="33" pos:column="11">result<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <name pos:line="33" pos:column="20">CURLE_SEND_ERROR<pos:position pos:line="33" pos:column="36"/></name></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then>
        <else pos:line="35" pos:column="9">else <block pos:line="35" pos:column="14">{
          <comment type="block" pos:line="36" pos:column="11">/* Re-send the data packet */</comment>
          <expr_stmt><expr><name pos:line="37" pos:column="11">sbytes<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <call><name pos:line="37" pos:column="20">sendto<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">(<argument><expr><name><name pos:line="37" pos:column="27">state<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">-&gt;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="34">sockfd<pos:position pos:line="37" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="42">(<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="43">void<pos:position pos:line="37" pos:column="47"/></name> <operator pos:line="37" pos:column="48">*<pos:position pos:line="37" pos:column="49"/></operator><operator pos:line="37" pos:column="49">)<pos:position pos:line="37" pos:column="50"/></operator><name><name pos:line="37" pos:column="50">state<pos:position pos:line="37" pos:column="55"/></name><operator pos:line="37" pos:column="55">-&gt;<pos:position pos:line="37" pos:column="60"/></operator><name pos:line="37" pos:column="57">spacket<pos:position pos:line="37" pos:column="64"/></name><operator pos:line="37" pos:column="64">.<pos:position pos:line="37" pos:column="65"/></operator><name pos:line="37" pos:column="65">data<pos:position pos:line="37" pos:column="69"/></name></name></expr></argument>,
                          <argument><expr><literal type="number" pos:line="38" pos:column="27">4<pos:position pos:line="38" pos:column="28"/></literal> <operator pos:line="38" pos:column="29">+<pos:position pos:line="38" pos:column="30"/></operator> <name><name pos:line="38" pos:column="31">state<pos:position pos:line="38" pos:column="36"/></name><operator pos:line="38" pos:column="36">-&gt;<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="38">sbytes<pos:position pos:line="38" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="46">SEND_4TH_ARG<pos:position pos:line="38" pos:column="58"/></name></expr></argument>,
                          <argument><expr><operator pos:line="39" pos:column="27">(<pos:position pos:line="39" pos:column="28"/></operator>struct <name pos:line="39" pos:column="35">sockaddr<pos:position pos:line="39" pos:column="43"/></name> <operator pos:line="39" pos:column="44">*<pos:position pos:line="39" pos:column="45"/></operator><operator pos:line="39" pos:column="45">)<pos:position pos:line="39" pos:column="46"/></operator><operator pos:line="39" pos:column="46">&amp;<pos:position pos:line="39" pos:column="51"/></operator><name><name pos:line="39" pos:column="47">state<pos:position pos:line="39" pos:column="52"/></name><operator pos:line="39" pos:column="52">-&gt;<pos:position pos:line="39" pos:column="57"/></operator><name pos:line="39" pos:column="54">remote_addr<pos:position pos:line="39" pos:column="65"/></name></name></expr></argument>,
                          <argument><expr><name><name pos:line="40" pos:column="27">state<pos:position pos:line="40" pos:column="32"/></name><operator pos:line="40" pos:column="32">-&gt;<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="34">remote_addrlen<pos:position pos:line="40" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="50"/></expr_stmt>
          <comment type="block" pos:line="41" pos:column="11">/* Check all sbytes were sent */</comment>
          <if pos:line="42" pos:column="11">if<condition pos:line="42" pos:column="13">(<expr><name pos:line="42" pos:column="14">sbytes<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">&lt;<pos:position pos:line="42" pos:column="24"/></operator><literal type="number" pos:line="42" pos:column="21">0<pos:position pos:line="42" pos:column="22"/></literal></expr>)<pos:position pos:line="42" pos:column="23"/></condition><then pos:line="42" pos:column="23"> <block pos:line="42" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">failf<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name pos:line="43" pos:column="19">data<pos:position pos:line="43" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="25">"%s"<pos:position pos:line="43" pos:column="29"/></literal></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="31">Curl_strerror<pos:position pos:line="43" pos:column="44"/></name><argument_list pos:line="43" pos:column="44">(<argument><expr><name><name pos:line="43" pos:column="45">state<pos:position pos:line="43" pos:column="50"/></name><operator pos:line="43" pos:column="50">-&gt;<pos:position pos:line="43" pos:column="55"/></operator><name pos:line="43" pos:column="52">conn<pos:position pos:line="43" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="58">SOCKERRNO<pos:position pos:line="43" pos:column="67"/></name></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="70"/></expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">result<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">=<pos:position pos:line="44" pos:column="21"/></operator> <name pos:line="44" pos:column="22">CURLE_SEND_ERROR<pos:position pos:line="44" pos:column="38"/></name></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>
          }<pos:position pos:line="45" pos:column="12"/></block></then></if>
        }<pos:position pos:line="46" pos:column="10"/></block></else></if>

        <return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">result<pos:position pos:line="48" pos:column="22"/></name></expr>;<pos:position pos:line="48" pos:column="23"/></return>
      }<pos:position pos:line="49" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="50" pos:column="7">/* This is the expected packet.  Reset the counters and send the next
         block */</comment>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">time<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><operator pos:line="52" pos:column="12">&amp;<pos:position pos:line="52" pos:column="17"/></operator><name><name pos:line="52" pos:column="13">state<pos:position pos:line="52" pos:column="18"/></name><operator pos:line="52" pos:column="18">-&gt;<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="20">rx_time<pos:position pos:line="52" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">state<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">block<pos:position pos:line="53" pos:column="19"/></name></name><operator pos:line="53" pos:column="19">++<pos:position pos:line="53" pos:column="21"/></operator></expr>;<pos:position pos:line="53" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then>
    <else pos:line="55" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="56" pos:column="7">state<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">-&gt;<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="14">block<pos:position pos:line="56" pos:column="19"/></name></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <literal type="number" pos:line="56" pos:column="22">1<pos:position pos:line="56" pos:column="23"/></literal></expr>;<pos:position pos:line="56" pos:column="24"/></expr_stmt></block></else></if> <comment type="block" pos:line="56" pos:column="25">/* first data block is 1 when using OACK */</comment>

    <expr_stmt><expr><name><name pos:line="58" pos:column="5">state<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">retries<pos:position pos:line="58" pos:column="19"/></name></name> <operator pos:line="58" pos:column="20">=<pos:position pos:line="58" pos:column="21"/></operator> <literal type="number" pos:line="58" pos:column="22">0<pos:position pos:line="58" pos:column="23"/></literal></expr>;<pos:position pos:line="58" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">setpacketevent<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><operator pos:line="59" pos:column="20">&amp;<pos:position pos:line="59" pos:column="25"/></operator><name><name pos:line="59" pos:column="21">state<pos:position pos:line="59" pos:column="26"/></name><operator pos:line="59" pos:column="26">-&gt;<pos:position pos:line="59" pos:column="31"/></operator><name pos:line="59" pos:column="28">spacket<pos:position pos:line="59" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="37">TFTP_EVENT_DATA<pos:position pos:line="59" pos:column="52"/></name></expr></argument>)<pos:position pos:line="59" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">setpacketblock<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><operator pos:line="60" pos:column="20">&amp;<pos:position pos:line="60" pos:column="25"/></operator><name><name pos:line="60" pos:column="21">state<pos:position pos:line="60" pos:column="26"/></name><operator pos:line="60" pos:column="26">-&gt;<pos:position pos:line="60" pos:column="31"/></operator><name pos:line="60" pos:column="28">spacket<pos:position pos:line="60" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="37">state<pos:position pos:line="60" pos:column="42"/></name><operator pos:line="60" pos:column="42">-&gt;<pos:position pos:line="60" pos:column="47"/></operator><name pos:line="60" pos:column="44">block<pos:position pos:line="60" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="51"/></expr_stmt>
    <if pos:line="61" pos:column="5">if<condition pos:line="61" pos:column="7">(<expr><name><name pos:line="61" pos:column="8">state<pos:position pos:line="61" pos:column="13"/></name><operator pos:line="61" pos:column="13">-&gt;<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="15">block<pos:position pos:line="61" pos:column="20"/></name></name> <operator pos:line="61" pos:column="21">&gt;<pos:position pos:line="61" pos:column="25"/></operator> <literal type="number" pos:line="61" pos:column="23">1<pos:position pos:line="61" pos:column="24"/></literal> <operator pos:line="61" pos:column="25">&amp;&amp;<pos:position pos:line="61" pos:column="35"/></operator> <name><name pos:line="61" pos:column="28">state<pos:position pos:line="61" pos:column="33"/></name><operator pos:line="61" pos:column="33">-&gt;<pos:position pos:line="61" pos:column="38"/></operator><name pos:line="61" pos:column="35">sbytes<pos:position pos:line="61" pos:column="41"/></name></name> <operator pos:line="61" pos:column="42">&lt;<pos:position pos:line="61" pos:column="46"/></operator> <operator pos:line="61" pos:column="44">(<pos:position pos:line="61" pos:column="45"/></operator><name pos:line="61" pos:column="45">int<pos:position pos:line="61" pos:column="48"/></name><operator pos:line="61" pos:column="48">)<pos:position pos:line="61" pos:column="49"/></operator><name><name pos:line="61" pos:column="49">state<pos:position pos:line="61" pos:column="54"/></name><operator pos:line="61" pos:column="54">-&gt;<pos:position pos:line="61" pos:column="59"/></operator><name pos:line="61" pos:column="56">blksize<pos:position pos:line="61" pos:column="63"/></name></name></expr>)<pos:position pos:line="61" pos:column="64"/></condition><then pos:line="61" pos:column="64"> <block pos:line="61" pos:column="65">{
      <expr_stmt><expr><name><name pos:line="62" pos:column="7">state<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">-&gt;<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="14">state<pos:position pos:line="62" pos:column="19"/></name></name> <operator pos:line="62" pos:column="20">=<pos:position pos:line="62" pos:column="21"/></operator> <name pos:line="62" pos:column="22">TFTP_STATE_FIN<pos:position pos:line="62" pos:column="36"/></name></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt>
      <return pos:line="63" pos:column="7">return <expr><name pos:line="63" pos:column="14">CURLE_OK<pos:position pos:line="63" pos:column="22"/></name></expr>;<pos:position pos:line="63" pos:column="23"/></return>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="66" pos:column="5">/* TFTP considers data block size &lt; 512 bytes as an end of session. So
     * in some cases we must wait for additional data to build full (512 bytes)
     * data block.
     * */</comment>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">state<pos:position pos:line="70" pos:column="10"/></name><operator pos:line="70" pos:column="10">-&gt;<pos:position pos:line="70" pos:column="15"/></operator><name pos:line="70" pos:column="12">sbytes<pos:position pos:line="70" pos:column="18"/></name></name> <operator pos:line="70" pos:column="19">=<pos:position pos:line="70" pos:column="20"/></operator> <literal type="number" pos:line="70" pos:column="21">0<pos:position pos:line="70" pos:column="22"/></literal></expr>;<pos:position pos:line="70" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">state<pos:position pos:line="71" pos:column="10"/></name><operator pos:line="71" pos:column="10">-&gt;<pos:position pos:line="71" pos:column="15"/></operator><name pos:line="71" pos:column="12">conn<pos:position pos:line="71" pos:column="16"/></name><operator pos:line="71" pos:column="16">-&gt;<pos:position pos:line="71" pos:column="21"/></operator><name pos:line="71" pos:column="18">data<pos:position pos:line="71" pos:column="22"/></name><operator pos:line="71" pos:column="22">-&gt;<pos:position pos:line="71" pos:column="27"/></operator><name pos:line="71" pos:column="24">req<pos:position pos:line="71" pos:column="27"/></name><operator pos:line="71" pos:column="27">.<pos:position pos:line="71" pos:column="28"/></operator><name pos:line="71" pos:column="28">upload_fromhere<pos:position pos:line="71" pos:column="43"/></name></name> <operator pos:line="71" pos:column="44">=<pos:position pos:line="71" pos:column="45"/></operator> <operator pos:line="71" pos:column="46">(<pos:position pos:line="71" pos:column="47"/></operator><name pos:line="71" pos:column="47">char<pos:position pos:line="71" pos:column="51"/></name> <operator pos:line="71" pos:column="52">*<pos:position pos:line="71" pos:column="53"/></operator><operator pos:line="71" pos:column="53">)<pos:position pos:line="71" pos:column="54"/></operator><name><name pos:line="71" pos:column="54">state<pos:position pos:line="71" pos:column="59"/></name><operator pos:line="71" pos:column="59">-&gt;<pos:position pos:line="71" pos:column="64"/></operator><name pos:line="71" pos:column="61">spacket<pos:position pos:line="71" pos:column="68"/></name><operator pos:line="71" pos:column="68">.<pos:position pos:line="71" pos:column="69"/></operator><name pos:line="71" pos:column="69">data<pos:position pos:line="71" pos:column="73"/></name></name> <operator pos:line="71" pos:column="74">+<pos:position pos:line="71" pos:column="75"/></operator> <literal type="number" pos:line="71" pos:column="76">4<pos:position pos:line="71" pos:column="77"/></literal></expr>;<pos:position pos:line="71" pos:column="78"/></expr_stmt>
    <do pos:line="72" pos:column="5">do <block pos:line="72" pos:column="8">{
      <expr_stmt><expr><name pos:line="73" pos:column="7">result<pos:position pos:line="73" pos:column="13"/></name> <operator pos:line="73" pos:column="14">=<pos:position pos:line="73" pos:column="15"/></operator> <call><name pos:line="73" pos:column="16">Curl_fillreadbuffer<pos:position pos:line="73" pos:column="35"/></name><argument_list pos:line="73" pos:column="35">(<argument><expr><name><name pos:line="73" pos:column="36">state<pos:position pos:line="73" pos:column="41"/></name><operator pos:line="73" pos:column="41">-&gt;<pos:position pos:line="73" pos:column="46"/></operator><name pos:line="73" pos:column="43">conn<pos:position pos:line="73" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="49">state<pos:position pos:line="73" pos:column="54"/></name><operator pos:line="73" pos:column="54">-&gt;<pos:position pos:line="73" pos:column="59"/></operator><name pos:line="73" pos:column="56">blksize<pos:position pos:line="73" pos:column="63"/></name></name> <operator pos:line="73" pos:column="64">-<pos:position pos:line="73" pos:column="65"/></operator> <name><name pos:line="73" pos:column="66">state<pos:position pos:line="73" pos:column="71"/></name><operator pos:line="73" pos:column="71">-&gt;<pos:position pos:line="73" pos:column="76"/></operator><name pos:line="73" pos:column="73">sbytes<pos:position pos:line="73" pos:column="79"/></name></name></expr></argument>,
                                   <argument><expr><operator pos:line="74" pos:column="36">&amp;<pos:position pos:line="74" pos:column="41"/></operator><name pos:line="74" pos:column="37">cb<pos:position pos:line="74" pos:column="39"/></name></expr></argument>)<pos:position pos:line="74" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="41"/></expr_stmt>
      <if pos:line="75" pos:column="7">if<condition pos:line="75" pos:column="9">(<expr><name pos:line="75" pos:column="10">result<pos:position pos:line="75" pos:column="16"/></name></expr>)<pos:position pos:line="75" pos:column="17"/></condition><then pos:line="75" pos:column="17">
        <block type="pseudo"><return pos:line="76" pos:column="9">return <expr><name pos:line="76" pos:column="16">result<pos:position pos:line="76" pos:column="22"/></name></expr>;<pos:position pos:line="76" pos:column="23"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="77" pos:column="7">state<pos:position pos:line="77" pos:column="12"/></name><operator pos:line="77" pos:column="12">-&gt;<pos:position pos:line="77" pos:column="17"/></operator><name pos:line="77" pos:column="14">sbytes<pos:position pos:line="77" pos:column="20"/></name></name> <operator pos:line="77" pos:column="21">+=<pos:position pos:line="77" pos:column="23"/></operator> <name pos:line="77" pos:column="24">cb<pos:position pos:line="77" pos:column="26"/></name></expr>;<pos:position pos:line="77" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="78" pos:column="7">state<pos:position pos:line="78" pos:column="12"/></name><operator pos:line="78" pos:column="12">-&gt;<pos:position pos:line="78" pos:column="17"/></operator><name pos:line="78" pos:column="14">conn<pos:position pos:line="78" pos:column="18"/></name><operator pos:line="78" pos:column="18">-&gt;<pos:position pos:line="78" pos:column="23"/></operator><name pos:line="78" pos:column="20">data<pos:position pos:line="78" pos:column="24"/></name><operator pos:line="78" pos:column="24">-&gt;<pos:position pos:line="78" pos:column="29"/></operator><name pos:line="78" pos:column="26">req<pos:position pos:line="78" pos:column="29"/></name><operator pos:line="78" pos:column="29">.<pos:position pos:line="78" pos:column="30"/></operator><name pos:line="78" pos:column="30">upload_fromhere<pos:position pos:line="78" pos:column="45"/></name></name> <operator pos:line="78" pos:column="46">+=<pos:position pos:line="78" pos:column="48"/></operator> <name pos:line="78" pos:column="49">cb<pos:position pos:line="78" pos:column="51"/></name></expr>;<pos:position pos:line="78" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block> while<condition pos:line="79" pos:column="12">(<expr><name><name pos:line="79" pos:column="13">state<pos:position pos:line="79" pos:column="18"/></name><operator pos:line="79" pos:column="18">-&gt;<pos:position pos:line="79" pos:column="23"/></operator><name pos:line="79" pos:column="20">sbytes<pos:position pos:line="79" pos:column="26"/></name></name> <operator pos:line="79" pos:column="27">&lt;<pos:position pos:line="79" pos:column="31"/></operator> <name><name pos:line="79" pos:column="29">state<pos:position pos:line="79" pos:column="34"/></name><operator pos:line="79" pos:column="34">-&gt;<pos:position pos:line="79" pos:column="39"/></operator><name pos:line="79" pos:column="36">blksize<pos:position pos:line="79" pos:column="43"/></name></name> <operator pos:line="79" pos:column="44">&amp;&amp;<pos:position pos:line="79" pos:column="54"/></operator> <name pos:line="79" pos:column="47">cb<pos:position pos:line="79" pos:column="49"/></name> <operator pos:line="79" pos:column="50">!=<pos:position pos:line="79" pos:column="52"/></operator> <literal type="number" pos:line="79" pos:column="53">0<pos:position pos:line="79" pos:column="54"/></literal></expr>)<pos:position pos:line="79" pos:column="55"/></condition>;<pos:position pos:line="79" pos:column="56"/></do>

    <expr_stmt><expr><name pos:line="81" pos:column="5">sbytes<pos:position pos:line="81" pos:column="11"/></name> <operator pos:line="81" pos:column="12">=<pos:position pos:line="81" pos:column="13"/></operator> <call><name pos:line="81" pos:column="14">sendto<pos:position pos:line="81" pos:column="20"/></name><argument_list pos:line="81" pos:column="20">(<argument><expr><name><name pos:line="81" pos:column="21">state<pos:position pos:line="81" pos:column="26"/></name><operator pos:line="81" pos:column="26">-&gt;<pos:position pos:line="81" pos:column="31"/></operator><name pos:line="81" pos:column="28">sockfd<pos:position pos:line="81" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="36">(<pos:position pos:line="81" pos:column="37"/></operator><name pos:line="81" pos:column="37">void<pos:position pos:line="81" pos:column="41"/></name> <operator pos:line="81" pos:column="42">*<pos:position pos:line="81" pos:column="43"/></operator><operator pos:line="81" pos:column="43">)<pos:position pos:line="81" pos:column="44"/></operator> <name><name pos:line="81" pos:column="45">state<pos:position pos:line="81" pos:column="50"/></name><operator pos:line="81" pos:column="50">-&gt;<pos:position pos:line="81" pos:column="55"/></operator><name pos:line="81" pos:column="52">spacket<pos:position pos:line="81" pos:column="59"/></name><operator pos:line="81" pos:column="59">.<pos:position pos:line="81" pos:column="60"/></operator><name pos:line="81" pos:column="60">data<pos:position pos:line="81" pos:column="64"/></name></name></expr></argument>,
                    <argument><expr><literal type="number" pos:line="82" pos:column="21">4<pos:position pos:line="82" pos:column="22"/></literal> <operator pos:line="82" pos:column="23">+<pos:position pos:line="82" pos:column="24"/></operator> <name><name pos:line="82" pos:column="25">state<pos:position pos:line="82" pos:column="30"/></name><operator pos:line="82" pos:column="30">-&gt;<pos:position pos:line="82" pos:column="35"/></operator><name pos:line="82" pos:column="32">sbytes<pos:position pos:line="82" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="40">SEND_4TH_ARG<pos:position pos:line="82" pos:column="52"/></name></expr></argument>,
                    <argument><expr><operator pos:line="83" pos:column="21">(<pos:position pos:line="83" pos:column="22"/></operator>struct <name pos:line="83" pos:column="29">sockaddr<pos:position pos:line="83" pos:column="37"/></name> <operator pos:line="83" pos:column="38">*<pos:position pos:line="83" pos:column="39"/></operator><operator pos:line="83" pos:column="39">)<pos:position pos:line="83" pos:column="40"/></operator><operator pos:line="83" pos:column="40">&amp;<pos:position pos:line="83" pos:column="45"/></operator><name><name pos:line="83" pos:column="41">state<pos:position pos:line="83" pos:column="46"/></name><operator pos:line="83" pos:column="46">-&gt;<pos:position pos:line="83" pos:column="51"/></operator><name pos:line="83" pos:column="48">remote_addr<pos:position pos:line="83" pos:column="59"/></name></name></expr></argument>,
                    <argument><expr><name><name pos:line="84" pos:column="21">state<pos:position pos:line="84" pos:column="26"/></name><operator pos:line="84" pos:column="26">-&gt;<pos:position pos:line="84" pos:column="31"/></operator><name pos:line="84" pos:column="28">remote_addrlen<pos:position pos:line="84" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="44"/></expr_stmt>
    <comment type="block" pos:line="85" pos:column="5">/* Check all sbytes were sent */</comment>
    <if pos:line="86" pos:column="5">if<condition pos:line="86" pos:column="7">(<expr><name pos:line="86" pos:column="8">sbytes<pos:position pos:line="86" pos:column="14"/></name><operator pos:line="86" pos:column="14">&lt;<pos:position pos:line="86" pos:column="18"/></operator><literal type="number" pos:line="86" pos:column="15">0<pos:position pos:line="86" pos:column="16"/></literal></expr>)<pos:position pos:line="86" pos:column="17"/></condition><then pos:line="86" pos:column="17"> <block pos:line="86" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">failf<pos:position pos:line="87" pos:column="12"/></name><argument_list pos:line="87" pos:column="12">(<argument><expr><name pos:line="87" pos:column="13">data<pos:position pos:line="87" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="19">"%s"<pos:position pos:line="87" pos:column="23"/></literal></expr></argument>, <argument><expr><call><name pos:line="87" pos:column="25">Curl_strerror<pos:position pos:line="87" pos:column="38"/></name><argument_list pos:line="87" pos:column="38">(<argument><expr><name><name pos:line="87" pos:column="39">state<pos:position pos:line="87" pos:column="44"/></name><operator pos:line="87" pos:column="44">-&gt;<pos:position pos:line="87" pos:column="49"/></operator><name pos:line="87" pos:column="46">conn<pos:position pos:line="87" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="52">SOCKERRNO<pos:position pos:line="87" pos:column="61"/></name></expr></argument>)<pos:position pos:line="87" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="64"/></expr_stmt>
      <return pos:line="88" pos:column="7">return <expr><name pos:line="88" pos:column="14">CURLE_SEND_ERROR<pos:position pos:line="88" pos:column="30"/></name></expr>;<pos:position pos:line="88" pos:column="31"/></return>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="90" pos:column="5">/* Update the progress meter */</comment>
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">k<pos:position pos:line="91" pos:column="6"/></name><operator pos:line="91" pos:column="6">-&gt;<pos:position pos:line="91" pos:column="11"/></operator><name pos:line="91" pos:column="8">writebytecount<pos:position pos:line="91" pos:column="22"/></name></name> <operator pos:line="91" pos:column="23">+=<pos:position pos:line="91" pos:column="25"/></operator> <name><name pos:line="91" pos:column="26">state<pos:position pos:line="91" pos:column="31"/></name><operator pos:line="91" pos:column="31">-&gt;<pos:position pos:line="91" pos:column="36"/></operator><name pos:line="91" pos:column="33">sbytes<pos:position pos:line="91" pos:column="39"/></name></name></expr>;<pos:position pos:line="91" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">Curl_pgrsSetUploadCounter<pos:position pos:line="92" pos:column="30"/></name><argument_list pos:line="92" pos:column="30">(<argument><expr><name pos:line="92" pos:column="31">data<pos:position pos:line="92" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="37">k<pos:position pos:line="92" pos:column="38"/></name><operator pos:line="92" pos:column="38">-&gt;<pos:position pos:line="92" pos:column="43"/></operator><name pos:line="92" pos:column="40">writebytecount<pos:position pos:line="92" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="56"/></expr_stmt>
    <break pos:line="93" pos:column="5">break;<pos:position pos:line="93" pos:column="11"/></break>

  <case pos:line="95" pos:column="3">case <expr><name pos:line="95" pos:column="8">TFTP_EVENT_TIMEOUT<pos:position pos:line="95" pos:column="26"/></name></expr>:<pos:position pos:line="95" pos:column="27"/></case>
    <comment type="block" pos:line="96" pos:column="5">/* Increment the retry counter and log the timeout */</comment>
    <expr_stmt><expr><name><name pos:line="97" pos:column="5">state<pos:position pos:line="97" pos:column="10"/></name><operator pos:line="97" pos:column="10">-&gt;<pos:position pos:line="97" pos:column="15"/></operator><name pos:line="97" pos:column="12">retries<pos:position pos:line="97" pos:column="19"/></name></name><operator pos:line="97" pos:column="19">++<pos:position pos:line="97" pos:column="21"/></operator></expr>;<pos:position pos:line="97" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">infof<pos:position pos:line="98" pos:column="10"/></name><argument_list pos:line="98" pos:column="10">(<argument><expr><name pos:line="98" pos:column="11">data<pos:position pos:line="98" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="17">"Timeout waiting for block %d ACK. "<pos:position pos:line="98" pos:column="53"/></literal>
          <literal type="string" pos:line="99" pos:column="11">" Retries = %d\n"<pos:position pos:line="99" pos:column="28"/></literal></expr></argument>, <argument><expr><call><name pos:line="99" pos:column="30">NEXT_BLOCKNUM<pos:position pos:line="99" pos:column="43"/></name><argument_list pos:line="99" pos:column="43">(<argument><expr><name><name pos:line="99" pos:column="44">state<pos:position pos:line="99" pos:column="49"/></name><operator pos:line="99" pos:column="49">-&gt;<pos:position pos:line="99" pos:column="54"/></operator><name pos:line="99" pos:column="51">block<pos:position pos:line="99" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="59">state<pos:position pos:line="99" pos:column="64"/></name><operator pos:line="99" pos:column="64">-&gt;<pos:position pos:line="99" pos:column="69"/></operator><name pos:line="99" pos:column="66">retries<pos:position pos:line="99" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="75"/></expr_stmt>
    <comment type="block" pos:line="100" pos:column="5">/* Decide if we've had enough */</comment>
    <if pos:line="101" pos:column="5">if<condition pos:line="101" pos:column="7">(<expr><name><name pos:line="101" pos:column="8">state<pos:position pos:line="101" pos:column="13"/></name><operator pos:line="101" pos:column="13">-&gt;<pos:position pos:line="101" pos:column="18"/></operator><name pos:line="101" pos:column="15">retries<pos:position pos:line="101" pos:column="22"/></name></name> <operator pos:line="101" pos:column="23">&gt;<pos:position pos:line="101" pos:column="27"/></operator> <name><name pos:line="101" pos:column="25">state<pos:position pos:line="101" pos:column="30"/></name><operator pos:line="101" pos:column="30">-&gt;<pos:position pos:line="101" pos:column="35"/></operator><name pos:line="101" pos:column="32">retry_max<pos:position pos:line="101" pos:column="41"/></name></name></expr>)<pos:position pos:line="101" pos:column="42"/></condition><then pos:line="101" pos:column="42"> <block pos:line="101" pos:column="43">{
      <expr_stmt><expr><name><name pos:line="102" pos:column="7">state<pos:position pos:line="102" pos:column="12"/></name><operator pos:line="102" pos:column="12">-&gt;<pos:position pos:line="102" pos:column="17"/></operator><name pos:line="102" pos:column="14">error<pos:position pos:line="102" pos:column="19"/></name></name> <operator pos:line="102" pos:column="20">=<pos:position pos:line="102" pos:column="21"/></operator> <name pos:line="102" pos:column="22">TFTP_ERR_TIMEOUT<pos:position pos:line="102" pos:column="38"/></name></expr>;<pos:position pos:line="102" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="103" pos:column="7">state<pos:position pos:line="103" pos:column="12"/></name><operator pos:line="103" pos:column="12">-&gt;<pos:position pos:line="103" pos:column="17"/></operator><name pos:line="103" pos:column="14">state<pos:position pos:line="103" pos:column="19"/></name></name> <operator pos:line="103" pos:column="20">=<pos:position pos:line="103" pos:column="21"/></operator> <name pos:line="103" pos:column="22">TFTP_STATE_FIN<pos:position pos:line="103" pos:column="36"/></name></expr>;<pos:position pos:line="103" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="104" pos:column="6"/></block></then>
    <else pos:line="105" pos:column="5">else <block pos:line="105" pos:column="10">{
      <comment type="block" pos:line="106" pos:column="7">/* Re-send the data packet */</comment>
      <expr_stmt><expr><name pos:line="107" pos:column="7">sbytes<pos:position pos:line="107" pos:column="13"/></name> <operator pos:line="107" pos:column="14">=<pos:position pos:line="107" pos:column="15"/></operator> <call><name pos:line="107" pos:column="16">sendto<pos:position pos:line="107" pos:column="22"/></name><argument_list pos:line="107" pos:column="22">(<argument><expr><name><name pos:line="107" pos:column="23">state<pos:position pos:line="107" pos:column="28"/></name><operator pos:line="107" pos:column="28">-&gt;<pos:position pos:line="107" pos:column="33"/></operator><name pos:line="107" pos:column="30">sockfd<pos:position pos:line="107" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="38">(<pos:position pos:line="107" pos:column="39"/></operator><name pos:line="107" pos:column="39">void<pos:position pos:line="107" pos:column="43"/></name> <operator pos:line="107" pos:column="44">*<pos:position pos:line="107" pos:column="45"/></operator><operator pos:line="107" pos:column="45">)<pos:position pos:line="107" pos:column="46"/></operator><name><name pos:line="107" pos:column="46">state<pos:position pos:line="107" pos:column="51"/></name><operator pos:line="107" pos:column="51">-&gt;<pos:position pos:line="107" pos:column="56"/></operator><name pos:line="107" pos:column="53">spacket<pos:position pos:line="107" pos:column="60"/></name><operator pos:line="107" pos:column="60">.<pos:position pos:line="107" pos:column="61"/></operator><name pos:line="107" pos:column="61">data<pos:position pos:line="107" pos:column="65"/></name></name></expr></argument>,
                      <argument><expr><literal type="number" pos:line="108" pos:column="23">4<pos:position pos:line="108" pos:column="24"/></literal> <operator pos:line="108" pos:column="25">+<pos:position pos:line="108" pos:column="26"/></operator> <name><name pos:line="108" pos:column="27">state<pos:position pos:line="108" pos:column="32"/></name><operator pos:line="108" pos:column="32">-&gt;<pos:position pos:line="108" pos:column="37"/></operator><name pos:line="108" pos:column="34">sbytes<pos:position pos:line="108" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="42">SEND_4TH_ARG<pos:position pos:line="108" pos:column="54"/></name></expr></argument>,
                      <argument><expr><operator pos:line="109" pos:column="23">(<pos:position pos:line="109" pos:column="24"/></operator>struct <name pos:line="109" pos:column="31">sockaddr<pos:position pos:line="109" pos:column="39"/></name> <operator pos:line="109" pos:column="40">*<pos:position pos:line="109" pos:column="41"/></operator><operator pos:line="109" pos:column="41">)<pos:position pos:line="109" pos:column="42"/></operator><operator pos:line="109" pos:column="42">&amp;<pos:position pos:line="109" pos:column="47"/></operator><name><name pos:line="109" pos:column="43">state<pos:position pos:line="109" pos:column="48"/></name><operator pos:line="109" pos:column="48">-&gt;<pos:position pos:line="109" pos:column="53"/></operator><name pos:line="109" pos:column="50">remote_addr<pos:position pos:line="109" pos:column="61"/></name></name></expr></argument>,
                      <argument><expr><name><name pos:line="110" pos:column="23">state<pos:position pos:line="110" pos:column="28"/></name><operator pos:line="110" pos:column="28">-&gt;<pos:position pos:line="110" pos:column="33"/></operator><name pos:line="110" pos:column="30">remote_addrlen<pos:position pos:line="110" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="46"/></expr_stmt>
      <comment type="block" pos:line="111" pos:column="7">/* Check all sbytes were sent */</comment>
      <if pos:line="112" pos:column="7">if<condition pos:line="112" pos:column="9">(<expr><name pos:line="112" pos:column="10">sbytes<pos:position pos:line="112" pos:column="16"/></name><operator pos:line="112" pos:column="16">&lt;<pos:position pos:line="112" pos:column="20"/></operator><literal type="number" pos:line="112" pos:column="17">0<pos:position pos:line="112" pos:column="18"/></literal></expr>)<pos:position pos:line="112" pos:column="19"/></condition><then pos:line="112" pos:column="19"> <block pos:line="112" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="113" pos:column="9">failf<pos:position pos:line="113" pos:column="14"/></name><argument_list pos:line="113" pos:column="14">(<argument><expr><name pos:line="113" pos:column="15">data<pos:position pos:line="113" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="21">"%s"<pos:position pos:line="113" pos:column="25"/></literal></expr></argument>, <argument><expr><call><name pos:line="113" pos:column="27">Curl_strerror<pos:position pos:line="113" pos:column="40"/></name><argument_list pos:line="113" pos:column="40">(<argument><expr><name><name pos:line="113" pos:column="41">state<pos:position pos:line="113" pos:column="46"/></name><operator pos:line="113" pos:column="46">-&gt;<pos:position pos:line="113" pos:column="51"/></operator><name pos:line="113" pos:column="48">conn<pos:position pos:line="113" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="54">SOCKERRNO<pos:position pos:line="113" pos:column="63"/></name></expr></argument>)<pos:position pos:line="113" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="66"/></expr_stmt>
        <return pos:line="114" pos:column="9">return <expr><name pos:line="114" pos:column="16">CURLE_SEND_ERROR<pos:position pos:line="114" pos:column="32"/></name></expr>;<pos:position pos:line="114" pos:column="33"/></return>
      }<pos:position pos:line="115" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="116" pos:column="7">/* since this was a re-send, we remain at the still byte position */</comment>
      <expr_stmt><expr><call><name pos:line="117" pos:column="7">Curl_pgrsSetUploadCounter<pos:position pos:line="117" pos:column="32"/></name><argument_list pos:line="117" pos:column="32">(<argument><expr><name pos:line="117" pos:column="33">data<pos:position pos:line="117" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="39">k<pos:position pos:line="117" pos:column="40"/></name><operator pos:line="117" pos:column="40">-&gt;<pos:position pos:line="117" pos:column="45"/></operator><name pos:line="117" pos:column="42">writebytecount<pos:position pos:line="117" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="118" pos:column="6"/></block></else></if>
    <break pos:line="119" pos:column="5">break;<pos:position pos:line="119" pos:column="11"/></break>

  <case pos:line="121" pos:column="3">case <expr><name pos:line="121" pos:column="8">TFTP_EVENT_ERROR<pos:position pos:line="121" pos:column="24"/></name></expr>:<pos:position pos:line="121" pos:column="25"/></case>
    <expr_stmt><expr><name><name pos:line="122" pos:column="5">state<pos:position pos:line="122" pos:column="10"/></name><operator pos:line="122" pos:column="10">-&gt;<pos:position pos:line="122" pos:column="15"/></operator><name pos:line="122" pos:column="12">state<pos:position pos:line="122" pos:column="17"/></name></name> <operator pos:line="122" pos:column="18">=<pos:position pos:line="122" pos:column="19"/></operator> <name pos:line="122" pos:column="20">TFTP_STATE_FIN<pos:position pos:line="122" pos:column="34"/></name></expr>;<pos:position pos:line="122" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="123" pos:column="5">setpacketevent<pos:position pos:line="123" pos:column="19"/></name><argument_list pos:line="123" pos:column="19">(<argument><expr><operator pos:line="123" pos:column="20">&amp;<pos:position pos:line="123" pos:column="25"/></operator><name><name pos:line="123" pos:column="21">state<pos:position pos:line="123" pos:column="26"/></name><operator pos:line="123" pos:column="26">-&gt;<pos:position pos:line="123" pos:column="31"/></operator><name pos:line="123" pos:column="28">spacket<pos:position pos:line="123" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="37">TFTP_EVENT_ERROR<pos:position pos:line="123" pos:column="53"/></name></expr></argument>)<pos:position pos:line="123" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="124" pos:column="5">setpacketblock<pos:position pos:line="124" pos:column="19"/></name><argument_list pos:line="124" pos:column="19">(<argument><expr><operator pos:line="124" pos:column="20">&amp;<pos:position pos:line="124" pos:column="25"/></operator><name><name pos:line="124" pos:column="21">state<pos:position pos:line="124" pos:column="26"/></name><operator pos:line="124" pos:column="26">-&gt;<pos:position pos:line="124" pos:column="31"/></operator><name pos:line="124" pos:column="28">spacket<pos:position pos:line="124" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="37">state<pos:position pos:line="124" pos:column="42"/></name><operator pos:line="124" pos:column="42">-&gt;<pos:position pos:line="124" pos:column="47"/></operator><name pos:line="124" pos:column="44">block<pos:position pos:line="124" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="124" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="125" pos:column="5">(<pos:position pos:line="125" pos:column="6"/></operator><name pos:line="125" pos:column="6">void<pos:position pos:line="125" pos:column="10"/></name><operator pos:line="125" pos:column="10">)<pos:position pos:line="125" pos:column="11"/></operator><call><name pos:line="125" pos:column="11">sendto<pos:position pos:line="125" pos:column="17"/></name><argument_list pos:line="125" pos:column="17">(<argument><expr><name><name pos:line="125" pos:column="18">state<pos:position pos:line="125" pos:column="23"/></name><operator pos:line="125" pos:column="23">-&gt;<pos:position pos:line="125" pos:column="28"/></operator><name pos:line="125" pos:column="25">sockfd<pos:position pos:line="125" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="33">(<pos:position pos:line="125" pos:column="34"/></operator><name pos:line="125" pos:column="34">void<pos:position pos:line="125" pos:column="38"/></name> <operator pos:line="125" pos:column="39">*<pos:position pos:line="125" pos:column="40"/></operator><operator pos:line="125" pos:column="40">)<pos:position pos:line="125" pos:column="41"/></operator><name><name pos:line="125" pos:column="41">state<pos:position pos:line="125" pos:column="46"/></name><operator pos:line="125" pos:column="46">-&gt;<pos:position pos:line="125" pos:column="51"/></operator><name pos:line="125" pos:column="48">spacket<pos:position pos:line="125" pos:column="55"/></name><operator pos:line="125" pos:column="55">.<pos:position pos:line="125" pos:column="56"/></operator><name pos:line="125" pos:column="56">data<pos:position pos:line="125" pos:column="60"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="125" pos:column="62">4<pos:position pos:line="125" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="65">SEND_4TH_ARG<pos:position pos:line="125" pos:column="77"/></name></expr></argument>,
                 <argument><expr><operator pos:line="126" pos:column="18">(<pos:position pos:line="126" pos:column="19"/></operator>struct <name pos:line="126" pos:column="26">sockaddr<pos:position pos:line="126" pos:column="34"/></name> <operator pos:line="126" pos:column="35">*<pos:position pos:line="126" pos:column="36"/></operator><operator pos:line="126" pos:column="36">)<pos:position pos:line="126" pos:column="37"/></operator><operator pos:line="126" pos:column="37">&amp;<pos:position pos:line="126" pos:column="42"/></operator><name><name pos:line="126" pos:column="38">state<pos:position pos:line="126" pos:column="43"/></name><operator pos:line="126" pos:column="43">-&gt;<pos:position pos:line="126" pos:column="48"/></operator><name pos:line="126" pos:column="45">remote_addr<pos:position pos:line="126" pos:column="56"/></name></name></expr></argument>,
                 <argument><expr><name><name pos:line="127" pos:column="18">state<pos:position pos:line="127" pos:column="23"/></name><operator pos:line="127" pos:column="23">-&gt;<pos:position pos:line="127" pos:column="28"/></operator><name pos:line="127" pos:column="25">remote_addrlen<pos:position pos:line="127" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="41"/></expr_stmt>
    <comment type="block" pos:line="128" pos:column="5">/* don't bother with the return code, but if the socket is still up we
     * should be a good TFTP client and let the server know we're done */</comment>
    <expr_stmt><expr><name><name pos:line="130" pos:column="5">state<pos:position pos:line="130" pos:column="10"/></name><operator pos:line="130" pos:column="10">-&gt;<pos:position pos:line="130" pos:column="15"/></operator><name pos:line="130" pos:column="12">state<pos:position pos:line="130" pos:column="17"/></name></name> <operator pos:line="130" pos:column="18">=<pos:position pos:line="130" pos:column="19"/></operator> <name pos:line="130" pos:column="20">TFTP_STATE_FIN<pos:position pos:line="130" pos:column="34"/></name></expr>;<pos:position pos:line="130" pos:column="35"/></expr_stmt>
    <break pos:line="131" pos:column="5">break;<pos:position pos:line="131" pos:column="11"/></break>

  <default pos:line="133" pos:column="3">default:<pos:position pos:line="133" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="134" pos:column="5">failf<pos:position pos:line="134" pos:column="10"/></name><argument_list pos:line="134" pos:column="10">(<argument><expr><name pos:line="134" pos:column="11">data<pos:position pos:line="134" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="134" pos:column="17">"tftp_tx: internal error, event: %i"<pos:position pos:line="134" pos:column="53"/></literal></expr></argument>, <argument><expr><call pos:line="134" pos:column="55">(<name pos:line="134" pos:column="56">int<pos:position pos:line="134" pos:column="59"/></name>)<argument_list pos:line="134" pos:column="60">(<argument><expr><name pos:line="134" pos:column="61">event<pos:position pos:line="134" pos:column="66"/></name></expr></argument>)<pos:position pos:line="134" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="134" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="69"/></expr_stmt>
    <break pos:line="135" pos:column="5">break;<pos:position pos:line="135" pos:column="11"/></break>
  }<pos:position pos:line="136" pos:column="4"/></block></switch>

  <return pos:line="138" pos:column="3">return <expr><name pos:line="138" pos:column="10">result<pos:position pos:line="138" pos:column="16"/></name></expr>;<pos:position pos:line="138" pos:column="17"/></return>
}<pos:position pos:line="139" pos:column="2"/></block></function></unit>
