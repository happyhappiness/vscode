<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2095_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">mime_subparts_read<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">buffer<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">size_t<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">size<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">size_t<pos:position pos:line="1" pos:column="67"/></name></type> <name pos:line="1" pos:column="68">nitems<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">void<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">instream<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_mime<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">mime<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><operator pos:line="4" pos:column="21">(<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">curl_mime<pos:position pos:line="4" pos:column="31"/></name> <operator pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></operator><operator pos:line="4" pos:column="33">)<pos:position pos:line="4" pos:column="34"/></operator> <name pos:line="4" pos:column="35">instream<pos:position pos:line="4" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">cursize<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">sz<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">curl_mimepart<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">part<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="8" pos:column="29"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">convbuf<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><name pos:line="9" pos:column="19">buffer<pos:position pos:line="9" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><operator pos:line="12" pos:column="3">(<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">void<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">)<pos:position pos:line="12" pos:column="9"/></operator> <name pos:line="12" pos:column="10">size<pos:position pos:line="12" pos:column="14"/></name></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>   <comment type="block" pos:line="12" pos:column="18">/* Always 1. */</comment>

  <while pos:line="14" pos:column="3">while<condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">nitems<pos:position pos:line="14" pos:column="15"/></name></expr>)<pos:position pos:line="14" pos:column="16"/></condition> <block pos:line="14" pos:column="17">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">sz<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <literal type="number" pos:line="15" pos:column="10">0<pos:position pos:line="15" pos:column="11"/></literal></expr>;<pos:position pos:line="15" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">part<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <name><name pos:line="16" pos:column="12">mime<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">state<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">ptr<pos:position pos:line="16" pos:column="27"/></name></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
    <switch pos:line="17" pos:column="5">switch<condition pos:line="17" pos:column="11">(<expr><name><name pos:line="17" pos:column="12">mime<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">-&gt;<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="18">state<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">.<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">state<pos:position pos:line="17" pos:column="29"/></name></name></expr>)<pos:position pos:line="17" pos:column="30"/></condition> <block pos:line="17" pos:column="31">{
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">MIMESTATE_BEGIN<pos:position pos:line="18" pos:column="25"/></name></expr>:<pos:position pos:line="18" pos:column="26"/></case>
    <case pos:line="19" pos:column="5">case <expr><name pos:line="19" pos:column="10">MIMESTATE_BODY<pos:position pos:line="19" pos:column="24"/></name></expr>:<pos:position pos:line="19" pos:column="25"/></case>
<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="20" pos:column="29"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="21" pos:column="7">convbuf<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="17">buffer<pos:position pos:line="21" pos:column="23"/></name></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">mimesetstate<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><operator pos:line="23" pos:column="20">&amp;<pos:position pos:line="23" pos:column="25"/></operator><name><name pos:line="23" pos:column="21">mime<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">-&gt;<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="27">state<pos:position pos:line="23" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">MIMESTATE_BOUNDARY1<pos:position pos:line="23" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="55">mime<pos:position pos:line="23" pos:column="59"/></name><operator pos:line="23" pos:column="59">-&gt;<pos:position pos:line="23" pos:column="64"/></operator><name pos:line="23" pos:column="61">firstpart<pos:position pos:line="23" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="72"/></expr_stmt>
      <comment type="block" pos:line="24" pos:column="7">/* The first boundary always follows the header termination empty line,
         so is always preceded by a CRLK. We can then spare 2 characters
         by skipping the leading CRLF in boundary. */</comment>
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">mime<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">state<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">.<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">offset<pos:position pos:line="27" pos:column="25"/></name></name> <operator pos:line="27" pos:column="26">+=<pos:position pos:line="27" pos:column="28"/></operator> <literal type="number" pos:line="27" pos:column="29">2<pos:position pos:line="27" pos:column="30"/></literal></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>
      <break pos:line="28" pos:column="7">break;<pos:position pos:line="28" pos:column="13"/></break>
    <case pos:line="29" pos:column="5">case <expr><name pos:line="29" pos:column="10">MIMESTATE_BOUNDARY1<pos:position pos:line="29" pos:column="29"/></name></expr>:<pos:position pos:line="29" pos:column="30"/></case>
      <expr_stmt><expr><name pos:line="30" pos:column="7">sz<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <call><name pos:line="30" pos:column="12">readback_bytes<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><operator pos:line="30" pos:column="27">&amp;<pos:position pos:line="30" pos:column="32"/></operator><name><name pos:line="30" pos:column="28">mime<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">-&gt;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="34">state<pos:position pos:line="30" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">buffer<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">nitems<pos:position pos:line="30" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="57">"\r\n--"<pos:position pos:line="30" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="67">4<pos:position pos:line="30" pos:column="68"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="70">""<pos:position pos:line="30" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
      <if pos:line="31" pos:column="7">if<condition pos:line="31" pos:column="9">(<expr><operator pos:line="31" pos:column="10">!<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">sz<pos:position pos:line="31" pos:column="13"/></name></expr>)<pos:position pos:line="31" pos:column="14"/></condition><then pos:line="31" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="9">mimesetstate<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><operator pos:line="32" pos:column="22">&amp;<pos:position pos:line="32" pos:column="27"/></operator><name><name pos:line="32" pos:column="23">mime<pos:position pos:line="32" pos:column="27"/></name><operator pos:line="32" pos:column="27">-&gt;<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="29">state<pos:position pos:line="32" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="36">MIMESTATE_BOUNDARY2<pos:position pos:line="32" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="57">part<pos:position pos:line="32" pos:column="61"/></name></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt></block></then></if>
      <break pos:line="33" pos:column="7">break;<pos:position pos:line="33" pos:column="13"/></break>
    <case pos:line="34" pos:column="5">case <expr><name pos:line="34" pos:column="10">MIMESTATE_BOUNDARY2<pos:position pos:line="34" pos:column="29"/></name></expr>:<pos:position pos:line="34" pos:column="30"/></case>
      <expr_stmt><expr><name pos:line="35" pos:column="7">sz<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">readback_bytes<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><operator pos:line="35" pos:column="27">&amp;<pos:position pos:line="35" pos:column="32"/></operator><name><name pos:line="35" pos:column="28">mime<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">-&gt;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="34">state<pos:position pos:line="35" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="41">buffer<pos:position pos:line="35" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="49">nitems<pos:position pos:line="35" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="57">mime<pos:position pos:line="35" pos:column="61"/></name><operator pos:line="35" pos:column="61">-&gt;<pos:position pos:line="35" pos:column="66"/></operator><name pos:line="35" pos:column="63">boundary<pos:position pos:line="35" pos:column="71"/></name></name></expr></argument>,
                          <argument><expr><call><name pos:line="36" pos:column="27">strlen<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name><name pos:line="36" pos:column="34">mime<pos:position pos:line="36" pos:column="38"/></name><operator pos:line="36" pos:column="38">-&gt;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="40">boundary<pos:position pos:line="36" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="36" pos:column="51">part<pos:position pos:line="36" pos:column="55"/></name></expr>?<pos:position pos:line="36" pos:column="56"/></condition><then pos:line="36" pos:column="56"> <expr><literal type="string" pos:line="36" pos:column="57">"\r\n"<pos:position pos:line="36" pos:column="63"/></literal></expr></then><else pos:line="36" pos:column="63">: <expr><literal type="string" pos:line="36" pos:column="65">"--\r\n"<pos:position pos:line="36" pos:column="73"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="36" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="75"/></expr_stmt>
      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><operator pos:line="37" pos:column="10">!<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">sz<pos:position pos:line="37" pos:column="13"/></name></expr>)<pos:position pos:line="37" pos:column="14"/></condition><then pos:line="37" pos:column="14"> <block pos:line="37" pos:column="15">{
<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef<pos:position pos:line="38" pos:column="7"/></cpp:directive> <name pos:line="38" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="38" pos:column="29"/></name></cpp:ifdef>
        <if pos:line="39" pos:column="9">if<condition pos:line="39" pos:column="11">(<expr><name><name pos:line="39" pos:column="12">mime<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">easy<pos:position pos:line="39" pos:column="22"/></name></name> <operator pos:line="39" pos:column="23">&amp;&amp;<pos:position pos:line="39" pos:column="33"/></operator> <name pos:line="39" pos:column="26">convbuf<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">&lt;<pos:position pos:line="39" pos:column="38"/></operator> <name pos:line="39" pos:column="36">buffer<pos:position pos:line="39" pos:column="42"/></name></expr>)<pos:position pos:line="39" pos:column="43"/></condition><then pos:line="39" pos:column="43"> <block pos:line="39" pos:column="44">{
          <decl_stmt><decl><type><name pos:line="40" pos:column="11">CURLcode<pos:position pos:line="40" pos:column="19"/></name></type> <name pos:line="40" pos:column="20">result<pos:position pos:line="40" pos:column="26"/></name> <init pos:line="40" pos:column="27">= <expr><call><name pos:line="40" pos:column="29">Curl_convert_to_network<pos:position pos:line="40" pos:column="52"/></name><argument_list pos:line="40" pos:column="52">(<argument><expr><name><name pos:line="40" pos:column="53">mime<pos:position pos:line="40" pos:column="57"/></name><operator pos:line="40" pos:column="57">-&gt;<pos:position pos:line="40" pos:column="62"/></operator><name pos:line="40" pos:column="59">easy<pos:position pos:line="40" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="65">convbuf<pos:position pos:line="40" pos:column="72"/></name></expr></argument>,
                                                    <argument><expr><name pos:line="41" pos:column="53">buffer<pos:position pos:line="41" pos:column="59"/></name> <operator pos:line="41" pos:column="60">-<pos:position pos:line="41" pos:column="61"/></operator> <name pos:line="41" pos:column="62">convbuf<pos:position pos:line="41" pos:column="69"/></name></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="71"/></decl_stmt>
          <if pos:line="42" pos:column="11">if<condition pos:line="42" pos:column="13">(<expr><name pos:line="42" pos:column="14">result<pos:position pos:line="42" pos:column="20"/></name></expr>)<pos:position pos:line="42" pos:column="21"/></condition><then pos:line="42" pos:column="21">
            <block type="pseudo"><return pos:line="43" pos:column="13">return <expr><name pos:line="43" pos:column="20">READ_ERROR<pos:position pos:line="43" pos:column="30"/></name></expr>;<pos:position pos:line="43" pos:column="31"/></return></block></then></if>
          <expr_stmt><expr><name pos:line="44" pos:column="11">convbuf<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">=<pos:position pos:line="44" pos:column="20"/></operator> <name pos:line="44" pos:column="21">buffer<pos:position pos:line="44" pos:column="27"/></name></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">mimesetstate<pos:position pos:line="47" pos:column="21"/></name><argument_list pos:line="47" pos:column="21">(<argument><expr><operator pos:line="47" pos:column="22">&amp;<pos:position pos:line="47" pos:column="27"/></operator><name><name pos:line="47" pos:column="23">mime<pos:position pos:line="47" pos:column="27"/></name><operator pos:line="47" pos:column="27">-&gt;<pos:position pos:line="47" pos:column="32"/></operator><name pos:line="47" pos:column="29">state<pos:position pos:line="47" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="36">MIMESTATE_CONTENT<pos:position pos:line="47" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="55">part<pos:position pos:line="47" pos:column="59"/></name></expr></argument>)<pos:position pos:line="47" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="61"/></expr_stmt>
      }<pos:position pos:line="48" pos:column="8"/></block></then></if>
      <break pos:line="49" pos:column="7">break;<pos:position pos:line="49" pos:column="13"/></break>
    <case pos:line="50" pos:column="5">case <expr><name pos:line="50" pos:column="10">MIMESTATE_CONTENT<pos:position pos:line="50" pos:column="27"/></name></expr>:<pos:position pos:line="50" pos:column="28"/></case>
      <if pos:line="51" pos:column="7">if<condition pos:line="51" pos:column="9">(<expr><operator pos:line="51" pos:column="10">!<pos:position pos:line="51" pos:column="11"/></operator><name pos:line="51" pos:column="11">part<pos:position pos:line="51" pos:column="15"/></name></expr>)<pos:position pos:line="51" pos:column="16"/></condition><then pos:line="51" pos:column="16"> <block pos:line="51" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">mimesetstate<pos:position pos:line="52" pos:column="21"/></name><argument_list pos:line="52" pos:column="21">(<argument><expr><operator pos:line="52" pos:column="22">&amp;<pos:position pos:line="52" pos:column="27"/></operator><name><name pos:line="52" pos:column="23">mime<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">state<pos:position pos:line="52" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="36">MIMESTATE_END<pos:position pos:line="52" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="51">NULL<pos:position pos:line="52" pos:column="55"/></name></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="57"/></expr_stmt>
        <break pos:line="53" pos:column="9">break;<pos:position pos:line="53" pos:column="15"/></break>
      }<pos:position pos:line="54" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="55" pos:column="7">sz<pos:position pos:line="55" pos:column="9"/></name> <operator pos:line="55" pos:column="10">=<pos:position pos:line="55" pos:column="11"/></operator> <call><name pos:line="55" pos:column="12">readback_part<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">part<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="32">buffer<pos:position pos:line="55" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="40">nitems<pos:position pos:line="55" pos:column="46"/></name></expr></argument>)<pos:position pos:line="55" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="48"/></expr_stmt>
      <switch pos:line="56" pos:column="7">switch<condition pos:line="56" pos:column="13">(<expr><name pos:line="56" pos:column="14">sz<pos:position pos:line="56" pos:column="16"/></name></expr>)<pos:position pos:line="56" pos:column="17"/></condition> <block pos:line="56" pos:column="18">{
      <case pos:line="57" pos:column="7">case <expr><name pos:line="57" pos:column="12">CURL_READFUNC_ABORT<pos:position pos:line="57" pos:column="31"/></name></expr>:<pos:position pos:line="57" pos:column="32"/></case>
      <case pos:line="58" pos:column="7">case <expr><name pos:line="58" pos:column="12">CURL_READFUNC_PAUSE<pos:position pos:line="58" pos:column="31"/></name></expr>:<pos:position pos:line="58" pos:column="32"/></case>
      <case pos:line="59" pos:column="7">case <expr><name pos:line="59" pos:column="12">READ_ERROR<pos:position pos:line="59" pos:column="22"/></name></expr>:<pos:position pos:line="59" pos:column="23"/></case>
        <return pos:line="60" pos:column="9">return <expr><ternary><condition><expr><name pos:line="60" pos:column="16">cursize<pos:position pos:line="60" pos:column="23"/></name></expr>?<pos:position pos:line="60" pos:column="24"/></condition><then pos:line="60" pos:column="24"> <expr><name pos:line="60" pos:column="25">cursize<pos:position pos:line="60" pos:column="32"/></name></expr></then><else pos:line="60" pos:column="32">: <expr><name pos:line="60" pos:column="34">sz<pos:position pos:line="60" pos:column="36"/></name></expr></else></ternary></expr>;<pos:position pos:line="60" pos:column="37"/></return>
      <case pos:line="61" pos:column="7">case <expr><literal type="number" pos:line="61" pos:column="12">0<pos:position pos:line="61" pos:column="13"/></literal></expr>:<pos:position pos:line="61" pos:column="14"/></case>
<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="62" pos:column="29"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="63" pos:column="9">convbuf<pos:position pos:line="63" pos:column="16"/></name> <operator pos:line="63" pos:column="17">=<pos:position pos:line="63" pos:column="18"/></operator> <name pos:line="63" pos:column="19">buffer<pos:position pos:line="63" pos:column="25"/></name></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">mimesetstate<pos:position pos:line="65" pos:column="21"/></name><argument_list pos:line="65" pos:column="21">(<argument><expr><operator pos:line="65" pos:column="22">&amp;<pos:position pos:line="65" pos:column="27"/></operator><name><name pos:line="65" pos:column="23">mime<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">-&gt;<pos:position pos:line="65" pos:column="32"/></operator><name pos:line="65" pos:column="29">state<pos:position pos:line="65" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="36">MIMESTATE_BOUNDARY1<pos:position pos:line="65" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="57">part<pos:position pos:line="65" pos:column="61"/></name><operator pos:line="65" pos:column="61">-&gt;<pos:position pos:line="65" pos:column="66"/></operator><name pos:line="65" pos:column="63">nextpart<pos:position pos:line="65" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="73"/></expr_stmt>
        <break pos:line="66" pos:column="9">break;<pos:position pos:line="66" pos:column="15"/></break>
      }<pos:position pos:line="67" pos:column="8"/></block></switch>
      <break pos:line="68" pos:column="7">break;<pos:position pos:line="68" pos:column="13"/></break>
    <case pos:line="69" pos:column="5">case <expr><name pos:line="69" pos:column="10">MIMESTATE_END<pos:position pos:line="69" pos:column="23"/></name></expr>:<pos:position pos:line="69" pos:column="24"/></case>
      <return pos:line="70" pos:column="7">return <expr><name pos:line="70" pos:column="14">cursize<pos:position pos:line="70" pos:column="21"/></name></expr>;<pos:position pos:line="70" pos:column="22"/></return>
    <default pos:line="71" pos:column="5">default:<pos:position pos:line="71" pos:column="13"/></default>
      <break pos:line="72" pos:column="7">break;<pos:position pos:line="72" pos:column="13"/></break>    <comment type="block" pos:line="72" pos:column="17">/* other values not used in mime state. */</comment>
    }<pos:position pos:line="73" pos:column="6"/></block></switch>

    <comment type="block" pos:line="75" pos:column="5">/* Bump buffer and counters according to read size. */</comment>
    <expr_stmt><expr><name pos:line="76" pos:column="5">cursize<pos:position pos:line="76" pos:column="12"/></name> <operator pos:line="76" pos:column="13">+=<pos:position pos:line="76" pos:column="15"/></operator> <name pos:line="76" pos:column="16">sz<pos:position pos:line="76" pos:column="18"/></name></expr>;<pos:position pos:line="76" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="77" pos:column="5">buffer<pos:position pos:line="77" pos:column="11"/></name> <operator pos:line="77" pos:column="12">+=<pos:position pos:line="77" pos:column="14"/></operator> <name pos:line="77" pos:column="15">sz<pos:position pos:line="77" pos:column="17"/></name></expr>;<pos:position pos:line="77" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="78" pos:column="5">nitems<pos:position pos:line="78" pos:column="11"/></name> <operator pos:line="78" pos:column="12">-=<pos:position pos:line="78" pos:column="14"/></operator> <name pos:line="78" pos:column="15">sz<pos:position pos:line="78" pos:column="17"/></name></expr>;<pos:position pos:line="78" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="79" pos:column="4"/></block></while>

<cpp:ifdef pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">ifdef<pos:position pos:line="81" pos:column="7"/></cpp:directive> <name pos:line="81" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="81" pos:column="29"/></name></cpp:ifdef>
      <if pos:line="82" pos:column="7">if<condition pos:line="82" pos:column="9">(<expr><name><name pos:line="82" pos:column="10">mime<pos:position pos:line="82" pos:column="14"/></name><operator pos:line="82" pos:column="14">-&gt;<pos:position pos:line="82" pos:column="19"/></operator><name pos:line="82" pos:column="16">easy<pos:position pos:line="82" pos:column="20"/></name></name> <operator pos:line="82" pos:column="21">&amp;&amp;<pos:position pos:line="82" pos:column="31"/></operator> <name pos:line="82" pos:column="24">convbuf<pos:position pos:line="82" pos:column="31"/></name> <operator pos:line="82" pos:column="32">&lt;<pos:position pos:line="82" pos:column="36"/></operator> <name pos:line="82" pos:column="34">buffer<pos:position pos:line="82" pos:column="40"/></name> <operator pos:line="82" pos:column="41">&amp;&amp;<pos:position pos:line="82" pos:column="51"/></operator>
         <name><name pos:line="83" pos:column="10">mime<pos:position pos:line="83" pos:column="14"/></name><operator pos:line="83" pos:column="14">-&gt;<pos:position pos:line="83" pos:column="19"/></operator><name pos:line="83" pos:column="16">state<pos:position pos:line="83" pos:column="21"/></name><operator pos:line="83" pos:column="21">.<pos:position pos:line="83" pos:column="22"/></operator><name pos:line="83" pos:column="22">state<pos:position pos:line="83" pos:column="27"/></name></name> <operator pos:line="83" pos:column="28">&lt;=<pos:position pos:line="83" pos:column="33"/></operator> <name pos:line="83" pos:column="31">MIMESTATE_CONTENT<pos:position pos:line="83" pos:column="48"/></name></expr>)<pos:position pos:line="83" pos:column="49"/></condition><then pos:line="83" pos:column="49"> <block pos:line="83" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="84" pos:column="9">CURLcode<pos:position pos:line="84" pos:column="17"/></name></type> <name pos:line="84" pos:column="18">result<pos:position pos:line="84" pos:column="24"/></name> <init pos:line="84" pos:column="25">= <expr><call><name pos:line="84" pos:column="27">Curl_convert_to_network<pos:position pos:line="84" pos:column="50"/></name><argument_list pos:line="84" pos:column="50">(<argument><expr><name><name pos:line="84" pos:column="51">mime<pos:position pos:line="84" pos:column="55"/></name><operator pos:line="84" pos:column="55">-&gt;<pos:position pos:line="84" pos:column="60"/></operator><name pos:line="84" pos:column="57">easy<pos:position pos:line="84" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="63">convbuf<pos:position pos:line="84" pos:column="70"/></name></expr></argument>,
                                                  <argument><expr><name pos:line="85" pos:column="51">buffer<pos:position pos:line="85" pos:column="57"/></name> <operator pos:line="85" pos:column="58">-<pos:position pos:line="85" pos:column="59"/></operator> <name pos:line="85" pos:column="60">convbuf<pos:position pos:line="85" pos:column="67"/></name></expr></argument>)<pos:position pos:line="85" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="85" pos:column="69"/></decl_stmt>
        <if pos:line="86" pos:column="9">if<condition pos:line="86" pos:column="11">(<expr><name pos:line="86" pos:column="12">result<pos:position pos:line="86" pos:column="18"/></name></expr>)<pos:position pos:line="86" pos:column="19"/></condition><then pos:line="86" pos:column="19">
          <block type="pseudo"><return pos:line="87" pos:column="11">return <expr><name pos:line="87" pos:column="18">READ_ERROR<pos:position pos:line="87" pos:column="28"/></name></expr>;<pos:position pos:line="87" pos:column="29"/></return></block></then></if>
      }<pos:position pos:line="88" pos:column="8"/></block></then></if>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="91" pos:column="3">return <expr><name pos:line="91" pos:column="10">cursize<pos:position pos:line="91" pos:column="17"/></name></expr>;<pos:position pos:line="91" pos:column="18"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
