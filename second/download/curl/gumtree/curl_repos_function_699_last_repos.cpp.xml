<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_699_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">storerequest<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">reqbuf<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">size_t<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">totalsize<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">res<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">error<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><literal type="number" pos:line="4" pos:column="15">0<pos:position pos:line="4" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">written<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">writeleft<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">FILE<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">dump<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">dumpfile<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><ternary><condition><expr><name pos:line="8" pos:column="26">is_proxy<pos:position pos:line="8" pos:column="34"/></name></expr>?<pos:position pos:line="8" pos:column="35"/></condition><then><expr><name pos:line="8" pos:column="35">REQUEST_PROXY_DUMP<pos:position pos:line="8" pos:column="53"/></name></expr></then><else pos:line="8" pos:column="53">:<expr><name pos:line="8" pos:column="54">REQUEST_DUMP<pos:position pos:line="8" pos:column="66"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="8" pos:column="67"/></decl_stmt>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">reqbuf<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">==<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
    <block type="pseudo"><return pos:line="11" pos:column="5">return;<pos:position pos:line="11" pos:column="12"/></return></block></then></if>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name pos:line="12" pos:column="6">totalsize<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr>)<pos:position pos:line="12" pos:column="21"/></condition><then pos:line="12" pos:column="21">
    <block type="pseudo"><return pos:line="13" pos:column="5">return;<pos:position pos:line="13" pos:column="12"/></return></block></then></if>

  <do pos:line="15" pos:column="3">do <block pos:line="15" pos:column="6">{
    <expr_stmt><expr><name pos:line="16" pos:column="5">dump<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">fopen<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">dumpfile<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="28">"ab"<pos:position pos:line="16" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block> while<condition pos:line="17" pos:column="10">(<expr><operator pos:line="17" pos:column="11">(<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">dump<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">==<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">NULL<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">)<pos:position pos:line="17" pos:column="25"/></operator> <operator pos:line="17" pos:column="26">&amp;&amp;<pos:position pos:line="17" pos:column="36"/></operator> <operator pos:line="17" pos:column="29">(<pos:position pos:line="17" pos:column="30"/></operator><operator pos:line="17" pos:column="30">(<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">error<pos:position pos:line="17" pos:column="36"/></name> <operator pos:line="17" pos:column="37">=<pos:position pos:line="17" pos:column="38"/></operator> <name pos:line="17" pos:column="39">errno<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">)<pos:position pos:line="17" pos:column="45"/></operator> <operator pos:line="17" pos:column="46">==<pos:position pos:line="17" pos:column="48"/></operator> <name pos:line="17" pos:column="49">EINTR<pos:position pos:line="17" pos:column="54"/></name><operator pos:line="17" pos:column="54">)<pos:position pos:line="17" pos:column="55"/></operator></expr>)<pos:position pos:line="17" pos:column="56"/></condition>;<pos:position pos:line="17" pos:column="57"/></do>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">dump<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">==<pos:position pos:line="18" pos:column="13"/></operator> <name pos:line="18" pos:column="14">NULL<pos:position pos:line="18" pos:column="18"/></name></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19"> <block pos:line="18" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">logmsg<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="string" pos:line="19" pos:column="12">"[2] Error opening file %s error: %d %s"<pos:position pos:line="19" pos:column="52"/></literal></expr></argument>,
           <argument><expr><name pos:line="20" pos:column="12">dumpfile<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="22">error<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="29">strerror<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><name pos:line="20" pos:column="38">error<pos:position pos:line="20" pos:column="43"/></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">logmsg<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><literal type="string" pos:line="21" pos:column="12">"Failed to write request input "<pos:position pos:line="21" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
    <return pos:line="22" pos:column="5">return;<pos:position pos:line="22" pos:column="12"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="25" pos:column="3">writeleft<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <name pos:line="25" pos:column="15">totalsize<pos:position pos:line="25" pos:column="24"/></name></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
  <do pos:line="26" pos:column="3">do <block pos:line="26" pos:column="6">{
    <expr_stmt><expr><name pos:line="27" pos:column="5">written<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">fwrite<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><operator pos:line="27" pos:column="22">&amp;<pos:position pos:line="27" pos:column="27"/></operator><name><name pos:line="27" pos:column="23">reqbuf<pos:position pos:line="27" pos:column="29"/></name><index pos:line="27" pos:column="29">[<expr><name pos:line="27" pos:column="30">totalsize<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">-<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="40">writeleft<pos:position pos:line="27" pos:column="49"/></name></expr>]<pos:position pos:line="27" pos:column="50"/></index></name></expr></argument>,
                     <argument><expr><literal type="number" pos:line="28" pos:column="22">1<pos:position pos:line="28" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="25">writeleft<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="36">dump<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><name pos:line="29" pos:column="8">got_exit_signal<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24">
      <block type="pseudo"><goto pos:line="30" pos:column="7">goto <name pos:line="30" pos:column="12">storerequest_cleanup<pos:position pos:line="30" pos:column="32"/></name>;<pos:position pos:line="30" pos:column="33"/></goto></block></then></if>
    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><name pos:line="31" pos:column="8">written<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">&gt;<pos:position pos:line="31" pos:column="20"/></operator> <literal type="number" pos:line="31" pos:column="18">0<pos:position pos:line="31" pos:column="19"/></literal></expr>)<pos:position pos:line="31" pos:column="20"/></condition><then pos:line="31" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="7">writeleft<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">-=<pos:position pos:line="32" pos:column="19"/></operator> <name pos:line="32" pos:column="20">written<pos:position pos:line="32" pos:column="27"/></name></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt></block></then></if>
  }<pos:position pos:line="33" pos:column="4"/></block> while<condition pos:line="33" pos:column="10">(<expr><operator pos:line="33" pos:column="11">(<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">writeleft<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">&gt;<pos:position pos:line="33" pos:column="26"/></operator> <literal type="number" pos:line="33" pos:column="24">0<pos:position pos:line="33" pos:column="25"/></literal><operator pos:line="33" pos:column="25">)<pos:position pos:line="33" pos:column="26"/></operator> <operator pos:line="33" pos:column="27">&amp;&amp;<pos:position pos:line="33" pos:column="37"/></operator> <operator pos:line="33" pos:column="30">(<pos:position pos:line="33" pos:column="31"/></operator><operator pos:line="33" pos:column="31">(<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="32">error<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">=<pos:position pos:line="33" pos:column="39"/></operator> <name pos:line="33" pos:column="40">errno<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">)<pos:position pos:line="33" pos:column="46"/></operator> <operator pos:line="33" pos:column="47">==<pos:position pos:line="33" pos:column="49"/></operator> <name pos:line="33" pos:column="50">EINTR<pos:position pos:line="33" pos:column="55"/></name><operator pos:line="33" pos:column="55">)<pos:position pos:line="33" pos:column="56"/></operator></expr>)<pos:position pos:line="33" pos:column="57"/></condition>;<pos:position pos:line="33" pos:column="58"/></do>

  <if pos:line="35" pos:column="3">if<condition pos:line="35" pos:column="5">(<expr><name pos:line="35" pos:column="6">writeleft<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">==<pos:position pos:line="35" pos:column="18"/></operator> <literal type="number" pos:line="35" pos:column="19">0<pos:position pos:line="35" pos:column="20"/></literal></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="5">logmsg<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="string" pos:line="36" pos:column="12">"Wrote request (%zu bytes) input to %s"<pos:position pos:line="36" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="53">totalsize<pos:position pos:line="36" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="64">dumpfile<pos:position pos:line="36" pos:column="72"/></name></expr></argument>)<pos:position pos:line="36" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="74"/></expr_stmt></block></then>
  <elseif pos:line="37" pos:column="3">else <if pos:line="37" pos:column="8">if<condition pos:line="37" pos:column="10">(<expr><name pos:line="37" pos:column="11">writeleft<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">&gt;<pos:position pos:line="37" pos:column="25"/></operator> <literal type="number" pos:line="37" pos:column="23">0<pos:position pos:line="37" pos:column="24"/></literal></expr>)<pos:position pos:line="37" pos:column="25"/></condition><then pos:line="37" pos:column="25"> <block pos:line="37" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">logmsg<pos:position pos:line="38" pos:column="11"/></name><argument_list pos:line="38" pos:column="11">(<argument><expr><literal type="string" pos:line="38" pos:column="12">"Error writing file %s error: %d %s"<pos:position pos:line="38" pos:column="48"/></literal></expr></argument>,
           <argument><expr><name pos:line="39" pos:column="12">dumpfile<pos:position pos:line="39" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="22">error<pos:position pos:line="39" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="29">strerror<pos:position pos:line="39" pos:column="37"/></name><argument_list pos:line="39" pos:column="37">(<argument><expr><name pos:line="39" pos:column="38">error<pos:position pos:line="39" pos:column="43"/></name></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">logmsg<pos:position pos:line="40" pos:column="11"/></name><argument_list pos:line="40" pos:column="11">(<argument><expr><literal type="string" pos:line="40" pos:column="12">"Wrote only (%zu bytes) of (%zu bytes) request input to %s"<pos:position pos:line="40" pos:column="71"/></literal></expr></argument>,
           <argument><expr><name pos:line="41" pos:column="12">totalsize<pos:position pos:line="41" pos:column="21"/></name><operator pos:line="41" pos:column="21">-<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">writeleft<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="33">totalsize<pos:position pos:line="41" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="44">dumpfile<pos:position pos:line="41" pos:column="52"/></name></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if></elseif></if>

<label><name pos:line="44" pos:column="1">storerequest_cleanup<pos:position pos:line="44" pos:column="21"/></name>:<pos:position pos:line="44" pos:column="22"/></label>

  <do pos:line="46" pos:column="3">do <block pos:line="46" pos:column="6">{
    <expr_stmt><expr><name pos:line="47" pos:column="5">res<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">=<pos:position pos:line="47" pos:column="10"/></operator> <call><name pos:line="47" pos:column="11">fclose<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">dump<pos:position pos:line="47" pos:column="22"/></name></expr></argument>)<pos:position pos:line="47" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="48" pos:column="4"/></block> while<condition pos:line="48" pos:column="10">(<expr><name pos:line="48" pos:column="11">res<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">&amp;&amp;<pos:position pos:line="48" pos:column="25"/></operator> <operator pos:line="48" pos:column="18">(<pos:position pos:line="48" pos:column="19"/></operator><operator pos:line="48" pos:column="19">(<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">error<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">=<pos:position pos:line="48" pos:column="27"/></operator> <name pos:line="48" pos:column="28">errno<pos:position pos:line="48" pos:column="33"/></name><operator pos:line="48" pos:column="33">)<pos:position pos:line="48" pos:column="34"/></operator> <operator pos:line="48" pos:column="35">==<pos:position pos:line="48" pos:column="37"/></operator> <name pos:line="48" pos:column="38">EINTR<pos:position pos:line="48" pos:column="43"/></name><operator pos:line="48" pos:column="43">)<pos:position pos:line="48" pos:column="44"/></operator></expr>)<pos:position pos:line="48" pos:column="45"/></condition>;<pos:position pos:line="48" pos:column="46"/></do>
  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><name pos:line="49" pos:column="6">res<pos:position pos:line="49" pos:column="9"/></name></expr>)<pos:position pos:line="49" pos:column="10"/></condition><then pos:line="49" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="5">logmsg<pos:position pos:line="50" pos:column="11"/></name><argument_list pos:line="50" pos:column="11">(<argument><expr><literal type="string" pos:line="50" pos:column="12">"Error closing file %s error: %d %s"<pos:position pos:line="50" pos:column="48"/></literal></expr></argument>,
           <argument><expr><name pos:line="51" pos:column="12">dumpfile<pos:position pos:line="51" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="22">error<pos:position pos:line="51" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="29">strerror<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><name pos:line="51" pos:column="38">error<pos:position pos:line="51" pos:column="43"/></name></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="46"/></expr_stmt></block></then></if>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
