<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_142_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type>
<name pos:line="2" pos:column="1">buffer_undef<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">localkey_t<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">key<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">long<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">size<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>

<block pos:line="4" pos:column="1">{
  <comment type="block" pos:line="5" pos:column="3">/* Define the buffer system, get the buffer for the given local key in
     the current thread, and make sure it is at least `size'-byte long.
     Set `size' to &lt; 0 to get its address only. */</comment>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">pthread_mutex_lock<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><operator pos:line="9" pos:column="22">&amp;<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="23">mutex<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Determine if we can use pthread-specific data. */</comment>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">Curl_thread_buffer<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">==<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">buffer_undef<pos:position pos:line="13" pos:column="41"/></name></expr>)<pos:position pos:line="13" pos:column="42"/></condition><then pos:line="13" pos:column="42"> <block pos:line="13" pos:column="43">{     <comment type="block" pos:line="13" pos:column="49">/* If unchanged during lock. */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><call><name pos:line="14" pos:column="10">pthread_key_create<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="30">thdkey<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">thdbufdestroy<pos:position pos:line="14" pos:column="51"/></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="53"/></condition><then pos:line="14" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="7">Curl_thread_buffer<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">buffer_threaded<pos:position pos:line="15" pos:column="43"/></name></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt></block></then>
    <elseif pos:line="16" pos:column="5">else <if pos:line="16" pos:column="10">if <condition pos:line="16" pos:column="13">(<expr><operator pos:line="16" pos:column="14">!<pos:position pos:line="16" pos:column="15"/></operator><operator pos:line="16" pos:column="15">(<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">locbufs<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <operator pos:line="16" pos:column="26">(<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">buffer_t<pos:position pos:line="16" pos:column="35"/></name> <operator pos:line="16" pos:column="36">*<pos:position pos:line="16" pos:column="37"/></operator><operator pos:line="16" pos:column="37">)<pos:position pos:line="16" pos:column="38"/></operator> <call><name pos:line="16" pos:column="39">calloc<pos:position pos:line="16" pos:column="45"/></name><argument_list pos:line="16" pos:column="45">(<argument><expr><operator pos:line="16" pos:column="46">(<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="47">size_t<pos:position pos:line="16" pos:column="53"/></name><operator pos:line="16" pos:column="53">)<pos:position pos:line="16" pos:column="54"/></operator> <name pos:line="16" pos:column="55">LK_LAST<pos:position pos:line="16" pos:column="62"/></name></expr></argument>,
                                             <argument><expr><sizeof pos:line="17" pos:column="46">sizeof <name><pos:position pos:line="17" pos:column="53"/></name></sizeof>*<name pos:line="17" pos:column="54">locbufs<pos:position pos:line="17" pos:column="61"/></name></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call><operator pos:line="17" pos:column="62">)<pos:position pos:line="17" pos:column="63"/></operator></expr>)<pos:position pos:line="17" pos:column="64"/></condition><then pos:line="17" pos:column="64"> <block pos:line="17" pos:column="65">{
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">pthread_mutex_unlock<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><operator pos:line="18" pos:column="28">&amp;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="29">mutex<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
      <return pos:line="19" pos:column="7">return <expr><operator pos:line="19" pos:column="14">(<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">char<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">*<pos:position pos:line="19" pos:column="21"/></operator><operator pos:line="19" pos:column="21">)<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">NULL<pos:position pos:line="19" pos:column="27"/></name></expr>;<pos:position pos:line="19" pos:column="28"/></return>
      }<pos:position pos:line="20" pos:column="8"/></block></then></if></elseif>
    <else pos:line="21" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="9">Curl_thread_buffer<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">=<pos:position pos:line="22" pos:column="29"/></operator> <name pos:line="22" pos:column="30">buffer_unthreaded<pos:position pos:line="22" pos:column="47"/></name></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">atexit<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">terminate<pos:position pos:line="24" pos:column="21"/></name></expr></argument>)<pos:position pos:line="24" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="27" pos:column="3">pthread_mutex_unlock<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><operator pos:line="27" pos:column="24">&amp;<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="25">mutex<pos:position pos:line="27" pos:column="30"/></name></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
  <return pos:line="28" pos:column="3">return <expr><call><name pos:line="28" pos:column="10">Curl_thread_buffer<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">key<pos:position pos:line="28" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="34">size<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="40"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
