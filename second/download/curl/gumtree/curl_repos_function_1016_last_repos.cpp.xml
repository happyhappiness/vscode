<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1016_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">Curl_connalive<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name><name pos:line="1" pos:column="21">struct<pos:position pos:line="1" pos:column="27"/></name> <name pos:line="1" pos:column="28">connectdata<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">conn<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* First determine if ssl */</comment>
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">(<expr><name><name pos:line="4" pos:column="6">conn<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">-&gt;<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="12">ssl<pos:position pos:line="4" pos:column="15"/></name><index pos:line="4" pos:column="15">[<expr><name pos:line="4" pos:column="16">FIRSTSOCKET<pos:position pos:line="4" pos:column="27"/></name></expr>]<pos:position pos:line="4" pos:column="28"/></index></name><operator pos:line="4" pos:column="28">.<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="29">use<pos:position pos:line="4" pos:column="32"/></name></expr>)<pos:position pos:line="4" pos:column="33"/></condition><then pos:line="4" pos:column="33"> <block pos:line="4" pos:column="34">{
    <comment type="block" pos:line="5" pos:column="5">/* use the SSL context */</comment>
    <if pos:line="6" pos:column="5">if<condition pos:line="6" pos:column="7">(<expr><operator pos:line="6" pos:column="8">!<pos:position pos:line="6" pos:column="9"/></operator><call><name pos:line="6" pos:column="9">Curl_ssl_check_cxn<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="34"/></condition><then pos:line="6" pos:column="34">
      <block type="pseudo"><return pos:line="7" pos:column="7">return <expr><literal type="boolean" pos:line="7" pos:column="14">false<pos:position pos:line="7" pos:column="19"/></literal></expr>;<pos:position pos:line="7" pos:column="20"/></return></block></then></if>   <comment type="block" pos:line="7" pos:column="23">/* FIN received */</comment>
  }<pos:position pos:line="8" pos:column="4"/></block></then>
<comment type="block" pos:line="9" pos:column="1">/* Minix 3.1 doesn't support any flags on recv; just assume socket is OK */</comment>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">MSG_PEEK<pos:position pos:line="10" pos:column="16"/></name></cpp:ifdef>
  <elseif pos:line="11" pos:column="3">else <if pos:line="11" pos:column="8">if<condition pos:line="11" pos:column="10">(<expr><name><name pos:line="11" pos:column="11">conn<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">sock<pos:position pos:line="11" pos:column="21"/></name><index pos:line="11" pos:column="21">[<expr><name pos:line="11" pos:column="22">FIRSTSOCKET<pos:position pos:line="11" pos:column="33"/></name></expr>]<pos:position pos:line="11" pos:column="34"/></index></name> <operator pos:line="11" pos:column="35">==<pos:position pos:line="11" pos:column="37"/></operator> <name pos:line="11" pos:column="38">CURL_SOCKET_BAD<pos:position pos:line="11" pos:column="53"/></name></expr>)<pos:position pos:line="11" pos:column="54"/></condition><then pos:line="11" pos:column="54">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><literal type="boolean" pos:line="12" pos:column="12">false<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return></block></then></if></elseif>
  <else pos:line="13" pos:column="3">else <block pos:line="13" pos:column="8">{
    <comment type="block" pos:line="14" pos:column="5">/* use the socket */</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">char<pos:position pos:line="15" pos:column="9"/></name></type> <name pos:line="15" pos:column="10">buf<pos:position pos:line="15" pos:column="13"/></name></decl>;<pos:position pos:line="15" pos:column="14"/></decl_stmt>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><call><name pos:line="16" pos:column="8">recv<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">RECV_TYPE_ARG1<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">)<pos:position pos:line="16" pos:column="29"/></operator><name><name pos:line="16" pos:column="29">conn<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">-&gt;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="35">sock<pos:position pos:line="16" pos:column="39"/></name><index pos:line="16" pos:column="39">[<expr><name pos:line="16" pos:column="40">FIRSTSOCKET<pos:position pos:line="16" pos:column="51"/></name></expr>]<pos:position pos:line="16" pos:column="52"/></index></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="54">(<pos:position pos:line="16" pos:column="55"/></operator><name pos:line="16" pos:column="55">RECV_TYPE_ARG2<pos:position pos:line="16" pos:column="69"/></name><operator pos:line="16" pos:column="69">)<pos:position pos:line="16" pos:column="70"/></operator><operator pos:line="16" pos:column="70">&amp;<pos:position pos:line="16" pos:column="75"/></operator><name pos:line="16" pos:column="71">buf<pos:position pos:line="16" pos:column="74"/></name></expr></argument>,
            <argument><expr><operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">RECV_TYPE_ARG3<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">)<pos:position pos:line="17" pos:column="29"/></operator><literal type="number" pos:line="17" pos:column="29">1<pos:position pos:line="17" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="32">(<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">RECV_TYPE_ARG4<pos:position pos:line="17" pos:column="47"/></name><operator pos:line="17" pos:column="47">)<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="48">MSG_PEEK<pos:position pos:line="17" pos:column="56"/></name></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></call> <operator pos:line="17" pos:column="58">==<pos:position pos:line="17" pos:column="60"/></operator> <literal type="number" pos:line="17" pos:column="61">0<pos:position pos:line="17" pos:column="62"/></literal></expr>)<pos:position pos:line="17" pos:column="63"/></condition><then pos:line="17" pos:column="63"> <block pos:line="17" pos:column="64">{
      <return pos:line="18" pos:column="7">return <expr><literal type="boolean" pos:line="18" pos:column="14">false<pos:position pos:line="18" pos:column="19"/></literal></expr>;<pos:position pos:line="18" pos:column="20"/></return>   <comment type="block" pos:line="18" pos:column="23">/* FIN received */</comment>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
  }<pos:position pos:line="20" pos:column="4"/></block></else></if>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="22" pos:column="3">return <expr><literal type="boolean" pos:line="22" pos:column="10">true<pos:position pos:line="22" pos:column="14"/></literal></expr>;<pos:position pos:line="22" pos:column="15"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
