<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1335_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CHUNKcode<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">Curl_httpchunk_read<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">connectdata<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">conn<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">datap<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="3" pos:column="31">ssize_t<pos:position pos:line="3" pos:column="38"/></name></type> <name pos:line="3" pos:column="39">datalen<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="4" pos:column="31">ssize_t<pos:position pos:line="4" pos:column="38"/></name> <modifier pos:line="4" pos:column="39">*<pos:position pos:line="4" pos:column="40"/></modifier></type><name pos:line="4" pos:column="40">wrotep<pos:position pos:line="4" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="47"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">CURLE_OK<pos:position pos:line="6" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_easy<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">data<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name><name pos:line="7" pos:column="28">conn<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">data<pos:position pos:line="7" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Curl_chunker<pos:position pos:line="8" pos:column="22"/></name></name> <modifier pos:line="8" pos:column="23">*<pos:position pos:line="8" pos:column="24"/></modifier></type><name pos:line="8" pos:column="24">ch<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><operator pos:line="8" pos:column="29">&amp;<pos:position pos:line="8" pos:column="34"/></operator><name><name pos:line="8" pos:column="30">conn<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">chunk<pos:position pos:line="8" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">SingleRequest<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">k<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator><name><name pos:line="9" pos:column="30">data<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">-&gt;<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="36">req<pos:position pos:line="9" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">piece<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">curl_off_t<pos:position pos:line="11" pos:column="13"/></name></type> <name pos:line="11" pos:column="14">length<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><operator pos:line="11" pos:column="23">(<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">curl_off_t<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">)<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">datalen<pos:position pos:line="11" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">size_t<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type><name pos:line="12" pos:column="11">wrote<pos:position pos:line="12" pos:column="16"/></name> <init pos:line="12" pos:column="17">= <expr><operator pos:line="12" pos:column="19">(<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">size_t<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">*<pos:position pos:line="12" pos:column="28"/></operator><operator pos:line="12" pos:column="28">)<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="29">wrotep<pos:position pos:line="12" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="36"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="14" pos:column="3">*<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">wrote<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>;<pos:position pos:line="14" pos:column="14"/></expr_stmt> <comment type="block" pos:line="14" pos:column="15">/* nothing's written yet */</comment>

  <comment type="block" pos:line="16" pos:column="3">/* the original data is written to the client, but we go on with the
     chunk read process, to properly calculate the content length*/</comment>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name><name pos:line="18" pos:column="6">data<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">-&gt;<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="12">set<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">.<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">http_te_skip<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">&amp;&amp;<pos:position pos:line="18" pos:column="39"/></operator> <operator pos:line="18" pos:column="32">!<pos:position pos:line="18" pos:column="33"/></operator><name><name pos:line="18" pos:column="33">k<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">-&gt;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="36">ignorebody<pos:position pos:line="18" pos:column="46"/></name></name></expr>)<pos:position pos:line="18" pos:column="47"/></condition><then pos:line="18" pos:column="47"> <block pos:line="18" pos:column="48">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">result<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">Curl_client_write<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">conn<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">CLIENTWRITE_BODY<pos:position pos:line="19" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="56">datap<pos:position pos:line="19" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="63">datalen<pos:position pos:line="19" pos:column="70"/></name></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">result<pos:position pos:line="20" pos:column="14"/></name></expr>)<pos:position pos:line="20" pos:column="15"/></condition><then pos:line="20" pos:column="15">
      <block type="pseudo"><return pos:line="21" pos:column="7">return <expr><name pos:line="21" pos:column="14">CHUNKE_WRITE_ERROR<pos:position pos:line="21" pos:column="32"/></name></expr>;<pos:position pos:line="21" pos:column="33"/></return></block></then></if>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <while pos:line="24" pos:column="3">while<condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">length<pos:position pos:line="24" pos:column="15"/></name></expr>)<pos:position pos:line="24" pos:column="16"/></condition> <block pos:line="24" pos:column="17">{
    <switch pos:line="25" pos:column="5">switch<condition pos:line="25" pos:column="11">(<expr><name><name pos:line="25" pos:column="12">ch<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">state<pos:position pos:line="25" pos:column="21"/></name></name></expr>)<pos:position pos:line="25" pos:column="22"/></condition> <block pos:line="25" pos:column="23">{
    <case pos:line="26" pos:column="5">case <expr><name pos:line="26" pos:column="10">CHUNK_HEX<pos:position pos:line="26" pos:column="19"/></name></expr>:<pos:position pos:line="26" pos:column="20"/></case>
      <if pos:line="27" pos:column="7">if<condition pos:line="27" pos:column="9">(<expr><call><name pos:line="27" pos:column="10">Curl_isxdigit<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><operator pos:line="27" pos:column="24">*<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">datap<pos:position pos:line="27" pos:column="30"/></name></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32"> <block pos:line="27" pos:column="33">{
        <if pos:line="28" pos:column="9">if<condition pos:line="28" pos:column="11">(<expr><name><name pos:line="28" pos:column="12">ch<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">-&gt;<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="16">hexindex<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">&lt;<pos:position pos:line="28" pos:column="29"/></operator> <name pos:line="28" pos:column="27">MAXNUM_SIZE<pos:position pos:line="28" pos:column="38"/></name></expr>)<pos:position pos:line="28" pos:column="39"/></condition><then pos:line="28" pos:column="39"> <block pos:line="28" pos:column="40">{
          <expr_stmt><expr><name><name pos:line="29" pos:column="11">ch<pos:position pos:line="29" pos:column="13"/></name><operator pos:line="29" pos:column="13">-&gt;<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="15">hexbuffer<pos:position pos:line="29" pos:column="24"/></name><index pos:line="29" pos:column="24">[<expr><name><name pos:line="29" pos:column="25">ch<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">-&gt;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="29">hexindex<pos:position pos:line="29" pos:column="37"/></name></name></expr>]<pos:position pos:line="29" pos:column="38"/></index></name> <operator pos:line="29" pos:column="39">=<pos:position pos:line="29" pos:column="40"/></operator> <operator pos:line="29" pos:column="41">*<pos:position pos:line="29" pos:column="42"/></operator><name pos:line="29" pos:column="42">datap<pos:position pos:line="29" pos:column="47"/></name></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>
          <expr_stmt><expr><name pos:line="30" pos:column="11">datap<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">++<pos:position pos:line="30" pos:column="18"/></operator></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>
          <expr_stmt><expr><name pos:line="31" pos:column="11">length<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">--<pos:position pos:line="31" pos:column="19"/></operator></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="32" pos:column="11">ch<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">hexindex<pos:position pos:line="32" pos:column="23"/></name></name><operator pos:line="32" pos:column="23">++<pos:position pos:line="32" pos:column="25"/></operator></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></then>
        <else pos:line="34" pos:column="9">else <block pos:line="34" pos:column="14">{
          <return pos:line="35" pos:column="11">return <expr><name pos:line="35" pos:column="18">CHUNKE_TOO_LONG_HEX<pos:position pos:line="35" pos:column="37"/></name></expr>;<pos:position pos:line="35" pos:column="38"/></return> <comment type="block" pos:line="35" pos:column="39">/* longer hex than we support */</comment>
        }<pos:position pos:line="36" pos:column="10"/></block></else></if>
      }<pos:position pos:line="37" pos:column="8"/></block></then>
      <else pos:line="38" pos:column="7">else <block pos:line="38" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="39" pos:column="9">char<pos:position pos:line="39" pos:column="13"/></name> <modifier pos:line="39" pos:column="14">*<pos:position pos:line="39" pos:column="15"/></modifier></type><name pos:line="39" pos:column="15">endptr<pos:position pos:line="39" pos:column="21"/></name></decl>;<pos:position pos:line="39" pos:column="22"/></decl_stmt>
        <if pos:line="40" pos:column="9">if<condition pos:line="40" pos:column="11">(<expr><literal type="number" pos:line="40" pos:column="12">0<pos:position pos:line="40" pos:column="13"/></literal> <operator pos:line="40" pos:column="14">==<pos:position pos:line="40" pos:column="16"/></operator> <name><name pos:line="40" pos:column="17">ch<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">-&gt;<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="21">hexindex<pos:position pos:line="40" pos:column="29"/></name></name></expr>)<pos:position pos:line="40" pos:column="30"/></condition><then pos:line="40" pos:column="30">
          <comment type="block" pos:line="41" pos:column="11">/* This is illegal data, we received junk where we expected
             a hexadecimal digit. */</comment>
          <block type="pseudo"><return pos:line="43" pos:column="11">return <expr><name pos:line="43" pos:column="18">CHUNKE_ILLEGAL_HEX<pos:position pos:line="43" pos:column="36"/></name></expr>;<pos:position pos:line="43" pos:column="37"/></return></block></then></if>

        <comment type="block" pos:line="45" pos:column="9">/* length and datap are unmodified */</comment>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">ch<pos:position pos:line="46" pos:column="11"/></name><operator pos:line="46" pos:column="11">-&gt;<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="13">hexbuffer<pos:position pos:line="46" pos:column="22"/></name><index pos:line="46" pos:column="22">[<expr><name><name pos:line="46" pos:column="23">ch<pos:position pos:line="46" pos:column="25"/></name><operator pos:line="46" pos:column="25">-&gt;<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="27">hexindex<pos:position pos:line="46" pos:column="35"/></name></name></expr>]<pos:position pos:line="46" pos:column="36"/></index></name> <operator pos:line="46" pos:column="37">=<pos:position pos:line="46" pos:column="38"/></operator> <literal type="number" pos:line="46" pos:column="39">0<pos:position pos:line="46" pos:column="40"/></literal></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt>

        <comment type="block" pos:line="48" pos:column="9">/* convert to host encoding before calling strtoul */</comment>
        <expr_stmt><expr><name pos:line="49" pos:column="9">result<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <call><name pos:line="49" pos:column="18">Curl_convert_from_network<pos:position pos:line="49" pos:column="43"/></name><argument_list pos:line="49" pos:column="43">(<argument><expr><name><name pos:line="49" pos:column="44">conn<pos:position pos:line="49" pos:column="48"/></name><operator pos:line="49" pos:column="48">-&gt;<pos:position pos:line="49" pos:column="53"/></operator><name pos:line="49" pos:column="50">data<pos:position pos:line="49" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="56">ch<pos:position pos:line="49" pos:column="58"/></name><operator pos:line="49" pos:column="58">-&gt;<pos:position pos:line="49" pos:column="63"/></operator><name pos:line="49" pos:column="60">hexbuffer<pos:position pos:line="49" pos:column="69"/></name></name></expr></argument>,
                                           <argument><expr><name><name pos:line="50" pos:column="44">ch<pos:position pos:line="50" pos:column="46"/></name><operator pos:line="50" pos:column="46">-&gt;<pos:position pos:line="50" pos:column="51"/></operator><name pos:line="50" pos:column="48">hexindex<pos:position pos:line="50" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt>
        <if pos:line="51" pos:column="9">if<condition pos:line="51" pos:column="11">(<expr><name pos:line="51" pos:column="12">result<pos:position pos:line="51" pos:column="18"/></name></expr>)<pos:position pos:line="51" pos:column="19"/></condition><then pos:line="51" pos:column="19"> <block pos:line="51" pos:column="20">{
          <comment type="block" pos:line="52" pos:column="11">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
          <comment type="block" pos:line="53" pos:column="11">/* Treat it as a bad hex character */</comment>
          <return pos:line="54" pos:column="11">return <expr><name pos:line="54" pos:column="18">CHUNKE_ILLEGAL_HEX<pos:position pos:line="54" pos:column="36"/></name></expr>;<pos:position pos:line="54" pos:column="37"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>

        <if pos:line="57" pos:column="9">if<condition pos:line="57" pos:column="11">(<expr><call><name pos:line="57" pos:column="12">curlx_strtoofft<pos:position pos:line="57" pos:column="27"/></name><argument_list pos:line="57" pos:column="27">(<argument><expr><name><name pos:line="57" pos:column="28">ch<pos:position pos:line="57" pos:column="30"/></name><operator pos:line="57" pos:column="30">-&gt;<pos:position pos:line="57" pos:column="35"/></operator><name pos:line="57" pos:column="32">hexbuffer<pos:position pos:line="57" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="43">&amp;<pos:position pos:line="57" pos:column="48"/></operator><name pos:line="57" pos:column="44">endptr<pos:position pos:line="57" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="52">16<pos:position pos:line="57" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="57" pos:column="56">&amp;<pos:position pos:line="57" pos:column="61"/></operator><name><name pos:line="57" pos:column="57">ch<pos:position pos:line="57" pos:column="59"/></name><operator pos:line="57" pos:column="59">-&gt;<pos:position pos:line="57" pos:column="64"/></operator><name pos:line="57" pos:column="61">datasize<pos:position pos:line="57" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="71"/></condition><then pos:line="57" pos:column="71">
          <block type="pseudo"><return pos:line="58" pos:column="11">return <expr><name pos:line="58" pos:column="18">CHUNKE_ILLEGAL_HEX<pos:position pos:line="58" pos:column="36"/></name></expr>;<pos:position pos:line="58" pos:column="37"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">ch<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">-&gt;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="13">state<pos:position pos:line="59" pos:column="18"/></name></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">CHUNK_LF<pos:position pos:line="59" pos:column="29"/></name></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt> <comment type="block" pos:line="59" pos:column="31">/* now wait for the CRLF */</comment>
      }<pos:position pos:line="60" pos:column="8"/></block></else></if>
      <break pos:line="61" pos:column="7">break;<pos:position pos:line="61" pos:column="13"/></break>

    <case pos:line="63" pos:column="5">case <expr><name pos:line="63" pos:column="10">CHUNK_LF<pos:position pos:line="63" pos:column="18"/></name></expr>:<pos:position pos:line="63" pos:column="19"/></case>
      <comment type="block" pos:line="64" pos:column="7">/* waiting for the LF after a chunk size */</comment>
      <if pos:line="65" pos:column="7">if<condition pos:line="65" pos:column="9">(<expr><operator pos:line="65" pos:column="10">*<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="11">datap<pos:position pos:line="65" pos:column="16"/></name> <operator pos:line="65" pos:column="17">==<pos:position pos:line="65" pos:column="19"/></operator> <literal type="number" pos:line="65" pos:column="20">0x0a<pos:position pos:line="65" pos:column="24"/></literal></expr>)<pos:position pos:line="65" pos:column="25"/></condition><then pos:line="65" pos:column="25"> <block pos:line="65" pos:column="26">{
        <comment type="block" pos:line="66" pos:column="9">/* we're now expecting data to come, unless size was zero! */</comment>
        <if pos:line="67" pos:column="9">if<condition pos:line="67" pos:column="11">(<expr><literal type="number" pos:line="67" pos:column="12">0<pos:position pos:line="67" pos:column="13"/></literal> <operator pos:line="67" pos:column="14">==<pos:position pos:line="67" pos:column="16"/></operator> <name><name pos:line="67" pos:column="17">ch<pos:position pos:line="67" pos:column="19"/></name><operator pos:line="67" pos:column="19">-&gt;<pos:position pos:line="67" pos:column="24"/></operator><name pos:line="67" pos:column="21">datasize<pos:position pos:line="67" pos:column="29"/></name></name></expr>)<pos:position pos:line="67" pos:column="30"/></condition><then pos:line="67" pos:column="30"> <block pos:line="67" pos:column="31">{
          <expr_stmt><expr><name><name pos:line="68" pos:column="11">ch<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">-&gt;<pos:position pos:line="68" pos:column="18"/></operator><name pos:line="68" pos:column="15">state<pos:position pos:line="68" pos:column="20"/></name></name> <operator pos:line="68" pos:column="21">=<pos:position pos:line="68" pos:column="22"/></operator> <name pos:line="68" pos:column="23">CHUNK_TRAILER<pos:position pos:line="68" pos:column="36"/></name></expr>;<pos:position pos:line="68" pos:column="37"/></expr_stmt> <comment type="block" pos:line="68" pos:column="38">/* now check for trailers */</comment>
          <expr_stmt><expr><name><name pos:line="69" pos:column="11">conn<pos:position pos:line="69" pos:column="15"/></name><operator pos:line="69" pos:column="15">-&gt;<pos:position pos:line="69" pos:column="20"/></operator><name pos:line="69" pos:column="17">trlPos<pos:position pos:line="69" pos:column="23"/></name></name> <operator pos:line="69" pos:column="24">=<pos:position pos:line="69" pos:column="25"/></operator> <literal type="number" pos:line="69" pos:column="26">0<pos:position pos:line="69" pos:column="27"/></literal></expr>;<pos:position pos:line="69" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="70" pos:column="10"/></block></then>
        <else pos:line="71" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="72" pos:column="11">ch<pos:position pos:line="72" pos:column="13"/></name><operator pos:line="72" pos:column="13">-&gt;<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="15">state<pos:position pos:line="72" pos:column="20"/></name></name> <operator pos:line="72" pos:column="21">=<pos:position pos:line="72" pos:column="22"/></operator> <name pos:line="72" pos:column="23">CHUNK_DATA<pos:position pos:line="72" pos:column="33"/></name></expr>;<pos:position pos:line="72" pos:column="34"/></expr_stmt></block></else></if>
      }<pos:position pos:line="73" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="75" pos:column="7">datap<pos:position pos:line="75" pos:column="12"/></name><operator pos:line="75" pos:column="12">++<pos:position pos:line="75" pos:column="14"/></operator></expr>;<pos:position pos:line="75" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="76" pos:column="7">length<pos:position pos:line="76" pos:column="13"/></name><operator pos:line="76" pos:column="13">--<pos:position pos:line="76" pos:column="15"/></operator></expr>;<pos:position pos:line="76" pos:column="16"/></expr_stmt>
      <break pos:line="77" pos:column="7">break;<pos:position pos:line="77" pos:column="13"/></break>

    <case pos:line="79" pos:column="5">case <expr><name pos:line="79" pos:column="10">CHUNK_DATA<pos:position pos:line="79" pos:column="20"/></name></expr>:<pos:position pos:line="79" pos:column="21"/></case>
      <comment type="block" pos:line="80" pos:column="7">/* We expect 'datasize' of data. We have 'length' right now, it can be
         more or less than 'datasize'. Get the smallest piece.
      */</comment>
      <expr_stmt><expr><name pos:line="83" pos:column="7">piece<pos:position pos:line="83" pos:column="12"/></name> <operator pos:line="83" pos:column="13">=<pos:position pos:line="83" pos:column="14"/></operator> <call><name pos:line="83" pos:column="15">curlx_sotouz<pos:position pos:line="83" pos:column="27"/></name><argument_list pos:line="83" pos:column="27">(<argument><expr><ternary><condition><expr><operator pos:line="83" pos:column="28">(<pos:position pos:line="83" pos:column="29"/></operator><name><name pos:line="83" pos:column="29">ch<pos:position pos:line="83" pos:column="31"/></name><operator pos:line="83" pos:column="31">-&gt;<pos:position pos:line="83" pos:column="36"/></operator><name pos:line="83" pos:column="33">datasize<pos:position pos:line="83" pos:column="41"/></name></name> <operator pos:line="83" pos:column="42">&gt;=<pos:position pos:line="83" pos:column="47"/></operator> <name pos:line="83" pos:column="45">length<pos:position pos:line="83" pos:column="51"/></name><operator pos:line="83" pos:column="51">)<pos:position pos:line="83" pos:column="52"/></operator></expr>?<pos:position pos:line="83" pos:column="53"/></condition><then><expr><name pos:line="83" pos:column="53">length<pos:position pos:line="83" pos:column="59"/></name></expr></then><else pos:line="83" pos:column="59">:<expr><name><name pos:line="83" pos:column="60">ch<pos:position pos:line="83" pos:column="62"/></name><operator pos:line="83" pos:column="62">-&gt;<pos:position pos:line="83" pos:column="67"/></operator><name pos:line="83" pos:column="64">datasize<pos:position pos:line="83" pos:column="72"/></name></name></expr></else></ternary></expr></argument>)<pos:position pos:line="83" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="74"/></expr_stmt>

      <comment type="block" pos:line="85" pos:column="7">/* Write the data portion available */</comment>
<cpp:ifdef pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">ifdef<pos:position pos:line="86" pos:column="7"/></cpp:directive> <name pos:line="86" pos:column="8">HAVE_LIBZ<pos:position pos:line="86" pos:column="17"/></name></cpp:ifdef>
      <switch pos:line="87" pos:column="7">switch<condition pos:line="87" pos:column="13">(<expr><ternary><condition><expr><name><name pos:line="87" pos:column="14">conn<pos:position pos:line="87" pos:column="18"/></name><operator pos:line="87" pos:column="18">-&gt;<pos:position pos:line="87" pos:column="23"/></operator><name pos:line="87" pos:column="20">data<pos:position pos:line="87" pos:column="24"/></name><operator pos:line="87" pos:column="24">-&gt;<pos:position pos:line="87" pos:column="29"/></operator><name pos:line="87" pos:column="26">set<pos:position pos:line="87" pos:column="29"/></name><operator pos:line="87" pos:column="29">.<pos:position pos:line="87" pos:column="30"/></operator><name pos:line="87" pos:column="30">http_ce_skip<pos:position pos:line="87" pos:column="42"/></name></name></expr>?<pos:position pos:line="87" pos:column="43"/></condition><then pos:line="87" pos:column="43">
             <expr><name pos:line="88" pos:column="14">IDENTITY<pos:position pos:line="88" pos:column="22"/></name></expr> <pos:position pos:line="88" pos:column="23"/></then><else pos:line="88" pos:column="23">: <expr><name><name pos:line="88" pos:column="25">data<pos:position pos:line="88" pos:column="29"/></name><operator pos:line="88" pos:column="29">-&gt;<pos:position pos:line="88" pos:column="34"/></operator><name pos:line="88" pos:column="31">req<pos:position pos:line="88" pos:column="34"/></name><operator pos:line="88" pos:column="34">.<pos:position pos:line="88" pos:column="35"/></operator><name pos:line="88" pos:column="35">auto_decoding<pos:position pos:line="88" pos:column="48"/></name></name></expr></else></ternary></expr>)<pos:position pos:line="88" pos:column="49"/></condition> <block pos:line="88" pos:column="50">{
      <case pos:line="89" pos:column="7">case <expr><name pos:line="89" pos:column="12">IDENTITY<pos:position pos:line="89" pos:column="20"/></name></expr>:<pos:position pos:line="89" pos:column="21"/></case>
<cpp:endif pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">endif<pos:position pos:line="90" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="91" pos:column="9">if<condition pos:line="91" pos:column="11">(<expr><operator pos:line="91" pos:column="12">!<pos:position pos:line="91" pos:column="13"/></operator><name><name pos:line="91" pos:column="13">k<pos:position pos:line="91" pos:column="14"/></name><operator pos:line="91" pos:column="14">-&gt;<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="16">ignorebody<pos:position pos:line="91" pos:column="26"/></name></name></expr>)<pos:position pos:line="91" pos:column="27"/></condition><then pos:line="91" pos:column="27"> <block pos:line="91" pos:column="28">{
          <if pos:line="92" pos:column="11">if<condition pos:line="92" pos:column="13">(<expr><operator pos:line="92" pos:column="14">!<pos:position pos:line="92" pos:column="15"/></operator><name><name pos:line="92" pos:column="15">data<pos:position pos:line="92" pos:column="19"/></name><operator pos:line="92" pos:column="19">-&gt;<pos:position pos:line="92" pos:column="24"/></operator><name pos:line="92" pos:column="21">set<pos:position pos:line="92" pos:column="24"/></name><operator pos:line="92" pos:column="24">.<pos:position pos:line="92" pos:column="25"/></operator><name pos:line="92" pos:column="25">http_te_skip<pos:position pos:line="92" pos:column="37"/></name></name></expr>)<pos:position pos:line="92" pos:column="38"/></condition><then pos:line="92" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><name pos:line="93" pos:column="13">result<pos:position pos:line="93" pos:column="19"/></name> <operator pos:line="93" pos:column="20">=<pos:position pos:line="93" pos:column="21"/></operator> <call><name pos:line="93" pos:column="22">Curl_client_write<pos:position pos:line="93" pos:column="39"/></name><argument_list pos:line="93" pos:column="39">(<argument><expr><name pos:line="93" pos:column="40">conn<pos:position pos:line="93" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="46">CLIENTWRITE_BODY<pos:position pos:line="93" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="64">datap<pos:position pos:line="93" pos:column="69"/></name></expr></argument>,
                                       <argument><expr><name pos:line="94" pos:column="40">piece<pos:position pos:line="94" pos:column="45"/></name></expr></argument>)<pos:position pos:line="94" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="47"/></expr_stmt></block></then>
          <else pos:line="95" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="13">result<pos:position pos:line="96" pos:column="19"/></name> <operator pos:line="96" pos:column="20">=<pos:position pos:line="96" pos:column="21"/></operator> <name pos:line="96" pos:column="22">CURLE_OK<pos:position pos:line="96" pos:column="30"/></name></expr>;<pos:position pos:line="96" pos:column="31"/></expr_stmt></block></else></if>
        }<pos:position pos:line="97" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">ifdef<pos:position pos:line="98" pos:column="7"/></cpp:directive> <name pos:line="98" pos:column="8">HAVE_LIBZ<pos:position pos:line="98" pos:column="17"/></name></cpp:ifdef>
        <break pos:line="99" pos:column="9">break;<pos:position pos:line="99" pos:column="15"/></break>

      <case pos:line="101" pos:column="7">case <expr><name pos:line="101" pos:column="12">DEFLATE<pos:position pos:line="101" pos:column="19"/></name></expr>:<pos:position pos:line="101" pos:column="20"/></case>
        <comment type="block" pos:line="102" pos:column="9">/* update data-&gt;req.keep.str to point to the chunk data. */</comment>
        <expr_stmt><expr><name><name pos:line="103" pos:column="9">data<pos:position pos:line="103" pos:column="13"/></name><operator pos:line="103" pos:column="13">-&gt;<pos:position pos:line="103" pos:column="18"/></operator><name pos:line="103" pos:column="15">req<pos:position pos:line="103" pos:column="18"/></name><operator pos:line="103" pos:column="18">.<pos:position pos:line="103" pos:column="19"/></operator><name pos:line="103" pos:column="19">str<pos:position pos:line="103" pos:column="22"/></name></name> <operator pos:line="103" pos:column="23">=<pos:position pos:line="103" pos:column="24"/></operator> <name pos:line="103" pos:column="25">datap<pos:position pos:line="103" pos:column="30"/></name></expr>;<pos:position pos:line="103" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="104" pos:column="9">result<pos:position pos:line="104" pos:column="15"/></name> <operator pos:line="104" pos:column="16">=<pos:position pos:line="104" pos:column="17"/></operator> <call><name pos:line="104" pos:column="18">Curl_unencode_deflate_write<pos:position pos:line="104" pos:column="45"/></name><argument_list pos:line="104" pos:column="45">(<argument><expr><name pos:line="104" pos:column="46">conn<pos:position pos:line="104" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="52">&amp;<pos:position pos:line="104" pos:column="57"/></operator><name><name pos:line="104" pos:column="53">data<pos:position pos:line="104" pos:column="57"/></name><operator pos:line="104" pos:column="57">-&gt;<pos:position pos:line="104" pos:column="62"/></operator><name pos:line="104" pos:column="59">req<pos:position pos:line="104" pos:column="62"/></name></name></expr></argument>,
                                             <argument><expr><operator pos:line="105" pos:column="46">(<pos:position pos:line="105" pos:column="47"/></operator><name pos:line="105" pos:column="47">ssize_t<pos:position pos:line="105" pos:column="54"/></name><operator pos:line="105" pos:column="54">)<pos:position pos:line="105" pos:column="55"/></operator><name pos:line="105" pos:column="55">piece<pos:position pos:line="105" pos:column="60"/></name></expr></argument>)<pos:position pos:line="105" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="62"/></expr_stmt>
        <break pos:line="106" pos:column="9">break;<pos:position pos:line="106" pos:column="15"/></break>

      <case pos:line="108" pos:column="7">case <expr><name pos:line="108" pos:column="12">GZIP<pos:position pos:line="108" pos:column="16"/></name></expr>:<pos:position pos:line="108" pos:column="17"/></case>
        <comment type="block" pos:line="109" pos:column="9">/* update data-&gt;req.keep.str to point to the chunk data. */</comment>
        <expr_stmt><expr><name><name pos:line="110" pos:column="9">data<pos:position pos:line="110" pos:column="13"/></name><operator pos:line="110" pos:column="13">-&gt;<pos:position pos:line="110" pos:column="18"/></operator><name pos:line="110" pos:column="15">req<pos:position pos:line="110" pos:column="18"/></name><operator pos:line="110" pos:column="18">.<pos:position pos:line="110" pos:column="19"/></operator><name pos:line="110" pos:column="19">str<pos:position pos:line="110" pos:column="22"/></name></name> <operator pos:line="110" pos:column="23">=<pos:position pos:line="110" pos:column="24"/></operator> <name pos:line="110" pos:column="25">datap<pos:position pos:line="110" pos:column="30"/></name></expr>;<pos:position pos:line="110" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="111" pos:column="9">result<pos:position pos:line="111" pos:column="15"/></name> <operator pos:line="111" pos:column="16">=<pos:position pos:line="111" pos:column="17"/></operator> <call><name pos:line="111" pos:column="18">Curl_unencode_gzip_write<pos:position pos:line="111" pos:column="42"/></name><argument_list pos:line="111" pos:column="42">(<argument><expr><name pos:line="111" pos:column="43">conn<pos:position pos:line="111" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="49">&amp;<pos:position pos:line="111" pos:column="54"/></operator><name><name pos:line="111" pos:column="50">data<pos:position pos:line="111" pos:column="54"/></name><operator pos:line="111" pos:column="54">-&gt;<pos:position pos:line="111" pos:column="59"/></operator><name pos:line="111" pos:column="56">req<pos:position pos:line="111" pos:column="59"/></name></name></expr></argument>,
                                          <argument><expr><operator pos:line="112" pos:column="43">(<pos:position pos:line="112" pos:column="44"/></operator><name pos:line="112" pos:column="44">ssize_t<pos:position pos:line="112" pos:column="51"/></name><operator pos:line="112" pos:column="51">)<pos:position pos:line="112" pos:column="52"/></operator><name pos:line="112" pos:column="52">piece<pos:position pos:line="112" pos:column="57"/></name></expr></argument>)<pos:position pos:line="112" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="59"/></expr_stmt>
        <break pos:line="113" pos:column="9">break;<pos:position pos:line="113" pos:column="15"/></break>

      <default pos:line="115" pos:column="7">default:<pos:position pos:line="115" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="116" pos:column="9">failf<pos:position pos:line="116" pos:column="14"/></name><argument_list pos:line="116" pos:column="14">(<argument><expr><name><name pos:line="116" pos:column="15">conn<pos:position pos:line="116" pos:column="19"/></name><operator pos:line="116" pos:column="19">-&gt;<pos:position pos:line="116" pos:column="24"/></operator><name pos:line="116" pos:column="21">data<pos:position pos:line="116" pos:column="25"/></name></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="117" pos:column="15">"Unrecognized content encoding type. "<pos:position pos:line="117" pos:column="53"/></literal>
              <literal type="string" pos:line="118" pos:column="15">"libcurl understands `identity', `deflate' and `gzip' "<pos:position pos:line="118" pos:column="70"/></literal>
              <literal type="string" pos:line="119" pos:column="15">"content encodings."<pos:position pos:line="119" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="37"/></expr_stmt>
        <return pos:line="120" pos:column="9">return <expr><name pos:line="120" pos:column="16">CHUNKE_BAD_ENCODING<pos:position pos:line="120" pos:column="35"/></name></expr>;<pos:position pos:line="120" pos:column="36"/></return>
      }<pos:position pos:line="121" pos:column="8"/></block></switch>
<cpp:endif pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">endif<pos:position pos:line="122" pos:column="7"/></cpp:directive></cpp:endif>

      <if pos:line="124" pos:column="7">if<condition pos:line="124" pos:column="9">(<expr><name pos:line="124" pos:column="10">result<pos:position pos:line="124" pos:column="16"/></name></expr>)<pos:position pos:line="124" pos:column="17"/></condition><then pos:line="124" pos:column="17">
        <block type="pseudo"><return pos:line="125" pos:column="9">return <expr><name pos:line="125" pos:column="16">CHUNKE_WRITE_ERROR<pos:position pos:line="125" pos:column="34"/></name></expr>;<pos:position pos:line="125" pos:column="35"/></return></block></then></if>

      <expr_stmt><expr><operator pos:line="127" pos:column="7">*<pos:position pos:line="127" pos:column="8"/></operator><name pos:line="127" pos:column="8">wrote<pos:position pos:line="127" pos:column="13"/></name> <operator pos:line="127" pos:column="14">+=<pos:position pos:line="127" pos:column="16"/></operator> <name pos:line="127" pos:column="17">piece<pos:position pos:line="127" pos:column="22"/></name></expr>;<pos:position pos:line="127" pos:column="23"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="129" pos:column="7">ch<pos:position pos:line="129" pos:column="9"/></name><operator pos:line="129" pos:column="9">-&gt;<pos:position pos:line="129" pos:column="14"/></operator><name pos:line="129" pos:column="11">datasize<pos:position pos:line="129" pos:column="19"/></name></name> <operator pos:line="129" pos:column="20">-=<pos:position pos:line="129" pos:column="22"/></operator> <name pos:line="129" pos:column="23">piece<pos:position pos:line="129" pos:column="28"/></name></expr>;<pos:position pos:line="129" pos:column="29"/></expr_stmt> <comment type="block" pos:line="129" pos:column="30">/* decrease amount left to expect */</comment>
      <expr_stmt><expr><name pos:line="130" pos:column="7">datap<pos:position pos:line="130" pos:column="12"/></name> <operator pos:line="130" pos:column="13">+=<pos:position pos:line="130" pos:column="15"/></operator> <name pos:line="130" pos:column="16">piece<pos:position pos:line="130" pos:column="21"/></name></expr>;<pos:position pos:line="130" pos:column="22"/></expr_stmt>    <comment type="block" pos:line="130" pos:column="26">/* move read pointer forward */</comment>
      <expr_stmt><expr><name pos:line="131" pos:column="7">length<pos:position pos:line="131" pos:column="13"/></name> <operator pos:line="131" pos:column="14">-=<pos:position pos:line="131" pos:column="16"/></operator> <name pos:line="131" pos:column="17">piece<pos:position pos:line="131" pos:column="22"/></name></expr>;<pos:position pos:line="131" pos:column="23"/></expr_stmt>   <comment type="block" pos:line="131" pos:column="26">/* decrease space left in this round */</comment>

      <if pos:line="133" pos:column="7">if<condition pos:line="133" pos:column="9">(<expr><literal type="number" pos:line="133" pos:column="10">0<pos:position pos:line="133" pos:column="11"/></literal> <operator pos:line="133" pos:column="12">==<pos:position pos:line="133" pos:column="14"/></operator> <name><name pos:line="133" pos:column="15">ch<pos:position pos:line="133" pos:column="17"/></name><operator pos:line="133" pos:column="17">-&gt;<pos:position pos:line="133" pos:column="22"/></operator><name pos:line="133" pos:column="19">datasize<pos:position pos:line="133" pos:column="27"/></name></name></expr>)<pos:position pos:line="133" pos:column="28"/></condition><then pos:line="133" pos:column="28">
        <comment type="block" pos:line="134" pos:column="9">/* end of data this round, we now expect a trailing CRLF */</comment>
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="135" pos:column="9">ch<pos:position pos:line="135" pos:column="11"/></name><operator pos:line="135" pos:column="11">-&gt;<pos:position pos:line="135" pos:column="16"/></operator><name pos:line="135" pos:column="13">state<pos:position pos:line="135" pos:column="18"/></name></name> <operator pos:line="135" pos:column="19">=<pos:position pos:line="135" pos:column="20"/></operator> <name pos:line="135" pos:column="21">CHUNK_POSTLF<pos:position pos:line="135" pos:column="33"/></name></expr>;<pos:position pos:line="135" pos:column="34"/></expr_stmt></block></then></if>
      <break pos:line="136" pos:column="7">break;<pos:position pos:line="136" pos:column="13"/></break>

    <case pos:line="138" pos:column="5">case <expr><name pos:line="138" pos:column="10">CHUNK_POSTLF<pos:position pos:line="138" pos:column="22"/></name></expr>:<pos:position pos:line="138" pos:column="23"/></case>
      <if pos:line="139" pos:column="7">if<condition pos:line="139" pos:column="9">(<expr><operator pos:line="139" pos:column="10">*<pos:position pos:line="139" pos:column="11"/></operator><name pos:line="139" pos:column="11">datap<pos:position pos:line="139" pos:column="16"/></name> <operator pos:line="139" pos:column="17">==<pos:position pos:line="139" pos:column="19"/></operator> <literal type="number" pos:line="139" pos:column="20">0x0a<pos:position pos:line="139" pos:column="24"/></literal></expr>)<pos:position pos:line="139" pos:column="25"/></condition><then pos:line="139" pos:column="25"> <block pos:line="139" pos:column="26">{
        <comment type="block" pos:line="140" pos:column="9">/* The last one before we go back to hex state and start all over. */</comment>
        <expr_stmt><expr><call><name pos:line="141" pos:column="9">Curl_httpchunk_init<pos:position pos:line="141" pos:column="28"/></name><argument_list pos:line="141" pos:column="28">(<argument><expr><name pos:line="141" pos:column="29">conn<pos:position pos:line="141" pos:column="33"/></name></expr></argument>)<pos:position pos:line="141" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="35"/></expr_stmt> <comment type="block" pos:line="141" pos:column="36">/* sets state back to CHUNK_HEX */</comment>
      }<pos:position pos:line="142" pos:column="8"/></block></then>
      <elseif pos:line="143" pos:column="7">else <if pos:line="143" pos:column="12">if<condition pos:line="143" pos:column="14">(<expr><operator pos:line="143" pos:column="15">*<pos:position pos:line="143" pos:column="16"/></operator><name pos:line="143" pos:column="16">datap<pos:position pos:line="143" pos:column="21"/></name> <operator pos:line="143" pos:column="22">!=<pos:position pos:line="143" pos:column="24"/></operator> <literal type="number" pos:line="143" pos:column="25">0x0d<pos:position pos:line="143" pos:column="29"/></literal></expr>)<pos:position pos:line="143" pos:column="30"/></condition><then pos:line="143" pos:column="30">
        <block type="pseudo"><return pos:line="144" pos:column="9">return <expr><name pos:line="144" pos:column="16">CHUNKE_BAD_CHUNK<pos:position pos:line="144" pos:column="32"/></name></expr>;<pos:position pos:line="144" pos:column="33"/></return></block></then></if></elseif></if>
      <expr_stmt><expr><name pos:line="145" pos:column="7">datap<pos:position pos:line="145" pos:column="12"/></name><operator pos:line="145" pos:column="12">++<pos:position pos:line="145" pos:column="14"/></operator></expr>;<pos:position pos:line="145" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="146" pos:column="7">length<pos:position pos:line="146" pos:column="13"/></name><operator pos:line="146" pos:column="13">--<pos:position pos:line="146" pos:column="15"/></operator></expr>;<pos:position pos:line="146" pos:column="16"/></expr_stmt>
      <break pos:line="147" pos:column="7">break;<pos:position pos:line="147" pos:column="13"/></break>

    <case pos:line="149" pos:column="5">case <expr><name pos:line="149" pos:column="10">CHUNK_TRAILER<pos:position pos:line="149" pos:column="23"/></name></expr>:<pos:position pos:line="149" pos:column="24"/></case>
      <if pos:line="150" pos:column="7">if<condition pos:line="150" pos:column="9">(<expr><operator pos:line="150" pos:column="10">(<pos:position pos:line="150" pos:column="11"/></operator><operator pos:line="150" pos:column="11">*<pos:position pos:line="150" pos:column="12"/></operator><name pos:line="150" pos:column="12">datap<pos:position pos:line="150" pos:column="17"/></name> <operator pos:line="150" pos:column="18">==<pos:position pos:line="150" pos:column="20"/></operator> <literal type="number" pos:line="150" pos:column="21">0x0d<pos:position pos:line="150" pos:column="25"/></literal><operator pos:line="150" pos:column="25">)<pos:position pos:line="150" pos:column="26"/></operator> <operator pos:line="150" pos:column="27">||<pos:position pos:line="150" pos:column="29"/></operator> <operator pos:line="150" pos:column="30">(<pos:position pos:line="150" pos:column="31"/></operator><operator pos:line="150" pos:column="31">*<pos:position pos:line="150" pos:column="32"/></operator><name pos:line="150" pos:column="32">datap<pos:position pos:line="150" pos:column="37"/></name> <operator pos:line="150" pos:column="38">==<pos:position pos:line="150" pos:column="40"/></operator> <literal type="number" pos:line="150" pos:column="41">0x0a<pos:position pos:line="150" pos:column="45"/></literal><operator pos:line="150" pos:column="45">)<pos:position pos:line="150" pos:column="46"/></operator></expr>)<pos:position pos:line="150" pos:column="47"/></condition><then pos:line="150" pos:column="47"> <block pos:line="150" pos:column="48">{
        <comment type="block" pos:line="151" pos:column="9">/* this is the end of a trailer, but if the trailer was zero bytes
           there was no trailer and we move on */</comment>

        <if pos:line="154" pos:column="9">if<condition pos:line="154" pos:column="11">(<expr><name><name pos:line="154" pos:column="12">conn<pos:position pos:line="154" pos:column="16"/></name><operator pos:line="154" pos:column="16">-&gt;<pos:position pos:line="154" pos:column="21"/></operator><name pos:line="154" pos:column="18">trlPos<pos:position pos:line="154" pos:column="24"/></name></name></expr>)<pos:position pos:line="154" pos:column="25"/></condition><then pos:line="154" pos:column="25"> <block pos:line="154" pos:column="26">{
          <comment type="block" pos:line="155" pos:column="11">/* we allocate trailer with 3 bytes extra room to fit this */</comment>
          <expr_stmt><expr><name><name pos:line="156" pos:column="11">conn<pos:position pos:line="156" pos:column="15"/></name><operator pos:line="156" pos:column="15">-&gt;<pos:position pos:line="156" pos:column="20"/></operator><name pos:line="156" pos:column="17">trailer<pos:position pos:line="156" pos:column="24"/></name><index pos:line="156" pos:column="24">[<expr><name><name pos:line="156" pos:column="25">conn<pos:position pos:line="156" pos:column="29"/></name><operator pos:line="156" pos:column="29">-&gt;<pos:position pos:line="156" pos:column="34"/></operator><name pos:line="156" pos:column="31">trlPos<pos:position pos:line="156" pos:column="37"/></name></name><operator pos:line="156" pos:column="37">++<pos:position pos:line="156" pos:column="39"/></operator></expr>]<pos:position pos:line="156" pos:column="40"/></index></name> <operator pos:line="156" pos:column="41">=<pos:position pos:line="156" pos:column="42"/></operator> <literal type="number" pos:line="156" pos:column="43">0x0d<pos:position pos:line="156" pos:column="47"/></literal></expr>;<pos:position pos:line="156" pos:column="48"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="157" pos:column="11">conn<pos:position pos:line="157" pos:column="15"/></name><operator pos:line="157" pos:column="15">-&gt;<pos:position pos:line="157" pos:column="20"/></operator><name pos:line="157" pos:column="17">trailer<pos:position pos:line="157" pos:column="24"/></name><index pos:line="157" pos:column="24">[<expr><name><name pos:line="157" pos:column="25">conn<pos:position pos:line="157" pos:column="29"/></name><operator pos:line="157" pos:column="29">-&gt;<pos:position pos:line="157" pos:column="34"/></operator><name pos:line="157" pos:column="31">trlPos<pos:position pos:line="157" pos:column="37"/></name></name><operator pos:line="157" pos:column="37">++<pos:position pos:line="157" pos:column="39"/></operator></expr>]<pos:position pos:line="157" pos:column="40"/></index></name> <operator pos:line="157" pos:column="41">=<pos:position pos:line="157" pos:column="42"/></operator> <literal type="number" pos:line="157" pos:column="43">0x0a<pos:position pos:line="157" pos:column="47"/></literal></expr>;<pos:position pos:line="157" pos:column="48"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="158" pos:column="11">conn<pos:position pos:line="158" pos:column="15"/></name><operator pos:line="158" pos:column="15">-&gt;<pos:position pos:line="158" pos:column="20"/></operator><name pos:line="158" pos:column="17">trailer<pos:position pos:line="158" pos:column="24"/></name><index pos:line="158" pos:column="24">[<expr><name><name pos:line="158" pos:column="25">conn<pos:position pos:line="158" pos:column="29"/></name><operator pos:line="158" pos:column="29">-&gt;<pos:position pos:line="158" pos:column="34"/></operator><name pos:line="158" pos:column="31">trlPos<pos:position pos:line="158" pos:column="37"/></name></name></expr>]<pos:position pos:line="158" pos:column="38"/></index></name> <operator pos:line="158" pos:column="39">=<pos:position pos:line="158" pos:column="40"/></operator> <literal type="number" pos:line="158" pos:column="41">0<pos:position pos:line="158" pos:column="42"/></literal></expr>;<pos:position pos:line="158" pos:column="43"/></expr_stmt>

          <comment type="block" pos:line="160" pos:column="11">/* Convert to host encoding before calling Curl_client_write */</comment>
          <expr_stmt><expr><name pos:line="161" pos:column="11">result<pos:position pos:line="161" pos:column="17"/></name> <operator pos:line="161" pos:column="18">=<pos:position pos:line="161" pos:column="19"/></operator> <call><name pos:line="161" pos:column="20">Curl_convert_from_network<pos:position pos:line="161" pos:column="45"/></name><argument_list pos:line="161" pos:column="45">(<argument><expr><name><name pos:line="161" pos:column="46">conn<pos:position pos:line="161" pos:column="50"/></name><operator pos:line="161" pos:column="50">-&gt;<pos:position pos:line="161" pos:column="55"/></operator><name pos:line="161" pos:column="52">data<pos:position pos:line="161" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="58">conn<pos:position pos:line="161" pos:column="62"/></name><operator pos:line="161" pos:column="62">-&gt;<pos:position pos:line="161" pos:column="67"/></operator><name pos:line="161" pos:column="64">trailer<pos:position pos:line="161" pos:column="71"/></name></name></expr></argument>,
                                             <argument><expr><name><name pos:line="162" pos:column="46">conn<pos:position pos:line="162" pos:column="50"/></name><operator pos:line="162" pos:column="50">-&gt;<pos:position pos:line="162" pos:column="55"/></operator><name pos:line="162" pos:column="52">trlPos<pos:position pos:line="162" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="162" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="60"/></expr_stmt>
          <if pos:line="163" pos:column="11">if<condition pos:line="163" pos:column="13">(<expr><name pos:line="163" pos:column="14">result<pos:position pos:line="163" pos:column="20"/></name></expr>)<pos:position pos:line="163" pos:column="21"/></condition><then pos:line="163" pos:column="21">
            <comment type="block" pos:line="164" pos:column="13">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
            <comment type="block" pos:line="165" pos:column="13">/* Treat it as a bad chunk */</comment>
            <block type="pseudo"><return pos:line="166" pos:column="13">return <expr><name pos:line="166" pos:column="20">CHUNKE_BAD_CHUNK<pos:position pos:line="166" pos:column="36"/></name></expr>;<pos:position pos:line="166" pos:column="37"/></return></block></then></if>

          <if pos:line="168" pos:column="11">if<condition pos:line="168" pos:column="13">(<expr><operator pos:line="168" pos:column="14">!<pos:position pos:line="168" pos:column="15"/></operator><name><name pos:line="168" pos:column="15">data<pos:position pos:line="168" pos:column="19"/></name><operator pos:line="168" pos:column="19">-&gt;<pos:position pos:line="168" pos:column="24"/></operator><name pos:line="168" pos:column="21">set<pos:position pos:line="168" pos:column="24"/></name><operator pos:line="168" pos:column="24">.<pos:position pos:line="168" pos:column="25"/></operator><name pos:line="168" pos:column="25">http_te_skip<pos:position pos:line="168" pos:column="37"/></name></name></expr>)<pos:position pos:line="168" pos:column="38"/></condition><then pos:line="168" pos:column="38"> <block pos:line="168" pos:column="39">{
            <expr_stmt><expr><name pos:line="169" pos:column="13">result<pos:position pos:line="169" pos:column="19"/></name> <operator pos:line="169" pos:column="20">=<pos:position pos:line="169" pos:column="21"/></operator> <call><name pos:line="169" pos:column="22">Curl_client_write<pos:position pos:line="169" pos:column="39"/></name><argument_list pos:line="169" pos:column="39">(<argument><expr><name pos:line="169" pos:column="40">conn<pos:position pos:line="169" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="46">CLIENTWRITE_HEADER<pos:position pos:line="169" pos:column="64"/></name></expr></argument>,
                                       <argument><expr><name><name pos:line="170" pos:column="40">conn<pos:position pos:line="170" pos:column="44"/></name><operator pos:line="170" pos:column="44">-&gt;<pos:position pos:line="170" pos:column="49"/></operator><name pos:line="170" pos:column="46">trailer<pos:position pos:line="170" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="170" pos:column="55">conn<pos:position pos:line="170" pos:column="59"/></name><operator pos:line="170" pos:column="59">-&gt;<pos:position pos:line="170" pos:column="64"/></operator><name pos:line="170" pos:column="61">trlPos<pos:position pos:line="170" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="170" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="69"/></expr_stmt>
            <if pos:line="171" pos:column="13">if<condition pos:line="171" pos:column="15">(<expr><name pos:line="171" pos:column="16">result<pos:position pos:line="171" pos:column="22"/></name></expr>)<pos:position pos:line="171" pos:column="23"/></condition><then pos:line="171" pos:column="23">
              <block type="pseudo"><return pos:line="172" pos:column="15">return <expr><name pos:line="172" pos:column="22">CHUNKE_WRITE_ERROR<pos:position pos:line="172" pos:column="40"/></name></expr>;<pos:position pos:line="172" pos:column="41"/></return></block></then></if>
          }<pos:position pos:line="173" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name><name pos:line="174" pos:column="11">conn<pos:position pos:line="174" pos:column="15"/></name><operator pos:line="174" pos:column="15">-&gt;<pos:position pos:line="174" pos:column="20"/></operator><name pos:line="174" pos:column="17">trlPos<pos:position pos:line="174" pos:column="23"/></name></name> <operator pos:line="174" pos:column="24">=<pos:position pos:line="174" pos:column="25"/></operator> <literal type="number" pos:line="174" pos:column="26">0<pos:position pos:line="174" pos:column="27"/></literal></expr>;<pos:position pos:line="174" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="175" pos:column="11">ch<pos:position pos:line="175" pos:column="13"/></name><operator pos:line="175" pos:column="13">-&gt;<pos:position pos:line="175" pos:column="18"/></operator><name pos:line="175" pos:column="15">state<pos:position pos:line="175" pos:column="20"/></name></name> <operator pos:line="175" pos:column="21">=<pos:position pos:line="175" pos:column="22"/></operator> <name pos:line="175" pos:column="23">CHUNK_TRAILER_CR<pos:position pos:line="175" pos:column="39"/></name></expr>;<pos:position pos:line="175" pos:column="40"/></expr_stmt>
          <if pos:line="176" pos:column="11">if<condition pos:line="176" pos:column="13">(<expr><operator pos:line="176" pos:column="14">*<pos:position pos:line="176" pos:column="15"/></operator><name pos:line="176" pos:column="15">datap<pos:position pos:line="176" pos:column="20"/></name> <operator pos:line="176" pos:column="21">==<pos:position pos:line="176" pos:column="23"/></operator> <literal type="number" pos:line="176" pos:column="24">0x0a<pos:position pos:line="176" pos:column="28"/></literal></expr>)<pos:position pos:line="176" pos:column="29"/></condition><then pos:line="176" pos:column="29">
            <comment type="block" pos:line="177" pos:column="13">/* already on the LF */</comment>
            <block type="pseudo"><break pos:line="178" pos:column="13">break;<pos:position pos:line="178" pos:column="19"/></break></block></then></if>
        }<pos:position pos:line="179" pos:column="10"/></block></then>
        <else pos:line="180" pos:column="9">else <block pos:line="180" pos:column="14">{
          <comment type="block" pos:line="181" pos:column="11">/* no trailer, we're on the final CRLF pair */</comment>
          <expr_stmt><expr><name><name pos:line="182" pos:column="11">ch<pos:position pos:line="182" pos:column="13"/></name><operator pos:line="182" pos:column="13">-&gt;<pos:position pos:line="182" pos:column="18"/></operator><name pos:line="182" pos:column="15">state<pos:position pos:line="182" pos:column="20"/></name></name> <operator pos:line="182" pos:column="21">=<pos:position pos:line="182" pos:column="22"/></operator> <name pos:line="182" pos:column="23">CHUNK_TRAILER_POSTCR<pos:position pos:line="182" pos:column="43"/></name></expr>;<pos:position pos:line="182" pos:column="44"/></expr_stmt>
          <break pos:line="183" pos:column="11">break;<pos:position pos:line="183" pos:column="17"/></break> <comment type="block" pos:line="183" pos:column="18">/* don't advance the pointer */</comment>
        }<pos:position pos:line="184" pos:column="10"/></block></else></if>
      }<pos:position pos:line="185" pos:column="8"/></block></then>
      <else pos:line="186" pos:column="7">else <block pos:line="186" pos:column="12">{
        <comment type="block" pos:line="187" pos:column="9">/* conn-&gt;trailer is assumed to be freed in url.c on a
           connection basis */</comment>
        <if pos:line="189" pos:column="9">if<condition pos:line="189" pos:column="11">(<expr><name><name pos:line="189" pos:column="12">conn<pos:position pos:line="189" pos:column="16"/></name><operator pos:line="189" pos:column="16">-&gt;<pos:position pos:line="189" pos:column="21"/></operator><name pos:line="189" pos:column="18">trlPos<pos:position pos:line="189" pos:column="24"/></name></name> <operator pos:line="189" pos:column="25">&gt;=<pos:position pos:line="189" pos:column="30"/></operator> <name><name pos:line="189" pos:column="28">conn<pos:position pos:line="189" pos:column="32"/></name><operator pos:line="189" pos:column="32">-&gt;<pos:position pos:line="189" pos:column="37"/></operator><name pos:line="189" pos:column="34">trlMax<pos:position pos:line="189" pos:column="40"/></name></name></expr>)<pos:position pos:line="189" pos:column="41"/></condition><then pos:line="189" pos:column="41"> <block pos:line="189" pos:column="42">{
          <comment type="block" pos:line="190" pos:column="11">/* we always allocate three extra bytes, just because when the full
             header has been received we append CRLF\0 */</comment>
          <decl_stmt><decl><type><name pos:line="192" pos:column="11">char<pos:position pos:line="192" pos:column="15"/></name> <modifier pos:line="192" pos:column="16">*<pos:position pos:line="192" pos:column="17"/></modifier></type><name pos:line="192" pos:column="17">ptr<pos:position pos:line="192" pos:column="20"/></name></decl>;<pos:position pos:line="192" pos:column="21"/></decl_stmt>
          <if pos:line="193" pos:column="11">if<condition pos:line="193" pos:column="13">(<expr><name><name pos:line="193" pos:column="14">conn<pos:position pos:line="193" pos:column="18"/></name><operator pos:line="193" pos:column="18">-&gt;<pos:position pos:line="193" pos:column="23"/></operator><name pos:line="193" pos:column="20">trlMax<pos:position pos:line="193" pos:column="26"/></name></name></expr>)<pos:position pos:line="193" pos:column="27"/></condition><then pos:line="193" pos:column="27"> <block pos:line="193" pos:column="28">{
            <expr_stmt><expr><name><name pos:line="194" pos:column="13">conn<pos:position pos:line="194" pos:column="17"/></name><operator pos:line="194" pos:column="17">-&gt;<pos:position pos:line="194" pos:column="22"/></operator><name pos:line="194" pos:column="19">trlMax<pos:position pos:line="194" pos:column="25"/></name></name> <operator pos:line="194" pos:column="26">*=<pos:position pos:line="194" pos:column="28"/></operator> <literal type="number" pos:line="194" pos:column="29">2<pos:position pos:line="194" pos:column="30"/></literal></expr>;<pos:position pos:line="194" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="195" pos:column="13">ptr<pos:position pos:line="195" pos:column="16"/></name> <operator pos:line="195" pos:column="17">=<pos:position pos:line="195" pos:column="18"/></operator> <call><name pos:line="195" pos:column="19">realloc<pos:position pos:line="195" pos:column="26"/></name><argument_list pos:line="195" pos:column="26">(<argument><expr><name><name pos:line="195" pos:column="27">conn<pos:position pos:line="195" pos:column="31"/></name><operator pos:line="195" pos:column="31">-&gt;<pos:position pos:line="195" pos:column="36"/></operator><name pos:line="195" pos:column="33">trailer<pos:position pos:line="195" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="42">conn<pos:position pos:line="195" pos:column="46"/></name><operator pos:line="195" pos:column="46">-&gt;<pos:position pos:line="195" pos:column="51"/></operator><name pos:line="195" pos:column="48">trlMax<pos:position pos:line="195" pos:column="54"/></name></name> <operator pos:line="195" pos:column="55">+<pos:position pos:line="195" pos:column="56"/></operator> <literal type="number" pos:line="195" pos:column="57">3<pos:position pos:line="195" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="60"/></expr_stmt>
          }<pos:position pos:line="196" pos:column="12"/></block></then>
          <else pos:line="197" pos:column="11">else <block pos:line="197" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="198" pos:column="13">conn<pos:position pos:line="198" pos:column="17"/></name><operator pos:line="198" pos:column="17">-&gt;<pos:position pos:line="198" pos:column="22"/></operator><name pos:line="198" pos:column="19">trlMax<pos:position pos:line="198" pos:column="25"/></name></name> <operator pos:line="198" pos:column="26">=<pos:position pos:line="198" pos:column="27"/></operator> <literal type="number" pos:line="198" pos:column="28">128<pos:position pos:line="198" pos:column="31"/></literal></expr>;<pos:position pos:line="198" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name pos:line="199" pos:column="13">ptr<pos:position pos:line="199" pos:column="16"/></name> <operator pos:line="199" pos:column="17">=<pos:position pos:line="199" pos:column="18"/></operator> <call><name pos:line="199" pos:column="19">malloc<pos:position pos:line="199" pos:column="25"/></name><argument_list pos:line="199" pos:column="25">(<argument><expr><name><name pos:line="199" pos:column="26">conn<pos:position pos:line="199" pos:column="30"/></name><operator pos:line="199" pos:column="30">-&gt;<pos:position pos:line="199" pos:column="35"/></operator><name pos:line="199" pos:column="32">trlMax<pos:position pos:line="199" pos:column="38"/></name></name> <operator pos:line="199" pos:column="39">+<pos:position pos:line="199" pos:column="40"/></operator> <literal type="number" pos:line="199" pos:column="41">3<pos:position pos:line="199" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="199" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="44"/></expr_stmt>
          }<pos:position pos:line="200" pos:column="12"/></block></else></if>
          <if pos:line="201" pos:column="11">if<condition pos:line="201" pos:column="13">(<expr><operator pos:line="201" pos:column="14">!<pos:position pos:line="201" pos:column="15"/></operator><name pos:line="201" pos:column="15">ptr<pos:position pos:line="201" pos:column="18"/></name></expr>)<pos:position pos:line="201" pos:column="19"/></condition><then pos:line="201" pos:column="19">
            <block type="pseudo"><return pos:line="202" pos:column="13">return <expr><name pos:line="202" pos:column="20">CHUNKE_OUT_OF_MEMORY<pos:position pos:line="202" pos:column="40"/></name></expr>;<pos:position pos:line="202" pos:column="41"/></return></block></then></if>
          <expr_stmt><expr><name><name pos:line="203" pos:column="11">conn<pos:position pos:line="203" pos:column="15"/></name><operator pos:line="203" pos:column="15">-&gt;<pos:position pos:line="203" pos:column="20"/></operator><name pos:line="203" pos:column="17">trailer<pos:position pos:line="203" pos:column="24"/></name></name> <operator pos:line="203" pos:column="25">=<pos:position pos:line="203" pos:column="26"/></operator> <name pos:line="203" pos:column="27">ptr<pos:position pos:line="203" pos:column="30"/></name></expr>;<pos:position pos:line="203" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="204" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="205" pos:column="9">conn<pos:position pos:line="205" pos:column="13"/></name><operator pos:line="205" pos:column="13">-&gt;<pos:position pos:line="205" pos:column="18"/></operator><name pos:line="205" pos:column="15">trailer<pos:position pos:line="205" pos:column="22"/></name><index pos:line="205" pos:column="22">[<expr><name><name pos:line="205" pos:column="23">conn<pos:position pos:line="205" pos:column="27"/></name><operator pos:line="205" pos:column="27">-&gt;<pos:position pos:line="205" pos:column="32"/></operator><name pos:line="205" pos:column="29">trlPos<pos:position pos:line="205" pos:column="35"/></name></name><operator pos:line="205" pos:column="35">++<pos:position pos:line="205" pos:column="37"/></operator></expr>]<pos:position pos:line="205" pos:column="38"/></index></name><operator pos:line="205" pos:column="38">=<pos:position pos:line="205" pos:column="39"/></operator><operator pos:line="205" pos:column="39">*<pos:position pos:line="205" pos:column="40"/></operator><name pos:line="205" pos:column="40">datap<pos:position pos:line="205" pos:column="45"/></name></expr>;<pos:position pos:line="205" pos:column="46"/></expr_stmt>
      }<pos:position pos:line="206" pos:column="8"/></block></else></if>
      <expr_stmt><expr><name pos:line="207" pos:column="7">datap<pos:position pos:line="207" pos:column="12"/></name><operator pos:line="207" pos:column="12">++<pos:position pos:line="207" pos:column="14"/></operator></expr>;<pos:position pos:line="207" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="208" pos:column="7">length<pos:position pos:line="208" pos:column="13"/></name><operator pos:line="208" pos:column="13">--<pos:position pos:line="208" pos:column="15"/></operator></expr>;<pos:position pos:line="208" pos:column="16"/></expr_stmt>
      <break pos:line="209" pos:column="7">break;<pos:position pos:line="209" pos:column="13"/></break>

    <case pos:line="211" pos:column="5">case <expr><name pos:line="211" pos:column="10">CHUNK_TRAILER_CR<pos:position pos:line="211" pos:column="26"/></name></expr>:<pos:position pos:line="211" pos:column="27"/></case>
      <if pos:line="212" pos:column="7">if<condition pos:line="212" pos:column="9">(<expr><operator pos:line="212" pos:column="10">*<pos:position pos:line="212" pos:column="11"/></operator><name pos:line="212" pos:column="11">datap<pos:position pos:line="212" pos:column="16"/></name> <operator pos:line="212" pos:column="17">==<pos:position pos:line="212" pos:column="19"/></operator> <literal type="number" pos:line="212" pos:column="20">0x0a<pos:position pos:line="212" pos:column="24"/></literal></expr>)<pos:position pos:line="212" pos:column="25"/></condition><then pos:line="212" pos:column="25"> <block pos:line="212" pos:column="26">{
        <expr_stmt><expr><name><name pos:line="213" pos:column="9">ch<pos:position pos:line="213" pos:column="11"/></name><operator pos:line="213" pos:column="11">-&gt;<pos:position pos:line="213" pos:column="16"/></operator><name pos:line="213" pos:column="13">state<pos:position pos:line="213" pos:column="18"/></name></name> <operator pos:line="213" pos:column="19">=<pos:position pos:line="213" pos:column="20"/></operator> <name pos:line="213" pos:column="21">CHUNK_TRAILER_POSTCR<pos:position pos:line="213" pos:column="41"/></name></expr>;<pos:position pos:line="213" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="214" pos:column="9">datap<pos:position pos:line="214" pos:column="14"/></name><operator pos:line="214" pos:column="14">++<pos:position pos:line="214" pos:column="16"/></operator></expr>;<pos:position pos:line="214" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="215" pos:column="9">length<pos:position pos:line="215" pos:column="15"/></name><operator pos:line="215" pos:column="15">--<pos:position pos:line="215" pos:column="17"/></operator></expr>;<pos:position pos:line="215" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="216" pos:column="8"/></block></then>
      <else pos:line="217" pos:column="7">else
        <block type="pseudo"><return pos:line="218" pos:column="9">return <expr><name pos:line="218" pos:column="16">CHUNKE_BAD_CHUNK<pos:position pos:line="218" pos:column="32"/></name></expr>;<pos:position pos:line="218" pos:column="33"/></return></block></else></if>
      <break pos:line="219" pos:column="7">break;<pos:position pos:line="219" pos:column="13"/></break>

    <case pos:line="221" pos:column="5">case <expr><name pos:line="221" pos:column="10">CHUNK_TRAILER_POSTCR<pos:position pos:line="221" pos:column="30"/></name></expr>:<pos:position pos:line="221" pos:column="31"/></case>
      <comment type="block" pos:line="222" pos:column="7">/* We enter this state when a CR should arrive so we expect to
         have to first pass a CR before we wait for LF */</comment>
      <if pos:line="224" pos:column="7">if<condition pos:line="224" pos:column="9">(<expr><operator pos:line="224" pos:column="10">(<pos:position pos:line="224" pos:column="11"/></operator><operator pos:line="224" pos:column="11">*<pos:position pos:line="224" pos:column="12"/></operator><name pos:line="224" pos:column="12">datap<pos:position pos:line="224" pos:column="17"/></name> <operator pos:line="224" pos:column="18">!=<pos:position pos:line="224" pos:column="20"/></operator> <literal type="number" pos:line="224" pos:column="21">0x0d<pos:position pos:line="224" pos:column="25"/></literal><operator pos:line="224" pos:column="25">)<pos:position pos:line="224" pos:column="26"/></operator> <operator pos:line="224" pos:column="27">&amp;&amp;<pos:position pos:line="224" pos:column="37"/></operator> <operator pos:line="224" pos:column="30">(<pos:position pos:line="224" pos:column="31"/></operator><operator pos:line="224" pos:column="31">*<pos:position pos:line="224" pos:column="32"/></operator><name pos:line="224" pos:column="32">datap<pos:position pos:line="224" pos:column="37"/></name> <operator pos:line="224" pos:column="38">!=<pos:position pos:line="224" pos:column="40"/></operator> <literal type="number" pos:line="224" pos:column="41">0x0a<pos:position pos:line="224" pos:column="45"/></literal><operator pos:line="224" pos:column="45">)<pos:position pos:line="224" pos:column="46"/></operator></expr>)<pos:position pos:line="224" pos:column="47"/></condition><then pos:line="224" pos:column="47"> <block pos:line="224" pos:column="48">{
        <comment type="block" pos:line="225" pos:column="9">/* not a CR then it must be another header in the trailer */</comment>
        <expr_stmt><expr><name><name pos:line="226" pos:column="9">ch<pos:position pos:line="226" pos:column="11"/></name><operator pos:line="226" pos:column="11">-&gt;<pos:position pos:line="226" pos:column="16"/></operator><name pos:line="226" pos:column="13">state<pos:position pos:line="226" pos:column="18"/></name></name> <operator pos:line="226" pos:column="19">=<pos:position pos:line="226" pos:column="20"/></operator> <name pos:line="226" pos:column="21">CHUNK_TRAILER<pos:position pos:line="226" pos:column="34"/></name></expr>;<pos:position pos:line="226" pos:column="35"/></expr_stmt>
        <break pos:line="227" pos:column="9">break;<pos:position pos:line="227" pos:column="15"/></break>
      }<pos:position pos:line="228" pos:column="8"/></block></then></if>
      <if pos:line="229" pos:column="7">if<condition pos:line="229" pos:column="9">(<expr><operator pos:line="229" pos:column="10">*<pos:position pos:line="229" pos:column="11"/></operator><name pos:line="229" pos:column="11">datap<pos:position pos:line="229" pos:column="16"/></name> <operator pos:line="229" pos:column="17">==<pos:position pos:line="229" pos:column="19"/></operator> <literal type="number" pos:line="229" pos:column="20">0x0d<pos:position pos:line="229" pos:column="24"/></literal></expr>)<pos:position pos:line="229" pos:column="25"/></condition><then pos:line="229" pos:column="25"> <block pos:line="229" pos:column="26">{
        <comment type="block" pos:line="230" pos:column="9">/* skip if CR */</comment>
        <expr_stmt><expr><name pos:line="231" pos:column="9">datap<pos:position pos:line="231" pos:column="14"/></name><operator pos:line="231" pos:column="14">++<pos:position pos:line="231" pos:column="16"/></operator></expr>;<pos:position pos:line="231" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="232" pos:column="9">length<pos:position pos:line="232" pos:column="15"/></name><operator pos:line="232" pos:column="15">--<pos:position pos:line="232" pos:column="17"/></operator></expr>;<pos:position pos:line="232" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="233" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="234" pos:column="7">/* now wait for the final LF */</comment>
      <expr_stmt><expr><name><name pos:line="235" pos:column="7">ch<pos:position pos:line="235" pos:column="9"/></name><operator pos:line="235" pos:column="9">-&gt;<pos:position pos:line="235" pos:column="14"/></operator><name pos:line="235" pos:column="11">state<pos:position pos:line="235" pos:column="16"/></name></name> <operator pos:line="235" pos:column="17">=<pos:position pos:line="235" pos:column="18"/></operator> <name pos:line="235" pos:column="19">CHUNK_STOP<pos:position pos:line="235" pos:column="29"/></name></expr>;<pos:position pos:line="235" pos:column="30"/></expr_stmt>
      <break pos:line="236" pos:column="7">break;<pos:position pos:line="236" pos:column="13"/></break>

    <case pos:line="238" pos:column="5">case <expr><name pos:line="238" pos:column="10">CHUNK_STOP<pos:position pos:line="238" pos:column="20"/></name></expr>:<pos:position pos:line="238" pos:column="21"/></case>
      <if pos:line="239" pos:column="7">if<condition pos:line="239" pos:column="9">(<expr><operator pos:line="239" pos:column="10">*<pos:position pos:line="239" pos:column="11"/></operator><name pos:line="239" pos:column="11">datap<pos:position pos:line="239" pos:column="16"/></name> <operator pos:line="239" pos:column="17">==<pos:position pos:line="239" pos:column="19"/></operator> <literal type="number" pos:line="239" pos:column="20">0x0a<pos:position pos:line="239" pos:column="24"/></literal></expr>)<pos:position pos:line="239" pos:column="25"/></condition><then pos:line="239" pos:column="25"> <block pos:line="239" pos:column="26">{
        <expr_stmt><expr><name pos:line="240" pos:column="9">length<pos:position pos:line="240" pos:column="15"/></name><operator pos:line="240" pos:column="15">--<pos:position pos:line="240" pos:column="17"/></operator></expr>;<pos:position pos:line="240" pos:column="18"/></expr_stmt>

        <comment type="block" pos:line="242" pos:column="9">/* Record the length of any data left in the end of the buffer
           even if there's no more chunks to read */</comment>
        <expr_stmt><expr><name><name pos:line="244" pos:column="9">ch<pos:position pos:line="244" pos:column="11"/></name><operator pos:line="244" pos:column="11">-&gt;<pos:position pos:line="244" pos:column="16"/></operator><name pos:line="244" pos:column="13">dataleft<pos:position pos:line="244" pos:column="21"/></name></name> <operator pos:line="244" pos:column="22">=<pos:position pos:line="244" pos:column="23"/></operator> <call><name pos:line="244" pos:column="24">curlx_sotouz<pos:position pos:line="244" pos:column="36"/></name><argument_list pos:line="244" pos:column="36">(<argument><expr><name pos:line="244" pos:column="37">length<pos:position pos:line="244" pos:column="43"/></name></expr></argument>)<pos:position pos:line="244" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="45"/></expr_stmt>

        <return pos:line="246" pos:column="9">return <expr><name pos:line="246" pos:column="16">CHUNKE_STOP<pos:position pos:line="246" pos:column="27"/></name></expr>;<pos:position pos:line="246" pos:column="28"/></return> <comment type="block" pos:line="246" pos:column="29">/* return stop */</comment>
      }<pos:position pos:line="247" pos:column="8"/></block></then>
      <else pos:line="248" pos:column="7">else
        <block type="pseudo"><return pos:line="249" pos:column="9">return <expr><name pos:line="249" pos:column="16">CHUNKE_BAD_CHUNK<pos:position pos:line="249" pos:column="32"/></name></expr>;<pos:position pos:line="249" pos:column="33"/></return></block></else></if>
    }<pos:position pos:line="250" pos:column="6"/></block></switch>
  }<pos:position pos:line="251" pos:column="4"/></block></while>
  <return pos:line="252" pos:column="3">return <expr><name pos:line="252" pos:column="10">CHUNKE_OK<pos:position pos:line="252" pos:column="19"/></name></expr>;<pos:position pos:line="252" pos:column="20"/></return>
}<pos:position pos:line="253" pos:column="2"/></block></function></unit>
