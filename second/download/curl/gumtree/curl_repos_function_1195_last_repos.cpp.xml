<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1195_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">imap_atom<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">str<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">bool<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">escape_only<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* !checksrc! disable PARENBRACE 1 */</comment>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">atom_specials<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[]<pos:position pos:line="4" pos:column="29"/></index></name> <init pos:line="4" pos:column="30">= <expr><literal type="string" pos:line="4" pos:column="32">"(){ %*]"<pos:position pos:line="4" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">p1<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">p2<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">backsp_count<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">quote_count<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">bool<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">others_exists<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name pos:line="9" pos:column="24">FALSE<pos:position pos:line="9" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">newlen<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">newstr<pos:position pos:line="11" pos:column="15"/></name> <init pos:line="11" pos:column="16">= <expr><name pos:line="11" pos:column="18">NULL<pos:position pos:line="11" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><operator pos:line="13" pos:column="6">!<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">str<pos:position pos:line="13" pos:column="10"/></name></expr>)<pos:position pos:line="13" pos:column="11"/></condition><then pos:line="13" pos:column="11">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">NULL<pos:position pos:line="14" pos:column="16"/></name></expr>;<pos:position pos:line="14" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="16" pos:column="3">/* Look for "atom-specials", counting the backslash and quote characters as
     these will need escapping */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">p1<pos:position pos:line="18" pos:column="5"/></name> <operator pos:line="18" pos:column="6">=<pos:position pos:line="18" pos:column="7"/></operator> <name pos:line="18" pos:column="8">str<pos:position pos:line="18" pos:column="11"/></name></expr>;<pos:position pos:line="18" pos:column="12"/></expr_stmt>
  <while pos:line="19" pos:column="3">while<condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">p1<pos:position pos:line="19" pos:column="12"/></name></expr>)<pos:position pos:line="19" pos:column="13"/></condition> <block pos:line="19" pos:column="14">{
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><operator pos:line="20" pos:column="8">*<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="9">p1<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">==<pos:position pos:line="20" pos:column="14"/></operator> <literal type="char" pos:line="20" pos:column="15">'\\'<pos:position pos:line="20" pos:column="19"/></literal></expr>)<pos:position pos:line="20" pos:column="20"/></condition><then pos:line="20" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="7">backsp_count<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">++<pos:position pos:line="21" pos:column="21"/></operator></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt></block></then>
    <elseif pos:line="22" pos:column="5">else <if pos:line="22" pos:column="10">if<condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">*<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">p1<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">==<pos:position pos:line="22" pos:column="19"/></operator> <literal type="char" pos:line="22" pos:column="20">'"'<pos:position pos:line="22" pos:column="23"/></literal></expr>)<pos:position pos:line="22" pos:column="24"/></condition><then pos:line="22" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="7">quote_count<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">++<pos:position pos:line="23" pos:column="20"/></operator></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if<condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">escape_only<pos:position pos:line="24" pos:column="25"/></name></expr>)<pos:position pos:line="24" pos:column="26"/></condition><then pos:line="24" pos:column="26"> <block pos:line="24" pos:column="27">{
      <decl_stmt><decl><type><specifier pos:line="25" pos:column="7">const<pos:position pos:line="25" pos:column="12"/></specifier> <name pos:line="25" pos:column="13">char<pos:position pos:line="25" pos:column="17"/></name> <modifier pos:line="25" pos:column="18">*<pos:position pos:line="25" pos:column="19"/></modifier></type><name pos:line="25" pos:column="19">p3<pos:position pos:line="25" pos:column="21"/></name> <init pos:line="25" pos:column="22">= <expr><name pos:line="25" pos:column="24">atom_specials<pos:position pos:line="25" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="38"/></decl_stmt>

      <while pos:line="27" pos:column="7">while<condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">p3<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">&amp;&amp;<pos:position pos:line="27" pos:column="27"/></operator> <operator pos:line="27" pos:column="20">!<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">others_exists<pos:position pos:line="27" pos:column="34"/></name></expr>)<pos:position pos:line="27" pos:column="35"/></condition> <block pos:line="27" pos:column="36">{
        <if pos:line="28" pos:column="9">if<condition pos:line="28" pos:column="11">(<expr><operator pos:line="28" pos:column="12">*<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">p1<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">==<pos:position pos:line="28" pos:column="18"/></operator> <operator pos:line="28" pos:column="19">*<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">p3<pos:position pos:line="28" pos:column="22"/></name></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23">
          <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="11">others_exists<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">TRUE<pos:position pos:line="29" pos:column="31"/></name></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="31" pos:column="9">p3<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">++<pos:position pos:line="31" pos:column="13"/></operator></expr>;<pos:position pos:line="31" pos:column="14"/></expr_stmt>
      }<pos:position pos:line="32" pos:column="8"/></block></while>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="35" pos:column="5">p1<pos:position pos:line="35" pos:column="7"/></name><operator pos:line="35" pos:column="7">++<pos:position pos:line="35" pos:column="9"/></operator></expr>;<pos:position pos:line="35" pos:column="10"/></expr_stmt>
  }<pos:position pos:line="36" pos:column="4"/></block></while>

  <comment type="block" pos:line="38" pos:column="3">/* Does the input contain any "atom-special" characters? */</comment>
  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><operator pos:line="39" pos:column="6">!<pos:position pos:line="39" pos:column="7"/></operator><name pos:line="39" pos:column="7">backsp_count<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">&amp;&amp;<pos:position pos:line="39" pos:column="30"/></operator> <operator pos:line="39" pos:column="23">!<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="24">quote_count<pos:position pos:line="39" pos:column="35"/></name> <operator pos:line="39" pos:column="36">&amp;&amp;<pos:position pos:line="39" pos:column="46"/></operator> <operator pos:line="39" pos:column="39">!<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="40">others_exists<pos:position pos:line="39" pos:column="53"/></name></expr>)<pos:position pos:line="39" pos:column="54"/></condition><then pos:line="39" pos:column="54">
    <block type="pseudo"><return pos:line="40" pos:column="5">return <expr><call><name pos:line="40" pos:column="12">strdup<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><name pos:line="40" pos:column="19">str<pos:position pos:line="40" pos:column="22"/></name></expr></argument>)<pos:position pos:line="40" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="24"/></return></block></then></if>

  <comment type="block" pos:line="42" pos:column="3">/* Calculate the new string length */</comment>
  <expr_stmt><expr><name pos:line="43" pos:column="3">newlen<pos:position pos:line="43" pos:column="9"/></name> <operator pos:line="43" pos:column="10">=<pos:position pos:line="43" pos:column="11"/></operator> <call><name pos:line="43" pos:column="12">strlen<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name pos:line="43" pos:column="19">str<pos:position pos:line="43" pos:column="22"/></name></expr></argument>)<pos:position pos:line="43" pos:column="23"/></argument_list></call> <operator pos:line="43" pos:column="24">+<pos:position pos:line="43" pos:column="25"/></operator> <name pos:line="43" pos:column="26">backsp_count<pos:position pos:line="43" pos:column="38"/></name> <operator pos:line="43" pos:column="39">+<pos:position pos:line="43" pos:column="40"/></operator> <name pos:line="43" pos:column="41">quote_count<pos:position pos:line="43" pos:column="52"/></name> <operator pos:line="43" pos:column="53">+<pos:position pos:line="43" pos:column="54"/></operator> <operator pos:line="43" pos:column="55">(<pos:position pos:line="43" pos:column="56"/></operator><ternary><condition><expr><name pos:line="43" pos:column="56">escape_only<pos:position pos:line="43" pos:column="67"/></name></expr> ?<pos:position pos:line="43" pos:column="69"/></condition><then pos:line="43" pos:column="69"> <expr><literal type="number" pos:line="43" pos:column="70">0<pos:position pos:line="43" pos:column="71"/></literal></expr> <pos:position pos:line="43" pos:column="72"/></then><else pos:line="43" pos:column="72">: <expr><literal type="number" pos:line="43" pos:column="74">2<pos:position pos:line="43" pos:column="75"/></literal></expr></else></ternary><operator pos:line="43" pos:column="75">)<pos:position pos:line="43" pos:column="76"/></operator></expr>;<pos:position pos:line="43" pos:column="77"/></expr_stmt>

  <comment type="block" pos:line="45" pos:column="3">/* Allocate the new string */</comment>
  <expr_stmt><expr><name pos:line="46" pos:column="3">newstr<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <operator pos:line="46" pos:column="12">(<pos:position pos:line="46" pos:column="13"/></operator><name pos:line="46" pos:column="13">char<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">*<pos:position pos:line="46" pos:column="19"/></operator><operator pos:line="46" pos:column="19">)<pos:position pos:line="46" pos:column="20"/></operator> <call><name pos:line="46" pos:column="21">malloc<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><operator pos:line="46" pos:column="28">(<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="29">newlen<pos:position pos:line="46" pos:column="35"/></name> <operator pos:line="46" pos:column="36">+<pos:position pos:line="46" pos:column="37"/></operator> <literal type="number" pos:line="46" pos:column="38">1<pos:position pos:line="46" pos:column="39"/></literal><operator pos:line="46" pos:column="39">)<pos:position pos:line="46" pos:column="40"/></operator> <operator pos:line="46" pos:column="41">*<pos:position pos:line="46" pos:column="42"/></operator> <sizeof pos:line="46" pos:column="43">sizeof<argument_list pos:line="46" pos:column="49">(<argument><expr><name pos:line="46" pos:column="50">char<pos:position pos:line="46" pos:column="54"/></name></expr></argument>)<pos:position pos:line="46" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="57"/></expr_stmt>
  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><operator pos:line="47" pos:column="6">!<pos:position pos:line="47" pos:column="7"/></operator><name pos:line="47" pos:column="7">newstr<pos:position pos:line="47" pos:column="13"/></name></expr>)<pos:position pos:line="47" pos:column="14"/></condition><then pos:line="47" pos:column="14">
    <block type="pseudo"><return pos:line="48" pos:column="5">return <expr><name pos:line="48" pos:column="12">NULL<pos:position pos:line="48" pos:column="16"/></name></expr>;<pos:position pos:line="48" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="50" pos:column="3">/* Surround the string in quotes if necessary */</comment>
  <expr_stmt><expr><name pos:line="51" pos:column="3">p2<pos:position pos:line="51" pos:column="5"/></name> <operator pos:line="51" pos:column="6">=<pos:position pos:line="51" pos:column="7"/></operator> <name pos:line="51" pos:column="8">newstr<pos:position pos:line="51" pos:column="14"/></name></expr>;<pos:position pos:line="51" pos:column="15"/></expr_stmt>
  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">(<expr><operator pos:line="52" pos:column="6">!<pos:position pos:line="52" pos:column="7"/></operator><name pos:line="52" pos:column="7">escape_only<pos:position pos:line="52" pos:column="18"/></name></expr>)<pos:position pos:line="52" pos:column="19"/></condition><then pos:line="52" pos:column="19"> <block pos:line="52" pos:column="20">{
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">newstr<pos:position pos:line="53" pos:column="11"/></name><index pos:line="53" pos:column="11">[<expr><literal type="number" pos:line="53" pos:column="12">0<pos:position pos:line="53" pos:column="13"/></literal></expr>]<pos:position pos:line="53" pos:column="14"/></index></name> <operator pos:line="53" pos:column="15">=<pos:position pos:line="53" pos:column="16"/></operator> <literal type="char" pos:line="53" pos:column="17">'"'<pos:position pos:line="53" pos:column="20"/></literal></expr>;<pos:position pos:line="53" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">newstr<pos:position pos:line="54" pos:column="11"/></name><index pos:line="54" pos:column="11">[<expr><name pos:line="54" pos:column="12">newlen<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">-<pos:position pos:line="54" pos:column="20"/></operator> <literal type="number" pos:line="54" pos:column="21">1<pos:position pos:line="54" pos:column="22"/></literal></expr>]<pos:position pos:line="54" pos:column="23"/></index></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <literal type="char" pos:line="54" pos:column="26">'"'<pos:position pos:line="54" pos:column="29"/></literal></expr>;<pos:position pos:line="54" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">p2<pos:position pos:line="55" pos:column="7"/></name><operator pos:line="55" pos:column="7">++<pos:position pos:line="55" pos:column="9"/></operator></expr>;<pos:position pos:line="55" pos:column="10"/></expr_stmt>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="58" pos:column="3">/* Copy the string, escaping backslash and quote characters along the way */</comment>
  <expr_stmt><expr><name pos:line="59" pos:column="3">p1<pos:position pos:line="59" pos:column="5"/></name> <operator pos:line="59" pos:column="6">=<pos:position pos:line="59" pos:column="7"/></operator> <name pos:line="59" pos:column="8">str<pos:position pos:line="59" pos:column="11"/></name></expr>;<pos:position pos:line="59" pos:column="12"/></expr_stmt>
  <while pos:line="60" pos:column="3">while<condition pos:line="60" pos:column="8">(<expr><operator pos:line="60" pos:column="9">*<pos:position pos:line="60" pos:column="10"/></operator><name pos:line="60" pos:column="10">p1<pos:position pos:line="60" pos:column="12"/></name></expr>)<pos:position pos:line="60" pos:column="13"/></condition> <block pos:line="60" pos:column="14">{
    <if pos:line="61" pos:column="5">if<condition pos:line="61" pos:column="7">(<expr><operator pos:line="61" pos:column="8">*<pos:position pos:line="61" pos:column="9"/></operator><name pos:line="61" pos:column="9">p1<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">==<pos:position pos:line="61" pos:column="14"/></operator> <literal type="char" pos:line="61" pos:column="15">'\\'<pos:position pos:line="61" pos:column="19"/></literal> <operator pos:line="61" pos:column="20">||<pos:position pos:line="61" pos:column="22"/></operator> <operator pos:line="61" pos:column="23">*<pos:position pos:line="61" pos:column="24"/></operator><name pos:line="61" pos:column="24">p1<pos:position pos:line="61" pos:column="26"/></name> <operator pos:line="61" pos:column="27">==<pos:position pos:line="61" pos:column="29"/></operator> <literal type="char" pos:line="61" pos:column="30">'"'<pos:position pos:line="61" pos:column="33"/></literal></expr>)<pos:position pos:line="61" pos:column="34"/></condition><then pos:line="61" pos:column="34"> <block pos:line="61" pos:column="35">{
      <expr_stmt><expr><operator pos:line="62" pos:column="7">*<pos:position pos:line="62" pos:column="8"/></operator><name pos:line="62" pos:column="8">p2<pos:position pos:line="62" pos:column="10"/></name> <operator pos:line="62" pos:column="11">=<pos:position pos:line="62" pos:column="12"/></operator> <literal type="char" pos:line="62" pos:column="13">'\\'<pos:position pos:line="62" pos:column="17"/></literal></expr>;<pos:position pos:line="62" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="63" pos:column="7">p2<pos:position pos:line="63" pos:column="9"/></name><operator pos:line="63" pos:column="9">++<pos:position pos:line="63" pos:column="11"/></operator></expr>;<pos:position pos:line="63" pos:column="12"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>

   <expr_stmt><expr><operator pos:line="66" pos:column="4">*<pos:position pos:line="66" pos:column="5"/></operator><name pos:line="66" pos:column="5">p2<pos:position pos:line="66" pos:column="7"/></name> <operator pos:line="66" pos:column="8">=<pos:position pos:line="66" pos:column="9"/></operator> <operator pos:line="66" pos:column="10">*<pos:position pos:line="66" pos:column="11"/></operator><name pos:line="66" pos:column="11">p1<pos:position pos:line="66" pos:column="13"/></name></expr>;<pos:position pos:line="66" pos:column="14"/></expr_stmt>

    <expr_stmt><expr><name pos:line="68" pos:column="5">p1<pos:position pos:line="68" pos:column="7"/></name><operator pos:line="68" pos:column="7">++<pos:position pos:line="68" pos:column="9"/></operator></expr>;<pos:position pos:line="68" pos:column="10"/></expr_stmt>
    <expr_stmt><expr><name pos:line="69" pos:column="5">p2<pos:position pos:line="69" pos:column="7"/></name><operator pos:line="69" pos:column="7">++<pos:position pos:line="69" pos:column="9"/></operator></expr>;<pos:position pos:line="69" pos:column="10"/></expr_stmt>
  }<pos:position pos:line="70" pos:column="4"/></block></while>

  <comment type="block" pos:line="72" pos:column="3">/* Terminate the string */</comment>
  <expr_stmt><expr><name><name pos:line="73" pos:column="3">newstr<pos:position pos:line="73" pos:column="9"/></name><index pos:line="73" pos:column="9">[<expr><name pos:line="73" pos:column="10">newlen<pos:position pos:line="73" pos:column="16"/></name></expr>]<pos:position pos:line="73" pos:column="17"/></index></name> <operator pos:line="73" pos:column="18">=<pos:position pos:line="73" pos:column="19"/></operator> <literal type="char" pos:line="73" pos:column="20">'\0'<pos:position pos:line="73" pos:column="24"/></literal></expr>;<pos:position pos:line="73" pos:column="25"/></expr_stmt>

  <return pos:line="75" pos:column="3">return <expr><name pos:line="75" pos:column="10">newstr<pos:position pos:line="75" pos:column="16"/></name></expr>;<pos:position pos:line="75" pos:column="17"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
