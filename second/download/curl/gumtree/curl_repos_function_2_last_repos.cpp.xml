<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="15"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">curl<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">res<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">MemoryStruct<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">chunk<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="6" pos:column="3">static<pos:position pos:line="6" pos:column="9"/></specifier> <type><specifier pos:line="6" pos:column="10">const<pos:position pos:line="6" pos:column="15"/></specifier> <name pos:line="6" pos:column="16">char<pos:position pos:line="6" pos:column="20"/></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">postthis<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><literal type="string" pos:line="6" pos:column="33">"Field=1&amp;Field=2&amp;Field=3"<pos:position pos:line="6" pos:column="66"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="8" pos:column="3">chunk<pos:position pos:line="8" pos:column="8"/></name><operator pos:line="8" pos:column="8">.<pos:position pos:line="8" pos:column="9"/></operator><name pos:line="8" pos:column="9">memory<pos:position pos:line="8" pos:column="15"/></name></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <call><name pos:line="8" pos:column="18">malloc<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><literal type="number" pos:line="8" pos:column="25">1<pos:position pos:line="8" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="28"/></expr_stmt>  <comment type="block" pos:line="8" pos:column="30">/* will be grown as needed by realloc above */</comment>
  <expr_stmt><expr><name><name pos:line="9" pos:column="3">chunk<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">.<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">size<pos:position pos:line="9" pos:column="13"/></name></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>    <comment type="block" pos:line="9" pos:column="22">/* no data at this point */</comment>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">curl_global_init<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">CURL_GLOBAL_ALL<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">curl<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <call><name pos:line="12" pos:column="10">curl_easy_init<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">curl<pos:position pos:line="13" pos:column="10"/></name></expr>)<pos:position pos:line="13" pos:column="11"/></condition><then pos:line="13" pos:column="11"> <block pos:line="13" pos:column="12">{

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">curl_easy_setopt<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">curl<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">CURLOPT_URL<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="41">"http://www.example.org/"<pos:position pos:line="15" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt>

    <comment type="block" pos:line="17" pos:column="5">/* send all data to this function  */</comment>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">curl_easy_setopt<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">curl<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="28">CURLOPT_WRITEFUNCTION<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">WriteMemoryCallback<pos:position pos:line="18" pos:column="70"/></name></expr></argument>)<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="72"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* we pass our 'chunk' struct to the callback function */</comment>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">curl_easy_setopt<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">curl<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">CURLOPT_WRITEDATA<pos:position pos:line="21" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="47">(<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="48">void<pos:position pos:line="21" pos:column="52"/></name> <operator pos:line="21" pos:column="53">*<pos:position pos:line="21" pos:column="54"/></operator><operator pos:line="21" pos:column="54">)<pos:position pos:line="21" pos:column="55"/></operator><operator pos:line="21" pos:column="55">&amp;<pos:position pos:line="21" pos:column="60"/></operator><name pos:line="21" pos:column="56">chunk<pos:position pos:line="21" pos:column="61"/></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* some servers don't like requests that are made without a user-agent
       field, so we provide one */</comment>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">curl_easy_setopt<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">curl<pos:position pos:line="25" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="28">CURLOPT_USERAGENT<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="47">"libcurl-agent/1.0"<pos:position pos:line="25" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">curl_easy_setopt<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">curl<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">CURLOPT_POSTFIELDS<pos:position pos:line="27" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="48">postthis<pos:position pos:line="27" pos:column="56"/></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* if we don't provide POSTFIELDSIZE, libcurl will strlen() by
       itself */</comment>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">curl_easy_setopt<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">curl<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">CURLOPT_POSTFIELDSIZE<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="51">(<pos:position pos:line="31" pos:column="52"/></operator><name pos:line="31" pos:column="52">long<pos:position pos:line="31" pos:column="56"/></name><operator pos:line="31" pos:column="56">)<pos:position pos:line="31" pos:column="57"/></operator><call><name pos:line="31" pos:column="57">strlen<pos:position pos:line="31" pos:column="63"/></name><argument_list pos:line="31" pos:column="63">(<argument><expr><name pos:line="31" pos:column="64">postthis<pos:position pos:line="31" pos:column="72"/></name></expr></argument>)<pos:position pos:line="31" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="75"/></expr_stmt>

    <comment type="block" pos:line="33" pos:column="5">/* Perform the request, res will get the return code */</comment>
    <expr_stmt><expr><name pos:line="34" pos:column="5">res<pos:position pos:line="34" pos:column="8"/></name> <operator pos:line="34" pos:column="9">=<pos:position pos:line="34" pos:column="10"/></operator> <call><name pos:line="34" pos:column="11">curl_easy_perform<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">curl<pos:position pos:line="34" pos:column="33"/></name></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
    <comment type="block" pos:line="35" pos:column="5">/* Check for errors */</comment>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><name pos:line="36" pos:column="8">res<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">!=<pos:position pos:line="36" pos:column="14"/></operator> <name pos:line="36" pos:column="15">CURLE_OK<pos:position pos:line="36" pos:column="23"/></name></expr>)<pos:position pos:line="36" pos:column="24"/></condition><then pos:line="36" pos:column="24"> <block pos:line="36" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">fprintf<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">stderr<pos:position pos:line="37" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="23">"curl_easy_perform() failed: %s\n"<pos:position pos:line="37" pos:column="57"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="38" pos:column="15">curl_easy_strerror<pos:position pos:line="38" pos:column="33"/></name><argument_list pos:line="38" pos:column="33">(<argument><expr><name pos:line="38" pos:column="34">res<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then>
    <else pos:line="40" pos:column="5">else <block pos:line="40" pos:column="10">{
      <comment type="block" pos:line="41" pos:column="7">/*
       * Now, our chunk.memory points to a memory block that is chunk.size
       * bytes big and contains the remote file.
       *
       * Do something nice with it!
       */</comment>
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">printf<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><literal type="string" pos:line="47" pos:column="14">"%s\n"<pos:position pos:line="47" pos:column="20"/></literal></expr></argument>,<argument><expr><name><name pos:line="47" pos:column="21">chunk<pos:position pos:line="47" pos:column="26"/></name><operator pos:line="47" pos:column="26">.<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="27">memory<pos:position pos:line="47" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="50" pos:column="5">/* always cleanup */</comment>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">curl_easy_cleanup<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><name pos:line="51" pos:column="23">curl<pos:position pos:line="51" pos:column="27"/></name></expr></argument>)<pos:position pos:line="51" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">free<pos:position pos:line="53" pos:column="9"/></name><argument_list pos:line="53" pos:column="9">(<argument><expr><name><name pos:line="53" pos:column="10">chunk<pos:position pos:line="53" pos:column="15"/></name><operator pos:line="53" pos:column="15">.<pos:position pos:line="53" pos:column="16"/></operator><name pos:line="53" pos:column="16">memory<pos:position pos:line="53" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="24"/></expr_stmt>

    <comment type="block" pos:line="55" pos:column="5">/* we're done with libcurl, so clean it up */</comment>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">curl_global_cleanup<pos:position pos:line="56" pos:column="24"/></name><argument_list pos:line="56" pos:column="24">()<pos:position pos:line="56" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="57" pos:column="4"/></block></then></if>
  <return pos:line="58" pos:column="3">return <expr><literal type="number" pos:line="58" pos:column="10">0<pos:position pos:line="58" pos:column="11"/></literal></expr>;<pos:position pos:line="58" pos:column="12"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
