<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1051_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_fillreadbuffer<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">connectdata<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">conn<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">bytes<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">nreadp<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_easy<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name><name pos:line="3" pos:column="28">conn<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">data<pos:position pos:line="3" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">buffersize<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><operator pos:line="4" pos:column="23">(<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">size_t<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">)<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="31">bytes<pos:position pos:line="4" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">nread<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="6" pos:column="29"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">sending_http_headers<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><name pos:line="7" pos:column="31">FALSE<pos:position pos:line="7" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name><name pos:line="9" pos:column="6">conn<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">handler<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">-&gt;<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="21">protocol<pos:position pos:line="9" pos:column="29"/></name></name><operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator><operator pos:line="9" pos:column="30">(<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">PROTO_FAMILY_HTTP<pos:position pos:line="9" pos:column="48"/></name><operator pos:line="9" pos:column="48">|<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="49">CURLPROTO_RTSP<pos:position pos:line="9" pos:column="63"/></name><operator pos:line="9" pos:column="63">)<pos:position pos:line="9" pos:column="64"/></operator></expr>)<pos:position pos:line="9" pos:column="65"/></condition><then pos:line="9" pos:column="65"> <block pos:line="9" pos:column="66">{
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name><name pos:line="10" pos:column="11">struct<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">HTTP<pos:position pos:line="10" pos:column="22"/></name></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier></type><name pos:line="10" pos:column="24">http<pos:position pos:line="10" pos:column="28"/></name> <init pos:line="10" pos:column="29">= <expr><name><name pos:line="10" pos:column="31">data<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">-&gt;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="37">req<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">.<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="41">protop<pos:position pos:line="10" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>

    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">(<expr><name><name pos:line="12" pos:column="8">http<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">sending<pos:position pos:line="12" pos:column="21"/></name></name> <operator pos:line="12" pos:column="22">==<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">HTTPSEND_REQUEST<pos:position pos:line="12" pos:column="41"/></name></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42">
      <comment type="block" pos:line="13" pos:column="7">/* We're sending the HTTP request headers, not the data.
         Remember that so we don't re-translate them into garbage. */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="7">sending_http_headers<pos:position pos:line="15" pos:column="27"/></name> <operator pos:line="15" pos:column="28">=<pos:position pos:line="15" pos:column="29"/></operator> <name pos:line="15" pos:column="30">TRUE<pos:position pos:line="15" pos:column="34"/></name></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt></block></then></if>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name><name pos:line="19" pos:column="6">data<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">req<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">upload_chunky<pos:position pos:line="19" pos:column="29"/></name></name></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <block pos:line="19" pos:column="31">{
    <comment type="block" pos:line="20" pos:column="5">/* if chunked Transfer-Encoding */</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">buffersize<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">-=<pos:position pos:line="21" pos:column="18"/></operator> <operator pos:line="21" pos:column="19">(<pos:position pos:line="21" pos:column="20"/></operator><literal type="number" pos:line="21" pos:column="20">8<pos:position pos:line="21" pos:column="21"/></literal> <operator pos:line="21" pos:column="22">+<pos:position pos:line="21" pos:column="23"/></operator> <literal type="number" pos:line="21" pos:column="24">2<pos:position pos:line="21" pos:column="25"/></literal> <operator pos:line="21" pos:column="26">+<pos:position pos:line="21" pos:column="27"/></operator> <literal type="number" pos:line="21" pos:column="28">2<pos:position pos:line="21" pos:column="29"/></literal><operator pos:line="21" pos:column="29">)<pos:position pos:line="21" pos:column="30"/></operator></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>   <comment type="block" pos:line="21" pos:column="34">/* 32bit hex + CRLF + CRLF */</comment>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">data<pos:position pos:line="22" pos:column="9"/></name><operator pos:line="22" pos:column="9">-&gt;<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="11">req<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">.<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">upload_fromhere<pos:position pos:line="22" pos:column="30"/></name></name> <operator pos:line="22" pos:column="31">+=<pos:position pos:line="22" pos:column="33"/></operator> <operator pos:line="22" pos:column="34">(<pos:position pos:line="22" pos:column="35"/></operator><literal type="number" pos:line="22" pos:column="35">8<pos:position pos:line="22" pos:column="36"/></literal> <operator pos:line="22" pos:column="37">+<pos:position pos:line="22" pos:column="38"/></operator> <literal type="number" pos:line="22" pos:column="39">2<pos:position pos:line="22" pos:column="40"/></literal><operator pos:line="22" pos:column="40">)<pos:position pos:line="22" pos:column="41"/></operator></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt> <comment type="block" pos:line="22" pos:column="43">/* 32bit hex + CRLF */</comment>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="25" pos:column="3">/* this function returns a size_t, so we typecast to int to prevent warnings
     with picky compilers */</comment>
  <expr_stmt><expr><name pos:line="27" pos:column="3">nread<pos:position pos:line="27" pos:column="8"/></name> <operator pos:line="27" pos:column="9">=<pos:position pos:line="27" pos:column="10"/></operator> <operator pos:line="27" pos:column="11">(<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">int<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">)<pos:position pos:line="27" pos:column="16"/></operator><call><name><name pos:line="27" pos:column="16">data<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">state<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">.<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">fread_func<pos:position pos:line="27" pos:column="38"/></name></name><argument_list pos:line="27" pos:column="38">(<argument><expr><name><name pos:line="27" pos:column="39">data<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">-&gt;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="45">req<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">.<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="49">upload_fromhere<pos:position pos:line="27" pos:column="64"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="66">1<pos:position pos:line="27" pos:column="67"/></literal></expr></argument>,
                                      <argument><expr><name pos:line="28" pos:column="39">buffersize<pos:position pos:line="28" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="51">data<pos:position pos:line="28" pos:column="55"/></name><operator pos:line="28" pos:column="55">-&gt;<pos:position pos:line="28" pos:column="60"/></operator><name pos:line="28" pos:column="57">state<pos:position pos:line="28" pos:column="62"/></name><operator pos:line="28" pos:column="62">.<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="63">in<pos:position pos:line="28" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="67"/></expr_stmt>

  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name pos:line="30" pos:column="6">nread<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">==<pos:position pos:line="30" pos:column="14"/></operator> <name pos:line="30" pos:column="15">CURL_READFUNC_ABORT<pos:position pos:line="30" pos:column="34"/></name></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35"> <block pos:line="30" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">failf<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(<argument><expr><name pos:line="31" pos:column="11">data<pos:position pos:line="31" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="17">"operation aborted by callback"<pos:position pos:line="31" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="32" pos:column="5">*<pos:position pos:line="32" pos:column="6"/></operator><name pos:line="32" pos:column="6">nreadp<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <literal type="number" pos:line="32" pos:column="15">0<pos:position pos:line="32" pos:column="16"/></literal></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="33" pos:column="37"/></name></expr>;<pos:position pos:line="33" pos:column="38"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <if pos:line="35" pos:column="3">if<condition pos:line="35" pos:column="5">(<expr><name pos:line="35" pos:column="6">nread<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">==<pos:position pos:line="35" pos:column="14"/></operator> <name pos:line="35" pos:column="15">CURL_READFUNC_PAUSE<pos:position pos:line="35" pos:column="34"/></name></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35"> <block pos:line="35" pos:column="36">{
    <decl_stmt><decl><type><name><name pos:line="36" pos:column="5">struct<pos:position pos:line="36" pos:column="11"/></name> <name pos:line="36" pos:column="12">SingleRequest<pos:position pos:line="36" pos:column="25"/></name></name> <modifier pos:line="36" pos:column="26">*<pos:position pos:line="36" pos:column="27"/></modifier></type><name pos:line="36" pos:column="27">k<pos:position pos:line="36" pos:column="28"/></name> <init pos:line="36" pos:column="29">= <expr><operator pos:line="36" pos:column="31">&amp;<pos:position pos:line="36" pos:column="36"/></operator><name><name pos:line="36" pos:column="32">data<pos:position pos:line="36" pos:column="36"/></name><operator pos:line="36" pos:column="36">-&gt;<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="38">req<pos:position pos:line="36" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="36" pos:column="42"/></decl_stmt>

    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name><name pos:line="38" pos:column="8">conn<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-&gt;<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="14">handler<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">-&gt;<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="23">flags<pos:position pos:line="38" pos:column="28"/></name></name> <operator pos:line="38" pos:column="29">&amp;<pos:position pos:line="38" pos:column="34"/></operator> <name pos:line="38" pos:column="31">PROTOPT_NONETWORK<pos:position pos:line="38" pos:column="48"/></name></expr>)<pos:position pos:line="38" pos:column="49"/></condition><then pos:line="38" pos:column="49"> <block pos:line="38" pos:column="50">{
      <comment type="block" pos:line="39" pos:column="7">/* protocols that work without network cannot be paused. This is
         actually only FILE:// just now, and it can't pause since the transfer
         isn't done using the "normal" procedure. */</comment>
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">failf<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">data<pos:position pos:line="42" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="19">"Read callback asked for PAUSE when not supported!"<pos:position pos:line="42" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="72"/></expr_stmt>
      <return pos:line="43" pos:column="7">return <expr><name pos:line="43" pos:column="14">CURLE_READ_ERROR<pos:position pos:line="43" pos:column="30"/></name></expr>;<pos:position pos:line="43" pos:column="31"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="46" pos:column="5">/* CURL_READFUNC_PAUSE pauses read callbacks that feed socket writes */</comment>
    <expr_stmt><expr><name><name pos:line="47" pos:column="5">k<pos:position pos:line="47" pos:column="6"/></name><operator pos:line="47" pos:column="6">-&gt;<pos:position pos:line="47" pos:column="11"/></operator><name pos:line="47" pos:column="8">keepon<pos:position pos:line="47" pos:column="14"/></name></name> <operator pos:line="47" pos:column="15">|=<pos:position pos:line="47" pos:column="17"/></operator> <name pos:line="47" pos:column="18">KEEP_SEND_PAUSE<pos:position pos:line="47" pos:column="33"/></name></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt> <comment type="block" pos:line="47" pos:column="35">/* mark socket send as paused */</comment>
    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><name><name pos:line="48" pos:column="8">data<pos:position pos:line="48" pos:column="12"/></name><operator pos:line="48" pos:column="12">-&gt;<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="14">req<pos:position pos:line="48" pos:column="17"/></name><operator pos:line="48" pos:column="17">.<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="18">upload_chunky<pos:position pos:line="48" pos:column="31"/></name></name></expr>)<pos:position pos:line="48" pos:column="32"/></condition><then pos:line="48" pos:column="32"> <block pos:line="48" pos:column="33">{
        <comment type="block" pos:line="49" pos:column="9">/* Back out the preallocation done above */</comment>
      <expr_stmt><expr><name><name pos:line="50" pos:column="7">data<pos:position pos:line="50" pos:column="11"/></name><operator pos:line="50" pos:column="11">-&gt;<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="13">req<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">.<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">upload_fromhere<pos:position pos:line="50" pos:column="32"/></name></name> <operator pos:line="50" pos:column="33">-=<pos:position pos:line="50" pos:column="35"/></operator> <operator pos:line="50" pos:column="36">(<pos:position pos:line="50" pos:column="37"/></operator><literal type="number" pos:line="50" pos:column="37">8<pos:position pos:line="50" pos:column="38"/></literal> <operator pos:line="50" pos:column="39">+<pos:position pos:line="50" pos:column="40"/></operator> <literal type="number" pos:line="50" pos:column="41">2<pos:position pos:line="50" pos:column="42"/></literal><operator pos:line="50" pos:column="42">)<pos:position pos:line="50" pos:column="43"/></operator></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="52" pos:column="5">*<pos:position pos:line="52" pos:column="6"/></operator><name pos:line="52" pos:column="6">nreadp<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <literal type="number" pos:line="52" pos:column="15">0<pos:position pos:line="52" pos:column="16"/></literal></expr>;<pos:position pos:line="52" pos:column="17"/></expr_stmt>

    <return pos:line="54" pos:column="5">return <expr><name pos:line="54" pos:column="12">CURLE_OK<pos:position pos:line="54" pos:column="20"/></name></expr>;<pos:position pos:line="54" pos:column="21"/></return> <comment type="block" pos:line="54" pos:column="22">/* nothing was read */</comment>
  }<pos:position pos:line="55" pos:column="4"/></block></then>
  <elseif pos:line="56" pos:column="3">else <if pos:line="56" pos:column="8">if<condition pos:line="56" pos:column="10">(<expr><operator pos:line="56" pos:column="11">(<pos:position pos:line="56" pos:column="12"/></operator><name pos:line="56" pos:column="12">size_t<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">)<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">nread<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">&gt;<pos:position pos:line="56" pos:column="29"/></operator> <name pos:line="56" pos:column="27">buffersize<pos:position pos:line="56" pos:column="37"/></name></expr>)<pos:position pos:line="56" pos:column="38"/></condition><then pos:line="56" pos:column="38"> <block pos:line="56" pos:column="39">{
    <comment type="block" pos:line="57" pos:column="5">/* the read function returned a too large value */</comment>
    <expr_stmt><expr><operator pos:line="58" pos:column="5">*<pos:position pos:line="58" pos:column="6"/></operator><name pos:line="58" pos:column="6">nreadp<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">=<pos:position pos:line="58" pos:column="14"/></operator> <literal type="number" pos:line="58" pos:column="15">0<pos:position pos:line="58" pos:column="16"/></literal></expr>;<pos:position pos:line="58" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">failf<pos:position pos:line="59" pos:column="10"/></name><argument_list pos:line="59" pos:column="10">(<argument><expr><name pos:line="59" pos:column="11">data<pos:position pos:line="59" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="17">"read function returned funny value"<pos:position pos:line="59" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">CURLE_READ_ERROR<pos:position pos:line="60" pos:column="28"/></name></expr>;<pos:position pos:line="60" pos:column="29"/></return>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if></elseif></if>

  <if pos:line="63" pos:column="3">if<condition pos:line="63" pos:column="5">(<expr><operator pos:line="63" pos:column="6">!<pos:position pos:line="63" pos:column="7"/></operator><name><name pos:line="63" pos:column="7">data<pos:position pos:line="63" pos:column="11"/></name><operator pos:line="63" pos:column="11">-&gt;<pos:position pos:line="63" pos:column="16"/></operator><name pos:line="63" pos:column="13">req<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">.<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="17">forbidchunk<pos:position pos:line="63" pos:column="28"/></name></name> <operator pos:line="63" pos:column="29">&amp;&amp;<pos:position pos:line="63" pos:column="39"/></operator> <name><name pos:line="63" pos:column="32">data<pos:position pos:line="63" pos:column="36"/></name><operator pos:line="63" pos:column="36">-&gt;<pos:position pos:line="63" pos:column="41"/></operator><name pos:line="63" pos:column="38">req<pos:position pos:line="63" pos:column="41"/></name><operator pos:line="63" pos:column="41">.<pos:position pos:line="63" pos:column="42"/></operator><name pos:line="63" pos:column="42">upload_chunky<pos:position pos:line="63" pos:column="55"/></name></name></expr>)<pos:position pos:line="63" pos:column="56"/></condition><then pos:line="63" pos:column="56"> <block pos:line="63" pos:column="57">{
    <comment type="block" pos:line="64" pos:column="5">/* if chunked Transfer-Encoding
     *    build chunk:
     *
     *        &lt;HEX SIZE&gt; CRLF
     *        &lt;DATA&gt; CRLF
     */</comment>
    <comment type="block" pos:line="70" pos:column="5">/* On non-ASCII platforms the &lt;DATA&gt; may or may not be
       translated based on set.prefer_ascii while the protocol
       portion must always be translated to the network encoding.
       To further complicate matters, line end conversion might be
       done later on, so we need to prevent CRLFs from becoming
       CRCRLFs if that's the case.  To do this we use bare LFs
       here, knowing they'll become CRLFs later on.
     */</comment>

    <decl_stmt><decl><type><name pos:line="79" pos:column="5">char<pos:position pos:line="79" pos:column="9"/></name></type> <name><name pos:line="79" pos:column="10">hexbuffer<pos:position pos:line="79" pos:column="19"/></name><index pos:line="79" pos:column="19">[<expr><literal type="number" pos:line="79" pos:column="20">11<pos:position pos:line="79" pos:column="22"/></literal></expr>]<pos:position pos:line="79" pos:column="23"/></index></name></decl>;<pos:position pos:line="79" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="80" pos:column="5">const<pos:position pos:line="80" pos:column="10"/></specifier> <name pos:line="80" pos:column="11">char<pos:position pos:line="80" pos:column="15"/></name> <modifier pos:line="80" pos:column="16">*<pos:position pos:line="80" pos:column="17"/></modifier></type><name pos:line="80" pos:column="17">endofline_native<pos:position pos:line="80" pos:column="33"/></name></decl>;<pos:position pos:line="80" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="81" pos:column="5">const<pos:position pos:line="81" pos:column="10"/></specifier> <name pos:line="81" pos:column="11">char<pos:position pos:line="81" pos:column="15"/></name> <modifier pos:line="81" pos:column="16">*<pos:position pos:line="81" pos:column="17"/></modifier></type><name pos:line="81" pos:column="17">endofline_network<pos:position pos:line="81" pos:column="34"/></name></decl>;<pos:position pos:line="81" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="82" pos:column="5">int<pos:position pos:line="82" pos:column="8"/></name></type> <name pos:line="82" pos:column="9">hexlen<pos:position pos:line="82" pos:column="15"/></name></decl>;<pos:position pos:line="82" pos:column="16"/></decl_stmt>

    <if pos:line="84" pos:column="5">if<condition pos:line="84" pos:column="7">(
<cpp:ifdef pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">ifdef<pos:position pos:line="85" pos:column="7"/></cpp:directive> <name pos:line="85" pos:column="8">CURL_DO_LINEEND_CONV<pos:position pos:line="85" pos:column="28"/></name></cpp:ifdef>
       <expr><operator pos:line="86" pos:column="8">(<pos:position pos:line="86" pos:column="9"/></operator><name><name pos:line="86" pos:column="9">data<pos:position pos:line="86" pos:column="13"/></name><operator pos:line="86" pos:column="13">-&gt;<pos:position pos:line="86" pos:column="18"/></operator><name pos:line="86" pos:column="15">set<pos:position pos:line="86" pos:column="18"/></name><operator pos:line="86" pos:column="18">.<pos:position pos:line="86" pos:column="19"/></operator><name pos:line="86" pos:column="19">prefer_ascii<pos:position pos:line="86" pos:column="31"/></name></name><operator pos:line="86" pos:column="31">)<pos:position pos:line="86" pos:column="32"/></operator> <operator pos:line="86" pos:column="33">||<pos:position pos:line="86" pos:column="35"/></operator>
<cpp:endif pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">endif<pos:position pos:line="87" pos:column="7"/></cpp:directive></cpp:endif>
       <operator pos:line="88" pos:column="8">(<pos:position pos:line="88" pos:column="9"/></operator><name><name pos:line="88" pos:column="9">data<pos:position pos:line="88" pos:column="13"/></name><operator pos:line="88" pos:column="13">-&gt;<pos:position pos:line="88" pos:column="18"/></operator><name pos:line="88" pos:column="15">set<pos:position pos:line="88" pos:column="18"/></name><operator pos:line="88" pos:column="18">.<pos:position pos:line="88" pos:column="19"/></operator><name pos:line="88" pos:column="19">crlf<pos:position pos:line="88" pos:column="23"/></name></name><operator pos:line="88" pos:column="23">)<pos:position pos:line="88" pos:column="24"/></operator></expr>)<pos:position pos:line="88" pos:column="25"/></condition><then pos:line="88" pos:column="25"> <block pos:line="88" pos:column="26">{
      <comment type="block" pos:line="89" pos:column="7">/* \n will become \r\n later on */</comment>
      <expr_stmt><expr><name pos:line="90" pos:column="7">endofline_native<pos:position pos:line="90" pos:column="23"/></name>  <operator pos:line="90" pos:column="25">=<pos:position pos:line="90" pos:column="26"/></operator> <literal type="string" pos:line="90" pos:column="27">"\n"<pos:position pos:line="90" pos:column="31"/></literal></expr>;<pos:position pos:line="90" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="91" pos:column="7">endofline_network<pos:position pos:line="91" pos:column="24"/></name> <operator pos:line="91" pos:column="25">=<pos:position pos:line="91" pos:column="26"/></operator> <literal type="string" pos:line="91" pos:column="27">"\x0a"<pos:position pos:line="91" pos:column="33"/></literal></expr>;<pos:position pos:line="91" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></then>
    <else pos:line="93" pos:column="5">else <block pos:line="93" pos:column="10">{
      <expr_stmt><expr><name pos:line="94" pos:column="7">endofline_native<pos:position pos:line="94" pos:column="23"/></name>  <operator pos:line="94" pos:column="25">=<pos:position pos:line="94" pos:column="26"/></operator> <literal type="string" pos:line="94" pos:column="27">"\r\n"<pos:position pos:line="94" pos:column="33"/></literal></expr>;<pos:position pos:line="94" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="95" pos:column="7">endofline_network<pos:position pos:line="95" pos:column="24"/></name> <operator pos:line="95" pos:column="25">=<pos:position pos:line="95" pos:column="26"/></operator> <literal type="string" pos:line="95" pos:column="27">"\x0d\x0a"<pos:position pos:line="95" pos:column="37"/></literal></expr>;<pos:position pos:line="95" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="97" pos:column="5">hexlen<pos:position pos:line="97" pos:column="11"/></name> <operator pos:line="97" pos:column="12">=<pos:position pos:line="97" pos:column="13"/></operator> <call><name pos:line="97" pos:column="14">snprintf<pos:position pos:line="97" pos:column="22"/></name><argument_list pos:line="97" pos:column="22">(<argument><expr><name pos:line="97" pos:column="23">hexbuffer<pos:position pos:line="97" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="97" pos:column="34">sizeof<argument_list pos:line="97" pos:column="40">(<argument><expr><name pos:line="97" pos:column="41">hexbuffer<pos:position pos:line="97" pos:column="50"/></name></expr></argument>)<pos:position pos:line="97" pos:column="51"/></argument_list></sizeof></expr></argument>,
                      <argument><expr><literal type="string" pos:line="98" pos:column="23">"%x%s"<pos:position pos:line="98" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="31">nread<pos:position pos:line="98" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="38">endofline_native<pos:position pos:line="98" pos:column="54"/></name></expr></argument>)<pos:position pos:line="98" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="56"/></expr_stmt>

    <comment type="block" pos:line="100" pos:column="5">/* move buffer pointer */</comment>
    <expr_stmt><expr><name><name pos:line="101" pos:column="5">data<pos:position pos:line="101" pos:column="9"/></name><operator pos:line="101" pos:column="9">-&gt;<pos:position pos:line="101" pos:column="14"/></operator><name pos:line="101" pos:column="11">req<pos:position pos:line="101" pos:column="14"/></name><operator pos:line="101" pos:column="14">.<pos:position pos:line="101" pos:column="15"/></operator><name pos:line="101" pos:column="15">upload_fromhere<pos:position pos:line="101" pos:column="30"/></name></name> <operator pos:line="101" pos:column="31">-=<pos:position pos:line="101" pos:column="33"/></operator> <name pos:line="101" pos:column="34">hexlen<pos:position pos:line="101" pos:column="40"/></name></expr>;<pos:position pos:line="101" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="102" pos:column="5">nread<pos:position pos:line="102" pos:column="10"/></name> <operator pos:line="102" pos:column="11">+=<pos:position pos:line="102" pos:column="13"/></operator> <name pos:line="102" pos:column="14">hexlen<pos:position pos:line="102" pos:column="20"/></name></expr>;<pos:position pos:line="102" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="104" pos:column="5">/* copy the prefix to the buffer, leaving out the NUL */</comment>
    <expr_stmt><expr><call><name pos:line="105" pos:column="5">memcpy<pos:position pos:line="105" pos:column="11"/></name><argument_list pos:line="105" pos:column="11">(<argument><expr><name><name pos:line="105" pos:column="12">data<pos:position pos:line="105" pos:column="16"/></name><operator pos:line="105" pos:column="16">-&gt;<pos:position pos:line="105" pos:column="21"/></operator><name pos:line="105" pos:column="18">req<pos:position pos:line="105" pos:column="21"/></name><operator pos:line="105" pos:column="21">.<pos:position pos:line="105" pos:column="22"/></operator><name pos:line="105" pos:column="22">upload_fromhere<pos:position pos:line="105" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="39">hexbuffer<pos:position pos:line="105" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="50">hexlen<pos:position pos:line="105" pos:column="56"/></name></expr></argument>)<pos:position pos:line="105" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="58"/></expr_stmt>

    <comment type="block" pos:line="107" pos:column="5">/* always append ASCII CRLF to the data */</comment>
    <expr_stmt><expr><call><name pos:line="108" pos:column="5">memcpy<pos:position pos:line="108" pos:column="11"/></name><argument_list pos:line="108" pos:column="11">(<argument><expr><name><name pos:line="108" pos:column="12">data<pos:position pos:line="108" pos:column="16"/></name><operator pos:line="108" pos:column="16">-&gt;<pos:position pos:line="108" pos:column="21"/></operator><name pos:line="108" pos:column="18">req<pos:position pos:line="108" pos:column="21"/></name><operator pos:line="108" pos:column="21">.<pos:position pos:line="108" pos:column="22"/></operator><name pos:line="108" pos:column="22">upload_fromhere<pos:position pos:line="108" pos:column="37"/></name></name> <operator pos:line="108" pos:column="38">+<pos:position pos:line="108" pos:column="39"/></operator> <name pos:line="108" pos:column="40">nread<pos:position pos:line="108" pos:column="45"/></name></expr></argument>,
           <argument><expr><name pos:line="109" pos:column="12">endofline_network<pos:position pos:line="109" pos:column="29"/></name></expr></argument>,
           <argument><expr><call><name pos:line="110" pos:column="12">strlen<pos:position pos:line="110" pos:column="18"/></name><argument_list pos:line="110" pos:column="18">(<argument><expr><name pos:line="110" pos:column="19">endofline_network<pos:position pos:line="110" pos:column="36"/></name></expr></argument>)<pos:position pos:line="110" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="110" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="39"/></expr_stmt>

<cpp:ifdef pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">ifdef<pos:position pos:line="112" pos:column="7"/></cpp:directive> <name pos:line="112" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="112" pos:column="29"/></name></cpp:ifdef>
    <block pos:line="113" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="114" pos:column="7">CURLcode<pos:position pos:line="114" pos:column="15"/></name></type> <name pos:line="114" pos:column="16">result<pos:position pos:line="114" pos:column="22"/></name></decl>;<pos:position pos:line="114" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="115" pos:column="7">int<pos:position pos:line="115" pos:column="10"/></name></type> <name pos:line="115" pos:column="11">length<pos:position pos:line="115" pos:column="17"/></name></decl>;<pos:position pos:line="115" pos:column="18"/></decl_stmt>
      <if pos:line="116" pos:column="7">if<condition pos:line="116" pos:column="9">(<expr><name><name pos:line="116" pos:column="10">data<pos:position pos:line="116" pos:column="14"/></name><operator pos:line="116" pos:column="14">-&gt;<pos:position pos:line="116" pos:column="19"/></operator><name pos:line="116" pos:column="16">set<pos:position pos:line="116" pos:column="19"/></name><operator pos:line="116" pos:column="19">.<pos:position pos:line="116" pos:column="20"/></operator><name pos:line="116" pos:column="20">prefer_ascii<pos:position pos:line="116" pos:column="32"/></name></name></expr>)<pos:position pos:line="116" pos:column="33"/></condition><then pos:line="116" pos:column="33">
        <comment type="block" pos:line="117" pos:column="9">/* translate the protocol and data */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="118" pos:column="9">length<pos:position pos:line="118" pos:column="15"/></name> <operator pos:line="118" pos:column="16">=<pos:position pos:line="118" pos:column="17"/></operator> <name pos:line="118" pos:column="18">nread<pos:position pos:line="118" pos:column="23"/></name></expr>;<pos:position pos:line="118" pos:column="24"/></expr_stmt></block></then>
      <else pos:line="119" pos:column="7">else
        <comment type="block" pos:line="120" pos:column="9">/* just translate the protocol portion */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="9">length<pos:position pos:line="121" pos:column="15"/></name> <operator pos:line="121" pos:column="16">=<pos:position pos:line="121" pos:column="17"/></operator> <operator pos:line="121" pos:column="18">(<pos:position pos:line="121" pos:column="19"/></operator><name pos:line="121" pos:column="19">int<pos:position pos:line="121" pos:column="22"/></name><operator pos:line="121" pos:column="22">)<pos:position pos:line="121" pos:column="23"/></operator><call><name pos:line="121" pos:column="23">strlen<pos:position pos:line="121" pos:column="29"/></name><argument_list pos:line="121" pos:column="29">(<argument><expr><name pos:line="121" pos:column="30">hexbuffer<pos:position pos:line="121" pos:column="39"/></name></expr></argument>)<pos:position pos:line="121" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="41"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="122" pos:column="7">result<pos:position pos:line="122" pos:column="13"/></name> <operator pos:line="122" pos:column="14">=<pos:position pos:line="122" pos:column="15"/></operator> <call><name pos:line="122" pos:column="16">Curl_convert_to_network<pos:position pos:line="122" pos:column="39"/></name><argument_list pos:line="122" pos:column="39">(<argument><expr><name pos:line="122" pos:column="40">data<pos:position pos:line="122" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="46">data<pos:position pos:line="122" pos:column="50"/></name><operator pos:line="122" pos:column="50">-&gt;<pos:position pos:line="122" pos:column="55"/></operator><name pos:line="122" pos:column="52">req<pos:position pos:line="122" pos:column="55"/></name><operator pos:line="122" pos:column="55">.<pos:position pos:line="122" pos:column="56"/></operator><name pos:line="122" pos:column="56">upload_fromhere<pos:position pos:line="122" pos:column="71"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="123" pos:column="40">length<pos:position pos:line="123" pos:column="46"/></name></expr></argument>)<pos:position pos:line="123" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="48"/></expr_stmt>
      <comment type="block" pos:line="124" pos:column="7">/* Curl_convert_to_network calls failf if unsuccessful */</comment>
      <if pos:line="125" pos:column="7">if<condition pos:line="125" pos:column="9">(<expr><name pos:line="125" pos:column="10">result<pos:position pos:line="125" pos:column="16"/></name></expr>)<pos:position pos:line="125" pos:column="17"/></condition><then pos:line="125" pos:column="17">
        <block type="pseudo"><return pos:line="126" pos:column="9">return <expr><name pos:line="126" pos:column="16">result<pos:position pos:line="126" pos:column="22"/></name></expr>;<pos:position pos:line="126" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="127" pos:column="6"/></block>
<cpp:endif pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">endif<pos:position pos:line="128" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="128" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

    <if pos:line="130" pos:column="5">if<condition pos:line="130" pos:column="7">(<expr><operator pos:line="130" pos:column="8">(<pos:position pos:line="130" pos:column="9"/></operator><name pos:line="130" pos:column="9">nread<pos:position pos:line="130" pos:column="14"/></name> <operator pos:line="130" pos:column="15">-<pos:position pos:line="130" pos:column="16"/></operator> <name pos:line="130" pos:column="17">hexlen<pos:position pos:line="130" pos:column="23"/></name><operator pos:line="130" pos:column="23">)<pos:position pos:line="130" pos:column="24"/></operator> <operator pos:line="130" pos:column="25">==<pos:position pos:line="130" pos:column="27"/></operator> <literal type="number" pos:line="130" pos:column="28">0<pos:position pos:line="130" pos:column="29"/></literal></expr>)<pos:position pos:line="130" pos:column="30"/></condition><then pos:line="130" pos:column="30">
      <comment type="block" pos:line="131" pos:column="7">/* mark this as done once this chunk is transferred */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="132" pos:column="7">data<pos:position pos:line="132" pos:column="11"/></name><operator pos:line="132" pos:column="11">-&gt;<pos:position pos:line="132" pos:column="16"/></operator><name pos:line="132" pos:column="13">req<pos:position pos:line="132" pos:column="16"/></name><operator pos:line="132" pos:column="16">.<pos:position pos:line="132" pos:column="17"/></operator><name pos:line="132" pos:column="17">upload_done<pos:position pos:line="132" pos:column="28"/></name></name> <operator pos:line="132" pos:column="29">=<pos:position pos:line="132" pos:column="30"/></operator> <name pos:line="132" pos:column="31">TRUE<pos:position pos:line="132" pos:column="35"/></name></expr>;<pos:position pos:line="132" pos:column="36"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="134" pos:column="5">nread<pos:position pos:line="134" pos:column="10"/></name> <operator pos:line="134" pos:column="11">+=<pos:position pos:line="134" pos:column="13"/></operator> <operator pos:line="134" pos:column="14">(<pos:position pos:line="134" pos:column="15"/></operator><name pos:line="134" pos:column="15">int<pos:position pos:line="134" pos:column="18"/></name><operator pos:line="134" pos:column="18">)<pos:position pos:line="134" pos:column="19"/></operator><call><name pos:line="134" pos:column="19">strlen<pos:position pos:line="134" pos:column="25"/></name><argument_list pos:line="134" pos:column="25">(<argument><expr><name pos:line="134" pos:column="26">endofline_native<pos:position pos:line="134" pos:column="42"/></name></expr></argument>)<pos:position pos:line="134" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="44"/></expr_stmt> <comment type="block" pos:line="134" pos:column="45">/* for the added end of line */</comment>
  }<pos:position pos:line="135" pos:column="4"/></block></then>
<cpp:ifdef pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">ifdef<pos:position pos:line="136" pos:column="7"/></cpp:directive> <name pos:line="136" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="136" pos:column="29"/></name></cpp:ifdef>
  <elseif pos:line="137" pos:column="3">else <if pos:line="137" pos:column="8">if<condition pos:line="137" pos:column="10">(<expr><operator pos:line="137" pos:column="11">(<pos:position pos:line="137" pos:column="12"/></operator><name><name pos:line="137" pos:column="12">data<pos:position pos:line="137" pos:column="16"/></name><operator pos:line="137" pos:column="16">-&gt;<pos:position pos:line="137" pos:column="21"/></operator><name pos:line="137" pos:column="18">set<pos:position pos:line="137" pos:column="21"/></name><operator pos:line="137" pos:column="21">.<pos:position pos:line="137" pos:column="22"/></operator><name pos:line="137" pos:column="22">prefer_ascii<pos:position pos:line="137" pos:column="34"/></name></name><operator pos:line="137" pos:column="34">)<pos:position pos:line="137" pos:column="35"/></operator> <operator pos:line="137" pos:column="36">&amp;&amp;<pos:position pos:line="137" pos:column="46"/></operator> <operator pos:line="137" pos:column="39">(<pos:position pos:line="137" pos:column="40"/></operator><operator pos:line="137" pos:column="40">!<pos:position pos:line="137" pos:column="41"/></operator><name pos:line="137" pos:column="41">sending_http_headers<pos:position pos:line="137" pos:column="61"/></name><operator pos:line="137" pos:column="61">)<pos:position pos:line="137" pos:column="62"/></operator></expr>)<pos:position pos:line="137" pos:column="63"/></condition><then pos:line="137" pos:column="63"> <block pos:line="137" pos:column="64">{
    <decl_stmt><decl><type><name pos:line="138" pos:column="5">CURLcode<pos:position pos:line="138" pos:column="13"/></name></type> <name pos:line="138" pos:column="14">result<pos:position pos:line="138" pos:column="20"/></name></decl>;<pos:position pos:line="138" pos:column="21"/></decl_stmt>
    <expr_stmt><expr><name pos:line="139" pos:column="5">result<pos:position pos:line="139" pos:column="11"/></name> <operator pos:line="139" pos:column="12">=<pos:position pos:line="139" pos:column="13"/></operator> <call><name pos:line="139" pos:column="14">Curl_convert_to_network<pos:position pos:line="139" pos:column="37"/></name><argument_list pos:line="139" pos:column="37">(<argument><expr><name pos:line="139" pos:column="38">data<pos:position pos:line="139" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="44">data<pos:position pos:line="139" pos:column="48"/></name><operator pos:line="139" pos:column="48">-&gt;<pos:position pos:line="139" pos:column="53"/></operator><name pos:line="139" pos:column="50">req<pos:position pos:line="139" pos:column="53"/></name><operator pos:line="139" pos:column="53">.<pos:position pos:line="139" pos:column="54"/></operator><name pos:line="139" pos:column="54">upload_fromhere<pos:position pos:line="139" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="71">nread<pos:position pos:line="139" pos:column="76"/></name></expr></argument>)<pos:position pos:line="139" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="78"/></expr_stmt>
    <comment type="block" pos:line="140" pos:column="5">/* Curl_convert_to_network calls failf if unsuccessful */</comment>
    <if pos:line="141" pos:column="5">if<condition pos:line="141" pos:column="7">(<expr><name pos:line="141" pos:column="8">result<pos:position pos:line="141" pos:column="14"/></name></expr>)<pos:position pos:line="141" pos:column="15"/></condition><then pos:line="141" pos:column="15">
      <block type="pseudo"><return pos:line="142" pos:column="7">return <expr><name pos:line="142" pos:column="14">result<pos:position pos:line="142" pos:column="20"/></name></expr>;<pos:position pos:line="142" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="143" pos:column="4"/></block></then></if></elseif></if>
<cpp:endif pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">endif<pos:position pos:line="144" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="144" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

  <expr_stmt><expr><operator pos:line="146" pos:column="3">*<pos:position pos:line="146" pos:column="4"/></operator><name pos:line="146" pos:column="4">nreadp<pos:position pos:line="146" pos:column="10"/></name> <operator pos:line="146" pos:column="11">=<pos:position pos:line="146" pos:column="12"/></operator> <name pos:line="146" pos:column="13">nread<pos:position pos:line="146" pos:column="18"/></name></expr>;<pos:position pos:line="146" pos:column="19"/></expr_stmt>

  <return pos:line="148" pos:column="3">return <expr><name pos:line="148" pos:column="10">CURLE_OK<pos:position pos:line="148" pos:column="18"/></name></expr>;<pos:position pos:line="148" pos:column="19"/></return>
}<pos:position pos:line="149" pos:column="2"/></block></function></unit>
