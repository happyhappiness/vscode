<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_119_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ProcessRequest<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">httprequest<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">req<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">line<pos:position pos:line="3" pos:column="13"/></name><init pos:line="3" pos:column="13">=<expr><name><name pos:line="3" pos:column="14">req<pos:position pos:line="3" pos:column="17"/></name><operator pos:line="3" pos:column="17">-&gt;<pos:position pos:line="3" pos:column="22"/></operator><name pos:line="3" pos:column="19">reqbuf<pos:position pos:line="3" pos:column="25"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">chunked<pos:position pos:line="4" pos:column="15"/></name><init pos:line="4" pos:column="15">=<expr><name pos:line="4" pos:column="16">FALSE<pos:position pos:line="4" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><name pos:line="5" pos:column="10">char<pos:position pos:line="5" pos:column="14"/></name></type> <name><name pos:line="5" pos:column="15">request<pos:position pos:line="5" pos:column="22"/></name><index pos:line="5" pos:column="22">[<expr><name pos:line="5" pos:column="23">REQUEST_KEYWORD_SIZE<pos:position pos:line="5" pos:column="43"/></name></expr>]<pos:position pos:line="5" pos:column="44"/></index></name></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="6" pos:column="3">static<pos:position pos:line="6" pos:column="9"/></specifier> <type><name pos:line="6" pos:column="10">char<pos:position pos:line="6" pos:column="14"/></name></type> <name><name pos:line="6" pos:column="15">doc<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><name pos:line="6" pos:column="19">MAXDOCNAMELEN<pos:position pos:line="6" pos:column="32"/></name></expr>]<pos:position pos:line="6" pos:column="33"/></index></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">logbuf<pos:position pos:line="7" pos:column="14"/></name><index pos:line="7" pos:column="14">[<expr><literal type="number" pos:line="7" pos:column="15">256<pos:position pos:line="7" pos:column="18"/></literal></expr>]<pos:position pos:line="7" pos:column="19"/></index></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">prot_major<pos:position pos:line="8" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="19">prot_minor<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">end<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">end<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <call><name pos:line="10" pos:column="9">strstr<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name><name pos:line="10" pos:column="16">req<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">reqbuf<pos:position pos:line="10" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="29">END_OF_HEADERS<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* try to figure out the request characteristics as soon as possible, but
     only once! */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">(<pos:position pos:line="14" pos:column="7"/></operator><name><name pos:line="14" pos:column="7">req<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">testno<pos:position pos:line="14" pos:column="18"/></name></name> <operator pos:line="14" pos:column="19">==<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">DOCNUMBER_NOTHING<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">)<pos:position pos:line="14" pos:column="40"/></operator> <operator pos:line="14" pos:column="41">&amp;&amp;<pos:position pos:line="14" pos:column="51"/></operator>
     <call><name pos:line="15" pos:column="6">sscanf<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">line<pos:position pos:line="15" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="19">"%"<pos:position pos:line="15" pos:column="22"/></literal> <name pos:line="15" pos:column="23">REQBUFSIZ_TXT<pos:position pos:line="15" pos:column="36"/></name><literal type="string" pos:line="15" pos:column="36">"s %"<pos:position pos:line="15" pos:column="41"/></literal> <name pos:line="15" pos:column="42">MAXDOCNAMELEN_TXT<pos:position pos:line="15" pos:column="59"/></name> <literal type="string" pos:line="15" pos:column="60">"s HTTP/%d.%d"<pos:position pos:line="15" pos:column="74"/></literal></expr></argument>,
            <argument><expr><name pos:line="16" pos:column="13">request<pos:position pos:line="16" pos:column="20"/></name></expr></argument>,
            <argument><expr><name pos:line="17" pos:column="13">doc<pos:position pos:line="17" pos:column="16"/></name></expr></argument>,
            <argument><expr><operator pos:line="18" pos:column="13">&amp;<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="14">prot_major<pos:position pos:line="18" pos:column="24"/></name></expr></argument>,
            <argument><expr><operator pos:line="19" pos:column="13">&amp;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="14">prot_minor<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call> <operator pos:line="19" pos:column="26">==<pos:position pos:line="19" pos:column="28"/></operator> <literal type="number" pos:line="19" pos:column="29">4<pos:position pos:line="19" pos:column="30"/></literal></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31"> <block pos:line="19" pos:column="32">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name> <modifier pos:line="20" pos:column="10">*<pos:position pos:line="20" pos:column="11"/></modifier></type><name pos:line="20" pos:column="11">ptr<pos:position pos:line="20" pos:column="14"/></name></decl>;<pos:position pos:line="20" pos:column="15"/></decl_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* find the last slash */</comment>
    <expr_stmt><expr><name pos:line="23" pos:column="5">ptr<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <call><name pos:line="23" pos:column="11">strrchr<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">doc<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="24">'/'<pos:position pos:line="23" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* get the number after it */</comment>
    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><name pos:line="26" pos:column="8">ptr<pos:position pos:line="26" pos:column="11"/></name></expr>)<pos:position pos:line="26" pos:column="12"/></condition><then pos:line="26" pos:column="12"> <block pos:line="26" pos:column="13">{
      <decl_stmt><decl><type><name pos:line="27" pos:column="7">FILE<pos:position pos:line="27" pos:column="11"/></name> <modifier pos:line="27" pos:column="12">*<pos:position pos:line="27" pos:column="13"/></modifier></type><name pos:line="27" pos:column="13">stream<pos:position pos:line="27" pos:column="19"/></name></decl>;<pos:position pos:line="27" pos:column="20"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="28" pos:column="7">char<pos:position pos:line="28" pos:column="11"/></name> <modifier pos:line="28" pos:column="12">*<pos:position pos:line="28" pos:column="13"/></modifier></type><name pos:line="28" pos:column="13">filename<pos:position pos:line="28" pos:column="21"/></name></decl>;<pos:position pos:line="28" pos:column="22"/></decl_stmt>

      <if pos:line="30" pos:column="7">if<condition pos:line="30" pos:column="9">(<expr><operator pos:line="30" pos:column="10">(<pos:position pos:line="30" pos:column="11"/></operator><call><name pos:line="30" pos:column="11">strlen<pos:position pos:line="30" pos:column="17"/></name><argument_list pos:line="30" pos:column="17">(<argument><expr><name pos:line="30" pos:column="18">doc<pos:position pos:line="30" pos:column="21"/></name></expr></argument>)<pos:position pos:line="30" pos:column="22"/></argument_list></call> <operator pos:line="30" pos:column="23">+<pos:position pos:line="30" pos:column="24"/></operator> <call><name pos:line="30" pos:column="25">strlen<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">request<pos:position pos:line="30" pos:column="39"/></name></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call><operator pos:line="30" pos:column="40">)<pos:position pos:line="30" pos:column="41"/></operator> <operator pos:line="30" pos:column="42">&lt;<pos:position pos:line="30" pos:column="46"/></operator> <literal type="number" pos:line="30" pos:column="44">200<pos:position pos:line="30" pos:column="47"/></literal></expr>)<pos:position pos:line="30" pos:column="48"/></condition><then pos:line="30" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="9">sprintf<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">logbuf<pos:position pos:line="31" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="25">"Got request: %s %s HTTP/%d.%d"<pos:position pos:line="31" pos:column="56"/></literal></expr></argument>,
                <argument><expr><name pos:line="32" pos:column="17">request<pos:position pos:line="32" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="26">doc<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="31">prot_major<pos:position pos:line="32" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="43">prot_minor<pos:position pos:line="32" pos:column="53"/></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt></block></then>
      <else pos:line="33" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">sprintf<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">logbuf<pos:position pos:line="34" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="25">"Got a *HUGE* request HTTP/%d.%d"<pos:position pos:line="34" pos:column="58"/></literal></expr></argument>,
                <argument><expr><name pos:line="35" pos:column="17">prot_major<pos:position pos:line="35" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="29">prot_minor<pos:position pos:line="35" pos:column="39"/></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt></block></else></if>
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">logmsg<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><name pos:line="36" pos:column="14">logbuf<pos:position pos:line="36" pos:column="20"/></name></expr></argument>)<pos:position pos:line="36" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="22"/></expr_stmt>

      <if pos:line="38" pos:column="7">if<condition pos:line="38" pos:column="9">(<expr><operator pos:line="38" pos:column="10">!<pos:position pos:line="38" pos:column="11"/></operator><call><name pos:line="38" pos:column="11">strncmp<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">(<argument><expr><literal type="string" pos:line="38" pos:column="19">"/verifiedserver"<pos:position pos:line="38" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="38">ptr<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="43">15<pos:position pos:line="38" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="47"/></condition><then pos:line="38" pos:column="47"> <block pos:line="38" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">logmsg<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="string" pos:line="39" pos:column="16">"Are-we-friendly question received"<pos:position pos:line="39" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="40" pos:column="9">req<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">-&gt;<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="14">testno<pos:position pos:line="40" pos:column="20"/></name></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <name pos:line="40" pos:column="23">DOCNUMBER_WERULEZ<pos:position pos:line="40" pos:column="40"/></name></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><literal type="number" pos:line="41" pos:column="16">1<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return> <comment type="block" pos:line="41" pos:column="19">/* done */</comment>
      }<pos:position pos:line="42" pos:column="8"/></block></then></if>

      <if pos:line="44" pos:column="7">if<condition pos:line="44" pos:column="9">(<expr><operator pos:line="44" pos:column="10">!<pos:position pos:line="44" pos:column="11"/></operator><call><name pos:line="44" pos:column="11">strncmp<pos:position pos:line="44" pos:column="18"/></name><argument_list pos:line="44" pos:column="18">(<argument><expr><literal type="string" pos:line="44" pos:column="19">"/quit"<pos:position pos:line="44" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="28">ptr<pos:position pos:line="44" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="33">15<pos:position pos:line="44" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="37"/></condition><then pos:line="44" pos:column="37"> <block pos:line="44" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">logmsg<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><literal type="string" pos:line="45" pos:column="16">"Request-to-quit received"<pos:position pos:line="45" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">req<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">-&gt;<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="14">testno<pos:position pos:line="46" pos:column="20"/></name></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">DOCNUMBER_QUIT<pos:position pos:line="46" pos:column="37"/></name></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>
        <return pos:line="47" pos:column="9">return <expr><literal type="number" pos:line="47" pos:column="16">1<pos:position pos:line="47" pos:column="17"/></literal></expr>;<pos:position pos:line="47" pos:column="18"/></return> <comment type="block" pos:line="47" pos:column="19">/* done */</comment>
      }<pos:position pos:line="48" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="50" pos:column="7">ptr<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">++<pos:position pos:line="50" pos:column="12"/></operator></expr>;<pos:position pos:line="50" pos:column="13"/></expr_stmt> <comment type="block" pos:line="50" pos:column="14">/* skip the slash */</comment>

      <expr_stmt><expr><name><name pos:line="52" pos:column="7">req<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">testno<pos:position pos:line="52" pos:column="18"/></name></name> <operator pos:line="52" pos:column="19">=<pos:position pos:line="52" pos:column="20"/></operator> <call><name pos:line="52" pos:column="21">strtol<pos:position pos:line="52" pos:column="27"/></name><argument_list pos:line="52" pos:column="27">(<argument><expr><name pos:line="52" pos:column="28">ptr<pos:position pos:line="52" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="33">&amp;<pos:position pos:line="52" pos:column="38"/></operator><name pos:line="52" pos:column="34">ptr<pos:position pos:line="52" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="39">10<pos:position pos:line="52" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>

      <if pos:line="54" pos:column="7">if<condition pos:line="54" pos:column="9">(<expr><name><name pos:line="54" pos:column="10">req<pos:position pos:line="54" pos:column="13"/></name><operator pos:line="54" pos:column="13">-&gt;<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="15">testno<pos:position pos:line="54" pos:column="21"/></name></name> <operator pos:line="54" pos:column="22">&gt;<pos:position pos:line="54" pos:column="26"/></operator> <literal type="number" pos:line="54" pos:column="24">10000<pos:position pos:line="54" pos:column="29"/></literal></expr>)<pos:position pos:line="54" pos:column="30"/></condition><then pos:line="54" pos:column="30"> <block pos:line="54" pos:column="31">{
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">req<pos:position pos:line="55" pos:column="12"/></name><operator pos:line="55" pos:column="12">-&gt;<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="14">partno<pos:position pos:line="55" pos:column="20"/></name></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <name><name pos:line="55" pos:column="23">req<pos:position pos:line="55" pos:column="26"/></name><operator pos:line="55" pos:column="26">-&gt;<pos:position pos:line="55" pos:column="31"/></operator><name pos:line="55" pos:column="28">testno<pos:position pos:line="55" pos:column="34"/></name></name> <operator pos:line="55" pos:column="35">%<pos:position pos:line="55" pos:column="36"/></operator> <literal type="number" pos:line="55" pos:column="37">10000<pos:position pos:line="55" pos:column="42"/></literal></expr>;<pos:position pos:line="55" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">req<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">-&gt;<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="14">testno<pos:position pos:line="56" pos:column="20"/></name></name> <operator pos:line="56" pos:column="21">/=<pos:position pos:line="56" pos:column="23"/></operator> <literal type="number" pos:line="56" pos:column="24">10000<pos:position pos:line="56" pos:column="29"/></literal></expr>;<pos:position pos:line="56" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="57" pos:column="8"/></block></then>
      <else pos:line="58" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="59" pos:column="9">req<pos:position pos:line="59" pos:column="12"/></name><operator pos:line="59" pos:column="12">-&gt;<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="14">partno<pos:position pos:line="59" pos:column="20"/></name></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <literal type="number" pos:line="59" pos:column="23">0<pos:position pos:line="59" pos:column="24"/></literal></expr>;<pos:position pos:line="59" pos:column="25"/></expr_stmt></block></else></if>

      <expr_stmt><expr><call><name pos:line="61" pos:column="7">sprintf<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><name pos:line="61" pos:column="15">logbuf<pos:position pos:line="61" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="23">"Requested test number %ld part %ld"<pos:position pos:line="61" pos:column="59"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="62" pos:column="15">req<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">-&gt;<pos:position pos:line="62" pos:column="23"/></operator><name pos:line="62" pos:column="20">testno<pos:position pos:line="62" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="28">req<pos:position pos:line="62" pos:column="31"/></name><operator pos:line="62" pos:column="31">-&gt;<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="33">partno<pos:position pos:line="62" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="41"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="64" pos:column="7">logmsg<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><name pos:line="64" pos:column="14">logbuf<pos:position pos:line="64" pos:column="20"/></name></expr></argument>)<pos:position pos:line="64" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="22"/></expr_stmt>

      <expr_stmt><expr><name pos:line="66" pos:column="7">filename<pos:position pos:line="66" pos:column="15"/></name> <operator pos:line="66" pos:column="16">=<pos:position pos:line="66" pos:column="17"/></operator> <call><name pos:line="66" pos:column="18">test2file<pos:position pos:line="66" pos:column="27"/></name><argument_list pos:line="66" pos:column="27">(<argument><expr><name><name pos:line="66" pos:column="28">req<pos:position pos:line="66" pos:column="31"/></name><operator pos:line="66" pos:column="31">-&gt;<pos:position pos:line="66" pos:column="36"/></operator><name pos:line="66" pos:column="33">testno<pos:position pos:line="66" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="41"/></expr_stmt>

      <expr_stmt><expr><name pos:line="68" pos:column="7">stream<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">=<pos:position pos:line="68" pos:column="14"/></operator><call><name pos:line="68" pos:column="14">fopen<pos:position pos:line="68" pos:column="19"/></name><argument_list pos:line="68" pos:column="19">(<argument><expr><name pos:line="68" pos:column="20">filename<pos:position pos:line="68" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="30">"rb"<pos:position pos:line="68" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="36"/></expr_stmt>
      <if pos:line="69" pos:column="7">if<condition pos:line="69" pos:column="9">(<expr><operator pos:line="69" pos:column="10">!<pos:position pos:line="69" pos:column="11"/></operator><name pos:line="69" pos:column="11">stream<pos:position pos:line="69" pos:column="17"/></name></expr>)<pos:position pos:line="69" pos:column="18"/></condition><then pos:line="69" pos:column="18"> <block pos:line="69" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">logmsg<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><literal type="string" pos:line="70" pos:column="16">"Couldn't open test file %d"<pos:position pos:line="70" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="46">req<pos:position pos:line="70" pos:column="49"/></name><operator pos:line="70" pos:column="49">-&gt;<pos:position pos:line="70" pos:column="54"/></operator><name pos:line="70" pos:column="51">testno<pos:position pos:line="70" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="71" pos:column="9">req<pos:position pos:line="71" pos:column="12"/></name><operator pos:line="71" pos:column="12">-&gt;<pos:position pos:line="71" pos:column="17"/></operator><name pos:line="71" pos:column="14">open<pos:position pos:line="71" pos:column="18"/></name></name> <operator pos:line="71" pos:column="19">=<pos:position pos:line="71" pos:column="20"/></operator> <name pos:line="71" pos:column="21">FALSE<pos:position pos:line="71" pos:column="26"/></name></expr>;<pos:position pos:line="71" pos:column="27"/></expr_stmt> <comment type="block" pos:line="71" pos:column="28">/* closes connection */</comment>
        <return pos:line="72" pos:column="9">return <expr><literal type="number" pos:line="72" pos:column="16">0<pos:position pos:line="72" pos:column="17"/></literal></expr>;<pos:position pos:line="72" pos:column="18"/></return>
      }<pos:position pos:line="73" pos:column="8"/></block></then>
      <else pos:line="74" pos:column="7">else <block pos:line="74" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="75" pos:column="9">char<pos:position pos:line="75" pos:column="13"/></name> <modifier pos:line="75" pos:column="14">*<pos:position pos:line="75" pos:column="15"/></modifier></type><name pos:line="75" pos:column="15">cmd<pos:position pos:line="75" pos:column="18"/></name> <init pos:line="75" pos:column="19">= <expr><name pos:line="75" pos:column="21">NULL<pos:position pos:line="75" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="75" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="76" pos:column="9">size_t<pos:position pos:line="76" pos:column="15"/></name></type> <name pos:line="76" pos:column="16">cmdsize<pos:position pos:line="76" pos:column="23"/></name> <init pos:line="76" pos:column="24">= <expr><literal type="number" pos:line="76" pos:column="26">0<pos:position pos:line="76" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="76" pos:column="28"/></decl_stmt>

        <comment type="block" pos:line="78" pos:column="9">/* get the custom server control "commands" */</comment>
        <expr_stmt><expr><name pos:line="79" pos:column="9">cmd<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">=<pos:position pos:line="79" pos:column="14"/></operator> <operator pos:line="79" pos:column="15">(<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="16">char<pos:position pos:line="79" pos:column="20"/></name> <operator pos:line="79" pos:column="21">*<pos:position pos:line="79" pos:column="22"/></operator><operator pos:line="79" pos:column="22">)<pos:position pos:line="79" pos:column="23"/></operator><call><name pos:line="79" pos:column="23">spitout<pos:position pos:line="79" pos:column="30"/></name><argument_list pos:line="79" pos:column="30">(<argument><expr><name pos:line="79" pos:column="31">stream<pos:position pos:line="79" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="39">"reply"<pos:position pos:line="79" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="48">"servercmd"<pos:position pos:line="79" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="79" pos:column="61">&amp;<pos:position pos:line="79" pos:column="66"/></operator><name pos:line="79" pos:column="62">cmdsize<pos:position pos:line="79" pos:column="69"/></name></expr></argument>)<pos:position pos:line="79" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">fclose<pos:position pos:line="80" pos:column="15"/></name><argument_list pos:line="80" pos:column="15">(<argument><expr><name pos:line="80" pos:column="16">stream<pos:position pos:line="80" pos:column="22"/></name></expr></argument>)<pos:position pos:line="80" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="24"/></expr_stmt>

        <if pos:line="82" pos:column="9">if<condition pos:line="82" pos:column="11">(<expr><name pos:line="82" pos:column="12">cmdsize<pos:position pos:line="82" pos:column="19"/></name></expr>)<pos:position pos:line="82" pos:column="20"/></condition><then pos:line="82" pos:column="20"> <block pos:line="82" pos:column="21">{
          <expr_stmt><expr><call><name pos:line="83" pos:column="11">logmsg<pos:position pos:line="83" pos:column="17"/></name><argument_list pos:line="83" pos:column="17">(<argument><expr><literal type="string" pos:line="83" pos:column="18">"Found a reply-servercmd section!"<pos:position pos:line="83" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="54"/></expr_stmt>

          <if pos:line="85" pos:column="11">if<condition pos:line="85" pos:column="13">(<expr><operator pos:line="85" pos:column="14">!<pos:position pos:line="85" pos:column="15"/></operator><call><name pos:line="85" pos:column="15">strncmp<pos:position pos:line="85" pos:column="22"/></name><argument_list pos:line="85" pos:column="22">(<argument><expr><name pos:line="85" pos:column="23">CMD_AUTH_REQUIRED<pos:position pos:line="85" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="42">cmd<pos:position pos:line="85" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="85" pos:column="47">strlen<pos:position pos:line="85" pos:column="53"/></name><argument_list pos:line="85" pos:column="53">(<argument><expr><name pos:line="85" pos:column="54">CMD_AUTH_REQUIRED<pos:position pos:line="85" pos:column="71"/></name></expr></argument>)<pos:position pos:line="85" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="74"/></condition><then pos:line="85" pos:column="74"> <block pos:line="85" pos:column="75">{
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">logmsg<pos:position pos:line="86" pos:column="19"/></name><argument_list pos:line="86" pos:column="19">(<argument><expr><literal type="string" pos:line="86" pos:column="20">"instructed to require authorization header"<pos:position pos:line="86" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="87" pos:column="13">req<pos:position pos:line="87" pos:column="16"/></name><operator pos:line="87" pos:column="16">-&gt;<pos:position pos:line="87" pos:column="21"/></operator><name pos:line="87" pos:column="18">auth_req<pos:position pos:line="87" pos:column="26"/></name></name> <operator pos:line="87" pos:column="27">=<pos:position pos:line="87" pos:column="28"/></operator> <name pos:line="87" pos:column="29">TRUE<pos:position pos:line="87" pos:column="33"/></name></expr>;<pos:position pos:line="87" pos:column="34"/></expr_stmt>
          }<pos:position pos:line="88" pos:column="12"/></block></then></if>
          <expr_stmt><expr><call><name pos:line="89" pos:column="11">free<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><name pos:line="89" pos:column="16">cmd<pos:position pos:line="89" pos:column="19"/></name></expr></argument>)<pos:position pos:line="89" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="90" pos:column="10"/></block></then></if>
      }<pos:position pos:line="91" pos:column="8"/></block></else></if>
    }<pos:position pos:line="92" pos:column="6"/></block></then>
    <else pos:line="93" pos:column="5">else <block pos:line="93" pos:column="10">{
      <if pos:line="94" pos:column="7">if<condition pos:line="94" pos:column="9">(<expr><call><name pos:line="94" pos:column="10">sscanf<pos:position pos:line="94" pos:column="16"/></name><argument_list pos:line="94" pos:column="16">(<argument><expr><name><name pos:line="94" pos:column="17">req<pos:position pos:line="94" pos:column="20"/></name><operator pos:line="94" pos:column="20">-&gt;<pos:position pos:line="94" pos:column="25"/></operator><name pos:line="94" pos:column="22">reqbuf<pos:position pos:line="94" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="30">"CONNECT %"<pos:position pos:line="94" pos:column="41"/></literal> <name pos:line="94" pos:column="42">MAXDOCNAMELEN_TXT<pos:position pos:line="94" pos:column="59"/></name> <literal type="string" pos:line="94" pos:column="60">"s HTTP/%d.%d"<pos:position pos:line="94" pos:column="74"/></literal></expr></argument>,
                <argument><expr><name pos:line="95" pos:column="17">doc<pos:position pos:line="95" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="22">&amp;<pos:position pos:line="95" pos:column="27"/></operator><name pos:line="95" pos:column="23">prot_major<pos:position pos:line="95" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="35">&amp;<pos:position pos:line="95" pos:column="40"/></operator><name pos:line="95" pos:column="36">prot_minor<pos:position pos:line="95" pos:column="46"/></name></expr></argument>)<pos:position pos:line="95" pos:column="47"/></argument_list></call> <operator pos:line="95" pos:column="48">==<pos:position pos:line="95" pos:column="50"/></operator> <literal type="number" pos:line="95" pos:column="51">3<pos:position pos:line="95" pos:column="52"/></literal></expr>)<pos:position pos:line="95" pos:column="53"/></condition><then pos:line="95" pos:column="53"> <block pos:line="95" pos:column="54">{
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">sprintf<pos:position pos:line="96" pos:column="16"/></name><argument_list pos:line="96" pos:column="16">(<argument><expr><name pos:line="96" pos:column="17">logbuf<pos:position pos:line="96" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="25">"Receiced a CONNECT %s HTTP/%d.%d request"<pos:position pos:line="96" pos:column="67"/></literal></expr></argument>,
                <argument><expr><name pos:line="97" pos:column="17">doc<pos:position pos:line="97" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="22">prot_major<pos:position pos:line="97" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="34">prot_minor<pos:position pos:line="97" pos:column="44"/></name></expr></argument>)<pos:position pos:line="97" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">logmsg<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><name pos:line="98" pos:column="16">logbuf<pos:position pos:line="98" pos:column="22"/></name></expr></argument>)<pos:position pos:line="98" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="24"/></expr_stmt>

        <if pos:line="100" pos:column="9">if<condition pos:line="100" pos:column="11">(<expr><name pos:line="100" pos:column="12">prot_major<pos:position pos:line="100" pos:column="22"/></name><operator pos:line="100" pos:column="22">*<pos:position pos:line="100" pos:column="23"/></operator><literal type="number" pos:line="100" pos:column="23">10<pos:position pos:line="100" pos:column="25"/></literal><operator pos:line="100" pos:column="25">+<pos:position pos:line="100" pos:column="26"/></operator><name pos:line="100" pos:column="26">prot_minor<pos:position pos:line="100" pos:column="36"/></name> <operator pos:line="100" pos:column="37">==<pos:position pos:line="100" pos:column="39"/></operator> <literal type="number" pos:line="100" pos:column="40">10<pos:position pos:line="100" pos:column="42"/></literal></expr>)<pos:position pos:line="100" pos:column="43"/></condition><then pos:line="100" pos:column="43">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="101" pos:column="11">req<pos:position pos:line="101" pos:column="14"/></name><operator pos:line="101" pos:column="14">-&gt;<pos:position pos:line="101" pos:column="19"/></operator><name pos:line="101" pos:column="16">open<pos:position pos:line="101" pos:column="20"/></name></name> <operator pos:line="101" pos:column="21">=<pos:position pos:line="101" pos:column="22"/></operator> <name pos:line="101" pos:column="23">FALSE<pos:position pos:line="101" pos:column="28"/></name></expr>;<pos:position pos:line="101" pos:column="29"/></expr_stmt></block></then></if> <comment type="block" pos:line="101" pos:column="30">/* HTTP 1.0 closes connection by default */</comment>

        <if pos:line="103" pos:column="9">if<condition pos:line="103" pos:column="11">(<expr><operator pos:line="103" pos:column="12">!<pos:position pos:line="103" pos:column="13"/></operator><call><name pos:line="103" pos:column="13">strncmp<pos:position pos:line="103" pos:column="20"/></name><argument_list pos:line="103" pos:column="20">(<argument><expr><name pos:line="103" pos:column="21">doc<pos:position pos:line="103" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="26">"bad"<pos:position pos:line="103" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="33">3<pos:position pos:line="103" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="103" pos:column="36"/></condition><then pos:line="103" pos:column="36">
          <comment type="block" pos:line="104" pos:column="11">/* if the host name starts with bad, we fake an error here */</comment>
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="105" pos:column="11">req<pos:position pos:line="105" pos:column="14"/></name><operator pos:line="105" pos:column="14">-&gt;<pos:position pos:line="105" pos:column="19"/></operator><name pos:line="105" pos:column="16">testno<pos:position pos:line="105" pos:column="22"/></name></name> <operator pos:line="105" pos:column="23">=<pos:position pos:line="105" pos:column="24"/></operator> <name pos:line="105" pos:column="25">DOCNUMBER_BADCONNECT<pos:position pos:line="105" pos:column="45"/></name></expr>;<pos:position pos:line="105" pos:column="46"/></expr_stmt></block></then>
        <elseif pos:line="106" pos:column="9">else <if pos:line="106" pos:column="14">if<condition pos:line="106" pos:column="16">(<expr><operator pos:line="106" pos:column="17">!<pos:position pos:line="106" pos:column="18"/></operator><call><name pos:line="106" pos:column="18">strncmp<pos:position pos:line="106" pos:column="25"/></name><argument_list pos:line="106" pos:column="25">(<argument><expr><name pos:line="106" pos:column="26">doc<pos:position pos:line="106" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="31">"test"<pos:position pos:line="106" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="39">4<pos:position pos:line="106" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="42"/></condition><then pos:line="106" pos:column="42"> <block pos:line="106" pos:column="43">{
          <comment type="block" pos:line="107" pos:column="11">/* if the host name starts with test, the port number used in the
             CONNECT line will be used as test number! */</comment>
          <decl_stmt><decl><type><name pos:line="109" pos:column="11">char<pos:position pos:line="109" pos:column="15"/></name> <modifier pos:line="109" pos:column="16">*<pos:position pos:line="109" pos:column="17"/></modifier></type><name pos:line="109" pos:column="17">ptr<pos:position pos:line="109" pos:column="20"/></name> <init pos:line="109" pos:column="21">= <expr><call><name pos:line="109" pos:column="23">strchr<pos:position pos:line="109" pos:column="29"/></name><argument_list pos:line="109" pos:column="29">(<argument><expr><name pos:line="109" pos:column="30">doc<pos:position pos:line="109" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="109" pos:column="35">':'<pos:position pos:line="109" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="109" pos:column="40"/></decl_stmt>
          <if pos:line="110" pos:column="11">if<condition pos:line="110" pos:column="13">(<expr><name pos:line="110" pos:column="14">ptr<pos:position pos:line="110" pos:column="17"/></name></expr>)<pos:position pos:line="110" pos:column="18"/></condition><then pos:line="110" pos:column="18">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="111" pos:column="13">req<pos:position pos:line="111" pos:column="16"/></name><operator pos:line="111" pos:column="16">-&gt;<pos:position pos:line="111" pos:column="21"/></operator><name pos:line="111" pos:column="18">testno<pos:position pos:line="111" pos:column="24"/></name></name> <operator pos:line="111" pos:column="25">=<pos:position pos:line="111" pos:column="26"/></operator> <call><name pos:line="111" pos:column="27">atoi<pos:position pos:line="111" pos:column="31"/></name><argument_list pos:line="111" pos:column="31">(<argument><expr><name pos:line="111" pos:column="32">ptr<pos:position pos:line="111" pos:column="35"/></name><operator pos:line="111" pos:column="35">+<pos:position pos:line="111" pos:column="36"/></operator><literal type="number" pos:line="111" pos:column="36">1<pos:position pos:line="111" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="39"/></expr_stmt></block></then>
          <else pos:line="112" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="113" pos:column="13">req<pos:position pos:line="113" pos:column="16"/></name><operator pos:line="113" pos:column="16">-&gt;<pos:position pos:line="113" pos:column="21"/></operator><name pos:line="113" pos:column="18">testno<pos:position pos:line="113" pos:column="24"/></name></name> <operator pos:line="113" pos:column="25">=<pos:position pos:line="113" pos:column="26"/></operator> <name pos:line="113" pos:column="27">DOCNUMBER_CONNECT<pos:position pos:line="113" pos:column="44"/></name></expr>;<pos:position pos:line="113" pos:column="45"/></expr_stmt></block></else></if>
        }<pos:position pos:line="114" pos:column="10"/></block></then></if></elseif>
        <else pos:line="115" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="116" pos:column="11">req<pos:position pos:line="116" pos:column="14"/></name><operator pos:line="116" pos:column="14">-&gt;<pos:position pos:line="116" pos:column="19"/></operator><name pos:line="116" pos:column="16">testno<pos:position pos:line="116" pos:column="22"/></name></name> <operator pos:line="116" pos:column="23">=<pos:position pos:line="116" pos:column="24"/></operator> <name pos:line="116" pos:column="25">DOCNUMBER_CONNECT<pos:position pos:line="116" pos:column="42"/></name></expr>;<pos:position pos:line="116" pos:column="43"/></expr_stmt></block></else></if>
      }<pos:position pos:line="117" pos:column="8"/></block></then>
      <else pos:line="118" pos:column="7">else <block pos:line="118" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="119" pos:column="9">logmsg<pos:position pos:line="119" pos:column="15"/></name><argument_list pos:line="119" pos:column="15">(<argument><expr><literal type="string" pos:line="119" pos:column="16">"Did not find test number in PATH"<pos:position pos:line="119" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="120" pos:column="9">req<pos:position pos:line="120" pos:column="12"/></name><operator pos:line="120" pos:column="12">-&gt;<pos:position pos:line="120" pos:column="17"/></operator><name pos:line="120" pos:column="14">testno<pos:position pos:line="120" pos:column="20"/></name></name> <operator pos:line="120" pos:column="21">=<pos:position pos:line="120" pos:column="22"/></operator> <name pos:line="120" pos:column="23">DOCNUMBER_404<pos:position pos:line="120" pos:column="36"/></name></expr>;<pos:position pos:line="120" pos:column="37"/></expr_stmt>
      }<pos:position pos:line="121" pos:column="8"/></block></else></if>
    }<pos:position pos:line="122" pos:column="6"/></block></else></if>
  }<pos:position pos:line="123" pos:column="4"/></block></then></if>

  <if pos:line="125" pos:column="3">if<condition pos:line="125" pos:column="5">(<expr><operator pos:line="125" pos:column="6">!<pos:position pos:line="125" pos:column="7"/></operator><name pos:line="125" pos:column="7">end<pos:position pos:line="125" pos:column="10"/></name></expr>)<pos:position pos:line="125" pos:column="11"/></condition><then pos:line="125" pos:column="11">
    <comment type="block" pos:line="126" pos:column="5">/* we don't have a complete request yet! */</comment>
    <block type="pseudo"><return pos:line="127" pos:column="5">return <expr><literal type="number" pos:line="127" pos:column="12">0<pos:position pos:line="127" pos:column="13"/></literal></expr>;<pos:position pos:line="127" pos:column="14"/></return></block></then></if>

  <comment type="block" pos:line="129" pos:column="3">/* **** Persistancy ****
   *
   * If the request is a HTTP/1.0 one, we close the connection unconditionally
   * when we're done.
   *
   * If the request is a HTTP/1.1 one, we MUST check for a "Connection:"
   * header that might say "close". If it does, we close a connection when
   * this request is processed. Otherwise, we keep the connection alive for X
   * seconds.
   */</comment>

  <do pos:line="140" pos:column="3">do <block pos:line="140" pos:column="6">{
    <if pos:line="141" pos:column="5">if<condition pos:line="141" pos:column="7">(<expr><operator pos:line="141" pos:column="8">!<pos:position pos:line="141" pos:column="9"/></operator><name><name pos:line="141" pos:column="9">req<pos:position pos:line="141" pos:column="12"/></name><operator pos:line="141" pos:column="12">-&gt;<pos:position pos:line="141" pos:column="17"/></operator><name pos:line="141" pos:column="14">cl<pos:position pos:line="141" pos:column="16"/></name></name> <operator pos:line="141" pos:column="17">&amp;&amp;<pos:position pos:line="141" pos:column="27"/></operator> <call><name pos:line="141" pos:column="20">curlx_strnequal<pos:position pos:line="141" pos:column="35"/></name><argument_list pos:line="141" pos:column="35">(<argument><expr><literal type="string" pos:line="141" pos:column="36">"Content-Length:"<pos:position pos:line="141" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="55">line<pos:position pos:line="141" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="141" pos:column="61">15<pos:position pos:line="141" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="141" pos:column="65"/></condition><then pos:line="141" pos:column="65"> <block pos:line="141" pos:column="66">{
      <comment type="block" pos:line="142" pos:column="7">/* If we don't ignore content-length, we read it and we read the whole
         request including the body before we return. If we've been told to
         ignore the content-length, we will return as soon as all headers
         have been received */</comment>
      <expr_stmt><expr><name><name pos:line="146" pos:column="7">req<pos:position pos:line="146" pos:column="10"/></name><operator pos:line="146" pos:column="10">-&gt;<pos:position pos:line="146" pos:column="15"/></operator><name pos:line="146" pos:column="12">cl<pos:position pos:line="146" pos:column="14"/></name></name> <operator pos:line="146" pos:column="15">=<pos:position pos:line="146" pos:column="16"/></operator> <call><name pos:line="146" pos:column="17">strtol<pos:position pos:line="146" pos:column="23"/></name><argument_list pos:line="146" pos:column="23">(<argument><expr><name pos:line="146" pos:column="24">line<pos:position pos:line="146" pos:column="28"/></name><operator pos:line="146" pos:column="28">+<pos:position pos:line="146" pos:column="29"/></operator><literal type="number" pos:line="146" pos:column="29">15<pos:position pos:line="146" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="146" pos:column="33">&amp;<pos:position pos:line="146" pos:column="38"/></operator><name pos:line="146" pos:column="34">line<pos:position pos:line="146" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="146" pos:column="40">10<pos:position pos:line="146" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="44"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="148" pos:column="7">logmsg<pos:position pos:line="148" pos:column="13"/></name><argument_list pos:line="148" pos:column="13">(<argument><expr><literal type="string" pos:line="148" pos:column="14">"Found Content-Length: %d in the request"<pos:position pos:line="148" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="57">req<pos:position pos:line="148" pos:column="60"/></name><operator pos:line="148" pos:column="60">-&gt;<pos:position pos:line="148" pos:column="65"/></operator><name pos:line="148" pos:column="62">cl<pos:position pos:line="148" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="66"/></expr_stmt>
      <break pos:line="149" pos:column="7">break;<pos:position pos:line="149" pos:column="13"/></break>
    }<pos:position pos:line="150" pos:column="6"/></block></then>
    <elseif pos:line="151" pos:column="5">else <if pos:line="151" pos:column="10">if<condition pos:line="151" pos:column="12">(<expr><call><name pos:line="151" pos:column="13">curlx_strnequal<pos:position pos:line="151" pos:column="28"/></name><argument_list pos:line="151" pos:column="28">(<argument><expr><literal type="string" pos:line="151" pos:column="29">"Transfer-Encoding: chunked"<pos:position pos:line="151" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="151" pos:column="59">line<pos:position pos:line="151" pos:column="63"/></name></expr></argument>,
                            <argument><expr><call><name pos:line="152" pos:column="29">strlen<pos:position pos:line="152" pos:column="35"/></name><argument_list pos:line="152" pos:column="35">(<argument><expr><literal type="string" pos:line="152" pos:column="36">"Transfer-Encoding: chunked"<pos:position pos:line="152" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="152" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="152" pos:column="67"/></condition><then pos:line="152" pos:column="67"> <block pos:line="152" pos:column="68">{
      <comment type="block" pos:line="153" pos:column="7">/* chunked data coming in */</comment>
      <expr_stmt><expr><name pos:line="154" pos:column="7">chunked<pos:position pos:line="154" pos:column="14"/></name> <operator pos:line="154" pos:column="15">=<pos:position pos:line="154" pos:column="16"/></operator> <name pos:line="154" pos:column="17">TRUE<pos:position pos:line="154" pos:column="21"/></name></expr>;<pos:position pos:line="154" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="155" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="157" pos:column="5">if<condition pos:line="157" pos:column="7">(<expr><name pos:line="157" pos:column="8">chunked<pos:position pos:line="157" pos:column="15"/></name></expr>)<pos:position pos:line="157" pos:column="16"/></condition><then pos:line="157" pos:column="16"> <block pos:line="157" pos:column="17">{
      <if pos:line="158" pos:column="7">if<condition pos:line="158" pos:column="9">(<expr><call><name pos:line="158" pos:column="10">strstr<pos:position pos:line="158" pos:column="16"/></name><argument_list pos:line="158" pos:column="16">(<argument><expr><name><name pos:line="158" pos:column="17">req<pos:position pos:line="158" pos:column="20"/></name><operator pos:line="158" pos:column="20">-&gt;<pos:position pos:line="158" pos:column="25"/></operator><name pos:line="158" pos:column="22">reqbuf<pos:position pos:line="158" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="158" pos:column="30">"\r\n0\r\n"<pos:position pos:line="158" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="158" pos:column="43"/></condition><then pos:line="158" pos:column="43">
        <comment type="block" pos:line="159" pos:column="9">/* end of chunks reached */</comment>
        <block type="pseudo"><return pos:line="160" pos:column="9">return <expr><literal type="number" pos:line="160" pos:column="16">1<pos:position pos:line="160" pos:column="17"/></literal></expr>;<pos:position pos:line="160" pos:column="18"/></return></block></then> <comment type="block" pos:line="160" pos:column="19">/* done */</comment>
      <else pos:line="161" pos:column="7">else
        <block type="pseudo"><return pos:line="162" pos:column="9">return <expr><literal type="number" pos:line="162" pos:column="16">0<pos:position pos:line="162" pos:column="17"/></literal></expr>;<pos:position pos:line="162" pos:column="18"/></return></block></else></if> <comment type="block" pos:line="162" pos:column="19">/* not done */</comment>
    }<pos:position pos:line="163" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="165" pos:column="5">line<pos:position pos:line="165" pos:column="9"/></name> <operator pos:line="165" pos:column="10">=<pos:position pos:line="165" pos:column="11"/></operator> <call><name pos:line="165" pos:column="12">strchr<pos:position pos:line="165" pos:column="18"/></name><argument_list pos:line="165" pos:column="18">(<argument><expr><name pos:line="165" pos:column="19">line<pos:position pos:line="165" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="165" pos:column="25">'\n'<pos:position pos:line="165" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="31"/></expr_stmt>
    <if pos:line="166" pos:column="5">if<condition pos:line="166" pos:column="7">(<expr><name pos:line="166" pos:column="8">line<pos:position pos:line="166" pos:column="12"/></name></expr>)<pos:position pos:line="166" pos:column="13"/></condition><then pos:line="166" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><name pos:line="167" pos:column="7">line<pos:position pos:line="167" pos:column="11"/></name><operator pos:line="167" pos:column="11">++<pos:position pos:line="167" pos:column="13"/></operator></expr>;<pos:position pos:line="167" pos:column="14"/></expr_stmt></block></then></if>
  }<pos:position pos:line="168" pos:column="4"/></block> while<condition pos:line="168" pos:column="10">(<expr><name pos:line="168" pos:column="11">line<pos:position pos:line="168" pos:column="15"/></name></expr>)<pos:position pos:line="168" pos:column="16"/></condition>;<pos:position pos:line="168" pos:column="17"/></do>

  <if pos:line="170" pos:column="3">if<condition pos:line="170" pos:column="5">(<expr><operator pos:line="170" pos:column="6">!<pos:position pos:line="170" pos:column="7"/></operator><name><name pos:line="170" pos:column="7">req<pos:position pos:line="170" pos:column="10"/></name><operator pos:line="170" pos:column="10">-&gt;<pos:position pos:line="170" pos:column="15"/></operator><name pos:line="170" pos:column="12">auth<pos:position pos:line="170" pos:column="16"/></name></name> <operator pos:line="170" pos:column="17">&amp;&amp;<pos:position pos:line="170" pos:column="27"/></operator> <call><name pos:line="170" pos:column="20">strstr<pos:position pos:line="170" pos:column="26"/></name><argument_list pos:line="170" pos:column="26">(<argument><expr><name><name pos:line="170" pos:column="27">req<pos:position pos:line="170" pos:column="30"/></name><operator pos:line="170" pos:column="30">-&gt;<pos:position pos:line="170" pos:column="35"/></operator><name pos:line="170" pos:column="32">reqbuf<pos:position pos:line="170" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="170" pos:column="40">"Authorization:"<pos:position pos:line="170" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="170" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="170" pos:column="58"/></condition><then pos:line="170" pos:column="58"> <block pos:line="170" pos:column="59">{
    <expr_stmt><expr><name><name pos:line="171" pos:column="5">req<pos:position pos:line="171" pos:column="8"/></name><operator pos:line="171" pos:column="8">-&gt;<pos:position pos:line="171" pos:column="13"/></operator><name pos:line="171" pos:column="10">auth<pos:position pos:line="171" pos:column="14"/></name></name> <operator pos:line="171" pos:column="15">=<pos:position pos:line="171" pos:column="16"/></operator> <name pos:line="171" pos:column="17">TRUE<pos:position pos:line="171" pos:column="21"/></name></expr>;<pos:position pos:line="171" pos:column="22"/></expr_stmt> <comment type="block" pos:line="171" pos:column="23">/* Authorization: header present! */</comment>
    <if pos:line="172" pos:column="5">if<condition pos:line="172" pos:column="7">(<expr><name><name pos:line="172" pos:column="8">req<pos:position pos:line="172" pos:column="11"/></name><operator pos:line="172" pos:column="11">-&gt;<pos:position pos:line="172" pos:column="16"/></operator><name pos:line="172" pos:column="13">auth_req<pos:position pos:line="172" pos:column="21"/></name></name></expr>)<pos:position pos:line="172" pos:column="22"/></condition><then pos:line="172" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="173" pos:column="7">logmsg<pos:position pos:line="173" pos:column="13"/></name><argument_list pos:line="173" pos:column="13">(<argument><expr><literal type="string" pos:line="173" pos:column="14">"Authorization header found, as required"<pos:position pos:line="173" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="57"/></expr_stmt></block></then></if>
  }<pos:position pos:line="174" pos:column="4"/></block></then></if>

  <if pos:line="176" pos:column="3">if<condition pos:line="176" pos:column="5">(<expr><operator pos:line="176" pos:column="6">!<pos:position pos:line="176" pos:column="7"/></operator><name><name pos:line="176" pos:column="7">req<pos:position pos:line="176" pos:column="10"/></name><operator pos:line="176" pos:column="10">-&gt;<pos:position pos:line="176" pos:column="15"/></operator><name pos:line="176" pos:column="12">digest<pos:position pos:line="176" pos:column="18"/></name></name> <operator pos:line="176" pos:column="19">&amp;&amp;<pos:position pos:line="176" pos:column="29"/></operator> <call><name pos:line="176" pos:column="22">strstr<pos:position pos:line="176" pos:column="28"/></name><argument_list pos:line="176" pos:column="28">(<argument><expr><name><name pos:line="176" pos:column="29">req<pos:position pos:line="176" pos:column="32"/></name><operator pos:line="176" pos:column="32">-&gt;<pos:position pos:line="176" pos:column="37"/></operator><name pos:line="176" pos:column="34">reqbuf<pos:position pos:line="176" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="176" pos:column="42">"Authorization: Digest"<pos:position pos:line="176" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="176" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="176" pos:column="67"/></condition><then pos:line="176" pos:column="67"> <block pos:line="176" pos:column="68">{
    <comment type="block" pos:line="177" pos:column="5">/* If the client is passing this Digest-header, we set the part number
       to 1000. Not only to spice up the complexity of this, but to make
       Digest stuff to work in the test suite. */</comment>
    <expr_stmt><expr><name><name pos:line="180" pos:column="5">req<pos:position pos:line="180" pos:column="8"/></name><operator pos:line="180" pos:column="8">-&gt;<pos:position pos:line="180" pos:column="13"/></operator><name pos:line="180" pos:column="10">partno<pos:position pos:line="180" pos:column="16"/></name></name> <operator pos:line="180" pos:column="17">+=<pos:position pos:line="180" pos:column="19"/></operator> <literal type="number" pos:line="180" pos:column="20">1000<pos:position pos:line="180" pos:column="24"/></literal></expr>;<pos:position pos:line="180" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="181" pos:column="5">req<pos:position pos:line="181" pos:column="8"/></name><operator pos:line="181" pos:column="8">-&gt;<pos:position pos:line="181" pos:column="13"/></operator><name pos:line="181" pos:column="10">digest<pos:position pos:line="181" pos:column="16"/></name></name> <operator pos:line="181" pos:column="17">=<pos:position pos:line="181" pos:column="18"/></operator> <name pos:line="181" pos:column="19">TRUE<pos:position pos:line="181" pos:column="23"/></name></expr>;<pos:position pos:line="181" pos:column="24"/></expr_stmt> <comment type="block" pos:line="181" pos:column="25">/* header found */</comment>
    <expr_stmt><expr><call><name pos:line="182" pos:column="5">logmsg<pos:position pos:line="182" pos:column="11"/></name><argument_list pos:line="182" pos:column="11">(<argument><expr><literal type="string" pos:line="182" pos:column="12">"Received Digest request, sending back data %d"<pos:position pos:line="182" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="61">req<pos:position pos:line="182" pos:column="64"/></name><operator pos:line="182" pos:column="64">-&gt;<pos:position pos:line="182" pos:column="69"/></operator><name pos:line="182" pos:column="66">partno<pos:position pos:line="182" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="182" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="74"/></expr_stmt>
  }<pos:position pos:line="183" pos:column="4"/></block></then>
  <elseif pos:line="184" pos:column="3">else <if pos:line="184" pos:column="8">if<condition pos:line="184" pos:column="10">(<expr><operator pos:line="184" pos:column="11">!<pos:position pos:line="184" pos:column="12"/></operator><name><name pos:line="184" pos:column="12">req<pos:position pos:line="184" pos:column="15"/></name><operator pos:line="184" pos:column="15">-&gt;<pos:position pos:line="184" pos:column="20"/></operator><name pos:line="184" pos:column="17">ntlm<pos:position pos:line="184" pos:column="21"/></name></name> <operator pos:line="184" pos:column="22">&amp;&amp;<pos:position pos:line="184" pos:column="32"/></operator>
          <call><name pos:line="185" pos:column="11">strstr<pos:position pos:line="185" pos:column="17"/></name><argument_list pos:line="185" pos:column="17">(<argument><expr><name><name pos:line="185" pos:column="18">req<pos:position pos:line="185" pos:column="21"/></name><operator pos:line="185" pos:column="21">-&gt;<pos:position pos:line="185" pos:column="26"/></operator><name pos:line="185" pos:column="23">reqbuf<pos:position pos:line="185" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="185" pos:column="31">"Authorization: NTLM TlRMTVNTUAAD"<pos:position pos:line="185" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="185" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="185" pos:column="67"/></condition><then pos:line="185" pos:column="67"> <block pos:line="185" pos:column="68">{
    <comment type="block" pos:line="186" pos:column="5">/* If the client is passing this type-3 NTLM header */</comment>
    <expr_stmt><expr><name><name pos:line="187" pos:column="5">req<pos:position pos:line="187" pos:column="8"/></name><operator pos:line="187" pos:column="8">-&gt;<pos:position pos:line="187" pos:column="13"/></operator><name pos:line="187" pos:column="10">partno<pos:position pos:line="187" pos:column="16"/></name></name> <operator pos:line="187" pos:column="17">+=<pos:position pos:line="187" pos:column="19"/></operator> <literal type="number" pos:line="187" pos:column="20">1002<pos:position pos:line="187" pos:column="24"/></literal></expr>;<pos:position pos:line="187" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="188" pos:column="5">req<pos:position pos:line="188" pos:column="8"/></name><operator pos:line="188" pos:column="8">-&gt;<pos:position pos:line="188" pos:column="13"/></operator><name pos:line="188" pos:column="10">ntlm<pos:position pos:line="188" pos:column="14"/></name></name> <operator pos:line="188" pos:column="15">=<pos:position pos:line="188" pos:column="16"/></operator> <name pos:line="188" pos:column="17">TRUE<pos:position pos:line="188" pos:column="21"/></name></expr>;<pos:position pos:line="188" pos:column="22"/></expr_stmt> <comment type="block" pos:line="188" pos:column="23">/* NTLM found */</comment>
    <expr_stmt><expr><call><name pos:line="189" pos:column="5">logmsg<pos:position pos:line="189" pos:column="11"/></name><argument_list pos:line="189" pos:column="11">(<argument><expr><literal type="string" pos:line="189" pos:column="12">"Received NTLM type-3, xxxxxxxxxxxxx sending back data %d"<pos:position pos:line="189" pos:column="70"/></literal></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="72">req<pos:position pos:line="189" pos:column="75"/></name><operator pos:line="189" pos:column="75">-&gt;<pos:position pos:line="189" pos:column="80"/></operator><name pos:line="189" pos:column="77">partno<pos:position pos:line="189" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="189" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="85"/></expr_stmt>
    <if pos:line="190" pos:column="5">if<condition pos:line="190" pos:column="7">(<expr><name><name pos:line="190" pos:column="8">req<pos:position pos:line="190" pos:column="11"/></name><operator pos:line="190" pos:column="11">-&gt;<pos:position pos:line="190" pos:column="16"/></operator><name pos:line="190" pos:column="13">cl<pos:position pos:line="190" pos:column="15"/></name></name></expr>)<pos:position pos:line="190" pos:column="16"/></condition><then pos:line="190" pos:column="16"> <block pos:line="190" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="191" pos:column="7">logmsg<pos:position pos:line="191" pos:column="13"/></name><argument_list pos:line="191" pos:column="13">(<argument><expr><literal type="string" pos:line="191" pos:column="14">"  Expecting %d POSTed bytes"<pos:position pos:line="191" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="191" pos:column="45">req<pos:position pos:line="191" pos:column="48"/></name><operator pos:line="191" pos:column="48">-&gt;<pos:position pos:line="191" pos:column="53"/></operator><name pos:line="191" pos:column="50">cl<pos:position pos:line="191" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="191" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="192" pos:column="6"/></block></then></if>
  }<pos:position pos:line="193" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="194" pos:column="3">else <if pos:line="194" pos:column="8">if<condition pos:line="194" pos:column="10">(<expr><operator pos:line="194" pos:column="11">!<pos:position pos:line="194" pos:column="12"/></operator><name><name pos:line="194" pos:column="12">req<pos:position pos:line="194" pos:column="15"/></name><operator pos:line="194" pos:column="15">-&gt;<pos:position pos:line="194" pos:column="20"/></operator><name pos:line="194" pos:column="17">ntlm<pos:position pos:line="194" pos:column="21"/></name></name> <operator pos:line="194" pos:column="22">&amp;&amp;<pos:position pos:line="194" pos:column="32"/></operator>
          <call><name pos:line="195" pos:column="11">strstr<pos:position pos:line="195" pos:column="17"/></name><argument_list pos:line="195" pos:column="17">(<argument><expr><name><name pos:line="195" pos:column="18">req<pos:position pos:line="195" pos:column="21"/></name><operator pos:line="195" pos:column="21">-&gt;<pos:position pos:line="195" pos:column="26"/></operator><name pos:line="195" pos:column="23">reqbuf<pos:position pos:line="195" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="195" pos:column="31">"Authorization: NTLM TlRMTVNTUAAB"<pos:position pos:line="195" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="195" pos:column="67"/></condition><then pos:line="195" pos:column="67"> <block pos:line="195" pos:column="68">{
    <comment type="block" pos:line="196" pos:column="5">/* If the client is passing this type-1 NTLM header */</comment>
    <expr_stmt><expr><name><name pos:line="197" pos:column="5">req<pos:position pos:line="197" pos:column="8"/></name><operator pos:line="197" pos:column="8">-&gt;<pos:position pos:line="197" pos:column="13"/></operator><name pos:line="197" pos:column="10">partno<pos:position pos:line="197" pos:column="16"/></name></name> <operator pos:line="197" pos:column="17">+=<pos:position pos:line="197" pos:column="19"/></operator> <literal type="number" pos:line="197" pos:column="20">1001<pos:position pos:line="197" pos:column="24"/></literal></expr>;<pos:position pos:line="197" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="198" pos:column="5">req<pos:position pos:line="198" pos:column="8"/></name><operator pos:line="198" pos:column="8">-&gt;<pos:position pos:line="198" pos:column="13"/></operator><name pos:line="198" pos:column="10">ntlm<pos:position pos:line="198" pos:column="14"/></name></name> <operator pos:line="198" pos:column="15">=<pos:position pos:line="198" pos:column="16"/></operator> <name pos:line="198" pos:column="17">TRUE<pos:position pos:line="198" pos:column="21"/></name></expr>;<pos:position pos:line="198" pos:column="22"/></expr_stmt> <comment type="block" pos:line="198" pos:column="23">/* NTLM found */</comment>
    <expr_stmt><expr><call><name pos:line="199" pos:column="5">logmsg<pos:position pos:line="199" pos:column="11"/></name><argument_list pos:line="199" pos:column="11">(<argument><expr><literal type="string" pos:line="199" pos:column="12">"Received NTLM type-1, sending back data %d"<pos:position pos:line="199" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="58">req<pos:position pos:line="199" pos:column="61"/></name><operator pos:line="199" pos:column="61">-&gt;<pos:position pos:line="199" pos:column="66"/></operator><name pos:line="199" pos:column="63">partno<pos:position pos:line="199" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="199" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="71"/></expr_stmt>
  }<pos:position pos:line="200" pos:column="4"/></block></then></if></elseif></if>
  <if pos:line="201" pos:column="3">if<condition pos:line="201" pos:column="5">(<expr><call><name pos:line="201" pos:column="6">strstr<pos:position pos:line="201" pos:column="12"/></name><argument_list pos:line="201" pos:column="12">(<argument><expr><name><name pos:line="201" pos:column="13">req<pos:position pos:line="201" pos:column="16"/></name><operator pos:line="201" pos:column="16">-&gt;<pos:position pos:line="201" pos:column="21"/></operator><name pos:line="201" pos:column="18">reqbuf<pos:position pos:line="201" pos:column="24"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="201" pos:column="26">"Connection: close"<pos:position pos:line="201" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="201" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="201" pos:column="47"/></condition><then pos:line="201" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="202" pos:column="5">req<pos:position pos:line="202" pos:column="8"/></name><operator pos:line="202" pos:column="8">-&gt;<pos:position pos:line="202" pos:column="13"/></operator><name pos:line="202" pos:column="10">open<pos:position pos:line="202" pos:column="14"/></name></name> <operator pos:line="202" pos:column="15">=<pos:position pos:line="202" pos:column="16"/></operator> <name pos:line="202" pos:column="17">FALSE<pos:position pos:line="202" pos:column="22"/></name></expr>;<pos:position pos:line="202" pos:column="23"/></expr_stmt></block></then></if> <comment type="block" pos:line="202" pos:column="24">/* close connection after this request */</comment>

  <comment type="block" pos:line="204" pos:column="3">/* If authentication is required and no auth was provided, end now. This
     makes the server NOT wait for PUT/POST data and you can then make the
     test case send a rejection before any such data has been sent. Test case
     154 uses this.*/</comment>
  <if pos:line="208" pos:column="3">if<condition pos:line="208" pos:column="5">(<expr><name><name pos:line="208" pos:column="6">req<pos:position pos:line="208" pos:column="9"/></name><operator pos:line="208" pos:column="9">-&gt;<pos:position pos:line="208" pos:column="14"/></operator><name pos:line="208" pos:column="11">auth_req<pos:position pos:line="208" pos:column="19"/></name></name> <operator pos:line="208" pos:column="20">&amp;&amp;<pos:position pos:line="208" pos:column="30"/></operator> <operator pos:line="208" pos:column="23">!<pos:position pos:line="208" pos:column="24"/></operator><name><name pos:line="208" pos:column="24">req<pos:position pos:line="208" pos:column="27"/></name><operator pos:line="208" pos:column="27">-&gt;<pos:position pos:line="208" pos:column="32"/></operator><name pos:line="208" pos:column="29">auth<pos:position pos:line="208" pos:column="33"/></name></name></expr>)<pos:position pos:line="208" pos:column="34"/></condition><then pos:line="208" pos:column="34">
    <block type="pseudo"><return pos:line="209" pos:column="5">return <expr><literal type="number" pos:line="209" pos:column="12">1<pos:position pos:line="209" pos:column="13"/></literal></expr>;<pos:position pos:line="209" pos:column="14"/></return></block></then></if>

  <if pos:line="211" pos:column="3">if<condition pos:line="211" pos:column="5">(<expr><name><name pos:line="211" pos:column="6">req<pos:position pos:line="211" pos:column="9"/></name><operator pos:line="211" pos:column="9">-&gt;<pos:position pos:line="211" pos:column="14"/></operator><name pos:line="211" pos:column="11">cl<pos:position pos:line="211" pos:column="13"/></name></name></expr>)<pos:position pos:line="211" pos:column="14"/></condition><then pos:line="211" pos:column="14"> <block pos:line="211" pos:column="15">{
    <if pos:line="212" pos:column="5">if<condition pos:line="212" pos:column="7">(<expr><name><name pos:line="212" pos:column="8">req<pos:position pos:line="212" pos:column="11"/></name><operator pos:line="212" pos:column="11">-&gt;<pos:position pos:line="212" pos:column="16"/></operator><name pos:line="212" pos:column="13">cl<pos:position pos:line="212" pos:column="15"/></name></name> <operator pos:line="212" pos:column="16">&lt;=<pos:position pos:line="212" pos:column="21"/></operator> <call><name pos:line="212" pos:column="19">strlen<pos:position pos:line="212" pos:column="25"/></name><argument_list pos:line="212" pos:column="25">(<argument><expr><name pos:line="212" pos:column="26">end<pos:position pos:line="212" pos:column="29"/></name><operator pos:line="212" pos:column="29">+<pos:position pos:line="212" pos:column="30"/></operator><call><name pos:line="212" pos:column="30">strlen<pos:position pos:line="212" pos:column="36"/></name><argument_list pos:line="212" pos:column="36">(<argument><expr><name pos:line="212" pos:column="37">END_OF_HEADERS<pos:position pos:line="212" pos:column="51"/></name></expr></argument>)<pos:position pos:line="212" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="212" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="212" pos:column="54"/></condition><then pos:line="212" pos:column="54">
      <block type="pseudo"><return pos:line="213" pos:column="7">return <expr><literal type="number" pos:line="213" pos:column="14">1<pos:position pos:line="213" pos:column="15"/></literal></expr>;<pos:position pos:line="213" pos:column="16"/></return></block></then> <comment type="block" pos:line="213" pos:column="17">/* done */</comment>
    <else pos:line="214" pos:column="5">else
      <block type="pseudo"><return pos:line="215" pos:column="7">return <expr><literal type="number" pos:line="215" pos:column="14">0<pos:position pos:line="215" pos:column="15"/></literal></expr>;<pos:position pos:line="215" pos:column="16"/></return></block></else></if> <comment type="block" pos:line="215" pos:column="17">/* not complete yet */</comment>
  }<pos:position pos:line="216" pos:column="4"/></block></then></if>
  <return pos:line="217" pos:column="3">return <expr><literal type="number" pos:line="217" pos:column="10">1<pos:position pos:line="217" pos:column="11"/></literal></expr>;<pos:position pos:line="217" pos:column="12"/></return> <comment type="block" pos:line="217" pos:column="13">/* done */</comment>
}<pos:position pos:line="218" pos:column="2"/></block></function></unit>
