<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2293_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">GetOrSetUpData<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">id<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="28">libdata_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier><modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">appData<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="2" pos:column="20">libthreaddata_t<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier><modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">threadData<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type>                 <name pos:line="4" pos:column="23">err<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">libdata_t<pos:position pos:line="5" pos:column="12"/></name>           <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">app_data<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">libthreaddata_t<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">thread_data<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">NXKey_t<pos:position pos:line="7" pos:column="10"/></name></type>             <name pos:line="7" pos:column="23">key<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">NX_LOCK_INFO_ALLOC<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">liblock<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="31">"Application Data Lock"<pos:position pos:line="8" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="56">0<pos:position pos:line="8" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="59"/></expr_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">err<pos:position pos:line="10" pos:column="6"/></name>         <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">thread_data<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <operator pos:line="11" pos:column="17">(<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">libthreaddata_t<pos:position pos:line="11" pos:column="33"/></name> <operator pos:line="11" pos:column="34">*<pos:position pos:line="11" pos:column="35"/></operator><operator pos:line="11" pos:column="35">)<pos:position pos:line="11" pos:column="36"/></operator> <name pos:line="11" pos:column="37">NULL<pos:position pos:line="11" pos:column="41"/></name></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>

  <comment type="block" pos:line="13" pos:column="3">/*
   * Attempt to get our data for the application calling us. This is where we
   * store whatever application-specific information we need to carry in
   * support of calling applications.
   */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">app_data<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">libdata_t<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">*<pos:position pos:line="18" pos:column="26"/></operator><operator pos:line="18" pos:column="26">)<pos:position pos:line="18" pos:column="27"/></operator> <call><name pos:line="18" pos:column="28">get_app_data<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">id<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>

  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><operator pos:line="20" pos:column="6">!<pos:position pos:line="20" pos:column="7"/></operator><name pos:line="20" pos:column="7">app_data<pos:position pos:line="20" pos:column="15"/></name></expr>)<pos:position pos:line="20" pos:column="16"/></condition><then pos:line="20" pos:column="16"> <block pos:line="20" pos:column="17">{
    <comment type="block" pos:line="21" pos:column="5">/*
     * This application hasn't called us before; set up application AND
     * per-thread data. Of course, just in case a thread from this same
     * application is calling us simultaneously, we better lock our application
     * data-creation mutex. We also need to recheck for data after we acquire
     * the lock because WE might be that other thread that was too late to
     * create the data and the first thread in will have created it.
     */</comment>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">NXLock<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">gLibLock<pos:position pos:line="29" pos:column="20"/></name></expr></argument>)<pos:position pos:line="29" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><name pos:line="31" pos:column="5">app_data<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <operator pos:line="31" pos:column="16">(<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">libdata_t<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">*<pos:position pos:line="31" pos:column="28"/></operator><operator pos:line="31" pos:column="28">)<pos:position pos:line="31" pos:column="29"/></operator> <call><name pos:line="31" pos:column="30">get_app_data<pos:position pos:line="31" pos:column="42"/></name><argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">id<pos:position pos:line="31" pos:column="45"/></name></expr></argument>)<pos:position pos:line="31" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>
    <if pos:line="32" pos:column="5">if<condition pos:line="32" pos:column="7">(<expr><operator pos:line="32" pos:column="8">!<pos:position pos:line="32" pos:column="9"/></operator><name pos:line="32" pos:column="9">app_data<pos:position pos:line="32" pos:column="17"/></name></expr>)<pos:position pos:line="32" pos:column="18"/></condition><then pos:line="32" pos:column="18"> <block pos:line="32" pos:column="19">{
      <expr_stmt><expr><name pos:line="33" pos:column="7">app_data<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <call><name pos:line="33" pos:column="18">malloc<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><sizeof pos:line="33" pos:column="25">sizeof<argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">libdata_t<pos:position pos:line="33" pos:column="41"/></name></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>

      <if pos:line="35" pos:column="7">if<condition pos:line="35" pos:column="9">(<expr><name pos:line="35" pos:column="10">app_data<pos:position pos:line="35" pos:column="18"/></name></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19"> <block pos:line="35" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">memset<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">app_data<pos:position pos:line="36" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="26">0<pos:position pos:line="36" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="29">sizeof<argument_list pos:line="36" pos:column="35">(<argument><expr><name pos:line="36" pos:column="36">libdata_t<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="38" pos:column="9">app_data<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">-&gt;<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="19">tenbytes<pos:position pos:line="38" pos:column="27"/></name></name> <operator pos:line="38" pos:column="28">=<pos:position pos:line="38" pos:column="29"/></operator> <call><name pos:line="38" pos:column="30">malloc<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><literal type="number" pos:line="38" pos:column="37">10<pos:position pos:line="38" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="39" pos:column="9">app_data<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">-&gt;<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="19">lock<pos:position pos:line="39" pos:column="23"/></name></name>     <operator pos:line="39" pos:column="28">=<pos:position pos:line="39" pos:column="29"/></operator> <call><name pos:line="39" pos:column="30">NXMutexAlloc<pos:position pos:line="39" pos:column="42"/></name><argument_list pos:line="39" pos:column="42">(<argument><expr><literal type="number" pos:line="39" pos:column="43">0<pos:position pos:line="39" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="46">0<pos:position pos:line="39" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="39" pos:column="49">&amp;<pos:position pos:line="39" pos:column="54"/></operator><name pos:line="39" pos:column="50">liblock<pos:position pos:line="39" pos:column="57"/></name></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="59"/></expr_stmt>

        <if pos:line="41" pos:column="9">if<condition pos:line="41" pos:column="11">(<expr><operator pos:line="41" pos:column="12">!<pos:position pos:line="41" pos:column="13"/></operator><name><name pos:line="41" pos:column="13">app_data<pos:position pos:line="41" pos:column="21"/></name><operator pos:line="41" pos:column="21">-&gt;<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="23">tenbytes<pos:position pos:line="41" pos:column="31"/></name></name> <operator pos:line="41" pos:column="32">||<pos:position pos:line="41" pos:column="34"/></operator> <operator pos:line="41" pos:column="35">!<pos:position pos:line="41" pos:column="36"/></operator><name><name pos:line="41" pos:column="36">app_data<pos:position pos:line="41" pos:column="44"/></name><operator pos:line="41" pos:column="44">-&gt;<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="46">lock<pos:position pos:line="41" pos:column="50"/></name></name></expr>)<pos:position pos:line="41" pos:column="51"/></condition><then pos:line="41" pos:column="51"> <block pos:line="41" pos:column="52">{
          <if pos:line="42" pos:column="11">if<condition pos:line="42" pos:column="13">(<expr><name><name pos:line="42" pos:column="14">app_data<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">-&gt;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="24">lock<pos:position pos:line="42" pos:column="28"/></name></name></expr>)<pos:position pos:line="42" pos:column="29"/></condition><then pos:line="42" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="13">NXMutexFree<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name><name pos:line="43" pos:column="25">app_data<pos:position pos:line="43" pos:column="33"/></name><operator pos:line="43" pos:column="33">-&gt;<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="35">lock<pos:position pos:line="43" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt></block></then></if>

          <expr_stmt><expr><call><name pos:line="45" pos:column="11">free<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">app_data<pos:position pos:line="45" pos:column="24"/></name></expr></argument>)<pos:position pos:line="45" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><name pos:line="46" pos:column="11">app_data<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">=<pos:position pos:line="46" pos:column="21"/></operator> <operator pos:line="46" pos:column="22">(<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">libdata_t<pos:position pos:line="46" pos:column="32"/></name> <operator pos:line="46" pos:column="33">*<pos:position pos:line="46" pos:column="34"/></operator><operator pos:line="46" pos:column="34">)<pos:position pos:line="46" pos:column="35"/></operator> <name pos:line="46" pos:column="36">NULL<pos:position pos:line="46" pos:column="40"/></name></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt>
          <expr_stmt><expr><name pos:line="47" pos:column="11">err<pos:position pos:line="47" pos:column="14"/></name>      <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <name pos:line="47" pos:column="22">ENOMEM<pos:position pos:line="47" pos:column="28"/></name></expr>;<pos:position pos:line="47" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>

        <if pos:line="50" pos:column="9">if<condition pos:line="50" pos:column="11">(<expr><name pos:line="50" pos:column="12">app_data<pos:position pos:line="50" pos:column="20"/></name></expr>)<pos:position pos:line="50" pos:column="21"/></condition><then pos:line="50" pos:column="21"> <block pos:line="50" pos:column="22">{
          <comment type="block" pos:line="51" pos:column="11">/*
           * Here we burn in the application data that we were trying to get
           * by calling get_app_data(). Next time we call the first function,
           * we'll get this data we're just now setting. We also go on here to
           * establish the per-thread data for the calling thread, something
           * we'll have to do on each application thread the first time
           * it calls us.
           */</comment>
          <expr_stmt><expr><name pos:line="59" pos:column="11">err<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <call><name pos:line="59" pos:column="17">set_app_data<pos:position pos:line="59" pos:column="29"/></name><argument_list pos:line="59" pos:column="29">(<argument><expr><name pos:line="59" pos:column="30">gLibId<pos:position pos:line="59" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="38">app_data<pos:position pos:line="59" pos:column="46"/></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>

          <if pos:line="61" pos:column="11">if<condition pos:line="61" pos:column="13">(<expr><name pos:line="61" pos:column="14">err<pos:position pos:line="61" pos:column="17"/></name></expr>)<pos:position pos:line="61" pos:column="18"/></condition><then pos:line="61" pos:column="18"> <block pos:line="61" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">free<pos:position pos:line="62" pos:column="17"/></name><argument_list pos:line="62" pos:column="17">(<argument><expr><name pos:line="62" pos:column="18">app_data<pos:position pos:line="62" pos:column="26"/></name></expr></argument>)<pos:position pos:line="62" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="63" pos:column="13">app_data<pos:position pos:line="63" pos:column="21"/></name> <operator pos:line="63" pos:column="22">=<pos:position pos:line="63" pos:column="23"/></operator> <operator pos:line="63" pos:column="24">(<pos:position pos:line="63" pos:column="25"/></operator><name pos:line="63" pos:column="25">libdata_t<pos:position pos:line="63" pos:column="34"/></name> <operator pos:line="63" pos:column="35">*<pos:position pos:line="63" pos:column="36"/></operator><operator pos:line="63" pos:column="36">)<pos:position pos:line="63" pos:column="37"/></operator> <name pos:line="63" pos:column="38">NULL<pos:position pos:line="63" pos:column="42"/></name></expr>;<pos:position pos:line="63" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name pos:line="64" pos:column="13">err<pos:position pos:line="64" pos:column="16"/></name>      <operator pos:line="64" pos:column="22">=<pos:position pos:line="64" pos:column="23"/></operator> <name pos:line="64" pos:column="24">ENOMEM<pos:position pos:line="64" pos:column="30"/></name></expr>;<pos:position pos:line="64" pos:column="31"/></expr_stmt>
          }<pos:position pos:line="65" pos:column="12"/></block></then>
          <else pos:line="66" pos:column="11">else <block pos:line="66" pos:column="16">{
            <comment type="block" pos:line="67" pos:column="13">/* create key for thread-specific data... */</comment>
            <expr_stmt><expr><name pos:line="68" pos:column="13">err<pos:position pos:line="68" pos:column="16"/></name> <operator pos:line="68" pos:column="17">=<pos:position pos:line="68" pos:column="18"/></operator> <call><name pos:line="68" pos:column="19">NXKeyCreate<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><name pos:line="68" pos:column="31">DisposeThreadData<pos:position pos:line="68" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="50">(<pos:position pos:line="68" pos:column="51"/></operator><name pos:line="68" pos:column="51">void<pos:position pos:line="68" pos:column="55"/></name> <operator pos:line="68" pos:column="56">*<pos:position pos:line="68" pos:column="57"/></operator><operator pos:line="68" pos:column="57">)<pos:position pos:line="68" pos:column="58"/></operator> <name pos:line="68" pos:column="59">NULL<pos:position pos:line="68" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="65">&amp;<pos:position pos:line="68" pos:column="70"/></operator><name pos:line="68" pos:column="66">key<pos:position pos:line="68" pos:column="69"/></name></expr></argument>)<pos:position pos:line="68" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="71"/></expr_stmt>

            <if pos:line="70" pos:column="13">if<condition pos:line="70" pos:column="15">(<expr><name pos:line="70" pos:column="16">err<pos:position pos:line="70" pos:column="19"/></name></expr>)<pos:position pos:line="70" pos:column="20"/></condition><then pos:line="70" pos:column="20">                <comment type="block" pos:line="70" pos:column="36">/* (no more keys left?) */</comment>
              <block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="15">key<pos:position pos:line="71" pos:column="18"/></name> <operator pos:line="71" pos:column="19">=<pos:position pos:line="71" pos:column="20"/></operator> <operator pos:line="71" pos:column="21">-<pos:position pos:line="71" pos:column="22"/></operator><literal type="number" pos:line="71" pos:column="22">1<pos:position pos:line="71" pos:column="23"/></literal></expr>;<pos:position pos:line="71" pos:column="24"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name><name pos:line="73" pos:column="13">app_data<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">-&gt;<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="23">perthreadkey<pos:position pos:line="73" pos:column="35"/></name></name> <operator pos:line="73" pos:column="36">=<pos:position pos:line="73" pos:column="37"/></operator> <name pos:line="73" pos:column="38">key<pos:position pos:line="73" pos:column="41"/></name></expr>;<pos:position pos:line="73" pos:column="42"/></expr_stmt>
          }<pos:position pos:line="74" pos:column="12"/></block></else></if>
        }<pos:position pos:line="75" pos:column="10"/></block></then></if>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="79" pos:column="5">NXUnlock<pos:position pos:line="79" pos:column="13"/></name><argument_list pos:line="79" pos:column="13">(<argument><expr><name pos:line="79" pos:column="14">gLibLock<pos:position pos:line="79" pos:column="22"/></name></expr></argument>)<pos:position pos:line="79" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="80" pos:column="4"/></block></then></if>

  <if pos:line="82" pos:column="3">if<condition pos:line="82" pos:column="5">(<expr><name pos:line="82" pos:column="6">app_data<pos:position pos:line="82" pos:column="14"/></name></expr>)<pos:position pos:line="82" pos:column="15"/></condition><then pos:line="82" pos:column="15"> <block pos:line="82" pos:column="16">{
    <expr_stmt><expr><name pos:line="83" pos:column="5">key<pos:position pos:line="83" pos:column="8"/></name> <operator pos:line="83" pos:column="9">=<pos:position pos:line="83" pos:column="10"/></operator> <name><name pos:line="83" pos:column="11">app_data<pos:position pos:line="83" pos:column="19"/></name><operator pos:line="83" pos:column="19">-&gt;<pos:position pos:line="83" pos:column="24"/></operator><name pos:line="83" pos:column="21">perthreadkey<pos:position pos:line="83" pos:column="33"/></name></name></expr>;<pos:position pos:line="83" pos:column="34"/></expr_stmt>

    <if pos:line="85" pos:column="5">if<condition pos:line="85" pos:column="7">(<expr><name pos:line="85" pos:column="8">key<pos:position pos:line="85" pos:column="11"/></name> <operator pos:line="85" pos:column="12">!=<pos:position pos:line="85" pos:column="14"/></operator> <operator pos:line="85" pos:column="15">-<pos:position pos:line="85" pos:column="16"/></operator><literal type="number" pos:line="85" pos:column="16">1<pos:position pos:line="85" pos:column="17"/></literal> <comment type="block" pos:line="85" pos:column="18">/* couldn't create a key? no thread data */</comment>
        <operator pos:line="86" pos:column="9">&amp;&amp;<pos:position pos:line="86" pos:column="19"/></operator> <operator pos:line="86" pos:column="12">!<pos:position pos:line="86" pos:column="13"/></operator><operator pos:line="86" pos:column="13">(<pos:position pos:line="86" pos:column="14"/></operator><name pos:line="86" pos:column="14">err<pos:position pos:line="86" pos:column="17"/></name> <operator pos:line="86" pos:column="18">=<pos:position pos:line="86" pos:column="19"/></operator> <call><name pos:line="86" pos:column="20">NXKeyGetValue<pos:position pos:line="86" pos:column="33"/></name><argument_list pos:line="86" pos:column="33">(<argument><expr><name pos:line="86" pos:column="34">key<pos:position pos:line="86" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="39">(<pos:position pos:line="86" pos:column="40"/></operator><name pos:line="86" pos:column="40">void<pos:position pos:line="86" pos:column="44"/></name> <operator pos:line="86" pos:column="45">*<pos:position pos:line="86" pos:column="46"/></operator><operator pos:line="86" pos:column="46">*<pos:position pos:line="86" pos:column="47"/></operator><operator pos:line="86" pos:column="47">)<pos:position pos:line="86" pos:column="48"/></operator> <operator pos:line="86" pos:column="49">&amp;<pos:position pos:line="86" pos:column="54"/></operator><name pos:line="86" pos:column="50">thread_data<pos:position pos:line="86" pos:column="61"/></name></expr></argument>)<pos:position pos:line="86" pos:column="62"/></argument_list></call><operator pos:line="86" pos:column="62">)<pos:position pos:line="86" pos:column="63"/></operator>
        <operator pos:line="87" pos:column="9">&amp;&amp;<pos:position pos:line="87" pos:column="19"/></operator> <operator pos:line="87" pos:column="12">!<pos:position pos:line="87" pos:column="13"/></operator><name pos:line="87" pos:column="13">thread_data<pos:position pos:line="87" pos:column="24"/></name></expr>)<pos:position pos:line="87" pos:column="25"/></condition><then pos:line="87" pos:column="25"> <block pos:line="87" pos:column="26">{
      <comment type="block" pos:line="88" pos:column="7">/*
       * Allocate the per-thread data for the calling thread. Regardless of
       * whether there was already application data or not, this may be the
       * first call by a new thread. The fact that we allocation 20 bytes on
       * a pointer is not very important, this just helps to demonstrate that
       * we can have arbitrarily complex per-thread data.
       */</comment>
      <expr_stmt><expr><name pos:line="95" pos:column="7">thread_data<pos:position pos:line="95" pos:column="18"/></name> <operator pos:line="95" pos:column="19">=<pos:position pos:line="95" pos:column="20"/></operator> <call><name pos:line="95" pos:column="21">malloc<pos:position pos:line="95" pos:column="27"/></name><argument_list pos:line="95" pos:column="27">(<argument><expr><sizeof pos:line="95" pos:column="28">sizeof<argument_list pos:line="95" pos:column="34">(<argument><expr><name pos:line="95" pos:column="35">libthreaddata_t<pos:position pos:line="95" pos:column="50"/></name></expr></argument>)<pos:position pos:line="95" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="95" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="53"/></expr_stmt>

      <if pos:line="97" pos:column="7">if<condition pos:line="97" pos:column="9">(<expr><name pos:line="97" pos:column="10">thread_data<pos:position pos:line="97" pos:column="21"/></name></expr>)<pos:position pos:line="97" pos:column="22"/></condition><then pos:line="97" pos:column="22"> <block pos:line="97" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="98" pos:column="9">thread_data<pos:position pos:line="98" pos:column="20"/></name><operator pos:line="98" pos:column="20">-&gt;<pos:position pos:line="98" pos:column="25"/></operator><name pos:line="98" pos:column="22">_errno<pos:position pos:line="98" pos:column="28"/></name></name>      <operator pos:line="98" pos:column="34">=<pos:position pos:line="98" pos:column="35"/></operator> <literal type="number" pos:line="98" pos:column="36">0<pos:position pos:line="98" pos:column="37"/></literal></expr>;<pos:position pos:line="98" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="99" pos:column="9">thread_data<pos:position pos:line="99" pos:column="20"/></name><operator pos:line="99" pos:column="20">-&gt;<pos:position pos:line="99" pos:column="25"/></operator><name pos:line="99" pos:column="22">twentybytes<pos:position pos:line="99" pos:column="33"/></name></name> <operator pos:line="99" pos:column="34">=<pos:position pos:line="99" pos:column="35"/></operator> <call><name pos:line="99" pos:column="36">malloc<pos:position pos:line="99" pos:column="42"/></name><argument_list pos:line="99" pos:column="42">(<argument><expr><literal type="number" pos:line="99" pos:column="43">20<pos:position pos:line="99" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="47"/></expr_stmt>

        <if pos:line="101" pos:column="9">if<condition pos:line="101" pos:column="11">(<expr><operator pos:line="101" pos:column="12">!<pos:position pos:line="101" pos:column="13"/></operator><name><name pos:line="101" pos:column="13">thread_data<pos:position pos:line="101" pos:column="24"/></name><operator pos:line="101" pos:column="24">-&gt;<pos:position pos:line="101" pos:column="29"/></operator><name pos:line="101" pos:column="26">twentybytes<pos:position pos:line="101" pos:column="37"/></name></name></expr>)<pos:position pos:line="101" pos:column="38"/></condition><then pos:line="101" pos:column="38"> <block pos:line="101" pos:column="39">{
          <expr_stmt><expr><call><name pos:line="102" pos:column="11">free<pos:position pos:line="102" pos:column="15"/></name><argument_list pos:line="102" pos:column="15">(<argument><expr><name pos:line="102" pos:column="16">thread_data<pos:position pos:line="102" pos:column="27"/></name></expr></argument>)<pos:position pos:line="102" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="29"/></expr_stmt>
          <expr_stmt><expr><name pos:line="103" pos:column="11">thread_data<pos:position pos:line="103" pos:column="22"/></name> <operator pos:line="103" pos:column="23">=<pos:position pos:line="103" pos:column="24"/></operator> <operator pos:line="103" pos:column="25">(<pos:position pos:line="103" pos:column="26"/></operator><name pos:line="103" pos:column="26">libthreaddata_t<pos:position pos:line="103" pos:column="41"/></name> <operator pos:line="103" pos:column="42">*<pos:position pos:line="103" pos:column="43"/></operator><operator pos:line="103" pos:column="43">)<pos:position pos:line="103" pos:column="44"/></operator> <name pos:line="103" pos:column="45">NULL<pos:position pos:line="103" pos:column="49"/></name></expr>;<pos:position pos:line="103" pos:column="50"/></expr_stmt>
          <expr_stmt><expr><name pos:line="104" pos:column="11">err<pos:position pos:line="104" pos:column="14"/></name>         <operator pos:line="104" pos:column="23">=<pos:position pos:line="104" pos:column="24"/></operator> <name pos:line="104" pos:column="25">ENOMEM<pos:position pos:line="104" pos:column="31"/></name></expr>;<pos:position pos:line="104" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="105" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="107" pos:column="9">err<pos:position pos:line="107" pos:column="12"/></name> <operator pos:line="107" pos:column="13">=<pos:position pos:line="107" pos:column="14"/></operator> <call><name pos:line="107" pos:column="15">NXKeySetValue<pos:position pos:line="107" pos:column="28"/></name><argument_list pos:line="107" pos:column="28">(<argument><expr><name pos:line="107" pos:column="29">key<pos:position pos:line="107" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="34">thread_data<pos:position pos:line="107" pos:column="45"/></name></expr></argument>)<pos:position pos:line="107" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="47"/></expr_stmt>
        <if pos:line="108" pos:column="9">if<condition pos:line="108" pos:column="11">(<expr><name pos:line="108" pos:column="12">err<pos:position pos:line="108" pos:column="15"/></name></expr>)<pos:position pos:line="108" pos:column="16"/></condition><then pos:line="108" pos:column="16"> <block pos:line="108" pos:column="17">{
          <expr_stmt><expr><call><name pos:line="109" pos:column="11">free<pos:position pos:line="109" pos:column="15"/></name><argument_list pos:line="109" pos:column="15">(<argument><expr><name><name pos:line="109" pos:column="16">thread_data<pos:position pos:line="109" pos:column="27"/></name><operator pos:line="109" pos:column="27">-&gt;<pos:position pos:line="109" pos:column="32"/></operator><name pos:line="109" pos:column="29">twentybytes<pos:position pos:line="109" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="42"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="110" pos:column="11">free<pos:position pos:line="110" pos:column="15"/></name><argument_list pos:line="110" pos:column="15">(<argument><expr><name pos:line="110" pos:column="16">thread_data<pos:position pos:line="110" pos:column="27"/></name></expr></argument>)<pos:position pos:line="110" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="29"/></expr_stmt>
          <expr_stmt><expr><name pos:line="111" pos:column="11">thread_data<pos:position pos:line="111" pos:column="22"/></name> <operator pos:line="111" pos:column="23">=<pos:position pos:line="111" pos:column="24"/></operator> <operator pos:line="111" pos:column="25">(<pos:position pos:line="111" pos:column="26"/></operator><name pos:line="111" pos:column="26">libthreaddata_t<pos:position pos:line="111" pos:column="41"/></name> <operator pos:line="111" pos:column="42">*<pos:position pos:line="111" pos:column="43"/></operator><operator pos:line="111" pos:column="43">)<pos:position pos:line="111" pos:column="44"/></operator> <name pos:line="111" pos:column="45">NULL<pos:position pos:line="111" pos:column="49"/></name></expr>;<pos:position pos:line="111" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if>
      }<pos:position pos:line="113" pos:column="8"/></block></then></if>
    }<pos:position pos:line="114" pos:column="6"/></block></then></if>
  }<pos:position pos:line="115" pos:column="4"/></block></then></if>

  <if pos:line="117" pos:column="3">if<condition pos:line="117" pos:column="5">(<expr><name pos:line="117" pos:column="6">appData<pos:position pos:line="117" pos:column="13"/></name></expr>)<pos:position pos:line="117" pos:column="14"/></condition><then pos:line="117" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="118" pos:column="5">*<pos:position pos:line="118" pos:column="6"/></operator><name pos:line="118" pos:column="6">appData<pos:position pos:line="118" pos:column="13"/></name> <operator pos:line="118" pos:column="14">=<pos:position pos:line="118" pos:column="15"/></operator> <name pos:line="118" pos:column="16">app_data<pos:position pos:line="118" pos:column="24"/></name></expr>;<pos:position pos:line="118" pos:column="25"/></expr_stmt></block></then></if>

  <if pos:line="120" pos:column="3">if<condition pos:line="120" pos:column="5">(<expr><name pos:line="120" pos:column="6">threadData<pos:position pos:line="120" pos:column="16"/></name></expr>)<pos:position pos:line="120" pos:column="17"/></condition><then pos:line="120" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="121" pos:column="5">*<pos:position pos:line="121" pos:column="6"/></operator><name pos:line="121" pos:column="6">threadData<pos:position pos:line="121" pos:column="16"/></name> <operator pos:line="121" pos:column="17">=<pos:position pos:line="121" pos:column="18"/></operator> <name pos:line="121" pos:column="19">thread_data<pos:position pos:line="121" pos:column="30"/></name></expr>;<pos:position pos:line="121" pos:column="31"/></expr_stmt></block></then></if>

  <return pos:line="123" pos:column="3">return <expr><name pos:line="123" pos:column="10">err<pos:position pos:line="123" pos:column="13"/></name></expr>;<pos:position pos:line="123" pos:column="14"/></return>
}<pos:position pos:line="124" pos:column="2"/></block></function></unit>
