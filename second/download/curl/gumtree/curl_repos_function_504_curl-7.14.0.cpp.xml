<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_504_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_version<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">void<pos:position pos:line="1" pos:column="24"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="25"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><name pos:line="3" pos:column="10">char<pos:position pos:line="3" pos:column="14"/></name></type> <name><name pos:line="3" pos:column="15">version<pos:position pos:line="3" pos:column="22"/></name><index pos:line="3" pos:column="22">[<expr><literal type="number" pos:line="3" pos:column="23">200<pos:position pos:line="3" pos:column="26"/></literal></expr>]<pos:position pos:line="3" pos:column="27"/></index></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">ptr<pos:position pos:line="4" pos:column="12"/></name><init pos:line="4" pos:column="12">=<expr><name pos:line="4" pos:column="13">version<pos:position pos:line="4" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">len<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">left<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><sizeof pos:line="6" pos:column="17">sizeof<argument_list pos:line="6" pos:column="23">(<argument><expr><name pos:line="6" pos:column="24">version<pos:position pos:line="6" pos:column="31"/></name></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">strcpy<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><name pos:line="7" pos:column="10">ptr<pos:position pos:line="7" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="15">LIBCURL_NAME<pos:position pos:line="7" pos:column="27"/></name> <literal type="string" pos:line="7" pos:column="28">"/"<pos:position pos:line="7" pos:column="31"/></literal> <name pos:line="7" pos:column="32">LIBCURL_VERSION<pos:position pos:line="7" pos:column="47"/></name></expr></argument> )<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">ptr<pos:position pos:line="8" pos:column="6"/></name><operator pos:line="8" pos:column="6">=<pos:position pos:line="8" pos:column="7"/></operator><call><name pos:line="8" pos:column="7">strchr<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">ptr<pos:position pos:line="8" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="19">'\0'<pos:position pos:line="8" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="9" pos:column="3">left<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">-=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">strlen<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">ptr<pos:position pos:line="9" pos:column="21"/></name></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><name pos:line="11" pos:column="3">len<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <call><name pos:line="11" pos:column="9">Curl_ssl_version<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">ptr<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">left<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">left<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">-=<pos:position pos:line="12" pos:column="10"/></operator> <name pos:line="12" pos:column="11">len<pos:position pos:line="12" pos:column="14"/></name></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">ptr<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">+=<pos:position pos:line="13" pos:column="9"/></operator> <name pos:line="13" pos:column="10">len<pos:position pos:line="13" pos:column="13"/></name></expr>;<pos:position pos:line="13" pos:column="14"/></expr_stmt>

<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">HAVE_LIBZ<pos:position pos:line="15" pos:column="17"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="16" pos:column="3">len<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">snprintf<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">ptr<pos:position pos:line="16" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="23">left<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="29">" zlib/%s"<pos:position pos:line="16" pos:column="39"/></literal></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="41">zlibVersion<pos:position pos:line="16" pos:column="52"/></name><argument_list pos:line="16" pos:column="52">()<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">left<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">-=<pos:position pos:line="17" pos:column="10"/></operator> <name pos:line="17" pos:column="11">len<pos:position pos:line="17" pos:column="14"/></name></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="18" pos:column="3">ptr<pos:position pos:line="18" pos:column="6"/></name> <operator pos:line="18" pos:column="7">+=<pos:position pos:line="18" pos:column="9"/></operator> <name pos:line="18" pos:column="10">len<pos:position pos:line="18" pos:column="13"/></name></expr>;<pos:position pos:line="18" pos:column="14"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">USE_ARES<pos:position pos:line="20" pos:column="16"/></name></cpp:ifdef>
  <comment type="block" pos:line="21" pos:column="3">/* this function is only present in c-ares, not in the original ares */</comment>
  <expr_stmt><expr><name pos:line="22" pos:column="3">len<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <call><name pos:line="22" pos:column="9">snprintf<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">ptr<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="23">left<pos:position pos:line="22" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="29">" c-ares/%s"<pos:position pos:line="22" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="43">ares_version<pos:position pos:line="22" pos:column="55"/></name><argument_list pos:line="22" pos:column="55">(<argument><expr><name pos:line="22" pos:column="56">NULL<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt>
  <expr_stmt><expr><name pos:line="23" pos:column="3">left<pos:position pos:line="23" pos:column="7"/></name> <operator pos:line="23" pos:column="8">-=<pos:position pos:line="23" pos:column="10"/></operator> <name pos:line="23" pos:column="11">len<pos:position pos:line="23" pos:column="14"/></name></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="24" pos:column="3">ptr<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">+=<pos:position pos:line="24" pos:column="9"/></operator> <name pos:line="24" pos:column="10">len<pos:position pos:line="24" pos:column="13"/></name></expr>;<pos:position pos:line="24" pos:column="14"/></expr_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive> <name pos:line="26" pos:column="8">USE_LIBIDN<pos:position pos:line="26" pos:column="18"/></name></cpp:ifdef>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><call><name pos:line="27" pos:column="6">stringprep_check_version<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">LIBIDN_REQUIRED_VERSION<pos:position pos:line="27" pos:column="54"/></name></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="56"/></condition><then pos:line="27" pos:column="56"> <block pos:line="27" pos:column="57">{
    <expr_stmt><expr><name pos:line="28" pos:column="5">len<pos:position pos:line="28" pos:column="8"/></name> <operator pos:line="28" pos:column="9">=<pos:position pos:line="28" pos:column="10"/></operator> <call><name pos:line="28" pos:column="11">snprintf<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">ptr<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="25">left<pos:position pos:line="28" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="31">" libidn/%s"<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="45">stringprep_check_version<pos:position pos:line="28" pos:column="69"/></name><argument_list pos:line="28" pos:column="69">(<argument><expr><name pos:line="28" pos:column="70">NULL<pos:position pos:line="28" pos:column="74"/></name></expr></argument>)<pos:position pos:line="28" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">left<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">-=<pos:position pos:line="29" pos:column="12"/></operator> <name pos:line="29" pos:column="13">len<pos:position pos:line="29" pos:column="16"/></name></expr>;<pos:position pos:line="29" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="30" pos:column="5">ptr<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">+=<pos:position pos:line="30" pos:column="11"/></operator> <name pos:line="30" pos:column="12">len<pos:position pos:line="30" pos:column="15"/></name></expr>;<pos:position pos:line="30" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="34" pos:column="3">return <expr><name pos:line="34" pos:column="10">version<pos:position pos:line="34" pos:column="17"/></name></expr>;<pos:position pos:line="34" pos:column="18"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
