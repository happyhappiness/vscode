 fputs(
"              skill=lousy'  would  generate  a  post  chunk  that  looks  like\n"
"              'name=daniel&skill=lousy'.\n"
"\n"
"              If you start the data with the letter @, the rest  should  be  a\n"
"              file  name  to read the data from, or - if you want curl to read\n"
"              the data from stdin. Multiple files can also be specified. Post-\n"
"              ing  data  from  a  file  named 'foobar' would thus be done with\n"
, stdout);
 fputs(
"              --data @foobar. When --data is told to read  from  a  file  like\n"
"              that, carriage returns and newlines will be stripped out.\n"
"\n"
"       -D, --dump-header <file>\n"
"              Write the protocol headers to the specified file.\n"
"\n"
"              This  option  is handy to use when you want to store the headers\n"
"              that an HTTP site sends to you. Cookies from the  headers  could\n"
"              then  be  read  in  a  second  curl  invocation by using the -b,\n"
, stdout);
 fputs(
"              --cookie option! The -c, --cookie-jar option is however a better\n"
"              way to store cookies.\n"
"\n"
"              When  used  in FTP, the FTP server response lines are considered\n"
"              being \"headers\" and thus are saved there.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --data-ascii <data>\n"
"              See -d, --data.\n"
"\n"
"       --data-binary <data>\n"
"              (HTTP) This posts data exactly as specified with no  extra  pro-\n"
, stdout);
 fputs(
"              cessing whatsoever.\n"
"\n"
"              If  you  start  the data with the letter @, the rest should be a\n"
"              filename.  Data is posted in a similar  manner  as  --data-ascii\n"
"              does,  except  that  newlines and carriage returns are preserved\n"
"              and conversions are never done.\n"
"\n"
"              If this option is used several times,  the  ones  following  the\n"
"              first will append data as described in -d, --data.\n"
"\n"
"       --data-urlencode <data>\n"
, stdout);
 fputs(
"              (HTTP) This posts data, similar to the other --data options with\n"
"              the exception that this performs URL-encoding. (Added in 7.18.0)\n"
"              To be CGI-compliant, the <data> part should begin  with  a  name\n"
"              followed  by a separator and a content specification. The <data>\n"
"              part can be passed to curl using one of the following syntaxes:\n"
"\n"
"              content\n"
"                     This will make curl URL-encode the content and pass  that\n"
, stdout);
 fputs(
"                     on.  Just  be careful so that the content doesn't contain\n"
"                     any = or @ symbols, as that will  then  make  the  syntax\n"
"                     match one of the other cases below!\n"
"\n"
"              =content\n"
"                     This  will make curl URL-encode the content and pass that\n"
"                     on. The preceding = symbol is not included in the data.\n"
"\n"
"              name=content\n"
, stdout);
 fputs(
"                     This will make curl URL-encode the content part and  pass\n"
"                     that  on.  Note that the name part is expected to be URL-\n"
"                     encoded already.\n"
"\n"
"              @filename\n"
"                     This will  make  curl  load  data  from  the  given  file\n"
"                     (including  any  newlines), URL-encode that data and pass\n"
"                     it on in the POST.\n"
"\n"
"              name@filename\n"
, stdout);
 fputs(
"                     This will  make  curl  load  data  from  the  given  file\n"
"                     (including  any  newlines), URL-encode that data and pass\n"
"                     it on in the POST. The  name  part  gets  an  equal  sign\n"
"                     appended, resulting in name=urlencoded-file-content. Note\n"
"                     that the name is expected to be URL-encoded already.\n"
"\n"
"       --delegation LEVEL\n"
"              Set LEVEL to tell the server what it is allowed to delegate when\n"
, stdout);
 fputs(
"              it comes to user credentials. Used with GSS/kerberos.\n"
"\n"
"              none   Don't allow any delegation.\n"
"\n"
"              policy Delegates  if  and only if the OK-AS-DELEGATE flag is set\n"
"                     in the Kerberos service ticket,  which  is  a  matter  of\n"
"                     realm policy.\n"
"\n"
"              always Unconditionally allow the server to delegate.\n"
"\n"
"       --digest\n"
"              (HTTP)  Enables HTTP Digest authentication. This is an authenti-\n"
, stdout);
 fputs(
"              cation scheme that prevents the password from  being  sent  over\n"
"              the  wire in clear text. Use this in combination with the normal\n"
"              -u, --user option to  set  user  name  and  password.  See  also\n"
"              --ntlm, --negotiate and --anyauth for related options.\n"
"\n"
"              If  this  option  is  used  several times, only the first one is\n"
"              used.\n"
"\n"
"       --disable-eprt\n"
, stdout);
 fputs(
"              (FTP) Tell curl to disable the use of the EPRT and LPRT commands\n"
"              when doing active FTP transfers. Curl will normally always first\n"
"              attempt to use EPRT, then LPRT before using PORT, but with  this\n"
"              option,  it  will  use PORT right away. EPRT and LPRT are exten-\n"
"              sions to the original FTP protocol, and  may  not  work  on  all\n"
"              servers, but they enable more functionality in a better way than\n"
, stdout);
 fputs(
"              the traditional PORT command.\n"
"\n"
"              --eprt can be used to explicitly enable EPRT again and --no-eprt\n"
"              is an alias for --disable-eprt.\n"
"\n"
"              Disabling  EPRT only changes the active behavior. If you want to\n"
"              switch to passive mode you need to not  use  -P,  --ftp-port  or\n"
"              force it with --ftp-pasv.\n"
"\n"
"       --disable-epsv\n"
"              (FTP)  Tell  curl  to  disable  the use of the EPSV command when\n"
, stdout);
 fputs(
"              doing passive FTP transfers. Curl  will  normally  always  first\n"
"              attempt  to  use EPSV before PASV, but with this option, it will\n"
"              not try using EPSV.\n"
"\n"
"              --epsv can be used to explicitly enable EPSV again and --no-epsv\n"
"              is an alias for --disable-epsv.\n"
"\n"
"              Disabling EPSV only changes the passive behavior. If you want to\n"
"              switch to active mode you need to use -P, --ftp-port.\n"
"\n"
, stdout);
 fputs(
"       --dns-interface <interface>\n"
"              Tell curl to send outgoing  DNS  requests  through  <interface>.\n"
"              This  option  is  a  counterpart  to --interface (which does not\n"
"              affect DNS). The supplied string must be an interface name  (not\n"
"              an address).\n"
"\n"
"              This  option  requires  that  libcurl  was built with a resolver\n"
"              backend that supports this operation. The c-ares backend is  the\n"
, stdout);
 fputs(
"              only such one. (Added in 7.33.0)\n"
"\n"
"       --dns-ipv4-addr <ip-address>\n"
"              Tell curl to bind to <ip-address> when making IPv4 DNS requests,\n"
"              so that the DNS requests originate from this address. The  argu-\n"
"              ment should be a single IPv4 address.\n"
"\n"
"              This  option  requires  that  libcurl  was built with a resolver\n"
"              backend that supports this operation. The c-ares backend is  the\n"
, stdout);
 fputs(
"              only such one.  (Added in 7.33.0)\n"
"\n"
"       --dns-ipv6-addr <ip-address>\n"
"              Tell curl to bind to <ip-address> when making IPv6 DNS requests,\n"
"              so that the DNS requests originate from this address. The  argu-\n"
"              ment should be a single IPv6 address.\n"
"\n"
"              This  option  requires  that  libcurl  was built with a resolver\n"
"              backend that supports this operation. The c-ares backend is  the\n"
, stdout);
 fputs(
"              only such one.  (Added in 7.33.0)\n"
"\n"
"       --dns-servers <ip-address,ip-address>\n"
"              Set  the  list  of  DNS servers to be used instead of the system\n"
"              default.  The list of IP addresses should be separated with com-\n"
"              mas. Port numbers may also optionally be given as :<port-number>\n"
"              after each IP address.\n"
"\n"
"              This option requires that libcurl  was  built  with  a  resolver\n"
, stdout);
 fputs(
"              backend  that supports this operation. The c-ares backend is the\n"
"              only such one.  (Added in 7.33.0)\n"
"\n"
"       -e, --referer <URL>\n"
"              (HTTP) Sends the \"Referer Page\" information to the HTTP  server.\n"
"              This can also be set with the -H, --header flag of course.  When\n"
"              used with -L, --location you can append \";auto\" to the --referer\n"
"              URL to make curl automatically set the previous URL when it fol-\n"
, stdout);
 fputs(
"              lows a Location: header. The \";auto\" string can be  used  alone,\n"
"              even if you don't set an initial --referer.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -E, --cert <certificate[:password]>\n"
"              (SSL)  Tells  curl  to use the specified client certificate file\n"
"              when getting a file with HTTPS, FTPS or another SSL-based proto-\n"
"              col.  The  certificate must be in PKCS#12 format if using Secure\n"
, stdout);
 fputs(
"              Transport, or PEM format if using  any  other  engine.   If  the\n"
"              optional password isn't specified, it will be queried for on the\n"
"              terminal. Note that this option  assumes  a  \"certificate\"  file\n"
"              that  is  the  private  key and the private certificate concate-\n"
"              nated! See --cert and --key to specify them independently.\n"
"\n"
"              If curl is built against the NSS SSL library  then  this  option\n"
, stdout);
 fputs(
"              can  tell curl the nickname of the certificate to use within the\n"
"              NSS database defined by the environment variable SSL_DIR (or  by\n"
"              default  /etc/pki/nssdb).  If  the  NSS PEM PKCS#11 module (lib-\n"
"              nsspem.so) is available then PEM files may  be  loaded.  If  you\n"
"              want to use a file from the current directory, please precede it\n"
"              with \"./\" prefix, in order to avoid confusion with  a  nickname.\n"
, stdout);
 fputs(
"              If  the nickname contains \":\", it needs to be preceded by \"\\\" so\n"
"              that it is not recognized as password delimiter.  If  the  nick-\n"
"              name  contains \"\\\", it needs to be escaped as \"\\\\\" so that it is\n"
"              not recognized as an escape character.\n"
"\n"
"              (iOS and Mac OS X only) If curl is built against  Secure  Trans-\n"
"              port,  then  the  certificate string can either be the name of a\n"
, stdout);
 fputs(
"              certificate/private key in the system or user keychain,  or  the\n"
"              path  to  a  PKCS#12-encoded certificate and private key. If you\n"
"              want to use a file from the current directory, please precede it\n"
"              with \"./\" prefix, in order to avoid confusion with a nickname.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --engine <name>\n"
"              Select  the  OpenSSL crypto engine to use for cipher operations.\n"
, stdout);
 fputs(
"              Use --engine list  to  print  a  list  of  build-time  supported\n"
"              engines.  Note  that  not  all  (or  none) of the engines may be\n"
"              available at run-time.\n"
"\n"
"       --environment\n"
"              (RISC OS ONLY) Sets a range of environment variables, using  the\n"
"              names the -w option supports, to allow easier extraction of use-\n"
"              ful information after having run curl.\n"
"\n"
"       --egd-file <file>\n"
, stdout);
 fputs(
"              (SSL) Specify the path name  to  the  Entropy  Gathering  Daemon\n"
"              socket.  The  socket  is  used to seed the random engine for SSL\n"
"              connections. See also the --random-file option.\n"
"\n"
"       --cert-type <type>\n"
"              (SSL) Tells curl what certificate type the provided  certificate\n"
"              is in. PEM, DER and ENG are recognized types.  If not specified,\n"
"              PEM is assumed.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --cacert <CA certificate>\n"
"              (SSL) Tells curl to use the specified certificate file to verify\n"
"              the  peer.  The  file  may contain multiple CA certificates. The\n"
"              certificate(s) must be in PEM format. Normally curl is built  to\n"
"              use a default file for this, so this option is typically used to\n"
"              alter that default file.\n"
"\n"
, stdout);
 fputs(
"              curl recognizes the environment variable named  'CURL_CA_BUNDLE'\n"
"              if  it  is  set,  and uses the given path as a path to a CA cert\n"
"              bundle. This option overrides that variable.\n"
"\n"
"              The windows version of curl will automatically  look  for  a  CA\n"
"              certs file named 'curl-ca-bundle.crt', either in the same direc-\n"
"              tory as curl.exe, or in the Current Working Directory, or in any\n"
"              folder along your PATH.\n"
"\n"
, stdout);
 fputs(
"              If  curl  is  built  against  the  NSS  SSL library, the NSS PEM\n"
"              PKCS#11 module (libnsspem.so) needs to  be  available  for  this\n"
"              option to work properly.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --capath <CA certificate directory>\n"
"              (SSL)  Tells  curl to use the specified certificate directory to\n"
"              verify the peer. Multiple paths can be  provided  by  separating\n"
, stdout);
 fputs(
"              them with \":\" (e.g.  \"path1:path2:path3\"). The certificates must\n"
"              be in PEM format, and if curl  is  built  against  OpenSSL,  the\n"
"              directory  must  have  been processed using the c_rehash utility\n"
"              supplied with OpenSSL. Using --capath can allow  OpenSSL-powered\n"
"              curl  to  make  SSL-connections much more efficiently than using\n"
"              --cacert if the --cacert file contains many CA certificates.\n"
"\n"
, stdout);
 fputs(
"              If this option is set, the default capath value will be ignored,\n"
"              and if it is used several times, the last one will be used.\n"
"\n"
"       -f, --fail\n"
"              (HTTP)  Fail  silently (no output at all) on server errors. This\n"
"              is mostly done to better enable scripts etc to better deal  with\n"
"              failed  attempts.  In  normal cases when an HTTP server fails to\n"
"              deliver a document, it  returns  an  HTML  document  stating  so\n"
, stdout);
 fputs(
"              (which  often  also describes why and more). This flag will pre-\n"
"              vent curl from outputting that and return error 22.\n"
"\n"
"              This method is not fail-safe and there are occasions where  non-\n"
"              successful  response  codes  will  slip through, especially when\n"
"              authentication is involved (response codes 401 and 407).\n"
"\n"
"       -F, --form <name=content>\n"
"              (HTTP) This lets curl emulate a filled-in form in which  a  user\n"
, stdout);
 fputs(
"              has  pressed  the  submit  button. This causes curl to POST data\n"
"              using the  Content-Type  multipart/form-data  according  to  RFC\n"
"              2388.  This  enables uploading of binary files etc. To force the\n"
"              'content' part to be a file, prefix the  file  name  with  an  @\n"
"              sign.  To just get the content part from a file, prefix the file\n"
"              name with the symbol <. The difference between @ and <  is  then\n"
, stdout);
 fputs(
"              that  @  makes a file get attached in the post as a file upload,\n"
"              while the < makes a text field and just  get  the  contents  for\n"
"              that text field from a file.\n"
"\n"
"              Example,  to send your password file to the server, where 'pass-\n"
"              word' is the name of the form-field to which /etc/passwd will be\n"
"              the input:\n"
"\n"
"              curl -F password=@/etc/passwd www.mypasswords.com\n"
"\n"
, stdout);
 fputs(
"              To read content from stdin instead of a file, use - as the file-\n"
"              name. This goes for both @ and < constructs.\n"
"\n"
"              You can also  tell  curl  what  Content-Type  to  use  by  using\n"
"              'type=', in a manner similar to:\n"
"\n"
"              curl -F \"web=@index.html;type=text/html\" url.com\n"
"\n"
"              or\n"
"\n"
"              curl -F \"name=daniel;type=text/foo\" url.com\n"
"\n"
"              You  can  also explicitly change the name field of a file upload\n"
, stdout);
 fputs(
"              part by setting filename=, like this:\n"
"\n"
"              curl -F \"file=@localfile;filename=nameinpost\" url.com\n"
"\n"
"              If filename/path contains ',' or ';', it must be quoted by  dou-\n"
"              ble-quotes like:\n"
"\n"
"              curl -F \"file=@\\\"localfile\\\";filename=\\\"nameinpost\\\"\" url.com\n"
"\n"
"              or\n"
"\n"
"              curl -F 'file=@\"localfile\";filename=\"nameinpost\"' url.com\n"
"\n"
"              Note  that  if  a  filename/path is quoted by double-quotes, any\n"
, stdout);
 fputs(
"              double-quote or backslash within the filename must be escaped by\n"
"              backslash.\n"
"\n"
"              See further examples and details in the MANUAL.\n"
"\n"
"              This option can be used multiple times.\n"
"\n"
"       --ftp-account [data]\n"
"              (FTP) When an FTP server asks for \"account data\" after user name\n"
"              and password has been provided, this data is sent off using  the\n"
"              ACCT command. (Added in 7.13.0)\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --ftp-alternative-to-user <command>\n"
"              (FTP)  If  authenticating with the USER and PASS commands fails,\n"
"              send this  command.   When  connecting  to  Tumbleweed's  Secure\n"
"              Transport  server  over  FTPS  using a client certificate, using\n"
"              \"SITE AUTH\" will tell the server to retrieve the  username  from\n"
"              the certificate. (Added in 7.15.5)\n"
"\n"
, stdout);
 fputs(
"       --ftp-create-dirs\n"
"              (FTP/SFTP)  When  an  FTP or SFTP URL/operation uses a path that\n"
"              doesn't currently exist on the server, the standard behavior  of\n"
"              curl is to fail. Using this option, curl will instead attempt to\n"
"              create missing directories.\n"
"\n"
"       --ftp-method [method]\n"
"              (FTP) Control what method curl should use to reach a file on  an\n"
"              FTP(S)  server. The method argument should be one of the follow-\n"
, stdout);
 fputs(
"              ing alternatives:\n"
"\n"
"              multicwd\n"
"                     curl does a single CWD operation for each  path  part  in\n"
"                     the  given URL. For deep hierarchies this means very many\n"
"                     commands. This is how RFC 1738 says it  should  be  done.\n"
"                     This is the default but the slowest behavior.\n"
"\n"
"              nocwd  curl  does  no  CWD at all. curl will do SIZE, RETR, STOR\n"
, stdout);
 fputs(
"                     etc and give a full path to the server for all these com-\n"
"                     mands. This is the fastest behavior.\n"
"\n"
"              singlecwd\n"
"                     curl does one CWD with the full target directory and then\n"
"                     operates on the file \"normally\"  (like  in  the  multicwd\n"
"                     case).  This  is  somewhat  more standards compliant than\n"
"                     'nocwd' but without the full penalty of 'multicwd'.\n"
"       (Added in 7.15.1)\n"
"\n"
, stdout);
 fputs(
"       --ftp-pasv\n"
"              (FTP) Use passive mode for the data connection. Passive  is  the\n"
"              internal  default behavior, but using this option can be used to\n"
"              override a previous -P/-ftp-port option. (Added in 7.11.0)\n"
"\n"
"              If this option is used several times,  only  the  first  one  is\n"
"              used.  Undoing  an  enforced passive really isn't doable but you\n"
"              must then instead enforce the correct -P, --ftp-port again.\n"
"\n"
, stdout);
 fputs(
"              Passive mode means that curl will try the EPSV command first and\n"
"              then PASV, unless --disable-epsv is used.\n"
"\n"
"       --ftp-skip-pasv-ip\n"
"              (FTP) Tell curl to not use the IP address the server suggests in\n"
"              its response to curl's PASV command when curl connects the  data\n"
"              connection.  Instead  curl  will  re-use  the same IP address it\n"
"              already uses for the control connection. (Added in 7.14.2)\n"
"\n"
, stdout);
 fputs(
"              This option has no effect if PORT, EPRT or EPSV is used  instead\n"
"              of PASV.\n"
"\n"
"       --ftp-pret\n"
"              (FTP)  Tell  curl to send a PRET command before PASV (and EPSV).\n"
"              Certain FTP servers, mainly drftpd,  require  this  non-standard\n"
"              command  for  directory  listings as well as up and downloads in\n"
"              PASV mode.  (Added in 7.20.x)\n"
"\n"
"       --ftp-ssl-ccc\n"
, stdout);
 fputs(
"              (FTP) Use CCC (Clear Command Channel)  Shuts  down  the  SSL/TLS\n"
"              layer after authenticating. The rest of the control channel com-\n"
"              munication will be unencrypted. This allows NAT routers to  fol-\n"
"              low the FTP transaction. The default mode is passive. See --ftp-\n"
"              ssl-ccc-mode for other modes.  (Added in 7.16.1)\n"
"\n"
"       --ftp-ssl-ccc-mode [active/passive]\n"
, stdout);
 fputs(
"              (FTP) Use CCC (Clear Command Channel) Sets  the  CCC  mode.  The\n"
"              passive  mode  will  not initiate the shutdown, but instead wait\n"
"              for the server to do it, and will not reply to the shutdown from\n"
"              the server. The active mode initiates the shutdown and waits for\n"
"              a reply from the server.  (Added in 7.16.2)\n"
"\n"
"       --ftp-ssl-control\n"
"              (FTP) Require SSL/TLS for the FTP  login,  clear  for  transfer.\n"
, stdout);
 fputs(
"              Allows  secure  authentication, but non-encrypted data transfers\n"
"              for efficiency.  Fails the transfer if the server  doesn't  sup-\n"
"              port SSL/TLS.  (Added in 7.16.0) that can still be used but will\n"
"              be removed in a future version.\n"
"\n"
"       --form-string <name=string>\n"
"              (HTTP) Similar to --form except that the value  string  for  the\n"
"              named  parameter  is used literally. Leading '@' and '<' charac-\n"
, stdout);
 fputs(
"              ters, and the ';type=' string in the value have no special mean-\n"
"              ing. Use this in preference to --form if there's any possibility\n"
"              that the string value may accidentally trigger the  '@'  or  '<'\n"
"              features of --form.\n"
"\n"
"       -g, --globoff\n"
"              This option switches off the \"URL globbing parser\". When you set\n"
"              this option, you can specify URLs that contain the letters  {}[]\n"
, stdout);
 fputs(
"              without  having them being interpreted by curl itself. Note that\n"
"              these letters are not normal legal URL contents but they  should\n"
"              be encoded according to the URI standard.\n"
"\n"
"       -G, --get\n"
"              When  used,  this  option  will make all data specified with -d,\n"
"              --data, --data-binary or --data-urlencode to be used in an  HTTP\n"
"              GET  request instead of the POST request that otherwise would be\n"
, stdout);
 fputs(
"              used. The data will be appended to the URL with a '?' separator.\n"
"              If used in combination with -I, the POST data  will  instead  be\n"
"              appended to the URL with a HEAD request.\n"
"\n"
"              If  this  option  is  used  several times, only the first one is\n"
"              used. This is because undoing a GET doesn't make sense, but  you\n"
"              should then instead enforce the alternative method you prefer.\n"
"\n"
"       -H, --header <header>\n"
, stdout);
 fputs(
"              (HTTP)  Extra  header  to  use  when getting a web page. You may\n"
"              specify any number of extra headers. Note that if you should add\n"
"              a  custom  header  that has the same name as one of the internal\n"
"              ones curl would use, your externally set  header  will  be  used\n"
"              instead of the internal one. This allows you to make even trick-\n"
"              ier stuff than curl would normally do. You  should  not  replace\n"
, stdout);
 fputs(
"              internally  set  headers  without  knowing  perfectly  well what\n"
"              you're doing. Remove an internal header by giving a  replacement\n"
"              without  content  on  the  right  side  of  the colon, as in: -H\n"
"              \"Host:\". If you send the custom header with  no-value  then  its\n"
"              header  must  be terminated with a semicolon, such as -H \"X-Cus-\n"
"              tom-Header;\" to send \"X-Custom-Header:\".\n"
"\n"
, stdout);
 fputs(
"              curl will make sure that each header  you  add/replace  is  sent\n"
"              with the proper end-of-line marker, you should thus not add that\n"
"              as a part of the header content: do not add newlines or carriage\n"
"              returns, they will only mess things up for you.\n"
"\n"
"              See also the -A, --user-agent and -e, --referer options.\n"
"\n"
"              This  option  can  be  used multiple times to add/replace/remove\n"
"              multiple headers.\n"
"\n"
, stdout);
 fputs(
"       --hostpubmd5 <md5>\n"
"              (SCP/SFTP) Pass a string containing 32 hexadecimal  digits.  The\n"
"              string  should  be the 128 bit MD5 checksum of the remote host's\n"
"              public key, curl will refuse the connection with the host unless\n"
"              the md5sums match. (Added in 7.17.1)\n"
"\n"
"       --ignore-content-length\n"
"              (HTTP)  Ignore  the  Content-Length header. This is particularly\n"
, stdout);
 fputs(
"              useful for servers running Apache 1.x, which will report  incor-\n"
"              rect Content-Length for files larger than 2 gigabytes.\n"
"\n"
"       -i, --include\n"
"              (HTTP)  Include  the  HTTP-header in the output. The HTTP-header\n"
"              includes things like server-name, date of  the  document,  HTTP-\n"
"              version and more...\n"
"\n"
"       -I, --head\n"
"              (HTTP/FTP/FILE) Fetch the HTTP-header only! HTTP-servers feature\n"
, stdout);
 fputs(
"              the command HEAD which this uses to get nothing but  the  header\n"
"              of  a  document. When used on an FTP or FILE file, curl displays\n"
"              the file size and last modification time only.\n"
"\n"
"       --interface <name>\n"
"              Perform an operation using a specified interface. You can  enter\n"
"              interface  name,  IP address or host name. An example could look\n"
"              like:\n"
"\n"
"               curl --interface eth0:1 http://www.netscape.com/\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -j, --junk-session-cookies\n"
"              (HTTP) When curl is told to read cookies from a given file, this\n"
"              option  will  make  it  discard all \"session cookies\". This will\n"
"              basically have the same effect as if a new session  is  started.\n"
"              Typical  browsers  always  discard  session cookies when they're\n"
"              closed down.\n"
"\n"
"       -J, --remote-header-name\n"
, stdout);
 fputs(
"              (HTTP) This option tells the -O, --remote-name option to use the\n"
"              server-specified   Content-Disposition   filename   instead   of\n"
"              extracting a filename from the URL.\n"
"\n"
"              There's no attempt to decode %-sequences (yet) in  the  provided\n"
"              file name, so this option may provide you with rather unexpected\n"
"              file names.\n"
"\n"
"       -k, --insecure\n"
"              (SSL) This option explicitly allows curl to  perform  \"insecure\"\n"
, stdout);
 fputs(
"              SSL connections and transfers. All SSL connections are attempted\n"
"              to be made secure by using the CA certificate  bundle  installed\n"
"              by  default.  This  makes  all connections considered \"insecure\"\n"
"              fail unless -k, --insecure is used.\n"
"\n"
"              See    this    online    resource    for    further     details:\n"
"              http://curl.haxx.se/docs/sslcerts.html\n"
"\n"
"       -K, --config <config file>\n"
, stdout);
 fputs(
"              Specify  which config file to read curl arguments from. The con-\n"
"              fig file is a text file in which command line arguments  can  be\n"
"              written  which  then will be used as if they were written on the\n"
"              actual command line.\n"
"\n"
"              Options and their parameters must be specified on the same  con-\n"
"              fig  file  line,  separated  by whitespace, colon, or the equals\n"
, stdout);
 fputs(
"              sign. Long option names can optionally be given  in  the  config\n"
"              file  without  the initial double dashes and if so, the colon or\n"
"              equals characters can be used as separators. If  the  option  is\n"
"              specified  with  one  or  two  dashes,  there can be no colon or\n"
"              equals character between the option and its parameter.\n"
"\n"
"              If the parameter is to contain whitespace, the parameter must be\n"
, stdout);
 fputs(
"              enclosed  within  quotes.  Within  double  quotes, the following\n"
"              escape sequences are available: \\\\, \\\", \\t, \\n,  \\r  and  \\v.  A\n"
"              backslash  preceding  any  other letter is ignored. If the first\n"
"              column of a config line is a '#' character, the rest of the line\n"
"              will be treated as a comment. Only write one option per physical\n"
"              line in the config file.\n"
"\n"
, stdout);
 fputs(
"              Specify the filename to -K, --config as '-' to  make  curl  read\n"
"              the file from stdin.\n"
"\n"
"              Note  that  to  be able to specify a URL in the config file, you\n"
"              need to specify it using the --url option,  and  not  by  simply\n"
"              writing  the  URL  on its own line. So, it could look similar to\n"
"              this:\n"
"\n"
"              url = \"http://curl.haxx.se/docs/\"\n"
"\n"
, stdout);
 fputs(
"              When curl is invoked, it always (unless -q is used) checks for a\n"
"              default  config  file  and  uses it if found. The default config\n"
"              file is checked for in the following places in this order:\n"
"\n"
"              1) curl tries to find the \"home dir\": It first  checks  for  the\n"
"              CURL_HOME and then the HOME environment variables. Failing that,\n"
"              it uses getpwuid() on UNIX-like systems (which returns the  home\n"
, stdout);
 fputs(
"              dir  given the current user in your system). On Windows, it then\n"
"              checks for the APPDATA variable, or as a last resort the '%USER-\n"
"              PROFILE%\\Application Data'.\n"
"\n"
"              2)  On  windows, if there is no _curlrc file in the home dir, it\n"
"              checks for one in the same dir the curl executable is placed. On\n"
"              UNIX-like  systems,  it will simply try to load .curlrc from the\n"
"              determined home dir.\n"
"\n"
, stdout);
 fputs(
"              # --- Example file ---\n"
"              # this is a comment\n"
