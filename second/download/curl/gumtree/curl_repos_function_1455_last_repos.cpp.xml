<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1455_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">signalPipeClose<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">curl_llist<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">pipeline<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">bool<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">pipe_broke<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">curl_llist_element<pos:position pos:line="3" pos:column="28"/></name></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type><name pos:line="3" pos:column="30">curr<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>

  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><operator pos:line="5" pos:column="6">!<pos:position pos:line="5" pos:column="7"/></operator><name pos:line="5" pos:column="7">pipeline<pos:position pos:line="5" pos:column="15"/></name></expr>)<pos:position pos:line="5" pos:column="16"/></condition><then pos:line="5" pos:column="16">
    <block type="pseudo"><return pos:line="6" pos:column="5">return;<pos:position pos:line="6" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="8" pos:column="3">curr<pos:position pos:line="8" pos:column="7"/></name> <operator pos:line="8" pos:column="8">=<pos:position pos:line="8" pos:column="9"/></operator> <name><name pos:line="8" pos:column="10">pipeline<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">head<pos:position pos:line="8" pos:column="24"/></name></name></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
  <while pos:line="9" pos:column="3">while<condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">curr<pos:position pos:line="9" pos:column="13"/></name></expr>)<pos:position pos:line="9" pos:column="14"/></condition> <block pos:line="9" pos:column="15">{
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">curl_llist_element<pos:position pos:line="10" pos:column="30"/></name></name> <modifier pos:line="10" pos:column="31">*<pos:position pos:line="10" pos:column="32"/></modifier></type><name pos:line="10" pos:column="32">next<pos:position pos:line="10" pos:column="36"/></name> <init pos:line="10" pos:column="37">= <expr><name><name pos:line="10" pos:column="39">curr<pos:position pos:line="10" pos:column="43"/></name><operator pos:line="10" pos:column="43">-&gt;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="45">next<pos:position pos:line="10" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">Curl_easy<pos:position pos:line="11" pos:column="21"/></name></name> <modifier pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></modifier></type><name pos:line="11" pos:column="23">data<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><operator pos:line="11" pos:column="30">(<pos:position pos:line="11" pos:column="31"/></operator>struct <name pos:line="11" pos:column="38">Curl_easy<pos:position pos:line="11" pos:column="47"/></name> <operator pos:line="11" pos:column="48">*<pos:position pos:line="11" pos:column="49"/></operator><operator pos:line="11" pos:column="49">)<pos:position pos:line="11" pos:column="50"/></operator> <name><name pos:line="11" pos:column="51">curr<pos:position pos:line="11" pos:column="55"/></name><operator pos:line="11" pos:column="55">-&gt;<pos:position pos:line="11" pos:column="60"/></operator><name pos:line="11" pos:column="57">ptr<pos:position pos:line="11" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="61"/></decl_stmt>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">DEBUGBUILD<pos:position pos:line="13" pos:column="18"/></name></cpp:ifdef> <comment type="block" pos:line="13" pos:column="19">/* debug-only code */</comment>
    <if pos:line="14" pos:column="5">if<condition pos:line="14" pos:column="7">(<expr><name><name pos:line="14" pos:column="8">data<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">magic<pos:position pos:line="14" pos:column="19"/></name></name> <operator pos:line="14" pos:column="20">!=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">CURLEASY_MAGIC_NUMBER<pos:position pos:line="14" pos:column="44"/></name></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45"> <block pos:line="14" pos:column="46">{
      <comment type="block" pos:line="15" pos:column="7">/* MAJOR BADNESS */</comment>
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">infof<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">data<pos:position pos:line="16" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="19">"signalPipeClose() found BAAD easy handle\n"<pos:position pos:line="16" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">pipe_broke<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="7">data<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">-&gt;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="13">state<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">.<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">pipe_broke<pos:position pos:line="21" pos:column="29"/></name></name> <operator pos:line="21" pos:column="30">=<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">TRUE<pos:position pos:line="21" pos:column="36"/></name></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">Curl_multi_handlePipeBreak<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">data<pos:position pos:line="22" pos:column="36"/></name></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">Curl_llist_remove<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">pipeline<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="33">curr<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="39">NULL<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">curr<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <name pos:line="24" pos:column="12">next<pos:position pos:line="24" pos:column="16"/></name></expr>;<pos:position pos:line="24" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="25" pos:column="4"/></block></while>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
