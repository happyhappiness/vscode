<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_96_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rlimit<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">void<pos:position pos:line="1" pos:column="23"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="24"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name></decl>;<pos:position pos:line="3" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">rlimit<pos:position pos:line="4" pos:column="16"/></name></name></type> <name pos:line="4" pos:column="17">rl<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">fprintf<pos:position pos:line="6" pos:column="10"/></name><argument_list pos:line="6" pos:column="10">(<argument><expr><name pos:line="6" pos:column="11">stderr<pos:position pos:line="6" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"NUM_OPEN: %d\n"<pos:position pos:line="6" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="37">NUM_OPEN<pos:position pos:line="6" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">fprintf<pos:position pos:line="7" pos:column="10"/></name><argument_list pos:line="7" pos:column="10">(<argument><expr><name pos:line="7" pos:column="11">stderr<pos:position pos:line="7" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="19">"NUM_NEEDED: %d\n"<pos:position pos:line="7" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="39">NUM_NEEDED<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="51"/></expr_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* get open file limits */</comment>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><call><name pos:line="10" pos:column="7">getrlimit<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">RLIMIT_NOFILE<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="32">&amp;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="33">rl<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call> <operator pos:line="10" pos:column="37">==<pos:position pos:line="10" pos:column="39"/></operator> <operator pos:line="10" pos:column="40">-<pos:position pos:line="10" pos:column="41"/></operator><literal type="number" pos:line="10" pos:column="41">1<pos:position pos:line="10" pos:column="42"/></literal></expr>)<pos:position pos:line="10" pos:column="43"/></condition><then pos:line="10" pos:column="43"> <block pos:line="10" pos:column="44">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">fprintf<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">stderr<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="21">"warning: getrlimit: failed to get RLIMIT_NOFILE\n"<pos:position pos:line="11" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">-<pos:position pos:line="12" pos:column="13"/></operator><literal type="number" pos:line="12" pos:column="13">1<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/* check that hard limit is high enough */</comment>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name><name pos:line="16" pos:column="7">rl<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">.<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">rlim_max<pos:position pos:line="16" pos:column="18"/></name></name> <operator pos:line="16" pos:column="19">&lt;<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="21">NUM_NEEDED<pos:position pos:line="16" pos:column="31"/></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32"> <block pos:line="16" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">fprintf<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">stderr<pos:position pos:line="17" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="21">"warning: RLIMIT_NOFILE hard limit %d &lt; %d\n"<pos:position pos:line="17" pos:column="69"/></literal></expr></argument>,
            <argument><expr><operator pos:line="18" pos:column="13">(<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">int<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">)<pos:position pos:line="18" pos:column="18"/></operator><name><name pos:line="18" pos:column="18">rl<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">.<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">rlim_max<pos:position pos:line="18" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="31">NUM_NEEDED<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">-<pos:position pos:line="19" pos:column="13"/></operator><literal type="number" pos:line="19" pos:column="13">2<pos:position pos:line="19" pos:column="14"/></literal></expr>;<pos:position pos:line="19" pos:column="15"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* increase soft limit if needed */</comment>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name><name pos:line="23" pos:column="7">rl<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">.<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">rlim_cur<pos:position pos:line="23" pos:column="18"/></name></name> <operator pos:line="23" pos:column="19">&lt;<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="21">NUM_NEEDED<pos:position pos:line="23" pos:column="31"/></name></expr>)<pos:position pos:line="23" pos:column="32"/></condition><then pos:line="23" pos:column="32"> <block pos:line="23" pos:column="33">{
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">rl<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">.<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">rlim_cur<pos:position pos:line="24" pos:column="16"/></name></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">NUM_NEEDED<pos:position pos:line="24" pos:column="29"/></name></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><call><name pos:line="25" pos:column="9">setrlimit<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">RLIMIT_NOFILE<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="34">&amp;<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="35">rl<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call> <operator pos:line="25" pos:column="39">==<pos:position pos:line="25" pos:column="41"/></operator> <operator pos:line="25" pos:column="42">-<pos:position pos:line="25" pos:column="43"/></operator><literal type="number" pos:line="25" pos:column="43">1<pos:position pos:line="25" pos:column="44"/></literal></expr>)<pos:position pos:line="25" pos:column="45"/></condition><then pos:line="25" pos:column="45"> <block pos:line="25" pos:column="46">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">fprintf<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><name pos:line="26" pos:column="15">stderr<pos:position pos:line="26" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="23">"warning: setrlimit: failed to set RLIMIT_NOFILE\n"<pos:position pos:line="26" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="76"/></expr_stmt>
      <return pos:line="27" pos:column="7">return <expr><operator pos:line="27" pos:column="14">-<pos:position pos:line="27" pos:column="15"/></operator><literal type="number" pos:line="27" pos:column="15">3<pos:position pos:line="27" pos:column="16"/></literal></expr>;<pos:position pos:line="27" pos:column="17"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="31" pos:column="3">/* open a dummy descriptor */</comment>
  <expr_stmt><expr><name><name pos:line="32" pos:column="3">fd<pos:position pos:line="32" pos:column="5"/></name><index pos:line="32" pos:column="5">[<expr><literal type="number" pos:line="32" pos:column="6">0<pos:position pos:line="32" pos:column="7"/></literal></expr>]<pos:position pos:line="32" pos:column="8"/></index></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">open<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">DEV_NULL<pos:position pos:line="32" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="26">O_RDONLY<pos:position pos:line="32" pos:column="34"/></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><name><name pos:line="33" pos:column="7">fd<pos:position pos:line="33" pos:column="9"/></name><index pos:line="33" pos:column="9">[<expr><literal type="number" pos:line="33" pos:column="10">0<pos:position pos:line="33" pos:column="11"/></literal></expr>]<pos:position pos:line="33" pos:column="12"/></index></name> <operator pos:line="33" pos:column="13">==<pos:position pos:line="33" pos:column="15"/></operator> <operator pos:line="33" pos:column="16">-<pos:position pos:line="33" pos:column="17"/></operator><literal type="number" pos:line="33" pos:column="17">1<pos:position pos:line="33" pos:column="18"/></literal></expr>)<pos:position pos:line="33" pos:column="19"/></condition><then pos:line="33" pos:column="19"> <block pos:line="33" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">fprintf<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">stderr<pos:position pos:line="34" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="21">"open: failed to open %s\n"<pos:position pos:line="34" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="50">DEV_NULL<pos:position pos:line="34" pos:column="58"/></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">-<pos:position pos:line="35" pos:column="13"/></operator><literal type="number" pos:line="35" pos:column="13">4<pos:position pos:line="35" pos:column="14"/></literal></expr>;<pos:position pos:line="35" pos:column="15"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="38" pos:column="3">/* create a bunch of file descriptors */</comment>
  <for pos:line="39" pos:column="3">for <control pos:line="39" pos:column="7">(<init><expr><name pos:line="39" pos:column="8">i<pos:position pos:line="39" pos:column="9"/></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <literal type="number" pos:line="39" pos:column="12">1<pos:position pos:line="39" pos:column="13"/></literal></expr>;<pos:position pos:line="39" pos:column="14"/></init> <condition><expr><name pos:line="39" pos:column="15">i<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">&lt;<pos:position pos:line="39" pos:column="21"/></operator> <name pos:line="39" pos:column="19">NUM_OPEN<pos:position pos:line="39" pos:column="27"/></name></expr>;<pos:position pos:line="39" pos:column="28"/></condition> <incr><expr><name pos:line="39" pos:column="29">i<pos:position pos:line="39" pos:column="30"/></name><operator pos:line="39" pos:column="30">++<pos:position pos:line="39" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="39" pos:column="33"/></control> <block pos:line="39" pos:column="34">{
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">fd<pos:position pos:line="40" pos:column="7"/></name><index pos:line="40" pos:column="7">[<expr><name pos:line="40" pos:column="8">i<pos:position pos:line="40" pos:column="9"/></name></expr>]<pos:position pos:line="40" pos:column="10"/></index></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <call><name pos:line="40" pos:column="13">dup<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name><name pos:line="40" pos:column="17">fd<pos:position pos:line="40" pos:column="19"/></name><index pos:line="40" pos:column="19">[<expr><literal type="number" pos:line="40" pos:column="20">0<pos:position pos:line="40" pos:column="21"/></literal></expr>]<pos:position pos:line="40" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name><name pos:line="41" pos:column="9">fd<pos:position pos:line="41" pos:column="11"/></name><index pos:line="41" pos:column="11">[<expr><name pos:line="41" pos:column="12">i<pos:position pos:line="41" pos:column="13"/></name></expr>]<pos:position pos:line="41" pos:column="14"/></index></name> <operator pos:line="41" pos:column="15">==<pos:position pos:line="41" pos:column="17"/></operator> <operator pos:line="41" pos:column="18">-<pos:position pos:line="41" pos:column="19"/></operator><literal type="number" pos:line="41" pos:column="19">1<pos:position pos:line="41" pos:column="20"/></literal></expr>)<pos:position pos:line="41" pos:column="21"/></condition><then pos:line="41" pos:column="21"> <block pos:line="41" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">fprintf<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">stderr<pos:position pos:line="42" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="23">"dup: attempt #%i failed\n"<pos:position pos:line="42" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="52">i<pos:position pos:line="42" pos:column="53"/></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="55"/></expr_stmt>
      <for pos:line="43" pos:column="7">for <control pos:line="43" pos:column="11">(<init><expr><name pos:line="43" pos:column="12">i<pos:position pos:line="43" pos:column="13"/></name><operator pos:line="43" pos:column="13">--<pos:position pos:line="43" pos:column="15"/></operator></expr>;<pos:position pos:line="43" pos:column="16"/></init> <condition><expr><name pos:line="43" pos:column="17">i<pos:position pos:line="43" pos:column="18"/></name> <operator pos:line="43" pos:column="19">&gt;=<pos:position pos:line="43" pos:column="24"/></operator> <literal type="number" pos:line="43" pos:column="22">0<pos:position pos:line="43" pos:column="23"/></literal></expr>;<pos:position pos:line="43" pos:column="24"/></condition> <incr><expr><name pos:line="43" pos:column="25">i<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">--<pos:position pos:line="43" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="43" pos:column="29"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="9">close<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><name><name pos:line="44" pos:column="15">fd<pos:position pos:line="44" pos:column="17"/></name><index pos:line="44" pos:column="17">[<expr><name pos:line="44" pos:column="18">i<pos:position pos:line="44" pos:column="19"/></name></expr>]<pos:position pos:line="44" pos:column="20"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="22"/></expr_stmt></block></for>
      <return pos:line="45" pos:column="7">return <expr><operator pos:line="45" pos:column="14">-<pos:position pos:line="45" pos:column="15"/></operator><literal type="number" pos:line="45" pos:column="15">5<pos:position pos:line="45" pos:column="16"/></literal></expr>;<pos:position pos:line="45" pos:column="17"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>
  }<pos:position pos:line="47" pos:column="4"/></block></for>

  <return pos:line="49" pos:column="3">return <expr><literal type="number" pos:line="49" pos:column="10">0<pos:position pos:line="49" pos:column="11"/></literal></expr>;<pos:position pos:line="49" pos:column="12"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
