<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1587_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mstate<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">Curl_easy<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">data<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">CURLMstate<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">state<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>
<cpp:ifdef pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">ifdef<pos:position pos:line="2" pos:column="7"/></cpp:directive> <name pos:line="2" pos:column="8">DEBUGBUILD<pos:position pos:line="2" pos:column="18"/></name></cpp:ifdef>
                   , <parameter><decl><type><name pos:line="3" pos:column="22">int<pos:position pos:line="3" pos:column="25"/></name></type> <name pos:line="3" pos:column="26">lineno<pos:position pos:line="3" pos:column="32"/></name></decl></parameter>
<cpp:endif pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">endif<pos:position pos:line="4" pos:column="7"/></cpp:directive></cpp:endif>
)<pos:position pos:line="5" pos:column="2"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLMstate<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">oldstate<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">-&gt;<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="31">mstate<pos:position pos:line="7" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="8" pos:column="3">static<pos:position pos:line="8" pos:column="9"/></specifier> <type><specifier pos:line="8" pos:column="10">const<pos:position pos:line="8" pos:column="15"/></specifier> <name pos:line="8" pos:column="16">init_multistate_func<pos:position pos:line="8" pos:column="36"/></name></type> <name><name pos:line="8" pos:column="37">finit<pos:position pos:line="8" pos:column="42"/></name><index pos:line="8" pos:column="42">[<expr><name pos:line="8" pos:column="43">CURLM_STATE_LAST<pos:position pos:line="8" pos:column="59"/></name></expr>]<pos:position pos:line="8" pos:column="60"/></index></name> <init pos:line="8" pos:column="61">= <expr><block pos:line="8" pos:column="63">{
    <expr><name pos:line="9" pos:column="5">NULL<pos:position pos:line="9" pos:column="9"/></name></expr>,
    <expr><name pos:line="10" pos:column="5">NULL<pos:position pos:line="10" pos:column="9"/></name></expr>,
    <expr><name pos:line="11" pos:column="5">Curl_init_CONNECT<pos:position pos:line="11" pos:column="22"/></name></expr>, <comment type="block" pos:line="11" pos:column="24">/* CONNECT */</comment>
    <expr><name pos:line="12" pos:column="5">NULL<pos:position pos:line="12" pos:column="9"/></name></expr>,
    <expr><name pos:line="13" pos:column="5">NULL<pos:position pos:line="13" pos:column="9"/></name></expr>,
    <expr><name pos:line="14" pos:column="5">NULL<pos:position pos:line="14" pos:column="9"/></name></expr>,
    <expr><name pos:line="15" pos:column="5">NULL<pos:position pos:line="15" pos:column="9"/></name></expr>,
    <expr><name pos:line="16" pos:column="5">NULL<pos:position pos:line="16" pos:column="9"/></name></expr>,
    <expr><name pos:line="17" pos:column="5">NULL<pos:position pos:line="17" pos:column="9"/></name></expr>,
    <expr><name pos:line="18" pos:column="5">Curl_connect_free<pos:position pos:line="18" pos:column="22"/></name></expr> <comment type="block" pos:line="18" pos:column="23">/* DO */</comment>
    <comment type="block" pos:line="19" pos:column="5">/* the rest is NULL too */</comment>
  }<pos:position pos:line="20" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="20" pos:column="5"/></decl_stmt>

<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if<pos:position pos:line="22" pos:column="4"/></cpp:directive> <expr><call><name pos:line="22" pos:column="5">defined<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">DEBUGBUILD<pos:position pos:line="22" pos:column="23"/></name></expr></argument>)<pos:position pos:line="22" pos:column="24"/></argument_list></call> <operator pos:line="22" pos:column="25">&amp;&amp;<pos:position pos:line="22" pos:column="35"/></operator> <call><name pos:line="22" pos:column="28">defined<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="22" pos:column="64"/></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><operator pos:line="23" pos:column="3">(<pos:position pos:line="23" pos:column="4"/></operator><name pos:line="23" pos:column="4">void<pos:position pos:line="23" pos:column="8"/></name><operator pos:line="23" pos:column="8">)<pos:position pos:line="23" pos:column="9"/></operator> <name pos:line="23" pos:column="10">lineno<pos:position pos:line="23" pos:column="16"/></name></expr>;<pos:position pos:line="23" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name pos:line="26" pos:column="6">oldstate<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">==<pos:position pos:line="26" pos:column="17"/></operator> <name pos:line="26" pos:column="18">state<pos:position pos:line="26" pos:column="23"/></name></expr>)<pos:position pos:line="26" pos:column="24"/></condition><then pos:line="26" pos:column="24">
    <comment type="block" pos:line="27" pos:column="5">/* don't bother when the new state is the same as the old state */</comment>
    <block type="pseudo"><return pos:line="28" pos:column="5">return;<pos:position pos:line="28" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="30" pos:column="3">data<pos:position pos:line="30" pos:column="7"/></name><operator pos:line="30" pos:column="7">-&gt;<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="9">mstate<pos:position pos:line="30" pos:column="15"/></name></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <name pos:line="30" pos:column="18">state<pos:position pos:line="30" pos:column="23"/></name></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>

<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><call><name pos:line="32" pos:column="5">defined<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><name pos:line="32" pos:column="13">DEBUGBUILD<pos:position pos:line="32" pos:column="23"/></name></expr></argument>)<pos:position pos:line="32" pos:column="24"/></argument_list></call> <operator pos:line="32" pos:column="25">&amp;&amp;<pos:position pos:line="32" pos:column="35"/></operator> <operator pos:line="32" pos:column="28">!<pos:position pos:line="32" pos:column="29"/></operator><call><name pos:line="32" pos:column="29">defined<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name pos:line="32" pos:column="37">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="32" pos:column="65"/></name></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call></expr></cpp:if>
  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><name><name pos:line="33" pos:column="6">data<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">mstate<pos:position pos:line="33" pos:column="18"/></name></name> <operator pos:line="33" pos:column="19">&gt;=<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="22">CURLM_STATE_CONNECT_PEND<pos:position pos:line="33" pos:column="46"/></name> <operator pos:line="33" pos:column="47">&amp;&amp;<pos:position pos:line="33" pos:column="57"/></operator>
     <name><name pos:line="34" pos:column="6">data<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">mstate<pos:position pos:line="34" pos:column="18"/></name></name> <operator pos:line="34" pos:column="19">&lt;<pos:position pos:line="34" pos:column="23"/></operator> <name pos:line="34" pos:column="21">CURLM_STATE_COMPLETED<pos:position pos:line="34" pos:column="42"/></name></expr>)<pos:position pos:line="34" pos:column="43"/></condition><then pos:line="34" pos:column="43"> <block pos:line="34" pos:column="44">{
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">long<pos:position pos:line="35" pos:column="9"/></name></type> <name pos:line="35" pos:column="10">connection_id<pos:position pos:line="35" pos:column="23"/></name> <init pos:line="35" pos:column="24">= <expr><operator pos:line="35" pos:column="26">-<pos:position pos:line="35" pos:column="27"/></operator><literal type="number" pos:line="35" pos:column="27">5000<pos:position pos:line="35" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="35" pos:column="32"/></decl_stmt>

    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">(<expr><name><name pos:line="37" pos:column="8">data<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">-&gt;<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="14">easy_conn<pos:position pos:line="37" pos:column="23"/></name></name></expr>)<pos:position pos:line="37" pos:column="24"/></condition><then pos:line="37" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="7">connection_id<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">=<pos:position pos:line="38" pos:column="22"/></operator> <name><name pos:line="38" pos:column="23">data<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">-&gt;<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="29">easy_conn<pos:position pos:line="38" pos:column="38"/></name><operator pos:line="38" pos:column="38">-&gt;<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="40">connection_id<pos:position pos:line="38" pos:column="53"/></name></name></expr>;<pos:position pos:line="38" pos:column="54"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">infof<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><name pos:line="40" pos:column="11">data<pos:position pos:line="40" pos:column="15"/></name></expr></argument>,
          <argument><expr><literal type="string" pos:line="41" pos:column="11">"STATE: %s =&gt; %s handle %p; line %d (connection #%ld)\n"<pos:position pos:line="41" pos:column="70"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="42" pos:column="11">statename<pos:position pos:line="42" pos:column="20"/></name><index pos:line="42" pos:column="20">[<expr><name pos:line="42" pos:column="21">oldstate<pos:position pos:line="42" pos:column="29"/></name></expr>]<pos:position pos:line="42" pos:column="30"/></index></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="32">statename<pos:position pos:line="42" pos:column="41"/></name><index pos:line="42" pos:column="41">[<expr><name><name pos:line="42" pos:column="42">data<pos:position pos:line="42" pos:column="46"/></name><operator pos:line="42" pos:column="46">-&gt;<pos:position pos:line="42" pos:column="51"/></operator><name pos:line="42" pos:column="48">mstate<pos:position pos:line="42" pos:column="54"/></name></name></expr>]<pos:position pos:line="42" pos:column="55"/></index></name></expr></argument>,
          <argument><expr><operator pos:line="43" pos:column="11">(<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="12">void<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">*<pos:position pos:line="43" pos:column="18"/></operator><operator pos:line="43" pos:column="18">)<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">data<pos:position pos:line="43" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="25">lineno<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="33">connection_id<pos:position pos:line="43" pos:column="46"/></name></expr></argument>)<pos:position pos:line="43" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><name pos:line="47" pos:column="6">state<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">==<pos:position pos:line="47" pos:column="14"/></operator> <name pos:line="47" pos:column="15">CURLM_STATE_COMPLETED<pos:position pos:line="47" pos:column="36"/></name></expr>)<pos:position pos:line="47" pos:column="37"/></condition><then pos:line="47" pos:column="37">
    <comment type="block" pos:line="48" pos:column="5">/* changing to COMPLETED means there's one less easy handle 'alive' */</comment>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="5">data<pos:position pos:line="49" pos:column="9"/></name><operator pos:line="49" pos:column="9">-&gt;<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="11">multi<pos:position pos:line="49" pos:column="16"/></name><operator pos:line="49" pos:column="16">-&gt;<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="18">num_alive<pos:position pos:line="49" pos:column="27"/></name></name><operator pos:line="49" pos:column="27">--<pos:position pos:line="49" pos:column="29"/></operator></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="51" pos:column="3">/* if this state has an init-function, run it */</comment>
  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">(<expr><name><name pos:line="52" pos:column="6">finit<pos:position pos:line="52" pos:column="11"/></name><index pos:line="52" pos:column="11">[<expr><name pos:line="52" pos:column="12">state<pos:position pos:line="52" pos:column="17"/></name></expr>]<pos:position pos:line="52" pos:column="18"/></index></name></expr>)<pos:position pos:line="52" pos:column="19"/></condition><then pos:line="52" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="53" pos:column="5">finit<pos:position pos:line="53" pos:column="10"/></name><index pos:line="53" pos:column="10">[<expr><name pos:line="53" pos:column="11">state<pos:position pos:line="53" pos:column="16"/></name></expr>]<pos:position pos:line="53" pos:column="17"/></index></name><operator pos:line="53" pos:column="17">(<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="18">data<pos:position pos:line="53" pos:column="22"/></name><operator pos:line="53" pos:column="22">)<pos:position pos:line="53" pos:column="23"/></operator></expr>;<pos:position pos:line="53" pos:column="24"/></expr_stmt></block></then></if>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
