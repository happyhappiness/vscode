<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2632_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">HandshakeCallback<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">PRFileDesc<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">sock<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">void<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">arg<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">connectdata<pos:position pos:line="3" pos:column="21"/></name></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">conn<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><operator pos:line="3" pos:column="30">(<pos:position pos:line="3" pos:column="31"/></operator>struct <name pos:line="3" pos:column="38">connectdata<pos:position pos:line="3" pos:column="49"/></name><operator pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></operator><operator pos:line="3" pos:column="50">)<pos:position pos:line="3" pos:column="51"/></operator> <name pos:line="3" pos:column="52">arg<pos:position pos:line="3" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="56"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">buflenmax<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><literal type="number" pos:line="4" pos:column="28">50<pos:position pos:line="4" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name></type> <name><name pos:line="5" pos:column="17">buf<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><literal type="number" pos:line="5" pos:column="21">50<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">int<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">buflen<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">SSLNextProtoState<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">state<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><operator pos:line="9" pos:column="6">!<pos:position pos:line="9" pos:column="7"/></operator><name><name pos:line="9" pos:column="7">conn<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">bits<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">.<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="18">tls_enable_npn<pos:position pos:line="9" pos:column="32"/></name></name> <operator pos:line="9" pos:column="33">&amp;&amp;<pos:position pos:line="9" pos:column="43"/></operator> <operator pos:line="9" pos:column="36">!<pos:position pos:line="9" pos:column="37"/></operator><name><name pos:line="9" pos:column="37">conn<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">-&gt;<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="43">bits<pos:position pos:line="9" pos:column="47"/></name><operator pos:line="9" pos:column="47">.<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="48">tls_enable_alpn<pos:position pos:line="9" pos:column="63"/></name></name></expr>)<pos:position pos:line="9" pos:column="64"/></condition><then pos:line="9" pos:column="64"> <block pos:line="9" pos:column="65">{
    <return pos:line="10" pos:column="5">return;<pos:position pos:line="10" pos:column="12"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><call><name pos:line="13" pos:column="6">SSL_GetNextProto<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">sock<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="29">&amp;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="30">state<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">buf<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="42">&amp;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="43">buflen<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="51">buflenmax<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call> <operator pos:line="13" pos:column="62">==<pos:position pos:line="13" pos:column="64"/></operator> <name pos:line="13" pos:column="65">SECSuccess<pos:position pos:line="13" pos:column="75"/></name></expr>)<pos:position pos:line="13" pos:column="76"/></condition><then pos:line="13" pos:column="76"> <block pos:line="13" pos:column="77">{

    <switch pos:line="15" pos:column="5">switch<condition pos:line="15" pos:column="11">(<expr><name pos:line="15" pos:column="12">state<pos:position pos:line="15" pos:column="17"/></name></expr>)<pos:position pos:line="15" pos:column="18"/></condition> <block pos:line="15" pos:column="19">{
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">NSSVERNUM<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">&gt;=<pos:position pos:line="16" pos:column="20"/></operator> <literal type="number" pos:line="16" pos:column="18">0x031a00<pos:position pos:line="16" pos:column="26"/></literal></expr></cpp:if> <comment type="block" pos:line="16" pos:column="27">/* 3.26.0 */</comment>
    <comment type="block" pos:line="17" pos:column="5">/* used by NSS internally to implement 0-RTT */</comment>
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">SSL_NEXT_PROTO_EARLY_VALUE<pos:position pos:line="18" pos:column="36"/></name></expr>:<pos:position pos:line="18" pos:column="37"/></case>
      <comment type="block" pos:line="19" pos:column="7">/* fall through! */</comment>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">SSL_NEXT_PROTO_NO_SUPPORT<pos:position pos:line="21" pos:column="35"/></name></expr>:<pos:position pos:line="21" pos:column="36"/></case>
    <case pos:line="22" pos:column="5">case <expr><name pos:line="22" pos:column="10">SSL_NEXT_PROTO_NO_OVERLAP<pos:position pos:line="22" pos:column="35"/></name></expr>:<pos:position pos:line="22" pos:column="36"/></case>
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">infof<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name><name pos:line="23" pos:column="13">conn<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">data<pos:position pos:line="23" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="25">"ALPN/NPN, server did not agree to a protocol\n"<pos:position pos:line="23" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt>
      <return pos:line="24" pos:column="7">return;<pos:position pos:line="24" pos:column="14"/></return>
<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">SSL_ENABLE_ALPN<pos:position pos:line="25" pos:column="23"/></name></cpp:ifdef>
    <case pos:line="26" pos:column="5">case <expr><name pos:line="26" pos:column="10">SSL_NEXT_PROTO_SELECTED<pos:position pos:line="26" pos:column="33"/></name></expr>:<pos:position pos:line="26" pos:column="34"/></case>
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">infof<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name><name pos:line="27" pos:column="13">conn<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">-&gt;<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="19">data<pos:position pos:line="27" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="25">"ALPN, server accepted to use %.*s\n"<pos:position pos:line="27" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="64">buflen<pos:position pos:line="27" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="72">buf<pos:position pos:line="27" pos:column="75"/></name></expr></argument>)<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="77"/></expr_stmt>
      <break pos:line="28" pos:column="7">break;<pos:position pos:line="28" pos:column="13"/></break>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="30" pos:column="5">case <expr><name pos:line="30" pos:column="10">SSL_NEXT_PROTO_NEGOTIATED<pos:position pos:line="30" pos:column="35"/></name></expr>:<pos:position pos:line="30" pos:column="36"/></case>
      <expr_stmt><expr><call><name pos:line="31" pos:column="7">infof<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name><name pos:line="31" pos:column="13">conn<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">-&gt;<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="19">data<pos:position pos:line="31" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="25">"NPN, server accepted to use %.*s\n"<pos:position pos:line="31" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">buflen<pos:position pos:line="31" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="71">buf<pos:position pos:line="31" pos:column="74"/></name></expr></argument>)<pos:position pos:line="31" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="76"/></expr_stmt>
      <break pos:line="32" pos:column="7">break;<pos:position pos:line="32" pos:column="13"/></break>
    }<pos:position pos:line="33" pos:column="6"/></block></switch>

<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef<pos:position pos:line="35" pos:column="7"/></cpp:directive> <name pos:line="35" pos:column="8">USE_NGHTTP2<pos:position pos:line="35" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><name pos:line="36" pos:column="8">buflen<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">==<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="36" pos:column="46"/></name> <operator pos:line="36" pos:column="47">&amp;&amp;<pos:position pos:line="36" pos:column="57"/></operator>
       <operator pos:line="37" pos:column="8">!<pos:position pos:line="37" pos:column="9"/></operator><call><name pos:line="37" pos:column="9">memcmp<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="42">buf<pos:position pos:line="37" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="37" pos:column="75"/></name></expr></argument>)<pos:position pos:line="37" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="77"/></condition><then pos:line="37" pos:column="77"> <block pos:line="37" pos:column="78">{
      <expr_stmt><expr><name><name pos:line="38" pos:column="7">conn<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">-&gt;<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="13">negnpn<pos:position pos:line="38" pos:column="19"/></name></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <name pos:line="38" pos:column="22">CURL_HTTP_VERSION_2<pos:position pos:line="38" pos:column="41"/></name></expr>;<pos:position pos:line="38" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then>
    <elseif pos:line="40" pos:column="5">else
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="42" pos:column="5">if<condition pos:line="42" pos:column="7">(<expr><name pos:line="42" pos:column="8">buflen<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">==<pos:position pos:line="42" pos:column="17"/></operator> <name pos:line="42" pos:column="18">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="42" pos:column="38"/></name> <operator pos:line="42" pos:column="39">&amp;&amp;<pos:position pos:line="42" pos:column="49"/></operator>
       <operator pos:line="43" pos:column="8">!<pos:position pos:line="43" pos:column="9"/></operator><call><name pos:line="43" pos:column="9">memcmp<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">ALPN_HTTP_1_1<pos:position pos:line="43" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">buf<pos:position pos:line="43" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="36">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="43" pos:column="56"/></name></expr></argument>)<pos:position pos:line="43" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="58"/></condition><then pos:line="43" pos:column="58"> <block pos:line="43" pos:column="59">{
      <expr_stmt><expr><name><name pos:line="44" pos:column="7">conn<pos:position pos:line="44" pos:column="11"/></name><operator pos:line="44" pos:column="11">-&gt;<pos:position pos:line="44" pos:column="16"/></operator><name pos:line="44" pos:column="13">negnpn<pos:position pos:line="44" pos:column="19"/></name></name> <operator pos:line="44" pos:column="20">=<pos:position pos:line="44" pos:column="21"/></operator> <name pos:line="44" pos:column="22">CURL_HTTP_VERSION_1_1<pos:position pos:line="44" pos:column="43"/></name></expr>;<pos:position pos:line="44" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
