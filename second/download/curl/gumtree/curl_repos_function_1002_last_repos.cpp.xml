<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1002_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">bindlocal<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">curl_socket_t<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">sockfd<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">af<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">unsigned<pos:position pos:line="2" pos:column="65"/></name> <name pos:line="2" pos:column="66">int<pos:position pos:line="2" pos:column="69"/></name></type> <name pos:line="2" pos:column="70">scope<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_sockaddr_storage<pos:position pos:line="6" pos:column="31"/></name></name></type> <name pos:line="6" pos:column="32">sa<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">sockaddr<pos:position pos:line="7" pos:column="18"/></name></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">sock<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><operator pos:line="7" pos:column="27">(<pos:position pos:line="7" pos:column="28"/></operator>struct <name pos:line="7" pos:column="35">sockaddr<pos:position pos:line="7" pos:column="43"/></name> <operator pos:line="7" pos:column="44">*<pos:position pos:line="7" pos:column="45"/></operator><operator pos:line="7" pos:column="45">)<pos:position pos:line="7" pos:column="46"/></operator><operator pos:line="7" pos:column="46">&amp;<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="47">sa<pos:position pos:line="7" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="50"/></decl_stmt>  <comment type="block" pos:line="7" pos:column="52">/* bind to this address */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socklen_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">sizeof_sa<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><literal type="number" pos:line="8" pos:column="30">0<pos:position pos:line="8" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt> <comment type="block" pos:line="8" pos:column="33">/* size of the data sock points to */</comment>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">sockaddr_in<pos:position pos:line="9" pos:column="21"/></name></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">si4<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><operator pos:line="9" pos:column="29">(<pos:position pos:line="9" pos:column="30"/></operator>struct <name pos:line="9" pos:column="37">sockaddr_in<pos:position pos:line="9" pos:column="48"/></name> <operator pos:line="9" pos:column="49">*<pos:position pos:line="9" pos:column="50"/></operator><operator pos:line="9" pos:column="50">)<pos:position pos:line="9" pos:column="51"/></operator><operator pos:line="9" pos:column="51">&amp;<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="52">sa<pos:position pos:line="9" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="55"/></decl_stmt>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">ENABLE_IPV6<pos:position pos:line="10" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">sockaddr_in6<pos:position pos:line="11" pos:column="22"/></name></name> <modifier pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></modifier></type><name pos:line="11" pos:column="24">si6<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><operator pos:line="11" pos:column="30">(<pos:position pos:line="11" pos:column="31"/></operator>struct <name pos:line="11" pos:column="38">sockaddr_in6<pos:position pos:line="11" pos:column="50"/></name> <operator pos:line="11" pos:column="51">*<pos:position pos:line="11" pos:column="52"/></operator><operator pos:line="11" pos:column="52">)<pos:position pos:line="11" pos:column="53"/></operator><operator pos:line="11" pos:column="53">&amp;<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="54">sa<pos:position pos:line="11" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="57"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">Curl_dns_entry<pos:position pos:line="14" pos:column="24"/></name></name> <modifier pos:line="14" pos:column="25">*<pos:position pos:line="14" pos:column="26"/></modifier></type><name pos:line="14" pos:column="26">h<pos:position pos:line="14" pos:column="27"/></name> <init pos:line="14" pos:column="28">= <expr><name pos:line="14" pos:column="30">NULL<pos:position pos:line="14" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">unsigned<pos:position pos:line="15" pos:column="11"/></name> <name pos:line="15" pos:column="12">short<pos:position pos:line="15" pos:column="17"/></name></type> <name pos:line="15" pos:column="18">port<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><name><name pos:line="15" pos:column="25">data<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">set<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">.<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">localport<pos:position pos:line="15" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="15" pos:column="45"/></decl_stmt> <comment type="block" pos:line="15" pos:column="46">/* use this port number, 0 for
                                                "random" */</comment>
  <comment type="block" pos:line="17" pos:column="3">/* how many port numbers to try to bind to, increasing one at a time */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">int<pos:position pos:line="18" pos:column="6"/></name></type> <name pos:line="18" pos:column="7">portnum<pos:position pos:line="18" pos:column="14"/></name> <init pos:line="18" pos:column="15">= <expr><name><name pos:line="18" pos:column="17">data<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">set<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">.<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="27">localportrange<pos:position pos:line="18" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="19" pos:column="3">const<pos:position pos:line="19" pos:column="8"/></specifier> <name pos:line="19" pos:column="9">char<pos:position pos:line="19" pos:column="13"/></name> <modifier pos:line="19" pos:column="14">*<pos:position pos:line="19" pos:column="15"/></modifier></type><name pos:line="19" pos:column="15">dev<pos:position pos:line="19" pos:column="18"/></name> <init pos:line="19" pos:column="19">= <expr><name><name pos:line="19" pos:column="21">data<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">-&gt;<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="27">set<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">.<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">str<pos:position pos:line="19" pos:column="34"/></name><index pos:line="19" pos:column="34">[<expr><name pos:line="19" pos:column="35">STRING_DEVICE<pos:position pos:line="19" pos:column="48"/></name></expr>]<pos:position pos:line="19" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="19" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">error<pos:position pos:line="20" pos:column="12"/></name></decl>;<pos:position pos:line="20" pos:column="13"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="22" pos:column="3">/*************************************************************
   * Select device to bind socket to
   *************************************************************/</comment>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><operator pos:line="25" pos:column="6">!<pos:position pos:line="25" pos:column="7"/></operator><name pos:line="25" pos:column="7">dev<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">&amp;&amp;<pos:position pos:line="25" pos:column="21"/></operator> <operator pos:line="25" pos:column="14">!<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">port<pos:position pos:line="25" pos:column="19"/></name></expr>)<pos:position pos:line="25" pos:column="20"/></condition><then pos:line="25" pos:column="20">
    <comment type="block" pos:line="26" pos:column="5">/* no local kind of binding was requested */</comment>
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">CURLE_OK<pos:position pos:line="27" pos:column="20"/></name></expr>;<pos:position pos:line="27" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="29" pos:column="3">memset<pos:position pos:line="29" pos:column="9"/></name><argument_list pos:line="29" pos:column="9">(<argument><expr><operator pos:line="29" pos:column="10">&amp;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="11">sa<pos:position pos:line="29" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="15">0<pos:position pos:line="29" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="18">sizeof<argument_list pos:line="29" pos:column="24">(<argument><expr pos:line="29" pos:column="25">struct <name pos:line="29" pos:column="32">Curl_sockaddr_storage<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="56"/></expr_stmt>

  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name pos:line="31" pos:column="6">dev<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">&amp;&amp;<pos:position pos:line="31" pos:column="20"/></operator> <operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><call><name pos:line="31" pos:column="14">strlen<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">dev<pos:position pos:line="31" pos:column="24"/></name></expr></argument>)<pos:position pos:line="31" pos:column="25"/></argument_list></call><operator pos:line="31" pos:column="25">&lt;<pos:position pos:line="31" pos:column="29"/></operator><literal type="number" pos:line="31" pos:column="26">255<pos:position pos:line="31" pos:column="29"/></literal><operator pos:line="31" pos:column="29">)<pos:position pos:line="31" pos:column="30"/></operator></expr> )<pos:position pos:line="31" pos:column="32"/></condition><then pos:line="31" pos:column="32"> <block pos:line="31" pos:column="33">{
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">char<pos:position pos:line="32" pos:column="9"/></name></type> <name><name pos:line="32" pos:column="10">myhost<pos:position pos:line="32" pos:column="16"/></name><index pos:line="32" pos:column="16">[<expr><literal type="number" pos:line="32" pos:column="17">256<pos:position pos:line="32" pos:column="20"/></literal></expr>]<pos:position pos:line="32" pos:column="21"/></index></name> <init pos:line="32" pos:column="22">= <expr><literal type="string" pos:line="32" pos:column="24">""<pos:position pos:line="32" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">int<pos:position pos:line="33" pos:column="8"/></name></type> <name pos:line="33" pos:column="9">done<pos:position pos:line="33" pos:column="13"/></name> <init pos:line="33" pos:column="14">= <expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="33" pos:column="18"/></decl_stmt> <comment type="block" pos:line="33" pos:column="19">/* -1 for error, 1 for address found */</comment>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">bool<pos:position pos:line="34" pos:column="9"/></name></type> <name pos:line="34" pos:column="10">is_interface<pos:position pos:line="34" pos:column="22"/></name> <init pos:line="34" pos:column="23">= <expr><name pos:line="34" pos:column="25">FALSE<pos:position pos:line="34" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">bool<pos:position pos:line="35" pos:column="9"/></name></type> <name pos:line="35" pos:column="10">is_host<pos:position pos:line="35" pos:column="17"/></name> <init pos:line="35" pos:column="18">= <expr><name pos:line="35" pos:column="20">FALSE<pos:position pos:line="35" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="36" pos:column="5">static<pos:position pos:line="36" pos:column="11"/></specifier> <type><specifier pos:line="36" pos:column="12">const<pos:position pos:line="36" pos:column="17"/></specifier> <name pos:line="36" pos:column="18">char<pos:position pos:line="36" pos:column="22"/></name> <modifier pos:line="36" pos:column="23">*<pos:position pos:line="36" pos:column="24"/></modifier></type><name pos:line="36" pos:column="24">if_prefix<pos:position pos:line="36" pos:column="33"/></name> <init pos:line="36" pos:column="34">= <expr><literal type="string" pos:line="36" pos:column="36">"if!"<pos:position pos:line="36" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="36" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="37" pos:column="5">static<pos:position pos:line="37" pos:column="11"/></specifier> <type><specifier pos:line="37" pos:column="12">const<pos:position pos:line="37" pos:column="17"/></specifier> <name pos:line="37" pos:column="18">char<pos:position pos:line="37" pos:column="22"/></name> <modifier pos:line="37" pos:column="23">*<pos:position pos:line="37" pos:column="24"/></modifier></type><name pos:line="37" pos:column="24">host_prefix<pos:position pos:line="37" pos:column="35"/></name> <init pos:line="37" pos:column="36">= <expr><literal type="string" pos:line="37" pos:column="38">"host!"<pos:position pos:line="37" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="37" pos:column="46"/></decl_stmt>

    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><call><name pos:line="39" pos:column="8">strncmp<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">if_prefix<pos:position pos:line="39" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="27">dev<pos:position pos:line="39" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="32">strlen<pos:position pos:line="39" pos:column="38"/></name><argument_list pos:line="39" pos:column="38">(<argument><expr><name pos:line="39" pos:column="39">if_prefix<pos:position pos:line="39" pos:column="48"/></name></expr></argument>)<pos:position pos:line="39" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="50"/></argument_list></call> <operator pos:line="39" pos:column="51">==<pos:position pos:line="39" pos:column="53"/></operator> <literal type="number" pos:line="39" pos:column="54">0<pos:position pos:line="39" pos:column="55"/></literal></expr>)<pos:position pos:line="39" pos:column="56"/></condition><then pos:line="39" pos:column="56"> <block pos:line="39" pos:column="57">{
      <expr_stmt><expr><name pos:line="40" pos:column="7">dev<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">+=<pos:position pos:line="40" pos:column="13"/></operator> <call><name pos:line="40" pos:column="14">strlen<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><name pos:line="40" pos:column="21">if_prefix<pos:position pos:line="40" pos:column="30"/></name></expr></argument>)<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="41" pos:column="7">is_interface<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="22">TRUE<pos:position pos:line="41" pos:column="26"/></name></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
    <elseif pos:line="43" pos:column="5">else <if pos:line="43" pos:column="10">if<condition pos:line="43" pos:column="12">(<expr><call><name pos:line="43" pos:column="13">strncmp<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">host_prefix<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="34">dev<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="39">strlen<pos:position pos:line="43" pos:column="45"/></name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">host_prefix<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call> <operator pos:line="43" pos:column="60">==<pos:position pos:line="43" pos:column="62"/></operator> <literal type="number" pos:line="43" pos:column="63">0<pos:position pos:line="43" pos:column="64"/></literal></expr>)<pos:position pos:line="43" pos:column="65"/></condition><then pos:line="43" pos:column="65"> <block pos:line="43" pos:column="66">{
      <expr_stmt><expr><name pos:line="44" pos:column="7">dev<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">+=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">strlen<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name pos:line="44" pos:column="21">host_prefix<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="45" pos:column="7">is_host<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">=<pos:position pos:line="45" pos:column="16"/></operator> <name pos:line="45" pos:column="17">TRUE<pos:position pos:line="45" pos:column="21"/></name></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="48" pos:column="5">/* interface */</comment>
    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><operator pos:line="49" pos:column="8">!<pos:position pos:line="49" pos:column="9"/></operator><name pos:line="49" pos:column="9">is_host<pos:position pos:line="49" pos:column="16"/></name></expr>)<pos:position pos:line="49" pos:column="17"/></condition><then pos:line="49" pos:column="17"> <block pos:line="49" pos:column="18">{
      <switch pos:line="50" pos:column="7">switch<condition pos:line="50" pos:column="13">(<expr><call><name pos:line="50" pos:column="14">Curl_if2ip<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">af<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="29">scope<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="36">conn<pos:position pos:line="50" pos:column="40"/></name><operator pos:line="50" pos:column="40">-&gt;<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="42">scope_id<pos:position pos:line="50" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="52">dev<pos:position pos:line="50" pos:column="55"/></name></expr></argument>,
                        <argument><expr><name pos:line="51" pos:column="25">myhost<pos:position pos:line="51" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="33">sizeof<argument_list pos:line="51" pos:column="39">(<argument><expr><name pos:line="51" pos:column="40">myhost<pos:position pos:line="51" pos:column="46"/></name></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="49"/></condition> <block pos:line="51" pos:column="50">{
        <case pos:line="52" pos:column="9">case <expr><name pos:line="52" pos:column="14">IF2IP_NOT_FOUND<pos:position pos:line="52" pos:column="29"/></name></expr>:<pos:position pos:line="52" pos:column="30"/></case>
          <if pos:line="53" pos:column="11">if<condition pos:line="53" pos:column="13">(<expr><name pos:line="53" pos:column="14">is_interface<pos:position pos:line="53" pos:column="26"/></name></expr>)<pos:position pos:line="53" pos:column="27"/></condition><then pos:line="53" pos:column="27"> <block pos:line="53" pos:column="28">{
            <comment type="block" pos:line="54" pos:column="13">/* Do not fall back to treating it as a host name */</comment>
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">failf<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">data<pos:position pos:line="55" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="25">"Couldn't bind to interface '%s'"<pos:position pos:line="55" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="60">dev<pos:position pos:line="55" pos:column="63"/></name></expr></argument>)<pos:position pos:line="55" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="65"/></expr_stmt>
            <return pos:line="56" pos:column="13">return <expr><name pos:line="56" pos:column="20">CURLE_INTERFACE_FAILED<pos:position pos:line="56" pos:column="42"/></name></expr>;<pos:position pos:line="56" pos:column="43"/></return>
          }<pos:position pos:line="57" pos:column="12"/></block></then></if>
          <break pos:line="58" pos:column="11">break;<pos:position pos:line="58" pos:column="17"/></break>
        <case pos:line="59" pos:column="9">case <expr><name pos:line="59" pos:column="14">IF2IP_AF_NOT_SUPPORTED<pos:position pos:line="59" pos:column="36"/></name></expr>:<pos:position pos:line="59" pos:column="37"/></case>
          <comment type="block" pos:line="60" pos:column="11">/* Signal the caller to try another address family if available */</comment>
          <return pos:line="61" pos:column="11">return <expr><name pos:line="61" pos:column="18">CURLE_UNSUPPORTED_PROTOCOL<pos:position pos:line="61" pos:column="44"/></name></expr>;<pos:position pos:line="61" pos:column="45"/></return>
        <case pos:line="62" pos:column="9">case <expr><name pos:line="62" pos:column="14">IF2IP_FOUND<pos:position pos:line="62" pos:column="25"/></name></expr>:<pos:position pos:line="62" pos:column="26"/></case>
          <expr_stmt><expr><name pos:line="63" pos:column="11">is_interface<pos:position pos:line="63" pos:column="23"/></name> <operator pos:line="63" pos:column="24">=<pos:position pos:line="63" pos:column="25"/></operator> <name pos:line="63" pos:column="26">TRUE<pos:position pos:line="63" pos:column="30"/></name></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt>
          <comment type="block" pos:line="64" pos:column="11">/*
           * We now have the numerical IP address in the 'myhost' buffer
           */</comment>
          <expr_stmt><expr><call><name pos:line="67" pos:column="11">infof<pos:position pos:line="67" pos:column="16"/></name><argument_list pos:line="67" pos:column="16">(<argument><expr><name pos:line="67" pos:column="17">data<pos:position pos:line="67" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="23">"Local Interface %s is ip %s using address family %i\n"<pos:position pos:line="67" pos:column="78"/></literal></expr></argument>,
                <argument><expr><name pos:line="68" pos:column="17">dev<pos:position pos:line="68" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="22">myhost<pos:position pos:line="68" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="30">af<pos:position pos:line="68" pos:column="32"/></name></expr></argument>)<pos:position pos:line="68" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="34"/></expr_stmt>
          <expr_stmt><expr><name pos:line="69" pos:column="11">done<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <literal type="number" pos:line="69" pos:column="18">1<pos:position pos:line="69" pos:column="19"/></literal></expr>;<pos:position pos:line="69" pos:column="20"/></expr_stmt>

<cpp:ifdef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifdef<pos:position pos:line="71" pos:column="7"/></cpp:directive> <name pos:line="71" pos:column="8">SO_BINDTODEVICE<pos:position pos:line="71" pos:column="23"/></name></cpp:ifdef>
          <comment type="block" pos:line="72" pos:column="11">/* I am not sure any other OSs than Linux that provide this feature,
           * and at the least I cannot test. --Ben
           *
           * This feature allows one to tightly bind the local socket to a
           * particular interface.  This will force even requests to other
           * local interfaces to go out the external interface.
           *
           *
           * Only bind to the interface when specified as interface, not just
           * as a hostname or ip address.
           */</comment>
          <if pos:line="83" pos:column="11">if<condition pos:line="83" pos:column="13">(<expr><call><name pos:line="83" pos:column="14">setsockopt<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><name pos:line="83" pos:column="25">sockfd<pos:position pos:line="83" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="33">SOL_SOCKET<pos:position pos:line="83" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="45">SO_BINDTODEVICE<pos:position pos:line="83" pos:column="60"/></name></expr></argument>,
                        <argument><expr><name pos:line="84" pos:column="25">dev<pos:position pos:line="84" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="30">(<pos:position pos:line="84" pos:column="31"/></operator><name pos:line="84" pos:column="31">curl_socklen_t<pos:position pos:line="84" pos:column="45"/></name><operator pos:line="84" pos:column="45">)<pos:position pos:line="84" pos:column="46"/></operator><call><name pos:line="84" pos:column="46">strlen<pos:position pos:line="84" pos:column="52"/></name><argument_list pos:line="84" pos:column="52">(<argument><expr><name pos:line="84" pos:column="53">dev<pos:position pos:line="84" pos:column="56"/></name></expr></argument>)<pos:position pos:line="84" pos:column="57"/></argument_list></call> <operator pos:line="84" pos:column="58">+<pos:position pos:line="84" pos:column="59"/></operator> <literal type="number" pos:line="84" pos:column="60">1<pos:position pos:line="84" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="62"/></argument_list></call> <operator pos:line="84" pos:column="63">!=<pos:position pos:line="84" pos:column="65"/></operator> <literal type="number" pos:line="84" pos:column="66">0<pos:position pos:line="84" pos:column="67"/></literal></expr>)<pos:position pos:line="84" pos:column="68"/></condition><then pos:line="84" pos:column="68"> <block pos:line="84" pos:column="69">{
            <expr_stmt><expr><name pos:line="85" pos:column="13">error<pos:position pos:line="85" pos:column="18"/></name> <operator pos:line="85" pos:column="19">=<pos:position pos:line="85" pos:column="20"/></operator> <name pos:line="85" pos:column="21">SOCKERRNO<pos:position pos:line="85" pos:column="30"/></name></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">infof<pos:position pos:line="86" pos:column="18"/></name><argument_list pos:line="86" pos:column="18">(<argument><expr><name pos:line="86" pos:column="19">data<pos:position pos:line="86" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="25">"SO_BINDTODEVICE %s failed with errno %d: %s;"<pos:position pos:line="86" pos:column="71"/></literal>
                  <literal type="string" pos:line="87" pos:column="19">" will do regular bind\n"<pos:position pos:line="87" pos:column="44"/></literal></expr></argument>,
                  <argument><expr><name pos:line="88" pos:column="19">dev<pos:position pos:line="88" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="24">error<pos:position pos:line="88" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="88" pos:column="31">Curl_strerror<pos:position pos:line="88" pos:column="44"/></name><argument_list pos:line="88" pos:column="44">(<argument><expr><name pos:line="88" pos:column="45">conn<pos:position pos:line="88" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="51">error<pos:position pos:line="88" pos:column="56"/></name></expr></argument>)<pos:position pos:line="88" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="88" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="59"/></expr_stmt>
            <comment type="block" pos:line="89" pos:column="13">/* This is typically "errno 1, error: Operation not permitted" if
               you're not running as root or another suitable privileged
               user */</comment>
          }<pos:position pos:line="92" pos:column="12"/></block></then></if>
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif<pos:position pos:line="93" pos:column="7"/></cpp:directive></cpp:endif>
          <break pos:line="94" pos:column="11">break;<pos:position pos:line="94" pos:column="17"/></break>
      }<pos:position pos:line="95" pos:column="8"/></block></switch>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>
    <if pos:line="97" pos:column="5">if<condition pos:line="97" pos:column="7">(<expr><operator pos:line="97" pos:column="8">!<pos:position pos:line="97" pos:column="9"/></operator><name pos:line="97" pos:column="9">is_interface<pos:position pos:line="97" pos:column="21"/></name></expr>)<pos:position pos:line="97" pos:column="22"/></condition><then pos:line="97" pos:column="22"> <block pos:line="97" pos:column="23">{
      <comment type="block" pos:line="98" pos:column="7">/*
       * This was not an interface, resolve the name as a host name
       * or IP number
       *
       * Temporarily force name resolution to use only the address type
       * of the connection. The resolve functions should really be changed
       * to take a type parameter instead.
       */</comment>
      <decl_stmt><decl><type><name pos:line="106" pos:column="7">long<pos:position pos:line="106" pos:column="11"/></name></type> <name pos:line="106" pos:column="12">ipver<pos:position pos:line="106" pos:column="17"/></name> <init pos:line="106" pos:column="18">= <expr><name><name pos:line="106" pos:column="20">conn<pos:position pos:line="106" pos:column="24"/></name><operator pos:line="106" pos:column="24">-&gt;<pos:position pos:line="106" pos:column="29"/></operator><name pos:line="106" pos:column="26">ip_version<pos:position pos:line="106" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="106" pos:column="37"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="107" pos:column="7">int<pos:position pos:line="107" pos:column="10"/></name></type> <name pos:line="107" pos:column="11">rc<pos:position pos:line="107" pos:column="13"/></name></decl>;<pos:position pos:line="107" pos:column="14"/></decl_stmt>

      <if pos:line="109" pos:column="7">if<condition pos:line="109" pos:column="9">(<expr><name pos:line="109" pos:column="10">af<pos:position pos:line="109" pos:column="12"/></name> <operator pos:line="109" pos:column="13">==<pos:position pos:line="109" pos:column="15"/></operator> <name pos:line="109" pos:column="16">AF_INET<pos:position pos:line="109" pos:column="23"/></name></expr>)<pos:position pos:line="109" pos:column="24"/></condition><then pos:line="109" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="110" pos:column="9">conn<pos:position pos:line="110" pos:column="13"/></name><operator pos:line="110" pos:column="13">-&gt;<pos:position pos:line="110" pos:column="18"/></operator><name pos:line="110" pos:column="15">ip_version<pos:position pos:line="110" pos:column="25"/></name></name> <operator pos:line="110" pos:column="26">=<pos:position pos:line="110" pos:column="27"/></operator> <name pos:line="110" pos:column="28">CURL_IPRESOLVE_V4<pos:position pos:line="110" pos:column="45"/></name></expr>;<pos:position pos:line="110" pos:column="46"/></expr_stmt></block></then>
<cpp:ifdef pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">ifdef<pos:position pos:line="111" pos:column="7"/></cpp:directive> <name pos:line="111" pos:column="8">ENABLE_IPV6<pos:position pos:line="111" pos:column="19"/></name></cpp:ifdef>
      <elseif pos:line="112" pos:column="7">else <if pos:line="112" pos:column="12">if<condition pos:line="112" pos:column="14">(<expr><name pos:line="112" pos:column="15">af<pos:position pos:line="112" pos:column="17"/></name> <operator pos:line="112" pos:column="18">==<pos:position pos:line="112" pos:column="20"/></operator> <name pos:line="112" pos:column="21">AF_INET6<pos:position pos:line="112" pos:column="29"/></name></expr>)<pos:position pos:line="112" pos:column="30"/></condition><then pos:line="112" pos:column="30">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="113" pos:column="9">conn<pos:position pos:line="113" pos:column="13"/></name><operator pos:line="113" pos:column="13">-&gt;<pos:position pos:line="113" pos:column="18"/></operator><name pos:line="113" pos:column="15">ip_version<pos:position pos:line="113" pos:column="25"/></name></name> <operator pos:line="113" pos:column="26">=<pos:position pos:line="113" pos:column="27"/></operator> <name pos:line="113" pos:column="28">CURL_IPRESOLVE_V6<pos:position pos:line="113" pos:column="45"/></name></expr>;<pos:position pos:line="113" pos:column="46"/></expr_stmt></block></then></if></elseif></if>
<cpp:endif pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">endif<pos:position pos:line="114" pos:column="7"/></cpp:directive></cpp:endif>

      <expr_stmt><expr><name pos:line="116" pos:column="7">rc<pos:position pos:line="116" pos:column="9"/></name> <operator pos:line="116" pos:column="10">=<pos:position pos:line="116" pos:column="11"/></operator> <call><name pos:line="116" pos:column="12">Curl_resolv<pos:position pos:line="116" pos:column="23"/></name><argument_list pos:line="116" pos:column="23">(<argument><expr><name pos:line="116" pos:column="24">conn<pos:position pos:line="116" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="30">dev<pos:position pos:line="116" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="116" pos:column="35">0<pos:position pos:line="116" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="116" pos:column="38">&amp;<pos:position pos:line="116" pos:column="43"/></operator><name pos:line="116" pos:column="39">h<pos:position pos:line="116" pos:column="40"/></name></expr></argument>)<pos:position pos:line="116" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="42"/></expr_stmt>
      <if pos:line="117" pos:column="7">if<condition pos:line="117" pos:column="9">(<expr><name pos:line="117" pos:column="10">rc<pos:position pos:line="117" pos:column="12"/></name> <operator pos:line="117" pos:column="13">==<pos:position pos:line="117" pos:column="15"/></operator> <name pos:line="117" pos:column="16">CURLRESOLV_PENDING<pos:position pos:line="117" pos:column="34"/></name></expr>)<pos:position pos:line="117" pos:column="35"/></condition><then pos:line="117" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="118" pos:column="9">(<pos:position pos:line="118" pos:column="10"/></operator><name pos:line="118" pos:column="10">void<pos:position pos:line="118" pos:column="14"/></name><operator pos:line="118" pos:column="14">)<pos:position pos:line="118" pos:column="15"/></operator><call><name pos:line="118" pos:column="15">Curl_resolver_wait_resolv<pos:position pos:line="118" pos:column="40"/></name><argument_list pos:line="118" pos:column="40">(<argument><expr><name pos:line="118" pos:column="41">conn<pos:position pos:line="118" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="118" pos:column="47">&amp;<pos:position pos:line="118" pos:column="52"/></operator><name pos:line="118" pos:column="48">h<pos:position pos:line="118" pos:column="49"/></name></expr></argument>)<pos:position pos:line="118" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="51"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name><name pos:line="119" pos:column="7">conn<pos:position pos:line="119" pos:column="11"/></name><operator pos:line="119" pos:column="11">-&gt;<pos:position pos:line="119" pos:column="16"/></operator><name pos:line="119" pos:column="13">ip_version<pos:position pos:line="119" pos:column="23"/></name></name> <operator pos:line="119" pos:column="24">=<pos:position pos:line="119" pos:column="25"/></operator> <name pos:line="119" pos:column="26">ipver<pos:position pos:line="119" pos:column="31"/></name></expr>;<pos:position pos:line="119" pos:column="32"/></expr_stmt>

      <if pos:line="121" pos:column="7">if<condition pos:line="121" pos:column="9">(<expr><name pos:line="121" pos:column="10">h<pos:position pos:line="121" pos:column="11"/></name></expr>)<pos:position pos:line="121" pos:column="12"/></condition><then pos:line="121" pos:column="12"> <block pos:line="121" pos:column="13">{
        <comment type="block" pos:line="122" pos:column="9">/* convert the resolved address, sizeof myhost &gt;= INET_ADDRSTRLEN */</comment>
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">Curl_printable_address<pos:position pos:line="123" pos:column="31"/></name><argument_list pos:line="123" pos:column="31">(<argument><expr><name><name pos:line="123" pos:column="32">h<pos:position pos:line="123" pos:column="33"/></name><operator pos:line="123" pos:column="33">-&gt;<pos:position pos:line="123" pos:column="38"/></operator><name pos:line="123" pos:column="35">addr<pos:position pos:line="123" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="41">myhost<pos:position pos:line="123" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="123" pos:column="49">sizeof<argument_list pos:line="123" pos:column="55">(<argument><expr><name pos:line="123" pos:column="56">myhost<pos:position pos:line="123" pos:column="62"/></name></expr></argument>)<pos:position pos:line="123" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="123" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="124" pos:column="9">infof<pos:position pos:line="124" pos:column="14"/></name><argument_list pos:line="124" pos:column="14">(<argument><expr><name pos:line="124" pos:column="15">data<pos:position pos:line="124" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="21">"Name '%s' family %i resolved to '%s' family %i\n"<pos:position pos:line="124" pos:column="71"/></literal></expr></argument>,
              <argument><expr><name pos:line="125" pos:column="15">dev<pos:position pos:line="125" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="20">af<pos:position pos:line="125" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="24">myhost<pos:position pos:line="125" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="32">h<pos:position pos:line="125" pos:column="33"/></name><operator pos:line="125" pos:column="33">-&gt;<pos:position pos:line="125" pos:column="38"/></operator><name pos:line="125" pos:column="35">addr<pos:position pos:line="125" pos:column="39"/></name><operator pos:line="125" pos:column="39">-&gt;<pos:position pos:line="125" pos:column="44"/></operator><name pos:line="125" pos:column="41">ai_family<pos:position pos:line="125" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="125" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">Curl_resolv_unlock<pos:position pos:line="126" pos:column="27"/></name><argument_list pos:line="126" pos:column="27">(<argument><expr><name pos:line="126" pos:column="28">data<pos:position pos:line="126" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="34">h<pos:position pos:line="126" pos:column="35"/></name></expr></argument>)<pos:position pos:line="126" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="127" pos:column="9">done<pos:position pos:line="127" pos:column="13"/></name> <operator pos:line="127" pos:column="14">=<pos:position pos:line="127" pos:column="15"/></operator> <literal type="number" pos:line="127" pos:column="16">1<pos:position pos:line="127" pos:column="17"/></literal></expr>;<pos:position pos:line="127" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="128" pos:column="8"/></block></then>
      <else pos:line="129" pos:column="7">else <block pos:line="129" pos:column="12">{
        <comment type="block" pos:line="130" pos:column="9">/*
         * provided dev was no interface (or interfaces are not supported
         * e.g. solaris) no ip address and no domain we fail here
         */</comment>
        <expr_stmt><expr><name pos:line="134" pos:column="9">done<pos:position pos:line="134" pos:column="13"/></name> <operator pos:line="134" pos:column="14">=<pos:position pos:line="134" pos:column="15"/></operator> <operator pos:line="134" pos:column="16">-<pos:position pos:line="134" pos:column="17"/></operator><literal type="number" pos:line="134" pos:column="17">1<pos:position pos:line="134" pos:column="18"/></literal></expr>;<pos:position pos:line="134" pos:column="19"/></expr_stmt>
      }<pos:position pos:line="135" pos:column="8"/></block></else></if>
    }<pos:position pos:line="136" pos:column="6"/></block></then></if>

    <if pos:line="138" pos:column="5">if<condition pos:line="138" pos:column="7">(<expr><name pos:line="138" pos:column="8">done<pos:position pos:line="138" pos:column="12"/></name> <operator pos:line="138" pos:column="13">&gt;<pos:position pos:line="138" pos:column="17"/></operator> <literal type="number" pos:line="138" pos:column="15">0<pos:position pos:line="138" pos:column="16"/></literal></expr>)<pos:position pos:line="138" pos:column="17"/></condition><then pos:line="138" pos:column="17"> <block pos:line="138" pos:column="18">{
<cpp:ifdef pos:line="139" pos:column="1">#<cpp:directive pos:line="139" pos:column="2">ifdef<pos:position pos:line="139" pos:column="7"/></cpp:directive> <name pos:line="139" pos:column="8">ENABLE_IPV6<pos:position pos:line="139" pos:column="19"/></name></cpp:ifdef>
      <comment type="block" pos:line="140" pos:column="7">/* IPv6 address */</comment>
      <if pos:line="141" pos:column="7">if<condition pos:line="141" pos:column="9">(<expr><name pos:line="141" pos:column="10">af<pos:position pos:line="141" pos:column="12"/></name> <operator pos:line="141" pos:column="13">==<pos:position pos:line="141" pos:column="15"/></operator> <name pos:line="141" pos:column="16">AF_INET6<pos:position pos:line="141" pos:column="24"/></name></expr>)<pos:position pos:line="141" pos:column="25"/></condition><then pos:line="141" pos:column="25"> <block pos:line="141" pos:column="26">{
<cpp:ifdef pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">ifdef<pos:position pos:line="142" pos:column="7"/></cpp:directive> <name pos:line="142" pos:column="8">HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID<pos:position pos:line="142" pos:column="39"/></name></cpp:ifdef>
        <decl_stmt><decl><type><name pos:line="143" pos:column="9">char<pos:position pos:line="143" pos:column="13"/></name> <modifier pos:line="143" pos:column="14">*<pos:position pos:line="143" pos:column="15"/></modifier></type><name pos:line="143" pos:column="15">scope_ptr<pos:position pos:line="143" pos:column="24"/></name> <init pos:line="143" pos:column="25">= <expr><call><name pos:line="143" pos:column="27">strchr<pos:position pos:line="143" pos:column="33"/></name><argument_list pos:line="143" pos:column="33">(<argument><expr><name pos:line="143" pos:column="34">myhost<pos:position pos:line="143" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="143" pos:column="42">'%'<pos:position pos:line="143" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="143" pos:column="47"/></decl_stmt>
        <if pos:line="144" pos:column="9">if<condition pos:line="144" pos:column="11">(<expr><name pos:line="144" pos:column="12">scope_ptr<pos:position pos:line="144" pos:column="21"/></name></expr>)<pos:position pos:line="144" pos:column="22"/></condition><then pos:line="144" pos:column="22">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="145" pos:column="11">*<pos:position pos:line="145" pos:column="12"/></operator><operator pos:line="145" pos:column="12">(<pos:position pos:line="145" pos:column="13"/></operator><name pos:line="145" pos:column="13">scope_ptr<pos:position pos:line="145" pos:column="22"/></name><operator pos:line="145" pos:column="22">++<pos:position pos:line="145" pos:column="24"/></operator><operator pos:line="145" pos:column="24">)<pos:position pos:line="145" pos:column="25"/></operator> <operator pos:line="145" pos:column="26">=<pos:position pos:line="145" pos:column="27"/></operator> <literal type="number" pos:line="145" pos:column="28">0<pos:position pos:line="145" pos:column="29"/></literal></expr>;<pos:position pos:line="145" pos:column="30"/></expr_stmt></block></then></if>
<cpp:endif pos:line="146" pos:column="1">#<cpp:directive pos:line="146" pos:column="2">endif<pos:position pos:line="146" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="147" pos:column="9">if<condition pos:line="147" pos:column="11">(<expr><call><name pos:line="147" pos:column="12">Curl_inet_pton<pos:position pos:line="147" pos:column="26"/></name><argument_list pos:line="147" pos:column="26">(<argument><expr><name pos:line="147" pos:column="27">AF_INET6<pos:position pos:line="147" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="37">myhost<pos:position pos:line="147" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="147" pos:column="45">&amp;<pos:position pos:line="147" pos:column="50"/></operator><name><name pos:line="147" pos:column="46">si6<pos:position pos:line="147" pos:column="49"/></name><operator pos:line="147" pos:column="49">-&gt;<pos:position pos:line="147" pos:column="54"/></operator><name pos:line="147" pos:column="51">sin6_addr<pos:position pos:line="147" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="61"/></argument_list></call> <operator pos:line="147" pos:column="62">&gt;<pos:position pos:line="147" pos:column="66"/></operator> <literal type="number" pos:line="147" pos:column="64">0<pos:position pos:line="147" pos:column="65"/></literal></expr>)<pos:position pos:line="147" pos:column="66"/></condition><then pos:line="147" pos:column="66"> <block pos:line="147" pos:column="67">{
          <expr_stmt><expr><name><name pos:line="148" pos:column="11">si6<pos:position pos:line="148" pos:column="14"/></name><operator pos:line="148" pos:column="14">-&gt;<pos:position pos:line="148" pos:column="19"/></operator><name pos:line="148" pos:column="16">sin6_family<pos:position pos:line="148" pos:column="27"/></name></name> <operator pos:line="148" pos:column="28">=<pos:position pos:line="148" pos:column="29"/></operator> <name pos:line="148" pos:column="30">AF_INET6<pos:position pos:line="148" pos:column="38"/></name></expr>;<pos:position pos:line="148" pos:column="39"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="149" pos:column="11">si6<pos:position pos:line="149" pos:column="14"/></name><operator pos:line="149" pos:column="14">-&gt;<pos:position pos:line="149" pos:column="19"/></operator><name pos:line="149" pos:column="16">sin6_port<pos:position pos:line="149" pos:column="25"/></name></name> <operator pos:line="149" pos:column="26">=<pos:position pos:line="149" pos:column="27"/></operator> <call><name pos:line="149" pos:column="28">htons<pos:position pos:line="149" pos:column="33"/></name><argument_list pos:line="149" pos:column="33">(<argument><expr><name pos:line="149" pos:column="34">port<pos:position pos:line="149" pos:column="38"/></name></expr></argument>)<pos:position pos:line="149" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="40"/></expr_stmt>
<cpp:ifdef pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">ifdef<pos:position pos:line="150" pos:column="7"/></cpp:directive> <name pos:line="150" pos:column="8">HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID<pos:position pos:line="150" pos:column="39"/></name></cpp:ifdef>
          <if pos:line="151" pos:column="11">if<condition pos:line="151" pos:column="13">(<expr><name pos:line="151" pos:column="14">scope_ptr<pos:position pos:line="151" pos:column="23"/></name></expr>)<pos:position pos:line="151" pos:column="24"/></condition><then pos:line="151" pos:column="24">
            <comment type="block" pos:line="152" pos:column="13">/* The "myhost" string either comes from Curl_if2ip or from
               Curl_printable_address. The latter returns only numeric scope
               IDs and the former returns none at all.  So the scope ID, if
               present, is known to be numeric */</comment>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="156" pos:column="13">si6<pos:position pos:line="156" pos:column="16"/></name><operator pos:line="156" pos:column="16">-&gt;<pos:position pos:line="156" pos:column="21"/></operator><name pos:line="156" pos:column="18">sin6_scope_id<pos:position pos:line="156" pos:column="31"/></name></name> <operator pos:line="156" pos:column="32">=<pos:position pos:line="156" pos:column="33"/></operator> <call><name pos:line="156" pos:column="34">atoi<pos:position pos:line="156" pos:column="38"/></name><argument_list pos:line="156" pos:column="38">(<argument><expr><name pos:line="156" pos:column="39">scope_ptr<pos:position pos:line="156" pos:column="48"/></name></expr></argument>)<pos:position pos:line="156" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="50"/></expr_stmt></block></then></if>
<cpp:endif pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">endif<pos:position pos:line="157" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="158" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="159" pos:column="9">sizeof_sa<pos:position pos:line="159" pos:column="18"/></name> <operator pos:line="159" pos:column="19">=<pos:position pos:line="159" pos:column="20"/></operator> <sizeof pos:line="159" pos:column="21">sizeof<argument_list pos:line="159" pos:column="27">(<argument><expr pos:line="159" pos:column="28">struct <name pos:line="159" pos:column="35">sockaddr_in6<pos:position pos:line="159" pos:column="47"/></name></expr></argument>)<pos:position pos:line="159" pos:column="48"/></argument_list></sizeof></expr>;<pos:position pos:line="159" pos:column="49"/></expr_stmt>
      }<pos:position pos:line="160" pos:column="8"/></block></then>
      <elseif pos:line="161" pos:column="7">else
<cpp:endif pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">endif<pos:position pos:line="162" pos:column="7"/></cpp:directive></cpp:endif>
      <comment type="block" pos:line="163" pos:column="7">/* IPv4 address */</comment>
      <if pos:line="164" pos:column="7">if<condition pos:line="164" pos:column="9">(<expr><operator pos:line="164" pos:column="10">(<pos:position pos:line="164" pos:column="11"/></operator><name pos:line="164" pos:column="11">af<pos:position pos:line="164" pos:column="13"/></name> <operator pos:line="164" pos:column="14">==<pos:position pos:line="164" pos:column="16"/></operator> <name pos:line="164" pos:column="17">AF_INET<pos:position pos:line="164" pos:column="24"/></name><operator pos:line="164" pos:column="24">)<pos:position pos:line="164" pos:column="25"/></operator> <operator pos:line="164" pos:column="26">&amp;&amp;<pos:position pos:line="164" pos:column="36"/></operator>
         <operator pos:line="165" pos:column="10">(<pos:position pos:line="165" pos:column="11"/></operator><call><name pos:line="165" pos:column="11">Curl_inet_pton<pos:position pos:line="165" pos:column="25"/></name><argument_list pos:line="165" pos:column="25">(<argument><expr><name pos:line="165" pos:column="26">AF_INET<pos:position pos:line="165" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="35">myhost<pos:position pos:line="165" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="165" pos:column="43">&amp;<pos:position pos:line="165" pos:column="48"/></operator><name><name pos:line="165" pos:column="44">si4<pos:position pos:line="165" pos:column="47"/></name><operator pos:line="165" pos:column="47">-&gt;<pos:position pos:line="165" pos:column="52"/></operator><name pos:line="165" pos:column="49">sin_addr<pos:position pos:line="165" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="165" pos:column="58"/></argument_list></call> <operator pos:line="165" pos:column="59">&gt;<pos:position pos:line="165" pos:column="63"/></operator> <literal type="number" pos:line="165" pos:column="61">0<pos:position pos:line="165" pos:column="62"/></literal><operator pos:line="165" pos:column="62">)<pos:position pos:line="165" pos:column="63"/></operator></expr>)<pos:position pos:line="165" pos:column="64"/></condition><then pos:line="165" pos:column="64"> <block pos:line="165" pos:column="65">{
        <expr_stmt><expr><name><name pos:line="166" pos:column="9">si4<pos:position pos:line="166" pos:column="12"/></name><operator pos:line="166" pos:column="12">-&gt;<pos:position pos:line="166" pos:column="17"/></operator><name pos:line="166" pos:column="14">sin_family<pos:position pos:line="166" pos:column="24"/></name></name> <operator pos:line="166" pos:column="25">=<pos:position pos:line="166" pos:column="26"/></operator> <name pos:line="166" pos:column="27">AF_INET<pos:position pos:line="166" pos:column="34"/></name></expr>;<pos:position pos:line="166" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="167" pos:column="9">si4<pos:position pos:line="167" pos:column="12"/></name><operator pos:line="167" pos:column="12">-&gt;<pos:position pos:line="167" pos:column="17"/></operator><name pos:line="167" pos:column="14">sin_port<pos:position pos:line="167" pos:column="22"/></name></name> <operator pos:line="167" pos:column="23">=<pos:position pos:line="167" pos:column="24"/></operator> <call><name pos:line="167" pos:column="25">htons<pos:position pos:line="167" pos:column="30"/></name><argument_list pos:line="167" pos:column="30">(<argument><expr><name pos:line="167" pos:column="31">port<pos:position pos:line="167" pos:column="35"/></name></expr></argument>)<pos:position pos:line="167" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="168" pos:column="9">sizeof_sa<pos:position pos:line="168" pos:column="18"/></name> <operator pos:line="168" pos:column="19">=<pos:position pos:line="168" pos:column="20"/></operator> <sizeof pos:line="168" pos:column="21">sizeof<argument_list pos:line="168" pos:column="27">(<argument><expr pos:line="168" pos:column="28">struct <name pos:line="168" pos:column="35">sockaddr_in<pos:position pos:line="168" pos:column="46"/></name></expr></argument>)<pos:position pos:line="168" pos:column="47"/></argument_list></sizeof></expr>;<pos:position pos:line="168" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="169" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="170" pos:column="6"/></block></then></if>

    <if pos:line="172" pos:column="5">if<condition pos:line="172" pos:column="7">(<expr><name pos:line="172" pos:column="8">done<pos:position pos:line="172" pos:column="12"/></name> <operator pos:line="172" pos:column="13">&lt;<pos:position pos:line="172" pos:column="17"/></operator> <literal type="number" pos:line="172" pos:column="15">1<pos:position pos:line="172" pos:column="16"/></literal></expr>)<pos:position pos:line="172" pos:column="17"/></condition><then pos:line="172" pos:column="17"> <block pos:line="172" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="173" pos:column="7">failf<pos:position pos:line="173" pos:column="12"/></name><argument_list pos:line="173" pos:column="12">(<argument><expr><name pos:line="173" pos:column="13">data<pos:position pos:line="173" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="173" pos:column="19">"Couldn't bind to '%s'"<pos:position pos:line="173" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="44">dev<pos:position pos:line="173" pos:column="47"/></name></expr></argument>)<pos:position pos:line="173" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="49"/></expr_stmt>
      <return pos:line="174" pos:column="7">return <expr><name pos:line="174" pos:column="14">CURLE_INTERFACE_FAILED<pos:position pos:line="174" pos:column="36"/></name></expr>;<pos:position pos:line="174" pos:column="37"/></return>
    }<pos:position pos:line="175" pos:column="6"/></block></then></if>
  }<pos:position pos:line="176" pos:column="4"/></block></then>
  <else pos:line="177" pos:column="3">else <block pos:line="177" pos:column="8">{
    <comment type="block" pos:line="178" pos:column="5">/* no device was given, prepare sa to match af's needs */</comment>
<cpp:ifdef pos:line="179" pos:column="1">#<cpp:directive pos:line="179" pos:column="2">ifdef<pos:position pos:line="179" pos:column="7"/></cpp:directive> <name pos:line="179" pos:column="8">ENABLE_IPV6<pos:position pos:line="179" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="180" pos:column="5">if<condition pos:line="180" pos:column="7">(<expr><name pos:line="180" pos:column="8">af<pos:position pos:line="180" pos:column="10"/></name> <operator pos:line="180" pos:column="11">==<pos:position pos:line="180" pos:column="13"/></operator> <name pos:line="180" pos:column="14">AF_INET6<pos:position pos:line="180" pos:column="22"/></name></expr>)<pos:position pos:line="180" pos:column="23"/></condition><then pos:line="180" pos:column="23"> <block pos:line="180" pos:column="24">{
      <expr_stmt><expr><name><name pos:line="181" pos:column="7">si6<pos:position pos:line="181" pos:column="10"/></name><operator pos:line="181" pos:column="10">-&gt;<pos:position pos:line="181" pos:column="15"/></operator><name pos:line="181" pos:column="12">sin6_family<pos:position pos:line="181" pos:column="23"/></name></name> <operator pos:line="181" pos:column="24">=<pos:position pos:line="181" pos:column="25"/></operator> <name pos:line="181" pos:column="26">AF_INET6<pos:position pos:line="181" pos:column="34"/></name></expr>;<pos:position pos:line="181" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="182" pos:column="7">si6<pos:position pos:line="182" pos:column="10"/></name><operator pos:line="182" pos:column="10">-&gt;<pos:position pos:line="182" pos:column="15"/></operator><name pos:line="182" pos:column="12">sin6_port<pos:position pos:line="182" pos:column="21"/></name></name> <operator pos:line="182" pos:column="22">=<pos:position pos:line="182" pos:column="23"/></operator> <call><name pos:line="182" pos:column="24">htons<pos:position pos:line="182" pos:column="29"/></name><argument_list pos:line="182" pos:column="29">(<argument><expr><name pos:line="182" pos:column="30">port<pos:position pos:line="182" pos:column="34"/></name></expr></argument>)<pos:position pos:line="182" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name pos:line="183" pos:column="7">sizeof_sa<pos:position pos:line="183" pos:column="16"/></name> <operator pos:line="183" pos:column="17">=<pos:position pos:line="183" pos:column="18"/></operator> <sizeof pos:line="183" pos:column="19">sizeof<argument_list pos:line="183" pos:column="25">(<argument><expr pos:line="183" pos:column="26">struct <name pos:line="183" pos:column="33">sockaddr_in6<pos:position pos:line="183" pos:column="45"/></name></expr></argument>)<pos:position pos:line="183" pos:column="46"/></argument_list></sizeof></expr>;<pos:position pos:line="183" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="184" pos:column="6"/></block></then>
    <elseif pos:line="185" pos:column="5">else
<cpp:endif pos:line="186" pos:column="1">#<cpp:directive pos:line="186" pos:column="2">endif<pos:position pos:line="186" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="187" pos:column="5">if<condition pos:line="187" pos:column="7">(<expr><name pos:line="187" pos:column="8">af<pos:position pos:line="187" pos:column="10"/></name> <operator pos:line="187" pos:column="11">==<pos:position pos:line="187" pos:column="13"/></operator> <name pos:line="187" pos:column="14">AF_INET<pos:position pos:line="187" pos:column="21"/></name></expr>)<pos:position pos:line="187" pos:column="22"/></condition><then pos:line="187" pos:column="22"> <block pos:line="187" pos:column="23">{
      <expr_stmt><expr><name><name pos:line="188" pos:column="7">si4<pos:position pos:line="188" pos:column="10"/></name><operator pos:line="188" pos:column="10">-&gt;<pos:position pos:line="188" pos:column="15"/></operator><name pos:line="188" pos:column="12">sin_family<pos:position pos:line="188" pos:column="22"/></name></name> <operator pos:line="188" pos:column="23">=<pos:position pos:line="188" pos:column="24"/></operator> <name pos:line="188" pos:column="25">AF_INET<pos:position pos:line="188" pos:column="32"/></name></expr>;<pos:position pos:line="188" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="189" pos:column="7">si4<pos:position pos:line="189" pos:column="10"/></name><operator pos:line="189" pos:column="10">-&gt;<pos:position pos:line="189" pos:column="15"/></operator><name pos:line="189" pos:column="12">sin_port<pos:position pos:line="189" pos:column="20"/></name></name> <operator pos:line="189" pos:column="21">=<pos:position pos:line="189" pos:column="22"/></operator> <call><name pos:line="189" pos:column="23">htons<pos:position pos:line="189" pos:column="28"/></name><argument_list pos:line="189" pos:column="28">(<argument><expr><name pos:line="189" pos:column="29">port<pos:position pos:line="189" pos:column="33"/></name></expr></argument>)<pos:position pos:line="189" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="190" pos:column="7">sizeof_sa<pos:position pos:line="190" pos:column="16"/></name> <operator pos:line="190" pos:column="17">=<pos:position pos:line="190" pos:column="18"/></operator> <sizeof pos:line="190" pos:column="19">sizeof<argument_list pos:line="190" pos:column="25">(<argument><expr pos:line="190" pos:column="26">struct <name pos:line="190" pos:column="33">sockaddr_in<pos:position pos:line="190" pos:column="44"/></name></expr></argument>)<pos:position pos:line="190" pos:column="45"/></argument_list></sizeof></expr>;<pos:position pos:line="190" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="191" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="192" pos:column="4"/></block></else></if>

  <for pos:line="194" pos:column="3">for<control pos:line="194" pos:column="6">(<init pos:line="194" pos:column="7">;<pos:position pos:line="194" pos:column="8"/></init><condition pos:line="194" pos:column="8">;<pos:position pos:line="194" pos:column="9"/></condition><incr/>)<pos:position pos:line="194" pos:column="10"/></control> <block pos:line="194" pos:column="11">{
    <if pos:line="195" pos:column="5">if<condition pos:line="195" pos:column="7">(<expr><call><name pos:line="195" pos:column="8">bind<pos:position pos:line="195" pos:column="12"/></name><argument_list pos:line="195" pos:column="12">(<argument><expr><name pos:line="195" pos:column="13">sockfd<pos:position pos:line="195" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="21">sock<pos:position pos:line="195" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="27">sizeof_sa<pos:position pos:line="195" pos:column="36"/></name></expr></argument>)<pos:position pos:line="195" pos:column="37"/></argument_list></call> <operator pos:line="195" pos:column="38">&gt;=<pos:position pos:line="195" pos:column="43"/></operator> <literal type="number" pos:line="195" pos:column="41">0<pos:position pos:line="195" pos:column="42"/></literal></expr>)<pos:position pos:line="195" pos:column="43"/></condition><then pos:line="195" pos:column="43"> <block pos:line="195" pos:column="44">{
      <comment type="block" pos:line="196" pos:column="7">/* we succeeded to bind */</comment>
      <decl_stmt><decl><type><name><name pos:line="197" pos:column="7">struct<pos:position pos:line="197" pos:column="13"/></name> <name pos:line="197" pos:column="14">Curl_sockaddr_storage<pos:position pos:line="197" pos:column="35"/></name></name></type> <name pos:line="197" pos:column="36">add<pos:position pos:line="197" pos:column="39"/></name></decl>;<pos:position pos:line="197" pos:column="40"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="198" pos:column="7">curl_socklen_t<pos:position pos:line="198" pos:column="21"/></name></type> <name pos:line="198" pos:column="22">size<pos:position pos:line="198" pos:column="26"/></name> <init pos:line="198" pos:column="27">= <expr><sizeof pos:line="198" pos:column="29">sizeof<argument_list pos:line="198" pos:column="35">(<argument><expr><name pos:line="198" pos:column="36">add<pos:position pos:line="198" pos:column="39"/></name></expr></argument>)<pos:position pos:line="198" pos:column="40"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="198" pos:column="41"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="199" pos:column="7">memset<pos:position pos:line="199" pos:column="13"/></name><argument_list pos:line="199" pos:column="13">(<argument><expr><operator pos:line="199" pos:column="14">&amp;<pos:position pos:line="199" pos:column="19"/></operator><name pos:line="199" pos:column="15">add<pos:position pos:line="199" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="199" pos:column="20">0<pos:position pos:line="199" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="199" pos:column="23">sizeof<argument_list pos:line="199" pos:column="29">(<argument><expr pos:line="199" pos:column="30">struct <name pos:line="199" pos:column="37">Curl_sockaddr_storage<pos:position pos:line="199" pos:column="58"/></name></expr></argument>)<pos:position pos:line="199" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="199" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="61"/></expr_stmt>
      <if pos:line="200" pos:column="7">if<condition pos:line="200" pos:column="9">(<expr><call><name pos:line="200" pos:column="10">getsockname<pos:position pos:line="200" pos:column="21"/></name><argument_list pos:line="200" pos:column="21">(<argument><expr><name pos:line="200" pos:column="22">sockfd<pos:position pos:line="200" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="200" pos:column="30">(<pos:position pos:line="200" pos:column="31"/></operator>struct <name pos:line="200" pos:column="38">sockaddr<pos:position pos:line="200" pos:column="46"/></name> <operator pos:line="200" pos:column="47">*<pos:position pos:line="200" pos:column="48"/></operator><operator pos:line="200" pos:column="48">)<pos:position pos:line="200" pos:column="49"/></operator> <operator pos:line="200" pos:column="50">&amp;<pos:position pos:line="200" pos:column="55"/></operator><name pos:line="200" pos:column="51">add<pos:position pos:line="200" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="200" pos:column="56">&amp;<pos:position pos:line="200" pos:column="61"/></operator><name pos:line="200" pos:column="57">size<pos:position pos:line="200" pos:column="61"/></name></expr></argument>)<pos:position pos:line="200" pos:column="62"/></argument_list></call> <operator pos:line="200" pos:column="63">&lt;<pos:position pos:line="200" pos:column="67"/></operator> <literal type="number" pos:line="200" pos:column="65">0<pos:position pos:line="200" pos:column="66"/></literal></expr>)<pos:position pos:line="200" pos:column="67"/></condition><then pos:line="200" pos:column="67"> <block pos:line="200" pos:column="68">{
        <expr_stmt><expr><name><name pos:line="201" pos:column="9">data<pos:position pos:line="201" pos:column="13"/></name><operator pos:line="201" pos:column="13">-&gt;<pos:position pos:line="201" pos:column="18"/></operator><name pos:line="201" pos:column="15">state<pos:position pos:line="201" pos:column="20"/></name><operator pos:line="201" pos:column="20">.<pos:position pos:line="201" pos:column="21"/></operator><name pos:line="201" pos:column="21">os_errno<pos:position pos:line="201" pos:column="29"/></name></name> <operator pos:line="201" pos:column="30">=<pos:position pos:line="201" pos:column="31"/></operator> <name pos:line="201" pos:column="32">error<pos:position pos:line="201" pos:column="37"/></name> <operator pos:line="201" pos:column="38">=<pos:position pos:line="201" pos:column="39"/></operator> <name pos:line="201" pos:column="40">SOCKERRNO<pos:position pos:line="201" pos:column="49"/></name></expr>;<pos:position pos:line="201" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="202" pos:column="9">failf<pos:position pos:line="202" pos:column="14"/></name><argument_list pos:line="202" pos:column="14">(<argument><expr><name pos:line="202" pos:column="15">data<pos:position pos:line="202" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="202" pos:column="21">"getsockname() failed with errno %d: %s"<pos:position pos:line="202" pos:column="61"/></literal></expr></argument>,
              <argument><expr><name pos:line="203" pos:column="15">error<pos:position pos:line="203" pos:column="20"/></name></expr></argument>, <argument><expr><call><name pos:line="203" pos:column="22">Curl_strerror<pos:position pos:line="203" pos:column="35"/></name><argument_list pos:line="203" pos:column="35">(<argument><expr><name pos:line="203" pos:column="36">conn<pos:position pos:line="203" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="203" pos:column="42">error<pos:position pos:line="203" pos:column="47"/></name></expr></argument>)<pos:position pos:line="203" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="203" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="50"/></expr_stmt>
        <return pos:line="204" pos:column="9">return <expr><name pos:line="204" pos:column="16">CURLE_INTERFACE_FAILED<pos:position pos:line="204" pos:column="38"/></name></expr>;<pos:position pos:line="204" pos:column="39"/></return>
      }<pos:position pos:line="205" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="206" pos:column="7">infof<pos:position pos:line="206" pos:column="12"/></name><argument_list pos:line="206" pos:column="12">(<argument><expr><name pos:line="206" pos:column="13">data<pos:position pos:line="206" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="206" pos:column="19">"Local port: %hu\n"<pos:position pos:line="206" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="206" pos:column="40">port<pos:position pos:line="206" pos:column="44"/></name></expr></argument>)<pos:position pos:line="206" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="207" pos:column="7">conn<pos:position pos:line="207" pos:column="11"/></name><operator pos:line="207" pos:column="11">-&gt;<pos:position pos:line="207" pos:column="16"/></operator><name pos:line="207" pos:column="13">bits<pos:position pos:line="207" pos:column="17"/></name><operator pos:line="207" pos:column="17">.<pos:position pos:line="207" pos:column="18"/></operator><name pos:line="207" pos:column="18">bound<pos:position pos:line="207" pos:column="23"/></name></name> <operator pos:line="207" pos:column="24">=<pos:position pos:line="207" pos:column="25"/></operator> <name pos:line="207" pos:column="26">TRUE<pos:position pos:line="207" pos:column="30"/></name></expr>;<pos:position pos:line="207" pos:column="31"/></expr_stmt>
      <return pos:line="208" pos:column="7">return <expr><name pos:line="208" pos:column="14">CURLE_OK<pos:position pos:line="208" pos:column="22"/></name></expr>;<pos:position pos:line="208" pos:column="23"/></return>
    }<pos:position pos:line="209" pos:column="6"/></block></then></if>

    <if pos:line="211" pos:column="5">if<condition pos:line="211" pos:column="7">(<expr><operator pos:line="211" pos:column="8">--<pos:position pos:line="211" pos:column="10"/></operator><name pos:line="211" pos:column="10">portnum<pos:position pos:line="211" pos:column="17"/></name> <operator pos:line="211" pos:column="18">&gt;<pos:position pos:line="211" pos:column="22"/></operator> <literal type="number" pos:line="211" pos:column="20">0<pos:position pos:line="211" pos:column="21"/></literal></expr>)<pos:position pos:line="211" pos:column="22"/></condition><then pos:line="211" pos:column="22"> <block pos:line="211" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="212" pos:column="7">infof<pos:position pos:line="212" pos:column="12"/></name><argument_list pos:line="212" pos:column="12">(<argument><expr><name pos:line="212" pos:column="13">data<pos:position pos:line="212" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="212" pos:column="19">"Bind to local port %hu failed, trying next\n"<pos:position pos:line="212" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="212" pos:column="67">port<pos:position pos:line="212" pos:column="71"/></name></expr></argument>)<pos:position pos:line="212" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="73"/></expr_stmt>
      <expr_stmt><expr><name pos:line="213" pos:column="7">port<pos:position pos:line="213" pos:column="11"/></name><operator pos:line="213" pos:column="11">++<pos:position pos:line="213" pos:column="13"/></operator></expr>;<pos:position pos:line="213" pos:column="14"/></expr_stmt> <comment type="block" pos:line="213" pos:column="15">/* try next port */</comment>
      <comment type="block" pos:line="214" pos:column="7">/* We re-use/clobber the port variable here below */</comment>
      <if pos:line="215" pos:column="7">if<condition pos:line="215" pos:column="9">(<expr><name><name pos:line="215" pos:column="10">sock<pos:position pos:line="215" pos:column="14"/></name><operator pos:line="215" pos:column="14">-&gt;<pos:position pos:line="215" pos:column="19"/></operator><name pos:line="215" pos:column="16">sa_family<pos:position pos:line="215" pos:column="25"/></name></name> <operator pos:line="215" pos:column="26">==<pos:position pos:line="215" pos:column="28"/></operator> <name pos:line="215" pos:column="29">AF_INET<pos:position pos:line="215" pos:column="36"/></name></expr>)<pos:position pos:line="215" pos:column="37"/></condition><then pos:line="215" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="216" pos:column="9">si4<pos:position pos:line="216" pos:column="12"/></name><operator pos:line="216" pos:column="12">-&gt;<pos:position pos:line="216" pos:column="17"/></operator><name pos:line="216" pos:column="14">sin_port<pos:position pos:line="216" pos:column="22"/></name></name> <operator pos:line="216" pos:column="23">=<pos:position pos:line="216" pos:column="24"/></operator> <call><name pos:line="216" pos:column="25">ntohs<pos:position pos:line="216" pos:column="30"/></name><argument_list pos:line="216" pos:column="30">(<argument><expr><name pos:line="216" pos:column="31">port<pos:position pos:line="216" pos:column="35"/></name></expr></argument>)<pos:position pos:line="216" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="37"/></expr_stmt></block></then>
<cpp:ifdef pos:line="217" pos:column="1">#<cpp:directive pos:line="217" pos:column="2">ifdef<pos:position pos:line="217" pos:column="7"/></cpp:directive> <name pos:line="217" pos:column="8">ENABLE_IPV6<pos:position pos:line="217" pos:column="19"/></name></cpp:ifdef>
      <else pos:line="218" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="219" pos:column="9">si6<pos:position pos:line="219" pos:column="12"/></name><operator pos:line="219" pos:column="12">-&gt;<pos:position pos:line="219" pos:column="17"/></operator><name pos:line="219" pos:column="14">sin6_port<pos:position pos:line="219" pos:column="23"/></name></name> <operator pos:line="219" pos:column="24">=<pos:position pos:line="219" pos:column="25"/></operator> <call><name pos:line="219" pos:column="26">ntohs<pos:position pos:line="219" pos:column="31"/></name><argument_list pos:line="219" pos:column="31">(<argument><expr><name pos:line="219" pos:column="32">port<pos:position pos:line="219" pos:column="36"/></name></expr></argument>)<pos:position pos:line="219" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="38"/></expr_stmt></block></else></if>
<cpp:endif pos:line="220" pos:column="1">#<cpp:directive pos:line="220" pos:column="2">endif<pos:position pos:line="220" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="221" pos:column="6"/></block></then>
    <else pos:line="222" pos:column="5">else
      <block type="pseudo"><break pos:line="223" pos:column="7">break;<pos:position pos:line="223" pos:column="13"/></break></block></else></if>
  }<pos:position pos:line="224" pos:column="4"/></block></for>

  <expr_stmt><expr><name><name pos:line="226" pos:column="3">data<pos:position pos:line="226" pos:column="7"/></name><operator pos:line="226" pos:column="7">-&gt;<pos:position pos:line="226" pos:column="12"/></operator><name pos:line="226" pos:column="9">state<pos:position pos:line="226" pos:column="14"/></name><operator pos:line="226" pos:column="14">.<pos:position pos:line="226" pos:column="15"/></operator><name pos:line="226" pos:column="15">os_errno<pos:position pos:line="226" pos:column="23"/></name></name> <operator pos:line="226" pos:column="24">=<pos:position pos:line="226" pos:column="25"/></operator> <name pos:line="226" pos:column="26">error<pos:position pos:line="226" pos:column="31"/></name> <operator pos:line="226" pos:column="32">=<pos:position pos:line="226" pos:column="33"/></operator> <name pos:line="226" pos:column="34">SOCKERRNO<pos:position pos:line="226" pos:column="43"/></name></expr>;<pos:position pos:line="226" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="227" pos:column="3">failf<pos:position pos:line="227" pos:column="8"/></name><argument_list pos:line="227" pos:column="8">(<argument><expr><name pos:line="227" pos:column="9">data<pos:position pos:line="227" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="227" pos:column="15">"bind failed with errno %d: %s"<pos:position pos:line="227" pos:column="46"/></literal></expr></argument>,
        <argument><expr><name pos:line="228" pos:column="9">error<pos:position pos:line="228" pos:column="14"/></name></expr></argument>, <argument><expr><call><name pos:line="228" pos:column="16">Curl_strerror<pos:position pos:line="228" pos:column="29"/></name><argument_list pos:line="228" pos:column="29">(<argument><expr><name pos:line="228" pos:column="30">conn<pos:position pos:line="228" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="228" pos:column="36">error<pos:position pos:line="228" pos:column="41"/></name></expr></argument>)<pos:position pos:line="228" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="228" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="44"/></expr_stmt>

  <return pos:line="230" pos:column="3">return <expr><name pos:line="230" pos:column="10">CURLE_INTERFACE_FAILED<pos:position pos:line="230" pos:column="32"/></name></expr>;<pos:position pos:line="230" pos:column="33"/></return>
}<pos:position pos:line="231" pos:column="2"/></block></function></unit>
