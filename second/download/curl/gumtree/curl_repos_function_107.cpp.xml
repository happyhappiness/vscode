<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_107.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sendf<pos:position pos:line="1" pos:column="10"/></name><parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><name pos:line="1" pos:column="11">int<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">fd<pos:position pos:line="1" pos:column="17"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">UrlData<pos:position pos:line="1" pos:column="33"/></name></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">data<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">fmt<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="52">...<pos:position pos:line="1" pos:column="55"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">bytes_written<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">s<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">va_list<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">ap<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">va_start<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">ap<pos:position pos:line="6" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="16">fmt<pos:position pos:line="6" pos:column="19"/></name></expr></argument>)<pos:position pos:line="6" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="7" pos:column="3">s<pos:position pos:line="7" pos:column="4"/></name> <operator pos:line="7" pos:column="5">=<pos:position pos:line="7" pos:column="6"/></operator> <call><name pos:line="7" pos:column="7">mvaprintf<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">fmt<pos:position pos:line="7" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="22">ap<pos:position pos:line="7" pos:column="24"/></name></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">va_end<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><name pos:line="8" pos:column="10">ap<pos:position pos:line="8" pos:column="12"/></name></expr></argument>)<pos:position pos:line="8" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="14"/></expr_stmt>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><operator pos:line="9" pos:column="6">!<pos:position pos:line="9" pos:column="7"/></operator><name pos:line="9" pos:column="7">s<pos:position pos:line="9" pos:column="8"/></name></expr>)<pos:position pos:line="9" pos:column="9"/></condition><then pos:line="9" pos:column="9">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><literal type="number" pos:line="10" pos:column="12">0<pos:position pos:line="10" pos:column="13"/></literal></expr>;<pos:position pos:line="10" pos:column="14"/></return></block></then></if> <comment type="block" pos:line="10" pos:column="15">/* failure */</comment>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name><name pos:line="11" pos:column="6">data<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">bits<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">verbose<pos:position pos:line="11" pos:column="24"/></name></name></expr>)<pos:position pos:line="11" pos:column="25"/></condition><then pos:line="11" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="5">fprintf<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><name><name pos:line="12" pos:column="13">data<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">-&gt;<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="19">err<pos:position pos:line="12" pos:column="22"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="24">"&gt; %s"<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">s<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt></block></then></if>
<cpp:ifndef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifndef<pos:position pos:line="13" pos:column="8"/></cpp:directive> <name pos:line="13" pos:column="9">USE_SSLEAY<pos:position pos:line="13" pos:column="19"/></name></cpp:ifndef>
   <expr_stmt><expr><name pos:line="14" pos:column="4">bytes_written<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <call><name pos:line="14" pos:column="20">swrite<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><name pos:line="14" pos:column="27">fd<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="31">s<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="34">strlen<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">s<pos:position pos:line="14" pos:column="42"/></name></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else<pos:position pos:line="15" pos:column="6"/></cpp:directive></cpp:else>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name><name pos:line="16" pos:column="7">data<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">-&gt;<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="13">use_ssl<pos:position pos:line="16" pos:column="20"/></name></name></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21"> <block pos:line="16" pos:column="22">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">bytes_written<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <call><name pos:line="17" pos:column="21">SSL_write<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><name><name pos:line="17" pos:column="31">data<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">-&gt;<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="37">ssl<pos:position pos:line="17" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">s<pos:position pos:line="17" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="45">strlen<pos:position pos:line="17" pos:column="51"/></name><argument_list pos:line="17" pos:column="51">(<argument><expr><name pos:line="17" pos:column="52">s<pos:position pos:line="17" pos:column="53"/></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then> <else pos:line="18" pos:column="5">else <block pos:line="18" pos:column="10">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">bytes_written<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <call><name pos:line="19" pos:column="21">swrite<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">fd<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="32">s<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="35">strlen<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">s<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></else></if>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="21" pos:column="8">/* USE_SSLEAY */</comment>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">free<pos:position pos:line="22" pos:column="7"/></name><argument_list pos:line="22" pos:column="7">(<argument><expr><name pos:line="22" pos:column="8">s<pos:position pos:line="22" pos:column="9"/></name></expr></argument>)<pos:position pos:line="22" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="11"/></expr_stmt> <comment type="block" pos:line="22" pos:column="12">/* free the output string */</comment>
  <return pos:line="23" pos:column="3">return<expr><operator pos:line="23" pos:column="9">(<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">bytes_written<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">)<pos:position pos:line="23" pos:column="24"/></operator></expr>;<pos:position pos:line="23" pos:column="25"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
