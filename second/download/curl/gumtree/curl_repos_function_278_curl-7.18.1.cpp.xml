<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_278_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">arg<pos:position pos:line="3" pos:column="10"/></name><init pos:line="3" pos:column="10">=<expr><literal type="number" pos:line="3" pos:column="11">1<pos:position pos:line="3" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">host<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>

  <while pos:line="7" pos:column="3">while<condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">argc<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">arg<pos:position pos:line="7" pos:column="17"/></name></expr>)<pos:position pos:line="7" pos:column="18"/></condition> <block pos:line="7" pos:column="19">{
    <if pos:line="8" pos:column="5">if<condition pos:line="8" pos:column="7">(<expr><operator pos:line="8" pos:column="8">!<pos:position pos:line="8" pos:column="9"/></operator><call><name pos:line="8" pos:column="9">strcmp<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="string" pos:line="8" pos:column="16">"--version"<pos:position pos:line="8" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="29">argv<pos:position pos:line="8" pos:column="33"/></name><index pos:line="8" pos:column="33">[<expr><name pos:line="8" pos:column="34">arg<pos:position pos:line="8" pos:column="37"/></name></expr>]<pos:position pos:line="8" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40"> <block pos:line="8" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="9" pos:column="7">printf<pos:position pos:line="9" pos:column="13"/></name><argument_list pos:line="9" pos:column="13">(<argument><expr><literal type="string" pos:line="9" pos:column="14">"resolve IPv4%s\n"<pos:position pos:line="9" pos:column="32"/></literal></expr></argument>,
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">ENABLE_IPV6<pos:position pos:line="10" pos:column="19"/></name></cpp:ifdef>
             <argument><expr><literal type="string" pos:line="11" pos:column="14">"/IPv6"<pos:position pos:line="11" pos:column="21"/></literal>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
             <literal type="string" pos:line="13" pos:column="14">""<pos:position pos:line="13" pos:column="16"/></literal></expr></argument>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
             )<pos:position pos:line="15" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="16"/></expr_stmt>
      <return pos:line="16" pos:column="7">return <expr><literal type="number" pos:line="16" pos:column="14">0<pos:position pos:line="16" pos:column="15"/></literal></expr>;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then>
    <elseif pos:line="18" pos:column="5">else <if pos:line="18" pos:column="10">if<condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><call><name pos:line="18" pos:column="14">strcmp<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><literal type="string" pos:line="18" pos:column="21">"--ipv6"<pos:position pos:line="18" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="31">argv<pos:position pos:line="18" pos:column="35"/></name><index pos:line="18" pos:column="35">[<expr><name pos:line="18" pos:column="36">arg<pos:position pos:line="18" pos:column="39"/></name></expr>]<pos:position pos:line="18" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="42"/></condition><then pos:line="18" pos:column="42"> <block pos:line="18" pos:column="43">{
<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef<pos:position pos:line="19" pos:column="7"/></cpp:directive> <name pos:line="19" pos:column="8">ENABLE_IPV6<pos:position pos:line="19" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="20" pos:column="7">use_ipv6<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">TRUE<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="22" pos:column="7">arg<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">++<pos:position pos:line="22" pos:column="12"/></operator></expr>;<pos:position pos:line="22" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if<condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><call><name pos:line="24" pos:column="14">strcmp<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><literal type="string" pos:line="24" pos:column="21">"--ipv4"<pos:position pos:line="24" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="31">argv<pos:position pos:line="24" pos:column="35"/></name><index pos:line="24" pos:column="35">[<expr><name pos:line="24" pos:column="36">arg<pos:position pos:line="24" pos:column="39"/></name></expr>]<pos:position pos:line="24" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42"> <block pos:line="24" pos:column="43">{
      <comment type="block" pos:line="25" pos:column="7">/* for completeness, we support this option as well */</comment>
      <expr_stmt><expr><name pos:line="26" pos:column="7">use_ipv6<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">FALSE<pos:position pos:line="26" pos:column="21"/></name></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="27" pos:column="7">arg<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">++<pos:position pos:line="27" pos:column="12"/></operator></expr>;<pos:position pos:line="27" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if></elseif>
    <else pos:line="29" pos:column="5">else <block pos:line="29" pos:column="10">{
      <expr_stmt><expr><name pos:line="30" pos:column="7">host<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <name><name pos:line="30" pos:column="14">argv<pos:position pos:line="30" pos:column="18"/></name><index pos:line="30" pos:column="18">[<expr><name pos:line="30" pos:column="19">arg<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">++<pos:position pos:line="30" pos:column="24"/></operator></expr>]<pos:position pos:line="30" pos:column="25"/></index></name></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></else></if>
  }<pos:position pos:line="32" pos:column="4"/></block></while>
  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><operator pos:line="33" pos:column="6">!<pos:position pos:line="33" pos:column="7"/></operator><name pos:line="33" pos:column="7">host<pos:position pos:line="33" pos:column="11"/></name></expr>)<pos:position pos:line="33" pos:column="12"/></condition><then pos:line="33" pos:column="12"> <block pos:line="33" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">puts<pos:position pos:line="34" pos:column="9"/></name><argument_list pos:line="34" pos:column="9">(<argument><expr><literal type="string" pos:line="34" pos:column="10">"Usage: resolve [option] &lt;host&gt;\n"<pos:position pos:line="34" pos:column="50"/></literal>
         <literal type="string" pos:line="35" pos:column="10">" --version\n"<pos:position pos:line="35" pos:column="24"/></literal>
         <literal type="string" pos:line="36" pos:column="10">" --ipv4\n"<pos:position pos:line="36" pos:column="21"/></literal>
         <literal type="string" pos:line="37" pos:column="10">" --ipv6"<pos:position pos:line="37" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="21"/></expr_stmt>
    <return pos:line="38" pos:column="5">return <expr><literal type="number" pos:line="38" pos:column="12">0<pos:position pos:line="38" pos:column="13"/></literal></expr>;<pos:position pos:line="38" pos:column="14"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifdef<pos:position pos:line="41" pos:column="7"/></cpp:directive> <name pos:line="41" pos:column="8">WIN32<pos:position pos:line="41" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">win32_init<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">()<pos:position pos:line="42" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">atexit<pos:position pos:line="43" pos:column="9"/></name><argument_list pos:line="43" pos:column="9">(<argument><expr><name pos:line="43" pos:column="10">win32_cleanup<pos:position pos:line="43" pos:column="23"/></name></expr></argument>)<pos:position pos:line="43" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef<pos:position pos:line="46" pos:column="7"/></cpp:directive> <name pos:line="46" pos:column="8">ENABLE_IPV6<pos:position pos:line="46" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><operator pos:line="47" pos:column="6">!<pos:position pos:line="47" pos:column="7"/></operator><name pos:line="47" pos:column="7">use_ipv6<pos:position pos:line="47" pos:column="15"/></name></expr>)<pos:position pos:line="47" pos:column="16"/></condition><then pos:line="47" pos:column="16">
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>
  <block pos:line="49" pos:column="3">{
    <comment type="block" pos:line="50" pos:column="5">/* gethostbyname() resolve */</comment>
    <decl_stmt><decl><type><name><name pos:line="51" pos:column="5">struct<pos:position pos:line="51" pos:column="11"/></name> <name pos:line="51" pos:column="12">hostent<pos:position pos:line="51" pos:column="19"/></name></name> <modifier pos:line="51" pos:column="20">*<pos:position pos:line="51" pos:column="21"/></modifier></type><name pos:line="51" pos:column="21">he<pos:position pos:line="51" pos:column="23"/></name></decl>;<pos:position pos:line="51" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="53" pos:column="5">he<pos:position pos:line="53" pos:column="7"/></name> <operator pos:line="53" pos:column="8">=<pos:position pos:line="53" pos:column="9"/></operator> <call><name pos:line="53" pos:column="10">gethostbyname<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><name pos:line="53" pos:column="24">host<pos:position pos:line="53" pos:column="28"/></name></expr></argument>)<pos:position pos:line="53" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><name pos:line="55" pos:column="5">rc<pos:position pos:line="55" pos:column="7"/></name> <operator pos:line="55" pos:column="8">=<pos:position pos:line="55" pos:column="9"/></operator> <operator pos:line="55" pos:column="10">!<pos:position pos:line="55" pos:column="11"/></operator><name pos:line="55" pos:column="11">he<pos:position pos:line="55" pos:column="13"/></name></expr>;<pos:position pos:line="55" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="56" pos:column="4"/></block></then>
<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef<pos:position pos:line="57" pos:column="7"/></cpp:directive> <name pos:line="57" pos:column="8">ENABLE_IPV6<pos:position pos:line="57" pos:column="19"/></name></cpp:ifdef>
  <else pos:line="58" pos:column="3">else <block pos:line="58" pos:column="8">{
    <comment type="block" pos:line="59" pos:column="5">/* getaddrinfo() resolve */</comment>
    <decl_stmt><decl><type><name><name pos:line="60" pos:column="5">struct<pos:position pos:line="60" pos:column="11"/></name> <name pos:line="60" pos:column="12">addrinfo<pos:position pos:line="60" pos:column="20"/></name></name> <modifier pos:line="60" pos:column="21">*<pos:position pos:line="60" pos:column="22"/></modifier></type><name pos:line="60" pos:column="22">ai<pos:position pos:line="60" pos:column="24"/></name></decl>;<pos:position pos:line="60" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="61" pos:column="5">struct<pos:position pos:line="61" pos:column="11"/></name> <name pos:line="61" pos:column="12">addrinfo<pos:position pos:line="61" pos:column="20"/></name></name></type> <name pos:line="61" pos:column="21">hints<pos:position pos:line="61" pos:column="26"/></name></decl>;<pos:position pos:line="61" pos:column="27"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="63" pos:column="5">memset<pos:position pos:line="63" pos:column="11"/></name><argument_list pos:line="63" pos:column="11">(<argument><expr><operator pos:line="63" pos:column="12">&amp;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="13">hints<pos:position pos:line="63" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="20">0<pos:position pos:line="63" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="23">sizeof<argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">hints<pos:position pos:line="63" pos:column="35"/></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">hints<pos:position pos:line="64" pos:column="10"/></name><operator pos:line="64" pos:column="10">.<pos:position pos:line="64" pos:column="11"/></operator><name pos:line="64" pos:column="11">ai_family<pos:position pos:line="64" pos:column="20"/></name></name> <operator pos:line="64" pos:column="21">=<pos:position pos:line="64" pos:column="22"/></operator> <name pos:line="64" pos:column="23">PF_INET6<pos:position pos:line="64" pos:column="31"/></name></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="65" pos:column="5">hints<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">.<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="11">ai_socktype<pos:position pos:line="65" pos:column="22"/></name></name> <operator pos:line="65" pos:column="23">=<pos:position pos:line="65" pos:column="24"/></operator> <name pos:line="65" pos:column="25">SOCK_STREAM<pos:position pos:line="65" pos:column="36"/></name></expr>;<pos:position pos:line="65" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="66" pos:column="5">hints<pos:position pos:line="66" pos:column="10"/></name><operator pos:line="66" pos:column="10">.<pos:position pos:line="66" pos:column="11"/></operator><name pos:line="66" pos:column="11">ai_flags<pos:position pos:line="66" pos:column="19"/></name></name> <operator pos:line="66" pos:column="20">=<pos:position pos:line="66" pos:column="21"/></operator> <name pos:line="66" pos:column="22">AI_CANONNAME<pos:position pos:line="66" pos:column="34"/></name></expr>;<pos:position pos:line="66" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="67" pos:column="5">rc<pos:position pos:line="67" pos:column="7"/></name> <operator pos:line="67" pos:column="8">=<pos:position pos:line="67" pos:column="9"/></operator> <call pos:line="67" pos:column="10">(<name pos:line="67" pos:column="11">getaddrinfo<pos:position pos:line="67" pos:column="22"/></name>)<argument_list pos:line="67" pos:column="23">(<argument><expr><name pos:line="67" pos:column="24">host<pos:position pos:line="67" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="30">"80"<pos:position pos:line="67" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="67" pos:column="36">&amp;<pos:position pos:line="67" pos:column="41"/></operator><name pos:line="67" pos:column="37">hints<pos:position pos:line="67" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="44">&amp;<pos:position pos:line="67" pos:column="49"/></operator><name pos:line="67" pos:column="45">ai<pos:position pos:line="67" pos:column="47"/></name></expr></argument>)<pos:position pos:line="67" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="49"/></expr_stmt>

  }<pos:position pos:line="69" pos:column="4"/></block></else></if>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="71" pos:column="3">if<condition pos:line="71" pos:column="5">(<expr><name pos:line="71" pos:column="6">rc<pos:position pos:line="71" pos:column="8"/></name></expr>)<pos:position pos:line="71" pos:column="9"/></condition><then pos:line="71" pos:column="9">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="5">printf<pos:position pos:line="72" pos:column="11"/></name><argument_list pos:line="72" pos:column="11">(<argument><expr><literal type="string" pos:line="72" pos:column="12">"Resolving '%s' didn't work\n"<pos:position pos:line="72" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="44">host<pos:position pos:line="72" pos:column="48"/></name></expr></argument>)<pos:position pos:line="72" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="50"/></expr_stmt></block></then></if>

  <return pos:line="74" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="74" pos:column="10">!<pos:position pos:line="74" pos:column="11"/></operator><name pos:line="74" pos:column="11">rc<pos:position pos:line="74" pos:column="13"/></name></expr>?<pos:position pos:line="74" pos:column="14"/></condition><then><expr><literal type="number" pos:line="74" pos:column="14">0<pos:position pos:line="74" pos:column="15"/></literal></expr></then><else pos:line="74" pos:column="15">:<expr><literal type="number" pos:line="74" pos:column="16">1<pos:position pos:line="74" pos:column="17"/></literal></expr></else></ternary></expr>;<pos:position pos:line="74" pos:column="18"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
