<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_450.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLM<pos:position pos:line="1" pos:column="6"/></name> <modifier pos:line="1" pos:column="7">*<pos:position pos:line="1" pos:column="8"/></modifier></type><name pos:line="1" pos:column="8">curl_multi_init<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_multi<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">multi<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">multi<pos:position pos:line="5" pos:column="8"/></name> <operator pos:line="5" pos:column="9">=<pos:position pos:line="5" pos:column="10"/></operator> <operator pos:line="5" pos:column="11">(<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">void<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></operator><operator pos:line="5" pos:column="18">)<pos:position pos:line="5" pos:column="19"/></operator><call><name pos:line="5" pos:column="19">malloc<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><sizeof pos:line="5" pos:column="26">sizeof<argument_list pos:line="5" pos:column="32">(<argument><expr pos:line="5" pos:column="33">struct <name pos:line="5" pos:column="40">Curl_multi<pos:position pos:line="5" pos:column="50"/></name></expr></argument>)<pos:position pos:line="5" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="53"/></expr_stmt>

  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><name pos:line="7" pos:column="6">multi<pos:position pos:line="7" pos:column="11"/></name></expr>)<pos:position pos:line="7" pos:column="12"/></condition><then pos:line="7" pos:column="12"> <block pos:line="7" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">memset<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">multi<pos:position pos:line="8" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="22">sizeof<argument_list pos:line="8" pos:column="28">(<argument><expr pos:line="8" pos:column="29">struct <name pos:line="8" pos:column="36">Curl_multi<pos:position pos:line="8" pos:column="46"/></name></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">multi<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">type<pos:position pos:line="9" pos:column="16"/></name></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <name pos:line="9" pos:column="19">CURL_MULTI_HANDLE<pos:position pos:line="9" pos:column="36"/></name></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></then>
  <else pos:line="11" pos:column="3">else
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return></block></else></if>

  <expr_stmt><expr><name><name pos:line="14" pos:column="3">multi<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">-&gt;<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="10">hostcache<pos:position pos:line="14" pos:column="19"/></name></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <call><name pos:line="14" pos:column="22">Curl_mk_dnscache<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">()<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">!<pos:position pos:line="15" pos:column="7"/></operator><name><name pos:line="15" pos:column="7">multi<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">hostcache<pos:position pos:line="15" pos:column="23"/></name></name></expr>)<pos:position pos:line="15" pos:column="24"/></condition><then pos:line="15" pos:column="24"> <block pos:line="15" pos:column="25">{
    <comment type="block" pos:line="16" pos:column="5">/* failure, free mem and bail out */</comment>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">free<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name pos:line="17" pos:column="10">multi<pos:position pos:line="17" pos:column="15"/></name></expr></argument>)<pos:position pos:line="17" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">multi<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <name pos:line="18" pos:column="13">NULL<pos:position pos:line="18" pos:column="17"/></name></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>
  <return pos:line="20" pos:column="3">return <expr><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">CURLM<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></operator><operator pos:line="20" pos:column="18">)<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">multi<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
