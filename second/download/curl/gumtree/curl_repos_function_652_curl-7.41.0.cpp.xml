<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_652_curl-7.41.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">install_signal_handlers<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">void<pos:position pos:line="1" pos:column="41"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">SIGHUP<pos:position pos:line="3" pos:column="14"/></name></cpp:ifdef>
  <comment type="block" pos:line="4" pos:column="3">/* ignore SIGHUP signal */</comment>
  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><operator pos:line="5" pos:column="6">(<pos:position pos:line="5" pos:column="7"/></operator><name pos:line="5" pos:column="7">old_sighup_handler<pos:position pos:line="5" pos:column="25"/></name> <operator pos:line="5" pos:column="26">=<pos:position pos:line="5" pos:column="27"/></operator> <call><name pos:line="5" pos:column="28">signal<pos:position pos:line="5" pos:column="34"/></name><argument_list pos:line="5" pos:column="34">(<argument><expr><name pos:line="5" pos:column="35">SIGHUP<pos:position pos:line="5" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="43">SIG_IGN<pos:position pos:line="5" pos:column="50"/></name></expr></argument>)<pos:position pos:line="5" pos:column="51"/></argument_list></call><operator pos:line="5" pos:column="51">)<pos:position pos:line="5" pos:column="52"/></operator> <operator pos:line="5" pos:column="53">==<pos:position pos:line="5" pos:column="55"/></operator> <name pos:line="5" pos:column="56">SIG_ERR<pos:position pos:line="5" pos:column="63"/></name></expr>)<pos:position pos:line="5" pos:column="64"/></condition><then pos:line="5" pos:column="64">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="5">logmsg<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="string" pos:line="6" pos:column="12">"cannot install SIGHUP handler: %s"<pos:position pos:line="6" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="49">strerror<pos:position pos:line="6" pos:column="57"/></name><argument_list pos:line="6" pos:column="57">(<argument><expr><name pos:line="6" pos:column="58">errno<pos:position pos:line="6" pos:column="63"/></name></expr></argument>)<pos:position pos:line="6" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="66"/></expr_stmt></block></then></if>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">SIGPIPE<pos:position pos:line="8" pos:column="15"/></name></cpp:ifdef>
  <comment type="block" pos:line="9" pos:column="3">/* ignore SIGPIPE signal */</comment>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">(<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">old_sigpipe_handler<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">=<pos:position pos:line="10" pos:column="28"/></operator> <call><name pos:line="10" pos:column="29">signal<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name pos:line="10" pos:column="36">SIGPIPE<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="45">SIG_IGN<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call><operator pos:line="10" pos:column="53">)<pos:position pos:line="10" pos:column="54"/></operator> <operator pos:line="10" pos:column="55">==<pos:position pos:line="10" pos:column="57"/></operator> <name pos:line="10" pos:column="58">SIG_ERR<pos:position pos:line="10" pos:column="65"/></name></expr>)<pos:position pos:line="10" pos:column="66"/></condition><then pos:line="10" pos:column="66">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="5">logmsg<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="string" pos:line="11" pos:column="12">"cannot install SIGPIPE handler: %s"<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="50">strerror<pos:position pos:line="11" pos:column="58"/></name><argument_list pos:line="11" pos:column="58">(<argument><expr><name pos:line="11" pos:column="59">errno<pos:position pos:line="11" pos:column="64"/></name></expr></argument>)<pos:position pos:line="11" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="67"/></expr_stmt></block></then></if>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">SIGALRM<pos:position pos:line="13" pos:column="15"/></name></cpp:ifdef>
  <comment type="block" pos:line="14" pos:column="3">/* ignore SIGALRM signal */</comment>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">(<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">old_sigalrm_handler<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">=<pos:position pos:line="15" pos:column="28"/></operator> <call><name pos:line="15" pos:column="29">signal<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">SIGALRM<pos:position pos:line="15" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="45">SIG_IGN<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call><operator pos:line="15" pos:column="53">)<pos:position pos:line="15" pos:column="54"/></operator> <operator pos:line="15" pos:column="55">==<pos:position pos:line="15" pos:column="57"/></operator> <name pos:line="15" pos:column="58">SIG_ERR<pos:position pos:line="15" pos:column="65"/></name></expr>)<pos:position pos:line="15" pos:column="66"/></condition><then pos:line="15" pos:column="66">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="5">logmsg<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="string" pos:line="16" pos:column="12">"cannot install SIGALRM handler: %s"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="50">strerror<pos:position pos:line="16" pos:column="58"/></name><argument_list pos:line="16" pos:column="58">(<argument><expr><name pos:line="16" pos:column="59">errno<pos:position pos:line="16" pos:column="64"/></name></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="67"/></expr_stmt></block></then></if>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">SIGINT<pos:position pos:line="18" pos:column="14"/></name></cpp:ifdef>
  <comment type="block" pos:line="19" pos:column="3">/* handle SIGINT signal with our exit_signal_handler */</comment>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><operator pos:line="20" pos:column="6">(<pos:position pos:line="20" pos:column="7"/></operator><name pos:line="20" pos:column="7">old_sigint_handler<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">=<pos:position pos:line="20" pos:column="27"/></operator> <call><name pos:line="20" pos:column="28">signal<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name pos:line="20" pos:column="35">SIGINT<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="43">exit_signal_handler<pos:position pos:line="20" pos:column="62"/></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call><operator pos:line="20" pos:column="63">)<pos:position pos:line="20" pos:column="64"/></operator> <operator pos:line="20" pos:column="65">==<pos:position pos:line="20" pos:column="67"/></operator> <name pos:line="20" pos:column="68">SIG_ERR<pos:position pos:line="20" pos:column="75"/></name></expr>)<pos:position pos:line="20" pos:column="76"/></condition><then pos:line="20" pos:column="76">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="5">logmsg<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><literal type="string" pos:line="21" pos:column="12">"cannot install SIGINT handler: %s"<pos:position pos:line="21" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="49">strerror<pos:position pos:line="21" pos:column="57"/></name><argument_list pos:line="21" pos:column="57">(<argument><expr><name pos:line="21" pos:column="58">errno<pos:position pos:line="21" pos:column="63"/></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt></block></then>
  <else pos:line="22" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="5">siginterrupt<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><name pos:line="23" pos:column="18">SIGINT<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="26">1<pos:position pos:line="23" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt></block></else></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">SIGTERM<pos:position pos:line="25" pos:column="15"/></name></cpp:ifdef>
  <comment type="block" pos:line="26" pos:column="3">/* handle SIGTERM signal with our exit_signal_handler */</comment>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><operator pos:line="27" pos:column="6">(<pos:position pos:line="27" pos:column="7"/></operator><name pos:line="27" pos:column="7">old_sigterm_handler<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <call><name pos:line="27" pos:column="29">signal<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">SIGTERM<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="45">exit_signal_handler<pos:position pos:line="27" pos:column="64"/></name></expr></argument>)<pos:position pos:line="27" pos:column="65"/></argument_list></call><operator pos:line="27" pos:column="65">)<pos:position pos:line="27" pos:column="66"/></operator> <operator pos:line="27" pos:column="67">==<pos:position pos:line="27" pos:column="69"/></operator> <name pos:line="27" pos:column="70">SIG_ERR<pos:position pos:line="27" pos:column="77"/></name></expr>)<pos:position pos:line="27" pos:column="78"/></condition><then pos:line="27" pos:column="78">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="5">logmsg<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><literal type="string" pos:line="28" pos:column="12">"cannot install SIGTERM handler: %s"<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="50">strerror<pos:position pos:line="28" pos:column="58"/></name><argument_list pos:line="28" pos:column="58">(<argument><expr><name pos:line="28" pos:column="59">errno<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="67"/></expr_stmt></block></then>
  <else pos:line="29" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="5">siginterrupt<pos:position pos:line="30" pos:column="17"/></name><argument_list pos:line="30" pos:column="17">(<argument><expr><name pos:line="30" pos:column="18">SIGTERM<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="27">1<pos:position pos:line="30" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt></block></else></if>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><call><name pos:line="32" pos:column="5">defined<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><name pos:line="32" pos:column="13">SIGBREAK<pos:position pos:line="32" pos:column="21"/></name></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call> <operator pos:line="32" pos:column="23">&amp;&amp;<pos:position pos:line="32" pos:column="33"/></operator> <call><name pos:line="32" pos:column="26">defined<pos:position pos:line="32" pos:column="33"/></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">WIN32<pos:position pos:line="32" pos:column="39"/></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="33" pos:column="3">/* handle SIGBREAK signal with our exit_signal_handler */</comment>
  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><operator pos:line="34" pos:column="6">(<pos:position pos:line="34" pos:column="7"/></operator><name pos:line="34" pos:column="7">old_sigbreak_handler<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator> <call><name pos:line="34" pos:column="30">signal<pos:position pos:line="34" pos:column="36"/></name><argument_list pos:line="34" pos:column="36">(<argument><expr><name pos:line="34" pos:column="37">SIGBREAK<pos:position pos:line="34" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="47">exit_signal_handler<pos:position pos:line="34" pos:column="66"/></name></expr></argument>)<pos:position pos:line="34" pos:column="67"/></argument_list></call><operator pos:line="34" pos:column="67">)<pos:position pos:line="34" pos:column="68"/></operator> <operator pos:line="34" pos:column="69">==<pos:position pos:line="34" pos:column="71"/></operator> <name pos:line="34" pos:column="72">SIG_ERR<pos:position pos:line="34" pos:column="79"/></name></expr>)<pos:position pos:line="34" pos:column="80"/></condition><then pos:line="34" pos:column="80">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="5">logmsg<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="string" pos:line="35" pos:column="12">"cannot install SIGBREAK handler: %s"<pos:position pos:line="35" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="35" pos:column="51">strerror<pos:position pos:line="35" pos:column="59"/></name><argument_list pos:line="35" pos:column="59">(<argument><expr><name pos:line="35" pos:column="60">errno<pos:position pos:line="35" pos:column="65"/></name></expr></argument>)<pos:position pos:line="35" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt></block></then>
  <else pos:line="36" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="5">siginterrupt<pos:position pos:line="37" pos:column="17"/></name><argument_list pos:line="37" pos:column="17">(<argument><expr><name pos:line="37" pos:column="18">SIGBREAK<pos:position pos:line="37" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="28">1<pos:position pos:line="37" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt></block></else></if>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
