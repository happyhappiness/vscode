<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2609_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">Curl_multissl_version<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">buffer<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">size_t<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">size<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><specifier pos:line="3" pos:column="10">const<pos:position pos:line="3" pos:column="15"/></specifier> <name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">Curl_ssl<pos:position pos:line="3" pos:column="31"/></name></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">selected<pos:position pos:line="3" pos:column="41"/></name></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="4" pos:column="3">static<pos:position pos:line="4" pos:column="9"/></specifier> <type><name pos:line="4" pos:column="10">char<pos:position pos:line="4" pos:column="14"/></name></type> <name><name pos:line="4" pos:column="15">backends<pos:position pos:line="4" pos:column="23"/></name><index pos:line="4" pos:column="23">[<expr><literal type="number" pos:line="4" pos:column="24">200<pos:position pos:line="4" pos:column="27"/></literal></expr>]<pos:position pos:line="4" pos:column="28"/></index></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><name pos:line="5" pos:column="10">size_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">total<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">Curl_ssl<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">current<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">current<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <ternary><condition><expr><name pos:line="8" pos:column="13">Curl_ssl<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">==<pos:position pos:line="8" pos:column="24"/></operator> <operator pos:line="8" pos:column="25">&amp;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="26">Curl_ssl_multi<pos:position pos:line="8" pos:column="40"/></name></expr> ?<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42"> <expr><name><name pos:line="8" pos:column="43">available_backends<pos:position pos:line="8" pos:column="61"/></name><index pos:line="8" pos:column="61">[<expr><literal type="number" pos:line="8" pos:column="62">0<pos:position pos:line="8" pos:column="63"/></literal></expr>]<pos:position pos:line="8" pos:column="64"/></index></name></expr> <pos:position pos:line="8" pos:column="65"/></then><else pos:line="8" pos:column="65">: <expr><name pos:line="8" pos:column="67">Curl_ssl<pos:position pos:line="8" pos:column="75"/></name></expr></else></ternary></expr>;<pos:position pos:line="8" pos:column="76"/></expr_stmt>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">current<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">!=<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">selected<pos:position pos:line="10" pos:column="25"/></name></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26"> <block pos:line="10" pos:column="27">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">p<pos:position pos:line="11" pos:column="12"/></name> <init pos:line="11" pos:column="13">= <expr><name pos:line="11" pos:column="15">backends<pos:position pos:line="11" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">i<pos:position pos:line="12" pos:column="10"/></name></decl>;<pos:position pos:line="12" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">selected<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <name pos:line="14" pos:column="16">current<pos:position pos:line="14" pos:column="23"/></name></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>

    <for pos:line="16" pos:column="5">for<control pos:line="16" pos:column="8">(<init><expr><name pos:line="16" pos:column="9">i<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <literal type="number" pos:line="16" pos:column="13">0<pos:position pos:line="16" pos:column="14"/></literal></expr>;<pos:position pos:line="16" pos:column="15"/></init> <condition><expr><name><name pos:line="16" pos:column="16">available_backends<pos:position pos:line="16" pos:column="34"/></name><index pos:line="16" pos:column="34">[<expr><name pos:line="16" pos:column="35">i<pos:position pos:line="16" pos:column="36"/></name></expr>]<pos:position pos:line="16" pos:column="37"/></index></name></expr>;<pos:position pos:line="16" pos:column="38"/></condition> <incr><expr><name pos:line="16" pos:column="39">i<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">++<pos:position pos:line="16" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="16" pos:column="43"/></control> <block pos:line="16" pos:column="44">{
      <if pos:line="17" pos:column="7">if<condition pos:line="17" pos:column="9">(<expr><name pos:line="17" pos:column="10">i<pos:position pos:line="17" pos:column="11"/></name></expr>)<pos:position pos:line="17" pos:column="12"/></condition><then pos:line="17" pos:column="12">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="9">*<pos:position pos:line="18" pos:column="10"/></operator><operator pos:line="18" pos:column="10">(<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">p<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">++<pos:position pos:line="18" pos:column="14"/></operator><operator pos:line="18" pos:column="14">)<pos:position pos:line="18" pos:column="15"/></operator> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <literal type="char" pos:line="18" pos:column="18">' '<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt></block></then></if>
      <if pos:line="19" pos:column="7">if<condition pos:line="19" pos:column="9">(<expr><name pos:line="19" pos:column="10">selected<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">!=<pos:position pos:line="19" pos:column="21"/></operator> <name><name pos:line="19" pos:column="22">available_backends<pos:position pos:line="19" pos:column="40"/></name><index pos:line="19" pos:column="40">[<expr><name pos:line="19" pos:column="41">i<pos:position pos:line="19" pos:column="42"/></name></expr>]<pos:position pos:line="19" pos:column="43"/></index></name></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">p<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">++<pos:position pos:line="20" pos:column="14"/></operator><operator pos:line="20" pos:column="14">)<pos:position pos:line="20" pos:column="15"/></operator> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="char" pos:line="20" pos:column="18">'('<pos:position pos:line="20" pos:column="21"/></literal></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="21" pos:column="7">p<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">+=<pos:position pos:line="21" pos:column="11"/></operator> <name><name pos:line="21" pos:column="12">available_backends<pos:position pos:line="21" pos:column="30"/></name><index pos:line="21" pos:column="30">[<expr><name pos:line="21" pos:column="31">i<pos:position pos:line="21" pos:column="32"/></name></expr>]<pos:position pos:line="21" pos:column="33"/></index></name><operator pos:line="21" pos:column="33">-&gt;<pos:position pos:line="21" pos:column="38"/></operator><call><name pos:line="21" pos:column="35">version<pos:position pos:line="21" pos:column="42"/></name><argument_list pos:line="21" pos:column="42">(<argument><expr><name pos:line="21" pos:column="43">p<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="46">backends<pos:position pos:line="21" pos:column="54"/></name> <operator pos:line="21" pos:column="55">+<pos:position pos:line="21" pos:column="56"/></operator> <sizeof pos:line="21" pos:column="57">sizeof<argument_list pos:line="21" pos:column="63">(<argument><expr><name pos:line="21" pos:column="64">backends<pos:position pos:line="21" pos:column="72"/></name></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></sizeof> <operator pos:line="21" pos:column="74">-<pos:position pos:line="21" pos:column="75"/></operator> <name pos:line="21" pos:column="76">p<pos:position pos:line="21" pos:column="77"/></name></expr></argument>)<pos:position pos:line="21" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="79"/></expr_stmt>
      <if pos:line="22" pos:column="7">if<condition pos:line="22" pos:column="9">(<expr><name pos:line="22" pos:column="10">selected<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">!=<pos:position pos:line="22" pos:column="21"/></operator> <name><name pos:line="22" pos:column="22">available_backends<pos:position pos:line="22" pos:column="40"/></name><index pos:line="22" pos:column="40">[<expr><name pos:line="22" pos:column="41">i<pos:position pos:line="22" pos:column="42"/></name></expr>]<pos:position pos:line="22" pos:column="43"/></index></name></expr>)<pos:position pos:line="22" pos:column="44"/></condition><then pos:line="22" pos:column="44">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="23" pos:column="9">*<pos:position pos:line="23" pos:column="10"/></operator><operator pos:line="23" pos:column="10">(<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">p<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">++<pos:position pos:line="23" pos:column="14"/></operator><operator pos:line="23" pos:column="14">)<pos:position pos:line="23" pos:column="15"/></operator> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <literal type="char" pos:line="23" pos:column="18">')'<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt></block></then></if>
    }<pos:position pos:line="24" pos:column="6"/></block></for>
    <expr_stmt><expr><operator pos:line="25" pos:column="5">*<pos:position pos:line="25" pos:column="6"/></operator><name pos:line="25" pos:column="6">p<pos:position pos:line="25" pos:column="7"/></name> <operator pos:line="25" pos:column="8">=<pos:position pos:line="25" pos:column="9"/></operator> <literal type="char" pos:line="25" pos:column="10">'\0'<pos:position pos:line="25" pos:column="14"/></literal></expr>;<pos:position pos:line="25" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">total<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <name pos:line="26" pos:column="13">p<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">-<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">backends<pos:position pos:line="26" pos:column="25"/></name></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><name pos:line="29" pos:column="6">size<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">&lt;<pos:position pos:line="29" pos:column="15"/></operator> <name pos:line="29" pos:column="13">total<pos:position pos:line="29" pos:column="18"/></name></expr>)<pos:position pos:line="29" pos:column="19"/></condition><then pos:line="29" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="5">memcpy<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><name pos:line="30" pos:column="12">buffer<pos:position pos:line="30" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="20">backends<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">total<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">+<pos:position pos:line="30" pos:column="37"/></operator> <literal type="number" pos:line="30" pos:column="38">1<pos:position pos:line="30" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt></block></then>
  <else pos:line="31" pos:column="3">else <block pos:line="31" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">memcpy<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><name pos:line="32" pos:column="12">buffer<pos:position pos:line="32" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="20">backends<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="30">size<pos:position pos:line="32" pos:column="34"/></name> <operator pos:line="32" pos:column="35">-<pos:position pos:line="32" pos:column="36"/></operator> <literal type="number" pos:line="32" pos:column="37">1<pos:position pos:line="32" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">buffer<pos:position pos:line="33" pos:column="11"/></name><index pos:line="33" pos:column="11">[<expr><name pos:line="33" pos:column="12">size<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">-<pos:position pos:line="33" pos:column="18"/></operator> <literal type="number" pos:line="33" pos:column="19">1<pos:position pos:line="33" pos:column="20"/></literal></expr>]<pos:position pos:line="33" pos:column="21"/></index></name> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <literal type="char" pos:line="33" pos:column="24">'\0'<pos:position pos:line="33" pos:column="28"/></literal></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></else></if>

  <return pos:line="36" pos:column="3">return <expr><name pos:line="36" pos:column="10">total<pos:position pos:line="36" pos:column="15"/></name></expr>;<pos:position pos:line="36" pos:column="16"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
