<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_15573.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">tool_write_cb<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">buffer<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">size_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">sz<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">size_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">nmemb<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">void<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">userdata<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">rc<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">OutStruct<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">outs<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">userdata<pos:position pos:line="4" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">OperationConfig<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">config<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><name><name pos:line="5" pos:column="36">outs<pos:position pos:line="5" pos:column="40"/></name><operator pos:line="5" pos:column="40">-&gt;<pos:position pos:line="5" pos:column="45"/></operator><name pos:line="5" pos:column="42">config<pos:position pos:line="5" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="49"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">bytes<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><name pos:line="6" pos:column="18">sz<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">nmemb<pos:position pos:line="6" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">is_tty<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name><name pos:line="7" pos:column="17">config<pos:position pos:line="7" pos:column="23"/></name><operator pos:line="7" pos:column="23">-&gt;<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="25">global<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">isatty<pos:position pos:line="7" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/*
   * Once that libcurl has called back tool_write_cb() the returned value
   * is checked against the amount that was intended to be written, if
   * it does not match then it fails with CURLE_WRITE_ERROR. So at this
   * point returning a value different from sz*nmemb indicates failure.
   */</comment>
  <decl_stmt><decl><type><specifier pos:line="15" pos:column="3">const<pos:position pos:line="15" pos:column="8"/></specifier> <name pos:line="15" pos:column="9">size_t<pos:position pos:line="15" pos:column="15"/></name></type> <name pos:line="15" pos:column="16">failure<pos:position pos:line="15" pos:column="23"/></name> <init pos:line="15" pos:column="24">= <expr><ternary><condition><expr><name pos:line="15" pos:column="26">bytes<pos:position pos:line="15" pos:column="31"/></name></expr> ?<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33"> <expr><literal type="number" pos:line="15" pos:column="34">0<pos:position pos:line="15" pos:column="35"/></literal></expr> <pos:position pos:line="15" pos:column="36"/></then><else pos:line="15" pos:column="36">: <expr><literal type="number" pos:line="15" pos:column="38">1<pos:position pos:line="15" pos:column="39"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="15" pos:column="40"/></decl_stmt>

<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">DEBUGBUILD<pos:position pos:line="17" pos:column="18"/></name></cpp:ifdef>
  <block pos:line="18" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name> <modifier pos:line="19" pos:column="10">*<pos:position pos:line="19" pos:column="11"/></modifier></type><name pos:line="19" pos:column="11">tty<pos:position pos:line="19" pos:column="14"/></name> <init pos:line="19" pos:column="15">= <expr><call><name pos:line="19" pos:column="17">curlx_getenv<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="string" pos:line="19" pos:column="30">"CURL_ISATTY"<pos:position pos:line="19" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="45"/></decl_stmt>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">tty<pos:position pos:line="20" pos:column="11"/></name></expr>)<pos:position pos:line="20" pos:column="12"/></condition><then pos:line="20" pos:column="12"> <block pos:line="20" pos:column="13">{
      <expr_stmt><expr><name pos:line="21" pos:column="7">is_tty<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <name pos:line="21" pos:column="16">TRUE<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">curl_free<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">tty<pos:position pos:line="22" pos:column="20"/></name></expr></argument>)<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
  }<pos:position pos:line="24" pos:column="4"/></block>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name><name pos:line="26" pos:column="6">config<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">include_headers<pos:position pos:line="26" pos:column="29"/></name></name></expr>)<pos:position pos:line="26" pos:column="30"/></condition><then pos:line="26" pos:column="30"> <block pos:line="26" pos:column="31">{
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><name pos:line="27" pos:column="8">bytes<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">&gt;<pos:position pos:line="27" pos:column="18"/></operator> <operator pos:line="27" pos:column="16">(<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">size_t<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">)<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">CURL_MAX_HTTP_HEADER<pos:position pos:line="27" pos:column="44"/></name></expr>)<pos:position pos:line="27" pos:column="45"/></condition><then pos:line="27" pos:column="45"> <block pos:line="27" pos:column="46">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">warnf<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name><name pos:line="28" pos:column="13">config<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">-&gt;<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="21">global<pos:position pos:line="28" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="29">"Header data size exceeds single call write "<pos:position pos:line="28" pos:column="74"/></literal>
            <literal type="string" pos:line="29" pos:column="13">"limit!\n"<pos:position pos:line="29" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
      <return pos:line="30" pos:column="7">return <expr><name pos:line="30" pos:column="14">failure<pos:position pos:line="30" pos:column="21"/></name></expr>;<pos:position pos:line="30" pos:column="22"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then>
  <else pos:line="33" pos:column="3">else <block pos:line="33" pos:column="8">{
    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name pos:line="34" pos:column="8">bytes<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">&gt;<pos:position pos:line="34" pos:column="18"/></operator> <operator pos:line="34" pos:column="16">(<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">size_t<pos:position pos:line="34" pos:column="23"/></name><operator pos:line="34" pos:column="23">)<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="24">CURL_MAX_WRITE_SIZE<pos:position pos:line="34" pos:column="43"/></name></expr>)<pos:position pos:line="34" pos:column="44"/></condition><then pos:line="34" pos:column="44"> <block pos:line="34" pos:column="45">{
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">warnf<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name><name pos:line="35" pos:column="13">config<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">-&gt;<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="21">global<pos:position pos:line="35" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="29">"Data size exceeds single call write limit!\n"<pos:position pos:line="35" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="77"/></expr_stmt>
      <return pos:line="36" pos:column="7">return <expr><name pos:line="36" pos:column="14">failure<pos:position pos:line="36" pos:column="21"/></name></expr>;<pos:position pos:line="36" pos:column="22"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>
  }<pos:position pos:line="38" pos:column="4"/></block></else></if>

  <block pos:line="40" pos:column="3">{
    <comment type="block" pos:line="41" pos:column="5">/* Some internal congruency checks on received OutStruct */</comment>
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">bool<pos:position pos:line="42" pos:column="9"/></name></type> <name pos:line="42" pos:column="10">check_fails<pos:position pos:line="42" pos:column="21"/></name> <init pos:line="42" pos:column="22">= <expr><name pos:line="42" pos:column="24">FALSE<pos:position pos:line="42" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="42" pos:column="30"/></decl_stmt>
    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><name><name pos:line="43" pos:column="8">outs<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">filename<pos:position pos:line="43" pos:column="22"/></name></name></expr>)<pos:position pos:line="43" pos:column="23"/></condition><then pos:line="43" pos:column="23"> <block pos:line="43" pos:column="24">{
      <comment type="block" pos:line="44" pos:column="7">/* regular file */</comment>
      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><operator pos:line="45" pos:column="10">!<pos:position pos:line="45" pos:column="11"/></operator><operator pos:line="45" pos:column="11">*<pos:position pos:line="45" pos:column="12"/></operator><name><name pos:line="45" pos:column="12">outs<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">-&gt;<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="18">filename<pos:position pos:line="45" pos:column="26"/></name></name></expr>)<pos:position pos:line="45" pos:column="27"/></condition><then pos:line="45" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="9">check_fails<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">TRUE<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt></block></then></if>
      <if pos:line="47" pos:column="7">if<condition pos:line="47" pos:column="9">(<expr><operator pos:line="47" pos:column="10">!<pos:position pos:line="47" pos:column="11"/></operator><name><name pos:line="47" pos:column="11">outs<pos:position pos:line="47" pos:column="15"/></name><operator pos:line="47" pos:column="15">-&gt;<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="17">s_isreg<pos:position pos:line="47" pos:column="24"/></name></name></expr>)<pos:position pos:line="47" pos:column="25"/></condition><then pos:line="47" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="9">check_fails<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <name pos:line="48" pos:column="23">TRUE<pos:position pos:line="48" pos:column="27"/></name></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt></block></then></if>
      <if pos:line="49" pos:column="7">if<condition pos:line="49" pos:column="9">(<expr><name><name pos:line="49" pos:column="10">outs<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">-&gt;<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="16">fopened<pos:position pos:line="49" pos:column="23"/></name></name> <operator pos:line="49" pos:column="24">&amp;&amp;<pos:position pos:line="49" pos:column="34"/></operator> <operator pos:line="49" pos:column="27">!<pos:position pos:line="49" pos:column="28"/></operator><name><name pos:line="49" pos:column="28">outs<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">-&gt;<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="34">stream<pos:position pos:line="49" pos:column="40"/></name></name></expr>)<pos:position pos:line="49" pos:column="41"/></condition><then pos:line="49" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="9">check_fails<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <name pos:line="50" pos:column="23">TRUE<pos:position pos:line="50" pos:column="27"/></name></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt></block></then></if>
      <if pos:line="51" pos:column="7">if<condition pos:line="51" pos:column="9">(<expr><operator pos:line="51" pos:column="10">!<pos:position pos:line="51" pos:column="11"/></operator><name><name pos:line="51" pos:column="11">outs<pos:position pos:line="51" pos:column="15"/></name><operator pos:line="51" pos:column="15">-&gt;<pos:position pos:line="51" pos:column="20"/></operator><name pos:line="51" pos:column="17">fopened<pos:position pos:line="51" pos:column="24"/></name></name> <operator pos:line="51" pos:column="25">&amp;&amp;<pos:position pos:line="51" pos:column="35"/></operator> <name><name pos:line="51" pos:column="28">outs<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">-&gt;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="34">stream<pos:position pos:line="51" pos:column="40"/></name></name></expr>)<pos:position pos:line="51" pos:column="41"/></condition><then pos:line="51" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="9">check_fails<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">=<pos:position pos:line="52" pos:column="22"/></operator> <name pos:line="52" pos:column="23">TRUE<pos:position pos:line="52" pos:column="27"/></name></expr>;<pos:position pos:line="52" pos:column="28"/></expr_stmt></block></then></if>
      <if pos:line="53" pos:column="7">if<condition pos:line="53" pos:column="9">(<expr><operator pos:line="53" pos:column="10">!<pos:position pos:line="53" pos:column="11"/></operator><name><name pos:line="53" pos:column="11">outs<pos:position pos:line="53" pos:column="15"/></name><operator pos:line="53" pos:column="15">-&gt;<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="17">fopened<pos:position pos:line="53" pos:column="24"/></name></name> <operator pos:line="53" pos:column="25">&amp;&amp;<pos:position pos:line="53" pos:column="35"/></operator> <name><name pos:line="53" pos:column="28">outs<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">-&gt;<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="34">bytes<pos:position pos:line="53" pos:column="39"/></name></name></expr>)<pos:position pos:line="53" pos:column="40"/></condition><then pos:line="53" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="9">check_fails<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <name pos:line="54" pos:column="23">TRUE<pos:position pos:line="54" pos:column="27"/></name></expr>;<pos:position pos:line="54" pos:column="28"/></expr_stmt></block></then></if>
    }<pos:position pos:line="55" pos:column="6"/></block></then>
    <else pos:line="56" pos:column="5">else <block pos:line="56" pos:column="10">{
      <comment type="block" pos:line="57" pos:column="7">/* standard stream */</comment>
      <if pos:line="58" pos:column="7">if<condition pos:line="58" pos:column="9">(<expr><operator pos:line="58" pos:column="10">!<pos:position pos:line="58" pos:column="11"/></operator><name><name pos:line="58" pos:column="11">outs<pos:position pos:line="58" pos:column="15"/></name><operator pos:line="58" pos:column="15">-&gt;<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="17">stream<pos:position pos:line="58" pos:column="23"/></name></name> <operator pos:line="58" pos:column="24">||<pos:position pos:line="58" pos:column="26"/></operator> <name><name pos:line="58" pos:column="27">outs<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">-&gt;<pos:position pos:line="58" pos:column="36"/></operator><name pos:line="58" pos:column="33">s_isreg<pos:position pos:line="58" pos:column="40"/></name></name> <operator pos:line="58" pos:column="41">||<pos:position pos:line="58" pos:column="43"/></operator> <name><name pos:line="58" pos:column="44">outs<pos:position pos:line="58" pos:column="48"/></name><operator pos:line="58" pos:column="48">-&gt;<pos:position pos:line="58" pos:column="53"/></operator><name pos:line="58" pos:column="50">fopened<pos:position pos:line="58" pos:column="57"/></name></name></expr>)<pos:position pos:line="58" pos:column="58"/></condition><then pos:line="58" pos:column="58">
        <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="9">check_fails<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <name pos:line="59" pos:column="23">TRUE<pos:position pos:line="59" pos:column="27"/></name></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt></block></then></if>
      <if pos:line="60" pos:column="7">if<condition pos:line="60" pos:column="9">(<expr><name><name pos:line="60" pos:column="10">outs<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">-&gt;<pos:position pos:line="60" pos:column="19"/></operator><name pos:line="60" pos:column="16">alloc_filename<pos:position pos:line="60" pos:column="30"/></name></name> <operator pos:line="60" pos:column="31">||<pos:position pos:line="60" pos:column="33"/></operator> <name><name pos:line="60" pos:column="34">outs<pos:position pos:line="60" pos:column="38"/></name><operator pos:line="60" pos:column="38">-&gt;<pos:position pos:line="60" pos:column="43"/></operator><name pos:line="60" pos:column="40">is_cd_filename<pos:position pos:line="60" pos:column="54"/></name></name> <operator pos:line="60" pos:column="55">||<pos:position pos:line="60" pos:column="57"/></operator> <name><name pos:line="60" pos:column="58">outs<pos:position pos:line="60" pos:column="62"/></name><operator pos:line="60" pos:column="62">-&gt;<pos:position pos:line="60" pos:column="67"/></operator><name pos:line="60" pos:column="64">init<pos:position pos:line="60" pos:column="68"/></name></name></expr>)<pos:position pos:line="60" pos:column="69"/></condition><then pos:line="60" pos:column="69">
        <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="9">check_fails<pos:position pos:line="61" pos:column="20"/></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="23">TRUE<pos:position pos:line="61" pos:column="27"/></name></expr>;<pos:position pos:line="61" pos:column="28"/></expr_stmt></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block></else></if>
    <if pos:line="63" pos:column="5">if<condition pos:line="63" pos:column="7">(<expr><name pos:line="63" pos:column="8">check_fails<pos:position pos:line="63" pos:column="19"/></name></expr>)<pos:position pos:line="63" pos:column="20"/></condition><then pos:line="63" pos:column="20"> <block pos:line="63" pos:column="21">{
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">warnf<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name><name pos:line="64" pos:column="13">config<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">-&gt;<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="21">global<pos:position pos:line="64" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="29">"Invalid output struct data for write callback\n"<pos:position pos:line="64" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="80"/></expr_stmt>
      <return pos:line="65" pos:column="7">return <expr><name pos:line="65" pos:column="14">failure<pos:position pos:line="65" pos:column="21"/></name></expr>;<pos:position pos:line="65" pos:column="22"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>
  }<pos:position pos:line="67" pos:column="4"/></block>
<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="70" pos:column="3">if<condition pos:line="70" pos:column="5">(<expr><operator pos:line="70" pos:column="6">!<pos:position pos:line="70" pos:column="7"/></operator><name><name pos:line="70" pos:column="7">outs<pos:position pos:line="70" pos:column="11"/></name><operator pos:line="70" pos:column="11">-&gt;<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="13">stream<pos:position pos:line="70" pos:column="19"/></name></name> <operator pos:line="70" pos:column="20">&amp;&amp;<pos:position pos:line="70" pos:column="30"/></operator> <operator pos:line="70" pos:column="23">!<pos:position pos:line="70" pos:column="24"/></operator><call><name pos:line="70" pos:column="24">tool_create_output_file<pos:position pos:line="70" pos:column="47"/></name><argument_list pos:line="70" pos:column="47">(<argument><expr><name pos:line="70" pos:column="48">outs<pos:position pos:line="70" pos:column="52"/></name></expr></argument>)<pos:position pos:line="70" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="54"/></condition><then pos:line="70" pos:column="54">
    <block type="pseudo"><return pos:line="71" pos:column="5">return <expr><name pos:line="71" pos:column="12">failure<pos:position pos:line="71" pos:column="19"/></name></expr>;<pos:position pos:line="71" pos:column="20"/></return></block></then></if>

  <if pos:line="73" pos:column="3">if<condition pos:line="73" pos:column="5">(<expr><name pos:line="73" pos:column="6">is_tty<pos:position pos:line="73" pos:column="12"/></name> <operator pos:line="73" pos:column="13">&amp;&amp;<pos:position pos:line="73" pos:column="23"/></operator> <operator pos:line="73" pos:column="16">(<pos:position pos:line="73" pos:column="17"/></operator><name><name pos:line="73" pos:column="17">outs<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">-&gt;<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="23">bytes<pos:position pos:line="73" pos:column="28"/></name></name> <operator pos:line="73" pos:column="29">&lt;<pos:position pos:line="73" pos:column="33"/></operator> <literal type="number" pos:line="73" pos:column="31">2000<pos:position pos:line="73" pos:column="35"/></literal><operator pos:line="73" pos:column="35">)<pos:position pos:line="73" pos:column="36"/></operator> <operator pos:line="73" pos:column="37">&amp;&amp;<pos:position pos:line="73" pos:column="47"/></operator> <operator pos:line="73" pos:column="40">!<pos:position pos:line="73" pos:column="41"/></operator><name><name pos:line="73" pos:column="41">config<pos:position pos:line="73" pos:column="47"/></name><operator pos:line="73" pos:column="47">-&gt;<pos:position pos:line="73" pos:column="52"/></operator><name pos:line="73" pos:column="49">terminal_binary_ok<pos:position pos:line="73" pos:column="67"/></name></name></expr>)<pos:position pos:line="73" pos:column="68"/></condition><then pos:line="73" pos:column="68"> <block pos:line="73" pos:column="69">{
    <comment type="block" pos:line="74" pos:column="5">/* binary output to terminal? */</comment>
    <if pos:line="75" pos:column="5">if<condition pos:line="75" pos:column="7">(<expr><call><name pos:line="75" pos:column="8">memchr<pos:position pos:line="75" pos:column="14"/></name><argument_list pos:line="75" pos:column="14">(<argument><expr><name pos:line="75" pos:column="15">buffer<pos:position pos:line="75" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="23">0<pos:position pos:line="75" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="26">bytes<pos:position pos:line="75" pos:column="31"/></name></expr></argument>)<pos:position pos:line="75" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="33"/></condition><then pos:line="75" pos:column="33"> <block pos:line="75" pos:column="34">{
      <expr_stmt><expr><call><name pos:line="76" pos:column="7">warnf<pos:position pos:line="76" pos:column="12"/></name><argument_list pos:line="76" pos:column="12">(<argument><expr><name><name pos:line="76" pos:column="13">config<pos:position pos:line="76" pos:column="19"/></name><operator pos:line="76" pos:column="19">-&gt;<pos:position pos:line="76" pos:column="24"/></operator><name pos:line="76" pos:column="21">global<pos:position pos:line="76" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="29">"Binary output can mess up your terminal. "<pos:position pos:line="76" pos:column="72"/></literal>
            <literal type="string" pos:line="77" pos:column="13">"Use \"--output -\" to tell curl to output it to your terminal "<pos:position pos:line="77" pos:column="77"/></literal>
            <literal type="string" pos:line="78" pos:column="13">"anyway, or consider \"--output &lt;FILE&gt;\" to save to a file.\n"<pos:position pos:line="78" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="77"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="79" pos:column="7">config<pos:position pos:line="79" pos:column="13"/></name><operator pos:line="79" pos:column="13">-&gt;<pos:position pos:line="79" pos:column="18"/></operator><name pos:line="79" pos:column="15">synthetic_error<pos:position pos:line="79" pos:column="30"/></name></name> <operator pos:line="79" pos:column="31">=<pos:position pos:line="79" pos:column="32"/></operator> <name pos:line="79" pos:column="33">ERR_BINARY_TERMINAL<pos:position pos:line="79" pos:column="52"/></name></expr>;<pos:position pos:line="79" pos:column="53"/></expr_stmt>
      <return pos:line="80" pos:column="7">return <expr><name pos:line="80" pos:column="14">failure<pos:position pos:line="80" pos:column="21"/></name></expr>;<pos:position pos:line="80" pos:column="22"/></return>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if>
  }<pos:position pos:line="82" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="84" pos:column="3">rc<pos:position pos:line="84" pos:column="5"/></name> <operator pos:line="84" pos:column="6">=<pos:position pos:line="84" pos:column="7"/></operator> <call><name pos:line="84" pos:column="8">fwrite<pos:position pos:line="84" pos:column="14"/></name><argument_list pos:line="84" pos:column="14">(<argument><expr><name pos:line="84" pos:column="15">buffer<pos:position pos:line="84" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="23">sz<pos:position pos:line="84" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="27">nmemb<pos:position pos:line="84" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="34">outs<pos:position pos:line="84" pos:column="38"/></name><operator pos:line="84" pos:column="38">-&gt;<pos:position pos:line="84" pos:column="43"/></operator><name pos:line="84" pos:column="40">stream<pos:position pos:line="84" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="48"/></expr_stmt>

  <if pos:line="86" pos:column="3">if<condition pos:line="86" pos:column="5">(<expr><name pos:line="86" pos:column="6">bytes<pos:position pos:line="86" pos:column="11"/></name> <operator pos:line="86" pos:column="12">==<pos:position pos:line="86" pos:column="14"/></operator> <name pos:line="86" pos:column="15">rc<pos:position pos:line="86" pos:column="17"/></name></expr>)<pos:position pos:line="86" pos:column="18"/></condition><then pos:line="86" pos:column="18">
    <comment type="block" pos:line="87" pos:column="5">/* we added this amount of data to the output */</comment>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="88" pos:column="5">outs<pos:position pos:line="88" pos:column="9"/></name><operator pos:line="88" pos:column="9">-&gt;<pos:position pos:line="88" pos:column="14"/></operator><name pos:line="88" pos:column="11">bytes<pos:position pos:line="88" pos:column="16"/></name></name> <operator pos:line="88" pos:column="17">+=<pos:position pos:line="88" pos:column="19"/></operator> <name pos:line="88" pos:column="20">bytes<pos:position pos:line="88" pos:column="25"/></name></expr>;<pos:position pos:line="88" pos:column="26"/></expr_stmt></block></then></if>

  <if pos:line="90" pos:column="3">if<condition pos:line="90" pos:column="5">(<expr><name><name pos:line="90" pos:column="6">config<pos:position pos:line="90" pos:column="12"/></name><operator pos:line="90" pos:column="12">-&gt;<pos:position pos:line="90" pos:column="17"/></operator><name pos:line="90" pos:column="14">readbusy<pos:position pos:line="90" pos:column="22"/></name></name></expr>)<pos:position pos:line="90" pos:column="23"/></condition><then pos:line="90" pos:column="23"> <block pos:line="90" pos:column="24">{
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">config<pos:position pos:line="91" pos:column="11"/></name><operator pos:line="91" pos:column="11">-&gt;<pos:position pos:line="91" pos:column="16"/></operator><name pos:line="91" pos:column="13">readbusy<pos:position pos:line="91" pos:column="21"/></name></name> <operator pos:line="91" pos:column="22">=<pos:position pos:line="91" pos:column="23"/></operator> <name pos:line="91" pos:column="24">FALSE<pos:position pos:line="91" pos:column="29"/></name></expr>;<pos:position pos:line="91" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">curl_easy_pause<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><name><name pos:line="92" pos:column="21">config<pos:position pos:line="92" pos:column="27"/></name><operator pos:line="92" pos:column="27">-&gt;<pos:position pos:line="92" pos:column="32"/></operator><name pos:line="92" pos:column="29">easy<pos:position pos:line="92" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="35">CURLPAUSE_CONT<pos:position pos:line="92" pos:column="49"/></name></expr></argument>)<pos:position pos:line="92" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="93" pos:column="4"/></block></then></if>

  <if pos:line="95" pos:column="3">if<condition pos:line="95" pos:column="5">(<expr><name><name pos:line="95" pos:column="6">config<pos:position pos:line="95" pos:column="12"/></name><operator pos:line="95" pos:column="12">-&gt;<pos:position pos:line="95" pos:column="17"/></operator><name pos:line="95" pos:column="14">nobuffer<pos:position pos:line="95" pos:column="22"/></name></name></expr>)<pos:position pos:line="95" pos:column="23"/></condition><then pos:line="95" pos:column="23"> <block pos:line="95" pos:column="24">{
    <comment type="block" pos:line="96" pos:column="5">/* output buffering disabled */</comment>
    <decl_stmt><decl><type><name pos:line="97" pos:column="5">int<pos:position pos:line="97" pos:column="8"/></name></type> <name pos:line="97" pos:column="9">res<pos:position pos:line="97" pos:column="12"/></name> <init pos:line="97" pos:column="13">= <expr><call><name pos:line="97" pos:column="15">fflush<pos:position pos:line="97" pos:column="21"/></name><argument_list pos:line="97" pos:column="21">(<argument><expr><name><name pos:line="97" pos:column="22">outs<pos:position pos:line="97" pos:column="26"/></name><operator pos:line="97" pos:column="26">-&gt;<pos:position pos:line="97" pos:column="31"/></operator><name pos:line="97" pos:column="28">stream<pos:position pos:line="97" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="97" pos:column="36"/></decl_stmt>
    <if pos:line="98" pos:column="5">if<condition pos:line="98" pos:column="7">(<expr><name pos:line="98" pos:column="8">res<pos:position pos:line="98" pos:column="11"/></name></expr>)<pos:position pos:line="98" pos:column="12"/></condition><then pos:line="98" pos:column="12">
      <block type="pseudo"><return pos:line="99" pos:column="7">return <expr><name pos:line="99" pos:column="14">failure<pos:position pos:line="99" pos:column="21"/></name></expr>;<pos:position pos:line="99" pos:column="22"/></return></block></then></if>
  }<pos:position pos:line="100" pos:column="4"/></block></then></if>

  <return pos:line="102" pos:column="3">return <expr><name pos:line="102" pos:column="10">rc<pos:position pos:line="102" pos:column="12"/></name></expr>;<pos:position pos:line="102" pos:column="13"/></return>
}<pos:position pos:line="103" pos:column="2"/></block></function></unit>
