<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_134_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">sockaddr_in<pos:position pos:line="3" pos:column="21"/></name></name></type> <name pos:line="3" pos:column="22">me<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">ENABLE_IPV6<pos:position pos:line="4" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">sockaddr_in6<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">me6<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6" pos:column="8">/* ENABLE_IPV6 */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">sock<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">msgsock<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><name pos:line="8" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="8" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt> <comment type="block" pos:line="8" pos:column="34">/* no stream socket yet */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">flag<pos:position pos:line="9" pos:column="11"/></name></decl>;<pos:position pos:line="9" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">FILE<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">pidfile<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">pidname<pos:position pos:line="11" pos:column="16"/></name><init pos:line="11" pos:column="16">= <expr><operator pos:line="11" pos:column="18">(<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">char<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></operator><operator pos:line="11" pos:column="25">)<pos:position pos:line="11" pos:column="26"/></operator><literal type="string" pos:line="11" pos:column="26">".sockfilt.pid"<pos:position pos:line="11" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">rc<pos:position pos:line="12" pos:column="9"/></name></decl>;<pos:position pos:line="12" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">arg<pos:position pos:line="13" pos:column="10"/></name><init pos:line="13" pos:column="10">=<expr><literal type="number" pos:line="13" pos:column="11">1<pos:position pos:line="13" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">bool<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">ok<pos:position pos:line="14" pos:column="10"/></name> <init pos:line="14" pos:column="11">= <expr><name pos:line="14" pos:column="13">FALSE<pos:position pos:line="14" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">enum<pos:position pos:line="15" pos:column="7"/></name> <name pos:line="15" pos:column="8">sockmode<pos:position pos:line="15" pos:column="16"/></name></name></type> <name pos:line="15" pos:column="17">mode<pos:position pos:line="15" pos:column="21"/></name> <init pos:line="15" pos:column="22">= <expr><name pos:line="15" pos:column="24">PASSIVE_LISTEN<pos:position pos:line="15" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="39"/></decl_stmt> <comment type="block" pos:line="15" pos:column="40">/* default */</comment>

  <while pos:line="17" pos:column="3">while<condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">argc<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">arg<pos:position pos:line="17" pos:column="17"/></name></expr>)<pos:position pos:line="17" pos:column="18"/></condition> <block pos:line="17" pos:column="19">{
    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">(<expr><operator pos:line="18" pos:column="8">!<pos:position pos:line="18" pos:column="9"/></operator><call><name pos:line="18" pos:column="9">strcmp<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="string" pos:line="18" pos:column="16">"--version"<pos:position pos:line="18" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="29">argv<pos:position pos:line="18" pos:column="33"/></name><index pos:line="18" pos:column="33">[<expr><name pos:line="18" pos:column="34">arg<pos:position pos:line="18" pos:column="37"/></name></expr>]<pos:position pos:line="18" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="40"/></condition><then pos:line="18" pos:column="40"> <block pos:line="18" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">printf<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><literal type="string" pos:line="19" pos:column="14">"sockfilt IPv4%s\n"<pos:position pos:line="19" pos:column="33"/></literal></expr></argument>,
<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">ENABLE_IPV6<pos:position pos:line="20" pos:column="19"/></name></cpp:ifdef>
             <argument><expr><literal type="string" pos:line="21" pos:column="14">"/IPv6"<pos:position pos:line="21" pos:column="21"/></literal>
<cpp:else pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">else<pos:position pos:line="22" pos:column="6"/></cpp:directive></cpp:else>
             <literal type="string" pos:line="23" pos:column="14">""<pos:position pos:line="23" pos:column="16"/></literal></expr></argument>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
             )<pos:position pos:line="25" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="16"/></expr_stmt>
      <return pos:line="26" pos:column="7">return <expr><literal type="number" pos:line="26" pos:column="14">0<pos:position pos:line="26" pos:column="15"/></literal></expr>;<pos:position pos:line="26" pos:column="16"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then>
    <elseif pos:line="28" pos:column="5">else <if pos:line="28" pos:column="10">if<condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><call><name pos:line="28" pos:column="14">strcmp<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><literal type="string" pos:line="28" pos:column="21">"--pidfile"<pos:position pos:line="28" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="34">argv<pos:position pos:line="28" pos:column="38"/></name><index pos:line="28" pos:column="38">[<expr><name pos:line="28" pos:column="39">arg<pos:position pos:line="28" pos:column="42"/></name></expr>]<pos:position pos:line="28" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="45"/></condition><then pos:line="28" pos:column="45"> <block pos:line="28" pos:column="46">{
      <expr_stmt><expr><name pos:line="29" pos:column="7">arg<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">++<pos:position pos:line="29" pos:column="12"/></operator></expr>;<pos:position pos:line="29" pos:column="13"/></expr_stmt>
      <if pos:line="30" pos:column="7">if<condition pos:line="30" pos:column="9">(<expr><name pos:line="30" pos:column="10">argc<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">&gt;<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="15">arg<pos:position pos:line="30" pos:column="18"/></name></expr>)<pos:position pos:line="30" pos:column="19"/></condition><then pos:line="30" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="9">pidname<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <name><name pos:line="31" pos:column="19">argv<pos:position pos:line="31" pos:column="23"/></name><index pos:line="31" pos:column="23">[<expr><name pos:line="31" pos:column="24">arg<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">++<pos:position pos:line="31" pos:column="29"/></operator></expr>]<pos:position pos:line="31" pos:column="30"/></index></name></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="33" pos:column="5">else <if pos:line="33" pos:column="10">if<condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><call><name pos:line="33" pos:column="14">strcmp<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><literal type="string" pos:line="33" pos:column="21">"--logfile"<pos:position pos:line="33" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="34">argv<pos:position pos:line="33" pos:column="38"/></name><index pos:line="33" pos:column="38">[<expr><name pos:line="33" pos:column="39">arg<pos:position pos:line="33" pos:column="42"/></name></expr>]<pos:position pos:line="33" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="45"/></condition><then pos:line="33" pos:column="45"> <block pos:line="33" pos:column="46">{
      <expr_stmt><expr><name pos:line="34" pos:column="7">arg<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">++<pos:position pos:line="34" pos:column="12"/></operator></expr>;<pos:position pos:line="34" pos:column="13"/></expr_stmt>
      <if pos:line="35" pos:column="7">if<condition pos:line="35" pos:column="9">(<expr><name pos:line="35" pos:column="10">argc<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">&gt;<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="15">arg<pos:position pos:line="35" pos:column="18"/></name></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="9">serverlogfile<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">=<pos:position pos:line="36" pos:column="24"/></operator> <name><name pos:line="36" pos:column="25">argv<pos:position pos:line="36" pos:column="29"/></name><index pos:line="36" pos:column="29">[<expr><name pos:line="36" pos:column="30">arg<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">++<pos:position pos:line="36" pos:column="35"/></operator></expr>]<pos:position pos:line="36" pos:column="36"/></index></name></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt></block></then></if>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="38" pos:column="5">else <if pos:line="38" pos:column="10">if<condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><call><name pos:line="38" pos:column="14">strcmp<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><literal type="string" pos:line="38" pos:column="21">"--ipv6"<pos:position pos:line="38" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="31">argv<pos:position pos:line="38" pos:column="35"/></name><index pos:line="38" pos:column="35">[<expr><name pos:line="38" pos:column="36">arg<pos:position pos:line="38" pos:column="39"/></name></expr>]<pos:position pos:line="38" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42"> <block pos:line="38" pos:column="43">{
<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef<pos:position pos:line="39" pos:column="7"/></cpp:directive> <name pos:line="39" pos:column="8">ENABLE_IPV6<pos:position pos:line="39" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="40" pos:column="7">use_ipv6<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">=<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="16">TRUE<pos:position pos:line="40" pos:column="20"/></name></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="42" pos:column="7">arg<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">++<pos:position pos:line="42" pos:column="12"/></operator></expr>;<pos:position pos:line="42" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="44" pos:column="5">else <if pos:line="44" pos:column="10">if<condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><call><name pos:line="44" pos:column="14">strcmp<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><literal type="string" pos:line="44" pos:column="21">"--ipv4"<pos:position pos:line="44" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="31">argv<pos:position pos:line="44" pos:column="35"/></name><index pos:line="44" pos:column="35">[<expr><name pos:line="44" pos:column="36">arg<pos:position pos:line="44" pos:column="39"/></name></expr>]<pos:position pos:line="44" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="42"/></condition><then pos:line="44" pos:column="42"> <block pos:line="44" pos:column="43">{
      <comment type="block" pos:line="45" pos:column="7">/* for completeness, we support this option as well */</comment>
      <expr_stmt><expr><name pos:line="46" pos:column="7">use_ipv6<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">=<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="16">FALSE<pos:position pos:line="46" pos:column="21"/></name></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="47" pos:column="7">arg<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">++<pos:position pos:line="47" pos:column="12"/></operator></expr>;<pos:position pos:line="47" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="49" pos:column="5">else <if pos:line="49" pos:column="10">if<condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">!<pos:position pos:line="49" pos:column="14"/></operator><call><name pos:line="49" pos:column="14">strcmp<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><literal type="string" pos:line="49" pos:column="21">"--port"<pos:position pos:line="49" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="31">argv<pos:position pos:line="49" pos:column="35"/></name><index pos:line="49" pos:column="35">[<expr><name pos:line="49" pos:column="36">arg<pos:position pos:line="49" pos:column="39"/></name></expr>]<pos:position pos:line="49" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="42"/></condition><then pos:line="49" pos:column="42"> <block pos:line="49" pos:column="43">{
      <expr_stmt><expr><name pos:line="50" pos:column="7">arg<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">++<pos:position pos:line="50" pos:column="12"/></operator></expr>;<pos:position pos:line="50" pos:column="13"/></expr_stmt>
      <if pos:line="51" pos:column="7">if<condition pos:line="51" pos:column="9">(<expr><name pos:line="51" pos:column="10">argc<pos:position pos:line="51" pos:column="14"/></name><operator pos:line="51" pos:column="14">&gt;<pos:position pos:line="51" pos:column="18"/></operator><name pos:line="51" pos:column="15">arg<pos:position pos:line="51" pos:column="18"/></name></expr>)<pos:position pos:line="51" pos:column="19"/></condition><then pos:line="51" pos:column="19"> <block pos:line="51" pos:column="20">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">port<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">=<pos:position pos:line="52" pos:column="15"/></operator> <operator pos:line="52" pos:column="16">(<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="17">unsigned<pos:position pos:line="52" pos:column="25"/></name> <name pos:line="52" pos:column="26">short<pos:position pos:line="52" pos:column="31"/></name><operator pos:line="52" pos:column="31">)<pos:position pos:line="52" pos:column="32"/></operator><call><name pos:line="52" pos:column="32">atoi<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name><name pos:line="52" pos:column="37">argv<pos:position pos:line="52" pos:column="41"/></name><index pos:line="52" pos:column="41">[<expr><name pos:line="52" pos:column="42">arg<pos:position pos:line="52" pos:column="45"/></name></expr>]<pos:position pos:line="52" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="53" pos:column="9">arg<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">++<pos:position pos:line="53" pos:column="14"/></operator></expr>;<pos:position pos:line="53" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="54" pos:column="8"/></block></then></if>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="56" pos:column="5">else <if pos:line="56" pos:column="10">if<condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">!<pos:position pos:line="56" pos:column="14"/></operator><call><name pos:line="56" pos:column="14">strcmp<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><literal type="string" pos:line="56" pos:column="21">"--connect"<pos:position pos:line="56" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="34">argv<pos:position pos:line="56" pos:column="38"/></name><index pos:line="56" pos:column="38">[<expr><name pos:line="56" pos:column="39">arg<pos:position pos:line="56" pos:column="42"/></name></expr>]<pos:position pos:line="56" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="56" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="45"/></condition><then pos:line="56" pos:column="45"> <block pos:line="56" pos:column="46">{
      <comment type="block" pos:line="57" pos:column="7">/* Asked to actively connect to the specified local port instead of
         doing a passive server-style listening. */</comment>
      <expr_stmt><expr><name pos:line="59" pos:column="7">arg<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">++<pos:position pos:line="59" pos:column="12"/></operator></expr>;<pos:position pos:line="59" pos:column="13"/></expr_stmt>
      <if pos:line="60" pos:column="7">if<condition pos:line="60" pos:column="9">(<expr><name pos:line="60" pos:column="10">argc<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">&gt;<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="15">arg<pos:position pos:line="60" pos:column="18"/></name></expr>)<pos:position pos:line="60" pos:column="19"/></condition><then pos:line="60" pos:column="19"> <block pos:line="60" pos:column="20">{
        <expr_stmt><expr><name pos:line="61" pos:column="9">connectport<pos:position pos:line="61" pos:column="20"/></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <operator pos:line="61" pos:column="23">(<pos:position pos:line="61" pos:column="24"/></operator><name pos:line="61" pos:column="24">unsigned<pos:position pos:line="61" pos:column="32"/></name> <name pos:line="61" pos:column="33">short<pos:position pos:line="61" pos:column="38"/></name><operator pos:line="61" pos:column="38">)<pos:position pos:line="61" pos:column="39"/></operator><call><name pos:line="61" pos:column="39">atoi<pos:position pos:line="61" pos:column="43"/></name><argument_list pos:line="61" pos:column="43">(<argument><expr><name><name pos:line="61" pos:column="44">argv<pos:position pos:line="61" pos:column="48"/></name><index pos:line="61" pos:column="48">[<expr><name pos:line="61" pos:column="49">arg<pos:position pos:line="61" pos:column="52"/></name></expr>]<pos:position pos:line="61" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="61" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name pos:line="62" pos:column="9">arg<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">++<pos:position pos:line="62" pos:column="14"/></operator></expr>;<pos:position pos:line="62" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="63" pos:column="8"/></block></then></if>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if></elseif>
    <else pos:line="65" pos:column="5">else <block pos:line="65" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">puts<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><literal type="string" pos:line="66" pos:column="12">"Usage: sockfilt [option]\n"<pos:position pos:line="66" pos:column="40"/></literal>
           <literal type="string" pos:line="67" pos:column="12">" --version\n"<pos:position pos:line="67" pos:column="26"/></literal>
           <literal type="string" pos:line="68" pos:column="12">" --logfile [file]\n"<pos:position pos:line="68" pos:column="33"/></literal>
           <literal type="string" pos:line="69" pos:column="12">" --pidfile [file]\n"<pos:position pos:line="69" pos:column="33"/></literal>
           <literal type="string" pos:line="70" pos:column="12">" --ipv4\n"<pos:position pos:line="70" pos:column="23"/></literal>
           <literal type="string" pos:line="71" pos:column="12">" --ipv6\n"<pos:position pos:line="71" pos:column="23"/></literal>
           <literal type="string" pos:line="72" pos:column="12">" --port [port]"<pos:position pos:line="72" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="30"/></expr_stmt>
      <return pos:line="73" pos:column="7">return <expr><literal type="number" pos:line="73" pos:column="14">0<pos:position pos:line="73" pos:column="15"/></literal></expr>;<pos:position pos:line="73" pos:column="16"/></return>
    }<pos:position pos:line="74" pos:column="6"/></block></else></if>
  }<pos:position pos:line="75" pos:column="4"/></block></while>

<cpp:if pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">if<pos:position pos:line="77" pos:column="4"/></cpp:directive> <expr><call><name pos:line="77" pos:column="5">defined<pos:position pos:line="77" pos:column="12"/></name><argument_list pos:line="77" pos:column="12">(<argument><expr><name pos:line="77" pos:column="13">WIN32<pos:position pos:line="77" pos:column="18"/></name></expr></argument>)<pos:position pos:line="77" pos:column="19"/></argument_list></call> <operator pos:line="77" pos:column="20">&amp;&amp;<pos:position pos:line="77" pos:column="30"/></operator> <operator pos:line="77" pos:column="23">!<pos:position pos:line="77" pos:column="24"/></operator><call><name pos:line="77" pos:column="24">defined<pos:position pos:line="77" pos:column="31"/></name><argument_list pos:line="77" pos:column="31">(<argument><expr><name pos:line="77" pos:column="32">__GNUC__<pos:position pos:line="77" pos:column="40"/></name></expr></argument>)<pos:position pos:line="77" pos:column="41"/></argument_list></call> <operator pos:line="77" pos:column="42">||<pos:position pos:line="77" pos:column="44"/></operator> <call><name pos:line="77" pos:column="45">defined<pos:position pos:line="77" pos:column="52"/></name><argument_list pos:line="77" pos:column="52">(<argument><expr><name pos:line="77" pos:column="53">__MINGW32__<pos:position pos:line="77" pos:column="64"/></name></expr></argument>)<pos:position pos:line="77" pos:column="65"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="78" pos:column="3">win32_init<pos:position pos:line="78" pos:column="13"/></name><argument_list pos:line="78" pos:column="13">()<pos:position pos:line="78" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="79" pos:column="3">atexit<pos:position pos:line="79" pos:column="9"/></name><argument_list pos:line="79" pos:column="9">(<argument><expr><name pos:line="79" pos:column="10">win32_cleanup<pos:position pos:line="79" pos:column="23"/></name></expr></argument>)<pos:position pos:line="79" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="25"/></expr_stmt>
<cpp:else pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">else<pos:position pos:line="80" pos:column="6"/></cpp:directive></cpp:else>

<cpp:ifdef pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">ifdef<pos:position pos:line="82" pos:column="7"/></cpp:directive> <name pos:line="82" pos:column="8">SIGPIPE<pos:position pos:line="82" pos:column="15"/></name></cpp:ifdef>
<cpp:ifdef pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">ifdef<pos:position pos:line="83" pos:column="7"/></cpp:directive> <name pos:line="83" pos:column="8">HAVE_SIGNAL<pos:position pos:line="83" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="84" pos:column="3">signal<pos:position pos:line="84" pos:column="9"/></name><argument_list pos:line="84" pos:column="9">(<argument><expr><name pos:line="84" pos:column="10">SIGPIPE<pos:position pos:line="84" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="19">sigpipe_handler<pos:position pos:line="84" pos:column="34"/></name></expr></argument>)<pos:position pos:line="84" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif<pos:position pos:line="85" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">ifdef<pos:position pos:line="86" pos:column="7"/></cpp:directive> <name pos:line="86" pos:column="8">HAVE_SIGINTERRUPT<pos:position pos:line="86" pos:column="25"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="87" pos:column="3">siginterrupt<pos:position pos:line="87" pos:column="15"/></name><argument_list pos:line="87" pos:column="15">(<argument><expr><name pos:line="87" pos:column="16">SIGPIPE<pos:position pos:line="87" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="25">1<pos:position pos:line="87" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">endif<pos:position pos:line="90" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">ifdef<pos:position pos:line="92" pos:column="7"/></cpp:directive> <name pos:line="92" pos:column="8">ENABLE_IPV6<pos:position pos:line="92" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="93" pos:column="3">if<condition pos:line="93" pos:column="5">(<expr><operator pos:line="93" pos:column="6">!<pos:position pos:line="93" pos:column="7"/></operator><name pos:line="93" pos:column="7">use_ipv6<pos:position pos:line="93" pos:column="15"/></name></expr>)<pos:position pos:line="93" pos:column="16"/></condition><then pos:line="93" pos:column="16">
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><name pos:line="95" pos:column="5">sock<pos:position pos:line="95" pos:column="9"/></name> <operator pos:line="95" pos:column="10">=<pos:position pos:line="95" pos:column="11"/></operator> <call><name pos:line="95" pos:column="12">socket<pos:position pos:line="95" pos:column="18"/></name><argument_list pos:line="95" pos:column="18">(<argument><expr><name pos:line="95" pos:column="19">AF_INET<pos:position pos:line="95" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="28">SOCK_STREAM<pos:position pos:line="95" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="41">0<pos:position pos:line="95" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="44"/></expr_stmt></block></then>
<cpp:ifdef pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">ifdef<pos:position pos:line="96" pos:column="7"/></cpp:directive> <name pos:line="96" pos:column="8">ENABLE_IPV6<pos:position pos:line="96" pos:column="19"/></name></cpp:ifdef>
  <else pos:line="97" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="98" pos:column="5">sock<pos:position pos:line="98" pos:column="9"/></name> <operator pos:line="98" pos:column="10">=<pos:position pos:line="98" pos:column="11"/></operator> <call><name pos:line="98" pos:column="12">socket<pos:position pos:line="98" pos:column="18"/></name><argument_list pos:line="98" pos:column="18">(<argument><expr><name pos:line="98" pos:column="19">AF_INET6<pos:position pos:line="98" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="29">SOCK_STREAM<pos:position pos:line="98" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="42">0<pos:position pos:line="98" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="45"/></expr_stmt></block></else></if>
<cpp:endif pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">endif<pos:position pos:line="99" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="101" pos:column="3">if <condition pos:line="101" pos:column="6">(<expr><name pos:line="101" pos:column="7">sock<pos:position pos:line="101" pos:column="11"/></name> <operator pos:line="101" pos:column="12">&lt;<pos:position pos:line="101" pos:column="16"/></operator> <literal type="number" pos:line="101" pos:column="14">0<pos:position pos:line="101" pos:column="15"/></literal></expr>)<pos:position pos:line="101" pos:column="16"/></condition><then pos:line="101" pos:column="16"> <block pos:line="101" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">perror<pos:position pos:line="102" pos:column="11"/></name><argument_list pos:line="102" pos:column="11">(<argument><expr><literal type="string" pos:line="102" pos:column="12">"opening stream socket"<pos:position pos:line="102" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">logmsg<pos:position pos:line="103" pos:column="11"/></name><argument_list pos:line="103" pos:column="11">(<argument><expr><literal type="string" pos:line="103" pos:column="12">"Error opening socket"<pos:position pos:line="103" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="36"/></expr_stmt>
    <return pos:line="104" pos:column="5">return <expr><literal type="number" pos:line="104" pos:column="12">1<pos:position pos:line="104" pos:column="13"/></literal></expr>;<pos:position pos:line="104" pos:column="14"/></return>
  }<pos:position pos:line="105" pos:column="4"/></block></then></if>

  <if pos:line="107" pos:column="3">if<condition pos:line="107" pos:column="5">(<expr><name pos:line="107" pos:column="6">connectport<pos:position pos:line="107" pos:column="17"/></name></expr>)<pos:position pos:line="107" pos:column="18"/></condition><then pos:line="107" pos:column="18"> <block pos:line="107" pos:column="19">{
    <comment type="block" pos:line="108" pos:column="5">/* Active mode, we should connect to the given port number */</comment>
    <expr_stmt><expr><name pos:line="109" pos:column="5">mode<pos:position pos:line="109" pos:column="9"/></name> <operator pos:line="109" pos:column="10">=<pos:position pos:line="109" pos:column="11"/></operator> <name pos:line="109" pos:column="12">ACTIVE<pos:position pos:line="109" pos:column="18"/></name></expr>;<pos:position pos:line="109" pos:column="19"/></expr_stmt>
<cpp:ifdef pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">ifdef<pos:position pos:line="110" pos:column="7"/></cpp:directive> <name pos:line="110" pos:column="8">ENABLE_IPV6<pos:position pos:line="110" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="111" pos:column="5">if<condition pos:line="111" pos:column="7">(<expr><operator pos:line="111" pos:column="8">!<pos:position pos:line="111" pos:column="9"/></operator><name pos:line="111" pos:column="9">use_ipv6<pos:position pos:line="111" pos:column="17"/></name></expr>)<pos:position pos:line="111" pos:column="18"/></condition><then pos:line="111" pos:column="18"> <block pos:line="111" pos:column="19">{
<cpp:endif pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">endif<pos:position pos:line="112" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name pos:line="113" pos:column="7">memset<pos:position pos:line="113" pos:column="13"/></name><argument_list pos:line="113" pos:column="13">(<argument><expr><operator pos:line="113" pos:column="14">&amp;<pos:position pos:line="113" pos:column="19"/></operator><name pos:line="113" pos:column="15">me<pos:position pos:line="113" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="113" pos:column="19">0<pos:position pos:line="113" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="113" pos:column="22">sizeof<argument_list pos:line="113" pos:column="28">(<argument><expr><name pos:line="113" pos:column="29">me<pos:position pos:line="113" pos:column="31"/></name></expr></argument>)<pos:position pos:line="113" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="113" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="114" pos:column="7">me<pos:position pos:line="114" pos:column="9"/></name><operator pos:line="114" pos:column="9">.<pos:position pos:line="114" pos:column="10"/></operator><name pos:line="114" pos:column="10">sin_family<pos:position pos:line="114" pos:column="20"/></name></name> <operator pos:line="114" pos:column="21">=<pos:position pos:line="114" pos:column="22"/></operator> <name pos:line="114" pos:column="23">AF_INET<pos:position pos:line="114" pos:column="30"/></name></expr>;<pos:position pos:line="114" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="115" pos:column="7">me<pos:position pos:line="115" pos:column="9"/></name><operator pos:line="115" pos:column="9">.<pos:position pos:line="115" pos:column="10"/></operator><name pos:line="115" pos:column="10">sin_port<pos:position pos:line="115" pos:column="18"/></name></name> <operator pos:line="115" pos:column="19">=<pos:position pos:line="115" pos:column="20"/></operator> <call><name pos:line="115" pos:column="21">htons<pos:position pos:line="115" pos:column="26"/></name><argument_list pos:line="115" pos:column="26">(<argument><expr><name pos:line="115" pos:column="27">connectport<pos:position pos:line="115" pos:column="38"/></name></expr></argument>)<pos:position pos:line="115" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="116" pos:column="7">me<pos:position pos:line="116" pos:column="9"/></name><operator pos:line="116" pos:column="9">.<pos:position pos:line="116" pos:column="10"/></operator><name pos:line="116" pos:column="10">sin_addr<pos:position pos:line="116" pos:column="18"/></name><operator pos:line="116" pos:column="18">.<pos:position pos:line="116" pos:column="19"/></operator><name pos:line="116" pos:column="19">s_addr<pos:position pos:line="116" pos:column="25"/></name></name> <operator pos:line="116" pos:column="26">=<pos:position pos:line="116" pos:column="27"/></operator> <name pos:line="116" pos:column="28">INADDR_ANY<pos:position pos:line="116" pos:column="38"/></name></expr>;<pos:position pos:line="116" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="117" pos:column="7">Curl_inet_pton<pos:position pos:line="117" pos:column="21"/></name><argument_list pos:line="117" pos:column="21">(<argument><expr><name pos:line="117" pos:column="22">AF_INET<pos:position pos:line="117" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="31">"127.0.0.1"<pos:position pos:line="117" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="117" pos:column="44">&amp;<pos:position pos:line="117" pos:column="49"/></operator><name><name pos:line="117" pos:column="45">me<pos:position pos:line="117" pos:column="47"/></name><operator pos:line="117" pos:column="47">.<pos:position pos:line="117" pos:column="48"/></operator><name pos:line="117" pos:column="48">sin_addr<pos:position pos:line="117" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="58"/></expr_stmt>

      <expr_stmt><expr><name pos:line="119" pos:column="7">rc<pos:position pos:line="119" pos:column="9"/></name> <operator pos:line="119" pos:column="10">=<pos:position pos:line="119" pos:column="11"/></operator> <call><name pos:line="119" pos:column="12">connect<pos:position pos:line="119" pos:column="19"/></name><argument_list pos:line="119" pos:column="19">(<argument><expr><name pos:line="119" pos:column="20">sock<pos:position pos:line="119" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="119" pos:column="26">(<pos:position pos:line="119" pos:column="27"/></operator>struct <name pos:line="119" pos:column="34">sockaddr<pos:position pos:line="119" pos:column="42"/></name> <operator pos:line="119" pos:column="43">*<pos:position pos:line="119" pos:column="44"/></operator><operator pos:line="119" pos:column="44">)<pos:position pos:line="119" pos:column="45"/></operator> <operator pos:line="119" pos:column="46">&amp;<pos:position pos:line="119" pos:column="51"/></operator><name pos:line="119" pos:column="47">me<pos:position pos:line="119" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="119" pos:column="51">sizeof<argument_list pos:line="119" pos:column="57">(<argument><expr><name pos:line="119" pos:column="58">me<pos:position pos:line="119" pos:column="60"/></name></expr></argument>)<pos:position pos:line="119" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="119" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="63"/></expr_stmt>
<cpp:ifdef pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">ifdef<pos:position pos:line="120" pos:column="7"/></cpp:directive> <name pos:line="120" pos:column="8">ENABLE_IPV6<pos:position pos:line="120" pos:column="19"/></name></cpp:ifdef>
    }<pos:position pos:line="121" pos:column="6"/></block></then>
    <else pos:line="122" pos:column="5">else <block pos:line="122" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="123" pos:column="7">memset<pos:position pos:line="123" pos:column="13"/></name><argument_list pos:line="123" pos:column="13">(<argument><expr><operator pos:line="123" pos:column="14">&amp;<pos:position pos:line="123" pos:column="19"/></operator><name pos:line="123" pos:column="15">me6<pos:position pos:line="123" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="123" pos:column="20">0<pos:position pos:line="123" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="123" pos:column="23">sizeof<argument_list pos:line="123" pos:column="29">(<argument><expr><name pos:line="123" pos:column="30">me6<pos:position pos:line="123" pos:column="33"/></name></expr></argument>)<pos:position pos:line="123" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="123" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="124" pos:column="7">me6<pos:position pos:line="124" pos:column="10"/></name><operator pos:line="124" pos:column="10">.<pos:position pos:line="124" pos:column="11"/></operator><name pos:line="124" pos:column="11">sin6_family<pos:position pos:line="124" pos:column="22"/></name></name> <operator pos:line="124" pos:column="23">=<pos:position pos:line="124" pos:column="24"/></operator> <name pos:line="124" pos:column="25">AF_INET6<pos:position pos:line="124" pos:column="33"/></name></expr>;<pos:position pos:line="124" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="125" pos:column="7">me6<pos:position pos:line="125" pos:column="10"/></name><operator pos:line="125" pos:column="10">.<pos:position pos:line="125" pos:column="11"/></operator><name pos:line="125" pos:column="11">sin6_port<pos:position pos:line="125" pos:column="20"/></name></name> <operator pos:line="125" pos:column="21">=<pos:position pos:line="125" pos:column="22"/></operator> <call><name pos:line="125" pos:column="23">htons<pos:position pos:line="125" pos:column="28"/></name><argument_list pos:line="125" pos:column="28">(<argument><expr><name pos:line="125" pos:column="29">connectport<pos:position pos:line="125" pos:column="40"/></name></expr></argument>)<pos:position pos:line="125" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="126" pos:column="7">Curl_inet_pton<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><name pos:line="126" pos:column="22">AF_INET6<pos:position pos:line="126" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="32">"::1"<pos:position pos:line="126" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="126" pos:column="39">&amp;<pos:position pos:line="126" pos:column="44"/></operator><name><name pos:line="126" pos:column="40">me6<pos:position pos:line="126" pos:column="43"/></name><operator pos:line="126" pos:column="43">.<pos:position pos:line="126" pos:column="44"/></operator><name pos:line="126" pos:column="44">sin6_addr<pos:position pos:line="126" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="126" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="55"/></expr_stmt>

      <expr_stmt><expr><name pos:line="128" pos:column="7">rc<pos:position pos:line="128" pos:column="9"/></name> <operator pos:line="128" pos:column="10">=<pos:position pos:line="128" pos:column="11"/></operator> <call><name pos:line="128" pos:column="12">connect<pos:position pos:line="128" pos:column="19"/></name><argument_list pos:line="128" pos:column="19">(<argument><expr><name pos:line="128" pos:column="20">sock<pos:position pos:line="128" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="128" pos:column="26">(<pos:position pos:line="128" pos:column="27"/></operator>struct <name pos:line="128" pos:column="34">sockaddr<pos:position pos:line="128" pos:column="42"/></name> <operator pos:line="128" pos:column="43">*<pos:position pos:line="128" pos:column="44"/></operator><operator pos:line="128" pos:column="44">)<pos:position pos:line="128" pos:column="45"/></operator> <operator pos:line="128" pos:column="46">&amp;<pos:position pos:line="128" pos:column="51"/></operator><name pos:line="128" pos:column="47">me6<pos:position pos:line="128" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="128" pos:column="52">sizeof<argument_list pos:line="128" pos:column="58">(<argument><expr><name pos:line="128" pos:column="59">me6<pos:position pos:line="128" pos:column="62"/></name></expr></argument>)<pos:position pos:line="128" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="128" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="129" pos:column="6"/></block></else></if>
<cpp:endif pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">endif<pos:position pos:line="130" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="130" pos:column="8">/* ENABLE_IPV6 */</comment>
    <if pos:line="131" pos:column="5">if<condition pos:line="131" pos:column="7">(<expr><name pos:line="131" pos:column="8">rc<pos:position pos:line="131" pos:column="10"/></name></expr>)<pos:position pos:line="131" pos:column="11"/></condition><then pos:line="131" pos:column="11"> <block pos:line="131" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="132" pos:column="7">perror<pos:position pos:line="132" pos:column="13"/></name><argument_list pos:line="132" pos:column="13">(<argument><expr><literal type="string" pos:line="132" pos:column="14">"connecting stream socket"<pos:position pos:line="132" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="133" pos:column="7">logmsg<pos:position pos:line="133" pos:column="13"/></name><argument_list pos:line="133" pos:column="13">(<argument><expr><literal type="string" pos:line="133" pos:column="14">"Error connecting to port %d"<pos:position pos:line="133" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="45">port<pos:position pos:line="133" pos:column="49"/></name></expr></argument>)<pos:position pos:line="133" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="51"/></expr_stmt>
      <return pos:line="134" pos:column="7">return <expr><literal type="number" pos:line="134" pos:column="14">1<pos:position pos:line="134" pos:column="15"/></literal></expr>;<pos:position pos:line="134" pos:column="16"/></return>
    }<pos:position pos:line="135" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="136" pos:column="5">logmsg<pos:position pos:line="136" pos:column="11"/></name><argument_list pos:line="136" pos:column="11">(<argument><expr><literal type="string" pos:line="136" pos:column="12">"====&gt; Client connect"<pos:position pos:line="136" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="137" pos:column="5">msgsock<pos:position pos:line="137" pos:column="12"/></name> <operator pos:line="137" pos:column="13">=<pos:position pos:line="137" pos:column="14"/></operator> <name pos:line="137" pos:column="15">sock<pos:position pos:line="137" pos:column="19"/></name></expr>;<pos:position pos:line="137" pos:column="20"/></expr_stmt> <comment type="block" pos:line="137" pos:column="21">/* use this as stream */</comment>
  }<pos:position pos:line="138" pos:column="4"/></block></then>
  <else pos:line="139" pos:column="3">else <block pos:line="139" pos:column="8">{
    <comment type="block" pos:line="140" pos:column="5">/* passive daemon style */</comment>

    <expr_stmt><expr><name pos:line="142" pos:column="5">flag<pos:position pos:line="142" pos:column="9"/></name> <operator pos:line="142" pos:column="10">=<pos:position pos:line="142" pos:column="11"/></operator> <literal type="number" pos:line="142" pos:column="12">1<pos:position pos:line="142" pos:column="13"/></literal></expr>;<pos:position pos:line="142" pos:column="14"/></expr_stmt>
    <if pos:line="143" pos:column="5">if <condition pos:line="143" pos:column="8">(<expr><call><name pos:line="143" pos:column="9">setsockopt<pos:position pos:line="143" pos:column="19"/></name>
        <argument_list pos:line="144" pos:column="9">(<argument><expr><name pos:line="144" pos:column="10">sock<pos:position pos:line="144" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="16">SOL_SOCKET<pos:position pos:line="144" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="28">SO_REUSEADDR<pos:position pos:line="144" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="144" pos:column="42">(<pos:position pos:line="144" pos:column="43"/></operator><specifier pos:line="144" pos:column="43">const<pos:position pos:line="144" pos:column="48"/></specifier> <name pos:line="144" pos:column="49">void<pos:position pos:line="144" pos:column="53"/></name> <operator pos:line="144" pos:column="54">*<pos:position pos:line="144" pos:column="55"/></operator><operator pos:line="144" pos:column="55">)<pos:position pos:line="144" pos:column="56"/></operator> <operator pos:line="144" pos:column="57">&amp;<pos:position pos:line="144" pos:column="62"/></operator><name pos:line="144" pos:column="58">flag<pos:position pos:line="144" pos:column="62"/></name></expr></argument>,
         <argument><expr><sizeof pos:line="145" pos:column="10">sizeof<argument_list pos:line="145" pos:column="16">(<argument><expr><name pos:line="145" pos:column="17">int<pos:position pos:line="145" pos:column="20"/></name></expr></argument>)<pos:position pos:line="145" pos:column="21"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="145" pos:column="22"/></argument_list></call> <operator pos:line="145" pos:column="23">&lt;<pos:position pos:line="145" pos:column="27"/></operator> <literal type="number" pos:line="145" pos:column="25">0<pos:position pos:line="145" pos:column="26"/></literal></expr>)<pos:position pos:line="145" pos:column="27"/></condition><then pos:line="145" pos:column="27"> <block pos:line="145" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="146" pos:column="7">perror<pos:position pos:line="146" pos:column="13"/></name><argument_list pos:line="146" pos:column="13">(<argument><expr><literal type="string" pos:line="146" pos:column="14">"setsockopt(SO_REUSEADDR)"<pos:position pos:line="146" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="147" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">ifdef<pos:position pos:line="149" pos:column="7"/></cpp:directive> <name pos:line="149" pos:column="8">ENABLE_IPV6<pos:position pos:line="149" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="150" pos:column="5">if<condition pos:line="150" pos:column="7">(<expr><operator pos:line="150" pos:column="8">!<pos:position pos:line="150" pos:column="9"/></operator><name pos:line="150" pos:column="9">use_ipv6<pos:position pos:line="150" pos:column="17"/></name></expr>)<pos:position pos:line="150" pos:column="18"/></condition><then pos:line="150" pos:column="18"> <block pos:line="150" pos:column="19">{
<cpp:endif pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">endif<pos:position pos:line="151" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name><name pos:line="152" pos:column="7">me<pos:position pos:line="152" pos:column="9"/></name><operator pos:line="152" pos:column="9">.<pos:position pos:line="152" pos:column="10"/></operator><name pos:line="152" pos:column="10">sin_family<pos:position pos:line="152" pos:column="20"/></name></name> <operator pos:line="152" pos:column="21">=<pos:position pos:line="152" pos:column="22"/></operator> <name pos:line="152" pos:column="23">AF_INET<pos:position pos:line="152" pos:column="30"/></name></expr>;<pos:position pos:line="152" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="153" pos:column="7">me<pos:position pos:line="153" pos:column="9"/></name><operator pos:line="153" pos:column="9">.<pos:position pos:line="153" pos:column="10"/></operator><name pos:line="153" pos:column="10">sin_addr<pos:position pos:line="153" pos:column="18"/></name><operator pos:line="153" pos:column="18">.<pos:position pos:line="153" pos:column="19"/></operator><name pos:line="153" pos:column="19">s_addr<pos:position pos:line="153" pos:column="25"/></name></name> <operator pos:line="153" pos:column="26">=<pos:position pos:line="153" pos:column="27"/></operator> <name pos:line="153" pos:column="28">INADDR_ANY<pos:position pos:line="153" pos:column="38"/></name></expr>;<pos:position pos:line="153" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="154" pos:column="7">me<pos:position pos:line="154" pos:column="9"/></name><operator pos:line="154" pos:column="9">.<pos:position pos:line="154" pos:column="10"/></operator><name pos:line="154" pos:column="10">sin_port<pos:position pos:line="154" pos:column="18"/></name></name> <operator pos:line="154" pos:column="19">=<pos:position pos:line="154" pos:column="20"/></operator> <call><name pos:line="154" pos:column="21">htons<pos:position pos:line="154" pos:column="26"/></name><argument_list pos:line="154" pos:column="26">(<argument><expr><name pos:line="154" pos:column="27">port<pos:position pos:line="154" pos:column="31"/></name></expr></argument>)<pos:position pos:line="154" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="155" pos:column="7">rc<pos:position pos:line="155" pos:column="9"/></name> <operator pos:line="155" pos:column="10">=<pos:position pos:line="155" pos:column="11"/></operator> <call><name pos:line="155" pos:column="12">bind<pos:position pos:line="155" pos:column="16"/></name><argument_list pos:line="155" pos:column="16">(<argument><expr><name pos:line="155" pos:column="17">sock<pos:position pos:line="155" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="23">(<pos:position pos:line="155" pos:column="24"/></operator>struct <name pos:line="155" pos:column="31">sockaddr<pos:position pos:line="155" pos:column="39"/></name> <operator pos:line="155" pos:column="40">*<pos:position pos:line="155" pos:column="41"/></operator><operator pos:line="155" pos:column="41">)<pos:position pos:line="155" pos:column="42"/></operator> <operator pos:line="155" pos:column="43">&amp;<pos:position pos:line="155" pos:column="48"/></operator><name pos:line="155" pos:column="44">me<pos:position pos:line="155" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="155" pos:column="48">sizeof<argument_list pos:line="155" pos:column="54">(<argument><expr><name pos:line="155" pos:column="55">me<pos:position pos:line="155" pos:column="57"/></name></expr></argument>)<pos:position pos:line="155" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="155" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="60"/></expr_stmt>
<cpp:ifdef pos:line="156" pos:column="1">#<cpp:directive pos:line="156" pos:column="2">ifdef<pos:position pos:line="156" pos:column="7"/></cpp:directive> <name pos:line="156" pos:column="8">ENABLE_IPV6<pos:position pos:line="156" pos:column="19"/></name></cpp:ifdef>
    }<pos:position pos:line="157" pos:column="6"/></block></then>
    <else pos:line="158" pos:column="5">else <block pos:line="158" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="159" pos:column="7">memset<pos:position pos:line="159" pos:column="13"/></name><argument_list pos:line="159" pos:column="13">(<argument><expr><operator pos:line="159" pos:column="14">&amp;<pos:position pos:line="159" pos:column="19"/></operator><name pos:line="159" pos:column="15">me6<pos:position pos:line="159" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="159" pos:column="20">0<pos:position pos:line="159" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="159" pos:column="23">sizeof<argument_list pos:line="159" pos:column="29">(<argument><expr pos:line="159" pos:column="30">struct <name pos:line="159" pos:column="37">sockaddr_in6<pos:position pos:line="159" pos:column="49"/></name></expr></argument>)<pos:position pos:line="159" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="159" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="160" pos:column="7">me6<pos:position pos:line="160" pos:column="10"/></name><operator pos:line="160" pos:column="10">.<pos:position pos:line="160" pos:column="11"/></operator><name pos:line="160" pos:column="11">sin6_family<pos:position pos:line="160" pos:column="22"/></name></name> <operator pos:line="160" pos:column="23">=<pos:position pos:line="160" pos:column="24"/></operator> <name pos:line="160" pos:column="25">AF_INET6<pos:position pos:line="160" pos:column="33"/></name></expr>;<pos:position pos:line="160" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="161" pos:column="7">me6<pos:position pos:line="161" pos:column="10"/></name><operator pos:line="161" pos:column="10">.<pos:position pos:line="161" pos:column="11"/></operator><name pos:line="161" pos:column="11">sin6_addr<pos:position pos:line="161" pos:column="20"/></name></name> <operator pos:line="161" pos:column="21">=<pos:position pos:line="161" pos:column="22"/></operator> <name pos:line="161" pos:column="23">in6addr_any<pos:position pos:line="161" pos:column="34"/></name></expr>;<pos:position pos:line="161" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="162" pos:column="7">me6<pos:position pos:line="162" pos:column="10"/></name><operator pos:line="162" pos:column="10">.<pos:position pos:line="162" pos:column="11"/></operator><name pos:line="162" pos:column="11">sin6_port<pos:position pos:line="162" pos:column="20"/></name></name> <operator pos:line="162" pos:column="21">=<pos:position pos:line="162" pos:column="22"/></operator> <call><name pos:line="162" pos:column="23">htons<pos:position pos:line="162" pos:column="28"/></name><argument_list pos:line="162" pos:column="28">(<argument><expr><name pos:line="162" pos:column="29">port<pos:position pos:line="162" pos:column="33"/></name></expr></argument>)<pos:position pos:line="162" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="163" pos:column="7">rc<pos:position pos:line="163" pos:column="9"/></name> <operator pos:line="163" pos:column="10">=<pos:position pos:line="163" pos:column="11"/></operator> <call><name pos:line="163" pos:column="12">bind<pos:position pos:line="163" pos:column="16"/></name><argument_list pos:line="163" pos:column="16">(<argument><expr><name pos:line="163" pos:column="17">sock<pos:position pos:line="163" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="163" pos:column="23">(<pos:position pos:line="163" pos:column="24"/></operator>struct <name pos:line="163" pos:column="31">sockaddr<pos:position pos:line="163" pos:column="39"/></name> <operator pos:line="163" pos:column="40">*<pos:position pos:line="163" pos:column="41"/></operator><operator pos:line="163" pos:column="41">)<pos:position pos:line="163" pos:column="42"/></operator> <operator pos:line="163" pos:column="43">&amp;<pos:position pos:line="163" pos:column="48"/></operator><name pos:line="163" pos:column="44">me6<pos:position pos:line="163" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="163" pos:column="49">sizeof<argument_list pos:line="163" pos:column="55">(<argument><expr><name pos:line="163" pos:column="56">me6<pos:position pos:line="163" pos:column="59"/></name></expr></argument>)<pos:position pos:line="163" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="163" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="164" pos:column="6"/></block></else></if>
<cpp:endif pos:line="165" pos:column="1">#<cpp:directive pos:line="165" pos:column="2">endif<pos:position pos:line="165" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="165" pos:column="8">/* ENABLE_IPV6 */</comment>
    <if pos:line="166" pos:column="5">if<condition pos:line="166" pos:column="7">(<expr><name pos:line="166" pos:column="8">rc<pos:position pos:line="166" pos:column="10"/></name> <operator pos:line="166" pos:column="11">&lt;<pos:position pos:line="166" pos:column="15"/></operator> <literal type="number" pos:line="166" pos:column="13">0<pos:position pos:line="166" pos:column="14"/></literal></expr>)<pos:position pos:line="166" pos:column="15"/></condition><then pos:line="166" pos:column="15"> <block pos:line="166" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="167" pos:column="7">perror<pos:position pos:line="167" pos:column="13"/></name><argument_list pos:line="167" pos:column="13">(<argument><expr><literal type="string" pos:line="167" pos:column="14">"binding stream socket"<pos:position pos:line="167" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="167" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="168" pos:column="7">logmsg<pos:position pos:line="168" pos:column="13"/></name><argument_list pos:line="168" pos:column="13">(<argument><expr><literal type="string" pos:line="168" pos:column="14">"Error binding socket"<pos:position pos:line="168" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="168" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="38"/></expr_stmt>
      <return pos:line="169" pos:column="7">return <expr><literal type="number" pos:line="169" pos:column="14">1<pos:position pos:line="169" pos:column="15"/></literal></expr>;<pos:position pos:line="169" pos:column="16"/></return>
    }<pos:position pos:line="170" pos:column="6"/></block></then></if>

    <if pos:line="172" pos:column="5">if<condition pos:line="172" pos:column="7">(<expr><operator pos:line="172" pos:column="8">!<pos:position pos:line="172" pos:column="9"/></operator><name pos:line="172" pos:column="9">port<pos:position pos:line="172" pos:column="13"/></name></expr>)<pos:position pos:line="172" pos:column="14"/></condition><then pos:line="172" pos:column="14"> <block pos:line="172" pos:column="15">{
      <comment type="block" pos:line="173" pos:column="7">/* The system picked a port number, now figure out which port we actually
         got */</comment>
      <comment type="block" pos:line="175" pos:column="7">/* we succeeded to bind */</comment>
      <decl_stmt><decl><type><name><name pos:line="176" pos:column="7">struct<pos:position pos:line="176" pos:column="13"/></name> <name pos:line="176" pos:column="14">sockaddr_in<pos:position pos:line="176" pos:column="25"/></name></name></type> <name pos:line="176" pos:column="26">add<pos:position pos:line="176" pos:column="29"/></name></decl>;<pos:position pos:line="176" pos:column="30"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="177" pos:column="7">socklen_t<pos:position pos:line="177" pos:column="16"/></name></type> <name pos:line="177" pos:column="17">socksize<pos:position pos:line="177" pos:column="25"/></name> <init pos:line="177" pos:column="26">= <expr><sizeof pos:line="177" pos:column="28">sizeof<argument_list pos:line="177" pos:column="34">(<argument><expr><name pos:line="177" pos:column="35">add<pos:position pos:line="177" pos:column="38"/></name></expr></argument>)<pos:position pos:line="177" pos:column="39"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="177" pos:column="40"/></decl_stmt>

      <if pos:line="179" pos:column="7">if<condition pos:line="179" pos:column="9">(<expr><call><name pos:line="179" pos:column="10">getsockname<pos:position pos:line="179" pos:column="21"/></name><argument_list pos:line="179" pos:column="21">(<argument><expr><name pos:line="179" pos:column="22">sock<pos:position pos:line="179" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="179" pos:column="28">(<pos:position pos:line="179" pos:column="29"/></operator>struct <name pos:line="179" pos:column="36">sockaddr<pos:position pos:line="179" pos:column="44"/></name> <operator pos:line="179" pos:column="45">*<pos:position pos:line="179" pos:column="46"/></operator><operator pos:line="179" pos:column="46">)<pos:position pos:line="179" pos:column="47"/></operator> <operator pos:line="179" pos:column="48">&amp;<pos:position pos:line="179" pos:column="53"/></operator><name pos:line="179" pos:column="49">add<pos:position pos:line="179" pos:column="52"/></name></expr></argument>,
                     <argument><expr><operator pos:line="180" pos:column="22">&amp;<pos:position pos:line="180" pos:column="27"/></operator><name pos:line="180" pos:column="23">socksize<pos:position pos:line="180" pos:column="31"/></name></expr></argument>)<pos:position pos:line="180" pos:column="32"/></argument_list></call><operator pos:line="180" pos:column="32">&lt;<pos:position pos:line="180" pos:column="36"/></operator><literal type="number" pos:line="180" pos:column="33">0<pos:position pos:line="180" pos:column="34"/></literal></expr>)<pos:position pos:line="180" pos:column="35"/></condition><then pos:line="180" pos:column="35"> <block pos:line="180" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="181" pos:column="9">fprintf<pos:position pos:line="181" pos:column="16"/></name><argument_list pos:line="181" pos:column="16">(<argument><expr><name pos:line="181" pos:column="17">stderr<pos:position pos:line="181" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="181" pos:column="25">"getsockname() failed"<pos:position pos:line="181" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="49"/></expr_stmt>
        <return pos:line="182" pos:column="9">return <expr><literal type="number" pos:line="182" pos:column="16">1<pos:position pos:line="182" pos:column="17"/></literal></expr>;<pos:position pos:line="182" pos:column="18"/></return>
      }<pos:position pos:line="183" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="184" pos:column="7">port<pos:position pos:line="184" pos:column="11"/></name> <operator pos:line="184" pos:column="12">=<pos:position pos:line="184" pos:column="13"/></operator> <call><name pos:line="184" pos:column="14">ntohs<pos:position pos:line="184" pos:column="19"/></name><argument_list pos:line="184" pos:column="19">(<argument><expr><name><name pos:line="184" pos:column="20">add<pos:position pos:line="184" pos:column="23"/></name><operator pos:line="184" pos:column="23">.<pos:position pos:line="184" pos:column="24"/></operator><name pos:line="184" pos:column="24">sin_port<pos:position pos:line="184" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="184" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="185" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="187" pos:column="5">/* start accepting connections */</comment>
    <expr_stmt><expr><call><name pos:line="188" pos:column="5">listen<pos:position pos:line="188" pos:column="11"/></name><argument_list pos:line="188" pos:column="11">(<argument><expr><name pos:line="188" pos:column="12">sock<pos:position pos:line="188" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="188" pos:column="18">1<pos:position pos:line="188" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="188" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="21"/></expr_stmt>

  }<pos:position pos:line="190" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="192" pos:column="3">logmsg<pos:position pos:line="192" pos:column="9"/></name><argument_list pos:line="192" pos:column="9">(<argument><expr><literal type="string" pos:line="192" pos:column="10">"Running IPv%d version"<pos:position pos:line="192" pos:column="33"/></literal></expr></argument>,
         <argument><expr><operator pos:line="193" pos:column="10">(<pos:position pos:line="193" pos:column="11"/></operator><ternary><condition><expr><name pos:line="193" pos:column="11">use_ipv6<pos:position pos:line="193" pos:column="19"/></name></expr>?<pos:position pos:line="193" pos:column="20"/></condition><then><expr><literal type="number" pos:line="193" pos:column="20">6<pos:position pos:line="193" pos:column="21"/></literal></expr></then><else pos:line="193" pos:column="21">:<expr><literal type="number" pos:line="193" pos:column="22">4<pos:position pos:line="193" pos:column="23"/></literal></expr></else></ternary><operator pos:line="193" pos:column="23">)<pos:position pos:line="193" pos:column="24"/></operator></expr></argument>)<pos:position pos:line="193" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="26"/></expr_stmt>

  <if pos:line="195" pos:column="3">if<condition pos:line="195" pos:column="5">(<expr><name pos:line="195" pos:column="6">connectport<pos:position pos:line="195" pos:column="17"/></name></expr>)<pos:position pos:line="195" pos:column="18"/></condition><then pos:line="195" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="196" pos:column="5">logmsg<pos:position pos:line="196" pos:column="11"/></name><argument_list pos:line="196" pos:column="11">(<argument><expr><literal type="string" pos:line="196" pos:column="12">"Connected to port %d"<pos:position pos:line="196" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="196" pos:column="36">connectport<pos:position pos:line="196" pos:column="47"/></name></expr></argument>)<pos:position pos:line="196" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="49"/></expr_stmt></block></then>
  <else pos:line="197" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="198" pos:column="5">logmsg<pos:position pos:line="198" pos:column="11"/></name><argument_list pos:line="198" pos:column="11">(<argument><expr><literal type="string" pos:line="198" pos:column="12">"Listening on port %d"<pos:position pos:line="198" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="36">port<pos:position pos:line="198" pos:column="40"/></name></expr></argument>)<pos:position pos:line="198" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="42"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="200" pos:column="3">pidfile<pos:position pos:line="200" pos:column="10"/></name> <operator pos:line="200" pos:column="11">=<pos:position pos:line="200" pos:column="12"/></operator> <call><name pos:line="200" pos:column="13">fopen<pos:position pos:line="200" pos:column="18"/></name><argument_list pos:line="200" pos:column="18">(<argument><expr><name pos:line="200" pos:column="19">pidname<pos:position pos:line="200" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="200" pos:column="28">"w"<pos:position pos:line="200" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="200" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="33"/></expr_stmt>
  <if pos:line="201" pos:column="3">if<condition pos:line="201" pos:column="5">(<expr><name pos:line="201" pos:column="6">pidfile<pos:position pos:line="201" pos:column="13"/></name></expr>)<pos:position pos:line="201" pos:column="14"/></condition><then pos:line="201" pos:column="14"> <block pos:line="201" pos:column="15">{
    <decl_stmt><decl><type><name pos:line="202" pos:column="5">int<pos:position pos:line="202" pos:column="8"/></name></type> <name pos:line="202" pos:column="9">pid<pos:position pos:line="202" pos:column="12"/></name> <init pos:line="202" pos:column="13">= <expr><operator pos:line="202" pos:column="15">(<pos:position pos:line="202" pos:column="16"/></operator><name pos:line="202" pos:column="16">int<pos:position pos:line="202" pos:column="19"/></name><operator pos:line="202" pos:column="19">)<pos:position pos:line="202" pos:column="20"/></operator><call><name pos:line="202" pos:column="20">getpid<pos:position pos:line="202" pos:column="26"/></name><argument_list pos:line="202" pos:column="26">()<pos:position pos:line="202" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="202" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="203" pos:column="5">fprintf<pos:position pos:line="203" pos:column="12"/></name><argument_list pos:line="203" pos:column="12">(<argument><expr><name pos:line="203" pos:column="13">pidfile<pos:position pos:line="203" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="203" pos:column="22">"%d\n"<pos:position pos:line="203" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="203" pos:column="30">pid<pos:position pos:line="203" pos:column="33"/></name></expr></argument>)<pos:position pos:line="203" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="204" pos:column="5">fclose<pos:position pos:line="204" pos:column="11"/></name><argument_list pos:line="204" pos:column="11">(<argument><expr><name pos:line="204" pos:column="12">pidfile<pos:position pos:line="204" pos:column="19"/></name></expr></argument>)<pos:position pos:line="204" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="205" pos:column="5">logmsg<pos:position pos:line="205" pos:column="11"/></name><argument_list pos:line="205" pos:column="11">(<argument><expr><literal type="string" pos:line="205" pos:column="12">"Wrote pid %d to %s"<pos:position pos:line="205" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="205" pos:column="34">pid<pos:position pos:line="205" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="205" pos:column="39">pidname<pos:position pos:line="205" pos:column="46"/></name></expr></argument>)<pos:position pos:line="205" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="206" pos:column="4"/></block></then>
  <else pos:line="207" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="208" pos:column="5">fprintf<pos:position pos:line="208" pos:column="12"/></name><argument_list pos:line="208" pos:column="12">(<argument><expr><name pos:line="208" pos:column="13">stderr<pos:position pos:line="208" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="208" pos:column="21">"Couldn't write pid file\n"<pos:position pos:line="208" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="50"/></expr_stmt></block></else></if>

  <do pos:line="210" pos:column="3">do <block pos:line="210" pos:column="6">{
    <expr_stmt><expr><name pos:line="211" pos:column="5">ok<pos:position pos:line="211" pos:column="7"/></name> <operator pos:line="211" pos:column="8">=<pos:position pos:line="211" pos:column="9"/></operator> <call><name pos:line="211" pos:column="10">juggle<pos:position pos:line="211" pos:column="16"/></name><argument_list pos:line="211" pos:column="16">(<argument><expr><operator pos:line="211" pos:column="17">&amp;<pos:position pos:line="211" pos:column="22"/></operator><name pos:line="211" pos:column="18">msgsock<pos:position pos:line="211" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="211" pos:column="27">sock<pos:position pos:line="211" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="211" pos:column="33">&amp;<pos:position pos:line="211" pos:column="38"/></operator><name pos:line="211" pos:column="34">mode<pos:position pos:line="211" pos:column="38"/></name></expr></argument>)<pos:position pos:line="211" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="212" pos:column="4"/></block> while<condition pos:line="212" pos:column="10">(<expr><name pos:line="212" pos:column="11">ok<pos:position pos:line="212" pos:column="13"/></name></expr>)<pos:position pos:line="212" pos:column="14"/></condition>;<pos:position pos:line="212" pos:column="15"/></do>

  <expr_stmt><expr><call><name pos:line="214" pos:column="3">sclose<pos:position pos:line="214" pos:column="9"/></name><argument_list pos:line="214" pos:column="9">(<argument><expr><name pos:line="214" pos:column="10">sock<pos:position pos:line="214" pos:column="14"/></name></expr></argument>)<pos:position pos:line="214" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="16"/></expr_stmt>

  <return pos:line="216" pos:column="3">return <expr><literal type="number" pos:line="216" pos:column="10">0<pos:position pos:line="216" pos:column="11"/></literal></expr>;<pos:position pos:line="216" pos:column="12"/></return>
}<pos:position pos:line="217" pos:column="2"/></block></function></unit>
