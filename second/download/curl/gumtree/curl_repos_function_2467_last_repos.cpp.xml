<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2467_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type>
<name pos:line="2" pos:column="1">schannel_recv<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name><name pos:line="2" pos:column="15">struct<pos:position pos:line="2" pos:column="21"/></name> <name pos:line="2" pos:column="22">connectdata<pos:position pos:line="2" pos:column="33"/></name></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">conn<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">sockindex<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">buf<pos:position pos:line="3" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="26">size_t<pos:position pos:line="3" pos:column="32"/></name></type> <name pos:line="3" pos:column="33">len<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="38">CURLcode<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">err<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="52"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">size<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><literal type="number" pos:line="5" pos:column="17">0<pos:position pos:line="5" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">ssize_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">nread<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><operator pos:line="6" pos:column="19">-<pos:position pos:line="6" pos:column="20"/></operator><literal type="number" pos:line="6" pos:column="20">1<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_easy<pos:position pos:line="7" pos:column="19"/></name></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">data<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name><name pos:line="7" pos:column="28">conn<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">data<pos:position pos:line="7" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">ssl_connect_data<pos:position pos:line="8" pos:column="26"/></name></name> <modifier pos:line="8" pos:column="27">*<pos:position pos:line="8" pos:column="28"/></modifier></type><name pos:line="8" pos:column="28">connssl<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name><name pos:line="8" pos:column="39">conn<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">ssl<pos:position pos:line="8" pos:column="48"/></name><index pos:line="8" pos:column="48">[<expr><name pos:line="8" pos:column="49">sockindex<pos:position pos:line="8" pos:column="58"/></name></expr>]<pos:position pos:line="8" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">unsigned<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">char<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">reallocated_buffer<pos:position pos:line="9" pos:column="36"/></name></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">reallocated_length<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">bool<pos:position pos:line="11" pos:column="7"/></name></type> <name pos:line="11" pos:column="8">done<pos:position pos:line="11" pos:column="12"/></name> <init pos:line="11" pos:column="13">= <expr><name pos:line="11" pos:column="15">FALSE<pos:position pos:line="11" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">SecBuffer<pos:position pos:line="12" pos:column="12"/></name></type> <name><name pos:line="12" pos:column="13">inbuf<pos:position pos:line="12" pos:column="18"/></name><index pos:line="12" pos:column="18">[<expr><literal type="number" pos:line="12" pos:column="19">4<pos:position pos:line="12" pos:column="20"/></literal></expr>]<pos:position pos:line="12" pos:column="21"/></index></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">SecBufferDesc<pos:position pos:line="13" pos:column="16"/></name></type> <name pos:line="13" pos:column="17">inbuf_desc<pos:position pos:line="13" pos:column="27"/></name></decl>;<pos:position pos:line="13" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">SECURITY_STATUS<pos:position pos:line="14" pos:column="18"/></name></type> <name pos:line="14" pos:column="19">sspi_status<pos:position pos:line="14" pos:column="30"/></name> <init pos:line="14" pos:column="31">= <expr><name pos:line="14" pos:column="33">SEC_E_OK<pos:position pos:line="14" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="42"/></decl_stmt>
  <comment type="block" pos:line="15" pos:column="3">/* we want the length of the encrypted buffer to be at least large enough
     that it can hold all the bytes requested and some TLS record overhead. */</comment>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">size_t<pos:position pos:line="17" pos:column="9"/></name></type> <name pos:line="17" pos:column="10">min_encdata_length<pos:position pos:line="17" pos:column="28"/></name> <init pos:line="17" pos:column="29">= <expr><name pos:line="17" pos:column="31">len<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">+<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="37">CURL_SCHANNEL_BUFFER_FREE_SIZE<pos:position pos:line="17" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="68"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="19" pos:column="3">/****************************************************************************
   * Don't return or set BACKEND-&gt;recv_unrecoverable_err unless in the cleanup.
   * The pattern for return error is set *err, optional infof, goto cleanup.
   *
   * Our priority is to always return as much decrypted data to the caller as
   * possible, even if an error occurs. The state of the decrypted buffer must
   * always be valid. Transfer of decrypted data to the caller's buffer is
   * handled in the cleanup.
   */</comment>

  <expr_stmt><expr><call><name pos:line="29" pos:column="3">infof<pos:position pos:line="29" pos:column="8"/></name><argument_list pos:line="29" pos:column="8">(<argument><expr><name pos:line="29" pos:column="9">data<pos:position pos:line="29" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="15">"schannel: client wants to read %zu bytes\n"<pos:position pos:line="29" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="61">len<pos:position pos:line="29" pos:column="64"/></name></expr></argument>)<pos:position pos:line="29" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="66"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="30" pos:column="3">*<pos:position pos:line="30" pos:column="4"/></operator><name pos:line="30" pos:column="4">err<pos:position pos:line="30" pos:column="7"/></name> <operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator> <name pos:line="30" pos:column="10">CURLE_OK<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>

  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><name pos:line="32" pos:column="6">len<pos:position pos:line="32" pos:column="9"/></name> <operator pos:line="32" pos:column="10">&amp;&amp;<pos:position pos:line="32" pos:column="20"/></operator> <name pos:line="32" pos:column="13">len<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">&lt;=<pos:position pos:line="32" pos:column="22"/></operator> <name><name pos:line="32" pos:column="20">BACKEND<pos:position pos:line="32" pos:column="27"/></name><operator pos:line="32" pos:column="27">-&gt;<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="29">decdata_offset<pos:position pos:line="32" pos:column="43"/></name></name></expr>)<pos:position pos:line="32" pos:column="44"/></condition><then pos:line="32" pos:column="44"> <block pos:line="32" pos:column="45">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">infof<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><name pos:line="33" pos:column="11">data<pos:position pos:line="33" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="17">"schannel: enough decrypted data is already available\n"<pos:position pos:line="33" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="75"/></expr_stmt>
    <goto pos:line="34" pos:column="5">goto <name pos:line="34" pos:column="10">cleanup<pos:position pos:line="34" pos:column="17"/></name>;<pos:position pos:line="34" pos:column="18"/></goto>
  }<pos:position pos:line="35" pos:column="4"/></block></then>
  <elseif pos:line="36" pos:column="3">else <if pos:line="36" pos:column="8">if<condition pos:line="36" pos:column="10">(<expr><name><name pos:line="36" pos:column="11">BACKEND<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">-&gt;<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="20">recv_unrecoverable_err<pos:position pos:line="36" pos:column="42"/></name></name></expr>)<pos:position pos:line="36" pos:column="43"/></condition><then pos:line="36" pos:column="43"> <block pos:line="36" pos:column="44">{
    <expr_stmt><expr><operator pos:line="37" pos:column="5">*<pos:position pos:line="37" pos:column="6"/></operator><name pos:line="37" pos:column="6">err<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator> <name><name pos:line="37" pos:column="12">BACKEND<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">-&gt;<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="21">recv_unrecoverable_err<pos:position pos:line="37" pos:column="43"/></name></name></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">infof<pos:position pos:line="38" pos:column="10"/></name><argument_list pos:line="38" pos:column="10">(<argument><expr><name pos:line="38" pos:column="11">data<pos:position pos:line="38" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="17">"schannel: an unrecoverable error occurred in a prior call\n"<pos:position pos:line="38" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="80"/></expr_stmt>
    <goto pos:line="39" pos:column="5">goto <name pos:line="39" pos:column="10">cleanup<pos:position pos:line="39" pos:column="17"/></name>;<pos:position pos:line="39" pos:column="18"/></goto>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="41" pos:column="3">else <if pos:line="41" pos:column="8">if<condition pos:line="41" pos:column="10">(<expr><name><name pos:line="41" pos:column="11">BACKEND<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">-&gt;<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="20">recv_sspi_close_notify<pos:position pos:line="41" pos:column="42"/></name></name></expr>)<pos:position pos:line="41" pos:column="43"/></condition><then pos:line="41" pos:column="43"> <block pos:line="41" pos:column="44">{
    <comment type="block" pos:line="42" pos:column="5">/* once a server has indicated shutdown there is no more encrypted data */</comment>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">infof<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><name pos:line="43" pos:column="11">data<pos:position pos:line="43" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="17">"schannel: server indicated shutdown in a prior call\n"<pos:position pos:line="43" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="74"/></expr_stmt>
    <goto pos:line="44" pos:column="5">goto <name pos:line="44" pos:column="10">cleanup<pos:position pos:line="44" pos:column="17"/></name>;<pos:position pos:line="44" pos:column="18"/></goto>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="46" pos:column="3">else <if pos:line="46" pos:column="8">if<condition pos:line="46" pos:column="10">(<expr><operator pos:line="46" pos:column="11">!<pos:position pos:line="46" pos:column="12"/></operator><name pos:line="46" pos:column="12">len<pos:position pos:line="46" pos:column="15"/></name></expr>)<pos:position pos:line="46" pos:column="16"/></condition><then pos:line="46" pos:column="16"> <block pos:line="46" pos:column="17">{
    <comment type="block" pos:line="47" pos:column="5">/* It's debatable what to return when !len. Regardless we can't return
    immediately because there may be data to decrypt (in the case we want to
    decrypt all encrypted cached data) so handle !len later in cleanup.
    */</comment>
    <empty_stmt pos:line="51" pos:column="5">;<pos:position pos:line="51" pos:column="6"/></empty_stmt> <comment type="block" pos:line="51" pos:column="7">/* do nothing */</comment>
  }<pos:position pos:line="52" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="53" pos:column="3">else <if pos:line="53" pos:column="8">if<condition pos:line="53" pos:column="10">(<expr><operator pos:line="53" pos:column="11">!<pos:position pos:line="53" pos:column="12"/></operator><name><name pos:line="53" pos:column="12">BACKEND<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">recv_connection_closed<pos:position pos:line="53" pos:column="43"/></name></name></expr>)<pos:position pos:line="53" pos:column="44"/></condition><then pos:line="53" pos:column="44"> <block pos:line="53" pos:column="45">{
    <comment type="block" pos:line="54" pos:column="5">/* increase enc buffer in order to fit the requested amount of data */</comment>
    <expr_stmt><expr><name pos:line="55" pos:column="5">size<pos:position pos:line="55" pos:column="9"/></name> <operator pos:line="55" pos:column="10">=<pos:position pos:line="55" pos:column="11"/></operator> <name><name pos:line="55" pos:column="12">BACKEND<pos:position pos:line="55" pos:column="19"/></name><operator pos:line="55" pos:column="19">-&gt;<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="21">encdata_length<pos:position pos:line="55" pos:column="35"/></name></name> <operator pos:line="55" pos:column="36">-<pos:position pos:line="55" pos:column="37"/></operator> <name><name pos:line="55" pos:column="38">BACKEND<pos:position pos:line="55" pos:column="45"/></name><operator pos:line="55" pos:column="45">-&gt;<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="47">encdata_offset<pos:position pos:line="55" pos:column="61"/></name></name></expr>;<pos:position pos:line="55" pos:column="62"/></expr_stmt>
    <if pos:line="56" pos:column="5">if<condition pos:line="56" pos:column="7">(<expr><name pos:line="56" pos:column="8">size<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">&lt;<pos:position pos:line="56" pos:column="17"/></operator> <name pos:line="56" pos:column="15">CURL_SCHANNEL_BUFFER_FREE_SIZE<pos:position pos:line="56" pos:column="45"/></name> <operator pos:line="56" pos:column="46">||<pos:position pos:line="56" pos:column="48"/></operator>
       <name><name pos:line="57" pos:column="8">BACKEND<pos:position pos:line="57" pos:column="15"/></name><operator pos:line="57" pos:column="15">-&gt;<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="17">encdata_length<pos:position pos:line="57" pos:column="31"/></name></name> <operator pos:line="57" pos:column="32">&lt;<pos:position pos:line="57" pos:column="36"/></operator> <name pos:line="57" pos:column="34">min_encdata_length<pos:position pos:line="57" pos:column="52"/></name></expr>)<pos:position pos:line="57" pos:column="53"/></condition><then pos:line="57" pos:column="53"> <block pos:line="57" pos:column="54">{
      <expr_stmt><expr><name pos:line="58" pos:column="7">reallocated_length<pos:position pos:line="58" pos:column="25"/></name> <operator pos:line="58" pos:column="26">=<pos:position pos:line="58" pos:column="27"/></operator> <name><name pos:line="58" pos:column="28">BACKEND<pos:position pos:line="58" pos:column="35"/></name><operator pos:line="58" pos:column="35">-&gt;<pos:position pos:line="58" pos:column="40"/></operator><name pos:line="58" pos:column="37">encdata_offset<pos:position pos:line="58" pos:column="51"/></name></name> <operator pos:line="58" pos:column="52">+<pos:position pos:line="58" pos:column="53"/></operator>
                           <name pos:line="59" pos:column="28">CURL_SCHANNEL_BUFFER_FREE_SIZE<pos:position pos:line="59" pos:column="58"/></name></expr>;<pos:position pos:line="59" pos:column="59"/></expr_stmt>
      <if pos:line="60" pos:column="7">if<condition pos:line="60" pos:column="9">(<expr><name pos:line="60" pos:column="10">reallocated_length<pos:position pos:line="60" pos:column="28"/></name> <operator pos:line="60" pos:column="29">&lt;<pos:position pos:line="60" pos:column="33"/></operator> <name pos:line="60" pos:column="31">min_encdata_length<pos:position pos:line="60" pos:column="49"/></name></expr>)<pos:position pos:line="60" pos:column="50"/></condition><then pos:line="60" pos:column="50"> <block pos:line="60" pos:column="51">{
        <expr_stmt><expr><name pos:line="61" pos:column="9">reallocated_length<pos:position pos:line="61" pos:column="27"/></name> <operator pos:line="61" pos:column="28">=<pos:position pos:line="61" pos:column="29"/></operator> <name pos:line="61" pos:column="30">min_encdata_length<pos:position pos:line="61" pos:column="48"/></name></expr>;<pos:position pos:line="61" pos:column="49"/></expr_stmt>
      }<pos:position pos:line="62" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="63" pos:column="7">reallocated_buffer<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">=<pos:position pos:line="63" pos:column="27"/></operator> <call><name pos:line="63" pos:column="28">realloc<pos:position pos:line="63" pos:column="35"/></name><argument_list pos:line="63" pos:column="35">(<argument><expr><name><name pos:line="63" pos:column="36">BACKEND<pos:position pos:line="63" pos:column="43"/></name><operator pos:line="63" pos:column="43">-&gt;<pos:position pos:line="63" pos:column="48"/></operator><name pos:line="63" pos:column="45">encdata_buffer<pos:position pos:line="63" pos:column="59"/></name></name></expr></argument>,
                                   <argument><expr><name pos:line="64" pos:column="36">reallocated_length<pos:position pos:line="64" pos:column="54"/></name></expr></argument>)<pos:position pos:line="64" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="56"/></expr_stmt>
      <if pos:line="65" pos:column="7">if<condition pos:line="65" pos:column="9">(<expr><name pos:line="65" pos:column="10">reallocated_buffer<pos:position pos:line="65" pos:column="28"/></name> <operator pos:line="65" pos:column="29">==<pos:position pos:line="65" pos:column="31"/></operator> <name pos:line="65" pos:column="32">NULL<pos:position pos:line="65" pos:column="36"/></name></expr>)<pos:position pos:line="65" pos:column="37"/></condition><then pos:line="65" pos:column="37"> <block pos:line="65" pos:column="38">{
        <expr_stmt><expr><operator pos:line="66" pos:column="9">*<pos:position pos:line="66" pos:column="10"/></operator><name pos:line="66" pos:column="10">err<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <name pos:line="66" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="66" pos:column="35"/></name></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">failf<pos:position pos:line="67" pos:column="14"/></name><argument_list pos:line="67" pos:column="14">(<argument><expr><name pos:line="67" pos:column="15">data<pos:position pos:line="67" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="21">"schannel: unable to re-allocate memory"<pos:position pos:line="67" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="63"/></expr_stmt>
        <goto pos:line="68" pos:column="9">goto <name pos:line="68" pos:column="14">cleanup<pos:position pos:line="68" pos:column="21"/></name>;<pos:position pos:line="68" pos:column="22"/></goto>
      }<pos:position pos:line="69" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="71" pos:column="7">BACKEND<pos:position pos:line="71" pos:column="14"/></name><operator pos:line="71" pos:column="14">-&gt;<pos:position pos:line="71" pos:column="19"/></operator><name pos:line="71" pos:column="16">encdata_buffer<pos:position pos:line="71" pos:column="30"/></name></name> <operator pos:line="71" pos:column="31">=<pos:position pos:line="71" pos:column="32"/></operator> <name pos:line="71" pos:column="33">reallocated_buffer<pos:position pos:line="71" pos:column="51"/></name></expr>;<pos:position pos:line="71" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="72" pos:column="7">BACKEND<pos:position pos:line="72" pos:column="14"/></name><operator pos:line="72" pos:column="14">-&gt;<pos:position pos:line="72" pos:column="19"/></operator><name pos:line="72" pos:column="16">encdata_length<pos:position pos:line="72" pos:column="30"/></name></name> <operator pos:line="72" pos:column="31">=<pos:position pos:line="72" pos:column="32"/></operator> <name pos:line="72" pos:column="33">reallocated_length<pos:position pos:line="72" pos:column="51"/></name></expr>;<pos:position pos:line="72" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name pos:line="73" pos:column="7">size<pos:position pos:line="73" pos:column="11"/></name> <operator pos:line="73" pos:column="12">=<pos:position pos:line="73" pos:column="13"/></operator> <name><name pos:line="73" pos:column="14">BACKEND<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">-&gt;<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="23">encdata_length<pos:position pos:line="73" pos:column="37"/></name></name> <operator pos:line="73" pos:column="38">-<pos:position pos:line="73" pos:column="39"/></operator> <name><name pos:line="73" pos:column="40">BACKEND<pos:position pos:line="73" pos:column="47"/></name><operator pos:line="73" pos:column="47">-&gt;<pos:position pos:line="73" pos:column="52"/></operator><name pos:line="73" pos:column="49">encdata_offset<pos:position pos:line="73" pos:column="63"/></name></name></expr>;<pos:position pos:line="73" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="74" pos:column="7">infof<pos:position pos:line="74" pos:column="12"/></name><argument_list pos:line="74" pos:column="12">(<argument><expr><name pos:line="74" pos:column="13">data<pos:position pos:line="74" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="19">"schannel: encdata_buffer resized %zu\n"<pos:position pos:line="74" pos:column="59"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="75" pos:column="13">BACKEND<pos:position pos:line="75" pos:column="20"/></name><operator pos:line="75" pos:column="20">-&gt;<pos:position pos:line="75" pos:column="25"/></operator><name pos:line="75" pos:column="22">encdata_length<pos:position pos:line="75" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="78" pos:column="5">infof<pos:position pos:line="78" pos:column="10"/></name><argument_list pos:line="78" pos:column="10">(<argument><expr><name pos:line="78" pos:column="11">data<pos:position pos:line="78" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="17">"schannel: encrypted data buffer: offset %zu length %zu\n"<pos:position pos:line="78" pos:column="75"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="79" pos:column="11">BACKEND<pos:position pos:line="79" pos:column="18"/></name><operator pos:line="79" pos:column="18">-&gt;<pos:position pos:line="79" pos:column="23"/></operator><name pos:line="79" pos:column="20">encdata_offset<pos:position pos:line="79" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="36">BACKEND<pos:position pos:line="79" pos:column="43"/></name><operator pos:line="79" pos:column="43">-&gt;<pos:position pos:line="79" pos:column="48"/></operator><name pos:line="79" pos:column="45">encdata_length<pos:position pos:line="79" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="81" pos:column="5">/* read encrypted data from socket */</comment>
    <expr_stmt><expr><operator pos:line="82" pos:column="5">*<pos:position pos:line="82" pos:column="6"/></operator><name pos:line="82" pos:column="6">err<pos:position pos:line="82" pos:column="9"/></name> <operator pos:line="82" pos:column="10">=<pos:position pos:line="82" pos:column="11"/></operator> <call><name pos:line="82" pos:column="12">Curl_read_plain<pos:position pos:line="82" pos:column="27"/></name><argument_list pos:line="82" pos:column="27">(<argument><expr><name><name pos:line="82" pos:column="28">conn<pos:position pos:line="82" pos:column="32"/></name><operator pos:line="82" pos:column="32">-&gt;<pos:position pos:line="82" pos:column="37"/></operator><name pos:line="82" pos:column="34">sock<pos:position pos:line="82" pos:column="38"/></name><index pos:line="82" pos:column="38">[<expr><name pos:line="82" pos:column="39">sockindex<pos:position pos:line="82" pos:column="48"/></name></expr>]<pos:position pos:line="82" pos:column="49"/></index></name></expr></argument>,
                           <argument><expr><operator pos:line="83" pos:column="28">(<pos:position pos:line="83" pos:column="29"/></operator><name pos:line="83" pos:column="29">char<pos:position pos:line="83" pos:column="33"/></name> <operator pos:line="83" pos:column="34">*<pos:position pos:line="83" pos:column="35"/></operator><operator pos:line="83" pos:column="35">)<pos:position pos:line="83" pos:column="36"/></operator><operator pos:line="83" pos:column="36">(<pos:position pos:line="83" pos:column="37"/></operator><name><name pos:line="83" pos:column="37">BACKEND<pos:position pos:line="83" pos:column="44"/></name><operator pos:line="83" pos:column="44">-&gt;<pos:position pos:line="83" pos:column="49"/></operator><name pos:line="83" pos:column="46">encdata_buffer<pos:position pos:line="83" pos:column="60"/></name></name> <operator pos:line="83" pos:column="61">+<pos:position pos:line="83" pos:column="62"/></operator>
                                    <name><name pos:line="84" pos:column="37">BACKEND<pos:position pos:line="84" pos:column="44"/></name><operator pos:line="84" pos:column="44">-&gt;<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="46">encdata_offset<pos:position pos:line="84" pos:column="60"/></name></name><operator pos:line="84" pos:column="60">)<pos:position pos:line="84" pos:column="61"/></operator></expr></argument>,
                           <argument><expr><name pos:line="85" pos:column="28">size<pos:position pos:line="85" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="34">&amp;<pos:position pos:line="85" pos:column="39"/></operator><name pos:line="85" pos:column="35">nread<pos:position pos:line="85" pos:column="40"/></name></expr></argument>)<pos:position pos:line="85" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="42"/></expr_stmt>
    <if pos:line="86" pos:column="5">if<condition pos:line="86" pos:column="7">(<expr><operator pos:line="86" pos:column="8">*<pos:position pos:line="86" pos:column="9"/></operator><name pos:line="86" pos:column="9">err<pos:position pos:line="86" pos:column="12"/></name></expr>)<pos:position pos:line="86" pos:column="13"/></condition><then pos:line="86" pos:column="13"> <block pos:line="86" pos:column="14">{
      <expr_stmt><expr><name pos:line="87" pos:column="7">nread<pos:position pos:line="87" pos:column="12"/></name> <operator pos:line="87" pos:column="13">=<pos:position pos:line="87" pos:column="14"/></operator> <operator pos:line="87" pos:column="15">-<pos:position pos:line="87" pos:column="16"/></operator><literal type="number" pos:line="87" pos:column="16">1<pos:position pos:line="87" pos:column="17"/></literal></expr>;<pos:position pos:line="87" pos:column="18"/></expr_stmt>
      <if pos:line="88" pos:column="7">if<condition pos:line="88" pos:column="9">(<expr><operator pos:line="88" pos:column="10">*<pos:position pos:line="88" pos:column="11"/></operator><name pos:line="88" pos:column="11">err<pos:position pos:line="88" pos:column="14"/></name> <operator pos:line="88" pos:column="15">==<pos:position pos:line="88" pos:column="17"/></operator> <name pos:line="88" pos:column="18">CURLE_AGAIN<pos:position pos:line="88" pos:column="29"/></name></expr>)<pos:position pos:line="88" pos:column="30"/></condition><then pos:line="88" pos:column="30">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="9">infof<pos:position pos:line="89" pos:column="14"/></name><argument_list pos:line="89" pos:column="14">(<argument><expr><name pos:line="89" pos:column="15">data<pos:position pos:line="89" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="21">"schannel: Curl_read_plain returned CURLE_AGAIN\n"<pos:position pos:line="89" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="73"/></expr_stmt></block></then>
      <elseif pos:line="90" pos:column="7">else <if pos:line="90" pos:column="12">if<condition pos:line="90" pos:column="14">(<expr><operator pos:line="90" pos:column="15">*<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="16">err<pos:position pos:line="90" pos:column="19"/></name> <operator pos:line="90" pos:column="20">==<pos:position pos:line="90" pos:column="22"/></operator> <name pos:line="90" pos:column="23">CURLE_RECV_ERROR<pos:position pos:line="90" pos:column="39"/></name></expr>)<pos:position pos:line="90" pos:column="40"/></condition><then pos:line="90" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="91" pos:column="9">infof<pos:position pos:line="91" pos:column="14"/></name><argument_list pos:line="91" pos:column="14">(<argument><expr><name pos:line="91" pos:column="15">data<pos:position pos:line="91" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="21">"schannel: Curl_read_plain returned CURLE_RECV_ERROR\n"<pos:position pos:line="91" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="78"/></expr_stmt></block></then></if></elseif>
      <else pos:line="92" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="9">infof<pos:position pos:line="93" pos:column="14"/></name><argument_list pos:line="93" pos:column="14">(<argument><expr><name pos:line="93" pos:column="15">data<pos:position pos:line="93" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="21">"schannel: Curl_read_plain returned error %d\n"<pos:position pos:line="93" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="93" pos:column="70">*<pos:position pos:line="93" pos:column="71"/></operator><name pos:line="93" pos:column="71">err<pos:position pos:line="93" pos:column="74"/></name></expr></argument>)<pos:position pos:line="93" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="76"/></expr_stmt></block></else></if>
    }<pos:position pos:line="94" pos:column="6"/></block></then>
    <elseif pos:line="95" pos:column="5">else <if pos:line="95" pos:column="10">if<condition pos:line="95" pos:column="12">(<expr><name pos:line="95" pos:column="13">nread<pos:position pos:line="95" pos:column="18"/></name> <operator pos:line="95" pos:column="19">==<pos:position pos:line="95" pos:column="21"/></operator> <literal type="number" pos:line="95" pos:column="22">0<pos:position pos:line="95" pos:column="23"/></literal></expr>)<pos:position pos:line="95" pos:column="24"/></condition><then pos:line="95" pos:column="24"> <block pos:line="95" pos:column="25">{
      <expr_stmt><expr><name><name pos:line="96" pos:column="7">BACKEND<pos:position pos:line="96" pos:column="14"/></name><operator pos:line="96" pos:column="14">-&gt;<pos:position pos:line="96" pos:column="19"/></operator><name pos:line="96" pos:column="16">recv_connection_closed<pos:position pos:line="96" pos:column="38"/></name></name> <operator pos:line="96" pos:column="39">=<pos:position pos:line="96" pos:column="40"/></operator> <literal type="boolean" pos:line="96" pos:column="41">true<pos:position pos:line="96" pos:column="45"/></literal></expr>;<pos:position pos:line="96" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">infof<pos:position pos:line="97" pos:column="12"/></name><argument_list pos:line="97" pos:column="12">(<argument><expr><name pos:line="97" pos:column="13">data<pos:position pos:line="97" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="19">"schannel: server closed the connection\n"<pos:position pos:line="97" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="99" pos:column="5">else <if pos:line="99" pos:column="10">if<condition pos:line="99" pos:column="12">(<expr><name pos:line="99" pos:column="13">nread<pos:position pos:line="99" pos:column="18"/></name> <operator pos:line="99" pos:column="19">&gt;<pos:position pos:line="99" pos:column="23"/></operator> <literal type="number" pos:line="99" pos:column="21">0<pos:position pos:line="99" pos:column="22"/></literal></expr>)<pos:position pos:line="99" pos:column="23"/></condition><then pos:line="99" pos:column="23"> <block pos:line="99" pos:column="24">{
      <expr_stmt><expr><name><name pos:line="100" pos:column="7">BACKEND<pos:position pos:line="100" pos:column="14"/></name><operator pos:line="100" pos:column="14">-&gt;<pos:position pos:line="100" pos:column="19"/></operator><name pos:line="100" pos:column="16">encdata_offset<pos:position pos:line="100" pos:column="30"/></name></name> <operator pos:line="100" pos:column="31">+=<pos:position pos:line="100" pos:column="33"/></operator> <operator pos:line="100" pos:column="34">(<pos:position pos:line="100" pos:column="35"/></operator><name pos:line="100" pos:column="35">size_t<pos:position pos:line="100" pos:column="41"/></name><operator pos:line="100" pos:column="41">)<pos:position pos:line="100" pos:column="42"/></operator><name pos:line="100" pos:column="42">nread<pos:position pos:line="100" pos:column="47"/></name></expr>;<pos:position pos:line="100" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="101" pos:column="7">BACKEND<pos:position pos:line="101" pos:column="14"/></name><operator pos:line="101" pos:column="14">-&gt;<pos:position pos:line="101" pos:column="19"/></operator><name pos:line="101" pos:column="16">encdata_is_incomplete<pos:position pos:line="101" pos:column="37"/></name></name> <operator pos:line="101" pos:column="38">=<pos:position pos:line="101" pos:column="39"/></operator> <literal type="boolean" pos:line="101" pos:column="40">false<pos:position pos:line="101" pos:column="45"/></literal></expr>;<pos:position pos:line="101" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="102" pos:column="7">infof<pos:position pos:line="102" pos:column="12"/></name><argument_list pos:line="102" pos:column="12">(<argument><expr><name pos:line="102" pos:column="13">data<pos:position pos:line="102" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="19">"schannel: encrypted data got %zd\n"<pos:position pos:line="102" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="57">nread<pos:position pos:line="102" pos:column="62"/></name></expr></argument>)<pos:position pos:line="102" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="103" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="104" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="106" pos:column="3">infof<pos:position pos:line="106" pos:column="8"/></name><argument_list pos:line="106" pos:column="8">(<argument><expr><name pos:line="106" pos:column="9">data<pos:position pos:line="106" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="15">"schannel: encrypted data buffer: offset %zu length %zu\n"<pos:position pos:line="106" pos:column="73"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="107" pos:column="9">BACKEND<pos:position pos:line="107" pos:column="16"/></name><operator pos:line="107" pos:column="16">-&gt;<pos:position pos:line="107" pos:column="21"/></operator><name pos:line="107" pos:column="18">encdata_offset<pos:position pos:line="107" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="34">BACKEND<pos:position pos:line="107" pos:column="41"/></name><operator pos:line="107" pos:column="41">-&gt;<pos:position pos:line="107" pos:column="46"/></operator><name pos:line="107" pos:column="43">encdata_length<pos:position pos:line="107" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="107" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="59"/></expr_stmt>

  <comment type="block" pos:line="109" pos:column="3">/* decrypt loop */</comment>
  <while pos:line="110" pos:column="3">while<condition pos:line="110" pos:column="8">(<expr><name><name pos:line="110" pos:column="9">BACKEND<pos:position pos:line="110" pos:column="16"/></name><operator pos:line="110" pos:column="16">-&gt;<pos:position pos:line="110" pos:column="21"/></operator><name pos:line="110" pos:column="18">encdata_offset<pos:position pos:line="110" pos:column="32"/></name></name> <operator pos:line="110" pos:column="33">&gt;<pos:position pos:line="110" pos:column="37"/></operator> <literal type="number" pos:line="110" pos:column="35">0<pos:position pos:line="110" pos:column="36"/></literal> <operator pos:line="110" pos:column="37">&amp;&amp;<pos:position pos:line="110" pos:column="47"/></operator> <name pos:line="110" pos:column="40">sspi_status<pos:position pos:line="110" pos:column="51"/></name> <operator pos:line="110" pos:column="52">==<pos:position pos:line="110" pos:column="54"/></operator> <name pos:line="110" pos:column="55">SEC_E_OK<pos:position pos:line="110" pos:column="63"/></name> <operator pos:line="110" pos:column="64">&amp;&amp;<pos:position pos:line="110" pos:column="74"/></operator>
        <operator pos:line="111" pos:column="9">(<pos:position pos:line="111" pos:column="10"/></operator><operator pos:line="111" pos:column="10">!<pos:position pos:line="111" pos:column="11"/></operator><name pos:line="111" pos:column="11">len<pos:position pos:line="111" pos:column="14"/></name> <operator pos:line="111" pos:column="15">||<pos:position pos:line="111" pos:column="17"/></operator> <name><name pos:line="111" pos:column="18">BACKEND<pos:position pos:line="111" pos:column="25"/></name><operator pos:line="111" pos:column="25">-&gt;<pos:position pos:line="111" pos:column="30"/></operator><name pos:line="111" pos:column="27">decdata_offset<pos:position pos:line="111" pos:column="41"/></name></name> <operator pos:line="111" pos:column="42">&lt;<pos:position pos:line="111" pos:column="46"/></operator> <name pos:line="111" pos:column="44">len<pos:position pos:line="111" pos:column="47"/></name> <operator pos:line="111" pos:column="48">||<pos:position pos:line="111" pos:column="50"/></operator>
         <name><name pos:line="112" pos:column="10">BACKEND<pos:position pos:line="112" pos:column="17"/></name><operator pos:line="112" pos:column="17">-&gt;<pos:position pos:line="112" pos:column="22"/></operator><name pos:line="112" pos:column="19">recv_connection_closed<pos:position pos:line="112" pos:column="41"/></name></name><operator pos:line="112" pos:column="41">)<pos:position pos:line="112" pos:column="42"/></operator></expr>)<pos:position pos:line="112" pos:column="43"/></condition> <block pos:line="112" pos:column="44">{
    <comment type="block" pos:line="113" pos:column="5">/* prepare data buffer for DecryptMessage call */</comment>
    <expr_stmt><expr><call><name pos:line="114" pos:column="5">InitSecBuffer<pos:position pos:line="114" pos:column="18"/></name><argument_list pos:line="114" pos:column="18">(<argument><expr><operator pos:line="114" pos:column="19">&amp;<pos:position pos:line="114" pos:column="24"/></operator><name><name pos:line="114" pos:column="20">inbuf<pos:position pos:line="114" pos:column="25"/></name><index pos:line="114" pos:column="25">[<expr><literal type="number" pos:line="114" pos:column="26">0<pos:position pos:line="114" pos:column="27"/></literal></expr>]<pos:position pos:line="114" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="30">SECBUFFER_DATA<pos:position pos:line="114" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="46">BACKEND<pos:position pos:line="114" pos:column="53"/></name><operator pos:line="114" pos:column="53">-&gt;<pos:position pos:line="114" pos:column="58"/></operator><name pos:line="114" pos:column="55">encdata_buffer<pos:position pos:line="114" pos:column="69"/></name></name></expr></argument>,
                  <argument><expr><call><name pos:line="115" pos:column="19">curlx_uztoul<pos:position pos:line="115" pos:column="31"/></name><argument_list pos:line="115" pos:column="31">(<argument><expr><name><name pos:line="115" pos:column="32">BACKEND<pos:position pos:line="115" pos:column="39"/></name><operator pos:line="115" pos:column="39">-&gt;<pos:position pos:line="115" pos:column="44"/></operator><name pos:line="115" pos:column="41">encdata_offset<pos:position pos:line="115" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="115" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="115" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="58"/></expr_stmt>

    <comment type="block" pos:line="117" pos:column="5">/* we need 3 more empty input buffers for possible output */</comment>
    <expr_stmt><expr><call><name pos:line="118" pos:column="5">InitSecBuffer<pos:position pos:line="118" pos:column="18"/></name><argument_list pos:line="118" pos:column="18">(<argument><expr><operator pos:line="118" pos:column="19">&amp;<pos:position pos:line="118" pos:column="24"/></operator><name><name pos:line="118" pos:column="20">inbuf<pos:position pos:line="118" pos:column="25"/></name><index pos:line="118" pos:column="25">[<expr><literal type="number" pos:line="118" pos:column="26">1<pos:position pos:line="118" pos:column="27"/></literal></expr>]<pos:position pos:line="118" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="30">SECBUFFER_EMPTY<pos:position pos:line="118" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="47">NULL<pos:position pos:line="118" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="118" pos:column="53">0<pos:position pos:line="118" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">InitSecBuffer<pos:position pos:line="119" pos:column="18"/></name><argument_list pos:line="119" pos:column="18">(<argument><expr><operator pos:line="119" pos:column="19">&amp;<pos:position pos:line="119" pos:column="24"/></operator><name><name pos:line="119" pos:column="20">inbuf<pos:position pos:line="119" pos:column="25"/></name><index pos:line="119" pos:column="25">[<expr><literal type="number" pos:line="119" pos:column="26">2<pos:position pos:line="119" pos:column="27"/></literal></expr>]<pos:position pos:line="119" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="30">SECBUFFER_EMPTY<pos:position pos:line="119" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="47">NULL<pos:position pos:line="119" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="119" pos:column="53">0<pos:position pos:line="119" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">InitSecBuffer<pos:position pos:line="120" pos:column="18"/></name><argument_list pos:line="120" pos:column="18">(<argument><expr><operator pos:line="120" pos:column="19">&amp;<pos:position pos:line="120" pos:column="24"/></operator><name><name pos:line="120" pos:column="20">inbuf<pos:position pos:line="120" pos:column="25"/></name><index pos:line="120" pos:column="25">[<expr><literal type="number" pos:line="120" pos:column="26">3<pos:position pos:line="120" pos:column="27"/></literal></expr>]<pos:position pos:line="120" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="30">SECBUFFER_EMPTY<pos:position pos:line="120" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="47">NULL<pos:position pos:line="120" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="120" pos:column="53">0<pos:position pos:line="120" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="121" pos:column="5">InitSecBufferDesc<pos:position pos:line="121" pos:column="22"/></name><argument_list pos:line="121" pos:column="22">(<argument><expr><operator pos:line="121" pos:column="23">&amp;<pos:position pos:line="121" pos:column="28"/></operator><name pos:line="121" pos:column="24">inbuf_desc<pos:position pos:line="121" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="36">inbuf<pos:position pos:line="121" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="121" pos:column="43">4<pos:position pos:line="121" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="46"/></expr_stmt>

    <comment type="block" pos:line="123" pos:column="5">/* https://msdn.microsoft.com/en-us/library/windows/desktop/aa375348.aspx
       */</comment>
    <expr_stmt><expr><name pos:line="125" pos:column="5">sspi_status<pos:position pos:line="125" pos:column="16"/></name> <operator pos:line="125" pos:column="17">=<pos:position pos:line="125" pos:column="18"/></operator> <call><name><name pos:line="125" pos:column="19">s_pSecFn<pos:position pos:line="125" pos:column="27"/></name><operator pos:line="125" pos:column="27">-&gt;<pos:position pos:line="125" pos:column="32"/></operator><name pos:line="125" pos:column="29">DecryptMessage<pos:position pos:line="125" pos:column="43"/></name></name><argument_list pos:line="125" pos:column="43">(<argument><expr><operator pos:line="125" pos:column="44">&amp;<pos:position pos:line="125" pos:column="49"/></operator><name><name pos:line="125" pos:column="45">BACKEND<pos:position pos:line="125" pos:column="52"/></name><operator pos:line="125" pos:column="52">-&gt;<pos:position pos:line="125" pos:column="57"/></operator><name pos:line="125" pos:column="54">ctxt<pos:position pos:line="125" pos:column="58"/></name><operator pos:line="125" pos:column="58">-&gt;<pos:position pos:line="125" pos:column="63"/></operator><name pos:line="125" pos:column="60">ctxt_handle<pos:position pos:line="125" pos:column="71"/></name></name></expr></argument>,
                                           <argument><expr><operator pos:line="126" pos:column="44">&amp;<pos:position pos:line="126" pos:column="49"/></operator><name pos:line="126" pos:column="45">inbuf_desc<pos:position pos:line="126" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="126" pos:column="57">0<pos:position pos:line="126" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="126" pos:column="60">NULL<pos:position pos:line="126" pos:column="64"/></name></expr></argument>)<pos:position pos:line="126" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="66"/></expr_stmt>

    <comment type="block" pos:line="128" pos:column="5">/* check if everything went fine (server may want to renegotiate
       or shutdown the connection context) */</comment>
    <if pos:line="130" pos:column="5">if<condition pos:line="130" pos:column="7">(<expr><name pos:line="130" pos:column="8">sspi_status<pos:position pos:line="130" pos:column="19"/></name> <operator pos:line="130" pos:column="20">==<pos:position pos:line="130" pos:column="22"/></operator> <name pos:line="130" pos:column="23">SEC_E_OK<pos:position pos:line="130" pos:column="31"/></name> <operator pos:line="130" pos:column="32">||<pos:position pos:line="130" pos:column="34"/></operator> <name pos:line="130" pos:column="35">sspi_status<pos:position pos:line="130" pos:column="46"/></name> <operator pos:line="130" pos:column="47">==<pos:position pos:line="130" pos:column="49"/></operator> <name pos:line="130" pos:column="50">SEC_I_RENEGOTIATE<pos:position pos:line="130" pos:column="67"/></name> <operator pos:line="130" pos:column="68">||<pos:position pos:line="130" pos:column="70"/></operator>
       <name pos:line="131" pos:column="8">sspi_status<pos:position pos:line="131" pos:column="19"/></name> <operator pos:line="131" pos:column="20">==<pos:position pos:line="131" pos:column="22"/></operator> <name pos:line="131" pos:column="23">SEC_I_CONTEXT_EXPIRED<pos:position pos:line="131" pos:column="44"/></name></expr>)<pos:position pos:line="131" pos:column="45"/></condition><then pos:line="131" pos:column="45"> <block pos:line="131" pos:column="46">{
      <comment type="block" pos:line="132" pos:column="7">/* check for successfully decrypted data, even before actual
         renegotiation or shutdown of the connection context */</comment>
      <if pos:line="134" pos:column="7">if<condition pos:line="134" pos:column="9">(<expr><name><name pos:line="134" pos:column="10">inbuf<pos:position pos:line="134" pos:column="15"/></name><index pos:line="134" pos:column="15">[<expr><literal type="number" pos:line="134" pos:column="16">1<pos:position pos:line="134" pos:column="17"/></literal></expr>]<pos:position pos:line="134" pos:column="18"/></index></name><operator pos:line="134" pos:column="18">.<pos:position pos:line="134" pos:column="19"/></operator><name pos:line="134" pos:column="19">BufferType<pos:position pos:line="134" pos:column="29"/></name> <operator pos:line="134" pos:column="30">==<pos:position pos:line="134" pos:column="32"/></operator> <name pos:line="134" pos:column="33">SECBUFFER_DATA<pos:position pos:line="134" pos:column="47"/></name></expr>)<pos:position pos:line="134" pos:column="48"/></condition><then pos:line="134" pos:column="48"> <block pos:line="134" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="135" pos:column="9">infof<pos:position pos:line="135" pos:column="14"/></name><argument_list pos:line="135" pos:column="14">(<argument><expr><name pos:line="135" pos:column="15">data<pos:position pos:line="135" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="21">"schannel: decrypted data length: %lu\n"<pos:position pos:line="135" pos:column="61"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="136" pos:column="15">inbuf<pos:position pos:line="136" pos:column="20"/></name><index pos:line="136" pos:column="20">[<expr><literal type="number" pos:line="136" pos:column="21">1<pos:position pos:line="136" pos:column="22"/></literal></expr>]<pos:position pos:line="136" pos:column="23"/></index></name><operator pos:line="136" pos:column="23">.<pos:position pos:line="136" pos:column="24"/></operator><name pos:line="136" pos:column="24">cbBuffer<pos:position pos:line="136" pos:column="32"/></name></expr></argument>)<pos:position pos:line="136" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="34"/></expr_stmt>

        <comment type="block" pos:line="138" pos:column="9">/* increase buffer in order to fit the received amount of data */</comment>
        <expr_stmt><expr><name pos:line="139" pos:column="9">size<pos:position pos:line="139" pos:column="13"/></name> <operator pos:line="139" pos:column="14">=<pos:position pos:line="139" pos:column="15"/></operator> <ternary><condition><expr><name><name pos:line="139" pos:column="16">inbuf<pos:position pos:line="139" pos:column="21"/></name><index pos:line="139" pos:column="21">[<expr><literal type="number" pos:line="139" pos:column="22">1<pos:position pos:line="139" pos:column="23"/></literal></expr>]<pos:position pos:line="139" pos:column="24"/></index></name><operator pos:line="139" pos:column="24">.<pos:position pos:line="139" pos:column="25"/></operator><name pos:line="139" pos:column="25">cbBuffer<pos:position pos:line="139" pos:column="33"/></name> <operator pos:line="139" pos:column="34">&gt;<pos:position pos:line="139" pos:column="38"/></operator> <name pos:line="139" pos:column="36">CURL_SCHANNEL_BUFFER_FREE_SIZE<pos:position pos:line="139" pos:column="66"/></name></expr> ?<pos:position pos:line="139" pos:column="68"/></condition><then pos:line="139" pos:column="68">
               <expr><name><name pos:line="140" pos:column="16">inbuf<pos:position pos:line="140" pos:column="21"/></name><index pos:line="140" pos:column="21">[<expr><literal type="number" pos:line="140" pos:column="22">1<pos:position pos:line="140" pos:column="23"/></literal></expr>]<pos:position pos:line="140" pos:column="24"/></index></name><operator pos:line="140" pos:column="24">.<pos:position pos:line="140" pos:column="25"/></operator><name pos:line="140" pos:column="25">cbBuffer<pos:position pos:line="140" pos:column="33"/></name></expr> <pos:position pos:line="140" pos:column="34"/></then><else pos:line="140" pos:column="34">: <expr><name pos:line="140" pos:column="36">CURL_SCHANNEL_BUFFER_FREE_SIZE<pos:position pos:line="140" pos:column="66"/></name></expr></else></ternary></expr>;<pos:position pos:line="140" pos:column="67"/></expr_stmt>
        <if pos:line="141" pos:column="9">if<condition pos:line="141" pos:column="11">(<expr><name><name pos:line="141" pos:column="12">BACKEND<pos:position pos:line="141" pos:column="19"/></name><operator pos:line="141" pos:column="19">-&gt;<pos:position pos:line="141" pos:column="24"/></operator><name pos:line="141" pos:column="21">decdata_length<pos:position pos:line="141" pos:column="35"/></name></name> <operator pos:line="141" pos:column="36">-<pos:position pos:line="141" pos:column="37"/></operator> <name><name pos:line="141" pos:column="38">BACKEND<pos:position pos:line="141" pos:column="45"/></name><operator pos:line="141" pos:column="45">-&gt;<pos:position pos:line="141" pos:column="50"/></operator><name pos:line="141" pos:column="47">decdata_offset<pos:position pos:line="141" pos:column="61"/></name></name> <operator pos:line="141" pos:column="62">&lt;<pos:position pos:line="141" pos:column="66"/></operator> <name pos:line="141" pos:column="64">size<pos:position pos:line="141" pos:column="68"/></name> <operator pos:line="141" pos:column="69">||<pos:position pos:line="141" pos:column="71"/></operator>
           <name><name pos:line="142" pos:column="12">BACKEND<pos:position pos:line="142" pos:column="19"/></name><operator pos:line="142" pos:column="19">-&gt;<pos:position pos:line="142" pos:column="24"/></operator><name pos:line="142" pos:column="21">decdata_length<pos:position pos:line="142" pos:column="35"/></name></name> <operator pos:line="142" pos:column="36">&lt;<pos:position pos:line="142" pos:column="40"/></operator> <name pos:line="142" pos:column="38">len<pos:position pos:line="142" pos:column="41"/></name></expr>)<pos:position pos:line="142" pos:column="42"/></condition><then pos:line="142" pos:column="42"> <block pos:line="142" pos:column="43">{
          <comment type="block" pos:line="143" pos:column="11">/* increase internal decrypted data buffer */</comment>
          <expr_stmt><expr><name pos:line="144" pos:column="11">reallocated_length<pos:position pos:line="144" pos:column="29"/></name> <operator pos:line="144" pos:column="30">=<pos:position pos:line="144" pos:column="31"/></operator> <name><name pos:line="144" pos:column="32">BACKEND<pos:position pos:line="144" pos:column="39"/></name><operator pos:line="144" pos:column="39">-&gt;<pos:position pos:line="144" pos:column="44"/></operator><name pos:line="144" pos:column="41">decdata_offset<pos:position pos:line="144" pos:column="55"/></name></name> <operator pos:line="144" pos:column="56">+<pos:position pos:line="144" pos:column="57"/></operator> <name pos:line="144" pos:column="58">size<pos:position pos:line="144" pos:column="62"/></name></expr>;<pos:position pos:line="144" pos:column="63"/></expr_stmt>
          <comment type="block" pos:line="145" pos:column="11">/* make sure that the requested amount of data fits */</comment>
          <if pos:line="146" pos:column="11">if<condition pos:line="146" pos:column="13">(<expr><name pos:line="146" pos:column="14">reallocated_length<pos:position pos:line="146" pos:column="32"/></name> <operator pos:line="146" pos:column="33">&lt;<pos:position pos:line="146" pos:column="37"/></operator> <name pos:line="146" pos:column="35">len<pos:position pos:line="146" pos:column="38"/></name></expr>)<pos:position pos:line="146" pos:column="39"/></condition><then pos:line="146" pos:column="39"> <block pos:line="146" pos:column="40">{
            <expr_stmt><expr><name pos:line="147" pos:column="13">reallocated_length<pos:position pos:line="147" pos:column="31"/></name> <operator pos:line="147" pos:column="32">=<pos:position pos:line="147" pos:column="33"/></operator> <name pos:line="147" pos:column="34">len<pos:position pos:line="147" pos:column="37"/></name></expr>;<pos:position pos:line="147" pos:column="38"/></expr_stmt>
          }<pos:position pos:line="148" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name pos:line="149" pos:column="11">reallocated_buffer<pos:position pos:line="149" pos:column="29"/></name> <operator pos:line="149" pos:column="30">=<pos:position pos:line="149" pos:column="31"/></operator> <call><name pos:line="149" pos:column="32">realloc<pos:position pos:line="149" pos:column="39"/></name><argument_list pos:line="149" pos:column="39">(<argument><expr><name><name pos:line="149" pos:column="40">BACKEND<pos:position pos:line="149" pos:column="47"/></name><operator pos:line="149" pos:column="47">-&gt;<pos:position pos:line="149" pos:column="52"/></operator><name pos:line="149" pos:column="49">decdata_buffer<pos:position pos:line="149" pos:column="63"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="150" pos:column="40">reallocated_length<pos:position pos:line="150" pos:column="58"/></name></expr></argument>)<pos:position pos:line="150" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="60"/></expr_stmt>
          <if pos:line="151" pos:column="11">if<condition pos:line="151" pos:column="13">(<expr><name pos:line="151" pos:column="14">reallocated_buffer<pos:position pos:line="151" pos:column="32"/></name> <operator pos:line="151" pos:column="33">==<pos:position pos:line="151" pos:column="35"/></operator> <name pos:line="151" pos:column="36">NULL<pos:position pos:line="151" pos:column="40"/></name></expr>)<pos:position pos:line="151" pos:column="41"/></condition><then pos:line="151" pos:column="41"> <block pos:line="151" pos:column="42">{
            <expr_stmt><expr><operator pos:line="152" pos:column="13">*<pos:position pos:line="152" pos:column="14"/></operator><name pos:line="152" pos:column="14">err<pos:position pos:line="152" pos:column="17"/></name> <operator pos:line="152" pos:column="18">=<pos:position pos:line="152" pos:column="19"/></operator> <name pos:line="152" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="152" pos:column="39"/></name></expr>;<pos:position pos:line="152" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="153" pos:column="13">failf<pos:position pos:line="153" pos:column="18"/></name><argument_list pos:line="153" pos:column="18">(<argument><expr><name pos:line="153" pos:column="19">data<pos:position pos:line="153" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="153" pos:column="25">"schannel: unable to re-allocate memory"<pos:position pos:line="153" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="67"/></expr_stmt>
            <goto pos:line="154" pos:column="13">goto <name pos:line="154" pos:column="18">cleanup<pos:position pos:line="154" pos:column="25"/></name>;<pos:position pos:line="154" pos:column="26"/></goto>
          }<pos:position pos:line="155" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name><name pos:line="156" pos:column="11">BACKEND<pos:position pos:line="156" pos:column="18"/></name><operator pos:line="156" pos:column="18">-&gt;<pos:position pos:line="156" pos:column="23"/></operator><name pos:line="156" pos:column="20">decdata_buffer<pos:position pos:line="156" pos:column="34"/></name></name> <operator pos:line="156" pos:column="35">=<pos:position pos:line="156" pos:column="36"/></operator> <name pos:line="156" pos:column="37">reallocated_buffer<pos:position pos:line="156" pos:column="55"/></name></expr>;<pos:position pos:line="156" pos:column="56"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="157" pos:column="11">BACKEND<pos:position pos:line="157" pos:column="18"/></name><operator pos:line="157" pos:column="18">-&gt;<pos:position pos:line="157" pos:column="23"/></operator><name pos:line="157" pos:column="20">decdata_length<pos:position pos:line="157" pos:column="34"/></name></name> <operator pos:line="157" pos:column="35">=<pos:position pos:line="157" pos:column="36"/></operator> <name pos:line="157" pos:column="37">reallocated_length<pos:position pos:line="157" pos:column="55"/></name></expr>;<pos:position pos:line="157" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="158" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="160" pos:column="9">/* copy decrypted data to internal buffer */</comment>
        <expr_stmt><expr><name pos:line="161" pos:column="9">size<pos:position pos:line="161" pos:column="13"/></name> <operator pos:line="161" pos:column="14">=<pos:position pos:line="161" pos:column="15"/></operator> <name><name pos:line="161" pos:column="16">inbuf<pos:position pos:line="161" pos:column="21"/></name><index pos:line="161" pos:column="21">[<expr><literal type="number" pos:line="161" pos:column="22">1<pos:position pos:line="161" pos:column="23"/></literal></expr>]<pos:position pos:line="161" pos:column="24"/></index></name><operator pos:line="161" pos:column="24">.<pos:position pos:line="161" pos:column="25"/></operator><name pos:line="161" pos:column="25">cbBuffer<pos:position pos:line="161" pos:column="33"/></name></expr>;<pos:position pos:line="161" pos:column="34"/></expr_stmt>
        <if pos:line="162" pos:column="9">if<condition pos:line="162" pos:column="11">(<expr><name pos:line="162" pos:column="12">size<pos:position pos:line="162" pos:column="16"/></name></expr>)<pos:position pos:line="162" pos:column="17"/></condition><then pos:line="162" pos:column="17"> <block pos:line="162" pos:column="18">{
          <expr_stmt><expr><call><name pos:line="163" pos:column="11">memcpy<pos:position pos:line="163" pos:column="17"/></name><argument_list pos:line="163" pos:column="17">(<argument><expr><name><name pos:line="163" pos:column="18">BACKEND<pos:position pos:line="163" pos:column="25"/></name><operator pos:line="163" pos:column="25">-&gt;<pos:position pos:line="163" pos:column="30"/></operator><name pos:line="163" pos:column="27">decdata_buffer<pos:position pos:line="163" pos:column="41"/></name></name> <operator pos:line="163" pos:column="42">+<pos:position pos:line="163" pos:column="43"/></operator> <name><name pos:line="163" pos:column="44">BACKEND<pos:position pos:line="163" pos:column="51"/></name><operator pos:line="163" pos:column="51">-&gt;<pos:position pos:line="163" pos:column="56"/></operator><name pos:line="163" pos:column="53">decdata_offset<pos:position pos:line="163" pos:column="67"/></name></name></expr></argument>,
                 <argument><expr><name><name pos:line="164" pos:column="18">inbuf<pos:position pos:line="164" pos:column="23"/></name><index pos:line="164" pos:column="23">[<expr><literal type="number" pos:line="164" pos:column="24">1<pos:position pos:line="164" pos:column="25"/></literal></expr>]<pos:position pos:line="164" pos:column="26"/></index></name><operator pos:line="164" pos:column="26">.<pos:position pos:line="164" pos:column="27"/></operator><name pos:line="164" pos:column="27">pvBuffer<pos:position pos:line="164" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="37">size<pos:position pos:line="164" pos:column="41"/></name></expr></argument>)<pos:position pos:line="164" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="165" pos:column="11">BACKEND<pos:position pos:line="165" pos:column="18"/></name><operator pos:line="165" pos:column="18">-&gt;<pos:position pos:line="165" pos:column="23"/></operator><name pos:line="165" pos:column="20">decdata_offset<pos:position pos:line="165" pos:column="34"/></name></name> <operator pos:line="165" pos:column="35">+=<pos:position pos:line="165" pos:column="37"/></operator> <name pos:line="165" pos:column="38">size<pos:position pos:line="165" pos:column="42"/></name></expr>;<pos:position pos:line="165" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="166" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="168" pos:column="9">infof<pos:position pos:line="168" pos:column="14"/></name><argument_list pos:line="168" pos:column="14">(<argument><expr><name pos:line="168" pos:column="15">data<pos:position pos:line="168" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="168" pos:column="21">"schannel: decrypted data added: %zu\n"<pos:position pos:line="168" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="168" pos:column="62">size<pos:position pos:line="168" pos:column="66"/></name></expr></argument>)<pos:position pos:line="168" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="169" pos:column="9">infof<pos:position pos:line="169" pos:column="14"/></name><argument_list pos:line="169" pos:column="14">(<argument><expr><name pos:line="169" pos:column="15">data<pos:position pos:line="169" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="169" pos:column="21">"schannel: decrypted data cached: offset %zu length %zu\n"<pos:position pos:line="169" pos:column="79"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="170" pos:column="15">BACKEND<pos:position pos:line="170" pos:column="22"/></name><operator pos:line="170" pos:column="22">-&gt;<pos:position pos:line="170" pos:column="27"/></operator><name pos:line="170" pos:column="24">decdata_offset<pos:position pos:line="170" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="170" pos:column="40">BACKEND<pos:position pos:line="170" pos:column="47"/></name><operator pos:line="170" pos:column="47">-&gt;<pos:position pos:line="170" pos:column="52"/></operator><name pos:line="170" pos:column="49">decdata_length<pos:position pos:line="170" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="170" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="65"/></expr_stmt>
      }<pos:position pos:line="171" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="173" pos:column="7">/* check for remaining encrypted data */</comment>
      <if pos:line="174" pos:column="7">if<condition pos:line="174" pos:column="9">(<expr><name><name pos:line="174" pos:column="10">inbuf<pos:position pos:line="174" pos:column="15"/></name><index pos:line="174" pos:column="15">[<expr><literal type="number" pos:line="174" pos:column="16">3<pos:position pos:line="174" pos:column="17"/></literal></expr>]<pos:position pos:line="174" pos:column="18"/></index></name><operator pos:line="174" pos:column="18">.<pos:position pos:line="174" pos:column="19"/></operator><name pos:line="174" pos:column="19">BufferType<pos:position pos:line="174" pos:column="29"/></name> <operator pos:line="174" pos:column="30">==<pos:position pos:line="174" pos:column="32"/></operator> <name pos:line="174" pos:column="33">SECBUFFER_EXTRA<pos:position pos:line="174" pos:column="48"/></name> <operator pos:line="174" pos:column="49">&amp;&amp;<pos:position pos:line="174" pos:column="59"/></operator> <name><name pos:line="174" pos:column="52">inbuf<pos:position pos:line="174" pos:column="57"/></name><index pos:line="174" pos:column="57">[<expr><literal type="number" pos:line="174" pos:column="58">3<pos:position pos:line="174" pos:column="59"/></literal></expr>]<pos:position pos:line="174" pos:column="60"/></index></name><operator pos:line="174" pos:column="60">.<pos:position pos:line="174" pos:column="61"/></operator><name pos:line="174" pos:column="61">cbBuffer<pos:position pos:line="174" pos:column="69"/></name> <operator pos:line="174" pos:column="70">&gt;<pos:position pos:line="174" pos:column="74"/></operator> <literal type="number" pos:line="174" pos:column="72">0<pos:position pos:line="174" pos:column="73"/></literal></expr>)<pos:position pos:line="174" pos:column="74"/></condition><then pos:line="174" pos:column="74"> <block pos:line="174" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="175" pos:column="9">infof<pos:position pos:line="175" pos:column="14"/></name><argument_list pos:line="175" pos:column="14">(<argument><expr><name pos:line="175" pos:column="15">data<pos:position pos:line="175" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="21">"schannel: encrypted data length: %lu\n"<pos:position pos:line="175" pos:column="61"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="176" pos:column="15">inbuf<pos:position pos:line="176" pos:column="20"/></name><index pos:line="176" pos:column="20">[<expr><literal type="number" pos:line="176" pos:column="21">3<pos:position pos:line="176" pos:column="22"/></literal></expr>]<pos:position pos:line="176" pos:column="23"/></index></name><operator pos:line="176" pos:column="23">.<pos:position pos:line="176" pos:column="24"/></operator><name pos:line="176" pos:column="24">cbBuffer<pos:position pos:line="176" pos:column="32"/></name></expr></argument>)<pos:position pos:line="176" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="34"/></expr_stmt>

        <comment type="block" pos:line="178" pos:column="9">/* check if the remaining data is less than the total amount
         * and therefore begins after the already processed data
         */</comment>
        <if pos:line="181" pos:column="9">if<condition pos:line="181" pos:column="11">(<expr><name><name pos:line="181" pos:column="12">BACKEND<pos:position pos:line="181" pos:column="19"/></name><operator pos:line="181" pos:column="19">-&gt;<pos:position pos:line="181" pos:column="24"/></operator><name pos:line="181" pos:column="21">encdata_offset<pos:position pos:line="181" pos:column="35"/></name></name> <operator pos:line="181" pos:column="36">&gt;<pos:position pos:line="181" pos:column="40"/></operator> <name><name pos:line="181" pos:column="38">inbuf<pos:position pos:line="181" pos:column="43"/></name><index pos:line="181" pos:column="43">[<expr><literal type="number" pos:line="181" pos:column="44">3<pos:position pos:line="181" pos:column="45"/></literal></expr>]<pos:position pos:line="181" pos:column="46"/></index></name><operator pos:line="181" pos:column="46">.<pos:position pos:line="181" pos:column="47"/></operator><name pos:line="181" pos:column="47">cbBuffer<pos:position pos:line="181" pos:column="55"/></name></expr>)<pos:position pos:line="181" pos:column="56"/></condition><then pos:line="181" pos:column="56"> <block pos:line="181" pos:column="57">{
          <comment type="block" pos:line="182" pos:column="11">/* move remaining encrypted data forward to the beginning of
             buffer */</comment>
          <expr_stmt><expr><call><name pos:line="184" pos:column="11">memmove<pos:position pos:line="184" pos:column="18"/></name><argument_list pos:line="184" pos:column="18">(<argument><expr><name><name pos:line="184" pos:column="19">BACKEND<pos:position pos:line="184" pos:column="26"/></name><operator pos:line="184" pos:column="26">-&gt;<pos:position pos:line="184" pos:column="31"/></operator><name pos:line="184" pos:column="28">encdata_buffer<pos:position pos:line="184" pos:column="42"/></name></name></expr></argument>,
                  <argument><expr><operator pos:line="185" pos:column="19">(<pos:position pos:line="185" pos:column="20"/></operator><name><name pos:line="185" pos:column="20">BACKEND<pos:position pos:line="185" pos:column="27"/></name><operator pos:line="185" pos:column="27">-&gt;<pos:position pos:line="185" pos:column="32"/></operator><name pos:line="185" pos:column="29">encdata_buffer<pos:position pos:line="185" pos:column="43"/></name></name> <operator pos:line="185" pos:column="44">+<pos:position pos:line="185" pos:column="45"/></operator> <name><name pos:line="185" pos:column="46">BACKEND<pos:position pos:line="185" pos:column="53"/></name><operator pos:line="185" pos:column="53">-&gt;<pos:position pos:line="185" pos:column="58"/></operator><name pos:line="185" pos:column="55">encdata_offset<pos:position pos:line="185" pos:column="69"/></name></name><operator pos:line="185" pos:column="69">)<pos:position pos:line="185" pos:column="70"/></operator> <operator pos:line="185" pos:column="71">-<pos:position pos:line="185" pos:column="72"/></operator>
                  <name><name pos:line="186" pos:column="19">inbuf<pos:position pos:line="186" pos:column="24"/></name><index pos:line="186" pos:column="24">[<expr><literal type="number" pos:line="186" pos:column="25">3<pos:position pos:line="186" pos:column="26"/></literal></expr>]<pos:position pos:line="186" pos:column="27"/></index></name><operator pos:line="186" pos:column="27">.<pos:position pos:line="186" pos:column="28"/></operator><name pos:line="186" pos:column="28">cbBuffer<pos:position pos:line="186" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="38">inbuf<pos:position pos:line="186" pos:column="43"/></name><index pos:line="186" pos:column="43">[<expr><literal type="number" pos:line="186" pos:column="44">3<pos:position pos:line="186" pos:column="45"/></literal></expr>]<pos:position pos:line="186" pos:column="46"/></index></name><operator pos:line="186" pos:column="46">.<pos:position pos:line="186" pos:column="47"/></operator><name pos:line="186" pos:column="47">cbBuffer<pos:position pos:line="186" pos:column="55"/></name></expr></argument>)<pos:position pos:line="186" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="57"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="187" pos:column="11">BACKEND<pos:position pos:line="187" pos:column="18"/></name><operator pos:line="187" pos:column="18">-&gt;<pos:position pos:line="187" pos:column="23"/></operator><name pos:line="187" pos:column="20">encdata_offset<pos:position pos:line="187" pos:column="34"/></name></name> <operator pos:line="187" pos:column="35">=<pos:position pos:line="187" pos:column="36"/></operator> <name><name pos:line="187" pos:column="37">inbuf<pos:position pos:line="187" pos:column="42"/></name><index pos:line="187" pos:column="42">[<expr><literal type="number" pos:line="187" pos:column="43">3<pos:position pos:line="187" pos:column="44"/></literal></expr>]<pos:position pos:line="187" pos:column="45"/></index></name><operator pos:line="187" pos:column="45">.<pos:position pos:line="187" pos:column="46"/></operator><name pos:line="187" pos:column="46">cbBuffer<pos:position pos:line="187" pos:column="54"/></name></expr>;<pos:position pos:line="187" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="188" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="190" pos:column="9">infof<pos:position pos:line="190" pos:column="14"/></name><argument_list pos:line="190" pos:column="14">(<argument><expr><name pos:line="190" pos:column="15">data<pos:position pos:line="190" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="190" pos:column="21">"schannel: encrypted data cached: offset %zu length %zu\n"<pos:position pos:line="190" pos:column="79"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="191" pos:column="15">BACKEND<pos:position pos:line="191" pos:column="22"/></name><operator pos:line="191" pos:column="22">-&gt;<pos:position pos:line="191" pos:column="27"/></operator><name pos:line="191" pos:column="24">encdata_offset<pos:position pos:line="191" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="191" pos:column="40">BACKEND<pos:position pos:line="191" pos:column="47"/></name><operator pos:line="191" pos:column="47">-&gt;<pos:position pos:line="191" pos:column="52"/></operator><name pos:line="191" pos:column="49">encdata_length<pos:position pos:line="191" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="191" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="65"/></expr_stmt>
      }<pos:position pos:line="192" pos:column="8"/></block></then>
      <else pos:line="193" pos:column="7">else <block pos:line="193" pos:column="12">{
        <comment type="block" pos:line="194" pos:column="9">/* reset encrypted buffer offset, because there is no data remaining */</comment>
        <expr_stmt><expr><name><name pos:line="195" pos:column="9">BACKEND<pos:position pos:line="195" pos:column="16"/></name><operator pos:line="195" pos:column="16">-&gt;<pos:position pos:line="195" pos:column="21"/></operator><name pos:line="195" pos:column="18">encdata_offset<pos:position pos:line="195" pos:column="32"/></name></name> <operator pos:line="195" pos:column="33">=<pos:position pos:line="195" pos:column="34"/></operator> <literal type="number" pos:line="195" pos:column="35">0<pos:position pos:line="195" pos:column="36"/></literal></expr>;<pos:position pos:line="195" pos:column="37"/></expr_stmt>
      }<pos:position pos:line="196" pos:column="8"/></block></else></if>

      <comment type="block" pos:line="198" pos:column="7">/* check if server wants to renegotiate the connection context */</comment>
      <if pos:line="199" pos:column="7">if<condition pos:line="199" pos:column="9">(<expr><name pos:line="199" pos:column="10">sspi_status<pos:position pos:line="199" pos:column="21"/></name> <operator pos:line="199" pos:column="22">==<pos:position pos:line="199" pos:column="24"/></operator> <name pos:line="199" pos:column="25">SEC_I_RENEGOTIATE<pos:position pos:line="199" pos:column="42"/></name></expr>)<pos:position pos:line="199" pos:column="43"/></condition><then pos:line="199" pos:column="43"> <block pos:line="199" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="200" pos:column="9">infof<pos:position pos:line="200" pos:column="14"/></name><argument_list pos:line="200" pos:column="14">(<argument><expr><name pos:line="200" pos:column="15">data<pos:position pos:line="200" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="200" pos:column="21">"schannel: remote party requests renegotiation\n"<pos:position pos:line="200" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="200" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="72"/></expr_stmt>
        <if pos:line="201" pos:column="9">if<condition pos:line="201" pos:column="11">(<expr><operator pos:line="201" pos:column="12">*<pos:position pos:line="201" pos:column="13"/></operator><name pos:line="201" pos:column="13">err<pos:position pos:line="201" pos:column="16"/></name> <operator pos:line="201" pos:column="17">&amp;&amp;<pos:position pos:line="201" pos:column="27"/></operator> <operator pos:line="201" pos:column="20">*<pos:position pos:line="201" pos:column="21"/></operator><name pos:line="201" pos:column="21">err<pos:position pos:line="201" pos:column="24"/></name> <operator pos:line="201" pos:column="25">!=<pos:position pos:line="201" pos:column="27"/></operator> <name pos:line="201" pos:column="28">CURLE_AGAIN<pos:position pos:line="201" pos:column="39"/></name></expr>)<pos:position pos:line="201" pos:column="40"/></condition><then pos:line="201" pos:column="40"> <block pos:line="201" pos:column="41">{
          <expr_stmt><expr><call><name pos:line="202" pos:column="11">infof<pos:position pos:line="202" pos:column="16"/></name><argument_list pos:line="202" pos:column="16">(<argument><expr><name pos:line="202" pos:column="17">data<pos:position pos:line="202" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="202" pos:column="23">"schannel: can't renogotiate, an error is pending\n"<pos:position pos:line="202" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="77"/></expr_stmt>
          <goto pos:line="203" pos:column="11">goto <name pos:line="203" pos:column="16">cleanup<pos:position pos:line="203" pos:column="23"/></name>;<pos:position pos:line="203" pos:column="24"/></goto>
        }<pos:position pos:line="204" pos:column="10"/></block></then></if>
        <if pos:line="205" pos:column="9">if<condition pos:line="205" pos:column="11">(<expr><name><name pos:line="205" pos:column="12">BACKEND<pos:position pos:line="205" pos:column="19"/></name><operator pos:line="205" pos:column="19">-&gt;<pos:position pos:line="205" pos:column="24"/></operator><name pos:line="205" pos:column="21">encdata_offset<pos:position pos:line="205" pos:column="35"/></name></name></expr>)<pos:position pos:line="205" pos:column="36"/></condition><then pos:line="205" pos:column="36"> <block pos:line="205" pos:column="37">{
          <expr_stmt><expr><operator pos:line="206" pos:column="11">*<pos:position pos:line="206" pos:column="12"/></operator><name pos:line="206" pos:column="12">err<pos:position pos:line="206" pos:column="15"/></name> <operator pos:line="206" pos:column="16">=<pos:position pos:line="206" pos:column="17"/></operator> <name pos:line="206" pos:column="18">CURLE_RECV_ERROR<pos:position pos:line="206" pos:column="34"/></name></expr>;<pos:position pos:line="206" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="207" pos:column="11">infof<pos:position pos:line="207" pos:column="16"/></name><argument_list pos:line="207" pos:column="16">(<argument><expr><name pos:line="207" pos:column="17">data<pos:position pos:line="207" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="207" pos:column="23">"schannel: can't renogotiate, "<pos:position pos:line="207" pos:column="54"/></literal>
                      <literal type="string" pos:line="208" pos:column="23">"encrypted data available\n"<pos:position pos:line="208" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="53"/></expr_stmt>
          <goto pos:line="209" pos:column="11">goto <name pos:line="209" pos:column="16">cleanup<pos:position pos:line="209" pos:column="23"/></name>;<pos:position pos:line="209" pos:column="24"/></goto>
        }<pos:position pos:line="210" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="211" pos:column="9">/* begin renegotiation */</comment>
        <expr_stmt><expr><call><name pos:line="212" pos:column="9">infof<pos:position pos:line="212" pos:column="14"/></name><argument_list pos:line="212" pos:column="14">(<argument><expr><name pos:line="212" pos:column="15">data<pos:position pos:line="212" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="212" pos:column="21">"schannel: renegotiating SSL/TLS connection\n"<pos:position pos:line="212" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="212" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="213" pos:column="9">connssl<pos:position pos:line="213" pos:column="16"/></name><operator pos:line="213" pos:column="16">-&gt;<pos:position pos:line="213" pos:column="21"/></operator><name pos:line="213" pos:column="18">state<pos:position pos:line="213" pos:column="23"/></name></name> <operator pos:line="213" pos:column="24">=<pos:position pos:line="213" pos:column="25"/></operator> <name pos:line="213" pos:column="26">ssl_connection_negotiating<pos:position pos:line="213" pos:column="52"/></name></expr>;<pos:position pos:line="213" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="214" pos:column="9">connssl<pos:position pos:line="214" pos:column="16"/></name><operator pos:line="214" pos:column="16">-&gt;<pos:position pos:line="214" pos:column="21"/></operator><name pos:line="214" pos:column="18">connecting_state<pos:position pos:line="214" pos:column="34"/></name></name> <operator pos:line="214" pos:column="35">=<pos:position pos:line="214" pos:column="36"/></operator> <name pos:line="214" pos:column="37">ssl_connect_2_writing<pos:position pos:line="214" pos:column="58"/></name></expr>;<pos:position pos:line="214" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="215" pos:column="9">*<pos:position pos:line="215" pos:column="10"/></operator><name pos:line="215" pos:column="10">err<pos:position pos:line="215" pos:column="13"/></name> <operator pos:line="215" pos:column="14">=<pos:position pos:line="215" pos:column="15"/></operator> <call><name pos:line="215" pos:column="16">schannel_connect_common<pos:position pos:line="215" pos:column="39"/></name><argument_list pos:line="215" pos:column="39">(<argument><expr><name pos:line="215" pos:column="40">conn<pos:position pos:line="215" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="46">sockindex<pos:position pos:line="215" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="57">FALSE<pos:position pos:line="215" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="215" pos:column="64">&amp;<pos:position pos:line="215" pos:column="69"/></operator><name pos:line="215" pos:column="65">done<pos:position pos:line="215" pos:column="69"/></name></expr></argument>)<pos:position pos:line="215" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="71"/></expr_stmt>
        <if pos:line="216" pos:column="9">if<condition pos:line="216" pos:column="11">(<expr><operator pos:line="216" pos:column="12">*<pos:position pos:line="216" pos:column="13"/></operator><name pos:line="216" pos:column="13">err<pos:position pos:line="216" pos:column="16"/></name></expr>)<pos:position pos:line="216" pos:column="17"/></condition><then pos:line="216" pos:column="17"> <block pos:line="216" pos:column="18">{
          <expr_stmt><expr><call><name pos:line="217" pos:column="11">infof<pos:position pos:line="217" pos:column="16"/></name><argument_list pos:line="217" pos:column="16">(<argument><expr><name pos:line="217" pos:column="17">data<pos:position pos:line="217" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="217" pos:column="23">"schannel: renegotiation failed\n"<pos:position pos:line="217" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="217" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="59"/></expr_stmt>
          <goto pos:line="218" pos:column="11">goto <name pos:line="218" pos:column="16">cleanup<pos:position pos:line="218" pos:column="23"/></name>;<pos:position pos:line="218" pos:column="24"/></goto>
        }<pos:position pos:line="219" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="220" pos:column="9">/* now retry receiving data */</comment>
        <expr_stmt><expr><name pos:line="221" pos:column="9">sspi_status<pos:position pos:line="221" pos:column="20"/></name> <operator pos:line="221" pos:column="21">=<pos:position pos:line="221" pos:column="22"/></operator> <name pos:line="221" pos:column="23">SEC_E_OK<pos:position pos:line="221" pos:column="31"/></name></expr>;<pos:position pos:line="221" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="222" pos:column="9">infof<pos:position pos:line="222" pos:column="14"/></name><argument_list pos:line="222" pos:column="14">(<argument><expr><name pos:line="222" pos:column="15">data<pos:position pos:line="222" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="222" pos:column="21">"schannel: SSL/TLS connection renegotiated\n"<pos:position pos:line="222" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="222" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="68"/></expr_stmt>
        <continue pos:line="223" pos:column="9">continue;<pos:position pos:line="223" pos:column="18"/></continue>
      }<pos:position pos:line="224" pos:column="8"/></block></then>
      <comment type="block" pos:line="225" pos:column="7">/* check if the server closed the connection */</comment>
      <elseif pos:line="226" pos:column="7">else <if pos:line="226" pos:column="12">if<condition pos:line="226" pos:column="14">(<expr><name pos:line="226" pos:column="15">sspi_status<pos:position pos:line="226" pos:column="26"/></name> <operator pos:line="226" pos:column="27">==<pos:position pos:line="226" pos:column="29"/></operator> <name pos:line="226" pos:column="30">SEC_I_CONTEXT_EXPIRED<pos:position pos:line="226" pos:column="51"/></name></expr>)<pos:position pos:line="226" pos:column="52"/></condition><then pos:line="226" pos:column="52"> <block pos:line="226" pos:column="53">{
        <comment type="block" pos:line="227" pos:column="9">/* In Windows 2000 SEC_I_CONTEXT_EXPIRED (close_notify) is not
           returned so we have to work around that in cleanup. */</comment>
        <expr_stmt><expr><name><name pos:line="229" pos:column="9">BACKEND<pos:position pos:line="229" pos:column="16"/></name><operator pos:line="229" pos:column="16">-&gt;<pos:position pos:line="229" pos:column="21"/></operator><name pos:line="229" pos:column="18">recv_sspi_close_notify<pos:position pos:line="229" pos:column="40"/></name></name> <operator pos:line="229" pos:column="41">=<pos:position pos:line="229" pos:column="42"/></operator> <literal type="boolean" pos:line="229" pos:column="43">true<pos:position pos:line="229" pos:column="47"/></literal></expr>;<pos:position pos:line="229" pos:column="48"/></expr_stmt>
        <if pos:line="230" pos:column="9">if<condition pos:line="230" pos:column="11">(<expr><operator pos:line="230" pos:column="12">!<pos:position pos:line="230" pos:column="13"/></operator><name><name pos:line="230" pos:column="13">BACKEND<pos:position pos:line="230" pos:column="20"/></name><operator pos:line="230" pos:column="20">-&gt;<pos:position pos:line="230" pos:column="25"/></operator><name pos:line="230" pos:column="22">recv_connection_closed<pos:position pos:line="230" pos:column="44"/></name></name></expr>)<pos:position pos:line="230" pos:column="45"/></condition><then pos:line="230" pos:column="45"> <block pos:line="230" pos:column="46">{
          <expr_stmt><expr><name><name pos:line="231" pos:column="11">BACKEND<pos:position pos:line="231" pos:column="18"/></name><operator pos:line="231" pos:column="18">-&gt;<pos:position pos:line="231" pos:column="23"/></operator><name pos:line="231" pos:column="20">recv_connection_closed<pos:position pos:line="231" pos:column="42"/></name></name> <operator pos:line="231" pos:column="43">=<pos:position pos:line="231" pos:column="44"/></operator> <literal type="boolean" pos:line="231" pos:column="45">true<pos:position pos:line="231" pos:column="49"/></literal></expr>;<pos:position pos:line="231" pos:column="50"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="232" pos:column="11">infof<pos:position pos:line="232" pos:column="16"/></name><argument_list pos:line="232" pos:column="16">(<argument><expr><name pos:line="232" pos:column="17">data<pos:position pos:line="232" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="232" pos:column="23">"schannel: server closed the connection\n"<pos:position pos:line="232" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="232" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="67"/></expr_stmt>
        }<pos:position pos:line="233" pos:column="10"/></block></then></if>
        <goto pos:line="234" pos:column="9">goto <name pos:line="234" pos:column="14">cleanup<pos:position pos:line="234" pos:column="21"/></name>;<pos:position pos:line="234" pos:column="22"/></goto>
      }<pos:position pos:line="235" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="236" pos:column="6"/></block></then>
    <elseif pos:line="237" pos:column="5">else <if pos:line="237" pos:column="10">if<condition pos:line="237" pos:column="12">(<expr><name pos:line="237" pos:column="13">sspi_status<pos:position pos:line="237" pos:column="24"/></name> <operator pos:line="237" pos:column="25">==<pos:position pos:line="237" pos:column="27"/></operator> <name pos:line="237" pos:column="28">SEC_E_INCOMPLETE_MESSAGE<pos:position pos:line="237" pos:column="52"/></name></expr>)<pos:position pos:line="237" pos:column="53"/></condition><then pos:line="237" pos:column="53"> <block pos:line="237" pos:column="54">{
      <expr_stmt><expr><name><name pos:line="238" pos:column="7">BACKEND<pos:position pos:line="238" pos:column="14"/></name><operator pos:line="238" pos:column="14">-&gt;<pos:position pos:line="238" pos:column="19"/></operator><name pos:line="238" pos:column="16">encdata_is_incomplete<pos:position pos:line="238" pos:column="37"/></name></name> <operator pos:line="238" pos:column="38">=<pos:position pos:line="238" pos:column="39"/></operator> <literal type="boolean" pos:line="238" pos:column="40">true<pos:position pos:line="238" pos:column="44"/></literal></expr>;<pos:position pos:line="238" pos:column="45"/></expr_stmt>
      <if pos:line="239" pos:column="7">if<condition pos:line="239" pos:column="9">(<expr><operator pos:line="239" pos:column="10">!<pos:position pos:line="239" pos:column="11"/></operator><operator pos:line="239" pos:column="11">*<pos:position pos:line="239" pos:column="12"/></operator><name pos:line="239" pos:column="12">err<pos:position pos:line="239" pos:column="15"/></name></expr>)<pos:position pos:line="239" pos:column="16"/></condition><then pos:line="239" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="240" pos:column="9">*<pos:position pos:line="240" pos:column="10"/></operator><name pos:line="240" pos:column="10">err<pos:position pos:line="240" pos:column="13"/></name> <operator pos:line="240" pos:column="14">=<pos:position pos:line="240" pos:column="15"/></operator> <name pos:line="240" pos:column="16">CURLE_AGAIN<pos:position pos:line="240" pos:column="27"/></name></expr>;<pos:position pos:line="240" pos:column="28"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="241" pos:column="7">infof<pos:position pos:line="241" pos:column="12"/></name><argument_list pos:line="241" pos:column="12">(<argument><expr><name pos:line="241" pos:column="13">data<pos:position pos:line="241" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="241" pos:column="19">"schannel: failed to decrypt data, need more data\n"<pos:position pos:line="241" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="241" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="73"/></expr_stmt>
      <goto pos:line="242" pos:column="7">goto <name pos:line="242" pos:column="12">cleanup<pos:position pos:line="242" pos:column="19"/></name>;<pos:position pos:line="242" pos:column="20"/></goto>
    }<pos:position pos:line="243" pos:column="6"/></block></then></if></elseif>
    <else pos:line="244" pos:column="5">else <block pos:line="244" pos:column="10">{
      <expr_stmt><expr><operator pos:line="245" pos:column="7">*<pos:position pos:line="245" pos:column="8"/></operator><name pos:line="245" pos:column="8">err<pos:position pos:line="245" pos:column="11"/></name> <operator pos:line="245" pos:column="12">=<pos:position pos:line="245" pos:column="13"/></operator> <name pos:line="245" pos:column="14">CURLE_RECV_ERROR<pos:position pos:line="245" pos:column="30"/></name></expr>;<pos:position pos:line="245" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="246" pos:column="7">infof<pos:position pos:line="246" pos:column="12"/></name><argument_list pos:line="246" pos:column="12">(<argument><expr><name pos:line="246" pos:column="13">data<pos:position pos:line="246" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="246" pos:column="19">"schannel: failed to read data from server: %s\n"<pos:position pos:line="246" pos:column="68"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="247" pos:column="13">Curl_sspi_strerror<pos:position pos:line="247" pos:column="31"/></name><argument_list pos:line="247" pos:column="31">(<argument><expr><name pos:line="247" pos:column="32">conn<pos:position pos:line="247" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="247" pos:column="38">sspi_status<pos:position pos:line="247" pos:column="49"/></name></expr></argument>)<pos:position pos:line="247" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="247" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="52"/></expr_stmt>
      <goto pos:line="248" pos:column="7">goto <name pos:line="248" pos:column="12">cleanup<pos:position pos:line="248" pos:column="19"/></name>;<pos:position pos:line="248" pos:column="20"/></goto>
    }<pos:position pos:line="249" pos:column="6"/></block></else></if>
  }<pos:position pos:line="250" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="252" pos:column="3">infof<pos:position pos:line="252" pos:column="8"/></name><argument_list pos:line="252" pos:column="8">(<argument><expr><name pos:line="252" pos:column="9">data<pos:position pos:line="252" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="252" pos:column="15">"schannel: encrypted data buffer: offset %zu length %zu\n"<pos:position pos:line="252" pos:column="73"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="253" pos:column="9">BACKEND<pos:position pos:line="253" pos:column="16"/></name><operator pos:line="253" pos:column="16">-&gt;<pos:position pos:line="253" pos:column="21"/></operator><name pos:line="253" pos:column="18">encdata_offset<pos:position pos:line="253" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="253" pos:column="34">BACKEND<pos:position pos:line="253" pos:column="41"/></name><operator pos:line="253" pos:column="41">-&gt;<pos:position pos:line="253" pos:column="46"/></operator><name pos:line="253" pos:column="43">encdata_length<pos:position pos:line="253" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="253" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="59"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="255" pos:column="3">infof<pos:position pos:line="255" pos:column="8"/></name><argument_list pos:line="255" pos:column="8">(<argument><expr><name pos:line="255" pos:column="9">data<pos:position pos:line="255" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="255" pos:column="15">"schannel: decrypted data buffer: offset %zu length %zu\n"<pos:position pos:line="255" pos:column="73"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="256" pos:column="9">BACKEND<pos:position pos:line="256" pos:column="16"/></name><operator pos:line="256" pos:column="16">-&gt;<pos:position pos:line="256" pos:column="21"/></operator><name pos:line="256" pos:column="18">decdata_offset<pos:position pos:line="256" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="256" pos:column="34">BACKEND<pos:position pos:line="256" pos:column="41"/></name><operator pos:line="256" pos:column="41">-&gt;<pos:position pos:line="256" pos:column="46"/></operator><name pos:line="256" pos:column="43">decdata_length<pos:position pos:line="256" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="256" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="59"/></expr_stmt>

<label><name pos:line="258" pos:column="1">cleanup<pos:position pos:line="258" pos:column="8"/></name>:<pos:position pos:line="258" pos:column="9"/></label>
  <comment type="block" pos:line="259" pos:column="3">/* Warning- there is no guarantee the encdata state is valid at this point */</comment>
  <expr_stmt><expr><call><name pos:line="260" pos:column="3">infof<pos:position pos:line="260" pos:column="8"/></name><argument_list pos:line="260" pos:column="8">(<argument><expr><name pos:line="260" pos:column="9">data<pos:position pos:line="260" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="260" pos:column="15">"schannel: schannel_recv cleanup\n"<pos:position pos:line="260" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="260" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="260" pos:column="52"/></expr_stmt>

  <comment type="block" pos:line="262" pos:column="3">/* Error if the connection has closed without a close_notify.
  Behavior here is a matter of debate. We don't want to be vulnerable to a
  truncation attack however there's some browser precedent for ignoring the
  close_notify for compatibility reasons.
  Additionally, Windows 2000 (v5.0) is a special case since it seems it doesn't
  return close_notify. In that case if the connection was closed we assume it
  was graceful (close_notify) since there doesn't seem to be a way to tell.
  */</comment>
  <if pos:line="270" pos:column="3">if<condition pos:line="270" pos:column="5">(<expr><name pos:line="270" pos:column="6">len<pos:position pos:line="270" pos:column="9"/></name> <operator pos:line="270" pos:column="10">&amp;&amp;<pos:position pos:line="270" pos:column="20"/></operator> <operator pos:line="270" pos:column="13">!<pos:position pos:line="270" pos:column="14"/></operator><name><name pos:line="270" pos:column="14">BACKEND<pos:position pos:line="270" pos:column="21"/></name><operator pos:line="270" pos:column="21">-&gt;<pos:position pos:line="270" pos:column="26"/></operator><name pos:line="270" pos:column="23">decdata_offset<pos:position pos:line="270" pos:column="37"/></name></name> <operator pos:line="270" pos:column="38">&amp;&amp;<pos:position pos:line="270" pos:column="48"/></operator> <name><name pos:line="270" pos:column="41">BACKEND<pos:position pos:line="270" pos:column="48"/></name><operator pos:line="270" pos:column="48">-&gt;<pos:position pos:line="270" pos:column="53"/></operator><name pos:line="270" pos:column="50">recv_connection_closed<pos:position pos:line="270" pos:column="72"/></name></name> <operator pos:line="270" pos:column="73">&amp;&amp;<pos:position pos:line="270" pos:column="83"/></operator>
     <operator pos:line="271" pos:column="6">!<pos:position pos:line="271" pos:column="7"/></operator><name><name pos:line="271" pos:column="7">BACKEND<pos:position pos:line="271" pos:column="14"/></name><operator pos:line="271" pos:column="14">-&gt;<pos:position pos:line="271" pos:column="19"/></operator><name pos:line="271" pos:column="16">recv_sspi_close_notify<pos:position pos:line="271" pos:column="38"/></name></name></expr>)<pos:position pos:line="271" pos:column="39"/></condition><then pos:line="271" pos:column="39"> <block pos:line="271" pos:column="40">{
    <decl_stmt><decl><type><name pos:line="272" pos:column="5">bool<pos:position pos:line="272" pos:column="9"/></name></type> <name pos:line="272" pos:column="10">isWin2k<pos:position pos:line="272" pos:column="17"/></name> <init pos:line="272" pos:column="18">= <expr><call><name pos:line="272" pos:column="20">Curl_verify_windows_version<pos:position pos:line="272" pos:column="47"/></name><argument_list pos:line="272" pos:column="47">(<argument><expr><literal type="number" pos:line="272" pos:column="48">5<pos:position pos:line="272" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="272" pos:column="51">0<pos:position pos:line="272" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="272" pos:column="54">PLATFORM_WINNT<pos:position pos:line="272" pos:column="68"/></name></expr></argument>,
                                               <argument><expr><name pos:line="273" pos:column="48">VERSION_EQUAL<pos:position pos:line="273" pos:column="61"/></name></expr></argument>)<pos:position pos:line="273" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="273" pos:column="63"/></decl_stmt>

    <if pos:line="275" pos:column="5">if<condition pos:line="275" pos:column="7">(<expr><name pos:line="275" pos:column="8">isWin2k<pos:position pos:line="275" pos:column="15"/></name> <operator pos:line="275" pos:column="16">&amp;&amp;<pos:position pos:line="275" pos:column="26"/></operator> <name pos:line="275" pos:column="19">sspi_status<pos:position pos:line="275" pos:column="30"/></name> <operator pos:line="275" pos:column="31">==<pos:position pos:line="275" pos:column="33"/></operator> <name pos:line="275" pos:column="34">SEC_E_OK<pos:position pos:line="275" pos:column="42"/></name></expr>)<pos:position pos:line="275" pos:column="43"/></condition><then pos:line="275" pos:column="43">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="276" pos:column="7">BACKEND<pos:position pos:line="276" pos:column="14"/></name><operator pos:line="276" pos:column="14">-&gt;<pos:position pos:line="276" pos:column="19"/></operator><name pos:line="276" pos:column="16">recv_sspi_close_notify<pos:position pos:line="276" pos:column="38"/></name></name> <operator pos:line="276" pos:column="39">=<pos:position pos:line="276" pos:column="40"/></operator> <literal type="boolean" pos:line="276" pos:column="41">true<pos:position pos:line="276" pos:column="45"/></literal></expr>;<pos:position pos:line="276" pos:column="46"/></expr_stmt></block></then>
    <else pos:line="277" pos:column="5">else <block pos:line="277" pos:column="10">{
      <expr_stmt><expr><operator pos:line="278" pos:column="7">*<pos:position pos:line="278" pos:column="8"/></operator><name pos:line="278" pos:column="8">err<pos:position pos:line="278" pos:column="11"/></name> <operator pos:line="278" pos:column="12">=<pos:position pos:line="278" pos:column="13"/></operator> <name pos:line="278" pos:column="14">CURLE_RECV_ERROR<pos:position pos:line="278" pos:column="30"/></name></expr>;<pos:position pos:line="278" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="279" pos:column="7">infof<pos:position pos:line="279" pos:column="12"/></name><argument_list pos:line="279" pos:column="12">(<argument><expr><name pos:line="279" pos:column="13">data<pos:position pos:line="279" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="279" pos:column="19">"schannel: server closed abruptly (missing close_notify)\n"<pos:position pos:line="279" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="279" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="280" pos:column="6"/></block></else></if>
  }<pos:position pos:line="281" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="283" pos:column="3">/* Any error other than CURLE_AGAIN is an unrecoverable error. */</comment>
  <if pos:line="284" pos:column="3">if<condition pos:line="284" pos:column="5">(<expr><operator pos:line="284" pos:column="6">*<pos:position pos:line="284" pos:column="7"/></operator><name pos:line="284" pos:column="7">err<pos:position pos:line="284" pos:column="10"/></name> <operator pos:line="284" pos:column="11">&amp;&amp;<pos:position pos:line="284" pos:column="21"/></operator> <operator pos:line="284" pos:column="14">*<pos:position pos:line="284" pos:column="15"/></operator><name pos:line="284" pos:column="15">err<pos:position pos:line="284" pos:column="18"/></name> <operator pos:line="284" pos:column="19">!=<pos:position pos:line="284" pos:column="21"/></operator> <name pos:line="284" pos:column="22">CURLE_AGAIN<pos:position pos:line="284" pos:column="33"/></name></expr>)<pos:position pos:line="284" pos:column="34"/></condition><then pos:line="284" pos:column="34">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="285" pos:column="7">BACKEND<pos:position pos:line="285" pos:column="14"/></name><operator pos:line="285" pos:column="14">-&gt;<pos:position pos:line="285" pos:column="19"/></operator><name pos:line="285" pos:column="16">recv_unrecoverable_err<pos:position pos:line="285" pos:column="38"/></name></name> <operator pos:line="285" pos:column="39">=<pos:position pos:line="285" pos:column="40"/></operator> <operator pos:line="285" pos:column="41">*<pos:position pos:line="285" pos:column="42"/></operator><name pos:line="285" pos:column="42">err<pos:position pos:line="285" pos:column="45"/></name></expr>;<pos:position pos:line="285" pos:column="46"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="287" pos:column="3">size<pos:position pos:line="287" pos:column="7"/></name> <operator pos:line="287" pos:column="8">=<pos:position pos:line="287" pos:column="9"/></operator> <ternary><condition><expr><name pos:line="287" pos:column="10">len<pos:position pos:line="287" pos:column="13"/></name> <operator pos:line="287" pos:column="14">&lt;<pos:position pos:line="287" pos:column="18"/></operator> <name><name pos:line="287" pos:column="16">BACKEND<pos:position pos:line="287" pos:column="23"/></name><operator pos:line="287" pos:column="23">-&gt;<pos:position pos:line="287" pos:column="28"/></operator><name pos:line="287" pos:column="25">decdata_offset<pos:position pos:line="287" pos:column="39"/></name></name></expr> ?<pos:position pos:line="287" pos:column="41"/></condition><then pos:line="287" pos:column="41"> <expr><name pos:line="287" pos:column="42">len<pos:position pos:line="287" pos:column="45"/></name></expr> <pos:position pos:line="287" pos:column="46"/></then><else pos:line="287" pos:column="46">: <expr><name><name pos:line="287" pos:column="48">BACKEND<pos:position pos:line="287" pos:column="55"/></name><operator pos:line="287" pos:column="55">-&gt;<pos:position pos:line="287" pos:column="60"/></operator><name pos:line="287" pos:column="57">decdata_offset<pos:position pos:line="287" pos:column="71"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="287" pos:column="72"/></expr_stmt>
  <if pos:line="288" pos:column="3">if<condition pos:line="288" pos:column="5">(<expr><name pos:line="288" pos:column="6">size<pos:position pos:line="288" pos:column="10"/></name></expr>)<pos:position pos:line="288" pos:column="11"/></condition><then pos:line="288" pos:column="11"> <block pos:line="288" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="289" pos:column="5">memcpy<pos:position pos:line="289" pos:column="11"/></name><argument_list pos:line="289" pos:column="11">(<argument><expr><name pos:line="289" pos:column="12">buf<pos:position pos:line="289" pos:column="15"/></name></expr></argument>, <argument><expr><name><name pos:line="289" pos:column="17">BACKEND<pos:position pos:line="289" pos:column="24"/></name><operator pos:line="289" pos:column="24">-&gt;<pos:position pos:line="289" pos:column="29"/></operator><name pos:line="289" pos:column="26">decdata_buffer<pos:position pos:line="289" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="42">size<pos:position pos:line="289" pos:column="46"/></name></expr></argument>)<pos:position pos:line="289" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="290" pos:column="5">memmove<pos:position pos:line="290" pos:column="12"/></name><argument_list pos:line="290" pos:column="12">(<argument><expr><name><name pos:line="290" pos:column="13">BACKEND<pos:position pos:line="290" pos:column="20"/></name><operator pos:line="290" pos:column="20">-&gt;<pos:position pos:line="290" pos:column="25"/></operator><name pos:line="290" pos:column="22">decdata_buffer<pos:position pos:line="290" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="290" pos:column="38">BACKEND<pos:position pos:line="290" pos:column="45"/></name><operator pos:line="290" pos:column="45">-&gt;<pos:position pos:line="290" pos:column="50"/></operator><name pos:line="290" pos:column="47">decdata_buffer<pos:position pos:line="290" pos:column="61"/></name></name> <operator pos:line="290" pos:column="62">+<pos:position pos:line="290" pos:column="63"/></operator> <name pos:line="290" pos:column="64">size<pos:position pos:line="290" pos:column="68"/></name></expr></argument>,
            <argument><expr><name><name pos:line="291" pos:column="13">BACKEND<pos:position pos:line="291" pos:column="20"/></name><operator pos:line="291" pos:column="20">-&gt;<pos:position pos:line="291" pos:column="25"/></operator><name pos:line="291" pos:column="22">decdata_offset<pos:position pos:line="291" pos:column="36"/></name></name> <operator pos:line="291" pos:column="37">-<pos:position pos:line="291" pos:column="38"/></operator> <name pos:line="291" pos:column="39">size<pos:position pos:line="291" pos:column="43"/></name></expr></argument>)<pos:position pos:line="291" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="292" pos:column="5">BACKEND<pos:position pos:line="292" pos:column="12"/></name><operator pos:line="292" pos:column="12">-&gt;<pos:position pos:line="292" pos:column="17"/></operator><name pos:line="292" pos:column="14">decdata_offset<pos:position pos:line="292" pos:column="28"/></name></name> <operator pos:line="292" pos:column="29">-=<pos:position pos:line="292" pos:column="31"/></operator> <name pos:line="292" pos:column="32">size<pos:position pos:line="292" pos:column="36"/></name></expr>;<pos:position pos:line="292" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="294" pos:column="5">infof<pos:position pos:line="294" pos:column="10"/></name><argument_list pos:line="294" pos:column="10">(<argument><expr><name pos:line="294" pos:column="11">data<pos:position pos:line="294" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="294" pos:column="17">"schannel: decrypted data returned %zu\n"<pos:position pos:line="294" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="294" pos:column="60">size<pos:position pos:line="294" pos:column="64"/></name></expr></argument>)<pos:position pos:line="294" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="295" pos:column="5">infof<pos:position pos:line="295" pos:column="10"/></name><argument_list pos:line="295" pos:column="10">(<argument><expr><name pos:line="295" pos:column="11">data<pos:position pos:line="295" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="295" pos:column="17">"schannel: decrypted data buffer: offset %zu length %zu\n"<pos:position pos:line="295" pos:column="75"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="296" pos:column="11">BACKEND<pos:position pos:line="296" pos:column="18"/></name><operator pos:line="296" pos:column="18">-&gt;<pos:position pos:line="296" pos:column="23"/></operator><name pos:line="296" pos:column="20">decdata_offset<pos:position pos:line="296" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="296" pos:column="36">BACKEND<pos:position pos:line="296" pos:column="43"/></name><operator pos:line="296" pos:column="43">-&gt;<pos:position pos:line="296" pos:column="48"/></operator><name pos:line="296" pos:column="45">decdata_length<pos:position pos:line="296" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="296" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="297" pos:column="5">*<pos:position pos:line="297" pos:column="6"/></operator><name pos:line="297" pos:column="6">err<pos:position pos:line="297" pos:column="9"/></name> <operator pos:line="297" pos:column="10">=<pos:position pos:line="297" pos:column="11"/></operator> <name pos:line="297" pos:column="12">CURLE_OK<pos:position pos:line="297" pos:column="20"/></name></expr>;<pos:position pos:line="297" pos:column="21"/></expr_stmt>
    <return pos:line="298" pos:column="5">return <expr><operator pos:line="298" pos:column="12">(<pos:position pos:line="298" pos:column="13"/></operator><name pos:line="298" pos:column="13">ssize_t<pos:position pos:line="298" pos:column="20"/></name><operator pos:line="298" pos:column="20">)<pos:position pos:line="298" pos:column="21"/></operator><name pos:line="298" pos:column="21">size<pos:position pos:line="298" pos:column="25"/></name></expr>;<pos:position pos:line="298" pos:column="26"/></return>
  }<pos:position pos:line="299" pos:column="4"/></block></then></if>

  <if pos:line="301" pos:column="3">if<condition pos:line="301" pos:column="5">(<expr><operator pos:line="301" pos:column="6">!<pos:position pos:line="301" pos:column="7"/></operator><operator pos:line="301" pos:column="7">*<pos:position pos:line="301" pos:column="8"/></operator><name pos:line="301" pos:column="8">err<pos:position pos:line="301" pos:column="11"/></name> <operator pos:line="301" pos:column="12">&amp;&amp;<pos:position pos:line="301" pos:column="22"/></operator> <operator pos:line="301" pos:column="15">!<pos:position pos:line="301" pos:column="16"/></operator><name><name pos:line="301" pos:column="16">BACKEND<pos:position pos:line="301" pos:column="23"/></name><operator pos:line="301" pos:column="23">-&gt;<pos:position pos:line="301" pos:column="28"/></operator><name pos:line="301" pos:column="25">recv_connection_closed<pos:position pos:line="301" pos:column="47"/></name></name></expr>)<pos:position pos:line="301" pos:column="48"/></condition><then pos:line="301" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="302" pos:column="7">*<pos:position pos:line="302" pos:column="8"/></operator><name pos:line="302" pos:column="8">err<pos:position pos:line="302" pos:column="11"/></name> <operator pos:line="302" pos:column="12">=<pos:position pos:line="302" pos:column="13"/></operator> <name pos:line="302" pos:column="14">CURLE_AGAIN<pos:position pos:line="302" pos:column="25"/></name></expr>;<pos:position pos:line="302" pos:column="26"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="304" pos:column="3">/* It's debatable what to return when !len. We could return whatever error we
  got from decryption but instead we override here so the return is consistent.
  */</comment>
  <if pos:line="307" pos:column="3">if<condition pos:line="307" pos:column="5">(<expr><operator pos:line="307" pos:column="6">!<pos:position pos:line="307" pos:column="7"/></operator><name pos:line="307" pos:column="7">len<pos:position pos:line="307" pos:column="10"/></name></expr>)<pos:position pos:line="307" pos:column="11"/></condition><then pos:line="307" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="308" pos:column="5">*<pos:position pos:line="308" pos:column="6"/></operator><name pos:line="308" pos:column="6">err<pos:position pos:line="308" pos:column="9"/></name> <operator pos:line="308" pos:column="10">=<pos:position pos:line="308" pos:column="11"/></operator> <name pos:line="308" pos:column="12">CURLE_OK<pos:position pos:line="308" pos:column="20"/></name></expr>;<pos:position pos:line="308" pos:column="21"/></expr_stmt></block></then></if>

  <return pos:line="310" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="310" pos:column="10">*<pos:position pos:line="310" pos:column="11"/></operator><name pos:line="310" pos:column="11">err<pos:position pos:line="310" pos:column="14"/></name></expr> ?<pos:position pos:line="310" pos:column="16"/></condition><then pos:line="310" pos:column="16"> <expr><operator pos:line="310" pos:column="17">-<pos:position pos:line="310" pos:column="18"/></operator><literal type="number" pos:line="310" pos:column="18">1<pos:position pos:line="310" pos:column="19"/></literal></expr> <pos:position pos:line="310" pos:column="20"/></then><else pos:line="310" pos:column="20">: <expr><literal type="number" pos:line="310" pos:column="22">0<pos:position pos:line="310" pos:column="23"/></literal></expr></else></ternary></expr>;<pos:position pos:line="310" pos:column="24"/></return>
}<pos:position pos:line="311" pos:column="2"/></block></function></unit>
