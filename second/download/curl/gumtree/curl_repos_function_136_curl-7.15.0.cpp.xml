<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_136_curl-7.15.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">sockaddr_in<pos:position pos:line="3" pos:column="21"/></name></name></type> <name pos:line="3" pos:column="22">me<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">ENABLE_IPV6<pos:position pos:line="4" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">sockaddr_in6<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">me6<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="6" pos:column="8">/* ENABLE_IPV6 */</comment>

  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">tftphdr<pos:position pos:line="8" pos:column="17"/></name></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">tp<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">n<pos:position pos:line="9" pos:column="8"/></name> <init pos:line="9" pos:column="9">= <expr><literal type="number" pos:line="9" pos:column="11">0<pos:position pos:line="9" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">arg<pos:position pos:line="10" pos:column="10"/></name> <init pos:line="10" pos:column="11">= <expr><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">FILE<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">pidfile<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">pidname<pos:position pos:line="12" pos:column="16"/></name><init pos:line="12" pos:column="16">= <expr><operator pos:line="12" pos:column="18">(<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">char<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></operator><operator pos:line="12" pos:column="25">)<pos:position pos:line="12" pos:column="26"/></operator><literal type="string" pos:line="12" pos:column="26">".tftpd.pid"<pos:position pos:line="12" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">unsigned<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">short<pos:position pos:line="13" pos:column="17"/></name></type> <name pos:line="13" pos:column="18">port<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><name pos:line="13" pos:column="25">DEFAULT_PORT<pos:position pos:line="13" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">curl_socket_t<pos:position pos:line="14" pos:column="16"/></name></type> <name pos:line="14" pos:column="17">sock<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">flag<pos:position pos:line="15" pos:column="11"/></name></decl>;<pos:position pos:line="15" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">rc<pos:position pos:line="16" pos:column="9"/></name></decl>;<pos:position pos:line="16" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">testcase<pos:position pos:line="17" pos:column="18"/></name></name></type> <name pos:line="17" pos:column="19">test<pos:position pos:line="17" pos:column="23"/></name></decl>;<pos:position pos:line="17" pos:column="24"/></decl_stmt>

  <while pos:line="19" pos:column="3">while<condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">argc<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">arg<pos:position pos:line="19" pos:column="17"/></name></expr>)<pos:position pos:line="19" pos:column="18"/></condition> <block pos:line="19" pos:column="19">{
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><operator pos:line="20" pos:column="8">!<pos:position pos:line="20" pos:column="9"/></operator><call><name pos:line="20" pos:column="9">strcmp<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="string" pos:line="20" pos:column="16">"--version"<pos:position pos:line="20" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="29">argv<pos:position pos:line="20" pos:column="33"/></name><index pos:line="20" pos:column="33">[<expr><name pos:line="20" pos:column="34">arg<pos:position pos:line="20" pos:column="37"/></name></expr>]<pos:position pos:line="20" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40"> <block pos:line="20" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">printf<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><literal type="string" pos:line="21" pos:column="14">"tftpd IPv4%s\n"<pos:position pos:line="21" pos:column="30"/></literal></expr></argument>,
<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">ENABLE_IPV6<pos:position pos:line="22" pos:column="19"/></name></cpp:ifdef>
             <argument><expr><literal type="string" pos:line="23" pos:column="14">"/IPv6"<pos:position pos:line="23" pos:column="21"/></literal>
<cpp:else pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">else<pos:position pos:line="24" pos:column="6"/></cpp:directive></cpp:else>
             <literal type="string" pos:line="25" pos:column="14">""<pos:position pos:line="25" pos:column="16"/></literal></expr></argument>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
             )<pos:position pos:line="27" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="16"/></expr_stmt>
      <return pos:line="28" pos:column="7">return <expr><literal type="number" pos:line="28" pos:column="14">0<pos:position pos:line="28" pos:column="15"/></literal></expr>;<pos:position pos:line="28" pos:column="16"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then>
    <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if<condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><call><name pos:line="30" pos:column="14">strcmp<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><literal type="string" pos:line="30" pos:column="21">"--pidfile"<pos:position pos:line="30" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="34">argv<pos:position pos:line="30" pos:column="38"/></name><index pos:line="30" pos:column="38">[<expr><name pos:line="30" pos:column="39">arg<pos:position pos:line="30" pos:column="42"/></name></expr>]<pos:position pos:line="30" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="45"/></condition><then pos:line="30" pos:column="45"> <block pos:line="30" pos:column="46">{
      <expr_stmt><expr><name pos:line="31" pos:column="7">arg<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">++<pos:position pos:line="31" pos:column="12"/></operator></expr>;<pos:position pos:line="31" pos:column="13"/></expr_stmt>
      <if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><name pos:line="32" pos:column="10">argc<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">arg<pos:position pos:line="32" pos:column="18"/></name></expr>)<pos:position pos:line="32" pos:column="19"/></condition><then pos:line="32" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="9">pidname<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <name><name pos:line="33" pos:column="19">argv<pos:position pos:line="33" pos:column="23"/></name><index pos:line="33" pos:column="23">[<expr><name pos:line="33" pos:column="24">arg<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">++<pos:position pos:line="33" pos:column="29"/></operator></expr>]<pos:position pos:line="33" pos:column="30"/></index></name></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="35" pos:column="5">else <if pos:line="35" pos:column="10">if<condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><call><name pos:line="35" pos:column="14">strcmp<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><literal type="string" pos:line="35" pos:column="21">"--ipv6"<pos:position pos:line="35" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="31">argv<pos:position pos:line="35" pos:column="35"/></name><index pos:line="35" pos:column="35">[<expr><name pos:line="35" pos:column="36">arg<pos:position pos:line="35" pos:column="39"/></name></expr>]<pos:position pos:line="35" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="42"/></condition><then pos:line="35" pos:column="42"> <block pos:line="35" pos:column="43">{
<cpp:ifdef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifdef<pos:position pos:line="36" pos:column="7"/></cpp:directive> <name pos:line="36" pos:column="8">ENABLE_IPV6<pos:position pos:line="36" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="37" pos:column="7">use_ipv6<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">TRUE<pos:position pos:line="37" pos:column="20"/></name></expr>;<pos:position pos:line="37" pos:column="21"/></expr_stmt>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="39" pos:column="7">arg<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">++<pos:position pos:line="39" pos:column="12"/></operator></expr>;<pos:position pos:line="39" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="41" pos:column="5">else <if pos:line="41" pos:column="10">if<condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">argc<pos:position pos:line="41" pos:column="17"/></name><operator pos:line="41" pos:column="17">&gt;<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="18">arg<pos:position pos:line="41" pos:column="21"/></name></expr>)<pos:position pos:line="41" pos:column="22"/></condition><then pos:line="41" pos:column="22"> <block pos:line="41" pos:column="23">{

      <if pos:line="43" pos:column="7">if<condition pos:line="43" pos:column="9">(<expr><call><name pos:line="43" pos:column="10">atoi<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name><name pos:line="43" pos:column="15">argv<pos:position pos:line="43" pos:column="19"/></name><index pos:line="43" pos:column="19">[<expr><name pos:line="43" pos:column="20">arg<pos:position pos:line="43" pos:column="23"/></name></expr>]<pos:position pos:line="43" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="43" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="26"/></condition><then pos:line="43" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="9">port<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <operator pos:line="44" pos:column="16">(<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="17">unsigned<pos:position pos:line="44" pos:column="25"/></name> <name pos:line="44" pos:column="26">short<pos:position pos:line="44" pos:column="31"/></name><operator pos:line="44" pos:column="31">)<pos:position pos:line="44" pos:column="32"/></operator><call><name pos:line="44" pos:column="32">atoi<pos:position pos:line="44" pos:column="36"/></name><argument_list pos:line="44" pos:column="36">(<argument><expr><name><name pos:line="44" pos:column="37">argv<pos:position pos:line="44" pos:column="41"/></name><index pos:line="44" pos:column="41">[<expr><name pos:line="44" pos:column="42">arg<pos:position pos:line="44" pos:column="45"/></name><operator pos:line="44" pos:column="45">++<pos:position pos:line="44" pos:column="47"/></operator></expr>]<pos:position pos:line="44" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt></block></then></if>

      <if pos:line="46" pos:column="7">if<condition pos:line="46" pos:column="9">(<expr><name pos:line="46" pos:column="10">argc<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">&gt;<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="15">arg<pos:position pos:line="46" pos:column="18"/></name></expr>)<pos:position pos:line="46" pos:column="19"/></condition><then pos:line="46" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="9">path<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator> <name><name pos:line="47" pos:column="16">argv<pos:position pos:line="47" pos:column="20"/></name><index pos:line="47" pos:column="20">[<expr><name pos:line="47" pos:column="21">arg<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">++<pos:position pos:line="47" pos:column="26"/></operator></expr>]<pos:position pos:line="47" pos:column="27"/></index></name></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt></block></then></if>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="49" pos:column="4"/></block></while>

<cpp:if pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">if<pos:position pos:line="51" pos:column="4"/></cpp:directive> <expr><call><name pos:line="51" pos:column="5">defined<pos:position pos:line="51" pos:column="12"/></name><argument_list pos:line="51" pos:column="12">(<argument><expr><name pos:line="51" pos:column="13">WIN32<pos:position pos:line="51" pos:column="18"/></name></expr></argument>)<pos:position pos:line="51" pos:column="19"/></argument_list></call> <operator pos:line="51" pos:column="20">&amp;&amp;<pos:position pos:line="51" pos:column="30"/></operator> <operator pos:line="51" pos:column="23">!<pos:position pos:line="51" pos:column="24"/></operator><call><name pos:line="51" pos:column="24">defined<pos:position pos:line="51" pos:column="31"/></name><argument_list pos:line="51" pos:column="31">(<argument><expr><name pos:line="51" pos:column="32">__GNUC__<pos:position pos:line="51" pos:column="40"/></name></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call> <operator pos:line="51" pos:column="42">||<pos:position pos:line="51" pos:column="44"/></operator> <call><name pos:line="51" pos:column="45">defined<pos:position pos:line="51" pos:column="52"/></name><argument_list pos:line="51" pos:column="52">(<argument><expr><name pos:line="51" pos:column="53">__MINGW32__<pos:position pos:line="51" pos:column="64"/></name></expr></argument>)<pos:position pos:line="51" pos:column="65"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">win32_init<pos:position pos:line="52" pos:column="13"/></name><argument_list pos:line="52" pos:column="13">()<pos:position pos:line="52" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">atexit<pos:position pos:line="53" pos:column="9"/></name><argument_list pos:line="53" pos:column="9">(<argument><expr><name pos:line="53" pos:column="10">win32_cleanup<pos:position pos:line="53" pos:column="23"/></name></expr></argument>)<pos:position pos:line="53" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">ifdef<pos:position pos:line="56" pos:column="7"/></cpp:directive> <name pos:line="56" pos:column="8">ENABLE_IPV6<pos:position pos:line="56" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="57" pos:column="3">if<condition pos:line="57" pos:column="5">(<expr><operator pos:line="57" pos:column="6">!<pos:position pos:line="57" pos:column="7"/></operator><name pos:line="57" pos:column="7">use_ipv6<pos:position pos:line="57" pos:column="15"/></name></expr>)<pos:position pos:line="57" pos:column="16"/></condition><then pos:line="57" pos:column="16">
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="5">sock<pos:position pos:line="59" pos:column="9"/></name> <operator pos:line="59" pos:column="10">=<pos:position pos:line="59" pos:column="11"/></operator> <call><name pos:line="59" pos:column="12">socket<pos:position pos:line="59" pos:column="18"/></name><argument_list pos:line="59" pos:column="18">(<argument><expr><name pos:line="59" pos:column="19">AF_INET<pos:position pos:line="59" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="28">SOCK_DGRAM<pos:position pos:line="59" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="40">0<pos:position pos:line="59" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="43"/></expr_stmt></block></then>
<cpp:ifdef pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">ifdef<pos:position pos:line="60" pos:column="7"/></cpp:directive> <name pos:line="60" pos:column="8">ENABLE_IPV6<pos:position pos:line="60" pos:column="19"/></name></cpp:ifdef>
  <else pos:line="61" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="5">sock<pos:position pos:line="62" pos:column="9"/></name> <operator pos:line="62" pos:column="10">=<pos:position pos:line="62" pos:column="11"/></operator> <call><name pos:line="62" pos:column="12">socket<pos:position pos:line="62" pos:column="18"/></name><argument_list pos:line="62" pos:column="18">(<argument><expr><name pos:line="62" pos:column="19">AF_INET6<pos:position pos:line="62" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="29">SOCK_DGRAM<pos:position pos:line="62" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="41">0<pos:position pos:line="62" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="44"/></expr_stmt></block></else></if>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><name pos:line="65" pos:column="7">sock<pos:position pos:line="65" pos:column="11"/></name> <operator pos:line="65" pos:column="12">&lt;<pos:position pos:line="65" pos:column="16"/></operator> <literal type="number" pos:line="65" pos:column="14">0<pos:position pos:line="65" pos:column="15"/></literal></expr>)<pos:position pos:line="65" pos:column="16"/></condition><then pos:line="65" pos:column="16"> <block pos:line="65" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">perror<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><literal type="string" pos:line="66" pos:column="12">"opening stream socket"<pos:position pos:line="66" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">logmsg<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><literal type="string" pos:line="67" pos:column="12">"Error opening socket"<pos:position pos:line="67" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">exit<pos:position pos:line="68" pos:column="9"/></name><argument_list pos:line="68" pos:column="9">(<argument><expr><literal type="number" pos:line="68" pos:column="10">1<pos:position pos:line="68" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="71" pos:column="3">flag<pos:position pos:line="71" pos:column="7"/></name> <operator pos:line="71" pos:column="8">=<pos:position pos:line="71" pos:column="9"/></operator> <literal type="number" pos:line="71" pos:column="10">1<pos:position pos:line="71" pos:column="11"/></literal></expr>;<pos:position pos:line="71" pos:column="12"/></expr_stmt>
  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><call><name pos:line="72" pos:column="7">setsockopt<pos:position pos:line="72" pos:column="17"/></name>
      <argument_list pos:line="73" pos:column="7">(<argument><expr><name pos:line="73" pos:column="8">sock<pos:position pos:line="73" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="14">SOL_SOCKET<pos:position pos:line="73" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="26">SO_REUSEADDR<pos:position pos:line="73" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="40">(<pos:position pos:line="73" pos:column="41"/></operator><specifier pos:line="73" pos:column="41">const<pos:position pos:line="73" pos:column="46"/></specifier> <name pos:line="73" pos:column="47">void<pos:position pos:line="73" pos:column="51"/></name> <operator pos:line="73" pos:column="52">*<pos:position pos:line="73" pos:column="53"/></operator><operator pos:line="73" pos:column="53">)<pos:position pos:line="73" pos:column="54"/></operator> <operator pos:line="73" pos:column="55">&amp;<pos:position pos:line="73" pos:column="60"/></operator><name pos:line="73" pos:column="56">flag<pos:position pos:line="73" pos:column="60"/></name></expr></argument>,
       <argument><expr><sizeof pos:line="74" pos:column="8">sizeof<argument_list pos:line="74" pos:column="14">(<argument><expr><name pos:line="74" pos:column="15">int<pos:position pos:line="74" pos:column="18"/></name></expr></argument>)<pos:position pos:line="74" pos:column="19"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="20"/></argument_list></call> <operator pos:line="74" pos:column="21">&lt;<pos:position pos:line="74" pos:column="25"/></operator> <literal type="number" pos:line="74" pos:column="23">0<pos:position pos:line="74" pos:column="24"/></literal></expr>)<pos:position pos:line="74" pos:column="25"/></condition><then pos:line="74" pos:column="25"> <block pos:line="74" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">perror<pos:position pos:line="75" pos:column="11"/></name><argument_list pos:line="75" pos:column="11">(<argument><expr><literal type="string" pos:line="75" pos:column="12">"setsockopt(SO_REUSEADDR)"<pos:position pos:line="75" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="76" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifdef<pos:position pos:line="78" pos:column="7"/></cpp:directive> <name pos:line="78" pos:column="8">ENABLE_IPV6<pos:position pos:line="78" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="79" pos:column="3">if<condition pos:line="79" pos:column="5">(<expr><operator pos:line="79" pos:column="6">!<pos:position pos:line="79" pos:column="7"/></operator><name pos:line="79" pos:column="7">use_ipv6<pos:position pos:line="79" pos:column="15"/></name></expr>)<pos:position pos:line="79" pos:column="16"/></condition><then pos:line="79" pos:column="16"> <block pos:line="79" pos:column="17">{
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name pos:line="81" pos:column="5">me<pos:position pos:line="81" pos:column="7"/></name><operator pos:line="81" pos:column="7">.<pos:position pos:line="81" pos:column="8"/></operator><name pos:line="81" pos:column="8">sin_family<pos:position pos:line="81" pos:column="18"/></name></name> <operator pos:line="81" pos:column="19">=<pos:position pos:line="81" pos:column="20"/></operator> <name pos:line="81" pos:column="21">AF_INET<pos:position pos:line="81" pos:column="28"/></name></expr>;<pos:position pos:line="81" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="82" pos:column="5">me<pos:position pos:line="82" pos:column="7"/></name><operator pos:line="82" pos:column="7">.<pos:position pos:line="82" pos:column="8"/></operator><name pos:line="82" pos:column="8">sin_addr<pos:position pos:line="82" pos:column="16"/></name><operator pos:line="82" pos:column="16">.<pos:position pos:line="82" pos:column="17"/></operator><name pos:line="82" pos:column="17">s_addr<pos:position pos:line="82" pos:column="23"/></name></name> <operator pos:line="82" pos:column="24">=<pos:position pos:line="82" pos:column="25"/></operator> <name pos:line="82" pos:column="26">INADDR_ANY<pos:position pos:line="82" pos:column="36"/></name></expr>;<pos:position pos:line="82" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="83" pos:column="5">me<pos:position pos:line="83" pos:column="7"/></name><operator pos:line="83" pos:column="7">.<pos:position pos:line="83" pos:column="8"/></operator><name pos:line="83" pos:column="8">sin_port<pos:position pos:line="83" pos:column="16"/></name></name> <operator pos:line="83" pos:column="17">=<pos:position pos:line="83" pos:column="18"/></operator> <call><name pos:line="83" pos:column="19">htons<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><name pos:line="83" pos:column="25">port<pos:position pos:line="83" pos:column="29"/></name></expr></argument>)<pos:position pos:line="83" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="84" pos:column="5">rc<pos:position pos:line="84" pos:column="7"/></name> <operator pos:line="84" pos:column="8">=<pos:position pos:line="84" pos:column="9"/></operator> <call><name pos:line="84" pos:column="10">bind<pos:position pos:line="84" pos:column="14"/></name><argument_list pos:line="84" pos:column="14">(<argument><expr><name pos:line="84" pos:column="15">sock<pos:position pos:line="84" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="21">(<pos:position pos:line="84" pos:column="22"/></operator>struct <name pos:line="84" pos:column="29">sockaddr<pos:position pos:line="84" pos:column="37"/></name> <operator pos:line="84" pos:column="38">*<pos:position pos:line="84" pos:column="39"/></operator><operator pos:line="84" pos:column="39">)<pos:position pos:line="84" pos:column="40"/></operator> <operator pos:line="84" pos:column="41">&amp;<pos:position pos:line="84" pos:column="46"/></operator><name pos:line="84" pos:column="42">me<pos:position pos:line="84" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="84" pos:column="46">sizeof<argument_list pos:line="84" pos:column="52">(<argument><expr><name pos:line="84" pos:column="53">me<pos:position pos:line="84" pos:column="55"/></name></expr></argument>)<pos:position pos:line="84" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="84" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="58"/></expr_stmt>
<cpp:ifdef pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">ifdef<pos:position pos:line="85" pos:column="7"/></cpp:directive> <name pos:line="85" pos:column="8">ENABLE_IPV6<pos:position pos:line="85" pos:column="19"/></name></cpp:ifdef>
  }<pos:position pos:line="86" pos:column="4"/></block></then>
  <else pos:line="87" pos:column="3">else <block pos:line="87" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">memset<pos:position pos:line="88" pos:column="11"/></name><argument_list pos:line="88" pos:column="11">(<argument><expr><operator pos:line="88" pos:column="12">&amp;<pos:position pos:line="88" pos:column="17"/></operator><name pos:line="88" pos:column="13">me6<pos:position pos:line="88" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="18">0<pos:position pos:line="88" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="88" pos:column="21">sizeof<argument_list pos:line="88" pos:column="27">(<argument><expr pos:line="88" pos:column="28">struct <name pos:line="88" pos:column="35">sockaddr_in6<pos:position pos:line="88" pos:column="47"/></name></expr></argument>)<pos:position pos:line="88" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="88" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="89" pos:column="5">me6<pos:position pos:line="89" pos:column="8"/></name><operator pos:line="89" pos:column="8">.<pos:position pos:line="89" pos:column="9"/></operator><name pos:line="89" pos:column="9">sin6_family<pos:position pos:line="89" pos:column="20"/></name></name> <operator pos:line="89" pos:column="21">=<pos:position pos:line="89" pos:column="22"/></operator> <name pos:line="89" pos:column="23">AF_INET6<pos:position pos:line="89" pos:column="31"/></name></expr>;<pos:position pos:line="89" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="90" pos:column="5">me6<pos:position pos:line="90" pos:column="8"/></name><operator pos:line="90" pos:column="8">.<pos:position pos:line="90" pos:column="9"/></operator><name pos:line="90" pos:column="9">sin6_addr<pos:position pos:line="90" pos:column="18"/></name></name> <operator pos:line="90" pos:column="19">=<pos:position pos:line="90" pos:column="20"/></operator> <name pos:line="90" pos:column="21">in6addr_any<pos:position pos:line="90" pos:column="32"/></name></expr>;<pos:position pos:line="90" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">me6<pos:position pos:line="91" pos:column="8"/></name><operator pos:line="91" pos:column="8">.<pos:position pos:line="91" pos:column="9"/></operator><name pos:line="91" pos:column="9">sin6_port<pos:position pos:line="91" pos:column="18"/></name></name> <operator pos:line="91" pos:column="19">=<pos:position pos:line="91" pos:column="20"/></operator> <call><name pos:line="91" pos:column="21">htons<pos:position pos:line="91" pos:column="26"/></name><argument_list pos:line="91" pos:column="26">(<argument><expr><name pos:line="91" pos:column="27">port<pos:position pos:line="91" pos:column="31"/></name></expr></argument>)<pos:position pos:line="91" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="92" pos:column="5">rc<pos:position pos:line="92" pos:column="7"/></name> <operator pos:line="92" pos:column="8">=<pos:position pos:line="92" pos:column="9"/></operator> <call><name pos:line="92" pos:column="10">bind<pos:position pos:line="92" pos:column="14"/></name><argument_list pos:line="92" pos:column="14">(<argument><expr><name pos:line="92" pos:column="15">sock<pos:position pos:line="92" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="92" pos:column="21">(<pos:position pos:line="92" pos:column="22"/></operator>struct <name pos:line="92" pos:column="29">sockaddr<pos:position pos:line="92" pos:column="37"/></name> <operator pos:line="92" pos:column="38">*<pos:position pos:line="92" pos:column="39"/></operator><operator pos:line="92" pos:column="39">)<pos:position pos:line="92" pos:column="40"/></operator> <operator pos:line="92" pos:column="41">&amp;<pos:position pos:line="92" pos:column="46"/></operator><name pos:line="92" pos:column="42">me6<pos:position pos:line="92" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="47">sizeof<argument_list pos:line="92" pos:column="53">(<argument><expr><name pos:line="92" pos:column="54">me6<pos:position pos:line="92" pos:column="57"/></name></expr></argument>)<pos:position pos:line="92" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="60"/></expr_stmt>
  }<pos:position pos:line="93" pos:column="4"/></block></else></if>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="94" pos:column="8">/* ENABLE_IPV6 */</comment>
  <if pos:line="95" pos:column="3">if<condition pos:line="95" pos:column="5">(<expr><name pos:line="95" pos:column="6">rc<pos:position pos:line="95" pos:column="8"/></name> <operator pos:line="95" pos:column="9">&lt;<pos:position pos:line="95" pos:column="13"/></operator> <literal type="number" pos:line="95" pos:column="11">0<pos:position pos:line="95" pos:column="12"/></literal></expr>)<pos:position pos:line="95" pos:column="13"/></condition><then pos:line="95" pos:column="13"> <block pos:line="95" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">perror<pos:position pos:line="96" pos:column="11"/></name><argument_list pos:line="96" pos:column="11">(<argument><expr><literal type="string" pos:line="96" pos:column="12">"binding stream socket"<pos:position pos:line="96" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">logmsg<pos:position pos:line="97" pos:column="11"/></name><argument_list pos:line="97" pos:column="11">(<argument><expr><literal type="string" pos:line="97" pos:column="12">"Error binding socket"<pos:position pos:line="97" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">exit<pos:position pos:line="98" pos:column="9"/></name><argument_list pos:line="98" pos:column="9">(<argument><expr><literal type="number" pos:line="98" pos:column="10">1<pos:position pos:line="98" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="99" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="101" pos:column="3">pidfile<pos:position pos:line="101" pos:column="10"/></name> <operator pos:line="101" pos:column="11">=<pos:position pos:line="101" pos:column="12"/></operator> <call><name pos:line="101" pos:column="13">fopen<pos:position pos:line="101" pos:column="18"/></name><argument_list pos:line="101" pos:column="18">(<argument><expr><name pos:line="101" pos:column="19">pidname<pos:position pos:line="101" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="28">"w"<pos:position pos:line="101" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="33"/></expr_stmt>
  <if pos:line="102" pos:column="3">if<condition pos:line="102" pos:column="5">(<expr><name pos:line="102" pos:column="6">pidfile<pos:position pos:line="102" pos:column="13"/></name></expr>)<pos:position pos:line="102" pos:column="14"/></condition><then pos:line="102" pos:column="14"> <block pos:line="102" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">fprintf<pos:position pos:line="103" pos:column="12"/></name><argument_list pos:line="103" pos:column="12">(<argument><expr><name pos:line="103" pos:column="13">pidfile<pos:position pos:line="103" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="22">"%d\n"<pos:position pos:line="103" pos:column="28"/></literal></expr></argument>, <argument><expr><operator pos:line="103" pos:column="30">(<pos:position pos:line="103" pos:column="31"/></operator><name pos:line="103" pos:column="31">int<pos:position pos:line="103" pos:column="34"/></name><operator pos:line="103" pos:column="34">)<pos:position pos:line="103" pos:column="35"/></operator><call><name pos:line="103" pos:column="35">getpid<pos:position pos:line="103" pos:column="41"/></name><argument_list pos:line="103" pos:column="41">()<pos:position pos:line="103" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="103" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">fclose<pos:position pos:line="104" pos:column="11"/></name><argument_list pos:line="104" pos:column="11">(<argument><expr><name pos:line="104" pos:column="12">pidfile<pos:position pos:line="104" pos:column="19"/></name></expr></argument>)<pos:position pos:line="104" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="105" pos:column="4"/></block></then>
  <else pos:line="106" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="107" pos:column="5">fprintf<pos:position pos:line="107" pos:column="12"/></name><argument_list pos:line="107" pos:column="12">(<argument><expr><name pos:line="107" pos:column="13">stderr<pos:position pos:line="107" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="21">"Couldn't write pid file\n"<pos:position pos:line="107" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="50"/></expr_stmt></block></else></if>

  <expr_stmt><expr><call><name pos:line="109" pos:column="3">logmsg<pos:position pos:line="109" pos:column="9"/></name><argument_list pos:line="109" pos:column="9">(<argument><expr><literal type="string" pos:line="109" pos:column="10">"Running IPv%d version on port UDP/%d"<pos:position pos:line="109" pos:column="48"/></literal></expr></argument>,
<cpp:ifdef pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">ifdef<pos:position pos:line="110" pos:column="7"/></cpp:directive> <name pos:line="110" pos:column="8">ENABLE_IPV6<pos:position pos:line="110" pos:column="19"/></name></cpp:ifdef>
         <argument><expr><operator pos:line="111" pos:column="10">(<pos:position pos:line="111" pos:column="11"/></operator><ternary><condition><expr><name pos:line="111" pos:column="11">use_ipv6<pos:position pos:line="111" pos:column="19"/></name></expr>?<pos:position pos:line="111" pos:column="20"/></condition><then><expr><literal type="number" pos:line="111" pos:column="20">6<pos:position pos:line="111" pos:column="21"/></literal></expr></then><else pos:line="111" pos:column="21">:<expr><literal type="number" pos:line="111" pos:column="22">4<pos:position pos:line="111" pos:column="23"/></literal></expr></else></ternary><operator pos:line="111" pos:column="23">)<pos:position pos:line="111" pos:column="24"/></operator>
<cpp:else pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">else<pos:position pos:line="112" pos:column="6"/></cpp:directive></cpp:else>
         <literal type="number" pos:line="113" pos:column="10">4<pos:position pos:line="113" pos:column="11"/></literal></expr></argument>
<cpp:endif pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">endif<pos:position pos:line="114" pos:column="7"/></cpp:directive></cpp:endif>
         , <argument><expr><name pos:line="115" pos:column="12">port<pos:position pos:line="115" pos:column="16"/></name></expr></argument> )<pos:position pos:line="115" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="19"/></expr_stmt>

  <do pos:line="117" pos:column="3">do <block pos:line="117" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="118" pos:column="5">FILE<pos:position pos:line="118" pos:column="9"/></name> <modifier pos:line="118" pos:column="10">*<pos:position pos:line="118" pos:column="11"/></modifier></type><name pos:line="118" pos:column="11">server<pos:position pos:line="118" pos:column="17"/></name></decl>;<pos:position pos:line="118" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><name pos:line="120" pos:column="5">fromlen<pos:position pos:line="120" pos:column="12"/></name> <operator pos:line="120" pos:column="13">=<pos:position pos:line="120" pos:column="14"/></operator> <sizeof pos:line="120" pos:column="15">sizeof<argument_list pos:line="120" pos:column="21">(<argument><expr><name pos:line="120" pos:column="22">from<pos:position pos:line="120" pos:column="26"/></name></expr></argument>)<pos:position pos:line="120" pos:column="27"/></argument_list></sizeof></expr>;<pos:position pos:line="120" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="121" pos:column="5">n<pos:position pos:line="121" pos:column="6"/></name> <operator pos:line="121" pos:column="7">=<pos:position pos:line="121" pos:column="8"/></operator> <call><name pos:line="121" pos:column="9">recvfrom<pos:position pos:line="121" pos:column="17"/></name><argument_list pos:line="121" pos:column="17">(<argument><expr><name pos:line="121" pos:column="18">sock<pos:position pos:line="121" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="24">buf<pos:position pos:line="121" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="121" pos:column="29">sizeof <argument_list pos:line="121" pos:column="36">(<argument><expr><name pos:line="121" pos:column="37">buf<pos:position pos:line="121" pos:column="40"/></name></expr></argument>)<pos:position pos:line="121" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="121" pos:column="43">0<pos:position pos:line="121" pos:column="44"/></literal></expr></argument>,
                 <argument><expr><operator pos:line="122" pos:column="18">(<pos:position pos:line="122" pos:column="19"/></operator>struct <name pos:line="122" pos:column="26">sockaddr<pos:position pos:line="122" pos:column="34"/></name> <operator pos:line="122" pos:column="35">*<pos:position pos:line="122" pos:column="36"/></operator><operator pos:line="122" pos:column="36">)<pos:position pos:line="122" pos:column="37"/></operator><operator pos:line="122" pos:column="37">&amp;<pos:position pos:line="122" pos:column="42"/></operator><name pos:line="122" pos:column="38">from<pos:position pos:line="122" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="122" pos:column="44">&amp;<pos:position pos:line="122" pos:column="49"/></operator><name pos:line="122" pos:column="45">fromlen<pos:position pos:line="122" pos:column="52"/></name></expr></argument>)<pos:position pos:line="122" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="54"/></expr_stmt>
    <if pos:line="123" pos:column="5">if <condition pos:line="123" pos:column="8">(<expr><name pos:line="123" pos:column="9">n<pos:position pos:line="123" pos:column="10"/></name> <operator pos:line="123" pos:column="11">&lt;<pos:position pos:line="123" pos:column="15"/></operator> <literal type="number" pos:line="123" pos:column="13">0<pos:position pos:line="123" pos:column="14"/></literal></expr>)<pos:position pos:line="123" pos:column="15"/></condition><then pos:line="123" pos:column="15"> <block pos:line="123" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="124" pos:column="7">logmsg<pos:position pos:line="124" pos:column="13"/></name><argument_list pos:line="124" pos:column="13">(<argument><expr><literal type="string" pos:line="124" pos:column="14">"recvfrom:\n"<pos:position pos:line="124" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="29"/></expr_stmt>
      <return pos:line="125" pos:column="7">return <expr><literal type="number" pos:line="125" pos:column="14">3<pos:position pos:line="125" pos:column="15"/></literal></expr>;<pos:position pos:line="125" pos:column="16"/></return>
    }<pos:position pos:line="126" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="128" pos:column="5">from<pos:position pos:line="128" pos:column="9"/></name><operator pos:line="128" pos:column="9">.<pos:position pos:line="128" pos:column="10"/></operator><name pos:line="128" pos:column="10">sin_family<pos:position pos:line="128" pos:column="20"/></name></name> <operator pos:line="128" pos:column="21">=<pos:position pos:line="128" pos:column="22"/></operator> <name pos:line="128" pos:column="23">AF_INET<pos:position pos:line="128" pos:column="30"/></name></expr>;<pos:position pos:line="128" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><name pos:line="130" pos:column="5">peer<pos:position pos:line="130" pos:column="9"/></name> <operator pos:line="130" pos:column="10">=<pos:position pos:line="130" pos:column="11"/></operator> <call><name pos:line="130" pos:column="12">socket<pos:position pos:line="130" pos:column="18"/></name><argument_list pos:line="130" pos:column="18">(<argument><expr><name pos:line="130" pos:column="19">AF_INET<pos:position pos:line="130" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="28">SOCK_DGRAM<pos:position pos:line="130" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="40">0<pos:position pos:line="130" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="43"/></expr_stmt>
    <if pos:line="131" pos:column="5">if <condition pos:line="131" pos:column="8">(<expr><name pos:line="131" pos:column="9">peer<pos:position pos:line="131" pos:column="13"/></name> <operator pos:line="131" pos:column="14">&lt;<pos:position pos:line="131" pos:column="18"/></operator> <literal type="number" pos:line="131" pos:column="16">0<pos:position pos:line="131" pos:column="17"/></literal></expr>)<pos:position pos:line="131" pos:column="18"/></condition><then pos:line="131" pos:column="18"> <block pos:line="131" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="132" pos:column="7">logmsg<pos:position pos:line="132" pos:column="13"/></name><argument_list pos:line="132" pos:column="13">(<argument><expr><literal type="string" pos:line="132" pos:column="14">"socket:\n"<pos:position pos:line="132" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="27"/></expr_stmt>
      <return pos:line="133" pos:column="7">return <expr><literal type="number" pos:line="133" pos:column="14">2<pos:position pos:line="133" pos:column="15"/></literal></expr>;<pos:position pos:line="133" pos:column="16"/></return>
    }<pos:position pos:line="134" pos:column="6"/></block></then></if>

    <if pos:line="136" pos:column="5">if <condition pos:line="136" pos:column="8">(<expr><call><name pos:line="136" pos:column="9">connect<pos:position pos:line="136" pos:column="16"/></name><argument_list pos:line="136" pos:column="16">(<argument><expr><name pos:line="136" pos:column="17">peer<pos:position pos:line="136" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="136" pos:column="23">(<pos:position pos:line="136" pos:column="24"/></operator>struct <name pos:line="136" pos:column="31">sockaddr<pos:position pos:line="136" pos:column="39"/></name> <operator pos:line="136" pos:column="40">*<pos:position pos:line="136" pos:column="41"/></operator><operator pos:line="136" pos:column="41">)<pos:position pos:line="136" pos:column="42"/></operator><operator pos:line="136" pos:column="42">&amp;<pos:position pos:line="136" pos:column="47"/></operator><name pos:line="136" pos:column="43">from<pos:position pos:line="136" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="136" pos:column="49">sizeof<argument_list pos:line="136" pos:column="55">(<argument><expr><name pos:line="136" pos:column="56">from<pos:position pos:line="136" pos:column="60"/></name></expr></argument>)<pos:position pos:line="136" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="136" pos:column="62"/></argument_list></call> <operator pos:line="136" pos:column="63">&lt;<pos:position pos:line="136" pos:column="67"/></operator> <literal type="number" pos:line="136" pos:column="65">0<pos:position pos:line="136" pos:column="66"/></literal></expr>)<pos:position pos:line="136" pos:column="67"/></condition><then pos:line="136" pos:column="67"> <block pos:line="136" pos:column="68">{
      <expr_stmt><expr><call><name pos:line="137" pos:column="7">logmsg<pos:position pos:line="137" pos:column="13"/></name><argument_list pos:line="137" pos:column="13">(<argument><expr><literal type="string" pos:line="137" pos:column="14">"connect: fail\n"<pos:position pos:line="137" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="33"/></expr_stmt>
      <return pos:line="138" pos:column="7">return <expr><literal type="number" pos:line="138" pos:column="14">1<pos:position pos:line="138" pos:column="15"/></literal></expr>;<pos:position pos:line="138" pos:column="16"/></return>
    }<pos:position pos:line="139" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="140" pos:column="5">maxtimeout<pos:position pos:line="140" pos:column="15"/></name> <operator pos:line="140" pos:column="16">=<pos:position pos:line="140" pos:column="17"/></operator> <literal type="number" pos:line="140" pos:column="18">5<pos:position pos:line="140" pos:column="19"/></literal><operator pos:line="140" pos:column="19">*<pos:position pos:line="140" pos:column="20"/></operator><name pos:line="140" pos:column="20">TIMEOUT<pos:position pos:line="140" pos:column="27"/></name></expr>;<pos:position pos:line="140" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name pos:line="142" pos:column="5">tp<pos:position pos:line="142" pos:column="7"/></name> <operator pos:line="142" pos:column="8">=<pos:position pos:line="142" pos:column="9"/></operator> <operator pos:line="142" pos:column="10">(<pos:position pos:line="142" pos:column="11"/></operator>struct <name pos:line="142" pos:column="18">tftphdr<pos:position pos:line="142" pos:column="25"/></name> <operator pos:line="142" pos:column="26">*<pos:position pos:line="142" pos:column="27"/></operator><operator pos:line="142" pos:column="27">)<pos:position pos:line="142" pos:column="28"/></operator><name pos:line="142" pos:column="28">buf<pos:position pos:line="142" pos:column="31"/></name></expr>;<pos:position pos:line="142" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="143" pos:column="5">tp<pos:position pos:line="143" pos:column="7"/></name><operator pos:line="143" pos:column="7">-&gt;<pos:position pos:line="143" pos:column="12"/></operator><name pos:line="143" pos:column="9">th_opcode<pos:position pos:line="143" pos:column="18"/></name></name> <operator pos:line="143" pos:column="19">=<pos:position pos:line="143" pos:column="20"/></operator> <call><name pos:line="143" pos:column="21">ntohs<pos:position pos:line="143" pos:column="26"/></name><argument_list pos:line="143" pos:column="26">(<argument><expr><name><name pos:line="143" pos:column="27">tp<pos:position pos:line="143" pos:column="29"/></name><operator pos:line="143" pos:column="29">-&gt;<pos:position pos:line="143" pos:column="34"/></operator><name pos:line="143" pos:column="31">th_opcode<pos:position pos:line="143" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="42"/></expr_stmt>
    <if pos:line="144" pos:column="5">if <condition pos:line="144" pos:column="8">(<expr><name><name pos:line="144" pos:column="9">tp<pos:position pos:line="144" pos:column="11"/></name><operator pos:line="144" pos:column="11">-&gt;<pos:position pos:line="144" pos:column="16"/></operator><name pos:line="144" pos:column="13">th_opcode<pos:position pos:line="144" pos:column="22"/></name></name> <operator pos:line="144" pos:column="23">==<pos:position pos:line="144" pos:column="25"/></operator> <name pos:line="144" pos:column="26">RRQ<pos:position pos:line="144" pos:column="29"/></name> <operator pos:line="144" pos:column="30">||<pos:position pos:line="144" pos:column="32"/></operator> <name><name pos:line="144" pos:column="33">tp<pos:position pos:line="144" pos:column="35"/></name><operator pos:line="144" pos:column="35">-&gt;<pos:position pos:line="144" pos:column="40"/></operator><name pos:line="144" pos:column="37">th_opcode<pos:position pos:line="144" pos:column="46"/></name></name> <operator pos:line="144" pos:column="47">==<pos:position pos:line="144" pos:column="49"/></operator> <name pos:line="144" pos:column="50">WRQ<pos:position pos:line="144" pos:column="53"/></name></expr>)<pos:position pos:line="144" pos:column="54"/></condition><then pos:line="144" pos:column="54"> <block pos:line="144" pos:column="55">{
      <expr_stmt><expr><call><name pos:line="145" pos:column="7">memset<pos:position pos:line="145" pos:column="13"/></name><argument_list pos:line="145" pos:column="13">(<argument><expr><operator pos:line="145" pos:column="14">&amp;<pos:position pos:line="145" pos:column="19"/></operator><name pos:line="145" pos:column="15">test<pos:position pos:line="145" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="145" pos:column="21">0<pos:position pos:line="145" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="145" pos:column="24">sizeof<argument_list pos:line="145" pos:column="30">(<argument><expr><name pos:line="145" pos:column="31">test<pos:position pos:line="145" pos:column="35"/></name></expr></argument>)<pos:position pos:line="145" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="145" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="146" pos:column="7">server<pos:position pos:line="146" pos:column="13"/></name> <operator pos:line="146" pos:column="14">=<pos:position pos:line="146" pos:column="15"/></operator> <call><name pos:line="146" pos:column="16">fopen<pos:position pos:line="146" pos:column="21"/></name><argument_list pos:line="146" pos:column="21">(<argument><expr><name pos:line="146" pos:column="22">REQUEST_DUMP<pos:position pos:line="146" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="36">"ab"<pos:position pos:line="146" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="42"/></expr_stmt>
      <if pos:line="147" pos:column="7">if<condition pos:line="147" pos:column="9">(<expr><operator pos:line="147" pos:column="10">!<pos:position pos:line="147" pos:column="11"/></operator><name pos:line="147" pos:column="11">server<pos:position pos:line="147" pos:column="17"/></name></expr>)<pos:position pos:line="147" pos:column="18"/></condition><then pos:line="147" pos:column="18">
        <block type="pseudo"><break pos:line="148" pos:column="9">break;<pos:position pos:line="148" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><name><name pos:line="149" pos:column="7">test<pos:position pos:line="149" pos:column="11"/></name><operator pos:line="149" pos:column="11">.<pos:position pos:line="149" pos:column="12"/></operator><name pos:line="149" pos:column="12">server<pos:position pos:line="149" pos:column="18"/></name></name> <operator pos:line="149" pos:column="19">=<pos:position pos:line="149" pos:column="20"/></operator> <name pos:line="149" pos:column="21">server<pos:position pos:line="149" pos:column="27"/></name></expr>;<pos:position pos:line="149" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="150" pos:column="7">tftp<pos:position pos:line="150" pos:column="11"/></name><argument_list pos:line="150" pos:column="11">(<argument><expr><operator pos:line="150" pos:column="12">&amp;<pos:position pos:line="150" pos:column="17"/></operator><name pos:line="150" pos:column="13">test<pos:position pos:line="150" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="19">tp<pos:position pos:line="150" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="23">n<pos:position pos:line="150" pos:column="24"/></name></expr></argument>)<pos:position pos:line="150" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="26"/></expr_stmt>
      <if pos:line="151" pos:column="7">if<condition pos:line="151" pos:column="9">(<expr><name><name pos:line="151" pos:column="10">test<pos:position pos:line="151" pos:column="14"/></name><operator pos:line="151" pos:column="14">.<pos:position pos:line="151" pos:column="15"/></operator><name pos:line="151" pos:column="15">buffer<pos:position pos:line="151" pos:column="21"/></name></name></expr>)<pos:position pos:line="151" pos:column="22"/></condition><then pos:line="151" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="152" pos:column="9">free<pos:position pos:line="152" pos:column="13"/></name><argument_list pos:line="152" pos:column="13">(<argument><expr><name><name pos:line="152" pos:column="14">test<pos:position pos:line="152" pos:column="18"/></name><operator pos:line="152" pos:column="18">.<pos:position pos:line="152" pos:column="19"/></operator><name pos:line="152" pos:column="19">buffer<pos:position pos:line="152" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="152" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="27"/></expr_stmt></block></then></if>
    }<pos:position pos:line="153" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="154" pos:column="5">fclose<pos:position pos:line="154" pos:column="11"/></name><argument_list pos:line="154" pos:column="11">(<argument><expr><name pos:line="154" pos:column="12">server<pos:position pos:line="154" pos:column="18"/></name></expr></argument>)<pos:position pos:line="154" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="155" pos:column="5">sclose<pos:position pos:line="155" pos:column="11"/></name><argument_list pos:line="155" pos:column="11">(<argument><expr><name pos:line="155" pos:column="12">peer<pos:position pos:line="155" pos:column="16"/></name></expr></argument>)<pos:position pos:line="155" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="156" pos:column="4"/></block> while<condition pos:line="156" pos:column="10">(<expr><literal type="number" pos:line="156" pos:column="11">1<pos:position pos:line="156" pos:column="12"/></literal></expr>)<pos:position pos:line="156" pos:column="13"/></condition>;<pos:position pos:line="156" pos:column="14"/></do>
  <return pos:line="157" pos:column="3">return <expr><literal type="number" pos:line="157" pos:column="10">0<pos:position pos:line="157" pos:column="11"/></literal></expr>;<pos:position pos:line="157" pos:column="12"/></return>
}<pos:position pos:line="158" pos:column="2"/></block></function></unit>
