<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_566_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_docalloc<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">size_t<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">wanted_elements<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">size_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">wanted_size<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">line<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">source<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">memdebug<pos:position pos:line="4" pos:column="18"/></name></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">mem<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">size<pos:position pos:line="5" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="16">user_size<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><call><name pos:line="7" pos:column="6">countcheck<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><literal type="string" pos:line="7" pos:column="17">"calloc"<pos:position pos:line="7" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="27">line<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="33">source<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="41"/></condition><then pos:line="7" pos:column="41">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">NULL<pos:position pos:line="8" pos:column="16"/></name></expr>;<pos:position pos:line="8" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="10" pos:column="3">/* alloc at least 64 bytes */</comment>
  <expr_stmt><expr><name pos:line="11" pos:column="3">user_size<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name pos:line="11" pos:column="15">wanted_size<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">*<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="29">wanted_elements<pos:position pos:line="11" pos:column="44"/></name></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">size<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <sizeof pos:line="12" pos:column="10">sizeof<argument_list pos:line="12" pos:column="16">(<argument><expr pos:line="12" pos:column="17">struct <name pos:line="12" pos:column="24">memdebug<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></sizeof> <operator pos:line="12" pos:column="34">+<pos:position pos:line="12" pos:column="35"/></operator> <name pos:line="12" pos:column="36">user_size<pos:position pos:line="12" pos:column="45"/></name></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">mem<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <operator pos:line="14" pos:column="9">(<pos:position pos:line="14" pos:column="10"/></operator>struct <name pos:line="14" pos:column="17">memdebug<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">*<pos:position pos:line="14" pos:column="27"/></operator><operator pos:line="14" pos:column="27">)<pos:position pos:line="14" pos:column="28"/></operator><call pos:line="14" pos:column="28">(<name pos:line="14" pos:column="29">Curl_cmalloc<pos:position pos:line="14" pos:column="41"/></name>)<argument_list pos:line="14" pos:column="42">(<argument><expr><name pos:line="14" pos:column="43">size<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name pos:line="15" pos:column="6">mem<pos:position pos:line="15" pos:column="9"/></name></expr>)<pos:position pos:line="15" pos:column="10"/></condition><then pos:line="15" pos:column="10"> <block pos:line="15" pos:column="11">{
    <comment type="block" pos:line="16" pos:column="5">/* fill memory with zeroes */</comment>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">memset<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name><name pos:line="17" pos:column="12">mem<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">-&gt;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="17">mem<pos:position pos:line="17" pos:column="20"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="22">0<pos:position pos:line="17" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="25">user_size<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">mem<pos:position pos:line="18" pos:column="8"/></name><operator pos:line="18" pos:column="8">-&gt;<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="10">size<pos:position pos:line="18" pos:column="14"/></name></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">user_size<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><name pos:line="21" pos:column="6">logfile<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">&amp;&amp;<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="17">source<pos:position pos:line="21" pos:column="23"/></name></expr>)<pos:position pos:line="21" pos:column="24"/></condition><then pos:line="21" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="5">fprintf<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">logfile<pos:position pos:line="22" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="22">"MEM %s:%d calloc(%u,%u) = %p\n"<pos:position pos:line="22" pos:column="54"/></literal></expr></argument>,
            <argument><expr><name pos:line="23" pos:column="13">source<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="21">line<pos:position pos:line="23" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="27">wanted_elements<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="44">wanted_size<pos:position pos:line="23" pos:column="55"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="23" pos:column="57">mem<pos:position pos:line="23" pos:column="60"/></name></expr> ?<pos:position pos:line="23" pos:column="62"/></condition><then pos:line="23" pos:column="62"> <expr><name><name pos:line="23" pos:column="63">mem<pos:position pos:line="23" pos:column="66"/></name><operator pos:line="23" pos:column="66">-&gt;<pos:position pos:line="23" pos:column="71"/></operator><name pos:line="23" pos:column="68">mem<pos:position pos:line="23" pos:column="71"/></name></name></expr> <pos:position pos:line="23" pos:column="72"/></then><else pos:line="23" pos:column="72">: <expr><literal type="number" pos:line="23" pos:column="74">0<pos:position pos:line="23" pos:column="75"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt></block></then></if>
  <return pos:line="24" pos:column="3">return <expr><operator pos:line="24" pos:column="10">(<pos:position pos:line="24" pos:column="11"/></operator><ternary><condition><expr><name pos:line="24" pos:column="11">mem<pos:position pos:line="24" pos:column="14"/></name></expr> ?<pos:position pos:line="24" pos:column="16"/></condition><then pos:line="24" pos:column="16"> <expr><name><name pos:line="24" pos:column="17">mem<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">-&gt;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="22">mem<pos:position pos:line="24" pos:column="25"/></name></name></expr> <pos:position pos:line="24" pos:column="26"/></then><else pos:line="24" pos:column="26">: <expr><name pos:line="24" pos:column="28">NULL<pos:position pos:line="24" pos:column="32"/></name></expr></else></ternary><operator pos:line="24" pos:column="32">)<pos:position pos:line="24" pos:column="33"/></operator></expr>;<pos:position pos:line="24" pos:column="34"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
