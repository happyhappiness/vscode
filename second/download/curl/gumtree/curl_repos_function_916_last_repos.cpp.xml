<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_916_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">get_url_file_name<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier><modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">filename<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">url<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">pc<pos:position pos:line="3" pos:column="17"/></name></decl>, <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="20">pc2<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="5" pos:column="3">*<pos:position pos:line="5" pos:column="4"/></operator><name pos:line="5" pos:column="4">filename<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <name pos:line="5" pos:column="15">NULL<pos:position pos:line="5" pos:column="19"/></name></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* Find and get the remote file name */</comment>
  <expr_stmt><expr><name pos:line="8" pos:column="3">pc<pos:position pos:line="8" pos:column="5"/></name> <operator pos:line="8" pos:column="6">=<pos:position pos:line="8" pos:column="7"/></operator> <call><name pos:line="8" pos:column="8">strstr<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">url<pos:position pos:line="8" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="20">"://"<pos:position pos:line="8" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name pos:line="9" pos:column="6">pc<pos:position pos:line="9" pos:column="8"/></name></expr>)<pos:position pos:line="9" pos:column="9"/></condition><then pos:line="9" pos:column="9">
    <block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="5">pc<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">+=<pos:position pos:line="10" pos:column="10"/></operator> <literal type="number" pos:line="10" pos:column="11">3<pos:position pos:line="10" pos:column="12"/></literal></expr>;<pos:position pos:line="10" pos:column="13"/></expr_stmt></block></then>
  <else pos:line="11" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="5">pc<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <name pos:line="12" pos:column="10">url<pos:position pos:line="12" pos:column="13"/></name></expr>;<pos:position pos:line="12" pos:column="14"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="14" pos:column="3">pc2<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <call><name pos:line="14" pos:column="9">strrchr<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">pc<pos:position pos:line="14" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="21">'\\'<pos:position pos:line="14" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">pc<pos:position pos:line="15" pos:column="5"/></name> <operator pos:line="15" pos:column="6">=<pos:position pos:line="15" pos:column="7"/></operator> <call><name pos:line="15" pos:column="8">strrchr<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">pc<pos:position pos:line="15" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="20">'/'<pos:position pos:line="15" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">pc2<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">&amp;&amp;<pos:position pos:line="16" pos:column="20"/></operator> <operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><operator pos:line="16" pos:column="14">!<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">pc<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">||<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">pc<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">&lt;<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="26">pc2<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">)<pos:position pos:line="16" pos:column="30"/></operator></expr>)<pos:position pos:line="16" pos:column="31"/></condition><then pos:line="16" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="5">pc<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <name pos:line="17" pos:column="10">pc2<pos:position pos:line="17" pos:column="13"/></name></expr>;<pos:position pos:line="17" pos:column="14"/></expr_stmt></block></then></if>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">pc<pos:position pos:line="19" pos:column="8"/></name></expr>)<pos:position pos:line="19" pos:column="9"/></condition><then pos:line="19" pos:column="9">
    <comment type="block" pos:line="20" pos:column="5">/* duplicate the string beyond the slash */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="5">pc<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">++<pos:position pos:line="21" pos:column="9"/></operator></expr>;<pos:position pos:line="21" pos:column="10"/></expr_stmt></block></then>
  <else pos:line="22" pos:column="3">else
    <comment type="block" pos:line="23" pos:column="5">/* no slash =&gt; empty string */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="5">pc<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <literal type="string" pos:line="24" pos:column="10">""<pos:position pos:line="24" pos:column="12"/></literal></expr>;<pos:position pos:line="24" pos:column="13"/></expr_stmt></block></else></if>

  <expr_stmt><expr><operator pos:line="26" pos:column="3">*<pos:position pos:line="26" pos:column="4"/></operator><name pos:line="26" pos:column="4">filename<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">strdup<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">pc<pos:position pos:line="26" pos:column="24"/></name></expr></argument>)<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><operator pos:line="27" pos:column="6">!<pos:position pos:line="27" pos:column="7"/></operator><operator pos:line="27" pos:column="7">*<pos:position pos:line="27" pos:column="8"/></operator><name pos:line="27" pos:column="8">filename<pos:position pos:line="27" pos:column="16"/></name></expr>)<pos:position pos:line="27" pos:column="17"/></condition><then pos:line="27" pos:column="17">
    <block type="pseudo"><return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="28" pos:column="31"/></name></expr>;<pos:position pos:line="28" pos:column="32"/></return></block></then></if>

<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><call><name pos:line="30" pos:column="5">defined<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">MSDOS<pos:position pos:line="30" pos:column="18"/></name></expr></argument>)<pos:position pos:line="30" pos:column="19"/></argument_list></call> <operator pos:line="30" pos:column="20">||<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">defined<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">WIN32<pos:position pos:line="30" pos:column="36"/></name></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call></expr></cpp:if>
  <block pos:line="31" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">char<pos:position pos:line="32" pos:column="9"/></name> <modifier pos:line="32" pos:column="10">*<pos:position pos:line="32" pos:column="11"/></modifier></type><name pos:line="32" pos:column="11">sanitized<pos:position pos:line="32" pos:column="20"/></name></decl>;<pos:position pos:line="32" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">SANITIZEcode<pos:position pos:line="33" pos:column="17"/></name></type> <name pos:line="33" pos:column="18">sc<pos:position pos:line="33" pos:column="20"/></name> <init pos:line="33" pos:column="21">= <expr><call><name pos:line="33" pos:column="23">sanitize_file_name<pos:position pos:line="33" pos:column="41"/></name><argument_list pos:line="33" pos:column="41">(<argument><expr><operator pos:line="33" pos:column="42">&amp;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="43">sanitized<pos:position pos:line="33" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="54">*<pos:position pos:line="33" pos:column="55"/></operator><name pos:line="33" pos:column="55">filename<pos:position pos:line="33" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="65">0<pos:position pos:line="33" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="68"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">Curl_safefree<pos:position pos:line="34" pos:column="18"/></name><argument_list pos:line="34" pos:column="18">(<argument><expr><operator pos:line="34" pos:column="19">*<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">filename<pos:position pos:line="34" pos:column="28"/></name></expr></argument>)<pos:position pos:line="34" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name pos:line="35" pos:column="8">sc<pos:position pos:line="35" pos:column="10"/></name></expr>)<pos:position pos:line="35" pos:column="11"/></condition><then pos:line="35" pos:column="11">
      <block type="pseudo"><return pos:line="36" pos:column="7">return <expr><name pos:line="36" pos:column="14">CURLE_URL_MALFORMAT<pos:position pos:line="36" pos:column="33"/></name></expr>;<pos:position pos:line="36" pos:column="34"/></return></block></then></if>
    <expr_stmt><expr><operator pos:line="37" pos:column="5">*<pos:position pos:line="37" pos:column="6"/></operator><name pos:line="37" pos:column="6">filename<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <name pos:line="37" pos:column="17">sanitized<pos:position pos:line="37" pos:column="26"/></name></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="39" pos:column="8">/* MSDOS || WIN32 */</comment>

  <comment type="block" pos:line="41" pos:column="3">/* in case we built debug enabled, we allow an environment variable
   * named CURL_TESTDIR to prefix the given file name to put it into a
   * specific directory
   */</comment>
<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">DEBUGBUILD<pos:position pos:line="45" pos:column="18"/></name></cpp:ifdef>
  <block pos:line="46" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="47" pos:column="5">char<pos:position pos:line="47" pos:column="9"/></name> <modifier pos:line="47" pos:column="10">*<pos:position pos:line="47" pos:column="11"/></modifier></type><name pos:line="47" pos:column="11">tdir<pos:position pos:line="47" pos:column="15"/></name> <init pos:line="47" pos:column="16">= <expr><call><name pos:line="47" pos:column="18">curlx_getenv<pos:position pos:line="47" pos:column="30"/></name><argument_list pos:line="47" pos:column="30">(<argument><expr><literal type="string" pos:line="47" pos:column="31">"CURL_TESTDIR"<pos:position pos:line="47" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="47" pos:column="47"/></decl_stmt>
    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><name pos:line="48" pos:column="8">tdir<pos:position pos:line="48" pos:column="12"/></name></expr>)<pos:position pos:line="48" pos:column="13"/></condition><then pos:line="48" pos:column="13"> <block pos:line="48" pos:column="14">{
      <decl_stmt><decl><type><name pos:line="49" pos:column="7">char<pos:position pos:line="49" pos:column="11"/></name></type> <name><name pos:line="49" pos:column="12">buffer<pos:position pos:line="49" pos:column="18"/></name><index pos:line="49" pos:column="18">[<expr><literal type="number" pos:line="49" pos:column="19">512<pos:position pos:line="49" pos:column="22"/></literal></expr>]<pos:position pos:line="49" pos:column="23"/></index></name></decl>;<pos:position pos:line="49" pos:column="24"/></decl_stmt> <comment type="block" pos:line="49" pos:column="25">/* suitably large */</comment>
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">snprintf<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><name pos:line="50" pos:column="16">buffer<pos:position pos:line="50" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="24">sizeof<argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">buffer<pos:position pos:line="50" pos:column="37"/></name></expr></argument>)<pos:position pos:line="50" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="40">"%s/%s"<pos:position pos:line="50" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="49">tdir<pos:position pos:line="50" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="55">*<pos:position pos:line="50" pos:column="56"/></operator><name pos:line="50" pos:column="56">filename<pos:position pos:line="50" pos:column="64"/></name></expr></argument>)<pos:position pos:line="50" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">Curl_safefree<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><operator pos:line="51" pos:column="21">*<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">filename<pos:position pos:line="51" pos:column="30"/></name></expr></argument>)<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="52" pos:column="7">*<pos:position pos:line="52" pos:column="8"/></operator><name pos:line="52" pos:column="8">filename<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">=<pos:position pos:line="52" pos:column="18"/></operator> <call><name pos:line="52" pos:column="19">strdup<pos:position pos:line="52" pos:column="25"/></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">buffer<pos:position pos:line="52" pos:column="32"/></name></expr></argument>)<pos:position pos:line="52" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt> <comment type="block" pos:line="52" pos:column="35">/* clone the buffer */</comment>
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">curl_free<pos:position pos:line="53" pos:column="16"/></name><argument_list pos:line="53" pos:column="16">(<argument><expr><name pos:line="53" pos:column="17">tdir<pos:position pos:line="53" pos:column="21"/></name></expr></argument>)<pos:position pos:line="53" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="23"/></expr_stmt>
      <if pos:line="54" pos:column="7">if<condition pos:line="54" pos:column="9">(<expr><operator pos:line="54" pos:column="10">!<pos:position pos:line="54" pos:column="11"/></operator><operator pos:line="54" pos:column="11">*<pos:position pos:line="54" pos:column="12"/></operator><name pos:line="54" pos:column="12">filename<pos:position pos:line="54" pos:column="20"/></name></expr>)<pos:position pos:line="54" pos:column="21"/></condition><then pos:line="54" pos:column="21">
        <block type="pseudo"><return pos:line="55" pos:column="9">return <expr><name pos:line="55" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="55" pos:column="35"/></name></expr>;<pos:position pos:line="55" pos:column="36"/></return></block></then></if>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>
  }<pos:position pos:line="57" pos:column="4"/></block>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="60" pos:column="3">return <expr><name pos:line="60" pos:column="10">CURLE_OK<pos:position pos:line="60" pos:column="18"/></name></expr>;<pos:position pos:line="60" pos:column="19"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
