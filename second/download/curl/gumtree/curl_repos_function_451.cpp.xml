<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_451.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLMcode<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">curl_multi_add_handle<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">CURLM<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">multi_handle<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">CURL<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">easy_handle<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_multi<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">multi<pos:position pos:line="4" pos:column="27"/></name><init pos:line="4" pos:column="27">=<expr><operator pos:line="4" pos:column="28">(<pos:position pos:line="4" pos:column="29"/></operator>struct <name pos:line="4" pos:column="36">Curl_multi<pos:position pos:line="4" pos:column="46"/></name> <operator pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></operator><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">multi_handle<pos:position pos:line="4" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_one_easy<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">easy<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* First, make some basic checks that the CURLM handle is a good handle */</comment>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><call><name pos:line="8" pos:column="7">GOOD_MULTI_HANDLE<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">multi<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">CURLM_BAD_HANDLE<pos:position pos:line="9" pos:column="28"/></name></expr>;<pos:position pos:line="9" pos:column="29"/></return></block></then></if>

  <comment type="block" pos:line="11" pos:column="3">/* Verify that we got a somewhat good easy handle too */</comment>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><call><name pos:line="12" pos:column="7">GOOD_EASY_HANDLE<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">easy_handle<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="37"/></condition><then pos:line="12" pos:column="37">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">CURLM_BAD_EASY_HANDLE<pos:position pos:line="13" pos:column="33"/></name></expr>;<pos:position pos:line="13" pos:column="34"/></return></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/* Now, time to add an easy handle to the multi stack */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">easy<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <operator pos:line="16" pos:column="10">(<pos:position pos:line="16" pos:column="11"/></operator>struct <name pos:line="16" pos:column="18">Curl_one_easy<pos:position pos:line="16" pos:column="31"/></name> <operator pos:line="16" pos:column="32">*<pos:position pos:line="16" pos:column="33"/></operator><operator pos:line="16" pos:column="33">)<pos:position pos:line="16" pos:column="34"/></operator><call><name pos:line="16" pos:column="34">malloc<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><sizeof pos:line="16" pos:column="41">sizeof<argument_list pos:line="16" pos:column="47">(<argument><expr pos:line="16" pos:column="48">struct <name pos:line="16" pos:column="55">Curl_one_easy<pos:position pos:line="16" pos:column="68"/></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="71"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">easy<pos:position pos:line="17" pos:column="11"/></name></expr>)<pos:position pos:line="17" pos:column="12"/></condition><then pos:line="17" pos:column="12">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">CURLM_OUT_OF_MEMORY<pos:position pos:line="18" pos:column="31"/></name></expr>;<pos:position pos:line="18" pos:column="32"/></return></block></then></if>

  <comment type="block" pos:line="20" pos:column="3">/* clean it all first (just to be sure) */</comment>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">memset<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><name pos:line="21" pos:column="10">easy<pos:position pos:line="21" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="19">sizeof<argument_list pos:line="21" pos:column="25">(<argument><expr pos:line="21" pos:column="26">struct <name pos:line="21" pos:column="33">Curl_one_easy<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>

  <comment type="block" pos:line="23" pos:column="3">/* set the easy handle */</comment>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">easy<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">-&gt;<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="9">easy_handle<pos:position pos:line="24" pos:column="20"/></name></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">easy_handle<pos:position pos:line="24" pos:column="34"/></name></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">multistate<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">easy<pos:position pos:line="25" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">CURLM_STATE_INIT<pos:position pos:line="25" pos:column="36"/></name></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="27" pos:column="3">/* for multi interface connections, we share DNS cache automaticly */</comment>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">easy<pos:position pos:line="28" pos:column="7"/></name><operator pos:line="28" pos:column="7">-&gt;<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="9">easy_handle<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">hostcache<pos:position pos:line="28" pos:column="31"/></name></name> <operator pos:line="28" pos:column="32">=<pos:position pos:line="28" pos:column="33"/></operator> <name><name pos:line="28" pos:column="34">multi<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">-&gt;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="41">hostcache<pos:position pos:line="28" pos:column="50"/></name></name></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>

  <comment type="block" pos:line="30" pos:column="3">/* We add this new entry first in the list. We make our 'next' point to the
     previous next and our 'prev' point back to the 'first' struct */</comment>
  <expr_stmt><expr><name><name pos:line="32" pos:column="3">easy<pos:position pos:line="32" pos:column="7"/></name><operator pos:line="32" pos:column="7">-&gt;<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="9">next<pos:position pos:line="32" pos:column="13"/></name></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <name><name pos:line="32" pos:column="16">multi<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">-&gt;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="23">easy<pos:position pos:line="32" pos:column="27"/></name><operator pos:line="32" pos:column="27">.<pos:position pos:line="32" pos:column="28"/></operator><name pos:line="32" pos:column="28">next<pos:position pos:line="32" pos:column="32"/></name></name></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="33" pos:column="3">easy<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">-&gt;<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="9">prev<pos:position pos:line="33" pos:column="13"/></name></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <operator pos:line="33" pos:column="16">&amp;<pos:position pos:line="33" pos:column="21"/></operator><name><name pos:line="33" pos:column="17">multi<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">-&gt;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="24">easy<pos:position pos:line="33" pos:column="28"/></name></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="35" pos:column="3">/* make 'easy' the first node in the chain */</comment>
  <expr_stmt><expr><name><name pos:line="36" pos:column="3">multi<pos:position pos:line="36" pos:column="8"/></name><operator pos:line="36" pos:column="8">-&gt;<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="10">easy<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">.<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">next<pos:position pos:line="36" pos:column="19"/></name></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <name pos:line="36" pos:column="22">easy<pos:position pos:line="36" pos:column="26"/></name></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="38" pos:column="3">/* if there was a next node, make sure its 'prev' pointer links back to
     the new node */</comment>
  <if pos:line="40" pos:column="3">if<condition pos:line="40" pos:column="5">(<expr><name><name pos:line="40" pos:column="6">easy<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">next<pos:position pos:line="40" pos:column="16"/></name></name></expr>)<pos:position pos:line="40" pos:column="17"/></condition><then pos:line="40" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="41" pos:column="5">easy<pos:position pos:line="41" pos:column="9"/></name><operator pos:line="41" pos:column="9">-&gt;<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="11">next<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">-&gt;<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="17">prev<pos:position pos:line="41" pos:column="21"/></name></name> <operator pos:line="41" pos:column="22">=<pos:position pos:line="41" pos:column="23"/></operator> <name pos:line="41" pos:column="24">easy<pos:position pos:line="41" pos:column="28"/></name></expr>;<pos:position pos:line="41" pos:column="29"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="43" pos:column="3">Curl_easy_addmulti<pos:position pos:line="43" pos:column="21"/></name><argument_list pos:line="43" pos:column="21">(<argument><expr><name pos:line="43" pos:column="22">easy_handle<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">multi_handle<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>

  <comment type="block" pos:line="45" pos:column="3">/* increase the node-counter */</comment>
  <expr_stmt><expr><name><name pos:line="46" pos:column="3">multi<pos:position pos:line="46" pos:column="8"/></name><operator pos:line="46" pos:column="8">-&gt;<pos:position pos:line="46" pos:column="13"/></operator><name pos:line="46" pos:column="10">num_easy<pos:position pos:line="46" pos:column="18"/></name></name><operator pos:line="46" pos:column="18">++<pos:position pos:line="46" pos:column="20"/></operator></expr>;<pos:position pos:line="46" pos:column="21"/></expr_stmt>

  <return pos:line="48" pos:column="3">return <expr><name pos:line="48" pos:column="10">CURLM_OK<pos:position pos:line="48" pos:column="18"/></name></expr>;<pos:position pos:line="48" pos:column="19"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
