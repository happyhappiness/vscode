<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_909_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">progressbarinit<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">ProgressData<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">bar<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>,
                     <parameter><decl><type><name><name pos:line="2" pos:column="22">struct<pos:position pos:line="2" pos:column="28"/></name> <name pos:line="2" pos:column="29">OperationConfig<pos:position pos:line="2" pos:column="44"/></name></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">config<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">__EMX__<pos:position pos:line="4" pos:column="15"/></name></cpp:ifdef>
  <comment type="block" pos:line="5" pos:column="3">/* 20000318 mgs */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name><name pos:line="6" pos:column="7">scr_size<pos:position pos:line="6" pos:column="15"/></name><index pos:line="6" pos:column="15">[<expr><literal type="number" pos:line="6" pos:column="16">2<pos:position pos:line="6" pos:column="17"/></literal></expr>]<pos:position pos:line="6" pos:column="18"/></index></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">colp<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">memset<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><name pos:line="10" pos:column="10">bar<pos:position pos:line="10" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="18">sizeof<argument_list pos:line="10" pos:column="24">(<argument><expr pos:line="10" pos:column="25">struct <name pos:line="10" pos:column="32">ProgressData<pos:position pos:line="10" pos:column="44"/></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* pass this through to progress function so
   * it can display progress towards total file
   * not just the part that's left. (21-may-03, dbyron) */</comment>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name><name pos:line="15" pos:column="6">config<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">use_resume<pos:position pos:line="15" pos:column="24"/></name></name></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="16" pos:column="5">bar<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">-&gt;<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="10">initial_size<pos:position pos:line="16" pos:column="22"/></name></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <name><name pos:line="16" pos:column="25">config<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">-&gt;<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="33">resume_from<pos:position pos:line="16" pos:column="44"/></name></name></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt></block></then></if>

<comment type="block" pos:line="18" pos:column="1">/* TODO: get terminal width through ansi escapes or something similar.
   try to update width when xterm is resized... - 19990617 larsa */</comment>
<cpp:ifndef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifndef<pos:position pos:line="20" pos:column="8"/></cpp:directive> <name pos:line="20" pos:column="9">__EMX__<pos:position pos:line="20" pos:column="16"/></name></cpp:ifndef>
  <comment type="block" pos:line="21" pos:column="3">/* 20000318 mgs
   * OS/2 users most likely won't have this env var set, and besides that
   * we're using our own way to determine screen width */</comment>
  <expr_stmt><expr><name pos:line="24" pos:column="3">colp<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <call><name pos:line="24" pos:column="10">curlx_getenv<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><literal type="string" pos:line="24" pos:column="23">"COLUMNS"<pos:position pos:line="24" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">colp<pos:position pos:line="25" pos:column="10"/></name></expr>)<pos:position pos:line="25" pos:column="11"/></condition><then pos:line="25" pos:column="11"> <block pos:line="25" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name> <modifier pos:line="26" pos:column="10">*<pos:position pos:line="26" pos:column="11"/></modifier></type><name pos:line="26" pos:column="11">endptr<pos:position pos:line="26" pos:column="17"/></name></decl>;<pos:position pos:line="26" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">long<pos:position pos:line="27" pos:column="9"/></name></type> <name pos:line="27" pos:column="10">num<pos:position pos:line="27" pos:column="13"/></name> <init pos:line="27" pos:column="14">= <expr><call><name pos:line="27" pos:column="16">strtol<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">colp<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="29">&amp;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="30">endptr<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="38">10<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="42"/></decl_stmt>
    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><operator pos:line="28" pos:column="8">(<pos:position pos:line="28" pos:column="9"/></operator><name pos:line="28" pos:column="9">endptr<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">!=<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">colp<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">)<pos:position pos:line="28" pos:column="24"/></operator> <operator pos:line="28" pos:column="25">&amp;&amp;<pos:position pos:line="28" pos:column="35"/></operator> <operator pos:line="28" pos:column="28">(<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="29">endptr<pos:position pos:line="28" pos:column="35"/></name> <operator pos:line="28" pos:column="36">==<pos:position pos:line="28" pos:column="38"/></operator> <name pos:line="28" pos:column="39">colp<pos:position pos:line="28" pos:column="43"/></name> <operator pos:line="28" pos:column="44">+<pos:position pos:line="28" pos:column="45"/></operator> <call><name pos:line="28" pos:column="46">strlen<pos:position pos:line="28" pos:column="52"/></name><argument_list pos:line="28" pos:column="52">(<argument><expr><name pos:line="28" pos:column="53">colp<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call><operator pos:line="28" pos:column="58">)<pos:position pos:line="28" pos:column="59"/></operator> <operator pos:line="28" pos:column="60">&amp;&amp;<pos:position pos:line="28" pos:column="70"/></operator> <operator pos:line="28" pos:column="63">(<pos:position pos:line="28" pos:column="64"/></operator><name pos:line="28" pos:column="64">num<pos:position pos:line="28" pos:column="67"/></name> <operator pos:line="28" pos:column="68">&gt;<pos:position pos:line="28" pos:column="72"/></operator> <literal type="number" pos:line="28" pos:column="70">0<pos:position pos:line="28" pos:column="71"/></literal><operator pos:line="28" pos:column="71">)<pos:position pos:line="28" pos:column="72"/></operator></expr>)<pos:position pos:line="28" pos:column="73"/></condition><then pos:line="28" pos:column="73">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="7">bar<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">width<pos:position pos:line="29" pos:column="17"/></name></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <operator pos:line="29" pos:column="20">(<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="21">int<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">)<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">num<pos:position pos:line="29" pos:column="28"/></name></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt></block></then>
    <else pos:line="30" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="7">bar<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">width<pos:position pos:line="31" pos:column="17"/></name></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <literal type="number" pos:line="31" pos:column="20">79<pos:position pos:line="31" pos:column="22"/></literal></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt></block></else></if>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">curl_free<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">colp<pos:position pos:line="32" pos:column="19"/></name></expr></argument>)<pos:position pos:line="32" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></then>
  <else pos:line="34" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="5">bar<pos:position pos:line="35" pos:column="8"/></name><operator pos:line="35" pos:column="8">-&gt;<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="10">width<pos:position pos:line="35" pos:column="15"/></name></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <literal type="number" pos:line="35" pos:column="18">79<pos:position pos:line="35" pos:column="20"/></literal></expr>;<pos:position pos:line="35" pos:column="21"/></expr_stmt></block></else></if>
<cpp:else pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">else<pos:position pos:line="36" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="37" pos:column="3">/* 20000318 mgs
   * We use this emx library call to get the screen width, and subtract
   * one from what we got in order to avoid a problem with the cursor
   * advancing to the next line if we print a string that is as long as
   * the screen is wide. */</comment>

  <expr_stmt><expr><call><name pos:line="43" pos:column="3">_scrsize<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><name pos:line="43" pos:column="12">scr_size<pos:position pos:line="43" pos:column="20"/></name></expr></argument>)<pos:position pos:line="43" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="44" pos:column="3">bar<pos:position pos:line="44" pos:column="6"/></name><operator pos:line="44" pos:column="6">-&gt;<pos:position pos:line="44" pos:column="11"/></operator><name pos:line="44" pos:column="8">width<pos:position pos:line="44" pos:column="13"/></name></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <name><name pos:line="44" pos:column="16">scr_size<pos:position pos:line="44" pos:column="24"/></name><index pos:line="44" pos:column="24">[<expr><literal type="number" pos:line="44" pos:column="25">0<pos:position pos:line="44" pos:column="26"/></literal></expr>]<pos:position pos:line="44" pos:column="27"/></index></name> <operator pos:line="44" pos:column="28">-<pos:position pos:line="44" pos:column="29"/></operator> <literal type="number" pos:line="44" pos:column="30">1<pos:position pos:line="44" pos:column="31"/></literal></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name pos:line="47" pos:column="3">bar<pos:position pos:line="47" pos:column="6"/></name><operator pos:line="47" pos:column="6">-&gt;<pos:position pos:line="47" pos:column="11"/></operator><name pos:line="47" pos:column="8">out<pos:position pos:line="47" pos:column="11"/></name></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <name><name pos:line="47" pos:column="14">config<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">-&gt;<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="22">global<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">-&gt;<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="30">errors<pos:position pos:line="47" pos:column="36"/></name></name></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
