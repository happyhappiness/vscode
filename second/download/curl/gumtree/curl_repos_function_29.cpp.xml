<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_29.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> 
<name pos:line="2" pos:column="1">_Transfer<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name><name pos:line="2" pos:column="11">struct<pos:position pos:line="2" pos:column="17"/></name> <name pos:line="2" pos:column="18">connectdata<pos:position pos:line="2" pos:column="29"/></name></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">c_conn<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">nread<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>                 <comment type="block" pos:line="4" pos:column="33">/* number of bytes read */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">bytecount<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>            <comment type="block" pos:line="5" pos:column="33">/* total number of bytes read */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">writebytecount<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>       <comment type="block" pos:line="6" pos:column="33">/* number of bytes written */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">long<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">contentlength<pos:position pos:line="7" pos:column="21"/></name><init pos:line="7" pos:column="21">=<expr><literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>         <comment type="block" pos:line="7" pos:column="33">/* size of incoming data */</comment>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">timeval<pos:position pos:line="8" pos:column="17"/></name></name></type> <name pos:line="8" pos:column="18">start<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><call><name pos:line="8" pos:column="26">tvnow<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">()<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">timeval<pos:position pos:line="9" pos:column="17"/></name></name></type> <name pos:line="9" pos:column="18">now<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name pos:line="9" pos:column="24">start<pos:position pos:line="9" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>   <comment type="block" pos:line="9" pos:column="33">/* current time */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">header<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><name pos:line="10" pos:column="17">TRUE<pos:position pos:line="10" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>		<comment type="block" pos:line="10" pos:column="33">/* incoming data has HTTP header */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">headerline<pos:position pos:line="11" pos:column="17"/></name> <init pos:line="11" pos:column="18">= <expr><literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>		<comment type="block" pos:line="11" pos:column="33">/* counts header lines to better track the
                                   first one */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name> <modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type><name pos:line="13" pos:column="9">hbufp<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>			<comment type="block" pos:line="13" pos:column="33">/* points at *end* of header line */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">hbuflen<pos:position pos:line="14" pos:column="14"/></name> <init pos:line="14" pos:column="15">= <expr><literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">str<pos:position pos:line="15" pos:column="12"/></name></decl>;<pos:position pos:line="15" pos:column="13"/></decl_stmt>			<comment type="block" pos:line="15" pos:column="33">/* within buf */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">char<pos:position pos:line="16" pos:column="7"/></name> <modifier pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></modifier></type><name pos:line="16" pos:column="9">str_start<pos:position pos:line="16" pos:column="18"/></name></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>		<comment type="block" pos:line="16" pos:column="33">/* within buf */</comment>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name> <modifier pos:line="17" pos:column="8">*<pos:position pos:line="17" pos:column="9"/></modifier></type><name pos:line="17" pos:column="9">end_ptr<pos:position pos:line="17" pos:column="16"/></name></decl>;<pos:position pos:line="17" pos:column="17"/></decl_stmt>		<comment type="block" pos:line="17" pos:column="33">/* within buf */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name> <modifier pos:line="18" pos:column="8">*<pos:position pos:line="18" pos:column="9"/></modifier></type><name pos:line="18" pos:column="9">p<pos:position pos:line="18" pos:column="10"/></name></decl>;<pos:position pos:line="18" pos:column="11"/></decl_stmt>			<comment type="block" pos:line="18" pos:column="33">/* within headerbuff */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">bool<pos:position pos:line="19" pos:column="7"/></name></type> <name pos:line="19" pos:column="8">content_range<pos:position pos:line="19" pos:column="21"/></name> <init pos:line="19" pos:column="22">= <expr><name pos:line="19" pos:column="24">FALSE<pos:position pos:line="19" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="30"/></decl_stmt>	<comment type="block" pos:line="19" pos:column="33">/* set TRUE if Content-Range: was found */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">offset<pos:position pos:line="20" pos:column="13"/></name> <init pos:line="20" pos:column="14">= <expr><literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="18"/></decl_stmt>		<comment type="block" pos:line="20" pos:column="33">/* possible resume offset read from the
                                   Content-Range: header */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">int<pos:position pos:line="22" pos:column="6"/></name></type> <name pos:line="22" pos:column="7">code<pos:position pos:line="22" pos:column="11"/></name> <init pos:line="22" pos:column="12">= <expr><literal type="number" pos:line="22" pos:column="14">0<pos:position pos:line="22" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="16"/></decl_stmt>			<comment type="block" pos:line="22" pos:column="33">/* error code from the 'HTTP/1.? XXX' line */</comment>

  <comment type="block" pos:line="24" pos:column="3">/* for the low speed checks: */</comment>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">CURLcode<pos:position pos:line="25" pos:column="11"/></name></type> <name pos:line="25" pos:column="12">urg<pos:position pos:line="25" pos:column="15"/></name></decl>;<pos:position pos:line="25" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="26" pos:column="3">time_t<pos:position pos:line="26" pos:column="9"/></name></type> <name pos:line="26" pos:column="10">timeofdoc<pos:position pos:line="26" pos:column="19"/></name><init pos:line="26" pos:column="19">=<expr><literal type="number" pos:line="26" pos:column="20">0<pos:position pos:line="26" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">long<pos:position pos:line="27" pos:column="7"/></name></type> <name pos:line="27" pos:column="8">bodywrites<pos:position pos:line="27" pos:column="18"/></name><init pos:line="27" pos:column="18">=<expr><literal type="number" pos:line="27" pos:column="19">0<pos:position pos:line="27" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="29" pos:column="3">char<pos:position pos:line="29" pos:column="7"/></name></type> <name><name pos:line="29" pos:column="8">newurl<pos:position pos:line="29" pos:column="14"/></name><index pos:line="29" pos:column="14">[<expr><name pos:line="29" pos:column="15">URL_MAX_LENGTH<pos:position pos:line="29" pos:column="29"/></name></expr>]<pos:position pos:line="29" pos:column="30"/></index></name></decl>;<pos:position pos:line="29" pos:column="31"/></decl_stmt>		<comment type="block" pos:line="29" pos:column="41">/* buffer for Location: URL */</comment>

  <comment type="block" pos:line="31" pos:column="3">/* the highest fd we use + 1 */</comment>
  <decl_stmt><decl><type><name><name pos:line="32" pos:column="3">struct<pos:position pos:line="32" pos:column="9"/></name> <name pos:line="32" pos:column="10">UrlData<pos:position pos:line="32" pos:column="17"/></name></name> <modifier pos:line="32" pos:column="18">*<pos:position pos:line="32" pos:column="19"/></modifier></type><name pos:line="32" pos:column="19">data<pos:position pos:line="32" pos:column="23"/></name></decl>;<pos:position pos:line="32" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="33" pos:column="3">struct<pos:position pos:line="33" pos:column="9"/></name> <name pos:line="33" pos:column="10">connectdata<pos:position pos:line="33" pos:column="21"/></name></name> <modifier pos:line="33" pos:column="22">*<pos:position pos:line="33" pos:column="23"/></modifier></type><name pos:line="33" pos:column="23">conn<pos:position pos:line="33" pos:column="27"/></name> <init pos:line="33" pos:column="28">= <expr><operator pos:line="33" pos:column="30">(<pos:position pos:line="33" pos:column="31"/></operator>struct <name pos:line="33" pos:column="38">connectdata<pos:position pos:line="33" pos:column="49"/></name> <operator pos:line="33" pos:column="50">*<pos:position pos:line="33" pos:column="51"/></operator><operator pos:line="33" pos:column="51">)<pos:position pos:line="33" pos:column="52"/></operator><name pos:line="33" pos:column="52">c_conn<pos:position pos:line="33" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="34" pos:column="3">char<pos:position pos:line="34" pos:column="7"/></name> <modifier pos:line="34" pos:column="8">*<pos:position pos:line="34" pos:column="9"/></modifier></type><name pos:line="34" pos:column="9">buf<pos:position pos:line="34" pos:column="12"/></name></decl>;<pos:position pos:line="34" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="35" pos:column="3">int<pos:position pos:line="35" pos:column="6"/></name></type> <name pos:line="35" pos:column="7">maxfd<pos:position pos:line="35" pos:column="12"/></name></decl>;<pos:position pos:line="35" pos:column="13"/></decl_stmt>

  <if pos:line="37" pos:column="3">if<condition pos:line="37" pos:column="5">(<expr><operator pos:line="37" pos:column="6">!<pos:position pos:line="37" pos:column="7"/></operator><name pos:line="37" pos:column="7">conn<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">||<pos:position pos:line="37" pos:column="14"/></operator> <operator pos:line="37" pos:column="15">(<pos:position pos:line="37" pos:column="16"/></operator><name><name pos:line="37" pos:column="16">conn<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">handle<pos:position pos:line="37" pos:column="28"/></name></name> <operator pos:line="37" pos:column="29">!=<pos:position pos:line="37" pos:column="31"/></operator> <name pos:line="37" pos:column="32">STRUCT_CONNECT<pos:position pos:line="37" pos:column="46"/></name><operator pos:line="37" pos:column="46">)<pos:position pos:line="37" pos:column="47"/></operator></expr>)<pos:position pos:line="37" pos:column="48"/></condition><then pos:line="37" pos:column="48">
    <block type="pseudo"><return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">CURLE_BAD_FUNCTION_ARGUMENT<pos:position pos:line="38" pos:column="39"/></name></expr>;<pos:position pos:line="38" pos:column="40"/></return></block></then></if>
  
  <expr_stmt><expr><name pos:line="40" pos:column="3">data<pos:position pos:line="40" pos:column="7"/></name> <operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator> <name><name pos:line="40" pos:column="10">conn<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">-&gt;<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="16">data<pos:position pos:line="40" pos:column="20"/></name></name></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt> <comment type="block" pos:line="40" pos:column="22">/* there's the root struct */</comment>
  <expr_stmt><expr><name pos:line="41" pos:column="3">buf<pos:position pos:line="41" pos:column="6"/></name> <operator pos:line="41" pos:column="7">=<pos:position pos:line="41" pos:column="8"/></operator> <name><name pos:line="41" pos:column="9">data<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">-&gt;<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="15">buffer<pos:position pos:line="41" pos:column="21"/></name></name></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="42" pos:column="3">maxfd<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <operator pos:line="42" pos:column="11">(<pos:position pos:line="42" pos:column="12"/></operator><ternary><condition><expr><name><name pos:line="42" pos:column="12">conn<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">sockfd<pos:position pos:line="42" pos:column="24"/></name></name><operator pos:line="42" pos:column="24">&gt;<pos:position pos:line="42" pos:column="28"/></operator><name><name pos:line="42" pos:column="25">conn<pos:position pos:line="42" pos:column="29"/></name><operator pos:line="42" pos:column="29">-&gt;<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="31">writesockfd<pos:position pos:line="42" pos:column="42"/></name></name></expr>?<pos:position pos:line="42" pos:column="43"/></condition><then><expr><name><name pos:line="42" pos:column="43">conn<pos:position pos:line="42" pos:column="47"/></name><operator pos:line="42" pos:column="47">-&gt;<pos:position pos:line="42" pos:column="52"/></operator><name pos:line="42" pos:column="49">sockfd<pos:position pos:line="42" pos:column="55"/></name></name></expr></then><else pos:line="42" pos:column="55">:<expr><name><name pos:line="42" pos:column="56">conn<pos:position pos:line="42" pos:column="60"/></name><operator pos:line="42" pos:column="60">-&gt;<pos:position pos:line="42" pos:column="65"/></operator><name pos:line="42" pos:column="62">writesockfd<pos:position pos:line="42" pos:column="73"/></name></name></expr></else></ternary><operator pos:line="42" pos:column="73">)<pos:position pos:line="42" pos:column="74"/></operator><operator pos:line="42" pos:column="74">+<pos:position pos:line="42" pos:column="75"/></operator><literal type="number" pos:line="42" pos:column="75">1<pos:position pos:line="42" pos:column="76"/></literal></expr>;<pos:position pos:line="42" pos:column="77"/></expr_stmt>

  <expr_stmt><expr><name pos:line="44" pos:column="3">hbufp<pos:position pos:line="44" pos:column="8"/></name> <operator pos:line="44" pos:column="9">=<pos:position pos:line="44" pos:column="10"/></operator> <name><name pos:line="44" pos:column="11">data<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">headerbuff<pos:position pos:line="44" pos:column="27"/></name></name></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="46" pos:column="3">myalarm<pos:position pos:line="46" pos:column="10"/></name> <argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="number" pos:line="46" pos:column="12">0<pos:position pos:line="46" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="15"/></expr_stmt>			<comment type="block" pos:line="46" pos:column="33">/* switch off the alarm-style timeout */</comment>

  <expr_stmt><expr><name pos:line="48" pos:column="3">now<pos:position pos:line="48" pos:column="6"/></name> <operator pos:line="48" pos:column="7">=<pos:position pos:line="48" pos:column="8"/></operator> <call><name pos:line="48" pos:column="9">tvnow<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">()<pos:position pos:line="48" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="49" pos:column="3">start<pos:position pos:line="49" pos:column="8"/></name> <operator pos:line="49" pos:column="9">=<pos:position pos:line="49" pos:column="10"/></operator> <name pos:line="49" pos:column="11">now<pos:position pos:line="49" pos:column="14"/></name></expr>;<pos:position pos:line="49" pos:column="15"/></expr_stmt>

<cpp:define pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">define<pos:position pos:line="51" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="51" pos:column="9">KEEP_READ<pos:position pos:line="51" pos:column="18"/></name></cpp:macro>  <cpp:value pos:line="51" pos:column="20">1<pos:position pos:line="51" pos:column="21"/></cpp:value></cpp:define>
<cpp:define pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">define<pos:position pos:line="52" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="52" pos:column="9">KEEP_WRITE<pos:position pos:line="52" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="52" pos:column="20">2<pos:position pos:line="52" pos:column="21"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="54" pos:column="3">pgrsTime<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><name pos:line="54" pos:column="12">data<pos:position pos:line="54" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="18">TIMER_PRETRANSFER<pos:position pos:line="54" pos:column="35"/></name></expr></argument>)<pos:position pos:line="54" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="37"/></expr_stmt>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><operator pos:line="56" pos:column="7">!<pos:position pos:line="56" pos:column="8"/></operator><name><name pos:line="56" pos:column="8">conn<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">-&gt;<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="14">getheader<pos:position pos:line="56" pos:column="23"/></name></name></expr>)<pos:position pos:line="56" pos:column="24"/></condition><then pos:line="56" pos:column="24"> <block pos:line="56" pos:column="25">{
    <expr_stmt><expr><name pos:line="57" pos:column="5">header<pos:position pos:line="57" pos:column="11"/></name> <operator pos:line="57" pos:column="12">=<pos:position pos:line="57" pos:column="13"/></operator> <name pos:line="57" pos:column="14">FALSE<pos:position pos:line="57" pos:column="19"/></name></expr>;<pos:position pos:line="57" pos:column="20"/></expr_stmt>
    <if pos:line="58" pos:column="5">if<condition pos:line="58" pos:column="7">(<expr><name><name pos:line="58" pos:column="8">conn<pos:position pos:line="58" pos:column="12"/></name><operator pos:line="58" pos:column="12">-&gt;<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="14">size<pos:position pos:line="58" pos:column="18"/></name></name> <operator pos:line="58" pos:column="19">&gt;<pos:position pos:line="58" pos:column="23"/></operator> <literal type="number" pos:line="58" pos:column="21">0<pos:position pos:line="58" pos:column="22"/></literal></expr>)<pos:position pos:line="58" pos:column="23"/></condition><then pos:line="58" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="7">pgrsSetDownloadSize<pos:position pos:line="59" pos:column="26"/></name><argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">data<pos:position pos:line="59" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="33">conn<pos:position pos:line="59" pos:column="37"/></name><operator pos:line="59" pos:column="37">-&gt;<pos:position pos:line="59" pos:column="42"/></operator><name pos:line="59" pos:column="39">size<pos:position pos:line="59" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="45"/></expr_stmt></block></then></if>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>
  <block pos:line="61" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="62" pos:column="5">fd_set<pos:position pos:line="62" pos:column="11"/></name></type> <name pos:line="62" pos:column="12">readfd<pos:position pos:line="62" pos:column="18"/></name></decl>;<pos:position pos:line="62" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="63" pos:column="5">fd_set<pos:position pos:line="63" pos:column="11"/></name></type> <name pos:line="63" pos:column="12">writefd<pos:position pos:line="63" pos:column="19"/></name></decl>;<pos:position pos:line="63" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="64" pos:column="5">fd_set<pos:position pos:line="64" pos:column="11"/></name></type> <name pos:line="64" pos:column="12">rkeepfd<pos:position pos:line="64" pos:column="19"/></name></decl>;<pos:position pos:line="64" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="65" pos:column="5">fd_set<pos:position pos:line="65" pos:column="11"/></name></type> <name pos:line="65" pos:column="12">wkeepfd<pos:position pos:line="65" pos:column="19"/></name></decl>;<pos:position pos:line="65" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="66" pos:column="5">struct<pos:position pos:line="66" pos:column="11"/></name> <name pos:line="66" pos:column="12">timeval<pos:position pos:line="66" pos:column="19"/></name></name></type> <name pos:line="66" pos:column="20">interval<pos:position pos:line="66" pos:column="28"/></name></decl>;<pos:position pos:line="66" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="67" pos:column="5">int<pos:position pos:line="67" pos:column="8"/></name></type> <name pos:line="67" pos:column="9">keepon<pos:position pos:line="67" pos:column="15"/></name><init pos:line="67" pos:column="15">=<expr><literal type="number" pos:line="67" pos:column="16">0<pos:position pos:line="67" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="67" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="69" pos:column="5">/* timeout every X second
       - makes a better progressmeter (i.e even when no data is read, the
       meter can be updated and reflect reality)
       - allows removal of the alarm() crap
       - variable timeout is easier
     */</comment>

    <expr_stmt><expr><call><name pos:line="76" pos:column="5">FD_ZERO<pos:position pos:line="76" pos:column="12"/></name> <argument_list pos:line="76" pos:column="13">(<argument><expr><operator pos:line="76" pos:column="14">&amp;<pos:position pos:line="76" pos:column="19"/></operator><name pos:line="76" pos:column="15">readfd<pos:position pos:line="76" pos:column="21"/></name></expr></argument>)<pos:position pos:line="76" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="23"/></expr_stmt>		<comment type="block" pos:line="76" pos:column="33">/* clear it */</comment>
    <if pos:line="77" pos:column="5">if<condition pos:line="77" pos:column="7">(<expr><name><name pos:line="77" pos:column="8">conn<pos:position pos:line="77" pos:column="12"/></name><operator pos:line="77" pos:column="12">-&gt;<pos:position pos:line="77" pos:column="17"/></operator><name pos:line="77" pos:column="14">sockfd<pos:position pos:line="77" pos:column="20"/></name></name> <operator pos:line="77" pos:column="21">!=<pos:position pos:line="77" pos:column="23"/></operator> <operator pos:line="77" pos:column="24">-<pos:position pos:line="77" pos:column="25"/></operator><literal type="number" pos:line="77" pos:column="25">1<pos:position pos:line="77" pos:column="26"/></literal></expr>)<pos:position pos:line="77" pos:column="27"/></condition><then pos:line="77" pos:column="27"> <block pos:line="77" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="78" pos:column="7">FD_SET<pos:position pos:line="78" pos:column="13"/></name> <argument_list pos:line="78" pos:column="14">(<argument><expr><name><name pos:line="78" pos:column="15">conn<pos:position pos:line="78" pos:column="19"/></name><operator pos:line="78" pos:column="19">-&gt;<pos:position pos:line="78" pos:column="24"/></operator><name pos:line="78" pos:column="21">sockfd<pos:position pos:line="78" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="29">&amp;<pos:position pos:line="78" pos:column="34"/></operator><name pos:line="78" pos:column="30">readfd<pos:position pos:line="78" pos:column="36"/></name></expr></argument>)<pos:position pos:line="78" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="38"/></expr_stmt> <comment type="block" pos:line="78" pos:column="39">/* read socket */</comment>
      <expr_stmt><expr><name pos:line="79" pos:column="7">keepon<pos:position pos:line="79" pos:column="13"/></name> <operator pos:line="79" pos:column="14">|=<pos:position pos:line="79" pos:column="16"/></operator> <name pos:line="79" pos:column="17">KEEP_READ<pos:position pos:line="79" pos:column="26"/></name></expr>;<pos:position pos:line="79" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="82" pos:column="5">FD_ZERO<pos:position pos:line="82" pos:column="12"/></name> <argument_list pos:line="82" pos:column="13">(<argument><expr><operator pos:line="82" pos:column="14">&amp;<pos:position pos:line="82" pos:column="19"/></operator><name pos:line="82" pos:column="15">writefd<pos:position pos:line="82" pos:column="22"/></name></expr></argument>)<pos:position pos:line="82" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="24"/></expr_stmt>		<comment type="block" pos:line="82" pos:column="33">/* clear it */</comment>
    <if pos:line="83" pos:column="5">if<condition pos:line="83" pos:column="7">(<expr><name><name pos:line="83" pos:column="8">conn<pos:position pos:line="83" pos:column="12"/></name><operator pos:line="83" pos:column="12">-&gt;<pos:position pos:line="83" pos:column="17"/></operator><name pos:line="83" pos:column="14">writesockfd<pos:position pos:line="83" pos:column="25"/></name></name> <operator pos:line="83" pos:column="26">!=<pos:position pos:line="83" pos:column="28"/></operator> <operator pos:line="83" pos:column="29">-<pos:position pos:line="83" pos:column="30"/></operator><literal type="number" pos:line="83" pos:column="30">1<pos:position pos:line="83" pos:column="31"/></literal></expr>)<pos:position pos:line="83" pos:column="32"/></condition><then pos:line="83" pos:column="32"> <block pos:line="83" pos:column="33">{
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">FD_SET<pos:position pos:line="84" pos:column="13"/></name> <argument_list pos:line="84" pos:column="14">(<argument><expr><name><name pos:line="84" pos:column="15">conn<pos:position pos:line="84" pos:column="19"/></name><operator pos:line="84" pos:column="19">-&gt;<pos:position pos:line="84" pos:column="24"/></operator><name pos:line="84" pos:column="21">writesockfd<pos:position pos:line="84" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="34">&amp;<pos:position pos:line="84" pos:column="39"/></operator><name pos:line="84" pos:column="35">writefd<pos:position pos:line="84" pos:column="42"/></name></expr></argument>)<pos:position pos:line="84" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="44"/></expr_stmt> <comment type="block" pos:line="84" pos:column="45">/* write socket */</comment>
      <expr_stmt><expr><name pos:line="85" pos:column="7">keepon<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">|=<pos:position pos:line="85" pos:column="16"/></operator> <name pos:line="85" pos:column="17">KEEP_WRITE<pos:position pos:line="85" pos:column="27"/></name></expr>;<pos:position pos:line="85" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="88" pos:column="5">/* get these in backup variables to be able to restore them on each lap in
       the select() loop */</comment>
    <expr_stmt><expr><name pos:line="90" pos:column="5">rkeepfd<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <name pos:line="90" pos:column="15">readfd<pos:position pos:line="90" pos:column="21"/></name></expr>;<pos:position pos:line="90" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="91" pos:column="5">wkeepfd<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">=<pos:position pos:line="91" pos:column="14"/></operator> <name pos:line="91" pos:column="15">writefd<pos:position pos:line="91" pos:column="22"/></name></expr>;<pos:position pos:line="91" pos:column="23"/></expr_stmt>

    <while pos:line="93" pos:column="5">while <condition pos:line="93" pos:column="11">(<expr><name pos:line="93" pos:column="12">keepon<pos:position pos:line="93" pos:column="18"/></name></expr>)<pos:position pos:line="93" pos:column="19"/></condition> <block pos:line="93" pos:column="20">{
      <expr_stmt><expr><name pos:line="94" pos:column="7">readfd<pos:position pos:line="94" pos:column="13"/></name> <operator pos:line="94" pos:column="14">=<pos:position pos:line="94" pos:column="15"/></operator> <name pos:line="94" pos:column="16">rkeepfd<pos:position pos:line="94" pos:column="23"/></name></expr>;<pos:position pos:line="94" pos:column="24"/></expr_stmt>		<comment type="block" pos:line="94" pos:column="33">/* set those every lap in the loop */</comment>
      <expr_stmt><expr><name pos:line="95" pos:column="7">writefd<pos:position pos:line="95" pos:column="14"/></name> <operator pos:line="95" pos:column="15">=<pos:position pos:line="95" pos:column="16"/></operator> <name pos:line="95" pos:column="17">wkeepfd<pos:position pos:line="95" pos:column="24"/></name></expr>;<pos:position pos:line="95" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="96" pos:column="7">interval<pos:position pos:line="96" pos:column="15"/></name><operator pos:line="96" pos:column="15">.<pos:position pos:line="96" pos:column="16"/></operator><name pos:line="96" pos:column="16">tv_sec<pos:position pos:line="96" pos:column="22"/></name></name> <operator pos:line="96" pos:column="23">=<pos:position pos:line="96" pos:column="24"/></operator> <literal type="number" pos:line="96" pos:column="25">1<pos:position pos:line="96" pos:column="26"/></literal></expr>;<pos:position pos:line="96" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="97" pos:column="7">interval<pos:position pos:line="97" pos:column="15"/></name><operator pos:line="97" pos:column="15">.<pos:position pos:line="97" pos:column="16"/></operator><name pos:line="97" pos:column="16">tv_usec<pos:position pos:line="97" pos:column="23"/></name></name> <operator pos:line="97" pos:column="24">=<pos:position pos:line="97" pos:column="25"/></operator> <literal type="number" pos:line="97" pos:column="26">0<pos:position pos:line="97" pos:column="27"/></literal></expr>;<pos:position pos:line="97" pos:column="28"/></expr_stmt>

      <switch pos:line="99" pos:column="7">switch <condition pos:line="99" pos:column="14">(<expr><call><name pos:line="99" pos:column="15">select<pos:position pos:line="99" pos:column="21"/></name> <argument_list pos:line="99" pos:column="22">(<argument><expr><name pos:line="99" pos:column="23">maxfd<pos:position pos:line="99" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="30">&amp;<pos:position pos:line="99" pos:column="35"/></operator><name pos:line="99" pos:column="31">readfd<pos:position pos:line="99" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="39">&amp;<pos:position pos:line="99" pos:column="44"/></operator><name pos:line="99" pos:column="40">writefd<pos:position pos:line="99" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="49">NULL<pos:position pos:line="99" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="55">&amp;<pos:position pos:line="99" pos:column="60"/></operator><name pos:line="99" pos:column="56">interval<pos:position pos:line="99" pos:column="64"/></name></expr></argument>)<pos:position pos:line="99" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="66"/></condition> <block pos:line="99" pos:column="67">{
      <case pos:line="100" pos:column="7">case <expr><operator pos:line="100" pos:column="12">-<pos:position pos:line="100" pos:column="13"/></operator><literal type="number" pos:line="100" pos:column="13">1<pos:position pos:line="100" pos:column="14"/></literal></expr>:<pos:position pos:line="100" pos:column="15"/></case>			<comment type="block" pos:line="100" pos:column="33">/* select() error, stop reading */</comment>
<cpp:ifdef pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">ifdef<pos:position pos:line="101" pos:column="7"/></cpp:directive> <name pos:line="101" pos:column="8">EINTR<pos:position pos:line="101" pos:column="13"/></name></cpp:ifdef>
        <comment type="block" pos:line="102" pos:column="9">/* The EINTR is not serious, and it seems you might get this more
           ofen when using the lib in a multi-threaded environment! */</comment>
        <if pos:line="104" pos:column="9">if<condition pos:line="104" pos:column="11">(<expr><name pos:line="104" pos:column="12">errno<pos:position pos:line="104" pos:column="17"/></name> <operator pos:line="104" pos:column="18">==<pos:position pos:line="104" pos:column="20"/></operator> <name pos:line="104" pos:column="21">EINTR<pos:position pos:line="104" pos:column="26"/></name></expr>)<pos:position pos:line="104" pos:column="27"/></condition><then pos:line="104" pos:column="27">
          <block type="pseudo"><empty_stmt pos:line="105" pos:column="11">;<pos:position pos:line="105" pos:column="12"/></empty_stmt></block></then>
        <else pos:line="106" pos:column="9">else
<cpp:endif pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">endif<pos:position pos:line="107" pos:column="7"/></cpp:directive></cpp:endif>
          <block type="pseudo"><expr_stmt><expr><name pos:line="108" pos:column="11">keepon<pos:position pos:line="108" pos:column="17"/></name> <operator pos:line="108" pos:column="18">=<pos:position pos:line="108" pos:column="19"/></operator> <literal type="number" pos:line="108" pos:column="20">0<pos:position pos:line="108" pos:column="21"/></literal></expr>;<pos:position pos:line="108" pos:column="22"/></expr_stmt></block></else></if> <comment type="block" pos:line="108" pos:column="23">/* no more read or write */</comment>
	<continue pos:line="109" pos:column="9">continue;<pos:position pos:line="109" pos:column="18"/></continue>
      <case pos:line="110" pos:column="7">case <expr><literal type="number" pos:line="110" pos:column="12">0<pos:position pos:line="110" pos:column="13"/></literal></expr>:<pos:position pos:line="110" pos:column="14"/></case>			<comment type="block" pos:line="110" pos:column="33">/* timeout */</comment>
	<break pos:line="111" pos:column="9">break;<pos:position pos:line="111" pos:column="15"/></break>
      <default pos:line="112" pos:column="7">default:<pos:position pos:line="112" pos:column="15"/></default>
        <if pos:line="113" pos:column="9">if<condition pos:line="113" pos:column="11">(<expr><operator pos:line="113" pos:column="12">(<pos:position pos:line="113" pos:column="13"/></operator><name pos:line="113" pos:column="13">keepon<pos:position pos:line="113" pos:column="19"/></name> <operator pos:line="113" pos:column="20">&amp;<pos:position pos:line="113" pos:column="25"/></operator> <name pos:line="113" pos:column="22">KEEP_READ<pos:position pos:line="113" pos:column="31"/></name><operator pos:line="113" pos:column="31">)<pos:position pos:line="113" pos:column="32"/></operator> <operator pos:line="113" pos:column="33">&amp;&amp;<pos:position pos:line="113" pos:column="43"/></operator> <call><name pos:line="113" pos:column="36">FD_ISSET<pos:position pos:line="113" pos:column="44"/></name><argument_list pos:line="113" pos:column="44">(<argument><expr><name><name pos:line="113" pos:column="45">conn<pos:position pos:line="113" pos:column="49"/></name><operator pos:line="113" pos:column="49">-&gt;<pos:position pos:line="113" pos:column="54"/></operator><name pos:line="113" pos:column="51">sockfd<pos:position pos:line="113" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="59">&amp;<pos:position pos:line="113" pos:column="64"/></operator><name pos:line="113" pos:column="60">readfd<pos:position pos:line="113" pos:column="66"/></name></expr></argument>)<pos:position pos:line="113" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="68"/></condition><then pos:line="113" pos:column="68"> <block pos:line="113" pos:column="69">{
          <comment type="block" pos:line="114" pos:column="11">/* read! */</comment>
          <expr_stmt><expr><name pos:line="115" pos:column="11">urg<pos:position pos:line="115" pos:column="14"/></name> <operator pos:line="115" pos:column="15">=<pos:position pos:line="115" pos:column="16"/></operator> <call><name pos:line="115" pos:column="17">curl_read<pos:position pos:line="115" pos:column="26"/></name><argument_list pos:line="115" pos:column="26">(<argument><expr><name pos:line="115" pos:column="27">conn<pos:position pos:line="115" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="33">buf<pos:position pos:line="115" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="38">BUFSIZE<pos:position pos:line="115" pos:column="45"/></name> <operator pos:line="115" pos:column="46">-<pos:position pos:line="115" pos:column="47"/></operator><literal type="number" pos:line="115" pos:column="47">1<pos:position pos:line="115" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="115" pos:column="50">&amp;<pos:position pos:line="115" pos:column="55"/></operator><name pos:line="115" pos:column="51">nread<pos:position pos:line="115" pos:column="56"/></name></expr></argument>)<pos:position pos:line="115" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="58"/></expr_stmt>

          <comment type="block" pos:line="117" pos:column="11">/* NULL terminate, allowing string ops to be used */</comment>
          <if pos:line="118" pos:column="11">if <condition pos:line="118" pos:column="14">(<expr><literal type="number" pos:line="118" pos:column="15">0<pos:position pos:line="118" pos:column="16"/></literal> <operator pos:line="118" pos:column="17">&lt;<pos:position pos:line="118" pos:column="21"/></operator> <operator pos:line="118" pos:column="19">(<pos:position pos:line="118" pos:column="20"/></operator><name pos:line="118" pos:column="20">signed<pos:position pos:line="118" pos:column="26"/></name> <name pos:line="118" pos:column="27">int<pos:position pos:line="118" pos:column="30"/></name><operator pos:line="118" pos:column="30">)<pos:position pos:line="118" pos:column="31"/></operator> <name pos:line="118" pos:column="32">nread<pos:position pos:line="118" pos:column="37"/></name></expr>)<pos:position pos:line="118" pos:column="38"/></condition><then pos:line="118" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="119" pos:column="13">buf<pos:position pos:line="119" pos:column="16"/></name><index pos:line="119" pos:column="16">[<expr><name pos:line="119" pos:column="17">nread<pos:position pos:line="119" pos:column="22"/></name></expr>]<pos:position pos:line="119" pos:column="23"/></index></name> <operator pos:line="119" pos:column="24">=<pos:position pos:line="119" pos:column="25"/></operator> <literal type="number" pos:line="119" pos:column="26">0<pos:position pos:line="119" pos:column="27"/></literal></expr>;<pos:position pos:line="119" pos:column="28"/></expr_stmt></block></then>

          <comment type="block" pos:line="121" pos:column="11">/* if we receive 0 or less here, the server closed the connection and
             we bail out from this! */</comment>
          <elseif pos:line="123" pos:column="11">else <if pos:line="123" pos:column="16">if <condition pos:line="123" pos:column="19">(<expr><literal type="number" pos:line="123" pos:column="20">0<pos:position pos:line="123" pos:column="21"/></literal> <operator pos:line="123" pos:column="22">&gt;=<pos:position pos:line="123" pos:column="27"/></operator> <operator pos:line="123" pos:column="25">(<pos:position pos:line="123" pos:column="26"/></operator><name pos:line="123" pos:column="26">signed<pos:position pos:line="123" pos:column="32"/></name> <name pos:line="123" pos:column="33">int<pos:position pos:line="123" pos:column="36"/></name><operator pos:line="123" pos:column="36">)<pos:position pos:line="123" pos:column="37"/></operator> <name pos:line="123" pos:column="38">nread<pos:position pos:line="123" pos:column="43"/></name></expr>)<pos:position pos:line="123" pos:column="44"/></condition><then pos:line="123" pos:column="44"> <block pos:line="123" pos:column="45">{
            <expr_stmt><expr><name pos:line="124" pos:column="13">keepon<pos:position pos:line="124" pos:column="19"/></name> <operator pos:line="124" pos:column="20">&amp;=<pos:position pos:line="124" pos:column="26"/></operator> <operator pos:line="124" pos:column="23">~<pos:position pos:line="124" pos:column="24"/></operator><name pos:line="124" pos:column="24">KEEP_READ<pos:position pos:line="124" pos:column="33"/></name></expr>;<pos:position pos:line="124" pos:column="34"/></expr_stmt>
            <break pos:line="125" pos:column="13">break;<pos:position pos:line="125" pos:column="19"/></break>
          }<pos:position pos:line="126" pos:column="12"/></block></then></if></elseif></if>

          <expr_stmt><expr><name pos:line="128" pos:column="11">str<pos:position pos:line="128" pos:column="14"/></name> <operator pos:line="128" pos:column="15">=<pos:position pos:line="128" pos:column="16"/></operator> <name pos:line="128" pos:column="17">buf<pos:position pos:line="128" pos:column="20"/></name></expr>;<pos:position pos:line="128" pos:column="21"/></expr_stmt>		<comment type="block" pos:line="128" pos:column="33">/* Default buffer to use when we write the
                                   buffer, it may be changed in the flow below
                                   before the actual storing is done. */</comment>

          <comment type="block" pos:line="132" pos:column="11">/* Since this is a two-state thing, we check if we are parsing
             headers at the moment or not. */</comment>
          
          <if pos:line="135" pos:column="11">if <condition pos:line="135" pos:column="14">(<expr><name pos:line="135" pos:column="15">header<pos:position pos:line="135" pos:column="21"/></name></expr>)<pos:position pos:line="135" pos:column="22"/></condition><then pos:line="135" pos:column="22"> <block pos:line="135" pos:column="23">{
            <comment type="block" pos:line="136" pos:column="13">/* we are in parse-the-header-mode */</comment>

            <comment type="block" pos:line="138" pos:column="13">/* header line within buffer loop */</comment>
            <do pos:line="139" pos:column="13">do <block pos:line="139" pos:column="16">{
              <decl_stmt><decl><type><name pos:line="140" pos:column="15">int<pos:position pos:line="140" pos:column="18"/></name></type> <name pos:line="140" pos:column="19">hbufp_index<pos:position pos:line="140" pos:column="30"/></name></decl>;<pos:position pos:line="140" pos:column="31"/></decl_stmt>
              
              <expr_stmt><expr><name pos:line="142" pos:column="15">str_start<pos:position pos:line="142" pos:column="24"/></name> <operator pos:line="142" pos:column="25">=<pos:position pos:line="142" pos:column="26"/></operator> <name pos:line="142" pos:column="27">str<pos:position pos:line="142" pos:column="30"/></name></expr>;<pos:position pos:line="142" pos:column="31"/></expr_stmt>	<comment type="block" pos:line="142" pos:column="33">/* str_start is start of line within buf */</comment>
              
              <expr_stmt><expr><name pos:line="144" pos:column="15">end_ptr<pos:position pos:line="144" pos:column="22"/></name> <operator pos:line="144" pos:column="23">=<pos:position pos:line="144" pos:column="24"/></operator> <call><name pos:line="144" pos:column="25">strchr<pos:position pos:line="144" pos:column="31"/></name> <argument_list pos:line="144" pos:column="32">(<argument><expr><name pos:line="144" pos:column="33">str_start<pos:position pos:line="144" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="144" pos:column="44">'\n'<pos:position pos:line="144" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="50"/></expr_stmt>
              
              <if pos:line="146" pos:column="15">if <condition pos:line="146" pos:column="18">(<expr><operator pos:line="146" pos:column="19">!<pos:position pos:line="146" pos:column="20"/></operator><name pos:line="146" pos:column="20">end_ptr<pos:position pos:line="146" pos:column="27"/></name></expr>)<pos:position pos:line="146" pos:column="28"/></condition><then pos:line="146" pos:column="28"> <block pos:line="146" pos:column="29">{
                <comment type="block" pos:line="147" pos:column="17">/* no more complete header lines within buffer */</comment>
                <comment type="block" pos:line="148" pos:column="17">/* copy what is remaining into headerbuff */</comment>
                <decl_stmt><decl><type><name pos:line="149" pos:column="17">int<pos:position pos:line="149" pos:column="20"/></name></type> <name pos:line="149" pos:column="21">str_length<pos:position pos:line="149" pos:column="31"/></name> <init pos:line="149" pos:column="32">= <expr><operator pos:line="149" pos:column="34">(<pos:position pos:line="149" pos:column="35"/></operator><name pos:line="149" pos:column="35">int<pos:position pos:line="149" pos:column="38"/></name><operator pos:line="149" pos:column="38">)<pos:position pos:line="149" pos:column="39"/></operator><call><name pos:line="149" pos:column="39">strlen<pos:position pos:line="149" pos:column="45"/></name><argument_list pos:line="149" pos:column="45">(<argument><expr><name pos:line="149" pos:column="46">str<pos:position pos:line="149" pos:column="49"/></name></expr></argument>)<pos:position pos:line="149" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="149" pos:column="51"/></decl_stmt>
                
                <if pos:line="151" pos:column="17">if <condition pos:line="151" pos:column="20">(<expr><name pos:line="151" pos:column="21">hbuflen<pos:position pos:line="151" pos:column="28"/></name> <operator pos:line="151" pos:column="29">+<pos:position pos:line="151" pos:column="30"/></operator> <operator pos:line="151" pos:column="31">(<pos:position pos:line="151" pos:column="32"/></operator><name pos:line="151" pos:column="32">int<pos:position pos:line="151" pos:column="35"/></name><operator pos:line="151" pos:column="35">)<pos:position pos:line="151" pos:column="36"/></operator><name pos:line="151" pos:column="36">str_length<pos:position pos:line="151" pos:column="46"/></name> <operator pos:line="151" pos:column="47">&gt;=<pos:position pos:line="151" pos:column="52"/></operator> <name><name pos:line="151" pos:column="50">data<pos:position pos:line="151" pos:column="54"/></name><operator pos:line="151" pos:column="54">-&gt;<pos:position pos:line="151" pos:column="59"/></operator><name pos:line="151" pos:column="56">headersize<pos:position pos:line="151" pos:column="66"/></name></name></expr>)<pos:position pos:line="151" pos:column="67"/></condition><then pos:line="151" pos:column="67"> <block pos:line="151" pos:column="68">{
                  <decl_stmt><decl><type><name pos:line="152" pos:column="19">char<pos:position pos:line="152" pos:column="23"/></name> <modifier pos:line="152" pos:column="24">*<pos:position pos:line="152" pos:column="25"/></modifier></type><name pos:line="152" pos:column="25">newbuff<pos:position pos:line="152" pos:column="32"/></name></decl>;<pos:position pos:line="152" pos:column="33"/></decl_stmt>
                  <decl_stmt><decl><type><name pos:line="153" pos:column="19">long<pos:position pos:line="153" pos:column="23"/></name></type> <name pos:line="153" pos:column="24">newsize<pos:position pos:line="153" pos:column="31"/></name><init pos:line="153" pos:column="31">=<expr><call><name pos:line="153" pos:column="32">MAX<pos:position pos:line="153" pos:column="35"/></name><argument_list pos:line="153" pos:column="35">(<argument><expr><operator pos:line="153" pos:column="36">(<pos:position pos:line="153" pos:column="37"/></operator><name pos:line="153" pos:column="37">hbuflen<pos:position pos:line="153" pos:column="44"/></name><operator pos:line="153" pos:column="44">+<pos:position pos:line="153" pos:column="45"/></operator><name pos:line="153" pos:column="45">str_length<pos:position pos:line="153" pos:column="55"/></name><operator pos:line="153" pos:column="55">)<pos:position pos:line="153" pos:column="56"/></operator><operator pos:line="153" pos:column="56">*<pos:position pos:line="153" pos:column="57"/></operator><literal type="number" pos:line="153" pos:column="57">3<pos:position pos:line="153" pos:column="58"/></literal><operator pos:line="153" pos:column="58">/<pos:position pos:line="153" pos:column="59"/></operator><literal type="number" pos:line="153" pos:column="59">2<pos:position pos:line="153" pos:column="60"/></literal></expr></argument>,
                                   <argument><expr><name><name pos:line="154" pos:column="36">data<pos:position pos:line="154" pos:column="40"/></name><operator pos:line="154" pos:column="40">-&gt;<pos:position pos:line="154" pos:column="45"/></operator><name pos:line="154" pos:column="42">headersize<pos:position pos:line="154" pos:column="52"/></name></name><operator pos:line="154" pos:column="52">*<pos:position pos:line="154" pos:column="53"/></operator><literal type="number" pos:line="154" pos:column="53">2<pos:position pos:line="154" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="154" pos:column="56"/></decl_stmt>
                  <expr_stmt><expr><name pos:line="155" pos:column="19">hbufp_index<pos:position pos:line="155" pos:column="30"/></name> <operator pos:line="155" pos:column="31">=<pos:position pos:line="155" pos:column="32"/></operator> <name pos:line="155" pos:column="33">hbufp<pos:position pos:line="155" pos:column="38"/></name> <operator pos:line="155" pos:column="39">-<pos:position pos:line="155" pos:column="40"/></operator> <name><name pos:line="155" pos:column="41">data<pos:position pos:line="155" pos:column="45"/></name><operator pos:line="155" pos:column="45">-&gt;<pos:position pos:line="155" pos:column="50"/></operator><name pos:line="155" pos:column="47">headerbuff<pos:position pos:line="155" pos:column="57"/></name></name></expr>;<pos:position pos:line="155" pos:column="58"/></expr_stmt>
                  <expr_stmt><expr><name pos:line="156" pos:column="19">newbuff<pos:position pos:line="156" pos:column="26"/></name> <operator pos:line="156" pos:column="27">=<pos:position pos:line="156" pos:column="28"/></operator> <operator pos:line="156" pos:column="29">(<pos:position pos:line="156" pos:column="30"/></operator><name pos:line="156" pos:column="30">char<pos:position pos:line="156" pos:column="34"/></name> <operator pos:line="156" pos:column="35">*<pos:position pos:line="156" pos:column="36"/></operator><operator pos:line="156" pos:column="36">)<pos:position pos:line="156" pos:column="37"/></operator><call><name pos:line="156" pos:column="37">realloc<pos:position pos:line="156" pos:column="44"/></name><argument_list pos:line="156" pos:column="44">(<argument><expr><name><name pos:line="156" pos:column="45">data<pos:position pos:line="156" pos:column="49"/></name><operator pos:line="156" pos:column="49">-&gt;<pos:position pos:line="156" pos:column="54"/></operator><name pos:line="156" pos:column="51">headerbuff<pos:position pos:line="156" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="63">newsize<pos:position pos:line="156" pos:column="70"/></name></expr></argument>)<pos:position pos:line="156" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="72"/></expr_stmt>
                  <if pos:line="157" pos:column="19">if<condition pos:line="157" pos:column="21">(<expr><operator pos:line="157" pos:column="22">!<pos:position pos:line="157" pos:column="23"/></operator><name pos:line="157" pos:column="23">newbuff<pos:position pos:line="157" pos:column="30"/></name></expr>)<pos:position pos:line="157" pos:column="31"/></condition><then pos:line="157" pos:column="31"> <block pos:line="157" pos:column="32">{
                    <expr_stmt><expr><call><name pos:line="158" pos:column="21">failf<pos:position pos:line="158" pos:column="26"/></name> <argument_list pos:line="158" pos:column="27">(<argument><expr><name pos:line="158" pos:column="28">data<pos:position pos:line="158" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="158" pos:column="34">"Failed to alloc memory for big header!"<pos:position pos:line="158" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="76"/></expr_stmt>
                    <return pos:line="159" pos:column="21">return <expr><name pos:line="159" pos:column="28">CURLE_READ_ERROR<pos:position pos:line="159" pos:column="44"/></name></expr>;<pos:position pos:line="159" pos:column="45"/></return>
                  }<pos:position pos:line="160" pos:column="20"/></block></then></if>
                  <expr_stmt><expr><name><name pos:line="161" pos:column="19">data<pos:position pos:line="161" pos:column="23"/></name><operator pos:line="161" pos:column="23">-&gt;<pos:position pos:line="161" pos:column="28"/></operator><name pos:line="161" pos:column="25">headersize<pos:position pos:line="161" pos:column="35"/></name></name><operator pos:line="161" pos:column="35">=<pos:position pos:line="161" pos:column="36"/></operator><name pos:line="161" pos:column="36">newsize<pos:position pos:line="161" pos:column="43"/></name></expr>;<pos:position pos:line="161" pos:column="44"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="162" pos:column="19">data<pos:position pos:line="162" pos:column="23"/></name><operator pos:line="162" pos:column="23">-&gt;<pos:position pos:line="162" pos:column="28"/></operator><name pos:line="162" pos:column="25">headerbuff<pos:position pos:line="162" pos:column="35"/></name></name> <operator pos:line="162" pos:column="36">=<pos:position pos:line="162" pos:column="37"/></operator> <name pos:line="162" pos:column="38">newbuff<pos:position pos:line="162" pos:column="45"/></name></expr>;<pos:position pos:line="162" pos:column="46"/></expr_stmt>
                  <expr_stmt><expr><name pos:line="163" pos:column="19">hbufp<pos:position pos:line="163" pos:column="24"/></name> <operator pos:line="163" pos:column="25">=<pos:position pos:line="163" pos:column="26"/></operator> <name><name pos:line="163" pos:column="27">data<pos:position pos:line="163" pos:column="31"/></name><operator pos:line="163" pos:column="31">-&gt;<pos:position pos:line="163" pos:column="36"/></operator><name pos:line="163" pos:column="33">headerbuff<pos:position pos:line="163" pos:column="43"/></name></name> <operator pos:line="163" pos:column="44">+<pos:position pos:line="163" pos:column="45"/></operator> <name pos:line="163" pos:column="46">hbufp_index<pos:position pos:line="163" pos:column="57"/></name></expr>;<pos:position pos:line="163" pos:column="58"/></expr_stmt>
                }<pos:position pos:line="164" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="165" pos:column="17">strcpy<pos:position pos:line="165" pos:column="23"/></name> <argument_list pos:line="165" pos:column="24">(<argument><expr><name pos:line="165" pos:column="25">hbufp<pos:position pos:line="165" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="32">str<pos:position pos:line="165" pos:column="35"/></name></expr></argument>)<pos:position pos:line="165" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name pos:line="166" pos:column="17">hbufp<pos:position pos:line="166" pos:column="22"/></name> <operator pos:line="166" pos:column="23">+=<pos:position pos:line="166" pos:column="25"/></operator> <call><name pos:line="166" pos:column="26">strlen<pos:position pos:line="166" pos:column="32"/></name> <argument_list pos:line="166" pos:column="33">(<argument><expr><name pos:line="166" pos:column="34">str<pos:position pos:line="166" pos:column="37"/></name></expr></argument>)<pos:position pos:line="166" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><name pos:line="167" pos:column="17">hbuflen<pos:position pos:line="167" pos:column="24"/></name> <operator pos:line="167" pos:column="25">+=<pos:position pos:line="167" pos:column="27"/></operator> <call><name pos:line="167" pos:column="28">strlen<pos:position pos:line="167" pos:column="34"/></name> <argument_list pos:line="167" pos:column="35">(<argument><expr><name pos:line="167" pos:column="36">str<pos:position pos:line="167" pos:column="39"/></name></expr></argument>)<pos:position pos:line="167" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="41"/></expr_stmt>
                <break pos:line="168" pos:column="17">break;<pos:position pos:line="168" pos:column="23"/></break>		<comment type="block" pos:line="168" pos:column="33">/* read more and try again */</comment>
              }<pos:position pos:line="169" pos:column="16"/></block></then></if>

              <expr_stmt><expr><name pos:line="171" pos:column="15">str<pos:position pos:line="171" pos:column="18"/></name> <operator pos:line="171" pos:column="19">=<pos:position pos:line="171" pos:column="20"/></operator> <name pos:line="171" pos:column="21">end_ptr<pos:position pos:line="171" pos:column="28"/></name> <operator pos:line="171" pos:column="29">+<pos:position pos:line="171" pos:column="30"/></operator> <literal type="number" pos:line="171" pos:column="31">1<pos:position pos:line="171" pos:column="32"/></literal></expr>;<pos:position pos:line="171" pos:column="33"/></expr_stmt>	<comment type="block" pos:line="171" pos:column="41">/* move just past new line */</comment>

              <if pos:line="173" pos:column="15">if <condition pos:line="173" pos:column="18">(<expr><name pos:line="173" pos:column="19">hbuflen<pos:position pos:line="173" pos:column="26"/></name> <operator pos:line="173" pos:column="27">+<pos:position pos:line="173" pos:column="28"/></operator> <operator pos:line="173" pos:column="29">(<pos:position pos:line="173" pos:column="30"/></operator><name pos:line="173" pos:column="30">str<pos:position pos:line="173" pos:column="33"/></name> <operator pos:line="173" pos:column="34">-<pos:position pos:line="173" pos:column="35"/></operator> <name pos:line="173" pos:column="36">str_start<pos:position pos:line="173" pos:column="45"/></name><operator pos:line="173" pos:column="45">)<pos:position pos:line="173" pos:column="46"/></operator> <operator pos:line="173" pos:column="47">&gt;=<pos:position pos:line="173" pos:column="52"/></operator> <name><name pos:line="173" pos:column="50">data<pos:position pos:line="173" pos:column="54"/></name><operator pos:line="173" pos:column="54">-&gt;<pos:position pos:line="173" pos:column="59"/></operator><name pos:line="173" pos:column="56">headersize<pos:position pos:line="173" pos:column="66"/></name></name></expr>)<pos:position pos:line="173" pos:column="67"/></condition><then pos:line="173" pos:column="67"> <block pos:line="173" pos:column="68">{
                <decl_stmt><decl><type><name pos:line="174" pos:column="17">char<pos:position pos:line="174" pos:column="21"/></name> <modifier pos:line="174" pos:column="22">*<pos:position pos:line="174" pos:column="23"/></modifier></type><name pos:line="174" pos:column="23">newbuff<pos:position pos:line="174" pos:column="30"/></name></decl>;<pos:position pos:line="174" pos:column="31"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="175" pos:column="17">long<pos:position pos:line="175" pos:column="21"/></name></type> <name pos:line="175" pos:column="22">newsize<pos:position pos:line="175" pos:column="29"/></name><init pos:line="175" pos:column="29">=<expr><call><name pos:line="175" pos:column="30">MAX<pos:position pos:line="175" pos:column="33"/></name><argument_list pos:line="175" pos:column="33">(<argument><expr><operator pos:line="175" pos:column="34">(<pos:position pos:line="175" pos:column="35"/></operator><name pos:line="175" pos:column="35">hbuflen<pos:position pos:line="175" pos:column="42"/></name><operator pos:line="175" pos:column="42">+<pos:position pos:line="175" pos:column="43"/></operator><operator pos:line="175" pos:column="43">(<pos:position pos:line="175" pos:column="44"/></operator><name pos:line="175" pos:column="44">str<pos:position pos:line="175" pos:column="47"/></name><operator pos:line="175" pos:column="47">-<pos:position pos:line="175" pos:column="48"/></operator><name pos:line="175" pos:column="48">str_start<pos:position pos:line="175" pos:column="57"/></name><operator pos:line="175" pos:column="57">)<pos:position pos:line="175" pos:column="58"/></operator><operator pos:line="175" pos:column="58">)<pos:position pos:line="175" pos:column="59"/></operator><operator pos:line="175" pos:column="59">*<pos:position pos:line="175" pos:column="60"/></operator><literal type="number" pos:line="175" pos:column="60">3<pos:position pos:line="175" pos:column="61"/></literal><operator pos:line="175" pos:column="61">/<pos:position pos:line="175" pos:column="62"/></operator><literal type="number" pos:line="175" pos:column="62">2<pos:position pos:line="175" pos:column="63"/></literal></expr></argument>,
                                 <argument><expr><name><name pos:line="176" pos:column="34">data<pos:position pos:line="176" pos:column="38"/></name><operator pos:line="176" pos:column="38">-&gt;<pos:position pos:line="176" pos:column="43"/></operator><name pos:line="176" pos:column="40">headersize<pos:position pos:line="176" pos:column="50"/></name></name><operator pos:line="176" pos:column="50">*<pos:position pos:line="176" pos:column="51"/></operator><literal type="number" pos:line="176" pos:column="51">2<pos:position pos:line="176" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="176" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="176" pos:column="54"/></decl_stmt>
                <expr_stmt><expr><name pos:line="177" pos:column="17">hbufp_index<pos:position pos:line="177" pos:column="28"/></name> <operator pos:line="177" pos:column="29">=<pos:position pos:line="177" pos:column="30"/></operator> <name pos:line="177" pos:column="31">hbufp<pos:position pos:line="177" pos:column="36"/></name> <operator pos:line="177" pos:column="37">-<pos:position pos:line="177" pos:column="38"/></operator> <name><name pos:line="177" pos:column="39">data<pos:position pos:line="177" pos:column="43"/></name><operator pos:line="177" pos:column="43">-&gt;<pos:position pos:line="177" pos:column="48"/></operator><name pos:line="177" pos:column="45">headerbuff<pos:position pos:line="177" pos:column="55"/></name></name></expr>;<pos:position pos:line="177" pos:column="56"/></expr_stmt>
                <expr_stmt><expr><name pos:line="178" pos:column="17">newbuff<pos:position pos:line="178" pos:column="24"/></name> <operator pos:line="178" pos:column="25">=<pos:position pos:line="178" pos:column="26"/></operator> <operator pos:line="178" pos:column="27">(<pos:position pos:line="178" pos:column="28"/></operator><name pos:line="178" pos:column="28">char<pos:position pos:line="178" pos:column="32"/></name> <operator pos:line="178" pos:column="33">*<pos:position pos:line="178" pos:column="34"/></operator><operator pos:line="178" pos:column="34">)<pos:position pos:line="178" pos:column="35"/></operator><call><name pos:line="178" pos:column="35">realloc<pos:position pos:line="178" pos:column="42"/></name><argument_list pos:line="178" pos:column="42">(<argument><expr><name><name pos:line="178" pos:column="43">data<pos:position pos:line="178" pos:column="47"/></name><operator pos:line="178" pos:column="47">-&gt;<pos:position pos:line="178" pos:column="52"/></operator><name pos:line="178" pos:column="49">headerbuff<pos:position pos:line="178" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="61">newsize<pos:position pos:line="178" pos:column="68"/></name></expr></argument>)<pos:position pos:line="178" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="70"/></expr_stmt>
                <if pos:line="179" pos:column="17">if<condition pos:line="179" pos:column="19">(<expr><operator pos:line="179" pos:column="20">!<pos:position pos:line="179" pos:column="21"/></operator><name pos:line="179" pos:column="21">newbuff<pos:position pos:line="179" pos:column="28"/></name></expr>)<pos:position pos:line="179" pos:column="29"/></condition><then pos:line="179" pos:column="29"> <block pos:line="179" pos:column="30">{
                  <expr_stmt><expr><call><name pos:line="180" pos:column="19">failf<pos:position pos:line="180" pos:column="24"/></name> <argument_list pos:line="180" pos:column="25">(<argument><expr><name pos:line="180" pos:column="26">data<pos:position pos:line="180" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="180" pos:column="32">"Failed to alloc memory for big header!"<pos:position pos:line="180" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="74"/></expr_stmt>
                  <return pos:line="181" pos:column="19">return <expr><name pos:line="181" pos:column="26">CURLE_READ_ERROR<pos:position pos:line="181" pos:column="42"/></name></expr>;<pos:position pos:line="181" pos:column="43"/></return>
                }<pos:position pos:line="182" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name><name pos:line="183" pos:column="17">data<pos:position pos:line="183" pos:column="21"/></name><operator pos:line="183" pos:column="21">-&gt;<pos:position pos:line="183" pos:column="26"/></operator><name pos:line="183" pos:column="23">headersize<pos:position pos:line="183" pos:column="33"/></name></name><operator pos:line="183" pos:column="33">=<pos:position pos:line="183" pos:column="34"/></operator> <name pos:line="183" pos:column="35">newsize<pos:position pos:line="183" pos:column="42"/></name></expr>;<pos:position pos:line="183" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="184" pos:column="17">data<pos:position pos:line="184" pos:column="21"/></name><operator pos:line="184" pos:column="21">-&gt;<pos:position pos:line="184" pos:column="26"/></operator><name pos:line="184" pos:column="23">headerbuff<pos:position pos:line="184" pos:column="33"/></name></name> <operator pos:line="184" pos:column="34">=<pos:position pos:line="184" pos:column="35"/></operator> <name pos:line="184" pos:column="36">newbuff<pos:position pos:line="184" pos:column="43"/></name></expr>;<pos:position pos:line="184" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><name pos:line="185" pos:column="17">hbufp<pos:position pos:line="185" pos:column="22"/></name> <operator pos:line="185" pos:column="23">=<pos:position pos:line="185" pos:column="24"/></operator> <name><name pos:line="185" pos:column="25">data<pos:position pos:line="185" pos:column="29"/></name><operator pos:line="185" pos:column="29">-&gt;<pos:position pos:line="185" pos:column="34"/></operator><name pos:line="185" pos:column="31">headerbuff<pos:position pos:line="185" pos:column="41"/></name></name> <operator pos:line="185" pos:column="42">+<pos:position pos:line="185" pos:column="43"/></operator> <name pos:line="185" pos:column="44">hbufp_index<pos:position pos:line="185" pos:column="55"/></name></expr>;<pos:position pos:line="185" pos:column="56"/></expr_stmt>
              }<pos:position pos:line="186" pos:column="16"/></block></then></if>

              <comment type="block" pos:line="188" pos:column="15">/* copy to end of line */</comment>
              <expr_stmt><expr><call><name pos:line="189" pos:column="15">strncpy<pos:position pos:line="189" pos:column="22"/></name> <argument_list pos:line="189" pos:column="23">(<argument><expr><name pos:line="189" pos:column="24">hbufp<pos:position pos:line="189" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="31">str_start<pos:position pos:line="189" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="42">str<pos:position pos:line="189" pos:column="45"/></name> <operator pos:line="189" pos:column="46">-<pos:position pos:line="189" pos:column="47"/></operator> <name pos:line="189" pos:column="48">str_start<pos:position pos:line="189" pos:column="57"/></name></expr></argument>)<pos:position pos:line="189" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="59"/></expr_stmt>
              <expr_stmt><expr><name pos:line="190" pos:column="15">hbufp<pos:position pos:line="190" pos:column="20"/></name> <operator pos:line="190" pos:column="21">+=<pos:position pos:line="190" pos:column="23"/></operator> <name pos:line="190" pos:column="24">str<pos:position pos:line="190" pos:column="27"/></name> <operator pos:line="190" pos:column="28">-<pos:position pos:line="190" pos:column="29"/></operator> <name pos:line="190" pos:column="30">str_start<pos:position pos:line="190" pos:column="39"/></name></expr>;<pos:position pos:line="190" pos:column="40"/></expr_stmt>
              <expr_stmt><expr><name pos:line="191" pos:column="15">hbuflen<pos:position pos:line="191" pos:column="22"/></name> <operator pos:line="191" pos:column="23">+=<pos:position pos:line="191" pos:column="25"/></operator> <name pos:line="191" pos:column="26">str<pos:position pos:line="191" pos:column="29"/></name> <operator pos:line="191" pos:column="30">-<pos:position pos:line="191" pos:column="31"/></operator> <name pos:line="191" pos:column="32">str_start<pos:position pos:line="191" pos:column="41"/></name></expr>;<pos:position pos:line="191" pos:column="42"/></expr_stmt>
              <expr_stmt><expr><operator pos:line="192" pos:column="15">*<pos:position pos:line="192" pos:column="16"/></operator><name pos:line="192" pos:column="16">hbufp<pos:position pos:line="192" pos:column="21"/></name> <operator pos:line="192" pos:column="22">=<pos:position pos:line="192" pos:column="23"/></operator> <literal type="number" pos:line="192" pos:column="24">0<pos:position pos:line="192" pos:column="25"/></literal></expr>;<pos:position pos:line="192" pos:column="26"/></expr_stmt>
              
              <expr_stmt><expr><name pos:line="194" pos:column="15">p<pos:position pos:line="194" pos:column="16"/></name> <operator pos:line="194" pos:column="17">=<pos:position pos:line="194" pos:column="18"/></operator> <name><name pos:line="194" pos:column="19">data<pos:position pos:line="194" pos:column="23"/></name><operator pos:line="194" pos:column="23">-&gt;<pos:position pos:line="194" pos:column="28"/></operator><name pos:line="194" pos:column="25">headerbuff<pos:position pos:line="194" pos:column="35"/></name></name></expr>;<pos:position pos:line="194" pos:column="36"/></expr_stmt>
              
              <comment type="block" pos:line="196" pos:column="15">/* we now have a full line that p points to */</comment>
              <if pos:line="197" pos:column="15">if <condition pos:line="197" pos:column="18">(<expr><operator pos:line="197" pos:column="19">(<pos:position pos:line="197" pos:column="20"/></operator><literal type="char" pos:line="197" pos:column="20">'\n'<pos:position pos:line="197" pos:column="24"/></literal> <operator pos:line="197" pos:column="25">==<pos:position pos:line="197" pos:column="27"/></operator> <operator pos:line="197" pos:column="28">*<pos:position pos:line="197" pos:column="29"/></operator><name pos:line="197" pos:column="29">p<pos:position pos:line="197" pos:column="30"/></name><operator pos:line="197" pos:column="30">)<pos:position pos:line="197" pos:column="31"/></operator> <operator pos:line="197" pos:column="32">||<pos:position pos:line="197" pos:column="34"/></operator> <operator pos:line="197" pos:column="35">(<pos:position pos:line="197" pos:column="36"/></operator><literal type="char" pos:line="197" pos:column="36">'\r'<pos:position pos:line="197" pos:column="40"/></literal> <operator pos:line="197" pos:column="41">==<pos:position pos:line="197" pos:column="43"/></operator> <operator pos:line="197" pos:column="44">*<pos:position pos:line="197" pos:column="45"/></operator><name pos:line="197" pos:column="45">p<pos:position pos:line="197" pos:column="46"/></name><operator pos:line="197" pos:column="46">)<pos:position pos:line="197" pos:column="47"/></operator></expr>)<pos:position pos:line="197" pos:column="48"/></condition><then pos:line="197" pos:column="48"> <block pos:line="197" pos:column="49">{
                <comment type="block" pos:line="198" pos:column="17">/* Zero-length line means end of header! */</comment>
                <if pos:line="199" pos:column="17">if <condition pos:line="199" pos:column="20">(<expr><operator pos:line="199" pos:column="21">-<pos:position pos:line="199" pos:column="22"/></operator><literal type="number" pos:line="199" pos:column="22">1<pos:position pos:line="199" pos:column="23"/></literal> <operator pos:line="199" pos:column="24">!=<pos:position pos:line="199" pos:column="26"/></operator> <name><name pos:line="199" pos:column="27">conn<pos:position pos:line="199" pos:column="31"/></name><operator pos:line="199" pos:column="31">-&gt;<pos:position pos:line="199" pos:column="36"/></operator><name pos:line="199" pos:column="33">size<pos:position pos:line="199" pos:column="37"/></name></name></expr>)<pos:position pos:line="199" pos:column="38"/></condition><then pos:line="199" pos:column="38">	<comment type="block" pos:line="199" pos:column="41">/* if known */</comment>
                  <block type="pseudo"><expr_stmt><expr><name><name pos:line="200" pos:column="19">conn<pos:position pos:line="200" pos:column="23"/></name><operator pos:line="200" pos:column="23">-&gt;<pos:position pos:line="200" pos:column="28"/></operator><name pos:line="200" pos:column="25">size<pos:position pos:line="200" pos:column="29"/></name></name> <operator pos:line="200" pos:column="30">+=<pos:position pos:line="200" pos:column="32"/></operator> <name pos:line="200" pos:column="33">bytecount<pos:position pos:line="200" pos:column="42"/></name></expr>;<pos:position pos:line="200" pos:column="43"/></expr_stmt></block></then></if> <comment type="block" pos:line="200" pos:column="44">/* we append the already read size */</comment>


                <if pos:line="203" pos:column="17">if <condition pos:line="203" pos:column="20">(<expr><literal type="char" pos:line="203" pos:column="21">'\r'<pos:position pos:line="203" pos:column="25"/></literal> <operator pos:line="203" pos:column="26">==<pos:position pos:line="203" pos:column="28"/></operator> <operator pos:line="203" pos:column="29">*<pos:position pos:line="203" pos:column="30"/></operator><name pos:line="203" pos:column="30">p<pos:position pos:line="203" pos:column="31"/></name></expr>)<pos:position pos:line="203" pos:column="32"/></condition><then pos:line="203" pos:column="32">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="204" pos:column="19">p<pos:position pos:line="204" pos:column="20"/></name><operator pos:line="204" pos:column="20">++<pos:position pos:line="204" pos:column="22"/></operator></expr>;<pos:position pos:line="204" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="204" pos:column="33">/* pass the \r byte */</comment>
                <if pos:line="205" pos:column="17">if <condition pos:line="205" pos:column="20">(<expr><literal type="char" pos:line="205" pos:column="21">'\n'<pos:position pos:line="205" pos:column="25"/></literal> <operator pos:line="205" pos:column="26">==<pos:position pos:line="205" pos:column="28"/></operator> <operator pos:line="205" pos:column="29">*<pos:position pos:line="205" pos:column="30"/></operator><name pos:line="205" pos:column="30">p<pos:position pos:line="205" pos:column="31"/></name></expr>)<pos:position pos:line="205" pos:column="32"/></condition><then pos:line="205" pos:column="32">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="206" pos:column="19">p<pos:position pos:line="206" pos:column="20"/></name><operator pos:line="206" pos:column="20">++<pos:position pos:line="206" pos:column="22"/></operator></expr>;<pos:position pos:line="206" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="206" pos:column="33">/* pass the \n byte */</comment>

                <expr_stmt><expr><call><name pos:line="208" pos:column="17">pgrsSetDownloadSize<pos:position pos:line="208" pos:column="36"/></name><argument_list pos:line="208" pos:column="36">(<argument><expr><name pos:line="208" pos:column="37">data<pos:position pos:line="208" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="208" pos:column="43">conn<pos:position pos:line="208" pos:column="47"/></name><operator pos:line="208" pos:column="47">-&gt;<pos:position pos:line="208" pos:column="52"/></operator><name pos:line="208" pos:column="49">size<pos:position pos:line="208" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="208" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="55"/></expr_stmt>

                <expr_stmt><expr><name pos:line="210" pos:column="17">header<pos:position pos:line="210" pos:column="23"/></name> <operator pos:line="210" pos:column="24">=<pos:position pos:line="210" pos:column="25"/></operator> <name pos:line="210" pos:column="26">FALSE<pos:position pos:line="210" pos:column="31"/></name></expr>;<pos:position pos:line="210" pos:column="32"/></expr_stmt>	<comment type="block" pos:line="210" pos:column="33">/* no more header to parse! */</comment>

                <comment type="block" pos:line="212" pos:column="17">/* now, only output this if the header AND body are requested:
                 */</comment>
                <if pos:line="214" pos:column="17">if <condition pos:line="214" pos:column="20">(<expr><name><name pos:line="214" pos:column="21">data<pos:position pos:line="214" pos:column="25"/></name><operator pos:line="214" pos:column="25">-&gt;<pos:position pos:line="214" pos:column="30"/></operator><name pos:line="214" pos:column="27">bits<pos:position pos:line="214" pos:column="31"/></name><operator pos:line="214" pos:column="31">.<pos:position pos:line="214" pos:column="32"/></operator><name pos:line="214" pos:column="32">http_include_header<pos:position pos:line="214" pos:column="51"/></name></name></expr>)<pos:position pos:line="214" pos:column="52"/></condition><then pos:line="214" pos:column="52"> <block pos:line="214" pos:column="53">{
                  <if pos:line="215" pos:column="19">if<condition pos:line="215" pos:column="21">(<expr><operator pos:line="215" pos:column="22">(<pos:position pos:line="215" pos:column="23"/></operator><name pos:line="215" pos:column="23">p<pos:position pos:line="215" pos:column="24"/></name> <operator pos:line="215" pos:column="25">-<pos:position pos:line="215" pos:column="26"/></operator> <name><name pos:line="215" pos:column="27">data<pos:position pos:line="215" pos:column="31"/></name><operator pos:line="215" pos:column="31">-&gt;<pos:position pos:line="215" pos:column="36"/></operator><name pos:line="215" pos:column="33">headerbuff<pos:position pos:line="215" pos:column="43"/></name></name><operator pos:line="215" pos:column="43">)<pos:position pos:line="215" pos:column="44"/></operator> <operator pos:line="215" pos:column="45">!=<pos:position pos:line="215" pos:column="47"/></operator>
                     <call><name><name pos:line="216" pos:column="22">data<pos:position pos:line="216" pos:column="26"/></name><operator pos:line="216" pos:column="26">-&gt;<pos:position pos:line="216" pos:column="31"/></operator><name pos:line="216" pos:column="28">fwrite<pos:position pos:line="216" pos:column="34"/></name></name> <argument_list pos:line="216" pos:column="35">(<argument><expr><name><name pos:line="216" pos:column="36">data<pos:position pos:line="216" pos:column="40"/></name><operator pos:line="216" pos:column="40">-&gt;<pos:position pos:line="216" pos:column="45"/></operator><name pos:line="216" pos:column="42">headerbuff<pos:position pos:line="216" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="216" pos:column="54">1<pos:position pos:line="216" pos:column="55"/></literal></expr></argument>,
                                   <argument><expr><name pos:line="217" pos:column="36">p<pos:position pos:line="217" pos:column="37"/></name> <operator pos:line="217" pos:column="38">-<pos:position pos:line="217" pos:column="39"/></operator> <name><name pos:line="217" pos:column="40">data<pos:position pos:line="217" pos:column="44"/></name><operator pos:line="217" pos:column="44">-&gt;<pos:position pos:line="217" pos:column="49"/></operator><name pos:line="217" pos:column="46">headerbuff<pos:position pos:line="217" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="217" pos:column="58">data<pos:position pos:line="217" pos:column="62"/></name><operator pos:line="217" pos:column="62">-&gt;<pos:position pos:line="217" pos:column="67"/></operator><name pos:line="217" pos:column="64">out<pos:position pos:line="217" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="217" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="217" pos:column="69"/></condition><then pos:line="217" pos:column="69"> <block pos:line="217" pos:column="70">{
                    <expr_stmt><expr><call><name pos:line="218" pos:column="21">failf<pos:position pos:line="218" pos:column="26"/></name> <argument_list pos:line="218" pos:column="27">(<argument><expr><name pos:line="218" pos:column="28">data<pos:position pos:line="218" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="218" pos:column="34">"Failed writing output"<pos:position pos:line="218" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="218" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="59"/></expr_stmt>
                    <return pos:line="219" pos:column="21">return <expr><name pos:line="219" pos:column="28">CURLE_WRITE_ERROR<pos:position pos:line="219" pos:column="45"/></name></expr>;<pos:position pos:line="219" pos:column="46"/></return>
                  }<pos:position pos:line="220" pos:column="20"/></block></then></if>
                }<pos:position pos:line="221" pos:column="18"/></block></then></if>
                <if pos:line="222" pos:column="17">if<condition pos:line="222" pos:column="19">(<expr><name><name pos:line="222" pos:column="20">data<pos:position pos:line="222" pos:column="24"/></name><operator pos:line="222" pos:column="24">-&gt;<pos:position pos:line="222" pos:column="29"/></operator><name pos:line="222" pos:column="26">writeheader<pos:position pos:line="222" pos:column="37"/></name></name></expr>)<pos:position pos:line="222" pos:column="38"/></condition><then pos:line="222" pos:column="38"> <block pos:line="222" pos:column="39">{
                  <comment type="block" pos:line="223" pos:column="19">/* obviously, the header is requested to be written to
                     this file: */</comment>
                  <if pos:line="225" pos:column="19">if<condition pos:line="225" pos:column="21">(<expr><operator pos:line="225" pos:column="22">(<pos:position pos:line="225" pos:column="23"/></operator><name pos:line="225" pos:column="23">p<pos:position pos:line="225" pos:column="24"/></name> <operator pos:line="225" pos:column="25">-<pos:position pos:line="225" pos:column="26"/></operator> <name><name pos:line="225" pos:column="27">data<pos:position pos:line="225" pos:column="31"/></name><operator pos:line="225" pos:column="31">-&gt;<pos:position pos:line="225" pos:column="36"/></operator><name pos:line="225" pos:column="33">headerbuff<pos:position pos:line="225" pos:column="43"/></name></name><operator pos:line="225" pos:column="43">)<pos:position pos:line="225" pos:column="44"/></operator> <operator pos:line="225" pos:column="45">!=<pos:position pos:line="225" pos:column="47"/></operator>
                     <call><name><name pos:line="226" pos:column="22">data<pos:position pos:line="226" pos:column="26"/></name><operator pos:line="226" pos:column="26">-&gt;<pos:position pos:line="226" pos:column="31"/></operator><name pos:line="226" pos:column="28">fwrite<pos:position pos:line="226" pos:column="34"/></name></name> <argument_list pos:line="226" pos:column="35">(<argument><expr><name><name pos:line="226" pos:column="36">data<pos:position pos:line="226" pos:column="40"/></name><operator pos:line="226" pos:column="40">-&gt;<pos:position pos:line="226" pos:column="45"/></operator><name pos:line="226" pos:column="42">headerbuff<pos:position pos:line="226" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="226" pos:column="54">1<pos:position pos:line="226" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="226" pos:column="57">p<pos:position pos:line="226" pos:column="58"/></name> <operator pos:line="226" pos:column="59">-<pos:position pos:line="226" pos:column="60"/></operator> <name><name pos:line="226" pos:column="61">data<pos:position pos:line="226" pos:column="65"/></name><operator pos:line="226" pos:column="65">-&gt;<pos:position pos:line="226" pos:column="70"/></operator><name pos:line="226" pos:column="67">headerbuff<pos:position pos:line="226" pos:column="77"/></name></name></expr></argument>,
                                   <argument><expr><name><name pos:line="227" pos:column="36">data<pos:position pos:line="227" pos:column="40"/></name><operator pos:line="227" pos:column="40">-&gt;<pos:position pos:line="227" pos:column="45"/></operator><name pos:line="227" pos:column="42">writeheader<pos:position pos:line="227" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="227" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="227" pos:column="55"/></condition><then pos:line="227" pos:column="55"> <block pos:line="227" pos:column="56">{
                    <expr_stmt><expr><call><name pos:line="228" pos:column="21">failf<pos:position pos:line="228" pos:column="26"/></name> <argument_list pos:line="228" pos:column="27">(<argument><expr><name pos:line="228" pos:column="28">data<pos:position pos:line="228" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="228" pos:column="34">"Failed writing output"<pos:position pos:line="228" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="228" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="59"/></expr_stmt>
                    <return pos:line="229" pos:column="21">return <expr><name pos:line="229" pos:column="28">CURLE_WRITE_ERROR<pos:position pos:line="229" pos:column="45"/></name></expr>;<pos:position pos:line="229" pos:column="46"/></return>
                  }<pos:position pos:line="230" pos:column="20"/></block></then></if>
                }<pos:position pos:line="231" pos:column="18"/></block></then></if>
                <break pos:line="232" pos:column="17">break;<pos:position pos:line="232" pos:column="23"/></break>		<comment type="block" pos:line="232" pos:column="33">/* exit header line loop */</comment>
              }<pos:position pos:line="233" pos:column="16"/></block></then></if>
              
              <if pos:line="235" pos:column="15">if <condition pos:line="235" pos:column="18">(<expr><operator pos:line="235" pos:column="19">!<pos:position pos:line="235" pos:column="20"/></operator><name pos:line="235" pos:column="20">headerline<pos:position pos:line="235" pos:column="30"/></name><operator pos:line="235" pos:column="30">++<pos:position pos:line="235" pos:column="32"/></operator></expr>)<pos:position pos:line="235" pos:column="33"/></condition><then pos:line="235" pos:column="33"> <block pos:line="235" pos:column="34">{
                <comment type="block" pos:line="236" pos:column="17">/* This is the first header, it MUST be the error code line
                   or else we consiser this to be the body right away! */</comment>
                <if pos:line="238" pos:column="17">if <condition pos:line="238" pos:column="20">(<expr><call><name pos:line="238" pos:column="21">sscanf<pos:position pos:line="238" pos:column="27"/></name> <argument_list pos:line="238" pos:column="28">(<argument><expr><name pos:line="238" pos:column="29">p<pos:position pos:line="238" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="238" pos:column="32">" HTTP/1.%*c %3d"<pos:position pos:line="238" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="238" pos:column="51">&amp;<pos:position pos:line="238" pos:column="56"/></operator><name pos:line="238" pos:column="52">code<pos:position pos:line="238" pos:column="56"/></name></expr></argument>)<pos:position pos:line="238" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="238" pos:column="58"/></condition><then pos:line="238" pos:column="58"> <block pos:line="238" pos:column="59">{
                  <comment type="block" pos:line="239" pos:column="19">/* 404 -&gt; URL not found! */</comment>
                  <if pos:line="240" pos:column="19">if <condition pos:line="240" pos:column="22">(
                      <expr><operator pos:line="241" pos:column="23">(<pos:position pos:line="241" pos:column="24"/></operator> <operator pos:line="241" pos:column="25">(<pos:position pos:line="241" pos:column="26"/></operator><operator pos:line="241" pos:column="26">(<pos:position pos:line="241" pos:column="27"/></operator><name><name pos:line="241" pos:column="27">data<pos:position pos:line="241" pos:column="31"/></name><operator pos:line="241" pos:column="31">-&gt;<pos:position pos:line="241" pos:column="36"/></operator><name pos:line="241" pos:column="33">bits<pos:position pos:line="241" pos:column="37"/></name><operator pos:line="241" pos:column="37">.<pos:position pos:line="241" pos:column="38"/></operator><name pos:line="241" pos:column="38">http_follow_location<pos:position pos:line="241" pos:column="58"/></name></name><operator pos:line="241" pos:column="58">)<pos:position pos:line="241" pos:column="59"/></operator> <operator pos:line="241" pos:column="60">&amp;&amp;<pos:position pos:line="241" pos:column="70"/></operator> <operator pos:line="241" pos:column="63">(<pos:position pos:line="241" pos:column="64"/></operator><name pos:line="241" pos:column="64">code<pos:position pos:line="241" pos:column="68"/></name> <operator pos:line="241" pos:column="69">&gt;=<pos:position pos:line="241" pos:column="74"/></operator> <literal type="number" pos:line="241" pos:column="72">400<pos:position pos:line="241" pos:column="75"/></literal><operator pos:line="241" pos:column="75">)<pos:position pos:line="241" pos:column="76"/></operator><operator pos:line="241" pos:column="76">)<pos:position pos:line="241" pos:column="77"/></operator>
                        <operator pos:line="242" pos:column="25">||<pos:position pos:line="242" pos:column="27"/></operator>
                        <operator pos:line="243" pos:column="25">(<pos:position pos:line="243" pos:column="26"/></operator><operator pos:line="243" pos:column="26">!<pos:position pos:line="243" pos:column="27"/></operator><name><name pos:line="243" pos:column="27">data<pos:position pos:line="243" pos:column="31"/></name><operator pos:line="243" pos:column="31">-&gt;<pos:position pos:line="243" pos:column="36"/></operator><name pos:line="243" pos:column="33">bits<pos:position pos:line="243" pos:column="37"/></name><operator pos:line="243" pos:column="37">.<pos:position pos:line="243" pos:column="38"/></operator><name pos:line="243" pos:column="38">http_follow_location<pos:position pos:line="243" pos:column="58"/></name></name> <operator pos:line="243" pos:column="59">&amp;&amp;<pos:position pos:line="243" pos:column="69"/></operator> <operator pos:line="243" pos:column="62">(<pos:position pos:line="243" pos:column="63"/></operator><name pos:line="243" pos:column="63">code<pos:position pos:line="243" pos:column="67"/></name> <operator pos:line="243" pos:column="68">&gt;=<pos:position pos:line="243" pos:column="73"/></operator> <literal type="number" pos:line="243" pos:column="71">300<pos:position pos:line="243" pos:column="74"/></literal><operator pos:line="243" pos:column="74">)<pos:position pos:line="243" pos:column="75"/></operator><operator pos:line="243" pos:column="75">)<pos:position pos:line="243" pos:column="76"/></operator><operator pos:line="243" pos:column="76">)<pos:position pos:line="243" pos:column="77"/></operator>
                      <operator pos:line="244" pos:column="23">&amp;&amp;<pos:position pos:line="244" pos:column="33"/></operator> <operator pos:line="244" pos:column="26">(<pos:position pos:line="244" pos:column="27"/></operator><name><name pos:line="244" pos:column="27">data<pos:position pos:line="244" pos:column="31"/></name><operator pos:line="244" pos:column="31">-&gt;<pos:position pos:line="244" pos:column="36"/></operator><name pos:line="244" pos:column="33">bits<pos:position pos:line="244" pos:column="37"/></name><operator pos:line="244" pos:column="37">.<pos:position pos:line="244" pos:column="38"/></operator><name pos:line="244" pos:column="38">http_fail_on_error<pos:position pos:line="244" pos:column="56"/></name></name><operator pos:line="244" pos:column="56">)<pos:position pos:line="244" pos:column="57"/></operator></expr>)<pos:position pos:line="244" pos:column="58"/></condition><then pos:line="244" pos:column="58"> <block pos:line="244" pos:column="59">{
                    <comment type="block" pos:line="245" pos:column="21">/* If we have been told to fail hard on HTTP-errors,
                       here is the check for that: */</comment>
                    <comment type="block" pos:line="247" pos:column="21">/* serious error, go home! */</comment>
                    <expr_stmt><expr><call><name pos:line="248" pos:column="21">failf<pos:position pos:line="248" pos:column="26"/></name> <argument_list pos:line="248" pos:column="27">(<argument><expr><name pos:line="248" pos:column="28">data<pos:position pos:line="248" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="248" pos:column="34">"The requested file was not found"<pos:position pos:line="248" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="70"/></expr_stmt>
                    <return pos:line="249" pos:column="21">return <expr><name pos:line="249" pos:column="28">CURLE_HTTP_NOT_FOUND<pos:position pos:line="249" pos:column="48"/></name></expr>;<pos:position pos:line="249" pos:column="49"/></return>
                  }<pos:position pos:line="250" pos:column="20"/></block></then></if>
                  <expr_stmt><expr><name><name pos:line="251" pos:column="19">data<pos:position pos:line="251" pos:column="23"/></name><operator pos:line="251" pos:column="23">-&gt;<pos:position pos:line="251" pos:column="28"/></operator><name pos:line="251" pos:column="25">progress<pos:position pos:line="251" pos:column="33"/></name><operator pos:line="251" pos:column="33">.<pos:position pos:line="251" pos:column="34"/></operator><name pos:line="251" pos:column="34">httpcode<pos:position pos:line="251" pos:column="42"/></name></name> <operator pos:line="251" pos:column="43">=<pos:position pos:line="251" pos:column="44"/></operator> <name pos:line="251" pos:column="45">code<pos:position pos:line="251" pos:column="49"/></name></expr>;<pos:position pos:line="251" pos:column="50"/></expr_stmt>
                }<pos:position pos:line="252" pos:column="18"/></block></then>
                <else pos:line="253" pos:column="17">else <block pos:line="253" pos:column="22">{
                  <expr_stmt><expr><name pos:line="254" pos:column="19">header<pos:position pos:line="254" pos:column="25"/></name> <operator pos:line="254" pos:column="26">=<pos:position pos:line="254" pos:column="27"/></operator> <name pos:line="254" pos:column="28">FALSE<pos:position pos:line="254" pos:column="33"/></name></expr>;<pos:position pos:line="254" pos:column="34"/></expr_stmt>	<comment type="block" pos:line="254" pos:column="41">/* this is not a header line */</comment>
                  <break pos:line="255" pos:column="19">break;<pos:position pos:line="255" pos:column="25"/></break>
                }<pos:position pos:line="256" pos:column="18"/></block></else></if>
              }<pos:position pos:line="257" pos:column="16"/></block></then></if>
              <comment type="block" pos:line="258" pos:column="15">/* check for Content-Length: header lines to get size */</comment>
              <if pos:line="259" pos:column="15">if <condition pos:line="259" pos:column="18">(<expr><call><name pos:line="259" pos:column="19">strnequal<pos:position pos:line="259" pos:column="28"/></name><argument_list pos:line="259" pos:column="28">(<argument><expr><literal type="string" pos:line="259" pos:column="29">"Content-Length"<pos:position pos:line="259" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="259" pos:column="47">p<pos:position pos:line="259" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="259" pos:column="50">14<pos:position pos:line="259" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="259" pos:column="53"/></argument_list></call> <operator pos:line="259" pos:column="54">&amp;&amp;<pos:position pos:line="259" pos:column="64"/></operator>
                  <call><name pos:line="260" pos:column="19">sscanf<pos:position pos:line="260" pos:column="25"/></name> <argument_list pos:line="260" pos:column="26">(<argument><expr><name pos:line="260" pos:column="27">p<pos:position pos:line="260" pos:column="28"/></name><operator pos:line="260" pos:column="28">+<pos:position pos:line="260" pos:column="29"/></operator><literal type="number" pos:line="260" pos:column="29">14<pos:position pos:line="260" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="260" pos:column="33">": %ld"<pos:position pos:line="260" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="260" pos:column="42">&amp;<pos:position pos:line="260" pos:column="47"/></operator><name pos:line="260" pos:column="43">contentlength<pos:position pos:line="260" pos:column="56"/></name></expr></argument>)<pos:position pos:line="260" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="260" pos:column="58"/></condition><then pos:line="260" pos:column="58">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="261" pos:column="17">conn<pos:position pos:line="261" pos:column="21"/></name><operator pos:line="261" pos:column="21">-&gt;<pos:position pos:line="261" pos:column="26"/></operator><name pos:line="261" pos:column="23">size<pos:position pos:line="261" pos:column="27"/></name></name> <operator pos:line="261" pos:column="28">=<pos:position pos:line="261" pos:column="29"/></operator> <name pos:line="261" pos:column="30">contentlength<pos:position pos:line="261" pos:column="43"/></name></expr>;<pos:position pos:line="261" pos:column="44"/></expr_stmt></block></then>
              <elseif pos:line="262" pos:column="15">else <if pos:line="262" pos:column="20">if <condition pos:line="262" pos:column="23">(<expr><call><name pos:line="262" pos:column="24">strnequal<pos:position pos:line="262" pos:column="33"/></name><argument_list pos:line="262" pos:column="33">(<argument><expr><literal type="string" pos:line="262" pos:column="34">"Content-Range"<pos:position pos:line="262" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="262" pos:column="51">p<pos:position pos:line="262" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="262" pos:column="54">13<pos:position pos:line="262" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="262" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="262" pos:column="58"/></condition><then pos:line="262" pos:column="58"> <block pos:line="262" pos:column="59">{
                <if pos:line="263" pos:column="17">if <condition pos:line="263" pos:column="20">(<expr><call><name pos:line="263" pos:column="21">sscanf<pos:position pos:line="263" pos:column="27"/></name> <argument_list pos:line="263" pos:column="28">(<argument><expr><name pos:line="263" pos:column="29">p<pos:position pos:line="263" pos:column="30"/></name><operator pos:line="263" pos:column="30">+<pos:position pos:line="263" pos:column="31"/></operator><literal type="number" pos:line="263" pos:column="31">13<pos:position pos:line="263" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="263" pos:column="35">": bytes %d-"<pos:position pos:line="263" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="263" pos:column="50">&amp;<pos:position pos:line="263" pos:column="55"/></operator><name pos:line="263" pos:column="51">offset<pos:position pos:line="263" pos:column="57"/></name></expr></argument>)<pos:position pos:line="263" pos:column="58"/></argument_list></call> <operator pos:line="263" pos:column="59">||<pos:position pos:line="263" pos:column="61"/></operator>
                    <call><name pos:line="264" pos:column="21">sscanf<pos:position pos:line="264" pos:column="27"/></name> <argument_list pos:line="264" pos:column="28">(<argument><expr><name pos:line="264" pos:column="29">p<pos:position pos:line="264" pos:column="30"/></name><operator pos:line="264" pos:column="30">+<pos:position pos:line="264" pos:column="31"/></operator><literal type="number" pos:line="264" pos:column="31">13<pos:position pos:line="264" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="264" pos:column="35">": bytes: %d-"<pos:position pos:line="264" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="264" pos:column="51">&amp;<pos:position pos:line="264" pos:column="56"/></operator><name pos:line="264" pos:column="52">offset<pos:position pos:line="264" pos:column="58"/></name></expr></argument>)<pos:position pos:line="264" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="264" pos:column="60"/></condition><then pos:line="264" pos:column="60"> <block pos:line="264" pos:column="61">{
                  <comment type="block" pos:line="265" pos:column="19">/* This second format was added August 1st by Igor
                     Khristophorov since Sun's webserver JavaWebServer/1.1.1
                     obviously sends the header this way! :-( */</comment>
                  <if pos:line="268" pos:column="19">if <condition pos:line="268" pos:column="22">(<expr><name><name pos:line="268" pos:column="23">data<pos:position pos:line="268" pos:column="27"/></name><operator pos:line="268" pos:column="27">-&gt;<pos:position pos:line="268" pos:column="32"/></operator><name pos:line="268" pos:column="29">resume_from<pos:position pos:line="268" pos:column="40"/></name></name> <operator pos:line="268" pos:column="41">==<pos:position pos:line="268" pos:column="43"/></operator> <name pos:line="268" pos:column="44">offset<pos:position pos:line="268" pos:column="50"/></name></expr>)<pos:position pos:line="268" pos:column="51"/></condition><then pos:line="268" pos:column="51"> <block pos:line="268" pos:column="52">{
                    <comment type="block" pos:line="269" pos:column="21">/* we asked for a resume and we got it */</comment>
                    <expr_stmt><expr><name pos:line="270" pos:column="21">content_range<pos:position pos:line="270" pos:column="34"/></name> <operator pos:line="270" pos:column="35">=<pos:position pos:line="270" pos:column="36"/></operator> <name pos:line="270" pos:column="37">TRUE<pos:position pos:line="270" pos:column="41"/></name></expr>;<pos:position pos:line="270" pos:column="42"/></expr_stmt>
                  }<pos:position pos:line="271" pos:column="20"/></block></then></if>
                }<pos:position pos:line="272" pos:column="18"/></block></then></if>
              }<pos:position pos:line="273" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="274" pos:column="15">else <if pos:line="274" pos:column="20">if<condition pos:line="274" pos:column="22">(<expr><name><name pos:line="274" pos:column="23">data<pos:position pos:line="274" pos:column="27"/></name><operator pos:line="274" pos:column="27">-&gt;<pos:position pos:line="274" pos:column="32"/></operator><name pos:line="274" pos:column="29">cookies<pos:position pos:line="274" pos:column="36"/></name></name> <operator pos:line="274" pos:column="37">&amp;&amp;<pos:position pos:line="274" pos:column="47"/></operator>
                      <call><name pos:line="275" pos:column="23">strnequal<pos:position pos:line="275" pos:column="32"/></name><argument_list pos:line="275" pos:column="32">(<argument><expr><literal type="string" pos:line="275" pos:column="33">"Set-Cookie: "<pos:position pos:line="275" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="275" pos:column="49">p<pos:position pos:line="275" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="275" pos:column="52">11<pos:position pos:line="275" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="275" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="275" pos:column="56"/></condition><then pos:line="275" pos:column="56"> <block pos:line="275" pos:column="57">{
                <expr_stmt><expr><call><name pos:line="276" pos:column="17">cookie_add<pos:position pos:line="276" pos:column="27"/></name><argument_list pos:line="276" pos:column="27">(<argument><expr><name><name pos:line="276" pos:column="28">data<pos:position pos:line="276" pos:column="32"/></name><operator pos:line="276" pos:column="32">-&gt;<pos:position pos:line="276" pos:column="37"/></operator><name pos:line="276" pos:column="34">cookies<pos:position pos:line="276" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="276" pos:column="43">TRUE<pos:position pos:line="276" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="276" pos:column="49">&amp;<pos:position pos:line="276" pos:column="54"/></operator><name><name pos:line="276" pos:column="50">p<pos:position pos:line="276" pos:column="51"/></name><index pos:line="276" pos:column="51">[<expr><literal type="number" pos:line="276" pos:column="52">12<pos:position pos:line="276" pos:column="54"/></literal></expr>]<pos:position pos:line="276" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="276" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="57"/></expr_stmt>
              }<pos:position pos:line="277" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="278" pos:column="15">else <if pos:line="278" pos:column="20">if<condition pos:line="278" pos:column="22">(<expr><call><name pos:line="278" pos:column="23">strnequal<pos:position pos:line="278" pos:column="32"/></name><argument_list pos:line="278" pos:column="32">(<argument><expr><literal type="string" pos:line="278" pos:column="33">"Last-Modified:"<pos:position pos:line="278" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="278" pos:column="51">p<pos:position pos:line="278" pos:column="52"/></name></expr></argument>,
                                <argument><expr><call><name pos:line="279" pos:column="33">strlen<pos:position pos:line="279" pos:column="39"/></name><argument_list pos:line="279" pos:column="39">(<argument><expr><literal type="string" pos:line="279" pos:column="40">"Last-Modified:"<pos:position pos:line="279" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="279" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="279" pos:column="58"/></argument_list></call> <operator pos:line="279" pos:column="59">&amp;&amp;<pos:position pos:line="279" pos:column="69"/></operator>
                      <name><name pos:line="280" pos:column="23">data<pos:position pos:line="280" pos:column="27"/></name><operator pos:line="280" pos:column="27">-&gt;<pos:position pos:line="280" pos:column="32"/></operator><name pos:line="280" pos:column="29">timecondition<pos:position pos:line="280" pos:column="42"/></name></name></expr>)<pos:position pos:line="280" pos:column="43"/></condition><then pos:line="280" pos:column="43"> <block pos:line="280" pos:column="44">{
                <decl_stmt><decl><type><name pos:line="281" pos:column="17">time_t<pos:position pos:line="281" pos:column="23"/></name></type> <name pos:line="281" pos:column="24">secs<pos:position pos:line="281" pos:column="28"/></name><init pos:line="281" pos:column="28">=<expr><call><name pos:line="281" pos:column="29">time<pos:position pos:line="281" pos:column="33"/></name><argument_list pos:line="281" pos:column="33">(<argument><expr><name pos:line="281" pos:column="34">NULL<pos:position pos:line="281" pos:column="38"/></name></expr></argument>)<pos:position pos:line="281" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="281" pos:column="40"/></decl_stmt>
                <expr_stmt><expr><name pos:line="282" pos:column="17">timeofdoc<pos:position pos:line="282" pos:column="26"/></name> <operator pos:line="282" pos:column="27">=<pos:position pos:line="282" pos:column="28"/></operator> <call><name pos:line="282" pos:column="29">curl_getdate<pos:position pos:line="282" pos:column="41"/></name><argument_list pos:line="282" pos:column="41">(<argument><expr><name pos:line="282" pos:column="42">p<pos:position pos:line="282" pos:column="43"/></name><operator pos:line="282" pos:column="43">+<pos:position pos:line="282" pos:column="44"/></operator><call><name pos:line="282" pos:column="44">strlen<pos:position pos:line="282" pos:column="50"/></name><argument_list pos:line="282" pos:column="50">(<argument><expr><literal type="string" pos:line="282" pos:column="51">"Last-Modified:"<pos:position pos:line="282" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="282" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="282" pos:column="70">&amp;<pos:position pos:line="282" pos:column="75"/></operator><name pos:line="282" pos:column="71">secs<pos:position pos:line="282" pos:column="75"/></name></expr></argument>)<pos:position pos:line="282" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="282" pos:column="77"/></expr_stmt>
              }<pos:position pos:line="283" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="284" pos:column="15">else <if pos:line="284" pos:column="20">if <condition pos:line="284" pos:column="23">(<expr><operator pos:line="284" pos:column="24">(<pos:position pos:line="284" pos:column="25"/></operator><name pos:line="284" pos:column="25">code<pos:position pos:line="284" pos:column="29"/></name> <operator pos:line="284" pos:column="30">&gt;=<pos:position pos:line="284" pos:column="35"/></operator> <literal type="number" pos:line="284" pos:column="33">300<pos:position pos:line="284" pos:column="36"/></literal> <operator pos:line="284" pos:column="37">&amp;&amp;<pos:position pos:line="284" pos:column="47"/></operator> <name pos:line="284" pos:column="40">code<pos:position pos:line="284" pos:column="44"/></name> <operator pos:line="284" pos:column="45">&lt;<pos:position pos:line="284" pos:column="49"/></operator> <literal type="number" pos:line="284" pos:column="47">400<pos:position pos:line="284" pos:column="50"/></literal><operator pos:line="284" pos:column="50">)<pos:position pos:line="284" pos:column="51"/></operator> <operator pos:line="284" pos:column="52">&amp;&amp;<pos:position pos:line="284" pos:column="62"/></operator>
                       <operator pos:line="285" pos:column="24">(<pos:position pos:line="285" pos:column="25"/></operator><name><name pos:line="285" pos:column="25">data<pos:position pos:line="285" pos:column="29"/></name><operator pos:line="285" pos:column="29">-&gt;<pos:position pos:line="285" pos:column="34"/></operator><name pos:line="285" pos:column="31">bits<pos:position pos:line="285" pos:column="35"/></name><operator pos:line="285" pos:column="35">.<pos:position pos:line="285" pos:column="36"/></operator><name pos:line="285" pos:column="36">http_follow_location<pos:position pos:line="285" pos:column="56"/></name></name><operator pos:line="285" pos:column="56">)<pos:position pos:line="285" pos:column="57"/></operator> <operator pos:line="285" pos:column="58">&amp;&amp;<pos:position pos:line="285" pos:column="68"/></operator>
                       <call><name pos:line="286" pos:column="24">strnequal<pos:position pos:line="286" pos:column="33"/></name><argument_list pos:line="286" pos:column="33">(<argument><expr><literal type="string" pos:line="286" pos:column="34">"Location"<pos:position pos:line="286" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="286" pos:column="46">p<pos:position pos:line="286" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="286" pos:column="49">8<pos:position pos:line="286" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="286" pos:column="51"/></argument_list></call> <operator pos:line="286" pos:column="52">&amp;&amp;<pos:position pos:line="286" pos:column="62"/></operator>
                       <call><name pos:line="287" pos:column="24">sscanf<pos:position pos:line="287" pos:column="30"/></name> <argument_list pos:line="287" pos:column="31">(<argument><expr><name pos:line="287" pos:column="32">p<pos:position pos:line="287" pos:column="33"/></name><operator pos:line="287" pos:column="33">+<pos:position pos:line="287" pos:column="34"/></operator><literal type="number" pos:line="287" pos:column="34">8<pos:position pos:line="287" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="287" pos:column="37">": %"<pos:position pos:line="287" pos:column="42"/></literal> <name pos:line="287" pos:column="43">URL_MAX_LENGTH_TXT<pos:position pos:line="287" pos:column="61"/></name> <literal type="string" pos:line="287" pos:column="62">"s"<pos:position pos:line="287" pos:column="65"/></literal></expr></argument>,
                               <argument><expr><name pos:line="288" pos:column="32">newurl<pos:position pos:line="288" pos:column="38"/></name></expr></argument>)<pos:position pos:line="288" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="288" pos:column="40"/></condition><then pos:line="288" pos:column="40"> <block pos:line="288" pos:column="41">{
                <comment type="block" pos:line="289" pos:column="17">/* this is the URL that the server advices us to get
                   instead */</comment>
                <expr_stmt><expr><name><name pos:line="291" pos:column="17">data<pos:position pos:line="291" pos:column="21"/></name><operator pos:line="291" pos:column="21">-&gt;<pos:position pos:line="291" pos:column="26"/></operator><name pos:line="291" pos:column="23">newurl<pos:position pos:line="291" pos:column="29"/></name></name> <operator pos:line="291" pos:column="30">=<pos:position pos:line="291" pos:column="31"/></operator> <call><name pos:line="291" pos:column="32">strdup<pos:position pos:line="291" pos:column="38"/></name> <argument_list pos:line="291" pos:column="39">(<argument><expr><name pos:line="291" pos:column="40">newurl<pos:position pos:line="291" pos:column="46"/></name></expr></argument>)<pos:position pos:line="291" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="48"/></expr_stmt>
              }<pos:position pos:line="292" pos:column="16"/></block></then></if></elseif></if>
              
              <if pos:line="294" pos:column="15">if <condition pos:line="294" pos:column="18">(<expr><name><name pos:line="294" pos:column="19">data<pos:position pos:line="294" pos:column="23"/></name><operator pos:line="294" pos:column="23">-&gt;<pos:position pos:line="294" pos:column="28"/></operator><name pos:line="294" pos:column="25">bits<pos:position pos:line="294" pos:column="29"/></name><operator pos:line="294" pos:column="29">.<pos:position pos:line="294" pos:column="30"/></operator><name pos:line="294" pos:column="30">http_include_header<pos:position pos:line="294" pos:column="49"/></name></name></expr>)<pos:position pos:line="294" pos:column="50"/></condition><then pos:line="294" pos:column="50"> <block pos:line="294" pos:column="51">{
                <if pos:line="295" pos:column="17">if<condition pos:line="295" pos:column="19">(<expr><name pos:line="295" pos:column="20">hbuflen<pos:position pos:line="295" pos:column="27"/></name> <operator pos:line="295" pos:column="28">!=<pos:position pos:line="295" pos:column="30"/></operator> <call><name><name pos:line="295" pos:column="31">data<pos:position pos:line="295" pos:column="35"/></name><operator pos:line="295" pos:column="35">-&gt;<pos:position pos:line="295" pos:column="40"/></operator><name pos:line="295" pos:column="37">fwrite<pos:position pos:line="295" pos:column="43"/></name></name> <argument_list pos:line="295" pos:column="44">(<argument><expr><name pos:line="295" pos:column="45">p<pos:position pos:line="295" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="295" pos:column="48">1<pos:position pos:line="295" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="295" pos:column="51">hbuflen<pos:position pos:line="295" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="295" pos:column="60">data<pos:position pos:line="295" pos:column="64"/></name><operator pos:line="295" pos:column="64">-&gt;<pos:position pos:line="295" pos:column="69"/></operator><name pos:line="295" pos:column="66">out<pos:position pos:line="295" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="295" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="295" pos:column="71"/></condition><then pos:line="295" pos:column="71"> <block pos:line="295" pos:column="72">{
                  <expr_stmt><expr><call><name pos:line="296" pos:column="19">failf<pos:position pos:line="296" pos:column="24"/></name> <argument_list pos:line="296" pos:column="25">(<argument><expr><name pos:line="296" pos:column="26">data<pos:position pos:line="296" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="296" pos:column="32">"Failed writing output"<pos:position pos:line="296" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="296" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="57"/></expr_stmt>
                  <return pos:line="297" pos:column="19">return <expr><name pos:line="297" pos:column="26">CURLE_WRITE_ERROR<pos:position pos:line="297" pos:column="43"/></name></expr>;<pos:position pos:line="297" pos:column="44"/></return>
                }<pos:position pos:line="298" pos:column="18"/></block></then></if>
              }<pos:position pos:line="299" pos:column="16"/></block></then></if>
              <if pos:line="300" pos:column="15">if<condition pos:line="300" pos:column="17">(<expr><name><name pos:line="300" pos:column="18">data<pos:position pos:line="300" pos:column="22"/></name><operator pos:line="300" pos:column="22">-&gt;<pos:position pos:line="300" pos:column="27"/></operator><name pos:line="300" pos:column="24">writeheader<pos:position pos:line="300" pos:column="35"/></name></name></expr>)<pos:position pos:line="300" pos:column="36"/></condition><then pos:line="300" pos:column="36"> <block pos:line="300" pos:column="37">{
                <comment type="block" pos:line="301" pos:column="17">/* the header is requested to be written to this file */</comment>
                <if pos:line="302" pos:column="17">if<condition pos:line="302" pos:column="19">(<expr><name pos:line="302" pos:column="20">hbuflen<pos:position pos:line="302" pos:column="27"/></name> <operator pos:line="302" pos:column="28">!=<pos:position pos:line="302" pos:column="30"/></operator> <call><name><name pos:line="302" pos:column="31">data<pos:position pos:line="302" pos:column="35"/></name><operator pos:line="302" pos:column="35">-&gt;<pos:position pos:line="302" pos:column="40"/></operator><name pos:line="302" pos:column="37">fwrite<pos:position pos:line="302" pos:column="43"/></name></name> <argument_list pos:line="302" pos:column="44">(<argument><expr><name pos:line="302" pos:column="45">p<pos:position pos:line="302" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="302" pos:column="48">1<pos:position pos:line="302" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="302" pos:column="51">hbuflen<pos:position pos:line="302" pos:column="58"/></name></expr></argument>,
                                            <argument><expr><name><name pos:line="303" pos:column="45">data<pos:position pos:line="303" pos:column="49"/></name><operator pos:line="303" pos:column="49">-&gt;<pos:position pos:line="303" pos:column="54"/></operator><name pos:line="303" pos:column="51">writeheader<pos:position pos:line="303" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="303" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="303" pos:column="64"/></condition><then pos:line="303" pos:column="64"> <block pos:line="303" pos:column="65">{
                  <expr_stmt><expr><call><name pos:line="304" pos:column="19">failf<pos:position pos:line="304" pos:column="24"/></name> <argument_list pos:line="304" pos:column="25">(<argument><expr><name pos:line="304" pos:column="26">data<pos:position pos:line="304" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="304" pos:column="32">"Failed writing output"<pos:position pos:line="304" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="304" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="304" pos:column="57"/></expr_stmt>
                  <return pos:line="305" pos:column="19">return <expr><name pos:line="305" pos:column="26">CURLE_WRITE_ERROR<pos:position pos:line="305" pos:column="43"/></name></expr>;<pos:position pos:line="305" pos:column="44"/></return>
                }<pos:position pos:line="306" pos:column="18"/></block></then></if>
              }<pos:position pos:line="307" pos:column="16"/></block></then></if>
              
              <comment type="block" pos:line="309" pos:column="15">/* reset hbufp pointer &amp;&amp; hbuflen */</comment>
              <expr_stmt><expr><name pos:line="310" pos:column="15">hbufp<pos:position pos:line="310" pos:column="20"/></name> <operator pos:line="310" pos:column="21">=<pos:position pos:line="310" pos:column="22"/></operator> <name><name pos:line="310" pos:column="23">data<pos:position pos:line="310" pos:column="27"/></name><operator pos:line="310" pos:column="27">-&gt;<pos:position pos:line="310" pos:column="32"/></operator><name pos:line="310" pos:column="29">headerbuff<pos:position pos:line="310" pos:column="39"/></name></name></expr>;<pos:position pos:line="310" pos:column="40"/></expr_stmt>
              <expr_stmt><expr><name pos:line="311" pos:column="15">hbuflen<pos:position pos:line="311" pos:column="22"/></name> <operator pos:line="311" pos:column="23">=<pos:position pos:line="311" pos:column="24"/></operator> <literal type="number" pos:line="311" pos:column="25">0<pos:position pos:line="311" pos:column="26"/></literal></expr>;<pos:position pos:line="311" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="312" pos:column="14"/></block>
            while <condition pos:line="313" pos:column="19">(<expr><operator pos:line="313" pos:column="20">*<pos:position pos:line="313" pos:column="21"/></operator><name pos:line="313" pos:column="21">str<pos:position pos:line="313" pos:column="24"/></name></expr>)<pos:position pos:line="313" pos:column="25"/></condition>;<pos:position pos:line="313" pos:column="26"/></do>		<comment type="block" pos:line="313" pos:column="41">/* header line within buffer */</comment>

            <comment type="block" pos:line="315" pos:column="13">/* We might have reached the end of the header part here, but
               there might be a non-header part left in the end of the read
               buffer. */</comment>

            <if pos:line="319" pos:column="13">if <condition pos:line="319" pos:column="16">(<expr><operator pos:line="319" pos:column="17">!<pos:position pos:line="319" pos:column="18"/></operator><name pos:line="319" pos:column="18">header<pos:position pos:line="319" pos:column="24"/></name></expr>)<pos:position pos:line="319" pos:column="25"/></condition><then pos:line="319" pos:column="25"> <block pos:line="319" pos:column="26">{
              <comment type="block" pos:line="320" pos:column="15">/* the next token and forward is not part of
                 the header! */</comment>

              <comment type="block" pos:line="323" pos:column="15">/* we subtract the remaining header size from the buffer */</comment>
              <expr_stmt><expr><name pos:line="324" pos:column="15">nread<pos:position pos:line="324" pos:column="20"/></name> <operator pos:line="324" pos:column="21">-=<pos:position pos:line="324" pos:column="23"/></operator> <operator pos:line="324" pos:column="24">(<pos:position pos:line="324" pos:column="25"/></operator><name pos:line="324" pos:column="25">str<pos:position pos:line="324" pos:column="28"/></name> <operator pos:line="324" pos:column="29">-<pos:position pos:line="324" pos:column="30"/></operator> <name pos:line="324" pos:column="31">buf<pos:position pos:line="324" pos:column="34"/></name><operator pos:line="324" pos:column="34">)<pos:position pos:line="324" pos:column="35"/></operator></expr>;<pos:position pos:line="324" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="325" pos:column="14"/></block></then></if>

          }<pos:position pos:line="327" pos:column="12"/></block></then></if>			<comment type="block" pos:line="327" pos:column="33">/* end if header mode */</comment>

          <comment type="block" pos:line="329" pos:column="11">/* This is not an 'else if' since it may be a rest from the header
             parsing, where the beginning of the buffer is headers and the end
             is non-headers. */</comment>
          <if pos:line="332" pos:column="11">if <condition pos:line="332" pos:column="14">(<expr><name pos:line="332" pos:column="15">str<pos:position pos:line="332" pos:column="18"/></name> <operator pos:line="332" pos:column="19">&amp;&amp;<pos:position pos:line="332" pos:column="29"/></operator> <operator pos:line="332" pos:column="22">!<pos:position pos:line="332" pos:column="23"/></operator><name pos:line="332" pos:column="23">header<pos:position pos:line="332" pos:column="29"/></name> <operator pos:line="332" pos:column="30">&amp;&amp;<pos:position pos:line="332" pos:column="40"/></operator> <operator pos:line="332" pos:column="33">(<pos:position pos:line="332" pos:column="34"/></operator><operator pos:line="332" pos:column="34">(<pos:position pos:line="332" pos:column="35"/></operator><name pos:line="332" pos:column="35">signed<pos:position pos:line="332" pos:column="41"/></name> <name pos:line="332" pos:column="42">int<pos:position pos:line="332" pos:column="45"/></name><operator pos:line="332" pos:column="45">)<pos:position pos:line="332" pos:column="46"/></operator><name pos:line="332" pos:column="46">nread<pos:position pos:line="332" pos:column="51"/></name> <operator pos:line="332" pos:column="52">&gt;<pos:position pos:line="332" pos:column="56"/></operator> <literal type="number" pos:line="332" pos:column="54">0<pos:position pos:line="332" pos:column="55"/></literal><operator pos:line="332" pos:column="55">)<pos:position pos:line="332" pos:column="56"/></operator></expr>)<pos:position pos:line="332" pos:column="57"/></condition><then pos:line="332" pos:column="57"> <block pos:line="332" pos:column="58">{
            
            <if pos:line="334" pos:column="13">if<condition pos:line="334" pos:column="15">(<expr><literal type="number" pos:line="334" pos:column="16">0<pos:position pos:line="334" pos:column="17"/></literal> <operator pos:line="334" pos:column="18">==<pos:position pos:line="334" pos:column="20"/></operator> <name pos:line="334" pos:column="21">bodywrites<pos:position pos:line="334" pos:column="31"/></name></expr>)<pos:position pos:line="334" pos:column="32"/></condition><then pos:line="334" pos:column="32"> <block pos:line="334" pos:column="33">{
              <comment type="block" pos:line="335" pos:column="15">/* These checks are only made the first time we are about to
                 write a chunk of the body */</comment>
              <if pos:line="337" pos:column="15">if<condition pos:line="337" pos:column="17">(<expr><name><name pos:line="337" pos:column="18">conn<pos:position pos:line="337" pos:column="22"/></name><operator pos:line="337" pos:column="22">-&gt;<pos:position pos:line="337" pos:column="27"/></operator><name pos:line="337" pos:column="24">protocol<pos:position pos:line="337" pos:column="32"/></name></name><operator pos:line="337" pos:column="32">&amp;<pos:position pos:line="337" pos:column="37"/></operator><name pos:line="337" pos:column="33">PROT_HTTP<pos:position pos:line="337" pos:column="42"/></name></expr>)<pos:position pos:line="337" pos:column="43"/></condition><then pos:line="337" pos:column="43"> <block pos:line="337" pos:column="44">{
                <comment type="block" pos:line="338" pos:column="17">/* HTTP-only checks */</comment>
                <if pos:line="339" pos:column="17">if <condition pos:line="339" pos:column="20">(<expr><name><name pos:line="339" pos:column="21">data<pos:position pos:line="339" pos:column="25"/></name><operator pos:line="339" pos:column="25">-&gt;<pos:position pos:line="339" pos:column="30"/></operator><name pos:line="339" pos:column="27">resume_from<pos:position pos:line="339" pos:column="38"/></name></name> <operator pos:line="339" pos:column="39">&amp;&amp;<pos:position pos:line="339" pos:column="49"/></operator> <operator pos:line="339" pos:column="42">!<pos:position pos:line="339" pos:column="43"/></operator><name pos:line="339" pos:column="43">content_range<pos:position pos:line="339" pos:column="56"/></name></expr> )<pos:position pos:line="339" pos:column="58"/></condition><then pos:line="339" pos:column="58"> <block pos:line="339" pos:column="59">{
                  <comment type="block" pos:line="340" pos:column="19">/* we wanted to resume a download, although the server
                     doesn't seem to support this */</comment>
                  <expr_stmt><expr><call><name pos:line="342" pos:column="19">failf<pos:position pos:line="342" pos:column="24"/></name> <argument_list pos:line="342" pos:column="25">(<argument><expr><name pos:line="342" pos:column="26">data<pos:position pos:line="342" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="342" pos:column="32">"HTTP server doesn't seem to support byte ranges. Cannot resume."<pos:position pos:line="342" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="342" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="342" pos:column="99"/></expr_stmt>
                  <return pos:line="343" pos:column="19">return <expr><name pos:line="343" pos:column="26">CURLE_HTTP_RANGE_ERROR<pos:position pos:line="343" pos:column="48"/></name></expr>;<pos:position pos:line="343" pos:column="49"/></return>
                }<pos:position pos:line="344" pos:column="18"/></block></then>
                <elseif pos:line="345" pos:column="17">else <if pos:line="345" pos:column="22">if <condition pos:line="345" pos:column="25">(<expr><name><name pos:line="345" pos:column="26">data<pos:position pos:line="345" pos:column="30"/></name><operator pos:line="345" pos:column="30">-&gt;<pos:position pos:line="345" pos:column="35"/></operator><name pos:line="345" pos:column="32">newurl<pos:position pos:line="345" pos:column="38"/></name></name></expr>)<pos:position pos:line="345" pos:column="39"/></condition><then pos:line="345" pos:column="39"> <block pos:line="345" pos:column="40">{
                  <comment type="block" pos:line="346" pos:column="19">/* abort after the headers if "follow Location" is set */</comment>
                  <expr_stmt><expr><call><name pos:line="347" pos:column="19">infof<pos:position pos:line="347" pos:column="24"/></name> <argument_list pos:line="347" pos:column="25">(<argument><expr><name pos:line="347" pos:column="26">data<pos:position pos:line="347" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="347" pos:column="32">"Follow to new URL: %s\n"<pos:position pos:line="347" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="347" pos:column="59">data<pos:position pos:line="347" pos:column="63"/></name><operator pos:line="347" pos:column="63">-&gt;<pos:position pos:line="347" pos:column="68"/></operator><name pos:line="347" pos:column="65">newurl<pos:position pos:line="347" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="347" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="347" pos:column="73"/></expr_stmt>
                  <return pos:line="348" pos:column="19">return <expr><name pos:line="348" pos:column="26">CURLE_OK<pos:position pos:line="348" pos:column="34"/></name></expr>;<pos:position pos:line="348" pos:column="35"/></return>
                }<pos:position pos:line="349" pos:column="18"/></block></then></if></elseif>
                <elseif pos:line="350" pos:column="17">else <if pos:line="350" pos:column="22">if<condition pos:line="350" pos:column="24">(<expr><name><name pos:line="350" pos:column="25">data<pos:position pos:line="350" pos:column="29"/></name><operator pos:line="350" pos:column="29">-&gt;<pos:position pos:line="350" pos:column="34"/></operator><name pos:line="350" pos:column="31">timecondition<pos:position pos:line="350" pos:column="44"/></name></name> <operator pos:line="350" pos:column="45">&amp;&amp;<pos:position pos:line="350" pos:column="55"/></operator> <operator pos:line="350" pos:column="48">!<pos:position pos:line="350" pos:column="49"/></operator><name><name pos:line="350" pos:column="49">data<pos:position pos:line="350" pos:column="53"/></name><operator pos:line="350" pos:column="53">-&gt;<pos:position pos:line="350" pos:column="58"/></operator><name pos:line="350" pos:column="55">range<pos:position pos:line="350" pos:column="60"/></name></name></expr>)<pos:position pos:line="350" pos:column="61"/></condition><then pos:line="350" pos:column="61"> <block pos:line="350" pos:column="62">{
                  <comment type="block" pos:line="351" pos:column="19">/* A time condition has been set AND no ranges have been
                     requested. This seems to be what chapter 13.3.4 of
                     RFC 2616 defines to be the correct action for a
                     HTTP/1.1 client */</comment>
                  <if pos:line="355" pos:column="19">if<condition pos:line="355" pos:column="21">(<expr><operator pos:line="355" pos:column="22">(<pos:position pos:line="355" pos:column="23"/></operator><name pos:line="355" pos:column="23">timeofdoc<pos:position pos:line="355" pos:column="32"/></name> <operator pos:line="355" pos:column="33">&gt;<pos:position pos:line="355" pos:column="37"/></operator> <literal type="number" pos:line="355" pos:column="35">0<pos:position pos:line="355" pos:column="36"/></literal><operator pos:line="355" pos:column="36">)<pos:position pos:line="355" pos:column="37"/></operator> <operator pos:line="355" pos:column="38">&amp;&amp;<pos:position pos:line="355" pos:column="48"/></operator> <operator pos:line="355" pos:column="41">(<pos:position pos:line="355" pos:column="42"/></operator><name><name pos:line="355" pos:column="42">data<pos:position pos:line="355" pos:column="46"/></name><operator pos:line="355" pos:column="46">-&gt;<pos:position pos:line="355" pos:column="51"/></operator><name pos:line="355" pos:column="48">timevalue<pos:position pos:line="355" pos:column="57"/></name></name> <operator pos:line="355" pos:column="58">&gt;<pos:position pos:line="355" pos:column="62"/></operator> <literal type="number" pos:line="355" pos:column="60">0<pos:position pos:line="355" pos:column="61"/></literal><operator pos:line="355" pos:column="61">)<pos:position pos:line="355" pos:column="62"/></operator></expr>)<pos:position pos:line="355" pos:column="63"/></condition><then pos:line="355" pos:column="63"> <block pos:line="355" pos:column="64">{
                    <switch pos:line="356" pos:column="21">switch<condition pos:line="356" pos:column="27">(<expr><name><name pos:line="356" pos:column="28">data<pos:position pos:line="356" pos:column="32"/></name><operator pos:line="356" pos:column="32">-&gt;<pos:position pos:line="356" pos:column="37"/></operator><name pos:line="356" pos:column="34">timecondition<pos:position pos:line="356" pos:column="47"/></name></name></expr>)<pos:position pos:line="356" pos:column="48"/></condition> <block pos:line="356" pos:column="49">{
                    <case pos:line="357" pos:column="21">case <expr><name pos:line="357" pos:column="26">TIMECOND_IFMODSINCE<pos:position pos:line="357" pos:column="45"/></name></expr>:<pos:position pos:line="357" pos:column="46"/></case>
                    <default pos:line="358" pos:column="21">default:<pos:position pos:line="358" pos:column="29"/></default>
                      <if pos:line="359" pos:column="23">if<condition pos:line="359" pos:column="25">(<expr><name pos:line="359" pos:column="26">timeofdoc<pos:position pos:line="359" pos:column="35"/></name> <operator pos:line="359" pos:column="36">&lt;<pos:position pos:line="359" pos:column="40"/></operator> <name><name pos:line="359" pos:column="38">data<pos:position pos:line="359" pos:column="42"/></name><operator pos:line="359" pos:column="42">-&gt;<pos:position pos:line="359" pos:column="47"/></operator><name pos:line="359" pos:column="44">timevalue<pos:position pos:line="359" pos:column="53"/></name></name></expr>)<pos:position pos:line="359" pos:column="54"/></condition><then pos:line="359" pos:column="54"> <block pos:line="359" pos:column="55">{
                        <expr_stmt><expr><call><name pos:line="360" pos:column="25">infof<pos:position pos:line="360" pos:column="30"/></name><argument_list pos:line="360" pos:column="30">(<argument><expr><name pos:line="360" pos:column="31">data<pos:position pos:line="360" pos:column="35"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="361" pos:column="31">"The requested document is not new enough"<pos:position pos:line="361" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="361" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="361" pos:column="75"/></expr_stmt>
                        <return pos:line="362" pos:column="25">return <expr><name pos:line="362" pos:column="32">CURLE_OK<pos:position pos:line="362" pos:column="40"/></name></expr>;<pos:position pos:line="362" pos:column="41"/></return>
                      }<pos:position pos:line="363" pos:column="24"/></block></then></if>
                      <break pos:line="364" pos:column="23">break;<pos:position pos:line="364" pos:column="29"/></break>
                    <case pos:line="365" pos:column="21">case <expr><name pos:line="365" pos:column="26">TIMECOND_IFUNMODSINCE<pos:position pos:line="365" pos:column="47"/></name></expr>:<pos:position pos:line="365" pos:column="48"/></case>
                      <if pos:line="366" pos:column="23">if<condition pos:line="366" pos:column="25">(<expr><name pos:line="366" pos:column="26">timeofdoc<pos:position pos:line="366" pos:column="35"/></name> <operator pos:line="366" pos:column="36">&gt;<pos:position pos:line="366" pos:column="40"/></operator> <name><name pos:line="366" pos:column="38">data<pos:position pos:line="366" pos:column="42"/></name><operator pos:line="366" pos:column="42">-&gt;<pos:position pos:line="366" pos:column="47"/></operator><name pos:line="366" pos:column="44">timevalue<pos:position pos:line="366" pos:column="53"/></name></name></expr>)<pos:position pos:line="366" pos:column="54"/></condition><then pos:line="366" pos:column="54"> <block pos:line="366" pos:column="55">{
                        <expr_stmt><expr><call><name pos:line="367" pos:column="25">infof<pos:position pos:line="367" pos:column="30"/></name><argument_list pos:line="367" pos:column="30">(<argument><expr><name pos:line="367" pos:column="31">data<pos:position pos:line="367" pos:column="35"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="368" pos:column="31">"The requested document is not old enough"<pos:position pos:line="368" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="368" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="368" pos:column="75"/></expr_stmt>
                        <return pos:line="369" pos:column="25">return <expr><name pos:line="369" pos:column="32">CURLE_OK<pos:position pos:line="369" pos:column="40"/></name></expr>;<pos:position pos:line="369" pos:column="41"/></return>
                      }<pos:position pos:line="370" pos:column="24"/></block></then></if>
                      <break pos:line="371" pos:column="23">break;<pos:position pos:line="371" pos:column="29"/></break>
                    }<pos:position pos:line="372" pos:column="22"/></block></switch> <comment type="block" pos:line="372" pos:column="23">/* switch */</comment>
                  }<pos:position pos:line="373" pos:column="20"/></block></then></if> <comment type="block" pos:line="373" pos:column="21">/* two valid time strings */</comment>
                }<pos:position pos:line="374" pos:column="18"/></block></then></if></elseif></if> <comment type="block" pos:line="374" pos:column="19">/* we have a time condition */</comment>
              }<pos:position pos:line="375" pos:column="16"/></block></then></if> <comment type="block" pos:line="375" pos:column="17">/* this is HTTP */</comment>
            }<pos:position pos:line="376" pos:column="14"/></block></then></if> <comment type="block" pos:line="376" pos:column="15">/* this is the first time we write a body part */</comment>
            <expr_stmt><expr><name pos:line="377" pos:column="13">bodywrites<pos:position pos:line="377" pos:column="23"/></name><operator pos:line="377" pos:column="23">++<pos:position pos:line="377" pos:column="25"/></operator></expr>;<pos:position pos:line="377" pos:column="26"/></expr_stmt>

            <if pos:line="379" pos:column="13">if<condition pos:line="379" pos:column="15">(<expr><name><name pos:line="379" pos:column="16">data<pos:position pos:line="379" pos:column="20"/></name><operator pos:line="379" pos:column="20">-&gt;<pos:position pos:line="379" pos:column="25"/></operator><name pos:line="379" pos:column="22">maxdownload<pos:position pos:line="379" pos:column="33"/></name></name> <operator pos:line="379" pos:column="34">&amp;&amp;<pos:position pos:line="379" pos:column="44"/></operator>
               <operator pos:line="380" pos:column="16">(<pos:position pos:line="380" pos:column="17"/></operator><name pos:line="380" pos:column="17">bytecount<pos:position pos:line="380" pos:column="26"/></name> <operator pos:line="380" pos:column="27">+<pos:position pos:line="380" pos:column="28"/></operator> <name pos:line="380" pos:column="29">nread<pos:position pos:line="380" pos:column="34"/></name> <operator pos:line="380" pos:column="35">&gt;<pos:position pos:line="380" pos:column="39"/></operator> <name><name pos:line="380" pos:column="37">data<pos:position pos:line="380" pos:column="41"/></name><operator pos:line="380" pos:column="41">-&gt;<pos:position pos:line="380" pos:column="46"/></operator><name pos:line="380" pos:column="43">maxdownload<pos:position pos:line="380" pos:column="54"/></name></name><operator pos:line="380" pos:column="54">)<pos:position pos:line="380" pos:column="55"/></operator></expr>)<pos:position pos:line="380" pos:column="56"/></condition><then pos:line="380" pos:column="56"> <block pos:line="380" pos:column="57">{
              <expr_stmt><expr><name pos:line="381" pos:column="15">nread<pos:position pos:line="381" pos:column="20"/></name> <operator pos:line="381" pos:column="21">=<pos:position pos:line="381" pos:column="22"/></operator> <name><name pos:line="381" pos:column="23">data<pos:position pos:line="381" pos:column="27"/></name><operator pos:line="381" pos:column="27">-&gt;<pos:position pos:line="381" pos:column="32"/></operator><name pos:line="381" pos:column="29">maxdownload<pos:position pos:line="381" pos:column="40"/></name></name> <operator pos:line="381" pos:column="41">-<pos:position pos:line="381" pos:column="42"/></operator> <name pos:line="381" pos:column="43">bytecount<pos:position pos:line="381" pos:column="52"/></name></expr>;<pos:position pos:line="381" pos:column="53"/></expr_stmt>
              <if pos:line="382" pos:column="15">if<condition pos:line="382" pos:column="17">(<expr><operator pos:line="382" pos:column="18">(<pos:position pos:line="382" pos:column="19"/></operator><name pos:line="382" pos:column="19">signed<pos:position pos:line="382" pos:column="25"/></name> <name pos:line="382" pos:column="26">int<pos:position pos:line="382" pos:column="29"/></name><operator pos:line="382" pos:column="29">)<pos:position pos:line="382" pos:column="30"/></operator><name pos:line="382" pos:column="30">nread<pos:position pos:line="382" pos:column="35"/></name> <operator pos:line="382" pos:column="36">&lt;<pos:position pos:line="382" pos:column="40"/></operator> <literal type="number" pos:line="382" pos:column="38">0<pos:position pos:line="382" pos:column="39"/></literal></expr> )<pos:position pos:line="382" pos:column="41"/></condition><then pos:line="382" pos:column="41"> <comment type="block" pos:line="382" pos:column="42">/* this should be unusual */</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="383" pos:column="17">nread<pos:position pos:line="383" pos:column="22"/></name> <operator pos:line="383" pos:column="23">=<pos:position pos:line="383" pos:column="24"/></operator> <literal type="number" pos:line="383" pos:column="25">0<pos:position pos:line="383" pos:column="26"/></literal></expr>;<pos:position pos:line="383" pos:column="27"/></expr_stmt></block></then></if>
              <expr_stmt><expr><name pos:line="384" pos:column="15">keepon<pos:position pos:line="384" pos:column="21"/></name> <operator pos:line="384" pos:column="22">&amp;=<pos:position pos:line="384" pos:column="28"/></operator> <operator pos:line="384" pos:column="25">~<pos:position pos:line="384" pos:column="26"/></operator><name pos:line="384" pos:column="26">KEEP_READ<pos:position pos:line="384" pos:column="35"/></name></expr>;<pos:position pos:line="384" pos:column="36"/></expr_stmt> <comment type="block" pos:line="384" pos:column="37">/* we're done reading */</comment>
            }<pos:position pos:line="385" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="387" pos:column="13">bytecount<pos:position pos:line="387" pos:column="22"/></name> <operator pos:line="387" pos:column="23">+=<pos:position pos:line="387" pos:column="25"/></operator> <name pos:line="387" pos:column="26">nread<pos:position pos:line="387" pos:column="31"/></name></expr>;<pos:position pos:line="387" pos:column="32"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="389" pos:column="13">pgrsSetDownloadCounter<pos:position pos:line="389" pos:column="35"/></name><argument_list pos:line="389" pos:column="35">(<argument><expr><name pos:line="389" pos:column="36">data<pos:position pos:line="389" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="389" pos:column="42">(<pos:position pos:line="389" pos:column="43"/></operator><name pos:line="389" pos:column="43">double<pos:position pos:line="389" pos:column="49"/></name><operator pos:line="389" pos:column="49">)<pos:position pos:line="389" pos:column="50"/></operator><name pos:line="389" pos:column="50">bytecount<pos:position pos:line="389" pos:column="59"/></name></expr></argument>)<pos:position pos:line="389" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="61"/></expr_stmt>
            
            <if pos:line="391" pos:column="13">if <condition pos:line="391" pos:column="16">(<expr><name pos:line="391" pos:column="17">nread<pos:position pos:line="391" pos:column="22"/></name> <operator pos:line="391" pos:column="23">!=<pos:position pos:line="391" pos:column="25"/></operator> <call><name><name pos:line="391" pos:column="26">data<pos:position pos:line="391" pos:column="30"/></name><operator pos:line="391" pos:column="30">-&gt;<pos:position pos:line="391" pos:column="35"/></operator><name pos:line="391" pos:column="32">fwrite<pos:position pos:line="391" pos:column="38"/></name></name> <argument_list pos:line="391" pos:column="39">(<argument><expr><name pos:line="391" pos:column="40">str<pos:position pos:line="391" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="391" pos:column="45">1<pos:position pos:line="391" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="391" pos:column="48">nread<pos:position pos:line="391" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="391" pos:column="55">data<pos:position pos:line="391" pos:column="59"/></name><operator pos:line="391" pos:column="59">-&gt;<pos:position pos:line="391" pos:column="64"/></operator><name pos:line="391" pos:column="61">out<pos:position pos:line="391" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="391" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="391" pos:column="66"/></condition><then pos:line="391" pos:column="66"> <block pos:line="391" pos:column="67">{
              <expr_stmt><expr><call><name pos:line="392" pos:column="15">failf<pos:position pos:line="392" pos:column="20"/></name> <argument_list pos:line="392" pos:column="21">(<argument><expr><name pos:line="392" pos:column="22">data<pos:position pos:line="392" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="392" pos:column="28">"Failed writing output"<pos:position pos:line="392" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="392" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="392" pos:column="53"/></expr_stmt>
              <return pos:line="393" pos:column="15">return <expr><name pos:line="393" pos:column="22">CURLE_WRITE_ERROR<pos:position pos:line="393" pos:column="39"/></name></expr>;<pos:position pos:line="393" pos:column="40"/></return>
            }<pos:position pos:line="394" pos:column="14"/></block></then></if>

          }<pos:position pos:line="396" pos:column="12"/></block></then></if> <comment type="block" pos:line="396" pos:column="13">/* if (! header and data to read ) */</comment>
        }<pos:position pos:line="397" pos:column="10"/></block></then></if> <comment type="block" pos:line="397" pos:column="11">/* if( read from socket ) */</comment>

        <if pos:line="399" pos:column="9">if<condition pos:line="399" pos:column="11">(<expr><operator pos:line="399" pos:column="12">(<pos:position pos:line="399" pos:column="13"/></operator><name pos:line="399" pos:column="13">keepon<pos:position pos:line="399" pos:column="19"/></name> <operator pos:line="399" pos:column="20">&amp;<pos:position pos:line="399" pos:column="25"/></operator> <name pos:line="399" pos:column="22">KEEP_WRITE<pos:position pos:line="399" pos:column="32"/></name><operator pos:line="399" pos:column="32">)<pos:position pos:line="399" pos:column="33"/></operator> <operator pos:line="399" pos:column="34">&amp;&amp;<pos:position pos:line="399" pos:column="44"/></operator> <call><name pos:line="399" pos:column="37">FD_ISSET<pos:position pos:line="399" pos:column="45"/></name><argument_list pos:line="399" pos:column="45">(<argument><expr><name><name pos:line="399" pos:column="46">conn<pos:position pos:line="399" pos:column="50"/></name><operator pos:line="399" pos:column="50">-&gt;<pos:position pos:line="399" pos:column="55"/></operator><name pos:line="399" pos:column="52">writesockfd<pos:position pos:line="399" pos:column="63"/></name></name></expr></argument>, <argument><expr><operator pos:line="399" pos:column="65">&amp;<pos:position pos:line="399" pos:column="70"/></operator><name pos:line="399" pos:column="66">writefd<pos:position pos:line="399" pos:column="73"/></name></expr></argument>)<pos:position pos:line="399" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="399" pos:column="75"/></condition><then pos:line="399" pos:column="75"> <block pos:line="399" pos:column="76">{
          <comment type="block" pos:line="400" pos:column="11">/* write */</comment>

          <decl_stmt><decl><type><name pos:line="402" pos:column="11">char<pos:position pos:line="402" pos:column="15"/></name></type> <name><name pos:line="402" pos:column="16">scratch<pos:position pos:line="402" pos:column="23"/></name><index pos:line="402" pos:column="23">[<expr><name pos:line="402" pos:column="24">BUFSIZE<pos:position pos:line="402" pos:column="31"/></name> <operator pos:line="402" pos:column="32">*<pos:position pos:line="402" pos:column="33"/></operator> <literal type="number" pos:line="402" pos:column="34">2<pos:position pos:line="402" pos:column="35"/></literal></expr>]<pos:position pos:line="402" pos:column="36"/></index></name></decl>;<pos:position pos:line="402" pos:column="37"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="403" pos:column="11">int<pos:position pos:line="403" pos:column="14"/></name></type> <name pos:line="403" pos:column="15">i<pos:position pos:line="403" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="403" pos:column="18">si<pos:position pos:line="403" pos:column="20"/></name></decl>;<pos:position pos:line="403" pos:column="21"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="404" pos:column="11">size_t<pos:position pos:line="404" pos:column="17"/></name></type> <name pos:line="404" pos:column="18">bytes_written<pos:position pos:line="404" pos:column="31"/></name></decl>;<pos:position pos:line="404" pos:column="32"/></decl_stmt>

          <if pos:line="406" pos:column="11">if<condition pos:line="406" pos:column="13">(<expr><name><name pos:line="406" pos:column="14">data<pos:position pos:line="406" pos:column="18"/></name><operator pos:line="406" pos:column="18">-&gt;<pos:position pos:line="406" pos:column="23"/></operator><name pos:line="406" pos:column="20">crlf<pos:position pos:line="406" pos:column="24"/></name></name></expr>)<pos:position pos:line="406" pos:column="25"/></condition><then pos:line="406" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><name pos:line="407" pos:column="13">buf<pos:position pos:line="407" pos:column="16"/></name> <operator pos:line="407" pos:column="17">=<pos:position pos:line="407" pos:column="18"/></operator> <name><name pos:line="407" pos:column="19">data<pos:position pos:line="407" pos:column="23"/></name><operator pos:line="407" pos:column="23">-&gt;<pos:position pos:line="407" pos:column="28"/></operator><name pos:line="407" pos:column="25">buffer<pos:position pos:line="407" pos:column="31"/></name></name></expr>;<pos:position pos:line="407" pos:column="32"/></expr_stmt></block></then></if> <comment type="block" pos:line="407" pos:column="33">/* put it back on the buffer */</comment>

          <expr_stmt><expr><name pos:line="409" pos:column="11">nread<pos:position pos:line="409" pos:column="16"/></name> <operator pos:line="409" pos:column="17">=<pos:position pos:line="409" pos:column="18"/></operator> <call><name><name pos:line="409" pos:column="19">data<pos:position pos:line="409" pos:column="23"/></name><operator pos:line="409" pos:column="23">-&gt;<pos:position pos:line="409" pos:column="28"/></operator><name pos:line="409" pos:column="25">fread<pos:position pos:line="409" pos:column="30"/></name></name><argument_list pos:line="409" pos:column="30">(<argument><expr><name pos:line="409" pos:column="31">buf<pos:position pos:line="409" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="409" pos:column="36">1<pos:position pos:line="409" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="409" pos:column="39">BUFSIZE<pos:position pos:line="409" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="409" pos:column="48">data<pos:position pos:line="409" pos:column="52"/></name><operator pos:line="409" pos:column="52">-&gt;<pos:position pos:line="409" pos:column="57"/></operator><name pos:line="409" pos:column="54">in<pos:position pos:line="409" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="409" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="409" pos:column="58"/></expr_stmt>

          <comment type="block" pos:line="411" pos:column="11">/* the signed int typecase of nread of for systems that has
             unsigned size_t */</comment>
          <if pos:line="413" pos:column="11">if <condition pos:line="413" pos:column="14">(<expr><operator pos:line="413" pos:column="15">(<pos:position pos:line="413" pos:column="16"/></operator><name pos:line="413" pos:column="16">signed<pos:position pos:line="413" pos:column="22"/></name> <name pos:line="413" pos:column="23">int<pos:position pos:line="413" pos:column="26"/></name><operator pos:line="413" pos:column="26">)<pos:position pos:line="413" pos:column="27"/></operator><name pos:line="413" pos:column="27">nread<pos:position pos:line="413" pos:column="32"/></name><operator pos:line="413" pos:column="32">&lt;=<pos:position pos:line="413" pos:column="37"/></operator><literal type="number" pos:line="413" pos:column="34">0<pos:position pos:line="413" pos:column="35"/></literal></expr>)<pos:position pos:line="413" pos:column="36"/></condition><then pos:line="413" pos:column="36"> <block pos:line="413" pos:column="37">{
            <comment type="block" pos:line="414" pos:column="13">/* done */</comment>
            <expr_stmt><expr><name pos:line="415" pos:column="13">keepon<pos:position pos:line="415" pos:column="19"/></name> <operator pos:line="415" pos:column="20">&amp;=<pos:position pos:line="415" pos:column="26"/></operator> <operator pos:line="415" pos:column="23">~<pos:position pos:line="415" pos:column="24"/></operator><name pos:line="415" pos:column="24">KEEP_WRITE<pos:position pos:line="415" pos:column="34"/></name></expr>;<pos:position pos:line="415" pos:column="35"/></expr_stmt> <comment type="block" pos:line="415" pos:column="36">/* we're done writing */</comment>
            <break pos:line="416" pos:column="13">break;<pos:position pos:line="416" pos:column="19"/></break>
          }<pos:position pos:line="417" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name pos:line="418" pos:column="11">writebytecount<pos:position pos:line="418" pos:column="25"/></name> <operator pos:line="418" pos:column="26">+=<pos:position pos:line="418" pos:column="28"/></operator> <name pos:line="418" pos:column="29">nread<pos:position pos:line="418" pos:column="34"/></name></expr>;<pos:position pos:line="418" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="419" pos:column="11">pgrsSetUploadCounter<pos:position pos:line="419" pos:column="31"/></name><argument_list pos:line="419" pos:column="31">(<argument><expr><name pos:line="419" pos:column="32">data<pos:position pos:line="419" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="419" pos:column="38">(<pos:position pos:line="419" pos:column="39"/></operator><name pos:line="419" pos:column="39">double<pos:position pos:line="419" pos:column="45"/></name><operator pos:line="419" pos:column="45">)<pos:position pos:line="419" pos:column="46"/></operator><name pos:line="419" pos:column="46">writebytecount<pos:position pos:line="419" pos:column="60"/></name></expr></argument>)<pos:position pos:line="419" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="419" pos:column="62"/></expr_stmt>            

          <comment type="block" pos:line="421" pos:column="11">/* convert LF to CRLF if so asked */</comment>
          <if pos:line="422" pos:column="11">if <condition pos:line="422" pos:column="14">(<expr><name><name pos:line="422" pos:column="15">data<pos:position pos:line="422" pos:column="19"/></name><operator pos:line="422" pos:column="19">-&gt;<pos:position pos:line="422" pos:column="24"/></operator><name pos:line="422" pos:column="21">crlf<pos:position pos:line="422" pos:column="25"/></name></name></expr>)<pos:position pos:line="422" pos:column="26"/></condition><then pos:line="422" pos:column="26"> <block pos:line="422" pos:column="27">{
            <for pos:line="423" pos:column="13">for<control pos:line="423" pos:column="16">(<init><expr><name pos:line="423" pos:column="17">i<pos:position pos:line="423" pos:column="18"/></name> <operator pos:line="423" pos:column="19">=<pos:position pos:line="423" pos:column="20"/></operator> <literal type="number" pos:line="423" pos:column="21">0<pos:position pos:line="423" pos:column="22"/></literal></expr><operator pos:line="423" pos:column="22">,<pos:position pos:line="423" pos:column="23"/></operator> <expr><name pos:line="423" pos:column="24">si<pos:position pos:line="423" pos:column="26"/></name> <operator pos:line="423" pos:column="27">=<pos:position pos:line="423" pos:column="28"/></operator> <literal type="number" pos:line="423" pos:column="29">0<pos:position pos:line="423" pos:column="30"/></literal></expr>;<pos:position pos:line="423" pos:column="31"/></init> <condition><expr><name pos:line="423" pos:column="32">i<pos:position pos:line="423" pos:column="33"/></name> <operator pos:line="423" pos:column="34">&lt;<pos:position pos:line="423" pos:column="38"/></operator> <operator pos:line="423" pos:column="36">(<pos:position pos:line="423" pos:column="37"/></operator><name pos:line="423" pos:column="37">int<pos:position pos:line="423" pos:column="40"/></name><operator pos:line="423" pos:column="40">)<pos:position pos:line="423" pos:column="41"/></operator><name pos:line="423" pos:column="41">nread<pos:position pos:line="423" pos:column="46"/></name></expr>;<pos:position pos:line="423" pos:column="47"/></condition> <incr><expr><name pos:line="423" pos:column="48">i<pos:position pos:line="423" pos:column="49"/></name><operator pos:line="423" pos:column="49">++<pos:position pos:line="423" pos:column="51"/></operator></expr><operator pos:line="423" pos:column="51">,<pos:position pos:line="423" pos:column="52"/></operator> <expr><name pos:line="423" pos:column="53">si<pos:position pos:line="423" pos:column="55"/></name><operator pos:line="423" pos:column="55">++<pos:position pos:line="423" pos:column="57"/></operator></expr></incr>)<pos:position pos:line="423" pos:column="58"/></control> <block pos:line="423" pos:column="59">{
              <if pos:line="424" pos:column="15">if <condition pos:line="424" pos:column="18">(<expr><name><name pos:line="424" pos:column="19">buf<pos:position pos:line="424" pos:column="22"/></name><index pos:line="424" pos:column="22">[<expr><name pos:line="424" pos:column="23">i<pos:position pos:line="424" pos:column="24"/></name></expr>]<pos:position pos:line="424" pos:column="25"/></index></name> <operator pos:line="424" pos:column="26">==<pos:position pos:line="424" pos:column="28"/></operator> <literal type="number" pos:line="424" pos:column="29">0x0a<pos:position pos:line="424" pos:column="33"/></literal></expr>)<pos:position pos:line="424" pos:column="34"/></condition><then pos:line="424" pos:column="34"> <block pos:line="424" pos:column="35">{
                <expr_stmt><expr><name><name pos:line="425" pos:column="17">scratch<pos:position pos:line="425" pos:column="24"/></name><index pos:line="425" pos:column="24">[<expr><name pos:line="425" pos:column="25">si<pos:position pos:line="425" pos:column="27"/></name><operator pos:line="425" pos:column="27">++<pos:position pos:line="425" pos:column="29"/></operator></expr>]<pos:position pos:line="425" pos:column="30"/></index></name> <operator pos:line="425" pos:column="31">=<pos:position pos:line="425" pos:column="32"/></operator> <literal type="number" pos:line="425" pos:column="33">0x0d<pos:position pos:line="425" pos:column="37"/></literal></expr>;<pos:position pos:line="425" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="426" pos:column="17">scratch<pos:position pos:line="426" pos:column="24"/></name><index pos:line="426" pos:column="24">[<expr><name pos:line="426" pos:column="25">si<pos:position pos:line="426" pos:column="27"/></name></expr>]<pos:position pos:line="426" pos:column="28"/></index></name> <operator pos:line="426" pos:column="29">=<pos:position pos:line="426" pos:column="30"/></operator> <literal type="number" pos:line="426" pos:column="31">0x0a<pos:position pos:line="426" pos:column="35"/></literal></expr>;<pos:position pos:line="426" pos:column="36"/></expr_stmt>
              }<pos:position pos:line="427" pos:column="16"/></block></then>
              <else pos:line="428" pos:column="15">else <block pos:line="428" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="429" pos:column="17">scratch<pos:position pos:line="429" pos:column="24"/></name><index pos:line="429" pos:column="24">[<expr><name pos:line="429" pos:column="25">si<pos:position pos:line="429" pos:column="27"/></name></expr>]<pos:position pos:line="429" pos:column="28"/></index></name> <operator pos:line="429" pos:column="29">=<pos:position pos:line="429" pos:column="30"/></operator> <name><name pos:line="429" pos:column="31">buf<pos:position pos:line="429" pos:column="34"/></name><index pos:line="429" pos:column="34">[<expr><name pos:line="429" pos:column="35">i<pos:position pos:line="429" pos:column="36"/></name></expr>]<pos:position pos:line="429" pos:column="37"/></index></name></expr>;<pos:position pos:line="429" pos:column="38"/></expr_stmt>
              }<pos:position pos:line="430" pos:column="16"/></block></else></if>
            }<pos:position pos:line="431" pos:column="14"/></block></for>
            <expr_stmt><expr><name pos:line="432" pos:column="13">nread<pos:position pos:line="432" pos:column="18"/></name> <operator pos:line="432" pos:column="19">=<pos:position pos:line="432" pos:column="20"/></operator> <name pos:line="432" pos:column="21">si<pos:position pos:line="432" pos:column="23"/></name></expr>;<pos:position pos:line="432" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><name pos:line="433" pos:column="13">buf<pos:position pos:line="433" pos:column="16"/></name> <operator pos:line="433" pos:column="17">=<pos:position pos:line="433" pos:column="18"/></operator> <name pos:line="433" pos:column="19">scratch<pos:position pos:line="433" pos:column="26"/></name></expr>;<pos:position pos:line="433" pos:column="27"/></expr_stmt> <comment type="block" pos:line="433" pos:column="28">/* point to the new buffer */</comment>
          }<pos:position pos:line="434" pos:column="12"/></block></then></if>

          <comment type="block" pos:line="436" pos:column="11">/* write to socket */</comment>
          <expr_stmt><expr><name pos:line="437" pos:column="11">urg<pos:position pos:line="437" pos:column="14"/></name> <operator pos:line="437" pos:column="15">=<pos:position pos:line="437" pos:column="16"/></operator> <call><name pos:line="437" pos:column="17">curl_write<pos:position pos:line="437" pos:column="27"/></name><argument_list pos:line="437" pos:column="27">(<argument><expr><name pos:line="437" pos:column="28">conn<pos:position pos:line="437" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="437" pos:column="34">buf<pos:position pos:line="437" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="437" pos:column="39">nread<pos:position pos:line="437" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="437" pos:column="46">&amp;<pos:position pos:line="437" pos:column="51"/></operator><name pos:line="437" pos:column="47">bytes_written<pos:position pos:line="437" pos:column="60"/></name></expr></argument>)<pos:position pos:line="437" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="437" pos:column="62"/></expr_stmt>

          <if pos:line="439" pos:column="11">if<condition pos:line="439" pos:column="13">(<expr><name pos:line="439" pos:column="14">nread<pos:position pos:line="439" pos:column="19"/></name> <operator pos:line="439" pos:column="20">!=<pos:position pos:line="439" pos:column="22"/></operator> <name pos:line="439" pos:column="23">bytes_written<pos:position pos:line="439" pos:column="36"/></name></expr>)<pos:position pos:line="439" pos:column="37"/></condition><then pos:line="439" pos:column="37"> <block pos:line="439" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="440" pos:column="13">failf<pos:position pos:line="440" pos:column="18"/></name><argument_list pos:line="440" pos:column="18">(<argument><expr><name pos:line="440" pos:column="19">data<pos:position pos:line="440" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="440" pos:column="25">"Failed uploading data"<pos:position pos:line="440" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="440" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="440" pos:column="50"/></expr_stmt>
            <return pos:line="441" pos:column="13">return <expr><name pos:line="441" pos:column="20">CURLE_WRITE_ERROR<pos:position pos:line="441" pos:column="37"/></name></expr>;<pos:position pos:line="441" pos:column="38"/></return>
          }<pos:position pos:line="442" pos:column="12"/></block></then></if>

        }<pos:position pos:line="444" pos:column="10"/></block></then></if>

        <break pos:line="446" pos:column="9">break;<pos:position pos:line="446" pos:column="15"/></break>
      }<pos:position pos:line="447" pos:column="8"/></block></switch>

      <expr_stmt><expr><name pos:line="449" pos:column="7">now<pos:position pos:line="449" pos:column="10"/></name> <operator pos:line="449" pos:column="11">=<pos:position pos:line="449" pos:column="12"/></operator> <call><name pos:line="449" pos:column="13">tvnow<pos:position pos:line="449" pos:column="18"/></name><argument_list pos:line="449" pos:column="18">()<pos:position pos:line="449" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="449" pos:column="21"/></expr_stmt>
      <if pos:line="450" pos:column="7">if<condition pos:line="450" pos:column="9">(<expr><call><name pos:line="450" pos:column="10">pgrsUpdate<pos:position pos:line="450" pos:column="20"/></name><argument_list pos:line="450" pos:column="20">(<argument><expr><name pos:line="450" pos:column="21">data<pos:position pos:line="450" pos:column="25"/></name></expr></argument>)<pos:position pos:line="450" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="450" pos:column="27"/></condition><then pos:line="450" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="451" pos:column="9">urg<pos:position pos:line="451" pos:column="12"/></name> <operator pos:line="451" pos:column="13">=<pos:position pos:line="451" pos:column="14"/></operator> <name pos:line="451" pos:column="15">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="451" pos:column="40"/></name></expr>;<pos:position pos:line="451" pos:column="41"/></expr_stmt></block></then>
      <else pos:line="452" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="453" pos:column="9">urg<pos:position pos:line="453" pos:column="12"/></name> <operator pos:line="453" pos:column="13">=<pos:position pos:line="453" pos:column="14"/></operator> <call><name pos:line="453" pos:column="15">speedcheck<pos:position pos:line="453" pos:column="25"/></name> <argument_list pos:line="453" pos:column="26">(<argument><expr><name pos:line="453" pos:column="27">data<pos:position pos:line="453" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="453" pos:column="33">now<pos:position pos:line="453" pos:column="36"/></name></expr></argument>)<pos:position pos:line="453" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="453" pos:column="38"/></expr_stmt></block></else></if>
      <if pos:line="454" pos:column="7">if <condition pos:line="454" pos:column="10">(<expr><name pos:line="454" pos:column="11">urg<pos:position pos:line="454" pos:column="14"/></name></expr>)<pos:position pos:line="454" pos:column="15"/></condition><then pos:line="454" pos:column="15">
	<block type="pseudo"><return pos:line="455" pos:column="9">return <expr><name pos:line="455" pos:column="16">urg<pos:position pos:line="455" pos:column="19"/></name></expr>;<pos:position pos:line="455" pos:column="20"/></return></block></then></if>

      <if pos:line="457" pos:column="7">if <condition pos:line="457" pos:column="10">(<expr><name><name pos:line="457" pos:column="11">data<pos:position pos:line="457" pos:column="15"/></name><operator pos:line="457" pos:column="15">-&gt;<pos:position pos:line="457" pos:column="20"/></operator><name pos:line="457" pos:column="17">timeout<pos:position pos:line="457" pos:column="24"/></name></name> <operator pos:line="457" pos:column="25">&amp;&amp;<pos:position pos:line="457" pos:column="35"/></operator> <operator pos:line="457" pos:column="28">(<pos:position pos:line="457" pos:column="29"/></operator><call><name pos:line="457" pos:column="29">tvdiff<pos:position pos:line="457" pos:column="35"/></name> <argument_list pos:line="457" pos:column="36">(<argument><expr><name pos:line="457" pos:column="37">now<pos:position pos:line="457" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="457" pos:column="42">start<pos:position pos:line="457" pos:column="47"/></name></expr></argument>)<pos:position pos:line="457" pos:column="48"/></argument_list></call> <operator pos:line="457" pos:column="49">&gt;<pos:position pos:line="457" pos:column="53"/></operator> <name><name pos:line="457" pos:column="51">data<pos:position pos:line="457" pos:column="55"/></name><operator pos:line="457" pos:column="55">-&gt;<pos:position pos:line="457" pos:column="60"/></operator><name pos:line="457" pos:column="57">timeout<pos:position pos:line="457" pos:column="64"/></name></name><operator pos:line="457" pos:column="64">)<pos:position pos:line="457" pos:column="65"/></operator></expr>)<pos:position pos:line="457" pos:column="66"/></condition><then pos:line="457" pos:column="66"> <block pos:line="457" pos:column="67">{
	<expr_stmt><expr><call><name pos:line="458" pos:column="9">failf<pos:position pos:line="458" pos:column="14"/></name> <argument_list pos:line="458" pos:column="15">(<argument><expr><name pos:line="458" pos:column="16">data<pos:position pos:line="458" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="458" pos:column="22">"Operation timed out with %d out of %d bytes received"<pos:position pos:line="458" pos:column="76"/></literal></expr></argument>,
	       <argument><expr><name pos:line="459" pos:column="16">bytecount<pos:position pos:line="459" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="459" pos:column="27">conn<pos:position pos:line="459" pos:column="31"/></name><operator pos:line="459" pos:column="31">-&gt;<pos:position pos:line="459" pos:column="36"/></operator><name pos:line="459" pos:column="33">size<pos:position pos:line="459" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="459" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="459" pos:column="39"/></expr_stmt>
	<return pos:line="460" pos:column="9">return <expr><name pos:line="460" pos:column="16">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="460" pos:column="41"/></name></expr>;<pos:position pos:line="460" pos:column="42"/></return>
      }<pos:position pos:line="461" pos:column="8"/></block></then></if>
    }<pos:position pos:line="462" pos:column="6"/></block></while>
  }<pos:position pos:line="463" pos:column="4"/></block>
  <if pos:line="464" pos:column="3">if<condition pos:line="464" pos:column="5">(<expr><operator pos:line="464" pos:column="6">!<pos:position pos:line="464" pos:column="7"/></operator><operator pos:line="464" pos:column="7">(<pos:position pos:line="464" pos:column="8"/></operator><name><name pos:line="464" pos:column="8">data<pos:position pos:line="464" pos:column="12"/></name><operator pos:line="464" pos:column="12">-&gt;<pos:position pos:line="464" pos:column="17"/></operator><name pos:line="464" pos:column="14">bits<pos:position pos:line="464" pos:column="18"/></name><operator pos:line="464" pos:column="18">.<pos:position pos:line="464" pos:column="19"/></operator><name pos:line="464" pos:column="19">no_body<pos:position pos:line="464" pos:column="26"/></name></name><operator pos:line="464" pos:column="26">)<pos:position pos:line="464" pos:column="27"/></operator> <operator pos:line="464" pos:column="28">&amp;&amp;<pos:position pos:line="464" pos:column="38"/></operator> <name pos:line="464" pos:column="31">contentlength<pos:position pos:line="464" pos:column="44"/></name> <operator pos:line="464" pos:column="45">&amp;&amp;<pos:position pos:line="464" pos:column="55"/></operator>
     <operator pos:line="465" pos:column="6">(<pos:position pos:line="465" pos:column="7"/></operator><name pos:line="465" pos:column="7">bytecount<pos:position pos:line="465" pos:column="16"/></name> <operator pos:line="465" pos:column="17">!=<pos:position pos:line="465" pos:column="19"/></operator> <name pos:line="465" pos:column="20">contentlength<pos:position pos:line="465" pos:column="33"/></name><operator pos:line="465" pos:column="33">)<pos:position pos:line="465" pos:column="34"/></operator></expr>)<pos:position pos:line="465" pos:column="35"/></condition><then pos:line="465" pos:column="35"> <block pos:line="465" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="466" pos:column="5">failf<pos:position pos:line="466" pos:column="10"/></name><argument_list pos:line="466" pos:column="10">(<argument><expr><name pos:line="466" pos:column="11">data<pos:position pos:line="466" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="466" pos:column="17">"transfer closed with %d bytes remaining to read"<pos:position pos:line="466" pos:column="66"/></literal></expr></argument>,
          <argument><expr><name pos:line="467" pos:column="11">contentlength<pos:position pos:line="467" pos:column="24"/></name><operator pos:line="467" pos:column="24">-<pos:position pos:line="467" pos:column="25"/></operator><name pos:line="467" pos:column="25">bytecount<pos:position pos:line="467" pos:column="34"/></name></expr></argument>)<pos:position pos:line="467" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="467" pos:column="36"/></expr_stmt>
    <return pos:line="468" pos:column="5">return <expr><name pos:line="468" pos:column="12">CURLE_PARTIAL_FILE<pos:position pos:line="468" pos:column="30"/></name></expr>;<pos:position pos:line="468" pos:column="31"/></return>
  }<pos:position pos:line="469" pos:column="4"/></block></then></if>
  <if pos:line="470" pos:column="3">if<condition pos:line="470" pos:column="5">(<expr><call><name pos:line="470" pos:column="6">pgrsUpdate<pos:position pos:line="470" pos:column="16"/></name><argument_list pos:line="470" pos:column="16">(<argument><expr><name pos:line="470" pos:column="17">data<pos:position pos:line="470" pos:column="21"/></name></expr></argument>)<pos:position pos:line="470" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="470" pos:column="23"/></condition><then pos:line="470" pos:column="23">
    <block type="pseudo"><return pos:line="471" pos:column="5">return <expr><name pos:line="471" pos:column="12">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="471" pos:column="37"/></name></expr>;<pos:position pos:line="471" pos:column="38"/></return></block></then></if>

  <if pos:line="473" pos:column="3">if<condition pos:line="473" pos:column="5">(<expr><name><name pos:line="473" pos:column="6">conn<pos:position pos:line="473" pos:column="10"/></name><operator pos:line="473" pos:column="10">-&gt;<pos:position pos:line="473" pos:column="15"/></operator><name pos:line="473" pos:column="12">bytecountp<pos:position pos:line="473" pos:column="22"/></name></name></expr>)<pos:position pos:line="473" pos:column="23"/></condition><then pos:line="473" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="474" pos:column="5">*<pos:position pos:line="474" pos:column="6"/></operator><name><name pos:line="474" pos:column="6">conn<pos:position pos:line="474" pos:column="10"/></name><operator pos:line="474" pos:column="10">-&gt;<pos:position pos:line="474" pos:column="15"/></operator><name pos:line="474" pos:column="12">bytecountp<pos:position pos:line="474" pos:column="22"/></name></name> <operator pos:line="474" pos:column="23">=<pos:position pos:line="474" pos:column="24"/></operator> <name pos:line="474" pos:column="25">bytecount<pos:position pos:line="474" pos:column="34"/></name></expr>;<pos:position pos:line="474" pos:column="35"/></expr_stmt></block></then></if> <comment type="block" pos:line="474" pos:column="36">/* read count */</comment>
  <if pos:line="475" pos:column="3">if<condition pos:line="475" pos:column="5">(<expr><name><name pos:line="475" pos:column="6">conn<pos:position pos:line="475" pos:column="10"/></name><operator pos:line="475" pos:column="10">-&gt;<pos:position pos:line="475" pos:column="15"/></operator><name pos:line="475" pos:column="12">writebytecountp<pos:position pos:line="475" pos:column="27"/></name></name></expr>)<pos:position pos:line="475" pos:column="28"/></condition><then pos:line="475" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="476" pos:column="5">*<pos:position pos:line="476" pos:column="6"/></operator><name><name pos:line="476" pos:column="6">conn<pos:position pos:line="476" pos:column="10"/></name><operator pos:line="476" pos:column="10">-&gt;<pos:position pos:line="476" pos:column="15"/></operator><name pos:line="476" pos:column="12">writebytecountp<pos:position pos:line="476" pos:column="27"/></name></name> <operator pos:line="476" pos:column="28">=<pos:position pos:line="476" pos:column="29"/></operator> <name pos:line="476" pos:column="30">writebytecount<pos:position pos:line="476" pos:column="44"/></name></expr>;<pos:position pos:line="476" pos:column="45"/></expr_stmt></block></then></if> <comment type="block" pos:line="476" pos:column="46">/* write count */</comment>

  <return pos:line="478" pos:column="3">return <expr><name pos:line="478" pos:column="10">CURLE_OK<pos:position pos:line="478" pos:column="18"/></name></expr>;<pos:position pos:line="478" pos:column="19"/></return>
}<pos:position pos:line="479" pos:column="2"/></block></function></unit>
