<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_161_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">getout<pos:position pos:line="1" pos:column="21"/></name></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">new_getout<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">Configurable<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">config<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">getout<pos:position pos:line="3" pos:column="16"/></name></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">node<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">=<expr><call><name pos:line="3" pos:column="24">malloc<pos:position pos:line="3" pos:column="30"/></name><argument_list pos:line="3" pos:column="30">(<argument><expr><sizeof pos:line="3" pos:column="31">sizeof<argument_list pos:line="3" pos:column="37">(<argument><expr pos:line="3" pos:column="38">struct <name pos:line="3" pos:column="45">getout<pos:position pos:line="3" pos:column="51"/></name></expr></argument>)<pos:position pos:line="3" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="3" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">getout<pos:position pos:line="4" pos:column="16"/></name></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">last<pos:position pos:line="4" pos:column="22"/></name><init pos:line="4" pos:column="22">= <expr><name><name pos:line="4" pos:column="24">config<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">-&gt;<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="32">url_last<pos:position pos:line="4" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><name pos:line="5" pos:column="6">node<pos:position pos:line="5" pos:column="10"/></name></expr>)<pos:position pos:line="5" pos:column="11"/></condition><then pos:line="5" pos:column="11"> <block pos:line="5" pos:column="12">{
    <comment type="block" pos:line="6" pos:column="5">/* clear the struct */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">memset<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">node<pos:position pos:line="7" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="21">sizeof<argument_list pos:line="7" pos:column="27">(<argument><expr pos:line="7" pos:column="28">struct <name pos:line="7" pos:column="35">getout<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* append this new node last in the list */</comment>
    <if pos:line="10" pos:column="5">if<condition pos:line="10" pos:column="7">(<expr><name pos:line="10" pos:column="8">last<pos:position pos:line="10" pos:column="12"/></name></expr>)<pos:position pos:line="10" pos:column="13"/></condition><then pos:line="10" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="7">last<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">next<pos:position pos:line="11" pos:column="17"/></name></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">node<pos:position pos:line="11" pos:column="24"/></name></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt></block></then>
    <else pos:line="12" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="13" pos:column="7">config<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">url_list<pos:position pos:line="13" pos:column="23"/></name></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="26">node<pos:position pos:line="13" pos:column="30"/></name></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt></block></else></if> <comment type="block" pos:line="13" pos:column="32">/* first node */</comment>

    <comment type="block" pos:line="15" pos:column="5">/* move the last pointer */</comment>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">config<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">-&gt;<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="13">url_last<pos:position pos:line="16" pos:column="21"/></name></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">node<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <return pos:line="18" pos:column="3">return <expr><name pos:line="18" pos:column="10">node<pos:position pos:line="18" pos:column="14"/></name></expr>;<pos:position pos:line="18" pos:column="15"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
