<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2480_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">OSStatus<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">SocketRead<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">SSLConnectionRef<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">connection<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">void<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">data<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,          <comment type="block" pos:line="2" pos:column="49">/* owned by
                                                 * caller, data
                                                 * RETURNED */</comment>
                           <parameter><decl><type><name pos:line="5" pos:column="28">size_t<pos:position pos:line="5" pos:column="34"/></name> <modifier pos:line="5" pos:column="35">*<pos:position pos:line="5" pos:column="36"/></modifier></type><name pos:line="5" pos:column="36">dataLength<pos:position pos:line="5" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="47"/></parameter_list>  <comment type="block" pos:line="5" pos:column="49">/* IN/OUT */</comment>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">bytesToGo<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><operator pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">dataLength<pos:position pos:line="7" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">initLen<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><name pos:line="8" pos:column="20">bytesToGo<pos:position pos:line="8" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">UInt8<pos:position pos:line="9" pos:column="8"/></name> <modifier pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></modifier></type><name pos:line="9" pos:column="10">currData<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">UInt8<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></operator><operator pos:line="9" pos:column="29">)<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">data<pos:position pos:line="9" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
  <comment type="block" pos:line="10" pos:column="3">/*int sock = *(int *)connection;*/</comment>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">ssl_connect_data<pos:position pos:line="11" pos:column="26"/></name></name> <modifier pos:line="11" pos:column="27">*<pos:position pos:line="11" pos:column="28"/></modifier></type><name pos:line="11" pos:column="28">connssl<pos:position pos:line="11" pos:column="35"/></name> <init pos:line="11" pos:column="36">= <expr><operator pos:line="11" pos:column="38">(<pos:position pos:line="11" pos:column="39"/></operator>struct <name pos:line="11" pos:column="46">ssl_connect_data<pos:position pos:line="11" pos:column="62"/></name> <operator pos:line="11" pos:column="63">*<pos:position pos:line="11" pos:column="64"/></operator><operator pos:line="11" pos:column="64">)<pos:position pos:line="11" pos:column="65"/></operator><name pos:line="11" pos:column="65">connection<pos:position pos:line="11" pos:column="75"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="76"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">sock<pos:position pos:line="12" pos:column="11"/></name> <init pos:line="12" pos:column="12">= <expr><name><name pos:line="12" pos:column="14">BACKEND<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">-&gt;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="23">ssl_sockfd<pos:position pos:line="12" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">OSStatus<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">rtn<pos:position pos:line="13" pos:column="15"/></name> <init pos:line="13" pos:column="16">= <expr><name pos:line="13" pos:column="18">noErr<pos:position pos:line="13" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">size_t<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">bytesRead<pos:position pos:line="14" pos:column="19"/></name></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">ssize_t<pos:position pos:line="15" pos:column="10"/></name></type> <name pos:line="15" pos:column="11">rrtn<pos:position pos:line="15" pos:column="15"/></name></decl>;<pos:position pos:line="15" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">theErr<pos:position pos:line="16" pos:column="13"/></name></decl>;<pos:position pos:line="16" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="18" pos:column="3">*<pos:position pos:line="18" pos:column="4"/></operator><name pos:line="18" pos:column="4">dataLength<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <literal type="number" pos:line="18" pos:column="17">0<pos:position pos:line="18" pos:column="18"/></literal></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>

  <for pos:line="20" pos:column="3">for<control pos:line="20" pos:column="6">(<init pos:line="20" pos:column="7">;<pos:position pos:line="20" pos:column="8"/></init><condition pos:line="20" pos:column="8">;<pos:position pos:line="20" pos:column="9"/></condition><incr/>)<pos:position pos:line="20" pos:column="10"/></control> <block pos:line="20" pos:column="11">{
    <expr_stmt><expr><name pos:line="21" pos:column="5">bytesRead<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <literal type="number" pos:line="21" pos:column="17">0<pos:position pos:line="21" pos:column="18"/></literal></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">rrtn<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <call><name pos:line="22" pos:column="12">read<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">sock<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="23">currData<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">bytesToGo<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><name pos:line="23" pos:column="8">rrtn<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">&lt;=<pos:position pos:line="23" pos:column="18"/></operator> <literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal></expr>)<pos:position pos:line="23" pos:column="18"/></condition><then pos:line="23" pos:column="18"> <block pos:line="23" pos:column="19">{
      <comment type="block" pos:line="24" pos:column="7">/* this is guesswork... */</comment>
      <expr_stmt><expr><name pos:line="25" pos:column="7">theErr<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">errno<pos:position pos:line="25" pos:column="21"/></name></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
      <if pos:line="26" pos:column="7">if<condition pos:line="26" pos:column="9">(<expr><name pos:line="26" pos:column="10">rrtn<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">==<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">0<pos:position pos:line="26" pos:column="19"/></literal></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20"> <block pos:line="26" pos:column="21">{ <comment type="block" pos:line="26" pos:column="23">/* EOF = server hung up */</comment>
        <comment type="block" pos:line="27" pos:column="9">/* the framework will turn this into errSSLClosedNoNotify */</comment>
        <expr_stmt><expr><name pos:line="28" pos:column="9">rtn<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <name pos:line="28" pos:column="15">errSSLClosedGraceful<pos:position pos:line="28" pos:column="35"/></name></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="29" pos:column="8"/></block></then>
      <else pos:line="30" pos:column="7">else <comment type="block" pos:line="30" pos:column="12">/* do the switch */</comment>
        <block type="pseudo"><switch pos:line="31" pos:column="9">switch<condition pos:line="31" pos:column="15">(<expr><name pos:line="31" pos:column="16">theErr<pos:position pos:line="31" pos:column="22"/></name></expr>)<pos:position pos:line="31" pos:column="23"/></condition> <block pos:line="31" pos:column="24">{
          <case pos:line="32" pos:column="11">case <expr><name pos:line="32" pos:column="16">ENOENT<pos:position pos:line="32" pos:column="22"/></name></expr>:<pos:position pos:line="32" pos:column="23"/></case>
            <comment type="block" pos:line="33" pos:column="13">/* connection closed */</comment>
            <expr_stmt><expr><name pos:line="34" pos:column="13">rtn<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <name pos:line="34" pos:column="19">errSSLClosedGraceful<pos:position pos:line="34" pos:column="39"/></name></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>
            <break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break>
          <case pos:line="36" pos:column="11">case <expr><name pos:line="36" pos:column="16">ECONNRESET<pos:position pos:line="36" pos:column="26"/></name></expr>:<pos:position pos:line="36" pos:column="27"/></case>
            <expr_stmt><expr><name pos:line="37" pos:column="13">rtn<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">=<pos:position pos:line="37" pos:column="18"/></operator> <name pos:line="37" pos:column="19">errSSLClosedAbort<pos:position pos:line="37" pos:column="36"/></name></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
            <break pos:line="38" pos:column="13">break;<pos:position pos:line="38" pos:column="19"/></break>
          <case pos:line="39" pos:column="11">case <expr><name pos:line="39" pos:column="16">EAGAIN<pos:position pos:line="39" pos:column="22"/></name></expr>:<pos:position pos:line="39" pos:column="23"/></case>
            <expr_stmt><expr><name pos:line="40" pos:column="13">rtn<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <name pos:line="40" pos:column="19">errSSLWouldBlock<pos:position pos:line="40" pos:column="35"/></name></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="41" pos:column="13">BACKEND<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">-&gt;<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="22">ssl_direction<pos:position pos:line="41" pos:column="35"/></name></name> <operator pos:line="41" pos:column="36">=<pos:position pos:line="41" pos:column="37"/></operator> <literal type="boolean" pos:line="41" pos:column="38">false<pos:position pos:line="41" pos:column="43"/></literal></expr>;<pos:position pos:line="41" pos:column="44"/></expr_stmt>
            <break pos:line="42" pos:column="13">break;<pos:position pos:line="42" pos:column="19"/></break>
          <default pos:line="43" pos:column="11">default:<pos:position pos:line="43" pos:column="19"/></default>
            <expr_stmt><expr><name pos:line="44" pos:column="13">rtn<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">ioErr<pos:position pos:line="44" pos:column="24"/></name></expr>;<pos:position pos:line="44" pos:column="25"/></expr_stmt>
            <break pos:line="45" pos:column="13">break;<pos:position pos:line="45" pos:column="19"/></break>
        }<pos:position pos:line="46" pos:column="10"/></block></switch></block></else></if>
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>
    }<pos:position pos:line="48" pos:column="6"/></block></then>
    <else pos:line="49" pos:column="5">else <block pos:line="49" pos:column="10">{
      <expr_stmt><expr><name pos:line="50" pos:column="7">bytesRead<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <name pos:line="50" pos:column="19">rrtn<pos:position pos:line="50" pos:column="23"/></name></expr>;<pos:position pos:line="50" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="52" pos:column="5">bytesToGo<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">-=<pos:position pos:line="52" pos:column="17"/></operator> <name pos:line="52" pos:column="18">bytesRead<pos:position pos:line="52" pos:column="27"/></name></expr>;<pos:position pos:line="52" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="53" pos:column="5">currData<pos:position pos:line="53" pos:column="13"/></name>  <operator pos:line="53" pos:column="15">+=<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">bytesRead<pos:position pos:line="53" pos:column="27"/></name></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>

    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">(<expr><name pos:line="55" pos:column="8">bytesToGo<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">==<pos:position pos:line="55" pos:column="20"/></operator> <literal type="number" pos:line="55" pos:column="21">0<pos:position pos:line="55" pos:column="22"/></literal></expr>)<pos:position pos:line="55" pos:column="23"/></condition><then pos:line="55" pos:column="23"> <block pos:line="55" pos:column="24">{
      <comment type="block" pos:line="56" pos:column="7">/* filled buffer with incoming data, done */</comment>
      <break pos:line="57" pos:column="7">break;<pos:position pos:line="57" pos:column="13"/></break>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>
  }<pos:position pos:line="59" pos:column="4"/></block></for>
  <expr_stmt><expr><operator pos:line="60" pos:column="3">*<pos:position pos:line="60" pos:column="4"/></operator><name pos:line="60" pos:column="4">dataLength<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator> <name pos:line="60" pos:column="17">initLen<pos:position pos:line="60" pos:column="24"/></name> <operator pos:line="60" pos:column="25">-<pos:position pos:line="60" pos:column="26"/></operator> <name pos:line="60" pos:column="27">bytesToGo<pos:position pos:line="60" pos:column="36"/></name></expr>;<pos:position pos:line="60" pos:column="37"/></expr_stmt>

  <return pos:line="62" pos:column="3">return <expr><name pos:line="62" pos:column="10">rtn<pos:position pos:line="62" pos:column="13"/></name></expr>;<pos:position pos:line="62" pos:column="14"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
