<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2498_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_cert<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">cafile<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">Curl_easy<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">data<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                       <parameter><decl><type><name pos:line="2" pos:column="24">SSLContextRef<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">ctx<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">n<pos:position pos:line="4" pos:column="8"/></name> <init pos:line="4" pos:column="9">= <expr><literal type="number" pos:line="4" pos:column="11">0<pos:position pos:line="4" pos:column="12"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="14">rc<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">long<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">res<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">certbuf<pos:position pos:line="6" pos:column="25"/></name></decl>, <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="28">der<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">buflen<pos:position pos:line="7" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="18">derlen<pos:position pos:line="7" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="26">offset<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><literal type="number" pos:line="7" pos:column="35">0<pos:position pos:line="7" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><call><name pos:line="9" pos:column="6">read_cert<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">cafile<pos:position pos:line="9" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="24">&amp;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="25">certbuf<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="34">&amp;<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="35">buflen<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call> <operator pos:line="9" pos:column="43">&lt;<pos:position pos:line="9" pos:column="47"/></operator> <literal type="number" pos:line="9" pos:column="45">0<pos:position pos:line="9" pos:column="46"/></literal></expr>)<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47"> <block pos:line="9" pos:column="48">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">failf<pos:position pos:line="10" pos:column="10"/></name><argument_list pos:line="10" pos:column="10">(<argument><expr><name pos:line="10" pos:column="11">data<pos:position pos:line="10" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="17">"SSL: failed to read or invalid CA certificate"<pos:position pos:line="10" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">CURLE_SSL_CACERT<pos:position pos:line="11" pos:column="28"/></name></expr>;<pos:position pos:line="11" pos:column="29"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="14" pos:column="3">/*
   * Certbuf now contains the contents of the certificate file, which can be
   * - a single DER certificate,
   * - a single PEM certificate or
   * - a bunch of PEM certificates (certificate bundle).
   *
   * Go through certbuf, and convert any PEM certificate in it into DER
   * format.
   */</comment>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">CFMutableArrayRef<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">array<pos:position pos:line="23" pos:column="26"/></name> <init pos:line="23" pos:column="27">= <expr><call><name pos:line="23" pos:column="29">CFArrayCreateMutable<pos:position pos:line="23" pos:column="49"/></name><argument_list pos:line="23" pos:column="49">(<argument><expr><name pos:line="23" pos:column="50">kCFAllocatorDefault<pos:position pos:line="23" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="71">0<pos:position pos:line="23" pos:column="72"/></literal></expr></argument>,
                                                 <argument><expr><operator pos:line="24" pos:column="50">&amp;<pos:position pos:line="24" pos:column="55"/></operator><name pos:line="24" pos:column="51">kCFTypeArrayCallBacks<pos:position pos:line="24" pos:column="72"/></name></expr></argument>)<pos:position pos:line="24" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="74"/></decl_stmt>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">array<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">==<pos:position pos:line="25" pos:column="14"/></operator> <name pos:line="25" pos:column="15">NULL<pos:position pos:line="25" pos:column="19"/></name></expr>)<pos:position pos:line="25" pos:column="20"/></condition><then pos:line="25" pos:column="20"> <block pos:line="25" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">free<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><name pos:line="26" pos:column="10">certbuf<pos:position pos:line="26" pos:column="17"/></name></expr></argument>)<pos:position pos:line="26" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">failf<pos:position pos:line="27" pos:column="10"/></name><argument_list pos:line="27" pos:column="10">(<argument><expr><name pos:line="27" pos:column="11">data<pos:position pos:line="27" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="17">"SSL: out of memory creating CA certificate array"<pos:position pos:line="27" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="69"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="28" pos:column="31"/></name></expr>;<pos:position pos:line="28" pos:column="32"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <while pos:line="31" pos:column="3">while<condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">offset<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">&lt;<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="18">buflen<pos:position pos:line="31" pos:column="24"/></name></expr>)<pos:position pos:line="31" pos:column="25"/></condition> <block pos:line="31" pos:column="26">{
    <expr_stmt><expr><name pos:line="32" pos:column="5">n<pos:position pos:line="32" pos:column="6"/></name><operator pos:line="32" pos:column="6">++<pos:position pos:line="32" pos:column="8"/></operator></expr>;<pos:position pos:line="32" pos:column="9"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/*
     * Check if the certificate is in PEM format, and convert it to DER. If
     * this fails, we assume the certificate is in DER format.
     */</comment>
    <expr_stmt><expr><name pos:line="38" pos:column="5">res<pos:position pos:line="38" pos:column="8"/></name> <operator pos:line="38" pos:column="9">=<pos:position pos:line="38" pos:column="10"/></operator> <call><name pos:line="38" pos:column="11">pem_to_der<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><operator pos:line="38" pos:column="22">(<pos:position pos:line="38" pos:column="23"/></operator><specifier pos:line="38" pos:column="23">const<pos:position pos:line="38" pos:column="28"/></specifier> <name pos:line="38" pos:column="29">char<pos:position pos:line="38" pos:column="33"/></name> <operator pos:line="38" pos:column="34">*<pos:position pos:line="38" pos:column="35"/></operator><operator pos:line="38" pos:column="35">)<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="36">certbuf<pos:position pos:line="38" pos:column="43"/></name> <operator pos:line="38" pos:column="44">+<pos:position pos:line="38" pos:column="45"/></operator> <name pos:line="38" pos:column="46">offset<pos:position pos:line="38" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="54">&amp;<pos:position pos:line="38" pos:column="59"/></operator><name pos:line="38" pos:column="55">der<pos:position pos:line="38" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="60">&amp;<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="61">derlen<pos:position pos:line="38" pos:column="67"/></name></expr></argument>)<pos:position pos:line="38" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="69"/></expr_stmt>
    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name pos:line="39" pos:column="8">res<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">&lt;<pos:position pos:line="39" pos:column="16"/></operator> <literal type="number" pos:line="39" pos:column="14">0<pos:position pos:line="39" pos:column="15"/></literal></expr>)<pos:position pos:line="39" pos:column="16"/></condition><then pos:line="39" pos:column="16"> <block pos:line="39" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">free<pos:position pos:line="40" pos:column="11"/></name><argument_list pos:line="40" pos:column="11">(<argument><expr><name pos:line="40" pos:column="12">certbuf<pos:position pos:line="40" pos:column="19"/></name></expr></argument>)<pos:position pos:line="40" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">CFRelease<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><name pos:line="41" pos:column="17">array<pos:position pos:line="41" pos:column="22"/></name></expr></argument>)<pos:position pos:line="41" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">failf<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">data<pos:position pos:line="42" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="19">"SSL: invalid CA certificate #%d (offset %d) in bundle"<pos:position pos:line="42" pos:column="74"/></literal></expr></argument>,
            <argument><expr><name pos:line="43" pos:column="13">n<pos:position pos:line="43" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="16">offset<pos:position pos:line="43" pos:column="22"/></name></expr></argument>)<pos:position pos:line="43" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="24"/></expr_stmt>
      <return pos:line="44" pos:column="7">return <expr><name pos:line="44" pos:column="14">CURLE_SSL_CACERT<pos:position pos:line="44" pos:column="30"/></name></expr>;<pos:position pos:line="44" pos:column="31"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="46" pos:column="5">offset<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">+=<pos:position pos:line="46" pos:column="14"/></operator> <name pos:line="46" pos:column="15">res<pos:position pos:line="46" pos:column="18"/></name></expr>;<pos:position pos:line="46" pos:column="19"/></expr_stmt>

    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><name pos:line="48" pos:column="8">res<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">==<pos:position pos:line="48" pos:column="14"/></operator> <literal type="number" pos:line="48" pos:column="15">0<pos:position pos:line="48" pos:column="16"/></literal> <operator pos:line="48" pos:column="17">&amp;&amp;<pos:position pos:line="48" pos:column="27"/></operator> <name pos:line="48" pos:column="20">offset<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">==<pos:position pos:line="48" pos:column="29"/></operator> <literal type="number" pos:line="48" pos:column="30">0<pos:position pos:line="48" pos:column="31"/></literal></expr>)<pos:position pos:line="48" pos:column="32"/></condition><then pos:line="48" pos:column="32"> <block pos:line="48" pos:column="33">{
      <comment type="block" pos:line="49" pos:column="7">/* This is not a PEM file, probably a certificate in DER format. */</comment>
      <expr_stmt><expr><name pos:line="50" pos:column="7">rc<pos:position pos:line="50" pos:column="9"/></name> <operator pos:line="50" pos:column="10">=<pos:position pos:line="50" pos:column="11"/></operator> <call><name pos:line="50" pos:column="12">append_cert_to_array<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">data<pos:position pos:line="50" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="39">certbuf<pos:position pos:line="50" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="48">buflen<pos:position pos:line="50" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="56">array<pos:position pos:line="50" pos:column="61"/></name></expr></argument>)<pos:position pos:line="50" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">free<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><name pos:line="51" pos:column="12">certbuf<pos:position pos:line="51" pos:column="19"/></name></expr></argument>)<pos:position pos:line="51" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="21"/></expr_stmt>
      <if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><name pos:line="52" pos:column="10">rc<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">!=<pos:position pos:line="52" pos:column="15"/></operator> <name pos:line="52" pos:column="16">CURLE_OK<pos:position pos:line="52" pos:column="24"/></name></expr>)<pos:position pos:line="52" pos:column="25"/></condition><then pos:line="52" pos:column="25"> <block pos:line="52" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">CFRelease<pos:position pos:line="53" pos:column="18"/></name><argument_list pos:line="53" pos:column="18">(<argument><expr><name pos:line="53" pos:column="19">array<pos:position pos:line="53" pos:column="24"/></name></expr></argument>)<pos:position pos:line="53" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>
        <return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">rc<pos:position pos:line="54" pos:column="18"/></name></expr>;<pos:position pos:line="54" pos:column="19"/></return>
      }<pos:position pos:line="55" pos:column="8"/></block></then></if>
      <break pos:line="56" pos:column="7">break;<pos:position pos:line="56" pos:column="13"/></break>
    }<pos:position pos:line="57" pos:column="6"/></block></then>
    <elseif pos:line="58" pos:column="5">else <if pos:line="58" pos:column="10">if<condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">res<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">==<pos:position pos:line="58" pos:column="19"/></operator> <literal type="number" pos:line="58" pos:column="20">0<pos:position pos:line="58" pos:column="21"/></literal></expr>)<pos:position pos:line="58" pos:column="22"/></condition><then pos:line="58" pos:column="22"> <block pos:line="58" pos:column="23">{
      <comment type="block" pos:line="59" pos:column="7">/* No more certificates in the bundle. */</comment>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">free<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><name pos:line="60" pos:column="12">certbuf<pos:position pos:line="60" pos:column="19"/></name></expr></argument>)<pos:position pos:line="60" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="21"/></expr_stmt>
      <break pos:line="61" pos:column="7">break;<pos:position pos:line="61" pos:column="13"/></break>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="64" pos:column="5">rc<pos:position pos:line="64" pos:column="7"/></name> <operator pos:line="64" pos:column="8">=<pos:position pos:line="64" pos:column="9"/></operator> <call><name pos:line="64" pos:column="10">append_cert_to_array<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name pos:line="64" pos:column="31">data<pos:position pos:line="64" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="37">der<pos:position pos:line="64" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="42">derlen<pos:position pos:line="64" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="50">array<pos:position pos:line="64" pos:column="55"/></name></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">free<pos:position pos:line="65" pos:column="9"/></name><argument_list pos:line="65" pos:column="9">(<argument><expr><name pos:line="65" pos:column="10">der<pos:position pos:line="65" pos:column="13"/></name></expr></argument>)<pos:position pos:line="65" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="15"/></expr_stmt>
    <if pos:line="66" pos:column="5">if<condition pos:line="66" pos:column="7">(<expr><name pos:line="66" pos:column="8">rc<pos:position pos:line="66" pos:column="10"/></name> <operator pos:line="66" pos:column="11">!=<pos:position pos:line="66" pos:column="13"/></operator> <name pos:line="66" pos:column="14">CURLE_OK<pos:position pos:line="66" pos:column="22"/></name></expr>)<pos:position pos:line="66" pos:column="23"/></condition><then pos:line="66" pos:column="23"> <block pos:line="66" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="67" pos:column="7">free<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><name pos:line="67" pos:column="12">certbuf<pos:position pos:line="67" pos:column="19"/></name></expr></argument>)<pos:position pos:line="67" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="68" pos:column="7">CFRelease<pos:position pos:line="68" pos:column="16"/></name><argument_list pos:line="68" pos:column="16">(<argument><expr><name pos:line="68" pos:column="17">array<pos:position pos:line="68" pos:column="22"/></name></expr></argument>)<pos:position pos:line="68" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="24"/></expr_stmt>
      <return pos:line="69" pos:column="7">return <expr><name pos:line="69" pos:column="14">rc<pos:position pos:line="69" pos:column="16"/></name></expr>;<pos:position pos:line="69" pos:column="17"/></return>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>
  }<pos:position pos:line="71" pos:column="4"/></block></while>

  <decl_stmt><decl><type><name pos:line="73" pos:column="3">SecTrustRef<pos:position pos:line="73" pos:column="14"/></name></type> <name pos:line="73" pos:column="15">trust<pos:position pos:line="73" pos:column="20"/></name></decl>;<pos:position pos:line="73" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="74" pos:column="3">OSStatus<pos:position pos:line="74" pos:column="11"/></name></type> <name pos:line="74" pos:column="12">ret<pos:position pos:line="74" pos:column="15"/></name> <init pos:line="74" pos:column="16">= <expr><call><name pos:line="74" pos:column="18">SSLCopyPeerTrust<pos:position pos:line="74" pos:column="34"/></name><argument_list pos:line="74" pos:column="34">(<argument><expr><name pos:line="74" pos:column="35">ctx<pos:position pos:line="74" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="40">&amp;<pos:position pos:line="74" pos:column="45"/></operator><name pos:line="74" pos:column="41">trust<pos:position pos:line="74" pos:column="46"/></name></expr></argument>)<pos:position pos:line="74" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="74" pos:column="48"/></decl_stmt>
  <if pos:line="75" pos:column="3">if<condition pos:line="75" pos:column="5">(<expr><name pos:line="75" pos:column="6">trust<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">==<pos:position pos:line="75" pos:column="14"/></operator> <name pos:line="75" pos:column="15">NULL<pos:position pos:line="75" pos:column="19"/></name></expr>)<pos:position pos:line="75" pos:column="20"/></condition><then pos:line="75" pos:column="20"> <block pos:line="75" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="76" pos:column="5">failf<pos:position pos:line="76" pos:column="10"/></name><argument_list pos:line="76" pos:column="10">(<argument><expr><name pos:line="76" pos:column="11">data<pos:position pos:line="76" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="17">"SSL: error getting certificate chain"<pos:position pos:line="76" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">CFRelease<pos:position pos:line="77" pos:column="14"/></name><argument_list pos:line="77" pos:column="14">(<argument><expr><name pos:line="77" pos:column="15">array<pos:position pos:line="77" pos:column="20"/></name></expr></argument>)<pos:position pos:line="77" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="22"/></expr_stmt>
    <return pos:line="78" pos:column="5">return <expr><name pos:line="78" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="78" pos:column="31"/></name></expr>;<pos:position pos:line="78" pos:column="32"/></return>
  }<pos:position pos:line="79" pos:column="4"/></block></then>
  <elseif pos:line="80" pos:column="3">else <if pos:line="80" pos:column="8">if<condition pos:line="80" pos:column="10">(<expr><name pos:line="80" pos:column="11">ret<pos:position pos:line="80" pos:column="14"/></name> <operator pos:line="80" pos:column="15">!=<pos:position pos:line="80" pos:column="17"/></operator> <name pos:line="80" pos:column="18">noErr<pos:position pos:line="80" pos:column="23"/></name></expr>)<pos:position pos:line="80" pos:column="24"/></condition><then pos:line="80" pos:column="24"> <block pos:line="80" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">CFRelease<pos:position pos:line="81" pos:column="14"/></name><argument_list pos:line="81" pos:column="14">(<argument><expr><name pos:line="81" pos:column="15">array<pos:position pos:line="81" pos:column="20"/></name></expr></argument>)<pos:position pos:line="81" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="22"/></expr_stmt>
    <return pos:line="82" pos:column="5">return <expr><call><name pos:line="82" pos:column="12">sslerr_to_curlerr<pos:position pos:line="82" pos:column="29"/></name><argument_list pos:line="82" pos:column="29">(<argument><expr><name pos:line="82" pos:column="30">data<pos:position pos:line="82" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="36">ret<pos:position pos:line="82" pos:column="39"/></name></expr></argument>)<pos:position pos:line="82" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="41"/></return>
  }<pos:position pos:line="83" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><name pos:line="85" pos:column="3">ret<pos:position pos:line="85" pos:column="6"/></name> <operator pos:line="85" pos:column="7">=<pos:position pos:line="85" pos:column="8"/></operator> <call><name pos:line="85" pos:column="9">SecTrustSetAnchorCertificates<pos:position pos:line="85" pos:column="38"/></name><argument_list pos:line="85" pos:column="38">(<argument><expr><name pos:line="85" pos:column="39">trust<pos:position pos:line="85" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="46">array<pos:position pos:line="85" pos:column="51"/></name></expr></argument>)<pos:position pos:line="85" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="53"/></expr_stmt>
  <if pos:line="86" pos:column="3">if<condition pos:line="86" pos:column="5">(<expr><name pos:line="86" pos:column="6">ret<pos:position pos:line="86" pos:column="9"/></name> <operator pos:line="86" pos:column="10">!=<pos:position pos:line="86" pos:column="12"/></operator> <name pos:line="86" pos:column="13">noErr<pos:position pos:line="86" pos:column="18"/></name></expr>)<pos:position pos:line="86" pos:column="19"/></condition><then pos:line="86" pos:column="19"> <block pos:line="86" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">CFRelease<pos:position pos:line="87" pos:column="14"/></name><argument_list pos:line="87" pos:column="14">(<argument><expr><name pos:line="87" pos:column="15">trust<pos:position pos:line="87" pos:column="20"/></name></expr></argument>)<pos:position pos:line="87" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="22"/></expr_stmt>
    <return pos:line="88" pos:column="5">return <expr><call><name pos:line="88" pos:column="12">sslerr_to_curlerr<pos:position pos:line="88" pos:column="29"/></name><argument_list pos:line="88" pos:column="29">(<argument><expr><name pos:line="88" pos:column="30">data<pos:position pos:line="88" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="36">ret<pos:position pos:line="88" pos:column="39"/></name></expr></argument>)<pos:position pos:line="88" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="41"/></return>
  }<pos:position pos:line="89" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="90" pos:column="3">ret<pos:position pos:line="90" pos:column="6"/></name> <operator pos:line="90" pos:column="7">=<pos:position pos:line="90" pos:column="8"/></operator> <call><name pos:line="90" pos:column="9">SecTrustSetAnchorCertificatesOnly<pos:position pos:line="90" pos:column="42"/></name><argument_list pos:line="90" pos:column="42">(<argument><expr><name pos:line="90" pos:column="43">trust<pos:position pos:line="90" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="90" pos:column="50">true<pos:position pos:line="90" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="56"/></expr_stmt>
  <if pos:line="91" pos:column="3">if<condition pos:line="91" pos:column="5">(<expr><name pos:line="91" pos:column="6">ret<pos:position pos:line="91" pos:column="9"/></name> <operator pos:line="91" pos:column="10">!=<pos:position pos:line="91" pos:column="12"/></operator> <name pos:line="91" pos:column="13">noErr<pos:position pos:line="91" pos:column="18"/></name></expr>)<pos:position pos:line="91" pos:column="19"/></condition><then pos:line="91" pos:column="19"> <block pos:line="91" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">CFRelease<pos:position pos:line="92" pos:column="14"/></name><argument_list pos:line="92" pos:column="14">(<argument><expr><name pos:line="92" pos:column="15">trust<pos:position pos:line="92" pos:column="20"/></name></expr></argument>)<pos:position pos:line="92" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="22"/></expr_stmt>
    <return pos:line="93" pos:column="5">return <expr><call><name pos:line="93" pos:column="12">sslerr_to_curlerr<pos:position pos:line="93" pos:column="29"/></name><argument_list pos:line="93" pos:column="29">(<argument><expr><name pos:line="93" pos:column="30">data<pos:position pos:line="93" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="36">ret<pos:position pos:line="93" pos:column="39"/></name></expr></argument>)<pos:position pos:line="93" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="41"/></return>
  }<pos:position pos:line="94" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="96" pos:column="3">SecTrustResultType<pos:position pos:line="96" pos:column="21"/></name></type> <name pos:line="96" pos:column="22">trust_eval<pos:position pos:line="96" pos:column="32"/></name> <init pos:line="96" pos:column="33">= <expr><literal type="number" pos:line="96" pos:column="35">0<pos:position pos:line="96" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="96" pos:column="37"/></decl_stmt>
  <expr_stmt><expr><name pos:line="97" pos:column="3">ret<pos:position pos:line="97" pos:column="6"/></name> <operator pos:line="97" pos:column="7">=<pos:position pos:line="97" pos:column="8"/></operator> <call><name pos:line="97" pos:column="9">SecTrustEvaluate<pos:position pos:line="97" pos:column="25"/></name><argument_list pos:line="97" pos:column="25">(<argument><expr><name pos:line="97" pos:column="26">trust<pos:position pos:line="97" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="33">&amp;<pos:position pos:line="97" pos:column="38"/></operator><name pos:line="97" pos:column="34">trust_eval<pos:position pos:line="97" pos:column="44"/></name></expr></argument>)<pos:position pos:line="97" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="98" pos:column="3">CFRelease<pos:position pos:line="98" pos:column="12"/></name><argument_list pos:line="98" pos:column="12">(<argument><expr><name pos:line="98" pos:column="13">array<pos:position pos:line="98" pos:column="18"/></name></expr></argument>)<pos:position pos:line="98" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="99" pos:column="3">CFRelease<pos:position pos:line="99" pos:column="12"/></name><argument_list pos:line="99" pos:column="12">(<argument><expr><name pos:line="99" pos:column="13">trust<pos:position pos:line="99" pos:column="18"/></name></expr></argument>)<pos:position pos:line="99" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="20"/></expr_stmt>
  <if pos:line="100" pos:column="3">if<condition pos:line="100" pos:column="5">(<expr><name pos:line="100" pos:column="6">ret<pos:position pos:line="100" pos:column="9"/></name> <operator pos:line="100" pos:column="10">!=<pos:position pos:line="100" pos:column="12"/></operator> <name pos:line="100" pos:column="13">noErr<pos:position pos:line="100" pos:column="18"/></name></expr>)<pos:position pos:line="100" pos:column="19"/></condition><then pos:line="100" pos:column="19"> <block pos:line="100" pos:column="20">{
    <return pos:line="101" pos:column="5">return <expr><call><name pos:line="101" pos:column="12">sslerr_to_curlerr<pos:position pos:line="101" pos:column="29"/></name><argument_list pos:line="101" pos:column="29">(<argument><expr><name pos:line="101" pos:column="30">data<pos:position pos:line="101" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="36">ret<pos:position pos:line="101" pos:column="39"/></name></expr></argument>)<pos:position pos:line="101" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="41"/></return>
  }<pos:position pos:line="102" pos:column="4"/></block></then></if>

  <switch pos:line="104" pos:column="3">switch<condition pos:line="104" pos:column="9">(<expr><name pos:line="104" pos:column="10">trust_eval<pos:position pos:line="104" pos:column="20"/></name></expr>)<pos:position pos:line="104" pos:column="21"/></condition> <block pos:line="104" pos:column="22">{
    <case pos:line="105" pos:column="5">case <expr><name pos:line="105" pos:column="10">kSecTrustResultUnspecified<pos:position pos:line="105" pos:column="36"/></name></expr>:<pos:position pos:line="105" pos:column="37"/></case>
    <case pos:line="106" pos:column="5">case <expr><name pos:line="106" pos:column="10">kSecTrustResultProceed<pos:position pos:line="106" pos:column="32"/></name></expr>:<pos:position pos:line="106" pos:column="33"/></case>
      <return pos:line="107" pos:column="7">return <expr><name pos:line="107" pos:column="14">CURLE_OK<pos:position pos:line="107" pos:column="22"/></name></expr>;<pos:position pos:line="107" pos:column="23"/></return>

    <case pos:line="109" pos:column="5">case <expr><name pos:line="109" pos:column="10">kSecTrustResultRecoverableTrustFailure<pos:position pos:line="109" pos:column="48"/></name></expr>:<pos:position pos:line="109" pos:column="49"/></case>
    <case pos:line="110" pos:column="5">case <expr><name pos:line="110" pos:column="10">kSecTrustResultDeny<pos:position pos:line="110" pos:column="29"/></name></expr>:<pos:position pos:line="110" pos:column="30"/></case>
    <default pos:line="111" pos:column="5">default:<pos:position pos:line="111" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="112" pos:column="7">failf<pos:position pos:line="112" pos:column="12"/></name><argument_list pos:line="112" pos:column="12">(<argument><expr><name pos:line="112" pos:column="13">data<pos:position pos:line="112" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="19">"SSL: certificate verification failed (result: %d)"<pos:position pos:line="112" pos:column="70"/></literal></expr></argument>,
            <argument><expr><name pos:line="113" pos:column="13">trust_eval<pos:position pos:line="113" pos:column="23"/></name></expr></argument>)<pos:position pos:line="113" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="25"/></expr_stmt>
      <return pos:line="114" pos:column="7">return <expr><name pos:line="114" pos:column="14">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="114" pos:column="44"/></name></expr>;<pos:position pos:line="114" pos:column="45"/></return>
  }<pos:position pos:line="115" pos:column="4"/></block></switch>
}<pos:position pos:line="116" pos:column="2"/></block></function></unit>
