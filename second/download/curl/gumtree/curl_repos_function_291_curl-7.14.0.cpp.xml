<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_291_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLntlm<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_input_ntlm<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">bool<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">proxy<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,   <comment type="block" pos:line="2" pos:column="40">/* if proxy or not */</comment>
                         <parameter><decl><type><name pos:line="3" pos:column="26">char<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">header<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="39"/></parameter_list> <comment type="block" pos:line="3" pos:column="40">/* rest of the www-authenticate:
                                          header */</comment>
<block pos:line="5" pos:column="1">{
  <comment type="block" pos:line="6" pos:column="3">/* point to the correct struct with this */</comment>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">ntlmdata<pos:position pos:line="7" pos:column="18"/></name></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">ntlm<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">ntlm<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <ternary><condition><expr><name pos:line="9" pos:column="10">proxy<pos:position pos:line="9" pos:column="15"/></name></expr>?<pos:position pos:line="9" pos:column="16"/></condition><then><expr><operator pos:line="9" pos:column="16">&amp;<pos:position pos:line="9" pos:column="21"/></operator><name><name pos:line="9" pos:column="17">conn<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">proxyntlm<pos:position pos:line="9" pos:column="32"/></name></name></expr></then><else pos:line="9" pos:column="32">:<expr><operator pos:line="9" pos:column="33">&amp;<pos:position pos:line="9" pos:column="38"/></operator><name><name pos:line="9" pos:column="34">conn<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">-&gt;<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="40">ntlm<pos:position pos:line="9" pos:column="44"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* skip initial whitespaces */</comment>
  <while pos:line="12" pos:column="3">while<condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">header<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">&amp;&amp;<pos:position pos:line="12" pos:column="27"/></operator> <call><name pos:line="12" pos:column="20">isspace<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><operator pos:line="12" pos:column="28">(<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="29">int<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">)<pos:position pos:line="12" pos:column="33"/></operator><operator pos:line="12" pos:column="33">*<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">header<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="42"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="5">header<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">++<pos:position pos:line="13" pos:column="13"/></operator></expr>;<pos:position pos:line="13" pos:column="14"/></expr_stmt></block></while>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><call><name pos:line="15" pos:column="6">checkprefix<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><literal type="string" pos:line="15" pos:column="18">"NTLM"<pos:position pos:line="15" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="26">header<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34"> <block pos:line="15" pos:column="35">{
    <expr_stmt><expr><name pos:line="16" pos:column="5">header<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">+=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">strlen<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><literal type="string" pos:line="16" pos:column="22">"NTLM"<pos:position pos:line="16" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>

    <while pos:line="18" pos:column="5">while<condition pos:line="18" pos:column="10">(<expr><operator pos:line="18" pos:column="11">*<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">header<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&amp;&amp;<pos:position pos:line="18" pos:column="29"/></operator> <call><name pos:line="18" pos:column="22">isspace<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><operator pos:line="18" pos:column="30">(<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">int<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">)<pos:position pos:line="18" pos:column="35"/></operator><operator pos:line="18" pos:column="35">*<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="36">header<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="44"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="7">header<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">++<pos:position pos:line="19" pos:column="15"/></operator></expr>;<pos:position pos:line="19" pos:column="16"/></expr_stmt></block></while>

    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><operator pos:line="21" pos:column="8">*<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">header<pos:position pos:line="21" pos:column="15"/></name></expr>)<pos:position pos:line="21" pos:column="16"/></condition><then pos:line="21" pos:column="16"> <block pos:line="21" pos:column="17">{
      <comment type="block" pos:line="22" pos:column="7">/* We got a type-2 message here:

         Index   Description         Content
         0       NTLMSSP Signature   Null-terminated ASCII "NTLMSSP"
                                     (0x4e544c4d53535000)
         8       NTLM Message Type   long (0x02000000)
         12      Target Name         security buffer(*)
         20      Flags               long
         24      Challenge           8 bytes
         (32)    Context (optional)  8 bytes (two consecutive longs)
         (40)    Target Information  (optional) security buffer(*)
         32 (48) start of data block
      */</comment>
      <decl_stmt><decl><type><name pos:line="35" pos:column="7">size_t<pos:position pos:line="35" pos:column="13"/></name></type> <name pos:line="35" pos:column="14">size<pos:position pos:line="35" pos:column="18"/></name></decl>;<pos:position pos:line="35" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="36" pos:column="7">unsigned<pos:position pos:line="36" pos:column="15"/></name> <name pos:line="36" pos:column="16">char<pos:position pos:line="36" pos:column="20"/></name> <modifier pos:line="36" pos:column="21">*<pos:position pos:line="36" pos:column="22"/></modifier></type><name pos:line="36" pos:column="22">buffer<pos:position pos:line="36" pos:column="28"/></name></decl>;<pos:position pos:line="36" pos:column="29"/></decl_stmt>
      <expr_stmt><expr><name pos:line="37" pos:column="7">size<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">Curl_base64_decode<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">header<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="41">&amp;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="42">buffer<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="50"/></expr_stmt>
      <if pos:line="38" pos:column="7">if<condition pos:line="38" pos:column="9">(<expr><operator pos:line="38" pos:column="10">!<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="11">buffer<pos:position pos:line="38" pos:column="17"/></name></expr>)<pos:position pos:line="38" pos:column="18"/></condition><then pos:line="38" pos:column="18">
        <block type="pseudo"><return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">CURLNTLM_BAD<pos:position pos:line="39" pos:column="28"/></name></expr>;<pos:position pos:line="39" pos:column="29"/></return></block></then></if>

      <expr_stmt><expr><name><name pos:line="41" pos:column="7">ntlm<pos:position pos:line="41" pos:column="11"/></name><operator pos:line="41" pos:column="11">-&gt;<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="13">state<pos:position pos:line="41" pos:column="18"/></name></name> <operator pos:line="41" pos:column="19">=<pos:position pos:line="41" pos:column="20"/></operator> <name pos:line="41" pos:column="21">NTLMSTATE_TYPE2<pos:position pos:line="41" pos:column="36"/></name></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt> <comment type="block" pos:line="41" pos:column="38">/* we got a type-2 */</comment>

<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">USE_WINDOWS_SSPI<pos:position pos:line="43" pos:column="24"/></name></cpp:ifdef>
      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><operator pos:line="44" pos:column="11">(<pos:position pos:line="44" pos:column="12"/></operator><name><name pos:line="44" pos:column="12">ntlm<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">type_2<pos:position pos:line="44" pos:column="24"/></name></name> <operator pos:line="44" pos:column="25">=<pos:position pos:line="44" pos:column="26"/></operator> <call><name pos:line="44" pos:column="27">malloc<pos:position pos:line="44" pos:column="33"/></name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">size<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">+<pos:position pos:line="44" pos:column="39"/></operator><literal type="number" pos:line="44" pos:column="39">1<pos:position pos:line="44" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="41"/></argument_list></call><operator pos:line="44" pos:column="41">)<pos:position pos:line="44" pos:column="42"/></operator> <operator pos:line="44" pos:column="43">==<pos:position pos:line="44" pos:column="45"/></operator> <name pos:line="44" pos:column="46">NULL<pos:position pos:line="44" pos:column="50"/></name></expr>)<pos:position pos:line="44" pos:column="51"/></condition><then pos:line="44" pos:column="51"> <block pos:line="44" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">free<pos:position pos:line="45" pos:column="13"/></name><argument_list pos:line="45" pos:column="13">(<argument><expr><name pos:line="45" pos:column="14">buffer<pos:position pos:line="45" pos:column="20"/></name></expr></argument>)<pos:position pos:line="45" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>
        <return pos:line="46" pos:column="9">return <expr><name pos:line="46" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="46" pos:column="35"/></name></expr>;<pos:position pos:line="46" pos:column="36"/></return>
      }<pos:position pos:line="47" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="48" pos:column="7">ntlm<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">-&gt;<pos:position pos:line="48" pos:column="16"/></operator><name pos:line="48" pos:column="13">n_type_2<pos:position pos:line="48" pos:column="21"/></name></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <name pos:line="48" pos:column="24">size<pos:position pos:line="48" pos:column="28"/></name></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">memcpy<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><name><name pos:line="49" pos:column="14">ntlm<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">-&gt;<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="20">type_2<pos:position pos:line="49" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="28">buffer<pos:position pos:line="49" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="36">size<pos:position pos:line="49" pos:column="40"/></name></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>
<cpp:else pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">else<pos:position pos:line="50" pos:column="6"/></cpp:directive></cpp:else>
      <if pos:line="51" pos:column="7">if<condition pos:line="51" pos:column="9">(<expr><name pos:line="51" pos:column="10">size<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">&gt;=<pos:position pos:line="51" pos:column="20"/></operator> <literal type="number" pos:line="51" pos:column="18">48<pos:position pos:line="51" pos:column="20"/></literal></expr>)<pos:position pos:line="51" pos:column="21"/></condition><then pos:line="51" pos:column="21">
        <comment type="block" pos:line="52" pos:column="9">/* the nonce of interest is index [24 .. 31], 8 bytes */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="9">memcpy<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><name><name pos:line="53" pos:column="16">ntlm<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">-&gt;<pos:position pos:line="53" pos:column="25"/></operator><name pos:line="53" pos:column="22">nonce<pos:position pos:line="53" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="29">&amp;<pos:position pos:line="53" pos:column="34"/></operator><name><name pos:line="53" pos:column="30">buffer<pos:position pos:line="53" pos:column="36"/></name><index pos:line="53" pos:column="36">[<expr><literal type="number" pos:line="53" pos:column="37">24<pos:position pos:line="53" pos:column="39"/></literal></expr>]<pos:position pos:line="53" pos:column="40"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="42">8<pos:position pos:line="53" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt></block></then></if>
      <comment type="block" pos:line="54" pos:column="7">/* FIX: add an else here! */</comment>

      <comment type="block" pos:line="56" pos:column="7">/* at index decimal 20, there's a 32bit NTLM flag field */</comment>

      <expr_stmt><expr><call><name pos:line="58" pos:column="7">free<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">(<argument><expr><name pos:line="58" pos:column="12">buffer<pos:position pos:line="58" pos:column="18"/></name></expr></argument>)<pos:position pos:line="58" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="60" pos:column="6"/></block></then>
    <else pos:line="61" pos:column="5">else <block pos:line="61" pos:column="10">{
      <if pos:line="62" pos:column="7">if<condition pos:line="62" pos:column="9">(<expr><name><name pos:line="62" pos:column="10">ntlm<pos:position pos:line="62" pos:column="14"/></name><operator pos:line="62" pos:column="14">-&gt;<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="16">state<pos:position pos:line="62" pos:column="21"/></name></name> <operator pos:line="62" pos:column="22">&gt;=<pos:position pos:line="62" pos:column="27"/></operator> <name pos:line="62" pos:column="25">NTLMSTATE_TYPE1<pos:position pos:line="62" pos:column="40"/></name></expr>)<pos:position pos:line="62" pos:column="41"/></condition><then pos:line="62" pos:column="41">
        <block type="pseudo"><return pos:line="63" pos:column="9">return <expr><name pos:line="63" pos:column="16">CURLNTLM_BAD<pos:position pos:line="63" pos:column="28"/></name></expr>;<pos:position pos:line="63" pos:column="29"/></return></block></then></if>

      <expr_stmt><expr><name><name pos:line="65" pos:column="7">ntlm<pos:position pos:line="65" pos:column="11"/></name><operator pos:line="65" pos:column="11">-&gt;<pos:position pos:line="65" pos:column="16"/></operator><name pos:line="65" pos:column="13">state<pos:position pos:line="65" pos:column="18"/></name></name> <operator pos:line="65" pos:column="19">=<pos:position pos:line="65" pos:column="20"/></operator> <name pos:line="65" pos:column="21">NTLMSTATE_TYPE1<pos:position pos:line="65" pos:column="36"/></name></expr>;<pos:position pos:line="65" pos:column="37"/></expr_stmt> <comment type="block" pos:line="65" pos:column="38">/* we should sent away a type-1 */</comment>
    }<pos:position pos:line="66" pos:column="6"/></block></else></if>
  }<pos:position pos:line="67" pos:column="4"/></block></then></if>
  <return pos:line="68" pos:column="3">return <expr><name pos:line="68" pos:column="10">CURLNTLM_FINE<pos:position pos:line="68" pos:column="23"/></name></expr>;<pos:position pos:line="68" pos:column="24"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
