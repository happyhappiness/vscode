<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_1930.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">my_fwrite<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">buffer<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">size_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">sz<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">size_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">nmemb<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">void<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">stream<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">rc<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">OutStruct<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">out<pos:position pos:line="4" pos:column="24"/></name><init pos:line="4" pos:column="24">=<expr><operator pos:line="4" pos:column="25">(<pos:position pos:line="4" pos:column="26"/></operator>struct <name pos:line="4" pos:column="33">OutStruct<pos:position pos:line="4" pos:column="42"/></name> <operator pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></operator><operator pos:line="4" pos:column="44">)<pos:position pos:line="4" pos:column="45"/></operator><name pos:line="4" pos:column="45">stream<pos:position pos:line="4" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Configurable<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">config<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><name><name pos:line="5" pos:column="33">out<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">config<pos:position pos:line="5" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">curl_off_t<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">size<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><call pos:line="6" pos:column="21">(<name pos:line="6" pos:column="22">curl_off_t<pos:position pos:line="6" pos:column="32"/></name>)<argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">sz<pos:position pos:line="6" pos:column="36"/></name> <operator pos:line="6" pos:column="37">*<pos:position pos:line="6" pos:column="38"/></operator> <name pos:line="6" pos:column="39">nmemb<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt> <comment type="block" pos:line="6" pos:column="47">/* typecast to prevent
                                                 warnings when converting from
                                                 unsigned to signed */</comment>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name pos:line="9" pos:column="6">out<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">&amp;&amp;<pos:position pos:line="9" pos:column="20"/></operator> <operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name><name pos:line="9" pos:column="14">out<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">-&gt;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="19">stream<pos:position pos:line="9" pos:column="25"/></name></name></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26"> <block pos:line="9" pos:column="27">{
    <comment type="block" pos:line="10" pos:column="5">/* open file for writing */</comment>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">out<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">-&gt;<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="10">stream<pos:position pos:line="11" pos:column="16"/></name></name><operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator><call><name pos:line="11" pos:column="17">fopen<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name><name pos:line="11" pos:column="23">out<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">-&gt;<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="28">filename<pos:position pos:line="11" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="38">"wb"<pos:position pos:line="11" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">(<expr><operator pos:line="12" pos:column="8">!<pos:position pos:line="12" pos:column="9"/></operator><name><name pos:line="12" pos:column="9">out<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">stream<pos:position pos:line="12" pos:column="20"/></name></name></expr>)<pos:position pos:line="12" pos:column="21"/></condition><then pos:line="12" pos:column="21"> <block pos:line="12" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">warnf<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">config<pos:position pos:line="13" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="21">"Failed to create the file %s\n"<pos:position pos:line="13" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="55">out<pos:position pos:line="13" pos:column="58"/></name><operator pos:line="13" pos:column="58">-&gt;<pos:position pos:line="13" pos:column="63"/></operator><name pos:line="13" pos:column="60">filename<pos:position pos:line="13" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="70"/></expr_stmt>
      <return pos:line="14" pos:column="7">return <expr><operator pos:line="14" pos:column="14">-<pos:position pos:line="14" pos:column="15"/></operator><literal type="number" pos:line="14" pos:column="15">1<pos:position pos:line="14" pos:column="16"/></literal></expr>;<pos:position pos:line="14" pos:column="17"/></return> <comment type="block" pos:line="14" pos:column="18">/* failure */</comment>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name><name pos:line="18" pos:column="6">config<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">recvpersecond<pos:position pos:line="18" pos:column="27"/></name></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28"> <block pos:line="18" pos:column="29">{
    <comment type="block" pos:line="19" pos:column="5">/*
     * We know when we received data the previous time. We know how much data
     * we get now. Make sure that this is not faster than we are told to run.
     * If we're faster, sleep a while *before* doing the fwrite() here.
     */</comment>

    <decl_stmt><decl><type><name><name pos:line="25" pos:column="5">struct<pos:position pos:line="25" pos:column="11"/></name> <name pos:line="25" pos:column="12">timeval<pos:position pos:line="25" pos:column="19"/></name></name></type> <name pos:line="25" pos:column="20">now<pos:position pos:line="25" pos:column="23"/></name></decl>;<pos:position pos:line="25" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">long<pos:position pos:line="26" pos:column="9"/></name></type> <name pos:line="26" pos:column="10">timediff<pos:position pos:line="26" pos:column="18"/></name></decl>;<pos:position pos:line="26" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">long<pos:position pos:line="27" pos:column="9"/></name></type> <name pos:line="27" pos:column="10">sleep_time<pos:position pos:line="27" pos:column="20"/></name></decl>;<pos:position pos:line="27" pos:column="21"/></decl_stmt>

    <decl_stmt><decl><specifier pos:line="29" pos:column="5">static<pos:position pos:line="29" pos:column="11"/></specifier> <type><name pos:line="29" pos:column="12">curl_off_t<pos:position pos:line="29" pos:column="22"/></name></type> <name pos:line="29" pos:column="23">addit<pos:position pos:line="29" pos:column="28"/></name> <init pos:line="29" pos:column="29">= <expr><literal type="number" pos:line="29" pos:column="31">0<pos:position pos:line="29" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="33"/></decl_stmt>

    <expr_stmt><expr><name pos:line="31" pos:column="5">now<pos:position pos:line="31" pos:column="8"/></name> <operator pos:line="31" pos:column="9">=<pos:position pos:line="31" pos:column="10"/></operator> <call><name pos:line="31" pos:column="11">curlx_tvnow<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">()<pos:position pos:line="31" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">timediff<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <call><name pos:line="32" pos:column="16">curlx_tvdiff<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name pos:line="32" pos:column="29">now<pos:position pos:line="32" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="34">config<pos:position pos:line="32" pos:column="40"/></name><operator pos:line="32" pos:column="40">-&gt;<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="42">lastrecvtime<pos:position pos:line="32" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="56"/></expr_stmt> <comment type="block" pos:line="32" pos:column="57">/* milliseconds */</comment>

    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><operator pos:line="34" pos:column="8">(<pos:position pos:line="34" pos:column="9"/></operator><name><name pos:line="34" pos:column="9">config<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">-&gt;<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="17">recvpersecond<pos:position pos:line="34" pos:column="30"/></name></name> <operator pos:line="34" pos:column="31">&gt;<pos:position pos:line="34" pos:column="35"/></operator> <name pos:line="34" pos:column="33">CURL_MAX_WRITE_SIZE<pos:position pos:line="34" pos:column="52"/></name><operator pos:line="34" pos:column="52">)<pos:position pos:line="34" pos:column="53"/></operator> <operator pos:line="34" pos:column="54">&amp;&amp;<pos:position pos:line="34" pos:column="64"/></operator> <operator pos:line="34" pos:column="57">(<pos:position pos:line="34" pos:column="58"/></operator><name pos:line="34" pos:column="58">timediff<pos:position pos:line="34" pos:column="66"/></name> <operator pos:line="34" pos:column="67">&lt;<pos:position pos:line="34" pos:column="71"/></operator> <literal type="number" pos:line="34" pos:column="69">100<pos:position pos:line="34" pos:column="72"/></literal><operator pos:line="34" pos:column="72">)<pos:position pos:line="34" pos:column="73"/></operator></expr> )<pos:position pos:line="34" pos:column="75"/></condition><then pos:line="34" pos:column="75"> <block pos:line="34" pos:column="76">{
      <comment type="block" pos:line="35" pos:column="7">/* If we allow a rather speedy transfer, add this amount for later
       * checking. Also, do not modify the lastrecvtime as we will use a
       * longer scope due to this addition.  We wait for at least 100 ms to
       * pass to get better values to do better math for the sleep. */</comment>
      <expr_stmt><expr><name pos:line="39" pos:column="7">addit<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">+=<pos:position pos:line="39" pos:column="15"/></operator> <name pos:line="39" pos:column="16">size<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then>
    <else pos:line="41" pos:column="5">else <block pos:line="41" pos:column="10">{
      <expr_stmt><expr><name pos:line="42" pos:column="7">size<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">+=<pos:position pos:line="42" pos:column="14"/></operator> <name pos:line="42" pos:column="15">addit<pos:position pos:line="42" pos:column="20"/></name></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt> <comment type="block" pos:line="42" pos:column="22">/* add up the possibly added bonus rounds from the
                        zero timediff calls */</comment>
      <expr_stmt><expr><name pos:line="44" pos:column="7">addit<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <literal type="number" pos:line="44" pos:column="15">0<pos:position pos:line="44" pos:column="16"/></literal></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt> <comment type="block" pos:line="44" pos:column="18">/* clear the addition pool */</comment>

      <if pos:line="46" pos:column="7">if<condition pos:line="46" pos:column="9">( <expr><name pos:line="46" pos:column="11">size<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">*<pos:position pos:line="46" pos:column="16"/></operator><literal type="number" pos:line="46" pos:column="16">1000<pos:position pos:line="46" pos:column="20"/></literal> <operator pos:line="46" pos:column="21">&gt;<pos:position pos:line="46" pos:column="25"/></operator> <name><name pos:line="46" pos:column="23">config<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">-&gt;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="31">recvpersecond<pos:position pos:line="46" pos:column="44"/></name></name><operator pos:line="46" pos:column="44">*<pos:position pos:line="46" pos:column="45"/></operator><name pos:line="46" pos:column="45">timediff<pos:position pos:line="46" pos:column="53"/></name></expr>)<pos:position pos:line="46" pos:column="54"/></condition><then pos:line="46" pos:column="54"> <block pos:line="46" pos:column="55">{
        <comment type="block" pos:line="47" pos:column="9">/* figure out how many milliseconds to rest */</comment>
        <expr_stmt><expr><name pos:line="48" pos:column="9">sleep_time<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <call pos:line="48" pos:column="22">(<name pos:line="48" pos:column="23">long<pos:position pos:line="48" pos:column="27"/></name>)<argument_list pos:line="48" pos:column="28">(<argument><expr><name pos:line="48" pos:column="29">size<pos:position pos:line="48" pos:column="33"/></name><operator pos:line="48" pos:column="33">*<pos:position pos:line="48" pos:column="34"/></operator><literal type="number" pos:line="48" pos:column="34">1000<pos:position pos:line="48" pos:column="38"/></literal><operator pos:line="48" pos:column="38">/<pos:position pos:line="48" pos:column="39"/></operator><name><name pos:line="48" pos:column="39">config<pos:position pos:line="48" pos:column="45"/></name><operator pos:line="48" pos:column="45">-&gt;<pos:position pos:line="48" pos:column="50"/></operator><name pos:line="48" pos:column="47">recvpersecond<pos:position pos:line="48" pos:column="60"/></name></name> <operator pos:line="48" pos:column="61">-<pos:position pos:line="48" pos:column="62"/></operator> <name pos:line="48" pos:column="63">timediff<pos:position pos:line="48" pos:column="71"/></name></expr></argument>)<pos:position pos:line="48" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="73"/></expr_stmt>

        <comment type="block" pos:line="50" pos:column="9">/*
         * Make sure we don't sleep for so long that we trigger the speed
         * limit.  This won't limit the bandwidth quite the way we've been
         * asked to, but at least the transfer has a chance.
         */</comment>
        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name><name pos:line="55" pos:column="13">config<pos:position pos:line="55" pos:column="19"/></name><operator pos:line="55" pos:column="19">-&gt;<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="21">low_speed_time<pos:position pos:line="55" pos:column="35"/></name></name> <operator pos:line="55" pos:column="36">&gt;<pos:position pos:line="55" pos:column="40"/></operator> <literal type="number" pos:line="55" pos:column="38">0<pos:position pos:line="55" pos:column="39"/></literal></expr>)<pos:position pos:line="55" pos:column="40"/></condition><then pos:line="55" pos:column="40">
          <block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="11">sleep_time<pos:position pos:line="56" pos:column="21"/></name> <operator pos:line="56" pos:column="22">=<pos:position pos:line="56" pos:column="23"/></operator> <call><name pos:line="56" pos:column="24">MIN<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">sleep_time<pos:position pos:line="56" pos:column="38"/></name></expr></argument>,<argument><expr><operator pos:line="56" pos:column="39">(<pos:position pos:line="56" pos:column="40"/></operator><name><name pos:line="56" pos:column="40">config<pos:position pos:line="56" pos:column="46"/></name><operator pos:line="56" pos:column="46">-&gt;<pos:position pos:line="56" pos:column="51"/></operator><name pos:line="56" pos:column="48">low_speed_time<pos:position pos:line="56" pos:column="62"/></name></name> <operator pos:line="56" pos:column="63">*<pos:position pos:line="56" pos:column="64"/></operator> <literal type="number" pos:line="56" pos:column="65">1000<pos:position pos:line="56" pos:column="69"/></literal><operator pos:line="56" pos:column="69">)<pos:position pos:line="56" pos:column="70"/></operator> <operator pos:line="56" pos:column="71">/<pos:position pos:line="56" pos:column="72"/></operator> <literal type="number" pos:line="56" pos:column="73">2<pos:position pos:line="56" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="76"/></expr_stmt></block></then></if>

        <if pos:line="58" pos:column="9">if<condition pos:line="58" pos:column="11">(<expr><name pos:line="58" pos:column="12">sleep_time<pos:position pos:line="58" pos:column="22"/></name> <operator pos:line="58" pos:column="23">&gt;<pos:position pos:line="58" pos:column="27"/></operator> <literal type="number" pos:line="58" pos:column="25">0<pos:position pos:line="58" pos:column="26"/></literal></expr>)<pos:position pos:line="58" pos:column="27"/></condition><then pos:line="58" pos:column="27"> <block pos:line="58" pos:column="28">{
          <expr_stmt><expr><call><name pos:line="59" pos:column="11">go_sleep<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">sleep_time<pos:position pos:line="59" pos:column="30"/></name></expr></argument>)<pos:position pos:line="59" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="32"/></expr_stmt>
          <expr_stmt><expr><name pos:line="60" pos:column="11">now<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator> <call><name pos:line="60" pos:column="17">curlx_tvnow<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">()<pos:position pos:line="60" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
      }<pos:position pos:line="62" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="63" pos:column="7">config<pos:position pos:line="63" pos:column="13"/></name><operator pos:line="63" pos:column="13">-&gt;<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="15">lastrecvtime<pos:position pos:line="63" pos:column="27"/></name></name> <operator pos:line="63" pos:column="28">=<pos:position pos:line="63" pos:column="29"/></operator> <name pos:line="63" pos:column="30">now<pos:position pos:line="63" pos:column="33"/></name></expr>;<pos:position pos:line="63" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></else></if>
  }<pos:position pos:line="65" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="67" pos:column="3">rc<pos:position pos:line="67" pos:column="5"/></name> <operator pos:line="67" pos:column="6">=<pos:position pos:line="67" pos:column="7"/></operator> <call><name pos:line="67" pos:column="8">fwrite<pos:position pos:line="67" pos:column="14"/></name><argument_list pos:line="67" pos:column="14">(<argument><expr><name pos:line="67" pos:column="15">buffer<pos:position pos:line="67" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="23">sz<pos:position pos:line="67" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="27">nmemb<pos:position pos:line="67" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="34">out<pos:position pos:line="67" pos:column="37"/></name><operator pos:line="67" pos:column="37">-&gt;<pos:position pos:line="67" pos:column="42"/></operator><name pos:line="67" pos:column="39">stream<pos:position pos:line="67" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>

  <if pos:line="69" pos:column="3">if<condition pos:line="69" pos:column="5">(<expr><call pos:line="69" pos:column="6">(<name pos:line="69" pos:column="7">int<pos:position pos:line="69" pos:column="10"/></name>)<argument_list pos:line="69" pos:column="11">(<argument><expr><name pos:line="69" pos:column="12">sz<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">*<pos:position pos:line="69" pos:column="16"/></operator> <name pos:line="69" pos:column="17">nmemb<pos:position pos:line="69" pos:column="22"/></name></expr></argument>)<pos:position pos:line="69" pos:column="23"/></argument_list></call> <operator pos:line="69" pos:column="24">==<pos:position pos:line="69" pos:column="26"/></operator> <name pos:line="69" pos:column="27">rc<pos:position pos:line="69" pos:column="29"/></name></expr>)<pos:position pos:line="69" pos:column="30"/></condition><then pos:line="69" pos:column="30"> <block pos:line="69" pos:column="31">{
    <comment type="block" pos:line="70" pos:column="5">/* we added this amount of data to the output */</comment>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">out<pos:position pos:line="71" pos:column="8"/></name><operator pos:line="71" pos:column="8">-&gt;<pos:position pos:line="71" pos:column="13"/></operator><name pos:line="71" pos:column="10">bytes<pos:position pos:line="71" pos:column="15"/></name></name> <operator pos:line="71" pos:column="16">+=<pos:position pos:line="71" pos:column="18"/></operator> <operator pos:line="71" pos:column="19">(<pos:position pos:line="71" pos:column="20"/></operator><name pos:line="71" pos:column="20">sz<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">*<pos:position pos:line="71" pos:column="24"/></operator> <name pos:line="71" pos:column="25">nmemb<pos:position pos:line="71" pos:column="30"/></name><operator pos:line="71" pos:column="30">)<pos:position pos:line="71" pos:column="31"/></operator></expr>;<pos:position pos:line="71" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>

  <if pos:line="74" pos:column="3">if<condition pos:line="74" pos:column="5">(<expr><name><name pos:line="74" pos:column="6">config<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">-&gt;<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="14">nobuffer<pos:position pos:line="74" pos:column="22"/></name></name></expr>)<pos:position pos:line="74" pos:column="23"/></condition><then pos:line="74" pos:column="23">
    <comment type="block" pos:line="75" pos:column="5">/* disable output buffering */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="5">fflush<pos:position pos:line="76" pos:column="11"/></name><argument_list pos:line="76" pos:column="11">(<argument><expr><name><name pos:line="76" pos:column="12">out<pos:position pos:line="76" pos:column="15"/></name><operator pos:line="76" pos:column="15">-&gt;<pos:position pos:line="76" pos:column="20"/></operator><name pos:line="76" pos:column="17">stream<pos:position pos:line="76" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt></block></then></if>

  <return pos:line="78" pos:column="3">return <expr><name pos:line="78" pos:column="10">rc<pos:position pos:line="78" pos:column="12"/></name></expr>;<pos:position pos:line="78" pos:column="13"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
