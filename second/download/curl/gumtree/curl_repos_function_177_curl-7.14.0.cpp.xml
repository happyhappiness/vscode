<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_177_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">my_fread<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">buffer<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">size_t<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">sz<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">size_t<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">nmemb<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">void<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">userp<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">rc<pos:position pos:line="3" pos:column="9"/></name></decl>;<pos:position pos:line="3" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">InStruct<pos:position pos:line="4" pos:column="18"/></name></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">in<pos:position pos:line="4" pos:column="22"/></name><init pos:line="4" pos:column="22">=<expr><operator pos:line="4" pos:column="23">(<pos:position pos:line="4" pos:column="24"/></operator>struct <name pos:line="4" pos:column="31">InStruct<pos:position pos:line="4" pos:column="39"/></name> <operator pos:line="4" pos:column="40">*<pos:position pos:line="4" pos:column="41"/></operator><operator pos:line="4" pos:column="41">)<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="42">userp<pos:position pos:line="4" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Configurable<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">config<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><name><name pos:line="5" pos:column="33">in<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">-&gt;<pos:position pos:line="5" pos:column="40"/></operator><name pos:line="5" pos:column="37">config<pos:position pos:line="5" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">curl_off_t<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">size<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><call pos:line="6" pos:column="21">(<name pos:line="6" pos:column="22">curl_off_t<pos:position pos:line="6" pos:column="32"/></name>)<argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">sz<pos:position pos:line="6" pos:column="36"/></name> <operator pos:line="6" pos:column="37">*<pos:position pos:line="6" pos:column="38"/></operator> <name pos:line="6" pos:column="39">nmemb<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt>  <comment type="block" pos:line="6" pos:column="48">/* typecast to prevent warnings
                                                  when converting from
                                                  unsigned to signed */</comment>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name><name pos:line="10" pos:column="6">config<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">sendpersecond<pos:position pos:line="10" pos:column="27"/></name></name></expr>)<pos:position pos:line="10" pos:column="28"/></condition><then pos:line="10" pos:column="28"> <block pos:line="10" pos:column="29">{
    <comment type="block" pos:line="11" pos:column="5">/*
     * We know when we sent data the previous time. We know how much data
     * we sent. Make sure that this was not faster than we are told to run.
     * If we're faster, sleep a while *before* doing the fread() here.
     * Also, make no larger fread() than should be sent this second!
     */</comment>

    <decl_stmt><decl><type><name><name pos:line="18" pos:column="5">struct<pos:position pos:line="18" pos:column="11"/></name> <name pos:line="18" pos:column="12">timeval<pos:position pos:line="18" pos:column="19"/></name></name></type> <name pos:line="18" pos:column="20">now<pos:position pos:line="18" pos:column="23"/></name></decl>;<pos:position pos:line="18" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">long<pos:position pos:line="19" pos:column="9"/></name></type> <name pos:line="19" pos:column="10">timediff<pos:position pos:line="19" pos:column="18"/></name></decl>;<pos:position pos:line="19" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">long<pos:position pos:line="20" pos:column="9"/></name></type> <name pos:line="20" pos:column="10">sleep_time<pos:position pos:line="20" pos:column="20"/></name></decl>;<pos:position pos:line="20" pos:column="21"/></decl_stmt>

    <decl_stmt><decl><specifier pos:line="22" pos:column="5">static<pos:position pos:line="22" pos:column="11"/></specifier> <type><name pos:line="22" pos:column="12">curl_off_t<pos:position pos:line="22" pos:column="22"/></name></type> <name pos:line="22" pos:column="23">addit<pos:position pos:line="22" pos:column="28"/></name> <init pos:line="22" pos:column="29">= <expr><literal type="number" pos:line="22" pos:column="31">0<pos:position pos:line="22" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="33"/></decl_stmt>

    <expr_stmt><expr><name pos:line="24" pos:column="5">now<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">curlx_tvnow<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">()<pos:position pos:line="24" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">timediff<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <call><name pos:line="25" pos:column="16">curlx_tvdiff<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">now<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="34">config<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">-&gt;<pos:position pos:line="25" pos:column="45"/></operator><name pos:line="25" pos:column="42">lastsendtime<pos:position pos:line="25" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="56"/></expr_stmt> <comment type="block" pos:line="25" pos:column="57">/* milliseconds */</comment>

    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><operator pos:line="27" pos:column="8">(<pos:position pos:line="27" pos:column="9"/></operator><name><name pos:line="27" pos:column="9">config<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">sendpersecond<pos:position pos:line="27" pos:column="30"/></name></name> <operator pos:line="27" pos:column="31">&gt;<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="33">CURL_MAX_WRITE_SIZE<pos:position pos:line="27" pos:column="52"/></name><operator pos:line="27" pos:column="52">)<pos:position pos:line="27" pos:column="53"/></operator> <operator pos:line="27" pos:column="54">&amp;&amp;<pos:position pos:line="27" pos:column="64"/></operator>
       <operator pos:line="28" pos:column="8">(<pos:position pos:line="28" pos:column="9"/></operator><name pos:line="28" pos:column="9">timediff<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">&lt;<pos:position pos:line="28" pos:column="22"/></operator> <literal type="number" pos:line="28" pos:column="20">100<pos:position pos:line="28" pos:column="23"/></literal><operator pos:line="28" pos:column="23">)<pos:position pos:line="28" pos:column="24"/></operator></expr>)<pos:position pos:line="28" pos:column="25"/></condition><then pos:line="28" pos:column="25"> <block pos:line="28" pos:column="26">{
      <comment type="block" pos:line="29" pos:column="7">/*
       * We allow very fast transfers, then allow at least 100 ms between
       * each sleeping mile-stone to create more accurate long-term rates.
       */</comment>
      <expr_stmt><expr><name pos:line="33" pos:column="7">addit<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">+=<pos:position pos:line="33" pos:column="15"/></operator> <name pos:line="33" pos:column="16">size<pos:position pos:line="33" pos:column="20"/></name></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then>
    <else pos:line="35" pos:column="5">else <block pos:line="35" pos:column="10">{
      <comment type="block" pos:line="36" pos:column="7">/* If 'addit' is non-zero, it contains the total amount of bytes
         uploaded during the last 'timediff' milliseconds. If it is zero,
         we use the stored previous size. */</comment>
      <decl_stmt><decl><type><name pos:line="39" pos:column="7">curl_off_t<pos:position pos:line="39" pos:column="17"/></name></type> <name pos:line="39" pos:column="18">xfered<pos:position pos:line="39" pos:column="24"/></name> <init pos:line="39" pos:column="25">= <expr><ternary><condition><expr><name pos:line="39" pos:column="27">addit<pos:position pos:line="39" pos:column="32"/></name></expr>?<pos:position pos:line="39" pos:column="33"/></condition><then><expr><name pos:line="39" pos:column="33">addit<pos:position pos:line="39" pos:column="38"/></name></expr></then><else pos:line="39" pos:column="38">:<expr><operator pos:line="39" pos:column="39">(<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="40">curl_off_t<pos:position pos:line="39" pos:column="50"/></name><operator pos:line="39" pos:column="50">)<pos:position pos:line="39" pos:column="51"/></operator><name><name pos:line="39" pos:column="51">config<pos:position pos:line="39" pos:column="57"/></name><operator pos:line="39" pos:column="57">-&gt;<pos:position pos:line="39" pos:column="62"/></operator><name pos:line="39" pos:column="59">lastsendsize<pos:position pos:line="39" pos:column="71"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="39" pos:column="72"/></decl_stmt>
      <expr_stmt><expr><name pos:line="40" pos:column="7">addit<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">=<pos:position pos:line="40" pos:column="14"/></operator> <literal type="number" pos:line="40" pos:column="15">0<pos:position pos:line="40" pos:column="16"/></literal></expr>;<pos:position pos:line="40" pos:column="17"/></expr_stmt> <comment type="block" pos:line="40" pos:column="18">/* clear it for the next round */</comment>

      <if pos:line="42" pos:column="7">if<condition pos:line="42" pos:column="9">( <expr><name pos:line="42" pos:column="11">xfered<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">*<pos:position pos:line="42" pos:column="18"/></operator><literal type="number" pos:line="42" pos:column="18">1000<pos:position pos:line="42" pos:column="22"/></literal> <operator pos:line="42" pos:column="23">&gt;<pos:position pos:line="42" pos:column="27"/></operator> <name><name pos:line="42" pos:column="25">config<pos:position pos:line="42" pos:column="31"/></name><operator pos:line="42" pos:column="31">-&gt;<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="33">sendpersecond<pos:position pos:line="42" pos:column="46"/></name></name><operator pos:line="42" pos:column="46">*<pos:position pos:line="42" pos:column="47"/></operator><name pos:line="42" pos:column="47">timediff<pos:position pos:line="42" pos:column="55"/></name></expr>)<pos:position pos:line="42" pos:column="56"/></condition><then pos:line="42" pos:column="56"> <block pos:line="42" pos:column="57">{
        <comment type="block" pos:line="43" pos:column="9">/* figure out how many milliseconds to rest */</comment>
        <expr_stmt><expr><name pos:line="44" pos:column="9">sleep_time<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">=<pos:position pos:line="44" pos:column="21"/></operator> <call pos:line="44" pos:column="22">(<name pos:line="44" pos:column="23">long<pos:position pos:line="44" pos:column="27"/></name>)<argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">xfered<pos:position pos:line="44" pos:column="35"/></name><operator pos:line="44" pos:column="35">*<pos:position pos:line="44" pos:column="36"/></operator><literal type="number" pos:line="44" pos:column="36">1000<pos:position pos:line="44" pos:column="40"/></literal><operator pos:line="44" pos:column="40">/<pos:position pos:line="44" pos:column="41"/></operator><name><name pos:line="44" pos:column="41">config<pos:position pos:line="44" pos:column="47"/></name><operator pos:line="44" pos:column="47">-&gt;<pos:position pos:line="44" pos:column="52"/></operator><name pos:line="44" pos:column="49">sendpersecond<pos:position pos:line="44" pos:column="62"/></name></name> <operator pos:line="44" pos:column="63">-<pos:position pos:line="44" pos:column="64"/></operator> <name pos:line="44" pos:column="65">timediff<pos:position pos:line="44" pos:column="73"/></name></expr></argument>)<pos:position pos:line="44" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="75"/></expr_stmt>
        <if pos:line="45" pos:column="9">if<condition pos:line="45" pos:column="11">(<expr><name pos:line="45" pos:column="12">sleep_time<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">&gt;<pos:position pos:line="45" pos:column="27"/></operator> <literal type="number" pos:line="45" pos:column="25">0<pos:position pos:line="45" pos:column="26"/></literal></expr>)<pos:position pos:line="45" pos:column="27"/></condition><then pos:line="45" pos:column="27"> <block pos:line="45" pos:column="28">{
          <expr_stmt><expr><call><name pos:line="46" pos:column="11">go_sleep<pos:position pos:line="46" pos:column="19"/></name> <argument_list pos:line="46" pos:column="20">(<argument><expr><name pos:line="46" pos:column="21">sleep_time<pos:position pos:line="46" pos:column="31"/></name></expr></argument>)<pos:position pos:line="46" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="33"/></expr_stmt>
          <expr_stmt><expr><name pos:line="47" pos:column="11">now<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">=<pos:position pos:line="47" pos:column="16"/></operator> <call><name pos:line="47" pos:column="17">curlx_tvnow<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">()<pos:position pos:line="47" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
      }<pos:position pos:line="49" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="50" pos:column="7">config<pos:position pos:line="50" pos:column="13"/></name><operator pos:line="50" pos:column="13">-&gt;<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="15">lastsendtime<pos:position pos:line="50" pos:column="27"/></name></name> <operator pos:line="50" pos:column="28">=<pos:position pos:line="50" pos:column="29"/></operator> <name pos:line="50" pos:column="30">now<pos:position pos:line="50" pos:column="33"/></name></expr>;<pos:position pos:line="50" pos:column="34"/></expr_stmt>

      <if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><name pos:line="52" pos:column="10">size<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">&gt;<pos:position pos:line="52" pos:column="19"/></operator> <name><name pos:line="52" pos:column="17">config<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">-&gt;<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="25">sendpersecond<pos:position pos:line="52" pos:column="38"/></name></name></expr>)<pos:position pos:line="52" pos:column="39"/></condition><then pos:line="52" pos:column="39"> <block pos:line="52" pos:column="40">{
        <comment type="block" pos:line="53" pos:column="9">/* lower the size to actually read */</comment>
        <expr_stmt><expr><name pos:line="54" pos:column="9">nmemb<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <operator pos:line="54" pos:column="17">(<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="18">size_t<pos:position pos:line="54" pos:column="24"/></name><operator pos:line="54" pos:column="24">)<pos:position pos:line="54" pos:column="25"/></operator><name><name pos:line="54" pos:column="25">config<pos:position pos:line="54" pos:column="31"/></name><operator pos:line="54" pos:column="31">-&gt;<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="33">sendpersecond<pos:position pos:line="54" pos:column="46"/></name></name></expr>;<pos:position pos:line="54" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="55" pos:column="9">sz<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <literal type="number" pos:line="55" pos:column="14">1<pos:position pos:line="55" pos:column="15"/></literal></expr>;<pos:position pos:line="55" pos:column="16"/></expr_stmt>
      }<pos:position pos:line="56" pos:column="8"/></block></then></if>
    }<pos:position pos:line="57" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name><name pos:line="59" pos:column="5">config<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">-&gt;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="13">lastsendsize<pos:position pos:line="59" pos:column="25"/></name></name> <operator pos:line="59" pos:column="26">=<pos:position pos:line="59" pos:column="27"/></operator> <name pos:line="59" pos:column="28">sz<pos:position pos:line="59" pos:column="30"/></name><operator pos:line="59" pos:column="30">*<pos:position pos:line="59" pos:column="31"/></operator><name pos:line="59" pos:column="31">nmemb<pos:position pos:line="59" pos:column="36"/></name></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="62" pos:column="3">rc<pos:position pos:line="62" pos:column="5"/></name> <operator pos:line="62" pos:column="6">=<pos:position pos:line="62" pos:column="7"/></operator> <call><name pos:line="62" pos:column="8">fread<pos:position pos:line="62" pos:column="13"/></name><argument_list pos:line="62" pos:column="13">(<argument><expr><name pos:line="62" pos:column="14">buffer<pos:position pos:line="62" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="22">sz<pos:position pos:line="62" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="26">nmemb<pos:position pos:line="62" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="33">in<pos:position pos:line="62" pos:column="35"/></name><operator pos:line="62" pos:column="35">-&gt;<pos:position pos:line="62" pos:column="40"/></operator><name pos:line="62" pos:column="37">stream<pos:position pos:line="62" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt>
<cpp:if pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">if<pos:position pos:line="63" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="63" pos:column="5">0<pos:position pos:line="63" pos:column="6"/></literal></expr></cpp:if>
  fprintf(stderr, "CALLBACK returning %d bytes data\n", (int)rc);
<cpp:endif pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">endif<pos:position pos:line="65" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="66" pos:column="3">return <expr><name pos:line="66" pos:column="10">rc<pos:position pos:line="66" pos:column="12"/></name></expr>;<pos:position pos:line="66" pos:column="13"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
