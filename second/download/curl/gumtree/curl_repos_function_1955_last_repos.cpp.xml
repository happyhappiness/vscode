<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1955_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">socket_write<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name><name pos:line="2" pos:column="14">struct<pos:position pos:line="2" pos:column="20"/></name> <name pos:line="2" pos:column="21">connectdata<pos:position pos:line="2" pos:column="32"/></name></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">conn<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">curl_socket_t<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">fd<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="58">const<pos:position pos:line="2" pos:column="63"/></specifier> <name pos:line="2" pos:column="64">void<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">to<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>,
             <parameter><decl><type><name pos:line="3" pos:column="14">size_t<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">len<pos:position pos:line="3" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="25"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">to_p<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name pos:line="5" pos:column="22">to<pos:position pos:line="5" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">ssize_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">written<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>

  <while pos:line="9" pos:column="3">while<condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">len<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">&gt;<pos:position pos:line="9" pos:column="17"/></operator> <literal type="number" pos:line="9" pos:column="15">0<pos:position pos:line="9" pos:column="16"/></literal></expr>)<pos:position pos:line="9" pos:column="17"/></condition> <block pos:line="9" pos:column="18">{
    <expr_stmt><expr><name pos:line="10" pos:column="5">result<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">Curl_write_plain<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">conn<pos:position pos:line="10" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="37">fd<pos:position pos:line="10" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="41">to_p<pos:position pos:line="10" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="47">len<pos:position pos:line="10" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="52">&amp;<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="53">written<pos:position pos:line="10" pos:column="60"/></name></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt>
    <if pos:line="11" pos:column="5">if<condition pos:line="11" pos:column="7">(<expr><operator pos:line="11" pos:column="8">!<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">result<pos:position pos:line="11" pos:column="15"/></name></expr>)<pos:position pos:line="11" pos:column="16"/></condition><then pos:line="11" pos:column="16"> <block pos:line="11" pos:column="17">{
      <expr_stmt><expr><name pos:line="12" pos:column="7">len<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">-=<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">written<pos:position pos:line="12" pos:column="21"/></name></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="13" pos:column="7">to_p<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">+=<pos:position pos:line="13" pos:column="14"/></operator> <name pos:line="13" pos:column="15">written<pos:position pos:line="13" pos:column="22"/></name></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then>
    <else pos:line="15" pos:column="5">else <block pos:line="15" pos:column="10">{
      <comment type="block" pos:line="16" pos:column="7">/* FIXME: We are doing a busy wait */</comment>
      <if pos:line="17" pos:column="7">if<condition pos:line="17" pos:column="9">(<expr><name pos:line="17" pos:column="10">result<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">==<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">CURLE_AGAIN<pos:position pos:line="17" pos:column="31"/></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32">
        <block type="pseudo"><continue pos:line="18" pos:column="9">continue;<pos:position pos:line="18" pos:column="18"/></continue></block></then></if>
      <return pos:line="19" pos:column="7">return <expr><name pos:line="19" pos:column="14">result<pos:position pos:line="19" pos:column="20"/></name></expr>;<pos:position pos:line="19" pos:column="21"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></else></if>
  }<pos:position pos:line="21" pos:column="4"/></block></while>
  <return pos:line="22" pos:column="3">return <expr><name pos:line="22" pos:column="10">CURLE_OK<pos:position pos:line="22" pos:column="18"/></name></expr>;<pos:position pos:line="22" pos:column="19"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
