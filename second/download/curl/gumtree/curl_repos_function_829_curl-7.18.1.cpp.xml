<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_829_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_resolv<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name><name pos:line="1" pos:column="17">struct<pos:position pos:line="1" pos:column="23"/></name> <name pos:line="1" pos:column="24">connectdata<pos:position pos:line="1" pos:column="35"/></name></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">conn<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">hostname<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="3" pos:column="17">int<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">port<pos:position pos:line="3" pos:column="25"/></name></decl></parameter>,
                <parameter><decl><type><name><name pos:line="4" pos:column="17">struct<pos:position pos:line="4" pos:column="23"/></name> <name pos:line="4" pos:column="24">Curl_dns_entry<pos:position pos:line="4" pos:column="38"/></name></name> <modifier pos:line="4" pos:column="39">*<pos:position pos:line="4" pos:column="40"/></modifier><modifier pos:line="4" pos:column="40">*<pos:position pos:line="4" pos:column="41"/></modifier></type><name pos:line="4" pos:column="41">entry<pos:position pos:line="4" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="47"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">entry_id<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><name pos:line="6" pos:column="20">NULL<pos:position pos:line="6" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_dns_entry<pos:position pos:line="7" pos:column="24"/></name></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type><name pos:line="7" pos:column="26">dns<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><name pos:line="7" pos:column="32">NULL<pos:position pos:line="7" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">entry_len<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">SessionHandle<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">data<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><name><name pos:line="9" pos:column="32">conn<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">-&gt;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="38">data<pos:position pos:line="9" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">CURLcode<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">result<pos:position pos:line="10" pos:column="18"/></name></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">rc<pos:position pos:line="11" pos:column="9"/></name> <init pos:line="11" pos:column="10">= <expr><name pos:line="11" pos:column="12">CURLRESOLV_ERROR<pos:position pos:line="11" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt> <comment type="block" pos:line="11" pos:column="30">/* default to failure */</comment>
  <expr_stmt><expr><operator pos:line="12" pos:column="3">*<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">entry<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>

<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">HAVE_SIGSETJMP<pos:position pos:line="14" pos:column="22"/></name></cpp:ifdef>
  <comment type="block" pos:line="15" pos:column="3">/* this allows us to time-out from the name resolver, as the timeout
     will generate a signal and we will siglongjmp() from that here */</comment>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><name><name pos:line="17" pos:column="7">data<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">set<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">.<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">no_signal<pos:position pos:line="17" pos:column="26"/></name></name></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27"> <block pos:line="17" pos:column="28">{
    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">(<expr><call><name pos:line="18" pos:column="8">sigsetjmp<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">curl_jmpenv<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="31">1<pos:position pos:line="18" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34"> <block pos:line="18" pos:column="35">{
      <comment type="block" pos:line="19" pos:column="7">/* this is coming from a siglongjmp() */</comment>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">failf<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">data<pos:position pos:line="20" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="19">"name lookup timed out"<pos:position pos:line="20" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><name pos:line="21" pos:column="14">rc<pos:position pos:line="21" pos:column="16"/></name></expr>;<pos:position pos:line="21" pos:column="17"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="26" pos:column="3">/* Create an entry id, based upon the hostname and port */</comment>
  <expr_stmt><expr><name pos:line="27" pos:column="3">entry_id<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <call><name pos:line="27" pos:column="14">create_hostcache_id<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">hostname<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">port<pos:position pos:line="27" pos:column="48"/></name></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="50"/></expr_stmt>
  <comment type="block" pos:line="28" pos:column="3">/* If we can't create the entry id, fail */</comment>
  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><operator pos:line="29" pos:column="6">!<pos:position pos:line="29" pos:column="7"/></operator><name pos:line="29" pos:column="7">entry_id<pos:position pos:line="29" pos:column="15"/></name></expr>)<pos:position pos:line="29" pos:column="16"/></condition><then pos:line="29" pos:column="16">
    <block type="pseudo"><return pos:line="30" pos:column="5">return <expr><name pos:line="30" pos:column="12">rc<pos:position pos:line="30" pos:column="14"/></name></expr>;<pos:position pos:line="30" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="32" pos:column="3">entry_len<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <call><name pos:line="32" pos:column="15">strlen<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">entry_id<pos:position pos:line="32" pos:column="30"/></name></expr></argument>)<pos:position pos:line="32" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt>

  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name><name pos:line="34" pos:column="6">data<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">share<pos:position pos:line="34" pos:column="17"/></name></name></expr>)<pos:position pos:line="34" pos:column="18"/></condition><then pos:line="34" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="5">Curl_share_lock<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">data<pos:position pos:line="35" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="27">CURL_LOCK_DATA_DNS<pos:position pos:line="35" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="47">CURL_LOCK_ACCESS_SINGLE<pos:position pos:line="35" pos:column="70"/></name></expr></argument>)<pos:position pos:line="35" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="72"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="37" pos:column="3">/* See if its already in our dns cache */</comment>
  <expr_stmt><expr><name pos:line="38" pos:column="3">dns<pos:position pos:line="38" pos:column="6"/></name> <operator pos:line="38" pos:column="7">=<pos:position pos:line="38" pos:column="8"/></operator> <call><name pos:line="38" pos:column="9">Curl_hash_pick<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name><name pos:line="38" pos:column="24">data<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">-&gt;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="30">dns<pos:position pos:line="38" pos:column="33"/></name><operator pos:line="38" pos:column="33">.<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="34">hostcache<pos:position pos:line="38" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="45">entry_id<pos:position pos:line="38" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="55">entry_len<pos:position pos:line="38" pos:column="64"/></name><operator pos:line="38" pos:column="64">+<pos:position pos:line="38" pos:column="65"/></operator><literal type="number" pos:line="38" pos:column="65">1<pos:position pos:line="38" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="68"/></expr_stmt>

  <comment type="block" pos:line="40" pos:column="3">/* See whether the returned entry is stale. Done before we release lock */</comment>
  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">( <expr><call><name pos:line="41" pos:column="7">remove_entry_if_stale<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">data<pos:position pos:line="41" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="35">dns<pos:position pos:line="41" pos:column="38"/></name></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr> )<pos:position pos:line="41" pos:column="41"/></condition><then pos:line="41" pos:column="41">
    <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="5">dns<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <name pos:line="42" pos:column="11">NULL<pos:position pos:line="42" pos:column="15"/></name></expr>;<pos:position pos:line="42" pos:column="16"/></expr_stmt></block></then></if> <comment type="block" pos:line="42" pos:column="17">/* the memory deallocation is being handled by the hash */</comment>

  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><name pos:line="44" pos:column="6">dns<pos:position pos:line="44" pos:column="9"/></name></expr>)<pos:position pos:line="44" pos:column="10"/></condition><then pos:line="44" pos:column="10"> <block pos:line="44" pos:column="11">{
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">dns<pos:position pos:line="45" pos:column="8"/></name><operator pos:line="45" pos:column="8">-&gt;<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="10">inuse<pos:position pos:line="45" pos:column="15"/></name></name><operator pos:line="45" pos:column="15">++<pos:position pos:line="45" pos:column="17"/></operator></expr>;<pos:position pos:line="45" pos:column="18"/></expr_stmt> <comment type="block" pos:line="45" pos:column="19">/* we use it! */</comment>
    <expr_stmt><expr><name pos:line="46" pos:column="5">rc<pos:position pos:line="46" pos:column="7"/></name> <operator pos:line="46" pos:column="8">=<pos:position pos:line="46" pos:column="9"/></operator> <name pos:line="46" pos:column="10">CURLRESOLV_RESOLVED<pos:position pos:line="46" pos:column="29"/></name></expr>;<pos:position pos:line="46" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><name><name pos:line="49" pos:column="6">data<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">-&gt;<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="12">share<pos:position pos:line="49" pos:column="17"/></name></name></expr>)<pos:position pos:line="49" pos:column="18"/></condition><then pos:line="49" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="5">Curl_share_unlock<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><name pos:line="50" pos:column="23">data<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="29">CURL_LOCK_DATA_DNS<pos:position pos:line="50" pos:column="47"/></name></expr></argument>)<pos:position pos:line="50" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="49"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="52" pos:column="3">/* free the allocated entry_id again */</comment>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">free<pos:position pos:line="53" pos:column="7"/></name><argument_list pos:line="53" pos:column="7">(<argument><expr><name pos:line="53" pos:column="8">entry_id<pos:position pos:line="53" pos:column="16"/></name></expr></argument>)<pos:position pos:line="53" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="18"/></expr_stmt>

  <if pos:line="55" pos:column="3">if<condition pos:line="55" pos:column="5">(<expr><operator pos:line="55" pos:column="6">!<pos:position pos:line="55" pos:column="7"/></operator><name pos:line="55" pos:column="7">dns<pos:position pos:line="55" pos:column="10"/></name></expr>)<pos:position pos:line="55" pos:column="11"/></condition><then pos:line="55" pos:column="11"> <block pos:line="55" pos:column="12">{
    <comment type="block" pos:line="56" pos:column="5">/* The entry was not in the cache. Resolve it to IP address */</comment>

    <decl_stmt><decl><type><name pos:line="58" pos:column="5">Curl_addrinfo<pos:position pos:line="58" pos:column="18"/></name> <modifier pos:line="58" pos:column="19">*<pos:position pos:line="58" pos:column="20"/></modifier></type><name pos:line="58" pos:column="20">addr<pos:position pos:line="58" pos:column="24"/></name></decl>;<pos:position pos:line="58" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="59" pos:column="5">int<pos:position pos:line="59" pos:column="8"/></name></type> <name pos:line="59" pos:column="9">respwait<pos:position pos:line="59" pos:column="17"/></name></decl>;<pos:position pos:line="59" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="61" pos:column="5">/* Check what IP specifics the app has requested and if we can provide it.
     * If not, bail out. */</comment>
    <if pos:line="63" pos:column="5">if<condition pos:line="63" pos:column="7">(<expr><operator pos:line="63" pos:column="8">!<pos:position pos:line="63" pos:column="9"/></operator><call><name pos:line="63" pos:column="9">Curl_ipvalid<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">data<pos:position pos:line="63" pos:column="26"/></name></expr></argument>)<pos:position pos:line="63" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="28"/></condition><then pos:line="63" pos:column="28">
      <block type="pseudo"><return pos:line="64" pos:column="7">return <expr><name pos:line="64" pos:column="14">CURLRESOLV_ERROR<pos:position pos:line="64" pos:column="30"/></name></expr>;<pos:position pos:line="64" pos:column="31"/></return></block></then></if>

    <comment type="block" pos:line="66" pos:column="5">/* If Curl_getaddrinfo() returns NULL, 'respwait' might be set to a
       non-zero value indicating that we need to wait for the response to the
       resolve call */</comment>
    <expr_stmt><expr><name pos:line="69" pos:column="5">addr<pos:position pos:line="69" pos:column="9"/></name> <operator pos:line="69" pos:column="10">=<pos:position pos:line="69" pos:column="11"/></operator> <call><name pos:line="69" pos:column="12">Curl_getaddrinfo<pos:position pos:line="69" pos:column="28"/></name><argument_list pos:line="69" pos:column="28">(<argument><expr><name pos:line="69" pos:column="29">conn<pos:position pos:line="69" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="35">hostname<pos:position pos:line="69" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="45">port<pos:position pos:line="69" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="51">&amp;<pos:position pos:line="69" pos:column="56"/></operator><name pos:line="69" pos:column="52">respwait<pos:position pos:line="69" pos:column="60"/></name></expr></argument>)<pos:position pos:line="69" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="62"/></expr_stmt>

    <if pos:line="71" pos:column="5">if<condition pos:line="71" pos:column="7">(<expr><operator pos:line="71" pos:column="8">!<pos:position pos:line="71" pos:column="9"/></operator><name pos:line="71" pos:column="9">addr<pos:position pos:line="71" pos:column="13"/></name></expr>)<pos:position pos:line="71" pos:column="14"/></condition><then pos:line="71" pos:column="14"> <block pos:line="71" pos:column="15">{
      <if pos:line="72" pos:column="7">if<condition pos:line="72" pos:column="9">(<expr><name pos:line="72" pos:column="10">respwait<pos:position pos:line="72" pos:column="18"/></name></expr>)<pos:position pos:line="72" pos:column="19"/></condition><then pos:line="72" pos:column="19"> <block pos:line="72" pos:column="20">{
        <comment type="block" pos:line="73" pos:column="9">/* the response to our resolve call will come asynchronously at
           a later time, good or bad */</comment>
        <comment type="block" pos:line="75" pos:column="9">/* First, check that we haven't received the info by now */</comment>
        <expr_stmt><expr><name pos:line="76" pos:column="9">result<pos:position pos:line="76" pos:column="15"/></name> <operator pos:line="76" pos:column="16">=<pos:position pos:line="76" pos:column="17"/></operator> <call><name pos:line="76" pos:column="18">Curl_is_resolved<pos:position pos:line="76" pos:column="34"/></name><argument_list pos:line="76" pos:column="34">(<argument><expr><name pos:line="76" pos:column="35">conn<pos:position pos:line="76" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="41">&amp;<pos:position pos:line="76" pos:column="46"/></operator><name pos:line="76" pos:column="42">dns<pos:position pos:line="76" pos:column="45"/></name></expr></argument>)<pos:position pos:line="76" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="47"/></expr_stmt>
        <if pos:line="77" pos:column="9">if<condition pos:line="77" pos:column="11">(<expr><name pos:line="77" pos:column="12">result<pos:position pos:line="77" pos:column="18"/></name></expr>)<pos:position pos:line="77" pos:column="19"/></condition><then pos:line="77" pos:column="19"> <comment type="block" pos:line="77" pos:column="20">/* error detected */</comment>
          <block type="pseudo"><return pos:line="78" pos:column="11">return <expr><name pos:line="78" pos:column="18">CURLRESOLV_ERROR<pos:position pos:line="78" pos:column="34"/></name></expr>;<pos:position pos:line="78" pos:column="35"/></return></block></then></if>
        <if pos:line="79" pos:column="9">if<condition pos:line="79" pos:column="11">(<expr><name pos:line="79" pos:column="12">dns<pos:position pos:line="79" pos:column="15"/></name></expr>)<pos:position pos:line="79" pos:column="16"/></condition><then pos:line="79" pos:column="16">
          <block type="pseudo"><expr_stmt><expr><name pos:line="80" pos:column="11">rc<pos:position pos:line="80" pos:column="13"/></name> <operator pos:line="80" pos:column="14">=<pos:position pos:line="80" pos:column="15"/></operator> <name pos:line="80" pos:column="16">CURLRESOLV_RESOLVED<pos:position pos:line="80" pos:column="35"/></name></expr>;<pos:position pos:line="80" pos:column="36"/></expr_stmt></block></then> <comment type="block" pos:line="80" pos:column="37">/* pointer provided */</comment>
        <else pos:line="81" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="11">rc<pos:position pos:line="82" pos:column="13"/></name> <operator pos:line="82" pos:column="14">=<pos:position pos:line="82" pos:column="15"/></operator> <name pos:line="82" pos:column="16">CURLRESOLV_PENDING<pos:position pos:line="82" pos:column="34"/></name></expr>;<pos:position pos:line="82" pos:column="35"/></expr_stmt></block></else></if> <comment type="block" pos:line="82" pos:column="36">/* no info yet */</comment>
      }<pos:position pos:line="83" pos:column="8"/></block></then></if>
    }<pos:position pos:line="84" pos:column="6"/></block></then>
    <else pos:line="85" pos:column="5">else <block pos:line="85" pos:column="10">{
      <if pos:line="86" pos:column="7">if<condition pos:line="86" pos:column="9">(<expr><name><name pos:line="86" pos:column="10">data<pos:position pos:line="86" pos:column="14"/></name><operator pos:line="86" pos:column="14">-&gt;<pos:position pos:line="86" pos:column="19"/></operator><name pos:line="86" pos:column="16">share<pos:position pos:line="86" pos:column="21"/></name></name></expr>)<pos:position pos:line="86" pos:column="22"/></condition><then pos:line="86" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="9">Curl_share_lock<pos:position pos:line="87" pos:column="24"/></name><argument_list pos:line="87" pos:column="24">(<argument><expr><name pos:line="87" pos:column="25">data<pos:position pos:line="87" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="31">CURL_LOCK_DATA_DNS<pos:position pos:line="87" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="51">CURL_LOCK_ACCESS_SINGLE<pos:position pos:line="87" pos:column="74"/></name></expr></argument>)<pos:position pos:line="87" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="76"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="89" pos:column="7">/* we got a response, store it in the cache */</comment>
      <expr_stmt><expr><name pos:line="90" pos:column="7">dns<pos:position pos:line="90" pos:column="10"/></name> <operator pos:line="90" pos:column="11">=<pos:position pos:line="90" pos:column="12"/></operator> <call><name pos:line="90" pos:column="13">Curl_cache_addr<pos:position pos:line="90" pos:column="28"/></name><argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">data<pos:position pos:line="90" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="35">addr<pos:position pos:line="90" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="41">hostname<pos:position pos:line="90" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="51">port<pos:position pos:line="90" pos:column="55"/></name></expr></argument>)<pos:position pos:line="90" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="57"/></expr_stmt>

      <if pos:line="92" pos:column="7">if<condition pos:line="92" pos:column="9">(<expr><name><name pos:line="92" pos:column="10">data<pos:position pos:line="92" pos:column="14"/></name><operator pos:line="92" pos:column="14">-&gt;<pos:position pos:line="92" pos:column="19"/></operator><name pos:line="92" pos:column="16">share<pos:position pos:line="92" pos:column="21"/></name></name></expr>)<pos:position pos:line="92" pos:column="22"/></condition><then pos:line="92" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="9">Curl_share_unlock<pos:position pos:line="93" pos:column="26"/></name><argument_list pos:line="93" pos:column="26">(<argument><expr><name pos:line="93" pos:column="27">data<pos:position pos:line="93" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="33">CURL_LOCK_DATA_DNS<pos:position pos:line="93" pos:column="51"/></name></expr></argument>)<pos:position pos:line="93" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="53"/></expr_stmt></block></then></if>

      <if pos:line="95" pos:column="7">if<condition pos:line="95" pos:column="9">(<expr><operator pos:line="95" pos:column="10">!<pos:position pos:line="95" pos:column="11"/></operator><name pos:line="95" pos:column="11">dns<pos:position pos:line="95" pos:column="14"/></name></expr>)<pos:position pos:line="95" pos:column="15"/></condition><then pos:line="95" pos:column="15">
        <comment type="block" pos:line="96" pos:column="9">/* returned failure, bail out nicely */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="9">Curl_freeaddrinfo<pos:position pos:line="97" pos:column="26"/></name><argument_list pos:line="97" pos:column="26">(<argument><expr><name pos:line="97" pos:column="27">addr<pos:position pos:line="97" pos:column="31"/></name></expr></argument>)<pos:position pos:line="97" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="33"/></expr_stmt></block></then>
      <else pos:line="98" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="99" pos:column="9">rc<pos:position pos:line="99" pos:column="11"/></name> <operator pos:line="99" pos:column="12">=<pos:position pos:line="99" pos:column="13"/></operator> <name pos:line="99" pos:column="14">CURLRESOLV_RESOLVED<pos:position pos:line="99" pos:column="33"/></name></expr>;<pos:position pos:line="99" pos:column="34"/></expr_stmt></block></else></if>
    }<pos:position pos:line="100" pos:column="6"/></block></else></if>
  }<pos:position pos:line="101" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="103" pos:column="3">*<pos:position pos:line="103" pos:column="4"/></operator><name pos:line="103" pos:column="4">entry<pos:position pos:line="103" pos:column="9"/></name> <operator pos:line="103" pos:column="10">=<pos:position pos:line="103" pos:column="11"/></operator> <name pos:line="103" pos:column="12">dns<pos:position pos:line="103" pos:column="15"/></name></expr>;<pos:position pos:line="103" pos:column="16"/></expr_stmt>

  <return pos:line="105" pos:column="3">return <expr><name pos:line="105" pos:column="10">rc<pos:position pos:line="105" pos:column="12"/></name></expr>;<pos:position pos:line="105" pos:column="13"/></return>
}<pos:position pos:line="106" pos:column="2"/></block></function></unit>
