<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_357.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">Curl_idn_strerror<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">connectdata<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">conn<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">int<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">err<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">HAVE_IDNA_STRERROR<pos:position pos:line="3" pos:column="26"/></name></cpp:ifdef>
  <expr_stmt><expr><operator pos:line="4" pos:column="3">(<pos:position pos:line="4" pos:column="4"/></operator><name pos:line="4" pos:column="4">void<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">)<pos:position pos:line="4" pos:column="9"/></operator><name pos:line="4" pos:column="9">conn<pos:position pos:line="4" pos:column="13"/></name></expr>;<pos:position pos:line="4" pos:column="14"/></expr_stmt>
  <return pos:line="5" pos:column="3">return <expr><call><name pos:line="5" pos:column="10">idna_strerror<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><operator pos:line="5" pos:column="24">(<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">Idna_rc<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">)<pos:position pos:line="5" pos:column="33"/></operator> <name pos:line="5" pos:column="34">err<pos:position pos:line="5" pos:column="37"/></name></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="39"/></return>
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">str<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">buf<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">max<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">curlassert<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><name pos:line="11" pos:column="14">conn<pos:position pos:line="11" pos:column="18"/></name></expr></argument>)<pos:position pos:line="11" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">buf<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <name><name pos:line="13" pos:column="9">conn<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">syserr_buf<pos:position pos:line="13" pos:column="25"/></name></name></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">max<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <sizeof pos:line="14" pos:column="9">sizeof<argument_list pos:line="14" pos:column="15">(<argument><expr><name><name pos:line="14" pos:column="16">conn<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-&gt;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="22">syserr_buf<pos:position pos:line="14" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></sizeof><operator pos:line="14" pos:column="33">-<pos:position pos:line="14" pos:column="34"/></operator><literal type="number" pos:line="14" pos:column="34">1<pos:position pos:line="14" pos:column="35"/></literal></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>

<cpp:ifndef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifndef<pos:position pos:line="16" pos:column="8"/></cpp:directive> <name pos:line="16" pos:column="9">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="16" pos:column="37"/></name></cpp:ifndef>
  <switch pos:line="17" pos:column="3">switch <condition pos:line="17" pos:column="10">(<expr><operator pos:line="17" pos:column="11">(<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">Idna_rc<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">)<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">err<pos:position pos:line="17" pos:column="23"/></name></expr>)<pos:position pos:line="17" pos:column="24"/></condition> <block pos:line="17" pos:column="25">{
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">IDNA_SUCCESS<pos:position pos:line="18" pos:column="22"/></name></expr>:<pos:position pos:line="18" pos:column="23"/></case>
      <expr_stmt><expr><name pos:line="19" pos:column="7">str<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <literal type="string" pos:line="19" pos:column="13">"No error"<pos:position pos:line="19" pos:column="23"/></literal></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
      <break pos:line="20" pos:column="7">break;<pos:position pos:line="20" pos:column="13"/></break>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">IDNA_STRINGPREP_ERROR<pos:position pos:line="21" pos:column="31"/></name></expr>:<pos:position pos:line="21" pos:column="32"/></case>
      <expr_stmt><expr><name pos:line="22" pos:column="7">str<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <literal type="string" pos:line="22" pos:column="13">"Error in string preparation"<pos:position pos:line="22" pos:column="42"/></literal></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
      <break pos:line="23" pos:column="7">break;<pos:position pos:line="23" pos:column="13"/></break>
    <case pos:line="24" pos:column="5">case <expr><name pos:line="24" pos:column="10">IDNA_PUNYCODE_ERROR<pos:position pos:line="24" pos:column="29"/></name></expr>:<pos:position pos:line="24" pos:column="30"/></case>
      <expr_stmt><expr><name pos:line="25" pos:column="7">str<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <literal type="string" pos:line="25" pos:column="13">"Error in Punycode operation"<pos:position pos:line="25" pos:column="42"/></literal></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
      <break pos:line="26" pos:column="7">break;<pos:position pos:line="26" pos:column="13"/></break>
    <case pos:line="27" pos:column="5">case <expr><name pos:line="27" pos:column="10">IDNA_CONTAINS_NON_LDH<pos:position pos:line="27" pos:column="31"/></name></expr>:<pos:position pos:line="27" pos:column="32"/></case>
      <expr_stmt><expr><name pos:line="28" pos:column="7">str<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <literal type="string" pos:line="28" pos:column="13">"Illegal ASCII characters"<pos:position pos:line="28" pos:column="39"/></literal></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
      <break pos:line="29" pos:column="7">break;<pos:position pos:line="29" pos:column="13"/></break>
    <case pos:line="30" pos:column="5">case <expr><name pos:line="30" pos:column="10">IDNA_CONTAINS_MINUS<pos:position pos:line="30" pos:column="29"/></name></expr>:<pos:position pos:line="30" pos:column="30"/></case>
      <expr_stmt><expr><name pos:line="31" pos:column="7">str<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <literal type="string" pos:line="31" pos:column="13">"Contains minus"<pos:position pos:line="31" pos:column="29"/></literal></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt>
      <break pos:line="32" pos:column="7">break;<pos:position pos:line="32" pos:column="13"/></break>
    <case pos:line="33" pos:column="5">case <expr><name pos:line="33" pos:column="10">IDNA_INVALID_LENGTH<pos:position pos:line="33" pos:column="29"/></name></expr>:<pos:position pos:line="33" pos:column="30"/></case>
      <expr_stmt><expr><name pos:line="34" pos:column="7">str<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">=<pos:position pos:line="34" pos:column="12"/></operator> <literal type="string" pos:line="34" pos:column="13">"Invalid output length"<pos:position pos:line="34" pos:column="36"/></literal></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
      <break pos:line="35" pos:column="7">break;<pos:position pos:line="35" pos:column="13"/></break>
    <case pos:line="36" pos:column="5">case <expr><name pos:line="36" pos:column="10">IDNA_NO_ACE_PREFIX<pos:position pos:line="36" pos:column="28"/></name></expr>:<pos:position pos:line="36" pos:column="29"/></case>
      <expr_stmt><expr><name pos:line="37" pos:column="7">str<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <literal type="string" pos:line="37" pos:column="13">"No ACE prefix (\"xn--\")"<pos:position pos:line="37" pos:column="39"/></literal></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
      <break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break>
    <case pos:line="39" pos:column="5">case <expr><name pos:line="39" pos:column="10">IDNA_ROUNDTRIP_VERIFY_ERROR<pos:position pos:line="39" pos:column="37"/></name></expr>:<pos:position pos:line="39" pos:column="38"/></case>
      <expr_stmt><expr><name pos:line="40" pos:column="7">str<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <literal type="string" pos:line="40" pos:column="13">"Roundtrip verify error"<pos:position pos:line="40" pos:column="37"/></literal></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt>
      <break pos:line="41" pos:column="7">break;<pos:position pos:line="41" pos:column="13"/></break>
    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">IDNA_CONTAINS_ACE_PREFIX<pos:position pos:line="42" pos:column="34"/></name></expr>:<pos:position pos:line="42" pos:column="35"/></case>
      <expr_stmt><expr><name pos:line="43" pos:column="7">str<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <literal type="string" pos:line="43" pos:column="13">"Already have ACE prefix (\"xn--\")"<pos:position pos:line="43" pos:column="49"/></literal></expr>;<pos:position pos:line="43" pos:column="50"/></expr_stmt>
      <break pos:line="44" pos:column="7">break;<pos:position pos:line="44" pos:column="13"/></break>
    <case pos:line="45" pos:column="5">case <expr><name pos:line="45" pos:column="10">IDNA_ICONV_ERROR<pos:position pos:line="45" pos:column="26"/></name></expr>:<pos:position pos:line="45" pos:column="27"/></case>
      <expr_stmt><expr><name pos:line="46" pos:column="7">str<pos:position pos:line="46" pos:column="10"/></name> <operator pos:line="46" pos:column="11">=<pos:position pos:line="46" pos:column="12"/></operator> <literal type="string" pos:line="46" pos:column="13">"Locale conversion failed"<pos:position pos:line="46" pos:column="39"/></literal></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>
    <case pos:line="48" pos:column="5">case <expr><name pos:line="48" pos:column="10">IDNA_MALLOC_ERROR<pos:position pos:line="48" pos:column="27"/></name></expr>:<pos:position pos:line="48" pos:column="28"/></case>
      <expr_stmt><expr><name pos:line="49" pos:column="7">str<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <literal type="string" pos:line="49" pos:column="13">"Allocation failed"<pos:position pos:line="49" pos:column="32"/></literal></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
      <break pos:line="50" pos:column="7">break;<pos:position pos:line="50" pos:column="13"/></break>
    <case pos:line="51" pos:column="5">case <expr><name pos:line="51" pos:column="10">IDNA_DLOPEN_ERROR<pos:position pos:line="51" pos:column="27"/></name></expr>:<pos:position pos:line="51" pos:column="28"/></case>
      <expr_stmt><expr><name pos:line="52" pos:column="7">str<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <literal type="string" pos:line="52" pos:column="13">"dlopen() error"<pos:position pos:line="52" pos:column="29"/></literal></expr>;<pos:position pos:line="52" pos:column="30"/></expr_stmt>
      <break pos:line="53" pos:column="7">break;<pos:position pos:line="53" pos:column="13"/></break>
    <default pos:line="54" pos:column="5">default:<pos:position pos:line="54" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">snprintf<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><name pos:line="55" pos:column="16">buf<pos:position pos:line="55" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="21">max<pos:position pos:line="55" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="26">"error %d"<pos:position pos:line="55" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="55" pos:column="38">(<pos:position pos:line="55" pos:column="39"/></operator><name pos:line="55" pos:column="39">int<pos:position pos:line="55" pos:column="42"/></name><operator pos:line="55" pos:column="42">)<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="43">err<pos:position pos:line="55" pos:column="46"/></name></expr></argument>)<pos:position pos:line="55" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name pos:line="56" pos:column="7">str<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <name pos:line="56" pos:column="13">NULL<pos:position pos:line="56" pos:column="17"/></name></expr>;<pos:position pos:line="56" pos:column="18"/></expr_stmt>
      <break pos:line="57" pos:column="7">break;<pos:position pos:line="57" pos:column="13"/></break>
  }<pos:position pos:line="58" pos:column="4"/></block></switch>
<cpp:else pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">else<pos:position pos:line="59" pos:column="6"/></cpp:directive></cpp:else>
  <if pos:line="60" pos:column="3">if <condition pos:line="60" pos:column="6">(<expr><operator pos:line="60" pos:column="7">(<pos:position pos:line="60" pos:column="8"/></operator><name pos:line="60" pos:column="8">Idna_rc<pos:position pos:line="60" pos:column="15"/></name><operator pos:line="60" pos:column="15">)<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="16">err<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">==<pos:position pos:line="60" pos:column="22"/></operator> <name pos:line="60" pos:column="23">IDNA_SUCCESS<pos:position pos:line="60" pos:column="35"/></name></expr>)<pos:position pos:line="60" pos:column="36"/></condition><then pos:line="60" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="5">str<pos:position pos:line="61" pos:column="8"/></name> <operator pos:line="61" pos:column="9">=<pos:position pos:line="61" pos:column="10"/></operator> <literal type="string" pos:line="61" pos:column="11">"No error"<pos:position pos:line="61" pos:column="21"/></literal></expr>;<pos:position pos:line="61" pos:column="22"/></expr_stmt></block></then>
  <else pos:line="62" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="5">str<pos:position pos:line="63" pos:column="8"/></name> <operator pos:line="63" pos:column="9">=<pos:position pos:line="63" pos:column="10"/></operator> <literal type="string" pos:line="63" pos:column="11">"error"<pos:position pos:line="63" pos:column="18"/></literal></expr>;<pos:position pos:line="63" pos:column="19"/></expr_stmt></block></else></if>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><name pos:line="65" pos:column="7">str<pos:position pos:line="65" pos:column="10"/></name></expr>)<pos:position pos:line="65" pos:column="11"/></condition><then pos:line="65" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="5">strncpy<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><name pos:line="66" pos:column="13">buf<pos:position pos:line="66" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="18">str<pos:position pos:line="66" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="23">max<pos:position pos:line="66" pos:column="26"/></name></expr></argument>)<pos:position pos:line="66" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="28"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="67" pos:column="3">buf<pos:position pos:line="67" pos:column="6"/></name><index pos:line="67" pos:column="6">[<expr><name pos:line="67" pos:column="7">max<pos:position pos:line="67" pos:column="10"/></name></expr>]<pos:position pos:line="67" pos:column="11"/></index></name> <operator pos:line="67" pos:column="12">=<pos:position pos:line="67" pos:column="13"/></operator> <literal type="char" pos:line="67" pos:column="14">'\0'<pos:position pos:line="67" pos:column="18"/></literal></expr>;<pos:position pos:line="67" pos:column="19"/></expr_stmt>
  <return pos:line="68" pos:column="3">return <expr><operator pos:line="68" pos:column="10">(<pos:position pos:line="68" pos:column="11"/></operator><name pos:line="68" pos:column="11">buf<pos:position pos:line="68" pos:column="14"/></name><operator pos:line="68" pos:column="14">)<pos:position pos:line="68" pos:column="15"/></operator></expr>;<pos:position pos:line="68" pos:column="16"/></return>
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
