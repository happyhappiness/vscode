<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_708_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">srvr_sockaddr_union_t<pos:position pos:line="3" pos:column="24"/></name></type> <name pos:line="3" pos:column="25">me<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">sock<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name pos:line="4" pos:column="24">CURL_SOCKET_BAD<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">wrotepidfile<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">flag<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">short<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">port<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name pos:line="7" pos:column="25">DEFAULT_PORT<pos:position pos:line="7" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">USE_UNIX_SOCKETS<pos:position pos:line="8" pos:column="24"/></name></cpp:ifdef>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">unix_socket<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><name pos:line="9" pos:column="29">NULL<pos:position pos:line="9" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">unlink_socket<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><literal type="boolean" pos:line="10" pos:column="24">false<pos:position pos:line="10" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><specifier pos:line="12" pos:column="3">const<pos:position pos:line="12" pos:column="8"/></specifier> <name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">pidname<pos:position pos:line="12" pos:column="22"/></name> <init pos:line="12" pos:column="23">= <expr><literal type="string" pos:line="12" pos:column="25">".http.pid"<pos:position pos:line="12" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">httprequest<pos:position pos:line="13" pos:column="21"/></name></name></type> <name pos:line="13" pos:column="22">req<pos:position pos:line="13" pos:column="25"/></name></decl>;<pos:position pos:line="13" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">rc<pos:position pos:line="14" pos:column="9"/></name> <init pos:line="14" pos:column="10">= <expr><literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">error<pos:position pos:line="15" pos:column="12"/></name></decl>;<pos:position pos:line="15" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">arg<pos:position pos:line="16" pos:column="10"/></name> <init pos:line="16" pos:column="11">= <expr><literal type="number" pos:line="16" pos:column="13">1<pos:position pos:line="16" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">long<pos:position pos:line="17" pos:column="7"/></name></type> <name pos:line="17" pos:column="8">pid<pos:position pos:line="17" pos:column="11"/></name></decl>;<pos:position pos:line="17" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="18" pos:column="3">const<pos:position pos:line="18" pos:column="8"/></specifier> <name pos:line="18" pos:column="9">char<pos:position pos:line="18" pos:column="13"/></name> <modifier pos:line="18" pos:column="14">*<pos:position pos:line="18" pos:column="15"/></modifier></type><name pos:line="18" pos:column="15">connecthost<pos:position pos:line="18" pos:column="26"/></name> <init pos:line="18" pos:column="27">= <expr><literal type="string" pos:line="18" pos:column="29">"127.0.0.1"<pos:position pos:line="18" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="19" pos:column="3">const<pos:position pos:line="19" pos:column="8"/></specifier> <name pos:line="19" pos:column="9">char<pos:position pos:line="19" pos:column="13"/></name> <modifier pos:line="19" pos:column="14">*<pos:position pos:line="19" pos:column="15"/></modifier></type><name pos:line="19" pos:column="15">socket_type<pos:position pos:line="19" pos:column="26"/></name> <init pos:line="19" pos:column="27">= <expr><literal type="string" pos:line="19" pos:column="29">"IPv4"<pos:position pos:line="19" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name></type> <name><name pos:line="20" pos:column="8">port_str<pos:position pos:line="20" pos:column="16"/></name><index pos:line="20" pos:column="16">[<expr><literal type="number" pos:line="20" pos:column="17">11<pos:position pos:line="20" pos:column="19"/></literal></expr>]<pos:position pos:line="20" pos:column="20"/></index></name></decl>;<pos:position pos:line="20" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="21" pos:column="3">const<pos:position pos:line="21" pos:column="8"/></specifier> <name pos:line="21" pos:column="9">char<pos:position pos:line="21" pos:column="13"/></name> <modifier pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></modifier></type><name pos:line="21" pos:column="15">location_str<pos:position pos:line="21" pos:column="27"/></name> <init pos:line="21" pos:column="28">= <expr><name pos:line="21" pos:column="30">port_str<pos:position pos:line="21" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="39"/></decl_stmt>

  <comment type="block" pos:line="23" pos:column="3">/* a default CONNECT port is basically pointless but still ... */</comment>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">size_t<pos:position pos:line="24" pos:column="9"/></name></type> <name pos:line="24" pos:column="10">socket_idx<pos:position pos:line="24" pos:column="20"/></name></decl>;<pos:position pos:line="24" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">memset<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><operator pos:line="26" pos:column="10">&amp;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="11">req<pos:position pos:line="26" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="16">0<pos:position pos:line="26" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="19">sizeof<argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">req<pos:position pos:line="26" pos:column="29"/></name></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>

  <while pos:line="28" pos:column="3">while<condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">argc<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">arg<pos:position pos:line="28" pos:column="17"/></name></expr>)<pos:position pos:line="28" pos:column="18"/></condition> <block pos:line="28" pos:column="19">{
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><operator pos:line="29" pos:column="8">!<pos:position pos:line="29" pos:column="9"/></operator><call><name pos:line="29" pos:column="9">strcmp<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="string" pos:line="29" pos:column="16">"--version"<pos:position pos:line="29" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="29">argv<pos:position pos:line="29" pos:column="33"/></name><index pos:line="29" pos:column="33">[<expr><name pos:line="29" pos:column="34">arg<pos:position pos:line="29" pos:column="37"/></name></expr>]<pos:position pos:line="29" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="40"/></condition><then pos:line="29" pos:column="40"> <block pos:line="29" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">puts<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><literal type="string" pos:line="30" pos:column="12">"sws IPv4"<pos:position pos:line="30" pos:column="22"/></literal>
<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">ENABLE_IPV6<pos:position pos:line="31" pos:column="19"/></name></cpp:ifdef>
             <literal type="string" pos:line="32" pos:column="14">"/IPv6"<pos:position pos:line="32" pos:column="21"/></literal>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">USE_UNIX_SOCKETS<pos:position pos:line="34" pos:column="24"/></name></cpp:ifdef>
             <literal type="string" pos:line="35" pos:column="14">"/unix"<pos:position pos:line="35" pos:column="21"/></literal></expr></argument>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
          )<pos:position pos:line="37" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="13"/></expr_stmt>
      <return pos:line="38" pos:column="7">return <expr><literal type="number" pos:line="38" pos:column="14">0<pos:position pos:line="38" pos:column="15"/></literal></expr>;<pos:position pos:line="38" pos:column="16"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then>
    <elseif pos:line="40" pos:column="5">else <if pos:line="40" pos:column="10">if<condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">!<pos:position pos:line="40" pos:column="14"/></operator><call><name pos:line="40" pos:column="14">strcmp<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><literal type="string" pos:line="40" pos:column="21">"--pidfile"<pos:position pos:line="40" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="34">argv<pos:position pos:line="40" pos:column="38"/></name><index pos:line="40" pos:column="38">[<expr><name pos:line="40" pos:column="39">arg<pos:position pos:line="40" pos:column="42"/></name></expr>]<pos:position pos:line="40" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="45"/></condition><then pos:line="40" pos:column="45"> <block pos:line="40" pos:column="46">{
      <expr_stmt><expr><name pos:line="41" pos:column="7">arg<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">++<pos:position pos:line="41" pos:column="12"/></operator></expr>;<pos:position pos:line="41" pos:column="13"/></expr_stmt>
      <if pos:line="42" pos:column="7">if<condition pos:line="42" pos:column="9">(<expr><name pos:line="42" pos:column="10">argc<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">&gt;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="15">arg<pos:position pos:line="42" pos:column="18"/></name></expr>)<pos:position pos:line="42" pos:column="19"/></condition><then pos:line="42" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="9">pidname<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <name><name pos:line="43" pos:column="19">argv<pos:position pos:line="43" pos:column="23"/></name><index pos:line="43" pos:column="23">[<expr><name pos:line="43" pos:column="24">arg<pos:position pos:line="43" pos:column="27"/></name><operator pos:line="43" pos:column="27">++<pos:position pos:line="43" pos:column="29"/></operator></expr>]<pos:position pos:line="43" pos:column="30"/></index></name></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="45" pos:column="5">else <if pos:line="45" pos:column="10">if<condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><call><name pos:line="45" pos:column="14">strcmp<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><literal type="string" pos:line="45" pos:column="21">"--logfile"<pos:position pos:line="45" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="34">argv<pos:position pos:line="45" pos:column="38"/></name><index pos:line="45" pos:column="38">[<expr><name pos:line="45" pos:column="39">arg<pos:position pos:line="45" pos:column="42"/></name></expr>]<pos:position pos:line="45" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="45"/></condition><then pos:line="45" pos:column="45"> <block pos:line="45" pos:column="46">{
      <expr_stmt><expr><name pos:line="46" pos:column="7">arg<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">++<pos:position pos:line="46" pos:column="12"/></operator></expr>;<pos:position pos:line="46" pos:column="13"/></expr_stmt>
      <if pos:line="47" pos:column="7">if<condition pos:line="47" pos:column="9">(<expr><name pos:line="47" pos:column="10">argc<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">&gt;<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="15">arg<pos:position pos:line="47" pos:column="18"/></name></expr>)<pos:position pos:line="47" pos:column="19"/></condition><then pos:line="47" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="9">serverlogfile<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">=<pos:position pos:line="48" pos:column="24"/></operator> <name><name pos:line="48" pos:column="25">argv<pos:position pos:line="48" pos:column="29"/></name><index pos:line="48" pos:column="29">[<expr><name pos:line="48" pos:column="30">arg<pos:position pos:line="48" pos:column="33"/></name><operator pos:line="48" pos:column="33">++<pos:position pos:line="48" pos:column="35"/></operator></expr>]<pos:position pos:line="48" pos:column="36"/></index></name></expr>;<pos:position pos:line="48" pos:column="37"/></expr_stmt></block></then></if>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="50" pos:column="5">else <if pos:line="50" pos:column="10">if<condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><call><name pos:line="50" pos:column="14">strcmp<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><literal type="string" pos:line="50" pos:column="21">"--gopher"<pos:position pos:line="50" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="33">argv<pos:position pos:line="50" pos:column="37"/></name><index pos:line="50" pos:column="37">[<expr><name pos:line="50" pos:column="38">arg<pos:position pos:line="50" pos:column="41"/></name></expr>]<pos:position pos:line="50" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="50" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="44"/></condition><then pos:line="50" pos:column="44"> <block pos:line="50" pos:column="45">{
      <expr_stmt><expr><name pos:line="51" pos:column="7">arg<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">++<pos:position pos:line="51" pos:column="12"/></operator></expr>;<pos:position pos:line="51" pos:column="13"/></expr_stmt>
      <expr_stmt><expr><name pos:line="52" pos:column="7">use_gopher<pos:position pos:line="52" pos:column="17"/></name> <operator pos:line="52" pos:column="18">=<pos:position pos:line="52" pos:column="19"/></operator> <name pos:line="52" pos:column="20">TRUE<pos:position pos:line="52" pos:column="24"/></name></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name pos:line="53" pos:column="7">end_of_headers<pos:position pos:line="53" pos:column="21"/></name> <operator pos:line="53" pos:column="22">=<pos:position pos:line="53" pos:column="23"/></operator> <literal type="string" pos:line="53" pos:column="24">"\r\n"<pos:position pos:line="53" pos:column="30"/></literal></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt> <comment type="block" pos:line="53" pos:column="32">/* gopher style is much simpler */</comment>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="55" pos:column="5">else <if pos:line="55" pos:column="10">if<condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">!<pos:position pos:line="55" pos:column="14"/></operator><call><name pos:line="55" pos:column="14">strcmp<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><literal type="string" pos:line="55" pos:column="21">"--ipv4"<pos:position pos:line="55" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="31">argv<pos:position pos:line="55" pos:column="35"/></name><index pos:line="55" pos:column="35">[<expr><name pos:line="55" pos:column="36">arg<pos:position pos:line="55" pos:column="39"/></name></expr>]<pos:position pos:line="55" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="42"/></condition><then pos:line="55" pos:column="42"> <block pos:line="55" pos:column="43">{
      <expr_stmt><expr><name pos:line="56" pos:column="7">socket_type<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <literal type="string" pos:line="56" pos:column="21">"IPv4"<pos:position pos:line="56" pos:column="27"/></literal></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="57" pos:column="7">socket_domain<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <name pos:line="57" pos:column="23">AF_INET<pos:position pos:line="57" pos:column="30"/></name></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="58" pos:column="7">location_str<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">=<pos:position pos:line="58" pos:column="21"/></operator> <name pos:line="58" pos:column="22">port_str<pos:position pos:line="58" pos:column="30"/></name></expr>;<pos:position pos:line="58" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="59" pos:column="7">arg<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">++<pos:position pos:line="59" pos:column="12"/></operator></expr>;<pos:position pos:line="59" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="61" pos:column="5">else <if pos:line="61" pos:column="10">if<condition pos:line="61" pos:column="12">(<expr><operator pos:line="61" pos:column="13">!<pos:position pos:line="61" pos:column="14"/></operator><call><name pos:line="61" pos:column="14">strcmp<pos:position pos:line="61" pos:column="20"/></name><argument_list pos:line="61" pos:column="20">(<argument><expr><literal type="string" pos:line="61" pos:column="21">"--ipv6"<pos:position pos:line="61" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="31">argv<pos:position pos:line="61" pos:column="35"/></name><index pos:line="61" pos:column="35">[<expr><name pos:line="61" pos:column="36">arg<pos:position pos:line="61" pos:column="39"/></name></expr>]<pos:position pos:line="61" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="61" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="42"/></condition><then pos:line="61" pos:column="42"> <block pos:line="61" pos:column="43">{
<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">ENABLE_IPV6<pos:position pos:line="62" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="63" pos:column="7">socket_type<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">=<pos:position pos:line="63" pos:column="20"/></operator> <literal type="string" pos:line="63" pos:column="21">"IPv6"<pos:position pos:line="63" pos:column="27"/></literal></expr>;<pos:position pos:line="63" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="64" pos:column="7">socket_domain<pos:position pos:line="64" pos:column="20"/></name> <operator pos:line="64" pos:column="21">=<pos:position pos:line="64" pos:column="22"/></operator> <name pos:line="64" pos:column="23">AF_INET6<pos:position pos:line="64" pos:column="31"/></name></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="65" pos:column="7">location_str<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">=<pos:position pos:line="65" pos:column="21"/></operator> <name pos:line="65" pos:column="22">port_str<pos:position pos:line="65" pos:column="30"/></name></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="67" pos:column="7">arg<pos:position pos:line="67" pos:column="10"/></name><operator pos:line="67" pos:column="10">++<pos:position pos:line="67" pos:column="12"/></operator></expr>;<pos:position pos:line="67" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="69" pos:column="5">else <if pos:line="69" pos:column="10">if<condition pos:line="69" pos:column="12">(<expr><operator pos:line="69" pos:column="13">!<pos:position pos:line="69" pos:column="14"/></operator><call><name pos:line="69" pos:column="14">strcmp<pos:position pos:line="69" pos:column="20"/></name><argument_list pos:line="69" pos:column="20">(<argument><expr><literal type="string" pos:line="69" pos:column="21">"--unix-socket"<pos:position pos:line="69" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="38">argv<pos:position pos:line="69" pos:column="42"/></name><index pos:line="69" pos:column="42">[<expr><name pos:line="69" pos:column="43">arg<pos:position pos:line="69" pos:column="46"/></name></expr>]<pos:position pos:line="69" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="69" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="49"/></condition><then pos:line="69" pos:column="49"> <block pos:line="69" pos:column="50">{
      <expr_stmt><expr><name pos:line="70" pos:column="7">arg<pos:position pos:line="70" pos:column="10"/></name><operator pos:line="70" pos:column="10">++<pos:position pos:line="70" pos:column="12"/></operator></expr>;<pos:position pos:line="70" pos:column="13"/></expr_stmt>
      <if pos:line="71" pos:column="7">if<condition pos:line="71" pos:column="9">(<expr><name pos:line="71" pos:column="10">argc<pos:position pos:line="71" pos:column="14"/></name><operator pos:line="71" pos:column="14">&gt;<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="15">arg<pos:position pos:line="71" pos:column="18"/></name></expr>)<pos:position pos:line="71" pos:column="19"/></condition><then pos:line="71" pos:column="19"> <block pos:line="71" pos:column="20">{
<cpp:ifdef pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">ifdef<pos:position pos:line="72" pos:column="7"/></cpp:directive> <name pos:line="72" pos:column="8">USE_UNIX_SOCKETS<pos:position pos:line="72" pos:column="24"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="73" pos:column="9">unix_socket<pos:position pos:line="73" pos:column="20"/></name> <operator pos:line="73" pos:column="21">=<pos:position pos:line="73" pos:column="22"/></operator> <name><name pos:line="73" pos:column="23">argv<pos:position pos:line="73" pos:column="27"/></name><index pos:line="73" pos:column="27">[<expr><name pos:line="73" pos:column="28">arg<pos:position pos:line="73" pos:column="31"/></name></expr>]<pos:position pos:line="73" pos:column="32"/></index></name></expr>;<pos:position pos:line="73" pos:column="33"/></expr_stmt>
        <if pos:line="74" pos:column="9">if<condition pos:line="74" pos:column="11">(<expr><call><name pos:line="74" pos:column="12">strlen<pos:position pos:line="74" pos:column="18"/></name><argument_list pos:line="74" pos:column="18">(<argument><expr><name pos:line="74" pos:column="19">unix_socket<pos:position pos:line="74" pos:column="30"/></name></expr></argument>)<pos:position pos:line="74" pos:column="31"/></argument_list></call> <operator pos:line="74" pos:column="32">&gt;=<pos:position pos:line="74" pos:column="37"/></operator> <sizeof pos:line="74" pos:column="35">sizeof<argument_list pos:line="74" pos:column="41">(<argument><expr><name><name pos:line="74" pos:column="42">me<pos:position pos:line="74" pos:column="44"/></name><operator pos:line="74" pos:column="44">.<pos:position pos:line="74" pos:column="45"/></operator><name pos:line="74" pos:column="45">sau<pos:position pos:line="74" pos:column="48"/></name><operator pos:line="74" pos:column="48">.<pos:position pos:line="74" pos:column="49"/></operator><name pos:line="74" pos:column="49">sun_path<pos:position pos:line="74" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="58"/></argument_list></sizeof></expr>)<pos:position pos:line="74" pos:column="59"/></condition><then pos:line="74" pos:column="59"> <block pos:line="74" pos:column="60">{
          <expr_stmt><expr><call><name pos:line="75" pos:column="11">fprintf<pos:position pos:line="75" pos:column="18"/></name><argument_list pos:line="75" pos:column="18">(<argument><expr><name pos:line="75" pos:column="19">stderr<pos:position pos:line="75" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="27">"sws: socket path must be shorter than %zu chars\n"<pos:position pos:line="75" pos:column="78"/></literal></expr></argument>,
                  <argument><expr><sizeof pos:line="76" pos:column="19">sizeof<argument_list pos:line="76" pos:column="25">(<argument><expr><name><name pos:line="76" pos:column="26">me<pos:position pos:line="76" pos:column="28"/></name><operator pos:line="76" pos:column="28">.<pos:position pos:line="76" pos:column="29"/></operator><name pos:line="76" pos:column="29">sau<pos:position pos:line="76" pos:column="32"/></name><operator pos:line="76" pos:column="32">.<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="33">sun_path<pos:position pos:line="76" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="76" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="44"/></expr_stmt>
          <return pos:line="77" pos:column="11">return <expr><literal type="number" pos:line="77" pos:column="18">0<pos:position pos:line="77" pos:column="19"/></literal></expr>;<pos:position pos:line="77" pos:column="20"/></return>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="79" pos:column="9">socket_type<pos:position pos:line="79" pos:column="20"/></name> <operator pos:line="79" pos:column="21">=<pos:position pos:line="79" pos:column="22"/></operator> <literal type="string" pos:line="79" pos:column="23">"unix"<pos:position pos:line="79" pos:column="29"/></literal></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="80" pos:column="9">socket_domain<pos:position pos:line="80" pos:column="22"/></name> <operator pos:line="80" pos:column="23">=<pos:position pos:line="80" pos:column="24"/></operator> <name pos:line="80" pos:column="25">AF_UNIX<pos:position pos:line="80" pos:column="32"/></name></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="81" pos:column="9">location_str<pos:position pos:line="81" pos:column="21"/></name> <operator pos:line="81" pos:column="22">=<pos:position pos:line="81" pos:column="23"/></operator> <name pos:line="81" pos:column="24">unix_socket<pos:position pos:line="81" pos:column="35"/></name></expr>;<pos:position pos:line="81" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><name pos:line="83" pos:column="9">arg<pos:position pos:line="83" pos:column="12"/></name><operator pos:line="83" pos:column="12">++<pos:position pos:line="83" pos:column="14"/></operator></expr>;<pos:position pos:line="83" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="84" pos:column="8"/></block></then></if>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="86" pos:column="5">else <if pos:line="86" pos:column="10">if<condition pos:line="86" pos:column="12">(<expr><operator pos:line="86" pos:column="13">!<pos:position pos:line="86" pos:column="14"/></operator><call><name pos:line="86" pos:column="14">strcmp<pos:position pos:line="86" pos:column="20"/></name><argument_list pos:line="86" pos:column="20">(<argument><expr><literal type="string" pos:line="86" pos:column="21">"--port"<pos:position pos:line="86" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="31">argv<pos:position pos:line="86" pos:column="35"/></name><index pos:line="86" pos:column="35">[<expr><name pos:line="86" pos:column="36">arg<pos:position pos:line="86" pos:column="39"/></name></expr>]<pos:position pos:line="86" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="86" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="42"/></condition><then pos:line="86" pos:column="42"> <block pos:line="86" pos:column="43">{
      <expr_stmt><expr><name pos:line="87" pos:column="7">arg<pos:position pos:line="87" pos:column="10"/></name><operator pos:line="87" pos:column="10">++<pos:position pos:line="87" pos:column="12"/></operator></expr>;<pos:position pos:line="87" pos:column="13"/></expr_stmt>
      <if pos:line="88" pos:column="7">if<condition pos:line="88" pos:column="9">(<expr><name pos:line="88" pos:column="10">argc<pos:position pos:line="88" pos:column="14"/></name><operator pos:line="88" pos:column="14">&gt;<pos:position pos:line="88" pos:column="18"/></operator><name pos:line="88" pos:column="15">arg<pos:position pos:line="88" pos:column="18"/></name></expr>)<pos:position pos:line="88" pos:column="19"/></condition><then pos:line="88" pos:column="19"> <block pos:line="88" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="89" pos:column="9">char<pos:position pos:line="89" pos:column="13"/></name> <modifier pos:line="89" pos:column="14">*<pos:position pos:line="89" pos:column="15"/></modifier></type><name pos:line="89" pos:column="15">endptr<pos:position pos:line="89" pos:column="21"/></name></decl>;<pos:position pos:line="89" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="90" pos:column="9">unsigned<pos:position pos:line="90" pos:column="17"/></name> <name pos:line="90" pos:column="18">long<pos:position pos:line="90" pos:column="22"/></name></type> <name pos:line="90" pos:column="23">ulnum<pos:position pos:line="90" pos:column="28"/></name> <init pos:line="90" pos:column="29">= <expr><call><name pos:line="90" pos:column="31">strtoul<pos:position pos:line="90" pos:column="38"/></name><argument_list pos:line="90" pos:column="38">(<argument><expr><name><name pos:line="90" pos:column="39">argv<pos:position pos:line="90" pos:column="43"/></name><index pos:line="90" pos:column="43">[<expr><name pos:line="90" pos:column="44">arg<pos:position pos:line="90" pos:column="47"/></name></expr>]<pos:position pos:line="90" pos:column="48"/></index></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="50">&amp;<pos:position pos:line="90" pos:column="55"/></operator><name pos:line="90" pos:column="51">endptr<pos:position pos:line="90" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="59">10<pos:position pos:line="90" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="90" pos:column="63"/></decl_stmt>
        <if pos:line="91" pos:column="9">if<condition pos:line="91" pos:column="11">(<expr><operator pos:line="91" pos:column="12">(<pos:position pos:line="91" pos:column="13"/></operator><name pos:line="91" pos:column="13">endptr<pos:position pos:line="91" pos:column="19"/></name> <operator pos:line="91" pos:column="20">!=<pos:position pos:line="91" pos:column="22"/></operator> <name><name pos:line="91" pos:column="23">argv<pos:position pos:line="91" pos:column="27"/></name><index pos:line="91" pos:column="27">[<expr><name pos:line="91" pos:column="28">arg<pos:position pos:line="91" pos:column="31"/></name></expr>]<pos:position pos:line="91" pos:column="32"/></index></name> <operator pos:line="91" pos:column="33">+<pos:position pos:line="91" pos:column="34"/></operator> <call><name pos:line="91" pos:column="35">strlen<pos:position pos:line="91" pos:column="41"/></name><argument_list pos:line="91" pos:column="41">(<argument><expr><name><name pos:line="91" pos:column="42">argv<pos:position pos:line="91" pos:column="46"/></name><index pos:line="91" pos:column="46">[<expr><name pos:line="91" pos:column="47">arg<pos:position pos:line="91" pos:column="50"/></name></expr>]<pos:position pos:line="91" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="91" pos:column="52"/></argument_list></call><operator pos:line="91" pos:column="52">)<pos:position pos:line="91" pos:column="53"/></operator> <operator pos:line="91" pos:column="54">||<pos:position pos:line="91" pos:column="56"/></operator>
           <operator pos:line="92" pos:column="12">(<pos:position pos:line="92" pos:column="13"/></operator><name pos:line="92" pos:column="13">ulnum<pos:position pos:line="92" pos:column="18"/></name> <operator pos:line="92" pos:column="19">&lt;<pos:position pos:line="92" pos:column="23"/></operator> <literal type="number" pos:line="92" pos:column="21">1025UL<pos:position pos:line="92" pos:column="27"/></literal><operator pos:line="92" pos:column="27">)<pos:position pos:line="92" pos:column="28"/></operator> <operator pos:line="92" pos:column="29">||<pos:position pos:line="92" pos:column="31"/></operator> <operator pos:line="92" pos:column="32">(<pos:position pos:line="92" pos:column="33"/></operator><name pos:line="92" pos:column="33">ulnum<pos:position pos:line="92" pos:column="38"/></name> <operator pos:line="92" pos:column="39">&gt;<pos:position pos:line="92" pos:column="43"/></operator> <literal type="number" pos:line="92" pos:column="41">65535UL<pos:position pos:line="92" pos:column="48"/></literal><operator pos:line="92" pos:column="48">)<pos:position pos:line="92" pos:column="49"/></operator></expr>)<pos:position pos:line="92" pos:column="50"/></condition><then pos:line="92" pos:column="50"> <block pos:line="92" pos:column="51">{
          <expr_stmt><expr><call><name pos:line="93" pos:column="11">fprintf<pos:position pos:line="93" pos:column="18"/></name><argument_list pos:line="93" pos:column="18">(<argument><expr><name pos:line="93" pos:column="19">stderr<pos:position pos:line="93" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="27">"sws: invalid --port argument (%s)\n"<pos:position pos:line="93" pos:column="64"/></literal></expr></argument>,
                  <argument><expr><name><name pos:line="94" pos:column="19">argv<pos:position pos:line="94" pos:column="23"/></name><index pos:line="94" pos:column="23">[<expr><name pos:line="94" pos:column="24">arg<pos:position pos:line="94" pos:column="27"/></name></expr>]<pos:position pos:line="94" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="94" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="30"/></expr_stmt>
          <return pos:line="95" pos:column="11">return <expr><literal type="number" pos:line="95" pos:column="18">0<pos:position pos:line="95" pos:column="19"/></literal></expr>;<pos:position pos:line="95" pos:column="20"/></return>
        }<pos:position pos:line="96" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="97" pos:column="9">port<pos:position pos:line="97" pos:column="13"/></name> <operator pos:line="97" pos:column="14">=<pos:position pos:line="97" pos:column="15"/></operator> <call><name pos:line="97" pos:column="16">curlx_ultous<pos:position pos:line="97" pos:column="28"/></name><argument_list pos:line="97" pos:column="28">(<argument><expr><name pos:line="97" pos:column="29">ulnum<pos:position pos:line="97" pos:column="34"/></name></expr></argument>)<pos:position pos:line="97" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="98" pos:column="9">arg<pos:position pos:line="98" pos:column="12"/></name><operator pos:line="98" pos:column="12">++<pos:position pos:line="98" pos:column="14"/></operator></expr>;<pos:position pos:line="98" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="99" pos:column="8"/></block></then></if>
    }<pos:position pos:line="100" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="101" pos:column="5">else <if pos:line="101" pos:column="10">if<condition pos:line="101" pos:column="12">(<expr><operator pos:line="101" pos:column="13">!<pos:position pos:line="101" pos:column="14"/></operator><call><name pos:line="101" pos:column="14">strcmp<pos:position pos:line="101" pos:column="20"/></name><argument_list pos:line="101" pos:column="20">(<argument><expr><literal type="string" pos:line="101" pos:column="21">"--srcdir"<pos:position pos:line="101" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="33">argv<pos:position pos:line="101" pos:column="37"/></name><index pos:line="101" pos:column="37">[<expr><name pos:line="101" pos:column="38">arg<pos:position pos:line="101" pos:column="41"/></name></expr>]<pos:position pos:line="101" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="101" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="101" pos:column="44"/></condition><then pos:line="101" pos:column="44"> <block pos:line="101" pos:column="45">{
      <expr_stmt><expr><name pos:line="102" pos:column="7">arg<pos:position pos:line="102" pos:column="10"/></name><operator pos:line="102" pos:column="10">++<pos:position pos:line="102" pos:column="12"/></operator></expr>;<pos:position pos:line="102" pos:column="13"/></expr_stmt>
      <if pos:line="103" pos:column="7">if<condition pos:line="103" pos:column="9">(<expr><name pos:line="103" pos:column="10">argc<pos:position pos:line="103" pos:column="14"/></name><operator pos:line="103" pos:column="14">&gt;<pos:position pos:line="103" pos:column="18"/></operator><name pos:line="103" pos:column="15">arg<pos:position pos:line="103" pos:column="18"/></name></expr>)<pos:position pos:line="103" pos:column="19"/></condition><then pos:line="103" pos:column="19"> <block pos:line="103" pos:column="20">{
        <expr_stmt><expr><name pos:line="104" pos:column="9">path<pos:position pos:line="104" pos:column="13"/></name> <operator pos:line="104" pos:column="14">=<pos:position pos:line="104" pos:column="15"/></operator> <name><name pos:line="104" pos:column="16">argv<pos:position pos:line="104" pos:column="20"/></name><index pos:line="104" pos:column="20">[<expr><name pos:line="104" pos:column="21">arg<pos:position pos:line="104" pos:column="24"/></name></expr>]<pos:position pos:line="104" pos:column="25"/></index></name></expr>;<pos:position pos:line="104" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="105" pos:column="9">arg<pos:position pos:line="105" pos:column="12"/></name><operator pos:line="105" pos:column="12">++<pos:position pos:line="105" pos:column="14"/></operator></expr>;<pos:position pos:line="105" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="106" pos:column="8"/></block></then></if>
    }<pos:position pos:line="107" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="108" pos:column="5">else <if pos:line="108" pos:column="10">if<condition pos:line="108" pos:column="12">(<expr><operator pos:line="108" pos:column="13">!<pos:position pos:line="108" pos:column="14"/></operator><call><name pos:line="108" pos:column="14">strcmp<pos:position pos:line="108" pos:column="20"/></name><argument_list pos:line="108" pos:column="20">(<argument><expr><literal type="string" pos:line="108" pos:column="21">"--connect"<pos:position pos:line="108" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="34">argv<pos:position pos:line="108" pos:column="38"/></name><index pos:line="108" pos:column="38">[<expr><name pos:line="108" pos:column="39">arg<pos:position pos:line="108" pos:column="42"/></name></expr>]<pos:position pos:line="108" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="108" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="108" pos:column="45"/></condition><then pos:line="108" pos:column="45"> <block pos:line="108" pos:column="46">{
      <comment type="block" pos:line="109" pos:column="7">/* The connect host IP number that the proxy will connect to no matter
         what the client asks for, but also use this as a hint that we run as
         a proxy and do a few different internal choices */</comment>
      <expr_stmt><expr><name pos:line="112" pos:column="7">arg<pos:position pos:line="112" pos:column="10"/></name><operator pos:line="112" pos:column="10">++<pos:position pos:line="112" pos:column="12"/></operator></expr>;<pos:position pos:line="112" pos:column="13"/></expr_stmt>
      <if pos:line="113" pos:column="7">if<condition pos:line="113" pos:column="9">(<expr><name pos:line="113" pos:column="10">argc<pos:position pos:line="113" pos:column="14"/></name><operator pos:line="113" pos:column="14">&gt;<pos:position pos:line="113" pos:column="18"/></operator><name pos:line="113" pos:column="15">arg<pos:position pos:line="113" pos:column="18"/></name></expr>)<pos:position pos:line="113" pos:column="19"/></condition><then pos:line="113" pos:column="19"> <block pos:line="113" pos:column="20">{
        <expr_stmt><expr><name pos:line="114" pos:column="9">connecthost<pos:position pos:line="114" pos:column="20"/></name> <operator pos:line="114" pos:column="21">=<pos:position pos:line="114" pos:column="22"/></operator> <name><name pos:line="114" pos:column="23">argv<pos:position pos:line="114" pos:column="27"/></name><index pos:line="114" pos:column="27">[<expr><name pos:line="114" pos:column="28">arg<pos:position pos:line="114" pos:column="31"/></name></expr>]<pos:position pos:line="114" pos:column="32"/></index></name></expr>;<pos:position pos:line="114" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="115" pos:column="9">arg<pos:position pos:line="115" pos:column="12"/></name><operator pos:line="115" pos:column="12">++<pos:position pos:line="115" pos:column="14"/></operator></expr>;<pos:position pos:line="115" pos:column="15"/></expr_stmt>
        <expr_stmt><expr><name pos:line="116" pos:column="9">is_proxy<pos:position pos:line="116" pos:column="17"/></name> <operator pos:line="116" pos:column="18">=<pos:position pos:line="116" pos:column="19"/></operator> <name pos:line="116" pos:column="20">TRUE<pos:position pos:line="116" pos:column="24"/></name></expr>;<pos:position pos:line="116" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="117" pos:column="9">logmsg<pos:position pos:line="117" pos:column="15"/></name><argument_list pos:line="117" pos:column="15">(<argument><expr><literal type="string" pos:line="117" pos:column="16">"Run as proxy, CONNECT to host %s"<pos:position pos:line="117" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="52">connecthost<pos:position pos:line="117" pos:column="63"/></name></expr></argument>)<pos:position pos:line="117" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="65"/></expr_stmt>
      }<pos:position pos:line="118" pos:column="8"/></block></then></if>
    }<pos:position pos:line="119" pos:column="6"/></block></then></if></elseif>
    <else pos:line="120" pos:column="5">else <block pos:line="120" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="121" pos:column="7">puts<pos:position pos:line="121" pos:column="11"/></name><argument_list pos:line="121" pos:column="11">(<argument><expr><literal type="string" pos:line="121" pos:column="12">"Usage: sws [option]\n"<pos:position pos:line="121" pos:column="35"/></literal>
           <literal type="string" pos:line="122" pos:column="12">" --version\n"<pos:position pos:line="122" pos:column="26"/></literal>
           <literal type="string" pos:line="123" pos:column="12">" --logfile [file]\n"<pos:position pos:line="123" pos:column="33"/></literal>
           <literal type="string" pos:line="124" pos:column="12">" --pidfile [file]\n"<pos:position pos:line="124" pos:column="33"/></literal>
           <literal type="string" pos:line="125" pos:column="12">" --ipv4\n"<pos:position pos:line="125" pos:column="23"/></literal>
           <literal type="string" pos:line="126" pos:column="12">" --ipv6\n"<pos:position pos:line="126" pos:column="23"/></literal>
           <literal type="string" pos:line="127" pos:column="12">" --unix-socket [file]\n"<pos:position pos:line="127" pos:column="37"/></literal>
           <literal type="string" pos:line="128" pos:column="12">" --port [port]\n"<pos:position pos:line="128" pos:column="30"/></literal>
           <literal type="string" pos:line="129" pos:column="12">" --srcdir [path]\n"<pos:position pos:line="129" pos:column="32"/></literal>
           <literal type="string" pos:line="130" pos:column="12">" --connect [ip4-addr]\n"<pos:position pos:line="130" pos:column="37"/></literal>
           <literal type="string" pos:line="131" pos:column="12">" --gopher"<pos:position pos:line="131" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="25"/></expr_stmt>
      <return pos:line="132" pos:column="7">return <expr><literal type="number" pos:line="132" pos:column="14">0<pos:position pos:line="132" pos:column="15"/></literal></expr>;<pos:position pos:line="132" pos:column="16"/></return>
    }<pos:position pos:line="133" pos:column="6"/></block></else></if>
  }<pos:position pos:line="134" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="136" pos:column="3">snprintf<pos:position pos:line="136" pos:column="11"/></name><argument_list pos:line="136" pos:column="11">(<argument><expr><name pos:line="136" pos:column="12">port_str<pos:position pos:line="136" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="136" pos:column="22">sizeof<argument_list pos:line="136" pos:column="28">(<argument><expr><name pos:line="136" pos:column="29">port_str<pos:position pos:line="136" pos:column="37"/></name></expr></argument>)<pos:position pos:line="136" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="40">"port %hu"<pos:position pos:line="136" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="52">port<pos:position pos:line="136" pos:column="56"/></name></expr></argument>)<pos:position pos:line="136" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="58"/></expr_stmt>

<cpp:ifdef pos:line="138" pos:column="1">#<cpp:directive pos:line="138" pos:column="2">ifdef<pos:position pos:line="138" pos:column="7"/></cpp:directive> <name pos:line="138" pos:column="8">WIN32<pos:position pos:line="138" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="139" pos:column="3">win32_init<pos:position pos:line="139" pos:column="13"/></name><argument_list pos:line="139" pos:column="13">()<pos:position pos:line="139" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="140" pos:column="3">atexit<pos:position pos:line="140" pos:column="9"/></name><argument_list pos:line="140" pos:column="9">(<argument><expr><name pos:line="140" pos:column="10">win32_cleanup<pos:position pos:line="140" pos:column="23"/></name></expr></argument>)<pos:position pos:line="140" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="141" pos:column="1">#<cpp:directive pos:line="141" pos:column="2">endif<pos:position pos:line="141" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="143" pos:column="3">install_signal_handlers<pos:position pos:line="143" pos:column="26"/></name><argument_list pos:line="143" pos:column="26">()<pos:position pos:line="143" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name pos:line="145" pos:column="3">pid<pos:position pos:line="145" pos:column="6"/></name> <operator pos:line="145" pos:column="7">=<pos:position pos:line="145" pos:column="8"/></operator> <operator pos:line="145" pos:column="9">(<pos:position pos:line="145" pos:column="10"/></operator><name pos:line="145" pos:column="10">long<pos:position pos:line="145" pos:column="14"/></name><operator pos:line="145" pos:column="14">)<pos:position pos:line="145" pos:column="15"/></operator><call><name pos:line="145" pos:column="15">getpid<pos:position pos:line="145" pos:column="21"/></name><argument_list pos:line="145" pos:column="21">()<pos:position pos:line="145" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><name pos:line="147" pos:column="3">sock<pos:position pos:line="147" pos:column="7"/></name> <operator pos:line="147" pos:column="8">=<pos:position pos:line="147" pos:column="9"/></operator> <call><name pos:line="147" pos:column="10">socket<pos:position pos:line="147" pos:column="16"/></name><argument_list pos:line="147" pos:column="16">(<argument><expr><name pos:line="147" pos:column="17">socket_domain<pos:position pos:line="147" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="32">SOCK_STREAM<pos:position pos:line="147" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="147" pos:column="45">0<pos:position pos:line="147" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="48"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="149" pos:column="3">all_sockets<pos:position pos:line="149" pos:column="14"/></name><index pos:line="149" pos:column="14">[<expr><literal type="number" pos:line="149" pos:column="15">0<pos:position pos:line="149" pos:column="16"/></literal></expr>]<pos:position pos:line="149" pos:column="17"/></index></name> <operator pos:line="149" pos:column="18">=<pos:position pos:line="149" pos:column="19"/></operator> <name pos:line="149" pos:column="20">sock<pos:position pos:line="149" pos:column="24"/></name></expr>;<pos:position pos:line="149" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="150" pos:column="3">num_sockets<pos:position pos:line="150" pos:column="14"/></name> <operator pos:line="150" pos:column="15">=<pos:position pos:line="150" pos:column="16"/></operator> <literal type="number" pos:line="150" pos:column="17">1<pos:position pos:line="150" pos:column="18"/></literal></expr>;<pos:position pos:line="150" pos:column="19"/></expr_stmt>

  <if pos:line="152" pos:column="3">if<condition pos:line="152" pos:column="5">(<expr><name pos:line="152" pos:column="6">CURL_SOCKET_BAD<pos:position pos:line="152" pos:column="21"/></name> <operator pos:line="152" pos:column="22">==<pos:position pos:line="152" pos:column="24"/></operator> <name pos:line="152" pos:column="25">sock<pos:position pos:line="152" pos:column="29"/></name></expr>)<pos:position pos:line="152" pos:column="30"/></condition><then pos:line="152" pos:column="30"> <block pos:line="152" pos:column="31">{
    <expr_stmt><expr><name pos:line="153" pos:column="5">error<pos:position pos:line="153" pos:column="10"/></name> <operator pos:line="153" pos:column="11">=<pos:position pos:line="153" pos:column="12"/></operator> <name pos:line="153" pos:column="13">SOCKERRNO<pos:position pos:line="153" pos:column="22"/></name></expr>;<pos:position pos:line="153" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="154" pos:column="5">logmsg<pos:position pos:line="154" pos:column="11"/></name><argument_list pos:line="154" pos:column="11">(<argument><expr><literal type="string" pos:line="154" pos:column="12">"Error creating socket: (%d) %s"<pos:position pos:line="154" pos:column="44"/></literal></expr></argument>,
           <argument><expr><name pos:line="155" pos:column="12">error<pos:position pos:line="155" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="155" pos:column="19">strerror<pos:position pos:line="155" pos:column="27"/></name><argument_list pos:line="155" pos:column="27">(<argument><expr><name pos:line="155" pos:column="28">error<pos:position pos:line="155" pos:column="33"/></name></expr></argument>)<pos:position pos:line="155" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="155" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="36"/></expr_stmt>
    <goto pos:line="156" pos:column="5">goto <name pos:line="156" pos:column="10">sws_cleanup<pos:position pos:line="156" pos:column="21"/></name>;<pos:position pos:line="156" pos:column="22"/></goto>
  }<pos:position pos:line="157" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="159" pos:column="3">flag<pos:position pos:line="159" pos:column="7"/></name> <operator pos:line="159" pos:column="8">=<pos:position pos:line="159" pos:column="9"/></operator> <literal type="number" pos:line="159" pos:column="10">1<pos:position pos:line="159" pos:column="11"/></literal></expr>;<pos:position pos:line="159" pos:column="12"/></expr_stmt>
  <if pos:line="160" pos:column="3">if<condition pos:line="160" pos:column="5">(<expr><literal type="number" pos:line="160" pos:column="6">0<pos:position pos:line="160" pos:column="7"/></literal> <operator pos:line="160" pos:column="8">!=<pos:position pos:line="160" pos:column="10"/></operator> <call><name pos:line="160" pos:column="11">setsockopt<pos:position pos:line="160" pos:column="21"/></name><argument_list pos:line="160" pos:column="21">(<argument><expr><name pos:line="160" pos:column="22">sock<pos:position pos:line="160" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="28">SOL_SOCKET<pos:position pos:line="160" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="160" pos:column="40">SO_REUSEADDR<pos:position pos:line="160" pos:column="52"/></name></expr></argument>,
                     <argument><expr><operator pos:line="161" pos:column="22">(<pos:position pos:line="161" pos:column="23"/></operator><name pos:line="161" pos:column="23">void<pos:position pos:line="161" pos:column="27"/></name> <operator pos:line="161" pos:column="28">*<pos:position pos:line="161" pos:column="29"/></operator><operator pos:line="161" pos:column="29">)<pos:position pos:line="161" pos:column="30"/></operator><operator pos:line="161" pos:column="30">&amp;<pos:position pos:line="161" pos:column="35"/></operator><name pos:line="161" pos:column="31">flag<pos:position pos:line="161" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="161" pos:column="37">sizeof<argument_list pos:line="161" pos:column="43">(<argument><expr><name pos:line="161" pos:column="44">flag<pos:position pos:line="161" pos:column="48"/></name></expr></argument>)<pos:position pos:line="161" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="161" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="161" pos:column="51"/></condition><then pos:line="161" pos:column="51"> <block pos:line="161" pos:column="52">{
    <expr_stmt><expr><name pos:line="162" pos:column="5">error<pos:position pos:line="162" pos:column="10"/></name> <operator pos:line="162" pos:column="11">=<pos:position pos:line="162" pos:column="12"/></operator> <name pos:line="162" pos:column="13">SOCKERRNO<pos:position pos:line="162" pos:column="22"/></name></expr>;<pos:position pos:line="162" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="163" pos:column="5">logmsg<pos:position pos:line="163" pos:column="11"/></name><argument_list pos:line="163" pos:column="11">(<argument><expr><literal type="string" pos:line="163" pos:column="12">"setsockopt(SO_REUSEADDR) failed with error: (%d) %s"<pos:position pos:line="163" pos:column="65"/></literal></expr></argument>,
           <argument><expr><name pos:line="164" pos:column="12">error<pos:position pos:line="164" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="164" pos:column="19">strerror<pos:position pos:line="164" pos:column="27"/></name><argument_list pos:line="164" pos:column="27">(<argument><expr><name pos:line="164" pos:column="28">error<pos:position pos:line="164" pos:column="33"/></name></expr></argument>)<pos:position pos:line="164" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="164" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="36"/></expr_stmt>
    <goto pos:line="165" pos:column="5">goto <name pos:line="165" pos:column="10">sws_cleanup<pos:position pos:line="165" pos:column="21"/></name>;<pos:position pos:line="165" pos:column="22"/></goto>
  }<pos:position pos:line="166" pos:column="4"/></block></then></if>
  <if pos:line="167" pos:column="3">if<condition pos:line="167" pos:column="5">(<expr><literal type="number" pos:line="167" pos:column="6">0<pos:position pos:line="167" pos:column="7"/></literal> <operator pos:line="167" pos:column="8">!=<pos:position pos:line="167" pos:column="10"/></operator> <call><name pos:line="167" pos:column="11">curlx_nonblock<pos:position pos:line="167" pos:column="25"/></name><argument_list pos:line="167" pos:column="25">(<argument><expr><name pos:line="167" pos:column="26">sock<pos:position pos:line="167" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="32">TRUE<pos:position pos:line="167" pos:column="36"/></name></expr></argument>)<pos:position pos:line="167" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="167" pos:column="38"/></condition><then pos:line="167" pos:column="38"> <block pos:line="167" pos:column="39">{
    <expr_stmt><expr><name pos:line="168" pos:column="5">error<pos:position pos:line="168" pos:column="10"/></name> <operator pos:line="168" pos:column="11">=<pos:position pos:line="168" pos:column="12"/></operator> <name pos:line="168" pos:column="13">SOCKERRNO<pos:position pos:line="168" pos:column="22"/></name></expr>;<pos:position pos:line="168" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="169" pos:column="5">logmsg<pos:position pos:line="169" pos:column="11"/></name><argument_list pos:line="169" pos:column="11">(<argument><expr><literal type="string" pos:line="169" pos:column="12">"curlx_nonblock failed with error: (%d) %s"<pos:position pos:line="169" pos:column="55"/></literal></expr></argument>,
           <argument><expr><name pos:line="170" pos:column="12">error<pos:position pos:line="170" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="170" pos:column="19">strerror<pos:position pos:line="170" pos:column="27"/></name><argument_list pos:line="170" pos:column="27">(<argument><expr><name pos:line="170" pos:column="28">error<pos:position pos:line="170" pos:column="33"/></name></expr></argument>)<pos:position pos:line="170" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="170" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="36"/></expr_stmt>
    <goto pos:line="171" pos:column="5">goto <name pos:line="171" pos:column="10">sws_cleanup<pos:position pos:line="171" pos:column="21"/></name>;<pos:position pos:line="171" pos:column="22"/></goto>
  }<pos:position pos:line="172" pos:column="4"/></block></then></if>

  <switch pos:line="174" pos:column="3">switch<condition pos:line="174" pos:column="9">(<expr><name pos:line="174" pos:column="10">socket_domain<pos:position pos:line="174" pos:column="23"/></name></expr>)<pos:position pos:line="174" pos:column="24"/></condition> <block pos:line="174" pos:column="25">{
  <case pos:line="175" pos:column="3">case <expr><name pos:line="175" pos:column="8">AF_INET<pos:position pos:line="175" pos:column="15"/></name></expr>:<pos:position pos:line="175" pos:column="16"/></case>
    <expr_stmt><expr><call><name pos:line="176" pos:column="5">memset<pos:position pos:line="176" pos:column="11"/></name><argument_list pos:line="176" pos:column="11">(<argument><expr><operator pos:line="176" pos:column="12">&amp;<pos:position pos:line="176" pos:column="17"/></operator><name><name pos:line="176" pos:column="13">me<pos:position pos:line="176" pos:column="15"/></name><operator pos:line="176" pos:column="15">.<pos:position pos:line="176" pos:column="16"/></operator><name pos:line="176" pos:column="16">sa4<pos:position pos:line="176" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="176" pos:column="21">0<pos:position pos:line="176" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="176" pos:column="24">sizeof<argument_list pos:line="176" pos:column="30">(<argument><expr><name><name pos:line="176" pos:column="31">me<pos:position pos:line="176" pos:column="33"/></name><operator pos:line="176" pos:column="33">.<pos:position pos:line="176" pos:column="34"/></operator><name pos:line="176" pos:column="34">sa4<pos:position pos:line="176" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="176" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="177" pos:column="5">me<pos:position pos:line="177" pos:column="7"/></name><operator pos:line="177" pos:column="7">.<pos:position pos:line="177" pos:column="8"/></operator><name pos:line="177" pos:column="8">sa4<pos:position pos:line="177" pos:column="11"/></name><operator pos:line="177" pos:column="11">.<pos:position pos:line="177" pos:column="12"/></operator><name pos:line="177" pos:column="12">sin_family<pos:position pos:line="177" pos:column="22"/></name></name> <operator pos:line="177" pos:column="23">=<pos:position pos:line="177" pos:column="24"/></operator> <name pos:line="177" pos:column="25">AF_INET<pos:position pos:line="177" pos:column="32"/></name></expr>;<pos:position pos:line="177" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="178" pos:column="5">me<pos:position pos:line="178" pos:column="7"/></name><operator pos:line="178" pos:column="7">.<pos:position pos:line="178" pos:column="8"/></operator><name pos:line="178" pos:column="8">sa4<pos:position pos:line="178" pos:column="11"/></name><operator pos:line="178" pos:column="11">.<pos:position pos:line="178" pos:column="12"/></operator><name pos:line="178" pos:column="12">sin_addr<pos:position pos:line="178" pos:column="20"/></name><operator pos:line="178" pos:column="20">.<pos:position pos:line="178" pos:column="21"/></operator><name pos:line="178" pos:column="21">s_addr<pos:position pos:line="178" pos:column="27"/></name></name> <operator pos:line="178" pos:column="28">=<pos:position pos:line="178" pos:column="29"/></operator> <name pos:line="178" pos:column="30">INADDR_ANY<pos:position pos:line="178" pos:column="40"/></name></expr>;<pos:position pos:line="178" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="179" pos:column="5">me<pos:position pos:line="179" pos:column="7"/></name><operator pos:line="179" pos:column="7">.<pos:position pos:line="179" pos:column="8"/></operator><name pos:line="179" pos:column="8">sa4<pos:position pos:line="179" pos:column="11"/></name><operator pos:line="179" pos:column="11">.<pos:position pos:line="179" pos:column="12"/></operator><name pos:line="179" pos:column="12">sin_port<pos:position pos:line="179" pos:column="20"/></name></name> <operator pos:line="179" pos:column="21">=<pos:position pos:line="179" pos:column="22"/></operator> <call><name pos:line="179" pos:column="23">htons<pos:position pos:line="179" pos:column="28"/></name><argument_list pos:line="179" pos:column="28">(<argument><expr><name pos:line="179" pos:column="29">port<pos:position pos:line="179" pos:column="33"/></name></expr></argument>)<pos:position pos:line="179" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="180" pos:column="5">rc<pos:position pos:line="180" pos:column="7"/></name> <operator pos:line="180" pos:column="8">=<pos:position pos:line="180" pos:column="9"/></operator> <call><name pos:line="180" pos:column="10">bind<pos:position pos:line="180" pos:column="14"/></name><argument_list pos:line="180" pos:column="14">(<argument><expr><name pos:line="180" pos:column="15">sock<pos:position pos:line="180" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="180" pos:column="21">&amp;<pos:position pos:line="180" pos:column="26"/></operator><name><name pos:line="180" pos:column="22">me<pos:position pos:line="180" pos:column="24"/></name><operator pos:line="180" pos:column="24">.<pos:position pos:line="180" pos:column="25"/></operator><name pos:line="180" pos:column="25">sa<pos:position pos:line="180" pos:column="27"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="180" pos:column="29">sizeof<argument_list pos:line="180" pos:column="35">(<argument><expr><name><name pos:line="180" pos:column="36">me<pos:position pos:line="180" pos:column="38"/></name><operator pos:line="180" pos:column="38">.<pos:position pos:line="180" pos:column="39"/></operator><name pos:line="180" pos:column="39">sa4<pos:position pos:line="180" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="180" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="180" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="45"/></expr_stmt>
    <break pos:line="181" pos:column="5">break;<pos:position pos:line="181" pos:column="11"/></break>
<cpp:ifdef pos:line="182" pos:column="1">#<cpp:directive pos:line="182" pos:column="2">ifdef<pos:position pos:line="182" pos:column="7"/></cpp:directive> <name pos:line="182" pos:column="8">ENABLE_IPV6<pos:position pos:line="182" pos:column="19"/></name></cpp:ifdef>
  <case pos:line="183" pos:column="3">case <expr><name pos:line="183" pos:column="8">AF_INET6<pos:position pos:line="183" pos:column="16"/></name></expr>:<pos:position pos:line="183" pos:column="17"/></case>
    <expr_stmt><expr><call><name pos:line="184" pos:column="5">memset<pos:position pos:line="184" pos:column="11"/></name><argument_list pos:line="184" pos:column="11">(<argument><expr><operator pos:line="184" pos:column="12">&amp;<pos:position pos:line="184" pos:column="17"/></operator><name><name pos:line="184" pos:column="13">me<pos:position pos:line="184" pos:column="15"/></name><operator pos:line="184" pos:column="15">.<pos:position pos:line="184" pos:column="16"/></operator><name pos:line="184" pos:column="16">sa6<pos:position pos:line="184" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="184" pos:column="21">0<pos:position pos:line="184" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="184" pos:column="24">sizeof<argument_list pos:line="184" pos:column="30">(<argument><expr><name><name pos:line="184" pos:column="31">me<pos:position pos:line="184" pos:column="33"/></name><operator pos:line="184" pos:column="33">.<pos:position pos:line="184" pos:column="34"/></operator><name pos:line="184" pos:column="34">sa6<pos:position pos:line="184" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="184" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="184" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="185" pos:column="5">me<pos:position pos:line="185" pos:column="7"/></name><operator pos:line="185" pos:column="7">.<pos:position pos:line="185" pos:column="8"/></operator><name pos:line="185" pos:column="8">sa6<pos:position pos:line="185" pos:column="11"/></name><operator pos:line="185" pos:column="11">.<pos:position pos:line="185" pos:column="12"/></operator><name pos:line="185" pos:column="12">sin6_family<pos:position pos:line="185" pos:column="23"/></name></name> <operator pos:line="185" pos:column="24">=<pos:position pos:line="185" pos:column="25"/></operator> <name pos:line="185" pos:column="26">AF_INET6<pos:position pos:line="185" pos:column="34"/></name></expr>;<pos:position pos:line="185" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="186" pos:column="5">me<pos:position pos:line="186" pos:column="7"/></name><operator pos:line="186" pos:column="7">.<pos:position pos:line="186" pos:column="8"/></operator><name pos:line="186" pos:column="8">sa6<pos:position pos:line="186" pos:column="11"/></name><operator pos:line="186" pos:column="11">.<pos:position pos:line="186" pos:column="12"/></operator><name pos:line="186" pos:column="12">sin6_addr<pos:position pos:line="186" pos:column="21"/></name></name> <operator pos:line="186" pos:column="22">=<pos:position pos:line="186" pos:column="23"/></operator> <name pos:line="186" pos:column="24">in6addr_any<pos:position pos:line="186" pos:column="35"/></name></expr>;<pos:position pos:line="186" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="187" pos:column="5">me<pos:position pos:line="187" pos:column="7"/></name><operator pos:line="187" pos:column="7">.<pos:position pos:line="187" pos:column="8"/></operator><name pos:line="187" pos:column="8">sa6<pos:position pos:line="187" pos:column="11"/></name><operator pos:line="187" pos:column="11">.<pos:position pos:line="187" pos:column="12"/></operator><name pos:line="187" pos:column="12">sin6_port<pos:position pos:line="187" pos:column="21"/></name></name> <operator pos:line="187" pos:column="22">=<pos:position pos:line="187" pos:column="23"/></operator> <call><name pos:line="187" pos:column="24">htons<pos:position pos:line="187" pos:column="29"/></name><argument_list pos:line="187" pos:column="29">(<argument><expr><name pos:line="187" pos:column="30">port<pos:position pos:line="187" pos:column="34"/></name></expr></argument>)<pos:position pos:line="187" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="188" pos:column="5">rc<pos:position pos:line="188" pos:column="7"/></name> <operator pos:line="188" pos:column="8">=<pos:position pos:line="188" pos:column="9"/></operator> <call><name pos:line="188" pos:column="10">bind<pos:position pos:line="188" pos:column="14"/></name><argument_list pos:line="188" pos:column="14">(<argument><expr><name pos:line="188" pos:column="15">sock<pos:position pos:line="188" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="188" pos:column="21">&amp;<pos:position pos:line="188" pos:column="26"/></operator><name><name pos:line="188" pos:column="22">me<pos:position pos:line="188" pos:column="24"/></name><operator pos:line="188" pos:column="24">.<pos:position pos:line="188" pos:column="25"/></operator><name pos:line="188" pos:column="25">sa<pos:position pos:line="188" pos:column="27"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="188" pos:column="29">sizeof<argument_list pos:line="188" pos:column="35">(<argument><expr><name><name pos:line="188" pos:column="36">me<pos:position pos:line="188" pos:column="38"/></name><operator pos:line="188" pos:column="38">.<pos:position pos:line="188" pos:column="39"/></operator><name pos:line="188" pos:column="39">sa6<pos:position pos:line="188" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="188" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="188" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="45"/></expr_stmt>
    <break pos:line="189" pos:column="5">break;<pos:position pos:line="189" pos:column="11"/></break>
<cpp:endif pos:line="190" pos:column="1">#<cpp:directive pos:line="190" pos:column="2">endif<pos:position pos:line="190" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="190" pos:column="8">/* ENABLE_IPV6 */</comment>
<cpp:ifdef pos:line="191" pos:column="1">#<cpp:directive pos:line="191" pos:column="2">ifdef<pos:position pos:line="191" pos:column="7"/></cpp:directive> <name pos:line="191" pos:column="8">USE_UNIX_SOCKETS<pos:position pos:line="191" pos:column="24"/></name></cpp:ifdef>
  <case pos:line="192" pos:column="3">case <expr><name pos:line="192" pos:column="8">AF_UNIX<pos:position pos:line="192" pos:column="15"/></name></expr>:<pos:position pos:line="192" pos:column="16"/></case>
    <expr_stmt><expr><call><name pos:line="193" pos:column="5">memset<pos:position pos:line="193" pos:column="11"/></name><argument_list pos:line="193" pos:column="11">(<argument><expr><operator pos:line="193" pos:column="12">&amp;<pos:position pos:line="193" pos:column="17"/></operator><name><name pos:line="193" pos:column="13">me<pos:position pos:line="193" pos:column="15"/></name><operator pos:line="193" pos:column="15">.<pos:position pos:line="193" pos:column="16"/></operator><name pos:line="193" pos:column="16">sau<pos:position pos:line="193" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="193" pos:column="21">0<pos:position pos:line="193" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="193" pos:column="24">sizeof<argument_list pos:line="193" pos:column="30">(<argument><expr><name><name pos:line="193" pos:column="31">me<pos:position pos:line="193" pos:column="33"/></name><operator pos:line="193" pos:column="33">.<pos:position pos:line="193" pos:column="34"/></operator><name pos:line="193" pos:column="34">sau<pos:position pos:line="193" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="193" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="193" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="194" pos:column="5">me<pos:position pos:line="194" pos:column="7"/></name><operator pos:line="194" pos:column="7">.<pos:position pos:line="194" pos:column="8"/></operator><name pos:line="194" pos:column="8">sau<pos:position pos:line="194" pos:column="11"/></name><operator pos:line="194" pos:column="11">.<pos:position pos:line="194" pos:column="12"/></operator><name pos:line="194" pos:column="12">sun_family<pos:position pos:line="194" pos:column="22"/></name></name> <operator pos:line="194" pos:column="23">=<pos:position pos:line="194" pos:column="24"/></operator> <name pos:line="194" pos:column="25">AF_UNIX<pos:position pos:line="194" pos:column="32"/></name></expr>;<pos:position pos:line="194" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="195" pos:column="5">strncpy<pos:position pos:line="195" pos:column="12"/></name><argument_list pos:line="195" pos:column="12">(<argument><expr><name><name pos:line="195" pos:column="13">me<pos:position pos:line="195" pos:column="15"/></name><operator pos:line="195" pos:column="15">.<pos:position pos:line="195" pos:column="16"/></operator><name pos:line="195" pos:column="16">sau<pos:position pos:line="195" pos:column="19"/></name><operator pos:line="195" pos:column="19">.<pos:position pos:line="195" pos:column="20"/></operator><name pos:line="195" pos:column="20">sun_path<pos:position pos:line="195" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="30">unix_socket<pos:position pos:line="195" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="195" pos:column="43">sizeof<argument_list pos:line="195" pos:column="49">(<argument><expr><name><name pos:line="195" pos:column="50">me<pos:position pos:line="195" pos:column="52"/></name><operator pos:line="195" pos:column="52">.<pos:position pos:line="195" pos:column="53"/></operator><name pos:line="195" pos:column="53">sau<pos:position pos:line="195" pos:column="56"/></name><operator pos:line="195" pos:column="56">.<pos:position pos:line="195" pos:column="57"/></operator><name pos:line="195" pos:column="57">sun_path<pos:position pos:line="195" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="195" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="195" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name pos:line="196" pos:column="5">rc<pos:position pos:line="196" pos:column="7"/></name> <operator pos:line="196" pos:column="8">=<pos:position pos:line="196" pos:column="9"/></operator> <call><name pos:line="196" pos:column="10">bind<pos:position pos:line="196" pos:column="14"/></name><argument_list pos:line="196" pos:column="14">(<argument><expr><name pos:line="196" pos:column="15">sock<pos:position pos:line="196" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="196" pos:column="21">&amp;<pos:position pos:line="196" pos:column="26"/></operator><name><name pos:line="196" pos:column="22">me<pos:position pos:line="196" pos:column="24"/></name><operator pos:line="196" pos:column="24">.<pos:position pos:line="196" pos:column="25"/></operator><name pos:line="196" pos:column="25">sa<pos:position pos:line="196" pos:column="27"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="196" pos:column="29">sizeof<argument_list pos:line="196" pos:column="35">(<argument><expr><name><name pos:line="196" pos:column="36">me<pos:position pos:line="196" pos:column="38"/></name><operator pos:line="196" pos:column="38">.<pos:position pos:line="196" pos:column="39"/></operator><name pos:line="196" pos:column="39">sau<pos:position pos:line="196" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="196" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="196" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="45"/></expr_stmt>
    <if pos:line="197" pos:column="5">if<condition pos:line="197" pos:column="7">(<expr><literal type="number" pos:line="197" pos:column="8">0<pos:position pos:line="197" pos:column="9"/></literal> <operator pos:line="197" pos:column="10">!=<pos:position pos:line="197" pos:column="12"/></operator> <name pos:line="197" pos:column="13">rc<pos:position pos:line="197" pos:column="15"/></name> <operator pos:line="197" pos:column="16">&amp;&amp;<pos:position pos:line="197" pos:column="26"/></operator> <name pos:line="197" pos:column="19">errno<pos:position pos:line="197" pos:column="24"/></name> <operator pos:line="197" pos:column="25">==<pos:position pos:line="197" pos:column="27"/></operator> <name pos:line="197" pos:column="28">EADDRINUSE<pos:position pos:line="197" pos:column="38"/></name></expr>)<pos:position pos:line="197" pos:column="39"/></condition><then pos:line="197" pos:column="39"> <block pos:line="197" pos:column="40">{
      <decl_stmt><decl><type><name><name pos:line="198" pos:column="7">struct<pos:position pos:line="198" pos:column="13"/></name> <name pos:line="198" pos:column="14">stat<pos:position pos:line="198" pos:column="18"/></name></name></type> <name pos:line="198" pos:column="19">statbuf<pos:position pos:line="198" pos:column="26"/></name></decl>;<pos:position pos:line="198" pos:column="27"/></decl_stmt>
      <comment type="block" pos:line="199" pos:column="7">/* socket already exists. Perhaps it is stale? */</comment>
      <decl_stmt><decl><type><name pos:line="200" pos:column="7">int<pos:position pos:line="200" pos:column="10"/></name></type> <name pos:line="200" pos:column="11">unixfd<pos:position pos:line="200" pos:column="17"/></name> <init pos:line="200" pos:column="18">= <expr><call><name pos:line="200" pos:column="20">socket<pos:position pos:line="200" pos:column="26"/></name><argument_list pos:line="200" pos:column="26">(<argument><expr><name pos:line="200" pos:column="27">AF_UNIX<pos:position pos:line="200" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="200" pos:column="36">SOCK_STREAM<pos:position pos:line="200" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="200" pos:column="49">0<pos:position pos:line="200" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="200" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="200" pos:column="52"/></decl_stmt>
      <if pos:line="201" pos:column="7">if<condition pos:line="201" pos:column="9">(<expr><name pos:line="201" pos:column="10">CURL_SOCKET_BAD<pos:position pos:line="201" pos:column="25"/></name> <operator pos:line="201" pos:column="26">==<pos:position pos:line="201" pos:column="28"/></operator> <name pos:line="201" pos:column="29">unixfd<pos:position pos:line="201" pos:column="35"/></name></expr>)<pos:position pos:line="201" pos:column="36"/></condition><then pos:line="201" pos:column="36"> <block pos:line="201" pos:column="37">{
        <expr_stmt><expr><name pos:line="202" pos:column="9">error<pos:position pos:line="202" pos:column="14"/></name> <operator pos:line="202" pos:column="15">=<pos:position pos:line="202" pos:column="16"/></operator> <name pos:line="202" pos:column="17">SOCKERRNO<pos:position pos:line="202" pos:column="26"/></name></expr>;<pos:position pos:line="202" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="203" pos:column="9">logmsg<pos:position pos:line="203" pos:column="15"/></name><argument_list pos:line="203" pos:column="15">(<argument><expr><literal type="string" pos:line="203" pos:column="16">"Error binding socket, failed to create socket at %s: (%d) %s"<pos:position pos:line="203" pos:column="78"/></literal></expr></argument>,
               <argument><expr><name pos:line="204" pos:column="16">unix_socket<pos:position pos:line="204" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="29">error<pos:position pos:line="204" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="204" pos:column="36">strerror<pos:position pos:line="204" pos:column="44"/></name><argument_list pos:line="204" pos:column="44">(<argument><expr><name pos:line="204" pos:column="45">error<pos:position pos:line="204" pos:column="50"/></name></expr></argument>)<pos:position pos:line="204" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="204" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="53"/></expr_stmt>
        <goto pos:line="205" pos:column="9">goto <name pos:line="205" pos:column="14">sws_cleanup<pos:position pos:line="205" pos:column="25"/></name>;<pos:position pos:line="205" pos:column="26"/></goto>
      }<pos:position pos:line="206" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="207" pos:column="7">/* check whether the server is alive */</comment>
      <expr_stmt><expr><name pos:line="208" pos:column="7">rc<pos:position pos:line="208" pos:column="9"/></name> <operator pos:line="208" pos:column="10">=<pos:position pos:line="208" pos:column="11"/></operator> <call><name pos:line="208" pos:column="12">connect<pos:position pos:line="208" pos:column="19"/></name><argument_list pos:line="208" pos:column="19">(<argument><expr><name pos:line="208" pos:column="20">unixfd<pos:position pos:line="208" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="208" pos:column="28">&amp;<pos:position pos:line="208" pos:column="33"/></operator><name><name pos:line="208" pos:column="29">me<pos:position pos:line="208" pos:column="31"/></name><operator pos:line="208" pos:column="31">.<pos:position pos:line="208" pos:column="32"/></operator><name pos:line="208" pos:column="32">sa<pos:position pos:line="208" pos:column="34"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="208" pos:column="36">sizeof<argument_list pos:line="208" pos:column="42">(<argument><expr><name><name pos:line="208" pos:column="43">me<pos:position pos:line="208" pos:column="45"/></name><operator pos:line="208" pos:column="45">.<pos:position pos:line="208" pos:column="46"/></operator><name pos:line="208" pos:column="46">sau<pos:position pos:line="208" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="208" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="208" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name pos:line="209" pos:column="7">error<pos:position pos:line="209" pos:column="12"/></name> <operator pos:line="209" pos:column="13">=<pos:position pos:line="209" pos:column="14"/></operator> <name pos:line="209" pos:column="15">errno<pos:position pos:line="209" pos:column="20"/></name></expr>;<pos:position pos:line="209" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="210" pos:column="7">close<pos:position pos:line="210" pos:column="12"/></name><argument_list pos:line="210" pos:column="12">(<argument><expr><name pos:line="210" pos:column="13">unixfd<pos:position pos:line="210" pos:column="19"/></name></expr></argument>)<pos:position pos:line="210" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="21"/></expr_stmt>
      <if pos:line="211" pos:column="7">if<condition pos:line="211" pos:column="9">(<expr><name pos:line="211" pos:column="10">ECONNREFUSED<pos:position pos:line="211" pos:column="22"/></name> <operator pos:line="211" pos:column="23">!=<pos:position pos:line="211" pos:column="25"/></operator> <name pos:line="211" pos:column="26">error<pos:position pos:line="211" pos:column="31"/></name></expr>)<pos:position pos:line="211" pos:column="32"/></condition><then pos:line="211" pos:column="32"> <block pos:line="211" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="212" pos:column="9">logmsg<pos:position pos:line="212" pos:column="15"/></name><argument_list pos:line="212" pos:column="15">(<argument><expr><literal type="string" pos:line="212" pos:column="16">"Error binding socket, failed to connect to %s: (%d) %s"<pos:position pos:line="212" pos:column="72"/></literal></expr></argument>,
               <argument><expr><name pos:line="213" pos:column="16">unix_socket<pos:position pos:line="213" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="213" pos:column="29">error<pos:position pos:line="213" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="213" pos:column="36">strerror<pos:position pos:line="213" pos:column="44"/></name><argument_list pos:line="213" pos:column="44">(<argument><expr><name pos:line="213" pos:column="45">error<pos:position pos:line="213" pos:column="50"/></name></expr></argument>)<pos:position pos:line="213" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="213" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="53"/></expr_stmt>
        <goto pos:line="214" pos:column="9">goto <name pos:line="214" pos:column="14">sws_cleanup<pos:position pos:line="214" pos:column="25"/></name>;<pos:position pos:line="214" pos:column="26"/></goto>
      }<pos:position pos:line="215" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="216" pos:column="7">/* socket server is not alive, now check if it was actually a socket.
       * Systems which have Unix sockets will also have lstat */</comment>
      <expr_stmt><expr><name pos:line="218" pos:column="7">rc<pos:position pos:line="218" pos:column="9"/></name> <operator pos:line="218" pos:column="10">=<pos:position pos:line="218" pos:column="11"/></operator> <call><name pos:line="218" pos:column="12">lstat<pos:position pos:line="218" pos:column="17"/></name><argument_list pos:line="218" pos:column="17">(<argument><expr><name pos:line="218" pos:column="18">unix_socket<pos:position pos:line="218" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="218" pos:column="31">&amp;<pos:position pos:line="218" pos:column="36"/></operator><name pos:line="218" pos:column="32">statbuf<pos:position pos:line="218" pos:column="39"/></name></expr></argument>)<pos:position pos:line="218" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="41"/></expr_stmt>
      <if pos:line="219" pos:column="7">if<condition pos:line="219" pos:column="9">(<expr><literal type="number" pos:line="219" pos:column="10">0<pos:position pos:line="219" pos:column="11"/></literal> <operator pos:line="219" pos:column="12">!=<pos:position pos:line="219" pos:column="14"/></operator> <name pos:line="219" pos:column="15">rc<pos:position pos:line="219" pos:column="17"/></name></expr>)<pos:position pos:line="219" pos:column="18"/></condition><then pos:line="219" pos:column="18"> <block pos:line="219" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="220" pos:column="9">logmsg<pos:position pos:line="220" pos:column="15"/></name><argument_list pos:line="220" pos:column="15">(<argument><expr><literal type="string" pos:line="220" pos:column="16">"Error binding socket, failed to stat %s: (%d) %s"<pos:position pos:line="220" pos:column="66"/></literal></expr></argument>,
               <argument><expr><name pos:line="221" pos:column="16">unix_socket<pos:position pos:line="221" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="29">errno<pos:position pos:line="221" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="221" pos:column="36">strerror<pos:position pos:line="221" pos:column="44"/></name><argument_list pos:line="221" pos:column="44">(<argument><expr><name pos:line="221" pos:column="45">errno<pos:position pos:line="221" pos:column="50"/></name></expr></argument>)<pos:position pos:line="221" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="221" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="53"/></expr_stmt>
        <goto pos:line="222" pos:column="9">goto <name pos:line="222" pos:column="14">sws_cleanup<pos:position pos:line="222" pos:column="25"/></name>;<pos:position pos:line="222" pos:column="26"/></goto>
      }<pos:position pos:line="223" pos:column="8"/></block></then></if>
      <if pos:line="224" pos:column="7">if<condition pos:line="224" pos:column="9">(<expr><operator pos:line="224" pos:column="10">(<pos:position pos:line="224" pos:column="11"/></operator><name><name pos:line="224" pos:column="11">statbuf<pos:position pos:line="224" pos:column="18"/></name><operator pos:line="224" pos:column="18">.<pos:position pos:line="224" pos:column="19"/></operator><name pos:line="224" pos:column="19">st_mode<pos:position pos:line="224" pos:column="26"/></name></name> <operator pos:line="224" pos:column="27">&amp;<pos:position pos:line="224" pos:column="32"/></operator> <name pos:line="224" pos:column="29">S_IFSOCK<pos:position pos:line="224" pos:column="37"/></name><operator pos:line="224" pos:column="37">)<pos:position pos:line="224" pos:column="38"/></operator> <operator pos:line="224" pos:column="39">!=<pos:position pos:line="224" pos:column="41"/></operator> <name pos:line="224" pos:column="42">S_IFSOCK<pos:position pos:line="224" pos:column="50"/></name></expr>)<pos:position pos:line="224" pos:column="51"/></condition><then pos:line="224" pos:column="51"> <block pos:line="224" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="225" pos:column="9">logmsg<pos:position pos:line="225" pos:column="15"/></name><argument_list pos:line="225" pos:column="15">(<argument><expr><literal type="string" pos:line="225" pos:column="16">"Error binding socket, failed to stat %s: (%d) %s"<pos:position pos:line="225" pos:column="66"/></literal></expr></argument>,
               <argument><expr><name pos:line="226" pos:column="16">unix_socket<pos:position pos:line="226" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="226" pos:column="29">error<pos:position pos:line="226" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="226" pos:column="36">strerror<pos:position pos:line="226" pos:column="44"/></name><argument_list pos:line="226" pos:column="44">(<argument><expr><name pos:line="226" pos:column="45">error<pos:position pos:line="226" pos:column="50"/></name></expr></argument>)<pos:position pos:line="226" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="226" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="53"/></expr_stmt>
        <goto pos:line="227" pos:column="9">goto <name pos:line="227" pos:column="14">sws_cleanup<pos:position pos:line="227" pos:column="25"/></name>;<pos:position pos:line="227" pos:column="26"/></goto>
      }<pos:position pos:line="228" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="229" pos:column="7">/* dead socket, cleanup and retry bind */</comment>
      <expr_stmt><expr><name pos:line="230" pos:column="7">rc<pos:position pos:line="230" pos:column="9"/></name> <operator pos:line="230" pos:column="10">=<pos:position pos:line="230" pos:column="11"/></operator> <call><name pos:line="230" pos:column="12">unlink<pos:position pos:line="230" pos:column="18"/></name><argument_list pos:line="230" pos:column="18">(<argument><expr><name pos:line="230" pos:column="19">unix_socket<pos:position pos:line="230" pos:column="30"/></name></expr></argument>)<pos:position pos:line="230" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="32"/></expr_stmt>
      <if pos:line="231" pos:column="7">if<condition pos:line="231" pos:column="9">(<expr><literal type="number" pos:line="231" pos:column="10">0<pos:position pos:line="231" pos:column="11"/></literal> <operator pos:line="231" pos:column="12">!=<pos:position pos:line="231" pos:column="14"/></operator> <name pos:line="231" pos:column="15">rc<pos:position pos:line="231" pos:column="17"/></name></expr>)<pos:position pos:line="231" pos:column="18"/></condition><then pos:line="231" pos:column="18"> <block pos:line="231" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="232" pos:column="9">logmsg<pos:position pos:line="232" pos:column="15"/></name><argument_list pos:line="232" pos:column="15">(<argument><expr><literal type="string" pos:line="232" pos:column="16">"Error binding socket, failed to unlink %s: (%d) %s"<pos:position pos:line="232" pos:column="68"/></literal></expr></argument>,
               <argument><expr><name pos:line="233" pos:column="16">unix_socket<pos:position pos:line="233" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="233" pos:column="29">errno<pos:position pos:line="233" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="233" pos:column="36">strerror<pos:position pos:line="233" pos:column="44"/></name><argument_list pos:line="233" pos:column="44">(<argument><expr><name pos:line="233" pos:column="45">errno<pos:position pos:line="233" pos:column="50"/></name></expr></argument>)<pos:position pos:line="233" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="233" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="53"/></expr_stmt>
        <goto pos:line="234" pos:column="9">goto <name pos:line="234" pos:column="14">sws_cleanup<pos:position pos:line="234" pos:column="25"/></name>;<pos:position pos:line="234" pos:column="26"/></goto>
      }<pos:position pos:line="235" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="236" pos:column="7">/* stale socket is gone, retry bind */</comment>
      <expr_stmt><expr><name pos:line="237" pos:column="7">rc<pos:position pos:line="237" pos:column="9"/></name> <operator pos:line="237" pos:column="10">=<pos:position pos:line="237" pos:column="11"/></operator> <call><name pos:line="237" pos:column="12">bind<pos:position pos:line="237" pos:column="16"/></name><argument_list pos:line="237" pos:column="16">(<argument><expr><name pos:line="237" pos:column="17">sock<pos:position pos:line="237" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="237" pos:column="23">&amp;<pos:position pos:line="237" pos:column="28"/></operator><name><name pos:line="237" pos:column="24">me<pos:position pos:line="237" pos:column="26"/></name><operator pos:line="237" pos:column="26">.<pos:position pos:line="237" pos:column="27"/></operator><name pos:line="237" pos:column="27">sa<pos:position pos:line="237" pos:column="29"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="237" pos:column="31">sizeof<argument_list pos:line="237" pos:column="37">(<argument><expr><name><name pos:line="237" pos:column="38">me<pos:position pos:line="237" pos:column="40"/></name><operator pos:line="237" pos:column="40">.<pos:position pos:line="237" pos:column="41"/></operator><name pos:line="237" pos:column="41">sau<pos:position pos:line="237" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="237" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="237" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="238" pos:column="6"/></block></then></if>
    <break pos:line="239" pos:column="5">break;<pos:position pos:line="239" pos:column="11"/></break>
<cpp:endif pos:line="240" pos:column="1">#<cpp:directive pos:line="240" pos:column="2">endif<pos:position pos:line="240" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="240" pos:column="8">/* USE_UNIX_SOCKETS */</comment>
  }<pos:position pos:line="241" pos:column="4"/></block></switch>
  <if pos:line="242" pos:column="3">if<condition pos:line="242" pos:column="5">(<expr><literal type="number" pos:line="242" pos:column="6">0<pos:position pos:line="242" pos:column="7"/></literal> <operator pos:line="242" pos:column="8">!=<pos:position pos:line="242" pos:column="10"/></operator> <name pos:line="242" pos:column="11">rc<pos:position pos:line="242" pos:column="13"/></name></expr>)<pos:position pos:line="242" pos:column="14"/></condition><then pos:line="242" pos:column="14"> <block pos:line="242" pos:column="15">{
    <expr_stmt><expr><name pos:line="243" pos:column="5">error<pos:position pos:line="243" pos:column="10"/></name> <operator pos:line="243" pos:column="11">=<pos:position pos:line="243" pos:column="12"/></operator> <name pos:line="243" pos:column="13">SOCKERRNO<pos:position pos:line="243" pos:column="22"/></name></expr>;<pos:position pos:line="243" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="244" pos:column="5">logmsg<pos:position pos:line="244" pos:column="11"/></name><argument_list pos:line="244" pos:column="11">(<argument><expr><literal type="string" pos:line="244" pos:column="12">"Error binding socket on %s: (%d) %s"<pos:position pos:line="244" pos:column="49"/></literal></expr></argument>,
           <argument><expr><name pos:line="245" pos:column="12">location_str<pos:position pos:line="245" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="245" pos:column="26">error<pos:position pos:line="245" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="245" pos:column="33">strerror<pos:position pos:line="245" pos:column="41"/></name><argument_list pos:line="245" pos:column="41">(<argument><expr><name pos:line="245" pos:column="42">error<pos:position pos:line="245" pos:column="47"/></name></expr></argument>)<pos:position pos:line="245" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="245" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="50"/></expr_stmt>
    <goto pos:line="246" pos:column="5">goto <name pos:line="246" pos:column="10">sws_cleanup<pos:position pos:line="246" pos:column="21"/></name>;<pos:position pos:line="246" pos:column="22"/></goto>
  }<pos:position pos:line="247" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="249" pos:column="3">logmsg<pos:position pos:line="249" pos:column="9"/></name><argument_list pos:line="249" pos:column="9">(<argument><expr><literal type="string" pos:line="249" pos:column="10">"Running %s %s version on %s"<pos:position pos:line="249" pos:column="39"/></literal></expr></argument>,
         <argument><expr><ternary><condition><expr><name pos:line="250" pos:column="10">use_gopher<pos:position pos:line="250" pos:column="20"/></name></expr>?<pos:position pos:line="250" pos:column="21"/></condition><then><expr><literal type="string" pos:line="250" pos:column="21">"GOPHER"<pos:position pos:line="250" pos:column="29"/></literal></expr></then><else pos:line="250" pos:column="29">:<expr><literal type="string" pos:line="250" pos:column="30">"HTTP"<pos:position pos:line="250" pos:column="36"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="250" pos:column="38">socket_type<pos:position pos:line="250" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="51">location_str<pos:position pos:line="250" pos:column="63"/></name></expr></argument>)<pos:position pos:line="250" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="65"/></expr_stmt>

  <comment type="block" pos:line="252" pos:column="3">/* start accepting connections */</comment>
  <expr_stmt><expr><name pos:line="253" pos:column="3">rc<pos:position pos:line="253" pos:column="5"/></name> <operator pos:line="253" pos:column="6">=<pos:position pos:line="253" pos:column="7"/></operator> <call><name pos:line="253" pos:column="8">listen<pos:position pos:line="253" pos:column="14"/></name><argument_list pos:line="253" pos:column="14">(<argument><expr><name pos:line="253" pos:column="15">sock<pos:position pos:line="253" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="253" pos:column="21">5<pos:position pos:line="253" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="253" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="24"/></expr_stmt>
  <if pos:line="254" pos:column="3">if<condition pos:line="254" pos:column="5">(<expr><literal type="number" pos:line="254" pos:column="6">0<pos:position pos:line="254" pos:column="7"/></literal> <operator pos:line="254" pos:column="8">!=<pos:position pos:line="254" pos:column="10"/></operator> <name pos:line="254" pos:column="11">rc<pos:position pos:line="254" pos:column="13"/></name></expr>)<pos:position pos:line="254" pos:column="14"/></condition><then pos:line="254" pos:column="14"> <block pos:line="254" pos:column="15">{
    <expr_stmt><expr><name pos:line="255" pos:column="5">error<pos:position pos:line="255" pos:column="10"/></name> <operator pos:line="255" pos:column="11">=<pos:position pos:line="255" pos:column="12"/></operator> <name pos:line="255" pos:column="13">SOCKERRNO<pos:position pos:line="255" pos:column="22"/></name></expr>;<pos:position pos:line="255" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="256" pos:column="5">logmsg<pos:position pos:line="256" pos:column="11"/></name><argument_list pos:line="256" pos:column="11">(<argument><expr><literal type="string" pos:line="256" pos:column="12">"listen() failed with error: (%d) %s"<pos:position pos:line="256" pos:column="49"/></literal></expr></argument>,
           <argument><expr><name pos:line="257" pos:column="12">error<pos:position pos:line="257" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="257" pos:column="19">strerror<pos:position pos:line="257" pos:column="27"/></name><argument_list pos:line="257" pos:column="27">(<argument><expr><name pos:line="257" pos:column="28">error<pos:position pos:line="257" pos:column="33"/></name></expr></argument>)<pos:position pos:line="257" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="257" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="36"/></expr_stmt>
    <goto pos:line="258" pos:column="5">goto <name pos:line="258" pos:column="10">sws_cleanup<pos:position pos:line="258" pos:column="21"/></name>;<pos:position pos:line="258" pos:column="22"/></goto>
  }<pos:position pos:line="259" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="261" pos:column="1">#<cpp:directive pos:line="261" pos:column="2">ifdef<pos:position pos:line="261" pos:column="7"/></cpp:directive> <name pos:line="261" pos:column="8">USE_UNIX_SOCKETS<pos:position pos:line="261" pos:column="24"/></name></cpp:ifdef>
  <comment type="block" pos:line="262" pos:column="3">/* listen succeeds, so let's assume a valid listening Unix socket */</comment>
  <expr_stmt><expr><name pos:line="263" pos:column="3">unlink_socket<pos:position pos:line="263" pos:column="16"/></name> <operator pos:line="263" pos:column="17">=<pos:position pos:line="263" pos:column="18"/></operator> <literal type="boolean" pos:line="263" pos:column="19">true<pos:position pos:line="263" pos:column="23"/></literal></expr>;<pos:position pos:line="263" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="264" pos:column="1">#<cpp:directive pos:line="264" pos:column="2">endif<pos:position pos:line="264" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="266" pos:column="3">/*
  ** As soon as this server writes its pid file the test harness will
  ** attempt to connect to this server and initiate its verification.
  */</comment>

  <expr_stmt><expr><name pos:line="271" pos:column="3">wrotepidfile<pos:position pos:line="271" pos:column="15"/></name> <operator pos:line="271" pos:column="16">=<pos:position pos:line="271" pos:column="17"/></operator> <call><name pos:line="271" pos:column="18">write_pidfile<pos:position pos:line="271" pos:column="31"/></name><argument_list pos:line="271" pos:column="31">(<argument><expr><name pos:line="271" pos:column="32">pidname<pos:position pos:line="271" pos:column="39"/></name></expr></argument>)<pos:position pos:line="271" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="41"/></expr_stmt>
  <if pos:line="272" pos:column="3">if<condition pos:line="272" pos:column="5">(<expr><operator pos:line="272" pos:column="6">!<pos:position pos:line="272" pos:column="7"/></operator><name pos:line="272" pos:column="7">wrotepidfile<pos:position pos:line="272" pos:column="19"/></name></expr>)<pos:position pos:line="272" pos:column="20"/></condition><then pos:line="272" pos:column="20">
    <block type="pseudo"><goto pos:line="273" pos:column="5">goto <name pos:line="273" pos:column="10">sws_cleanup<pos:position pos:line="273" pos:column="21"/></name>;<pos:position pos:line="273" pos:column="22"/></goto></block></then></if>

  <comment type="block" pos:line="275" pos:column="3">/* initialization of httprequest struct is done before get_request(), but
     the pipelining struct field must be initialized previously to FALSE
     every time a new connection arrives. */</comment>

  <expr_stmt><expr><name><name pos:line="279" pos:column="3">req<pos:position pos:line="279" pos:column="6"/></name><operator pos:line="279" pos:column="6">.<pos:position pos:line="279" pos:column="7"/></operator><name pos:line="279" pos:column="7">pipelining<pos:position pos:line="279" pos:column="17"/></name></name> <operator pos:line="279" pos:column="18">=<pos:position pos:line="279" pos:column="19"/></operator> <name pos:line="279" pos:column="20">FALSE<pos:position pos:line="279" pos:column="25"/></name></expr>;<pos:position pos:line="279" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="280" pos:column="3">init_httprequest<pos:position pos:line="280" pos:column="19"/></name><argument_list pos:line="280" pos:column="19">(<argument><expr><operator pos:line="280" pos:column="20">&amp;<pos:position pos:line="280" pos:column="25"/></operator><name pos:line="280" pos:column="21">req<pos:position pos:line="280" pos:column="24"/></name></expr></argument>)<pos:position pos:line="280" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="26"/></expr_stmt>

  <for pos:line="282" pos:column="3">for<control pos:line="282" pos:column="6">(<init pos:line="282" pos:column="7">;<pos:position pos:line="282" pos:column="8"/></init><condition pos:line="282" pos:column="8">;<pos:position pos:line="282" pos:column="9"/></condition><incr/>)<pos:position pos:line="282" pos:column="10"/></control> <block pos:line="282" pos:column="11">{
    <decl_stmt><decl><type><name pos:line="283" pos:column="5">fd_set<pos:position pos:line="283" pos:column="11"/></name></type> <name pos:line="283" pos:column="12">input<pos:position pos:line="283" pos:column="17"/></name></decl>;<pos:position pos:line="283" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="284" pos:column="5">fd_set<pos:position pos:line="284" pos:column="11"/></name></type> <name pos:line="284" pos:column="12">output<pos:position pos:line="284" pos:column="18"/></name></decl>;<pos:position pos:line="284" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="285" pos:column="5">struct<pos:position pos:line="285" pos:column="11"/></name> <name pos:line="285" pos:column="12">timeval<pos:position pos:line="285" pos:column="19"/></name></name></type> <name pos:line="285" pos:column="20">timeout<pos:position pos:line="285" pos:column="27"/></name> <init pos:line="285" pos:column="28">= <expr><block pos:line="285" pos:column="30">{<expr><literal type="number" pos:line="285" pos:column="31">0<pos:position pos:line="285" pos:column="32"/></literal></expr>, <expr><literal type="number" pos:line="285" pos:column="34">250000L<pos:position pos:line="285" pos:column="41"/></literal></expr>}<pos:position pos:line="285" pos:column="42"/></block></expr></init></decl>;<pos:position pos:line="285" pos:column="43"/></decl_stmt> <comment type="block" pos:line="285" pos:column="44">/* 250 ms */</comment>
    <decl_stmt><decl><type><name pos:line="286" pos:column="5">curl_socket_t<pos:position pos:line="286" pos:column="18"/></name></type> <name pos:line="286" pos:column="19">maxfd<pos:position pos:line="286" pos:column="24"/></name> <init pos:line="286" pos:column="25">= <expr><operator pos:line="286" pos:column="27">(<pos:position pos:line="286" pos:column="28"/></operator><name pos:line="286" pos:column="28">curl_socket_t<pos:position pos:line="286" pos:column="41"/></name><operator pos:line="286" pos:column="41">)<pos:position pos:line="286" pos:column="42"/></operator><operator pos:line="286" pos:column="42">-<pos:position pos:line="286" pos:column="43"/></operator><literal type="number" pos:line="286" pos:column="43">1<pos:position pos:line="286" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="286" pos:column="45"/></decl_stmt>

    <comment type="block" pos:line="288" pos:column="5">/* Clear out closed sockets */</comment>
    <for pos:line="289" pos:column="5">for<control pos:line="289" pos:column="8">(<init><expr><name pos:line="289" pos:column="9">socket_idx<pos:position pos:line="289" pos:column="19"/></name> <operator pos:line="289" pos:column="20">=<pos:position pos:line="289" pos:column="21"/></operator> <name pos:line="289" pos:column="22">num_sockets<pos:position pos:line="289" pos:column="33"/></name> <operator pos:line="289" pos:column="34">-<pos:position pos:line="289" pos:column="35"/></operator> <literal type="number" pos:line="289" pos:column="36">1<pos:position pos:line="289" pos:column="37"/></literal></expr>;<pos:position pos:line="289" pos:column="38"/></init> <condition><expr><name pos:line="289" pos:column="39">socket_idx<pos:position pos:line="289" pos:column="49"/></name> <operator pos:line="289" pos:column="50">&gt;=<pos:position pos:line="289" pos:column="55"/></operator> <literal type="number" pos:line="289" pos:column="53">1<pos:position pos:line="289" pos:column="54"/></literal></expr>;<pos:position pos:line="289" pos:column="55"/></condition> <incr><expr><operator pos:line="289" pos:column="56">--<pos:position pos:line="289" pos:column="58"/></operator><name pos:line="289" pos:column="58">socket_idx<pos:position pos:line="289" pos:column="68"/></name></expr></incr>)<pos:position pos:line="289" pos:column="69"/></control> <block pos:line="289" pos:column="70">{
      <if pos:line="290" pos:column="7">if<condition pos:line="290" pos:column="9">(<expr><name pos:line="290" pos:column="10">CURL_SOCKET_BAD<pos:position pos:line="290" pos:column="25"/></name> <operator pos:line="290" pos:column="26">==<pos:position pos:line="290" pos:column="28"/></operator> <name><name pos:line="290" pos:column="29">all_sockets<pos:position pos:line="290" pos:column="40"/></name><index pos:line="290" pos:column="40">[<expr><name pos:line="290" pos:column="41">socket_idx<pos:position pos:line="290" pos:column="51"/></name></expr>]<pos:position pos:line="290" pos:column="52"/></index></name></expr>)<pos:position pos:line="290" pos:column="53"/></condition><then pos:line="290" pos:column="53"> <block pos:line="290" pos:column="54">{
        <decl_stmt><decl><type><name pos:line="291" pos:column="9">char<pos:position pos:line="291" pos:column="13"/></name> <modifier pos:line="291" pos:column="14">*<pos:position pos:line="291" pos:column="15"/></modifier></type><name pos:line="291" pos:column="15">dst<pos:position pos:line="291" pos:column="18"/></name> <init pos:line="291" pos:column="19">= <expr><operator pos:line="291" pos:column="21">(<pos:position pos:line="291" pos:column="22"/></operator><name pos:line="291" pos:column="22">char<pos:position pos:line="291" pos:column="26"/></name> <operator pos:line="291" pos:column="27">*<pos:position pos:line="291" pos:column="28"/></operator><operator pos:line="291" pos:column="28">)<pos:position pos:line="291" pos:column="29"/></operator> <operator pos:line="291" pos:column="30">(<pos:position pos:line="291" pos:column="31"/></operator><name pos:line="291" pos:column="31">all_sockets<pos:position pos:line="291" pos:column="42"/></name> <operator pos:line="291" pos:column="43">+<pos:position pos:line="291" pos:column="44"/></operator> <name pos:line="291" pos:column="45">socket_idx<pos:position pos:line="291" pos:column="55"/></name><operator pos:line="291" pos:column="55">)<pos:position pos:line="291" pos:column="56"/></operator></expr></init></decl>;<pos:position pos:line="291" pos:column="57"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="292" pos:column="9">char<pos:position pos:line="292" pos:column="13"/></name> <modifier pos:line="292" pos:column="14">*<pos:position pos:line="292" pos:column="15"/></modifier></type><name pos:line="292" pos:column="15">src<pos:position pos:line="292" pos:column="18"/></name> <init pos:line="292" pos:column="19">= <expr><operator pos:line="292" pos:column="21">(<pos:position pos:line="292" pos:column="22"/></operator><name pos:line="292" pos:column="22">char<pos:position pos:line="292" pos:column="26"/></name> <operator pos:line="292" pos:column="27">*<pos:position pos:line="292" pos:column="28"/></operator><operator pos:line="292" pos:column="28">)<pos:position pos:line="292" pos:column="29"/></operator> <operator pos:line="292" pos:column="30">(<pos:position pos:line="292" pos:column="31"/></operator><name pos:line="292" pos:column="31">all_sockets<pos:position pos:line="292" pos:column="42"/></name> <operator pos:line="292" pos:column="43">+<pos:position pos:line="292" pos:column="44"/></operator> <name pos:line="292" pos:column="45">socket_idx<pos:position pos:line="292" pos:column="55"/></name> <operator pos:line="292" pos:column="56">+<pos:position pos:line="292" pos:column="57"/></operator> <literal type="number" pos:line="292" pos:column="58">1<pos:position pos:line="292" pos:column="59"/></literal><operator pos:line="292" pos:column="59">)<pos:position pos:line="292" pos:column="60"/></operator></expr></init></decl>;<pos:position pos:line="292" pos:column="61"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="293" pos:column="9">char<pos:position pos:line="293" pos:column="13"/></name> <modifier pos:line="293" pos:column="14">*<pos:position pos:line="293" pos:column="15"/></modifier></type><name pos:line="293" pos:column="15">end<pos:position pos:line="293" pos:column="18"/></name> <init pos:line="293" pos:column="19">= <expr><operator pos:line="293" pos:column="21">(<pos:position pos:line="293" pos:column="22"/></operator><name pos:line="293" pos:column="22">char<pos:position pos:line="293" pos:column="26"/></name> <operator pos:line="293" pos:column="27">*<pos:position pos:line="293" pos:column="28"/></operator><operator pos:line="293" pos:column="28">)<pos:position pos:line="293" pos:column="29"/></operator> <operator pos:line="293" pos:column="30">(<pos:position pos:line="293" pos:column="31"/></operator><name pos:line="293" pos:column="31">all_sockets<pos:position pos:line="293" pos:column="42"/></name> <operator pos:line="293" pos:column="43">+<pos:position pos:line="293" pos:column="44"/></operator> <name pos:line="293" pos:column="45">num_sockets<pos:position pos:line="293" pos:column="56"/></name><operator pos:line="293" pos:column="56">)<pos:position pos:line="293" pos:column="57"/></operator></expr></init></decl>;<pos:position pos:line="293" pos:column="58"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="294" pos:column="9">memmove<pos:position pos:line="294" pos:column="16"/></name><argument_list pos:line="294" pos:column="16">(<argument><expr><name pos:line="294" pos:column="17">dst<pos:position pos:line="294" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="294" pos:column="22">src<pos:position pos:line="294" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="294" pos:column="27">end<pos:position pos:line="294" pos:column="30"/></name> <operator pos:line="294" pos:column="31">-<pos:position pos:line="294" pos:column="32"/></operator> <name pos:line="294" pos:column="33">src<pos:position pos:line="294" pos:column="36"/></name></expr></argument>)<pos:position pos:line="294" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="295" pos:column="9">num_sockets<pos:position pos:line="295" pos:column="20"/></name> <operator pos:line="295" pos:column="21">-=<pos:position pos:line="295" pos:column="23"/></operator> <literal type="number" pos:line="295" pos:column="24">1<pos:position pos:line="295" pos:column="25"/></literal></expr>;<pos:position pos:line="295" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="296" pos:column="8"/></block></then></if>
    }<pos:position pos:line="297" pos:column="6"/></block></for>

    <if pos:line="299" pos:column="5">if<condition pos:line="299" pos:column="7">(<expr><name pos:line="299" pos:column="8">got_exit_signal<pos:position pos:line="299" pos:column="23"/></name></expr>)<pos:position pos:line="299" pos:column="24"/></condition><then pos:line="299" pos:column="24">
      <block type="pseudo"><goto pos:line="300" pos:column="7">goto <name pos:line="300" pos:column="12">sws_cleanup<pos:position pos:line="300" pos:column="23"/></name>;<pos:position pos:line="300" pos:column="24"/></goto></block></then></if>

    <comment type="block" pos:line="302" pos:column="5">/* Set up for select */</comment>
    <expr_stmt><expr><call><name pos:line="303" pos:column="5">FD_ZERO<pos:position pos:line="303" pos:column="12"/></name><argument_list pos:line="303" pos:column="12">(<argument><expr><operator pos:line="303" pos:column="13">&amp;<pos:position pos:line="303" pos:column="18"/></operator><name pos:line="303" pos:column="14">input<pos:position pos:line="303" pos:column="19"/></name></expr></argument>)<pos:position pos:line="303" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="303" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="304" pos:column="5">FD_ZERO<pos:position pos:line="304" pos:column="12"/></name><argument_list pos:line="304" pos:column="12">(<argument><expr><operator pos:line="304" pos:column="13">&amp;<pos:position pos:line="304" pos:column="18"/></operator><name pos:line="304" pos:column="14">output<pos:position pos:line="304" pos:column="20"/></name></expr></argument>)<pos:position pos:line="304" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="304" pos:column="22"/></expr_stmt>

    <for pos:line="306" pos:column="5">for<control pos:line="306" pos:column="8">(<init><expr><name pos:line="306" pos:column="9">socket_idx<pos:position pos:line="306" pos:column="19"/></name> <operator pos:line="306" pos:column="20">=<pos:position pos:line="306" pos:column="21"/></operator> <literal type="number" pos:line="306" pos:column="22">0<pos:position pos:line="306" pos:column="23"/></literal></expr>;<pos:position pos:line="306" pos:column="24"/></init> <condition><expr><name pos:line="306" pos:column="25">socket_idx<pos:position pos:line="306" pos:column="35"/></name> <operator pos:line="306" pos:column="36">&lt;<pos:position pos:line="306" pos:column="40"/></operator> <name pos:line="306" pos:column="38">num_sockets<pos:position pos:line="306" pos:column="49"/></name></expr>;<pos:position pos:line="306" pos:column="50"/></condition> <incr><expr><operator pos:line="306" pos:column="51">++<pos:position pos:line="306" pos:column="53"/></operator><name pos:line="306" pos:column="53">socket_idx<pos:position pos:line="306" pos:column="63"/></name></expr></incr>)<pos:position pos:line="306" pos:column="64"/></control> <block pos:line="306" pos:column="65">{
      <comment type="block" pos:line="307" pos:column="7">/* Listen on all sockets */</comment>
      <expr_stmt><expr><call><name pos:line="308" pos:column="7">FD_SET<pos:position pos:line="308" pos:column="13"/></name><argument_list pos:line="308" pos:column="13">(<argument><expr><name><name pos:line="308" pos:column="14">all_sockets<pos:position pos:line="308" pos:column="25"/></name><index pos:line="308" pos:column="25">[<expr><name pos:line="308" pos:column="26">socket_idx<pos:position pos:line="308" pos:column="36"/></name></expr>]<pos:position pos:line="308" pos:column="37"/></index></name></expr></argument>, <argument><expr><operator pos:line="308" pos:column="39">&amp;<pos:position pos:line="308" pos:column="44"/></operator><name pos:line="308" pos:column="40">input<pos:position pos:line="308" pos:column="45"/></name></expr></argument>)<pos:position pos:line="308" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="47"/></expr_stmt>
      <if pos:line="309" pos:column="7">if<condition pos:line="309" pos:column="9">(<expr><name><name pos:line="309" pos:column="10">all_sockets<pos:position pos:line="309" pos:column="21"/></name><index pos:line="309" pos:column="21">[<expr><name pos:line="309" pos:column="22">socket_idx<pos:position pos:line="309" pos:column="32"/></name></expr>]<pos:position pos:line="309" pos:column="33"/></index></name> <operator pos:line="309" pos:column="34">&gt;<pos:position pos:line="309" pos:column="38"/></operator> <name pos:line="309" pos:column="36">maxfd<pos:position pos:line="309" pos:column="41"/></name></expr>)<pos:position pos:line="309" pos:column="42"/></condition><then pos:line="309" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><name pos:line="310" pos:column="9">maxfd<pos:position pos:line="310" pos:column="14"/></name> <operator pos:line="310" pos:column="15">=<pos:position pos:line="310" pos:column="16"/></operator> <name><name pos:line="310" pos:column="17">all_sockets<pos:position pos:line="310" pos:column="28"/></name><index pos:line="310" pos:column="28">[<expr><name pos:line="310" pos:column="29">socket_idx<pos:position pos:line="310" pos:column="39"/></name></expr>]<pos:position pos:line="310" pos:column="40"/></index></name></expr>;<pos:position pos:line="310" pos:column="41"/></expr_stmt></block></then></if>
    }<pos:position pos:line="311" pos:column="6"/></block></for>

    <if pos:line="313" pos:column="5">if<condition pos:line="313" pos:column="7">(<expr><name pos:line="313" pos:column="8">got_exit_signal<pos:position pos:line="313" pos:column="23"/></name></expr>)<pos:position pos:line="313" pos:column="24"/></condition><then pos:line="313" pos:column="24">
      <block type="pseudo"><goto pos:line="314" pos:column="7">goto <name pos:line="314" pos:column="12">sws_cleanup<pos:position pos:line="314" pos:column="23"/></name>;<pos:position pos:line="314" pos:column="24"/></goto></block></then></if>

    <expr_stmt><expr><name pos:line="316" pos:column="5">rc<pos:position pos:line="316" pos:column="7"/></name> <operator pos:line="316" pos:column="8">=<pos:position pos:line="316" pos:column="9"/></operator> <call><name pos:line="316" pos:column="10">select<pos:position pos:line="316" pos:column="16"/></name><argument_list pos:line="316" pos:column="16">(<argument><expr><operator pos:line="316" pos:column="17">(<pos:position pos:line="316" pos:column="18"/></operator><name pos:line="316" pos:column="18">int<pos:position pos:line="316" pos:column="21"/></name><operator pos:line="316" pos:column="21">)<pos:position pos:line="316" pos:column="22"/></operator><name pos:line="316" pos:column="22">maxfd<pos:position pos:line="316" pos:column="27"/></name> <operator pos:line="316" pos:column="28">+<pos:position pos:line="316" pos:column="29"/></operator> <literal type="number" pos:line="316" pos:column="30">1<pos:position pos:line="316" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="316" pos:column="33">&amp;<pos:position pos:line="316" pos:column="38"/></operator><name pos:line="316" pos:column="34">input<pos:position pos:line="316" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="316" pos:column="41">&amp;<pos:position pos:line="316" pos:column="46"/></operator><name pos:line="316" pos:column="42">output<pos:position pos:line="316" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="316" pos:column="50">NULL<pos:position pos:line="316" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="316" pos:column="56">&amp;<pos:position pos:line="316" pos:column="61"/></operator><name pos:line="316" pos:column="57">timeout<pos:position pos:line="316" pos:column="64"/></name></expr></argument>)<pos:position pos:line="316" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="316" pos:column="66"/></expr_stmt>
    <if pos:line="317" pos:column="5">if<condition pos:line="317" pos:column="7">(<expr><name pos:line="317" pos:column="8">rc<pos:position pos:line="317" pos:column="10"/></name> <operator pos:line="317" pos:column="11">&lt;<pos:position pos:line="317" pos:column="15"/></operator> <literal type="number" pos:line="317" pos:column="13">0<pos:position pos:line="317" pos:column="14"/></literal></expr>)<pos:position pos:line="317" pos:column="15"/></condition><then pos:line="317" pos:column="15"> <block pos:line="317" pos:column="16">{
      <expr_stmt><expr><name pos:line="318" pos:column="7">error<pos:position pos:line="318" pos:column="12"/></name> <operator pos:line="318" pos:column="13">=<pos:position pos:line="318" pos:column="14"/></operator> <name pos:line="318" pos:column="15">SOCKERRNO<pos:position pos:line="318" pos:column="24"/></name></expr>;<pos:position pos:line="318" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="319" pos:column="7">logmsg<pos:position pos:line="319" pos:column="13"/></name><argument_list pos:line="319" pos:column="13">(<argument><expr><literal type="string" pos:line="319" pos:column="14">"select() failed with error: (%d) %s"<pos:position pos:line="319" pos:column="51"/></literal></expr></argument>,
             <argument><expr><name pos:line="320" pos:column="14">error<pos:position pos:line="320" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="320" pos:column="21">strerror<pos:position pos:line="320" pos:column="29"/></name><argument_list pos:line="320" pos:column="29">(<argument><expr><name pos:line="320" pos:column="30">error<pos:position pos:line="320" pos:column="35"/></name></expr></argument>)<pos:position pos:line="320" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="320" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="38"/></expr_stmt>
      <goto pos:line="321" pos:column="7">goto <name pos:line="321" pos:column="12">sws_cleanup<pos:position pos:line="321" pos:column="23"/></name>;<pos:position pos:line="321" pos:column="24"/></goto>
    }<pos:position pos:line="322" pos:column="6"/></block></then></if>

    <if pos:line="324" pos:column="5">if<condition pos:line="324" pos:column="7">(<expr><name pos:line="324" pos:column="8">got_exit_signal<pos:position pos:line="324" pos:column="23"/></name></expr>)<pos:position pos:line="324" pos:column="24"/></condition><then pos:line="324" pos:column="24">
      <block type="pseudo"><goto pos:line="325" pos:column="7">goto <name pos:line="325" pos:column="12">sws_cleanup<pos:position pos:line="325" pos:column="23"/></name>;<pos:position pos:line="325" pos:column="24"/></goto></block></then></if>

    <if pos:line="327" pos:column="5">if<condition pos:line="327" pos:column="7">(<expr><name pos:line="327" pos:column="8">rc<pos:position pos:line="327" pos:column="10"/></name> <operator pos:line="327" pos:column="11">==<pos:position pos:line="327" pos:column="13"/></operator> <literal type="number" pos:line="327" pos:column="14">0<pos:position pos:line="327" pos:column="15"/></literal></expr>)<pos:position pos:line="327" pos:column="16"/></condition><then pos:line="327" pos:column="16"> <block pos:line="327" pos:column="17">{
      <comment type="block" pos:line="328" pos:column="7">/* Timed out - try again */</comment>
      <continue pos:line="329" pos:column="7">continue;<pos:position pos:line="329" pos:column="16"/></continue>
    }<pos:position pos:line="330" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="332" pos:column="5">/* Check if the listening socket is ready to accept */</comment>
    <if pos:line="333" pos:column="5">if<condition pos:line="333" pos:column="7">(<expr><call><name pos:line="333" pos:column="8">FD_ISSET<pos:position pos:line="333" pos:column="16"/></name><argument_list pos:line="333" pos:column="16">(<argument><expr><name><name pos:line="333" pos:column="17">all_sockets<pos:position pos:line="333" pos:column="28"/></name><index pos:line="333" pos:column="28">[<expr><literal type="number" pos:line="333" pos:column="29">0<pos:position pos:line="333" pos:column="30"/></literal></expr>]<pos:position pos:line="333" pos:column="31"/></index></name></expr></argument>, <argument><expr><operator pos:line="333" pos:column="33">&amp;<pos:position pos:line="333" pos:column="38"/></operator><name pos:line="333" pos:column="34">input<pos:position pos:line="333" pos:column="39"/></name></expr></argument>)<pos:position pos:line="333" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="333" pos:column="41"/></condition><then pos:line="333" pos:column="41"> <block pos:line="333" pos:column="42">{
      <comment type="block" pos:line="334" pos:column="7">/* Service all queued connections */</comment>
      <decl_stmt><decl><type><name pos:line="335" pos:column="7">curl_socket_t<pos:position pos:line="335" pos:column="20"/></name></type> <name pos:line="335" pos:column="21">msgsock<pos:position pos:line="335" pos:column="28"/></name></decl>;<pos:position pos:line="335" pos:column="29"/></decl_stmt>
      <do pos:line="336" pos:column="7">do <block pos:line="336" pos:column="10">{
        <expr_stmt><expr><name pos:line="337" pos:column="9">msgsock<pos:position pos:line="337" pos:column="16"/></name> <operator pos:line="337" pos:column="17">=<pos:position pos:line="337" pos:column="18"/></operator> <call><name pos:line="337" pos:column="19">accept_connection<pos:position pos:line="337" pos:column="36"/></name><argument_list pos:line="337" pos:column="36">(<argument><expr><name pos:line="337" pos:column="37">sock<pos:position pos:line="337" pos:column="41"/></name></expr></argument>)<pos:position pos:line="337" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="338" pos:column="9">logmsg<pos:position pos:line="338" pos:column="15"/></name><argument_list pos:line="338" pos:column="15">(<argument><expr><literal type="string" pos:line="338" pos:column="16">"accept_connection %d returned %d"<pos:position pos:line="338" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="338" pos:column="52">sock<pos:position pos:line="338" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="338" pos:column="58">msgsock<pos:position pos:line="338" pos:column="65"/></name></expr></argument>)<pos:position pos:line="338" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="338" pos:column="67"/></expr_stmt>
        <if pos:line="339" pos:column="9">if<condition pos:line="339" pos:column="11">(<expr><name pos:line="339" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="339" pos:column="27"/></name> <operator pos:line="339" pos:column="28">==<pos:position pos:line="339" pos:column="30"/></operator> <name pos:line="339" pos:column="31">msgsock<pos:position pos:line="339" pos:column="38"/></name></expr>)<pos:position pos:line="339" pos:column="39"/></condition><then pos:line="339" pos:column="39">
          <block type="pseudo"><goto pos:line="340" pos:column="11">goto <name pos:line="340" pos:column="16">sws_cleanup<pos:position pos:line="340" pos:column="27"/></name>;<pos:position pos:line="340" pos:column="28"/></goto></block></then></if>
      }<pos:position pos:line="341" pos:column="8"/></block> while<condition pos:line="341" pos:column="14">(<expr><name pos:line="341" pos:column="15">msgsock<pos:position pos:line="341" pos:column="22"/></name> <operator pos:line="341" pos:column="23">&gt;<pos:position pos:line="341" pos:column="27"/></operator> <literal type="number" pos:line="341" pos:column="25">0<pos:position pos:line="341" pos:column="26"/></literal></expr>)<pos:position pos:line="341" pos:column="27"/></condition>;<pos:position pos:line="341" pos:column="28"/></do>
    }<pos:position pos:line="342" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="344" pos:column="5">/* Service all connections that are ready */</comment>
    <for pos:line="345" pos:column="5">for<control pos:line="345" pos:column="8">(<init><expr><name pos:line="345" pos:column="9">socket_idx<pos:position pos:line="345" pos:column="19"/></name> <operator pos:line="345" pos:column="20">=<pos:position pos:line="345" pos:column="21"/></operator> <literal type="number" pos:line="345" pos:column="22">1<pos:position pos:line="345" pos:column="23"/></literal></expr>;<pos:position pos:line="345" pos:column="24"/></init> <condition><expr><name pos:line="345" pos:column="25">socket_idx<pos:position pos:line="345" pos:column="35"/></name> <operator pos:line="345" pos:column="36">&lt;<pos:position pos:line="345" pos:column="40"/></operator> <name pos:line="345" pos:column="38">num_sockets<pos:position pos:line="345" pos:column="49"/></name></expr>;<pos:position pos:line="345" pos:column="50"/></condition> <incr><expr><operator pos:line="345" pos:column="51">++<pos:position pos:line="345" pos:column="53"/></operator><name pos:line="345" pos:column="53">socket_idx<pos:position pos:line="345" pos:column="63"/></name></expr></incr>)<pos:position pos:line="345" pos:column="64"/></control> <block pos:line="345" pos:column="65">{
      <if pos:line="346" pos:column="7">if<condition pos:line="346" pos:column="9">(<expr><call><name pos:line="346" pos:column="10">FD_ISSET<pos:position pos:line="346" pos:column="18"/></name><argument_list pos:line="346" pos:column="18">(<argument><expr><name><name pos:line="346" pos:column="19">all_sockets<pos:position pos:line="346" pos:column="30"/></name><index pos:line="346" pos:column="30">[<expr><name pos:line="346" pos:column="31">socket_idx<pos:position pos:line="346" pos:column="41"/></name></expr>]<pos:position pos:line="346" pos:column="42"/></index></name></expr></argument>, <argument><expr><operator pos:line="346" pos:column="44">&amp;<pos:position pos:line="346" pos:column="49"/></operator><name pos:line="346" pos:column="45">input<pos:position pos:line="346" pos:column="50"/></name></expr></argument>)<pos:position pos:line="346" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="346" pos:column="52"/></condition><then pos:line="346" pos:column="52"> <block pos:line="346" pos:column="53">{
        <if pos:line="347" pos:column="9">if<condition pos:line="347" pos:column="11">(<expr><name pos:line="347" pos:column="12">got_exit_signal<pos:position pos:line="347" pos:column="27"/></name></expr>)<pos:position pos:line="347" pos:column="28"/></condition><then pos:line="347" pos:column="28">
          <block type="pseudo"><goto pos:line="348" pos:column="11">goto <name pos:line="348" pos:column="16">sws_cleanup<pos:position pos:line="348" pos:column="27"/></name>;<pos:position pos:line="348" pos:column="28"/></goto></block></then></if>

        <comment type="block" pos:line="350" pos:column="9">/* Service this connection until it has nothing available */</comment>
        <do pos:line="351" pos:column="9">do <block pos:line="351" pos:column="12">{
          <expr_stmt><expr><name pos:line="352" pos:column="11">rc<pos:position pos:line="352" pos:column="13"/></name> <operator pos:line="352" pos:column="14">=<pos:position pos:line="352" pos:column="15"/></operator> <call><name pos:line="352" pos:column="16">service_connection<pos:position pos:line="352" pos:column="34"/></name><argument_list pos:line="352" pos:column="34">(<argument><expr><name><name pos:line="352" pos:column="35">all_sockets<pos:position pos:line="352" pos:column="46"/></name><index pos:line="352" pos:column="46">[<expr><name pos:line="352" pos:column="47">socket_idx<pos:position pos:line="352" pos:column="57"/></name></expr>]<pos:position pos:line="352" pos:column="58"/></index></name></expr></argument>, <argument><expr><operator pos:line="352" pos:column="60">&amp;<pos:position pos:line="352" pos:column="65"/></operator><name pos:line="352" pos:column="61">req<pos:position pos:line="352" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="352" pos:column="66">sock<pos:position pos:line="352" pos:column="70"/></name></expr></argument>,
                                  <argument><expr><name pos:line="353" pos:column="35">connecthost<pos:position pos:line="353" pos:column="46"/></name></expr></argument>)<pos:position pos:line="353" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="353" pos:column="48"/></expr_stmt>
          <if pos:line="354" pos:column="11">if<condition pos:line="354" pos:column="13">(<expr><name pos:line="354" pos:column="14">got_exit_signal<pos:position pos:line="354" pos:column="29"/></name></expr>)<pos:position pos:line="354" pos:column="30"/></condition><then pos:line="354" pos:column="30">
            <block type="pseudo"><goto pos:line="355" pos:column="13">goto <name pos:line="355" pos:column="18">sws_cleanup<pos:position pos:line="355" pos:column="29"/></name>;<pos:position pos:line="355" pos:column="30"/></goto></block></then></if>

          <if pos:line="357" pos:column="11">if<condition pos:line="357" pos:column="13">(<expr><name pos:line="357" pos:column="14">rc<pos:position pos:line="357" pos:column="16"/></name> <operator pos:line="357" pos:column="17">&lt;<pos:position pos:line="357" pos:column="21"/></operator> <literal type="number" pos:line="357" pos:column="19">0<pos:position pos:line="357" pos:column="20"/></literal></expr>)<pos:position pos:line="357" pos:column="21"/></condition><then pos:line="357" pos:column="21"> <block pos:line="357" pos:column="22">{
            <expr_stmt><expr><call><name pos:line="358" pos:column="13">logmsg<pos:position pos:line="358" pos:column="19"/></name><argument_list pos:line="358" pos:column="19">(<argument><expr><literal type="string" pos:line="358" pos:column="20">"====&gt; Client disconnect %d"<pos:position pos:line="358" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="358" pos:column="50">req<pos:position pos:line="358" pos:column="53"/></name><operator pos:line="358" pos:column="53">.<pos:position pos:line="358" pos:column="54"/></operator><name pos:line="358" pos:column="54">connmon<pos:position pos:line="358" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="358" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="358" pos:column="63"/></expr_stmt>

            <if pos:line="360" pos:column="13">if<condition pos:line="360" pos:column="15">(<expr><name><name pos:line="360" pos:column="16">req<pos:position pos:line="360" pos:column="19"/></name><operator pos:line="360" pos:column="19">.<pos:position pos:line="360" pos:column="20"/></operator><name pos:line="360" pos:column="20">connmon<pos:position pos:line="360" pos:column="27"/></name></name></expr>)<pos:position pos:line="360" pos:column="28"/></condition><then pos:line="360" pos:column="28"> <block pos:line="360" pos:column="29">{
              <decl_stmt><decl><type><specifier pos:line="361" pos:column="15">const<pos:position pos:line="361" pos:column="20"/></specifier> <name pos:line="361" pos:column="21">char<pos:position pos:line="361" pos:column="25"/></name> <modifier pos:line="361" pos:column="26">*<pos:position pos:line="361" pos:column="27"/></modifier></type><name pos:line="361" pos:column="27">keepopen<pos:position pos:line="361" pos:column="35"/></name> <init pos:line="361" pos:column="36">= <expr><literal type="string" pos:line="361" pos:column="38">"[DISCONNECT]\n"<pos:position pos:line="361" pos:column="54"/></literal></expr></init></decl>;<pos:position pos:line="361" pos:column="55"/></decl_stmt>
              <expr_stmt><expr><call><name pos:line="362" pos:column="15">storerequest<pos:position pos:line="362" pos:column="27"/></name><argument_list pos:line="362" pos:column="27">(<argument><expr><name pos:line="362" pos:column="28">keepopen<pos:position pos:line="362" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="362" pos:column="38">strlen<pos:position pos:line="362" pos:column="44"/></name><argument_list pos:line="362" pos:column="44">(<argument><expr><name pos:line="362" pos:column="45">keepopen<pos:position pos:line="362" pos:column="53"/></name></expr></argument>)<pos:position pos:line="362" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="362" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="362" pos:column="56"/></expr_stmt>
            }<pos:position pos:line="363" pos:column="14"/></block></then></if>

            <if pos:line="365" pos:column="13">if<condition pos:line="365" pos:column="15">(<expr><operator pos:line="365" pos:column="16">!<pos:position pos:line="365" pos:column="17"/></operator><name><name pos:line="365" pos:column="17">req<pos:position pos:line="365" pos:column="20"/></name><operator pos:line="365" pos:column="20">.<pos:position pos:line="365" pos:column="21"/></operator><name pos:line="365" pos:column="21">open<pos:position pos:line="365" pos:column="25"/></name></name></expr>)<pos:position pos:line="365" pos:column="26"/></condition><then pos:line="365" pos:column="26">
              <comment type="block" pos:line="366" pos:column="15">/* When instructed to close connection after server-reply we
                 wait a very small amount of time before doing so. If this
                 is not done client might get an ECONNRESET before reading
                 a single byte of server-reply. */</comment>
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="370" pos:column="15">wait_ms<pos:position pos:line="370" pos:column="22"/></name><argument_list pos:line="370" pos:column="22">(<argument><expr><literal type="number" pos:line="370" pos:column="23">50<pos:position pos:line="370" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="370" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="370" pos:column="27"/></expr_stmt></block></then></if>

            <if pos:line="372" pos:column="13">if<condition pos:line="372" pos:column="15">(<expr><name><name pos:line="372" pos:column="16">all_sockets<pos:position pos:line="372" pos:column="27"/></name><index pos:line="372" pos:column="27">[<expr><name pos:line="372" pos:column="28">socket_idx<pos:position pos:line="372" pos:column="38"/></name></expr>]<pos:position pos:line="372" pos:column="39"/></index></name> <operator pos:line="372" pos:column="40">!=<pos:position pos:line="372" pos:column="42"/></operator> <name pos:line="372" pos:column="43">CURL_SOCKET_BAD<pos:position pos:line="372" pos:column="58"/></name></expr>)<pos:position pos:line="372" pos:column="59"/></condition><then pos:line="372" pos:column="59"> <block pos:line="372" pos:column="60">{
              <expr_stmt><expr><call><name pos:line="373" pos:column="15">sclose<pos:position pos:line="373" pos:column="21"/></name><argument_list pos:line="373" pos:column="21">(<argument><expr><name><name pos:line="373" pos:column="22">all_sockets<pos:position pos:line="373" pos:column="33"/></name><index pos:line="373" pos:column="33">[<expr><name pos:line="373" pos:column="34">socket_idx<pos:position pos:line="373" pos:column="44"/></name></expr>]<pos:position pos:line="373" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="373" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="47"/></expr_stmt>
              <expr_stmt><expr><name><name pos:line="374" pos:column="15">all_sockets<pos:position pos:line="374" pos:column="26"/></name><index pos:line="374" pos:column="26">[<expr><name pos:line="374" pos:column="27">socket_idx<pos:position pos:line="374" pos:column="37"/></name></expr>]<pos:position pos:line="374" pos:column="38"/></index></name> <operator pos:line="374" pos:column="39">=<pos:position pos:line="374" pos:column="40"/></operator> <name pos:line="374" pos:column="41">CURL_SOCKET_BAD<pos:position pos:line="374" pos:column="56"/></name></expr>;<pos:position pos:line="374" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="375" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="377" pos:column="13">serverlogslocked<pos:position pos:line="377" pos:column="29"/></name> <operator pos:line="377" pos:column="30">-=<pos:position pos:line="377" pos:column="32"/></operator> <literal type="number" pos:line="377" pos:column="33">1<pos:position pos:line="377" pos:column="34"/></literal></expr>;<pos:position pos:line="377" pos:column="35"/></expr_stmt>
            <if pos:line="378" pos:column="13">if<condition pos:line="378" pos:column="15">(<expr><operator pos:line="378" pos:column="16">!<pos:position pos:line="378" pos:column="17"/></operator><name pos:line="378" pos:column="17">serverlogslocked<pos:position pos:line="378" pos:column="33"/></name></expr>)<pos:position pos:line="378" pos:column="34"/></condition><then pos:line="378" pos:column="34">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="379" pos:column="15">clear_advisor_read_lock<pos:position pos:line="379" pos:column="38"/></name><argument_list pos:line="379" pos:column="38">(<argument><expr><name pos:line="379" pos:column="39">SERVERLOGS_LOCK<pos:position pos:line="379" pos:column="54"/></name></expr></argument>)<pos:position pos:line="379" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="379" pos:column="56"/></expr_stmt></block></then></if>

            <if pos:line="381" pos:column="13">if<condition pos:line="381" pos:column="15">(<expr><name><name pos:line="381" pos:column="16">req<pos:position pos:line="381" pos:column="19"/></name><operator pos:line="381" pos:column="19">.<pos:position pos:line="381" pos:column="20"/></operator><name pos:line="381" pos:column="20">testno<pos:position pos:line="381" pos:column="26"/></name></name> <operator pos:line="381" pos:column="27">==<pos:position pos:line="381" pos:column="29"/></operator> <name pos:line="381" pos:column="30">DOCNUMBER_QUIT<pos:position pos:line="381" pos:column="44"/></name></expr>)<pos:position pos:line="381" pos:column="45"/></condition><then pos:line="381" pos:column="45">
              <block type="pseudo"><goto pos:line="382" pos:column="15">goto <name pos:line="382" pos:column="20">sws_cleanup<pos:position pos:line="382" pos:column="31"/></name>;<pos:position pos:line="382" pos:column="32"/></goto></block></then></if>
          }<pos:position pos:line="383" pos:column="12"/></block></then></if>

          <comment type="block" pos:line="385" pos:column="11">/* Reset the request, unless we're still in the middle of reading */</comment>
          <if pos:line="386" pos:column="11">if<condition pos:line="386" pos:column="13">(<expr><name pos:line="386" pos:column="14">rc<pos:position pos:line="386" pos:column="16"/></name> <operator pos:line="386" pos:column="17">!=<pos:position pos:line="386" pos:column="19"/></operator> <literal type="number" pos:line="386" pos:column="20">0<pos:position pos:line="386" pos:column="21"/></literal></expr>)<pos:position pos:line="386" pos:column="22"/></condition><then pos:line="386" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="387" pos:column="13">init_httprequest<pos:position pos:line="387" pos:column="29"/></name><argument_list pos:line="387" pos:column="29">(<argument><expr><operator pos:line="387" pos:column="30">&amp;<pos:position pos:line="387" pos:column="35"/></operator><name pos:line="387" pos:column="31">req<pos:position pos:line="387" pos:column="34"/></name></expr></argument>)<pos:position pos:line="387" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="387" pos:column="36"/></expr_stmt></block></then></if>
        }<pos:position pos:line="388" pos:column="10"/></block> while<condition pos:line="388" pos:column="16">(<expr><name pos:line="388" pos:column="17">rc<pos:position pos:line="388" pos:column="19"/></name> <operator pos:line="388" pos:column="20">&gt;<pos:position pos:line="388" pos:column="24"/></operator> <literal type="number" pos:line="388" pos:column="22">0<pos:position pos:line="388" pos:column="23"/></literal></expr>)<pos:position pos:line="388" pos:column="24"/></condition>;<pos:position pos:line="388" pos:column="25"/></do>
      }<pos:position pos:line="389" pos:column="8"/></block></then></if>
    }<pos:position pos:line="390" pos:column="6"/></block></for>

    <if pos:line="392" pos:column="5">if<condition pos:line="392" pos:column="7">(<expr><name pos:line="392" pos:column="8">got_exit_signal<pos:position pos:line="392" pos:column="23"/></name></expr>)<pos:position pos:line="392" pos:column="24"/></condition><then pos:line="392" pos:column="24">
      <block type="pseudo"><goto pos:line="393" pos:column="7">goto <name pos:line="393" pos:column="12">sws_cleanup<pos:position pos:line="393" pos:column="23"/></name>;<pos:position pos:line="393" pos:column="24"/></goto></block></then></if>
  }<pos:position pos:line="394" pos:column="4"/></block></for>

<label><name pos:line="396" pos:column="1">sws_cleanup<pos:position pos:line="396" pos:column="12"/></name>:<pos:position pos:line="396" pos:column="13"/></label>

  <for pos:line="398" pos:column="3">for<control pos:line="398" pos:column="6">(<init><expr><name pos:line="398" pos:column="7">socket_idx<pos:position pos:line="398" pos:column="17"/></name> <operator pos:line="398" pos:column="18">=<pos:position pos:line="398" pos:column="19"/></operator> <literal type="number" pos:line="398" pos:column="20">1<pos:position pos:line="398" pos:column="21"/></literal></expr>;<pos:position pos:line="398" pos:column="22"/></init> <condition><expr><name pos:line="398" pos:column="23">socket_idx<pos:position pos:line="398" pos:column="33"/></name> <operator pos:line="398" pos:column="34">&lt;<pos:position pos:line="398" pos:column="38"/></operator> <name pos:line="398" pos:column="36">num_sockets<pos:position pos:line="398" pos:column="47"/></name></expr>;<pos:position pos:line="398" pos:column="48"/></condition> <incr><expr><operator pos:line="398" pos:column="49">++<pos:position pos:line="398" pos:column="51"/></operator><name pos:line="398" pos:column="51">socket_idx<pos:position pos:line="398" pos:column="61"/></name></expr></incr>)<pos:position pos:line="398" pos:column="62"/></control>
    <block type="pseudo"><if pos:line="399" pos:column="5">if<condition pos:line="399" pos:column="7">(<expr><operator pos:line="399" pos:column="8">(<pos:position pos:line="399" pos:column="9"/></operator><name><name pos:line="399" pos:column="9">all_sockets<pos:position pos:line="399" pos:column="20"/></name><index pos:line="399" pos:column="20">[<expr><name pos:line="399" pos:column="21">socket_idx<pos:position pos:line="399" pos:column="31"/></name></expr>]<pos:position pos:line="399" pos:column="32"/></index></name> <operator pos:line="399" pos:column="33">!=<pos:position pos:line="399" pos:column="35"/></operator> <name pos:line="399" pos:column="36">sock<pos:position pos:line="399" pos:column="40"/></name><operator pos:line="399" pos:column="40">)<pos:position pos:line="399" pos:column="41"/></operator> <operator pos:line="399" pos:column="42">&amp;&amp;<pos:position pos:line="399" pos:column="52"/></operator>
     <operator pos:line="400" pos:column="6">(<pos:position pos:line="400" pos:column="7"/></operator><name><name pos:line="400" pos:column="7">all_sockets<pos:position pos:line="400" pos:column="18"/></name><index pos:line="400" pos:column="18">[<expr><name pos:line="400" pos:column="19">socket_idx<pos:position pos:line="400" pos:column="29"/></name></expr>]<pos:position pos:line="400" pos:column="30"/></index></name> <operator pos:line="400" pos:column="31">!=<pos:position pos:line="400" pos:column="33"/></operator> <name pos:line="400" pos:column="34">CURL_SOCKET_BAD<pos:position pos:line="400" pos:column="49"/></name><operator pos:line="400" pos:column="49">)<pos:position pos:line="400" pos:column="50"/></operator></expr>)<pos:position pos:line="400" pos:column="51"/></condition><then pos:line="400" pos:column="51">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="401" pos:column="7">sclose<pos:position pos:line="401" pos:column="13"/></name><argument_list pos:line="401" pos:column="13">(<argument><expr><name><name pos:line="401" pos:column="14">all_sockets<pos:position pos:line="401" pos:column="25"/></name><index pos:line="401" pos:column="25">[<expr><name pos:line="401" pos:column="26">socket_idx<pos:position pos:line="401" pos:column="36"/></name></expr>]<pos:position pos:line="401" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="401" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="401" pos:column="39"/></expr_stmt></block></then></if></block></for>

  <if pos:line="403" pos:column="3">if<condition pos:line="403" pos:column="5">(<expr><name pos:line="403" pos:column="6">sock<pos:position pos:line="403" pos:column="10"/></name> <operator pos:line="403" pos:column="11">!=<pos:position pos:line="403" pos:column="13"/></operator> <name pos:line="403" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="403" pos:column="29"/></name></expr>)<pos:position pos:line="403" pos:column="30"/></condition><then pos:line="403" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="404" pos:column="5">sclose<pos:position pos:line="404" pos:column="11"/></name><argument_list pos:line="404" pos:column="11">(<argument><expr><name pos:line="404" pos:column="12">sock<pos:position pos:line="404" pos:column="16"/></name></expr></argument>)<pos:position pos:line="404" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="404" pos:column="18"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="406" pos:column="1">#<cpp:directive pos:line="406" pos:column="2">ifdef<pos:position pos:line="406" pos:column="7"/></cpp:directive> <name pos:line="406" pos:column="8">USE_UNIX_SOCKETS<pos:position pos:line="406" pos:column="24"/></name></cpp:ifdef>
  <if pos:line="407" pos:column="3">if<condition pos:line="407" pos:column="5">(<expr><name pos:line="407" pos:column="6">unlink_socket<pos:position pos:line="407" pos:column="19"/></name> <operator pos:line="407" pos:column="20">&amp;&amp;<pos:position pos:line="407" pos:column="30"/></operator> <name pos:line="407" pos:column="23">socket_domain<pos:position pos:line="407" pos:column="36"/></name> <operator pos:line="407" pos:column="37">==<pos:position pos:line="407" pos:column="39"/></operator> <name pos:line="407" pos:column="40">AF_UNIX<pos:position pos:line="407" pos:column="47"/></name></expr>)<pos:position pos:line="407" pos:column="48"/></condition><then pos:line="407" pos:column="48"> <block pos:line="407" pos:column="49">{
    <expr_stmt><expr><name pos:line="408" pos:column="5">rc<pos:position pos:line="408" pos:column="7"/></name> <operator pos:line="408" pos:column="8">=<pos:position pos:line="408" pos:column="9"/></operator> <call><name pos:line="408" pos:column="10">unlink<pos:position pos:line="408" pos:column="16"/></name><argument_list pos:line="408" pos:column="16">(<argument><expr><name pos:line="408" pos:column="17">unix_socket<pos:position pos:line="408" pos:column="28"/></name></expr></argument>)<pos:position pos:line="408" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="408" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="409" pos:column="5">logmsg<pos:position pos:line="409" pos:column="11"/></name><argument_list pos:line="409" pos:column="11">(<argument><expr><literal type="string" pos:line="409" pos:column="12">"unlink(%s) = %d (%s)"<pos:position pos:line="409" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="409" pos:column="36">unix_socket<pos:position pos:line="409" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="409" pos:column="49">rc<pos:position pos:line="409" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="409" pos:column="53">strerror<pos:position pos:line="409" pos:column="61"/></name><argument_list pos:line="409" pos:column="61">(<argument><expr><name pos:line="409" pos:column="62">rc<pos:position pos:line="409" pos:column="64"/></name></expr></argument>)<pos:position pos:line="409" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="409" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="409" pos:column="67"/></expr_stmt>
  }<pos:position pos:line="410" pos:column="4"/></block></then></if>
<cpp:endif pos:line="411" pos:column="1">#<cpp:directive pos:line="411" pos:column="2">endif<pos:position pos:line="411" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="413" pos:column="3">if<condition pos:line="413" pos:column="5">(<expr><name pos:line="413" pos:column="6">got_exit_signal<pos:position pos:line="413" pos:column="21"/></name></expr>)<pos:position pos:line="413" pos:column="22"/></condition><then pos:line="413" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="414" pos:column="5">logmsg<pos:position pos:line="414" pos:column="11"/></name><argument_list pos:line="414" pos:column="11">(<argument><expr><literal type="string" pos:line="414" pos:column="12">"signalled to die"<pos:position pos:line="414" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="414" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="414" pos:column="32"/></expr_stmt></block></then></if>

  <if pos:line="416" pos:column="3">if<condition pos:line="416" pos:column="5">(<expr><name pos:line="416" pos:column="6">wrotepidfile<pos:position pos:line="416" pos:column="18"/></name></expr>)<pos:position pos:line="416" pos:column="19"/></condition><then pos:line="416" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="417" pos:column="5">unlink<pos:position pos:line="417" pos:column="11"/></name><argument_list pos:line="417" pos:column="11">(<argument><expr><name pos:line="417" pos:column="12">pidname<pos:position pos:line="417" pos:column="19"/></name></expr></argument>)<pos:position pos:line="417" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="417" pos:column="21"/></expr_stmt></block></then></if>

  <if pos:line="419" pos:column="3">if<condition pos:line="419" pos:column="5">(<expr><name pos:line="419" pos:column="6">serverlogslocked<pos:position pos:line="419" pos:column="22"/></name></expr>)<pos:position pos:line="419" pos:column="23"/></condition><then pos:line="419" pos:column="23"> <block pos:line="419" pos:column="24">{
    <expr_stmt><expr><name pos:line="420" pos:column="5">serverlogslocked<pos:position pos:line="420" pos:column="21"/></name> <operator pos:line="420" pos:column="22">=<pos:position pos:line="420" pos:column="23"/></operator> <literal type="number" pos:line="420" pos:column="24">0<pos:position pos:line="420" pos:column="25"/></literal></expr>;<pos:position pos:line="420" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="421" pos:column="5">clear_advisor_read_lock<pos:position pos:line="421" pos:column="28"/></name><argument_list pos:line="421" pos:column="28">(<argument><expr><name pos:line="421" pos:column="29">SERVERLOGS_LOCK<pos:position pos:line="421" pos:column="44"/></name></expr></argument>)<pos:position pos:line="421" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="421" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="422" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="424" pos:column="3">restore_signal_handlers<pos:position pos:line="424" pos:column="26"/></name><argument_list pos:line="424" pos:column="26">()<pos:position pos:line="424" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="424" pos:column="29"/></expr_stmt>

  <if pos:line="426" pos:column="3">if<condition pos:line="426" pos:column="5">(<expr><name pos:line="426" pos:column="6">got_exit_signal<pos:position pos:line="426" pos:column="21"/></name></expr>)<pos:position pos:line="426" pos:column="22"/></condition><then pos:line="426" pos:column="22"> <block pos:line="426" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="427" pos:column="5">logmsg<pos:position pos:line="427" pos:column="11"/></name><argument_list pos:line="427" pos:column="11">(<argument><expr><literal type="string" pos:line="427" pos:column="12">"========&gt; %s sws (%s pid: %ld) exits with signal (%d)"<pos:position pos:line="427" pos:column="70"/></literal></expr></argument>,
           <argument><expr><name pos:line="428" pos:column="12">socket_type<pos:position pos:line="428" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="428" pos:column="25">location_str<pos:position pos:line="428" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="428" pos:column="39">pid<pos:position pos:line="428" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="428" pos:column="44">exit_signal<pos:position pos:line="428" pos:column="55"/></name></expr></argument>)<pos:position pos:line="428" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="428" pos:column="57"/></expr_stmt>
    <comment type="block" pos:line="429" pos:column="5">/*
     * To properly set the return status of the process we
     * must raise the same signal SIGINT or SIGTERM that we
     * caught and let the old handler take care of it.
     */</comment>
    <expr_stmt><expr><call><name pos:line="434" pos:column="5">raise<pos:position pos:line="434" pos:column="10"/></name><argument_list pos:line="434" pos:column="10">(<argument><expr><name pos:line="434" pos:column="11">exit_signal<pos:position pos:line="434" pos:column="22"/></name></expr></argument>)<pos:position pos:line="434" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="434" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="435" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="437" pos:column="3">logmsg<pos:position pos:line="437" pos:column="9"/></name><argument_list pos:line="437" pos:column="9">(<argument><expr><literal type="string" pos:line="437" pos:column="10">"========&gt; sws quits"<pos:position pos:line="437" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="437" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="437" pos:column="33"/></expr_stmt>
  <return pos:line="438" pos:column="3">return <expr><literal type="number" pos:line="438" pos:column="10">0<pos:position pos:line="438" pos:column="11"/></literal></expr>;<pos:position pos:line="438" pos:column="12"/></return>
}<pos:position pos:line="439" pos:column="2"/></block></function></unit>
