<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1825_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">encodeDN<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">buf<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">size_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">n<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">curl_asn1Element<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">dn<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">curl_asn1Element<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">rdn<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_asn1Element<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">atv<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_asn1Element<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">oid<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">curl_asn1Element<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">value<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">l<pos:position pos:line="7" pos:column="11"/></name> <init pos:line="7" pos:column="12">= <expr><literal type="number" pos:line="7" pos:column="14">0<pos:position pos:line="7" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">p1<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">p2<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">const<pos:position pos:line="10" pos:column="8"/></specifier> <name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">p3<pos:position pos:line="10" pos:column="17"/></name></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">str<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>

  <comment type="block" pos:line="13" pos:column="3">/* ASCII encode distinguished name at `dn' into the `n'-byte buffer at `buf'.
     Return the total string length, even if larger than `n'. */</comment>

  <for pos:line="16" pos:column="3">for<control pos:line="16" pos:column="6">(<init><expr><name pos:line="16" pos:column="7">p1<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <name><name pos:line="16" pos:column="12">dn<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">-&gt;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="16">beg<pos:position pos:line="16" pos:column="19"/></name></name></expr>;<pos:position pos:line="16" pos:column="20"/></init> <condition><expr><name pos:line="16" pos:column="21">p1<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">&lt;<pos:position pos:line="16" pos:column="28"/></operator> <name><name pos:line="16" pos:column="26">dn<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">-&gt;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="30">end<pos:position pos:line="16" pos:column="33"/></name></name></expr>;<pos:position pos:line="16" pos:column="34"/></condition><incr/>)<pos:position pos:line="16" pos:column="35"/></control> <block pos:line="16" pos:column="36">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">p1<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">Curl_getASN1Element<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><operator pos:line="17" pos:column="30">&amp;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="31">rdn<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="36">p1<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="40">dn<pos:position pos:line="17" pos:column="42"/></name><operator pos:line="17" pos:column="42">-&gt;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="44">end<pos:position pos:line="17" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>
    <for pos:line="18" pos:column="5">for<control pos:line="18" pos:column="8">(<init><expr><name pos:line="18" pos:column="9">p2<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <name><name pos:line="18" pos:column="14">rdn<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">beg<pos:position pos:line="18" pos:column="21"/></name></name></expr>;<pos:position pos:line="18" pos:column="22"/></init> <condition><expr><name pos:line="18" pos:column="23">p2<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">&lt;<pos:position pos:line="18" pos:column="30"/></operator> <name><name pos:line="18" pos:column="28">rdn<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">.<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="32">end<pos:position pos:line="18" pos:column="35"/></name></name></expr>;<pos:position pos:line="18" pos:column="36"/></condition><incr/>)<pos:position pos:line="18" pos:column="37"/></control> <block pos:line="18" pos:column="38">{
      <expr_stmt><expr><name pos:line="19" pos:column="7">p2<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">=<pos:position pos:line="19" pos:column="11"/></operator> <call><name pos:line="19" pos:column="12">Curl_getASN1Element<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><operator pos:line="19" pos:column="32">&amp;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="33">atv<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">p2<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="42">rdn<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">.<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="46">end<pos:position pos:line="19" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name pos:line="20" pos:column="7">p3<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <call><name pos:line="20" pos:column="12">Curl_getASN1Element<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><operator pos:line="20" pos:column="32">&amp;<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="33">oid<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="38">atv<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">.<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="42">beg<pos:position pos:line="20" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="47">atv<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">.<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="51">end<pos:position pos:line="20" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">Curl_getASN1Element<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><operator pos:line="21" pos:column="27">&amp;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="28">value<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">p3<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="39">atv<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">.<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="43">end<pos:position pos:line="21" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name pos:line="22" pos:column="7">str<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <call><name pos:line="22" pos:column="13">Curl_ASN1tostr<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><operator pos:line="22" pos:column="28">&amp;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="29">oid<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="34">0<pos:position pos:line="22" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><operator pos:line="23" pos:column="10">!<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">str<pos:position pos:line="23" pos:column="14"/></name></expr>)<pos:position pos:line="23" pos:column="15"/></condition><then pos:line="23" pos:column="15">
        <block type="pseudo"><return pos:line="24" pos:column="9">return <expr><operator pos:line="24" pos:column="16">-<pos:position pos:line="24" pos:column="17"/></operator><literal type="number" pos:line="24" pos:column="17">1<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></return></block></then></if>

      <comment type="block" pos:line="26" pos:column="7">/* Encode delimiter.
         If attribute has a short uppercase name, delimiter is ", ". */</comment>
      <if pos:line="28" pos:column="7">if<condition pos:line="28" pos:column="9">(<expr><name pos:line="28" pos:column="10">l<pos:position pos:line="28" pos:column="11"/></name></expr>)<pos:position pos:line="28" pos:column="12"/></condition><then pos:line="28" pos:column="12"> <block pos:line="28" pos:column="13">{
        <for pos:line="29" pos:column="9">for<control pos:line="29" pos:column="12">(<init><expr><name pos:line="29" pos:column="13">p3<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <name pos:line="29" pos:column="18">str<pos:position pos:line="29" pos:column="21"/></name></expr>;<pos:position pos:line="29" pos:column="22"/></init> <condition><expr><call><name pos:line="29" pos:column="23">isupper<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">*<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">p3<pos:position pos:line="29" pos:column="34"/></name></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="36"/></condition> <incr><expr><name pos:line="29" pos:column="37">p3<pos:position pos:line="29" pos:column="39"/></name><operator pos:line="29" pos:column="39">++<pos:position pos:line="29" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="42"/></control>
          <block type="pseudo"><empty_stmt pos:line="30" pos:column="11">;<pos:position pos:line="30" pos:column="12"/></empty_stmt></block></for>
        <for pos:line="31" pos:column="9">for<control pos:line="31" pos:column="12">(<init><expr><name pos:line="31" pos:column="13">p3<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <ternary><condition><expr><operator pos:line="31" pos:column="18">(<pos:position pos:line="31" pos:column="19"/></operator><operator pos:line="31" pos:column="19">*<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="20">p3<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">||<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">p3<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">-<pos:position pos:line="31" pos:column="30"/></operator> <name pos:line="31" pos:column="31">str<pos:position pos:line="31" pos:column="34"/></name> <operator pos:line="31" pos:column="35">&gt;<pos:position pos:line="31" pos:column="39"/></operator> <literal type="number" pos:line="31" pos:column="37">2<pos:position pos:line="31" pos:column="38"/></literal><operator pos:line="31" pos:column="38">)<pos:position pos:line="31" pos:column="39"/></operator></expr>?<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <expr><literal type="string" pos:line="31" pos:column="41">"/"<pos:position pos:line="31" pos:column="44"/></literal></expr></then><else pos:line="31" pos:column="44">: <expr><literal type="string" pos:line="31" pos:column="46">", "<pos:position pos:line="31" pos:column="50"/></literal></expr></else></ternary></expr>;<pos:position pos:line="31" pos:column="51"/></init> <condition><expr><operator pos:line="31" pos:column="52">*<pos:position pos:line="31" pos:column="53"/></operator><name pos:line="31" pos:column="53">p3<pos:position pos:line="31" pos:column="55"/></name></expr>;<pos:position pos:line="31" pos:column="56"/></condition> <incr><expr><name pos:line="31" pos:column="57">p3<pos:position pos:line="31" pos:column="59"/></name><operator pos:line="31" pos:column="59">++<pos:position pos:line="31" pos:column="61"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="62"/></control> <block pos:line="31" pos:column="63">{
          <if pos:line="32" pos:column="11">if<condition pos:line="32" pos:column="13">(<expr><name pos:line="32" pos:column="14">l<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">&lt;<pos:position pos:line="32" pos:column="20"/></operator> <name pos:line="32" pos:column="18">n<pos:position pos:line="32" pos:column="19"/></name></expr>)<pos:position pos:line="32" pos:column="20"/></condition><then pos:line="32" pos:column="20">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="13">buf<pos:position pos:line="33" pos:column="16"/></name><index pos:line="33" pos:column="16">[<expr><name pos:line="33" pos:column="17">l<pos:position pos:line="33" pos:column="18"/></name></expr>]<pos:position pos:line="33" pos:column="19"/></index></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <operator pos:line="33" pos:column="22">*<pos:position pos:line="33" pos:column="23"/></operator><name pos:line="33" pos:column="23">p3<pos:position pos:line="33" pos:column="25"/></name></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt></block></then></if>
          <expr_stmt><expr><name pos:line="34" pos:column="11">l<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">++<pos:position pos:line="34" pos:column="14"/></operator></expr>;<pos:position pos:line="34" pos:column="15"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></for>
      }<pos:position pos:line="36" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="38" pos:column="7">/* Encode attribute name. */</comment>
      <for pos:line="39" pos:column="7">for<control pos:line="39" pos:column="10">(<init><expr><name pos:line="39" pos:column="11">p3<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <name pos:line="39" pos:column="16">str<pos:position pos:line="39" pos:column="19"/></name></expr>;<pos:position pos:line="39" pos:column="20"/></init> <condition><expr><operator pos:line="39" pos:column="21">*<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">p3<pos:position pos:line="39" pos:column="24"/></name></expr>;<pos:position pos:line="39" pos:column="25"/></condition> <incr><expr><name pos:line="39" pos:column="26">p3<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">++<pos:position pos:line="39" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="39" pos:column="31"/></control> <block pos:line="39" pos:column="32">{
        <if pos:line="40" pos:column="9">if<condition pos:line="40" pos:column="11">(<expr><name pos:line="40" pos:column="12">l<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">&lt;<pos:position pos:line="40" pos:column="18"/></operator> <name pos:line="40" pos:column="16">n<pos:position pos:line="40" pos:column="17"/></name></expr>)<pos:position pos:line="40" pos:column="18"/></condition><then pos:line="40" pos:column="18">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="41" pos:column="11">buf<pos:position pos:line="41" pos:column="14"/></name><index pos:line="41" pos:column="14">[<expr><name pos:line="41" pos:column="15">l<pos:position pos:line="41" pos:column="16"/></name></expr>]<pos:position pos:line="41" pos:column="17"/></index></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <operator pos:line="41" pos:column="20">*<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="21">p3<pos:position pos:line="41" pos:column="23"/></name></expr>;<pos:position pos:line="41" pos:column="24"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="42" pos:column="9">l<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">++<pos:position pos:line="42" pos:column="12"/></operator></expr>;<pos:position pos:line="42" pos:column="13"/></expr_stmt>
      }<pos:position pos:line="43" pos:column="8"/></block></for>
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">free<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><operator pos:line="44" pos:column="12">(<pos:position pos:line="44" pos:column="13"/></operator><name pos:line="44" pos:column="13">char<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">*<pos:position pos:line="44" pos:column="19"/></operator><operator pos:line="44" pos:column="19">)<pos:position pos:line="44" pos:column="20"/></operator> <name pos:line="44" pos:column="21">str<pos:position pos:line="44" pos:column="24"/></name></expr></argument>)<pos:position pos:line="44" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="26"/></expr_stmt>

      <comment type="block" pos:line="46" pos:column="7">/* Generate equal sign. */</comment>
      <if pos:line="47" pos:column="7">if<condition pos:line="47" pos:column="9">(<expr><name pos:line="47" pos:column="10">l<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">&lt;<pos:position pos:line="47" pos:column="16"/></operator> <name pos:line="47" pos:column="14">n<pos:position pos:line="47" pos:column="15"/></name></expr>)<pos:position pos:line="47" pos:column="16"/></condition><then pos:line="47" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="48" pos:column="9">buf<pos:position pos:line="48" pos:column="12"/></name><index pos:line="48" pos:column="12">[<expr><name pos:line="48" pos:column="13">l<pos:position pos:line="48" pos:column="14"/></name></expr>]<pos:position pos:line="48" pos:column="15"/></index></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <literal type="char" pos:line="48" pos:column="18">'='<pos:position pos:line="48" pos:column="21"/></literal></expr>;<pos:position pos:line="48" pos:column="22"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="49" pos:column="7">l<pos:position pos:line="49" pos:column="8"/></name><operator pos:line="49" pos:column="8">++<pos:position pos:line="49" pos:column="10"/></operator></expr>;<pos:position pos:line="49" pos:column="11"/></expr_stmt>

      <comment type="block" pos:line="51" pos:column="7">/* Generate value. */</comment>
      <expr_stmt><expr><name pos:line="52" pos:column="7">str<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <call><name pos:line="52" pos:column="13">Curl_ASN1tostr<pos:position pos:line="52" pos:column="27"/></name><argument_list pos:line="52" pos:column="27">(<argument><expr><operator pos:line="52" pos:column="28">&amp;<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="29">value<pos:position pos:line="52" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="36">0<pos:position pos:line="52" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="39"/></expr_stmt>
      <if pos:line="53" pos:column="7">if<condition pos:line="53" pos:column="9">(<expr><operator pos:line="53" pos:column="10">!<pos:position pos:line="53" pos:column="11"/></operator><name pos:line="53" pos:column="11">str<pos:position pos:line="53" pos:column="14"/></name></expr>)<pos:position pos:line="53" pos:column="15"/></condition><then pos:line="53" pos:column="15">
        <block type="pseudo"><return pos:line="54" pos:column="9">return <expr><operator pos:line="54" pos:column="16">-<pos:position pos:line="54" pos:column="17"/></operator><literal type="number" pos:line="54" pos:column="17">1<pos:position pos:line="54" pos:column="18"/></literal></expr>;<pos:position pos:line="54" pos:column="19"/></return></block></then></if>
      <for pos:line="55" pos:column="7">for<control pos:line="55" pos:column="10">(<init><expr><name pos:line="55" pos:column="11">p3<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <name pos:line="55" pos:column="16">str<pos:position pos:line="55" pos:column="19"/></name></expr>;<pos:position pos:line="55" pos:column="20"/></init> <condition><expr><operator pos:line="55" pos:column="21">*<pos:position pos:line="55" pos:column="22"/></operator><name pos:line="55" pos:column="22">p3<pos:position pos:line="55" pos:column="24"/></name></expr>;<pos:position pos:line="55" pos:column="25"/></condition> <incr><expr><name pos:line="55" pos:column="26">p3<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">++<pos:position pos:line="55" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="55" pos:column="31"/></control> <block pos:line="55" pos:column="32">{
        <if pos:line="56" pos:column="9">if<condition pos:line="56" pos:column="11">(<expr><name pos:line="56" pos:column="12">l<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">&lt;<pos:position pos:line="56" pos:column="18"/></operator> <name pos:line="56" pos:column="16">n<pos:position pos:line="56" pos:column="17"/></name></expr>)<pos:position pos:line="56" pos:column="18"/></condition><then pos:line="56" pos:column="18">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="57" pos:column="11">buf<pos:position pos:line="57" pos:column="14"/></name><index pos:line="57" pos:column="14">[<expr><name pos:line="57" pos:column="15">l<pos:position pos:line="57" pos:column="16"/></name></expr>]<pos:position pos:line="57" pos:column="17"/></index></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <operator pos:line="57" pos:column="20">*<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="21">p3<pos:position pos:line="57" pos:column="23"/></name></expr>;<pos:position pos:line="57" pos:column="24"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="58" pos:column="9">l<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">++<pos:position pos:line="58" pos:column="12"/></operator></expr>;<pos:position pos:line="58" pos:column="13"/></expr_stmt>
      }<pos:position pos:line="59" pos:column="8"/></block></for>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">free<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><operator pos:line="60" pos:column="12">(<pos:position pos:line="60" pos:column="13"/></operator><name pos:line="60" pos:column="13">char<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">*<pos:position pos:line="60" pos:column="19"/></operator><operator pos:line="60" pos:column="19">)<pos:position pos:line="60" pos:column="20"/></operator> <name pos:line="60" pos:column="21">str<pos:position pos:line="60" pos:column="24"/></name></expr></argument>)<pos:position pos:line="60" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></for>
  }<pos:position pos:line="62" pos:column="4"/></block></for>

  <return pos:line="64" pos:column="3">return <expr><name pos:line="64" pos:column="10">l<pos:position pos:line="64" pos:column="11"/></name></expr>;<pos:position pos:line="64" pos:column="12"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
