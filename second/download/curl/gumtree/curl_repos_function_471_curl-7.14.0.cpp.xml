<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_471_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_write<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name><name pos:line="1" pos:column="21">struct<pos:position pos:line="1" pos:column="27"/></name> <name pos:line="1" pos:column="28">connectdata<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">conn<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="2" pos:column="21">curl_socket_t<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">sockfd<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="3" pos:column="21">void<pos:position pos:line="3" pos:column="25"/></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">mem<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="4" pos:column="21">size_t<pos:position pos:line="4" pos:column="27"/></name></type> <name pos:line="4" pos:column="28">len<pos:position pos:line="4" pos:column="31"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="5" pos:column="21">ssize_t<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">written<pos:position pos:line="5" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="38"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">ssize_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">bytes_written<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CURLcode<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">retcode<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">num<pos:position pos:line="9" pos:column="10"/></name> <init pos:line="9" pos:column="11">= <expr><operator pos:line="9" pos:column="13">(<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">sockfd<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">==<pos:position pos:line="9" pos:column="23"/></operator> <name><name pos:line="9" pos:column="24">conn<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">sock<pos:position pos:line="9" pos:column="34"/></name><index pos:line="9" pos:column="34">[<expr><name pos:line="9" pos:column="35">SECONDARYSOCKET<pos:position pos:line="9" pos:column="50"/></name></expr>]<pos:position pos:line="9" pos:column="51"/></index></name><operator pos:line="9" pos:column="51">)<pos:position pos:line="9" pos:column="52"/></operator></expr></init></decl>;<pos:position pos:line="9" pos:column="53"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name><name pos:line="11" pos:column="7">conn<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">ssl<pos:position pos:line="11" pos:column="16"/></name><index pos:line="11" pos:column="16">[<expr><name pos:line="11" pos:column="17">num<pos:position pos:line="11" pos:column="20"/></name></expr>]<pos:position pos:line="11" pos:column="21"/></index></name><operator pos:line="11" pos:column="21">.<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">use<pos:position pos:line="11" pos:column="25"/></name></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26">
    <comment type="block" pos:line="12" pos:column="5">/* only TRUE if SSL enabled */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="5">bytes_written<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">Curl_ssl_send<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><name pos:line="13" pos:column="35">conn<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">num<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="46">mem<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="51">len<pos:position pos:line="13" pos:column="54"/></name></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt></block></then>
  <else pos:line="14" pos:column="3">else <block pos:line="14" pos:column="8">{
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><name><name pos:line="15" pos:column="8">conn<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">sec_complete<pos:position pos:line="15" pos:column="26"/></name></name></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27">
      <comment type="block" pos:line="16" pos:column="7">/* only TRUE if krb4 enabled */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="7">bytes_written<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <call><name pos:line="17" pos:column="23">Curl_sec_write<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><name pos:line="17" pos:column="38">conn<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="44">sockfd<pos:position pos:line="17" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="52">mem<pos:position pos:line="17" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="57">len<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="62"/></expr_stmt></block></then>
    <else pos:line="18" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="7">bytes_written<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <operator pos:line="19" pos:column="23">(<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">ssize_t<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">)<pos:position pos:line="19" pos:column="32"/></operator><call><name pos:line="19" pos:column="32">swrite<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">sockfd<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">mem<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="52">len<pos:position pos:line="19" pos:column="55"/></name></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="57"/></expr_stmt></block></else></if>

    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><operator pos:line="21" pos:column="8">-<pos:position pos:line="21" pos:column="9"/></operator><literal type="number" pos:line="21" pos:column="9">1<pos:position pos:line="21" pos:column="10"/></literal> <operator pos:line="21" pos:column="11">==<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">bytes_written<pos:position pos:line="21" pos:column="27"/></name></expr>)<pos:position pos:line="21" pos:column="28"/></condition><then pos:line="21" pos:column="28"> <block pos:line="21" pos:column="29">{
      <decl_stmt><decl><type><name pos:line="22" pos:column="7">int<pos:position pos:line="22" pos:column="10"/></name></type> <name pos:line="22" pos:column="11">err<pos:position pos:line="22" pos:column="14"/></name> <init pos:line="22" pos:column="15">= <expr><call><name pos:line="22" pos:column="17">Curl_ourerrno<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">()<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="33"/></decl_stmt>

      <if pos:line="24" pos:column="7">if<condition pos:line="24" pos:column="9">(
<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">WSAEWOULDBLOCK<pos:position pos:line="25" pos:column="22"/></name></cpp:ifdef>
        <comment type="block" pos:line="26" pos:column="9">/* This is how Windows does it */</comment>
        <expr><operator pos:line="27" pos:column="9">(<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">WSAEWOULDBLOCK<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">==<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="28">err<pos:position pos:line="27" pos:column="31"/></name><operator pos:line="27" pos:column="31">)<pos:position pos:line="27" pos:column="32"/></operator>
<cpp:else pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">else<pos:position pos:line="28" pos:column="6"/></cpp:directive></cpp:else>
        <comment type="block" pos:line="29" pos:column="9">/* As pointed out by Christophe Demory on March 11 2003, errno
           may be EWOULDBLOCK or on some systems EAGAIN when it returned
           due to its inability to send off data without blocking. We
           therefor treat both error codes the same here */</comment>
        <operator pos:line="33" pos:column="9">(<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">EWOULDBLOCK<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">==<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="25">err<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">)<pos:position pos:line="33" pos:column="29"/></operator> <operator pos:line="33" pos:column="30">||<pos:position pos:line="33" pos:column="32"/></operator> <operator pos:line="33" pos:column="33">(<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">EAGAIN<pos:position pos:line="33" pos:column="40"/></name> <operator pos:line="33" pos:column="41">==<pos:position pos:line="33" pos:column="43"/></operator> <name pos:line="33" pos:column="44">err<pos:position pos:line="33" pos:column="47"/></name><operator pos:line="33" pos:column="47">)<pos:position pos:line="33" pos:column="48"/></operator> <operator pos:line="33" pos:column="49">||<pos:position pos:line="33" pos:column="51"/></operator> <operator pos:line="33" pos:column="52">(<pos:position pos:line="33" pos:column="53"/></operator><name pos:line="33" pos:column="53">EINTR<pos:position pos:line="33" pos:column="58"/></name> <operator pos:line="33" pos:column="59">==<pos:position pos:line="33" pos:column="61"/></operator> <name pos:line="33" pos:column="62">err<pos:position pos:line="33" pos:column="65"/></name><operator pos:line="33" pos:column="65">)<pos:position pos:line="33" pos:column="66"/></operator></expr>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
        )<pos:position pos:line="35" pos:column="10"/></condition><then pos:line="35" pos:column="10">
        <comment type="block" pos:line="36" pos:column="9">/* this is just a case of EWOULDBLOCK */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="9">bytes_written<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator><literal type="number" pos:line="37" pos:column="23">0<pos:position pos:line="37" pos:column="24"/></literal></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt></block></then>
      <else pos:line="38" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="9">failf<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name><name pos:line="39" pos:column="15">conn<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">-&gt;<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="21">data<pos:position pos:line="39" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="27">"Send failure: %s"<pos:position pos:line="39" pos:column="45"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="40" pos:column="15">Curl_strerror<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">conn<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">err<pos:position pos:line="40" pos:column="38"/></name></expr></argument>)<pos:position pos:line="40" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt></block></else></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
  }<pos:position pos:line="42" pos:column="4"/></block></else></if>
  <expr_stmt><expr><operator pos:line="43" pos:column="3">*<pos:position pos:line="43" pos:column="4"/></operator><name pos:line="43" pos:column="4">written<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <name pos:line="43" pos:column="14">bytes_written<pos:position pos:line="43" pos:column="27"/></name></expr>;<pos:position pos:line="43" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="44" pos:column="3">retcode<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="44" pos:column="13">(<pos:position pos:line="44" pos:column="14"/></operator><operator pos:line="44" pos:column="14">-<pos:position pos:line="44" pos:column="15"/></operator><literal type="number" pos:line="44" pos:column="15">1<pos:position pos:line="44" pos:column="16"/></literal> <operator pos:line="44" pos:column="17">!=<pos:position pos:line="44" pos:column="19"/></operator> <name pos:line="44" pos:column="20">bytes_written<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">)<pos:position pos:line="44" pos:column="34"/></operator></expr>?<pos:position pos:line="44" pos:column="35"/></condition><then><expr><name pos:line="44" pos:column="35">CURLE_OK<pos:position pos:line="44" pos:column="43"/></name></expr></then><else pos:line="44" pos:column="43">:<expr><name pos:line="44" pos:column="44">CURLE_SEND_ERROR<pos:position pos:line="44" pos:column="60"/></name></expr></else></ternary></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt>

  <return pos:line="46" pos:column="3">return <expr><name pos:line="46" pos:column="10">retcode<pos:position pos:line="46" pos:column="17"/></name></expr>;<pos:position pos:line="46" pos:column="18"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
