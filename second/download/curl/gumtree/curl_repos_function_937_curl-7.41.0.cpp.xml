<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_937_curl-7.41.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">long<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">Curl_sleep_time<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">curl_off_t<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">rate_bps<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">curl_off_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">cur_rate_bps<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">pkt_size<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_off_t<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">min_sleep<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_off_t<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">rv<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><name pos:line="7" pos:column="6">rate_bps<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">==<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><literal type="number" pos:line="8" pos:column="12">0<pos:position pos:line="8" pos:column="13"/></literal></expr>;<pos:position pos:line="8" pos:column="14"/></return></block></then></if>

  <comment type="block" pos:line="10" pos:column="3">/* If running faster than about .1% of the desired speed, slow
   * us down a bit.  Use shift instead of division as the 0.1%
   * cutoff is arbitrary anyway.
   */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">cur_rate_bps<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&gt;<pos:position pos:line="14" pos:column="23"/></operator> <operator pos:line="14" pos:column="21">(<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">rate_bps<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">+<pos:position pos:line="14" pos:column="32"/></operator> <operator pos:line="14" pos:column="33">(<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="34">rate_bps<pos:position pos:line="14" pos:column="42"/></name> <operator pos:line="14" pos:column="43">&gt;&gt;<pos:position pos:line="14" pos:column="48"/></operator> <literal type="number" pos:line="14" pos:column="46">10<pos:position pos:line="14" pos:column="48"/></literal><operator pos:line="14" pos:column="48">)<pos:position pos:line="14" pos:column="49"/></operator><operator pos:line="14" pos:column="49">)<pos:position pos:line="14" pos:column="50"/></operator></expr>)<pos:position pos:line="14" pos:column="51"/></condition><then pos:line="14" pos:column="51"> <block pos:line="14" pos:column="52">{
    <comment type="block" pos:line="15" pos:column="5">/* running too fast, decrease target rate by 1/64th of rate */</comment>
    <expr_stmt><expr><name pos:line="16" pos:column="5">rate_bps<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">-=<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="17">rate_bps<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">&gt;&gt;<pos:position pos:line="16" pos:column="31"/></operator> <literal type="number" pos:line="16" pos:column="29">6<pos:position pos:line="16" pos:column="30"/></literal></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">min_sleep<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">1<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then>
  <elseif pos:line="19" pos:column="3">else <if pos:line="19" pos:column="8">if<condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">cur_rate_bps<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">&lt;<pos:position pos:line="19" pos:column="28"/></operator> <operator pos:line="19" pos:column="26">(<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">rate_bps<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">-<pos:position pos:line="19" pos:column="37"/></operator> <operator pos:line="19" pos:column="38">(<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="39">rate_bps<pos:position pos:line="19" pos:column="47"/></name> <operator pos:line="19" pos:column="48">&gt;&gt;<pos:position pos:line="19" pos:column="53"/></operator> <literal type="number" pos:line="19" pos:column="51">10<pos:position pos:line="19" pos:column="53"/></literal><operator pos:line="19" pos:column="53">)<pos:position pos:line="19" pos:column="54"/></operator><operator pos:line="19" pos:column="54">)<pos:position pos:line="19" pos:column="55"/></operator></expr>)<pos:position pos:line="19" pos:column="56"/></condition><then pos:line="19" pos:column="56"> <block pos:line="19" pos:column="57">{
    <comment type="block" pos:line="20" pos:column="5">/* running too slow, increase target rate by 1/64th of rate */</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">rate_bps<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">+=<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="17">rate_bps<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">&gt;&gt;<pos:position pos:line="21" pos:column="31"/></operator> <literal type="number" pos:line="21" pos:column="29">6<pos:position pos:line="21" pos:column="30"/></literal></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="24" pos:column="3">/* Determine number of milliseconds to wait until we do
   * the next packet at the adjusted rate.  We should wait
   * longer when using larger packets, for instance.
   */</comment>
  <expr_stmt><expr><name pos:line="28" pos:column="3">rv<pos:position pos:line="28" pos:column="5"/></name> <operator pos:line="28" pos:column="6">=<pos:position pos:line="28" pos:column="7"/></operator> <operator pos:line="28" pos:column="8">(<pos:position pos:line="28" pos:column="9"/></operator><call pos:line="28" pos:column="9">(<name pos:line="28" pos:column="10">curl_off_t<pos:position pos:line="28" pos:column="20"/></name>)<argument_list pos:line="28" pos:column="21">(<argument><expr><operator pos:line="28" pos:column="22">(<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">pkt_size<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">*<pos:position pos:line="28" pos:column="33"/></operator> <literal type="number" pos:line="28" pos:column="34">8<pos:position pos:line="28" pos:column="35"/></literal><operator pos:line="28" pos:column="35">)<pos:position pos:line="28" pos:column="36"/></operator> <operator pos:line="28" pos:column="37">*<pos:position pos:line="28" pos:column="38"/></operator> <literal type="number" pos:line="28" pos:column="39">1000<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call> <operator pos:line="28" pos:column="45">/<pos:position pos:line="28" pos:column="46"/></operator> <name pos:line="28" pos:column="47">rate_bps<pos:position pos:line="28" pos:column="55"/></name><operator pos:line="28" pos:column="55">)<pos:position pos:line="28" pos:column="56"/></operator></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>

  <comment type="block" pos:line="30" pos:column="3">/* Catch rounding errors and always slow down at least 1ms if
   * we are running too fast.
   */</comment>
  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><name pos:line="33" pos:column="6">rv<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">&lt;<pos:position pos:line="33" pos:column="13"/></operator> <name pos:line="33" pos:column="11">min_sleep<pos:position pos:line="33" pos:column="20"/></name></expr>)<pos:position pos:line="33" pos:column="21"/></condition><then pos:line="33" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="5">rv<pos:position pos:line="34" pos:column="7"/></name> <operator pos:line="34" pos:column="8">=<pos:position pos:line="34" pos:column="9"/></operator> <name pos:line="34" pos:column="10">min_sleep<pos:position pos:line="34" pos:column="19"/></name></expr>;<pos:position pos:line="34" pos:column="20"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="36" pos:column="3">/* Bound value to fit in 'long' on 32-bit platform.  That's
   * plenty long enough anyway!
   */</comment>
  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name pos:line="39" pos:column="6">rv<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">&gt;<pos:position pos:line="39" pos:column="13"/></operator> <literal type="number" pos:line="39" pos:column="11">0x7fffffff<pos:position pos:line="39" pos:column="21"/></literal></expr>)<pos:position pos:line="39" pos:column="22"/></condition><then pos:line="39" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="5">rv<pos:position pos:line="40" pos:column="7"/></name> <operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator> <literal type="number" pos:line="40" pos:column="10">0x7fffffff<pos:position pos:line="40" pos:column="20"/></literal></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt></block></then></if>

  <return pos:line="42" pos:column="3">return <expr><operator pos:line="42" pos:column="10">(<pos:position pos:line="42" pos:column="11"/></operator><name pos:line="42" pos:column="11">long<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">)<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="16">rv<pos:position pos:line="42" pos:column="18"/></name></expr>;<pos:position pos:line="42" pos:column="19"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
