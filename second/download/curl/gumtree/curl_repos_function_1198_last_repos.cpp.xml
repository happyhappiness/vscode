<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1198_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">imap_parse_url_path<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">connectdata<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">conn<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* The imap struct is already initialised in imap_connect() */</comment>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">IMAP<pos:position pos:line="6" pos:column="14"/></name></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">imap<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name><name pos:line="6" pos:column="23">data<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">-&gt;<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="29">req<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">.<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">protop<pos:position pos:line="6" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">begin<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name><name pos:line="7" pos:column="23">data<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">-&gt;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="29">state<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">.<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="35">path<pos:position pos:line="7" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">ptr<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name pos:line="8" pos:column="21">begin<pos:position pos:line="8" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* See how much of the URL is a valid path and decode it */</comment>
  <while pos:line="11" pos:column="3">while<condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">imap_is_bchar<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><operator pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">ptr<pos:position pos:line="11" pos:column="27"/></name></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="29"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="5">ptr<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">++<pos:position pos:line="12" pos:column="10"/></operator></expr>;<pos:position pos:line="12" pos:column="11"/></expr_stmt></block></while>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">ptr<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">!=<pos:position pos:line="14" pos:column="12"/></operator> <name pos:line="14" pos:column="13">begin<pos:position pos:line="14" pos:column="18"/></name></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19"> <block pos:line="14" pos:column="20">{
    <comment type="block" pos:line="15" pos:column="5">/* Remove the trailing slash if present */</comment>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">char<pos:position pos:line="16" pos:column="15"/></name> <modifier pos:line="16" pos:column="16">*<pos:position pos:line="16" pos:column="17"/></modifier></type><name pos:line="16" pos:column="17">end<pos:position pos:line="16" pos:column="20"/></name> <init pos:line="16" pos:column="21">= <expr><name pos:line="16" pos:column="23">ptr<pos:position pos:line="16" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="27"/></decl_stmt>
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><name pos:line="17" pos:column="8">end<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">&gt;<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="14">begin<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">&amp;&amp;<pos:position pos:line="17" pos:column="30"/></operator> <name><name pos:line="17" pos:column="23">end<pos:position pos:line="17" pos:column="26"/></name><index pos:line="17" pos:column="26">[<expr><operator pos:line="17" pos:column="27">-<pos:position pos:line="17" pos:column="28"/></operator><literal type="number" pos:line="17" pos:column="28">1<pos:position pos:line="17" pos:column="29"/></literal></expr>]<pos:position pos:line="17" pos:column="30"/></index></name> <operator pos:line="17" pos:column="31">==<pos:position pos:line="17" pos:column="33"/></operator> <literal type="char" pos:line="17" pos:column="34">'/'<pos:position pos:line="17" pos:column="37"/></literal></expr>)<pos:position pos:line="17" pos:column="38"/></condition><then pos:line="17" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="7">end<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">--<pos:position pos:line="18" pos:column="12"/></operator></expr>;<pos:position pos:line="18" pos:column="13"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="20" pos:column="5">result<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">Curl_urldecode<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">data<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="35">begin<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">end<pos:position pos:line="20" pos:column="45"/></name> <operator pos:line="20" pos:column="46">-<pos:position pos:line="20" pos:column="47"/></operator> <name pos:line="20" pos:column="48">begin<pos:position pos:line="20" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="55">&amp;<pos:position pos:line="20" pos:column="60"/></operator><name><name pos:line="20" pos:column="56">imap<pos:position pos:line="20" pos:column="60"/></name><operator pos:line="20" pos:column="60">-&gt;<pos:position pos:line="20" pos:column="65"/></operator><name pos:line="20" pos:column="62">mailbox<pos:position pos:line="20" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="71">NULL<pos:position pos:line="20" pos:column="75"/></name></expr></argument>,
                            <argument><expr><name pos:line="21" pos:column="29">TRUE<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><name pos:line="22" pos:column="8">result<pos:position pos:line="22" pos:column="14"/></name></expr>)<pos:position pos:line="22" pos:column="15"/></condition><then pos:line="22" pos:column="15">
      <block type="pseudo"><return pos:line="23" pos:column="7">return <expr><name pos:line="23" pos:column="14">result<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="24" pos:column="4"/></block></then>
  <else pos:line="25" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="5">imap<pos:position pos:line="26" pos:column="9"/></name><operator pos:line="26" pos:column="9">-&gt;<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="11">mailbox<pos:position pos:line="26" pos:column="18"/></name></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="21">NULL<pos:position pos:line="26" pos:column="25"/></name></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="28" pos:column="3">/* There can be any number of parameters in the form ";NAME=VALUE" */</comment>
  <while pos:line="29" pos:column="3">while<condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">*<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">ptr<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">==<pos:position pos:line="29" pos:column="16"/></operator> <literal type="char" pos:line="29" pos:column="17">';'<pos:position pos:line="29" pos:column="20"/></literal></expr>)<pos:position pos:line="29" pos:column="21"/></condition> <block pos:line="29" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">char<pos:position pos:line="30" pos:column="9"/></name> <modifier pos:line="30" pos:column="10">*<pos:position pos:line="30" pos:column="11"/></modifier></type><name pos:line="30" pos:column="11">name<pos:position pos:line="30" pos:column="15"/></name></decl>;<pos:position pos:line="30" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">char<pos:position pos:line="31" pos:column="9"/></name> <modifier pos:line="31" pos:column="10">*<pos:position pos:line="31" pos:column="11"/></modifier></type><name pos:line="31" pos:column="11">value<pos:position pos:line="31" pos:column="16"/></name></decl>;<pos:position pos:line="31" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">size_t<pos:position pos:line="32" pos:column="11"/></name></type> <name pos:line="32" pos:column="12">valuelen<pos:position pos:line="32" pos:column="20"/></name></decl>;<pos:position pos:line="32" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* Find the length of the name parameter */</comment>
    <expr_stmt><expr><name pos:line="35" pos:column="5">begin<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <operator pos:line="35" pos:column="13">++<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">ptr<pos:position pos:line="35" pos:column="18"/></name></expr>;<pos:position pos:line="35" pos:column="19"/></expr_stmt>
    <while pos:line="36" pos:column="5">while<condition pos:line="36" pos:column="10">(<expr><operator pos:line="36" pos:column="11">*<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">ptr<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">&amp;&amp;<pos:position pos:line="36" pos:column="26"/></operator> <operator pos:line="36" pos:column="19">*<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="20">ptr<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">!=<pos:position pos:line="36" pos:column="26"/></operator> <literal type="char" pos:line="36" pos:column="27">'='<pos:position pos:line="36" pos:column="30"/></literal></expr>)<pos:position pos:line="36" pos:column="31"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="7">ptr<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">++<pos:position pos:line="37" pos:column="12"/></operator></expr>;<pos:position pos:line="37" pos:column="13"/></expr_stmt></block></while>

    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><operator pos:line="39" pos:column="8">!<pos:position pos:line="39" pos:column="9"/></operator><operator pos:line="39" pos:column="9">*<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">ptr<pos:position pos:line="39" pos:column="13"/></name></expr>)<pos:position pos:line="39" pos:column="14"/></condition><then pos:line="39" pos:column="14">
      <block type="pseudo"><return pos:line="40" pos:column="7">return <expr><name pos:line="40" pos:column="14">CURLE_URL_MALFORMAT<pos:position pos:line="40" pos:column="33"/></name></expr>;<pos:position pos:line="40" pos:column="34"/></return></block></then></if>

    <comment type="block" pos:line="42" pos:column="5">/* Decode the name parameter */</comment>
    <expr_stmt><expr><name pos:line="43" pos:column="5">result<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <call><name pos:line="43" pos:column="14">Curl_urldecode<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">data<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">begin<pos:position pos:line="43" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="42">ptr<pos:position pos:line="43" pos:column="45"/></name> <operator pos:line="43" pos:column="46">-<pos:position pos:line="43" pos:column="47"/></operator> <name pos:line="43" pos:column="48">begin<pos:position pos:line="43" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="55">&amp;<pos:position pos:line="43" pos:column="60"/></operator><name pos:line="43" pos:column="56">name<pos:position pos:line="43" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="62">NULL<pos:position pos:line="43" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="68">TRUE<pos:position pos:line="43" pos:column="72"/></name></expr></argument>)<pos:position pos:line="43" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="74"/></expr_stmt>
    <if pos:line="44" pos:column="5">if<condition pos:line="44" pos:column="7">(<expr><name pos:line="44" pos:column="8">result<pos:position pos:line="44" pos:column="14"/></name></expr>)<pos:position pos:line="44" pos:column="15"/></condition><then pos:line="44" pos:column="15">
      <block type="pseudo"><return pos:line="45" pos:column="7">return <expr><name pos:line="45" pos:column="14">result<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="47" pos:column="5">/* Find the length of the value parameter */</comment>
    <expr_stmt><expr><name pos:line="48" pos:column="5">begin<pos:position pos:line="48" pos:column="10"/></name> <operator pos:line="48" pos:column="11">=<pos:position pos:line="48" pos:column="12"/></operator> <operator pos:line="48" pos:column="13">++<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="15">ptr<pos:position pos:line="48" pos:column="18"/></name></expr>;<pos:position pos:line="48" pos:column="19"/></expr_stmt>
    <while pos:line="49" pos:column="5">while<condition pos:line="49" pos:column="10">(<expr><call><name pos:line="49" pos:column="11">imap_is_bchar<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><operator pos:line="49" pos:column="25">*<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="26">ptr<pos:position pos:line="49" pos:column="29"/></name></expr></argument>)<pos:position pos:line="49" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="31"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="7">ptr<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">++<pos:position pos:line="50" pos:column="12"/></operator></expr>;<pos:position pos:line="50" pos:column="13"/></expr_stmt></block></while>

    <comment type="block" pos:line="52" pos:column="5">/* Decode the value parameter */</comment>
    <expr_stmt><expr><name pos:line="53" pos:column="5">result<pos:position pos:line="53" pos:column="11"/></name> <operator pos:line="53" pos:column="12">=<pos:position pos:line="53" pos:column="13"/></operator> <call><name pos:line="53" pos:column="14">Curl_urldecode<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">data<pos:position pos:line="53" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="35">begin<pos:position pos:line="53" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="42">ptr<pos:position pos:line="53" pos:column="45"/></name> <operator pos:line="53" pos:column="46">-<pos:position pos:line="53" pos:column="47"/></operator> <name pos:line="53" pos:column="48">begin<pos:position pos:line="53" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="55">&amp;<pos:position pos:line="53" pos:column="60"/></operator><name pos:line="53" pos:column="56">value<pos:position pos:line="53" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="63">&amp;<pos:position pos:line="53" pos:column="68"/></operator><name pos:line="53" pos:column="64">valuelen<pos:position pos:line="53" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="74">TRUE<pos:position pos:line="53" pos:column="78"/></name></expr></argument>)<pos:position pos:line="53" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="80"/></expr_stmt>
    <if pos:line="54" pos:column="5">if<condition pos:line="54" pos:column="7">(<expr><name pos:line="54" pos:column="8">result<pos:position pos:line="54" pos:column="14"/></name></expr>)<pos:position pos:line="54" pos:column="15"/></condition><then pos:line="54" pos:column="15"> <block pos:line="54" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">free<pos:position pos:line="55" pos:column="11"/></name><argument_list pos:line="55" pos:column="11">(<argument><expr><name pos:line="55" pos:column="12">name<pos:position pos:line="55" pos:column="16"/></name></expr></argument>)<pos:position pos:line="55" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="18"/></expr_stmt>
      <return pos:line="56" pos:column="7">return <expr><name pos:line="56" pos:column="14">result<pos:position pos:line="56" pos:column="20"/></name></expr>;<pos:position pos:line="56" pos:column="21"/></return>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="59" pos:column="5">DEBUGF<pos:position pos:line="59" pos:column="11"/></name><argument_list pos:line="59" pos:column="11">(<argument><expr><call><name pos:line="59" pos:column="12">infof<pos:position pos:line="59" pos:column="17"/></name><argument_list pos:line="59" pos:column="17">(<argument><expr><name><name pos:line="59" pos:column="18">conn<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">-&gt;<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="24">data<pos:position pos:line="59" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="30">"IMAP URL parameter '%s' = '%s'\n"<pos:position pos:line="59" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="66">name<pos:position pos:line="59" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="72">value<pos:position pos:line="59" pos:column="77"/></name></expr></argument>)<pos:position pos:line="59" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="80"/></expr_stmt>

    <comment type="block" pos:line="61" pos:column="5">/* Process the known hierarchical parameters (UIDVALIDITY, UID, SECTION and
       PARTIAL) stripping of the trailing slash character if it is present.

       Note: Unknown parameters trigger a URL_MALFORMAT error. */</comment>
    <if pos:line="65" pos:column="5">if<condition pos:line="65" pos:column="7">(<expr><call><name pos:line="65" pos:column="8">strcasecompare<pos:position pos:line="65" pos:column="22"/></name><argument_list pos:line="65" pos:column="22">(<argument><expr><name pos:line="65" pos:column="23">name<pos:position pos:line="65" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="29">"UIDVALIDITY"<pos:position pos:line="65" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="43"/></argument_list></call> <operator pos:line="65" pos:column="44">&amp;&amp;<pos:position pos:line="65" pos:column="54"/></operator> <operator pos:line="65" pos:column="47">!<pos:position pos:line="65" pos:column="48"/></operator><name><name pos:line="65" pos:column="48">imap<pos:position pos:line="65" pos:column="52"/></name><operator pos:line="65" pos:column="52">-&gt;<pos:position pos:line="65" pos:column="57"/></operator><name pos:line="65" pos:column="54">uidvalidity<pos:position pos:line="65" pos:column="65"/></name></name></expr>)<pos:position pos:line="65" pos:column="66"/></condition><then pos:line="65" pos:column="66"> <block pos:line="65" pos:column="67">{
      <if pos:line="66" pos:column="7">if<condition pos:line="66" pos:column="9">(<expr><name pos:line="66" pos:column="10">valuelen<pos:position pos:line="66" pos:column="18"/></name> <operator pos:line="66" pos:column="19">&gt;<pos:position pos:line="66" pos:column="23"/></operator> <literal type="number" pos:line="66" pos:column="21">0<pos:position pos:line="66" pos:column="22"/></literal> <operator pos:line="66" pos:column="23">&amp;&amp;<pos:position pos:line="66" pos:column="33"/></operator> <name><name pos:line="66" pos:column="26">value<pos:position pos:line="66" pos:column="31"/></name><index pos:line="66" pos:column="31">[<expr><name pos:line="66" pos:column="32">valuelen<pos:position pos:line="66" pos:column="40"/></name> <operator pos:line="66" pos:column="41">-<pos:position pos:line="66" pos:column="42"/></operator> <literal type="number" pos:line="66" pos:column="43">1<pos:position pos:line="66" pos:column="44"/></literal></expr>]<pos:position pos:line="66" pos:column="45"/></index></name> <operator pos:line="66" pos:column="46">==<pos:position pos:line="66" pos:column="48"/></operator> <literal type="char" pos:line="66" pos:column="49">'/'<pos:position pos:line="66" pos:column="52"/></literal></expr>)<pos:position pos:line="66" pos:column="53"/></condition><then pos:line="66" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="67" pos:column="9">value<pos:position pos:line="67" pos:column="14"/></name><index pos:line="67" pos:column="14">[<expr><name pos:line="67" pos:column="15">valuelen<pos:position pos:line="67" pos:column="23"/></name> <operator pos:line="67" pos:column="24">-<pos:position pos:line="67" pos:column="25"/></operator> <literal type="number" pos:line="67" pos:column="26">1<pos:position pos:line="67" pos:column="27"/></literal></expr>]<pos:position pos:line="67" pos:column="28"/></index></name> <operator pos:line="67" pos:column="29">=<pos:position pos:line="67" pos:column="30"/></operator> <literal type="char" pos:line="67" pos:column="31">'\0'<pos:position pos:line="67" pos:column="35"/></literal></expr>;<pos:position pos:line="67" pos:column="36"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name><name pos:line="69" pos:column="7">imap<pos:position pos:line="69" pos:column="11"/></name><operator pos:line="69" pos:column="11">-&gt;<pos:position pos:line="69" pos:column="16"/></operator><name pos:line="69" pos:column="13">uidvalidity<pos:position pos:line="69" pos:column="24"/></name></name> <operator pos:line="69" pos:column="25">=<pos:position pos:line="69" pos:column="26"/></operator> <name pos:line="69" pos:column="27">value<pos:position pos:line="69" pos:column="32"/></name></expr>;<pos:position pos:line="69" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="70" pos:column="7">value<pos:position pos:line="70" pos:column="12"/></name> <operator pos:line="70" pos:column="13">=<pos:position pos:line="70" pos:column="14"/></operator> <name pos:line="70" pos:column="15">NULL<pos:position pos:line="70" pos:column="19"/></name></expr>;<pos:position pos:line="70" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></then>
    <elseif pos:line="72" pos:column="5">else <if pos:line="72" pos:column="10">if<condition pos:line="72" pos:column="12">(<expr><call><name pos:line="72" pos:column="13">strcasecompare<pos:position pos:line="72" pos:column="27"/></name><argument_list pos:line="72" pos:column="27">(<argument><expr><name pos:line="72" pos:column="28">name<pos:position pos:line="72" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="34">"UID"<pos:position pos:line="72" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call> <operator pos:line="72" pos:column="41">&amp;&amp;<pos:position pos:line="72" pos:column="51"/></operator> <operator pos:line="72" pos:column="44">!<pos:position pos:line="72" pos:column="45"/></operator><name><name pos:line="72" pos:column="45">imap<pos:position pos:line="72" pos:column="49"/></name><operator pos:line="72" pos:column="49">-&gt;<pos:position pos:line="72" pos:column="54"/></operator><name pos:line="72" pos:column="51">uid<pos:position pos:line="72" pos:column="54"/></name></name></expr>)<pos:position pos:line="72" pos:column="55"/></condition><then pos:line="72" pos:column="55"> <block pos:line="72" pos:column="56">{
      <if pos:line="73" pos:column="7">if<condition pos:line="73" pos:column="9">(<expr><name pos:line="73" pos:column="10">valuelen<pos:position pos:line="73" pos:column="18"/></name> <operator pos:line="73" pos:column="19">&gt;<pos:position pos:line="73" pos:column="23"/></operator> <literal type="number" pos:line="73" pos:column="21">0<pos:position pos:line="73" pos:column="22"/></literal> <operator pos:line="73" pos:column="23">&amp;&amp;<pos:position pos:line="73" pos:column="33"/></operator> <name><name pos:line="73" pos:column="26">value<pos:position pos:line="73" pos:column="31"/></name><index pos:line="73" pos:column="31">[<expr><name pos:line="73" pos:column="32">valuelen<pos:position pos:line="73" pos:column="40"/></name> <operator pos:line="73" pos:column="41">-<pos:position pos:line="73" pos:column="42"/></operator> <literal type="number" pos:line="73" pos:column="43">1<pos:position pos:line="73" pos:column="44"/></literal></expr>]<pos:position pos:line="73" pos:column="45"/></index></name> <operator pos:line="73" pos:column="46">==<pos:position pos:line="73" pos:column="48"/></operator> <literal type="char" pos:line="73" pos:column="49">'/'<pos:position pos:line="73" pos:column="52"/></literal></expr>)<pos:position pos:line="73" pos:column="53"/></condition><then pos:line="73" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="9">value<pos:position pos:line="74" pos:column="14"/></name><index pos:line="74" pos:column="14">[<expr><name pos:line="74" pos:column="15">valuelen<pos:position pos:line="74" pos:column="23"/></name> <operator pos:line="74" pos:column="24">-<pos:position pos:line="74" pos:column="25"/></operator> <literal type="number" pos:line="74" pos:column="26">1<pos:position pos:line="74" pos:column="27"/></literal></expr>]<pos:position pos:line="74" pos:column="28"/></index></name> <operator pos:line="74" pos:column="29">=<pos:position pos:line="74" pos:column="30"/></operator> <literal type="char" pos:line="74" pos:column="31">'\0'<pos:position pos:line="74" pos:column="35"/></literal></expr>;<pos:position pos:line="74" pos:column="36"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name><name pos:line="76" pos:column="7">imap<pos:position pos:line="76" pos:column="11"/></name><operator pos:line="76" pos:column="11">-&gt;<pos:position pos:line="76" pos:column="16"/></operator><name pos:line="76" pos:column="13">uid<pos:position pos:line="76" pos:column="16"/></name></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name pos:line="76" pos:column="19">value<pos:position pos:line="76" pos:column="24"/></name></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name pos:line="77" pos:column="7">value<pos:position pos:line="77" pos:column="12"/></name> <operator pos:line="77" pos:column="13">=<pos:position pos:line="77" pos:column="14"/></operator> <name pos:line="77" pos:column="15">NULL<pos:position pos:line="77" pos:column="19"/></name></expr>;<pos:position pos:line="77" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="79" pos:column="5">else <if pos:line="79" pos:column="10">if<condition pos:line="79" pos:column="12">(<expr><call><name pos:line="79" pos:column="13">strcasecompare<pos:position pos:line="79" pos:column="27"/></name><argument_list pos:line="79" pos:column="27">(<argument><expr><name pos:line="79" pos:column="28">name<pos:position pos:line="79" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="34">"SECTION"<pos:position pos:line="79" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="44"/></argument_list></call> <operator pos:line="79" pos:column="45">&amp;&amp;<pos:position pos:line="79" pos:column="55"/></operator> <operator pos:line="79" pos:column="48">!<pos:position pos:line="79" pos:column="49"/></operator><name><name pos:line="79" pos:column="49">imap<pos:position pos:line="79" pos:column="53"/></name><operator pos:line="79" pos:column="53">-&gt;<pos:position pos:line="79" pos:column="58"/></operator><name pos:line="79" pos:column="55">section<pos:position pos:line="79" pos:column="62"/></name></name></expr>)<pos:position pos:line="79" pos:column="63"/></condition><then pos:line="79" pos:column="63"> <block pos:line="79" pos:column="64">{
      <if pos:line="80" pos:column="7">if<condition pos:line="80" pos:column="9">(<expr><name pos:line="80" pos:column="10">valuelen<pos:position pos:line="80" pos:column="18"/></name> <operator pos:line="80" pos:column="19">&gt;<pos:position pos:line="80" pos:column="23"/></operator> <literal type="number" pos:line="80" pos:column="21">0<pos:position pos:line="80" pos:column="22"/></literal> <operator pos:line="80" pos:column="23">&amp;&amp;<pos:position pos:line="80" pos:column="33"/></operator> <name><name pos:line="80" pos:column="26">value<pos:position pos:line="80" pos:column="31"/></name><index pos:line="80" pos:column="31">[<expr><name pos:line="80" pos:column="32">valuelen<pos:position pos:line="80" pos:column="40"/></name> <operator pos:line="80" pos:column="41">-<pos:position pos:line="80" pos:column="42"/></operator> <literal type="number" pos:line="80" pos:column="43">1<pos:position pos:line="80" pos:column="44"/></literal></expr>]<pos:position pos:line="80" pos:column="45"/></index></name> <operator pos:line="80" pos:column="46">==<pos:position pos:line="80" pos:column="48"/></operator> <literal type="char" pos:line="80" pos:column="49">'/'<pos:position pos:line="80" pos:column="52"/></literal></expr>)<pos:position pos:line="80" pos:column="53"/></condition><then pos:line="80" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="81" pos:column="9">value<pos:position pos:line="81" pos:column="14"/></name><index pos:line="81" pos:column="14">[<expr><name pos:line="81" pos:column="15">valuelen<pos:position pos:line="81" pos:column="23"/></name> <operator pos:line="81" pos:column="24">-<pos:position pos:line="81" pos:column="25"/></operator> <literal type="number" pos:line="81" pos:column="26">1<pos:position pos:line="81" pos:column="27"/></literal></expr>]<pos:position pos:line="81" pos:column="28"/></index></name> <operator pos:line="81" pos:column="29">=<pos:position pos:line="81" pos:column="30"/></operator> <literal type="char" pos:line="81" pos:column="31">'\0'<pos:position pos:line="81" pos:column="35"/></literal></expr>;<pos:position pos:line="81" pos:column="36"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name><name pos:line="83" pos:column="7">imap<pos:position pos:line="83" pos:column="11"/></name><operator pos:line="83" pos:column="11">-&gt;<pos:position pos:line="83" pos:column="16"/></operator><name pos:line="83" pos:column="13">section<pos:position pos:line="83" pos:column="20"/></name></name> <operator pos:line="83" pos:column="21">=<pos:position pos:line="83" pos:column="22"/></operator> <name pos:line="83" pos:column="23">value<pos:position pos:line="83" pos:column="28"/></name></expr>;<pos:position pos:line="83" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="84" pos:column="7">value<pos:position pos:line="84" pos:column="12"/></name> <operator pos:line="84" pos:column="13">=<pos:position pos:line="84" pos:column="14"/></operator> <name pos:line="84" pos:column="15">NULL<pos:position pos:line="84" pos:column="19"/></name></expr>;<pos:position pos:line="84" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="86" pos:column="5">else <if pos:line="86" pos:column="10">if<condition pos:line="86" pos:column="12">(<expr><call><name pos:line="86" pos:column="13">strcasecompare<pos:position pos:line="86" pos:column="27"/></name><argument_list pos:line="86" pos:column="27">(<argument><expr><name pos:line="86" pos:column="28">name<pos:position pos:line="86" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="34">"PARTIAL"<pos:position pos:line="86" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="44"/></argument_list></call> <operator pos:line="86" pos:column="45">&amp;&amp;<pos:position pos:line="86" pos:column="55"/></operator> <operator pos:line="86" pos:column="48">!<pos:position pos:line="86" pos:column="49"/></operator><name><name pos:line="86" pos:column="49">imap<pos:position pos:line="86" pos:column="53"/></name><operator pos:line="86" pos:column="53">-&gt;<pos:position pos:line="86" pos:column="58"/></operator><name pos:line="86" pos:column="55">partial<pos:position pos:line="86" pos:column="62"/></name></name></expr>)<pos:position pos:line="86" pos:column="63"/></condition><then pos:line="86" pos:column="63"> <block pos:line="86" pos:column="64">{
      <if pos:line="87" pos:column="7">if<condition pos:line="87" pos:column="9">(<expr><name pos:line="87" pos:column="10">valuelen<pos:position pos:line="87" pos:column="18"/></name> <operator pos:line="87" pos:column="19">&gt;<pos:position pos:line="87" pos:column="23"/></operator> <literal type="number" pos:line="87" pos:column="21">0<pos:position pos:line="87" pos:column="22"/></literal> <operator pos:line="87" pos:column="23">&amp;&amp;<pos:position pos:line="87" pos:column="33"/></operator> <name><name pos:line="87" pos:column="26">value<pos:position pos:line="87" pos:column="31"/></name><index pos:line="87" pos:column="31">[<expr><name pos:line="87" pos:column="32">valuelen<pos:position pos:line="87" pos:column="40"/></name> <operator pos:line="87" pos:column="41">-<pos:position pos:line="87" pos:column="42"/></operator> <literal type="number" pos:line="87" pos:column="43">1<pos:position pos:line="87" pos:column="44"/></literal></expr>]<pos:position pos:line="87" pos:column="45"/></index></name> <operator pos:line="87" pos:column="46">==<pos:position pos:line="87" pos:column="48"/></operator> <literal type="char" pos:line="87" pos:column="49">'/'<pos:position pos:line="87" pos:column="52"/></literal></expr>)<pos:position pos:line="87" pos:column="53"/></condition><then pos:line="87" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="88" pos:column="9">value<pos:position pos:line="88" pos:column="14"/></name><index pos:line="88" pos:column="14">[<expr><name pos:line="88" pos:column="15">valuelen<pos:position pos:line="88" pos:column="23"/></name> <operator pos:line="88" pos:column="24">-<pos:position pos:line="88" pos:column="25"/></operator> <literal type="number" pos:line="88" pos:column="26">1<pos:position pos:line="88" pos:column="27"/></literal></expr>]<pos:position pos:line="88" pos:column="28"/></index></name> <operator pos:line="88" pos:column="29">=<pos:position pos:line="88" pos:column="30"/></operator> <literal type="char" pos:line="88" pos:column="31">'\0'<pos:position pos:line="88" pos:column="35"/></literal></expr>;<pos:position pos:line="88" pos:column="36"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name><name pos:line="90" pos:column="7">imap<pos:position pos:line="90" pos:column="11"/></name><operator pos:line="90" pos:column="11">-&gt;<pos:position pos:line="90" pos:column="16"/></operator><name pos:line="90" pos:column="13">partial<pos:position pos:line="90" pos:column="20"/></name></name> <operator pos:line="90" pos:column="21">=<pos:position pos:line="90" pos:column="22"/></operator> <name pos:line="90" pos:column="23">value<pos:position pos:line="90" pos:column="28"/></name></expr>;<pos:position pos:line="90" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="91" pos:column="7">value<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">=<pos:position pos:line="91" pos:column="14"/></operator> <name pos:line="91" pos:column="15">NULL<pos:position pos:line="91" pos:column="19"/></name></expr>;<pos:position pos:line="91" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if></elseif>
    <else pos:line="93" pos:column="5">else <block pos:line="93" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="94" pos:column="7">free<pos:position pos:line="94" pos:column="11"/></name><argument_list pos:line="94" pos:column="11">(<argument><expr><name pos:line="94" pos:column="12">name<pos:position pos:line="94" pos:column="16"/></name></expr></argument>)<pos:position pos:line="94" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="95" pos:column="7">free<pos:position pos:line="95" pos:column="11"/></name><argument_list pos:line="95" pos:column="11">(<argument><expr><name pos:line="95" pos:column="12">value<pos:position pos:line="95" pos:column="17"/></name></expr></argument>)<pos:position pos:line="95" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="19"/></expr_stmt>

      <return pos:line="97" pos:column="7">return <expr><name pos:line="97" pos:column="14">CURLE_URL_MALFORMAT<pos:position pos:line="97" pos:column="33"/></name></expr>;<pos:position pos:line="97" pos:column="34"/></return>
    }<pos:position pos:line="98" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="100" pos:column="5">free<pos:position pos:line="100" pos:column="9"/></name><argument_list pos:line="100" pos:column="9">(<argument><expr><name pos:line="100" pos:column="10">name<pos:position pos:line="100" pos:column="14"/></name></expr></argument>)<pos:position pos:line="100" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">free<pos:position pos:line="101" pos:column="9"/></name><argument_list pos:line="101" pos:column="9">(<argument><expr><name pos:line="101" pos:column="10">value<pos:position pos:line="101" pos:column="15"/></name></expr></argument>)<pos:position pos:line="101" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="102" pos:column="4"/></block></while>

  <comment type="block" pos:line="104" pos:column="3">/* Does the URL contain a query parameter? Only valid when we have a mailbox
     and no UID as per RFC-5092 */</comment>
  <if pos:line="106" pos:column="3">if<condition pos:line="106" pos:column="5">(<expr><name><name pos:line="106" pos:column="6">imap<pos:position pos:line="106" pos:column="10"/></name><operator pos:line="106" pos:column="10">-&gt;<pos:position pos:line="106" pos:column="15"/></operator><name pos:line="106" pos:column="12">mailbox<pos:position pos:line="106" pos:column="19"/></name></name> <operator pos:line="106" pos:column="20">&amp;&amp;<pos:position pos:line="106" pos:column="30"/></operator> <operator pos:line="106" pos:column="23">!<pos:position pos:line="106" pos:column="24"/></operator><name><name pos:line="106" pos:column="24">imap<pos:position pos:line="106" pos:column="28"/></name><operator pos:line="106" pos:column="28">-&gt;<pos:position pos:line="106" pos:column="33"/></operator><name pos:line="106" pos:column="30">uid<pos:position pos:line="106" pos:column="33"/></name></name> <operator pos:line="106" pos:column="34">&amp;&amp;<pos:position pos:line="106" pos:column="44"/></operator> <operator pos:line="106" pos:column="37">*<pos:position pos:line="106" pos:column="38"/></operator><name pos:line="106" pos:column="38">ptr<pos:position pos:line="106" pos:column="41"/></name> <operator pos:line="106" pos:column="42">==<pos:position pos:line="106" pos:column="44"/></operator> <literal type="char" pos:line="106" pos:column="45">'?'<pos:position pos:line="106" pos:column="48"/></literal></expr>)<pos:position pos:line="106" pos:column="49"/></condition><then pos:line="106" pos:column="49"> <block pos:line="106" pos:column="50">{
    <comment type="block" pos:line="107" pos:column="5">/* Find the length of the query parameter */</comment>
    <expr_stmt><expr><name pos:line="108" pos:column="5">begin<pos:position pos:line="108" pos:column="10"/></name> <operator pos:line="108" pos:column="11">=<pos:position pos:line="108" pos:column="12"/></operator> <operator pos:line="108" pos:column="13">++<pos:position pos:line="108" pos:column="15"/></operator><name pos:line="108" pos:column="15">ptr<pos:position pos:line="108" pos:column="18"/></name></expr>;<pos:position pos:line="108" pos:column="19"/></expr_stmt>
    <while pos:line="109" pos:column="5">while<condition pos:line="109" pos:column="10">(<expr><call><name pos:line="109" pos:column="11">imap_is_bchar<pos:position pos:line="109" pos:column="24"/></name><argument_list pos:line="109" pos:column="24">(<argument><expr><operator pos:line="109" pos:column="25">*<pos:position pos:line="109" pos:column="26"/></operator><name pos:line="109" pos:column="26">ptr<pos:position pos:line="109" pos:column="29"/></name></expr></argument>)<pos:position pos:line="109" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="31"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="110" pos:column="7">ptr<pos:position pos:line="110" pos:column="10"/></name><operator pos:line="110" pos:column="10">++<pos:position pos:line="110" pos:column="12"/></operator></expr>;<pos:position pos:line="110" pos:column="13"/></expr_stmt></block></while>

    <comment type="block" pos:line="112" pos:column="5">/* Decode the query parameter */</comment>
    <expr_stmt><expr><name pos:line="113" pos:column="5">result<pos:position pos:line="113" pos:column="11"/></name> <operator pos:line="113" pos:column="12">=<pos:position pos:line="113" pos:column="13"/></operator> <call><name pos:line="113" pos:column="14">Curl_urldecode<pos:position pos:line="113" pos:column="28"/></name><argument_list pos:line="113" pos:column="28">(<argument><expr><name pos:line="113" pos:column="29">data<pos:position pos:line="113" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="35">begin<pos:position pos:line="113" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="42">ptr<pos:position pos:line="113" pos:column="45"/></name> <operator pos:line="113" pos:column="46">-<pos:position pos:line="113" pos:column="47"/></operator> <name pos:line="113" pos:column="48">begin<pos:position pos:line="113" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="55">&amp;<pos:position pos:line="113" pos:column="60"/></operator><name><name pos:line="113" pos:column="56">imap<pos:position pos:line="113" pos:column="60"/></name><operator pos:line="113" pos:column="60">-&gt;<pos:position pos:line="113" pos:column="65"/></operator><name pos:line="113" pos:column="62">query<pos:position pos:line="113" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="69">NULL<pos:position pos:line="113" pos:column="73"/></name></expr></argument>,
                            <argument><expr><name pos:line="114" pos:column="29">TRUE<pos:position pos:line="114" pos:column="33"/></name></expr></argument>)<pos:position pos:line="114" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="35"/></expr_stmt>
    <if pos:line="115" pos:column="5">if<condition pos:line="115" pos:column="7">(<expr><name pos:line="115" pos:column="8">result<pos:position pos:line="115" pos:column="14"/></name></expr>)<pos:position pos:line="115" pos:column="15"/></condition><then pos:line="115" pos:column="15">
      <block type="pseudo"><return pos:line="116" pos:column="7">return <expr><name pos:line="116" pos:column="14">result<pos:position pos:line="116" pos:column="20"/></name></expr>;<pos:position pos:line="116" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="117" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="119" pos:column="3">/* Any extra stuff at the end of the URL is an error */</comment>
  <if pos:line="120" pos:column="3">if<condition pos:line="120" pos:column="5">(<expr><operator pos:line="120" pos:column="6">*<pos:position pos:line="120" pos:column="7"/></operator><name pos:line="120" pos:column="7">ptr<pos:position pos:line="120" pos:column="10"/></name></expr>)<pos:position pos:line="120" pos:column="11"/></condition><then pos:line="120" pos:column="11">
    <block type="pseudo"><return pos:line="121" pos:column="5">return <expr><name pos:line="121" pos:column="12">CURLE_URL_MALFORMAT<pos:position pos:line="121" pos:column="31"/></name></expr>;<pos:position pos:line="121" pos:column="32"/></return></block></then></if>

  <return pos:line="123" pos:column="3">return <expr><name pos:line="123" pos:column="10">CURLE_OK<pos:position pos:line="123" pos:column="18"/></name></expr>;<pos:position pos:line="123" pos:column="19"/></return>
}<pos:position pos:line="124" pos:column="2"/></block></function></unit>
