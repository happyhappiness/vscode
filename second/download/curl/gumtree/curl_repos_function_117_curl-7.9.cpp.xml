<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_117_curl-7.9.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CHUNKcode<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">Curl_httpchunk_read<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">connectdata<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">conn<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">datap<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="3" pos:column="31">size_t<pos:position pos:line="3" pos:column="37"/></name></type> <name pos:line="3" pos:column="38">length<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="4" pos:column="31">size_t<pos:position pos:line="4" pos:column="37"/></name> <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier></type><name pos:line="4" pos:column="39">wrote<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="45"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_chunker<pos:position pos:line="7" pos:column="22"/></name></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">ch<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><operator pos:line="7" pos:column="29">&amp;<pos:position pos:line="7" pos:column="34"/></operator><name><name pos:line="7" pos:column="30">conn<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">proto<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">.<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="42">http<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">-&gt;<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="48">chunk<pos:position pos:line="7" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">piece<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="9" pos:column="3">*<pos:position pos:line="9" pos:column="4"/></operator><name pos:line="9" pos:column="4">wrote<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>;<pos:position pos:line="9" pos:column="14"/></expr_stmt> <comment type="block" pos:line="9" pos:column="15">/* nothing yet */</comment>

  <while pos:line="11" pos:column="3">while<condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">length<pos:position pos:line="11" pos:column="15"/></name></expr>)<pos:position pos:line="11" pos:column="16"/></condition> <block pos:line="11" pos:column="17">{
    <switch pos:line="12" pos:column="5">switch<condition pos:line="12" pos:column="11">(<expr><name><name pos:line="12" pos:column="12">ch<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">state<pos:position pos:line="12" pos:column="21"/></name></name></expr>)<pos:position pos:line="12" pos:column="22"/></condition> <block pos:line="12" pos:column="23">{
    <case pos:line="13" pos:column="5">case <expr><name pos:line="13" pos:column="10">CHUNK_HEX<pos:position pos:line="13" pos:column="19"/></name></expr>:<pos:position pos:line="13" pos:column="20"/></case>
      <if pos:line="14" pos:column="7">if<condition pos:line="14" pos:column="9">(<expr><call><name pos:line="14" pos:column="10">isxdigit<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><operator pos:line="14" pos:column="19">(<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">int<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">)<pos:position pos:line="14" pos:column="24"/></operator><operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">datap<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32"> <block pos:line="14" pos:column="33">{
        <if pos:line="15" pos:column="9">if<condition pos:line="15" pos:column="11">(<expr><name><name pos:line="15" pos:column="12">ch<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">hexindex<pos:position pos:line="15" pos:column="24"/></name></name> <operator pos:line="15" pos:column="25">&lt;<pos:position pos:line="15" pos:column="29"/></operator> <name pos:line="15" pos:column="27">MAXNUM_SIZE<pos:position pos:line="15" pos:column="38"/></name></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <block pos:line="15" pos:column="40">{
          <expr_stmt><expr><name><name pos:line="16" pos:column="11">ch<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">hexbuffer<pos:position pos:line="16" pos:column="24"/></name><index pos:line="16" pos:column="24">[<expr><name><name pos:line="16" pos:column="25">ch<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">hexindex<pos:position pos:line="16" pos:column="37"/></name></name></expr>]<pos:position pos:line="16" pos:column="38"/></index></name> <operator pos:line="16" pos:column="39">=<pos:position pos:line="16" pos:column="40"/></operator> <operator pos:line="16" pos:column="41">*<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="42">datap<pos:position pos:line="16" pos:column="47"/></name></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
          <expr_stmt><expr><name pos:line="17" pos:column="11">datap<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">++<pos:position pos:line="17" pos:column="18"/></operator></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
          <expr_stmt><expr><name pos:line="18" pos:column="11">length<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">--<pos:position pos:line="18" pos:column="19"/></operator></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="19" pos:column="11">ch<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">-&gt;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="15">hexindex<pos:position pos:line="19" pos:column="23"/></name></name><operator pos:line="19" pos:column="23">++<pos:position pos:line="19" pos:column="25"/></operator></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block></then>
        <else pos:line="21" pos:column="9">else <block pos:line="21" pos:column="14">{
          <return pos:line="22" pos:column="11">return <expr><name pos:line="22" pos:column="18">CHUNKE_TOO_LONG_HEX<pos:position pos:line="22" pos:column="37"/></name></expr>;<pos:position pos:line="22" pos:column="38"/></return> <comment type="block" pos:line="22" pos:column="39">/* longer hex than we support */</comment>
        }<pos:position pos:line="23" pos:column="10"/></block></else></if>
      }<pos:position pos:line="24" pos:column="8"/></block></then>
      <else pos:line="25" pos:column="7">else <block pos:line="25" pos:column="12">{
        <if pos:line="26" pos:column="9">if<condition pos:line="26" pos:column="11">(<expr><literal type="number" pos:line="26" pos:column="12">0<pos:position pos:line="26" pos:column="13"/></literal> <operator pos:line="26" pos:column="14">==<pos:position pos:line="26" pos:column="16"/></operator> <name><name pos:line="26" pos:column="17">ch<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">-&gt;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="21">hexindex<pos:position pos:line="26" pos:column="29"/></name></name></expr>)<pos:position pos:line="26" pos:column="30"/></condition><then pos:line="26" pos:column="30"> <block pos:line="26" pos:column="31">{
          <comment type="block" pos:line="27" pos:column="11">/* This is illegal data, we received junk where we expected
             a hexadecimal digit. */</comment>
          <return pos:line="29" pos:column="11">return <expr><name pos:line="29" pos:column="18">CHUNKE_ILLEGAL_HEX<pos:position pos:line="29" pos:column="36"/></name></expr>;<pos:position pos:line="29" pos:column="37"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="31" pos:column="9">/* length and datap are unmodified */</comment>
        <expr_stmt><expr><name><name pos:line="32" pos:column="9">ch<pos:position pos:line="32" pos:column="11"/></name><operator pos:line="32" pos:column="11">-&gt;<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="13">hexbuffer<pos:position pos:line="32" pos:column="22"/></name><index pos:line="32" pos:column="22">[<expr><name><name pos:line="32" pos:column="23">ch<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">-&gt;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="27">hexindex<pos:position pos:line="32" pos:column="35"/></name></name></expr>]<pos:position pos:line="32" pos:column="36"/></index></name><operator pos:line="32" pos:column="36">=<pos:position pos:line="32" pos:column="37"/></operator><literal type="number" pos:line="32" pos:column="37">0<pos:position pos:line="32" pos:column="38"/></literal></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">ch<pos:position pos:line="33" pos:column="11"/></name><operator pos:line="33" pos:column="11">-&gt;<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="13">datasize<pos:position pos:line="33" pos:column="21"/></name></name><operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator><call><name pos:line="33" pos:column="22">strtoul<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name><name pos:line="33" pos:column="30">ch<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">-&gt;<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="34">hexbuffer<pos:position pos:line="33" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="45">NULL<pos:position pos:line="33" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="51">16<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">ch<pos:position pos:line="34" pos:column="11"/></name><operator pos:line="34" pos:column="11">-&gt;<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="13">state<pos:position pos:line="34" pos:column="18"/></name></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <name pos:line="34" pos:column="21">CHUNK_POSTHEX<pos:position pos:line="34" pos:column="34"/></name></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
      }<pos:position pos:line="35" pos:column="8"/></block></else></if>
      <break pos:line="36" pos:column="7">break;<pos:position pos:line="36" pos:column="13"/></break>

    <case pos:line="38" pos:column="5">case <expr><name pos:line="38" pos:column="10">CHUNK_POSTHEX<pos:position pos:line="38" pos:column="23"/></name></expr>:<pos:position pos:line="38" pos:column="24"/></case>
      <comment type="block" pos:line="39" pos:column="7">/* In this state, we're waiting for CRLF to arrive. We support
         this to allow so called chunk-extensions to show up here
         before the CRLF comes. */</comment>
      <if pos:line="42" pos:column="7">if<condition pos:line="42" pos:column="9">(<expr><operator pos:line="42" pos:column="10">*<pos:position pos:line="42" pos:column="11"/></operator><name pos:line="42" pos:column="11">datap<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">==<pos:position pos:line="42" pos:column="19"/></operator> <literal type="char" pos:line="42" pos:column="20">'\r'<pos:position pos:line="42" pos:column="24"/></literal></expr>)<pos:position pos:line="42" pos:column="25"/></condition><then pos:line="42" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="43" pos:column="9">ch<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">-&gt;<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="13">state<pos:position pos:line="43" pos:column="18"/></name></name> <operator pos:line="43" pos:column="19">=<pos:position pos:line="43" pos:column="20"/></operator> <name pos:line="43" pos:column="21">CHUNK_CR<pos:position pos:line="43" pos:column="29"/></name></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="44" pos:column="7">length<pos:position pos:line="44" pos:column="13"/></name><operator pos:line="44" pos:column="13">--<pos:position pos:line="44" pos:column="15"/></operator></expr>;<pos:position pos:line="44" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="45" pos:column="7">datap<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">++<pos:position pos:line="45" pos:column="14"/></operator></expr>;<pos:position pos:line="45" pos:column="15"/></expr_stmt>
      <break pos:line="46" pos:column="7">break;<pos:position pos:line="46" pos:column="13"/></break>

    <case pos:line="48" pos:column="5">case <expr><name pos:line="48" pos:column="10">CHUNK_CR<pos:position pos:line="48" pos:column="18"/></name></expr>:<pos:position pos:line="48" pos:column="19"/></case>
      <comment type="block" pos:line="49" pos:column="7">/* waiting for the LF */</comment>
      <if pos:line="50" pos:column="7">if<condition pos:line="50" pos:column="9">(<expr><operator pos:line="50" pos:column="10">*<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">datap<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">==<pos:position pos:line="50" pos:column="19"/></operator> <literal type="char" pos:line="50" pos:column="20">'\n'<pos:position pos:line="50" pos:column="24"/></literal></expr>)<pos:position pos:line="50" pos:column="25"/></condition><then pos:line="50" pos:column="25"> <block pos:line="50" pos:column="26">{
        <comment type="block" pos:line="51" pos:column="9">/* we're now expecting data to come, unless size was zero! */</comment>
        <if pos:line="52" pos:column="9">if<condition pos:line="52" pos:column="11">(<expr><literal type="number" pos:line="52" pos:column="12">0<pos:position pos:line="52" pos:column="13"/></literal> <operator pos:line="52" pos:column="14">==<pos:position pos:line="52" pos:column="16"/></operator> <name><name pos:line="52" pos:column="17">ch<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">-&gt;<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="21">datasize<pos:position pos:line="52" pos:column="29"/></name></name></expr>)<pos:position pos:line="52" pos:column="30"/></condition><then pos:line="52" pos:column="30"> <block pos:line="52" pos:column="31">{
          <expr_stmt><expr><name><name pos:line="53" pos:column="11">ch<pos:position pos:line="53" pos:column="13"/></name><operator pos:line="53" pos:column="13">-&gt;<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="15">state<pos:position pos:line="53" pos:column="20"/></name></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <name pos:line="53" pos:column="23">CHUNK_STOP<pos:position pos:line="53" pos:column="33"/></name></expr>;<pos:position pos:line="53" pos:column="34"/></expr_stmt> <comment type="block" pos:line="53" pos:column="35">/* stop reading! */</comment>
          <if pos:line="54" pos:column="11">if<condition pos:line="54" pos:column="13">(<expr><literal type="number" pos:line="54" pos:column="14">1<pos:position pos:line="54" pos:column="15"/></literal> <operator pos:line="54" pos:column="16">==<pos:position pos:line="54" pos:column="18"/></operator> <name pos:line="54" pos:column="19">length<pos:position pos:line="54" pos:column="25"/></name></expr>)<pos:position pos:line="54" pos:column="26"/></condition><then pos:line="54" pos:column="26"> <block pos:line="54" pos:column="27">{
            <comment type="block" pos:line="55" pos:column="13">/* This was the final byte, return right now */</comment>
            <return pos:line="56" pos:column="13">return <expr><name pos:line="56" pos:column="20">CHUNKE_STOP<pos:position pos:line="56" pos:column="31"/></name></expr>;<pos:position pos:line="56" pos:column="32"/></return>
          }<pos:position pos:line="57" pos:column="12"/></block></then></if>
        }<pos:position pos:line="58" pos:column="10"/></block></then>
        <else pos:line="59" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="60" pos:column="11">ch<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">-&gt;<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="15">state<pos:position pos:line="60" pos:column="20"/></name></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <name pos:line="60" pos:column="23">CHUNK_DATA<pos:position pos:line="60" pos:column="33"/></name></expr>;<pos:position pos:line="60" pos:column="34"/></expr_stmt></block></else></if>
      }<pos:position pos:line="61" pos:column="8"/></block></then>
      <else pos:line="62" pos:column="7">else
        <comment type="block" pos:line="63" pos:column="9">/* previously we got a fake CR, go back to CR waiting! */</comment>
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="64" pos:column="9">ch<pos:position pos:line="64" pos:column="11"/></name><operator pos:line="64" pos:column="11">-&gt;<pos:position pos:line="64" pos:column="16"/></operator><name pos:line="64" pos:column="13">state<pos:position pos:line="64" pos:column="18"/></name></name> <operator pos:line="64" pos:column="19">=<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">CHUNK_CR<pos:position pos:line="64" pos:column="29"/></name></expr>;<pos:position pos:line="64" pos:column="30"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="65" pos:column="7">datap<pos:position pos:line="65" pos:column="12"/></name><operator pos:line="65" pos:column="12">++<pos:position pos:line="65" pos:column="14"/></operator></expr>;<pos:position pos:line="65" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="66" pos:column="7">length<pos:position pos:line="66" pos:column="13"/></name><operator pos:line="66" pos:column="13">--<pos:position pos:line="66" pos:column="15"/></operator></expr>;<pos:position pos:line="66" pos:column="16"/></expr_stmt>
      <break pos:line="67" pos:column="7">break;<pos:position pos:line="67" pos:column="13"/></break>

    <case pos:line="69" pos:column="5">case <expr><name pos:line="69" pos:column="10">CHUNK_DATA<pos:position pos:line="69" pos:column="20"/></name></expr>:<pos:position pos:line="69" pos:column="21"/></case>
      <comment type="block" pos:line="70" pos:column="7">/* we get pure and fine data

         We expect another 'datasize' of data. We have 'length' right now,
         it can be more or less than 'datasize'. Get the smallest piece.
      */</comment>
      <expr_stmt><expr><name pos:line="75" pos:column="7">piece<pos:position pos:line="75" pos:column="12"/></name> <operator pos:line="75" pos:column="13">=<pos:position pos:line="75" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="75" pos:column="15">(<pos:position pos:line="75" pos:column="16"/></operator><name><name pos:line="75" pos:column="16">ch<pos:position pos:line="75" pos:column="18"/></name><operator pos:line="75" pos:column="18">-&gt;<pos:position pos:line="75" pos:column="23"/></operator><name pos:line="75" pos:column="20">datasize<pos:position pos:line="75" pos:column="28"/></name></name> <operator pos:line="75" pos:column="29">&gt;=<pos:position pos:line="75" pos:column="34"/></operator> <name pos:line="75" pos:column="32">length<pos:position pos:line="75" pos:column="38"/></name><operator pos:line="75" pos:column="38">)<pos:position pos:line="75" pos:column="39"/></operator></expr>?<pos:position pos:line="75" pos:column="40"/></condition><then><expr><name pos:line="75" pos:column="40">length<pos:position pos:line="75" pos:column="46"/></name></expr></then><else pos:line="75" pos:column="46">:<expr><name><name pos:line="75" pos:column="47">ch<pos:position pos:line="75" pos:column="49"/></name><operator pos:line="75" pos:column="49">-&gt;<pos:position pos:line="75" pos:column="54"/></operator><name pos:line="75" pos:column="51">datasize<pos:position pos:line="75" pos:column="59"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="75" pos:column="60"/></expr_stmt>

      <comment type="block" pos:line="77" pos:column="7">/* Write the data portion available */</comment>
      <expr_stmt><expr><name pos:line="78" pos:column="7">result<pos:position pos:line="78" pos:column="13"/></name> <operator pos:line="78" pos:column="14">=<pos:position pos:line="78" pos:column="15"/></operator> <call><name pos:line="78" pos:column="16">Curl_client_write<pos:position pos:line="78" pos:column="33"/></name><argument_list pos:line="78" pos:column="33">(<argument><expr><name><name pos:line="78" pos:column="34">conn<pos:position pos:line="78" pos:column="38"/></name><operator pos:line="78" pos:column="38">-&gt;<pos:position pos:line="78" pos:column="43"/></operator><name pos:line="78" pos:column="40">data<pos:position pos:line="78" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="46">CLIENTWRITE_BODY<pos:position pos:line="78" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="64">datap<pos:position pos:line="78" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="71">piece<pos:position pos:line="78" pos:column="76"/></name></expr></argument>)<pos:position pos:line="78" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="78"/></expr_stmt>
      <if pos:line="79" pos:column="7">if<condition pos:line="79" pos:column="9">(<expr><name pos:line="79" pos:column="10">result<pos:position pos:line="79" pos:column="16"/></name></expr>)<pos:position pos:line="79" pos:column="17"/></condition><then pos:line="79" pos:column="17">
        <block type="pseudo"><return pos:line="80" pos:column="9">return <expr><name pos:line="80" pos:column="16">CHUNKE_WRITE_ERROR<pos:position pos:line="80" pos:column="34"/></name></expr>;<pos:position pos:line="80" pos:column="35"/></return></block></then></if>
      <expr_stmt><expr><operator pos:line="81" pos:column="7">*<pos:position pos:line="81" pos:column="8"/></operator><name pos:line="81" pos:column="8">wrote<pos:position pos:line="81" pos:column="13"/></name> <operator pos:line="81" pos:column="14">+=<pos:position pos:line="81" pos:column="16"/></operator> <name pos:line="81" pos:column="17">piece<pos:position pos:line="81" pos:column="22"/></name></expr>;<pos:position pos:line="81" pos:column="23"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="83" pos:column="7">ch<pos:position pos:line="83" pos:column="9"/></name><operator pos:line="83" pos:column="9">-&gt;<pos:position pos:line="83" pos:column="14"/></operator><name pos:line="83" pos:column="11">datasize<pos:position pos:line="83" pos:column="19"/></name></name> <operator pos:line="83" pos:column="20">-=<pos:position pos:line="83" pos:column="22"/></operator> <name pos:line="83" pos:column="23">piece<pos:position pos:line="83" pos:column="28"/></name></expr>;<pos:position pos:line="83" pos:column="29"/></expr_stmt> <comment type="block" pos:line="83" pos:column="30">/* decrease amount left to expect */</comment>
      <expr_stmt><expr><name pos:line="84" pos:column="7">datap<pos:position pos:line="84" pos:column="12"/></name> <operator pos:line="84" pos:column="13">+=<pos:position pos:line="84" pos:column="15"/></operator> <name pos:line="84" pos:column="16">piece<pos:position pos:line="84" pos:column="21"/></name></expr>;<pos:position pos:line="84" pos:column="22"/></expr_stmt>    <comment type="block" pos:line="84" pos:column="26">/* move read pointer forward */</comment>
      <expr_stmt><expr><name pos:line="85" pos:column="7">length<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">-=<pos:position pos:line="85" pos:column="16"/></operator> <name pos:line="85" pos:column="17">piece<pos:position pos:line="85" pos:column="22"/></name></expr>;<pos:position pos:line="85" pos:column="23"/></expr_stmt>   <comment type="block" pos:line="85" pos:column="26">/* decrease space left in this round */</comment>

      <if pos:line="87" pos:column="7">if<condition pos:line="87" pos:column="9">(<expr><literal type="number" pos:line="87" pos:column="10">0<pos:position pos:line="87" pos:column="11"/></literal> <operator pos:line="87" pos:column="12">==<pos:position pos:line="87" pos:column="14"/></operator> <name><name pos:line="87" pos:column="15">ch<pos:position pos:line="87" pos:column="17"/></name><operator pos:line="87" pos:column="17">-&gt;<pos:position pos:line="87" pos:column="22"/></operator><name pos:line="87" pos:column="19">datasize<pos:position pos:line="87" pos:column="27"/></name></name></expr>)<pos:position pos:line="87" pos:column="28"/></condition><then pos:line="87" pos:column="28">
        <comment type="block" pos:line="88" pos:column="9">/* end of data this round, we now expect a trailing CRLF */</comment>
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="89" pos:column="9">ch<pos:position pos:line="89" pos:column="11"/></name><operator pos:line="89" pos:column="11">-&gt;<pos:position pos:line="89" pos:column="16"/></operator><name pos:line="89" pos:column="13">state<pos:position pos:line="89" pos:column="18"/></name></name> <operator pos:line="89" pos:column="19">=<pos:position pos:line="89" pos:column="20"/></operator> <name pos:line="89" pos:column="21">CHUNK_POSTCR<pos:position pos:line="89" pos:column="33"/></name></expr>;<pos:position pos:line="89" pos:column="34"/></expr_stmt></block></then></if>
      <break pos:line="90" pos:column="7">break;<pos:position pos:line="90" pos:column="13"/></break>

    <case pos:line="92" pos:column="5">case <expr><name pos:line="92" pos:column="10">CHUNK_POSTCR<pos:position pos:line="92" pos:column="22"/></name></expr>:<pos:position pos:line="92" pos:column="23"/></case>
      <if pos:line="93" pos:column="7">if<condition pos:line="93" pos:column="9">(<expr><operator pos:line="93" pos:column="10">*<pos:position pos:line="93" pos:column="11"/></operator><name pos:line="93" pos:column="11">datap<pos:position pos:line="93" pos:column="16"/></name> <operator pos:line="93" pos:column="17">==<pos:position pos:line="93" pos:column="19"/></operator> <literal type="char" pos:line="93" pos:column="20">'\r'<pos:position pos:line="93" pos:column="24"/></literal></expr>)<pos:position pos:line="93" pos:column="25"/></condition><then pos:line="93" pos:column="25"> <block pos:line="93" pos:column="26">{
        <expr_stmt><expr><name><name pos:line="94" pos:column="9">ch<pos:position pos:line="94" pos:column="11"/></name><operator pos:line="94" pos:column="11">-&gt;<pos:position pos:line="94" pos:column="16"/></operator><name pos:line="94" pos:column="13">state<pos:position pos:line="94" pos:column="18"/></name></name> <operator pos:line="94" pos:column="19">=<pos:position pos:line="94" pos:column="20"/></operator> <name pos:line="94" pos:column="21">CHUNK_POSTLF<pos:position pos:line="94" pos:column="33"/></name></expr>;<pos:position pos:line="94" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="95" pos:column="9">datap<pos:position pos:line="95" pos:column="14"/></name><operator pos:line="95" pos:column="14">++<pos:position pos:line="95" pos:column="16"/></operator></expr>;<pos:position pos:line="95" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="96" pos:column="9">length<pos:position pos:line="96" pos:column="15"/></name><operator pos:line="96" pos:column="15">--<pos:position pos:line="96" pos:column="17"/></operator></expr>;<pos:position pos:line="96" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="97" pos:column="8"/></block></then>
      <else pos:line="98" pos:column="7">else
        <block type="pseudo"><return pos:line="99" pos:column="9">return <expr><name pos:line="99" pos:column="16">CHUNKE_BAD_CHUNK<pos:position pos:line="99" pos:column="32"/></name></expr>;<pos:position pos:line="99" pos:column="33"/></return></block></else></if>
      <break pos:line="100" pos:column="7">break;<pos:position pos:line="100" pos:column="13"/></break>

    <case pos:line="102" pos:column="5">case <expr><name pos:line="102" pos:column="10">CHUNK_POSTLF<pos:position pos:line="102" pos:column="22"/></name></expr>:<pos:position pos:line="102" pos:column="23"/></case>
      <if pos:line="103" pos:column="7">if<condition pos:line="103" pos:column="9">(<expr><operator pos:line="103" pos:column="10">*<pos:position pos:line="103" pos:column="11"/></operator><name pos:line="103" pos:column="11">datap<pos:position pos:line="103" pos:column="16"/></name> <operator pos:line="103" pos:column="17">==<pos:position pos:line="103" pos:column="19"/></operator> <literal type="char" pos:line="103" pos:column="20">'\n'<pos:position pos:line="103" pos:column="24"/></literal></expr>)<pos:position pos:line="103" pos:column="25"/></condition><then pos:line="103" pos:column="25"> <block pos:line="103" pos:column="26">{
        <comment type="block" pos:line="104" pos:column="9">/*
         * The last one before we go back to hex state and start all
         * over.
         */</comment>
        <expr_stmt><expr><call><name pos:line="108" pos:column="9">Curl_httpchunk_init<pos:position pos:line="108" pos:column="28"/></name><argument_list pos:line="108" pos:column="28">(<argument><expr><name pos:line="108" pos:column="29">conn<pos:position pos:line="108" pos:column="33"/></name></expr></argument>)<pos:position pos:line="108" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="109" pos:column="9">datap<pos:position pos:line="109" pos:column="14"/></name><operator pos:line="109" pos:column="14">++<pos:position pos:line="109" pos:column="16"/></operator></expr>;<pos:position pos:line="109" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="110" pos:column="9">length<pos:position pos:line="110" pos:column="15"/></name><operator pos:line="110" pos:column="15">--<pos:position pos:line="110" pos:column="17"/></operator></expr>;<pos:position pos:line="110" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="111" pos:column="8"/></block></then>
      <else pos:line="112" pos:column="7">else
        <block type="pseudo"><return pos:line="113" pos:column="9">return <expr><name pos:line="113" pos:column="16">CHUNKE_BAD_CHUNK<pos:position pos:line="113" pos:column="32"/></name></expr>;<pos:position pos:line="113" pos:column="33"/></return></block></else></if>
      <break pos:line="114" pos:column="7">break;<pos:position pos:line="114" pos:column="13"/></break>

    <case pos:line="116" pos:column="5">case <expr><name pos:line="116" pos:column="10">CHUNK_STOP<pos:position pos:line="116" pos:column="20"/></name></expr>:<pos:position pos:line="116" pos:column="21"/></case>
      <comment type="block" pos:line="117" pos:column="7">/* If we arrive here, there is data left in the end of the buffer
         even if there's no more chunks to read */</comment>
      <expr_stmt><expr><name><name pos:line="119" pos:column="7">ch<pos:position pos:line="119" pos:column="9"/></name><operator pos:line="119" pos:column="9">-&gt;<pos:position pos:line="119" pos:column="14"/></operator><name pos:line="119" pos:column="11">dataleft<pos:position pos:line="119" pos:column="19"/></name></name> <operator pos:line="119" pos:column="20">=<pos:position pos:line="119" pos:column="21"/></operator> <name pos:line="119" pos:column="22">length<pos:position pos:line="119" pos:column="28"/></name></expr>;<pos:position pos:line="119" pos:column="29"/></expr_stmt>
      <return pos:line="120" pos:column="7">return <expr><name pos:line="120" pos:column="14">CHUNKE_STOP<pos:position pos:line="120" pos:column="25"/></name></expr>;<pos:position pos:line="120" pos:column="26"/></return> <comment type="block" pos:line="120" pos:column="27">/* return stop */</comment>
    <default pos:line="121" pos:column="5">default:<pos:position pos:line="121" pos:column="13"/></default>
      <return pos:line="122" pos:column="7">return <expr><name pos:line="122" pos:column="14">CHUNKE_STATE_ERROR<pos:position pos:line="122" pos:column="32"/></name></expr>;<pos:position pos:line="122" pos:column="33"/></return>
    }<pos:position pos:line="123" pos:column="6"/></block></switch>
  }<pos:position pos:line="124" pos:column="4"/></block></while>
  <return pos:line="125" pos:column="3">return <expr><name pos:line="125" pos:column="10">CHUNKE_OK<pos:position pos:line="125" pos:column="19"/></name></expr>;<pos:position pos:line="125" pos:column="20"/></return>
}<pos:position pos:line="126" pos:column="2"/></block></function></unit>
