<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_307_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">Curl_addrinfo<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">my_getaddrinfo<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">SessionHandle<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">data<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">hostname<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="3" pos:column="38">int<pos:position pos:line="3" pos:column="41"/></name></type> <name pos:line="3" pos:column="42">port<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="4" pos:column="38">char<pos:position pos:line="4" pos:column="42"/></name> <modifier pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></modifier><modifier pos:line="4" pos:column="44">*<pos:position pos:line="4" pos:column="45"/></modifier></type><name pos:line="4" pos:column="45">bufp<pos:position pos:line="4" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="50"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">hostent<pos:position pos:line="6" pos:column="17"/></name></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">h<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">in_addr_t<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">in<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">ret<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt> <comment type="block" pos:line="8" pos:column="12">/* this variable is unused on several platforms but used on some */</comment>

<cpp:define pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">define<pos:position pos:line="10" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="10" pos:column="9">CURL_NAMELOOKUP_SIZE<pos:position pos:line="10" pos:column="29"/></name></cpp:macro> <cpp:value pos:line="10" pos:column="30">9000<pos:position pos:line="10" pos:column="34"/></cpp:value></cpp:define>
  <comment type="block" pos:line="11" pos:column="3">/* Allocate enough memory to hold the full name information structs and
   * everything. OSF1 is known to require at least 8872 bytes. The buffer
   * required for storing all possible aliases and IP numbers is according to
   * Stevens' Unix Network Programming 2nd editor, p. 304: 8192 bytes! */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">port<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator><literal type="number" pos:line="15" pos:column="8">0<pos:position pos:line="15" pos:column="9"/></literal></expr>;<pos:position pos:line="15" pos:column="10"/></expr_stmt> <comment type="block" pos:line="15" pos:column="11">/* unused in IPv4 code */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">ret<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <literal type="number" pos:line="16" pos:column="9">0<pos:position pos:line="16" pos:column="10"/></literal></expr>;<pos:position pos:line="16" pos:column="11"/></expr_stmt> <comment type="block" pos:line="16" pos:column="12">/* to prevent the compiler warning */</comment>

  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">( <expr><operator pos:line="18" pos:column="8">(<pos:position pos:line="18" pos:column="9"/></operator><name pos:line="18" pos:column="9">in<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator><call><name pos:line="18" pos:column="12">inet_addr<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">hostname<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call><operator pos:line="18" pos:column="31">)<pos:position pos:line="18" pos:column="32"/></operator> <operator pos:line="18" pos:column="33">!=<pos:position pos:line="18" pos:column="35"/></operator> <name pos:line="18" pos:column="36">INADDR_NONE<pos:position pos:line="18" pos:column="47"/></name></expr> )<pos:position pos:line="18" pos:column="49"/></condition><then pos:line="18" pos:column="49"> <block pos:line="18" pos:column="50">{
    <decl_stmt><decl><type><name><name pos:line="19" pos:column="5">struct<pos:position pos:line="19" pos:column="11"/></name> <name pos:line="19" pos:column="12">in_addr<pos:position pos:line="19" pos:column="19"/></name></name> <modifier pos:line="19" pos:column="20">*<pos:position pos:line="19" pos:column="21"/></modifier></type><name pos:line="19" pos:column="21">addrentry<pos:position pos:line="19" pos:column="30"/></name></decl>;<pos:position pos:line="19" pos:column="31"/></decl_stmt>
    <struct pos:line="20" pos:column="5">struct <name pos:line="20" pos:column="12">namebuf<pos:position pos:line="20" pos:column="19"/></name> <block pos:line="20" pos:column="20">{<public type="default" pos:line="20" pos:column="21">
        <decl_stmt><decl><type><name><name pos:line="21" pos:column="9">struct<pos:position pos:line="21" pos:column="15"/></name> <name pos:line="21" pos:column="16">hostent<pos:position pos:line="21" pos:column="23"/></name></name></type> <name pos:line="21" pos:column="24">hostentry<pos:position pos:line="21" pos:column="33"/></name></decl>;<pos:position pos:line="21" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">char<pos:position pos:line="22" pos:column="13"/></name> <modifier pos:line="22" pos:column="14">*<pos:position pos:line="22" pos:column="15"/></modifier></type><name><name pos:line="22" pos:column="15">h_addr_list<pos:position pos:line="22" pos:column="26"/></name><index pos:line="22" pos:column="26">[<expr><literal type="number" pos:line="22" pos:column="27">2<pos:position pos:line="22" pos:column="28"/></literal></expr>]<pos:position pos:line="22" pos:column="29"/></index></name></decl>;<pos:position pos:line="22" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="23" pos:column="9">struct<pos:position pos:line="23" pos:column="15"/></name> <name pos:line="23" pos:column="16">in_addr<pos:position pos:line="23" pos:column="23"/></name></name></type> <name pos:line="23" pos:column="24">addrentry<pos:position pos:line="23" pos:column="33"/></name></decl>;<pos:position pos:line="23" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">char<pos:position pos:line="24" pos:column="13"/></name></type> <name><name pos:line="24" pos:column="14">h_name<pos:position pos:line="24" pos:column="20"/></name><index pos:line="24" pos:column="20">[<expr><literal type="number" pos:line="24" pos:column="21">128<pos:position pos:line="24" pos:column="24"/></literal></expr>]<pos:position pos:line="24" pos:column="25"/></index></name></decl>;<pos:position pos:line="24" pos:column="26"/></decl_stmt>
    <pos:position pos:line="25" pos:column="5"/></public>}<pos:position pos:line="25" pos:column="6"/></block> <decl><modifier pos:line="25" pos:column="7">*<pos:position pos:line="25" pos:column="8"/></modifier><name pos:line="25" pos:column="8">buf<pos:position pos:line="25" pos:column="11"/></name> <init pos:line="25" pos:column="12">= <expr><operator pos:line="25" pos:column="14">(<pos:position pos:line="25" pos:column="15"/></operator>struct <name pos:line="25" pos:column="22">namebuf<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">*<pos:position pos:line="25" pos:column="31"/></operator><operator pos:line="25" pos:column="31">)<pos:position pos:line="25" pos:column="32"/></operator><call><name pos:line="25" pos:column="32">malloc<pos:position pos:line="25" pos:column="38"/></name><argument_list pos:line="25" pos:column="38">(<argument><expr><sizeof pos:line="25" pos:column="39">sizeof<argument_list pos:line="25" pos:column="45">(<argument><expr pos:line="25" pos:column="46">struct <name pos:line="25" pos:column="53">namebuf<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="63"/></struct>
    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><operator pos:line="26" pos:column="8">!<pos:position pos:line="26" pos:column="9"/></operator><name pos:line="26" pos:column="9">buf<pos:position pos:line="26" pos:column="12"/></name></expr>)<pos:position pos:line="26" pos:column="13"/></condition><then pos:line="26" pos:column="13">
      <block type="pseudo"><return pos:line="27" pos:column="7">return <expr><name pos:line="27" pos:column="14">NULL<pos:position pos:line="27" pos:column="18"/></name></expr>;<pos:position pos:line="27" pos:column="19"/></return></block></then></if> <comment type="block" pos:line="27" pos:column="20">/* major failure */</comment>
    <expr_stmt><expr><operator pos:line="28" pos:column="5">*<pos:position pos:line="28" pos:column="6"/></operator><name pos:line="28" pos:column="6">bufp<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <operator pos:line="28" pos:column="13">(<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">char<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">*<pos:position pos:line="28" pos:column="20"/></operator><operator pos:line="28" pos:column="20">)<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">buf<pos:position pos:line="28" pos:column="24"/></name></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name pos:line="30" pos:column="5">h<pos:position pos:line="30" pos:column="6"/></name> <operator pos:line="30" pos:column="7">=<pos:position pos:line="30" pos:column="8"/></operator> <operator pos:line="30" pos:column="9">&amp;<pos:position pos:line="30" pos:column="14"/></operator><name><name pos:line="30" pos:column="10">buf<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">-&gt;<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="15">hostentry<pos:position pos:line="30" pos:column="24"/></name></name></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">h<pos:position pos:line="31" pos:column="6"/></name><operator pos:line="31" pos:column="6">-&gt;<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="8">h_addr_list<pos:position pos:line="31" pos:column="19"/></name></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <operator pos:line="31" pos:column="22">&amp;<pos:position pos:line="31" pos:column="27"/></operator><name><name pos:line="31" pos:column="23">buf<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">-&gt;<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="28">h_addr_list<pos:position pos:line="31" pos:column="39"/></name><index pos:line="31" pos:column="39">[<expr><literal type="number" pos:line="31" pos:column="40">0<pos:position pos:line="31" pos:column="41"/></literal></expr>]<pos:position pos:line="31" pos:column="42"/></index></name></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">addrentry<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <operator pos:line="32" pos:column="17">&amp;<pos:position pos:line="32" pos:column="22"/></operator><name><name pos:line="32" pos:column="18">buf<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">-&gt;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="23">addrentry<pos:position pos:line="32" pos:column="32"/></name></name></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">addrentry<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">-&gt;<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="16">s_addr<pos:position pos:line="33" pos:column="22"/></name></name> <operator pos:line="33" pos:column="23">=<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="25">in<pos:position pos:line="33" pos:column="27"/></name></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">h<pos:position pos:line="34" pos:column="6"/></name><operator pos:line="34" pos:column="6">-&gt;<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="8">h_addr_list<pos:position pos:line="34" pos:column="19"/></name><index pos:line="34" pos:column="19">[<expr><literal type="number" pos:line="34" pos:column="20">0<pos:position pos:line="34" pos:column="21"/></literal></expr>]<pos:position pos:line="34" pos:column="22"/></index></name> <operator pos:line="34" pos:column="23">=<pos:position pos:line="34" pos:column="24"/></operator> <operator pos:line="34" pos:column="25">(<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">char<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">*<pos:position pos:line="34" pos:column="31"/></operator><operator pos:line="34" pos:column="31">)<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="32">addrentry<pos:position pos:line="34" pos:column="41"/></name></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">h<pos:position pos:line="35" pos:column="6"/></name><operator pos:line="35" pos:column="6">-&gt;<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="8">h_addr_list<pos:position pos:line="35" pos:column="19"/></name><index pos:line="35" pos:column="19">[<expr><literal type="number" pos:line="35" pos:column="20">1<pos:position pos:line="35" pos:column="21"/></literal></expr>]<pos:position pos:line="35" pos:column="22"/></index></name> <operator pos:line="35" pos:column="23">=<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="25">NULL<pos:position pos:line="35" pos:column="29"/></name></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">h<pos:position pos:line="36" pos:column="6"/></name><operator pos:line="36" pos:column="6">-&gt;<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="8">h_addrtype<pos:position pos:line="36" pos:column="18"/></name></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <name pos:line="36" pos:column="21">AF_INET<pos:position pos:line="36" pos:column="28"/></name></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">h<pos:position pos:line="37" pos:column="6"/></name><operator pos:line="37" pos:column="6">-&gt;<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="8">h_length<pos:position pos:line="37" pos:column="16"/></name></name> <operator pos:line="37" pos:column="17">=<pos:position pos:line="37" pos:column="18"/></operator> <sizeof pos:line="37" pos:column="19">sizeof<argument_list pos:line="37" pos:column="25">(<argument><expr><operator pos:line="37" pos:column="26">*<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="27">addrentry<pos:position pos:line="37" pos:column="36"/></name></expr></argument>)<pos:position pos:line="37" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="37" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">h<pos:position pos:line="38" pos:column="6"/></name><operator pos:line="38" pos:column="6">-&gt;<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="8">h_name<pos:position pos:line="38" pos:column="14"/></name></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <operator pos:line="38" pos:column="17">&amp;<pos:position pos:line="38" pos:column="22"/></operator><name><name pos:line="38" pos:column="18">buf<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">-&gt;<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="23">h_name<pos:position pos:line="38" pos:column="29"/></name><index pos:line="38" pos:column="29">[<expr><literal type="number" pos:line="38" pos:column="30">0<pos:position pos:line="38" pos:column="31"/></literal></expr>]<pos:position pos:line="38" pos:column="32"/></index></name></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">MakeIP<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><call><name pos:line="39" pos:column="12">ntohl<pos:position pos:line="39" pos:column="17"/></name><argument_list pos:line="39" pos:column="17">(<argument><expr><name pos:line="39" pos:column="18">in<pos:position pos:line="39" pos:column="20"/></name></expr></argument>)<pos:position pos:line="39" pos:column="21"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="39" pos:column="23">(<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="24">char<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">*<pos:position pos:line="39" pos:column="30"/></operator><operator pos:line="39" pos:column="30">)<pos:position pos:line="39" pos:column="31"/></operator><name><name pos:line="39" pos:column="31">h<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">-&gt;<pos:position pos:line="39" pos:column="37"/></operator><name pos:line="39" pos:column="34">h_name<pos:position pos:line="39" pos:column="40"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="42">sizeof<argument_list pos:line="39" pos:column="48">(<argument><expr><name><name pos:line="39" pos:column="49">buf<pos:position pos:line="39" pos:column="52"/></name><operator pos:line="39" pos:column="52">-&gt;<pos:position pos:line="39" pos:column="57"/></operator><name pos:line="39" pos:column="54">h_name<pos:position pos:line="39" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="63"/></expr_stmt>
  }<pos:position pos:line="40" pos:column="4"/></block></then>
<cpp:if pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">if<pos:position pos:line="41" pos:column="4"/></cpp:directive> <expr><call><name pos:line="41" pos:column="5">defined<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">HAVE_GETHOSTBYNAME_R<pos:position pos:line="41" pos:column="33"/></name></expr></argument>)<pos:position pos:line="41" pos:column="34"/></argument_list></call></expr></cpp:if>
  <else pos:line="42" pos:column="3">else <block pos:line="42" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">int<pos:position pos:line="43" pos:column="8"/></name></type> <name pos:line="43" pos:column="9">h_errnop<pos:position pos:line="43" pos:column="17"/></name></decl>;<pos:position pos:line="43" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">int<pos:position pos:line="44" pos:column="8"/></name></type> <name pos:line="44" pos:column="9">res<pos:position pos:line="44" pos:column="12"/></name><init pos:line="44" pos:column="12">=<expr><name pos:line="44" pos:column="13">ERANGE<pos:position pos:line="44" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="44" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">int<pos:position pos:line="45" pos:column="8"/></name></type> <name pos:line="45" pos:column="9">step_size<pos:position pos:line="45" pos:column="18"/></name><init pos:line="45" pos:column="18">=<expr><literal type="number" pos:line="45" pos:column="19">200<pos:position pos:line="45" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="45" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="46" pos:column="5">int<pos:position pos:line="46" pos:column="8"/></name> <modifier pos:line="46" pos:column="9">*<pos:position pos:line="46" pos:column="10"/></modifier></type><name pos:line="46" pos:column="10">buf<pos:position pos:line="46" pos:column="13"/></name> <init pos:line="46" pos:column="14">= <expr><operator pos:line="46" pos:column="16">(<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="17">int<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">*<pos:position pos:line="46" pos:column="22"/></operator><operator pos:line="46" pos:column="22">)<pos:position pos:line="46" pos:column="23"/></operator><call><name pos:line="46" pos:column="23">malloc<pos:position pos:line="46" pos:column="29"/></name><argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">CURL_NAMELOOKUP_SIZE<pos:position pos:line="46" pos:column="50"/></name></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="52"/></decl_stmt>
    <if pos:line="47" pos:column="5">if<condition pos:line="47" pos:column="7">(<expr><operator pos:line="47" pos:column="8">!<pos:position pos:line="47" pos:column="9"/></operator><name pos:line="47" pos:column="9">buf<pos:position pos:line="47" pos:column="12"/></name></expr>)<pos:position pos:line="47" pos:column="13"/></condition><then pos:line="47" pos:column="13">
      <block type="pseudo"><return pos:line="48" pos:column="7">return <expr><name pos:line="48" pos:column="14">NULL<pos:position pos:line="48" pos:column="18"/></name></expr>;<pos:position pos:line="48" pos:column="19"/></return></block></then></if> <comment type="block" pos:line="48" pos:column="20">/* major failure */</comment>
    <expr_stmt><expr><operator pos:line="49" pos:column="5">*<pos:position pos:line="49" pos:column="6"/></operator><name pos:line="49" pos:column="6">bufp<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">=<pos:position pos:line="49" pos:column="11"/></operator><operator pos:line="49" pos:column="11">(<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="12">char<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">*<pos:position pos:line="49" pos:column="18"/></operator><operator pos:line="49" pos:column="18">)<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="19">buf<pos:position pos:line="49" pos:column="22"/></name></expr>;<pos:position pos:line="49" pos:column="23"/></expr_stmt>

     <comment type="block" pos:line="51" pos:column="6">/* Workaround for gethostbyname_r bug in qnx nto. It is also _required_
        for some of these functions. */</comment>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">memset<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><name pos:line="53" pos:column="12">buf<pos:position pos:line="53" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="17">0<pos:position pos:line="53" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="20">CURL_NAMELOOKUP_SIZE<pos:position pos:line="53" pos:column="40"/></name></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>
<cpp:ifdef pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">ifdef<pos:position pos:line="54" pos:column="7"/></cpp:directive> <name pos:line="54" pos:column="8">HAVE_GETHOSTBYNAME_R_5<pos:position pos:line="54" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="55" pos:column="5">/* Solaris, IRIX and more */</comment>
    <expr_stmt><expr><operator pos:line="56" pos:column="5">(<pos:position pos:line="56" pos:column="6"/></operator><name pos:line="56" pos:column="6">void<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">)<pos:position pos:line="56" pos:column="11"/></operator><name pos:line="56" pos:column="11">res<pos:position pos:line="56" pos:column="14"/></name></expr>;<pos:position pos:line="56" pos:column="15"/></expr_stmt> <comment type="block" pos:line="56" pos:column="16">/* prevent compiler warning */</comment>
    <while pos:line="57" pos:column="5">while<condition pos:line="57" pos:column="10">(<expr><operator pos:line="57" pos:column="11">!<pos:position pos:line="57" pos:column="12"/></operator><name pos:line="57" pos:column="12">h<pos:position pos:line="57" pos:column="13"/></name></expr>)<pos:position pos:line="57" pos:column="14"/></condition> <block pos:line="57" pos:column="15">{
      <expr_stmt><expr><name pos:line="58" pos:column="7">h<pos:position pos:line="58" pos:column="8"/></name> <operator pos:line="58" pos:column="9">=<pos:position pos:line="58" pos:column="10"/></operator> <call><name pos:line="58" pos:column="11">gethostbyname_r<pos:position pos:line="58" pos:column="26"/></name><argument_list pos:line="58" pos:column="26">(<argument><expr><name pos:line="58" pos:column="27">hostname<pos:position pos:line="58" pos:column="35"/></name></expr></argument>,
                          <argument><expr><operator pos:line="59" pos:column="27">(<pos:position pos:line="59" pos:column="28"/></operator>struct <name pos:line="59" pos:column="35">hostent<pos:position pos:line="59" pos:column="42"/></name> <operator pos:line="59" pos:column="43">*<pos:position pos:line="59" pos:column="44"/></operator><operator pos:line="59" pos:column="44">)<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="45">buf<pos:position pos:line="59" pos:column="48"/></name></expr></argument>,
                          <argument><expr><operator pos:line="60" pos:column="27">(<pos:position pos:line="60" pos:column="28"/></operator><name pos:line="60" pos:column="28">char<pos:position pos:line="60" pos:column="32"/></name> <operator pos:line="60" pos:column="33">*<pos:position pos:line="60" pos:column="34"/></operator><operator pos:line="60" pos:column="34">)<pos:position pos:line="60" pos:column="35"/></operator><name pos:line="60" pos:column="35">buf<pos:position pos:line="60" pos:column="38"/></name> <operator pos:line="60" pos:column="39">+<pos:position pos:line="60" pos:column="40"/></operator> <sizeof pos:line="60" pos:column="41">sizeof<argument_list pos:line="60" pos:column="47">(<argument><expr pos:line="60" pos:column="48">struct <name pos:line="60" pos:column="55">hostent<pos:position pos:line="60" pos:column="62"/></name></expr></argument>)<pos:position pos:line="60" pos:column="63"/></argument_list></sizeof></expr></argument>,
                          <argument><expr><name pos:line="61" pos:column="27">step_size<pos:position pos:line="61" pos:column="36"/></name> <operator pos:line="61" pos:column="37">-<pos:position pos:line="61" pos:column="38"/></operator> <sizeof pos:line="61" pos:column="39">sizeof<argument_list pos:line="61" pos:column="45">(<argument><expr pos:line="61" pos:column="46">struct <name pos:line="61" pos:column="53">hostent<pos:position pos:line="61" pos:column="60"/></name></expr></argument>)<pos:position pos:line="61" pos:column="61"/></argument_list></sizeof></expr></argument>,
                          <argument><expr><operator pos:line="62" pos:column="27">&amp;<pos:position pos:line="62" pos:column="32"/></operator><name pos:line="62" pos:column="28">h_errnop<pos:position pos:line="62" pos:column="36"/></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>

      <comment type="block" pos:line="64" pos:column="7">/* If the buffer is too small, it returns NULL and sets errno to
         ERANGE. The errno is thread safe if this is compiled with
         -D_REENTRANT as then the 'errno' variable is a macro defined to
         get used properly for threads. */</comment>

      <if pos:line="69" pos:column="7">if<condition pos:line="69" pos:column="9">(<expr><name pos:line="69" pos:column="10">h<pos:position pos:line="69" pos:column="11"/></name> <operator pos:line="69" pos:column="12">||<pos:position pos:line="69" pos:column="14"/></operator> <operator pos:line="69" pos:column="15">(<pos:position pos:line="69" pos:column="16"/></operator><name pos:line="69" pos:column="16">errno<pos:position pos:line="69" pos:column="21"/></name> <operator pos:line="69" pos:column="22">!=<pos:position pos:line="69" pos:column="24"/></operator> <name pos:line="69" pos:column="25">ERANGE<pos:position pos:line="69" pos:column="31"/></name><operator pos:line="69" pos:column="31">)<pos:position pos:line="69" pos:column="32"/></operator></expr>)<pos:position pos:line="69" pos:column="33"/></condition><then pos:line="69" pos:column="33">
        <block type="pseudo"><break pos:line="70" pos:column="9">break;<pos:position pos:line="70" pos:column="15"/></break></block></then></if>
      
      <expr_stmt><expr><name pos:line="72" pos:column="7">step_size<pos:position pos:line="72" pos:column="16"/></name><operator pos:line="72" pos:column="16">+=<pos:position pos:line="72" pos:column="18"/></operator><literal type="number" pos:line="72" pos:column="18">200<pos:position pos:line="72" pos:column="21"/></literal></expr>;<pos:position pos:line="72" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></while>

<cpp:ifdef pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">ifdef<pos:position pos:line="75" pos:column="7"/></cpp:directive> <name pos:line="75" pos:column="8">MALLOCDEBUG<pos:position pos:line="75" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="76" pos:column="5">infof<pos:position pos:line="76" pos:column="10"/></name><argument_list pos:line="76" pos:column="10">(<argument><expr><name pos:line="76" pos:column="11">data<pos:position pos:line="76" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="17">"gethostbyname_r() uses %d bytes\n"<pos:position pos:line="76" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="54">step_size<pos:position pos:line="76" pos:column="63"/></name></expr></argument>)<pos:position pos:line="76" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="65"/></expr_stmt>
<cpp:endif pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">endif<pos:position pos:line="77" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="79" pos:column="5">if<condition pos:line="79" pos:column="7">(<expr><name pos:line="79" pos:column="8">h<pos:position pos:line="79" pos:column="9"/></name></expr>)<pos:position pos:line="79" pos:column="10"/></condition><then pos:line="79" pos:column="10"> <block pos:line="79" pos:column="11">{
      <decl_stmt><decl><type><name pos:line="80" pos:column="7">int<pos:position pos:line="80" pos:column="10"/></name></type> <name pos:line="80" pos:column="11">offset<pos:position pos:line="80" pos:column="17"/></name></decl>;<pos:position pos:line="80" pos:column="18"/></decl_stmt>
      <expr_stmt><expr><name pos:line="81" pos:column="7">h<pos:position pos:line="81" pos:column="8"/></name><operator pos:line="81" pos:column="8">=<pos:position pos:line="81" pos:column="9"/></operator><operator pos:line="81" pos:column="9">(<pos:position pos:line="81" pos:column="10"/></operator>struct <name pos:line="81" pos:column="17">hostent<pos:position pos:line="81" pos:column="24"/></name> <operator pos:line="81" pos:column="25">*<pos:position pos:line="81" pos:column="26"/></operator><operator pos:line="81" pos:column="26">)<pos:position pos:line="81" pos:column="27"/></operator><call><name pos:line="81" pos:column="27">realloc<pos:position pos:line="81" pos:column="34"/></name><argument_list pos:line="81" pos:column="34">(<argument><expr><name pos:line="81" pos:column="35">buf<pos:position pos:line="81" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="40">step_size<pos:position pos:line="81" pos:column="49"/></name></expr></argument>)<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name pos:line="82" pos:column="7">offset<pos:position pos:line="82" pos:column="13"/></name><operator pos:line="82" pos:column="13">=<pos:position pos:line="82" pos:column="14"/></operator><operator pos:line="82" pos:column="14">(<pos:position pos:line="82" pos:column="15"/></operator><name pos:line="82" pos:column="15">long<pos:position pos:line="82" pos:column="19"/></name><operator pos:line="82" pos:column="19">)<pos:position pos:line="82" pos:column="20"/></operator><name pos:line="82" pos:column="20">h<pos:position pos:line="82" pos:column="21"/></name><operator pos:line="82" pos:column="21">-<pos:position pos:line="82" pos:column="22"/></operator><operator pos:line="82" pos:column="22">(<pos:position pos:line="82" pos:column="23"/></operator><name pos:line="82" pos:column="23">long<pos:position pos:line="82" pos:column="27"/></name><operator pos:line="82" pos:column="27">)<pos:position pos:line="82" pos:column="28"/></operator><name pos:line="82" pos:column="28">buf<pos:position pos:line="82" pos:column="31"/></name></expr>;<pos:position pos:line="82" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="83" pos:column="7">hostcache_fixoffset<pos:position pos:line="83" pos:column="26"/></name><argument_list pos:line="83" pos:column="26">(<argument><expr><name pos:line="83" pos:column="27">h<pos:position pos:line="83" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="30">offset<pos:position pos:line="83" pos:column="36"/></name></expr></argument>)<pos:position pos:line="83" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="84" pos:column="7">buf<pos:position pos:line="84" pos:column="10"/></name><operator pos:line="84" pos:column="10">=<pos:position pos:line="84" pos:column="11"/></operator><operator pos:line="84" pos:column="11">(<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="12">int<pos:position pos:line="84" pos:column="15"/></name> <operator pos:line="84" pos:column="16">*<pos:position pos:line="84" pos:column="17"/></operator><operator pos:line="84" pos:column="17">)<pos:position pos:line="84" pos:column="18"/></operator><name pos:line="84" pos:column="18">h<pos:position pos:line="84" pos:column="19"/></name></expr>;<pos:position pos:line="84" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="85" pos:column="7">*<pos:position pos:line="85" pos:column="8"/></operator><name pos:line="85" pos:column="8">bufp<pos:position pos:line="85" pos:column="12"/></name><operator pos:line="85" pos:column="12">=<pos:position pos:line="85" pos:column="13"/></operator><operator pos:line="85" pos:column="13">(<pos:position pos:line="85" pos:column="14"/></operator><name pos:line="85" pos:column="14">char<pos:position pos:line="85" pos:column="18"/></name> <operator pos:line="85" pos:column="19">*<pos:position pos:line="85" pos:column="20"/></operator><operator pos:line="85" pos:column="20">)<pos:position pos:line="85" pos:column="21"/></operator><name pos:line="85" pos:column="21">buf<pos:position pos:line="85" pos:column="24"/></name></expr>;<pos:position pos:line="85" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="86" pos:column="6"/></block></then>
    <else pos:line="87" pos:column="5">else
<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">ifdef<pos:position pos:line="89" pos:column="7"/></cpp:directive> <name pos:line="89" pos:column="8">HAVE_GETHOSTBYNAME_R_6<pos:position pos:line="89" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="90" pos:column="5">/* Linux */</comment>
    <block type="pseudo"><do pos:line="91" pos:column="5">do <block pos:line="91" pos:column="8">{
      <expr_stmt><expr><name pos:line="92" pos:column="7">res<pos:position pos:line="92" pos:column="10"/></name><operator pos:line="92" pos:column="10">=<pos:position pos:line="92" pos:column="11"/></operator><call><name pos:line="92" pos:column="11">gethostbyname_r<pos:position pos:line="92" pos:column="26"/></name><argument_list pos:line="92" pos:column="26">(<argument><expr><name pos:line="92" pos:column="27">hostname<pos:position pos:line="92" pos:column="35"/></name></expr></argument>,
			  <argument><expr><operator pos:line="93" pos:column="27">(<pos:position pos:line="93" pos:column="28"/></operator>struct <name pos:line="93" pos:column="35">hostent<pos:position pos:line="93" pos:column="42"/></name> <operator pos:line="93" pos:column="43">*<pos:position pos:line="93" pos:column="44"/></operator><operator pos:line="93" pos:column="44">)<pos:position pos:line="93" pos:column="45"/></operator><name pos:line="93" pos:column="45">buf<pos:position pos:line="93" pos:column="48"/></name></expr></argument>,
			  <argument><expr><operator pos:line="94" pos:column="27">(<pos:position pos:line="94" pos:column="28"/></operator><name pos:line="94" pos:column="28">char<pos:position pos:line="94" pos:column="32"/></name> <operator pos:line="94" pos:column="33">*<pos:position pos:line="94" pos:column="34"/></operator><operator pos:line="94" pos:column="34">)<pos:position pos:line="94" pos:column="35"/></operator><name pos:line="94" pos:column="35">buf<pos:position pos:line="94" pos:column="38"/></name> <operator pos:line="94" pos:column="39">+<pos:position pos:line="94" pos:column="40"/></operator> <sizeof pos:line="94" pos:column="41">sizeof<argument_list pos:line="94" pos:column="47">(<argument><expr pos:line="94" pos:column="48">struct <name pos:line="94" pos:column="55">hostent<pos:position pos:line="94" pos:column="62"/></name></expr></argument>)<pos:position pos:line="94" pos:column="63"/></argument_list></sizeof></expr></argument>,
			  <argument><expr><name pos:line="95" pos:column="27">step_size<pos:position pos:line="95" pos:column="36"/></name> <operator pos:line="95" pos:column="37">-<pos:position pos:line="95" pos:column="38"/></operator> <sizeof pos:line="95" pos:column="39">sizeof<argument_list pos:line="95" pos:column="45">(<argument><expr pos:line="95" pos:column="46">struct <name pos:line="95" pos:column="53">hostent<pos:position pos:line="95" pos:column="60"/></name></expr></argument>)<pos:position pos:line="95" pos:column="61"/></argument_list></sizeof></expr></argument>,
			  <argument><expr><operator pos:line="96" pos:column="27">&amp;<pos:position pos:line="96" pos:column="32"/></operator><name pos:line="96" pos:column="28">h<pos:position pos:line="96" pos:column="29"/></name></expr></argument>, <comment type="block" pos:line="96" pos:column="31">/* DIFFERENCE */</comment>
			  <argument><expr><operator pos:line="97" pos:column="27">&amp;<pos:position pos:line="97" pos:column="32"/></operator><name pos:line="97" pos:column="28">h_errnop<pos:position pos:line="97" pos:column="36"/></name></expr></argument>)<pos:position pos:line="97" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="38"/></expr_stmt>
      <comment type="block" pos:line="98" pos:column="7">/* Redhat 8, using glibc 2.2.93 changed the behavior. Now all of a
         sudden this function returns EAGAIN if the given buffer size is too
         small. Previous versions are known to return ERANGE for the same
         problem.

         This wouldn't be such a big problem if older versions wouldn't
         sometimes return EAGAIN on a common failure case. Alas, we can't
         assume that EAGAIN *or* ERANGE means ERANGE for any given version of
         glibc.

         For now, we do that and thus we may call the function repeatedly and
         fail for older glibc versions that return EAGAIN, until we run out
         of buffer size (step_size grows beyond CURL_NAMELOOKUP_SIZE).

         If anyone has a better fix, please tell us!
      */</comment>

      <if pos:line="115" pos:column="7">if<condition pos:line="115" pos:column="9">(<expr><operator pos:line="115" pos:column="10">(<pos:position pos:line="115" pos:column="11"/></operator><name pos:line="115" pos:column="11">ERANGE<pos:position pos:line="115" pos:column="17"/></name> <operator pos:line="115" pos:column="18">==<pos:position pos:line="115" pos:column="20"/></operator> <name pos:line="115" pos:column="21">res<pos:position pos:line="115" pos:column="24"/></name><operator pos:line="115" pos:column="24">)<pos:position pos:line="115" pos:column="25"/></operator> <operator pos:line="115" pos:column="26">||<pos:position pos:line="115" pos:column="28"/></operator> <operator pos:line="115" pos:column="29">(<pos:position pos:line="115" pos:column="30"/></operator><name pos:line="115" pos:column="30">EAGAIN<pos:position pos:line="115" pos:column="36"/></name> <operator pos:line="115" pos:column="37">==<pos:position pos:line="115" pos:column="39"/></operator> <name pos:line="115" pos:column="40">res<pos:position pos:line="115" pos:column="43"/></name><operator pos:line="115" pos:column="43">)<pos:position pos:line="115" pos:column="44"/></operator></expr>)<pos:position pos:line="115" pos:column="45"/></condition><then pos:line="115" pos:column="45"> <block pos:line="115" pos:column="46">{
	<expr_stmt><expr><name pos:line="116" pos:column="9">step_size<pos:position pos:line="116" pos:column="18"/></name><operator pos:line="116" pos:column="18">+=<pos:position pos:line="116" pos:column="20"/></operator><literal type="number" pos:line="116" pos:column="20">200<pos:position pos:line="116" pos:column="23"/></literal></expr>;<pos:position pos:line="116" pos:column="24"/></expr_stmt>
	<continue pos:line="117" pos:column="9">continue;<pos:position pos:line="117" pos:column="18"/></continue>
      }<pos:position pos:line="118" pos:column="8"/></block></then></if>
      <break pos:line="119" pos:column="7">break;<pos:position pos:line="119" pos:column="13"/></break>
    }<pos:position pos:line="120" pos:column="6"/></block> while<condition pos:line="120" pos:column="12">(<expr><name pos:line="120" pos:column="13">step_size<pos:position pos:line="120" pos:column="22"/></name> <operator pos:line="120" pos:column="23">&lt;=<pos:position pos:line="120" pos:column="28"/></operator> <name pos:line="120" pos:column="26">CURL_NAMELOOKUP_SIZE<pos:position pos:line="120" pos:column="46"/></name></expr>)<pos:position pos:line="120" pos:column="47"/></condition>;<pos:position pos:line="120" pos:column="48"/></do></block></else></if>

    <if pos:line="122" pos:column="5">if<condition pos:line="122" pos:column="7">(<expr><operator pos:line="122" pos:column="8">!<pos:position pos:line="122" pos:column="9"/></operator><name pos:line="122" pos:column="9">h<pos:position pos:line="122" pos:column="10"/></name></expr>)<pos:position pos:line="122" pos:column="11"/></condition><then pos:line="122" pos:column="11"> <comment type="block" pos:line="122" pos:column="12">/* failure */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="123" pos:column="7">res<pos:position pos:line="123" pos:column="10"/></name><operator pos:line="123" pos:column="10">=<pos:position pos:line="123" pos:column="11"/></operator><literal type="number" pos:line="123" pos:column="11">1<pos:position pos:line="123" pos:column="12"/></literal></expr>;<pos:position pos:line="123" pos:column="13"/></expr_stmt></block></then></if>
    
<cpp:ifdef pos:line="125" pos:column="1">#<cpp:directive pos:line="125" pos:column="2">ifdef<pos:position pos:line="125" pos:column="7"/></cpp:directive> <name pos:line="125" pos:column="8">MALLOCDEBUG<pos:position pos:line="125" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">infof<pos:position pos:line="126" pos:column="10"/></name><argument_list pos:line="126" pos:column="10">(<argument><expr><name pos:line="126" pos:column="11">data<pos:position pos:line="126" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="17">"gethostbyname_r() uses %d bytes\n"<pos:position pos:line="126" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="126" pos:column="54">step_size<pos:position pos:line="126" pos:column="63"/></name></expr></argument>)<pos:position pos:line="126" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="65"/></expr_stmt>
<cpp:endif pos:line="127" pos:column="1">#<cpp:directive pos:line="127" pos:column="2">endif<pos:position pos:line="127" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="128" pos:column="5">if<condition pos:line="128" pos:column="7">(<expr><operator pos:line="128" pos:column="8">!<pos:position pos:line="128" pos:column="9"/></operator><name pos:line="128" pos:column="9">res<pos:position pos:line="128" pos:column="12"/></name></expr>)<pos:position pos:line="128" pos:column="13"/></condition><then pos:line="128" pos:column="13"> <block pos:line="128" pos:column="14">{
      <decl_stmt><decl><type><name pos:line="129" pos:column="7">int<pos:position pos:line="129" pos:column="10"/></name></type> <name pos:line="129" pos:column="11">offset<pos:position pos:line="129" pos:column="17"/></name></decl>;<pos:position pos:line="129" pos:column="18"/></decl_stmt>
      <expr_stmt><expr><name pos:line="130" pos:column="7">h<pos:position pos:line="130" pos:column="8"/></name><operator pos:line="130" pos:column="8">=<pos:position pos:line="130" pos:column="9"/></operator><operator pos:line="130" pos:column="9">(<pos:position pos:line="130" pos:column="10"/></operator>struct <name pos:line="130" pos:column="17">hostent<pos:position pos:line="130" pos:column="24"/></name> <operator pos:line="130" pos:column="25">*<pos:position pos:line="130" pos:column="26"/></operator><operator pos:line="130" pos:column="26">)<pos:position pos:line="130" pos:column="27"/></operator><call><name pos:line="130" pos:column="27">realloc<pos:position pos:line="130" pos:column="34"/></name><argument_list pos:line="130" pos:column="34">(<argument><expr><name pos:line="130" pos:column="35">buf<pos:position pos:line="130" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="40">step_size<pos:position pos:line="130" pos:column="49"/></name></expr></argument>)<pos:position pos:line="130" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name pos:line="131" pos:column="7">offset<pos:position pos:line="131" pos:column="13"/></name><operator pos:line="131" pos:column="13">=<pos:position pos:line="131" pos:column="14"/></operator><operator pos:line="131" pos:column="14">(<pos:position pos:line="131" pos:column="15"/></operator><name pos:line="131" pos:column="15">long<pos:position pos:line="131" pos:column="19"/></name><operator pos:line="131" pos:column="19">)<pos:position pos:line="131" pos:column="20"/></operator><name pos:line="131" pos:column="20">h<pos:position pos:line="131" pos:column="21"/></name><operator pos:line="131" pos:column="21">-<pos:position pos:line="131" pos:column="22"/></operator><operator pos:line="131" pos:column="22">(<pos:position pos:line="131" pos:column="23"/></operator><name pos:line="131" pos:column="23">long<pos:position pos:line="131" pos:column="27"/></name><operator pos:line="131" pos:column="27">)<pos:position pos:line="131" pos:column="28"/></operator><name pos:line="131" pos:column="28">buf<pos:position pos:line="131" pos:column="31"/></name></expr>;<pos:position pos:line="131" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="132" pos:column="7">hostcache_fixoffset<pos:position pos:line="132" pos:column="26"/></name><argument_list pos:line="132" pos:column="26">(<argument><expr><name pos:line="132" pos:column="27">h<pos:position pos:line="132" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="30">offset<pos:position pos:line="132" pos:column="36"/></name></expr></argument>)<pos:position pos:line="132" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="133" pos:column="7">buf<pos:position pos:line="133" pos:column="10"/></name><operator pos:line="133" pos:column="10">=<pos:position pos:line="133" pos:column="11"/></operator><operator pos:line="133" pos:column="11">(<pos:position pos:line="133" pos:column="12"/></operator><name pos:line="133" pos:column="12">int<pos:position pos:line="133" pos:column="15"/></name> <operator pos:line="133" pos:column="16">*<pos:position pos:line="133" pos:column="17"/></operator><operator pos:line="133" pos:column="17">)<pos:position pos:line="133" pos:column="18"/></operator><name pos:line="133" pos:column="18">h<pos:position pos:line="133" pos:column="19"/></name></expr>;<pos:position pos:line="133" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="134" pos:column="7">*<pos:position pos:line="134" pos:column="8"/></operator><name pos:line="134" pos:column="8">bufp<pos:position pos:line="134" pos:column="12"/></name><operator pos:line="134" pos:column="12">=<pos:position pos:line="134" pos:column="13"/></operator><operator pos:line="134" pos:column="13">(<pos:position pos:line="134" pos:column="14"/></operator><name pos:line="134" pos:column="14">char<pos:position pos:line="134" pos:column="18"/></name> <operator pos:line="134" pos:column="19">*<pos:position pos:line="134" pos:column="20"/></operator><operator pos:line="134" pos:column="20">)<pos:position pos:line="134" pos:column="21"/></operator><name pos:line="134" pos:column="21">buf<pos:position pos:line="134" pos:column="24"/></name></expr>;<pos:position pos:line="134" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="135" pos:column="6"/></block></then>
    <elseif pos:line="136" pos:column="5">else
<cpp:endif pos:line="137" pos:column="1">#<cpp:directive pos:line="137" pos:column="2">endif<pos:position pos:line="137" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="138" pos:column="1">#<cpp:directive pos:line="138" pos:column="2">ifdef<pos:position pos:line="138" pos:column="7"/></cpp:directive> <name pos:line="138" pos:column="8">HAVE_GETHOSTBYNAME_R_3<pos:position pos:line="138" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="139" pos:column="5">/* AIX, Digital Unix, HPUX 10, more? */</comment>

    <comment type="block" pos:line="141" pos:column="5">/* For AIX 4.3 or later, we don't use gethostbyname_r() at all, because of
       the plain fact that it does not return unique full buffers on each
       call, but instead several of the pointers in the hostent structs will
       point to the same actual data! This have the unfortunate down-side that
       our caching system breaks down horribly. Luckily for us though, AIX 4.3
       and more recent versions have a completely thread-safe libc where all
       the data is stored in thread-specific memory areas making calls to the
       plain old gethostbyname() work fine even for multi-threaded programs.
       
       This AIX 4.3 or later detection is all made in the configure script.

       Troels Walsted Hansen helped us work this out on March 3rd, 2003. */</comment>

    <if pos:line="154" pos:column="5">if<condition pos:line="154" pos:column="7">(<expr><name pos:line="154" pos:column="8">CURL_NAMELOOKUP_SIZE<pos:position pos:line="154" pos:column="28"/></name> <operator pos:line="154" pos:column="29">&gt;=<pos:position pos:line="154" pos:column="34"/></operator>
       <operator pos:line="155" pos:column="8">(<pos:position pos:line="155" pos:column="9"/></operator><sizeof pos:line="155" pos:column="9">sizeof<argument_list pos:line="155" pos:column="15">(<argument><expr pos:line="155" pos:column="16">struct <name pos:line="155" pos:column="23">hostent<pos:position pos:line="155" pos:column="30"/></name></expr></argument>)<pos:position pos:line="155" pos:column="31"/></argument_list></sizeof><operator pos:line="155" pos:column="31">+<pos:position pos:line="155" pos:column="32"/></operator><sizeof pos:line="155" pos:column="32">sizeof<argument_list pos:line="155" pos:column="38">(<argument><expr pos:line="155" pos:column="39">struct <name pos:line="155" pos:column="46">hostent_data<pos:position pos:line="155" pos:column="58"/></name></expr></argument>)<pos:position pos:line="155" pos:column="59"/></argument_list></sizeof><operator pos:line="155" pos:column="59">)<pos:position pos:line="155" pos:column="60"/></operator></expr>)<pos:position pos:line="155" pos:column="61"/></condition><then pos:line="155" pos:column="61">

      <comment type="block" pos:line="157" pos:column="7">/* August 22nd, 2000: Albert Chin-A-Young brought an updated version
       * that should work! September 20: Richard Prescott worked on the buffer
       * size dilemma. */</comment>

      <block type="pseudo"><expr_stmt><expr><name pos:line="161" pos:column="7">ret<pos:position pos:line="161" pos:column="10"/></name> <operator pos:line="161" pos:column="11">=<pos:position pos:line="161" pos:column="12"/></operator> <call><name pos:line="161" pos:column="13">gethostbyname_r<pos:position pos:line="161" pos:column="28"/></name><argument_list pos:line="161" pos:column="28">(<argument><expr><name pos:line="161" pos:column="29">hostname<pos:position pos:line="161" pos:column="37"/></name></expr></argument>,
                            <argument><expr><operator pos:line="162" pos:column="29">(<pos:position pos:line="162" pos:column="30"/></operator>struct <name pos:line="162" pos:column="37">hostent<pos:position pos:line="162" pos:column="44"/></name> <operator pos:line="162" pos:column="45">*<pos:position pos:line="162" pos:column="46"/></operator><operator pos:line="162" pos:column="46">)<pos:position pos:line="162" pos:column="47"/></operator><name pos:line="162" pos:column="47">buf<pos:position pos:line="162" pos:column="50"/></name></expr></argument>,
                            <argument><expr><operator pos:line="163" pos:column="29">(<pos:position pos:line="163" pos:column="30"/></operator>struct <name pos:line="163" pos:column="37">hostent_data<pos:position pos:line="163" pos:column="49"/></name> <operator pos:line="163" pos:column="50">*<pos:position pos:line="163" pos:column="51"/></operator><operator pos:line="163" pos:column="51">)<pos:position pos:line="163" pos:column="52"/></operator><operator pos:line="163" pos:column="52">(<pos:position pos:line="163" pos:column="53"/></operator><operator pos:line="163" pos:column="53">(<pos:position pos:line="163" pos:column="54"/></operator><name pos:line="163" pos:column="54">char<pos:position pos:line="163" pos:column="58"/></name> <operator pos:line="163" pos:column="59">*<pos:position pos:line="163" pos:column="60"/></operator><operator pos:line="163" pos:column="60">)<pos:position pos:line="163" pos:column="61"/></operator><name pos:line="163" pos:column="61">buf<pos:position pos:line="163" pos:column="64"/></name> <operator pos:line="163" pos:column="65">+<pos:position pos:line="163" pos:column="66"/></operator>
                                                    <sizeof pos:line="164" pos:column="53">sizeof<argument_list pos:line="164" pos:column="59">(<argument><expr pos:line="164" pos:column="60">struct <name pos:line="164" pos:column="67">hostent<pos:position pos:line="164" pos:column="74"/></name></expr></argument>)<pos:position pos:line="164" pos:column="75"/></argument_list></sizeof><operator pos:line="164" pos:column="75">)<pos:position pos:line="164" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="164" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="78"/></expr_stmt></block></then></if></elseif>
    <else pos:line="165" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="166" pos:column="7">ret<pos:position pos:line="166" pos:column="10"/></name> <operator pos:line="166" pos:column="11">=<pos:position pos:line="166" pos:column="12"/></operator> <operator pos:line="166" pos:column="13">-<pos:position pos:line="166" pos:column="14"/></operator><literal type="number" pos:line="166" pos:column="14">1<pos:position pos:line="166" pos:column="15"/></literal></expr>;<pos:position pos:line="166" pos:column="16"/></expr_stmt></block></else></if> <comment type="block" pos:line="166" pos:column="17">/* failure, too smallish buffer size */</comment>
    
    <comment type="block" pos:line="168" pos:column="5">/* result expected in h */</comment>
    <expr_stmt><expr><name pos:line="169" pos:column="5">h<pos:position pos:line="169" pos:column="6"/></name> <operator pos:line="169" pos:column="7">=<pos:position pos:line="169" pos:column="8"/></operator> <operator pos:line="169" pos:column="9">(<pos:position pos:line="169" pos:column="10"/></operator>struct <name pos:line="169" pos:column="17">hostent<pos:position pos:line="169" pos:column="24"/></name><operator pos:line="169" pos:column="24">*<pos:position pos:line="169" pos:column="25"/></operator><operator pos:line="169" pos:column="25">)<pos:position pos:line="169" pos:column="26"/></operator><name pos:line="169" pos:column="26">buf<pos:position pos:line="169" pos:column="29"/></name></expr>;<pos:position pos:line="169" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="170" pos:column="5">h_errnop<pos:position pos:line="170" pos:column="13"/></name><operator pos:line="170" pos:column="13">=<pos:position pos:line="170" pos:column="14"/></operator> <name pos:line="170" pos:column="15">errno<pos:position pos:line="170" pos:column="20"/></name></expr>;<pos:position pos:line="170" pos:column="21"/></expr_stmt> <comment type="block" pos:line="170" pos:column="22">/* we don't deal with this, but set it anyway */</comment>
    <if pos:line="171" pos:column="5">if<condition pos:line="171" pos:column="7">(<expr><name pos:line="171" pos:column="8">ret<pos:position pos:line="171" pos:column="11"/></name></expr>)<pos:position pos:line="171" pos:column="12"/></condition><then pos:line="171" pos:column="12">
<cpp:endif pos:line="172" pos:column="1">#<cpp:directive pos:line="172" pos:column="2">endif<pos:position pos:line="172" pos:column="7"/></cpp:directive></cpp:endif>
      <block pos:line="173" pos:column="7">{
      <expr_stmt><expr><call><name pos:line="174" pos:column="7">infof<pos:position pos:line="174" pos:column="12"/></name><argument_list pos:line="174" pos:column="12">(<argument><expr><name pos:line="174" pos:column="13">data<pos:position pos:line="174" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="174" pos:column="19">"gethostbyname_r(2) failed for %s\n"<pos:position pos:line="174" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="57">hostname<pos:position pos:line="174" pos:column="65"/></name></expr></argument>)<pos:position pos:line="174" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><name pos:line="175" pos:column="7">h<pos:position pos:line="175" pos:column="8"/></name> <operator pos:line="175" pos:column="9">=<pos:position pos:line="175" pos:column="10"/></operator> <name pos:line="175" pos:column="11">NULL<pos:position pos:line="175" pos:column="15"/></name></expr>;<pos:position pos:line="175" pos:column="16"/></expr_stmt> <comment type="block" pos:line="175" pos:column="17">/* set return code to NULL */</comment>
      <expr_stmt><expr><call><name pos:line="176" pos:column="7">free<pos:position pos:line="176" pos:column="11"/></name><argument_list pos:line="176" pos:column="11">(<argument><expr><name pos:line="176" pos:column="12">buf<pos:position pos:line="176" pos:column="15"/></name></expr></argument>)<pos:position pos:line="176" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="177" pos:column="7">*<pos:position pos:line="177" pos:column="8"/></operator><name pos:line="177" pos:column="8">bufp<pos:position pos:line="177" pos:column="12"/></name><operator pos:line="177" pos:column="12">=<pos:position pos:line="177" pos:column="13"/></operator><name pos:line="177" pos:column="13">NULL<pos:position pos:line="177" pos:column="17"/></name></expr>;<pos:position pos:line="177" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="178" pos:column="6"/></block></then>
<cpp:else pos:line="179" pos:column="1">#<cpp:directive pos:line="179" pos:column="2">else<pos:position pos:line="179" pos:column="6"/></cpp:directive></cpp:else>
  <else pos:line="180" pos:column="3">else <block pos:line="180" pos:column="8">{
    <if pos:line="181" pos:column="5">if <condition pos:line="181" pos:column="8">(<expr><operator pos:line="181" pos:column="9">(<pos:position pos:line="181" pos:column="10"/></operator><name pos:line="181" pos:column="10">h<pos:position pos:line="181" pos:column="11"/></name> <operator pos:line="181" pos:column="12">=<pos:position pos:line="181" pos:column="13"/></operator> <call><name pos:line="181" pos:column="14">gethostbyname<pos:position pos:line="181" pos:column="27"/></name><argument_list pos:line="181" pos:column="27">(<argument><expr><name pos:line="181" pos:column="28">hostname<pos:position pos:line="181" pos:column="36"/></name></expr></argument>)<pos:position pos:line="181" pos:column="37"/></argument_list></call><operator pos:line="181" pos:column="37">)<pos:position pos:line="181" pos:column="38"/></operator> <operator pos:line="181" pos:column="39">==<pos:position pos:line="181" pos:column="41"/></operator> <name pos:line="181" pos:column="42">NULL<pos:position pos:line="181" pos:column="46"/></name></expr> )<pos:position pos:line="181" pos:column="48"/></condition><then pos:line="181" pos:column="48"> <block pos:line="181" pos:column="49">{
      <expr_stmt><expr><call><name pos:line="182" pos:column="7">infof<pos:position pos:line="182" pos:column="12"/></name><argument_list pos:line="182" pos:column="12">(<argument><expr><name pos:line="182" pos:column="13">data<pos:position pos:line="182" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="182" pos:column="19">"gethostbyname(2) failed for %s\n"<pos:position pos:line="182" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="182" pos:column="55">hostname<pos:position pos:line="182" pos:column="63"/></name></expr></argument>)<pos:position pos:line="182" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="65"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="183" pos:column="7">*<pos:position pos:line="183" pos:column="8"/></operator><name pos:line="183" pos:column="8">bufp<pos:position pos:line="183" pos:column="12"/></name><operator pos:line="183" pos:column="12">=<pos:position pos:line="183" pos:column="13"/></operator><name pos:line="183" pos:column="13">NULL<pos:position pos:line="183" pos:column="17"/></name></expr>;<pos:position pos:line="183" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="184" pos:column="6"/></block></then>
    <else pos:line="185" pos:column="5">else 
    <block pos:line="186" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="187" pos:column="7">char<pos:position pos:line="187" pos:column="11"/></name> <modifier pos:line="187" pos:column="12">*<pos:position pos:line="187" pos:column="13"/></modifier></type><name pos:line="187" pos:column="13">buf<pos:position pos:line="187" pos:column="16"/></name><init pos:line="187" pos:column="16">=<expr><operator pos:line="187" pos:column="17">(<pos:position pos:line="187" pos:column="18"/></operator><name pos:line="187" pos:column="18">char<pos:position pos:line="187" pos:column="22"/></name> <operator pos:line="187" pos:column="23">*<pos:position pos:line="187" pos:column="24"/></operator><operator pos:line="187" pos:column="24">)<pos:position pos:line="187" pos:column="25"/></operator><call><name pos:line="187" pos:column="25">malloc<pos:position pos:line="187" pos:column="31"/></name><argument_list pos:line="187" pos:column="31">(<argument><expr><name pos:line="187" pos:column="32">CURL_NAMELOOKUP_SIZE<pos:position pos:line="187" pos:column="52"/></name></expr></argument>)<pos:position pos:line="187" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="187" pos:column="54"/></decl_stmt>
      <comment type="block" pos:line="188" pos:column="7">/* we make a copy of the hostent right now, right here, as the
         static one we got a pointer to might get removed when we don't
         want/expect that */</comment>
      <expr_stmt><expr><name pos:line="191" pos:column="7">h<pos:position pos:line="191" pos:column="8"/></name> <operator pos:line="191" pos:column="9">=<pos:position pos:line="191" pos:column="10"/></operator> <call><name pos:line="191" pos:column="11">pack_hostent<pos:position pos:line="191" pos:column="23"/></name><argument_list pos:line="191" pos:column="23">(<argument><expr><operator pos:line="191" pos:column="24">&amp;<pos:position pos:line="191" pos:column="29"/></operator><name pos:line="191" pos:column="25">buf<pos:position pos:line="191" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="30">h<pos:position pos:line="191" pos:column="31"/></name></expr></argument>)<pos:position pos:line="191" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="192" pos:column="7">*<pos:position pos:line="192" pos:column="8"/></operator><name pos:line="192" pos:column="8">bufp<pos:position pos:line="192" pos:column="12"/></name><operator pos:line="192" pos:column="12">=<pos:position pos:line="192" pos:column="13"/></operator><operator pos:line="192" pos:column="13">(<pos:position pos:line="192" pos:column="14"/></operator><name pos:line="192" pos:column="14">char<pos:position pos:line="192" pos:column="18"/></name> <operator pos:line="192" pos:column="19">*<pos:position pos:line="192" pos:column="20"/></operator><operator pos:line="192" pos:column="20">)<pos:position pos:line="192" pos:column="21"/></operator><name pos:line="192" pos:column="21">buf<pos:position pos:line="192" pos:column="24"/></name></expr>;<pos:position pos:line="192" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="193" pos:column="6"/></block></else></if>
<cpp:endif pos:line="194" pos:column="1">#<cpp:directive pos:line="194" pos:column="2">endif<pos:position pos:line="194" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="195" pos:column="4"/></block></else></if>
  <return pos:line="196" pos:column="3">return <expr><operator pos:line="196" pos:column="10">(<pos:position pos:line="196" pos:column="11"/></operator><name pos:line="196" pos:column="11">h<pos:position pos:line="196" pos:column="12"/></name><operator pos:line="196" pos:column="12">)<pos:position pos:line="196" pos:column="13"/></operator></expr>;<pos:position pos:line="196" pos:column="14"/></return>
}<pos:position pos:line="197" pos:column="2"/></block></else></if></block></function></unit>
