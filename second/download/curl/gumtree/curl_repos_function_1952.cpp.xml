<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1952.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">send_telnet_data<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">connectdata<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">conn<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">buffer<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">ssize_t<pos:position pos:line="2" pos:column="55"/></name></type> <name pos:line="2" pos:column="56">nread<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">outbuf<pos:position pos:line="4" pos:column="23"/></name><index pos:line="4" pos:column="23">[<expr><literal type="number" pos:line="4" pos:column="24">2<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ssize_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">bytes_written<pos:position pos:line="5" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="26">total_written<pos:position pos:line="5" pos:column="39"/></name></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">out_count<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLcode<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">result<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><name pos:line="7" pos:column="21">CURLE_OK<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

  <while pos:line="9" pos:column="3">while<condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">result<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">&amp;&amp;<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="20">nread<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">--<pos:position pos:line="9" pos:column="27"/></operator></expr>)<pos:position pos:line="9" pos:column="28"/></condition> <block pos:line="9" pos:column="29">{
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">outbuf<pos:position pos:line="10" pos:column="11"/></name><index pos:line="10" pos:column="11">[<expr><literal type="number" pos:line="10" pos:column="12">0<pos:position pos:line="10" pos:column="13"/></literal></expr>]<pos:position pos:line="10" pos:column="14"/></index></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <operator pos:line="10" pos:column="17">*<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">buffer<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">++<pos:position pos:line="10" pos:column="26"/></operator></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">out_count<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="17">1<pos:position pos:line="11" pos:column="18"/></literal></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>
    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">(<expr><name><name pos:line="12" pos:column="8">outbuf<pos:position pos:line="12" pos:column="14"/></name><index pos:line="12" pos:column="14">[<expr><literal type="number" pos:line="12" pos:column="15">0<pos:position pos:line="12" pos:column="16"/></literal></expr>]<pos:position pos:line="12" pos:column="17"/></index></name> <operator pos:line="12" pos:column="18">==<pos:position pos:line="12" pos:column="20"/></operator> <name pos:line="12" pos:column="21">CURL_IAC<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="13" pos:column="7">outbuf<pos:position pos:line="13" pos:column="13"/></name><index pos:line="13" pos:column="13">[<expr><name pos:line="13" pos:column="14">out_count<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">++<pos:position pos:line="13" pos:column="25"/></operator></expr>]<pos:position pos:line="13" pos:column="26"/></index></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">CURL_IAC<pos:position pos:line="13" pos:column="37"/></name></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="15" pos:column="5">total_written<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="21">0<pos:position pos:line="15" pos:column="22"/></literal></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>
    <do pos:line="16" pos:column="5">do <block pos:line="16" pos:column="8">{
      <comment type="block" pos:line="17" pos:column="7">/* Make sure socket is writable to avoid EWOULDBLOCK condition */</comment>
      <decl_stmt><decl><type><name><name pos:line="18" pos:column="7">struct<pos:position pos:line="18" pos:column="13"/></name> <name pos:line="18" pos:column="14">pollfd<pos:position pos:line="18" pos:column="20"/></name></name></type> <name><name pos:line="18" pos:column="21">pfd<pos:position pos:line="18" pos:column="24"/></name><index pos:line="18" pos:column="24">[<expr><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>]<pos:position pos:line="18" pos:column="27"/></index></name></decl>;<pos:position pos:line="18" pos:column="28"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="19" pos:column="7">pfd<pos:position pos:line="19" pos:column="10"/></name><index pos:line="19" pos:column="10">[<expr><literal type="number" pos:line="19" pos:column="11">0<pos:position pos:line="19" pos:column="12"/></literal></expr>]<pos:position pos:line="19" pos:column="13"/></index></name><operator pos:line="19" pos:column="13">.<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">fd<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <name><name pos:line="19" pos:column="19">conn<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">-&gt;<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="25">sock<pos:position pos:line="19" pos:column="29"/></name><index pos:line="19" pos:column="29">[<expr><name pos:line="19" pos:column="30">FIRSTSOCKET<pos:position pos:line="19" pos:column="41"/></name></expr>]<pos:position pos:line="19" pos:column="42"/></index></name></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="20" pos:column="7">pfd<pos:position pos:line="20" pos:column="10"/></name><index pos:line="20" pos:column="10">[<expr><literal type="number" pos:line="20" pos:column="11">0<pos:position pos:line="20" pos:column="12"/></literal></expr>]<pos:position pos:line="20" pos:column="13"/></index></name><operator pos:line="20" pos:column="13">.<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">events<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">POLLOUT<pos:position pos:line="20" pos:column="30"/></name></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
      <switch pos:line="21" pos:column="7">switch <condition pos:line="21" pos:column="14">(<expr><call><name pos:line="21" pos:column="15">Curl_poll<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">pfd<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="30">1<pos:position pos:line="21" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="33">-<pos:position pos:line="21" pos:column="34"/></operator><literal type="number" pos:line="21" pos:column="34">1<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="37"/></condition> <block pos:line="21" pos:column="38">{
        <case pos:line="22" pos:column="9">case <expr><operator pos:line="22" pos:column="14">-<pos:position pos:line="22" pos:column="15"/></operator><literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal></expr>:<pos:position pos:line="22" pos:column="17"/></case>                    <comment type="block" pos:line="22" pos:column="37">/* error, abort writing */</comment>
        <case pos:line="23" pos:column="9">case <expr><literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr>:<pos:position pos:line="23" pos:column="16"/></case>                     <comment type="block" pos:line="23" pos:column="37">/* timeout (will never happen) */</comment>
          <expr_stmt><expr><name pos:line="24" pos:column="11">result<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">CURLE_SEND_ERROR<pos:position pos:line="24" pos:column="36"/></name></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
          <break pos:line="25" pos:column="11">break;<pos:position pos:line="25" pos:column="17"/></break>
        <default pos:line="26" pos:column="9">default:<pos:position pos:line="26" pos:column="17"/></default>                    <comment type="block" pos:line="26" pos:column="37">/* write! */</comment>
          <expr_stmt><expr><name pos:line="27" pos:column="11">bytes_written<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">=<pos:position pos:line="27" pos:column="26"/></operator> <literal type="number" pos:line="27" pos:column="27">0<pos:position pos:line="27" pos:column="28"/></literal></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
          <expr_stmt><expr><name pos:line="28" pos:column="11">result<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <call><name pos:line="28" pos:column="20">Curl_write<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">conn<pos:position pos:line="28" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="37">conn<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">-&gt;<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="43">sock<pos:position pos:line="28" pos:column="47"/></name><index pos:line="28" pos:column="47">[<expr><name pos:line="28" pos:column="48">FIRSTSOCKET<pos:position pos:line="28" pos:column="59"/></name></expr>]<pos:position pos:line="28" pos:column="60"/></index></name></expr></argument>,
                              <argument><expr><name pos:line="29" pos:column="31">outbuf<pos:position pos:line="29" pos:column="37"/></name><operator pos:line="29" pos:column="37">+<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="38">total_written<pos:position pos:line="29" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="53">out_count<pos:position pos:line="29" pos:column="62"/></name><operator pos:line="29" pos:column="62">-<pos:position pos:line="29" pos:column="63"/></operator><name pos:line="29" pos:column="63">total_written<pos:position pos:line="29" pos:column="76"/></name></expr></argument>,
                              <argument><expr><operator pos:line="30" pos:column="31">&amp;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="32">bytes_written<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt>
          <expr_stmt><expr><name pos:line="31" pos:column="11">total_written<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">+=<pos:position pos:line="31" pos:column="27"/></operator> <name pos:line="31" pos:column="28">bytes_written<pos:position pos:line="31" pos:column="41"/></name></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
          <break pos:line="32" pos:column="11">break;<pos:position pos:line="32" pos:column="17"/></break>
      }<pos:position pos:line="33" pos:column="8"/></block></switch>
      <comment type="block" pos:line="34" pos:column="7">/* handle partial write */</comment>
    }<pos:position pos:line="35" pos:column="6"/></block> while<condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">result<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">&amp;&amp;<pos:position pos:line="35" pos:column="31"/></operator> <name pos:line="35" pos:column="24">total_written<pos:position pos:line="35" pos:column="37"/></name> <operator pos:line="35" pos:column="38">&lt;<pos:position pos:line="35" pos:column="42"/></operator> <name pos:line="35" pos:column="40">out_count<pos:position pos:line="35" pos:column="49"/></name></expr>)<pos:position pos:line="35" pos:column="50"/></condition>;<pos:position pos:line="35" pos:column="51"/></do>
  }<pos:position pos:line="36" pos:column="4"/></block></while>
  <return pos:line="37" pos:column="3">return <expr><name pos:line="37" pos:column="10">result<pos:position pos:line="37" pos:column="16"/></name></expr>;<pos:position pos:line="37" pos:column="17"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
