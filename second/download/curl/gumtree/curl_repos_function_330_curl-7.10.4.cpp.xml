<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_330_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">CURLcode<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">ftp_use_port<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name><name pos:line="2" pos:column="23">struct<pos:position pos:line="2" pos:column="29"/></name> <name pos:line="2" pos:column="30">connectdata<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">conn<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SessionHandle<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name><init pos:line="4" pos:column="29">=<expr><name><name pos:line="4" pos:column="30">conn<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">-&gt;<pos:position pos:line="4" pos:column="39"/></operator><name pos:line="4" pos:column="36">data<pos:position pos:line="4" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">portsock<pos:position pos:line="5" pos:column="15"/></name><init pos:line="5" pos:column="15">=<expr><operator pos:line="5" pos:column="16">-<pos:position pos:line="5" pos:column="17"/></operator><literal type="number" pos:line="5" pos:column="17">1<pos:position pos:line="5" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">ssize_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">nread<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">ftpcode<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt> <comment type="block" pos:line="7" pos:column="16">/* receive FTP response codes in this */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CURLcode<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">result<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">ENABLE_IPV6<pos:position pos:line="10" pos:column="19"/></name></cpp:ifdef>
  <comment type="block" format="doxygen" pos:line="11" pos:column="3">/******************************************************************
   *
   * Here's a piece of IPv6-specific code coming up
   *
   */</comment>

  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">addrinfo<pos:position pos:line="17" pos:column="18"/></name></name></type> <name pos:line="17" pos:column="19">hints<pos:position pos:line="17" pos:column="24"/></name></decl>, <modifier pos:line="17" pos:column="26">*<pos:position pos:line="17" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="17" pos:column="27">res<pos:position pos:line="17" pos:column="30"/></name></decl>, <modifier pos:line="17" pos:column="32">*<pos:position pos:line="17" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="17" pos:column="33">ai<pos:position pos:line="17" pos:column="35"/></name></decl>;<pos:position pos:line="17" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="18" pos:column="3">struct<pos:position pos:line="18" pos:column="9"/></name> <name pos:line="18" pos:column="10">sockaddr_storage<pos:position pos:line="18" pos:column="26"/></name></name></type> <name pos:line="18" pos:column="27">ss<pos:position pos:line="18" pos:column="29"/></name></decl>;<pos:position pos:line="18" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">socklen_t<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">sslen<pos:position pos:line="19" pos:column="18"/></name></decl>;<pos:position pos:line="19" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name></type> <name><name pos:line="20" pos:column="8">hbuf<pos:position pos:line="20" pos:column="12"/></name><index pos:line="20" pos:column="12">[<expr><name pos:line="20" pos:column="13">NI_MAXHOST<pos:position pos:line="20" pos:column="23"/></name></expr>]<pos:position pos:line="20" pos:column="24"/></index></name></decl>;<pos:position pos:line="20" pos:column="25"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="22" pos:column="3">struct<pos:position pos:line="22" pos:column="9"/></name> <name pos:line="22" pos:column="10">sockaddr<pos:position pos:line="22" pos:column="18"/></name></name> <modifier pos:line="22" pos:column="19">*<pos:position pos:line="22" pos:column="20"/></modifier></type><name pos:line="22" pos:column="20">sa<pos:position pos:line="22" pos:column="22"/></name><init pos:line="22" pos:column="22">=<expr><operator pos:line="22" pos:column="23">(<pos:position pos:line="22" pos:column="24"/></operator>struct <name pos:line="22" pos:column="31">sockaddr<pos:position pos:line="22" pos:column="39"/></name> <operator pos:line="22" pos:column="40">*<pos:position pos:line="22" pos:column="41"/></operator><operator pos:line="22" pos:column="41">)<pos:position pos:line="22" pos:column="42"/></operator><operator pos:line="22" pos:column="42">&amp;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="43">ss<pos:position pos:line="22" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="46"/></decl_stmt>
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">NI_WITHSCOPEID<pos:position pos:line="23" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><specifier pos:line="24" pos:column="3">const<pos:position pos:line="24" pos:column="8"/></specifier> <name pos:line="24" pos:column="9">int<pos:position pos:line="24" pos:column="12"/></name></type> <name pos:line="24" pos:column="13">niflags<pos:position pos:line="24" pos:column="20"/></name> <init pos:line="24" pos:column="21">= <expr><name pos:line="24" pos:column="23">NI_NUMERICHOST<pos:position pos:line="24" pos:column="37"/></name> <operator pos:line="24" pos:column="38">|<pos:position pos:line="24" pos:column="39"/></operator> <name pos:line="24" pos:column="40">NI_NUMERICSERV<pos:position pos:line="24" pos:column="54"/></name> <operator pos:line="24" pos:column="55">|<pos:position pos:line="24" pos:column="56"/></operator> <name pos:line="24" pos:column="57">NI_WITHSCOPEID<pos:position pos:line="24" pos:column="71"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="72"/></decl_stmt>
<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier pos:line="26" pos:column="3">const<pos:position pos:line="26" pos:column="8"/></specifier> <name pos:line="26" pos:column="9">int<pos:position pos:line="26" pos:column="12"/></name></type> <name pos:line="26" pos:column="13">niflags<pos:position pos:line="26" pos:column="20"/></name> <init pos:line="26" pos:column="21">= <expr><name pos:line="26" pos:column="23">NI_NUMERICHOST<pos:position pos:line="26" pos:column="37"/></name> <operator pos:line="26" pos:column="38">|<pos:position pos:line="26" pos:column="39"/></operator> <name pos:line="26" pos:column="40">NI_NUMERICSERV<pos:position pos:line="26" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="55"/></decl_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="28" pos:column="3">unsigned<pos:position pos:line="28" pos:column="11"/></name> <name pos:line="28" pos:column="12">char<pos:position pos:line="28" pos:column="16"/></name> <modifier pos:line="28" pos:column="17">*<pos:position pos:line="28" pos:column="18"/></modifier></type><name pos:line="28" pos:column="18">ap<pos:position pos:line="28" pos:column="20"/></name></decl>;<pos:position pos:line="28" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="29" pos:column="3">unsigned<pos:position pos:line="29" pos:column="11"/></name> <name pos:line="29" pos:column="12">char<pos:position pos:line="29" pos:column="16"/></name> <modifier pos:line="29" pos:column="17">*<pos:position pos:line="29" pos:column="18"/></modifier></type><name pos:line="29" pos:column="18">pp<pos:position pos:line="29" pos:column="20"/></name></decl>;<pos:position pos:line="29" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="30" pos:column="3">char<pos:position pos:line="30" pos:column="7"/></name></type> <name><name pos:line="30" pos:column="8">portmsgbuf<pos:position pos:line="30" pos:column="18"/></name><index pos:line="30" pos:column="18">[<expr><literal type="number" pos:line="30" pos:column="19">4096<pos:position pos:line="30" pos:column="23"/></literal></expr>]<pos:position pos:line="30" pos:column="24"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="30" pos:column="26">tmp<pos:position pos:line="30" pos:column="29"/></name><index pos:line="30" pos:column="29">[<expr><literal type="number" pos:line="30" pos:column="30">4096<pos:position pos:line="30" pos:column="34"/></literal></expr>]<pos:position pos:line="30" pos:column="35"/></index></name></decl>;<pos:position pos:line="30" pos:column="36"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="32" pos:column="3">const<pos:position pos:line="32" pos:column="8"/></specifier> <name pos:line="32" pos:column="9">char<pos:position pos:line="32" pos:column="13"/></name> <modifier pos:line="32" pos:column="14">*<pos:position pos:line="32" pos:column="15"/></modifier></type><name><name pos:line="32" pos:column="15">mode<pos:position pos:line="32" pos:column="19"/></name><index pos:line="32" pos:column="19">[]<pos:position pos:line="32" pos:column="21"/></index></name> <init pos:line="32" pos:column="22">= <expr><block pos:line="32" pos:column="24">{ <expr><literal type="string" pos:line="32" pos:column="26">"EPRT"<pos:position pos:line="32" pos:column="32"/></literal></expr>, <expr><literal type="string" pos:line="32" pos:column="34">"LPRT"<pos:position pos:line="32" pos:column="40"/></literal></expr>, <expr><literal type="string" pos:line="32" pos:column="42">"PORT"<pos:position pos:line="32" pos:column="48"/></literal></expr>, <expr><name pos:line="32" pos:column="50">NULL<pos:position pos:line="32" pos:column="54"/></name></expr> }<pos:position pos:line="32" pos:column="56"/></block></expr></init></decl>;<pos:position pos:line="32" pos:column="57"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="33" pos:column="3">char<pos:position pos:line="33" pos:column="7"/></name> <modifier pos:line="33" pos:column="8">*<pos:position pos:line="33" pos:column="9"/></modifier><modifier pos:line="33" pos:column="9">*<pos:position pos:line="33" pos:column="10"/></modifier></type><name pos:line="33" pos:column="10">modep<pos:position pos:line="33" pos:column="15"/></name></decl>;<pos:position pos:line="33" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="35" pos:column="3">/*
   * we should use Curl_if2ip?  given pickiness of recent ftpd,
   * I believe we should use the same address as the control connection.
   */</comment>
  <expr_stmt><expr><name pos:line="39" pos:column="3">sslen<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">=<pos:position pos:line="39" pos:column="10"/></operator> <sizeof pos:line="39" pos:column="11">sizeof<argument_list pos:line="39" pos:column="17">(<argument><expr><name pos:line="39" pos:column="18">ss<pos:position pos:line="39" pos:column="20"/></name></expr></argument>)<pos:position pos:line="39" pos:column="21"/></argument_list></sizeof></expr>;<pos:position pos:line="39" pos:column="22"/></expr_stmt>
  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><call><name pos:line="40" pos:column="7">getsockname<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><name><name pos:line="40" pos:column="19">conn<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">firstsocket<pos:position pos:line="40" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="38">(<pos:position pos:line="40" pos:column="39"/></operator>struct <name pos:line="40" pos:column="46">sockaddr<pos:position pos:line="40" pos:column="54"/></name> <operator pos:line="40" pos:column="55">*<pos:position pos:line="40" pos:column="56"/></operator><operator pos:line="40" pos:column="56">)<pos:position pos:line="40" pos:column="57"/></operator><operator pos:line="40" pos:column="57">&amp;<pos:position pos:line="40" pos:column="62"/></operator><name pos:line="40" pos:column="58">ss<pos:position pos:line="40" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="62">&amp;<pos:position pos:line="40" pos:column="67"/></operator><name pos:line="40" pos:column="63">sslen<pos:position pos:line="40" pos:column="68"/></name></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call> <operator pos:line="40" pos:column="70">&lt;<pos:position pos:line="40" pos:column="74"/></operator> <literal type="number" pos:line="40" pos:column="72">0<pos:position pos:line="40" pos:column="73"/></literal></expr>)<pos:position pos:line="40" pos:column="74"/></condition><then pos:line="40" pos:column="74">
    <block type="pseudo"><return pos:line="41" pos:column="5">return <expr><name pos:line="41" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="41" pos:column="33"/></name></expr>;<pos:position pos:line="41" pos:column="34"/></return></block></then></if>
  
  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><call><name pos:line="43" pos:column="7">getnameinfo<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><operator pos:line="43" pos:column="19">(<pos:position pos:line="43" pos:column="20"/></operator>struct <name pos:line="43" pos:column="27">sockaddr<pos:position pos:line="43" pos:column="35"/></name> <operator pos:line="43" pos:column="36">*<pos:position pos:line="43" pos:column="37"/></operator><operator pos:line="43" pos:column="37">)<pos:position pos:line="43" pos:column="38"/></operator><operator pos:line="43" pos:column="38">&amp;<pos:position pos:line="43" pos:column="43"/></operator><name pos:line="43" pos:column="39">ss<pos:position pos:line="43" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="43">sslen<pos:position pos:line="43" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="50">hbuf<pos:position pos:line="43" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="56">sizeof<argument_list pos:line="43" pos:column="62">(<argument><expr><name pos:line="43" pos:column="63">hbuf<pos:position pos:line="43" pos:column="67"/></name></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="43" pos:column="70">NULL<pos:position pos:line="43" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="76">0<pos:position pos:line="43" pos:column="77"/></literal></expr></argument>,
                  <argument><expr><name pos:line="44" pos:column="19">niflags<pos:position pos:line="44" pos:column="26"/></name></expr></argument>)<pos:position pos:line="44" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="28"/></condition><then pos:line="44" pos:column="28">
    <block type="pseudo"><return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="45" pos:column="33"/></name></expr>;<pos:position pos:line="45" pos:column="34"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">memset<pos:position pos:line="47" pos:column="9"/></name><argument_list pos:line="47" pos:column="9">(<argument><expr><operator pos:line="47" pos:column="10">&amp;<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="11">hints<pos:position pos:line="47" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="18">0<pos:position pos:line="47" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="21">sizeof<argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">hints<pos:position pos:line="47" pos:column="33"/></name></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="48" pos:column="3">hints<pos:position pos:line="48" pos:column="8"/></name><operator pos:line="48" pos:column="8">.<pos:position pos:line="48" pos:column="9"/></operator><name pos:line="48" pos:column="9">ai_family<pos:position pos:line="48" pos:column="18"/></name></name> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <name><name pos:line="48" pos:column="21">sa<pos:position pos:line="48" pos:column="23"/></name><operator pos:line="48" pos:column="23">-&gt;<pos:position pos:line="48" pos:column="28"/></operator><name pos:line="48" pos:column="25">sa_family<pos:position pos:line="48" pos:column="34"/></name></name></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>
  <comment type="block" pos:line="49" pos:column="3">/*hints.ai_family = ss.ss_family;
    this way can be used if sockaddr_storage is properly defined, as glibc 
    2.1.X doesn't do*/</comment>
  <expr_stmt><expr><name><name pos:line="52" pos:column="3">hints<pos:position pos:line="52" pos:column="8"/></name><operator pos:line="52" pos:column="8">.<pos:position pos:line="52" pos:column="9"/></operator><name pos:line="52" pos:column="9">ai_socktype<pos:position pos:line="52" pos:column="20"/></name></name> <operator pos:line="52" pos:column="21">=<pos:position pos:line="52" pos:column="22"/></operator> <name pos:line="52" pos:column="23">SOCK_STREAM<pos:position pos:line="52" pos:column="34"/></name></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="53" pos:column="3">hints<pos:position pos:line="53" pos:column="8"/></name><operator pos:line="53" pos:column="8">.<pos:position pos:line="53" pos:column="9"/></operator><name pos:line="53" pos:column="9">ai_flags<pos:position pos:line="53" pos:column="17"/></name></name> <operator pos:line="53" pos:column="18">=<pos:position pos:line="53" pos:column="19"/></operator> <name pos:line="53" pos:column="20">AI_PASSIVE<pos:position pos:line="53" pos:column="30"/></name></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>

  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><call><name pos:line="55" pos:column="7">getaddrinfo<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">hbuf<pos:position pos:line="55" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="25">(<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="26">char<pos:position pos:line="55" pos:column="30"/></name> <operator pos:line="55" pos:column="31">*<pos:position pos:line="55" pos:column="32"/></operator><operator pos:line="55" pos:column="32">)<pos:position pos:line="55" pos:column="33"/></operator><literal type="string" pos:line="55" pos:column="33">"0"<pos:position pos:line="55" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="55" pos:column="38">&amp;<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="39">hints<pos:position pos:line="55" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="46">&amp;<pos:position pos:line="55" pos:column="51"/></operator><name pos:line="55" pos:column="47">res<pos:position pos:line="55" pos:column="50"/></name></expr></argument>)<pos:position pos:line="55" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="52"/></condition><then pos:line="55" pos:column="52">
    <block type="pseudo"><return pos:line="56" pos:column="5">return <expr><name pos:line="56" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="56" pos:column="33"/></name></expr>;<pos:position pos:line="56" pos:column="34"/></return></block></then></if>
  
  <expr_stmt><expr><name pos:line="58" pos:column="3">portsock<pos:position pos:line="58" pos:column="11"/></name> <operator pos:line="58" pos:column="12">=<pos:position pos:line="58" pos:column="13"/></operator> <operator pos:line="58" pos:column="14">-<pos:position pos:line="58" pos:column="15"/></operator><literal type="number" pos:line="58" pos:column="15">1<pos:position pos:line="58" pos:column="16"/></literal></expr>;<pos:position pos:line="58" pos:column="17"/></expr_stmt>
  <for pos:line="59" pos:column="3">for <control pos:line="59" pos:column="7">(<init><expr><name pos:line="59" pos:column="8">ai<pos:position pos:line="59" pos:column="10"/></name> <operator pos:line="59" pos:column="11">=<pos:position pos:line="59" pos:column="12"/></operator> <name pos:line="59" pos:column="13">res<pos:position pos:line="59" pos:column="16"/></name></expr>;<pos:position pos:line="59" pos:column="17"/></init> <condition><expr><name pos:line="59" pos:column="18">ai<pos:position pos:line="59" pos:column="20"/></name></expr>;<pos:position pos:line="59" pos:column="21"/></condition> <incr><expr><name pos:line="59" pos:column="22">ai<pos:position pos:line="59" pos:column="24"/></name> <operator pos:line="59" pos:column="25">=<pos:position pos:line="59" pos:column="26"/></operator> <name><name pos:line="59" pos:column="27">ai<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">-&gt;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="31">ai_next<pos:position pos:line="59" pos:column="38"/></name></name></expr></incr>)<pos:position pos:line="59" pos:column="39"/></control> <block pos:line="59" pos:column="40">{
    <expr_stmt><expr><name pos:line="60" pos:column="5">portsock<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator> <call><name pos:line="60" pos:column="16">socket<pos:position pos:line="60" pos:column="22"/></name><argument_list pos:line="60" pos:column="22">(<argument><expr><name><name pos:line="60" pos:column="23">ai<pos:position pos:line="60" pos:column="25"/></name><operator pos:line="60" pos:column="25">-&gt;<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="27">ai_family<pos:position pos:line="60" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="38">ai<pos:position pos:line="60" pos:column="40"/></name><operator pos:line="60" pos:column="40">-&gt;<pos:position pos:line="60" pos:column="45"/></operator><name pos:line="60" pos:column="42">ai_socktype<pos:position pos:line="60" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="55">ai<pos:position pos:line="60" pos:column="57"/></name><operator pos:line="60" pos:column="57">-&gt;<pos:position pos:line="60" pos:column="62"/></operator><name pos:line="60" pos:column="59">ai_protocol<pos:position pos:line="60" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="72"/></expr_stmt>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">portsock<pos:position pos:line="61" pos:column="17"/></name> <operator pos:line="61" pos:column="18">&lt;<pos:position pos:line="61" pos:column="22"/></operator> <literal type="number" pos:line="61" pos:column="20">0<pos:position pos:line="61" pos:column="21"/></literal></expr>)<pos:position pos:line="61" pos:column="22"/></condition><then pos:line="61" pos:column="22">
      <block type="pseudo"><continue pos:line="62" pos:column="7">continue;<pos:position pos:line="62" pos:column="16"/></continue></block></then></if>

    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><call><name pos:line="64" pos:column="9">bind<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><name pos:line="64" pos:column="14">portsock<pos:position pos:line="64" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="24">ai<pos:position pos:line="64" pos:column="26"/></name><operator pos:line="64" pos:column="26">-&gt;<pos:position pos:line="64" pos:column="31"/></operator><name pos:line="64" pos:column="28">ai_addr<pos:position pos:line="64" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="37">ai<pos:position pos:line="64" pos:column="39"/></name><operator pos:line="64" pos:column="39">-&gt;<pos:position pos:line="64" pos:column="44"/></operator><name pos:line="64" pos:column="41">ai_addrlen<pos:position pos:line="64" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="52"/></argument_list></call> <operator pos:line="64" pos:column="53">&lt;<pos:position pos:line="64" pos:column="57"/></operator> <literal type="number" pos:line="64" pos:column="55">0<pos:position pos:line="64" pos:column="56"/></literal></expr>)<pos:position pos:line="64" pos:column="57"/></condition><then pos:line="64" pos:column="57"> <block pos:line="64" pos:column="58">{
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">sclose<pos:position pos:line="65" pos:column="13"/></name><argument_list pos:line="65" pos:column="13">(<argument><expr><name pos:line="65" pos:column="14">portsock<pos:position pos:line="65" pos:column="22"/></name></expr></argument>)<pos:position pos:line="65" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><name pos:line="66" pos:column="7">portsock<pos:position pos:line="66" pos:column="15"/></name> <operator pos:line="66" pos:column="16">=<pos:position pos:line="66" pos:column="17"/></operator> <operator pos:line="66" pos:column="18">-<pos:position pos:line="66" pos:column="19"/></operator><literal type="number" pos:line="66" pos:column="19">1<pos:position pos:line="66" pos:column="20"/></literal></expr>;<pos:position pos:line="66" pos:column="21"/></expr_stmt>
      <continue pos:line="67" pos:column="7">continue;<pos:position pos:line="67" pos:column="16"/></continue>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>
      
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><call><name pos:line="70" pos:column="9">listen<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><name pos:line="70" pos:column="16">portsock<pos:position pos:line="70" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="26">1<pos:position pos:line="70" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="28"/></argument_list></call> <operator pos:line="70" pos:column="29">&lt;<pos:position pos:line="70" pos:column="33"/></operator> <literal type="number" pos:line="70" pos:column="31">0<pos:position pos:line="70" pos:column="32"/></literal></expr>)<pos:position pos:line="70" pos:column="33"/></condition><then pos:line="70" pos:column="33"> <block pos:line="70" pos:column="34">{
      <expr_stmt><expr><call><name pos:line="71" pos:column="7">sclose<pos:position pos:line="71" pos:column="13"/></name><argument_list pos:line="71" pos:column="13">(<argument><expr><name pos:line="71" pos:column="14">portsock<pos:position pos:line="71" pos:column="22"/></name></expr></argument>)<pos:position pos:line="71" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><name pos:line="72" pos:column="7">portsock<pos:position pos:line="72" pos:column="15"/></name> <operator pos:line="72" pos:column="16">=<pos:position pos:line="72" pos:column="17"/></operator> <operator pos:line="72" pos:column="18">-<pos:position pos:line="72" pos:column="19"/></operator><literal type="number" pos:line="72" pos:column="19">1<pos:position pos:line="72" pos:column="20"/></literal></expr>;<pos:position pos:line="72" pos:column="21"/></expr_stmt>
      <continue pos:line="73" pos:column="7">continue;<pos:position pos:line="73" pos:column="16"/></continue>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
    
    <break pos:line="76" pos:column="5">break;<pos:position pos:line="76" pos:column="11"/></break>
  }<pos:position pos:line="77" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="78" pos:column="3">freeaddrinfo<pos:position pos:line="78" pos:column="15"/></name><argument_list pos:line="78" pos:column="15">(<argument><expr><name pos:line="78" pos:column="16">res<pos:position pos:line="78" pos:column="19"/></name></expr></argument>)<pos:position pos:line="78" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="21"/></expr_stmt>
  <if pos:line="79" pos:column="3">if <condition pos:line="79" pos:column="6">(<expr><name pos:line="79" pos:column="7">portsock<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">&lt;<pos:position pos:line="79" pos:column="20"/></operator> <literal type="number" pos:line="79" pos:column="18">0<pos:position pos:line="79" pos:column="19"/></literal></expr>)<pos:position pos:line="79" pos:column="20"/></condition><then pos:line="79" pos:column="20"> <block pos:line="79" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">failf<pos:position pos:line="80" pos:column="10"/></name><argument_list pos:line="80" pos:column="10">(<argument><expr><name pos:line="80" pos:column="11">data<pos:position pos:line="80" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="17">"%s"<pos:position pos:line="80" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="80" pos:column="23">strerror<pos:position pos:line="80" pos:column="31"/></name><argument_list pos:line="80" pos:column="31">(<argument><expr><name pos:line="80" pos:column="32">errno<pos:position pos:line="80" pos:column="37"/></name></expr></argument>)<pos:position pos:line="80" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="40"/></expr_stmt>
    <return pos:line="81" pos:column="5">return <expr><name pos:line="81" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="81" pos:column="33"/></name></expr>;<pos:position pos:line="81" pos:column="34"/></return>
  }<pos:position pos:line="82" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="84" pos:column="3">sslen<pos:position pos:line="84" pos:column="8"/></name> <operator pos:line="84" pos:column="9">=<pos:position pos:line="84" pos:column="10"/></operator> <sizeof pos:line="84" pos:column="11">sizeof<argument_list pos:line="84" pos:column="17">(<argument><expr><name pos:line="84" pos:column="18">ss<pos:position pos:line="84" pos:column="20"/></name></expr></argument>)<pos:position pos:line="84" pos:column="21"/></argument_list></sizeof></expr>;<pos:position pos:line="84" pos:column="22"/></expr_stmt>
  <if pos:line="85" pos:column="3">if <condition pos:line="85" pos:column="6">(<expr><call><name pos:line="85" pos:column="7">getsockname<pos:position pos:line="85" pos:column="18"/></name><argument_list pos:line="85" pos:column="18">(<argument><expr><name pos:line="85" pos:column="19">portsock<pos:position pos:line="85" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="29">sa<pos:position pos:line="85" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="33">&amp;<pos:position pos:line="85" pos:column="38"/></operator><name pos:line="85" pos:column="34">sslen<pos:position pos:line="85" pos:column="39"/></name></expr></argument>)<pos:position pos:line="85" pos:column="40"/></argument_list></call> <operator pos:line="85" pos:column="41">&lt;<pos:position pos:line="85" pos:column="45"/></operator> <literal type="number" pos:line="85" pos:column="43">0<pos:position pos:line="85" pos:column="44"/></literal></expr>)<pos:position pos:line="85" pos:column="45"/></condition><then pos:line="85" pos:column="45"> <block pos:line="85" pos:column="46">{
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">failf<pos:position pos:line="86" pos:column="10"/></name><argument_list pos:line="86" pos:column="10">(<argument><expr><name pos:line="86" pos:column="11">data<pos:position pos:line="86" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="17">"%s"<pos:position pos:line="86" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="86" pos:column="23">strerror<pos:position pos:line="86" pos:column="31"/></name><argument_list pos:line="86" pos:column="31">(<argument><expr><name pos:line="86" pos:column="32">errno<pos:position pos:line="86" pos:column="37"/></name></expr></argument>)<pos:position pos:line="86" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="86" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="40"/></expr_stmt>
    <return pos:line="87" pos:column="5">return <expr><name pos:line="87" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="87" pos:column="33"/></name></expr>;<pos:position pos:line="87" pos:column="34"/></return>
  }<pos:position pos:line="88" pos:column="4"/></block></then></if>

  <for pos:line="90" pos:column="3">for <control pos:line="90" pos:column="7">(<init><expr><name pos:line="90" pos:column="8">modep<pos:position pos:line="90" pos:column="13"/></name> <operator pos:line="90" pos:column="14">=<pos:position pos:line="90" pos:column="15"/></operator> <operator pos:line="90" pos:column="16">(<pos:position pos:line="90" pos:column="17"/></operator><name pos:line="90" pos:column="17">char<pos:position pos:line="90" pos:column="21"/></name> <operator pos:line="90" pos:column="22">*<pos:position pos:line="90" pos:column="23"/></operator><operator pos:line="90" pos:column="23">*<pos:position pos:line="90" pos:column="24"/></operator><operator pos:line="90" pos:column="24">)<pos:position pos:line="90" pos:column="25"/></operator><name pos:line="90" pos:column="25">mode<pos:position pos:line="90" pos:column="29"/></name></expr>;<pos:position pos:line="90" pos:column="30"/></init> <condition><expr><name pos:line="90" pos:column="31">modep<pos:position pos:line="90" pos:column="36"/></name> <operator pos:line="90" pos:column="37">&amp;&amp;<pos:position pos:line="90" pos:column="47"/></operator> <operator pos:line="90" pos:column="40">*<pos:position pos:line="90" pos:column="41"/></operator><name pos:line="90" pos:column="41">modep<pos:position pos:line="90" pos:column="46"/></name></expr>;<pos:position pos:line="90" pos:column="47"/></condition> <incr><expr><name pos:line="90" pos:column="48">modep<pos:position pos:line="90" pos:column="53"/></name><operator pos:line="90" pos:column="53">++<pos:position pos:line="90" pos:column="55"/></operator></expr></incr>)<pos:position pos:line="90" pos:column="56"/></control> <block pos:line="90" pos:column="57">{
    <decl_stmt><decl><type><name pos:line="91" pos:column="5">int<pos:position pos:line="91" pos:column="8"/></name></type> <name pos:line="91" pos:column="9">lprtaf<pos:position pos:line="91" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="91" pos:column="17">eprtaf<pos:position pos:line="91" pos:column="23"/></name></decl>;<pos:position pos:line="91" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="92" pos:column="5">int<pos:position pos:line="92" pos:column="8"/></name></type> <name pos:line="92" pos:column="9">alen<pos:position pos:line="92" pos:column="13"/></name><init pos:line="92" pos:column="13">=<expr><literal type="number" pos:line="92" pos:column="14">0<pos:position pos:line="92" pos:column="15"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="92" pos:column="17">plen<pos:position pos:line="92" pos:column="21"/></name><init pos:line="92" pos:column="21">=<expr><literal type="number" pos:line="92" pos:column="22">0<pos:position pos:line="92" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="92" pos:column="24"/></decl_stmt>
    
    <switch pos:line="94" pos:column="5">switch <condition pos:line="94" pos:column="12">(<expr><name><name pos:line="94" pos:column="13">sa<pos:position pos:line="94" pos:column="15"/></name><operator pos:line="94" pos:column="15">-&gt;<pos:position pos:line="94" pos:column="20"/></operator><name pos:line="94" pos:column="17">sa_family<pos:position pos:line="94" pos:column="26"/></name></name></expr>)<pos:position pos:line="94" pos:column="27"/></condition> <block pos:line="94" pos:column="28">{
    <case pos:line="95" pos:column="5">case <expr><name pos:line="95" pos:column="10">AF_INET<pos:position pos:line="95" pos:column="17"/></name></expr>:<pos:position pos:line="95" pos:column="18"/></case>
      <expr_stmt><expr><name pos:line="96" pos:column="7">ap<pos:position pos:line="96" pos:column="9"/></name> <operator pos:line="96" pos:column="10">=<pos:position pos:line="96" pos:column="11"/></operator> <operator pos:line="96" pos:column="12">(<pos:position pos:line="96" pos:column="13"/></operator><name pos:line="96" pos:column="13">unsigned<pos:position pos:line="96" pos:column="21"/></name> <name pos:line="96" pos:column="22">char<pos:position pos:line="96" pos:column="26"/></name> <operator pos:line="96" pos:column="27">*<pos:position pos:line="96" pos:column="28"/></operator><operator pos:line="96" pos:column="28">)<pos:position pos:line="96" pos:column="29"/></operator><operator pos:line="96" pos:column="29">&amp;<pos:position pos:line="96" pos:column="34"/></operator><operator pos:line="96" pos:column="30">(<pos:position pos:line="96" pos:column="31"/></operator><operator pos:line="96" pos:column="31">(<pos:position pos:line="96" pos:column="32"/></operator>struct <name pos:line="96" pos:column="39">sockaddr_in<pos:position pos:line="96" pos:column="50"/></name> <operator pos:line="96" pos:column="51">*<pos:position pos:line="96" pos:column="52"/></operator><operator pos:line="96" pos:column="52">)<pos:position pos:line="96" pos:column="53"/></operator><operator pos:line="96" pos:column="53">&amp;<pos:position pos:line="96" pos:column="58"/></operator><name pos:line="96" pos:column="54">ss<pos:position pos:line="96" pos:column="56"/></name><operator pos:line="96" pos:column="56">)<pos:position pos:line="96" pos:column="57"/></operator><operator pos:line="96" pos:column="57">-&gt;<pos:position pos:line="96" pos:column="62"/></operator><name pos:line="96" pos:column="59">sin_addr<pos:position pos:line="96" pos:column="67"/></name></expr>;<pos:position pos:line="96" pos:column="68"/></expr_stmt>
      <expr_stmt><expr><name pos:line="97" pos:column="7">alen<pos:position pos:line="97" pos:column="11"/></name> <operator pos:line="97" pos:column="12">=<pos:position pos:line="97" pos:column="13"/></operator> <sizeof pos:line="97" pos:column="14">sizeof<argument_list pos:line="97" pos:column="20">(<argument><expr><operator pos:line="97" pos:column="21">(<pos:position pos:line="97" pos:column="22"/></operator><operator pos:line="97" pos:column="22">(<pos:position pos:line="97" pos:column="23"/></operator>struct <name pos:line="97" pos:column="30">sockaddr_in<pos:position pos:line="97" pos:column="41"/></name> <operator pos:line="97" pos:column="42">*<pos:position pos:line="97" pos:column="43"/></operator><operator pos:line="97" pos:column="43">)<pos:position pos:line="97" pos:column="44"/></operator><operator pos:line="97" pos:column="44">&amp;<pos:position pos:line="97" pos:column="49"/></operator><name pos:line="97" pos:column="45">ss<pos:position pos:line="97" pos:column="47"/></name><operator pos:line="97" pos:column="47">)<pos:position pos:line="97" pos:column="48"/></operator><operator pos:line="97" pos:column="48">-&gt;<pos:position pos:line="97" pos:column="53"/></operator><name pos:line="97" pos:column="50">sin_addr<pos:position pos:line="97" pos:column="58"/></name></expr></argument>)<pos:position pos:line="97" pos:column="59"/></argument_list></sizeof></expr>;<pos:position pos:line="97" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><name pos:line="98" pos:column="7">pp<pos:position pos:line="98" pos:column="9"/></name> <operator pos:line="98" pos:column="10">=<pos:position pos:line="98" pos:column="11"/></operator> <operator pos:line="98" pos:column="12">(<pos:position pos:line="98" pos:column="13"/></operator><name pos:line="98" pos:column="13">unsigned<pos:position pos:line="98" pos:column="21"/></name> <name pos:line="98" pos:column="22">char<pos:position pos:line="98" pos:column="26"/></name> <operator pos:line="98" pos:column="27">*<pos:position pos:line="98" pos:column="28"/></operator><operator pos:line="98" pos:column="28">)<pos:position pos:line="98" pos:column="29"/></operator><operator pos:line="98" pos:column="29">&amp;<pos:position pos:line="98" pos:column="34"/></operator><operator pos:line="98" pos:column="30">(<pos:position pos:line="98" pos:column="31"/></operator><operator pos:line="98" pos:column="31">(<pos:position pos:line="98" pos:column="32"/></operator>struct <name pos:line="98" pos:column="39">sockaddr_in<pos:position pos:line="98" pos:column="50"/></name> <operator pos:line="98" pos:column="51">*<pos:position pos:line="98" pos:column="52"/></operator><operator pos:line="98" pos:column="52">)<pos:position pos:line="98" pos:column="53"/></operator><operator pos:line="98" pos:column="53">&amp;<pos:position pos:line="98" pos:column="58"/></operator><name pos:line="98" pos:column="54">ss<pos:position pos:line="98" pos:column="56"/></name><operator pos:line="98" pos:column="56">)<pos:position pos:line="98" pos:column="57"/></operator><operator pos:line="98" pos:column="57">-&gt;<pos:position pos:line="98" pos:column="62"/></operator><name pos:line="98" pos:column="59">sin_port<pos:position pos:line="98" pos:column="67"/></name></expr>;<pos:position pos:line="98" pos:column="68"/></expr_stmt>
      <expr_stmt><expr><name pos:line="99" pos:column="7">plen<pos:position pos:line="99" pos:column="11"/></name> <operator pos:line="99" pos:column="12">=<pos:position pos:line="99" pos:column="13"/></operator> <sizeof pos:line="99" pos:column="14">sizeof<argument_list pos:line="99" pos:column="20">(<argument><expr><operator pos:line="99" pos:column="21">(<pos:position pos:line="99" pos:column="22"/></operator><operator pos:line="99" pos:column="22">(<pos:position pos:line="99" pos:column="23"/></operator>struct <name pos:line="99" pos:column="30">sockaddr_in<pos:position pos:line="99" pos:column="41"/></name> <operator pos:line="99" pos:column="42">*<pos:position pos:line="99" pos:column="43"/></operator><operator pos:line="99" pos:column="43">)<pos:position pos:line="99" pos:column="44"/></operator><operator pos:line="99" pos:column="44">&amp;<pos:position pos:line="99" pos:column="49"/></operator><name pos:line="99" pos:column="45">ss<pos:position pos:line="99" pos:column="47"/></name><operator pos:line="99" pos:column="47">)<pos:position pos:line="99" pos:column="48"/></operator><operator pos:line="99" pos:column="48">-&gt;<pos:position pos:line="99" pos:column="53"/></operator><name pos:line="99" pos:column="50">sin_port<pos:position pos:line="99" pos:column="58"/></name></expr></argument>)<pos:position pos:line="99" pos:column="59"/></argument_list></sizeof></expr>;<pos:position pos:line="99" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><name pos:line="100" pos:column="7">lprtaf<pos:position pos:line="100" pos:column="13"/></name> <operator pos:line="100" pos:column="14">=<pos:position pos:line="100" pos:column="15"/></operator> <literal type="number" pos:line="100" pos:column="16">4<pos:position pos:line="100" pos:column="17"/></literal></expr>;<pos:position pos:line="100" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="101" pos:column="7">eprtaf<pos:position pos:line="101" pos:column="13"/></name> <operator pos:line="101" pos:column="14">=<pos:position pos:line="101" pos:column="15"/></operator> <literal type="number" pos:line="101" pos:column="16">1<pos:position pos:line="101" pos:column="17"/></literal></expr>;<pos:position pos:line="101" pos:column="18"/></expr_stmt>
      <break pos:line="102" pos:column="7">break;<pos:position pos:line="102" pos:column="13"/></break>
    <case pos:line="103" pos:column="5">case <expr><name pos:line="103" pos:column="10">AF_INET6<pos:position pos:line="103" pos:column="18"/></name></expr>:<pos:position pos:line="103" pos:column="19"/></case>
      <expr_stmt><expr><name pos:line="104" pos:column="7">ap<pos:position pos:line="104" pos:column="9"/></name> <operator pos:line="104" pos:column="10">=<pos:position pos:line="104" pos:column="11"/></operator> <operator pos:line="104" pos:column="12">(<pos:position pos:line="104" pos:column="13"/></operator><name pos:line="104" pos:column="13">unsigned<pos:position pos:line="104" pos:column="21"/></name> <name pos:line="104" pos:column="22">char<pos:position pos:line="104" pos:column="26"/></name> <operator pos:line="104" pos:column="27">*<pos:position pos:line="104" pos:column="28"/></operator><operator pos:line="104" pos:column="28">)<pos:position pos:line="104" pos:column="29"/></operator><operator pos:line="104" pos:column="29">&amp;<pos:position pos:line="104" pos:column="34"/></operator><operator pos:line="104" pos:column="30">(<pos:position pos:line="104" pos:column="31"/></operator><operator pos:line="104" pos:column="31">(<pos:position pos:line="104" pos:column="32"/></operator>struct <name pos:line="104" pos:column="39">sockaddr_in6<pos:position pos:line="104" pos:column="51"/></name> <operator pos:line="104" pos:column="52">*<pos:position pos:line="104" pos:column="53"/></operator><operator pos:line="104" pos:column="53">)<pos:position pos:line="104" pos:column="54"/></operator><operator pos:line="104" pos:column="54">&amp;<pos:position pos:line="104" pos:column="59"/></operator><name pos:line="104" pos:column="55">ss<pos:position pos:line="104" pos:column="57"/></name><operator pos:line="104" pos:column="57">)<pos:position pos:line="104" pos:column="58"/></operator><operator pos:line="104" pos:column="58">-&gt;<pos:position pos:line="104" pos:column="63"/></operator><name pos:line="104" pos:column="60">sin6_addr<pos:position pos:line="104" pos:column="69"/></name></expr>;<pos:position pos:line="104" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name pos:line="105" pos:column="7">alen<pos:position pos:line="105" pos:column="11"/></name> <operator pos:line="105" pos:column="12">=<pos:position pos:line="105" pos:column="13"/></operator> <sizeof pos:line="105" pos:column="14">sizeof<argument_list pos:line="105" pos:column="20">(<argument><expr><operator pos:line="105" pos:column="21">(<pos:position pos:line="105" pos:column="22"/></operator><operator pos:line="105" pos:column="22">(<pos:position pos:line="105" pos:column="23"/></operator>struct <name pos:line="105" pos:column="30">sockaddr_in6<pos:position pos:line="105" pos:column="42"/></name> <operator pos:line="105" pos:column="43">*<pos:position pos:line="105" pos:column="44"/></operator><operator pos:line="105" pos:column="44">)<pos:position pos:line="105" pos:column="45"/></operator><operator pos:line="105" pos:column="45">&amp;<pos:position pos:line="105" pos:column="50"/></operator><name pos:line="105" pos:column="46">ss<pos:position pos:line="105" pos:column="48"/></name><operator pos:line="105" pos:column="48">)<pos:position pos:line="105" pos:column="49"/></operator><operator pos:line="105" pos:column="49">-&gt;<pos:position pos:line="105" pos:column="54"/></operator><name pos:line="105" pos:column="51">sin6_addr<pos:position pos:line="105" pos:column="60"/></name></expr></argument>)<pos:position pos:line="105" pos:column="61"/></argument_list></sizeof></expr>;<pos:position pos:line="105" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><name pos:line="106" pos:column="7">pp<pos:position pos:line="106" pos:column="9"/></name> <operator pos:line="106" pos:column="10">=<pos:position pos:line="106" pos:column="11"/></operator> <operator pos:line="106" pos:column="12">(<pos:position pos:line="106" pos:column="13"/></operator><name pos:line="106" pos:column="13">unsigned<pos:position pos:line="106" pos:column="21"/></name> <name pos:line="106" pos:column="22">char<pos:position pos:line="106" pos:column="26"/></name> <operator pos:line="106" pos:column="27">*<pos:position pos:line="106" pos:column="28"/></operator><operator pos:line="106" pos:column="28">)<pos:position pos:line="106" pos:column="29"/></operator><operator pos:line="106" pos:column="29">&amp;<pos:position pos:line="106" pos:column="34"/></operator><operator pos:line="106" pos:column="30">(<pos:position pos:line="106" pos:column="31"/></operator><operator pos:line="106" pos:column="31">(<pos:position pos:line="106" pos:column="32"/></operator>struct <name pos:line="106" pos:column="39">sockaddr_in6<pos:position pos:line="106" pos:column="51"/></name> <operator pos:line="106" pos:column="52">*<pos:position pos:line="106" pos:column="53"/></operator><operator pos:line="106" pos:column="53">)<pos:position pos:line="106" pos:column="54"/></operator><operator pos:line="106" pos:column="54">&amp;<pos:position pos:line="106" pos:column="59"/></operator><name pos:line="106" pos:column="55">ss<pos:position pos:line="106" pos:column="57"/></name><operator pos:line="106" pos:column="57">)<pos:position pos:line="106" pos:column="58"/></operator><operator pos:line="106" pos:column="58">-&gt;<pos:position pos:line="106" pos:column="63"/></operator><name pos:line="106" pos:column="60">sin6_port<pos:position pos:line="106" pos:column="69"/></name></expr>;<pos:position pos:line="106" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name pos:line="107" pos:column="7">plen<pos:position pos:line="107" pos:column="11"/></name> <operator pos:line="107" pos:column="12">=<pos:position pos:line="107" pos:column="13"/></operator> <sizeof pos:line="107" pos:column="14">sizeof<argument_list pos:line="107" pos:column="20">(<argument><expr><operator pos:line="107" pos:column="21">(<pos:position pos:line="107" pos:column="22"/></operator><operator pos:line="107" pos:column="22">(<pos:position pos:line="107" pos:column="23"/></operator>struct <name pos:line="107" pos:column="30">sockaddr_in6<pos:position pos:line="107" pos:column="42"/></name> <operator pos:line="107" pos:column="43">*<pos:position pos:line="107" pos:column="44"/></operator><operator pos:line="107" pos:column="44">)<pos:position pos:line="107" pos:column="45"/></operator><operator pos:line="107" pos:column="45">&amp;<pos:position pos:line="107" pos:column="50"/></operator><name pos:line="107" pos:column="46">ss<pos:position pos:line="107" pos:column="48"/></name><operator pos:line="107" pos:column="48">)<pos:position pos:line="107" pos:column="49"/></operator><operator pos:line="107" pos:column="49">-&gt;<pos:position pos:line="107" pos:column="54"/></operator><name pos:line="107" pos:column="51">sin6_port<pos:position pos:line="107" pos:column="60"/></name></expr></argument>)<pos:position pos:line="107" pos:column="61"/></argument_list></sizeof></expr>;<pos:position pos:line="107" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><name pos:line="108" pos:column="7">lprtaf<pos:position pos:line="108" pos:column="13"/></name> <operator pos:line="108" pos:column="14">=<pos:position pos:line="108" pos:column="15"/></operator> <literal type="number" pos:line="108" pos:column="16">6<pos:position pos:line="108" pos:column="17"/></literal></expr>;<pos:position pos:line="108" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="109" pos:column="7">eprtaf<pos:position pos:line="109" pos:column="13"/></name> <operator pos:line="109" pos:column="14">=<pos:position pos:line="109" pos:column="15"/></operator> <literal type="number" pos:line="109" pos:column="16">2<pos:position pos:line="109" pos:column="17"/></literal></expr>;<pos:position pos:line="109" pos:column="18"/></expr_stmt>
      <break pos:line="110" pos:column="7">break;<pos:position pos:line="110" pos:column="13"/></break>
    <default pos:line="111" pos:column="5">default:<pos:position pos:line="111" pos:column="13"/></default>
      <expr_stmt><expr><name pos:line="112" pos:column="7">ap<pos:position pos:line="112" pos:column="9"/></name> <operator pos:line="112" pos:column="10">=<pos:position pos:line="112" pos:column="11"/></operator> <name pos:line="112" pos:column="12">pp<pos:position pos:line="112" pos:column="14"/></name> <operator pos:line="112" pos:column="15">=<pos:position pos:line="112" pos:column="16"/></operator> <name pos:line="112" pos:column="17">NULL<pos:position pos:line="112" pos:column="21"/></name></expr>;<pos:position pos:line="112" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="113" pos:column="7">lprtaf<pos:position pos:line="113" pos:column="13"/></name> <operator pos:line="113" pos:column="14">=<pos:position pos:line="113" pos:column="15"/></operator> <name pos:line="113" pos:column="16">eprtaf<pos:position pos:line="113" pos:column="22"/></name> <operator pos:line="113" pos:column="23">=<pos:position pos:line="113" pos:column="24"/></operator> <operator pos:line="113" pos:column="25">-<pos:position pos:line="113" pos:column="26"/></operator><literal type="number" pos:line="113" pos:column="26">1<pos:position pos:line="113" pos:column="27"/></literal></expr>;<pos:position pos:line="113" pos:column="28"/></expr_stmt>
      <break pos:line="114" pos:column="7">break;<pos:position pos:line="114" pos:column="13"/></break>
    }<pos:position pos:line="115" pos:column="6"/></block></switch>

    <if pos:line="117" pos:column="5">if <condition pos:line="117" pos:column="8">(<expr><call><name pos:line="117" pos:column="9">strcmp<pos:position pos:line="117" pos:column="15"/></name><argument_list pos:line="117" pos:column="15">(<argument><expr><operator pos:line="117" pos:column="16">*<pos:position pos:line="117" pos:column="17"/></operator><name pos:line="117" pos:column="17">modep<pos:position pos:line="117" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="24">"EPRT"<pos:position pos:line="117" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="31"/></argument_list></call> <operator pos:line="117" pos:column="32">==<pos:position pos:line="117" pos:column="34"/></operator> <literal type="number" pos:line="117" pos:column="35">0<pos:position pos:line="117" pos:column="36"/></literal></expr>)<pos:position pos:line="117" pos:column="37"/></condition><then pos:line="117" pos:column="37"> <block pos:line="117" pos:column="38">{
      <if pos:line="118" pos:column="7">if <condition pos:line="118" pos:column="10">(<expr><name pos:line="118" pos:column="11">eprtaf<pos:position pos:line="118" pos:column="17"/></name> <operator pos:line="118" pos:column="18">&lt;<pos:position pos:line="118" pos:column="22"/></operator> <literal type="number" pos:line="118" pos:column="20">0<pos:position pos:line="118" pos:column="21"/></literal></expr>)<pos:position pos:line="118" pos:column="22"/></condition><then pos:line="118" pos:column="22">
        <block type="pseudo"><continue pos:line="119" pos:column="9">continue;<pos:position pos:line="119" pos:column="18"/></continue></block></then></if>
      <if pos:line="120" pos:column="7">if <condition pos:line="120" pos:column="10">(<expr><call><name pos:line="120" pos:column="11">getnameinfo<pos:position pos:line="120" pos:column="22"/></name><argument_list pos:line="120" pos:column="22">(<argument><expr><operator pos:line="120" pos:column="23">(<pos:position pos:line="120" pos:column="24"/></operator>struct <name pos:line="120" pos:column="31">sockaddr<pos:position pos:line="120" pos:column="39"/></name> <operator pos:line="120" pos:column="40">*<pos:position pos:line="120" pos:column="41"/></operator><operator pos:line="120" pos:column="41">)<pos:position pos:line="120" pos:column="42"/></operator><operator pos:line="120" pos:column="42">&amp;<pos:position pos:line="120" pos:column="47"/></operator><name pos:line="120" pos:column="43">ss<pos:position pos:line="120" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="47">sslen<pos:position pos:line="120" pos:column="52"/></name></expr></argument>,
                      <argument><expr><name pos:line="121" pos:column="23">portmsgbuf<pos:position pos:line="121" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="121" pos:column="35">sizeof<argument_list pos:line="121" pos:column="41">(<argument><expr><name pos:line="121" pos:column="42">portmsgbuf<pos:position pos:line="121" pos:column="52"/></name></expr></argument>)<pos:position pos:line="121" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="121" pos:column="55">tmp<pos:position pos:line="121" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="121" pos:column="60">sizeof<argument_list pos:line="121" pos:column="66">(<argument><expr><name pos:line="121" pos:column="67">tmp<pos:position pos:line="121" pos:column="70"/></name></expr></argument>)<pos:position pos:line="121" pos:column="71"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="121" pos:column="73">niflags<pos:position pos:line="121" pos:column="80"/></name></expr></argument>)<pos:position pos:line="121" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="121" pos:column="82"/></condition><then pos:line="121" pos:column="82">
        <block type="pseudo"><continue pos:line="122" pos:column="9">continue;<pos:position pos:line="122" pos:column="18"/></continue></block></then></if>

      <comment type="block" pos:line="124" pos:column="7">/* do not transmit IPv6 scope identifier to the wire */</comment>
      <if pos:line="125" pos:column="7">if <condition pos:line="125" pos:column="10">(<expr><name><name pos:line="125" pos:column="11">sa<pos:position pos:line="125" pos:column="13"/></name><operator pos:line="125" pos:column="13">-&gt;<pos:position pos:line="125" pos:column="18"/></operator><name pos:line="125" pos:column="15">sa_family<pos:position pos:line="125" pos:column="24"/></name></name> <operator pos:line="125" pos:column="25">==<pos:position pos:line="125" pos:column="27"/></operator> <name pos:line="125" pos:column="28">AF_INET6<pos:position pos:line="125" pos:column="36"/></name></expr>)<pos:position pos:line="125" pos:column="37"/></condition><then pos:line="125" pos:column="37"> <block pos:line="125" pos:column="38">{
        <decl_stmt><decl><type><name pos:line="126" pos:column="9">char<pos:position pos:line="126" pos:column="13"/></name> <modifier pos:line="126" pos:column="14">*<pos:position pos:line="126" pos:column="15"/></modifier></type><name pos:line="126" pos:column="15">q<pos:position pos:line="126" pos:column="16"/></name> <init pos:line="126" pos:column="17">= <expr><call><name pos:line="126" pos:column="19">strchr<pos:position pos:line="126" pos:column="25"/></name><argument_list pos:line="126" pos:column="25">(<argument><expr><name pos:line="126" pos:column="26">portmsgbuf<pos:position pos:line="126" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="126" pos:column="38">'%'<pos:position pos:line="126" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="126" pos:column="43"/></decl_stmt>
          <if pos:line="127" pos:column="11">if <condition pos:line="127" pos:column="14">(<expr><name pos:line="127" pos:column="15">q<pos:position pos:line="127" pos:column="16"/></name></expr>)<pos:position pos:line="127" pos:column="17"/></condition><then pos:line="127" pos:column="17">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="128" pos:column="13">*<pos:position pos:line="128" pos:column="14"/></operator><name pos:line="128" pos:column="14">q<pos:position pos:line="128" pos:column="15"/></name> <operator pos:line="128" pos:column="16">=<pos:position pos:line="128" pos:column="17"/></operator> <literal type="char" pos:line="128" pos:column="18">'\0'<pos:position pos:line="128" pos:column="22"/></literal></expr>;<pos:position pos:line="128" pos:column="23"/></expr_stmt></block></then></if>
      }<pos:position pos:line="129" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="131" pos:column="7">result<pos:position pos:line="131" pos:column="13"/></name> <operator pos:line="131" pos:column="14">=<pos:position pos:line="131" pos:column="15"/></operator> <call><name pos:line="131" pos:column="16">Curl_ftpsendf<pos:position pos:line="131" pos:column="29"/></name><argument_list pos:line="131" pos:column="29">(<argument><expr><name pos:line="131" pos:column="30">conn<pos:position pos:line="131" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="36">"%s |%d|%s|%s|"<pos:position pos:line="131" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="131" pos:column="53">*<pos:position pos:line="131" pos:column="54"/></operator><name pos:line="131" pos:column="54">modep<pos:position pos:line="131" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="61">eprtaf<pos:position pos:line="131" pos:column="67"/></name></expr></argument>,
                             <argument><expr><name pos:line="132" pos:column="30">portmsgbuf<pos:position pos:line="132" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="42">tmp<pos:position pos:line="132" pos:column="45"/></name></expr></argument>)<pos:position pos:line="132" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="47"/></expr_stmt>
      <if pos:line="133" pos:column="7">if<condition pos:line="133" pos:column="9">(<expr><name pos:line="133" pos:column="10">result<pos:position pos:line="133" pos:column="16"/></name></expr>)<pos:position pos:line="133" pos:column="17"/></condition><then pos:line="133" pos:column="17">
        <block type="pseudo"><return pos:line="134" pos:column="9">return <expr><name pos:line="134" pos:column="16">result<pos:position pos:line="134" pos:column="22"/></name></expr>;<pos:position pos:line="134" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="135" pos:column="6"/></block></then> <elseif pos:line="135" pos:column="7">else <if pos:line="135" pos:column="12">if <condition pos:line="135" pos:column="15">(<expr><call><name pos:line="135" pos:column="16">strcmp<pos:position pos:line="135" pos:column="22"/></name><argument_list pos:line="135" pos:column="22">(<argument><expr><operator pos:line="135" pos:column="23">*<pos:position pos:line="135" pos:column="24"/></operator><name pos:line="135" pos:column="24">modep<pos:position pos:line="135" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="31">"LPRT"<pos:position pos:line="135" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="38"/></argument_list></call> <operator pos:line="135" pos:column="39">==<pos:position pos:line="135" pos:column="41"/></operator> <literal type="number" pos:line="135" pos:column="42">0<pos:position pos:line="135" pos:column="43"/></literal> <operator pos:line="135" pos:column="44">||<pos:position pos:line="135" pos:column="46"/></operator>
               <call><name pos:line="136" pos:column="16">strcmp<pos:position pos:line="136" pos:column="22"/></name><argument_list pos:line="136" pos:column="22">(<argument><expr><operator pos:line="136" pos:column="23">*<pos:position pos:line="136" pos:column="24"/></operator><name pos:line="136" pos:column="24">modep<pos:position pos:line="136" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="31">"PORT"<pos:position pos:line="136" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="38"/></argument_list></call> <operator pos:line="136" pos:column="39">==<pos:position pos:line="136" pos:column="41"/></operator> <literal type="number" pos:line="136" pos:column="42">0<pos:position pos:line="136" pos:column="43"/></literal></expr>)<pos:position pos:line="136" pos:column="44"/></condition><then pos:line="136" pos:column="44"> <block pos:line="136" pos:column="45">{
      <decl_stmt><decl><type><name pos:line="137" pos:column="7">int<pos:position pos:line="137" pos:column="10"/></name></type> <name pos:line="137" pos:column="11">i<pos:position pos:line="137" pos:column="12"/></name></decl>;<pos:position pos:line="137" pos:column="13"/></decl_stmt>
      
      <if pos:line="139" pos:column="7">if <condition pos:line="139" pos:column="10">(<expr><call><name pos:line="139" pos:column="11">strcmp<pos:position pos:line="139" pos:column="17"/></name><argument_list pos:line="139" pos:column="17">(<argument><expr><operator pos:line="139" pos:column="18">*<pos:position pos:line="139" pos:column="19"/></operator><name pos:line="139" pos:column="19">modep<pos:position pos:line="139" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="139" pos:column="26">"LPRT"<pos:position pos:line="139" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="33"/></argument_list></call> <operator pos:line="139" pos:column="34">==<pos:position pos:line="139" pos:column="36"/></operator> <literal type="number" pos:line="139" pos:column="37">0<pos:position pos:line="139" pos:column="38"/></literal> <operator pos:line="139" pos:column="39">&amp;&amp;<pos:position pos:line="139" pos:column="49"/></operator> <name pos:line="139" pos:column="42">lprtaf<pos:position pos:line="139" pos:column="48"/></name> <operator pos:line="139" pos:column="49">&lt;<pos:position pos:line="139" pos:column="53"/></operator> <literal type="number" pos:line="139" pos:column="51">0<pos:position pos:line="139" pos:column="52"/></literal></expr>)<pos:position pos:line="139" pos:column="53"/></condition><then pos:line="139" pos:column="53">
        <block type="pseudo"><continue pos:line="140" pos:column="9">continue;<pos:position pos:line="140" pos:column="18"/></continue></block></then></if>
      <if pos:line="141" pos:column="7">if <condition pos:line="141" pos:column="10">(<expr><call><name pos:line="141" pos:column="11">strcmp<pos:position pos:line="141" pos:column="17"/></name><argument_list pos:line="141" pos:column="17">(<argument><expr><operator pos:line="141" pos:column="18">*<pos:position pos:line="141" pos:column="19"/></operator><name pos:line="141" pos:column="19">modep<pos:position pos:line="141" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="26">"PORT"<pos:position pos:line="141" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="33"/></argument_list></call> <operator pos:line="141" pos:column="34">==<pos:position pos:line="141" pos:column="36"/></operator> <literal type="number" pos:line="141" pos:column="37">0<pos:position pos:line="141" pos:column="38"/></literal> <operator pos:line="141" pos:column="39">&amp;&amp;<pos:position pos:line="141" pos:column="49"/></operator> <name><name pos:line="141" pos:column="42">sa<pos:position pos:line="141" pos:column="44"/></name><operator pos:line="141" pos:column="44">-&gt;<pos:position pos:line="141" pos:column="49"/></operator><name pos:line="141" pos:column="46">sa_family<pos:position pos:line="141" pos:column="55"/></name></name> <operator pos:line="141" pos:column="56">!=<pos:position pos:line="141" pos:column="58"/></operator> <name pos:line="141" pos:column="59">AF_INET<pos:position pos:line="141" pos:column="66"/></name></expr>)<pos:position pos:line="141" pos:column="67"/></condition><then pos:line="141" pos:column="67">
        <block type="pseudo"><continue pos:line="142" pos:column="9">continue;<pos:position pos:line="142" pos:column="18"/></continue></block></then></if>

      <expr_stmt><expr><name><name pos:line="144" pos:column="7">portmsgbuf<pos:position pos:line="144" pos:column="17"/></name><index pos:line="144" pos:column="17">[<expr><literal type="number" pos:line="144" pos:column="18">0<pos:position pos:line="144" pos:column="19"/></literal></expr>]<pos:position pos:line="144" pos:column="20"/></index></name> <operator pos:line="144" pos:column="21">=<pos:position pos:line="144" pos:column="22"/></operator> <literal type="char" pos:line="144" pos:column="23">'\0'<pos:position pos:line="144" pos:column="27"/></literal></expr>;<pos:position pos:line="144" pos:column="28"/></expr_stmt>
      <if pos:line="145" pos:column="7">if <condition pos:line="145" pos:column="10">(<expr><call><name pos:line="145" pos:column="11">strcmp<pos:position pos:line="145" pos:column="17"/></name><argument_list pos:line="145" pos:column="17">(<argument><expr><operator pos:line="145" pos:column="18">*<pos:position pos:line="145" pos:column="19"/></operator><name pos:line="145" pos:column="19">modep<pos:position pos:line="145" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="145" pos:column="26">"LPRT"<pos:position pos:line="145" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="33"/></argument_list></call> <operator pos:line="145" pos:column="34">==<pos:position pos:line="145" pos:column="36"/></operator> <literal type="number" pos:line="145" pos:column="37">0<pos:position pos:line="145" pos:column="38"/></literal></expr>)<pos:position pos:line="145" pos:column="39"/></condition><then pos:line="145" pos:column="39"> <block pos:line="145" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">snprintf<pos:position pos:line="146" pos:column="17"/></name><argument_list pos:line="146" pos:column="17">(<argument><expr><name pos:line="146" pos:column="18">tmp<pos:position pos:line="146" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="146" pos:column="23">sizeof<argument_list pos:line="146" pos:column="29">(<argument><expr><name pos:line="146" pos:column="30">tmp<pos:position pos:line="146" pos:column="33"/></name></expr></argument>)<pos:position pos:line="146" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="36">"%d,%d"<pos:position pos:line="146" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="45">lprtaf<pos:position pos:line="146" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="53">alen<pos:position pos:line="146" pos:column="57"/></name></expr></argument>)<pos:position pos:line="146" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="59"/></expr_stmt>
        <if pos:line="147" pos:column="9">if <condition pos:line="147" pos:column="12">(<expr><call><name pos:line="147" pos:column="13">strlcat<pos:position pos:line="147" pos:column="20"/></name><argument_list pos:line="147" pos:column="20">(<argument><expr><name pos:line="147" pos:column="21">portmsgbuf<pos:position pos:line="147" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="33">tmp<pos:position pos:line="147" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="147" pos:column="38">sizeof<argument_list pos:line="147" pos:column="44">(<argument><expr><name pos:line="147" pos:column="45">portmsgbuf<pos:position pos:line="147" pos:column="55"/></name></expr></argument>)<pos:position pos:line="147" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="147" pos:column="57"/></argument_list></call> <operator pos:line="147" pos:column="58">&gt;=<pos:position pos:line="147" pos:column="63"/></operator>
            <sizeof pos:line="148" pos:column="13">sizeof<argument_list pos:line="148" pos:column="19">(<argument><expr><name pos:line="148" pos:column="20">portmsgbuf<pos:position pos:line="148" pos:column="30"/></name></expr></argument>)<pos:position pos:line="148" pos:column="31"/></argument_list></sizeof></expr>)<pos:position pos:line="148" pos:column="32"/></condition><then pos:line="148" pos:column="32"> <block pos:line="148" pos:column="33">{
          <continue pos:line="149" pos:column="11">continue;<pos:position pos:line="149" pos:column="20"/></continue>
        }<pos:position pos:line="150" pos:column="10"/></block></then></if>
      }<pos:position pos:line="151" pos:column="8"/></block></then></if>

      <for pos:line="153" pos:column="7">for <control pos:line="153" pos:column="11">(<init><expr><name pos:line="153" pos:column="12">i<pos:position pos:line="153" pos:column="13"/></name> <operator pos:line="153" pos:column="14">=<pos:position pos:line="153" pos:column="15"/></operator> <literal type="number" pos:line="153" pos:column="16">0<pos:position pos:line="153" pos:column="17"/></literal></expr>;<pos:position pos:line="153" pos:column="18"/></init> <condition><expr><name pos:line="153" pos:column="19">i<pos:position pos:line="153" pos:column="20"/></name> <operator pos:line="153" pos:column="21">&lt;<pos:position pos:line="153" pos:column="25"/></operator> <name pos:line="153" pos:column="23">alen<pos:position pos:line="153" pos:column="27"/></name></expr>;<pos:position pos:line="153" pos:column="28"/></condition> <incr><expr><name pos:line="153" pos:column="29">i<pos:position pos:line="153" pos:column="30"/></name><operator pos:line="153" pos:column="30">++<pos:position pos:line="153" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="153" pos:column="33"/></control> <block pos:line="153" pos:column="34">{
        <if pos:line="154" pos:column="9">if <condition pos:line="154" pos:column="12">(<expr><name><name pos:line="154" pos:column="13">portmsgbuf<pos:position pos:line="154" pos:column="23"/></name><index pos:line="154" pos:column="23">[<expr><literal type="number" pos:line="154" pos:column="24">0<pos:position pos:line="154" pos:column="25"/></literal></expr>]<pos:position pos:line="154" pos:column="26"/></index></name></expr>)<pos:position pos:line="154" pos:column="27"/></condition><then pos:line="154" pos:column="27">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="155" pos:column="11">snprintf<pos:position pos:line="155" pos:column="19"/></name><argument_list pos:line="155" pos:column="19">(<argument><expr><name pos:line="155" pos:column="20">tmp<pos:position pos:line="155" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="155" pos:column="25">sizeof<argument_list pos:line="155" pos:column="31">(<argument><expr><name pos:line="155" pos:column="32">tmp<pos:position pos:line="155" pos:column="35"/></name></expr></argument>)<pos:position pos:line="155" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="155" pos:column="38">",%u"<pos:position pos:line="155" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="155" pos:column="45">ap<pos:position pos:line="155" pos:column="47"/></name><index pos:line="155" pos:column="47">[<expr><name pos:line="155" pos:column="48">i<pos:position pos:line="155" pos:column="49"/></name></expr>]<pos:position pos:line="155" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="155" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="52"/></expr_stmt></block></then>
        <else pos:line="156" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="157" pos:column="11">snprintf<pos:position pos:line="157" pos:column="19"/></name><argument_list pos:line="157" pos:column="19">(<argument><expr><name pos:line="157" pos:column="20">tmp<pos:position pos:line="157" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="157" pos:column="25">sizeof<argument_list pos:line="157" pos:column="31">(<argument><expr><name pos:line="157" pos:column="32">tmp<pos:position pos:line="157" pos:column="35"/></name></expr></argument>)<pos:position pos:line="157" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="157" pos:column="38">"%u"<pos:position pos:line="157" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="44">ap<pos:position pos:line="157" pos:column="46"/></name><index pos:line="157" pos:column="46">[<expr><name pos:line="157" pos:column="47">i<pos:position pos:line="157" pos:column="48"/></name></expr>]<pos:position pos:line="157" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="157" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="51"/></expr_stmt></block></else></if>
        
        <if pos:line="159" pos:column="9">if <condition pos:line="159" pos:column="12">(<expr><call><name pos:line="159" pos:column="13">strlcat<pos:position pos:line="159" pos:column="20"/></name><argument_list pos:line="159" pos:column="20">(<argument><expr><name pos:line="159" pos:column="21">portmsgbuf<pos:position pos:line="159" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="33">tmp<pos:position pos:line="159" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="159" pos:column="38">sizeof<argument_list pos:line="159" pos:column="44">(<argument><expr><name pos:line="159" pos:column="45">portmsgbuf<pos:position pos:line="159" pos:column="55"/></name></expr></argument>)<pos:position pos:line="159" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="159" pos:column="57"/></argument_list></call> <operator pos:line="159" pos:column="58">&gt;=<pos:position pos:line="159" pos:column="63"/></operator>
            <sizeof pos:line="160" pos:column="13">sizeof<argument_list pos:line="160" pos:column="19">(<argument><expr><name pos:line="160" pos:column="20">portmsgbuf<pos:position pos:line="160" pos:column="30"/></name></expr></argument>)<pos:position pos:line="160" pos:column="31"/></argument_list></sizeof></expr>)<pos:position pos:line="160" pos:column="32"/></condition><then pos:line="160" pos:column="32"> <block pos:line="160" pos:column="33">{
          <continue pos:line="161" pos:column="11">continue;<pos:position pos:line="161" pos:column="20"/></continue>
        }<pos:position pos:line="162" pos:column="10"/></block></then></if>
      }<pos:position pos:line="163" pos:column="8"/></block></for>
      
      <if pos:line="165" pos:column="7">if <condition pos:line="165" pos:column="10">(<expr><call><name pos:line="165" pos:column="11">strcmp<pos:position pos:line="165" pos:column="17"/></name><argument_list pos:line="165" pos:column="17">(<argument><expr><operator pos:line="165" pos:column="18">*<pos:position pos:line="165" pos:column="19"/></operator><name pos:line="165" pos:column="19">modep<pos:position pos:line="165" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="165" pos:column="26">"LPRT"<pos:position pos:line="165" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="33"/></argument_list></call> <operator pos:line="165" pos:column="34">==<pos:position pos:line="165" pos:column="36"/></operator> <literal type="number" pos:line="165" pos:column="37">0<pos:position pos:line="165" pos:column="38"/></literal></expr>)<pos:position pos:line="165" pos:column="39"/></condition><then pos:line="165" pos:column="39"> <block pos:line="165" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="166" pos:column="9">snprintf<pos:position pos:line="166" pos:column="17"/></name><argument_list pos:line="166" pos:column="17">(<argument><expr><name pos:line="166" pos:column="18">tmp<pos:position pos:line="166" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="166" pos:column="23">sizeof<argument_list pos:line="166" pos:column="29">(<argument><expr><name pos:line="166" pos:column="30">tmp<pos:position pos:line="166" pos:column="33"/></name></expr></argument>)<pos:position pos:line="166" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="36">",%d"<pos:position pos:line="166" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="43">plen<pos:position pos:line="166" pos:column="47"/></name></expr></argument>)<pos:position pos:line="166" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="49"/></expr_stmt>
        
        <if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><call><name pos:line="168" pos:column="13">strlcat<pos:position pos:line="168" pos:column="20"/></name><argument_list pos:line="168" pos:column="20">(<argument><expr><name pos:line="168" pos:column="21">portmsgbuf<pos:position pos:line="168" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="33">tmp<pos:position pos:line="168" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="168" pos:column="38">sizeof<argument_list pos:line="168" pos:column="44">(<argument><expr><name pos:line="168" pos:column="45">portmsgbuf<pos:position pos:line="168" pos:column="55"/></name></expr></argument>)<pos:position pos:line="168" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="168" pos:column="57"/></argument_list></call> <operator pos:line="168" pos:column="58">&gt;=<pos:position pos:line="168" pos:column="63"/></operator> <sizeof pos:line="168" pos:column="61">sizeof<argument_list pos:line="168" pos:column="67">(<argument><expr><name pos:line="168" pos:column="68">portmsgbuf<pos:position pos:line="168" pos:column="78"/></name></expr></argument>)<pos:position pos:line="168" pos:column="79"/></argument_list></sizeof></expr>)<pos:position pos:line="168" pos:column="80"/></condition><then pos:line="168" pos:column="80">
          <block type="pseudo"><continue pos:line="169" pos:column="11">continue;<pos:position pos:line="169" pos:column="20"/></continue></block></then></if>
      }<pos:position pos:line="170" pos:column="8"/></block></then></if>

      <for pos:line="172" pos:column="7">for <control pos:line="172" pos:column="11">(<init><expr><name pos:line="172" pos:column="12">i<pos:position pos:line="172" pos:column="13"/></name> <operator pos:line="172" pos:column="14">=<pos:position pos:line="172" pos:column="15"/></operator> <literal type="number" pos:line="172" pos:column="16">0<pos:position pos:line="172" pos:column="17"/></literal></expr>;<pos:position pos:line="172" pos:column="18"/></init> <condition><expr><name pos:line="172" pos:column="19">i<pos:position pos:line="172" pos:column="20"/></name> <operator pos:line="172" pos:column="21">&lt;<pos:position pos:line="172" pos:column="25"/></operator> <name pos:line="172" pos:column="23">plen<pos:position pos:line="172" pos:column="27"/></name></expr>;<pos:position pos:line="172" pos:column="28"/></condition> <incr><expr><name pos:line="172" pos:column="29">i<pos:position pos:line="172" pos:column="30"/></name><operator pos:line="172" pos:column="30">++<pos:position pos:line="172" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="172" pos:column="33"/></control> <block pos:line="172" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="173" pos:column="9">snprintf<pos:position pos:line="173" pos:column="17"/></name><argument_list pos:line="173" pos:column="17">(<argument><expr><name pos:line="173" pos:column="18">tmp<pos:position pos:line="173" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="173" pos:column="23">sizeof<argument_list pos:line="173" pos:column="29">(<argument><expr><name pos:line="173" pos:column="30">tmp<pos:position pos:line="173" pos:column="33"/></name></expr></argument>)<pos:position pos:line="173" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="173" pos:column="36">",%u"<pos:position pos:line="173" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="173" pos:column="43">pp<pos:position pos:line="173" pos:column="45"/></name><index pos:line="173" pos:column="45">[<expr><name pos:line="173" pos:column="46">i<pos:position pos:line="173" pos:column="47"/></name></expr>]<pos:position pos:line="173" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="173" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="50"/></expr_stmt>
        
        <if pos:line="175" pos:column="9">if <condition pos:line="175" pos:column="12">(<expr><call><name pos:line="175" pos:column="13">strlcat<pos:position pos:line="175" pos:column="20"/></name><argument_list pos:line="175" pos:column="20">(<argument><expr><name pos:line="175" pos:column="21">portmsgbuf<pos:position pos:line="175" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="33">tmp<pos:position pos:line="175" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="175" pos:column="38">sizeof<argument_list pos:line="175" pos:column="44">(<argument><expr><name pos:line="175" pos:column="45">portmsgbuf<pos:position pos:line="175" pos:column="55"/></name></expr></argument>)<pos:position pos:line="175" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="175" pos:column="57"/></argument_list></call> <operator pos:line="175" pos:column="58">&gt;=<pos:position pos:line="175" pos:column="63"/></operator>
            <sizeof pos:line="176" pos:column="13">sizeof<argument_list pos:line="176" pos:column="19">(<argument><expr><name pos:line="176" pos:column="20">portmsgbuf<pos:position pos:line="176" pos:column="30"/></name></expr></argument>)<pos:position pos:line="176" pos:column="31"/></argument_list></sizeof></expr>)<pos:position pos:line="176" pos:column="32"/></condition><then pos:line="176" pos:column="32"> <block pos:line="176" pos:column="33">{
          <continue pos:line="177" pos:column="11">continue;<pos:position pos:line="177" pos:column="20"/></continue>
        }<pos:position pos:line="178" pos:column="10"/></block></then></if>
      }<pos:position pos:line="179" pos:column="8"/></block></for>
      
      <expr_stmt><expr><name pos:line="181" pos:column="7">result<pos:position pos:line="181" pos:column="13"/></name> <operator pos:line="181" pos:column="14">=<pos:position pos:line="181" pos:column="15"/></operator> <call><name pos:line="181" pos:column="16">Curl_ftpsendf<pos:position pos:line="181" pos:column="29"/></name><argument_list pos:line="181" pos:column="29">(<argument><expr><name pos:line="181" pos:column="30">conn<pos:position pos:line="181" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="181" pos:column="36">"%s %s"<pos:position pos:line="181" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="181" pos:column="45">*<pos:position pos:line="181" pos:column="46"/></operator><name pos:line="181" pos:column="46">modep<pos:position pos:line="181" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="53">portmsgbuf<pos:position pos:line="181" pos:column="63"/></name></expr></argument>)<pos:position pos:line="181" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="65"/></expr_stmt>
      <if pos:line="182" pos:column="7">if<condition pos:line="182" pos:column="9">(<expr><name pos:line="182" pos:column="10">result<pos:position pos:line="182" pos:column="16"/></name></expr>)<pos:position pos:line="182" pos:column="17"/></condition><then pos:line="182" pos:column="17">
        <block type="pseudo"><return pos:line="183" pos:column="9">return <expr><name pos:line="183" pos:column="16">result<pos:position pos:line="183" pos:column="22"/></name></expr>;<pos:position pos:line="183" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="184" pos:column="6"/></block></then></if></elseif></if>
    
    <expr_stmt><expr><name pos:line="186" pos:column="5">result<pos:position pos:line="186" pos:column="11"/></name> <operator pos:line="186" pos:column="12">=<pos:position pos:line="186" pos:column="13"/></operator> <call><name pos:line="186" pos:column="14">Curl_GetFTPResponse<pos:position pos:line="186" pos:column="33"/></name><argument_list pos:line="186" pos:column="33">(<argument><expr><operator pos:line="186" pos:column="34">&amp;<pos:position pos:line="186" pos:column="39"/></operator><name pos:line="186" pos:column="35">nread<pos:position pos:line="186" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="42">conn<pos:position pos:line="186" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="186" pos:column="48">&amp;<pos:position pos:line="186" pos:column="53"/></operator><name pos:line="186" pos:column="49">ftpcode<pos:position pos:line="186" pos:column="56"/></name></expr></argument>)<pos:position pos:line="186" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="58"/></expr_stmt>
    <if pos:line="187" pos:column="5">if<condition pos:line="187" pos:column="7">(<expr><name pos:line="187" pos:column="8">result<pos:position pos:line="187" pos:column="14"/></name></expr>)<pos:position pos:line="187" pos:column="15"/></condition><then pos:line="187" pos:column="15">
      <block type="pseudo"><return pos:line="188" pos:column="7">return <expr><name pos:line="188" pos:column="14">result<pos:position pos:line="188" pos:column="20"/></name></expr>;<pos:position pos:line="188" pos:column="21"/></return></block></then></if>
    
    <if pos:line="190" pos:column="5">if <condition pos:line="190" pos:column="8">(<expr><name pos:line="190" pos:column="9">ftpcode<pos:position pos:line="190" pos:column="16"/></name> <operator pos:line="190" pos:column="17">!=<pos:position pos:line="190" pos:column="19"/></operator> <literal type="number" pos:line="190" pos:column="20">200<pos:position pos:line="190" pos:column="23"/></literal></expr>)<pos:position pos:line="190" pos:column="24"/></condition><then pos:line="190" pos:column="24"> <block pos:line="190" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="191" pos:column="7">failf<pos:position pos:line="191" pos:column="12"/></name><argument_list pos:line="191" pos:column="12">(<argument><expr><name pos:line="191" pos:column="13">data<pos:position pos:line="191" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="191" pos:column="19">"Server does not grok %s"<pos:position pos:line="191" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="191" pos:column="46">*<pos:position pos:line="191" pos:column="47"/></operator><name pos:line="191" pos:column="47">modep<pos:position pos:line="191" pos:column="52"/></name></expr></argument>)<pos:position pos:line="191" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="54"/></expr_stmt>
      <continue pos:line="192" pos:column="7">continue;<pos:position pos:line="192" pos:column="16"/></continue>
    }<pos:position pos:line="193" pos:column="6"/></block></then>
    <else pos:line="194" pos:column="5">else
      <block type="pseudo"><break pos:line="195" pos:column="7">break;<pos:position pos:line="195" pos:column="13"/></break></block></else></if>
  }<pos:position pos:line="196" pos:column="4"/></block></for>
  
  <if pos:line="198" pos:column="3">if <condition pos:line="198" pos:column="6">(<expr><operator pos:line="198" pos:column="7">!<pos:position pos:line="198" pos:column="8"/></operator><operator pos:line="198" pos:column="8">*<pos:position pos:line="198" pos:column="9"/></operator><name pos:line="198" pos:column="9">modep<pos:position pos:line="198" pos:column="14"/></name></expr>)<pos:position pos:line="198" pos:column="15"/></condition><then pos:line="198" pos:column="15"> <block pos:line="198" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="199" pos:column="5">sclose<pos:position pos:line="199" pos:column="11"/></name><argument_list pos:line="199" pos:column="11">(<argument><expr><name pos:line="199" pos:column="12">portsock<pos:position pos:line="199" pos:column="20"/></name></expr></argument>)<pos:position pos:line="199" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="22"/></expr_stmt>
    <return pos:line="200" pos:column="5">return <expr><name pos:line="200" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="200" pos:column="33"/></name></expr>;<pos:position pos:line="200" pos:column="34"/></return>
  }<pos:position pos:line="201" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="202" pos:column="3">/* we set the secondary socket variable to this for now, it
     is only so that the cleanup function will close it in case
     we fail before the true secondary stuff is made */</comment>
  <expr_stmt><expr><name><name pos:line="205" pos:column="3">conn<pos:position pos:line="205" pos:column="7"/></name><operator pos:line="205" pos:column="7">-&gt;<pos:position pos:line="205" pos:column="12"/></operator><name pos:line="205" pos:column="9">secondarysocket<pos:position pos:line="205" pos:column="24"/></name></name> <operator pos:line="205" pos:column="25">=<pos:position pos:line="205" pos:column="26"/></operator> <name pos:line="205" pos:column="27">portsock<pos:position pos:line="205" pos:column="35"/></name></expr>;<pos:position pos:line="205" pos:column="36"/></expr_stmt>
  
<cpp:else pos:line="207" pos:column="1">#<cpp:directive pos:line="207" pos:column="2">else<pos:position pos:line="207" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" format="doxygen" pos:line="208" pos:column="3">/******************************************************************
   *
   * Here's a piece of IPv4-specific code coming up
   *
   */</comment>
  <decl_stmt><decl><type><name><name pos:line="213" pos:column="3">struct<pos:position pos:line="213" pos:column="9"/></name> <name pos:line="213" pos:column="10">sockaddr_in<pos:position pos:line="213" pos:column="21"/></name></name></type> <name pos:line="213" pos:column="22">sa<pos:position pos:line="213" pos:column="24"/></name></decl>;<pos:position pos:line="213" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="214" pos:column="3">struct<pos:position pos:line="214" pos:column="9"/></name> <name pos:line="214" pos:column="10">Curl_dns_entry<pos:position pos:line="214" pos:column="24"/></name></name> <modifier pos:line="214" pos:column="25">*<pos:position pos:line="214" pos:column="26"/></modifier></type><name pos:line="214" pos:column="26">h<pos:position pos:line="214" pos:column="27"/></name><init pos:line="214" pos:column="27">=<expr><name pos:line="214" pos:column="28">NULL<pos:position pos:line="214" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="214" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="215" pos:column="3">unsigned<pos:position pos:line="215" pos:column="11"/></name> <name pos:line="215" pos:column="12">short<pos:position pos:line="215" pos:column="17"/></name></type> <name pos:line="215" pos:column="18">porttouse<pos:position pos:line="215" pos:column="27"/></name></decl>;<pos:position pos:line="215" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="216" pos:column="3">char<pos:position pos:line="216" pos:column="7"/></name></type> <name><name pos:line="216" pos:column="8">myhost<pos:position pos:line="216" pos:column="14"/></name><index pos:line="216" pos:column="14">[<expr><literal type="number" pos:line="216" pos:column="15">256<pos:position pos:line="216" pos:column="18"/></literal></expr>]<pos:position pos:line="216" pos:column="19"/></index></name> <init pos:line="216" pos:column="20">= <expr><literal type="string" pos:line="216" pos:column="22">""<pos:position pos:line="216" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="216" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="217" pos:column="3">bool<pos:position pos:line="217" pos:column="7"/></name></type> <name pos:line="217" pos:column="8">sa_filled_in<pos:position pos:line="217" pos:column="20"/></name> <init pos:line="217" pos:column="21">= <expr><name pos:line="217" pos:column="23">FALSE<pos:position pos:line="217" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="217" pos:column="29"/></decl_stmt>

  <if pos:line="219" pos:column="3">if<condition pos:line="219" pos:column="5">(<expr><name><name pos:line="219" pos:column="6">data<pos:position pos:line="219" pos:column="10"/></name><operator pos:line="219" pos:column="10">-&gt;<pos:position pos:line="219" pos:column="15"/></operator><name pos:line="219" pos:column="12">set<pos:position pos:line="219" pos:column="15"/></name><operator pos:line="219" pos:column="15">.<pos:position pos:line="219" pos:column="16"/></operator><name pos:line="219" pos:column="16">ftpport<pos:position pos:line="219" pos:column="23"/></name></name></expr>)<pos:position pos:line="219" pos:column="24"/></condition><then pos:line="219" pos:column="24"> <block pos:line="219" pos:column="25">{
    <if pos:line="220" pos:column="5">if<condition pos:line="220" pos:column="7">(<expr><call><name pos:line="220" pos:column="8">Curl_if2ip<pos:position pos:line="220" pos:column="18"/></name><argument_list pos:line="220" pos:column="18">(<argument><expr><name><name pos:line="220" pos:column="19">data<pos:position pos:line="220" pos:column="23"/></name><operator pos:line="220" pos:column="23">-&gt;<pos:position pos:line="220" pos:column="28"/></operator><name pos:line="220" pos:column="25">set<pos:position pos:line="220" pos:column="28"/></name><operator pos:line="220" pos:column="28">.<pos:position pos:line="220" pos:column="29"/></operator><name pos:line="220" pos:column="29">ftpport<pos:position pos:line="220" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="38">myhost<pos:position pos:line="220" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="220" pos:column="46">sizeof<argument_list pos:line="220" pos:column="52">(<argument><expr><name pos:line="220" pos:column="53">myhost<pos:position pos:line="220" pos:column="59"/></name></expr></argument>)<pos:position pos:line="220" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="220" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="220" pos:column="62"/></condition><then pos:line="220" pos:column="62"> <block pos:line="220" pos:column="63">{
      <expr_stmt><expr><name pos:line="221" pos:column="7">h<pos:position pos:line="221" pos:column="8"/></name> <operator pos:line="221" pos:column="9">=<pos:position pos:line="221" pos:column="10"/></operator> <call><name pos:line="221" pos:column="11">Curl_resolv<pos:position pos:line="221" pos:column="22"/></name><argument_list pos:line="221" pos:column="22">(<argument><expr><name pos:line="221" pos:column="23">data<pos:position pos:line="221" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="29">myhost<pos:position pos:line="221" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="221" pos:column="37">0<pos:position pos:line="221" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="221" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="222" pos:column="6"/></block></then>
    <else pos:line="223" pos:column="5">else <block pos:line="223" pos:column="10">{
      <decl_stmt><decl><type><name pos:line="224" pos:column="7">int<pos:position pos:line="224" pos:column="10"/></name></type> <name pos:line="224" pos:column="11">len<pos:position pos:line="224" pos:column="14"/></name> <init pos:line="224" pos:column="15">= <expr><call><name pos:line="224" pos:column="17">strlen<pos:position pos:line="224" pos:column="23"/></name><argument_list pos:line="224" pos:column="23">(<argument><expr><name><name pos:line="224" pos:column="24">data<pos:position pos:line="224" pos:column="28"/></name><operator pos:line="224" pos:column="28">-&gt;<pos:position pos:line="224" pos:column="33"/></operator><name pos:line="224" pos:column="30">set<pos:position pos:line="224" pos:column="33"/></name><operator pos:line="224" pos:column="33">.<pos:position pos:line="224" pos:column="34"/></operator><name pos:line="224" pos:column="34">ftpport<pos:position pos:line="224" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="224" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="224" pos:column="43"/></decl_stmt>
      <if pos:line="225" pos:column="7">if<condition pos:line="225" pos:column="9">(<expr><name pos:line="225" pos:column="10">len<pos:position pos:line="225" pos:column="13"/></name><operator pos:line="225" pos:column="13">&gt;<pos:position pos:line="225" pos:column="17"/></operator><literal type="number" pos:line="225" pos:column="14">1<pos:position pos:line="225" pos:column="15"/></literal></expr>)<pos:position pos:line="225" pos:column="16"/></condition><then pos:line="225" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><name pos:line="226" pos:column="9">h<pos:position pos:line="226" pos:column="10"/></name> <operator pos:line="226" pos:column="11">=<pos:position pos:line="226" pos:column="12"/></operator> <call><name pos:line="226" pos:column="13">Curl_resolv<pos:position pos:line="226" pos:column="24"/></name><argument_list pos:line="226" pos:column="24">(<argument><expr><name pos:line="226" pos:column="25">data<pos:position pos:line="226" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="226" pos:column="31">data<pos:position pos:line="226" pos:column="35"/></name><operator pos:line="226" pos:column="35">-&gt;<pos:position pos:line="226" pos:column="40"/></operator><name pos:line="226" pos:column="37">set<pos:position pos:line="226" pos:column="40"/></name><operator pos:line="226" pos:column="40">.<pos:position pos:line="226" pos:column="41"/></operator><name pos:line="226" pos:column="41">ftpport<pos:position pos:line="226" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="226" pos:column="50">0<pos:position pos:line="226" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="226" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="53"/></expr_stmt></block></then></if>
      <if pos:line="227" pos:column="7">if<condition pos:line="227" pos:column="9">(<expr><name pos:line="227" pos:column="10">h<pos:position pos:line="227" pos:column="11"/></name></expr>)<pos:position pos:line="227" pos:column="12"/></condition><then pos:line="227" pos:column="12">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="228" pos:column="9">strcpy<pos:position pos:line="228" pos:column="15"/></name><argument_list pos:line="228" pos:column="15">(<argument><expr><name pos:line="228" pos:column="16">myhost<pos:position pos:line="228" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="228" pos:column="24">data<pos:position pos:line="228" pos:column="28"/></name><operator pos:line="228" pos:column="28">-&gt;<pos:position pos:line="228" pos:column="33"/></operator><name pos:line="228" pos:column="30">set<pos:position pos:line="228" pos:column="33"/></name><operator pos:line="228" pos:column="33">.<pos:position pos:line="228" pos:column="34"/></operator><name pos:line="228" pos:column="34">ftpport<pos:position pos:line="228" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="228" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="43"/></expr_stmt></block></then></if> <comment type="block" pos:line="228" pos:column="44">/* buffer overflow risk */</comment>
    }<pos:position pos:line="229" pos:column="6"/></block></else></if>
  }<pos:position pos:line="230" pos:column="4"/></block></then></if>
  <if pos:line="231" pos:column="3">if<condition pos:line="231" pos:column="5">(<expr><operator pos:line="231" pos:column="6">!<pos:position pos:line="231" pos:column="7"/></operator> <operator pos:line="231" pos:column="8">*<pos:position pos:line="231" pos:column="9"/></operator><name pos:line="231" pos:column="9">myhost<pos:position pos:line="231" pos:column="15"/></name></expr>)<pos:position pos:line="231" pos:column="16"/></condition><then pos:line="231" pos:column="16"> <block pos:line="231" pos:column="17">{
    <comment type="block" pos:line="232" pos:column="5">/* pick a suitable default here */</comment>

    <decl_stmt><decl><type><name pos:line="234" pos:column="5">socklen_t<pos:position pos:line="234" pos:column="14"/></name></type> <name pos:line="234" pos:column="15">sslen<pos:position pos:line="234" pos:column="20"/></name></decl>;<pos:position pos:line="234" pos:column="21"/></decl_stmt>
    
    <expr_stmt><expr><name pos:line="236" pos:column="5">sslen<pos:position pos:line="236" pos:column="10"/></name> <operator pos:line="236" pos:column="11">=<pos:position pos:line="236" pos:column="12"/></operator> <sizeof pos:line="236" pos:column="13">sizeof<argument_list pos:line="236" pos:column="19">(<argument><expr><name pos:line="236" pos:column="20">sa<pos:position pos:line="236" pos:column="22"/></name></expr></argument>)<pos:position pos:line="236" pos:column="23"/></argument_list></sizeof></expr>;<pos:position pos:line="236" pos:column="24"/></expr_stmt>
    <if pos:line="237" pos:column="5">if <condition pos:line="237" pos:column="8">(<expr><call><name pos:line="237" pos:column="9">getsockname<pos:position pos:line="237" pos:column="20"/></name><argument_list pos:line="237" pos:column="20">(<argument><expr><name><name pos:line="237" pos:column="21">conn<pos:position pos:line="237" pos:column="25"/></name><operator pos:line="237" pos:column="25">-&gt;<pos:position pos:line="237" pos:column="30"/></operator><name pos:line="237" pos:column="27">firstsocket<pos:position pos:line="237" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="237" pos:column="40">(<pos:position pos:line="237" pos:column="41"/></operator>struct <name pos:line="237" pos:column="48">sockaddr<pos:position pos:line="237" pos:column="56"/></name> <operator pos:line="237" pos:column="57">*<pos:position pos:line="237" pos:column="58"/></operator><operator pos:line="237" pos:column="58">)<pos:position pos:line="237" pos:column="59"/></operator><operator pos:line="237" pos:column="59">&amp;<pos:position pos:line="237" pos:column="64"/></operator><name pos:line="237" pos:column="60">sa<pos:position pos:line="237" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="237" pos:column="64">&amp;<pos:position pos:line="237" pos:column="69"/></operator><name pos:line="237" pos:column="65">sslen<pos:position pos:line="237" pos:column="70"/></name></expr></argument>)<pos:position pos:line="237" pos:column="71"/></argument_list></call> <operator pos:line="237" pos:column="72">&lt;<pos:position pos:line="237" pos:column="76"/></operator> <literal type="number" pos:line="237" pos:column="74">0<pos:position pos:line="237" pos:column="75"/></literal></expr>)<pos:position pos:line="237" pos:column="76"/></condition><then pos:line="237" pos:column="76"> <block pos:line="237" pos:column="77">{
      <expr_stmt><expr><call><name pos:line="238" pos:column="7">failf<pos:position pos:line="238" pos:column="12"/></name><argument_list pos:line="238" pos:column="12">(<argument><expr><name pos:line="238" pos:column="13">data<pos:position pos:line="238" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="238" pos:column="19">"getsockname() failed"<pos:position pos:line="238" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="238" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="43"/></expr_stmt>
      <return pos:line="239" pos:column="7">return <expr><name pos:line="239" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="239" pos:column="35"/></name></expr>;<pos:position pos:line="239" pos:column="36"/></return>
    }<pos:position pos:line="240" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="242" pos:column="5">sa_filled_in<pos:position pos:line="242" pos:column="17"/></name> <operator pos:line="242" pos:column="18">=<pos:position pos:line="242" pos:column="19"/></operator> <name pos:line="242" pos:column="20">TRUE<pos:position pos:line="242" pos:column="24"/></name></expr>;<pos:position pos:line="242" pos:column="25"/></expr_stmt> <comment type="block" pos:line="242" pos:column="26">/* the sa struct is filled in */</comment>
  }<pos:position pos:line="243" pos:column="4"/></block></then></if>

  <if pos:line="245" pos:column="3">if<condition pos:line="245" pos:column="5">(<expr><name pos:line="245" pos:column="6">h<pos:position pos:line="245" pos:column="7"/></name></expr>)<pos:position pos:line="245" pos:column="8"/></condition><then pos:line="245" pos:column="8">
    <comment type="block" pos:line="246" pos:column="5">/* when we return from here, we can forget about this */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="247" pos:column="5">Curl_resolv_unlock<pos:position pos:line="247" pos:column="23"/></name><argument_list pos:line="247" pos:column="23">(<argument><expr><name pos:line="247" pos:column="24">data<pos:position pos:line="247" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="247" pos:column="30">h<pos:position pos:line="247" pos:column="31"/></name></expr></argument>)<pos:position pos:line="247" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="33"/></expr_stmt></block></then></if>

  <if pos:line="249" pos:column="3">if <condition pos:line="249" pos:column="6">( <expr><name pos:line="249" pos:column="8">h<pos:position pos:line="249" pos:column="9"/></name> <operator pos:line="249" pos:column="10">||<pos:position pos:line="249" pos:column="12"/></operator> <name pos:line="249" pos:column="13">sa_filled_in<pos:position pos:line="249" pos:column="25"/></name></expr>)<pos:position pos:line="249" pos:column="26"/></condition><then pos:line="249" pos:column="26"> <block pos:line="249" pos:column="27">{
    <if pos:line="250" pos:column="5">if<condition pos:line="250" pos:column="7">( <expr><operator pos:line="250" pos:column="9">(<pos:position pos:line="250" pos:column="10"/></operator><name pos:line="250" pos:column="10">portsock<pos:position pos:line="250" pos:column="18"/></name> <operator pos:line="250" pos:column="19">=<pos:position pos:line="250" pos:column="20"/></operator> <call><name pos:line="250" pos:column="21">socket<pos:position pos:line="250" pos:column="27"/></name><argument_list pos:line="250" pos:column="27">(<argument><expr><name pos:line="250" pos:column="28">AF_INET<pos:position pos:line="250" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="37">SOCK_STREAM<pos:position pos:line="250" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="250" pos:column="50">0<pos:position pos:line="250" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="250" pos:column="52"/></argument_list></call><operator pos:line="250" pos:column="52">)<pos:position pos:line="250" pos:column="53"/></operator> <operator pos:line="250" pos:column="54">&gt;=<pos:position pos:line="250" pos:column="59"/></operator> <literal type="number" pos:line="250" pos:column="57">0<pos:position pos:line="250" pos:column="58"/></literal></expr> )<pos:position pos:line="250" pos:column="60"/></condition><then pos:line="250" pos:column="60"> <block pos:line="250" pos:column="61">{
      <decl_stmt><decl><type><name pos:line="251" pos:column="7">int<pos:position pos:line="251" pos:column="10"/></name></type> <name pos:line="251" pos:column="11">size<pos:position pos:line="251" pos:column="15"/></name></decl>;<pos:position pos:line="251" pos:column="16"/></decl_stmt>
      
      <comment type="block" pos:line="253" pos:column="7">/* we set the secondary socket variable to this for now, it
         is only so that the cleanup function will close it in case
         we fail before the true secondary stuff is made */</comment>
      <expr_stmt><expr><name><name pos:line="256" pos:column="7">conn<pos:position pos:line="256" pos:column="11"/></name><operator pos:line="256" pos:column="11">-&gt;<pos:position pos:line="256" pos:column="16"/></operator><name pos:line="256" pos:column="13">secondarysocket<pos:position pos:line="256" pos:column="28"/></name></name> <operator pos:line="256" pos:column="29">=<pos:position pos:line="256" pos:column="30"/></operator> <name pos:line="256" pos:column="31">portsock<pos:position pos:line="256" pos:column="39"/></name></expr>;<pos:position pos:line="256" pos:column="40"/></expr_stmt>

      <if pos:line="258" pos:column="7">if<condition pos:line="258" pos:column="9">(<expr><operator pos:line="258" pos:column="10">!<pos:position pos:line="258" pos:column="11"/></operator><name pos:line="258" pos:column="11">sa_filled_in<pos:position pos:line="258" pos:column="23"/></name></expr>)<pos:position pos:line="258" pos:column="24"/></condition><then pos:line="258" pos:column="24"> <block pos:line="258" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="259" pos:column="9">memset<pos:position pos:line="259" pos:column="15"/></name><argument_list pos:line="259" pos:column="15">(<argument><expr><operator pos:line="259" pos:column="16">(<pos:position pos:line="259" pos:column="17"/></operator><name pos:line="259" pos:column="17">char<pos:position pos:line="259" pos:column="21"/></name> <operator pos:line="259" pos:column="22">*<pos:position pos:line="259" pos:column="23"/></operator><operator pos:line="259" pos:column="23">)<pos:position pos:line="259" pos:column="24"/></operator><operator pos:line="259" pos:column="24">&amp;<pos:position pos:line="259" pos:column="29"/></operator><name pos:line="259" pos:column="25">sa<pos:position pos:line="259" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="259" pos:column="29">0<pos:position pos:line="259" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="259" pos:column="32">sizeof<argument_list pos:line="259" pos:column="38">(<argument><expr><name pos:line="259" pos:column="39">sa<pos:position pos:line="259" pos:column="41"/></name></expr></argument>)<pos:position pos:line="259" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="259" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="260" pos:column="9">memcpy<pos:position pos:line="260" pos:column="15"/></name><argument_list pos:line="260" pos:column="15">(<argument><expr><operator pos:line="260" pos:column="16">(<pos:position pos:line="260" pos:column="17"/></operator><name pos:line="260" pos:column="17">char<pos:position pos:line="260" pos:column="21"/></name> <operator pos:line="260" pos:column="22">*<pos:position pos:line="260" pos:column="23"/></operator><operator pos:line="260" pos:column="23">)<pos:position pos:line="260" pos:column="24"/></operator><operator pos:line="260" pos:column="24">&amp;<pos:position pos:line="260" pos:column="29"/></operator><name><name pos:line="260" pos:column="25">sa<pos:position pos:line="260" pos:column="27"/></name><operator pos:line="260" pos:column="27">.<pos:position pos:line="260" pos:column="28"/></operator><name pos:line="260" pos:column="28">sin_addr<pos:position pos:line="260" pos:column="36"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="261" pos:column="16">h<pos:position pos:line="261" pos:column="17"/></name><operator pos:line="261" pos:column="17">-&gt;<pos:position pos:line="261" pos:column="22"/></operator><name pos:line="261" pos:column="19">addr<pos:position pos:line="261" pos:column="23"/></name><operator pos:line="261" pos:column="23">-&gt;<pos:position pos:line="261" pos:column="28"/></operator><name pos:line="261" pos:column="25">h_addr<pos:position pos:line="261" pos:column="31"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="262" pos:column="16">h<pos:position pos:line="262" pos:column="17"/></name><operator pos:line="262" pos:column="17">-&gt;<pos:position pos:line="262" pos:column="22"/></operator><name pos:line="262" pos:column="19">addr<pos:position pos:line="262" pos:column="23"/></name><operator pos:line="262" pos:column="23">-&gt;<pos:position pos:line="262" pos:column="28"/></operator><name pos:line="262" pos:column="25">h_length<pos:position pos:line="262" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="262" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="263" pos:column="9">sa<pos:position pos:line="263" pos:column="11"/></name><operator pos:line="263" pos:column="11">.<pos:position pos:line="263" pos:column="12"/></operator><name pos:line="263" pos:column="12">sin_family<pos:position pos:line="263" pos:column="22"/></name></name> <operator pos:line="263" pos:column="23">=<pos:position pos:line="263" pos:column="24"/></operator> <name pos:line="263" pos:column="25">AF_INET<pos:position pos:line="263" pos:column="32"/></name></expr>;<pos:position pos:line="263" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="264" pos:column="9">sa<pos:position pos:line="264" pos:column="11"/></name><operator pos:line="264" pos:column="11">.<pos:position pos:line="264" pos:column="12"/></operator><name pos:line="264" pos:column="12">sin_addr<pos:position pos:line="264" pos:column="20"/></name><operator pos:line="264" pos:column="20">.<pos:position pos:line="264" pos:column="21"/></operator><name pos:line="264" pos:column="21">s_addr<pos:position pos:line="264" pos:column="27"/></name></name> <operator pos:line="264" pos:column="28">=<pos:position pos:line="264" pos:column="29"/></operator> <name pos:line="264" pos:column="30">INADDR_ANY<pos:position pos:line="264" pos:column="40"/></name></expr>;<pos:position pos:line="264" pos:column="41"/></expr_stmt>
      }<pos:position pos:line="265" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="267" pos:column="7">sa<pos:position pos:line="267" pos:column="9"/></name><operator pos:line="267" pos:column="9">.<pos:position pos:line="267" pos:column="10"/></operator><name pos:line="267" pos:column="10">sin_port<pos:position pos:line="267" pos:column="18"/></name></name> <operator pos:line="267" pos:column="19">=<pos:position pos:line="267" pos:column="20"/></operator> <literal type="number" pos:line="267" pos:column="21">0<pos:position pos:line="267" pos:column="22"/></literal></expr>;<pos:position pos:line="267" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name pos:line="268" pos:column="7">size<pos:position pos:line="268" pos:column="11"/></name> <operator pos:line="268" pos:column="12">=<pos:position pos:line="268" pos:column="13"/></operator> <sizeof pos:line="268" pos:column="14">sizeof<argument_list pos:line="268" pos:column="20">(<argument><expr><name pos:line="268" pos:column="21">sa<pos:position pos:line="268" pos:column="23"/></name></expr></argument>)<pos:position pos:line="268" pos:column="24"/></argument_list></sizeof></expr>;<pos:position pos:line="268" pos:column="25"/></expr_stmt>
      
      <if pos:line="270" pos:column="7">if<condition pos:line="270" pos:column="9">(<expr><call><name pos:line="270" pos:column="10">bind<pos:position pos:line="270" pos:column="14"/></name><argument_list pos:line="270" pos:column="14">(<argument><expr><name pos:line="270" pos:column="15">portsock<pos:position pos:line="270" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="270" pos:column="25">(<pos:position pos:line="270" pos:column="26"/></operator>struct <name pos:line="270" pos:column="33">sockaddr<pos:position pos:line="270" pos:column="41"/></name> <operator pos:line="270" pos:column="42">*<pos:position pos:line="270" pos:column="43"/></operator><operator pos:line="270" pos:column="43">)<pos:position pos:line="270" pos:column="44"/></operator><operator pos:line="270" pos:column="44">&amp;<pos:position pos:line="270" pos:column="49"/></operator><name pos:line="270" pos:column="45">sa<pos:position pos:line="270" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="49">size<pos:position pos:line="270" pos:column="53"/></name></expr></argument>)<pos:position pos:line="270" pos:column="54"/></argument_list></call> <operator pos:line="270" pos:column="55">&gt;=<pos:position pos:line="270" pos:column="60"/></operator> <literal type="number" pos:line="270" pos:column="58">0<pos:position pos:line="270" pos:column="59"/></literal></expr>)<pos:position pos:line="270" pos:column="60"/></condition><then pos:line="270" pos:column="60"> <block pos:line="270" pos:column="61">{
        <comment type="block" pos:line="271" pos:column="9">/* we succeeded to bind */</comment>
        <decl_stmt><decl><type><name><name pos:line="272" pos:column="9">struct<pos:position pos:line="272" pos:column="15"/></name> <name pos:line="272" pos:column="16">sockaddr_in<pos:position pos:line="272" pos:column="27"/></name></name></type> <name pos:line="272" pos:column="28">add<pos:position pos:line="272" pos:column="31"/></name></decl>;<pos:position pos:line="272" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="273" pos:column="9">socklen_t<pos:position pos:line="273" pos:column="18"/></name></type> <name pos:line="273" pos:column="19">socksize<pos:position pos:line="273" pos:column="27"/></name> <init pos:line="273" pos:column="28">= <expr><sizeof pos:line="273" pos:column="30">sizeof<argument_list pos:line="273" pos:column="36">(<argument><expr><name pos:line="273" pos:column="37">add<pos:position pos:line="273" pos:column="40"/></name></expr></argument>)<pos:position pos:line="273" pos:column="41"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="273" pos:column="42"/></decl_stmt>

        <if pos:line="275" pos:column="9">if<condition pos:line="275" pos:column="11">(<expr><call><name pos:line="275" pos:column="12">getsockname<pos:position pos:line="275" pos:column="23"/></name><argument_list pos:line="275" pos:column="23">(<argument><expr><name pos:line="275" pos:column="24">portsock<pos:position pos:line="275" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="275" pos:column="34">(<pos:position pos:line="275" pos:column="35"/></operator>struct <name pos:line="275" pos:column="42">sockaddr<pos:position pos:line="275" pos:column="50"/></name> <operator pos:line="275" pos:column="51">*<pos:position pos:line="275" pos:column="52"/></operator><operator pos:line="275" pos:column="52">)<pos:position pos:line="275" pos:column="53"/></operator> <operator pos:line="275" pos:column="54">&amp;<pos:position pos:line="275" pos:column="59"/></operator><name pos:line="275" pos:column="55">add<pos:position pos:line="275" pos:column="58"/></name></expr></argument>,
                       <argument><expr><operator pos:line="276" pos:column="24">&amp;<pos:position pos:line="276" pos:column="29"/></operator><name pos:line="276" pos:column="25">socksize<pos:position pos:line="276" pos:column="33"/></name></expr></argument>)<pos:position pos:line="276" pos:column="34"/></argument_list></call><operator pos:line="276" pos:column="34">&lt;<pos:position pos:line="276" pos:column="38"/></operator><literal type="number" pos:line="276" pos:column="35">0<pos:position pos:line="276" pos:column="36"/></literal></expr>)<pos:position pos:line="276" pos:column="37"/></condition><then pos:line="276" pos:column="37"> <block pos:line="276" pos:column="38">{
          <expr_stmt><expr><call><name pos:line="277" pos:column="11">failf<pos:position pos:line="277" pos:column="16"/></name><argument_list pos:line="277" pos:column="16">(<argument><expr><name pos:line="277" pos:column="17">data<pos:position pos:line="277" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="277" pos:column="23">"getsockname() failed"<pos:position pos:line="277" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="277" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="277" pos:column="47"/></expr_stmt>
          <return pos:line="278" pos:column="11">return <expr><name pos:line="278" pos:column="18">CURLE_FTP_PORT_FAILED<pos:position pos:line="278" pos:column="39"/></name></expr>;<pos:position pos:line="278" pos:column="40"/></return>
        }<pos:position pos:line="279" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="280" pos:column="9">porttouse<pos:position pos:line="280" pos:column="18"/></name> <operator pos:line="280" pos:column="19">=<pos:position pos:line="280" pos:column="20"/></operator> <call><name pos:line="280" pos:column="21">ntohs<pos:position pos:line="280" pos:column="26"/></name><argument_list pos:line="280" pos:column="26">(<argument><expr><name><name pos:line="280" pos:column="27">add<pos:position pos:line="280" pos:column="30"/></name><operator pos:line="280" pos:column="30">.<pos:position pos:line="280" pos:column="31"/></operator><name pos:line="280" pos:column="31">sin_port<pos:position pos:line="280" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="280" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="41"/></expr_stmt>
        
        <if pos:line="282" pos:column="9">if <condition pos:line="282" pos:column="12">( <expr><call><name pos:line="282" pos:column="14">listen<pos:position pos:line="282" pos:column="20"/></name><argument_list pos:line="282" pos:column="20">(<argument><expr><name pos:line="282" pos:column="21">portsock<pos:position pos:line="282" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="282" pos:column="31">1<pos:position pos:line="282" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="282" pos:column="33"/></argument_list></call> <operator pos:line="282" pos:column="34">&lt;<pos:position pos:line="282" pos:column="38"/></operator> <literal type="number" pos:line="282" pos:column="36">0<pos:position pos:line="282" pos:column="37"/></literal></expr> )<pos:position pos:line="282" pos:column="39"/></condition><then pos:line="282" pos:column="39"> <block pos:line="282" pos:column="40">{
          <expr_stmt><expr><call><name pos:line="283" pos:column="11">failf<pos:position pos:line="283" pos:column="16"/></name><argument_list pos:line="283" pos:column="16">(<argument><expr><name pos:line="283" pos:column="17">data<pos:position pos:line="283" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="283" pos:column="23">"listen(2) failed on socket"<pos:position pos:line="283" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="283" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="53"/></expr_stmt>
          <return pos:line="284" pos:column="11">return <expr><name pos:line="284" pos:column="18">CURLE_FTP_PORT_FAILED<pos:position pos:line="284" pos:column="39"/></name></expr>;<pos:position pos:line="284" pos:column="40"/></return>
        }<pos:position pos:line="285" pos:column="10"/></block></then></if>
      }<pos:position pos:line="286" pos:column="8"/></block></then>
      <else pos:line="287" pos:column="7">else <block pos:line="287" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="288" pos:column="9">failf<pos:position pos:line="288" pos:column="14"/></name><argument_list pos:line="288" pos:column="14">(<argument><expr><name pos:line="288" pos:column="15">data<pos:position pos:line="288" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="288" pos:column="21">"bind(2) failed on socket"<pos:position pos:line="288" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="288" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="49"/></expr_stmt>
        <return pos:line="289" pos:column="9">return <expr><name pos:line="289" pos:column="16">CURLE_FTP_PORT_FAILED<pos:position pos:line="289" pos:column="37"/></name></expr>;<pos:position pos:line="289" pos:column="38"/></return>
      }<pos:position pos:line="290" pos:column="8"/></block></else></if>
    }<pos:position pos:line="291" pos:column="6"/></block></then>
    <else pos:line="292" pos:column="5">else <block pos:line="292" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="293" pos:column="7">failf<pos:position pos:line="293" pos:column="12"/></name><argument_list pos:line="293" pos:column="12">(<argument><expr><name pos:line="293" pos:column="13">data<pos:position pos:line="293" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="293" pos:column="19">"socket(2) failed (%s)"<pos:position pos:line="293" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="293" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="44"/></expr_stmt>
      <return pos:line="294" pos:column="7">return <expr><name pos:line="294" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="294" pos:column="35"/></name></expr>;<pos:position pos:line="294" pos:column="36"/></return>
    }<pos:position pos:line="295" pos:column="6"/></block></else></if>
  }<pos:position pos:line="296" pos:column="4"/></block></then>
  <else pos:line="297" pos:column="3">else <block pos:line="297" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="298" pos:column="5">failf<pos:position pos:line="298" pos:column="10"/></name><argument_list pos:line="298" pos:column="10">(<argument><expr><name pos:line="298" pos:column="11">data<pos:position pos:line="298" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="298" pos:column="17">"could't find my own IP address (%s)"<pos:position pos:line="298" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="298" pos:column="56">myhost<pos:position pos:line="298" pos:column="62"/></name></expr></argument>)<pos:position pos:line="298" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="298" pos:column="64"/></expr_stmt>
    <return pos:line="299" pos:column="5">return <expr><name pos:line="299" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="299" pos:column="33"/></name></expr>;<pos:position pos:line="299" pos:column="34"/></return>
  }<pos:position pos:line="300" pos:column="4"/></block></else></if>
  <block pos:line="301" pos:column="3">{
<cpp:ifdef pos:line="302" pos:column="1">#<cpp:directive pos:line="302" pos:column="2">ifdef<pos:position pos:line="302" pos:column="7"/></cpp:directive> <name pos:line="302" pos:column="8">HAVE_INET_NTOA_R<pos:position pos:line="302" pos:column="24"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="303" pos:column="5">char<pos:position pos:line="303" pos:column="9"/></name></type> <name><name pos:line="303" pos:column="10">ntoa_buf<pos:position pos:line="303" pos:column="18"/></name><index pos:line="303" pos:column="18">[<expr><literal type="number" pos:line="303" pos:column="19">64<pos:position pos:line="303" pos:column="21"/></literal></expr>]<pos:position pos:line="303" pos:column="22"/></index></name></decl>;<pos:position pos:line="303" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="304" pos:column="1">#<cpp:directive pos:line="304" pos:column="2">endif<pos:position pos:line="304" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name><name pos:line="305" pos:column="5">struct<pos:position pos:line="305" pos:column="11"/></name> <name pos:line="305" pos:column="12">in_addr<pos:position pos:line="305" pos:column="19"/></name></name></type> <name pos:line="305" pos:column="20">in<pos:position pos:line="305" pos:column="22"/></name></decl>;<pos:position pos:line="305" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="306" pos:column="5">unsigned<pos:position pos:line="306" pos:column="13"/></name> <name pos:line="306" pos:column="14">short<pos:position pos:line="306" pos:column="19"/></name></type> <name><name pos:line="306" pos:column="20">ip<pos:position pos:line="306" pos:column="22"/></name><index pos:line="306" pos:column="22">[<expr><literal type="number" pos:line="306" pos:column="23">5<pos:position pos:line="306" pos:column="24"/></literal></expr>]<pos:position pos:line="306" pos:column="25"/></index></name></decl>;<pos:position pos:line="306" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="307" pos:column="5">(<pos:position pos:line="307" pos:column="6"/></operator><name pos:line="307" pos:column="6">void<pos:position pos:line="307" pos:column="10"/></name><operator pos:line="307" pos:column="10">)<pos:position pos:line="307" pos:column="11"/></operator> <call><name pos:line="307" pos:column="12">memcpy<pos:position pos:line="307" pos:column="18"/></name><argument_list pos:line="307" pos:column="18">(<argument><expr><operator pos:line="307" pos:column="19">&amp;<pos:position pos:line="307" pos:column="24"/></operator><name><name pos:line="307" pos:column="20">in<pos:position pos:line="307" pos:column="22"/></name><operator pos:line="307" pos:column="22">.<pos:position pos:line="307" pos:column="23"/></operator><name pos:line="307" pos:column="23">s_addr<pos:position pos:line="307" pos:column="29"/></name></name></expr></argument>,
                  <argument><expr><ternary><condition><expr><name pos:line="308" pos:column="19">h<pos:position pos:line="308" pos:column="20"/></name></expr>?<pos:position pos:line="308" pos:column="21"/></condition><then><expr><operator pos:line="308" pos:column="21">*<pos:position pos:line="308" pos:column="22"/></operator><name><name pos:line="308" pos:column="22">h<pos:position pos:line="308" pos:column="23"/></name><operator pos:line="308" pos:column="23">-&gt;<pos:position pos:line="308" pos:column="28"/></operator><name pos:line="308" pos:column="25">addr<pos:position pos:line="308" pos:column="29"/></name><operator pos:line="308" pos:column="29">-&gt;<pos:position pos:line="308" pos:column="34"/></operator><name pos:line="308" pos:column="31">h_addr_list<pos:position pos:line="308" pos:column="42"/></name></name></expr></then><else pos:line="308" pos:column="42">:<expr><operator pos:line="308" pos:column="43">(<pos:position pos:line="308" pos:column="44"/></operator><name pos:line="308" pos:column="44">char<pos:position pos:line="308" pos:column="48"/></name> <operator pos:line="308" pos:column="49">*<pos:position pos:line="308" pos:column="50"/></operator><operator pos:line="308" pos:column="50">)<pos:position pos:line="308" pos:column="51"/></operator><operator pos:line="308" pos:column="51">&amp;<pos:position pos:line="308" pos:column="56"/></operator><name><name pos:line="308" pos:column="52">sa<pos:position pos:line="308" pos:column="54"/></name><operator pos:line="308" pos:column="54">.<pos:position pos:line="308" pos:column="55"/></operator><name pos:line="308" pos:column="55">sin_addr<pos:position pos:line="308" pos:column="63"/></name><operator pos:line="308" pos:column="63">.<pos:position pos:line="308" pos:column="64"/></operator><name pos:line="308" pos:column="64">s_addr<pos:position pos:line="308" pos:column="70"/></name></name></expr></else></ternary></expr></argument>,
                  <argument><expr><sizeof pos:line="309" pos:column="19">sizeof <argument_list pos:line="309" pos:column="26">(<argument><expr><name><name pos:line="309" pos:column="27">in<pos:position pos:line="309" pos:column="29"/></name><operator pos:line="309" pos:column="29">.<pos:position pos:line="309" pos:column="30"/></operator><name pos:line="309" pos:column="30">s_addr<pos:position pos:line="309" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="309" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="309" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="309" pos:column="39"/></expr_stmt>

<cpp:ifdef pos:line="311" pos:column="1">#<cpp:directive pos:line="311" pos:column="2">ifdef<pos:position pos:line="311" pos:column="7"/></cpp:directive> <name pos:line="311" pos:column="8">HAVE_INET_NTOA_R<pos:position pos:line="311" pos:column="24"/></name></cpp:ifdef>
    <comment type="block" pos:line="312" pos:column="5">/* ignore the return code from inet_ntoa_r() as it is int or
       char * depending on system */</comment>
    <expr_stmt><expr><call><name pos:line="314" pos:column="5">inet_ntoa_r<pos:position pos:line="314" pos:column="16"/></name><argument_list pos:line="314" pos:column="16">(<argument><expr><name pos:line="314" pos:column="17">in<pos:position pos:line="314" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="314" pos:column="21">ntoa_buf<pos:position pos:line="314" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="314" pos:column="31">sizeof<argument_list pos:line="314" pos:column="37">(<argument><expr><name pos:line="314" pos:column="38">ntoa_buf<pos:position pos:line="314" pos:column="46"/></name></expr></argument>)<pos:position pos:line="314" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="314" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="314" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="315" pos:column="5">sscanf<pos:position pos:line="315" pos:column="11"/></name><argument_list pos:line="315" pos:column="11">( <argument><expr><name pos:line="315" pos:column="13">ntoa_buf<pos:position pos:line="315" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="315" pos:column="23">"%hu.%hu.%hu.%hu"<pos:position pos:line="315" pos:column="40"/></literal></expr></argument>,
            <argument><expr><operator pos:line="316" pos:column="13">&amp;<pos:position pos:line="316" pos:column="18"/></operator><name><name pos:line="316" pos:column="14">ip<pos:position pos:line="316" pos:column="16"/></name><index pos:line="316" pos:column="16">[<expr><literal type="number" pos:line="316" pos:column="17">0<pos:position pos:line="316" pos:column="18"/></literal></expr>]<pos:position pos:line="316" pos:column="19"/></index></name></expr></argument>, <argument><expr><operator pos:line="316" pos:column="21">&amp;<pos:position pos:line="316" pos:column="26"/></operator><name><name pos:line="316" pos:column="22">ip<pos:position pos:line="316" pos:column="24"/></name><index pos:line="316" pos:column="24">[<expr><literal type="number" pos:line="316" pos:column="25">1<pos:position pos:line="316" pos:column="26"/></literal></expr>]<pos:position pos:line="316" pos:column="27"/></index></name></expr></argument>, <argument><expr><operator pos:line="316" pos:column="29">&amp;<pos:position pos:line="316" pos:column="34"/></operator><name><name pos:line="316" pos:column="30">ip<pos:position pos:line="316" pos:column="32"/></name><index pos:line="316" pos:column="32">[<expr><literal type="number" pos:line="316" pos:column="33">2<pos:position pos:line="316" pos:column="34"/></literal></expr>]<pos:position pos:line="316" pos:column="35"/></index></name></expr></argument>, <argument><expr><operator pos:line="316" pos:column="37">&amp;<pos:position pos:line="316" pos:column="42"/></operator><name><name pos:line="316" pos:column="38">ip<pos:position pos:line="316" pos:column="40"/></name><index pos:line="316" pos:column="40">[<expr><literal type="number" pos:line="316" pos:column="41">3<pos:position pos:line="316" pos:column="42"/></literal></expr>]<pos:position pos:line="316" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="316" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="316" pos:column="45"/></expr_stmt>
<cpp:else pos:line="317" pos:column="1">#<cpp:directive pos:line="317" pos:column="2">else<pos:position pos:line="317" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="318" pos:column="5">sscanf<pos:position pos:line="318" pos:column="11"/></name><argument_list pos:line="318" pos:column="11">( <argument><expr><call><name pos:line="318" pos:column="13">inet_ntoa<pos:position pos:line="318" pos:column="22"/></name><argument_list pos:line="318" pos:column="22">(<argument><expr><name pos:line="318" pos:column="23">in<pos:position pos:line="318" pos:column="25"/></name></expr></argument>)<pos:position pos:line="318" pos:column="26"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="318" pos:column="28">"%hu.%hu.%hu.%hu"<pos:position pos:line="318" pos:column="45"/></literal></expr></argument>,
            <argument><expr><operator pos:line="319" pos:column="13">&amp;<pos:position pos:line="319" pos:column="18"/></operator><name><name pos:line="319" pos:column="14">ip<pos:position pos:line="319" pos:column="16"/></name><index pos:line="319" pos:column="16">[<expr><literal type="number" pos:line="319" pos:column="17">0<pos:position pos:line="319" pos:column="18"/></literal></expr>]<pos:position pos:line="319" pos:column="19"/></index></name></expr></argument>, <argument><expr><operator pos:line="319" pos:column="21">&amp;<pos:position pos:line="319" pos:column="26"/></operator><name><name pos:line="319" pos:column="22">ip<pos:position pos:line="319" pos:column="24"/></name><index pos:line="319" pos:column="24">[<expr><literal type="number" pos:line="319" pos:column="25">1<pos:position pos:line="319" pos:column="26"/></literal></expr>]<pos:position pos:line="319" pos:column="27"/></index></name></expr></argument>, <argument><expr><operator pos:line="319" pos:column="29">&amp;<pos:position pos:line="319" pos:column="34"/></operator><name><name pos:line="319" pos:column="30">ip<pos:position pos:line="319" pos:column="32"/></name><index pos:line="319" pos:column="32">[<expr><literal type="number" pos:line="319" pos:column="33">2<pos:position pos:line="319" pos:column="34"/></literal></expr>]<pos:position pos:line="319" pos:column="35"/></index></name></expr></argument>, <argument><expr><operator pos:line="319" pos:column="37">&amp;<pos:position pos:line="319" pos:column="42"/></operator><name><name pos:line="319" pos:column="38">ip<pos:position pos:line="319" pos:column="40"/></name><index pos:line="319" pos:column="40">[<expr><literal type="number" pos:line="319" pos:column="41">3<pos:position pos:line="319" pos:column="42"/></literal></expr>]<pos:position pos:line="319" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="319" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="319" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="320" pos:column="1">#<cpp:directive pos:line="320" pos:column="2">endif<pos:position pos:line="320" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="321" pos:column="5">infof<pos:position pos:line="321" pos:column="10"/></name><argument_list pos:line="321" pos:column="10">(<argument><expr><name pos:line="321" pos:column="11">data<pos:position pos:line="321" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="321" pos:column="17">"Telling server to connect to %d.%d.%d.%d:%d\n"<pos:position pos:line="321" pos:column="64"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="322" pos:column="11">ip<pos:position pos:line="322" pos:column="13"/></name><index pos:line="322" pos:column="13">[<expr><literal type="number" pos:line="322" pos:column="14">0<pos:position pos:line="322" pos:column="15"/></literal></expr>]<pos:position pos:line="322" pos:column="16"/></index></name></expr></argument>, <argument><expr><name><name pos:line="322" pos:column="18">ip<pos:position pos:line="322" pos:column="20"/></name><index pos:line="322" pos:column="20">[<expr><literal type="number" pos:line="322" pos:column="21">1<pos:position pos:line="322" pos:column="22"/></literal></expr>]<pos:position pos:line="322" pos:column="23"/></index></name></expr></argument>, <argument><expr><name><name pos:line="322" pos:column="25">ip<pos:position pos:line="322" pos:column="27"/></name><index pos:line="322" pos:column="27">[<expr><literal type="number" pos:line="322" pos:column="28">2<pos:position pos:line="322" pos:column="29"/></literal></expr>]<pos:position pos:line="322" pos:column="30"/></index></name></expr></argument>, <argument><expr><name><name pos:line="322" pos:column="32">ip<pos:position pos:line="322" pos:column="34"/></name><index pos:line="322" pos:column="34">[<expr><literal type="number" pos:line="322" pos:column="35">3<pos:position pos:line="322" pos:column="36"/></literal></expr>]<pos:position pos:line="322" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="322" pos:column="39">porttouse<pos:position pos:line="322" pos:column="48"/></name></expr></argument>)<pos:position pos:line="322" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="322" pos:column="50"/></expr_stmt>
  
    <expr_stmt><expr><name pos:line="324" pos:column="5">result<pos:position pos:line="324" pos:column="11"/></name><operator pos:line="324" pos:column="11">=<pos:position pos:line="324" pos:column="12"/></operator><call><name pos:line="324" pos:column="12">Curl_ftpsendf<pos:position pos:line="324" pos:column="25"/></name><argument_list pos:line="324" pos:column="25">(<argument><expr><name pos:line="324" pos:column="26">conn<pos:position pos:line="324" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="324" pos:column="32">"PORT %d,%d,%d,%d,%d,%d"<pos:position pos:line="324" pos:column="56"/></literal></expr></argument>,
                         <argument><expr><name><name pos:line="325" pos:column="26">ip<pos:position pos:line="325" pos:column="28"/></name><index pos:line="325" pos:column="28">[<expr><literal type="number" pos:line="325" pos:column="29">0<pos:position pos:line="325" pos:column="30"/></literal></expr>]<pos:position pos:line="325" pos:column="31"/></index></name></expr></argument>, <argument><expr><name><name pos:line="325" pos:column="33">ip<pos:position pos:line="325" pos:column="35"/></name><index pos:line="325" pos:column="35">[<expr><literal type="number" pos:line="325" pos:column="36">1<pos:position pos:line="325" pos:column="37"/></literal></expr>]<pos:position pos:line="325" pos:column="38"/></index></name></expr></argument>, <argument><expr><name><name pos:line="325" pos:column="40">ip<pos:position pos:line="325" pos:column="42"/></name><index pos:line="325" pos:column="42">[<expr><literal type="number" pos:line="325" pos:column="43">2<pos:position pos:line="325" pos:column="44"/></literal></expr>]<pos:position pos:line="325" pos:column="45"/></index></name></expr></argument>, <argument><expr><name><name pos:line="325" pos:column="47">ip<pos:position pos:line="325" pos:column="49"/></name><index pos:line="325" pos:column="49">[<expr><literal type="number" pos:line="325" pos:column="50">3<pos:position pos:line="325" pos:column="51"/></literal></expr>]<pos:position pos:line="325" pos:column="52"/></index></name></expr></argument>,
                         <argument><expr><name pos:line="326" pos:column="26">porttouse<pos:position pos:line="326" pos:column="35"/></name> <operator pos:line="326" pos:column="36">&gt;&gt;<pos:position pos:line="326" pos:column="41"/></operator> <literal type="number" pos:line="326" pos:column="39">8<pos:position pos:line="326" pos:column="40"/></literal></expr></argument>,
                         <argument><expr><name pos:line="327" pos:column="26">porttouse<pos:position pos:line="327" pos:column="35"/></name> <operator pos:line="327" pos:column="36">&amp;<pos:position pos:line="327" pos:column="41"/></operator> <literal type="number" pos:line="327" pos:column="38">255<pos:position pos:line="327" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="327" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="327" pos:column="43"/></expr_stmt>
    <if pos:line="328" pos:column="5">if<condition pos:line="328" pos:column="7">(<expr><name pos:line="328" pos:column="8">result<pos:position pos:line="328" pos:column="14"/></name></expr>)<pos:position pos:line="328" pos:column="15"/></condition><then pos:line="328" pos:column="15">
      <block type="pseudo"><return pos:line="329" pos:column="7">return <expr><name pos:line="329" pos:column="14">result<pos:position pos:line="329" pos:column="20"/></name></expr>;<pos:position pos:line="329" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="330" pos:column="4"/></block>

  <expr_stmt><expr><name pos:line="332" pos:column="3">result<pos:position pos:line="332" pos:column="9"/></name> <operator pos:line="332" pos:column="10">=<pos:position pos:line="332" pos:column="11"/></operator> <call><name pos:line="332" pos:column="12">Curl_GetFTPResponse<pos:position pos:line="332" pos:column="31"/></name><argument_list pos:line="332" pos:column="31">(<argument><expr><operator pos:line="332" pos:column="32">&amp;<pos:position pos:line="332" pos:column="37"/></operator><name pos:line="332" pos:column="33">nread<pos:position pos:line="332" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="332" pos:column="40">conn<pos:position pos:line="332" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="332" pos:column="46">&amp;<pos:position pos:line="332" pos:column="51"/></operator><name pos:line="332" pos:column="47">ftpcode<pos:position pos:line="332" pos:column="54"/></name></expr></argument>)<pos:position pos:line="332" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="332" pos:column="56"/></expr_stmt>
  <if pos:line="333" pos:column="3">if<condition pos:line="333" pos:column="5">(<expr><name pos:line="333" pos:column="6">result<pos:position pos:line="333" pos:column="12"/></name></expr>)<pos:position pos:line="333" pos:column="13"/></condition><then pos:line="333" pos:column="13">
    <block type="pseudo"><return pos:line="334" pos:column="5">return <expr><name pos:line="334" pos:column="12">result<pos:position pos:line="334" pos:column="18"/></name></expr>;<pos:position pos:line="334" pos:column="19"/></return></block></then></if>

  <if pos:line="336" pos:column="3">if<condition pos:line="336" pos:column="5">(<expr><name pos:line="336" pos:column="6">ftpcode<pos:position pos:line="336" pos:column="13"/></name> <operator pos:line="336" pos:column="14">!=<pos:position pos:line="336" pos:column="16"/></operator> <literal type="number" pos:line="336" pos:column="17">200<pos:position pos:line="336" pos:column="20"/></literal></expr>)<pos:position pos:line="336" pos:column="21"/></condition><then pos:line="336" pos:column="21"> <block pos:line="336" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="337" pos:column="5">failf<pos:position pos:line="337" pos:column="10"/></name><argument_list pos:line="337" pos:column="10">(<argument><expr><name pos:line="337" pos:column="11">data<pos:position pos:line="337" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="337" pos:column="17">"Server does not grok PORT, try without it!"<pos:position pos:line="337" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="337" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="63"/></expr_stmt>
    <return pos:line="338" pos:column="5">return <expr><name pos:line="338" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="338" pos:column="33"/></name></expr>;<pos:position pos:line="338" pos:column="34"/></return>
  }<pos:position pos:line="339" pos:column="4"/></block></then></if>
<cpp:endif pos:line="340" pos:column="1">#<cpp:directive pos:line="340" pos:column="2">endif<pos:position pos:line="340" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="340" pos:column="8">/* end of ipv4-specific code */</comment>

  <return pos:line="342" pos:column="3">return <expr><name pos:line="342" pos:column="10">CURLE_OK<pos:position pos:line="342" pos:column="18"/></name></expr>;<pos:position pos:line="342" pos:column="19"/></return>
}<pos:position pos:line="343" pos:column="2"/></block></function></unit>
