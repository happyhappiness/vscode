<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1531_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">tftp_setup_connection<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">connectdata<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type> <name pos:line="1" pos:column="60">conn<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_easy<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name><name pos:line="3" pos:column="28">conn<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">data<pos:position pos:line="3" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">type<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">command<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="7" pos:column="3">conn<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">-&gt;<pos:position pos:line="7" pos:column="12"/></operator><name pos:line="7" pos:column="9">socktype<pos:position pos:line="7" pos:column="17"/></name></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">SOCK_DGRAM<pos:position pos:line="7" pos:column="30"/></name></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>   <comment type="block" pos:line="7" pos:column="34">/* UDP datagram based */</comment>

  <comment type="block" pos:line="9" pos:column="3">/* TFTP URLs support an extension like ";mode=&lt;typecode&gt;" that
   * we'll try to get now! */</comment>
  <expr_stmt><expr><name pos:line="11" pos:column="3">type<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <call><name pos:line="11" pos:column="10">strstr<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name><name pos:line="11" pos:column="17">data<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">-&gt;<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="23">state<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">.<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">path<pos:position pos:line="11" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">";mode="<pos:position pos:line="11" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><operator pos:line="13" pos:column="6">!<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">type<pos:position pos:line="13" pos:column="11"/></name></expr>)<pos:position pos:line="13" pos:column="12"/></condition><then pos:line="13" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="5">type<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">strstr<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name><name pos:line="14" pos:column="19">conn<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">-&gt;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="25">host<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">.<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="30">rawalloc<pos:position pos:line="14" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="40">";mode="<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt></block></then></if>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">type<pos:position pos:line="16" pos:column="10"/></name></expr>)<pos:position pos:line="16" pos:column="11"/></condition><then pos:line="16" pos:column="11"> <block pos:line="16" pos:column="12">{
    <expr_stmt><expr><operator pos:line="17" pos:column="5">*<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">type<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <literal type="number" pos:line="17" pos:column="13">0<pos:position pos:line="17" pos:column="14"/></literal></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>                   <comment type="block" pos:line="17" pos:column="34">/* it was in the middle of the hostname */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">command<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">Curl_raw_toupper<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name><name pos:line="18" pos:column="32">type<pos:position pos:line="18" pos:column="36"/></name><index pos:line="18" pos:column="36">[<expr><literal type="number" pos:line="18" pos:column="37">6<pos:position pos:line="18" pos:column="38"/></literal></expr>]<pos:position pos:line="18" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>

    <switch pos:line="20" pos:column="5">switch<condition pos:line="20" pos:column="11">(<expr><name pos:line="20" pos:column="12">command<pos:position pos:line="20" pos:column="19"/></name></expr>)<pos:position pos:line="20" pos:column="20"/></condition> <block pos:line="20" pos:column="21">{
    <case pos:line="21" pos:column="5">case <expr><literal type="char" pos:line="21" pos:column="10">'A'<pos:position pos:line="21" pos:column="13"/></literal></expr>:<pos:position pos:line="21" pos:column="14"/></case> <comment type="block" pos:line="21" pos:column="15">/* ASCII mode */</comment>
    <case pos:line="22" pos:column="5">case <expr><literal type="char" pos:line="22" pos:column="10">'N'<pos:position pos:line="22" pos:column="13"/></literal></expr>:<pos:position pos:line="22" pos:column="14"/></case> <comment type="block" pos:line="22" pos:column="15">/* NETASCII mode */</comment>
      <expr_stmt><expr><name><name pos:line="23" pos:column="7">data<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">set<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">.<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">prefer_ascii<pos:position pos:line="23" pos:column="29"/></name></name> <operator pos:line="23" pos:column="30">=<pos:position pos:line="23" pos:column="31"/></operator> <name pos:line="23" pos:column="32">TRUE<pos:position pos:line="23" pos:column="36"/></name></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
      <break pos:line="24" pos:column="7">break;<pos:position pos:line="24" pos:column="13"/></break>

    <case pos:line="26" pos:column="5">case <expr><literal type="char" pos:line="26" pos:column="10">'O'<pos:position pos:line="26" pos:column="13"/></literal></expr>:<pos:position pos:line="26" pos:column="14"/></case> <comment type="block" pos:line="26" pos:column="15">/* octet mode */</comment>
    <case pos:line="27" pos:column="5">case <expr><literal type="char" pos:line="27" pos:column="10">'I'<pos:position pos:line="27" pos:column="13"/></literal></expr>:<pos:position pos:line="27" pos:column="14"/></case> <comment type="block" pos:line="27" pos:column="15">/* binary mode */</comment>
    <default pos:line="28" pos:column="5">default:<pos:position pos:line="28" pos:column="13"/></default>
      <comment type="block" pos:line="29" pos:column="7">/* switch off ASCII */</comment>
      <expr_stmt><expr><name><name pos:line="30" pos:column="7">data<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">set<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">.<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">prefer_ascii<pos:position pos:line="30" pos:column="29"/></name></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <name pos:line="30" pos:column="32">FALSE<pos:position pos:line="30" pos:column="37"/></name></expr>;<pos:position pos:line="30" pos:column="38"/></expr_stmt>
      <break pos:line="31" pos:column="7">break;<pos:position pos:line="31" pos:column="13"/></break>
    }<pos:position pos:line="32" pos:column="6"/></block></switch>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">CURLE_OK<pos:position pos:line="35" pos:column="18"/></name></expr>;<pos:position pos:line="35" pos:column="19"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
