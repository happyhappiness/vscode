<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1616_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">multi_do<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">connp<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">bool<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">done<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">CURLE_OK<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">connectdata<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">conn<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><operator pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="31">connp<pos:position pos:line="4" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>

  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><name><name pos:line="7" pos:column="6">conn<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">handler<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">do_it<pos:position pos:line="7" pos:column="26"/></name></name></expr>)<pos:position pos:line="7" pos:column="27"/></condition><then pos:line="7" pos:column="27"> <block pos:line="7" pos:column="28">{
    <comment type="block" pos:line="8" pos:column="5">/* generic protocol-specific function pointer set in curl_connect() */</comment>
    <expr_stmt><expr><name pos:line="9" pos:column="5">result<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name><name pos:line="9" pos:column="14">conn<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">-&gt;<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="20">handler<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">-&gt;<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="29">do_it<pos:position pos:line="9" pos:column="34"/></name></name><argument_list pos:line="9" pos:column="34">(<argument><expr><name pos:line="9" pos:column="35">conn<pos:position pos:line="9" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="41">done<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* This was formerly done in transfer.c, but we better do it here */</comment>
    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">(<expr><operator pos:line="12" pos:column="8">(<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">CURLE_SEND_ERROR<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">==<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">result<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">)<pos:position pos:line="12" pos:column="36"/></operator> <operator pos:line="12" pos:column="37">&amp;&amp;<pos:position pos:line="12" pos:column="47"/></operator> <name><name pos:line="12" pos:column="40">conn<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">-&gt;<pos:position pos:line="12" pos:column="49"/></operator><name pos:line="12" pos:column="46">bits<pos:position pos:line="12" pos:column="50"/></name><operator pos:line="12" pos:column="50">.<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="51">reuse<pos:position pos:line="12" pos:column="56"/></name></name></expr>)<pos:position pos:line="12" pos:column="57"/></condition><then pos:line="12" pos:column="57"> <block pos:line="12" pos:column="58">{
      <comment type="block" pos:line="13" pos:column="7">/*
       * If the connection is using an easy handle, call reconnect
       * to re-establish the connection.  Otherwise, let the multi logic
       * figure out how to re-establish the connection.
       */</comment>
      <if pos:line="18" pos:column="7">if<condition pos:line="18" pos:column="9">(<expr><operator pos:line="18" pos:column="10">!<pos:position pos:line="18" pos:column="11"/></operator><name><name pos:line="18" pos:column="11">data<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">multi<pos:position pos:line="18" pos:column="22"/></name></name></expr>)<pos:position pos:line="18" pos:column="23"/></condition><then pos:line="18" pos:column="23"> <block pos:line="18" pos:column="24">{
        <expr_stmt><expr><name pos:line="19" pos:column="9">result<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">multi_reconnect_request<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">connp<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>

        <if pos:line="21" pos:column="9">if<condition pos:line="21" pos:column="11">(<expr><operator pos:line="21" pos:column="12">!<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="13">result<pos:position pos:line="21" pos:column="19"/></name></expr>)<pos:position pos:line="21" pos:column="20"/></condition><then pos:line="21" pos:column="20"> <block pos:line="21" pos:column="21">{
          <comment type="block" pos:line="22" pos:column="11">/* ... finally back to actually retry the DO phase */</comment>
          <expr_stmt><expr><name pos:line="23" pos:column="11">conn<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <operator pos:line="23" pos:column="18">*<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">connp<pos:position pos:line="23" pos:column="24"/></name></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt> <comment type="block" pos:line="23" pos:column="26">/* re-assign conn since multi_reconnect_request
                            creates a new connection */</comment>
          <expr_stmt><expr><name pos:line="25" pos:column="11">result<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <call><name><name pos:line="25" pos:column="20">conn<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">-&gt;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="26">handler<pos:position pos:line="25" pos:column="33"/></name><operator pos:line="25" pos:column="33">-&gt;<pos:position pos:line="25" pos:column="38"/></operator><name pos:line="25" pos:column="35">do_it<pos:position pos:line="25" pos:column="40"/></name></name><argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">conn<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">done<pos:position pos:line="25" pos:column="51"/></name></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
      }<pos:position pos:line="27" pos:column="8"/></block></then>
      <else pos:line="28" pos:column="7">else
        <block type="pseudo"><return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">result<pos:position pos:line="29" pos:column="22"/></name></expr>;<pos:position pos:line="29" pos:column="23"/></return></block></else></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <if pos:line="32" pos:column="5">if<condition pos:line="32" pos:column="7">(<expr><operator pos:line="32" pos:column="8">!<pos:position pos:line="32" pos:column="9"/></operator><name pos:line="32" pos:column="9">result<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">&amp;&amp;<pos:position pos:line="32" pos:column="26"/></operator> <operator pos:line="32" pos:column="19">*<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="20">done<pos:position pos:line="32" pos:column="24"/></name></expr>)<pos:position pos:line="32" pos:column="25"/></condition><then pos:line="32" pos:column="25">
      <comment type="block" pos:line="33" pos:column="7">/* do_complete must be called after the protocol-specific DO function */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="7">do_complete<pos:position pos:line="34" pos:column="18"/></name><argument_list pos:line="34" pos:column="18">(<argument><expr><name pos:line="34" pos:column="19">conn<pos:position pos:line="34" pos:column="23"/></name></expr></argument>)<pos:position pos:line="34" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt></block></then></if>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>
  <return pos:line="36" pos:column="3">return <expr><name pos:line="36" pos:column="10">result<pos:position pos:line="36" pos:column="16"/></name></expr>;<pos:position pos:line="36" pos:column="17"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
