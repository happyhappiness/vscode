<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_769_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">LLVMFuzzerTestOneInput<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">uint8_t<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">data<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">size<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">rc<pos:position pos:line="3" pos:column="9"/></name> <init pos:line="3" pos:column="10">= <expr><literal type="number" pos:line="3" pos:column="12">0<pos:position pos:line="3" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">tlv_rc<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">FUZZ_DATA<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fuzz<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">TLV<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">tlv<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Have to set all fields to zero before getting to the terminate function */</comment>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memset<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><operator pos:line="9" pos:column="10">&amp;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="11">fuzz<pos:position pos:line="9" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="17">0<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="20">sizeof<argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">FUZZ_DATA<pos:position pos:line="9" pos:column="36"/></name></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">size<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">&lt;<pos:position pos:line="11" pos:column="15"/></operator> <sizeof pos:line="11" pos:column="13">sizeof<argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">TLV_RAW<pos:position pos:line="11" pos:column="27"/></name></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></sizeof></expr>)<pos:position pos:line="11" pos:column="29"/></condition><then pos:line="11" pos:column="29"> <block pos:line="11" pos:column="30">{
    <comment type="block" pos:line="12" pos:column="5">/* Not enough data for a single TLV - don't continue */</comment>
    <goto pos:line="13" pos:column="5">goto <name pos:line="13" pos:column="10">EXIT_LABEL<pos:position pos:line="13" pos:column="20"/></name>;<pos:position pos:line="13" pos:column="21"/></goto>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="16" pos:column="3">/* Try to initialize the fuzz data */</comment>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">FTRY<pos:position pos:line="17" pos:column="7"/></name><argument_list pos:line="17" pos:column="7">(<argument><expr><call><name pos:line="17" pos:column="8">fuzz_initialize_fuzz_data<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><operator pos:line="17" pos:column="34">&amp;<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="35">fuzz<pos:position pos:line="17" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="41">data<pos:position pos:line="17" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="47">size<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt>

  <for pos:line="19" pos:column="3">for<control pos:line="19" pos:column="6">(<init><expr><name pos:line="19" pos:column="7">tlv_rc<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">fuzz_get_first_tlv<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><operator pos:line="19" pos:column="35">&amp;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="36">fuzz<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="42">&amp;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="43">tlv<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></init>
      <condition><expr><name pos:line="20" pos:column="7">tlv_rc<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">==<pos:position pos:line="20" pos:column="16"/></operator> <literal type="number" pos:line="20" pos:column="17">0<pos:position pos:line="20" pos:column="18"/></literal></expr>;<pos:position pos:line="20" pos:column="19"/></condition>
      <incr><expr><name pos:line="21" pos:column="7">tlv_rc<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">fuzz_get_next_tlv<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><operator pos:line="21" pos:column="34">&amp;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="35">fuzz<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="41">&amp;<pos:position pos:line="21" pos:column="46"/></operator><name pos:line="21" pos:column="42">tlv<pos:position pos:line="21" pos:column="45"/></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr></incr>)<pos:position pos:line="21" pos:column="47"/></control> <block pos:line="21" pos:column="48">{

    <comment type="block" pos:line="23" pos:column="5">/* Have the TLV in hand. Parse the TLV. */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">rc<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <call><name pos:line="24" pos:column="10">fuzz_parse_tlv<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><operator pos:line="24" pos:column="25">&amp;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="26">fuzz<pos:position pos:line="24" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="32">&amp;<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="33">tlv<pos:position pos:line="24" pos:column="36"/></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt>

    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><name pos:line="26" pos:column="8">rc<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">!=<pos:position pos:line="26" pos:column="13"/></operator> <literal type="number" pos:line="26" pos:column="14">0<pos:position pos:line="26" pos:column="15"/></literal></expr>)<pos:position pos:line="26" pos:column="16"/></condition><then pos:line="26" pos:column="16"> <block pos:line="26" pos:column="17">{
      <comment type="block" pos:line="27" pos:column="7">/* Failed to parse the TLV. Can't continue. */</comment>
      <goto pos:line="28" pos:column="7">goto <name pos:line="28" pos:column="12">EXIT_LABEL<pos:position pos:line="28" pos:column="22"/></name>;<pos:position pos:line="28" pos:column="23"/></goto>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
  }<pos:position pos:line="30" pos:column="4"/></block></for>

  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><name pos:line="32" pos:column="6">tlv_rc<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">!=<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">TLV_RC_NO_MORE_TLVS<pos:position pos:line="32" pos:column="35"/></name></expr>)<pos:position pos:line="32" pos:column="36"/></condition><then pos:line="32" pos:column="36"> <block pos:line="32" pos:column="37">{
    <comment type="block" pos:line="33" pos:column="5">/* A TLV call failed. Can't continue. */</comment>
    <goto pos:line="34" pos:column="5">goto <name pos:line="34" pos:column="10">EXIT_LABEL<pos:position pos:line="34" pos:column="20"/></name>;<pos:position pos:line="34" pos:column="21"/></goto>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="37" pos:column="3">/* Do the CURL stuff! */</comment>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><name><name pos:line="38" pos:column="6">fuzz<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">.<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="11">header_list<pos:position pos:line="38" pos:column="22"/></name></name> <operator pos:line="38" pos:column="23">!=<pos:position pos:line="38" pos:column="25"/></operator> <name pos:line="38" pos:column="26">NULL<pos:position pos:line="38" pos:column="30"/></name></expr>)<pos:position pos:line="38" pos:column="31"/></condition><then pos:line="38" pos:column="31"> <block pos:line="38" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">curl_easy_setopt<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><name><name pos:line="39" pos:column="22">fuzz<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">.<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="27">easy<pos:position pos:line="39" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="33">CURLOPT_HTTPHEADER<pos:position pos:line="39" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="53">fuzz<pos:position pos:line="39" pos:column="57"/></name><operator pos:line="39" pos:column="57">.<pos:position pos:line="39" pos:column="58"/></operator><name pos:line="39" pos:column="58">header_list<pos:position pos:line="39" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="71"/></expr_stmt>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">(<expr><name><name pos:line="42" pos:column="6">fuzz<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">.<pos:position pos:line="42" pos:column="11"/></operator><name pos:line="42" pos:column="11">mail_recipients_list<pos:position pos:line="42" pos:column="31"/></name></name> <operator pos:line="42" pos:column="32">!=<pos:position pos:line="42" pos:column="34"/></operator> <name pos:line="42" pos:column="35">NULL<pos:position pos:line="42" pos:column="39"/></name></expr>)<pos:position pos:line="42" pos:column="40"/></condition><then pos:line="42" pos:column="40"> <block pos:line="42" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">curl_easy_setopt<pos:position pos:line="43" pos:column="21"/></name><argument_list pos:line="43" pos:column="21">(<argument><expr><name><name pos:line="43" pos:column="22">fuzz<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">.<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="27">easy<pos:position pos:line="43" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="33">CURLOPT_MAIL_RCPT<pos:position pos:line="43" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="52">fuzz<pos:position pos:line="43" pos:column="56"/></name><operator pos:line="43" pos:column="56">.<pos:position pos:line="43" pos:column="57"/></operator><name pos:line="43" pos:column="57">mail_recipients_list<pos:position pos:line="43" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="79"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="46" pos:column="3">curl_easy_perform<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><name><name pos:line="46" pos:column="21">fuzz<pos:position pos:line="46" pos:column="25"/></name><operator pos:line="46" pos:column="25">.<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="26">easy<pos:position pos:line="46" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="32"/></expr_stmt>

<label><name pos:line="48" pos:column="1">EXIT_LABEL<pos:position pos:line="48" pos:column="11"/></name>:<pos:position pos:line="48" pos:column="12"/></label>

  <expr_stmt><expr><call><name pos:line="50" pos:column="3">fuzz_terminate_fuzz_data<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><operator pos:line="50" pos:column="28">&amp;<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="29">fuzz<pos:position pos:line="50" pos:column="33"/></name></expr></argument>)<pos:position pos:line="50" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="35"/></expr_stmt>

  <comment type="block" pos:line="52" pos:column="3">/* This function must always return 0. Non-zero codes are reserved. */</comment>
  <return pos:line="53" pos:column="3">return <expr><literal type="number" pos:line="53" pos:column="10">0<pos:position pos:line="53" pos:column="11"/></literal></expr>;<pos:position pos:line="53" pos:column="12"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
