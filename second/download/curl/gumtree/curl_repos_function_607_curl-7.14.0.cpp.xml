<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_607_curl-7.14.0.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">Cookie<pos:position pos:line="1" pos:column="14"/></name></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type>
<name pos:line="2" pos:column="1">Curl_cookie_add<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">SessionHandle<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">data<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>,
                <comment type="block" pos:line="3" pos:column="17">/* The 'data' pointer here may be NULL at times, and thus
                   must only be used very carefully for things that can deal
                   with data being NULL. Such as infof() and similar */</comment>

                <parameter><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">CookieInfo<pos:position pos:line="7" pos:column="34"/></name></name> <modifier pos:line="7" pos:column="35">*<pos:position pos:line="7" pos:column="36"/></modifier></type><name pos:line="7" pos:column="36">c<pos:position pos:line="7" pos:column="37"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="8" pos:column="17">bool<pos:position pos:line="8" pos:column="21"/></name></type> <name pos:line="8" pos:column="22">httpheader<pos:position pos:line="8" pos:column="32"/></name></decl></parameter>, <comment type="block" pos:line="8" pos:column="34">/* TRUE if HTTP header-style line */</comment>
                <parameter><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">lineptr<pos:position pos:line="9" pos:column="30"/></name></decl></parameter>,   <comment type="block" pos:line="9" pos:column="34">/* first character of the line */</comment>
                <parameter><decl><type><name pos:line="10" pos:column="17">char<pos:position pos:line="10" pos:column="21"/></name> <modifier pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></modifier></type><name pos:line="10" pos:column="23">domain<pos:position pos:line="10" pos:column="29"/></name></decl></parameter>,    <comment type="block" pos:line="10" pos:column="34">/* default domain */</comment>
                <parameter><decl><type><name pos:line="11" pos:column="17">char<pos:position pos:line="11" pos:column="21"/></name> <modifier pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></modifier></type><name pos:line="11" pos:column="23">path<pos:position pos:line="11" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="11" pos:column="28"/></parameter_list>      <comment type="block" pos:line="11" pos:column="34">/* full path used when this cookie is set,
                                    used to get default path for the cookie
                                    unless set */</comment>
<block pos:line="14" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">Cookie<pos:position pos:line="15" pos:column="16"/></name></name> <modifier pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></modifier></type><name pos:line="15" pos:column="18">clist<pos:position pos:line="15" pos:column="23"/></name></decl>;<pos:position pos:line="15" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">char<pos:position pos:line="16" pos:column="7"/></name> <modifier pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></modifier></type><name pos:line="16" pos:column="9">what<pos:position pos:line="16" pos:column="13"/></name></decl>;<pos:position pos:line="16" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name></type> <name><name pos:line="17" pos:column="8">name<pos:position pos:line="17" pos:column="12"/></name><index pos:line="17" pos:column="12">[<expr><name pos:line="17" pos:column="13">MAX_NAME<pos:position pos:line="17" pos:column="21"/></name></expr>]<pos:position pos:line="17" pos:column="22"/></index></name></decl>;<pos:position pos:line="17" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name> <modifier pos:line="18" pos:column="8">*<pos:position pos:line="18" pos:column="9"/></modifier></type><name pos:line="18" pos:column="9">ptr<pos:position pos:line="18" pos:column="12"/></name></decl>;<pos:position pos:line="18" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">char<pos:position pos:line="19" pos:column="7"/></name> <modifier pos:line="19" pos:column="8">*<pos:position pos:line="19" pos:column="9"/></modifier></type><name pos:line="19" pos:column="9">semiptr<pos:position pos:line="19" pos:column="16"/></name></decl>;<pos:position pos:line="19" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="20" pos:column="3">struct<pos:position pos:line="20" pos:column="9"/></name> <name pos:line="20" pos:column="10">Cookie<pos:position pos:line="20" pos:column="16"/></name></name> <modifier pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></modifier></type><name pos:line="20" pos:column="18">co<pos:position pos:line="20" pos:column="20"/></name></decl>;<pos:position pos:line="20" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="21" pos:column="3">struct<pos:position pos:line="21" pos:column="9"/></name> <name pos:line="21" pos:column="10">Cookie<pos:position pos:line="21" pos:column="16"/></name></name> <modifier pos:line="21" pos:column="17">*<pos:position pos:line="21" pos:column="18"/></modifier></type><name pos:line="21" pos:column="18">lastc<pos:position pos:line="21" pos:column="23"/></name><init pos:line="21" pos:column="23">=<expr><name pos:line="21" pos:column="24">NULL<pos:position pos:line="21" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">time_t<pos:position pos:line="22" pos:column="9"/></name></type> <name pos:line="22" pos:column="10">now<pos:position pos:line="22" pos:column="13"/></name> <init pos:line="22" pos:column="14">= <expr><call><name pos:line="22" pos:column="16">time<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">NULL<pos:position pos:line="22" pos:column="25"/></name></expr></argument>)<pos:position pos:line="22" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">bool<pos:position pos:line="23" pos:column="7"/></name></type> <name pos:line="23" pos:column="8">replace_old<pos:position pos:line="23" pos:column="19"/></name> <init pos:line="23" pos:column="20">= <expr><name pos:line="23" pos:column="22">FALSE<pos:position pos:line="23" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">bool<pos:position pos:line="24" pos:column="7"/></name></type> <name pos:line="24" pos:column="8">badcookie<pos:position pos:line="24" pos:column="17"/></name> <init pos:line="24" pos:column="18">= <expr><name pos:line="24" pos:column="20">FALSE<pos:position pos:line="24" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="26"/></decl_stmt> <comment type="block" pos:line="24" pos:column="27">/* cookies are good by default. mmmmm yummy */</comment>

  <comment type="block" pos:line="26" pos:column="3">/* First, alloc and init a new struct for it */</comment>
  <expr_stmt><expr><name pos:line="27" pos:column="3">co<pos:position pos:line="27" pos:column="5"/></name> <operator pos:line="27" pos:column="6">=<pos:position pos:line="27" pos:column="7"/></operator> <operator pos:line="27" pos:column="8">(<pos:position pos:line="27" pos:column="9"/></operator>struct <name pos:line="27" pos:column="16">Cookie<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">*<pos:position pos:line="27" pos:column="24"/></operator><operator pos:line="27" pos:column="24">)<pos:position pos:line="27" pos:column="25"/></operator><call><name pos:line="27" pos:column="25">calloc<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><sizeof pos:line="27" pos:column="32">sizeof<argument_list pos:line="27" pos:column="38">(<argument><expr pos:line="27" pos:column="39">struct <name pos:line="27" pos:column="46">Cookie<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="55">1<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">(<expr><operator pos:line="28" pos:column="6">!<pos:position pos:line="28" pos:column="7"/></operator><name pos:line="28" pos:column="7">co<pos:position pos:line="28" pos:column="9"/></name></expr>)<pos:position pos:line="28" pos:column="10"/></condition><then pos:line="28" pos:column="10">
    <block type="pseudo"><return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">NULL<pos:position pos:line="29" pos:column="16"/></name></expr>;<pos:position pos:line="29" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="29" pos:column="18">/* bail out if we're this low on memory */</comment>

  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name pos:line="31" pos:column="6">httpheader<pos:position pos:line="31" pos:column="16"/></name></expr>)<pos:position pos:line="31" pos:column="17"/></condition><then pos:line="31" pos:column="17"> <block pos:line="31" pos:column="18">{
    <comment type="block" pos:line="32" pos:column="5">/* This line was read off a HTTP-header */</comment>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">char<pos:position pos:line="33" pos:column="9"/></name> <modifier pos:line="33" pos:column="10">*<pos:position pos:line="33" pos:column="11"/></modifier></type><name pos:line="33" pos:column="11">sep<pos:position pos:line="33" pos:column="14"/></name></decl>;<pos:position pos:line="33" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><name pos:line="35" pos:column="5">what<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">malloc<pos:position pos:line="35" pos:column="18"/></name><argument_list pos:line="35" pos:column="18">(<argument><expr><name pos:line="35" pos:column="19">MAX_COOKIE_LINE<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><operator pos:line="36" pos:column="8">!<pos:position pos:line="36" pos:column="9"/></operator><name pos:line="36" pos:column="9">what<pos:position pos:line="36" pos:column="13"/></name></expr>)<pos:position pos:line="36" pos:column="14"/></condition><then pos:line="36" pos:column="14"> <block pos:line="36" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">free<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><name pos:line="37" pos:column="12">co<pos:position pos:line="37" pos:column="14"/></name></expr></argument>)<pos:position pos:line="37" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="16"/></expr_stmt>
      <return pos:line="38" pos:column="7">return <expr><name pos:line="38" pos:column="14">NULL<pos:position pos:line="38" pos:column="18"/></name></expr>;<pos:position pos:line="38" pos:column="19"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="41" pos:column="5">semiptr<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator><call><name pos:line="41" pos:column="13">strchr<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><name pos:line="41" pos:column="20">lineptr<pos:position pos:line="41" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="29">';'<pos:position pos:line="41" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt> <comment type="block" pos:line="41" pos:column="35">/* first, find a semicolon */</comment>

    <while pos:line="43" pos:column="5">while<condition pos:line="43" pos:column="10">(<expr><operator pos:line="43" pos:column="11">*<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="12">lineptr<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">&amp;&amp;<pos:position pos:line="43" pos:column="30"/></operator> <call><name pos:line="43" pos:column="23">my_isspace<pos:position pos:line="43" pos:column="33"/></name><argument_list pos:line="43" pos:column="33">(<argument><expr><operator pos:line="43" pos:column="34">*<pos:position pos:line="43" pos:column="35"/></operator><name pos:line="43" pos:column="35">lineptr<pos:position pos:line="43" pos:column="42"/></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="44"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="7">lineptr<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">++<pos:position pos:line="44" pos:column="16"/></operator></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt></block></while>

    <expr_stmt><expr><name pos:line="46" pos:column="5">ptr<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">=<pos:position pos:line="46" pos:column="10"/></operator> <name pos:line="46" pos:column="11">lineptr<pos:position pos:line="46" pos:column="18"/></name></expr>;<pos:position pos:line="46" pos:column="19"/></expr_stmt>
    <do pos:line="47" pos:column="5">do <block pos:line="47" pos:column="8">{
      <comment type="block" pos:line="48" pos:column="7">/* we have a &lt;what&gt;=&lt;this&gt; pair or a 'secure' word here */</comment>
      <expr_stmt><expr><name pos:line="49" pos:column="7">sep<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <call><name pos:line="49" pos:column="13">strchr<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">ptr<pos:position pos:line="49" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="49" pos:column="25">'='<pos:position pos:line="49" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
      <if pos:line="50" pos:column="7">if<condition pos:line="50" pos:column="9">(<expr><name pos:line="50" pos:column="10">sep<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">&amp;&amp;<pos:position pos:line="50" pos:column="24"/></operator> <operator pos:line="50" pos:column="17">(<pos:position pos:line="50" pos:column="18"/></operator><operator pos:line="50" pos:column="18">!<pos:position pos:line="50" pos:column="19"/></operator><name pos:line="50" pos:column="19">semiptr<pos:position pos:line="50" pos:column="26"/></name> <operator pos:line="50" pos:column="27">||<pos:position pos:line="50" pos:column="29"/></operator> <operator pos:line="50" pos:column="30">(<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="31">semiptr<pos:position pos:line="50" pos:column="38"/></name><operator pos:line="50" pos:column="38">&gt;<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="39">sep<pos:position pos:line="50" pos:column="42"/></name><operator pos:line="50" pos:column="42">)<pos:position pos:line="50" pos:column="43"/></operator><operator pos:line="50" pos:column="43">)<pos:position pos:line="50" pos:column="44"/></operator></expr> )<pos:position pos:line="50" pos:column="46"/></condition><then pos:line="50" pos:column="46"> <block pos:line="50" pos:column="47">{
        <comment type="block" pos:line="51" pos:column="9">/*
         * There is a = sign and if there was a semicolon too, which make sure
         * that the semicolon comes _after_ the equal sign.
         */</comment>

        <expr_stmt><expr><name><name pos:line="56" pos:column="9">name<pos:position pos:line="56" pos:column="13"/></name><index pos:line="56" pos:column="13">[<expr><literal type="number" pos:line="56" pos:column="14">0<pos:position pos:line="56" pos:column="15"/></literal></expr>]<pos:position pos:line="56" pos:column="16"/></index></name><operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator><name><name pos:line="56" pos:column="17">what<pos:position pos:line="56" pos:column="21"/></name><index pos:line="56" pos:column="21">[<expr><literal type="number" pos:line="56" pos:column="22">0<pos:position pos:line="56" pos:column="23"/></literal></expr>]<pos:position pos:line="56" pos:column="24"/></index></name><operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator><literal type="number" pos:line="56" pos:column="25">0<pos:position pos:line="56" pos:column="26"/></literal></expr>;<pos:position pos:line="56" pos:column="27"/></expr_stmt> <comment type="block" pos:line="56" pos:column="28">/* init the buffers */</comment>
        <if pos:line="57" pos:column="9">if<condition pos:line="57" pos:column="11">(<expr><literal type="number" pos:line="57" pos:column="12">1<pos:position pos:line="57" pos:column="13"/></literal> <operator pos:line="57" pos:column="14">&lt;=<pos:position pos:line="57" pos:column="19"/></operator> <call><name pos:line="57" pos:column="17">sscanf<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><name pos:line="57" pos:column="24">ptr<pos:position pos:line="57" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="29">"%"<pos:position pos:line="57" pos:column="32"/></literal> <name pos:line="57" pos:column="33">MAX_NAME_TXT<pos:position pos:line="57" pos:column="45"/></name> <literal type="string" pos:line="57" pos:column="46">"[^;=]=%"<pos:position pos:line="57" pos:column="55"/></literal>
                       <name pos:line="58" pos:column="24">MAX_COOKIE_LINE_TXT<pos:position pos:line="58" pos:column="43"/></name> <literal type="string" pos:line="58" pos:column="44">"[^;\r\n]"<pos:position pos:line="58" pos:column="54"/></literal></expr></argument>,
                       <argument><expr><name pos:line="59" pos:column="24">name<pos:position pos:line="59" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="30">what<pos:position pos:line="59" pos:column="34"/></name></expr></argument>)<pos:position pos:line="59" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="36"/></condition><then pos:line="59" pos:column="36"> <block pos:line="59" pos:column="37">{
          <comment type="block" pos:line="60" pos:column="11">/* this is a &lt;name&gt;=&lt;what&gt; pair */</comment>

          <decl_stmt><decl><type><name pos:line="62" pos:column="11">char<pos:position pos:line="62" pos:column="15"/></name> <modifier pos:line="62" pos:column="16">*<pos:position pos:line="62" pos:column="17"/></modifier></type><name pos:line="62" pos:column="17">whatptr<pos:position pos:line="62" pos:column="24"/></name></decl>;<pos:position pos:line="62" pos:column="25"/></decl_stmt>

          <comment type="block" pos:line="64" pos:column="11">/* Strip off trailing whitespace from the 'what' */</comment>
          <decl_stmt><decl><type><name pos:line="65" pos:column="11">size_t<pos:position pos:line="65" pos:column="17"/></name></type> <name pos:line="65" pos:column="18">len<pos:position pos:line="65" pos:column="21"/></name><init pos:line="65" pos:column="21">=<expr><call><name pos:line="65" pos:column="22">strlen<pos:position pos:line="65" pos:column="28"/></name><argument_list pos:line="65" pos:column="28">(<argument><expr><name pos:line="65" pos:column="29">what<pos:position pos:line="65" pos:column="33"/></name></expr></argument>)<pos:position pos:line="65" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="65" pos:column="35"/></decl_stmt>
          <while pos:line="66" pos:column="11">while<condition pos:line="66" pos:column="16">(<expr><name pos:line="66" pos:column="17">len<pos:position pos:line="66" pos:column="20"/></name> <operator pos:line="66" pos:column="21">&amp;&amp;<pos:position pos:line="66" pos:column="31"/></operator> <call><name pos:line="66" pos:column="24">my_isspace<pos:position pos:line="66" pos:column="34"/></name><argument_list pos:line="66" pos:column="34">(<argument><expr><name><name pos:line="66" pos:column="35">what<pos:position pos:line="66" pos:column="39"/></name><index pos:line="66" pos:column="39">[<expr><name pos:line="66" pos:column="40">len<pos:position pos:line="66" pos:column="43"/></name><operator pos:line="66" pos:column="43">-<pos:position pos:line="66" pos:column="44"/></operator><literal type="number" pos:line="66" pos:column="44">1<pos:position pos:line="66" pos:column="45"/></literal></expr>]<pos:position pos:line="66" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="66" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="48"/></condition> <block pos:line="66" pos:column="49">{
            <expr_stmt><expr><name><name pos:line="67" pos:column="13">what<pos:position pos:line="67" pos:column="17"/></name><index pos:line="67" pos:column="17">[<expr><name pos:line="67" pos:column="18">len<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">-<pos:position pos:line="67" pos:column="22"/></operator><literal type="number" pos:line="67" pos:column="22">1<pos:position pos:line="67" pos:column="23"/></literal></expr>]<pos:position pos:line="67" pos:column="24"/></index></name><operator pos:line="67" pos:column="24">=<pos:position pos:line="67" pos:column="25"/></operator><literal type="number" pos:line="67" pos:column="25">0<pos:position pos:line="67" pos:column="26"/></literal></expr>;<pos:position pos:line="67" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name pos:line="68" pos:column="13">len<pos:position pos:line="68" pos:column="16"/></name><operator pos:line="68" pos:column="16">--<pos:position pos:line="68" pos:column="18"/></operator></expr>;<pos:position pos:line="68" pos:column="19"/></expr_stmt>
          }<pos:position pos:line="69" pos:column="12"/></block></while>

          <comment type="block" pos:line="71" pos:column="11">/* Skip leading whitespace from the 'what' */</comment>
          <expr_stmt><expr><name pos:line="72" pos:column="11">whatptr<pos:position pos:line="72" pos:column="18"/></name><operator pos:line="72" pos:column="18">=<pos:position pos:line="72" pos:column="19"/></operator><name pos:line="72" pos:column="19">what<pos:position pos:line="72" pos:column="23"/></name></expr>;<pos:position pos:line="72" pos:column="24"/></expr_stmt>
          <while pos:line="73" pos:column="11">while<condition pos:line="73" pos:column="16">(<expr><call><name pos:line="73" pos:column="17">my_isspace<pos:position pos:line="73" pos:column="27"/></name><argument_list pos:line="73" pos:column="27">(<argument><expr><operator pos:line="73" pos:column="28">*<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="29">whatptr<pos:position pos:line="73" pos:column="36"/></name></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="38"/></condition> <block pos:line="73" pos:column="39">{
            <expr_stmt><expr><name pos:line="74" pos:column="13">whatptr<pos:position pos:line="74" pos:column="20"/></name><operator pos:line="74" pos:column="20">++<pos:position pos:line="74" pos:column="22"/></operator></expr>;<pos:position pos:line="74" pos:column="23"/></expr_stmt>
          }<pos:position pos:line="75" pos:column="12"/></block></while>

          <if pos:line="77" pos:column="11">if<condition pos:line="77" pos:column="13">(<expr><call><name pos:line="77" pos:column="14">strequal<pos:position pos:line="77" pos:column="22"/></name><argument_list pos:line="77" pos:column="22">(<argument><expr><literal type="string" pos:line="77" pos:column="23">"path"<pos:position pos:line="77" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="31">name<pos:position pos:line="77" pos:column="35"/></name></expr></argument>)<pos:position pos:line="77" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="37"/></condition><then pos:line="77" pos:column="37"> <block pos:line="77" pos:column="38">{
            <expr_stmt><expr><name><name pos:line="78" pos:column="13">co<pos:position pos:line="78" pos:column="15"/></name><operator pos:line="78" pos:column="15">-&gt;<pos:position pos:line="78" pos:column="20"/></operator><name pos:line="78" pos:column="17">path<pos:position pos:line="78" pos:column="21"/></name></name><operator pos:line="78" pos:column="21">=<pos:position pos:line="78" pos:column="22"/></operator><call><name pos:line="78" pos:column="22">strdup<pos:position pos:line="78" pos:column="28"/></name><argument_list pos:line="78" pos:column="28">(<argument><expr><name pos:line="78" pos:column="29">whatptr<pos:position pos:line="78" pos:column="36"/></name></expr></argument>)<pos:position pos:line="78" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="38"/></expr_stmt>
            <if pos:line="79" pos:column="13">if<condition pos:line="79" pos:column="15">(<expr><operator pos:line="79" pos:column="16">!<pos:position pos:line="79" pos:column="17"/></operator><name><name pos:line="79" pos:column="17">co<pos:position pos:line="79" pos:column="19"/></name><operator pos:line="79" pos:column="19">-&gt;<pos:position pos:line="79" pos:column="24"/></operator><name pos:line="79" pos:column="21">path<pos:position pos:line="79" pos:column="25"/></name></name></expr>)<pos:position pos:line="79" pos:column="26"/></condition><then pos:line="79" pos:column="26"> <block pos:line="79" pos:column="27">{
              <expr_stmt><expr><name pos:line="80" pos:column="15">badcookie<pos:position pos:line="80" pos:column="24"/></name> <operator pos:line="80" pos:column="25">=<pos:position pos:line="80" pos:column="26"/></operator> <name pos:line="80" pos:column="27">TRUE<pos:position pos:line="80" pos:column="31"/></name></expr>;<pos:position pos:line="80" pos:column="32"/></expr_stmt> <comment type="block" pos:line="80" pos:column="33">/* out of memory bad */</comment>
              <break pos:line="81" pos:column="15">break;<pos:position pos:line="81" pos:column="21"/></break>
            }<pos:position pos:line="82" pos:column="14"/></block></then></if>
          }<pos:position pos:line="83" pos:column="12"/></block></then>
          <elseif pos:line="84" pos:column="11">else <if pos:line="84" pos:column="16">if<condition pos:line="84" pos:column="18">(<expr><call><name pos:line="84" pos:column="19">strequal<pos:position pos:line="84" pos:column="27"/></name><argument_list pos:line="84" pos:column="27">(<argument><expr><literal type="string" pos:line="84" pos:column="28">"domain"<pos:position pos:line="84" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="38">name<pos:position pos:line="84" pos:column="42"/></name></expr></argument>)<pos:position pos:line="84" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="44"/></condition><then pos:line="84" pos:column="44"> <block pos:line="84" pos:column="45">{
            <comment type="block" pos:line="85" pos:column="13">/* note that this name may or may not have a preceeding dot, but
               we don't care about that, we treat the names the same anyway */</comment>

            <decl_stmt><decl><type><specifier pos:line="88" pos:column="13">const<pos:position pos:line="88" pos:column="18"/></specifier> <name pos:line="88" pos:column="19">char<pos:position pos:line="88" pos:column="23"/></name> <modifier pos:line="88" pos:column="24">*<pos:position pos:line="88" pos:column="25"/></modifier></type><name pos:line="88" pos:column="25">domptr<pos:position pos:line="88" pos:column="31"/></name><init pos:line="88" pos:column="31">=<expr><name pos:line="88" pos:column="32">whatptr<pos:position pos:line="88" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="88" pos:column="40"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">int<pos:position pos:line="89" pos:column="16"/></name></type> <name pos:line="89" pos:column="17">dotcount<pos:position pos:line="89" pos:column="25"/></name><init pos:line="89" pos:column="25">=<expr><literal type="number" pos:line="89" pos:column="26">1<pos:position pos:line="89" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="89" pos:column="28"/></decl_stmt>

            <comment type="block" pos:line="91" pos:column="13">/* Count the dots, we need to make sure that there are enough
               of them. */</comment>

            <if pos:line="94" pos:column="13">if<condition pos:line="94" pos:column="15">(<expr><literal type="char" pos:line="94" pos:column="16">'.'<pos:position pos:line="94" pos:column="19"/></literal> <operator pos:line="94" pos:column="20">==<pos:position pos:line="94" pos:column="22"/></operator> <name><name pos:line="94" pos:column="23">whatptr<pos:position pos:line="94" pos:column="30"/></name><index pos:line="94" pos:column="30">[<expr><literal type="number" pos:line="94" pos:column="31">0<pos:position pos:line="94" pos:column="32"/></literal></expr>]<pos:position pos:line="94" pos:column="33"/></index></name></expr>)<pos:position pos:line="94" pos:column="34"/></condition><then pos:line="94" pos:column="34">
              <comment type="block" pos:line="95" pos:column="15">/* don't count the initial dot, assume it */</comment>
              <block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="15">domptr<pos:position pos:line="96" pos:column="21"/></name><operator pos:line="96" pos:column="21">++<pos:position pos:line="96" pos:column="23"/></operator></expr>;<pos:position pos:line="96" pos:column="24"/></expr_stmt></block></then></if>

            <do pos:line="98" pos:column="13">do <block pos:line="98" pos:column="16">{
              <expr_stmt><expr><name pos:line="99" pos:column="15">domptr<pos:position pos:line="99" pos:column="21"/></name> <operator pos:line="99" pos:column="22">=<pos:position pos:line="99" pos:column="23"/></operator> <call><name pos:line="99" pos:column="24">strchr<pos:position pos:line="99" pos:column="30"/></name><argument_list pos:line="99" pos:column="30">(<argument><expr><name pos:line="99" pos:column="31">domptr<pos:position pos:line="99" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="99" pos:column="39">'.'<pos:position pos:line="99" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="44"/></expr_stmt>
              <if pos:line="100" pos:column="15">if<condition pos:line="100" pos:column="17">(<expr><name pos:line="100" pos:column="18">domptr<pos:position pos:line="100" pos:column="24"/></name></expr>)<pos:position pos:line="100" pos:column="25"/></condition><then pos:line="100" pos:column="25"> <block pos:line="100" pos:column="26">{
                <expr_stmt><expr><name pos:line="101" pos:column="17">domptr<pos:position pos:line="101" pos:column="23"/></name><operator pos:line="101" pos:column="23">++<pos:position pos:line="101" pos:column="25"/></operator></expr>;<pos:position pos:line="101" pos:column="26"/></expr_stmt>
                <expr_stmt><expr><name pos:line="102" pos:column="17">dotcount<pos:position pos:line="102" pos:column="25"/></name><operator pos:line="102" pos:column="25">++<pos:position pos:line="102" pos:column="27"/></operator></expr>;<pos:position pos:line="102" pos:column="28"/></expr_stmt>
              }<pos:position pos:line="103" pos:column="16"/></block></then></if>
            }<pos:position pos:line="104" pos:column="14"/></block> while<condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">domptr<pos:position pos:line="104" pos:column="27"/></name></expr>)<pos:position pos:line="104" pos:column="28"/></condition>;<pos:position pos:line="104" pos:column="29"/></do>

            <comment type="block" pos:line="106" pos:column="13">/* The original Netscape cookie spec defined that this domain name
               MUST have three dots (or two if one of the seven holy TLDs),
               but it seems that these kinds of cookies are in use "out there"
               so we cannot be that strict. I've therefore lowered the check
               to not allow less than two dots. */</comment>

            <if pos:line="112" pos:column="13">if<condition pos:line="112" pos:column="15">(<expr><name pos:line="112" pos:column="16">dotcount<pos:position pos:line="112" pos:column="24"/></name> <operator pos:line="112" pos:column="25">&lt;<pos:position pos:line="112" pos:column="29"/></operator> <literal type="number" pos:line="112" pos:column="27">2<pos:position pos:line="112" pos:column="28"/></literal></expr>)<pos:position pos:line="112" pos:column="29"/></condition><then pos:line="112" pos:column="29"> <block pos:line="112" pos:column="30">{
              <comment type="block" pos:line="113" pos:column="15">/* Received and skipped a cookie with a domain using too few
                 dots. */</comment>
              <expr_stmt><expr><name pos:line="115" pos:column="15">badcookie<pos:position pos:line="115" pos:column="24"/></name><operator pos:line="115" pos:column="24">=<pos:position pos:line="115" pos:column="25"/></operator><name pos:line="115" pos:column="25">TRUE<pos:position pos:line="115" pos:column="29"/></name></expr>;<pos:position pos:line="115" pos:column="30"/></expr_stmt> <comment type="block" pos:line="115" pos:column="31">/* mark this as a bad cookie */</comment>
              <expr_stmt><expr><call><name pos:line="116" pos:column="15">infof<pos:position pos:line="116" pos:column="20"/></name><argument_list pos:line="116" pos:column="20">(<argument><expr><name pos:line="116" pos:column="21">data<pos:position pos:line="116" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="27">"skipped cookie with illegal dotcount domain: %s\n"<pos:position pos:line="116" pos:column="78"/></literal></expr></argument>,
                    <argument><expr><name pos:line="117" pos:column="21">whatptr<pos:position pos:line="117" pos:column="28"/></name></expr></argument>)<pos:position pos:line="117" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="118" pos:column="14"/></block></then>
            <else pos:line="119" pos:column="13">else <block pos:line="119" pos:column="18">{
              <comment type="block" pos:line="120" pos:column="15">/* Now, we make sure that our host is within the given domain,
                 or the given domain is not valid and thus cannot be set. */</comment>

              <if pos:line="123" pos:column="15">if<condition pos:line="123" pos:column="17">(<expr><literal type="char" pos:line="123" pos:column="18">'.'<pos:position pos:line="123" pos:column="21"/></literal> <operator pos:line="123" pos:column="22">==<pos:position pos:line="123" pos:column="24"/></operator> <name><name pos:line="123" pos:column="25">whatptr<pos:position pos:line="123" pos:column="32"/></name><index pos:line="123" pos:column="32">[<expr><literal type="number" pos:line="123" pos:column="33">0<pos:position pos:line="123" pos:column="34"/></literal></expr>]<pos:position pos:line="123" pos:column="35"/></index></name></expr>)<pos:position pos:line="123" pos:column="36"/></condition><then pos:line="123" pos:column="36">
                <block type="pseudo"><expr_stmt><expr><name pos:line="124" pos:column="17">whatptr<pos:position pos:line="124" pos:column="24"/></name><operator pos:line="124" pos:column="24">++<pos:position pos:line="124" pos:column="26"/></operator></expr>;<pos:position pos:line="124" pos:column="27"/></expr_stmt></block></then></if> <comment type="block" pos:line="124" pos:column="28">/* ignore preceeding dot */</comment>

              <if pos:line="126" pos:column="15">if<condition pos:line="126" pos:column="17">(<expr><operator pos:line="126" pos:column="18">!<pos:position pos:line="126" pos:column="19"/></operator><name pos:line="126" pos:column="19">domain<pos:position pos:line="126" pos:column="25"/></name> <operator pos:line="126" pos:column="26">||<pos:position pos:line="126" pos:column="28"/></operator> <call><name pos:line="126" pos:column="29">tailmatch<pos:position pos:line="126" pos:column="38"/></name><argument_list pos:line="126" pos:column="38">(<argument><expr><name pos:line="126" pos:column="39">whatptr<pos:position pos:line="126" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="48">domain<pos:position pos:line="126" pos:column="54"/></name></expr></argument>)<pos:position pos:line="126" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="56"/></condition><then pos:line="126" pos:column="56"> <block pos:line="126" pos:column="57">{
                <decl_stmt><decl><type><specifier pos:line="127" pos:column="17">const<pos:position pos:line="127" pos:column="22"/></specifier> <name pos:line="127" pos:column="23">char<pos:position pos:line="127" pos:column="27"/></name> <modifier pos:line="127" pos:column="28">*<pos:position pos:line="127" pos:column="29"/></modifier></type><name pos:line="127" pos:column="29">tailptr<pos:position pos:line="127" pos:column="36"/></name><init pos:line="127" pos:column="36">=<expr><name pos:line="127" pos:column="37">whatptr<pos:position pos:line="127" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="127" pos:column="45"/></decl_stmt>
                <if pos:line="128" pos:column="17">if<condition pos:line="128" pos:column="19">(<expr><name><name pos:line="128" pos:column="20">tailptr<pos:position pos:line="128" pos:column="27"/></name><index pos:line="128" pos:column="27">[<expr><literal type="number" pos:line="128" pos:column="28">0<pos:position pos:line="128" pos:column="29"/></literal></expr>]<pos:position pos:line="128" pos:column="30"/></index></name> <operator pos:line="128" pos:column="31">==<pos:position pos:line="128" pos:column="33"/></operator> <literal type="char" pos:line="128" pos:column="34">'.'<pos:position pos:line="128" pos:column="37"/></literal></expr>)<pos:position pos:line="128" pos:column="38"/></condition><then pos:line="128" pos:column="38">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="129" pos:column="19">tailptr<pos:position pos:line="129" pos:column="26"/></name><operator pos:line="129" pos:column="26">++<pos:position pos:line="129" pos:column="28"/></operator></expr>;<pos:position pos:line="129" pos:column="29"/></expr_stmt></block></then></if>
                <expr_stmt><expr><name><name pos:line="130" pos:column="17">co<pos:position pos:line="130" pos:column="19"/></name><operator pos:line="130" pos:column="19">-&gt;<pos:position pos:line="130" pos:column="24"/></operator><name pos:line="130" pos:column="21">domain<pos:position pos:line="130" pos:column="27"/></name></name><operator pos:line="130" pos:column="27">=<pos:position pos:line="130" pos:column="28"/></operator><call><name pos:line="130" pos:column="28">strdup<pos:position pos:line="130" pos:column="34"/></name><argument_list pos:line="130" pos:column="34">(<argument><expr><name pos:line="130" pos:column="35">tailptr<pos:position pos:line="130" pos:column="42"/></name></expr></argument>)<pos:position pos:line="130" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="44"/></expr_stmt> <comment type="block" pos:line="130" pos:column="45">/* don't prefix w/dots
                                               internally */</comment>
                <if pos:line="132" pos:column="17">if<condition pos:line="132" pos:column="19">(<expr><operator pos:line="132" pos:column="20">!<pos:position pos:line="132" pos:column="21"/></operator><name><name pos:line="132" pos:column="21">co<pos:position pos:line="132" pos:column="23"/></name><operator pos:line="132" pos:column="23">-&gt;<pos:position pos:line="132" pos:column="28"/></operator><name pos:line="132" pos:column="25">domain<pos:position pos:line="132" pos:column="31"/></name></name></expr>)<pos:position pos:line="132" pos:column="32"/></condition><then pos:line="132" pos:column="32"> <block pos:line="132" pos:column="33">{
                  <expr_stmt><expr><name pos:line="133" pos:column="19">badcookie<pos:position pos:line="133" pos:column="28"/></name> <operator pos:line="133" pos:column="29">=<pos:position pos:line="133" pos:column="30"/></operator> <name pos:line="133" pos:column="31">TRUE<pos:position pos:line="133" pos:column="35"/></name></expr>;<pos:position pos:line="133" pos:column="36"/></expr_stmt>
                  <break pos:line="134" pos:column="19">break;<pos:position pos:line="134" pos:column="25"/></break>
                }<pos:position pos:line="135" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name><name pos:line="136" pos:column="17">co<pos:position pos:line="136" pos:column="19"/></name><operator pos:line="136" pos:column="19">-&gt;<pos:position pos:line="136" pos:column="24"/></operator><name pos:line="136" pos:column="21">tailmatch<pos:position pos:line="136" pos:column="30"/></name></name><operator pos:line="136" pos:column="30">=<pos:position pos:line="136" pos:column="31"/></operator><name pos:line="136" pos:column="31">TRUE<pos:position pos:line="136" pos:column="35"/></name></expr>;<pos:position pos:line="136" pos:column="36"/></expr_stmt> <comment type="block" pos:line="136" pos:column="37">/* we always do that if the domain name was
                                       given */</comment>
              }<pos:position pos:line="138" pos:column="16"/></block></then>
              <else pos:line="139" pos:column="15">else <block pos:line="139" pos:column="20">{
                <comment type="block" pos:line="140" pos:column="17">/* we did not get a tailmatch and then the attempted set domain
                   is not a domain to which the current host belongs. Mark as
                   bad. */</comment>
                <expr_stmt><expr><name pos:line="143" pos:column="17">badcookie<pos:position pos:line="143" pos:column="26"/></name><operator pos:line="143" pos:column="26">=<pos:position pos:line="143" pos:column="27"/></operator><name pos:line="143" pos:column="27">TRUE<pos:position pos:line="143" pos:column="31"/></name></expr>;<pos:position pos:line="143" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="144" pos:column="17">infof<pos:position pos:line="144" pos:column="22"/></name><argument_list pos:line="144" pos:column="22">(<argument><expr><name pos:line="144" pos:column="23">data<pos:position pos:line="144" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="144" pos:column="29">"skipped cookie with bad tailmatch domain: %s\n"<pos:position pos:line="144" pos:column="77"/></literal></expr></argument>,
                      <argument><expr><name pos:line="145" pos:column="23">whatptr<pos:position pos:line="145" pos:column="30"/></name></expr></argument>)<pos:position pos:line="145" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="32"/></expr_stmt>
              }<pos:position pos:line="146" pos:column="16"/></block></else></if>
            }<pos:position pos:line="147" pos:column="14"/></block></else></if>
          }<pos:position pos:line="148" pos:column="12"/></block></then></if></elseif>
          <elseif pos:line="149" pos:column="11">else <if pos:line="149" pos:column="16">if<condition pos:line="149" pos:column="18">(<expr><call><name pos:line="149" pos:column="19">strequal<pos:position pos:line="149" pos:column="27"/></name><argument_list pos:line="149" pos:column="27">(<argument><expr><literal type="string" pos:line="149" pos:column="28">"version"<pos:position pos:line="149" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="149" pos:column="39">name<pos:position pos:line="149" pos:column="43"/></name></expr></argument>)<pos:position pos:line="149" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="149" pos:column="45"/></condition><then pos:line="149" pos:column="45"> <block pos:line="149" pos:column="46">{
            <expr_stmt><expr><name><name pos:line="150" pos:column="13">co<pos:position pos:line="150" pos:column="15"/></name><operator pos:line="150" pos:column="15">-&gt;<pos:position pos:line="150" pos:column="20"/></operator><name pos:line="150" pos:column="17">version<pos:position pos:line="150" pos:column="24"/></name></name><operator pos:line="150" pos:column="24">=<pos:position pos:line="150" pos:column="25"/></operator><call><name pos:line="150" pos:column="25">strdup<pos:position pos:line="150" pos:column="31"/></name><argument_list pos:line="150" pos:column="31">(<argument><expr><name pos:line="150" pos:column="32">whatptr<pos:position pos:line="150" pos:column="39"/></name></expr></argument>)<pos:position pos:line="150" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="41"/></expr_stmt>
            <if pos:line="151" pos:column="13">if<condition pos:line="151" pos:column="15">(<expr><operator pos:line="151" pos:column="16">!<pos:position pos:line="151" pos:column="17"/></operator><name><name pos:line="151" pos:column="17">co<pos:position pos:line="151" pos:column="19"/></name><operator pos:line="151" pos:column="19">-&gt;<pos:position pos:line="151" pos:column="24"/></operator><name pos:line="151" pos:column="21">version<pos:position pos:line="151" pos:column="28"/></name></name></expr>)<pos:position pos:line="151" pos:column="29"/></condition><then pos:line="151" pos:column="29"> <block pos:line="151" pos:column="30">{
              <expr_stmt><expr><name pos:line="152" pos:column="15">badcookie<pos:position pos:line="152" pos:column="24"/></name> <operator pos:line="152" pos:column="25">=<pos:position pos:line="152" pos:column="26"/></operator> <name pos:line="152" pos:column="27">TRUE<pos:position pos:line="152" pos:column="31"/></name></expr>;<pos:position pos:line="152" pos:column="32"/></expr_stmt>
              <break pos:line="153" pos:column="15">break;<pos:position pos:line="153" pos:column="21"/></break>
            }<pos:position pos:line="154" pos:column="14"/></block></then></if>
          }<pos:position pos:line="155" pos:column="12"/></block></then></if></elseif>
          <elseif pos:line="156" pos:column="11">else <if pos:line="156" pos:column="16">if<condition pos:line="156" pos:column="18">(<expr><call><name pos:line="156" pos:column="19">strequal<pos:position pos:line="156" pos:column="27"/></name><argument_list pos:line="156" pos:column="27">(<argument><expr><literal type="string" pos:line="156" pos:column="28">"max-age"<pos:position pos:line="156" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="156" pos:column="39">name<pos:position pos:line="156" pos:column="43"/></name></expr></argument>)<pos:position pos:line="156" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="156" pos:column="45"/></condition><then pos:line="156" pos:column="45"> <block pos:line="156" pos:column="46">{
            <comment type="block" pos:line="157" pos:column="13">/* Defined in RFC2109:

               Optional.  The Max-Age attribute defines the lifetime of the
               cookie, in seconds.  The delta-seconds value is a decimal non-
               negative integer.  After delta-seconds seconds elapse, the
               client should discard the cookie.  A value of zero means the
               cookie should be discarded immediately.

             */</comment>
            <expr_stmt><expr><name><name pos:line="166" pos:column="13">co<pos:position pos:line="166" pos:column="15"/></name><operator pos:line="166" pos:column="15">-&gt;<pos:position pos:line="166" pos:column="20"/></operator><name pos:line="166" pos:column="17">maxage<pos:position pos:line="166" pos:column="23"/></name></name> <operator pos:line="166" pos:column="24">=<pos:position pos:line="166" pos:column="25"/></operator> <call><name pos:line="166" pos:column="26">strdup<pos:position pos:line="166" pos:column="32"/></name><argument_list pos:line="166" pos:column="32">(<argument><expr><name pos:line="166" pos:column="33">whatptr<pos:position pos:line="166" pos:column="40"/></name></expr></argument>)<pos:position pos:line="166" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="42"/></expr_stmt>
            <if pos:line="167" pos:column="13">if<condition pos:line="167" pos:column="15">(<expr><operator pos:line="167" pos:column="16">!<pos:position pos:line="167" pos:column="17"/></operator><name><name pos:line="167" pos:column="17">co<pos:position pos:line="167" pos:column="19"/></name><operator pos:line="167" pos:column="19">-&gt;<pos:position pos:line="167" pos:column="24"/></operator><name pos:line="167" pos:column="21">maxage<pos:position pos:line="167" pos:column="27"/></name></name></expr>)<pos:position pos:line="167" pos:column="28"/></condition><then pos:line="167" pos:column="28"> <block pos:line="167" pos:column="29">{
              <expr_stmt><expr><name pos:line="168" pos:column="15">badcookie<pos:position pos:line="168" pos:column="24"/></name> <operator pos:line="168" pos:column="25">=<pos:position pos:line="168" pos:column="26"/></operator> <name pos:line="168" pos:column="27">TRUE<pos:position pos:line="168" pos:column="31"/></name></expr>;<pos:position pos:line="168" pos:column="32"/></expr_stmt>
              <break pos:line="169" pos:column="15">break;<pos:position pos:line="169" pos:column="21"/></break>
            }<pos:position pos:line="170" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="171" pos:column="13">co<pos:position pos:line="171" pos:column="15"/></name><operator pos:line="171" pos:column="15">-&gt;<pos:position pos:line="171" pos:column="20"/></operator><name pos:line="171" pos:column="17">expires<pos:position pos:line="171" pos:column="24"/></name></name> <operator pos:line="171" pos:column="25">=<pos:position pos:line="171" pos:column="26"/></operator>
              <call><name pos:line="172" pos:column="15">atoi<pos:position pos:line="172" pos:column="19"/></name><argument_list pos:line="172" pos:column="19">(<argument><expr><ternary><condition><expr><operator pos:line="172" pos:column="20">(<pos:position pos:line="172" pos:column="21"/></operator><operator pos:line="172" pos:column="21">*<pos:position pos:line="172" pos:column="22"/></operator><name><name pos:line="172" pos:column="22">co<pos:position pos:line="172" pos:column="24"/></name><operator pos:line="172" pos:column="24">-&gt;<pos:position pos:line="172" pos:column="29"/></operator><name pos:line="172" pos:column="26">maxage<pos:position pos:line="172" pos:column="32"/></name></name><operator pos:line="172" pos:column="32">==<pos:position pos:line="172" pos:column="34"/></operator><literal type="char" pos:line="172" pos:column="34">'\"'<pos:position pos:line="172" pos:column="38"/></literal><operator pos:line="172" pos:column="38">)<pos:position pos:line="172" pos:column="39"/></operator></expr>?<pos:position pos:line="172" pos:column="40"/></condition><then><expr><operator pos:line="172" pos:column="40">&amp;<pos:position pos:line="172" pos:column="45"/></operator><name><name pos:line="172" pos:column="41">co<pos:position pos:line="172" pos:column="43"/></name><operator pos:line="172" pos:column="43">-&gt;<pos:position pos:line="172" pos:column="48"/></operator><name pos:line="172" pos:column="45">maxage<pos:position pos:line="172" pos:column="51"/></name><index pos:line="172" pos:column="51">[<expr><literal type="number" pos:line="172" pos:column="52">1<pos:position pos:line="172" pos:column="53"/></literal></expr>]<pos:position pos:line="172" pos:column="54"/></index></name></expr></then><else pos:line="172" pos:column="54">:<expr><operator pos:line="172" pos:column="55">&amp;<pos:position pos:line="172" pos:column="60"/></operator><name><name pos:line="172" pos:column="56">co<pos:position pos:line="172" pos:column="58"/></name><operator pos:line="172" pos:column="58">-&gt;<pos:position pos:line="172" pos:column="63"/></operator><name pos:line="172" pos:column="60">maxage<pos:position pos:line="172" pos:column="66"/></name><index pos:line="172" pos:column="66">[<expr><literal type="number" pos:line="172" pos:column="67">0<pos:position pos:line="172" pos:column="68"/></literal></expr>]<pos:position pos:line="172" pos:column="69"/></index></name></expr></else></ternary></expr></argument>)<pos:position pos:line="172" pos:column="70"/></argument_list></call> <operator pos:line="172" pos:column="71">+<pos:position pos:line="172" pos:column="72"/></operator> <operator pos:line="172" pos:column="73">(<pos:position pos:line="172" pos:column="74"/></operator><name pos:line="172" pos:column="74">long<pos:position pos:line="172" pos:column="78"/></name><operator pos:line="172" pos:column="78">)<pos:position pos:line="172" pos:column="79"/></operator><name pos:line="172" pos:column="79">now<pos:position pos:line="172" pos:column="82"/></name></expr>;<pos:position pos:line="172" pos:column="83"/></expr_stmt>
          }<pos:position pos:line="173" pos:column="12"/></block></then></if></elseif>
          <elseif pos:line="174" pos:column="11">else <if pos:line="174" pos:column="16">if<condition pos:line="174" pos:column="18">(<expr><call><name pos:line="174" pos:column="19">strequal<pos:position pos:line="174" pos:column="27"/></name><argument_list pos:line="174" pos:column="27">(<argument><expr><literal type="string" pos:line="174" pos:column="28">"expires"<pos:position pos:line="174" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="39">name<pos:position pos:line="174" pos:column="43"/></name></expr></argument>)<pos:position pos:line="174" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="174" pos:column="45"/></condition><then pos:line="174" pos:column="45"> <block pos:line="174" pos:column="46">{
            <expr_stmt><expr><name><name pos:line="175" pos:column="13">co<pos:position pos:line="175" pos:column="15"/></name><operator pos:line="175" pos:column="15">-&gt;<pos:position pos:line="175" pos:column="20"/></operator><name pos:line="175" pos:column="17">expirestr<pos:position pos:line="175" pos:column="26"/></name></name><operator pos:line="175" pos:column="26">=<pos:position pos:line="175" pos:column="27"/></operator><call><name pos:line="175" pos:column="27">strdup<pos:position pos:line="175" pos:column="33"/></name><argument_list pos:line="175" pos:column="33">(<argument><expr><name pos:line="175" pos:column="34">whatptr<pos:position pos:line="175" pos:column="41"/></name></expr></argument>)<pos:position pos:line="175" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="43"/></expr_stmt>
            <if pos:line="176" pos:column="13">if<condition pos:line="176" pos:column="15">(<expr><operator pos:line="176" pos:column="16">!<pos:position pos:line="176" pos:column="17"/></operator><name><name pos:line="176" pos:column="17">co<pos:position pos:line="176" pos:column="19"/></name><operator pos:line="176" pos:column="19">-&gt;<pos:position pos:line="176" pos:column="24"/></operator><name pos:line="176" pos:column="21">expirestr<pos:position pos:line="176" pos:column="30"/></name></name></expr>)<pos:position pos:line="176" pos:column="31"/></condition><then pos:line="176" pos:column="31"> <block pos:line="176" pos:column="32">{
              <expr_stmt><expr><name pos:line="177" pos:column="15">badcookie<pos:position pos:line="177" pos:column="24"/></name> <operator pos:line="177" pos:column="25">=<pos:position pos:line="177" pos:column="26"/></operator> <name pos:line="177" pos:column="27">TRUE<pos:position pos:line="177" pos:column="31"/></name></expr>;<pos:position pos:line="177" pos:column="32"/></expr_stmt>
              <break pos:line="178" pos:column="15">break;<pos:position pos:line="178" pos:column="21"/></break>
            }<pos:position pos:line="179" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="180" pos:column="13">co<pos:position pos:line="180" pos:column="15"/></name><operator pos:line="180" pos:column="15">-&gt;<pos:position pos:line="180" pos:column="20"/></operator><name pos:line="180" pos:column="17">expires<pos:position pos:line="180" pos:column="24"/></name></name> <operator pos:line="180" pos:column="25">=<pos:position pos:line="180" pos:column="26"/></operator> <operator pos:line="180" pos:column="27">(<pos:position pos:line="180" pos:column="28"/></operator><name pos:line="180" pos:column="28">long<pos:position pos:line="180" pos:column="32"/></name><operator pos:line="180" pos:column="32">)<pos:position pos:line="180" pos:column="33"/></operator><call><name pos:line="180" pos:column="33">curl_getdate<pos:position pos:line="180" pos:column="45"/></name><argument_list pos:line="180" pos:column="45">(<argument><expr><name pos:line="180" pos:column="46">what<pos:position pos:line="180" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="180" pos:column="52">&amp;<pos:position pos:line="180" pos:column="57"/></operator><name pos:line="180" pos:column="53">now<pos:position pos:line="180" pos:column="56"/></name></expr></argument>)<pos:position pos:line="180" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="58"/></expr_stmt>
          }<pos:position pos:line="181" pos:column="12"/></block></then></if></elseif>
          <elseif pos:line="182" pos:column="11">else <if pos:line="182" pos:column="16">if<condition pos:line="182" pos:column="18">(<expr><operator pos:line="182" pos:column="19">!<pos:position pos:line="182" pos:column="20"/></operator><name><name pos:line="182" pos:column="20">co<pos:position pos:line="182" pos:column="22"/></name><operator pos:line="182" pos:column="22">-&gt;<pos:position pos:line="182" pos:column="27"/></operator><name pos:line="182" pos:column="24">name<pos:position pos:line="182" pos:column="28"/></name></name></expr>)<pos:position pos:line="182" pos:column="29"/></condition><then pos:line="182" pos:column="29"> <block pos:line="182" pos:column="30">{
            <expr_stmt><expr><name><name pos:line="183" pos:column="13">co<pos:position pos:line="183" pos:column="15"/></name><operator pos:line="183" pos:column="15">-&gt;<pos:position pos:line="183" pos:column="20"/></operator><name pos:line="183" pos:column="17">name<pos:position pos:line="183" pos:column="21"/></name></name> <operator pos:line="183" pos:column="22">=<pos:position pos:line="183" pos:column="23"/></operator> <call><name pos:line="183" pos:column="24">strdup<pos:position pos:line="183" pos:column="30"/></name><argument_list pos:line="183" pos:column="30">(<argument><expr><name pos:line="183" pos:column="31">name<pos:position pos:line="183" pos:column="35"/></name></expr></argument>)<pos:position pos:line="183" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="184" pos:column="13">co<pos:position pos:line="184" pos:column="15"/></name><operator pos:line="184" pos:column="15">-&gt;<pos:position pos:line="184" pos:column="20"/></operator><name pos:line="184" pos:column="17">value<pos:position pos:line="184" pos:column="22"/></name></name> <operator pos:line="184" pos:column="23">=<pos:position pos:line="184" pos:column="24"/></operator> <call><name pos:line="184" pos:column="25">strdup<pos:position pos:line="184" pos:column="31"/></name><argument_list pos:line="184" pos:column="31">(<argument><expr><name pos:line="184" pos:column="32">whatptr<pos:position pos:line="184" pos:column="39"/></name></expr></argument>)<pos:position pos:line="184" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="41"/></expr_stmt>
            <if pos:line="185" pos:column="13">if<condition pos:line="185" pos:column="15">(<expr><operator pos:line="185" pos:column="16">!<pos:position pos:line="185" pos:column="17"/></operator><name><name pos:line="185" pos:column="17">co<pos:position pos:line="185" pos:column="19"/></name><operator pos:line="185" pos:column="19">-&gt;<pos:position pos:line="185" pos:column="24"/></operator><name pos:line="185" pos:column="21">name<pos:position pos:line="185" pos:column="25"/></name></name> <operator pos:line="185" pos:column="26">||<pos:position pos:line="185" pos:column="28"/></operator> <operator pos:line="185" pos:column="29">!<pos:position pos:line="185" pos:column="30"/></operator><name><name pos:line="185" pos:column="30">co<pos:position pos:line="185" pos:column="32"/></name><operator pos:line="185" pos:column="32">-&gt;<pos:position pos:line="185" pos:column="37"/></operator><name pos:line="185" pos:column="34">value<pos:position pos:line="185" pos:column="39"/></name></name></expr>)<pos:position pos:line="185" pos:column="40"/></condition><then pos:line="185" pos:column="40"> <block pos:line="185" pos:column="41">{
              <expr_stmt><expr><name pos:line="186" pos:column="15">badcookie<pos:position pos:line="186" pos:column="24"/></name> <operator pos:line="186" pos:column="25">=<pos:position pos:line="186" pos:column="26"/></operator> <name pos:line="186" pos:column="27">TRUE<pos:position pos:line="186" pos:column="31"/></name></expr>;<pos:position pos:line="186" pos:column="32"/></expr_stmt>
              <break pos:line="187" pos:column="15">break;<pos:position pos:line="187" pos:column="21"/></break>
            }<pos:position pos:line="188" pos:column="14"/></block></then></if>
          }<pos:position pos:line="189" pos:column="12"/></block></then></if></elseif></if>
          <comment type="block" pos:line="190" pos:column="11">/*
            else this is the second (or more) name we don't know
            about! */</comment>
        }<pos:position pos:line="193" pos:column="10"/></block></then>
        <else pos:line="194" pos:column="9">else <block pos:line="194" pos:column="14">{
          <comment type="block" pos:line="195" pos:column="11">/* this is an "illegal" &lt;what&gt;=&lt;this&gt; pair */</comment>
        }<pos:position pos:line="196" pos:column="10"/></block></else></if>
      }<pos:position pos:line="197" pos:column="8"/></block></then>
      <else pos:line="198" pos:column="7">else <block pos:line="198" pos:column="12">{
        <if pos:line="199" pos:column="9">if<condition pos:line="199" pos:column="11">(<expr><call><name pos:line="199" pos:column="12">sscanf<pos:position pos:line="199" pos:column="18"/></name><argument_list pos:line="199" pos:column="18">(<argument><expr><name pos:line="199" pos:column="19">ptr<pos:position pos:line="199" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="199" pos:column="24">"%"<pos:position pos:line="199" pos:column="27"/></literal> <name pos:line="199" pos:column="28">MAX_COOKIE_LINE_TXT<pos:position pos:line="199" pos:column="47"/></name> <literal type="string" pos:line="199" pos:column="48">"[^;\r\n]"<pos:position pos:line="199" pos:column="58"/></literal></expr></argument>,
                  <argument><expr><name pos:line="200" pos:column="19">what<pos:position pos:line="200" pos:column="23"/></name></expr></argument>)<pos:position pos:line="200" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="200" pos:column="25"/></condition><then pos:line="200" pos:column="25"> <block pos:line="200" pos:column="26">{
          <if pos:line="201" pos:column="11">if<condition pos:line="201" pos:column="13">(<expr><call><name pos:line="201" pos:column="14">strequal<pos:position pos:line="201" pos:column="22"/></name><argument_list pos:line="201" pos:column="22">(<argument><expr><literal type="string" pos:line="201" pos:column="23">"secure"<pos:position pos:line="201" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="33">what<pos:position pos:line="201" pos:column="37"/></name></expr></argument>)<pos:position pos:line="201" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="201" pos:column="39"/></condition><then pos:line="201" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="202" pos:column="13">co<pos:position pos:line="202" pos:column="15"/></name><operator pos:line="202" pos:column="15">-&gt;<pos:position pos:line="202" pos:column="20"/></operator><name pos:line="202" pos:column="17">secure<pos:position pos:line="202" pos:column="23"/></name></name> <operator pos:line="202" pos:column="24">=<pos:position pos:line="202" pos:column="25"/></operator> <name pos:line="202" pos:column="26">TRUE<pos:position pos:line="202" pos:column="30"/></name></expr>;<pos:position pos:line="202" pos:column="31"/></expr_stmt></block></then></if>
          <comment type="block" pos:line="203" pos:column="11">/* else,
             unsupported keyword without assign! */</comment>

        }<pos:position pos:line="206" pos:column="10"/></block></then></if>
      }<pos:position pos:line="207" pos:column="8"/></block></else></if>
      <if pos:line="208" pos:column="7">if<condition pos:line="208" pos:column="9">(<expr><operator pos:line="208" pos:column="10">!<pos:position pos:line="208" pos:column="11"/></operator><name pos:line="208" pos:column="11">semiptr<pos:position pos:line="208" pos:column="18"/></name> <operator pos:line="208" pos:column="19">||<pos:position pos:line="208" pos:column="21"/></operator> <operator pos:line="208" pos:column="22">!<pos:position pos:line="208" pos:column="23"/></operator><operator pos:line="208" pos:column="23">*<pos:position pos:line="208" pos:column="24"/></operator><name pos:line="208" pos:column="24">semiptr<pos:position pos:line="208" pos:column="31"/></name></expr>)<pos:position pos:line="208" pos:column="32"/></condition><then pos:line="208" pos:column="32"> <block pos:line="208" pos:column="33">{
        <comment type="block" pos:line="209" pos:column="9">/* we already know there are no more cookies */</comment>
        <expr_stmt><expr><name pos:line="210" pos:column="9">semiptr<pos:position pos:line="210" pos:column="16"/></name> <operator pos:line="210" pos:column="17">=<pos:position pos:line="210" pos:column="18"/></operator> <name pos:line="210" pos:column="19">NULL<pos:position pos:line="210" pos:column="23"/></name></expr>;<pos:position pos:line="210" pos:column="24"/></expr_stmt>
        <continue pos:line="211" pos:column="9">continue;<pos:position pos:line="211" pos:column="18"/></continue>
      }<pos:position pos:line="212" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="214" pos:column="7">ptr<pos:position pos:line="214" pos:column="10"/></name><operator pos:line="214" pos:column="10">=<pos:position pos:line="214" pos:column="11"/></operator><name pos:line="214" pos:column="11">semiptr<pos:position pos:line="214" pos:column="18"/></name><operator pos:line="214" pos:column="18">+<pos:position pos:line="214" pos:column="19"/></operator><literal type="number" pos:line="214" pos:column="19">1<pos:position pos:line="214" pos:column="20"/></literal></expr>;<pos:position pos:line="214" pos:column="21"/></expr_stmt>
      <while pos:line="215" pos:column="7">while<condition pos:line="215" pos:column="12">(<expr><name pos:line="215" pos:column="13">ptr<pos:position pos:line="215" pos:column="16"/></name> <operator pos:line="215" pos:column="17">&amp;&amp;<pos:position pos:line="215" pos:column="27"/></operator> <operator pos:line="215" pos:column="20">*<pos:position pos:line="215" pos:column="21"/></operator><name pos:line="215" pos:column="21">ptr<pos:position pos:line="215" pos:column="24"/></name> <operator pos:line="215" pos:column="25">&amp;&amp;<pos:position pos:line="215" pos:column="35"/></operator> <call><name pos:line="215" pos:column="28">my_isspace<pos:position pos:line="215" pos:column="38"/></name><argument_list pos:line="215" pos:column="38">(<argument><expr><operator pos:line="215" pos:column="39">*<pos:position pos:line="215" pos:column="40"/></operator><name pos:line="215" pos:column="40">ptr<pos:position pos:line="215" pos:column="43"/></name></expr></argument>)<pos:position pos:line="215" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="215" pos:column="45"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="216" pos:column="9">ptr<pos:position pos:line="216" pos:column="12"/></name><operator pos:line="216" pos:column="12">++<pos:position pos:line="216" pos:column="14"/></operator></expr>;<pos:position pos:line="216" pos:column="15"/></expr_stmt></block></while>
      <expr_stmt><expr><name pos:line="217" pos:column="7">semiptr<pos:position pos:line="217" pos:column="14"/></name><operator pos:line="217" pos:column="14">=<pos:position pos:line="217" pos:column="15"/></operator><call><name pos:line="217" pos:column="15">strchr<pos:position pos:line="217" pos:column="21"/></name><argument_list pos:line="217" pos:column="21">(<argument><expr><name pos:line="217" pos:column="22">ptr<pos:position pos:line="217" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="217" pos:column="27">';'<pos:position pos:line="217" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="217" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="32"/></expr_stmt> <comment type="block" pos:line="217" pos:column="33">/* now, find the next semicolon */</comment>

      <if pos:line="219" pos:column="7">if<condition pos:line="219" pos:column="9">(<expr><operator pos:line="219" pos:column="10">!<pos:position pos:line="219" pos:column="11"/></operator><name pos:line="219" pos:column="11">semiptr<pos:position pos:line="219" pos:column="18"/></name> <operator pos:line="219" pos:column="19">&amp;&amp;<pos:position pos:line="219" pos:column="29"/></operator> <operator pos:line="219" pos:column="22">*<pos:position pos:line="219" pos:column="23"/></operator><name pos:line="219" pos:column="23">ptr<pos:position pos:line="219" pos:column="26"/></name></expr>)<pos:position pos:line="219" pos:column="27"/></condition><then pos:line="219" pos:column="27">
        <comment type="block" pos:line="220" pos:column="9">/* There are no more semicolons, but there's a final name=value pair
           coming up */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="222" pos:column="9">semiptr<pos:position pos:line="222" pos:column="16"/></name><operator pos:line="222" pos:column="16">=<pos:position pos:line="222" pos:column="17"/></operator><call><name pos:line="222" pos:column="17">strchr<pos:position pos:line="222" pos:column="23"/></name><argument_list pos:line="222" pos:column="23">(<argument><expr><name pos:line="222" pos:column="24">ptr<pos:position pos:line="222" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="222" pos:column="29">'\0'<pos:position pos:line="222" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="222" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="35"/></expr_stmt></block></then></if>
    }<pos:position pos:line="223" pos:column="6"/></block> while<condition pos:line="223" pos:column="12">(<expr><name pos:line="223" pos:column="13">semiptr<pos:position pos:line="223" pos:column="20"/></name></expr>)<pos:position pos:line="223" pos:column="21"/></condition>;<pos:position pos:line="223" pos:column="22"/></do>

    <if pos:line="225" pos:column="5">if<condition pos:line="225" pos:column="7">(<expr><operator pos:line="225" pos:column="8">!<pos:position pos:line="225" pos:column="9"/></operator><name pos:line="225" pos:column="9">badcookie<pos:position pos:line="225" pos:column="18"/></name> <operator pos:line="225" pos:column="19">&amp;&amp;<pos:position pos:line="225" pos:column="29"/></operator> <operator pos:line="225" pos:column="22">!<pos:position pos:line="225" pos:column="23"/></operator><name><name pos:line="225" pos:column="23">co<pos:position pos:line="225" pos:column="25"/></name><operator pos:line="225" pos:column="25">-&gt;<pos:position pos:line="225" pos:column="30"/></operator><name pos:line="225" pos:column="27">domain<pos:position pos:line="225" pos:column="33"/></name></name></expr>)<pos:position pos:line="225" pos:column="34"/></condition><then pos:line="225" pos:column="34"> <block pos:line="225" pos:column="35">{
      <if pos:line="226" pos:column="7">if<condition pos:line="226" pos:column="9">(<expr><name pos:line="226" pos:column="10">domain<pos:position pos:line="226" pos:column="16"/></name></expr>)<pos:position pos:line="226" pos:column="17"/></condition><then pos:line="226" pos:column="17"> <block pos:line="226" pos:column="18">{
        <comment type="block" pos:line="227" pos:column="9">/* no domain was given in the header line, set the default */</comment>
        <expr_stmt><expr><name><name pos:line="228" pos:column="9">co<pos:position pos:line="228" pos:column="11"/></name><operator pos:line="228" pos:column="11">-&gt;<pos:position pos:line="228" pos:column="16"/></operator><name pos:line="228" pos:column="13">domain<pos:position pos:line="228" pos:column="19"/></name></name><operator pos:line="228" pos:column="19">=<pos:position pos:line="228" pos:column="20"/></operator><call><name pos:line="228" pos:column="20">strdup<pos:position pos:line="228" pos:column="26"/></name><argument_list pos:line="228" pos:column="26">(<argument><expr><name pos:line="228" pos:column="27">domain<pos:position pos:line="228" pos:column="33"/></name></expr></argument>)<pos:position pos:line="228" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="35"/></expr_stmt>
        <if pos:line="229" pos:column="9">if<condition pos:line="229" pos:column="11">(<expr><operator pos:line="229" pos:column="12">!<pos:position pos:line="229" pos:column="13"/></operator><name><name pos:line="229" pos:column="13">co<pos:position pos:line="229" pos:column="15"/></name><operator pos:line="229" pos:column="15">-&gt;<pos:position pos:line="229" pos:column="20"/></operator><name pos:line="229" pos:column="17">domain<pos:position pos:line="229" pos:column="23"/></name></name></expr>)<pos:position pos:line="229" pos:column="24"/></condition><then pos:line="229" pos:column="24">
          <block type="pseudo"><expr_stmt><expr><name pos:line="230" pos:column="11">badcookie<pos:position pos:line="230" pos:column="20"/></name> <operator pos:line="230" pos:column="21">=<pos:position pos:line="230" pos:column="22"/></operator> <name pos:line="230" pos:column="23">TRUE<pos:position pos:line="230" pos:column="27"/></name></expr>;<pos:position pos:line="230" pos:column="28"/></expr_stmt></block></then></if>
      }<pos:position pos:line="231" pos:column="8"/></block></then></if>
    }<pos:position pos:line="232" pos:column="6"/></block></then></if>

    <if pos:line="234" pos:column="5">if<condition pos:line="234" pos:column="7">(<expr><operator pos:line="234" pos:column="8">!<pos:position pos:line="234" pos:column="9"/></operator><name pos:line="234" pos:column="9">badcookie<pos:position pos:line="234" pos:column="18"/></name> <operator pos:line="234" pos:column="19">&amp;&amp;<pos:position pos:line="234" pos:column="29"/></operator> <operator pos:line="234" pos:column="22">!<pos:position pos:line="234" pos:column="23"/></operator><name><name pos:line="234" pos:column="23">co<pos:position pos:line="234" pos:column="25"/></name><operator pos:line="234" pos:column="25">-&gt;<pos:position pos:line="234" pos:column="30"/></operator><name pos:line="234" pos:column="27">path<pos:position pos:line="234" pos:column="31"/></name></name> <operator pos:line="234" pos:column="32">&amp;&amp;<pos:position pos:line="234" pos:column="42"/></operator> <name pos:line="234" pos:column="35">path<pos:position pos:line="234" pos:column="39"/></name></expr>)<pos:position pos:line="234" pos:column="40"/></condition><then pos:line="234" pos:column="40"> <block pos:line="234" pos:column="41">{
      <comment type="block" pos:line="235" pos:column="7">/* no path was given in the header line, set the default  */</comment>
      <decl_stmt><decl><type><name pos:line="236" pos:column="7">char<pos:position pos:line="236" pos:column="11"/></name> <modifier pos:line="236" pos:column="12">*<pos:position pos:line="236" pos:column="13"/></modifier></type><name pos:line="236" pos:column="13">endslash<pos:position pos:line="236" pos:column="21"/></name> <init pos:line="236" pos:column="22">= <expr><call><name pos:line="236" pos:column="24">strrchr<pos:position pos:line="236" pos:column="31"/></name><argument_list pos:line="236" pos:column="31">(<argument><expr><name pos:line="236" pos:column="32">path<pos:position pos:line="236" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="236" pos:column="38">'/'<pos:position pos:line="236" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="236" pos:column="43"/></decl_stmt>
      <if pos:line="237" pos:column="7">if<condition pos:line="237" pos:column="9">(<expr><name pos:line="237" pos:column="10">endslash<pos:position pos:line="237" pos:column="18"/></name></expr>)<pos:position pos:line="237" pos:column="19"/></condition><then pos:line="237" pos:column="19"> <block pos:line="237" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="238" pos:column="9">size_t<pos:position pos:line="238" pos:column="15"/></name></type> <name pos:line="238" pos:column="16">pathlen<pos:position pos:line="238" pos:column="23"/></name> <init pos:line="238" pos:column="24">= <expr><name pos:line="238" pos:column="26">endslash<pos:position pos:line="238" pos:column="34"/></name><operator pos:line="238" pos:column="34">-<pos:position pos:line="238" pos:column="35"/></operator><name pos:line="238" pos:column="35">path<pos:position pos:line="238" pos:column="39"/></name><operator pos:line="238" pos:column="39">+<pos:position pos:line="238" pos:column="40"/></operator><literal type="number" pos:line="238" pos:column="40">1<pos:position pos:line="238" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="238" pos:column="42"/></decl_stmt> <comment type="block" pos:line="238" pos:column="43">/* include the ending slash */</comment>
        <expr_stmt><expr><name><name pos:line="239" pos:column="9">co<pos:position pos:line="239" pos:column="11"/></name><operator pos:line="239" pos:column="11">-&gt;<pos:position pos:line="239" pos:column="16"/></operator><name pos:line="239" pos:column="13">path<pos:position pos:line="239" pos:column="17"/></name></name><operator pos:line="239" pos:column="17">=<pos:position pos:line="239" pos:column="18"/></operator><call><name pos:line="239" pos:column="18">malloc<pos:position pos:line="239" pos:column="24"/></name><argument_list pos:line="239" pos:column="24">(<argument><expr><name pos:line="239" pos:column="25">pathlen<pos:position pos:line="239" pos:column="32"/></name><operator pos:line="239" pos:column="32">+<pos:position pos:line="239" pos:column="33"/></operator><literal type="number" pos:line="239" pos:column="33">1<pos:position pos:line="239" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="239" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="36"/></expr_stmt> <comment type="block" pos:line="239" pos:column="37">/* one extra for the zero byte */</comment>
        <if pos:line="240" pos:column="9">if<condition pos:line="240" pos:column="11">(<expr><name><name pos:line="240" pos:column="12">co<pos:position pos:line="240" pos:column="14"/></name><operator pos:line="240" pos:column="14">-&gt;<pos:position pos:line="240" pos:column="19"/></operator><name pos:line="240" pos:column="16">path<pos:position pos:line="240" pos:column="20"/></name></name></expr>)<pos:position pos:line="240" pos:column="21"/></condition><then pos:line="240" pos:column="21"> <block pos:line="240" pos:column="22">{
          <expr_stmt><expr><call><name pos:line="241" pos:column="11">memcpy<pos:position pos:line="241" pos:column="17"/></name><argument_list pos:line="241" pos:column="17">(<argument><expr><name><name pos:line="241" pos:column="18">co<pos:position pos:line="241" pos:column="20"/></name><operator pos:line="241" pos:column="20">-&gt;<pos:position pos:line="241" pos:column="25"/></operator><name pos:line="241" pos:column="22">path<pos:position pos:line="241" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="241" pos:column="28">path<pos:position pos:line="241" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="241" pos:column="34">pathlen<pos:position pos:line="241" pos:column="41"/></name></expr></argument>)<pos:position pos:line="241" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="242" pos:column="11">co<pos:position pos:line="242" pos:column="13"/></name><operator pos:line="242" pos:column="13">-&gt;<pos:position pos:line="242" pos:column="18"/></operator><name pos:line="242" pos:column="15">path<pos:position pos:line="242" pos:column="19"/></name><index pos:line="242" pos:column="19">[<expr><name pos:line="242" pos:column="20">pathlen<pos:position pos:line="242" pos:column="27"/></name></expr>]<pos:position pos:line="242" pos:column="28"/></index></name><operator pos:line="242" pos:column="28">=<pos:position pos:line="242" pos:column="29"/></operator><literal type="number" pos:line="242" pos:column="29">0<pos:position pos:line="242" pos:column="30"/></literal></expr>;<pos:position pos:line="242" pos:column="31"/></expr_stmt> <comment type="block" pos:line="242" pos:column="32">/* zero terminate */</comment>
        }<pos:position pos:line="243" pos:column="10"/></block></then>
        <else pos:line="244" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="245" pos:column="11">badcookie<pos:position pos:line="245" pos:column="20"/></name> <operator pos:line="245" pos:column="21">=<pos:position pos:line="245" pos:column="22"/></operator> <name pos:line="245" pos:column="23">TRUE<pos:position pos:line="245" pos:column="27"/></name></expr>;<pos:position pos:line="245" pos:column="28"/></expr_stmt></block></else></if>
      }<pos:position pos:line="246" pos:column="8"/></block></then></if>
    }<pos:position pos:line="247" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="249" pos:column="5">free<pos:position pos:line="249" pos:column="9"/></name><argument_list pos:line="249" pos:column="9">(<argument><expr><name pos:line="249" pos:column="10">what<pos:position pos:line="249" pos:column="14"/></name></expr></argument>)<pos:position pos:line="249" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="16"/></expr_stmt>

    <if pos:line="251" pos:column="5">if<condition pos:line="251" pos:column="7">(<expr><name pos:line="251" pos:column="8">badcookie<pos:position pos:line="251" pos:column="17"/></name> <operator pos:line="251" pos:column="18">||<pos:position pos:line="251" pos:column="20"/></operator> <operator pos:line="251" pos:column="21">!<pos:position pos:line="251" pos:column="22"/></operator><name><name pos:line="251" pos:column="22">co<pos:position pos:line="251" pos:column="24"/></name><operator pos:line="251" pos:column="24">-&gt;<pos:position pos:line="251" pos:column="29"/></operator><name pos:line="251" pos:column="26">name<pos:position pos:line="251" pos:column="30"/></name></name></expr>)<pos:position pos:line="251" pos:column="31"/></condition><then pos:line="251" pos:column="31"> <block pos:line="251" pos:column="32">{
      <comment type="block" pos:line="252" pos:column="7">/* we didn't get a cookie name or a bad one,
         this is an illegal line, bail out */</comment>
      <expr_stmt><expr><call><name pos:line="254" pos:column="7">freecookie<pos:position pos:line="254" pos:column="17"/></name><argument_list pos:line="254" pos:column="17">(<argument><expr><name pos:line="254" pos:column="18">co<pos:position pos:line="254" pos:column="20"/></name></expr></argument>)<pos:position pos:line="254" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="22"/></expr_stmt>
      <return pos:line="255" pos:column="7">return <expr><name pos:line="255" pos:column="14">NULL<pos:position pos:line="255" pos:column="18"/></name></expr>;<pos:position pos:line="255" pos:column="19"/></return>
    }<pos:position pos:line="256" pos:column="6"/></block></then></if>

  }<pos:position pos:line="258" pos:column="4"/></block></then>
  <else pos:line="259" pos:column="3">else <block pos:line="259" pos:column="8">{
    <comment type="block" pos:line="260" pos:column="5">/* This line is NOT a HTTP header style line, we do offer support for
       reading the odd netscape cookies-file format here */</comment>
    <decl_stmt><decl><type><name pos:line="262" pos:column="5">char<pos:position pos:line="262" pos:column="9"/></name> <modifier pos:line="262" pos:column="10">*<pos:position pos:line="262" pos:column="11"/></modifier></type><name pos:line="262" pos:column="11">firstptr<pos:position pos:line="262" pos:column="19"/></name></decl>;<pos:position pos:line="262" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="263" pos:column="5">char<pos:position pos:line="263" pos:column="9"/></name> <modifier pos:line="263" pos:column="10">*<pos:position pos:line="263" pos:column="11"/></modifier></type><name pos:line="263" pos:column="11">tok_buf<pos:position pos:line="263" pos:column="18"/></name></decl>;<pos:position pos:line="263" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="264" pos:column="5">int<pos:position pos:line="264" pos:column="8"/></name></type> <name pos:line="264" pos:column="9">fields<pos:position pos:line="264" pos:column="15"/></name></decl>;<pos:position pos:line="264" pos:column="16"/></decl_stmt>

    <if pos:line="266" pos:column="5">if<condition pos:line="266" pos:column="7">(<expr><name><name pos:line="266" pos:column="8">lineptr<pos:position pos:line="266" pos:column="15"/></name><index pos:line="266" pos:column="15">[<expr><literal type="number" pos:line="266" pos:column="16">0<pos:position pos:line="266" pos:column="17"/></literal></expr>]<pos:position pos:line="266" pos:column="18"/></index></name><operator pos:line="266" pos:column="18">==<pos:position pos:line="266" pos:column="20"/></operator><literal type="char" pos:line="266" pos:column="20">'#'<pos:position pos:line="266" pos:column="23"/></literal></expr>)<pos:position pos:line="266" pos:column="24"/></condition><then pos:line="266" pos:column="24"> <block pos:line="266" pos:column="25">{
      <comment type="block" pos:line="267" pos:column="7">/* don't even try the comments */</comment>
      <expr_stmt><expr><call><name pos:line="268" pos:column="7">free<pos:position pos:line="268" pos:column="11"/></name><argument_list pos:line="268" pos:column="11">(<argument><expr><name pos:line="268" pos:column="12">co<pos:position pos:line="268" pos:column="14"/></name></expr></argument>)<pos:position pos:line="268" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="16"/></expr_stmt>
      <return pos:line="269" pos:column="7">return <expr><name pos:line="269" pos:column="14">NULL<pos:position pos:line="269" pos:column="18"/></name></expr>;<pos:position pos:line="269" pos:column="19"/></return>
    }<pos:position pos:line="270" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="271" pos:column="5">/* strip off the possible end-of-line characters */</comment>
    <expr_stmt><expr><name pos:line="272" pos:column="5">ptr<pos:position pos:line="272" pos:column="8"/></name><operator pos:line="272" pos:column="8">=<pos:position pos:line="272" pos:column="9"/></operator><call><name pos:line="272" pos:column="9">strchr<pos:position pos:line="272" pos:column="15"/></name><argument_list pos:line="272" pos:column="15">(<argument><expr><name pos:line="272" pos:column="16">lineptr<pos:position pos:line="272" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="272" pos:column="25">'\r'<pos:position pos:line="272" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="272" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="31"/></expr_stmt>
    <if pos:line="273" pos:column="5">if<condition pos:line="273" pos:column="7">(<expr><name pos:line="273" pos:column="8">ptr<pos:position pos:line="273" pos:column="11"/></name></expr>)<pos:position pos:line="273" pos:column="12"/></condition><then pos:line="273" pos:column="12">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="274" pos:column="7">*<pos:position pos:line="274" pos:column="8"/></operator><name pos:line="274" pos:column="8">ptr<pos:position pos:line="274" pos:column="11"/></name><operator pos:line="274" pos:column="11">=<pos:position pos:line="274" pos:column="12"/></operator><literal type="number" pos:line="274" pos:column="12">0<pos:position pos:line="274" pos:column="13"/></literal></expr>;<pos:position pos:line="274" pos:column="14"/></expr_stmt></block></then></if> <comment type="block" pos:line="274" pos:column="15">/* clear it */</comment>
    <expr_stmt><expr><name pos:line="275" pos:column="5">ptr<pos:position pos:line="275" pos:column="8"/></name><operator pos:line="275" pos:column="8">=<pos:position pos:line="275" pos:column="9"/></operator><call><name pos:line="275" pos:column="9">strchr<pos:position pos:line="275" pos:column="15"/></name><argument_list pos:line="275" pos:column="15">(<argument><expr><name pos:line="275" pos:column="16">lineptr<pos:position pos:line="275" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="275" pos:column="25">'\n'<pos:position pos:line="275" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="275" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="31"/></expr_stmt>
    <if pos:line="276" pos:column="5">if<condition pos:line="276" pos:column="7">(<expr><name pos:line="276" pos:column="8">ptr<pos:position pos:line="276" pos:column="11"/></name></expr>)<pos:position pos:line="276" pos:column="12"/></condition><then pos:line="276" pos:column="12">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="277" pos:column="7">*<pos:position pos:line="277" pos:column="8"/></operator><name pos:line="277" pos:column="8">ptr<pos:position pos:line="277" pos:column="11"/></name><operator pos:line="277" pos:column="11">=<pos:position pos:line="277" pos:column="12"/></operator><literal type="number" pos:line="277" pos:column="12">0<pos:position pos:line="277" pos:column="13"/></literal></expr>;<pos:position pos:line="277" pos:column="14"/></expr_stmt></block></then></if> <comment type="block" pos:line="277" pos:column="15">/* clear it */</comment>

    <expr_stmt><expr><name pos:line="279" pos:column="5">firstptr<pos:position pos:line="279" pos:column="13"/></name><operator pos:line="279" pos:column="13">=<pos:position pos:line="279" pos:column="14"/></operator><call><name pos:line="279" pos:column="14">strtok_r<pos:position pos:line="279" pos:column="22"/></name><argument_list pos:line="279" pos:column="22">(<argument><expr><name pos:line="279" pos:column="23">lineptr<pos:position pos:line="279" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="279" pos:column="32">"\t"<pos:position pos:line="279" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="279" pos:column="38">&amp;<pos:position pos:line="279" pos:column="43"/></operator><name pos:line="279" pos:column="39">tok_buf<pos:position pos:line="279" pos:column="46"/></name></expr></argument>)<pos:position pos:line="279" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="48"/></expr_stmt> <comment type="block" pos:line="279" pos:column="49">/* tokenize it on the TAB */</comment>

    <comment type="block" pos:line="281" pos:column="5">/* Here's a quick check to eliminate normal HTTP-headers from this */</comment>
    <if pos:line="282" pos:column="5">if<condition pos:line="282" pos:column="7">(<expr><operator pos:line="282" pos:column="8">!<pos:position pos:line="282" pos:column="9"/></operator><name pos:line="282" pos:column="9">firstptr<pos:position pos:line="282" pos:column="17"/></name> <operator pos:line="282" pos:column="18">||<pos:position pos:line="282" pos:column="20"/></operator> <call><name pos:line="282" pos:column="21">strchr<pos:position pos:line="282" pos:column="27"/></name><argument_list pos:line="282" pos:column="27">(<argument><expr><name pos:line="282" pos:column="28">firstptr<pos:position pos:line="282" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="282" pos:column="38">':'<pos:position pos:line="282" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="282" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="282" pos:column="43"/></condition><then pos:line="282" pos:column="43"> <block pos:line="282" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="283" pos:column="7">free<pos:position pos:line="283" pos:column="11"/></name><argument_list pos:line="283" pos:column="11">(<argument><expr><name pos:line="283" pos:column="12">co<pos:position pos:line="283" pos:column="14"/></name></expr></argument>)<pos:position pos:line="283" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="16"/></expr_stmt>
      <return pos:line="284" pos:column="7">return <expr><name pos:line="284" pos:column="14">NULL<pos:position pos:line="284" pos:column="18"/></name></expr>;<pos:position pos:line="284" pos:column="19"/></return>
    }<pos:position pos:line="285" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="287" pos:column="5">/* Now loop through the fields and init the struct we already have
       allocated */</comment>
    <for pos:line="289" pos:column="5">for<control pos:line="289" pos:column="8">(<init><expr><name pos:line="289" pos:column="9">ptr<pos:position pos:line="289" pos:column="12"/></name><operator pos:line="289" pos:column="12">=<pos:position pos:line="289" pos:column="13"/></operator><name pos:line="289" pos:column="13">firstptr<pos:position pos:line="289" pos:column="21"/></name></expr><operator pos:line="289" pos:column="21">,<pos:position pos:line="289" pos:column="22"/></operator> <expr><name pos:line="289" pos:column="23">fields<pos:position pos:line="289" pos:column="29"/></name><operator pos:line="289" pos:column="29">=<pos:position pos:line="289" pos:column="30"/></operator><literal type="number" pos:line="289" pos:column="30">0<pos:position pos:line="289" pos:column="31"/></literal></expr>;<pos:position pos:line="289" pos:column="32"/></init> <condition><expr><name pos:line="289" pos:column="33">ptr<pos:position pos:line="289" pos:column="36"/></name> <operator pos:line="289" pos:column="37">&amp;&amp;<pos:position pos:line="289" pos:column="47"/></operator> <operator pos:line="289" pos:column="40">!<pos:position pos:line="289" pos:column="41"/></operator><name pos:line="289" pos:column="41">badcookie<pos:position pos:line="289" pos:column="50"/></name></expr>;<pos:position pos:line="289" pos:column="51"/></condition>
        <incr><expr><name pos:line="290" pos:column="9">ptr<pos:position pos:line="290" pos:column="12"/></name><operator pos:line="290" pos:column="12">=<pos:position pos:line="290" pos:column="13"/></operator><call><name pos:line="290" pos:column="13">strtok_r<pos:position pos:line="290" pos:column="21"/></name><argument_list pos:line="290" pos:column="21">(<argument><expr><name pos:line="290" pos:column="22">NULL<pos:position pos:line="290" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="290" pos:column="28">"\t"<pos:position pos:line="290" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="290" pos:column="34">&amp;<pos:position pos:line="290" pos:column="39"/></operator><name pos:line="290" pos:column="35">tok_buf<pos:position pos:line="290" pos:column="42"/></name></expr></argument>)<pos:position pos:line="290" pos:column="43"/></argument_list></call></expr><operator pos:line="290" pos:column="43">,<pos:position pos:line="290" pos:column="44"/></operator> <expr><name pos:line="290" pos:column="45">fields<pos:position pos:line="290" pos:column="51"/></name><operator pos:line="290" pos:column="51">++<pos:position pos:line="290" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="290" pos:column="54"/></control> <block pos:line="290" pos:column="55">{
      <switch pos:line="291" pos:column="7">switch<condition pos:line="291" pos:column="13">(<expr><name pos:line="291" pos:column="14">fields<pos:position pos:line="291" pos:column="20"/></name></expr>)<pos:position pos:line="291" pos:column="21"/></condition> <block pos:line="291" pos:column="22">{
      <case pos:line="292" pos:column="7">case <expr><literal type="number" pos:line="292" pos:column="12">0<pos:position pos:line="292" pos:column="13"/></literal></expr>:<pos:position pos:line="292" pos:column="14"/></case>
        <if pos:line="293" pos:column="9">if<condition pos:line="293" pos:column="11">(<expr><name><name pos:line="293" pos:column="12">ptr<pos:position pos:line="293" pos:column="15"/></name><index pos:line="293" pos:column="15">[<expr><literal type="number" pos:line="293" pos:column="16">0<pos:position pos:line="293" pos:column="17"/></literal></expr>]<pos:position pos:line="293" pos:column="18"/></index></name><operator pos:line="293" pos:column="18">==<pos:position pos:line="293" pos:column="20"/></operator><literal type="char" pos:line="293" pos:column="20">'.'<pos:position pos:line="293" pos:column="23"/></literal></expr>)<pos:position pos:line="293" pos:column="24"/></condition><then pos:line="293" pos:column="24"> <comment type="block" pos:line="293" pos:column="25">/* skip preceeding dots */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="294" pos:column="11">ptr<pos:position pos:line="294" pos:column="14"/></name><operator pos:line="294" pos:column="14">++<pos:position pos:line="294" pos:column="16"/></operator></expr>;<pos:position pos:line="294" pos:column="17"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name><name pos:line="295" pos:column="9">co<pos:position pos:line="295" pos:column="11"/></name><operator pos:line="295" pos:column="11">-&gt;<pos:position pos:line="295" pos:column="16"/></operator><name pos:line="295" pos:column="13">domain<pos:position pos:line="295" pos:column="19"/></name></name> <operator pos:line="295" pos:column="20">=<pos:position pos:line="295" pos:column="21"/></operator> <call><name pos:line="295" pos:column="22">strdup<pos:position pos:line="295" pos:column="28"/></name><argument_list pos:line="295" pos:column="28">(<argument><expr><name pos:line="295" pos:column="29">ptr<pos:position pos:line="295" pos:column="32"/></name></expr></argument>)<pos:position pos:line="295" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="295" pos:column="34"/></expr_stmt>
        <if pos:line="296" pos:column="9">if<condition pos:line="296" pos:column="11">(<expr><operator pos:line="296" pos:column="12">!<pos:position pos:line="296" pos:column="13"/></operator><name><name pos:line="296" pos:column="13">co<pos:position pos:line="296" pos:column="15"/></name><operator pos:line="296" pos:column="15">-&gt;<pos:position pos:line="296" pos:column="20"/></operator><name pos:line="296" pos:column="17">domain<pos:position pos:line="296" pos:column="23"/></name></name></expr>)<pos:position pos:line="296" pos:column="24"/></condition><then pos:line="296" pos:column="24">
          <block type="pseudo"><expr_stmt><expr><name pos:line="297" pos:column="11">badcookie<pos:position pos:line="297" pos:column="20"/></name> <operator pos:line="297" pos:column="21">=<pos:position pos:line="297" pos:column="22"/></operator> <name pos:line="297" pos:column="23">TRUE<pos:position pos:line="297" pos:column="27"/></name></expr>;<pos:position pos:line="297" pos:column="28"/></expr_stmt></block></then></if>
        <break pos:line="298" pos:column="9">break;<pos:position pos:line="298" pos:column="15"/></break>
      <case pos:line="299" pos:column="7">case <expr><literal type="number" pos:line="299" pos:column="12">1<pos:position pos:line="299" pos:column="13"/></literal></expr>:<pos:position pos:line="299" pos:column="14"/></case>
        <comment type="block" pos:line="300" pos:column="9">/* This field got its explanation on the 23rd of May 2001 by
           Andrés García:

           flag: A TRUE/FALSE value indicating if all machines within a given
           domain can access the variable. This value is set automatically by
           the browser, depending on the value you set for the domain.

           As far as I can see, it is set to true when the cookie says
           .domain.com and to false when the domain is complete www.domain.com
        */</comment>
        <expr_stmt><expr><name><name pos:line="310" pos:column="9">co<pos:position pos:line="310" pos:column="11"/></name><operator pos:line="310" pos:column="11">-&gt;<pos:position pos:line="310" pos:column="16"/></operator><name pos:line="310" pos:column="13">tailmatch<pos:position pos:line="310" pos:column="22"/></name></name><operator pos:line="310" pos:column="22">=<pos:position pos:line="310" pos:column="23"/></operator><operator pos:line="310" pos:column="23">(<pos:position pos:line="310" pos:column="24"/></operator><name pos:line="310" pos:column="24">bool<pos:position pos:line="310" pos:column="28"/></name><operator pos:line="310" pos:column="28">)<pos:position pos:line="310" pos:column="29"/></operator><call><name pos:line="310" pos:column="29">strequal<pos:position pos:line="310" pos:column="37"/></name><argument_list pos:line="310" pos:column="37">(<argument><expr><name pos:line="310" pos:column="38">ptr<pos:position pos:line="310" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="310" pos:column="43">"TRUE"<pos:position pos:line="310" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="310" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="310" pos:column="51"/></expr_stmt> <comment type="block" pos:line="310" pos:column="52">/* store information */</comment>
        <break pos:line="311" pos:column="9">break;<pos:position pos:line="311" pos:column="15"/></break>
      <case pos:line="312" pos:column="7">case <expr><literal type="number" pos:line="312" pos:column="12">2<pos:position pos:line="312" pos:column="13"/></literal></expr>:<pos:position pos:line="312" pos:column="14"/></case>
        <comment type="block" pos:line="313" pos:column="9">/* It turns out, that sometimes the file format allows the path
           field to remain not filled in, we try to detect this and work
           around it! Andrés García made us aware of this... */</comment>
        <if pos:line="316" pos:column="9">if <condition pos:line="316" pos:column="12">(<expr><call><name pos:line="316" pos:column="13">strcmp<pos:position pos:line="316" pos:column="19"/></name><argument_list pos:line="316" pos:column="19">(<argument><expr><literal type="string" pos:line="316" pos:column="20">"TRUE"<pos:position pos:line="316" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="316" pos:column="28">ptr<pos:position pos:line="316" pos:column="31"/></name></expr></argument>)<pos:position pos:line="316" pos:column="32"/></argument_list></call> <operator pos:line="316" pos:column="33">&amp;&amp;<pos:position pos:line="316" pos:column="43"/></operator> <call><name pos:line="316" pos:column="36">strcmp<pos:position pos:line="316" pos:column="42"/></name><argument_list pos:line="316" pos:column="42">(<argument><expr><literal type="string" pos:line="316" pos:column="43">"FALSE"<pos:position pos:line="316" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="316" pos:column="52">ptr<pos:position pos:line="316" pos:column="55"/></name></expr></argument>)<pos:position pos:line="316" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="316" pos:column="57"/></condition><then pos:line="316" pos:column="57"> <block pos:line="316" pos:column="58">{
          <comment type="block" pos:line="317" pos:column="11">/* only if the path doesn't look like a boolean option! */</comment>
          <expr_stmt><expr><name><name pos:line="318" pos:column="11">co<pos:position pos:line="318" pos:column="13"/></name><operator pos:line="318" pos:column="13">-&gt;<pos:position pos:line="318" pos:column="18"/></operator><name pos:line="318" pos:column="15">path<pos:position pos:line="318" pos:column="19"/></name></name> <operator pos:line="318" pos:column="20">=<pos:position pos:line="318" pos:column="21"/></operator> <call><name pos:line="318" pos:column="22">strdup<pos:position pos:line="318" pos:column="28"/></name><argument_list pos:line="318" pos:column="28">(<argument><expr><name pos:line="318" pos:column="29">ptr<pos:position pos:line="318" pos:column="32"/></name></expr></argument>)<pos:position pos:line="318" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="318" pos:column="34"/></expr_stmt>
          <if pos:line="319" pos:column="11">if<condition pos:line="319" pos:column="13">(<expr><operator pos:line="319" pos:column="14">!<pos:position pos:line="319" pos:column="15"/></operator><name><name pos:line="319" pos:column="15">co<pos:position pos:line="319" pos:column="17"/></name><operator pos:line="319" pos:column="17">-&gt;<pos:position pos:line="319" pos:column="22"/></operator><name pos:line="319" pos:column="19">path<pos:position pos:line="319" pos:column="23"/></name></name></expr>)<pos:position pos:line="319" pos:column="24"/></condition><then pos:line="319" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><name pos:line="320" pos:column="13">badcookie<pos:position pos:line="320" pos:column="22"/></name> <operator pos:line="320" pos:column="23">=<pos:position pos:line="320" pos:column="24"/></operator> <name pos:line="320" pos:column="25">TRUE<pos:position pos:line="320" pos:column="29"/></name></expr>;<pos:position pos:line="320" pos:column="30"/></expr_stmt></block></then></if>
          <break pos:line="321" pos:column="11">break;<pos:position pos:line="321" pos:column="17"/></break>
        }<pos:position pos:line="322" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="323" pos:column="9">/* this doesn't look like a path, make one up! */</comment>
        <expr_stmt><expr><name><name pos:line="324" pos:column="9">co<pos:position pos:line="324" pos:column="11"/></name><operator pos:line="324" pos:column="11">-&gt;<pos:position pos:line="324" pos:column="16"/></operator><name pos:line="324" pos:column="13">path<pos:position pos:line="324" pos:column="17"/></name></name> <operator pos:line="324" pos:column="18">=<pos:position pos:line="324" pos:column="19"/></operator> <call><name pos:line="324" pos:column="20">strdup<pos:position pos:line="324" pos:column="26"/></name><argument_list pos:line="324" pos:column="26">(<argument><expr><literal type="string" pos:line="324" pos:column="27">"/"<pos:position pos:line="324" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="324" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="32"/></expr_stmt>
        <if pos:line="325" pos:column="9">if<condition pos:line="325" pos:column="11">(<expr><operator pos:line="325" pos:column="12">!<pos:position pos:line="325" pos:column="13"/></operator><name><name pos:line="325" pos:column="13">co<pos:position pos:line="325" pos:column="15"/></name><operator pos:line="325" pos:column="15">-&gt;<pos:position pos:line="325" pos:column="20"/></operator><name pos:line="325" pos:column="17">path<pos:position pos:line="325" pos:column="21"/></name></name></expr>)<pos:position pos:line="325" pos:column="22"/></condition><then pos:line="325" pos:column="22">
          <block type="pseudo"><expr_stmt><expr><name pos:line="326" pos:column="11">badcookie<pos:position pos:line="326" pos:column="20"/></name> <operator pos:line="326" pos:column="21">=<pos:position pos:line="326" pos:column="22"/></operator> <name pos:line="326" pos:column="23">TRUE<pos:position pos:line="326" pos:column="27"/></name></expr>;<pos:position pos:line="326" pos:column="28"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="327" pos:column="9">fields<pos:position pos:line="327" pos:column="15"/></name><operator pos:line="327" pos:column="15">++<pos:position pos:line="327" pos:column="17"/></operator></expr>;<pos:position pos:line="327" pos:column="18"/></expr_stmt> <comment type="block" pos:line="327" pos:column="19">/* add a field and fall down to secure */</comment>
        <comment type="block" pos:line="328" pos:column="9">/* FALLTHROUGH */</comment>
      <case pos:line="329" pos:column="7">case <expr><literal type="number" pos:line="329" pos:column="12">3<pos:position pos:line="329" pos:column="13"/></literal></expr>:<pos:position pos:line="329" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="330" pos:column="9">co<pos:position pos:line="330" pos:column="11"/></name><operator pos:line="330" pos:column="11">-&gt;<pos:position pos:line="330" pos:column="16"/></operator><name pos:line="330" pos:column="13">secure<pos:position pos:line="330" pos:column="19"/></name></name> <operator pos:line="330" pos:column="20">=<pos:position pos:line="330" pos:column="21"/></operator> <operator pos:line="330" pos:column="22">(<pos:position pos:line="330" pos:column="23"/></operator><name pos:line="330" pos:column="23">bool<pos:position pos:line="330" pos:column="27"/></name><operator pos:line="330" pos:column="27">)<pos:position pos:line="330" pos:column="28"/></operator><call><name pos:line="330" pos:column="28">strequal<pos:position pos:line="330" pos:column="36"/></name><argument_list pos:line="330" pos:column="36">(<argument><expr><name pos:line="330" pos:column="37">ptr<pos:position pos:line="330" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="330" pos:column="42">"TRUE"<pos:position pos:line="330" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="330" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="330" pos:column="50"/></expr_stmt>
        <break pos:line="331" pos:column="9">break;<pos:position pos:line="331" pos:column="15"/></break>
      <case pos:line="332" pos:column="7">case <expr><literal type="number" pos:line="332" pos:column="12">4<pos:position pos:line="332" pos:column="13"/></literal></expr>:<pos:position pos:line="332" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="333" pos:column="9">co<pos:position pos:line="333" pos:column="11"/></name><operator pos:line="333" pos:column="11">-&gt;<pos:position pos:line="333" pos:column="16"/></operator><name pos:line="333" pos:column="13">expires<pos:position pos:line="333" pos:column="20"/></name></name> <operator pos:line="333" pos:column="21">=<pos:position pos:line="333" pos:column="22"/></operator> <call><name pos:line="333" pos:column="23">atoi<pos:position pos:line="333" pos:column="27"/></name><argument_list pos:line="333" pos:column="27">(<argument><expr><name pos:line="333" pos:column="28">ptr<pos:position pos:line="333" pos:column="31"/></name></expr></argument>)<pos:position pos:line="333" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="333" pos:column="33"/></expr_stmt>
        <break pos:line="334" pos:column="9">break;<pos:position pos:line="334" pos:column="15"/></break>
      <case pos:line="335" pos:column="7">case <expr><literal type="number" pos:line="335" pos:column="12">5<pos:position pos:line="335" pos:column="13"/></literal></expr>:<pos:position pos:line="335" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="336" pos:column="9">co<pos:position pos:line="336" pos:column="11"/></name><operator pos:line="336" pos:column="11">-&gt;<pos:position pos:line="336" pos:column="16"/></operator><name pos:line="336" pos:column="13">name<pos:position pos:line="336" pos:column="17"/></name></name> <operator pos:line="336" pos:column="18">=<pos:position pos:line="336" pos:column="19"/></operator> <call><name pos:line="336" pos:column="20">strdup<pos:position pos:line="336" pos:column="26"/></name><argument_list pos:line="336" pos:column="26">(<argument><expr><name pos:line="336" pos:column="27">ptr<pos:position pos:line="336" pos:column="30"/></name></expr></argument>)<pos:position pos:line="336" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="336" pos:column="32"/></expr_stmt>
        <if pos:line="337" pos:column="9">if<condition pos:line="337" pos:column="11">(<expr><operator pos:line="337" pos:column="12">!<pos:position pos:line="337" pos:column="13"/></operator><name><name pos:line="337" pos:column="13">co<pos:position pos:line="337" pos:column="15"/></name><operator pos:line="337" pos:column="15">-&gt;<pos:position pos:line="337" pos:column="20"/></operator><name pos:line="337" pos:column="17">name<pos:position pos:line="337" pos:column="21"/></name></name></expr>)<pos:position pos:line="337" pos:column="22"/></condition><then pos:line="337" pos:column="22">
          <block type="pseudo"><expr_stmt><expr><name pos:line="338" pos:column="11">badcookie<pos:position pos:line="338" pos:column="20"/></name> <operator pos:line="338" pos:column="21">=<pos:position pos:line="338" pos:column="22"/></operator> <name pos:line="338" pos:column="23">TRUE<pos:position pos:line="338" pos:column="27"/></name></expr>;<pos:position pos:line="338" pos:column="28"/></expr_stmt></block></then></if>
        <break pos:line="339" pos:column="9">break;<pos:position pos:line="339" pos:column="15"/></break>
      <case pos:line="340" pos:column="7">case <expr><literal type="number" pos:line="340" pos:column="12">6<pos:position pos:line="340" pos:column="13"/></literal></expr>:<pos:position pos:line="340" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="341" pos:column="9">co<pos:position pos:line="341" pos:column="11"/></name><operator pos:line="341" pos:column="11">-&gt;<pos:position pos:line="341" pos:column="16"/></operator><name pos:line="341" pos:column="13">value<pos:position pos:line="341" pos:column="18"/></name></name> <operator pos:line="341" pos:column="19">=<pos:position pos:line="341" pos:column="20"/></operator> <call><name pos:line="341" pos:column="21">strdup<pos:position pos:line="341" pos:column="27"/></name><argument_list pos:line="341" pos:column="27">(<argument><expr><name pos:line="341" pos:column="28">ptr<pos:position pos:line="341" pos:column="31"/></name></expr></argument>)<pos:position pos:line="341" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="341" pos:column="33"/></expr_stmt>
        <if pos:line="342" pos:column="9">if<condition pos:line="342" pos:column="11">(<expr><operator pos:line="342" pos:column="12">!<pos:position pos:line="342" pos:column="13"/></operator><name><name pos:line="342" pos:column="13">co<pos:position pos:line="342" pos:column="15"/></name><operator pos:line="342" pos:column="15">-&gt;<pos:position pos:line="342" pos:column="20"/></operator><name pos:line="342" pos:column="17">value<pos:position pos:line="342" pos:column="22"/></name></name></expr>)<pos:position pos:line="342" pos:column="23"/></condition><then pos:line="342" pos:column="23">
          <block type="pseudo"><expr_stmt><expr><name pos:line="343" pos:column="11">badcookie<pos:position pos:line="343" pos:column="20"/></name> <operator pos:line="343" pos:column="21">=<pos:position pos:line="343" pos:column="22"/></operator> <name pos:line="343" pos:column="23">TRUE<pos:position pos:line="343" pos:column="27"/></name></expr>;<pos:position pos:line="343" pos:column="28"/></expr_stmt></block></then></if>
        <break pos:line="344" pos:column="9">break;<pos:position pos:line="344" pos:column="15"/></break>
      }<pos:position pos:line="345" pos:column="8"/></block></switch>
    }<pos:position pos:line="346" pos:column="6"/></block></for>
    <if pos:line="347" pos:column="5">if<condition pos:line="347" pos:column="7">(<expr><literal type="number" pos:line="347" pos:column="8">6<pos:position pos:line="347" pos:column="9"/></literal> <operator pos:line="347" pos:column="10">==<pos:position pos:line="347" pos:column="12"/></operator> <name pos:line="347" pos:column="13">fields<pos:position pos:line="347" pos:column="19"/></name></expr>)<pos:position pos:line="347" pos:column="20"/></condition><then pos:line="347" pos:column="20"> <block pos:line="347" pos:column="21">{
      <comment type="block" pos:line="348" pos:column="7">/* we got a cookie with blank contents, fix it */</comment>
      <expr_stmt><expr><name><name pos:line="349" pos:column="7">co<pos:position pos:line="349" pos:column="9"/></name><operator pos:line="349" pos:column="9">-&gt;<pos:position pos:line="349" pos:column="14"/></operator><name pos:line="349" pos:column="11">value<pos:position pos:line="349" pos:column="16"/></name></name> <operator pos:line="349" pos:column="17">=<pos:position pos:line="349" pos:column="18"/></operator> <call><name pos:line="349" pos:column="19">strdup<pos:position pos:line="349" pos:column="25"/></name><argument_list pos:line="349" pos:column="25">(<argument><expr><literal type="string" pos:line="349" pos:column="26">""<pos:position pos:line="349" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="349" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="349" pos:column="30"/></expr_stmt>
      <if pos:line="350" pos:column="7">if<condition pos:line="350" pos:column="9">(<expr><operator pos:line="350" pos:column="10">!<pos:position pos:line="350" pos:column="11"/></operator><name><name pos:line="350" pos:column="11">co<pos:position pos:line="350" pos:column="13"/></name><operator pos:line="350" pos:column="13">-&gt;<pos:position pos:line="350" pos:column="18"/></operator><name pos:line="350" pos:column="15">value<pos:position pos:line="350" pos:column="20"/></name></name></expr>)<pos:position pos:line="350" pos:column="21"/></condition><then pos:line="350" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><name pos:line="351" pos:column="9">badcookie<pos:position pos:line="351" pos:column="18"/></name> <operator pos:line="351" pos:column="19">=<pos:position pos:line="351" pos:column="20"/></operator> <name pos:line="351" pos:column="21">TRUE<pos:position pos:line="351" pos:column="25"/></name></expr>;<pos:position pos:line="351" pos:column="26"/></expr_stmt></block></then>
      <else pos:line="352" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="353" pos:column="9">fields<pos:position pos:line="353" pos:column="15"/></name><operator pos:line="353" pos:column="15">++<pos:position pos:line="353" pos:column="17"/></operator></expr>;<pos:position pos:line="353" pos:column="18"/></expr_stmt></block></else></if>
    }<pos:position pos:line="354" pos:column="6"/></block></then></if>

    <if pos:line="356" pos:column="5">if<condition pos:line="356" pos:column="7">(<expr><operator pos:line="356" pos:column="8">!<pos:position pos:line="356" pos:column="9"/></operator><name pos:line="356" pos:column="9">badcookie<pos:position pos:line="356" pos:column="18"/></name> <operator pos:line="356" pos:column="19">&amp;&amp;<pos:position pos:line="356" pos:column="29"/></operator> <operator pos:line="356" pos:column="22">(<pos:position pos:line="356" pos:column="23"/></operator><literal type="number" pos:line="356" pos:column="23">7<pos:position pos:line="356" pos:column="24"/></literal> <operator pos:line="356" pos:column="25">!=<pos:position pos:line="356" pos:column="27"/></operator> <name pos:line="356" pos:column="28">fields<pos:position pos:line="356" pos:column="34"/></name><operator pos:line="356" pos:column="34">)<pos:position pos:line="356" pos:column="35"/></operator></expr>)<pos:position pos:line="356" pos:column="36"/></condition><then pos:line="356" pos:column="36">
      <comment type="block" pos:line="357" pos:column="7">/* we did not find the sufficient number of fields */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="358" pos:column="7">badcookie<pos:position pos:line="358" pos:column="16"/></name> <operator pos:line="358" pos:column="17">=<pos:position pos:line="358" pos:column="18"/></operator> <name pos:line="358" pos:column="19">TRUE<pos:position pos:line="358" pos:column="23"/></name></expr>;<pos:position pos:line="358" pos:column="24"/></expr_stmt></block></then></if>

    <if pos:line="360" pos:column="5">if<condition pos:line="360" pos:column="7">(<expr><name pos:line="360" pos:column="8">badcookie<pos:position pos:line="360" pos:column="17"/></name></expr>)<pos:position pos:line="360" pos:column="18"/></condition><then pos:line="360" pos:column="18"> <block pos:line="360" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="361" pos:column="7">freecookie<pos:position pos:line="361" pos:column="17"/></name><argument_list pos:line="361" pos:column="17">(<argument><expr><name pos:line="361" pos:column="18">co<pos:position pos:line="361" pos:column="20"/></name></expr></argument>)<pos:position pos:line="361" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="361" pos:column="22"/></expr_stmt>
      <return pos:line="362" pos:column="7">return <expr><name pos:line="362" pos:column="14">NULL<pos:position pos:line="362" pos:column="18"/></name></expr>;<pos:position pos:line="362" pos:column="19"/></return>
    }<pos:position pos:line="363" pos:column="6"/></block></then></if>

  }<pos:position pos:line="365" pos:column="4"/></block></else></if>

  <if pos:line="367" pos:column="3">if<condition pos:line="367" pos:column="5">(<expr><operator pos:line="367" pos:column="6">!<pos:position pos:line="367" pos:column="7"/></operator><name><name pos:line="367" pos:column="7">c<pos:position pos:line="367" pos:column="8"/></name><operator pos:line="367" pos:column="8">-&gt;<pos:position pos:line="367" pos:column="13"/></operator><name pos:line="367" pos:column="10">running<pos:position pos:line="367" pos:column="17"/></name></name> <operator pos:line="367" pos:column="18">&amp;&amp;<pos:position pos:line="367" pos:column="28"/></operator>    <comment type="block" pos:line="367" pos:column="24">/* read from a file */</comment>
     <name><name pos:line="368" pos:column="6">c<pos:position pos:line="368" pos:column="7"/></name><operator pos:line="368" pos:column="7">-&gt;<pos:position pos:line="368" pos:column="12"/></operator><name pos:line="368" pos:column="9">newsession<pos:position pos:line="368" pos:column="19"/></name></name> <operator pos:line="368" pos:column="20">&amp;&amp;<pos:position pos:line="368" pos:column="30"/></operator>  <comment type="block" pos:line="368" pos:column="24">/* clean session cookies */</comment>
     <operator pos:line="369" pos:column="6">!<pos:position pos:line="369" pos:column="7"/></operator><name><name pos:line="369" pos:column="7">co<pos:position pos:line="369" pos:column="9"/></name><operator pos:line="369" pos:column="9">-&gt;<pos:position pos:line="369" pos:column="14"/></operator><name pos:line="369" pos:column="11">expires<pos:position pos:line="369" pos:column="18"/></name></name></expr>)<pos:position pos:line="369" pos:column="19"/></condition><then pos:line="369" pos:column="19"> <block pos:line="369" pos:column="20">{   <comment type="block" pos:line="369" pos:column="24">/* this is a session cookie since it doesn't expire! */</comment>
    <expr_stmt><expr><call><name pos:line="370" pos:column="5">freecookie<pos:position pos:line="370" pos:column="15"/></name><argument_list pos:line="370" pos:column="15">(<argument><expr><name pos:line="370" pos:column="16">co<pos:position pos:line="370" pos:column="18"/></name></expr></argument>)<pos:position pos:line="370" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="370" pos:column="20"/></expr_stmt>
    <return pos:line="371" pos:column="5">return <expr><name pos:line="371" pos:column="12">NULL<pos:position pos:line="371" pos:column="16"/></name></expr>;<pos:position pos:line="371" pos:column="17"/></return>
  }<pos:position pos:line="372" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="374" pos:column="3">co<pos:position pos:line="374" pos:column="5"/></name><operator pos:line="374" pos:column="5">-&gt;<pos:position pos:line="374" pos:column="10"/></operator><name pos:line="374" pos:column="7">livecookie<pos:position pos:line="374" pos:column="17"/></name></name> <operator pos:line="374" pos:column="18">=<pos:position pos:line="374" pos:column="19"/></operator> <name><name pos:line="374" pos:column="20">c<pos:position pos:line="374" pos:column="21"/></name><operator pos:line="374" pos:column="21">-&gt;<pos:position pos:line="374" pos:column="26"/></operator><name pos:line="374" pos:column="23">running<pos:position pos:line="374" pos:column="30"/></name></name></expr>;<pos:position pos:line="374" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="376" pos:column="3">/* now, we have parsed the incoming line, we must now check if this
     superceeds an already existing cookie, which it may if the previous have
     the same domain and path as this */</comment>

  <expr_stmt><expr><name pos:line="380" pos:column="3">clist<pos:position pos:line="380" pos:column="8"/></name> <operator pos:line="380" pos:column="9">=<pos:position pos:line="380" pos:column="10"/></operator> <name><name pos:line="380" pos:column="11">c<pos:position pos:line="380" pos:column="12"/></name><operator pos:line="380" pos:column="12">-&gt;<pos:position pos:line="380" pos:column="17"/></operator><name pos:line="380" pos:column="14">cookies<pos:position pos:line="380" pos:column="21"/></name></name></expr>;<pos:position pos:line="380" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="381" pos:column="3">replace_old<pos:position pos:line="381" pos:column="14"/></name> <operator pos:line="381" pos:column="15">=<pos:position pos:line="381" pos:column="16"/></operator> <name pos:line="381" pos:column="17">FALSE<pos:position pos:line="381" pos:column="22"/></name></expr>;<pos:position pos:line="381" pos:column="23"/></expr_stmt>
  <while pos:line="382" pos:column="3">while<condition pos:line="382" pos:column="8">(<expr><name pos:line="382" pos:column="9">clist<pos:position pos:line="382" pos:column="14"/></name></expr>)<pos:position pos:line="382" pos:column="15"/></condition> <block pos:line="382" pos:column="16">{
    <if pos:line="383" pos:column="5">if<condition pos:line="383" pos:column="7">(<expr><call><name pos:line="383" pos:column="8">strequal<pos:position pos:line="383" pos:column="16"/></name><argument_list pos:line="383" pos:column="16">(<argument><expr><name><name pos:line="383" pos:column="17">clist<pos:position pos:line="383" pos:column="22"/></name><operator pos:line="383" pos:column="22">-&gt;<pos:position pos:line="383" pos:column="27"/></operator><name pos:line="383" pos:column="24">name<pos:position pos:line="383" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="383" pos:column="30">co<pos:position pos:line="383" pos:column="32"/></name><operator pos:line="383" pos:column="32">-&gt;<pos:position pos:line="383" pos:column="37"/></operator><name pos:line="383" pos:column="34">name<pos:position pos:line="383" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="383" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="383" pos:column="40"/></condition><then pos:line="383" pos:column="40"> <block pos:line="383" pos:column="41">{
      <comment type="block" pos:line="384" pos:column="7">/* the names are identical */</comment>

      <if pos:line="386" pos:column="7">if<condition pos:line="386" pos:column="9">(<expr><name><name pos:line="386" pos:column="10">clist<pos:position pos:line="386" pos:column="15"/></name><operator pos:line="386" pos:column="15">-&gt;<pos:position pos:line="386" pos:column="20"/></operator><name pos:line="386" pos:column="17">domain<pos:position pos:line="386" pos:column="23"/></name></name> <operator pos:line="386" pos:column="24">&amp;&amp;<pos:position pos:line="386" pos:column="34"/></operator> <name><name pos:line="386" pos:column="27">co<pos:position pos:line="386" pos:column="29"/></name><operator pos:line="386" pos:column="29">-&gt;<pos:position pos:line="386" pos:column="34"/></operator><name pos:line="386" pos:column="31">domain<pos:position pos:line="386" pos:column="37"/></name></name></expr>)<pos:position pos:line="386" pos:column="38"/></condition><then pos:line="386" pos:column="38"> <block pos:line="386" pos:column="39">{
        <if pos:line="387" pos:column="9">if<condition pos:line="387" pos:column="11">(<expr><call><name pos:line="387" pos:column="12">strequal<pos:position pos:line="387" pos:column="20"/></name><argument_list pos:line="387" pos:column="20">(<argument><expr><name><name pos:line="387" pos:column="21">clist<pos:position pos:line="387" pos:column="26"/></name><operator pos:line="387" pos:column="26">-&gt;<pos:position pos:line="387" pos:column="31"/></operator><name pos:line="387" pos:column="28">domain<pos:position pos:line="387" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="387" pos:column="36">co<pos:position pos:line="387" pos:column="38"/></name><operator pos:line="387" pos:column="38">-&gt;<pos:position pos:line="387" pos:column="43"/></operator><name pos:line="387" pos:column="40">domain<pos:position pos:line="387" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="387" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="387" pos:column="48"/></condition><then pos:line="387" pos:column="48">
          <comment type="block" pos:line="388" pos:column="11">/* The domains are identical */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="389" pos:column="11">replace_old<pos:position pos:line="389" pos:column="22"/></name><operator pos:line="389" pos:column="22">=<pos:position pos:line="389" pos:column="23"/></operator><name pos:line="389" pos:column="23">TRUE<pos:position pos:line="389" pos:column="27"/></name></expr>;<pos:position pos:line="389" pos:column="28"/></expr_stmt></block></then></if>
      }<pos:position pos:line="390" pos:column="8"/></block></then>
      <elseif pos:line="391" pos:column="7">else <if pos:line="391" pos:column="12">if<condition pos:line="391" pos:column="14">(<expr><operator pos:line="391" pos:column="15">!<pos:position pos:line="391" pos:column="16"/></operator><name><name pos:line="391" pos:column="16">clist<pos:position pos:line="391" pos:column="21"/></name><operator pos:line="391" pos:column="21">-&gt;<pos:position pos:line="391" pos:column="26"/></operator><name pos:line="391" pos:column="23">domain<pos:position pos:line="391" pos:column="29"/></name></name> <operator pos:line="391" pos:column="30">&amp;&amp;<pos:position pos:line="391" pos:column="40"/></operator> <operator pos:line="391" pos:column="33">!<pos:position pos:line="391" pos:column="34"/></operator><name><name pos:line="391" pos:column="34">co<pos:position pos:line="391" pos:column="36"/></name><operator pos:line="391" pos:column="36">-&gt;<pos:position pos:line="391" pos:column="41"/></operator><name pos:line="391" pos:column="38">domain<pos:position pos:line="391" pos:column="44"/></name></name></expr>)<pos:position pos:line="391" pos:column="45"/></condition><then pos:line="391" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><name pos:line="392" pos:column="9">replace_old<pos:position pos:line="392" pos:column="20"/></name> <operator pos:line="392" pos:column="21">=<pos:position pos:line="392" pos:column="22"/></operator> <name pos:line="392" pos:column="23">TRUE<pos:position pos:line="392" pos:column="27"/></name></expr>;<pos:position pos:line="392" pos:column="28"/></expr_stmt></block></then></if></elseif></if>

      <if pos:line="394" pos:column="7">if<condition pos:line="394" pos:column="9">(<expr><name pos:line="394" pos:column="10">replace_old<pos:position pos:line="394" pos:column="21"/></name></expr>)<pos:position pos:line="394" pos:column="22"/></condition><then pos:line="394" pos:column="22"> <block pos:line="394" pos:column="23">{
        <comment type="block" pos:line="395" pos:column="9">/* the domains were identical */</comment>

        <if pos:line="397" pos:column="9">if<condition pos:line="397" pos:column="11">(<expr><name><name pos:line="397" pos:column="12">clist<pos:position pos:line="397" pos:column="17"/></name><operator pos:line="397" pos:column="17">-&gt;<pos:position pos:line="397" pos:column="22"/></operator><name pos:line="397" pos:column="19">path<pos:position pos:line="397" pos:column="23"/></name></name> <operator pos:line="397" pos:column="24">&amp;&amp;<pos:position pos:line="397" pos:column="34"/></operator> <name><name pos:line="397" pos:column="27">co<pos:position pos:line="397" pos:column="29"/></name><operator pos:line="397" pos:column="29">-&gt;<pos:position pos:line="397" pos:column="34"/></operator><name pos:line="397" pos:column="31">path<pos:position pos:line="397" pos:column="35"/></name></name></expr>)<pos:position pos:line="397" pos:column="36"/></condition><then pos:line="397" pos:column="36"> <block pos:line="397" pos:column="37">{
          <if pos:line="398" pos:column="11">if<condition pos:line="398" pos:column="13">(<expr><call><name pos:line="398" pos:column="14">strequal<pos:position pos:line="398" pos:column="22"/></name><argument_list pos:line="398" pos:column="22">(<argument><expr><name><name pos:line="398" pos:column="23">clist<pos:position pos:line="398" pos:column="28"/></name><operator pos:line="398" pos:column="28">-&gt;<pos:position pos:line="398" pos:column="33"/></operator><name pos:line="398" pos:column="30">path<pos:position pos:line="398" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="398" pos:column="36">co<pos:position pos:line="398" pos:column="38"/></name><operator pos:line="398" pos:column="38">-&gt;<pos:position pos:line="398" pos:column="43"/></operator><name pos:line="398" pos:column="40">path<pos:position pos:line="398" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="398" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="398" pos:column="46"/></condition><then pos:line="398" pos:column="46"> <block pos:line="398" pos:column="47">{
            <expr_stmt><expr><name pos:line="399" pos:column="13">replace_old<pos:position pos:line="399" pos:column="24"/></name> <operator pos:line="399" pos:column="25">=<pos:position pos:line="399" pos:column="26"/></operator> <name pos:line="399" pos:column="27">TRUE<pos:position pos:line="399" pos:column="31"/></name></expr>;<pos:position pos:line="399" pos:column="32"/></expr_stmt>
          }<pos:position pos:line="400" pos:column="12"/></block></then>
          <else pos:line="401" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="402" pos:column="13">replace_old<pos:position pos:line="402" pos:column="24"/></name> <operator pos:line="402" pos:column="25">=<pos:position pos:line="402" pos:column="26"/></operator> <name pos:line="402" pos:column="27">FALSE<pos:position pos:line="402" pos:column="32"/></name></expr>;<pos:position pos:line="402" pos:column="33"/></expr_stmt></block></else></if>
        }<pos:position pos:line="403" pos:column="10"/></block></then>
        <elseif pos:line="404" pos:column="9">else <if pos:line="404" pos:column="14">if<condition pos:line="404" pos:column="16">(<expr><operator pos:line="404" pos:column="17">!<pos:position pos:line="404" pos:column="18"/></operator><name><name pos:line="404" pos:column="18">clist<pos:position pos:line="404" pos:column="23"/></name><operator pos:line="404" pos:column="23">-&gt;<pos:position pos:line="404" pos:column="28"/></operator><name pos:line="404" pos:column="25">path<pos:position pos:line="404" pos:column="29"/></name></name> <operator pos:line="404" pos:column="30">&amp;&amp;<pos:position pos:line="404" pos:column="40"/></operator> <operator pos:line="404" pos:column="33">!<pos:position pos:line="404" pos:column="34"/></operator><name><name pos:line="404" pos:column="34">co<pos:position pos:line="404" pos:column="36"/></name><operator pos:line="404" pos:column="36">-&gt;<pos:position pos:line="404" pos:column="41"/></operator><name pos:line="404" pos:column="38">path<pos:position pos:line="404" pos:column="42"/></name></name></expr>)<pos:position pos:line="404" pos:column="43"/></condition><then pos:line="404" pos:column="43">
          <block type="pseudo"><expr_stmt><expr><name pos:line="405" pos:column="11">replace_old<pos:position pos:line="405" pos:column="22"/></name> <operator pos:line="405" pos:column="23">=<pos:position pos:line="405" pos:column="24"/></operator> <name pos:line="405" pos:column="25">TRUE<pos:position pos:line="405" pos:column="29"/></name></expr>;<pos:position pos:line="405" pos:column="30"/></expr_stmt></block></then></if></elseif>
        <else pos:line="406" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="407" pos:column="11">replace_old<pos:position pos:line="407" pos:column="22"/></name> <operator pos:line="407" pos:column="23">=<pos:position pos:line="407" pos:column="24"/></operator> <name pos:line="407" pos:column="25">FALSE<pos:position pos:line="407" pos:column="30"/></name></expr>;<pos:position pos:line="407" pos:column="31"/></expr_stmt></block></else></if>

      }<pos:position pos:line="409" pos:column="8"/></block></then></if>

      <if pos:line="411" pos:column="7">if<condition pos:line="411" pos:column="9">(<expr><name pos:line="411" pos:column="10">replace_old<pos:position pos:line="411" pos:column="21"/></name> <operator pos:line="411" pos:column="22">&amp;&amp;<pos:position pos:line="411" pos:column="32"/></operator> <operator pos:line="411" pos:column="25">!<pos:position pos:line="411" pos:column="26"/></operator><name><name pos:line="411" pos:column="26">co<pos:position pos:line="411" pos:column="28"/></name><operator pos:line="411" pos:column="28">-&gt;<pos:position pos:line="411" pos:column="33"/></operator><name pos:line="411" pos:column="30">livecookie<pos:position pos:line="411" pos:column="40"/></name></name> <operator pos:line="411" pos:column="41">&amp;&amp;<pos:position pos:line="411" pos:column="51"/></operator> <name><name pos:line="411" pos:column="44">clist<pos:position pos:line="411" pos:column="49"/></name><operator pos:line="411" pos:column="49">-&gt;<pos:position pos:line="411" pos:column="54"/></operator><name pos:line="411" pos:column="51">livecookie<pos:position pos:line="411" pos:column="61"/></name></name></expr>)<pos:position pos:line="411" pos:column="62"/></condition><then pos:line="411" pos:column="62"> <block pos:line="411" pos:column="63">{
        <comment type="block" pos:line="412" pos:column="9">/* Both cookies matched fine, except that the already present
           cookie is "live", which means it was set from a header, while
           the new one isn't "live" and thus only read from a file. We let
           live cookies stay alive */</comment>

        <comment type="block" pos:line="417" pos:column="9">/* Free the newcomer and get out of here! */</comment>
        <expr_stmt><expr><call><name pos:line="418" pos:column="9">freecookie<pos:position pos:line="418" pos:column="19"/></name><argument_list pos:line="418" pos:column="19">(<argument><expr><name pos:line="418" pos:column="20">co<pos:position pos:line="418" pos:column="22"/></name></expr></argument>)<pos:position pos:line="418" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="418" pos:column="24"/></expr_stmt>
        <return pos:line="419" pos:column="9">return <expr><name pos:line="419" pos:column="16">NULL<pos:position pos:line="419" pos:column="20"/></name></expr>;<pos:position pos:line="419" pos:column="21"/></return>
      }<pos:position pos:line="420" pos:column="8"/></block></then></if>

      <if pos:line="422" pos:column="7">if<condition pos:line="422" pos:column="9">(<expr><name pos:line="422" pos:column="10">replace_old<pos:position pos:line="422" pos:column="21"/></name></expr>)<pos:position pos:line="422" pos:column="22"/></condition><then pos:line="422" pos:column="22"> <block pos:line="422" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="423" pos:column="9">co<pos:position pos:line="423" pos:column="11"/></name><operator pos:line="423" pos:column="11">-&gt;<pos:position pos:line="423" pos:column="16"/></operator><name pos:line="423" pos:column="13">next<pos:position pos:line="423" pos:column="17"/></name></name> <operator pos:line="423" pos:column="18">=<pos:position pos:line="423" pos:column="19"/></operator> <name><name pos:line="423" pos:column="20">clist<pos:position pos:line="423" pos:column="25"/></name><operator pos:line="423" pos:column="25">-&gt;<pos:position pos:line="423" pos:column="30"/></operator><name pos:line="423" pos:column="27">next<pos:position pos:line="423" pos:column="31"/></name></name></expr>;<pos:position pos:line="423" pos:column="32"/></expr_stmt> <comment type="block" pos:line="423" pos:column="33">/* get the next-pointer first */</comment>

        <comment type="block" pos:line="425" pos:column="9">/* then free all the old pointers */</comment>
        <if pos:line="426" pos:column="9">if<condition pos:line="426" pos:column="11">(<expr><name><name pos:line="426" pos:column="12">clist<pos:position pos:line="426" pos:column="17"/></name><operator pos:line="426" pos:column="17">-&gt;<pos:position pos:line="426" pos:column="22"/></operator><name pos:line="426" pos:column="19">name<pos:position pos:line="426" pos:column="23"/></name></name></expr>)<pos:position pos:line="426" pos:column="24"/></condition><then pos:line="426" pos:column="24">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="427" pos:column="11">free<pos:position pos:line="427" pos:column="15"/></name><argument_list pos:line="427" pos:column="15">(<argument><expr><name><name pos:line="427" pos:column="16">clist<pos:position pos:line="427" pos:column="21"/></name><operator pos:line="427" pos:column="21">-&gt;<pos:position pos:line="427" pos:column="26"/></operator><name pos:line="427" pos:column="23">name<pos:position pos:line="427" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="427" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="427" pos:column="29"/></expr_stmt></block></then></if>
        <if pos:line="428" pos:column="9">if<condition pos:line="428" pos:column="11">(<expr><name><name pos:line="428" pos:column="12">clist<pos:position pos:line="428" pos:column="17"/></name><operator pos:line="428" pos:column="17">-&gt;<pos:position pos:line="428" pos:column="22"/></operator><name pos:line="428" pos:column="19">value<pos:position pos:line="428" pos:column="24"/></name></name></expr>)<pos:position pos:line="428" pos:column="25"/></condition><then pos:line="428" pos:column="25">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="429" pos:column="11">free<pos:position pos:line="429" pos:column="15"/></name><argument_list pos:line="429" pos:column="15">(<argument><expr><name><name pos:line="429" pos:column="16">clist<pos:position pos:line="429" pos:column="21"/></name><operator pos:line="429" pos:column="21">-&gt;<pos:position pos:line="429" pos:column="26"/></operator><name pos:line="429" pos:column="23">value<pos:position pos:line="429" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="429" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="429" pos:column="30"/></expr_stmt></block></then></if>
        <if pos:line="430" pos:column="9">if<condition pos:line="430" pos:column="11">(<expr><name><name pos:line="430" pos:column="12">clist<pos:position pos:line="430" pos:column="17"/></name><operator pos:line="430" pos:column="17">-&gt;<pos:position pos:line="430" pos:column="22"/></operator><name pos:line="430" pos:column="19">domain<pos:position pos:line="430" pos:column="25"/></name></name></expr>)<pos:position pos:line="430" pos:column="26"/></condition><then pos:line="430" pos:column="26">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="431" pos:column="11">free<pos:position pos:line="431" pos:column="15"/></name><argument_list pos:line="431" pos:column="15">(<argument><expr><name><name pos:line="431" pos:column="16">clist<pos:position pos:line="431" pos:column="21"/></name><operator pos:line="431" pos:column="21">-&gt;<pos:position pos:line="431" pos:column="26"/></operator><name pos:line="431" pos:column="23">domain<pos:position pos:line="431" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="431" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="431" pos:column="31"/></expr_stmt></block></then></if>
        <if pos:line="432" pos:column="9">if<condition pos:line="432" pos:column="11">(<expr><name><name pos:line="432" pos:column="12">clist<pos:position pos:line="432" pos:column="17"/></name><operator pos:line="432" pos:column="17">-&gt;<pos:position pos:line="432" pos:column="22"/></operator><name pos:line="432" pos:column="19">path<pos:position pos:line="432" pos:column="23"/></name></name></expr>)<pos:position pos:line="432" pos:column="24"/></condition><then pos:line="432" pos:column="24">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="433" pos:column="11">free<pos:position pos:line="433" pos:column="15"/></name><argument_list pos:line="433" pos:column="15">(<argument><expr><name><name pos:line="433" pos:column="16">clist<pos:position pos:line="433" pos:column="21"/></name><operator pos:line="433" pos:column="21">-&gt;<pos:position pos:line="433" pos:column="26"/></operator><name pos:line="433" pos:column="23">path<pos:position pos:line="433" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="433" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="433" pos:column="29"/></expr_stmt></block></then></if>
        <if pos:line="434" pos:column="9">if<condition pos:line="434" pos:column="11">(<expr><name><name pos:line="434" pos:column="12">clist<pos:position pos:line="434" pos:column="17"/></name><operator pos:line="434" pos:column="17">-&gt;<pos:position pos:line="434" pos:column="22"/></operator><name pos:line="434" pos:column="19">expirestr<pos:position pos:line="434" pos:column="28"/></name></name></expr>)<pos:position pos:line="434" pos:column="29"/></condition><then pos:line="434" pos:column="29">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="435" pos:column="11">free<pos:position pos:line="435" pos:column="15"/></name><argument_list pos:line="435" pos:column="15">(<argument><expr><name><name pos:line="435" pos:column="16">clist<pos:position pos:line="435" pos:column="21"/></name><operator pos:line="435" pos:column="21">-&gt;<pos:position pos:line="435" pos:column="26"/></operator><name pos:line="435" pos:column="23">expirestr<pos:position pos:line="435" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="435" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="435" pos:column="34"/></expr_stmt></block></then></if>

        <if pos:line="437" pos:column="9">if<condition pos:line="437" pos:column="11">(<expr><name><name pos:line="437" pos:column="12">clist<pos:position pos:line="437" pos:column="17"/></name><operator pos:line="437" pos:column="17">-&gt;<pos:position pos:line="437" pos:column="22"/></operator><name pos:line="437" pos:column="19">version<pos:position pos:line="437" pos:column="26"/></name></name></expr>)<pos:position pos:line="437" pos:column="27"/></condition><then pos:line="437" pos:column="27">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="438" pos:column="11">free<pos:position pos:line="438" pos:column="15"/></name><argument_list pos:line="438" pos:column="15">(<argument><expr><name><name pos:line="438" pos:column="16">clist<pos:position pos:line="438" pos:column="21"/></name><operator pos:line="438" pos:column="21">-&gt;<pos:position pos:line="438" pos:column="26"/></operator><name pos:line="438" pos:column="23">version<pos:position pos:line="438" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="438" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="438" pos:column="32"/></expr_stmt></block></then></if>
        <if pos:line="439" pos:column="9">if<condition pos:line="439" pos:column="11">(<expr><name><name pos:line="439" pos:column="12">clist<pos:position pos:line="439" pos:column="17"/></name><operator pos:line="439" pos:column="17">-&gt;<pos:position pos:line="439" pos:column="22"/></operator><name pos:line="439" pos:column="19">maxage<pos:position pos:line="439" pos:column="25"/></name></name></expr>)<pos:position pos:line="439" pos:column="26"/></condition><then pos:line="439" pos:column="26">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="440" pos:column="11">free<pos:position pos:line="440" pos:column="15"/></name><argument_list pos:line="440" pos:column="15">(<argument><expr><name><name pos:line="440" pos:column="16">clist<pos:position pos:line="440" pos:column="21"/></name><operator pos:line="440" pos:column="21">-&gt;<pos:position pos:line="440" pos:column="26"/></operator><name pos:line="440" pos:column="23">maxage<pos:position pos:line="440" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="440" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="440" pos:column="31"/></expr_stmt></block></then></if>

        <expr_stmt><expr><operator pos:line="442" pos:column="9">*<pos:position pos:line="442" pos:column="10"/></operator><name pos:line="442" pos:column="10">clist<pos:position pos:line="442" pos:column="15"/></name> <operator pos:line="442" pos:column="16">=<pos:position pos:line="442" pos:column="17"/></operator> <operator pos:line="442" pos:column="18">*<pos:position pos:line="442" pos:column="19"/></operator><name pos:line="442" pos:column="19">co<pos:position pos:line="442" pos:column="21"/></name></expr>;<pos:position pos:line="442" pos:column="22"/></expr_stmt>  <comment type="block" pos:line="442" pos:column="24">/* then store all the new data */</comment>

        <expr_stmt><expr><call><name pos:line="444" pos:column="9">free<pos:position pos:line="444" pos:column="13"/></name><argument_list pos:line="444" pos:column="13">(<argument><expr><name pos:line="444" pos:column="14">co<pos:position pos:line="444" pos:column="16"/></name></expr></argument>)<pos:position pos:line="444" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="444" pos:column="18"/></expr_stmt>   <comment type="block" pos:line="444" pos:column="21">/* free the newly alloced memory */</comment>
        <expr_stmt><expr><name pos:line="445" pos:column="9">co<pos:position pos:line="445" pos:column="11"/></name> <operator pos:line="445" pos:column="12">=<pos:position pos:line="445" pos:column="13"/></operator> <name pos:line="445" pos:column="14">clist<pos:position pos:line="445" pos:column="19"/></name></expr>;<pos:position pos:line="445" pos:column="20"/></expr_stmt> <comment type="block" pos:line="445" pos:column="21">/* point to the previous struct instead */</comment>

        <comment type="block" pos:line="447" pos:column="9">/* We have replaced a cookie, now skip the rest of the list but
           make sure the 'lastc' pointer is properly set */</comment>
        <do pos:line="449" pos:column="9">do <block pos:line="449" pos:column="12">{
          <expr_stmt><expr><name pos:line="450" pos:column="11">lastc<pos:position pos:line="450" pos:column="16"/></name> <operator pos:line="450" pos:column="17">=<pos:position pos:line="450" pos:column="18"/></operator> <name pos:line="450" pos:column="19">clist<pos:position pos:line="450" pos:column="24"/></name></expr>;<pos:position pos:line="450" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><name pos:line="451" pos:column="11">clist<pos:position pos:line="451" pos:column="16"/></name> <operator pos:line="451" pos:column="17">=<pos:position pos:line="451" pos:column="18"/></operator> <name><name pos:line="451" pos:column="19">clist<pos:position pos:line="451" pos:column="24"/></name><operator pos:line="451" pos:column="24">-&gt;<pos:position pos:line="451" pos:column="29"/></operator><name pos:line="451" pos:column="26">next<pos:position pos:line="451" pos:column="30"/></name></name></expr>;<pos:position pos:line="451" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="452" pos:column="10"/></block> while<condition pos:line="452" pos:column="16">(<expr><name pos:line="452" pos:column="17">clist<pos:position pos:line="452" pos:column="22"/></name></expr>)<pos:position pos:line="452" pos:column="23"/></condition>;<pos:position pos:line="452" pos:column="24"/></do>
        <break pos:line="453" pos:column="9">break;<pos:position pos:line="453" pos:column="15"/></break>
      }<pos:position pos:line="454" pos:column="8"/></block></then></if>
    }<pos:position pos:line="455" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="456" pos:column="5">lastc<pos:position pos:line="456" pos:column="10"/></name> <operator pos:line="456" pos:column="11">=<pos:position pos:line="456" pos:column="12"/></operator> <name pos:line="456" pos:column="13">clist<pos:position pos:line="456" pos:column="18"/></name></expr>;<pos:position pos:line="456" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="457" pos:column="5">clist<pos:position pos:line="457" pos:column="10"/></name> <operator pos:line="457" pos:column="11">=<pos:position pos:line="457" pos:column="12"/></operator> <name><name pos:line="457" pos:column="13">clist<pos:position pos:line="457" pos:column="18"/></name><operator pos:line="457" pos:column="18">-&gt;<pos:position pos:line="457" pos:column="23"/></operator><name pos:line="457" pos:column="20">next<pos:position pos:line="457" pos:column="24"/></name></name></expr>;<pos:position pos:line="457" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="458" pos:column="4"/></block></while>

  <if pos:line="460" pos:column="3">if<condition pos:line="460" pos:column="5">(<expr><name><name pos:line="460" pos:column="6">c<pos:position pos:line="460" pos:column="7"/></name><operator pos:line="460" pos:column="7">-&gt;<pos:position pos:line="460" pos:column="12"/></operator><name pos:line="460" pos:column="9">running<pos:position pos:line="460" pos:column="16"/></name></name></expr>)<pos:position pos:line="460" pos:column="17"/></condition><then pos:line="460" pos:column="17">
    <comment type="block" pos:line="461" pos:column="5">/* Only show this when NOT reading the cookies from a file */</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="462" pos:column="5">infof<pos:position pos:line="462" pos:column="10"/></name><argument_list pos:line="462" pos:column="10">(<argument><expr><name pos:line="462" pos:column="11">data<pos:position pos:line="462" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="462" pos:column="17">"%s cookie %s=\"%s\" for domain %s, path %s, expire %d\n"<pos:position pos:line="462" pos:column="74"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><name pos:line="463" pos:column="11">replace_old<pos:position pos:line="463" pos:column="22"/></name></expr>?<pos:position pos:line="463" pos:column="23"/></condition><then><expr><literal type="string" pos:line="463" pos:column="23">"Replaced"<pos:position pos:line="463" pos:column="33"/></literal></expr></then><else pos:line="463" pos:column="33">:<expr><literal type="string" pos:line="463" pos:column="34">"Added"<pos:position pos:line="463" pos:column="41"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name><name pos:line="463" pos:column="43">co<pos:position pos:line="463" pos:column="45"/></name><operator pos:line="463" pos:column="45">-&gt;<pos:position pos:line="463" pos:column="50"/></operator><name pos:line="463" pos:column="47">name<pos:position pos:line="463" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="463" pos:column="53">co<pos:position pos:line="463" pos:column="55"/></name><operator pos:line="463" pos:column="55">-&gt;<pos:position pos:line="463" pos:column="60"/></operator><name pos:line="463" pos:column="57">value<pos:position pos:line="463" pos:column="62"/></name></name></expr></argument>,
          <argument><expr><name><name pos:line="464" pos:column="11">co<pos:position pos:line="464" pos:column="13"/></name><operator pos:line="464" pos:column="13">-&gt;<pos:position pos:line="464" pos:column="18"/></operator><name pos:line="464" pos:column="15">domain<pos:position pos:line="464" pos:column="21"/></name></name></expr></argument>, <argument><expr><name><name pos:line="464" pos:column="23">co<pos:position pos:line="464" pos:column="25"/></name><operator pos:line="464" pos:column="25">-&gt;<pos:position pos:line="464" pos:column="30"/></operator><name pos:line="464" pos:column="27">path<pos:position pos:line="464" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="464" pos:column="33">co<pos:position pos:line="464" pos:column="35"/></name><operator pos:line="464" pos:column="35">-&gt;<pos:position pos:line="464" pos:column="40"/></operator><name pos:line="464" pos:column="37">expires<pos:position pos:line="464" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="464" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="464" pos:column="46"/></expr_stmt></block></then></if>

  <if pos:line="466" pos:column="3">if<condition pos:line="466" pos:column="5">(<expr><operator pos:line="466" pos:column="6">!<pos:position pos:line="466" pos:column="7"/></operator><name pos:line="466" pos:column="7">replace_old<pos:position pos:line="466" pos:column="18"/></name></expr>)<pos:position pos:line="466" pos:column="19"/></condition><then pos:line="466" pos:column="19"> <block pos:line="466" pos:column="20">{
    <comment type="block" pos:line="467" pos:column="5">/* then make the last item point on this new one */</comment>
    <if pos:line="468" pos:column="5">if<condition pos:line="468" pos:column="7">(<expr><name pos:line="468" pos:column="8">lastc<pos:position pos:line="468" pos:column="13"/></name></expr>)<pos:position pos:line="468" pos:column="14"/></condition><then pos:line="468" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="469" pos:column="7">lastc<pos:position pos:line="469" pos:column="12"/></name><operator pos:line="469" pos:column="12">-&gt;<pos:position pos:line="469" pos:column="17"/></operator><name pos:line="469" pos:column="14">next<pos:position pos:line="469" pos:column="18"/></name></name> <operator pos:line="469" pos:column="19">=<pos:position pos:line="469" pos:column="20"/></operator> <name pos:line="469" pos:column="21">co<pos:position pos:line="469" pos:column="23"/></name></expr>;<pos:position pos:line="469" pos:column="24"/></expr_stmt></block></then>
    <else pos:line="470" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="471" pos:column="7">c<pos:position pos:line="471" pos:column="8"/></name><operator pos:line="471" pos:column="8">-&gt;<pos:position pos:line="471" pos:column="13"/></operator><name pos:line="471" pos:column="10">cookies<pos:position pos:line="471" pos:column="17"/></name></name> <operator pos:line="471" pos:column="18">=<pos:position pos:line="471" pos:column="19"/></operator> <name pos:line="471" pos:column="20">co<pos:position pos:line="471" pos:column="22"/></name></expr>;<pos:position pos:line="471" pos:column="23"/></expr_stmt></block></else></if>
  }<pos:position pos:line="472" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="474" pos:column="3">c<pos:position pos:line="474" pos:column="4"/></name><operator pos:line="474" pos:column="4">-&gt;<pos:position pos:line="474" pos:column="9"/></operator><name pos:line="474" pos:column="6">numcookies<pos:position pos:line="474" pos:column="16"/></name></name><operator pos:line="474" pos:column="16">++<pos:position pos:line="474" pos:column="18"/></operator></expr>;<pos:position pos:line="474" pos:column="19"/></expr_stmt> <comment type="block" pos:line="474" pos:column="20">/* one more cookie in the jar */</comment>
  <return pos:line="475" pos:column="3">return <expr><name pos:line="475" pos:column="10">co<pos:position pos:line="475" pos:column="12"/></name></expr>;<pos:position pos:line="475" pos:column="13"/></return>
}<pos:position pos:line="476" pos:column="2"/></block></function></unit>
