<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_702_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">send_doc<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">curl_socket_t<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">sock<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">httprequest<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">req<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ssize_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">written<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">count<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">buffer<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">ptr<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">FILE<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">stream<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">cmd<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name pos:line="8" pos:column="15">NULL<pos:position pos:line="8" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">cmdsize<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">FILE<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">dump<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">bool<pos:position pos:line="11" pos:column="7"/></name></type> <name pos:line="11" pos:column="8">persistant<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><name pos:line="11" pos:column="21">TRUE<pos:position pos:line="11" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">bool<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">sendfailure<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><name pos:line="12" pos:column="22">FALSE<pos:position pos:line="12" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">size_t<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">responsesize<pos:position pos:line="13" pos:column="22"/></name></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">error<pos:position pos:line="14" pos:column="12"/></name> <init pos:line="14" pos:column="13">= <expr><literal type="number" pos:line="14" pos:column="15">0<pos:position pos:line="14" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">res<pos:position pos:line="15" pos:column="10"/></name></decl>;<pos:position pos:line="15" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="16" pos:column="3">const<pos:position pos:line="16" pos:column="8"/></specifier> <name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">responsedump<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><ternary><condition><expr><name pos:line="16" pos:column="30">is_proxy<pos:position pos:line="16" pos:column="38"/></name></expr>?<pos:position pos:line="16" pos:column="39"/></condition><then><expr><name pos:line="16" pos:column="39">RESPONSE_PROXY_DUMP<pos:position pos:line="16" pos:column="58"/></name></expr></then><else pos:line="16" pos:column="58">:<expr><name pos:line="16" pos:column="59">RESPONSE_DUMP<pos:position pos:line="16" pos:column="72"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="16" pos:column="73"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="17" pos:column="3">static<pos:position pos:line="17" pos:column="9"/></specifier> <type><name pos:line="17" pos:column="10">char<pos:position pos:line="17" pos:column="14"/></name></type> <name><name pos:line="17" pos:column="15">weare<pos:position pos:line="17" pos:column="20"/></name><index pos:line="17" pos:column="20">[<expr><literal type="number" pos:line="17" pos:column="21">256<pos:position pos:line="17" pos:column="24"/></literal></expr>]<pos:position pos:line="17" pos:column="25"/></index></name></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>

  <switch pos:line="19" pos:column="3">switch<condition pos:line="19" pos:column="9">(<expr><name><name pos:line="19" pos:column="10">req<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">-&gt;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="15">rcmd<pos:position pos:line="19" pos:column="19"/></name></name></expr>)<pos:position pos:line="19" pos:column="20"/></condition> <block pos:line="19" pos:column="21">{
  <default pos:line="20" pos:column="3">default:<pos:position pos:line="20" pos:column="11"/></default>
  <case pos:line="21" pos:column="3">case <expr><name pos:line="21" pos:column="8">RCMD_NORMALREQ<pos:position pos:line="21" pos:column="22"/></name></expr>:<pos:position pos:line="21" pos:column="23"/></case>
    <break pos:line="22" pos:column="5">break;<pos:position pos:line="22" pos:column="11"/></break> <comment type="block" pos:line="22" pos:column="12">/* continue with business as usual */</comment>
  <case pos:line="23" pos:column="3">case <expr><name pos:line="23" pos:column="8">RCMD_STREAM<pos:position pos:line="23" pos:column="19"/></name></expr>:<pos:position pos:line="23" pos:column="20"/></case>
<cpp:define pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">define<pos:position pos:line="24" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="24" pos:column="9">STREAMTHIS<pos:position pos:line="24" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="24" pos:column="20">"a string to stream 01234567890\n"<pos:position pos:line="24" pos:column="54"/></cpp:value></cpp:define>
    <expr_stmt><expr><name pos:line="25" pos:column="5">count<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">strlen<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">STREAMTHIS<pos:position pos:line="25" pos:column="30"/></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>
    <for pos:line="26" pos:column="5">for<control pos:line="26" pos:column="8">(<init pos:line="26" pos:column="9">;<pos:position pos:line="26" pos:column="10"/></init><condition pos:line="26" pos:column="10">;<pos:position pos:line="26" pos:column="11"/></condition><incr/>)<pos:position pos:line="26" pos:column="12"/></control> <block pos:line="26" pos:column="13">{
      <expr_stmt><expr><name pos:line="27" pos:column="7">written<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <call><name pos:line="27" pos:column="17">swrite<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">sock<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">STREAMTHIS<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">count<pos:position pos:line="27" pos:column="47"/></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
      <if pos:line="28" pos:column="7">if<condition pos:line="28" pos:column="9">(<expr><name pos:line="28" pos:column="10">got_exit_signal<pos:position pos:line="28" pos:column="25"/></name></expr>)<pos:position pos:line="28" pos:column="26"/></condition><then pos:line="28" pos:column="26">
        <block type="pseudo"><return pos:line="29" pos:column="9">return <expr><operator pos:line="29" pos:column="16">-<pos:position pos:line="29" pos:column="17"/></operator><literal type="number" pos:line="29" pos:column="17">1<pos:position pos:line="29" pos:column="18"/></literal></expr>;<pos:position pos:line="29" pos:column="19"/></return></block></then></if>
      <if pos:line="30" pos:column="7">if<condition pos:line="30" pos:column="9">(<expr><name pos:line="30" pos:column="10">written<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">!=<pos:position pos:line="30" pos:column="20"/></operator> <operator pos:line="30" pos:column="21">(<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">ssize_t<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">)<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">count<pos:position pos:line="30" pos:column="35"/></name></expr>)<pos:position pos:line="30" pos:column="36"/></condition><then pos:line="30" pos:column="36"> <block pos:line="30" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">logmsg<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="string" pos:line="31" pos:column="16">"Stopped streaming"<pos:position pos:line="31" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
        <break pos:line="32" pos:column="9">break;<pos:position pos:line="32" pos:column="15"/></break>
      }<pos:position pos:line="33" pos:column="8"/></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></for>
    <return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">-<pos:position pos:line="35" pos:column="13"/></operator><literal type="number" pos:line="35" pos:column="13">1<pos:position pos:line="35" pos:column="14"/></literal></expr>;<pos:position pos:line="35" pos:column="15"/></return>
  <case pos:line="36" pos:column="3">case <expr><name pos:line="36" pos:column="8">RCMD_IDLE<pos:position pos:line="36" pos:column="17"/></name></expr>:<pos:position pos:line="36" pos:column="18"/></case>
    <comment type="block" pos:line="37" pos:column="5">/* Do nothing. Sit idle. Pretend it rains. */</comment>
    <return pos:line="38" pos:column="5">return <expr><literal type="number" pos:line="38" pos:column="12">0<pos:position pos:line="38" pos:column="13"/></literal></expr>;<pos:position pos:line="38" pos:column="14"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></switch>

  <expr_stmt><expr><name><name pos:line="41" pos:column="3">req<pos:position pos:line="41" pos:column="6"/></name><operator pos:line="41" pos:column="6">-&gt;<pos:position pos:line="41" pos:column="11"/></operator><name pos:line="41" pos:column="8">open<pos:position pos:line="41" pos:column="12"/></name></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <name pos:line="41" pos:column="15">FALSE<pos:position pos:line="41" pos:column="20"/></name></expr>;<pos:position pos:line="41" pos:column="21"/></expr_stmt>

  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><name><name pos:line="43" pos:column="6">req<pos:position pos:line="43" pos:column="9"/></name><operator pos:line="43" pos:column="9">-&gt;<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="11">testno<pos:position pos:line="43" pos:column="17"/></name></name> <operator pos:line="43" pos:column="18">&lt;<pos:position pos:line="43" pos:column="22"/></operator> <literal type="number" pos:line="43" pos:column="20">0<pos:position pos:line="43" pos:column="21"/></literal></expr>)<pos:position pos:line="43" pos:column="22"/></condition><then pos:line="43" pos:column="22"> <block pos:line="43" pos:column="23">{
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">size_t<pos:position pos:line="44" pos:column="11"/></name></type> <name pos:line="44" pos:column="12">msglen<pos:position pos:line="44" pos:column="18"/></name></decl>;<pos:position pos:line="44" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">char<pos:position pos:line="45" pos:column="9"/></name></type> <name><name pos:line="45" pos:column="10">msgbuf<pos:position pos:line="45" pos:column="16"/></name><index pos:line="45" pos:column="16">[<expr><literal type="number" pos:line="45" pos:column="17">64<pos:position pos:line="45" pos:column="19"/></literal></expr>]<pos:position pos:line="45" pos:column="20"/></index></name></decl>;<pos:position pos:line="45" pos:column="21"/></decl_stmt>

    <switch pos:line="47" pos:column="5">switch<condition pos:line="47" pos:column="11">(<expr><name><name pos:line="47" pos:column="12">req<pos:position pos:line="47" pos:column="15"/></name><operator pos:line="47" pos:column="15">-&gt;<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="17">testno<pos:position pos:line="47" pos:column="23"/></name></name></expr>)<pos:position pos:line="47" pos:column="24"/></condition> <block pos:line="47" pos:column="25">{
    <case pos:line="48" pos:column="5">case <expr><name pos:line="48" pos:column="10">DOCNUMBER_QUIT<pos:position pos:line="48" pos:column="24"/></name></expr>:<pos:position pos:line="48" pos:column="25"/></case>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">logmsg<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><literal type="string" pos:line="49" pos:column="14">"Replying to QUIT"<pos:position pos:line="49" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="50" pos:column="7">buffer<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <name pos:line="50" pos:column="16">docquit<pos:position pos:line="50" pos:column="23"/></name></expr>;<pos:position pos:line="50" pos:column="24"/></expr_stmt>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>
    <case pos:line="52" pos:column="5">case <expr><name pos:line="52" pos:column="10">DOCNUMBER_WERULEZ<pos:position pos:line="52" pos:column="27"/></name></expr>:<pos:position pos:line="52" pos:column="28"/></case>
      <comment type="block" pos:line="53" pos:column="7">/* we got a "friends?" question, reply back that we sure are */</comment>
      <expr_stmt><expr><call><name pos:line="54" pos:column="7">logmsg<pos:position pos:line="54" pos:column="13"/></name><argument_list pos:line="54" pos:column="13">(<argument><expr><literal type="string" pos:line="54" pos:column="14">"Identifying ourselves as friends"<pos:position pos:line="54" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">snprintf<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><name pos:line="55" pos:column="16">msgbuf<pos:position pos:line="55" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="24">sizeof<argument_list pos:line="55" pos:column="30">(<argument><expr><name pos:line="55" pos:column="31">msgbuf<pos:position pos:line="55" pos:column="37"/></name></expr></argument>)<pos:position pos:line="55" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="40">"WE ROOLZ: %ld\r\n"<pos:position pos:line="55" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="55" pos:column="61">(<pos:position pos:line="55" pos:column="62"/></operator><name pos:line="55" pos:column="62">long<pos:position pos:line="55" pos:column="66"/></name><operator pos:line="55" pos:column="66">)<pos:position pos:line="55" pos:column="67"/></operator><call><name pos:line="55" pos:column="67">getpid<pos:position pos:line="55" pos:column="73"/></name><argument_list pos:line="55" pos:column="73">()<pos:position pos:line="55" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="77"/></expr_stmt>
      <expr_stmt><expr><name pos:line="56" pos:column="7">msglen<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">=<pos:position pos:line="56" pos:column="15"/></operator> <call><name pos:line="56" pos:column="16">strlen<pos:position pos:line="56" pos:column="22"/></name><argument_list pos:line="56" pos:column="22">(<argument><expr><name pos:line="56" pos:column="23">msgbuf<pos:position pos:line="56" pos:column="29"/></name></expr></argument>)<pos:position pos:line="56" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="31"/></expr_stmt>
      <if pos:line="57" pos:column="7">if<condition pos:line="57" pos:column="9">(<expr><name pos:line="57" pos:column="10">use_gopher<pos:position pos:line="57" pos:column="20"/></name></expr>)<pos:position pos:line="57" pos:column="21"/></condition><then pos:line="57" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="9">snprintf<pos:position pos:line="58" pos:column="17"/></name><argument_list pos:line="58" pos:column="17">(<argument><expr><name pos:line="58" pos:column="18">weare<pos:position pos:line="58" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="25">sizeof<argument_list pos:line="58" pos:column="31">(<argument><expr><name pos:line="58" pos:column="32">weare<pos:position pos:line="58" pos:column="37"/></name></expr></argument>)<pos:position pos:line="58" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="40">"%s"<pos:position pos:line="58" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="46">msgbuf<pos:position pos:line="58" pos:column="52"/></name></expr></argument>)<pos:position pos:line="58" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="54"/></expr_stmt></block></then>
      <else pos:line="59" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="9">snprintf<pos:position pos:line="60" pos:column="17"/></name><argument_list pos:line="60" pos:column="17">(<argument><expr><name pos:line="60" pos:column="18">weare<pos:position pos:line="60" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="25">sizeof<argument_list pos:line="60" pos:column="31">(<argument><expr><name pos:line="60" pos:column="32">weare<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></sizeof></expr></argument>,
                 <argument><expr><literal type="string" pos:line="61" pos:column="18">"HTTP/1.1 200 OK\r\nContent-Length: %zu\r\n\r\n%s"<pos:position pos:line="61" pos:column="68"/></literal></expr></argument>,
                 <argument><expr><name pos:line="62" pos:column="18">msglen<pos:position pos:line="62" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="26">msgbuf<pos:position pos:line="62" pos:column="32"/></name></expr></argument>)<pos:position pos:line="62" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="63" pos:column="7">buffer<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">=<pos:position pos:line="63" pos:column="15"/></operator> <name pos:line="63" pos:column="16">weare<pos:position pos:line="63" pos:column="21"/></name></expr>;<pos:position pos:line="63" pos:column="22"/></expr_stmt>
      <break pos:line="64" pos:column="7">break;<pos:position pos:line="64" pos:column="13"/></break>
    <case pos:line="65" pos:column="5">case <expr><name pos:line="65" pos:column="10">DOCNUMBER_404<pos:position pos:line="65" pos:column="23"/></name></expr>:<pos:position pos:line="65" pos:column="24"/></case>
    <default pos:line="66" pos:column="5">default:<pos:position pos:line="66" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="67" pos:column="7">logmsg<pos:position pos:line="67" pos:column="13"/></name><argument_list pos:line="67" pos:column="13">(<argument><expr><literal type="string" pos:line="67" pos:column="14">"Replying to with a 404"<pos:position pos:line="67" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name pos:line="68" pos:column="7">buffer<pos:position pos:line="68" pos:column="13"/></name> <operator pos:line="68" pos:column="14">=<pos:position pos:line="68" pos:column="15"/></operator> <name pos:line="68" pos:column="16">doc404<pos:position pos:line="68" pos:column="22"/></name></expr>;<pos:position pos:line="68" pos:column="23"/></expr_stmt>
      <break pos:line="69" pos:column="7">break;<pos:position pos:line="69" pos:column="13"/></break>
    }<pos:position pos:line="70" pos:column="6"/></block></switch>

    <expr_stmt><expr><name pos:line="72" pos:column="5">count<pos:position pos:line="72" pos:column="10"/></name> <operator pos:line="72" pos:column="11">=<pos:position pos:line="72" pos:column="12"/></operator> <call><name pos:line="72" pos:column="13">strlen<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">(<argument><expr><name pos:line="72" pos:column="20">buffer<pos:position pos:line="72" pos:column="26"/></name></expr></argument>)<pos:position pos:line="72" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="73" pos:column="4"/></block></then>
  <else pos:line="74" pos:column="3">else <block pos:line="74" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">char<pos:position pos:line="75" pos:column="9"/></name></type> <name><name pos:line="75" pos:column="10">partbuf<pos:position pos:line="75" pos:column="17"/></name><index pos:line="75" pos:column="17">[<expr><literal type="number" pos:line="75" pos:column="18">80<pos:position pos:line="75" pos:column="20"/></literal></expr>]<pos:position pos:line="75" pos:column="21"/></index></name></decl>;<pos:position pos:line="75" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">char<pos:position pos:line="76" pos:column="9"/></name> <modifier pos:line="76" pos:column="10">*<pos:position pos:line="76" pos:column="11"/></modifier></type><name pos:line="76" pos:column="11">filename<pos:position pos:line="76" pos:column="19"/></name> <init pos:line="76" pos:column="20">= <expr><call><name pos:line="76" pos:column="22">test2file<pos:position pos:line="76" pos:column="31"/></name><argument_list pos:line="76" pos:column="31">(<argument><expr><name><name pos:line="76" pos:column="32">req<pos:position pos:line="76" pos:column="35"/></name><operator pos:line="76" pos:column="35">-&gt;<pos:position pos:line="76" pos:column="40"/></operator><name pos:line="76" pos:column="37">testno<pos:position pos:line="76" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="45"/></decl_stmt>

    <comment type="block" pos:line="78" pos:column="5">/* select the &lt;data&gt; tag for "normal" requests and the &lt;connect&gt; one
       for CONNECT requests (within the &lt;reply&gt; section) */</comment>
    <decl_stmt><decl><type><specifier pos:line="80" pos:column="5">const<pos:position pos:line="80" pos:column="10"/></specifier> <name pos:line="80" pos:column="11">char<pos:position pos:line="80" pos:column="15"/></name> <modifier pos:line="80" pos:column="16">*<pos:position pos:line="80" pos:column="17"/></modifier></type><name pos:line="80" pos:column="17">section<pos:position pos:line="80" pos:column="24"/></name> <init pos:line="80" pos:column="25">= <expr><ternary><condition><expr><name><name pos:line="80" pos:column="27">req<pos:position pos:line="80" pos:column="30"/></name><operator pos:line="80" pos:column="30">-&gt;<pos:position pos:line="80" pos:column="35"/></operator><name pos:line="80" pos:column="32">connect_request<pos:position pos:line="80" pos:column="47"/></name></name></expr>?<pos:position pos:line="80" pos:column="48"/></condition><then><expr><literal type="string" pos:line="80" pos:column="48">"connect"<pos:position pos:line="80" pos:column="57"/></literal></expr></then><else pos:line="80" pos:column="57">:<expr><literal type="string" pos:line="80" pos:column="58">"data"<pos:position pos:line="80" pos:column="64"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="80" pos:column="65"/></decl_stmt>

    <if pos:line="82" pos:column="5">if<condition pos:line="82" pos:column="7">(<expr><name><name pos:line="82" pos:column="8">req<pos:position pos:line="82" pos:column="11"/></name><operator pos:line="82" pos:column="11">-&gt;<pos:position pos:line="82" pos:column="16"/></operator><name pos:line="82" pos:column="13">partno<pos:position pos:line="82" pos:column="19"/></name></name></expr>)<pos:position pos:line="82" pos:column="20"/></condition><then pos:line="82" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="7">snprintf<pos:position pos:line="83" pos:column="15"/></name><argument_list pos:line="83" pos:column="15">(<argument><expr><name pos:line="83" pos:column="16">partbuf<pos:position pos:line="83" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="83" pos:column="25">sizeof<argument_list pos:line="83" pos:column="31">(<argument><expr><name pos:line="83" pos:column="32">partbuf<pos:position pos:line="83" pos:column="39"/></name></expr></argument>)<pos:position pos:line="83" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="42">"%s%ld"<pos:position pos:line="83" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="51">section<pos:position pos:line="83" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="60">req<pos:position pos:line="83" pos:column="63"/></name><operator pos:line="83" pos:column="63">-&gt;<pos:position pos:line="83" pos:column="68"/></operator><name pos:line="83" pos:column="65">partno<pos:position pos:line="83" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="73"/></expr_stmt></block></then>
    <else pos:line="84" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="7">snprintf<pos:position pos:line="85" pos:column="15"/></name><argument_list pos:line="85" pos:column="15">(<argument><expr><name pos:line="85" pos:column="16">partbuf<pos:position pos:line="85" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="85" pos:column="25">sizeof<argument_list pos:line="85" pos:column="31">(<argument><expr><name pos:line="85" pos:column="32">partbuf<pos:position pos:line="85" pos:column="39"/></name></expr></argument>)<pos:position pos:line="85" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="42">"%s"<pos:position pos:line="85" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="48">section<pos:position pos:line="85" pos:column="55"/></name></expr></argument>)<pos:position pos:line="85" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="57"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="87" pos:column="5">logmsg<pos:position pos:line="87" pos:column="11"/></name><argument_list pos:line="87" pos:column="11">(<argument><expr><literal type="string" pos:line="87" pos:column="12">"Send response test%ld section &lt;%s&gt;"<pos:position pos:line="87" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="50">req<pos:position pos:line="87" pos:column="53"/></name><operator pos:line="87" pos:column="53">-&gt;<pos:position pos:line="87" pos:column="58"/></operator><name pos:line="87" pos:column="55">testno<pos:position pos:line="87" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="63">partbuf<pos:position pos:line="87" pos:column="70"/></name></expr></argument>)<pos:position pos:line="87" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="72"/></expr_stmt>

    <expr_stmt><expr><name pos:line="89" pos:column="5">stream<pos:position pos:line="89" pos:column="11"/></name> <operator pos:line="89" pos:column="12">=<pos:position pos:line="89" pos:column="13"/></operator> <call><name pos:line="89" pos:column="14">fopen<pos:position pos:line="89" pos:column="19"/></name><argument_list pos:line="89" pos:column="19">(<argument><expr><name pos:line="89" pos:column="20">filename<pos:position pos:line="89" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="30">"rb"<pos:position pos:line="89" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="36"/></expr_stmt>
    <if pos:line="90" pos:column="5">if<condition pos:line="90" pos:column="7">(<expr><operator pos:line="90" pos:column="8">!<pos:position pos:line="90" pos:column="9"/></operator><name pos:line="90" pos:column="9">stream<pos:position pos:line="90" pos:column="15"/></name></expr>)<pos:position pos:line="90" pos:column="16"/></condition><then pos:line="90" pos:column="16"> <block pos:line="90" pos:column="17">{
      <expr_stmt><expr><name pos:line="91" pos:column="7">error<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">=<pos:position pos:line="91" pos:column="14"/></operator> <name pos:line="91" pos:column="15">errno<pos:position pos:line="91" pos:column="20"/></name></expr>;<pos:position pos:line="91" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="92" pos:column="7">logmsg<pos:position pos:line="92" pos:column="13"/></name><argument_list pos:line="92" pos:column="13">(<argument><expr><literal type="string" pos:line="92" pos:column="14">"fopen() failed with error: %d %s"<pos:position pos:line="92" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="50">error<pos:position pos:line="92" pos:column="55"/></name></expr></argument>, <argument><expr><call><name pos:line="92" pos:column="57">strerror<pos:position pos:line="92" pos:column="65"/></name><argument_list pos:line="92" pos:column="65">(<argument><expr><name pos:line="92" pos:column="66">error<pos:position pos:line="92" pos:column="71"/></name></expr></argument>)<pos:position pos:line="92" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="92" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="74"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="93" pos:column="7">logmsg<pos:position pos:line="93" pos:column="13"/></name><argument_list pos:line="93" pos:column="13">(<argument><expr><literal type="string" pos:line="93" pos:column="14">"  [3] Error opening file: %s"<pos:position pos:line="93" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="46">filename<pos:position pos:line="93" pos:column="54"/></name></expr></argument>)<pos:position pos:line="93" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="56"/></expr_stmt>
      <return pos:line="94" pos:column="7">return <expr><literal type="number" pos:line="94" pos:column="14">0<pos:position pos:line="94" pos:column="15"/></literal></expr>;<pos:position pos:line="94" pos:column="16"/></return>
    }<pos:position pos:line="95" pos:column="6"/></block></then>
    <else pos:line="96" pos:column="5">else <block pos:line="96" pos:column="10">{
      <expr_stmt><expr><name pos:line="97" pos:column="7">error<pos:position pos:line="97" pos:column="12"/></name> <operator pos:line="97" pos:column="13">=<pos:position pos:line="97" pos:column="14"/></operator> <call><name pos:line="97" pos:column="15">getpart<pos:position pos:line="97" pos:column="22"/></name><argument_list pos:line="97" pos:column="22">(<argument><expr><operator pos:line="97" pos:column="23">&amp;<pos:position pos:line="97" pos:column="28"/></operator><name pos:line="97" pos:column="24">ptr<pos:position pos:line="97" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="29">&amp;<pos:position pos:line="97" pos:column="34"/></operator><name pos:line="97" pos:column="30">count<pos:position pos:line="97" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="37">"reply"<pos:position pos:line="97" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="46">partbuf<pos:position pos:line="97" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="55">stream<pos:position pos:line="97" pos:column="61"/></name></expr></argument>)<pos:position pos:line="97" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="98" pos:column="7">fclose<pos:position pos:line="98" pos:column="13"/></name><argument_list pos:line="98" pos:column="13">(<argument><expr><name pos:line="98" pos:column="14">stream<pos:position pos:line="98" pos:column="20"/></name></expr></argument>)<pos:position pos:line="98" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="22"/></expr_stmt>
      <if pos:line="99" pos:column="7">if<condition pos:line="99" pos:column="9">(<expr><name pos:line="99" pos:column="10">error<pos:position pos:line="99" pos:column="15"/></name></expr>)<pos:position pos:line="99" pos:column="16"/></condition><then pos:line="99" pos:column="16"> <block pos:line="99" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="100" pos:column="9">logmsg<pos:position pos:line="100" pos:column="15"/></name><argument_list pos:line="100" pos:column="15">(<argument><expr><literal type="string" pos:line="100" pos:column="16">"getpart() failed with error: %d"<pos:position pos:line="100" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="51">error<pos:position pos:line="100" pos:column="56"/></name></expr></argument>)<pos:position pos:line="100" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="58"/></expr_stmt>
        <return pos:line="101" pos:column="9">return <expr><literal type="number" pos:line="101" pos:column="16">0<pos:position pos:line="101" pos:column="17"/></literal></expr>;<pos:position pos:line="101" pos:column="18"/></return>
      }<pos:position pos:line="102" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="103" pos:column="7">buffer<pos:position pos:line="103" pos:column="13"/></name> <operator pos:line="103" pos:column="14">=<pos:position pos:line="103" pos:column="15"/></operator> <name pos:line="103" pos:column="16">ptr<pos:position pos:line="103" pos:column="19"/></name></expr>;<pos:position pos:line="103" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="104" pos:column="6"/></block></else></if>

    <if pos:line="106" pos:column="5">if<condition pos:line="106" pos:column="7">(<expr><name pos:line="106" pos:column="8">got_exit_signal<pos:position pos:line="106" pos:column="23"/></name></expr>)<pos:position pos:line="106" pos:column="24"/></condition><then pos:line="106" pos:column="24"> <block pos:line="106" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="107" pos:column="7">free<pos:position pos:line="107" pos:column="11"/></name><argument_list pos:line="107" pos:column="11">(<argument><expr><name pos:line="107" pos:column="12">ptr<pos:position pos:line="107" pos:column="15"/></name></expr></argument>)<pos:position pos:line="107" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="17"/></expr_stmt>
      <return pos:line="108" pos:column="7">return <expr><operator pos:line="108" pos:column="14">-<pos:position pos:line="108" pos:column="15"/></operator><literal type="number" pos:line="108" pos:column="15">1<pos:position pos:line="108" pos:column="16"/></literal></expr>;<pos:position pos:line="108" pos:column="17"/></return>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="111" pos:column="5">/* re-open the same file again */</comment>
    <expr_stmt><expr><name pos:line="112" pos:column="5">stream<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">=<pos:position pos:line="112" pos:column="13"/></operator> <call><name pos:line="112" pos:column="14">fopen<pos:position pos:line="112" pos:column="19"/></name><argument_list pos:line="112" pos:column="19">(<argument><expr><name pos:line="112" pos:column="20">filename<pos:position pos:line="112" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="30">"rb"<pos:position pos:line="112" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="36"/></expr_stmt>
    <if pos:line="113" pos:column="5">if<condition pos:line="113" pos:column="7">(<expr><operator pos:line="113" pos:column="8">!<pos:position pos:line="113" pos:column="9"/></operator><name pos:line="113" pos:column="9">stream<pos:position pos:line="113" pos:column="15"/></name></expr>)<pos:position pos:line="113" pos:column="16"/></condition><then pos:line="113" pos:column="16"> <block pos:line="113" pos:column="17">{
      <expr_stmt><expr><name pos:line="114" pos:column="7">error<pos:position pos:line="114" pos:column="12"/></name> <operator pos:line="114" pos:column="13">=<pos:position pos:line="114" pos:column="14"/></operator> <name pos:line="114" pos:column="15">errno<pos:position pos:line="114" pos:column="20"/></name></expr>;<pos:position pos:line="114" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="115" pos:column="7">logmsg<pos:position pos:line="115" pos:column="13"/></name><argument_list pos:line="115" pos:column="13">(<argument><expr><literal type="string" pos:line="115" pos:column="14">"fopen() failed with error: %d %s"<pos:position pos:line="115" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="115" pos:column="50">error<pos:position pos:line="115" pos:column="55"/></name></expr></argument>, <argument><expr><call><name pos:line="115" pos:column="57">strerror<pos:position pos:line="115" pos:column="65"/></name><argument_list pos:line="115" pos:column="65">(<argument><expr><name pos:line="115" pos:column="66">error<pos:position pos:line="115" pos:column="71"/></name></expr></argument>)<pos:position pos:line="115" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="115" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="74"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="116" pos:column="7">logmsg<pos:position pos:line="116" pos:column="13"/></name><argument_list pos:line="116" pos:column="13">(<argument><expr><literal type="string" pos:line="116" pos:column="14">"  [4] Error opening file: %s"<pos:position pos:line="116" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="46">filename<pos:position pos:line="116" pos:column="54"/></name></expr></argument>)<pos:position pos:line="116" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="117" pos:column="7">free<pos:position pos:line="117" pos:column="11"/></name><argument_list pos:line="117" pos:column="11">(<argument><expr><name pos:line="117" pos:column="12">ptr<pos:position pos:line="117" pos:column="15"/></name></expr></argument>)<pos:position pos:line="117" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="17"/></expr_stmt>
      <return pos:line="118" pos:column="7">return <expr><literal type="number" pos:line="118" pos:column="14">0<pos:position pos:line="118" pos:column="15"/></literal></expr>;<pos:position pos:line="118" pos:column="16"/></return>
    }<pos:position pos:line="119" pos:column="6"/></block></then>
    <else pos:line="120" pos:column="5">else <block pos:line="120" pos:column="10">{
      <comment type="block" pos:line="121" pos:column="7">/* get the custom server control "commands" */</comment>
      <expr_stmt><expr><name pos:line="122" pos:column="7">error<pos:position pos:line="122" pos:column="12"/></name> <operator pos:line="122" pos:column="13">=<pos:position pos:line="122" pos:column="14"/></operator> <call><name pos:line="122" pos:column="15">getpart<pos:position pos:line="122" pos:column="22"/></name><argument_list pos:line="122" pos:column="22">(<argument><expr><operator pos:line="122" pos:column="23">&amp;<pos:position pos:line="122" pos:column="28"/></operator><name pos:line="122" pos:column="24">cmd<pos:position pos:line="122" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="122" pos:column="29">&amp;<pos:position pos:line="122" pos:column="34"/></operator><name pos:line="122" pos:column="30">cmdsize<pos:position pos:line="122" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="39">"reply"<pos:position pos:line="122" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="48">"postcmd"<pos:position pos:line="122" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="59">stream<pos:position pos:line="122" pos:column="65"/></name></expr></argument>)<pos:position pos:line="122" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="123" pos:column="7">fclose<pos:position pos:line="123" pos:column="13"/></name><argument_list pos:line="123" pos:column="13">(<argument><expr><name pos:line="123" pos:column="14">stream<pos:position pos:line="123" pos:column="20"/></name></expr></argument>)<pos:position pos:line="123" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="22"/></expr_stmt>
      <if pos:line="124" pos:column="7">if<condition pos:line="124" pos:column="9">(<expr><name pos:line="124" pos:column="10">error<pos:position pos:line="124" pos:column="15"/></name></expr>)<pos:position pos:line="124" pos:column="16"/></condition><then pos:line="124" pos:column="16"> <block pos:line="124" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="125" pos:column="9">logmsg<pos:position pos:line="125" pos:column="15"/></name><argument_list pos:line="125" pos:column="15">(<argument><expr><literal type="string" pos:line="125" pos:column="16">"getpart() failed with error: %d"<pos:position pos:line="125" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="51">error<pos:position pos:line="125" pos:column="56"/></name></expr></argument>)<pos:position pos:line="125" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">free<pos:position pos:line="126" pos:column="13"/></name><argument_list pos:line="126" pos:column="13">(<argument><expr><name pos:line="126" pos:column="14">ptr<pos:position pos:line="126" pos:column="17"/></name></expr></argument>)<pos:position pos:line="126" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="19"/></expr_stmt>
        <return pos:line="127" pos:column="9">return <expr><literal type="number" pos:line="127" pos:column="16">0<pos:position pos:line="127" pos:column="17"/></literal></expr>;<pos:position pos:line="127" pos:column="18"/></return>
      }<pos:position pos:line="128" pos:column="8"/></block></then></if>
    }<pos:position pos:line="129" pos:column="6"/></block></else></if>
  }<pos:position pos:line="130" pos:column="4"/></block></else></if>

  <if pos:line="132" pos:column="3">if<condition pos:line="132" pos:column="5">(<expr><name pos:line="132" pos:column="6">got_exit_signal<pos:position pos:line="132" pos:column="21"/></name></expr>)<pos:position pos:line="132" pos:column="22"/></condition><then pos:line="132" pos:column="22"> <block pos:line="132" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="133" pos:column="5">free<pos:position pos:line="133" pos:column="9"/></name><argument_list pos:line="133" pos:column="9">(<argument><expr><name pos:line="133" pos:column="10">ptr<pos:position pos:line="133" pos:column="13"/></name></expr></argument>)<pos:position pos:line="133" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="134" pos:column="5">free<pos:position pos:line="134" pos:column="9"/></name><argument_list pos:line="134" pos:column="9">(<argument><expr><name pos:line="134" pos:column="10">cmd<pos:position pos:line="134" pos:column="13"/></name></expr></argument>)<pos:position pos:line="134" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="15"/></expr_stmt>
    <return pos:line="135" pos:column="5">return <expr><operator pos:line="135" pos:column="12">-<pos:position pos:line="135" pos:column="13"/></operator><literal type="number" pos:line="135" pos:column="13">1<pos:position pos:line="135" pos:column="14"/></literal></expr>;<pos:position pos:line="135" pos:column="15"/></return>
  }<pos:position pos:line="136" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="138" pos:column="3">/* If the word 'swsclose' is present anywhere in the reply chunk, the
     connection will be closed after the data has been sent to the requesting
     client... */</comment>
  <if pos:line="141" pos:column="3">if<condition pos:line="141" pos:column="5">(<expr><call><name pos:line="141" pos:column="6">strstr<pos:position pos:line="141" pos:column="12"/></name><argument_list pos:line="141" pos:column="12">(<argument><expr><name pos:line="141" pos:column="13">buffer<pos:position pos:line="141" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="21">"swsclose"<pos:position pos:line="141" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="32"/></argument_list></call> <operator pos:line="141" pos:column="33">||<pos:position pos:line="141" pos:column="35"/></operator> <operator pos:line="141" pos:column="36">!<pos:position pos:line="141" pos:column="37"/></operator><name pos:line="141" pos:column="37">count<pos:position pos:line="141" pos:column="42"/></name></expr>)<pos:position pos:line="141" pos:column="43"/></condition><then pos:line="141" pos:column="43"> <block pos:line="141" pos:column="44">{
    <expr_stmt><expr><name pos:line="142" pos:column="5">persistant<pos:position pos:line="142" pos:column="15"/></name> <operator pos:line="142" pos:column="16">=<pos:position pos:line="142" pos:column="17"/></operator> <name pos:line="142" pos:column="18">FALSE<pos:position pos:line="142" pos:column="23"/></name></expr>;<pos:position pos:line="142" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="143" pos:column="5">logmsg<pos:position pos:line="143" pos:column="11"/></name><argument_list pos:line="143" pos:column="11">(<argument><expr><literal type="string" pos:line="143" pos:column="12">"connection close instruction \"swsclose\" found in response"<pos:position pos:line="143" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="144" pos:column="4"/></block></then></if>
  <if pos:line="145" pos:column="3">if<condition pos:line="145" pos:column="5">(<expr><call><name pos:line="145" pos:column="6">strstr<pos:position pos:line="145" pos:column="12"/></name><argument_list pos:line="145" pos:column="12">(<argument><expr><name pos:line="145" pos:column="13">buffer<pos:position pos:line="145" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="145" pos:column="21">"swsbounce"<pos:position pos:line="145" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="145" pos:column="34"/></condition><then pos:line="145" pos:column="34"> <block pos:line="145" pos:column="35">{
    <expr_stmt><expr><name pos:line="146" pos:column="5">prevbounce<pos:position pos:line="146" pos:column="15"/></name> <operator pos:line="146" pos:column="16">=<pos:position pos:line="146" pos:column="17"/></operator> <name pos:line="146" pos:column="18">TRUE<pos:position pos:line="146" pos:column="22"/></name></expr>;<pos:position pos:line="146" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="147" pos:column="5">logmsg<pos:position pos:line="147" pos:column="11"/></name><argument_list pos:line="147" pos:column="11">(<argument><expr><literal type="string" pos:line="147" pos:column="12">"enable \"swsbounce\" in the next request"<pos:position pos:line="147" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="148" pos:column="4"/></block></then>
  <else pos:line="149" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="150" pos:column="5">prevbounce<pos:position pos:line="150" pos:column="15"/></name> <operator pos:line="150" pos:column="16">=<pos:position pos:line="150" pos:column="17"/></operator> <name pos:line="150" pos:column="18">FALSE<pos:position pos:line="150" pos:column="23"/></name></expr>;<pos:position pos:line="150" pos:column="24"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="152" pos:column="3">dump<pos:position pos:line="152" pos:column="7"/></name> <operator pos:line="152" pos:column="8">=<pos:position pos:line="152" pos:column="9"/></operator> <call><name pos:line="152" pos:column="10">fopen<pos:position pos:line="152" pos:column="15"/></name><argument_list pos:line="152" pos:column="15">(<argument><expr><name pos:line="152" pos:column="16">responsedump<pos:position pos:line="152" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="152" pos:column="30">"ab"<pos:position pos:line="152" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="36"/></expr_stmt>
  <if pos:line="153" pos:column="3">if<condition pos:line="153" pos:column="5">(<expr><operator pos:line="153" pos:column="6">!<pos:position pos:line="153" pos:column="7"/></operator><name pos:line="153" pos:column="7">dump<pos:position pos:line="153" pos:column="11"/></name></expr>)<pos:position pos:line="153" pos:column="12"/></condition><then pos:line="153" pos:column="12"> <block pos:line="153" pos:column="13">{
    <expr_stmt><expr><name pos:line="154" pos:column="5">error<pos:position pos:line="154" pos:column="10"/></name> <operator pos:line="154" pos:column="11">=<pos:position pos:line="154" pos:column="12"/></operator> <name pos:line="154" pos:column="13">errno<pos:position pos:line="154" pos:column="18"/></name></expr>;<pos:position pos:line="154" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="155" pos:column="5">logmsg<pos:position pos:line="155" pos:column="11"/></name><argument_list pos:line="155" pos:column="11">(<argument><expr><literal type="string" pos:line="155" pos:column="12">"fopen() failed with error: %d %s"<pos:position pos:line="155" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="48">error<pos:position pos:line="155" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="155" pos:column="55">strerror<pos:position pos:line="155" pos:column="63"/></name><argument_list pos:line="155" pos:column="63">(<argument><expr><name pos:line="155" pos:column="64">error<pos:position pos:line="155" pos:column="69"/></name></expr></argument>)<pos:position pos:line="155" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="155" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="156" pos:column="5">logmsg<pos:position pos:line="156" pos:column="11"/></name><argument_list pos:line="156" pos:column="11">(<argument><expr><literal type="string" pos:line="156" pos:column="12">"  [5] Error opening file: %s"<pos:position pos:line="156" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="156" pos:column="44">responsedump<pos:position pos:line="156" pos:column="56"/></name></expr></argument>)<pos:position pos:line="156" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="157" pos:column="5">free<pos:position pos:line="157" pos:column="9"/></name><argument_list pos:line="157" pos:column="9">(<argument><expr><name pos:line="157" pos:column="10">ptr<pos:position pos:line="157" pos:column="13"/></name></expr></argument>)<pos:position pos:line="157" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="158" pos:column="5">free<pos:position pos:line="158" pos:column="9"/></name><argument_list pos:line="158" pos:column="9">(<argument><expr><name pos:line="158" pos:column="10">cmd<pos:position pos:line="158" pos:column="13"/></name></expr></argument>)<pos:position pos:line="158" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="15"/></expr_stmt>
    <return pos:line="159" pos:column="5">return <expr><operator pos:line="159" pos:column="12">-<pos:position pos:line="159" pos:column="13"/></operator><literal type="number" pos:line="159" pos:column="13">1<pos:position pos:line="159" pos:column="14"/></literal></expr>;<pos:position pos:line="159" pos:column="15"/></return>
  }<pos:position pos:line="160" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="162" pos:column="3">responsesize<pos:position pos:line="162" pos:column="15"/></name> <operator pos:line="162" pos:column="16">=<pos:position pos:line="162" pos:column="17"/></operator> <name pos:line="162" pos:column="18">count<pos:position pos:line="162" pos:column="23"/></name></expr>;<pos:position pos:line="162" pos:column="24"/></expr_stmt>
  <do pos:line="163" pos:column="3">do <block pos:line="163" pos:column="6">{
    <comment type="block" pos:line="164" pos:column="5">/* Ok, we send no more than N bytes at a time, just to make sure that
       larger chunks are split up so that the client will need to do multiple
       recv() calls to get it and thus we exercise that code better */</comment>
    <decl_stmt><decl><type><name pos:line="167" pos:column="5">size_t<pos:position pos:line="167" pos:column="11"/></name></type> <name pos:line="167" pos:column="12">num<pos:position pos:line="167" pos:column="15"/></name> <init pos:line="167" pos:column="16">= <expr><name pos:line="167" pos:column="18">count<pos:position pos:line="167" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="167" pos:column="24"/></decl_stmt>
    <if pos:line="168" pos:column="5">if<condition pos:line="168" pos:column="7">(<expr><name pos:line="168" pos:column="8">num<pos:position pos:line="168" pos:column="11"/></name> <operator pos:line="168" pos:column="12">&gt;<pos:position pos:line="168" pos:column="16"/></operator> <literal type="number" pos:line="168" pos:column="14">20<pos:position pos:line="168" pos:column="16"/></literal></expr>)<pos:position pos:line="168" pos:column="17"/></condition><then pos:line="168" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><name pos:line="169" pos:column="7">num<pos:position pos:line="169" pos:column="10"/></name> <operator pos:line="169" pos:column="11">=<pos:position pos:line="169" pos:column="12"/></operator> <literal type="number" pos:line="169" pos:column="13">20<pos:position pos:line="169" pos:column="15"/></literal></expr>;<pos:position pos:line="169" pos:column="16"/></expr_stmt></block></then></if>

    <label><name pos:line="171" pos:column="5">retry<pos:position pos:line="171" pos:column="10"/></name>:<pos:position pos:line="171" pos:column="11"/></label>
    <expr_stmt><expr><name pos:line="172" pos:column="5">written<pos:position pos:line="172" pos:column="12"/></name> <operator pos:line="172" pos:column="13">=<pos:position pos:line="172" pos:column="14"/></operator> <call><name pos:line="172" pos:column="15">swrite<pos:position pos:line="172" pos:column="21"/></name><argument_list pos:line="172" pos:column="21">(<argument><expr><name pos:line="172" pos:column="22">sock<pos:position pos:line="172" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="28">buffer<pos:position pos:line="172" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="36">num<pos:position pos:line="172" pos:column="39"/></name></expr></argument>)<pos:position pos:line="172" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="41"/></expr_stmt>
    <if pos:line="173" pos:column="5">if<condition pos:line="173" pos:column="7">(<expr><name pos:line="173" pos:column="8">written<pos:position pos:line="173" pos:column="15"/></name> <operator pos:line="173" pos:column="16">&lt;<pos:position pos:line="173" pos:column="20"/></operator> <literal type="number" pos:line="173" pos:column="18">0<pos:position pos:line="173" pos:column="19"/></literal></expr>)<pos:position pos:line="173" pos:column="20"/></condition><then pos:line="173" pos:column="20"> <block pos:line="173" pos:column="21">{
      <if pos:line="174" pos:column="7">if<condition pos:line="174" pos:column="9">(<expr><operator pos:line="174" pos:column="10">(<pos:position pos:line="174" pos:column="11"/></operator><name pos:line="174" pos:column="11">EWOULDBLOCK<pos:position pos:line="174" pos:column="22"/></name> <operator pos:line="174" pos:column="23">==<pos:position pos:line="174" pos:column="25"/></operator> <name pos:line="174" pos:column="26">SOCKERRNO<pos:position pos:line="174" pos:column="35"/></name><operator pos:line="174" pos:column="35">)<pos:position pos:line="174" pos:column="36"/></operator> <operator pos:line="174" pos:column="37">||<pos:position pos:line="174" pos:column="39"/></operator> <operator pos:line="174" pos:column="40">(<pos:position pos:line="174" pos:column="41"/></operator><name pos:line="174" pos:column="41">EAGAIN<pos:position pos:line="174" pos:column="47"/></name> <operator pos:line="174" pos:column="48">==<pos:position pos:line="174" pos:column="50"/></operator> <name pos:line="174" pos:column="51">SOCKERRNO<pos:position pos:line="174" pos:column="60"/></name><operator pos:line="174" pos:column="60">)<pos:position pos:line="174" pos:column="61"/></operator></expr>)<pos:position pos:line="174" pos:column="62"/></condition><then pos:line="174" pos:column="62"> <block pos:line="174" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="175" pos:column="9">wait_ms<pos:position pos:line="175" pos:column="16"/></name><argument_list pos:line="175" pos:column="16">(<argument><expr><literal type="number" pos:line="175" pos:column="17">10<pos:position pos:line="175" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="21"/></expr_stmt>
        <goto pos:line="176" pos:column="9">goto <name pos:line="176" pos:column="14">retry<pos:position pos:line="176" pos:column="19"/></name>;<pos:position pos:line="176" pos:column="20"/></goto>
      }<pos:position pos:line="177" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="178" pos:column="7">sendfailure<pos:position pos:line="178" pos:column="18"/></name> <operator pos:line="178" pos:column="19">=<pos:position pos:line="178" pos:column="20"/></operator> <name pos:line="178" pos:column="21">TRUE<pos:position pos:line="178" pos:column="25"/></name></expr>;<pos:position pos:line="178" pos:column="26"/></expr_stmt>
      <break pos:line="179" pos:column="7">break;<pos:position pos:line="179" pos:column="13"/></break>
    }<pos:position pos:line="180" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="182" pos:column="5">/* write to file as well */</comment>
    <expr_stmt><expr><call><name pos:line="183" pos:column="5">fwrite<pos:position pos:line="183" pos:column="11"/></name><argument_list pos:line="183" pos:column="11">(<argument><expr><name pos:line="183" pos:column="12">buffer<pos:position pos:line="183" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="183" pos:column="20">1<pos:position pos:line="183" pos:column="21"/></literal></expr></argument>, <argument><expr><operator pos:line="183" pos:column="23">(<pos:position pos:line="183" pos:column="24"/></operator><name pos:line="183" pos:column="24">size_t<pos:position pos:line="183" pos:column="30"/></name><operator pos:line="183" pos:column="30">)<pos:position pos:line="183" pos:column="31"/></operator><name pos:line="183" pos:column="31">written<pos:position pos:line="183" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="40">dump<pos:position pos:line="183" pos:column="44"/></name></expr></argument>)<pos:position pos:line="183" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><name pos:line="185" pos:column="5">count<pos:position pos:line="185" pos:column="10"/></name> <operator pos:line="185" pos:column="11">-=<pos:position pos:line="185" pos:column="13"/></operator> <name pos:line="185" pos:column="14">written<pos:position pos:line="185" pos:column="21"/></name></expr>;<pos:position pos:line="185" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="186" pos:column="5">buffer<pos:position pos:line="186" pos:column="11"/></name> <operator pos:line="186" pos:column="12">+=<pos:position pos:line="186" pos:column="14"/></operator> <name pos:line="186" pos:column="15">written<pos:position pos:line="186" pos:column="22"/></name></expr>;<pos:position pos:line="186" pos:column="23"/></expr_stmt>

    <if pos:line="188" pos:column="5">if<condition pos:line="188" pos:column="7">(<expr><name><name pos:line="188" pos:column="8">req<pos:position pos:line="188" pos:column="11"/></name><operator pos:line="188" pos:column="11">-&gt;<pos:position pos:line="188" pos:column="16"/></operator><name pos:line="188" pos:column="13">writedelay<pos:position pos:line="188" pos:column="23"/></name></name></expr>)<pos:position pos:line="188" pos:column="24"/></condition><then pos:line="188" pos:column="24"> <block pos:line="188" pos:column="25">{
      <decl_stmt><decl><type><name pos:line="189" pos:column="7">int<pos:position pos:line="189" pos:column="10"/></name></type> <name pos:line="189" pos:column="11">quarters<pos:position pos:line="189" pos:column="19"/></name> <init pos:line="189" pos:column="20">= <expr><name><name pos:line="189" pos:column="22">req<pos:position pos:line="189" pos:column="25"/></name><operator pos:line="189" pos:column="25">-&gt;<pos:position pos:line="189" pos:column="30"/></operator><name pos:line="189" pos:column="27">writedelay<pos:position pos:line="189" pos:column="37"/></name></name> <operator pos:line="189" pos:column="38">*<pos:position pos:line="189" pos:column="39"/></operator> <literal type="number" pos:line="189" pos:column="40">4<pos:position pos:line="189" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="189" pos:column="42"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="190" pos:column="7">logmsg<pos:position pos:line="190" pos:column="13"/></name><argument_list pos:line="190" pos:column="13">(<argument><expr><literal type="string" pos:line="190" pos:column="14">"Pausing %d seconds"<pos:position pos:line="190" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="36">req<pos:position pos:line="190" pos:column="39"/></name><operator pos:line="190" pos:column="39">-&gt;<pos:position pos:line="190" pos:column="44"/></operator><name pos:line="190" pos:column="41">writedelay<pos:position pos:line="190" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="190" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="53"/></expr_stmt>
      <while pos:line="191" pos:column="7">while<condition pos:line="191" pos:column="12">(<expr><operator pos:line="191" pos:column="13">(<pos:position pos:line="191" pos:column="14"/></operator><name pos:line="191" pos:column="14">quarters<pos:position pos:line="191" pos:column="22"/></name> <operator pos:line="191" pos:column="23">&gt;<pos:position pos:line="191" pos:column="27"/></operator> <literal type="number" pos:line="191" pos:column="25">0<pos:position pos:line="191" pos:column="26"/></literal><operator pos:line="191" pos:column="26">)<pos:position pos:line="191" pos:column="27"/></operator> <operator pos:line="191" pos:column="28">&amp;&amp;<pos:position pos:line="191" pos:column="38"/></operator> <operator pos:line="191" pos:column="31">!<pos:position pos:line="191" pos:column="32"/></operator><name pos:line="191" pos:column="32">got_exit_signal<pos:position pos:line="191" pos:column="47"/></name></expr>)<pos:position pos:line="191" pos:column="48"/></condition> <block pos:line="191" pos:column="49">{
        <expr_stmt><expr><name pos:line="192" pos:column="9">quarters<pos:position pos:line="192" pos:column="17"/></name><operator pos:line="192" pos:column="17">--<pos:position pos:line="192" pos:column="19"/></operator></expr>;<pos:position pos:line="192" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="193" pos:column="9">wait_ms<pos:position pos:line="193" pos:column="16"/></name><argument_list pos:line="193" pos:column="16">(<argument><expr><literal type="number" pos:line="193" pos:column="17">250<pos:position pos:line="193" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="22"/></expr_stmt>
      }<pos:position pos:line="194" pos:column="8"/></block></while>
    }<pos:position pos:line="195" pos:column="6"/></block></then></if>
  }<pos:position pos:line="196" pos:column="4"/></block> while<condition pos:line="196" pos:column="10">(<expr><operator pos:line="196" pos:column="11">(<pos:position pos:line="196" pos:column="12"/></operator><name pos:line="196" pos:column="12">count<pos:position pos:line="196" pos:column="17"/></name> <operator pos:line="196" pos:column="18">&gt;<pos:position pos:line="196" pos:column="22"/></operator> <literal type="number" pos:line="196" pos:column="20">0<pos:position pos:line="196" pos:column="21"/></literal><operator pos:line="196" pos:column="21">)<pos:position pos:line="196" pos:column="22"/></operator> <operator pos:line="196" pos:column="23">&amp;&amp;<pos:position pos:line="196" pos:column="33"/></operator> <operator pos:line="196" pos:column="26">!<pos:position pos:line="196" pos:column="27"/></operator><name pos:line="196" pos:column="27">got_exit_signal<pos:position pos:line="196" pos:column="42"/></name></expr>)<pos:position pos:line="196" pos:column="43"/></condition>;<pos:position pos:line="196" pos:column="44"/></do>

  <do pos:line="198" pos:column="3">do <block pos:line="198" pos:column="6">{
    <expr_stmt><expr><name pos:line="199" pos:column="5">res<pos:position pos:line="199" pos:column="8"/></name> <operator pos:line="199" pos:column="9">=<pos:position pos:line="199" pos:column="10"/></operator> <call><name pos:line="199" pos:column="11">fclose<pos:position pos:line="199" pos:column="17"/></name><argument_list pos:line="199" pos:column="17">(<argument><expr><name pos:line="199" pos:column="18">dump<pos:position pos:line="199" pos:column="22"/></name></expr></argument>)<pos:position pos:line="199" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="200" pos:column="4"/></block> while<condition pos:line="200" pos:column="10">(<expr><name pos:line="200" pos:column="11">res<pos:position pos:line="200" pos:column="14"/></name> <operator pos:line="200" pos:column="15">&amp;&amp;<pos:position pos:line="200" pos:column="25"/></operator> <operator pos:line="200" pos:column="18">(<pos:position pos:line="200" pos:column="19"/></operator><operator pos:line="200" pos:column="19">(<pos:position pos:line="200" pos:column="20"/></operator><name pos:line="200" pos:column="20">error<pos:position pos:line="200" pos:column="25"/></name> <operator pos:line="200" pos:column="26">=<pos:position pos:line="200" pos:column="27"/></operator> <name pos:line="200" pos:column="28">errno<pos:position pos:line="200" pos:column="33"/></name><operator pos:line="200" pos:column="33">)<pos:position pos:line="200" pos:column="34"/></operator> <operator pos:line="200" pos:column="35">==<pos:position pos:line="200" pos:column="37"/></operator> <name pos:line="200" pos:column="38">EINTR<pos:position pos:line="200" pos:column="43"/></name><operator pos:line="200" pos:column="43">)<pos:position pos:line="200" pos:column="44"/></operator></expr>)<pos:position pos:line="200" pos:column="45"/></condition>;<pos:position pos:line="200" pos:column="46"/></do>
  <if pos:line="201" pos:column="3">if<condition pos:line="201" pos:column="5">(<expr><name pos:line="201" pos:column="6">res<pos:position pos:line="201" pos:column="9"/></name></expr>)<pos:position pos:line="201" pos:column="10"/></condition><then pos:line="201" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="202" pos:column="5">logmsg<pos:position pos:line="202" pos:column="11"/></name><argument_list pos:line="202" pos:column="11">(<argument><expr><literal type="string" pos:line="202" pos:column="12">"Error closing file %s error: %d %s"<pos:position pos:line="202" pos:column="48"/></literal></expr></argument>,
           <argument><expr><name pos:line="203" pos:column="12">responsedump<pos:position pos:line="203" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="203" pos:column="26">error<pos:position pos:line="203" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="203" pos:column="33">strerror<pos:position pos:line="203" pos:column="41"/></name><argument_list pos:line="203" pos:column="41">(<argument><expr><name pos:line="203" pos:column="42">error<pos:position pos:line="203" pos:column="47"/></name></expr></argument>)<pos:position pos:line="203" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="203" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="50"/></expr_stmt></block></then></if>

  <if pos:line="205" pos:column="3">if<condition pos:line="205" pos:column="5">(<expr><name pos:line="205" pos:column="6">got_exit_signal<pos:position pos:line="205" pos:column="21"/></name></expr>)<pos:position pos:line="205" pos:column="22"/></condition><then pos:line="205" pos:column="22"> <block pos:line="205" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="206" pos:column="5">free<pos:position pos:line="206" pos:column="9"/></name><argument_list pos:line="206" pos:column="9">(<argument><expr><name pos:line="206" pos:column="10">ptr<pos:position pos:line="206" pos:column="13"/></name></expr></argument>)<pos:position pos:line="206" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="207" pos:column="5">free<pos:position pos:line="207" pos:column="9"/></name><argument_list pos:line="207" pos:column="9">(<argument><expr><name pos:line="207" pos:column="10">cmd<pos:position pos:line="207" pos:column="13"/></name></expr></argument>)<pos:position pos:line="207" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="15"/></expr_stmt>
    <return pos:line="208" pos:column="5">return <expr><operator pos:line="208" pos:column="12">-<pos:position pos:line="208" pos:column="13"/></operator><literal type="number" pos:line="208" pos:column="13">1<pos:position pos:line="208" pos:column="14"/></literal></expr>;<pos:position pos:line="208" pos:column="15"/></return>
  }<pos:position pos:line="209" pos:column="4"/></block></then></if>

  <if pos:line="211" pos:column="3">if<condition pos:line="211" pos:column="5">(<expr><name pos:line="211" pos:column="6">sendfailure<pos:position pos:line="211" pos:column="17"/></name></expr>)<pos:position pos:line="211" pos:column="18"/></condition><then pos:line="211" pos:column="18"> <block pos:line="211" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="212" pos:column="5">logmsg<pos:position pos:line="212" pos:column="11"/></name><argument_list pos:line="212" pos:column="11">(<argument><expr><literal type="string" pos:line="212" pos:column="12">"Sending response failed. Only (%zu bytes) of (%zu bytes) "<pos:position pos:line="212" pos:column="71"/></literal>
           <literal type="string" pos:line="213" pos:column="12">"were sent"<pos:position pos:line="213" pos:column="23"/></literal></expr></argument>,
           <argument><expr><name pos:line="214" pos:column="12">responsesize<pos:position pos:line="214" pos:column="24"/></name><operator pos:line="214" pos:column="24">-<pos:position pos:line="214" pos:column="25"/></operator><name pos:line="214" pos:column="25">count<pos:position pos:line="214" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="214" pos:column="32">responsesize<pos:position pos:line="214" pos:column="44"/></name></expr></argument>)<pos:position pos:line="214" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="215" pos:column="5">free<pos:position pos:line="215" pos:column="9"/></name><argument_list pos:line="215" pos:column="9">(<argument><expr><name pos:line="215" pos:column="10">ptr<pos:position pos:line="215" pos:column="13"/></name></expr></argument>)<pos:position pos:line="215" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="216" pos:column="5">free<pos:position pos:line="216" pos:column="9"/></name><argument_list pos:line="216" pos:column="9">(<argument><expr><name pos:line="216" pos:column="10">cmd<pos:position pos:line="216" pos:column="13"/></name></expr></argument>)<pos:position pos:line="216" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="15"/></expr_stmt>
    <return pos:line="217" pos:column="5">return <expr><operator pos:line="217" pos:column="12">-<pos:position pos:line="217" pos:column="13"/></operator><literal type="number" pos:line="217" pos:column="13">1<pos:position pos:line="217" pos:column="14"/></literal></expr>;<pos:position pos:line="217" pos:column="15"/></return>
  }<pos:position pos:line="218" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="220" pos:column="3">logmsg<pos:position pos:line="220" pos:column="9"/></name><argument_list pos:line="220" pos:column="9">(<argument><expr><literal type="string" pos:line="220" pos:column="10">"Response sent (%zu bytes) and written to %s"<pos:position pos:line="220" pos:column="55"/></literal></expr></argument>,
         <argument><expr><name pos:line="221" pos:column="10">responsesize<pos:position pos:line="221" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="24">responsedump<pos:position pos:line="221" pos:column="36"/></name></expr></argument>)<pos:position pos:line="221" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="222" pos:column="3">free<pos:position pos:line="222" pos:column="7"/></name><argument_list pos:line="222" pos:column="7">(<argument><expr><name pos:line="222" pos:column="8">ptr<pos:position pos:line="222" pos:column="11"/></name></expr></argument>)<pos:position pos:line="222" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="13"/></expr_stmt>

  <if pos:line="224" pos:column="3">if<condition pos:line="224" pos:column="5">(<expr><name pos:line="224" pos:column="6">cmdsize<pos:position pos:line="224" pos:column="13"/></name> <operator pos:line="224" pos:column="14">&gt;<pos:position pos:line="224" pos:column="18"/></operator> <literal type="number" pos:line="224" pos:column="16">0<pos:position pos:line="224" pos:column="17"/></literal></expr>)<pos:position pos:line="224" pos:column="18"/></condition><then pos:line="224" pos:column="18"> <block pos:line="224" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="225" pos:column="5">char<pos:position pos:line="225" pos:column="9"/></name></type> <name><name pos:line="225" pos:column="10">command<pos:position pos:line="225" pos:column="17"/></name><index pos:line="225" pos:column="17">[<expr><literal type="number" pos:line="225" pos:column="18">32<pos:position pos:line="225" pos:column="20"/></literal></expr>]<pos:position pos:line="225" pos:column="21"/></index></name></decl>;<pos:position pos:line="225" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="226" pos:column="5">int<pos:position pos:line="226" pos:column="8"/></name></type> <name pos:line="226" pos:column="9">quarters<pos:position pos:line="226" pos:column="17"/></name></decl>;<pos:position pos:line="226" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="227" pos:column="5">int<pos:position pos:line="227" pos:column="8"/></name></type> <name pos:line="227" pos:column="9">num<pos:position pos:line="227" pos:column="12"/></name></decl>;<pos:position pos:line="227" pos:column="13"/></decl_stmt>
    <expr_stmt><expr><name pos:line="228" pos:column="5">ptr<pos:position pos:line="228" pos:column="8"/></name> <operator pos:line="228" pos:column="9">=<pos:position pos:line="228" pos:column="10"/></operator> <name pos:line="228" pos:column="11">cmd<pos:position pos:line="228" pos:column="14"/></name></expr>;<pos:position pos:line="228" pos:column="15"/></expr_stmt>
    <do pos:line="229" pos:column="5">do <block pos:line="229" pos:column="8">{
      <if pos:line="230" pos:column="7">if<condition pos:line="230" pos:column="9">(<expr><literal type="number" pos:line="230" pos:column="10">2<pos:position pos:line="230" pos:column="11"/></literal> <operator pos:line="230" pos:column="12">==<pos:position pos:line="230" pos:column="14"/></operator> <call><name pos:line="230" pos:column="15">sscanf<pos:position pos:line="230" pos:column="21"/></name><argument_list pos:line="230" pos:column="21">(<argument><expr><name pos:line="230" pos:column="22">ptr<pos:position pos:line="230" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="230" pos:column="27">"%31s %d"<pos:position pos:line="230" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="38">command<pos:position pos:line="230" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="230" pos:column="47">&amp;<pos:position pos:line="230" pos:column="52"/></operator><name pos:line="230" pos:column="48">num<pos:position pos:line="230" pos:column="51"/></name></expr></argument>)<pos:position pos:line="230" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="230" pos:column="53"/></condition><then pos:line="230" pos:column="53"> <block pos:line="230" pos:column="54">{
        <if pos:line="231" pos:column="9">if<condition pos:line="231" pos:column="11">(<expr><operator pos:line="231" pos:column="12">!<pos:position pos:line="231" pos:column="13"/></operator><call><name pos:line="231" pos:column="13">strcmp<pos:position pos:line="231" pos:column="19"/></name><argument_list pos:line="231" pos:column="19">(<argument><expr><literal type="string" pos:line="231" pos:column="20">"wait"<pos:position pos:line="231" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="231" pos:column="28">command<pos:position pos:line="231" pos:column="35"/></name></expr></argument>)<pos:position pos:line="231" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="231" pos:column="37"/></condition><then pos:line="231" pos:column="37"> <block pos:line="231" pos:column="38">{
          <expr_stmt><expr><call><name pos:line="232" pos:column="11">logmsg<pos:position pos:line="232" pos:column="17"/></name><argument_list pos:line="232" pos:column="17">(<argument><expr><literal type="string" pos:line="232" pos:column="18">"Told to sleep for %d seconds"<pos:position pos:line="232" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="232" pos:column="50">num<pos:position pos:line="232" pos:column="53"/></name></expr></argument>)<pos:position pos:line="232" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="55"/></expr_stmt>
          <expr_stmt><expr><name pos:line="233" pos:column="11">quarters<pos:position pos:line="233" pos:column="19"/></name> <operator pos:line="233" pos:column="20">=<pos:position pos:line="233" pos:column="21"/></operator> <name pos:line="233" pos:column="22">num<pos:position pos:line="233" pos:column="25"/></name> <operator pos:line="233" pos:column="26">*<pos:position pos:line="233" pos:column="27"/></operator> <literal type="number" pos:line="233" pos:column="28">4<pos:position pos:line="233" pos:column="29"/></literal></expr>;<pos:position pos:line="233" pos:column="30"/></expr_stmt>
          <while pos:line="234" pos:column="11">while<condition pos:line="234" pos:column="16">(<expr><operator pos:line="234" pos:column="17">(<pos:position pos:line="234" pos:column="18"/></operator><name pos:line="234" pos:column="18">quarters<pos:position pos:line="234" pos:column="26"/></name> <operator pos:line="234" pos:column="27">&gt;<pos:position pos:line="234" pos:column="31"/></operator> <literal type="number" pos:line="234" pos:column="29">0<pos:position pos:line="234" pos:column="30"/></literal><operator pos:line="234" pos:column="30">)<pos:position pos:line="234" pos:column="31"/></operator> <operator pos:line="234" pos:column="32">&amp;&amp;<pos:position pos:line="234" pos:column="42"/></operator> <operator pos:line="234" pos:column="35">!<pos:position pos:line="234" pos:column="36"/></operator><name pos:line="234" pos:column="36">got_exit_signal<pos:position pos:line="234" pos:column="51"/></name></expr>)<pos:position pos:line="234" pos:column="52"/></condition> <block pos:line="234" pos:column="53">{
            <expr_stmt><expr><name pos:line="235" pos:column="13">quarters<pos:position pos:line="235" pos:column="21"/></name><operator pos:line="235" pos:column="21">--<pos:position pos:line="235" pos:column="23"/></operator></expr>;<pos:position pos:line="235" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><name pos:line="236" pos:column="13">res<pos:position pos:line="236" pos:column="16"/></name> <operator pos:line="236" pos:column="17">=<pos:position pos:line="236" pos:column="18"/></operator> <call><name pos:line="236" pos:column="19">wait_ms<pos:position pos:line="236" pos:column="26"/></name><argument_list pos:line="236" pos:column="26">(<argument><expr><literal type="number" pos:line="236" pos:column="27">250<pos:position pos:line="236" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="32"/></expr_stmt>
            <if pos:line="237" pos:column="13">if<condition pos:line="237" pos:column="15">(<expr><name pos:line="237" pos:column="16">res<pos:position pos:line="237" pos:column="19"/></name></expr>)<pos:position pos:line="237" pos:column="20"/></condition><then pos:line="237" pos:column="20"> <block pos:line="237" pos:column="21">{
              <comment type="block" pos:line="238" pos:column="15">/* should not happen */</comment>
              <expr_stmt><expr><name pos:line="239" pos:column="15">error<pos:position pos:line="239" pos:column="20"/></name> <operator pos:line="239" pos:column="21">=<pos:position pos:line="239" pos:column="22"/></operator> <name pos:line="239" pos:column="23">errno<pos:position pos:line="239" pos:column="28"/></name></expr>;<pos:position pos:line="239" pos:column="29"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="240" pos:column="15">logmsg<pos:position pos:line="240" pos:column="21"/></name><argument_list pos:line="240" pos:column="21">(<argument><expr><literal type="string" pos:line="240" pos:column="22">"wait_ms() failed with error: (%d) %s"<pos:position pos:line="240" pos:column="60"/></literal></expr></argument>,
                     <argument><expr><name pos:line="241" pos:column="22">error<pos:position pos:line="241" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="241" pos:column="29">strerror<pos:position pos:line="241" pos:column="37"/></name><argument_list pos:line="241" pos:column="37">(<argument><expr><name pos:line="241" pos:column="38">error<pos:position pos:line="241" pos:column="43"/></name></expr></argument>)<pos:position pos:line="241" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="241" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="46"/></expr_stmt>
              <break pos:line="242" pos:column="15">break;<pos:position pos:line="242" pos:column="21"/></break>
            }<pos:position pos:line="243" pos:column="14"/></block></then></if>
          }<pos:position pos:line="244" pos:column="12"/></block></while>
          <if pos:line="245" pos:column="11">if<condition pos:line="245" pos:column="13">(<expr><operator pos:line="245" pos:column="14">!<pos:position pos:line="245" pos:column="15"/></operator><name pos:line="245" pos:column="15">quarters<pos:position pos:line="245" pos:column="23"/></name></expr>)<pos:position pos:line="245" pos:column="24"/></condition><then pos:line="245" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="246" pos:column="13">logmsg<pos:position pos:line="246" pos:column="19"/></name><argument_list pos:line="246" pos:column="19">(<argument><expr><literal type="string" pos:line="246" pos:column="20">"Continuing after sleeping %d seconds"<pos:position pos:line="246" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="246" pos:column="60">num<pos:position pos:line="246" pos:column="63"/></name></expr></argument>)<pos:position pos:line="246" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="65"/></expr_stmt></block></then></if>
        }<pos:position pos:line="247" pos:column="10"/></block></then>
        <else pos:line="248" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="249" pos:column="11">logmsg<pos:position pos:line="249" pos:column="17"/></name><argument_list pos:line="249" pos:column="17">(<argument><expr><literal type="string" pos:line="249" pos:column="18">"Unknown command in reply command section"<pos:position pos:line="249" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="249" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="62"/></expr_stmt></block></else></if>
      }<pos:position pos:line="250" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="251" pos:column="7">ptr<pos:position pos:line="251" pos:column="10"/></name> <operator pos:line="251" pos:column="11">=<pos:position pos:line="251" pos:column="12"/></operator> <call><name pos:line="251" pos:column="13">strchr<pos:position pos:line="251" pos:column="19"/></name><argument_list pos:line="251" pos:column="19">(<argument><expr><name pos:line="251" pos:column="20">ptr<pos:position pos:line="251" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="251" pos:column="25">'\n'<pos:position pos:line="251" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="251" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="31"/></expr_stmt>
      <if pos:line="252" pos:column="7">if<condition pos:line="252" pos:column="9">(<expr><name pos:line="252" pos:column="10">ptr<pos:position pos:line="252" pos:column="13"/></name></expr>)<pos:position pos:line="252" pos:column="14"/></condition><then pos:line="252" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><name pos:line="253" pos:column="9">ptr<pos:position pos:line="253" pos:column="12"/></name><operator pos:line="253" pos:column="12">++<pos:position pos:line="253" pos:column="14"/></operator></expr>;<pos:position pos:line="253" pos:column="15"/></expr_stmt></block></then>
      <else pos:line="254" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="255" pos:column="9">ptr<pos:position pos:line="255" pos:column="12"/></name> <operator pos:line="255" pos:column="13">=<pos:position pos:line="255" pos:column="14"/></operator> <name pos:line="255" pos:column="15">NULL<pos:position pos:line="255" pos:column="19"/></name></expr>;<pos:position pos:line="255" pos:column="20"/></expr_stmt></block></else></if>
    }<pos:position pos:line="256" pos:column="6"/></block> while<condition pos:line="256" pos:column="12">(<expr><name pos:line="256" pos:column="13">ptr<pos:position pos:line="256" pos:column="16"/></name> <operator pos:line="256" pos:column="17">&amp;&amp;<pos:position pos:line="256" pos:column="27"/></operator> <operator pos:line="256" pos:column="20">*<pos:position pos:line="256" pos:column="21"/></operator><name pos:line="256" pos:column="21">ptr<pos:position pos:line="256" pos:column="24"/></name></expr>)<pos:position pos:line="256" pos:column="25"/></condition>;<pos:position pos:line="256" pos:column="26"/></do>
  }<pos:position pos:line="257" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="258" pos:column="3">free<pos:position pos:line="258" pos:column="7"/></name><argument_list pos:line="258" pos:column="7">(<argument><expr><name pos:line="258" pos:column="8">cmd<pos:position pos:line="258" pos:column="11"/></name></expr></argument>)<pos:position pos:line="258" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="259" pos:column="3">req<pos:position pos:line="259" pos:column="6"/></name><operator pos:line="259" pos:column="6">-&gt;<pos:position pos:line="259" pos:column="11"/></operator><name pos:line="259" pos:column="8">open<pos:position pos:line="259" pos:column="12"/></name></name> <operator pos:line="259" pos:column="13">=<pos:position pos:line="259" pos:column="14"/></operator> <ternary><condition><expr><name pos:line="259" pos:column="15">use_gopher<pos:position pos:line="259" pos:column="25"/></name></expr>?<pos:position pos:line="259" pos:column="26"/></condition><then><expr><name pos:line="259" pos:column="26">FALSE<pos:position pos:line="259" pos:column="31"/></name></expr></then><else pos:line="259" pos:column="31">:<expr><name pos:line="259" pos:column="32">persistant<pos:position pos:line="259" pos:column="42"/></name></expr></else></ternary></expr>;<pos:position pos:line="259" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><name pos:line="261" pos:column="3">prevtestno<pos:position pos:line="261" pos:column="13"/></name> <operator pos:line="261" pos:column="14">=<pos:position pos:line="261" pos:column="15"/></operator> <name><name pos:line="261" pos:column="16">req<pos:position pos:line="261" pos:column="19"/></name><operator pos:line="261" pos:column="19">-&gt;<pos:position pos:line="261" pos:column="24"/></operator><name pos:line="261" pos:column="21">testno<pos:position pos:line="261" pos:column="27"/></name></name></expr>;<pos:position pos:line="261" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="262" pos:column="3">prevpartno<pos:position pos:line="262" pos:column="13"/></name> <operator pos:line="262" pos:column="14">=<pos:position pos:line="262" pos:column="15"/></operator> <name><name pos:line="262" pos:column="16">req<pos:position pos:line="262" pos:column="19"/></name><operator pos:line="262" pos:column="19">-&gt;<pos:position pos:line="262" pos:column="24"/></operator><name pos:line="262" pos:column="21">partno<pos:position pos:line="262" pos:column="27"/></name></name></expr>;<pos:position pos:line="262" pos:column="28"/></expr_stmt>

  <return pos:line="264" pos:column="3">return <expr><literal type="number" pos:line="264" pos:column="10">0<pos:position pos:line="264" pos:column="11"/></literal></expr>;<pos:position pos:line="264" pos:column="12"/></return>
}<pos:position pos:line="265" pos:column="2"/></block></function></unit>
