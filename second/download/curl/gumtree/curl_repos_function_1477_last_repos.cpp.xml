<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1477_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">parseurlandfillconn<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">Curl_easy<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">data<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
                                    <parameter><decl><type><name><name pos:line="2" pos:column="37">struct<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">connectdata<pos:position pos:line="2" pos:column="55"/></name></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">conn<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="3" pos:column="37">bool<pos:position pos:line="3" pos:column="41"/></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">prot_missing<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="4" pos:column="37">char<pos:position pos:line="4" pos:column="41"/></name> <modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier><modifier pos:line="4" pos:column="43">*<pos:position pos:line="4" pos:column="44"/></modifier></type><name pos:line="4" pos:column="44">userp<pos:position pos:line="4" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="51">char<pos:position pos:line="4" pos:column="55"/></name> <modifier pos:line="4" pos:column="56">*<pos:position pos:line="4" pos:column="57"/></modifier><modifier pos:line="4" pos:column="57">*<pos:position pos:line="4" pos:column="58"/></modifier></type><name pos:line="4" pos:column="58">passwdp<pos:position pos:line="4" pos:column="65"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="5" pos:column="37">char<pos:position pos:line="5" pos:column="41"/></name> <modifier pos:line="5" pos:column="42">*<pos:position pos:line="5" pos:column="43"/></modifier><modifier pos:line="5" pos:column="43">*<pos:position pos:line="5" pos:column="44"/></modifier></type><name pos:line="5" pos:column="44">optionsp<pos:position pos:line="5" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="53"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">at<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">fragment<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">path<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><name><name pos:line="9" pos:column="16">data<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">state<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">.<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">path<pos:position pos:line="9" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">query<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">i<pos:position pos:line="11" pos:column="8"/></name></decl>;<pos:position pos:line="11" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">rc<pos:position pos:line="12" pos:column="9"/></name></decl>;<pos:position pos:line="12" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="13" pos:column="3">const<pos:position pos:line="13" pos:column="8"/></specifier> <name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name> <modifier pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></modifier></type><name pos:line="13" pos:column="15">protop<pos:position pos:line="13" pos:column="21"/></name> <init pos:line="13" pos:column="22">= <expr><literal type="string" pos:line="13" pos:column="24">""<pos:position pos:line="13" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">CURLcode<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">result<pos:position pos:line="14" pos:column="18"/></name></decl>;<pos:position pos:line="14" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">bool<pos:position pos:line="15" pos:column="7"/></name></type> <name pos:line="15" pos:column="8">rebuild_url<pos:position pos:line="15" pos:column="19"/></name> <init pos:line="15" pos:column="20">= <expr><name pos:line="15" pos:column="22">FALSE<pos:position pos:line="15" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">bool<pos:position pos:line="16" pos:column="7"/></name></type> <name pos:line="16" pos:column="8">url_has_scheme<pos:position pos:line="16" pos:column="22"/></name> <init pos:line="16" pos:column="23">= <expr><name pos:line="16" pos:column="25">FALSE<pos:position pos:line="16" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name></type> <name><name pos:line="17" pos:column="8">protobuf<pos:position pos:line="17" pos:column="16"/></name><index pos:line="17" pos:column="16">[<expr><literal type="number" pos:line="17" pos:column="17">16<pos:position pos:line="17" pos:column="19"/></literal></expr>]<pos:position pos:line="17" pos:column="20"/></index></name></decl>;<pos:position pos:line="17" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="19" pos:column="3">*<pos:position pos:line="19" pos:column="4"/></operator><name pos:line="19" pos:column="4">prot_missing<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <name pos:line="19" pos:column="19">FALSE<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* We might pass the entire URL into the request so we need to make sure
   * there are no bad characters in there.*/</comment>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><call><name pos:line="23" pos:column="6">strpbrk<pos:position pos:line="23" pos:column="13"/></name><argument_list pos:line="23" pos:column="13">(<argument><expr><name><name pos:line="23" pos:column="14">data<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">change<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">.<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">url<pos:position pos:line="23" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="32">"\r\n"<pos:position pos:line="23" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40"> <block pos:line="23" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">failf<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><name pos:line="24" pos:column="11">data<pos:position pos:line="24" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="17">"Illegal characters found in URL"<pos:position pos:line="24" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">CURLE_URL_MALFORMAT<pos:position pos:line="25" pos:column="31"/></name></expr>;<pos:position pos:line="25" pos:column="32"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <comment type="block" format="doxygen" pos:line="28" pos:column="3">/*************************************************************
   * Parse the URL.
   *
   * We need to parse the url even when using the proxy, because we will need
   * the hostname and port in case we are trying to SSL connect through the
   * proxy -- and we don't know if we will need to use SSL until we parse the
   * url ...
   ************************************************************/</comment>
  <if pos:line="36" pos:column="3">if<condition pos:line="36" pos:column="5">(<expr><name><name pos:line="36" pos:column="6">data<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">change<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">.<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">url<pos:position pos:line="36" pos:column="22"/></name><index pos:line="36" pos:column="22">[<expr><literal type="number" pos:line="36" pos:column="23">0<pos:position pos:line="36" pos:column="24"/></literal></expr>]<pos:position pos:line="36" pos:column="25"/></index></name> <operator pos:line="36" pos:column="26">==<pos:position pos:line="36" pos:column="28"/></operator> <literal type="char" pos:line="36" pos:column="29">':'<pos:position pos:line="36" pos:column="32"/></literal></expr>)<pos:position pos:line="36" pos:column="33"/></condition><then pos:line="36" pos:column="33"> <block pos:line="36" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">failf<pos:position pos:line="37" pos:column="10"/></name><argument_list pos:line="37" pos:column="10">(<argument><expr><name pos:line="37" pos:column="11">data<pos:position pos:line="37" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="17">"Bad URL, colon is first character"<pos:position pos:line="37" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="54"/></expr_stmt>
    <return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">CURLE_URL_MALFORMAT<pos:position pos:line="38" pos:column="31"/></name></expr>;<pos:position pos:line="38" pos:column="32"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="41" pos:column="3">/* MSDOS/Windows style drive prefix, eg c: in c:foo */</comment>
<cpp:define pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">define<pos:position pos:line="42" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="42" pos:column="9">STARTS_WITH_DRIVE_PREFIX<pos:position pos:line="42" pos:column="33"/></name><parameter_list pos:line="42" pos:column="33">(<parameter><type><name pos:line="42" pos:column="34">str<pos:position pos:line="42" pos:column="37"/></name></type></parameter>)<pos:position pos:line="42" pos:column="38"/></parameter_list></cpp:macro> \
  <cpp:value pos:line="43" pos:column="3">((('a' &lt;= str[0] &amp;&amp; str[0] &lt;= 'z') || \
    ('A' &lt;= str[0] &amp;&amp; str[0] &lt;= 'Z')) &amp;&amp; \
   (str[1] == ':'))<pos:position pos:line="45" pos:column="20"/></cpp:value></cpp:define>

  <comment type="block" pos:line="47" pos:column="3">/* Don't mistake a drive letter for a scheme if the default protocol is file.
     curld --proto-default file c:/foo/bar.txt */</comment>
  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><call><name pos:line="49" pos:column="6">STARTS_WITH_DRIVE_PREFIX<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">(<argument><expr><name><name pos:line="49" pos:column="31">data<pos:position pos:line="49" pos:column="35"/></name><operator pos:line="49" pos:column="35">-&gt;<pos:position pos:line="49" pos:column="40"/></operator><name pos:line="49" pos:column="37">change<pos:position pos:line="49" pos:column="43"/></name><operator pos:line="49" pos:column="43">.<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="44">url<pos:position pos:line="49" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="48"/></argument_list></call> <operator pos:line="49" pos:column="49">&amp;&amp;<pos:position pos:line="49" pos:column="59"/></operator>
     <name><name pos:line="50" pos:column="6">data<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">-&gt;<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="12">set<pos:position pos:line="50" pos:column="15"/></name><operator pos:line="50" pos:column="15">.<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="16">str<pos:position pos:line="50" pos:column="19"/></name><index pos:line="50" pos:column="19">[<expr><name pos:line="50" pos:column="20">STRING_DEFAULT_PROTOCOL<pos:position pos:line="50" pos:column="43"/></name></expr>]<pos:position pos:line="50" pos:column="44"/></index></name> <operator pos:line="50" pos:column="45">&amp;&amp;<pos:position pos:line="50" pos:column="55"/></operator>
     <call><name pos:line="51" pos:column="6">strcasecompare<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><name><name pos:line="51" pos:column="21">data<pos:position pos:line="51" pos:column="25"/></name><operator pos:line="51" pos:column="25">-&gt;<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="27">set<pos:position pos:line="51" pos:column="30"/></name><operator pos:line="51" pos:column="30">.<pos:position pos:line="51" pos:column="31"/></operator><name pos:line="51" pos:column="31">str<pos:position pos:line="51" pos:column="34"/></name><index pos:line="51" pos:column="34">[<expr><name pos:line="51" pos:column="35">STRING_DEFAULT_PROTOCOL<pos:position pos:line="51" pos:column="58"/></name></expr>]<pos:position pos:line="51" pos:column="59"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="61">"file"<pos:position pos:line="51" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="69"/></condition><then pos:line="51" pos:column="69"> <block pos:line="51" pos:column="70">{
    <empty_stmt pos:line="52" pos:column="5">;<pos:position pos:line="52" pos:column="6"/></empty_stmt> <comment type="block" pos:line="52" pos:column="7">/* do nothing */</comment>
  }<pos:position pos:line="53" pos:column="4"/></block></then>
  <else pos:line="54" pos:column="3">else <block pos:line="54" pos:column="8">{ <comment type="block" pos:line="54" pos:column="10">/* check for a scheme */</comment>
    <for pos:line="55" pos:column="5">for<control pos:line="55" pos:column="8">(<init><expr><name pos:line="55" pos:column="9">i<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <literal type="number" pos:line="55" pos:column="13">0<pos:position pos:line="55" pos:column="14"/></literal></expr>;<pos:position pos:line="55" pos:column="15"/></init> <condition><expr><name pos:line="55" pos:column="16">i<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">&lt;<pos:position pos:line="55" pos:column="22"/></operator> <literal type="number" pos:line="55" pos:column="20">16<pos:position pos:line="55" pos:column="22"/></literal> <operator pos:line="55" pos:column="23">&amp;&amp;<pos:position pos:line="55" pos:column="33"/></operator> <name><name pos:line="55" pos:column="26">data<pos:position pos:line="55" pos:column="30"/></name><operator pos:line="55" pos:column="30">-&gt;<pos:position pos:line="55" pos:column="35"/></operator><name pos:line="55" pos:column="32">change<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">.<pos:position pos:line="55" pos:column="39"/></operator><name pos:line="55" pos:column="39">url<pos:position pos:line="55" pos:column="42"/></name><index pos:line="55" pos:column="42">[<expr><name pos:line="55" pos:column="43">i<pos:position pos:line="55" pos:column="44"/></name></expr>]<pos:position pos:line="55" pos:column="45"/></index></name></expr>;<pos:position pos:line="55" pos:column="46"/></condition> <incr><expr><operator pos:line="55" pos:column="47">++<pos:position pos:line="55" pos:column="49"/></operator><name pos:line="55" pos:column="49">i<pos:position pos:line="55" pos:column="50"/></name></expr></incr>)<pos:position pos:line="55" pos:column="51"/></control> <block pos:line="55" pos:column="52">{
      <if pos:line="56" pos:column="7">if<condition pos:line="56" pos:column="9">(<expr><name><name pos:line="56" pos:column="10">data<pos:position pos:line="56" pos:column="14"/></name><operator pos:line="56" pos:column="14">-&gt;<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="16">change<pos:position pos:line="56" pos:column="22"/></name><operator pos:line="56" pos:column="22">.<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="23">url<pos:position pos:line="56" pos:column="26"/></name><index pos:line="56" pos:column="26">[<expr><name pos:line="56" pos:column="27">i<pos:position pos:line="56" pos:column="28"/></name></expr>]<pos:position pos:line="56" pos:column="29"/></index></name> <operator pos:line="56" pos:column="30">==<pos:position pos:line="56" pos:column="32"/></operator> <literal type="char" pos:line="56" pos:column="33">'/'<pos:position pos:line="56" pos:column="36"/></literal></expr>)<pos:position pos:line="56" pos:column="37"/></condition><then pos:line="56" pos:column="37">
        <block type="pseudo"><break pos:line="57" pos:column="9">break;<pos:position pos:line="57" pos:column="15"/></break></block></then></if>
      <if pos:line="58" pos:column="7">if<condition pos:line="58" pos:column="9">(<expr><name><name pos:line="58" pos:column="10">data<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">-&gt;<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="16">change<pos:position pos:line="58" pos:column="22"/></name><operator pos:line="58" pos:column="22">.<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="23">url<pos:position pos:line="58" pos:column="26"/></name><index pos:line="58" pos:column="26">[<expr><name pos:line="58" pos:column="27">i<pos:position pos:line="58" pos:column="28"/></name></expr>]<pos:position pos:line="58" pos:column="29"/></index></name> <operator pos:line="58" pos:column="30">==<pos:position pos:line="58" pos:column="32"/></operator> <literal type="char" pos:line="58" pos:column="33">':'<pos:position pos:line="58" pos:column="36"/></literal></expr>)<pos:position pos:line="58" pos:column="37"/></condition><then pos:line="58" pos:column="37"> <block pos:line="58" pos:column="38">{
        <expr_stmt><expr><name pos:line="59" pos:column="9">url_has_scheme<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <name pos:line="59" pos:column="26">TRUE<pos:position pos:line="59" pos:column="30"/></name></expr>;<pos:position pos:line="59" pos:column="31"/></expr_stmt>
        <break pos:line="60" pos:column="9">break;<pos:position pos:line="60" pos:column="15"/></break>
      }<pos:position pos:line="61" pos:column="8"/></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block></for>
  }<pos:position pos:line="63" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="65" pos:column="3">/* handle the file: scheme */</comment>
  <if pos:line="66" pos:column="3">if<condition pos:line="66" pos:column="5">(<expr><operator pos:line="66" pos:column="6">(<pos:position pos:line="66" pos:column="7"/></operator><name pos:line="66" pos:column="7">url_has_scheme<pos:position pos:line="66" pos:column="21"/></name> <operator pos:line="66" pos:column="22">&amp;&amp;<pos:position pos:line="66" pos:column="32"/></operator> <call><name pos:line="66" pos:column="25">strncasecompare<pos:position pos:line="66" pos:column="40"/></name><argument_list pos:line="66" pos:column="40">(<argument><expr><name><name pos:line="66" pos:column="41">data<pos:position pos:line="66" pos:column="45"/></name><operator pos:line="66" pos:column="45">-&gt;<pos:position pos:line="66" pos:column="50"/></operator><name pos:line="66" pos:column="47">change<pos:position pos:line="66" pos:column="53"/></name><operator pos:line="66" pos:column="53">.<pos:position pos:line="66" pos:column="54"/></operator><name pos:line="66" pos:column="54">url<pos:position pos:line="66" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="59">"file:"<pos:position pos:line="66" pos:column="66"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="68">5<pos:position pos:line="66" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="70"/></argument_list></call><operator pos:line="66" pos:column="70">)<pos:position pos:line="66" pos:column="71"/></operator> <operator pos:line="66" pos:column="72">||<pos:position pos:line="66" pos:column="74"/></operator>
     <operator pos:line="67" pos:column="6">(<pos:position pos:line="67" pos:column="7"/></operator><operator pos:line="67" pos:column="7">!<pos:position pos:line="67" pos:column="8"/></operator><name pos:line="67" pos:column="8">url_has_scheme<pos:position pos:line="67" pos:column="22"/></name> <operator pos:line="67" pos:column="23">&amp;&amp;<pos:position pos:line="67" pos:column="33"/></operator> <name><name pos:line="67" pos:column="26">data<pos:position pos:line="67" pos:column="30"/></name><operator pos:line="67" pos:column="30">-&gt;<pos:position pos:line="67" pos:column="35"/></operator><name pos:line="67" pos:column="32">set<pos:position pos:line="67" pos:column="35"/></name><operator pos:line="67" pos:column="35">.<pos:position pos:line="67" pos:column="36"/></operator><name pos:line="67" pos:column="36">str<pos:position pos:line="67" pos:column="39"/></name><index pos:line="67" pos:column="39">[<expr><name pos:line="67" pos:column="40">STRING_DEFAULT_PROTOCOL<pos:position pos:line="67" pos:column="63"/></name></expr>]<pos:position pos:line="67" pos:column="64"/></index></name> <operator pos:line="67" pos:column="65">&amp;&amp;<pos:position pos:line="67" pos:column="75"/></operator>
      <call><name pos:line="68" pos:column="7">strcasecompare<pos:position pos:line="68" pos:column="21"/></name><argument_list pos:line="68" pos:column="21">(<argument><expr><name><name pos:line="68" pos:column="22">data<pos:position pos:line="68" pos:column="26"/></name><operator pos:line="68" pos:column="26">-&gt;<pos:position pos:line="68" pos:column="31"/></operator><name pos:line="68" pos:column="28">set<pos:position pos:line="68" pos:column="31"/></name><operator pos:line="68" pos:column="31">.<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="32">str<pos:position pos:line="68" pos:column="35"/></name><index pos:line="68" pos:column="35">[<expr><name pos:line="68" pos:column="36">STRING_DEFAULT_PROTOCOL<pos:position pos:line="68" pos:column="59"/></name></expr>]<pos:position pos:line="68" pos:column="60"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="62">"file"<pos:position pos:line="68" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="69"/></argument_list></call><operator pos:line="68" pos:column="69">)<pos:position pos:line="68" pos:column="70"/></operator></expr>)<pos:position pos:line="68" pos:column="71"/></condition><then pos:line="68" pos:column="71"> <block pos:line="68" pos:column="72">{
    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">(<expr><name pos:line="69" pos:column="8">url_has_scheme<pos:position pos:line="69" pos:column="22"/></name></expr>)<pos:position pos:line="69" pos:column="23"/></condition><then pos:line="69" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="7">rc<pos:position pos:line="70" pos:column="9"/></name> <operator pos:line="70" pos:column="10">=<pos:position pos:line="70" pos:column="11"/></operator> <call><name pos:line="70" pos:column="12">sscanf<pos:position pos:line="70" pos:column="18"/></name><argument_list pos:line="70" pos:column="18">(<argument><expr><name><name pos:line="70" pos:column="19">data<pos:position pos:line="70" pos:column="23"/></name><operator pos:line="70" pos:column="23">-&gt;<pos:position pos:line="70" pos:column="28"/></operator><name pos:line="70" pos:column="25">change<pos:position pos:line="70" pos:column="31"/></name><operator pos:line="70" pos:column="31">.<pos:position pos:line="70" pos:column="32"/></operator><name pos:line="70" pos:column="32">url<pos:position pos:line="70" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="37">"%*15[^\n/:]:%[^\n]"<pos:position pos:line="70" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="59">path<pos:position pos:line="70" pos:column="63"/></name></expr></argument>)<pos:position pos:line="70" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="65"/></expr_stmt></block></then>
    <else pos:line="71" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="7">rc<pos:position pos:line="72" pos:column="9"/></name> <operator pos:line="72" pos:column="10">=<pos:position pos:line="72" pos:column="11"/></operator> <call><name pos:line="72" pos:column="12">sscanf<pos:position pos:line="72" pos:column="18"/></name><argument_list pos:line="72" pos:column="18">(<argument><expr><name><name pos:line="72" pos:column="19">data<pos:position pos:line="72" pos:column="23"/></name><operator pos:line="72" pos:column="23">-&gt;<pos:position pos:line="72" pos:column="28"/></operator><name pos:line="72" pos:column="25">change<pos:position pos:line="72" pos:column="31"/></name><operator pos:line="72" pos:column="31">.<pos:position pos:line="72" pos:column="32"/></operator><name pos:line="72" pos:column="32">url<pos:position pos:line="72" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="37">"%[^\n]"<pos:position pos:line="72" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="47">path<pos:position pos:line="72" pos:column="51"/></name></expr></argument>)<pos:position pos:line="72" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="53"/></expr_stmt></block></else></if>

    <if pos:line="74" pos:column="5">if<condition pos:line="74" pos:column="7">(<expr><name pos:line="74" pos:column="8">rc<pos:position pos:line="74" pos:column="10"/></name> <operator pos:line="74" pos:column="11">!=<pos:position pos:line="74" pos:column="13"/></operator> <literal type="number" pos:line="74" pos:column="14">1<pos:position pos:line="74" pos:column="15"/></literal></expr>)<pos:position pos:line="74" pos:column="16"/></condition><then pos:line="74" pos:column="16"> <block pos:line="74" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="75" pos:column="7">failf<pos:position pos:line="75" pos:column="12"/></name><argument_list pos:line="75" pos:column="12">(<argument><expr><name pos:line="75" pos:column="13">data<pos:position pos:line="75" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="19">"Bad URL"<pos:position pos:line="75" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="30"/></expr_stmt>
      <return pos:line="76" pos:column="7">return <expr><name pos:line="76" pos:column="14">CURLE_URL_MALFORMAT<pos:position pos:line="76" pos:column="33"/></name></expr>;<pos:position pos:line="76" pos:column="34"/></return>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <if pos:line="79" pos:column="5">if<condition pos:line="79" pos:column="7">(<expr><name pos:line="79" pos:column="8">url_has_scheme<pos:position pos:line="79" pos:column="22"/></name> <operator pos:line="79" pos:column="23">&amp;&amp;<pos:position pos:line="79" pos:column="33"/></operator> <name><name pos:line="79" pos:column="26">path<pos:position pos:line="79" pos:column="30"/></name><index pos:line="79" pos:column="30">[<expr><literal type="number" pos:line="79" pos:column="31">0<pos:position pos:line="79" pos:column="32"/></literal></expr>]<pos:position pos:line="79" pos:column="33"/></index></name> <operator pos:line="79" pos:column="34">==<pos:position pos:line="79" pos:column="36"/></operator> <literal type="char" pos:line="79" pos:column="37">'/'<pos:position pos:line="79" pos:column="40"/></literal> <operator pos:line="79" pos:column="41">&amp;&amp;<pos:position pos:line="79" pos:column="51"/></operator> <name><name pos:line="79" pos:column="44">path<pos:position pos:line="79" pos:column="48"/></name><index pos:line="79" pos:column="48">[<expr><literal type="number" pos:line="79" pos:column="49">1<pos:position pos:line="79" pos:column="50"/></literal></expr>]<pos:position pos:line="79" pos:column="51"/></index></name> <operator pos:line="79" pos:column="52">==<pos:position pos:line="79" pos:column="54"/></operator> <literal type="char" pos:line="79" pos:column="55">'/'<pos:position pos:line="79" pos:column="58"/></literal></expr>)<pos:position pos:line="79" pos:column="59"/></condition><then pos:line="79" pos:column="59"> <block pos:line="79" pos:column="60">{
      <comment type="block" pos:line="80" pos:column="7">/* Allow omitted hostname (e.g. file:/&lt;path&gt;).  This is not strictly
       * speaking a valid file: URL by RFC 1738, but treating file:/&lt;path&gt; as
       * file://localhost/&lt;path&gt; is similar to how other schemes treat missing
       * hostnames.  See RFC 1808. */</comment>

      <comment type="block" pos:line="85" pos:column="7">/* This cannot be done with strcpy() in a portable manner, since the
         memory areas overlap! */</comment>
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">memmove<pos:position pos:line="87" pos:column="14"/></name><argument_list pos:line="87" pos:column="14">(<argument><expr><name pos:line="87" pos:column="15">path<pos:position pos:line="87" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="21">path<pos:position pos:line="87" pos:column="25"/></name> <operator pos:line="87" pos:column="26">+<pos:position pos:line="87" pos:column="27"/></operator> <literal type="number" pos:line="87" pos:column="28">2<pos:position pos:line="87" pos:column="29"/></literal></expr></argument>, <argument><expr><call><name pos:line="87" pos:column="31">strlen<pos:position pos:line="87" pos:column="37"/></name><argument_list pos:line="87" pos:column="37">(<argument><expr><name pos:line="87" pos:column="38">path<pos:position pos:line="87" pos:column="42"/></name> <operator pos:line="87" pos:column="43">+<pos:position pos:line="87" pos:column="44"/></operator> <literal type="number" pos:line="87" pos:column="45">2<pos:position pos:line="87" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="47"/></argument_list></call> <operator pos:line="87" pos:column="48">+<pos:position pos:line="87" pos:column="49"/></operator> <literal type="number" pos:line="87" pos:column="50">1<pos:position pos:line="87" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="90" pos:column="5">/*
     * we deal with file://&lt;host&gt;/&lt;path&gt; differently since it supports no
     * hostname other than "localhost" and "127.0.0.1", which is unique among
     * the URL protocols specified in RFC 1738
     */</comment>
    <if pos:line="95" pos:column="5">if<condition pos:line="95" pos:column="7">(<expr><name><name pos:line="95" pos:column="8">path<pos:position pos:line="95" pos:column="12"/></name><index pos:line="95" pos:column="12">[<expr><literal type="number" pos:line="95" pos:column="13">0<pos:position pos:line="95" pos:column="14"/></literal></expr>]<pos:position pos:line="95" pos:column="15"/></index></name> <operator pos:line="95" pos:column="16">!=<pos:position pos:line="95" pos:column="18"/></operator> <literal type="char" pos:line="95" pos:column="19">'/'<pos:position pos:line="95" pos:column="22"/></literal> <operator pos:line="95" pos:column="23">&amp;&amp;<pos:position pos:line="95" pos:column="33"/></operator> <operator pos:line="95" pos:column="26">!<pos:position pos:line="95" pos:column="27"/></operator><call><name pos:line="95" pos:column="27">STARTS_WITH_DRIVE_PREFIX<pos:position pos:line="95" pos:column="51"/></name><argument_list pos:line="95" pos:column="51">(<argument><expr><name pos:line="95" pos:column="52">path<pos:position pos:line="95" pos:column="56"/></name></expr></argument>)<pos:position pos:line="95" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="58"/></condition><then pos:line="95" pos:column="58"> <block pos:line="95" pos:column="59">{
      <comment type="block" pos:line="96" pos:column="7">/* the URL includes a host name, it must match "localhost" or
         "127.0.0.1" to be valid */</comment>
      <decl_stmt><decl><type><name pos:line="98" pos:column="7">char<pos:position pos:line="98" pos:column="11"/></name> <modifier pos:line="98" pos:column="12">*<pos:position pos:line="98" pos:column="13"/></modifier></type><name pos:line="98" pos:column="13">ptr<pos:position pos:line="98" pos:column="16"/></name></decl>;<pos:position pos:line="98" pos:column="17"/></decl_stmt>
      <if pos:line="99" pos:column="7">if<condition pos:line="99" pos:column="9">(<expr><operator pos:line="99" pos:column="10">!<pos:position pos:line="99" pos:column="11"/></operator><call><name pos:line="99" pos:column="11">checkprefix<pos:position pos:line="99" pos:column="22"/></name><argument_list pos:line="99" pos:column="22">(<argument><expr><literal type="string" pos:line="99" pos:column="23">"localhost/"<pos:position pos:line="99" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="37">path<pos:position pos:line="99" pos:column="41"/></name></expr></argument>)<pos:position pos:line="99" pos:column="42"/></argument_list></call> <operator pos:line="99" pos:column="43">&amp;&amp;<pos:position pos:line="99" pos:column="53"/></operator>
         <operator pos:line="100" pos:column="10">!<pos:position pos:line="100" pos:column="11"/></operator><call><name pos:line="100" pos:column="11">checkprefix<pos:position pos:line="100" pos:column="22"/></name><argument_list pos:line="100" pos:column="22">(<argument><expr><literal type="string" pos:line="100" pos:column="23">"127.0.0.1/"<pos:position pos:line="100" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="37">path<pos:position pos:line="100" pos:column="41"/></name></expr></argument>)<pos:position pos:line="100" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="43"/></condition><then pos:line="100" pos:column="43"> <block pos:line="100" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">failf<pos:position pos:line="101" pos:column="14"/></name><argument_list pos:line="101" pos:column="14">(<argument><expr><name pos:line="101" pos:column="15">data<pos:position pos:line="101" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="21">"Invalid file://hostname/, "<pos:position pos:line="101" pos:column="49"/></literal>
                    <literal type="string" pos:line="102" pos:column="21">"expected localhost or 127.0.0.1 or none"<pos:position pos:line="102" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="64"/></expr_stmt>
        <return pos:line="103" pos:column="9">return <expr><name pos:line="103" pos:column="16">CURLE_URL_MALFORMAT<pos:position pos:line="103" pos:column="35"/></name></expr>;<pos:position pos:line="103" pos:column="36"/></return>
      }<pos:position pos:line="104" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="105" pos:column="7">ptr<pos:position pos:line="105" pos:column="10"/></name> <operator pos:line="105" pos:column="11">=<pos:position pos:line="105" pos:column="12"/></operator> <operator pos:line="105" pos:column="13">&amp;<pos:position pos:line="105" pos:column="18"/></operator><name><name pos:line="105" pos:column="14">path<pos:position pos:line="105" pos:column="18"/></name><index pos:line="105" pos:column="18">[<expr><literal type="number" pos:line="105" pos:column="19">9<pos:position pos:line="105" pos:column="20"/></literal></expr>]<pos:position pos:line="105" pos:column="21"/></index></name></expr>;<pos:position pos:line="105" pos:column="22"/></expr_stmt> <comment type="block" pos:line="105" pos:column="23">/* now points to the slash after the host */</comment>

      <comment type="block" pos:line="107" pos:column="7">/* there was a host name and slash present

         RFC1738 (section 3.1, page 5) says:

         The rest of the locator consists of data specific to the scheme,
         and is known as the "url-path". It supplies the details of how the
         specified resource can be accessed. Note that the "/" between the
         host (or port) and the url-path is NOT part of the url-path.

         As most agents use file://localhost/foo to get '/foo' although the
         slash preceding foo is a separator and not a slash for the path,
         a URL as file://localhost//foo must be valid as well, to refer to
         the same file with an absolute path.
      */</comment>

      <if pos:line="122" pos:column="7">if<condition pos:line="122" pos:column="9">(<expr><literal type="char" pos:line="122" pos:column="10">'/'<pos:position pos:line="122" pos:column="13"/></literal> <operator pos:line="122" pos:column="14">==<pos:position pos:line="122" pos:column="16"/></operator> <name><name pos:line="122" pos:column="17">ptr<pos:position pos:line="122" pos:column="20"/></name><index pos:line="122" pos:column="20">[<expr><literal type="number" pos:line="122" pos:column="21">1<pos:position pos:line="122" pos:column="22"/></literal></expr>]<pos:position pos:line="122" pos:column="23"/></index></name></expr>)<pos:position pos:line="122" pos:column="24"/></condition><then pos:line="122" pos:column="24">
        <comment type="block" pos:line="123" pos:column="9">/* if there was two slashes, we skip the first one as that is then
           used truly as a separator */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="125" pos:column="9">ptr<pos:position pos:line="125" pos:column="12"/></name><operator pos:line="125" pos:column="12">++<pos:position pos:line="125" pos:column="14"/></operator></expr>;<pos:position pos:line="125" pos:column="15"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="127" pos:column="7">/* This cannot be made with strcpy, as the memory chunks overlap! */</comment>
      <expr_stmt><expr><call><name pos:line="128" pos:column="7">memmove<pos:position pos:line="128" pos:column="14"/></name><argument_list pos:line="128" pos:column="14">(<argument><expr><name pos:line="128" pos:column="15">path<pos:position pos:line="128" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="21">ptr<pos:position pos:line="128" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="128" pos:column="26">strlen<pos:position pos:line="128" pos:column="32"/></name><argument_list pos:line="128" pos:column="32">(<argument><expr><name pos:line="128" pos:column="33">ptr<pos:position pos:line="128" pos:column="36"/></name></expr></argument>)<pos:position pos:line="128" pos:column="37"/></argument_list></call> <operator pos:line="128" pos:column="38">+<pos:position pos:line="128" pos:column="39"/></operator> <literal type="number" pos:line="128" pos:column="40">1<pos:position pos:line="128" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="129" pos:column="6"/></block></then></if>

<cpp:if pos:line="131" pos:column="1">#<cpp:directive pos:line="131" pos:column="2">if<pos:position pos:line="131" pos:column="4"/></cpp:directive> <expr><operator pos:line="131" pos:column="5">!<pos:position pos:line="131" pos:column="6"/></operator><call><name pos:line="131" pos:column="6">defined<pos:position pos:line="131" pos:column="13"/></name><argument_list pos:line="131" pos:column="13">(<argument><expr><name pos:line="131" pos:column="14">MSDOS<pos:position pos:line="131" pos:column="19"/></name></expr></argument>)<pos:position pos:line="131" pos:column="20"/></argument_list></call> <operator pos:line="131" pos:column="21">&amp;&amp;<pos:position pos:line="131" pos:column="31"/></operator> <operator pos:line="131" pos:column="24">!<pos:position pos:line="131" pos:column="25"/></operator><call><name pos:line="131" pos:column="25">defined<pos:position pos:line="131" pos:column="32"/></name><argument_list pos:line="131" pos:column="32">(<argument><expr><name pos:line="131" pos:column="33">WIN32<pos:position pos:line="131" pos:column="38"/></name></expr></argument>)<pos:position pos:line="131" pos:column="39"/></argument_list></call> <operator pos:line="131" pos:column="40">&amp;&amp;<pos:position pos:line="131" pos:column="50"/></operator> <operator pos:line="131" pos:column="43">!<pos:position pos:line="131" pos:column="44"/></operator><call><name pos:line="131" pos:column="44">defined<pos:position pos:line="131" pos:column="51"/></name><argument_list pos:line="131" pos:column="51">(<argument><expr><name pos:line="131" pos:column="52">__CYGWIN__<pos:position pos:line="131" pos:column="62"/></name></expr></argument>)<pos:position pos:line="131" pos:column="63"/></argument_list></call></expr></cpp:if>
    <if pos:line="132" pos:column="5">if<condition pos:line="132" pos:column="7">(<expr><call><name pos:line="132" pos:column="8">STARTS_WITH_DRIVE_PREFIX<pos:position pos:line="132" pos:column="32"/></name><argument_list pos:line="132" pos:column="32">(<argument><expr><name pos:line="132" pos:column="33">path<pos:position pos:line="132" pos:column="37"/></name></expr></argument>)<pos:position pos:line="132" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="132" pos:column="39"/></condition><then pos:line="132" pos:column="39"> <block pos:line="132" pos:column="40">{
      <expr_stmt><expr><call><name pos:line="133" pos:column="7">failf<pos:position pos:line="133" pos:column="12"/></name><argument_list pos:line="133" pos:column="12">(<argument><expr><name pos:line="133" pos:column="13">data<pos:position pos:line="133" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="19">"File drive letters are only accepted in MSDOS/Windows."<pos:position pos:line="133" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="77"/></expr_stmt>
      <return pos:line="134" pos:column="7">return <expr><name pos:line="134" pos:column="14">CURLE_URL_MALFORMAT<pos:position pos:line="134" pos:column="33"/></name></expr>;<pos:position pos:line="134" pos:column="34"/></return>
    }<pos:position pos:line="135" pos:column="6"/></block></then></if>
<cpp:endif pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">endif<pos:position pos:line="136" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="138" pos:column="5">protop<pos:position pos:line="138" pos:column="11"/></name> <operator pos:line="138" pos:column="12">=<pos:position pos:line="138" pos:column="13"/></operator> <literal type="string" pos:line="138" pos:column="14">"file"<pos:position pos:line="138" pos:column="20"/></literal></expr>;<pos:position pos:line="138" pos:column="21"/></expr_stmt> <comment type="block" pos:line="138" pos:column="22">/* protocol string */</comment>
    <expr_stmt><expr><operator pos:line="139" pos:column="5">*<pos:position pos:line="139" pos:column="6"/></operator><name pos:line="139" pos:column="6">prot_missing<pos:position pos:line="139" pos:column="18"/></name> <operator pos:line="139" pos:column="19">=<pos:position pos:line="139" pos:column="20"/></operator> <operator pos:line="139" pos:column="21">!<pos:position pos:line="139" pos:column="22"/></operator><name pos:line="139" pos:column="22">url_has_scheme<pos:position pos:line="139" pos:column="36"/></name></expr>;<pos:position pos:line="139" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="140" pos:column="4"/></block></then>
  <else pos:line="141" pos:column="3">else <block pos:line="141" pos:column="8">{
    <comment type="block" pos:line="142" pos:column="5">/* clear path */</comment>
    <decl_stmt><decl><type><name pos:line="143" pos:column="5">char<pos:position pos:line="143" pos:column="9"/></name></type> <name><name pos:line="143" pos:column="10">slashbuf<pos:position pos:line="143" pos:column="18"/></name><index pos:line="143" pos:column="18">[<expr><literal type="number" pos:line="143" pos:column="19">4<pos:position pos:line="143" pos:column="20"/></literal></expr>]<pos:position pos:line="143" pos:column="21"/></index></name></decl>;<pos:position pos:line="143" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="144" pos:column="5">path<pos:position pos:line="144" pos:column="9"/></name><index pos:line="144" pos:column="9">[<expr><literal type="number" pos:line="144" pos:column="10">0<pos:position pos:line="144" pos:column="11"/></literal></expr>]<pos:position pos:line="144" pos:column="12"/></index></name> <operator pos:line="144" pos:column="13">=<pos:position pos:line="144" pos:column="14"/></operator> <literal type="number" pos:line="144" pos:column="15">0<pos:position pos:line="144" pos:column="16"/></literal></expr>;<pos:position pos:line="144" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><name pos:line="146" pos:column="5">rc<pos:position pos:line="146" pos:column="7"/></name> <operator pos:line="146" pos:column="8">=<pos:position pos:line="146" pos:column="9"/></operator> <call><name pos:line="146" pos:column="10">sscanf<pos:position pos:line="146" pos:column="16"/></name><argument_list pos:line="146" pos:column="16">(<argument><expr><name><name pos:line="146" pos:column="17">data<pos:position pos:line="146" pos:column="21"/></name><operator pos:line="146" pos:column="21">-&gt;<pos:position pos:line="146" pos:column="26"/></operator><name pos:line="146" pos:column="23">change<pos:position pos:line="146" pos:column="29"/></name><operator pos:line="146" pos:column="29">.<pos:position pos:line="146" pos:column="30"/></operator><name pos:line="146" pos:column="30">url<pos:position pos:line="146" pos:column="33"/></name></name></expr></argument>,
                <argument><expr><literal type="string" pos:line="147" pos:column="17">"%15[^\n/:]:%3[/]%[^\n/?#]%[^\n]"<pos:position pos:line="147" pos:column="50"/></literal></expr></argument>,
                <argument><expr><name pos:line="148" pos:column="17">protobuf<pos:position pos:line="148" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="27">slashbuf<pos:position pos:line="148" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="37">conn<pos:position pos:line="148" pos:column="41"/></name><operator pos:line="148" pos:column="41">-&gt;<pos:position pos:line="148" pos:column="46"/></operator><name pos:line="148" pos:column="43">host<pos:position pos:line="148" pos:column="47"/></name><operator pos:line="148" pos:column="47">.<pos:position pos:line="148" pos:column="48"/></operator><name pos:line="148" pos:column="48">name<pos:position pos:line="148" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="54">path<pos:position pos:line="148" pos:column="58"/></name></expr></argument>)<pos:position pos:line="148" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="60"/></expr_stmt>
    <if pos:line="149" pos:column="5">if<condition pos:line="149" pos:column="7">(<expr><literal type="number" pos:line="149" pos:column="8">2<pos:position pos:line="149" pos:column="9"/></literal> <operator pos:line="149" pos:column="10">==<pos:position pos:line="149" pos:column="12"/></operator> <name pos:line="149" pos:column="13">rc<pos:position pos:line="149" pos:column="15"/></name></expr>)<pos:position pos:line="149" pos:column="16"/></condition><then pos:line="149" pos:column="16"> <block pos:line="149" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="150" pos:column="7">failf<pos:position pos:line="150" pos:column="12"/></name><argument_list pos:line="150" pos:column="12">(<argument><expr><name pos:line="150" pos:column="13">data<pos:position pos:line="150" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="19">"Bad URL"<pos:position pos:line="150" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="30"/></expr_stmt>
      <return pos:line="151" pos:column="7">return <expr><name pos:line="151" pos:column="14">CURLE_URL_MALFORMAT<pos:position pos:line="151" pos:column="33"/></name></expr>;<pos:position pos:line="151" pos:column="34"/></return>
    }<pos:position pos:line="152" pos:column="6"/></block></then></if>
    <if pos:line="153" pos:column="5">if<condition pos:line="153" pos:column="7">(<expr><literal type="number" pos:line="153" pos:column="8">3<pos:position pos:line="153" pos:column="9"/></literal> <operator pos:line="153" pos:column="10">&gt;<pos:position pos:line="153" pos:column="14"/></operator> <name pos:line="153" pos:column="12">rc<pos:position pos:line="153" pos:column="14"/></name></expr>)<pos:position pos:line="153" pos:column="15"/></condition><then pos:line="153" pos:column="15"> <block pos:line="153" pos:column="16">{

      <comment type="block" pos:line="155" pos:column="7">/*
       * The URL was badly formatted, let's try the browser-style _without_
       * protocol specified like 'http://'.
       */</comment>
      <expr_stmt><expr><name pos:line="159" pos:column="7">rc<pos:position pos:line="159" pos:column="9"/></name> <operator pos:line="159" pos:column="10">=<pos:position pos:line="159" pos:column="11"/></operator> <call><name pos:line="159" pos:column="12">sscanf<pos:position pos:line="159" pos:column="18"/></name><argument_list pos:line="159" pos:column="18">(<argument><expr><name><name pos:line="159" pos:column="19">data<pos:position pos:line="159" pos:column="23"/></name><operator pos:line="159" pos:column="23">-&gt;<pos:position pos:line="159" pos:column="28"/></operator><name pos:line="159" pos:column="25">change<pos:position pos:line="159" pos:column="31"/></name><operator pos:line="159" pos:column="31">.<pos:position pos:line="159" pos:column="32"/></operator><name pos:line="159" pos:column="32">url<pos:position pos:line="159" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="37">"%[^\n/?#]%[^\n]"<pos:position pos:line="159" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="159" pos:column="56">conn<pos:position pos:line="159" pos:column="60"/></name><operator pos:line="159" pos:column="60">-&gt;<pos:position pos:line="159" pos:column="65"/></operator><name pos:line="159" pos:column="62">host<pos:position pos:line="159" pos:column="66"/></name><operator pos:line="159" pos:column="66">.<pos:position pos:line="159" pos:column="67"/></operator><name pos:line="159" pos:column="67">name<pos:position pos:line="159" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="73">path<pos:position pos:line="159" pos:column="77"/></name></expr></argument>)<pos:position pos:line="159" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="79"/></expr_stmt>
      <if pos:line="160" pos:column="7">if<condition pos:line="160" pos:column="9">(<expr><literal type="number" pos:line="160" pos:column="10">1<pos:position pos:line="160" pos:column="11"/></literal> <operator pos:line="160" pos:column="12">&gt;<pos:position pos:line="160" pos:column="16"/></operator> <name pos:line="160" pos:column="14">rc<pos:position pos:line="160" pos:column="16"/></name></expr>)<pos:position pos:line="160" pos:column="17"/></condition><then pos:line="160" pos:column="17"> <block pos:line="160" pos:column="18">{
        <comment type="block" pos:line="161" pos:column="9">/*
         * We couldn't even get this format.
         * djgpp 2.04 has a sscanf() bug where 'conn-&gt;host.name' is
         * assigned, but the return value is EOF!
         */</comment>
<cpp:if pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">if<pos:position pos:line="166" pos:column="4"/></cpp:directive> <expr><call><name pos:line="166" pos:column="5">defined<pos:position pos:line="166" pos:column="12"/></name><argument_list pos:line="166" pos:column="12">(<argument><expr><name pos:line="166" pos:column="13">__DJGPP__<pos:position pos:line="166" pos:column="22"/></name></expr></argument>)<pos:position pos:line="166" pos:column="23"/></argument_list></call> <operator pos:line="166" pos:column="24">&amp;&amp;<pos:position pos:line="166" pos:column="34"/></operator> <operator pos:line="166" pos:column="27">(<pos:position pos:line="166" pos:column="28"/></operator><name pos:line="166" pos:column="28">DJGPP_MINOR<pos:position pos:line="166" pos:column="39"/></name> <operator pos:line="166" pos:column="40">==<pos:position pos:line="166" pos:column="42"/></operator> <literal type="number" pos:line="166" pos:column="43">4<pos:position pos:line="166" pos:column="44"/></literal><operator pos:line="166" pos:column="44">)<pos:position pos:line="166" pos:column="45"/></operator></expr></cpp:if>
        <if pos:line="167" pos:column="9">if<condition pos:line="167" pos:column="11">(<expr><operator pos:line="167" pos:column="12">!<pos:position pos:line="167" pos:column="13"/></operator><operator pos:line="167" pos:column="13">(<pos:position pos:line="167" pos:column="14"/></operator><name pos:line="167" pos:column="14">rc<pos:position pos:line="167" pos:column="16"/></name> <operator pos:line="167" pos:column="17">==<pos:position pos:line="167" pos:column="19"/></operator> <operator pos:line="167" pos:column="20">-<pos:position pos:line="167" pos:column="21"/></operator><literal type="number" pos:line="167" pos:column="21">1<pos:position pos:line="167" pos:column="22"/></literal> <operator pos:line="167" pos:column="23">&amp;&amp;<pos:position pos:line="167" pos:column="33"/></operator> <operator pos:line="167" pos:column="26">*<pos:position pos:line="167" pos:column="27"/></operator><name><name pos:line="167" pos:column="27">conn<pos:position pos:line="167" pos:column="31"/></name><operator pos:line="167" pos:column="31">-&gt;<pos:position pos:line="167" pos:column="36"/></operator><name pos:line="167" pos:column="33">host<pos:position pos:line="167" pos:column="37"/></name><operator pos:line="167" pos:column="37">.<pos:position pos:line="167" pos:column="38"/></operator><name pos:line="167" pos:column="38">name<pos:position pos:line="167" pos:column="42"/></name></name><operator pos:line="167" pos:column="42">)<pos:position pos:line="167" pos:column="43"/></operator></expr>)<pos:position pos:line="167" pos:column="44"/></condition><then pos:line="167" pos:column="44">
<cpp:endif pos:line="168" pos:column="1">#<cpp:directive pos:line="168" pos:column="2">endif<pos:position pos:line="168" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="169" pos:column="9">{
          <expr_stmt><expr><call><name pos:line="170" pos:column="11">failf<pos:position pos:line="170" pos:column="16"/></name><argument_list pos:line="170" pos:column="16">(<argument><expr><name pos:line="170" pos:column="17">data<pos:position pos:line="170" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="170" pos:column="23">"&lt;url&gt; malformed"<pos:position pos:line="170" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="170" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="42"/></expr_stmt>
          <return pos:line="171" pos:column="11">return <expr><name pos:line="171" pos:column="18">CURLE_URL_MALFORMAT<pos:position pos:line="171" pos:column="37"/></name></expr>;<pos:position pos:line="171" pos:column="38"/></return>
        }<pos:position pos:line="172" pos:column="10"/></block></then></if>
      }<pos:position pos:line="173" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="175" pos:column="7">/*
       * Since there was no protocol part specified in the URL use the
       * user-specified default protocol. If we weren't given a default make a
       * guess by matching some protocols against the host's outermost
       * sub-domain name. Finally if there was no match use HTTP.
       */</comment>

      <expr_stmt><expr><name pos:line="182" pos:column="7">protop<pos:position pos:line="182" pos:column="13"/></name> <operator pos:line="182" pos:column="14">=<pos:position pos:line="182" pos:column="15"/></operator> <name><name pos:line="182" pos:column="16">data<pos:position pos:line="182" pos:column="20"/></name><operator pos:line="182" pos:column="20">-&gt;<pos:position pos:line="182" pos:column="25"/></operator><name pos:line="182" pos:column="22">set<pos:position pos:line="182" pos:column="25"/></name><operator pos:line="182" pos:column="25">.<pos:position pos:line="182" pos:column="26"/></operator><name pos:line="182" pos:column="26">str<pos:position pos:line="182" pos:column="29"/></name><index pos:line="182" pos:column="29">[<expr><name pos:line="182" pos:column="30">STRING_DEFAULT_PROTOCOL<pos:position pos:line="182" pos:column="53"/></name></expr>]<pos:position pos:line="182" pos:column="54"/></index></name></expr>;<pos:position pos:line="182" pos:column="55"/></expr_stmt>
      <if pos:line="183" pos:column="7">if<condition pos:line="183" pos:column="9">(<expr><operator pos:line="183" pos:column="10">!<pos:position pos:line="183" pos:column="11"/></operator><name pos:line="183" pos:column="11">protop<pos:position pos:line="183" pos:column="17"/></name></expr>)<pos:position pos:line="183" pos:column="18"/></condition><then pos:line="183" pos:column="18"> <block pos:line="183" pos:column="19">{
        <comment type="block" pos:line="184" pos:column="9">/* Note: if you add a new protocol, please update the list in
         * lib/version.c too! */</comment>
        <if pos:line="186" pos:column="9">if<condition pos:line="186" pos:column="11">(<expr><call><name pos:line="186" pos:column="12">checkprefix<pos:position pos:line="186" pos:column="23"/></name><argument_list pos:line="186" pos:column="23">(<argument><expr><literal type="string" pos:line="186" pos:column="24">"FTP."<pos:position pos:line="186" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="32">conn<pos:position pos:line="186" pos:column="36"/></name><operator pos:line="186" pos:column="36">-&gt;<pos:position pos:line="186" pos:column="41"/></operator><name pos:line="186" pos:column="38">host<pos:position pos:line="186" pos:column="42"/></name><operator pos:line="186" pos:column="42">.<pos:position pos:line="186" pos:column="43"/></operator><name pos:line="186" pos:column="43">name<pos:position pos:line="186" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="186" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="186" pos:column="49"/></condition><then pos:line="186" pos:column="49">
          <block type="pseudo"><expr_stmt><expr><name pos:line="187" pos:column="11">protop<pos:position pos:line="187" pos:column="17"/></name> <operator pos:line="187" pos:column="18">=<pos:position pos:line="187" pos:column="19"/></operator> <literal type="string" pos:line="187" pos:column="20">"ftp"<pos:position pos:line="187" pos:column="25"/></literal></expr>;<pos:position pos:line="187" pos:column="26"/></expr_stmt></block></then>
        <elseif pos:line="188" pos:column="9">else <if pos:line="188" pos:column="14">if<condition pos:line="188" pos:column="16">(<expr><call><name pos:line="188" pos:column="17">checkprefix<pos:position pos:line="188" pos:column="28"/></name><argument_list pos:line="188" pos:column="28">(<argument><expr><literal type="string" pos:line="188" pos:column="29">"DICT."<pos:position pos:line="188" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="188" pos:column="38">conn<pos:position pos:line="188" pos:column="42"/></name><operator pos:line="188" pos:column="42">-&gt;<pos:position pos:line="188" pos:column="47"/></operator><name pos:line="188" pos:column="44">host<pos:position pos:line="188" pos:column="48"/></name><operator pos:line="188" pos:column="48">.<pos:position pos:line="188" pos:column="49"/></operator><name pos:line="188" pos:column="49">name<pos:position pos:line="188" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="188" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="188" pos:column="55"/></condition><then pos:line="188" pos:column="55">
          <block type="pseudo"><expr_stmt><expr><name pos:line="189" pos:column="11">protop<pos:position pos:line="189" pos:column="17"/></name> <operator pos:line="189" pos:column="18">=<pos:position pos:line="189" pos:column="19"/></operator> <literal type="string" pos:line="189" pos:column="20">"DICT"<pos:position pos:line="189" pos:column="26"/></literal></expr>;<pos:position pos:line="189" pos:column="27"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="190" pos:column="9">else <if pos:line="190" pos:column="14">if<condition pos:line="190" pos:column="16">(<expr><call><name pos:line="190" pos:column="17">checkprefix<pos:position pos:line="190" pos:column="28"/></name><argument_list pos:line="190" pos:column="28">(<argument><expr><literal type="string" pos:line="190" pos:column="29">"LDAP."<pos:position pos:line="190" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="38">conn<pos:position pos:line="190" pos:column="42"/></name><operator pos:line="190" pos:column="42">-&gt;<pos:position pos:line="190" pos:column="47"/></operator><name pos:line="190" pos:column="44">host<pos:position pos:line="190" pos:column="48"/></name><operator pos:line="190" pos:column="48">.<pos:position pos:line="190" pos:column="49"/></operator><name pos:line="190" pos:column="49">name<pos:position pos:line="190" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="190" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="190" pos:column="55"/></condition><then pos:line="190" pos:column="55">
          <block type="pseudo"><expr_stmt><expr><name pos:line="191" pos:column="11">protop<pos:position pos:line="191" pos:column="17"/></name> <operator pos:line="191" pos:column="18">=<pos:position pos:line="191" pos:column="19"/></operator> <literal type="string" pos:line="191" pos:column="20">"LDAP"<pos:position pos:line="191" pos:column="26"/></literal></expr>;<pos:position pos:line="191" pos:column="27"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="192" pos:column="9">else <if pos:line="192" pos:column="14">if<condition pos:line="192" pos:column="16">(<expr><call><name pos:line="192" pos:column="17">checkprefix<pos:position pos:line="192" pos:column="28"/></name><argument_list pos:line="192" pos:column="28">(<argument><expr><literal type="string" pos:line="192" pos:column="29">"IMAP."<pos:position pos:line="192" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="38">conn<pos:position pos:line="192" pos:column="42"/></name><operator pos:line="192" pos:column="42">-&gt;<pos:position pos:line="192" pos:column="47"/></operator><name pos:line="192" pos:column="44">host<pos:position pos:line="192" pos:column="48"/></name><operator pos:line="192" pos:column="48">.<pos:position pos:line="192" pos:column="49"/></operator><name pos:line="192" pos:column="49">name<pos:position pos:line="192" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="192" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="192" pos:column="55"/></condition><then pos:line="192" pos:column="55">
          <block type="pseudo"><expr_stmt><expr><name pos:line="193" pos:column="11">protop<pos:position pos:line="193" pos:column="17"/></name> <operator pos:line="193" pos:column="18">=<pos:position pos:line="193" pos:column="19"/></operator> <literal type="string" pos:line="193" pos:column="20">"IMAP"<pos:position pos:line="193" pos:column="26"/></literal></expr>;<pos:position pos:line="193" pos:column="27"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="194" pos:column="9">else <if pos:line="194" pos:column="14">if<condition pos:line="194" pos:column="16">(<expr><call><name pos:line="194" pos:column="17">checkprefix<pos:position pos:line="194" pos:column="28"/></name><argument_list pos:line="194" pos:column="28">(<argument><expr><literal type="string" pos:line="194" pos:column="29">"SMTP."<pos:position pos:line="194" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="194" pos:column="38">conn<pos:position pos:line="194" pos:column="42"/></name><operator pos:line="194" pos:column="42">-&gt;<pos:position pos:line="194" pos:column="47"/></operator><name pos:line="194" pos:column="44">host<pos:position pos:line="194" pos:column="48"/></name><operator pos:line="194" pos:column="48">.<pos:position pos:line="194" pos:column="49"/></operator><name pos:line="194" pos:column="49">name<pos:position pos:line="194" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="194" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="194" pos:column="55"/></condition><then pos:line="194" pos:column="55">
          <block type="pseudo"><expr_stmt><expr><name pos:line="195" pos:column="11">protop<pos:position pos:line="195" pos:column="17"/></name> <operator pos:line="195" pos:column="18">=<pos:position pos:line="195" pos:column="19"/></operator> <literal type="string" pos:line="195" pos:column="20">"smtp"<pos:position pos:line="195" pos:column="26"/></literal></expr>;<pos:position pos:line="195" pos:column="27"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="196" pos:column="9">else <if pos:line="196" pos:column="14">if<condition pos:line="196" pos:column="16">(<expr><call><name pos:line="196" pos:column="17">checkprefix<pos:position pos:line="196" pos:column="28"/></name><argument_list pos:line="196" pos:column="28">(<argument><expr><literal type="string" pos:line="196" pos:column="29">"POP3."<pos:position pos:line="196" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="38">conn<pos:position pos:line="196" pos:column="42"/></name><operator pos:line="196" pos:column="42">-&gt;<pos:position pos:line="196" pos:column="47"/></operator><name pos:line="196" pos:column="44">host<pos:position pos:line="196" pos:column="48"/></name><operator pos:line="196" pos:column="48">.<pos:position pos:line="196" pos:column="49"/></operator><name pos:line="196" pos:column="49">name<pos:position pos:line="196" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="196" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="196" pos:column="55"/></condition><then pos:line="196" pos:column="55">
          <block type="pseudo"><expr_stmt><expr><name pos:line="197" pos:column="11">protop<pos:position pos:line="197" pos:column="17"/></name> <operator pos:line="197" pos:column="18">=<pos:position pos:line="197" pos:column="19"/></operator> <literal type="string" pos:line="197" pos:column="20">"pop3"<pos:position pos:line="197" pos:column="26"/></literal></expr>;<pos:position pos:line="197" pos:column="27"/></expr_stmt></block></then></if></elseif>
        <else pos:line="198" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="199" pos:column="11">protop<pos:position pos:line="199" pos:column="17"/></name> <operator pos:line="199" pos:column="18">=<pos:position pos:line="199" pos:column="19"/></operator> <literal type="string" pos:line="199" pos:column="20">"http"<pos:position pos:line="199" pos:column="26"/></literal></expr>;<pos:position pos:line="199" pos:column="27"/></expr_stmt></block></else></if>
      }<pos:position pos:line="200" pos:column="8"/></block></then></if>

      <expr_stmt><expr><operator pos:line="202" pos:column="7">*<pos:position pos:line="202" pos:column="8"/></operator><name pos:line="202" pos:column="8">prot_missing<pos:position pos:line="202" pos:column="20"/></name> <operator pos:line="202" pos:column="21">=<pos:position pos:line="202" pos:column="22"/></operator> <name pos:line="202" pos:column="23">TRUE<pos:position pos:line="202" pos:column="27"/></name></expr>;<pos:position pos:line="202" pos:column="28"/></expr_stmt> <comment type="block" pos:line="202" pos:column="29">/* not given in URL */</comment>
    }<pos:position pos:line="203" pos:column="6"/></block></then>
    <else pos:line="204" pos:column="5">else <block pos:line="204" pos:column="10">{
      <decl_stmt><decl><type><name pos:line="205" pos:column="7">size_t<pos:position pos:line="205" pos:column="13"/></name></type> <name pos:line="205" pos:column="14">s<pos:position pos:line="205" pos:column="15"/></name> <init pos:line="205" pos:column="16">= <expr><call><name pos:line="205" pos:column="18">strlen<pos:position pos:line="205" pos:column="24"/></name><argument_list pos:line="205" pos:column="24">(<argument><expr><name pos:line="205" pos:column="25">slashbuf<pos:position pos:line="205" pos:column="33"/></name></expr></argument>)<pos:position pos:line="205" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="205" pos:column="35"/></decl_stmt>
      <expr_stmt><expr><name pos:line="206" pos:column="7">protop<pos:position pos:line="206" pos:column="13"/></name> <operator pos:line="206" pos:column="14">=<pos:position pos:line="206" pos:column="15"/></operator> <name pos:line="206" pos:column="16">protobuf<pos:position pos:line="206" pos:column="24"/></name></expr>;<pos:position pos:line="206" pos:column="25"/></expr_stmt>
      <if pos:line="207" pos:column="7">if<condition pos:line="207" pos:column="9">(<expr><name pos:line="207" pos:column="10">s<pos:position pos:line="207" pos:column="11"/></name> <operator pos:line="207" pos:column="12">!=<pos:position pos:line="207" pos:column="14"/></operator> <literal type="number" pos:line="207" pos:column="15">2<pos:position pos:line="207" pos:column="16"/></literal></expr>)<pos:position pos:line="207" pos:column="17"/></condition><then pos:line="207" pos:column="17"> <block pos:line="207" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="208" pos:column="9">infof<pos:position pos:line="208" pos:column="14"/></name><argument_list pos:line="208" pos:column="14">(<argument><expr><name pos:line="208" pos:column="15">data<pos:position pos:line="208" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="208" pos:column="21">"Unwillingly accepted illegal URL using %d slash%s!\n"<pos:position pos:line="208" pos:column="75"/></literal></expr></argument>,
              <argument><expr><name pos:line="209" pos:column="15">s<pos:position pos:line="209" pos:column="16"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="209" pos:column="18">s<pos:position pos:line="209" pos:column="19"/></name><operator pos:line="209" pos:column="19">&gt;<pos:position pos:line="209" pos:column="23"/></operator><literal type="number" pos:line="209" pos:column="20">1<pos:position pos:line="209" pos:column="21"/></literal></expr>?<pos:position pos:line="209" pos:column="22"/></condition><then><expr><literal type="string" pos:line="209" pos:column="22">"es"<pos:position pos:line="209" pos:column="26"/></literal></expr></then><else pos:line="209" pos:column="26">:<expr><literal type="string" pos:line="209" pos:column="27">""<pos:position pos:line="209" pos:column="29"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="209" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="31"/></expr_stmt>

        <if pos:line="211" pos:column="9">if<condition pos:line="211" pos:column="11">(<expr><name><name pos:line="211" pos:column="12">data<pos:position pos:line="211" pos:column="16"/></name><operator pos:line="211" pos:column="16">-&gt;<pos:position pos:line="211" pos:column="21"/></operator><name pos:line="211" pos:column="18">change<pos:position pos:line="211" pos:column="24"/></name><operator pos:line="211" pos:column="24">.<pos:position pos:line="211" pos:column="25"/></operator><name pos:line="211" pos:column="25">url_alloc<pos:position pos:line="211" pos:column="34"/></name></name></expr>)<pos:position pos:line="211" pos:column="35"/></condition><then pos:line="211" pos:column="35">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="212" pos:column="11">free<pos:position pos:line="212" pos:column="15"/></name><argument_list pos:line="212" pos:column="15">(<argument><expr><name><name pos:line="212" pos:column="16">data<pos:position pos:line="212" pos:column="20"/></name><operator pos:line="212" pos:column="20">-&gt;<pos:position pos:line="212" pos:column="25"/></operator><name pos:line="212" pos:column="22">change<pos:position pos:line="212" pos:column="28"/></name><operator pos:line="212" pos:column="28">.<pos:position pos:line="212" pos:column="29"/></operator><name pos:line="212" pos:column="29">url<pos:position pos:line="212" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="212" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="34"/></expr_stmt></block></then></if>
        <comment type="block" pos:line="213" pos:column="9">/* repair the URL to use two slashes */</comment>
        <expr_stmt><expr><name><name pos:line="214" pos:column="9">data<pos:position pos:line="214" pos:column="13"/></name><operator pos:line="214" pos:column="13">-&gt;<pos:position pos:line="214" pos:column="18"/></operator><name pos:line="214" pos:column="15">change<pos:position pos:line="214" pos:column="21"/></name><operator pos:line="214" pos:column="21">.<pos:position pos:line="214" pos:column="22"/></operator><name pos:line="214" pos:column="22">url<pos:position pos:line="214" pos:column="25"/></name></name> <operator pos:line="214" pos:column="26">=<pos:position pos:line="214" pos:column="27"/></operator> <call><name pos:line="214" pos:column="28">aprintf<pos:position pos:line="214" pos:column="35"/></name><argument_list pos:line="214" pos:column="35">(<argument><expr><literal type="string" pos:line="214" pos:column="36">"%s://%s%s"<pos:position pos:line="214" pos:column="47"/></literal></expr></argument>,
                                   <argument><expr><name pos:line="215" pos:column="36">protobuf<pos:position pos:line="215" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="215" pos:column="46">conn<pos:position pos:line="215" pos:column="50"/></name><operator pos:line="215" pos:column="50">-&gt;<pos:position pos:line="215" pos:column="55"/></operator><name pos:line="215" pos:column="52">host<pos:position pos:line="215" pos:column="56"/></name><operator pos:line="215" pos:column="56">.<pos:position pos:line="215" pos:column="57"/></operator><name pos:line="215" pos:column="57">name<pos:position pos:line="215" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="63">path<pos:position pos:line="215" pos:column="67"/></name></expr></argument>)<pos:position pos:line="215" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="69"/></expr_stmt>
        <if pos:line="216" pos:column="9">if<condition pos:line="216" pos:column="11">(<expr><operator pos:line="216" pos:column="12">!<pos:position pos:line="216" pos:column="13"/></operator><name><name pos:line="216" pos:column="13">data<pos:position pos:line="216" pos:column="17"/></name><operator pos:line="216" pos:column="17">-&gt;<pos:position pos:line="216" pos:column="22"/></operator><name pos:line="216" pos:column="19">change<pos:position pos:line="216" pos:column="25"/></name><operator pos:line="216" pos:column="25">.<pos:position pos:line="216" pos:column="26"/></operator><name pos:line="216" pos:column="26">url<pos:position pos:line="216" pos:column="29"/></name></name></expr>)<pos:position pos:line="216" pos:column="30"/></condition><then pos:line="216" pos:column="30">
          <block type="pseudo"><return pos:line="217" pos:column="11">return <expr><name pos:line="217" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="217" pos:column="37"/></name></expr>;<pos:position pos:line="217" pos:column="38"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="218" pos:column="9">data<pos:position pos:line="218" pos:column="13"/></name><operator pos:line="218" pos:column="13">-&gt;<pos:position pos:line="218" pos:column="18"/></operator><name pos:line="218" pos:column="15">change<pos:position pos:line="218" pos:column="21"/></name><operator pos:line="218" pos:column="21">.<pos:position pos:line="218" pos:column="22"/></operator><name pos:line="218" pos:column="22">url_alloc<pos:position pos:line="218" pos:column="31"/></name></name> <operator pos:line="218" pos:column="32">=<pos:position pos:line="218" pos:column="33"/></operator> <name pos:line="218" pos:column="34">TRUE<pos:position pos:line="218" pos:column="38"/></name></expr>;<pos:position pos:line="218" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="219" pos:column="8"/></block></then></if>
    }<pos:position pos:line="220" pos:column="6"/></block></else></if>
  }<pos:position pos:line="221" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="223" pos:column="3">/* We search for '?' in the host name (but only on the right side of a
   * @-letter to allow ?-letters in username and password) to handle things
   * like http://example.com?param= (notice the missing '/').
   */</comment>
  <expr_stmt><expr><name pos:line="227" pos:column="3">at<pos:position pos:line="227" pos:column="5"/></name> <operator pos:line="227" pos:column="6">=<pos:position pos:line="227" pos:column="7"/></operator> <call><name pos:line="227" pos:column="8">strchr<pos:position pos:line="227" pos:column="14"/></name><argument_list pos:line="227" pos:column="14">(<argument><expr><name><name pos:line="227" pos:column="15">conn<pos:position pos:line="227" pos:column="19"/></name><operator pos:line="227" pos:column="19">-&gt;<pos:position pos:line="227" pos:column="24"/></operator><name pos:line="227" pos:column="21">host<pos:position pos:line="227" pos:column="25"/></name><operator pos:line="227" pos:column="25">.<pos:position pos:line="227" pos:column="26"/></operator><name pos:line="227" pos:column="26">name<pos:position pos:line="227" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="227" pos:column="32">'@'<pos:position pos:line="227" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="227" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="37"/></expr_stmt>
  <if pos:line="228" pos:column="3">if<condition pos:line="228" pos:column="5">(<expr><name pos:line="228" pos:column="6">at<pos:position pos:line="228" pos:column="8"/></name></expr>)<pos:position pos:line="228" pos:column="9"/></condition><then pos:line="228" pos:column="9">
    <block type="pseudo"><expr_stmt><expr><name pos:line="229" pos:column="5">query<pos:position pos:line="229" pos:column="10"/></name> <operator pos:line="229" pos:column="11">=<pos:position pos:line="229" pos:column="12"/></operator> <call><name pos:line="229" pos:column="13">strchr<pos:position pos:line="229" pos:column="19"/></name><argument_list pos:line="229" pos:column="19">(<argument><expr><name pos:line="229" pos:column="20">at<pos:position pos:line="229" pos:column="22"/></name> <operator pos:line="229" pos:column="23">+<pos:position pos:line="229" pos:column="24"/></operator> <literal type="number" pos:line="229" pos:column="25">1<pos:position pos:line="229" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="229" pos:column="28">'?'<pos:position pos:line="229" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="229" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="33"/></expr_stmt></block></then>
  <else pos:line="230" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="231" pos:column="5">query<pos:position pos:line="231" pos:column="10"/></name> <operator pos:line="231" pos:column="11">=<pos:position pos:line="231" pos:column="12"/></operator> <call><name pos:line="231" pos:column="13">strchr<pos:position pos:line="231" pos:column="19"/></name><argument_list pos:line="231" pos:column="19">(<argument><expr><name><name pos:line="231" pos:column="20">conn<pos:position pos:line="231" pos:column="24"/></name><operator pos:line="231" pos:column="24">-&gt;<pos:position pos:line="231" pos:column="29"/></operator><name pos:line="231" pos:column="26">host<pos:position pos:line="231" pos:column="30"/></name><operator pos:line="231" pos:column="30">.<pos:position pos:line="231" pos:column="31"/></operator><name pos:line="231" pos:column="31">name<pos:position pos:line="231" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="231" pos:column="37">'?'<pos:position pos:line="231" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="231" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="42"/></expr_stmt></block></else></if>

  <if pos:line="233" pos:column="3">if<condition pos:line="233" pos:column="5">(<expr><name pos:line="233" pos:column="6">query<pos:position pos:line="233" pos:column="11"/></name></expr>)<pos:position pos:line="233" pos:column="12"/></condition><then pos:line="233" pos:column="12"> <block pos:line="233" pos:column="13">{
    <comment type="block" pos:line="234" pos:column="5">/* We must insert a slash before the '?'-letter in the URL. If the URL had
       a slash after the '?', that is where the path currently begins and the
       '?string' is still part of the host name.

       We must move the trailing part from the host name and put it first in
       the path. And have it all prefixed with a slash.
    */</comment>

    <decl_stmt><decl><type><name pos:line="242" pos:column="5">size_t<pos:position pos:line="242" pos:column="11"/></name></type> <name pos:line="242" pos:column="12">hostlen<pos:position pos:line="242" pos:column="19"/></name> <init pos:line="242" pos:column="20">= <expr><call><name pos:line="242" pos:column="22">strlen<pos:position pos:line="242" pos:column="28"/></name><argument_list pos:line="242" pos:column="28">(<argument><expr><name pos:line="242" pos:column="29">query<pos:position pos:line="242" pos:column="34"/></name></expr></argument>)<pos:position pos:line="242" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="242" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="243" pos:column="5">size_t<pos:position pos:line="243" pos:column="11"/></name></type> <name pos:line="243" pos:column="12">pathlen<pos:position pos:line="243" pos:column="19"/></name> <init pos:line="243" pos:column="20">= <expr><call><name pos:line="243" pos:column="22">strlen<pos:position pos:line="243" pos:column="28"/></name><argument_list pos:line="243" pos:column="28">(<argument><expr><name pos:line="243" pos:column="29">path<pos:position pos:line="243" pos:column="33"/></name></expr></argument>)<pos:position pos:line="243" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="243" pos:column="35"/></decl_stmt>

    <comment type="block" pos:line="245" pos:column="5">/* move the existing path plus the zero byte forward, to make room for
       the host-name part */</comment>
    <expr_stmt><expr><call><name pos:line="247" pos:column="5">memmove<pos:position pos:line="247" pos:column="12"/></name><argument_list pos:line="247" pos:column="12">(<argument><expr><name pos:line="247" pos:column="13">path<pos:position pos:line="247" pos:column="17"/></name> <operator pos:line="247" pos:column="18">+<pos:position pos:line="247" pos:column="19"/></operator> <name pos:line="247" pos:column="20">hostlen<pos:position pos:line="247" pos:column="27"/></name> <operator pos:line="247" pos:column="28">+<pos:position pos:line="247" pos:column="29"/></operator> <literal type="number" pos:line="247" pos:column="30">1<pos:position pos:line="247" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="247" pos:column="33">path<pos:position pos:line="247" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="247" pos:column="39">pathlen<pos:position pos:line="247" pos:column="46"/></name> <operator pos:line="247" pos:column="47">+<pos:position pos:line="247" pos:column="48"/></operator> <literal type="number" pos:line="247" pos:column="49">1<pos:position pos:line="247" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="247" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="52"/></expr_stmt>

     <comment type="block" pos:line="249" pos:column="6">/* now copy the trailing host part in front of the existing path */</comment>
    <expr_stmt><expr><call><name pos:line="250" pos:column="5">memcpy<pos:position pos:line="250" pos:column="11"/></name><argument_list pos:line="250" pos:column="11">(<argument><expr><name pos:line="250" pos:column="12">path<pos:position pos:line="250" pos:column="16"/></name> <operator pos:line="250" pos:column="17">+<pos:position pos:line="250" pos:column="18"/></operator> <literal type="number" pos:line="250" pos:column="19">1<pos:position pos:line="250" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="250" pos:column="22">query<pos:position pos:line="250" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="29">hostlen<pos:position pos:line="250" pos:column="36"/></name></expr></argument>)<pos:position pos:line="250" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="252" pos:column="5">path<pos:position pos:line="252" pos:column="9"/></name><index pos:line="252" pos:column="9">[<expr><literal type="number" pos:line="252" pos:column="10">0<pos:position pos:line="252" pos:column="11"/></literal></expr>]<pos:position pos:line="252" pos:column="12"/></index></name><operator pos:line="252" pos:column="12">=<pos:position pos:line="252" pos:column="13"/></operator><literal type="char" pos:line="252" pos:column="13">'/'<pos:position pos:line="252" pos:column="16"/></literal></expr>;<pos:position pos:line="252" pos:column="17"/></expr_stmt> <comment type="block" pos:line="252" pos:column="18">/* prepend the missing slash */</comment>
    <expr_stmt><expr><name pos:line="253" pos:column="5">rebuild_url<pos:position pos:line="253" pos:column="16"/></name> <operator pos:line="253" pos:column="17">=<pos:position pos:line="253" pos:column="18"/></operator> <name pos:line="253" pos:column="19">TRUE<pos:position pos:line="253" pos:column="23"/></name></expr>;<pos:position pos:line="253" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="255" pos:column="5">*<pos:position pos:line="255" pos:column="6"/></operator><name pos:line="255" pos:column="6">query<pos:position pos:line="255" pos:column="11"/></name> <operator pos:line="255" pos:column="12">=<pos:position pos:line="255" pos:column="13"/></operator> <literal type="number" pos:line="255" pos:column="14">0<pos:position pos:line="255" pos:column="15"/></literal></expr>;<pos:position pos:line="255" pos:column="16"/></expr_stmt> <comment type="block" pos:line="255" pos:column="17">/* now cut off the hostname at the ? */</comment>
  }<pos:position pos:line="256" pos:column="4"/></block></then>
  <elseif pos:line="257" pos:column="3">else <if pos:line="257" pos:column="8">if<condition pos:line="257" pos:column="10">(<expr><operator pos:line="257" pos:column="11">!<pos:position pos:line="257" pos:column="12"/></operator><name><name pos:line="257" pos:column="12">path<pos:position pos:line="257" pos:column="16"/></name><index pos:line="257" pos:column="16">[<expr><literal type="number" pos:line="257" pos:column="17">0<pos:position pos:line="257" pos:column="18"/></literal></expr>]<pos:position pos:line="257" pos:column="19"/></index></name></expr>)<pos:position pos:line="257" pos:column="20"/></condition><then pos:line="257" pos:column="20"> <block pos:line="257" pos:column="21">{
    <comment type="block" pos:line="258" pos:column="5">/* if there's no path set, use a single slash */</comment>
    <expr_stmt><expr><call><name pos:line="259" pos:column="5">strcpy<pos:position pos:line="259" pos:column="11"/></name><argument_list pos:line="259" pos:column="11">(<argument><expr><name pos:line="259" pos:column="12">path<pos:position pos:line="259" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="259" pos:column="18">"/"<pos:position pos:line="259" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="259" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="260" pos:column="5">rebuild_url<pos:position pos:line="260" pos:column="16"/></name> <operator pos:line="260" pos:column="17">=<pos:position pos:line="260" pos:column="18"/></operator> <name pos:line="260" pos:column="19">TRUE<pos:position pos:line="260" pos:column="23"/></name></expr>;<pos:position pos:line="260" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="261" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="263" pos:column="3">/* If the URL is malformatted (missing a '/' after hostname before path) we
   * insert a slash here. The only letters except '/' that can start a path is
   * '?' and '#' - as controlled by the two sscanf() patterns above.
   */</comment>
  <if pos:line="267" pos:column="3">if<condition pos:line="267" pos:column="5">(<expr><name><name pos:line="267" pos:column="6">path<pos:position pos:line="267" pos:column="10"/></name><index pos:line="267" pos:column="10">[<expr><literal type="number" pos:line="267" pos:column="11">0<pos:position pos:line="267" pos:column="12"/></literal></expr>]<pos:position pos:line="267" pos:column="13"/></index></name> <operator pos:line="267" pos:column="14">!=<pos:position pos:line="267" pos:column="16"/></operator> <literal type="char" pos:line="267" pos:column="17">'/'<pos:position pos:line="267" pos:column="20"/></literal></expr>)<pos:position pos:line="267" pos:column="21"/></condition><then pos:line="267" pos:column="21"> <block pos:line="267" pos:column="22">{
    <comment type="block" pos:line="268" pos:column="5">/* We need this function to deal with overlapping memory areas. We know
       that the memory area 'path' points to is 'urllen' bytes big and that
       is bigger than the path. Use +1 to move the zero byte too. */</comment>
    <expr_stmt><expr><call><name pos:line="271" pos:column="5">memmove<pos:position pos:line="271" pos:column="12"/></name><argument_list pos:line="271" pos:column="12">(<argument><expr><operator pos:line="271" pos:column="13">&amp;<pos:position pos:line="271" pos:column="18"/></operator><name><name pos:line="271" pos:column="14">path<pos:position pos:line="271" pos:column="18"/></name><index pos:line="271" pos:column="18">[<expr><literal type="number" pos:line="271" pos:column="19">1<pos:position pos:line="271" pos:column="20"/></literal></expr>]<pos:position pos:line="271" pos:column="21"/></index></name></expr></argument>, <argument><expr><name pos:line="271" pos:column="23">path<pos:position pos:line="271" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="271" pos:column="29">strlen<pos:position pos:line="271" pos:column="35"/></name><argument_list pos:line="271" pos:column="35">(<argument><expr><name pos:line="271" pos:column="36">path<pos:position pos:line="271" pos:column="40"/></name></expr></argument>)<pos:position pos:line="271" pos:column="41"/></argument_list></call> <operator pos:line="271" pos:column="42">+<pos:position pos:line="271" pos:column="43"/></operator> <literal type="number" pos:line="271" pos:column="44">1<pos:position pos:line="271" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="271" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="272" pos:column="5">path<pos:position pos:line="272" pos:column="9"/></name><index pos:line="272" pos:column="9">[<expr><literal type="number" pos:line="272" pos:column="10">0<pos:position pos:line="272" pos:column="11"/></literal></expr>]<pos:position pos:line="272" pos:column="12"/></index></name> <operator pos:line="272" pos:column="13">=<pos:position pos:line="272" pos:column="14"/></operator> <literal type="char" pos:line="272" pos:column="15">'/'<pos:position pos:line="272" pos:column="18"/></literal></expr>;<pos:position pos:line="272" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="273" pos:column="5">rebuild_url<pos:position pos:line="273" pos:column="16"/></name> <operator pos:line="273" pos:column="17">=<pos:position pos:line="273" pos:column="18"/></operator> <name pos:line="273" pos:column="19">TRUE<pos:position pos:line="273" pos:column="23"/></name></expr>;<pos:position pos:line="273" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="274" pos:column="4"/></block></then>
  <elseif pos:line="275" pos:column="3">else <if pos:line="275" pos:column="8">if<condition pos:line="275" pos:column="10">(<expr><operator pos:line="275" pos:column="11">!<pos:position pos:line="275" pos:column="12"/></operator><name><name pos:line="275" pos:column="12">data<pos:position pos:line="275" pos:column="16"/></name><operator pos:line="275" pos:column="16">-&gt;<pos:position pos:line="275" pos:column="21"/></operator><name pos:line="275" pos:column="18">set<pos:position pos:line="275" pos:column="21"/></name><operator pos:line="275" pos:column="21">.<pos:position pos:line="275" pos:column="22"/></operator><name pos:line="275" pos:column="22">path_as_is<pos:position pos:line="275" pos:column="32"/></name></name></expr>)<pos:position pos:line="275" pos:column="33"/></condition><then pos:line="275" pos:column="33"> <block pos:line="275" pos:column="34">{
    <comment type="block" pos:line="276" pos:column="5">/* sanitise paths and remove ../ and ./ sequences according to RFC3986 */</comment>
    <decl_stmt><decl><type><name pos:line="277" pos:column="5">char<pos:position pos:line="277" pos:column="9"/></name> <modifier pos:line="277" pos:column="10">*<pos:position pos:line="277" pos:column="11"/></modifier></type><name pos:line="277" pos:column="11">newp<pos:position pos:line="277" pos:column="15"/></name> <init pos:line="277" pos:column="16">= <expr><call><name pos:line="277" pos:column="18">Curl_dedotdotify<pos:position pos:line="277" pos:column="34"/></name><argument_list pos:line="277" pos:column="34">(<argument><expr><name pos:line="277" pos:column="35">path<pos:position pos:line="277" pos:column="39"/></name></expr></argument>)<pos:position pos:line="277" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="277" pos:column="41"/></decl_stmt>
    <if pos:line="278" pos:column="5">if<condition pos:line="278" pos:column="7">(<expr><operator pos:line="278" pos:column="8">!<pos:position pos:line="278" pos:column="9"/></operator><name pos:line="278" pos:column="9">newp<pos:position pos:line="278" pos:column="13"/></name></expr>)<pos:position pos:line="278" pos:column="14"/></condition><then pos:line="278" pos:column="14">
      <block type="pseudo"><return pos:line="279" pos:column="7">return <expr><name pos:line="279" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="279" pos:column="33"/></name></expr>;<pos:position pos:line="279" pos:column="34"/></return></block></then></if>

    <if pos:line="281" pos:column="5">if<condition pos:line="281" pos:column="7">(<expr><call><name pos:line="281" pos:column="8">strcmp<pos:position pos:line="281" pos:column="14"/></name><argument_list pos:line="281" pos:column="14">(<argument><expr><name pos:line="281" pos:column="15">newp<pos:position pos:line="281" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="281" pos:column="21">path<pos:position pos:line="281" pos:column="25"/></name></expr></argument>)<pos:position pos:line="281" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="281" pos:column="27"/></condition><then pos:line="281" pos:column="27"> <block pos:line="281" pos:column="28">{
      <expr_stmt><expr><name pos:line="282" pos:column="7">rebuild_url<pos:position pos:line="282" pos:column="18"/></name> <operator pos:line="282" pos:column="19">=<pos:position pos:line="282" pos:column="20"/></operator> <name pos:line="282" pos:column="21">TRUE<pos:position pos:line="282" pos:column="25"/></name></expr>;<pos:position pos:line="282" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="283" pos:column="7">free<pos:position pos:line="283" pos:column="11"/></name><argument_list pos:line="283" pos:column="11">(<argument><expr><name><name pos:line="283" pos:column="12">data<pos:position pos:line="283" pos:column="16"/></name><operator pos:line="283" pos:column="16">-&gt;<pos:position pos:line="283" pos:column="21"/></operator><name pos:line="283" pos:column="18">state<pos:position pos:line="283" pos:column="23"/></name><operator pos:line="283" pos:column="23">.<pos:position pos:line="283" pos:column="24"/></operator><name pos:line="283" pos:column="24">pathbuffer<pos:position pos:line="283" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="283" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="284" pos:column="7">data<pos:position pos:line="284" pos:column="11"/></name><operator pos:line="284" pos:column="11">-&gt;<pos:position pos:line="284" pos:column="16"/></operator><name pos:line="284" pos:column="13">state<pos:position pos:line="284" pos:column="18"/></name><operator pos:line="284" pos:column="18">.<pos:position pos:line="284" pos:column="19"/></operator><name pos:line="284" pos:column="19">pathbuffer<pos:position pos:line="284" pos:column="29"/></name></name> <operator pos:line="284" pos:column="30">=<pos:position pos:line="284" pos:column="31"/></operator> <name pos:line="284" pos:column="32">newp<pos:position pos:line="284" pos:column="36"/></name></expr>;<pos:position pos:line="284" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="285" pos:column="7">data<pos:position pos:line="285" pos:column="11"/></name><operator pos:line="285" pos:column="11">-&gt;<pos:position pos:line="285" pos:column="16"/></operator><name pos:line="285" pos:column="13">state<pos:position pos:line="285" pos:column="18"/></name><operator pos:line="285" pos:column="18">.<pos:position pos:line="285" pos:column="19"/></operator><name pos:line="285" pos:column="19">path<pos:position pos:line="285" pos:column="23"/></name></name> <operator pos:line="285" pos:column="24">=<pos:position pos:line="285" pos:column="25"/></operator> <name pos:line="285" pos:column="26">newp<pos:position pos:line="285" pos:column="30"/></name></expr>;<pos:position pos:line="285" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="286" pos:column="7">path<pos:position pos:line="286" pos:column="11"/></name> <operator pos:line="286" pos:column="12">=<pos:position pos:line="286" pos:column="13"/></operator> <name pos:line="286" pos:column="14">newp<pos:position pos:line="286" pos:column="18"/></name></expr>;<pos:position pos:line="286" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="287" pos:column="6"/></block></then>
    <else pos:line="288" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="289" pos:column="7">free<pos:position pos:line="289" pos:column="11"/></name><argument_list pos:line="289" pos:column="11">(<argument><expr><name pos:line="289" pos:column="12">newp<pos:position pos:line="289" pos:column="16"/></name></expr></argument>)<pos:position pos:line="289" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="18"/></expr_stmt></block></else></if>
  }<pos:position pos:line="290" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="292" pos:column="3">/*
   * "rebuild_url" means that one or more URL components have been modified so
   * we need to generate an updated full version.  We need the corrected URL
   * when communicating over HTTP proxy and we don't know at this point if
   * we're using a proxy or not.
   */</comment>
  <if pos:line="298" pos:column="3">if<condition pos:line="298" pos:column="5">(<expr><name pos:line="298" pos:column="6">rebuild_url<pos:position pos:line="298" pos:column="17"/></name></expr>)<pos:position pos:line="298" pos:column="18"/></condition><then pos:line="298" pos:column="18"> <block pos:line="298" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="299" pos:column="5">char<pos:position pos:line="299" pos:column="9"/></name> <modifier pos:line="299" pos:column="10">*<pos:position pos:line="299" pos:column="11"/></modifier></type><name pos:line="299" pos:column="11">reurl<pos:position pos:line="299" pos:column="16"/></name></decl>;<pos:position pos:line="299" pos:column="17"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="301" pos:column="5">size_t<pos:position pos:line="301" pos:column="11"/></name></type> <name pos:line="301" pos:column="12">plen<pos:position pos:line="301" pos:column="16"/></name> <init pos:line="301" pos:column="17">= <expr><call><name pos:line="301" pos:column="19">strlen<pos:position pos:line="301" pos:column="25"/></name><argument_list pos:line="301" pos:column="25">(<argument><expr><name pos:line="301" pos:column="26">path<pos:position pos:line="301" pos:column="30"/></name></expr></argument>)<pos:position pos:line="301" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="301" pos:column="32"/></decl_stmt> <comment type="block" pos:line="301" pos:column="33">/* new path, should be 1 byte longer than
                                   the original */</comment>
    <decl_stmt><decl><type><name pos:line="303" pos:column="5">size_t<pos:position pos:line="303" pos:column="11"/></name></type> <name pos:line="303" pos:column="12">prefixlen<pos:position pos:line="303" pos:column="21"/></name> <init pos:line="303" pos:column="22">= <expr><call><name pos:line="303" pos:column="24">strlen<pos:position pos:line="303" pos:column="30"/></name><argument_list pos:line="303" pos:column="30">(<argument><expr><name><name pos:line="303" pos:column="31">conn<pos:position pos:line="303" pos:column="35"/></name><operator pos:line="303" pos:column="35">-&gt;<pos:position pos:line="303" pos:column="40"/></operator><name pos:line="303" pos:column="37">host<pos:position pos:line="303" pos:column="41"/></name><operator pos:line="303" pos:column="41">.<pos:position pos:line="303" pos:column="42"/></operator><name pos:line="303" pos:column="42">name<pos:position pos:line="303" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="303" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="303" pos:column="48"/></decl_stmt>

    <if pos:line="305" pos:column="5">if<condition pos:line="305" pos:column="7">(<expr><operator pos:line="305" pos:column="8">!<pos:position pos:line="305" pos:column="9"/></operator><operator pos:line="305" pos:column="9">*<pos:position pos:line="305" pos:column="10"/></operator><name pos:line="305" pos:column="10">prot_missing<pos:position pos:line="305" pos:column="22"/></name></expr>)<pos:position pos:line="305" pos:column="23"/></condition><then pos:line="305" pos:column="23"> <block pos:line="305" pos:column="24">{
      <decl_stmt><decl><type><name pos:line="306" pos:column="7">size_t<pos:position pos:line="306" pos:column="13"/></name></type> <name pos:line="306" pos:column="14">protolen<pos:position pos:line="306" pos:column="22"/></name> <init pos:line="306" pos:column="23">= <expr><call><name pos:line="306" pos:column="25">strlen<pos:position pos:line="306" pos:column="31"/></name><argument_list pos:line="306" pos:column="31">(<argument><expr><name pos:line="306" pos:column="32">protop<pos:position pos:line="306" pos:column="38"/></name></expr></argument>)<pos:position pos:line="306" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="306" pos:column="40"/></decl_stmt>

      <if pos:line="308" pos:column="7">if<condition pos:line="308" pos:column="9">(<expr><call><name pos:line="308" pos:column="10">curl_strnequal<pos:position pos:line="308" pos:column="24"/></name><argument_list pos:line="308" pos:column="24">(<argument><expr><name pos:line="308" pos:column="25">protop<pos:position pos:line="308" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="308" pos:column="33">data<pos:position pos:line="308" pos:column="37"/></name><operator pos:line="308" pos:column="37">-&gt;<pos:position pos:line="308" pos:column="42"/></operator><name pos:line="308" pos:column="39">change<pos:position pos:line="308" pos:column="45"/></name><operator pos:line="308" pos:column="45">.<pos:position pos:line="308" pos:column="46"/></operator><name pos:line="308" pos:column="46">url<pos:position pos:line="308" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="308" pos:column="51">protolen<pos:position pos:line="308" pos:column="59"/></name></expr></argument>)<pos:position pos:line="308" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="308" pos:column="61"/></condition><then pos:line="308" pos:column="61">
        <block type="pseudo"><expr_stmt><expr><name pos:line="309" pos:column="9">prefixlen<pos:position pos:line="309" pos:column="18"/></name> <operator pos:line="309" pos:column="19">+=<pos:position pos:line="309" pos:column="21"/></operator> <name pos:line="309" pos:column="22">protolen<pos:position pos:line="309" pos:column="30"/></name></expr>;<pos:position pos:line="309" pos:column="31"/></expr_stmt></block></then>
      <else pos:line="310" pos:column="7">else <block pos:line="310" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="311" pos:column="9">failf<pos:position pos:line="311" pos:column="14"/></name><argument_list pos:line="311" pos:column="14">(<argument><expr><name pos:line="311" pos:column="15">data<pos:position pos:line="311" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="311" pos:column="21">"&lt;url&gt; malformed"<pos:position pos:line="311" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="311" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="40"/></expr_stmt>
        <return pos:line="312" pos:column="9">return <expr><name pos:line="312" pos:column="16">CURLE_URL_MALFORMAT<pos:position pos:line="312" pos:column="35"/></name></expr>;<pos:position pos:line="312" pos:column="36"/></return>
      }<pos:position pos:line="313" pos:column="8"/></block></else></if>

      <if pos:line="315" pos:column="7">if<condition pos:line="315" pos:column="9">(<expr><call><name pos:line="315" pos:column="10">curl_strnequal<pos:position pos:line="315" pos:column="24"/></name><argument_list pos:line="315" pos:column="24">(<argument><expr><literal type="string" pos:line="315" pos:column="25">"://"<pos:position pos:line="315" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="315" pos:column="32">&amp;<pos:position pos:line="315" pos:column="37"/></operator><name><name pos:line="315" pos:column="33">data<pos:position pos:line="315" pos:column="37"/></name><operator pos:line="315" pos:column="37">-&gt;<pos:position pos:line="315" pos:column="42"/></operator><name pos:line="315" pos:column="39">change<pos:position pos:line="315" pos:column="45"/></name><operator pos:line="315" pos:column="45">.<pos:position pos:line="315" pos:column="46"/></operator><name pos:line="315" pos:column="46">url<pos:position pos:line="315" pos:column="49"/></name><index pos:line="315" pos:column="49">[<expr><name pos:line="315" pos:column="50">protolen<pos:position pos:line="315" pos:column="58"/></name></expr>]<pos:position pos:line="315" pos:column="59"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="315" pos:column="61">3<pos:position pos:line="315" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="315" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="315" pos:column="64"/></condition><then pos:line="315" pos:column="64">
        <block type="pseudo"><expr_stmt><expr><name pos:line="316" pos:column="9">prefixlen<pos:position pos:line="316" pos:column="18"/></name> <operator pos:line="316" pos:column="19">+=<pos:position pos:line="316" pos:column="21"/></operator> <literal type="number" pos:line="316" pos:column="22">3<pos:position pos:line="316" pos:column="23"/></literal></expr>;<pos:position pos:line="316" pos:column="24"/></expr_stmt></block></then>
      <comment type="block" pos:line="317" pos:column="7">/* only file: is allowed to omit one or both slashes */</comment>
      <elseif pos:line="318" pos:column="7">else <if pos:line="318" pos:column="12">if<condition pos:line="318" pos:column="14">(<expr><call><name pos:line="318" pos:column="15">curl_strnequal<pos:position pos:line="318" pos:column="29"/></name><argument_list pos:line="318" pos:column="29">(<argument><expr><literal type="string" pos:line="318" pos:column="30">"file:"<pos:position pos:line="318" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="318" pos:column="39">data<pos:position pos:line="318" pos:column="43"/></name><operator pos:line="318" pos:column="43">-&gt;<pos:position pos:line="318" pos:column="48"/></operator><name pos:line="318" pos:column="45">change<pos:position pos:line="318" pos:column="51"/></name><operator pos:line="318" pos:column="51">.<pos:position pos:line="318" pos:column="52"/></operator><name pos:line="318" pos:column="52">url<pos:position pos:line="318" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="318" pos:column="57">5<pos:position pos:line="318" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="318" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="318" pos:column="60"/></condition><then pos:line="318" pos:column="60">
        <block type="pseudo"><expr_stmt><expr><name pos:line="319" pos:column="9">prefixlen<pos:position pos:line="319" pos:column="18"/></name> <operator pos:line="319" pos:column="19">+=<pos:position pos:line="319" pos:column="21"/></operator> <literal type="number" pos:line="319" pos:column="22">1<pos:position pos:line="319" pos:column="23"/></literal> <operator pos:line="319" pos:column="24">+<pos:position pos:line="319" pos:column="25"/></operator> <operator pos:line="319" pos:column="26">(<pos:position pos:line="319" pos:column="27"/></operator><name><name pos:line="319" pos:column="27">data<pos:position pos:line="319" pos:column="31"/></name><operator pos:line="319" pos:column="31">-&gt;<pos:position pos:line="319" pos:column="36"/></operator><name pos:line="319" pos:column="33">change<pos:position pos:line="319" pos:column="39"/></name><operator pos:line="319" pos:column="39">.<pos:position pos:line="319" pos:column="40"/></operator><name pos:line="319" pos:column="40">url<pos:position pos:line="319" pos:column="43"/></name><index pos:line="319" pos:column="43">[<expr><literal type="number" pos:line="319" pos:column="44">5<pos:position pos:line="319" pos:column="45"/></literal></expr>]<pos:position pos:line="319" pos:column="46"/></index></name> <operator pos:line="319" pos:column="47">==<pos:position pos:line="319" pos:column="49"/></operator> <literal type="char" pos:line="319" pos:column="50">'/'<pos:position pos:line="319" pos:column="53"/></literal><operator pos:line="319" pos:column="53">)<pos:position pos:line="319" pos:column="54"/></operator></expr>;<pos:position pos:line="319" pos:column="55"/></expr_stmt></block></then></if></elseif>
      <else pos:line="320" pos:column="7">else <block pos:line="320" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="321" pos:column="9">failf<pos:position pos:line="321" pos:column="14"/></name><argument_list pos:line="321" pos:column="14">(<argument><expr><name pos:line="321" pos:column="15">data<pos:position pos:line="321" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="321" pos:column="21">"&lt;url&gt; malformed"<pos:position pos:line="321" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="321" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="40"/></expr_stmt>
        <return pos:line="322" pos:column="9">return <expr><name pos:line="322" pos:column="16">CURLE_URL_MALFORMAT<pos:position pos:line="322" pos:column="35"/></name></expr>;<pos:position pos:line="322" pos:column="36"/></return>
      }<pos:position pos:line="323" pos:column="8"/></block></else></if>
    }<pos:position pos:line="324" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="326" pos:column="5">reurl<pos:position pos:line="326" pos:column="10"/></name> <operator pos:line="326" pos:column="11">=<pos:position pos:line="326" pos:column="12"/></operator> <call><name pos:line="326" pos:column="13">malloc<pos:position pos:line="326" pos:column="19"/></name><argument_list pos:line="326" pos:column="19">(<argument><expr><name pos:line="326" pos:column="20">prefixlen<pos:position pos:line="326" pos:column="29"/></name> <operator pos:line="326" pos:column="30">+<pos:position pos:line="326" pos:column="31"/></operator> <name pos:line="326" pos:column="32">plen<pos:position pos:line="326" pos:column="36"/></name> <operator pos:line="326" pos:column="37">+<pos:position pos:line="326" pos:column="38"/></operator> <literal type="number" pos:line="326" pos:column="39">1<pos:position pos:line="326" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="326" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="326" pos:column="42"/></expr_stmt>
    <if pos:line="327" pos:column="5">if<condition pos:line="327" pos:column="7">(<expr><operator pos:line="327" pos:column="8">!<pos:position pos:line="327" pos:column="9"/></operator><name pos:line="327" pos:column="9">reurl<pos:position pos:line="327" pos:column="14"/></name></expr>)<pos:position pos:line="327" pos:column="15"/></condition><then pos:line="327" pos:column="15">
      <block type="pseudo"><return pos:line="328" pos:column="7">return <expr><name pos:line="328" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="328" pos:column="33"/></name></expr>;<pos:position pos:line="328" pos:column="34"/></return></block></then></if>

    <comment type="block" pos:line="330" pos:column="5">/* copy the prefix */</comment>
    <expr_stmt><expr><call><name pos:line="331" pos:column="5">memcpy<pos:position pos:line="331" pos:column="11"/></name><argument_list pos:line="331" pos:column="11">(<argument><expr><name pos:line="331" pos:column="12">reurl<pos:position pos:line="331" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="331" pos:column="19">data<pos:position pos:line="331" pos:column="23"/></name><operator pos:line="331" pos:column="23">-&gt;<pos:position pos:line="331" pos:column="28"/></operator><name pos:line="331" pos:column="25">change<pos:position pos:line="331" pos:column="31"/></name><operator pos:line="331" pos:column="31">.<pos:position pos:line="331" pos:column="32"/></operator><name pos:line="331" pos:column="32">url<pos:position pos:line="331" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="331" pos:column="37">prefixlen<pos:position pos:line="331" pos:column="46"/></name></expr></argument>)<pos:position pos:line="331" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="331" pos:column="48"/></expr_stmt>

    <comment type="block" pos:line="333" pos:column="5">/* append the trailing piece + zerobyte */</comment>
    <expr_stmt><expr><call><name pos:line="334" pos:column="5">memcpy<pos:position pos:line="334" pos:column="11"/></name><argument_list pos:line="334" pos:column="11">(<argument><expr><operator pos:line="334" pos:column="12">&amp;<pos:position pos:line="334" pos:column="17"/></operator><name><name pos:line="334" pos:column="13">reurl<pos:position pos:line="334" pos:column="18"/></name><index pos:line="334" pos:column="18">[<expr><name pos:line="334" pos:column="19">prefixlen<pos:position pos:line="334" pos:column="28"/></name></expr>]<pos:position pos:line="334" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="334" pos:column="31">path<pos:position pos:line="334" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="334" pos:column="37">plen<pos:position pos:line="334" pos:column="41"/></name> <operator pos:line="334" pos:column="42">+<pos:position pos:line="334" pos:column="43"/></operator> <literal type="number" pos:line="334" pos:column="44">1<pos:position pos:line="334" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="334" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="334" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="336" pos:column="5">/* possible free the old one */</comment>
    <if pos:line="337" pos:column="5">if<condition pos:line="337" pos:column="7">(<expr><name><name pos:line="337" pos:column="8">data<pos:position pos:line="337" pos:column="12"/></name><operator pos:line="337" pos:column="12">-&gt;<pos:position pos:line="337" pos:column="17"/></operator><name pos:line="337" pos:column="14">change<pos:position pos:line="337" pos:column="20"/></name><operator pos:line="337" pos:column="20">.<pos:position pos:line="337" pos:column="21"/></operator><name pos:line="337" pos:column="21">url_alloc<pos:position pos:line="337" pos:column="30"/></name></name></expr>)<pos:position pos:line="337" pos:column="31"/></condition><then pos:line="337" pos:column="31"> <block pos:line="337" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="338" pos:column="7">Curl_safefree<pos:position pos:line="338" pos:column="20"/></name><argument_list pos:line="338" pos:column="20">(<argument><expr><name><name pos:line="338" pos:column="21">data<pos:position pos:line="338" pos:column="25"/></name><operator pos:line="338" pos:column="25">-&gt;<pos:position pos:line="338" pos:column="30"/></operator><name pos:line="338" pos:column="27">change<pos:position pos:line="338" pos:column="33"/></name><operator pos:line="338" pos:column="33">.<pos:position pos:line="338" pos:column="34"/></operator><name pos:line="338" pos:column="34">url<pos:position pos:line="338" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="338" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="338" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="339" pos:column="7">data<pos:position pos:line="339" pos:column="11"/></name><operator pos:line="339" pos:column="11">-&gt;<pos:position pos:line="339" pos:column="16"/></operator><name pos:line="339" pos:column="13">change<pos:position pos:line="339" pos:column="19"/></name><operator pos:line="339" pos:column="19">.<pos:position pos:line="339" pos:column="20"/></operator><name pos:line="339" pos:column="20">url_alloc<pos:position pos:line="339" pos:column="29"/></name></name> <operator pos:line="339" pos:column="30">=<pos:position pos:line="339" pos:column="31"/></operator> <name pos:line="339" pos:column="32">FALSE<pos:position pos:line="339" pos:column="37"/></name></expr>;<pos:position pos:line="339" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="340" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="342" pos:column="5">infof<pos:position pos:line="342" pos:column="10"/></name><argument_list pos:line="342" pos:column="10">(<argument><expr><name pos:line="342" pos:column="11">data<pos:position pos:line="342" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="342" pos:column="17">"Rebuilt URL to: %s\n"<pos:position pos:line="342" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="342" pos:column="41">reurl<pos:position pos:line="342" pos:column="46"/></name></expr></argument>)<pos:position pos:line="342" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="342" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="344" pos:column="5">data<pos:position pos:line="344" pos:column="9"/></name><operator pos:line="344" pos:column="9">-&gt;<pos:position pos:line="344" pos:column="14"/></operator><name pos:line="344" pos:column="11">change<pos:position pos:line="344" pos:column="17"/></name><operator pos:line="344" pos:column="17">.<pos:position pos:line="344" pos:column="18"/></operator><name pos:line="344" pos:column="18">url<pos:position pos:line="344" pos:column="21"/></name></name> <operator pos:line="344" pos:column="22">=<pos:position pos:line="344" pos:column="23"/></operator> <name pos:line="344" pos:column="24">reurl<pos:position pos:line="344" pos:column="29"/></name></expr>;<pos:position pos:line="344" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="345" pos:column="5">data<pos:position pos:line="345" pos:column="9"/></name><operator pos:line="345" pos:column="9">-&gt;<pos:position pos:line="345" pos:column="14"/></operator><name pos:line="345" pos:column="11">change<pos:position pos:line="345" pos:column="17"/></name><operator pos:line="345" pos:column="17">.<pos:position pos:line="345" pos:column="18"/></operator><name pos:line="345" pos:column="18">url_alloc<pos:position pos:line="345" pos:column="27"/></name></name> <operator pos:line="345" pos:column="28">=<pos:position pos:line="345" pos:column="29"/></operator> <name pos:line="345" pos:column="30">TRUE<pos:position pos:line="345" pos:column="34"/></name></expr>;<pos:position pos:line="345" pos:column="35"/></expr_stmt> <comment type="block" pos:line="345" pos:column="36">/* free this later */</comment>
  }<pos:position pos:line="346" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="348" pos:column="3">result<pos:position pos:line="348" pos:column="9"/></name> <operator pos:line="348" pos:column="10">=<pos:position pos:line="348" pos:column="11"/></operator> <call><name pos:line="348" pos:column="12">findprotocol<pos:position pos:line="348" pos:column="24"/></name><argument_list pos:line="348" pos:column="24">(<argument><expr><name pos:line="348" pos:column="25">data<pos:position pos:line="348" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="348" pos:column="31">conn<pos:position pos:line="348" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="348" pos:column="37">protop<pos:position pos:line="348" pos:column="43"/></name></expr></argument>)<pos:position pos:line="348" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="348" pos:column="45"/></expr_stmt>
  <if pos:line="349" pos:column="3">if<condition pos:line="349" pos:column="5">(<expr><name pos:line="349" pos:column="6">result<pos:position pos:line="349" pos:column="12"/></name></expr>)<pos:position pos:line="349" pos:column="13"/></condition><then pos:line="349" pos:column="13">
    <block type="pseudo"><return pos:line="350" pos:column="5">return <expr><name pos:line="350" pos:column="12">result<pos:position pos:line="350" pos:column="18"/></name></expr>;<pos:position pos:line="350" pos:column="19"/></return></block></then></if>

  <comment type="block" pos:line="352" pos:column="3">/*
   * Parse the login details from the URL and strip them out of
   * the host name
   */</comment>
  <expr_stmt><expr><name pos:line="356" pos:column="3">result<pos:position pos:line="356" pos:column="9"/></name> <operator pos:line="356" pos:column="10">=<pos:position pos:line="356" pos:column="11"/></operator> <call><name pos:line="356" pos:column="12">parse_url_login<pos:position pos:line="356" pos:column="27"/></name><argument_list pos:line="356" pos:column="27">(<argument><expr><name pos:line="356" pos:column="28">data<pos:position pos:line="356" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="356" pos:column="34">conn<pos:position pos:line="356" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="356" pos:column="40">userp<pos:position pos:line="356" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="356" pos:column="47">passwdp<pos:position pos:line="356" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="356" pos:column="56">optionsp<pos:position pos:line="356" pos:column="64"/></name></expr></argument>)<pos:position pos:line="356" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="356" pos:column="66"/></expr_stmt>
  <if pos:line="357" pos:column="3">if<condition pos:line="357" pos:column="5">(<expr><name pos:line="357" pos:column="6">result<pos:position pos:line="357" pos:column="12"/></name></expr>)<pos:position pos:line="357" pos:column="13"/></condition><then pos:line="357" pos:column="13">
    <block type="pseudo"><return pos:line="358" pos:column="5">return <expr><name pos:line="358" pos:column="12">result<pos:position pos:line="358" pos:column="18"/></name></expr>;<pos:position pos:line="358" pos:column="19"/></return></block></then></if>

  <if pos:line="360" pos:column="3">if<condition pos:line="360" pos:column="5">(<expr><name><name pos:line="360" pos:column="6">conn<pos:position pos:line="360" pos:column="10"/></name><operator pos:line="360" pos:column="10">-&gt;<pos:position pos:line="360" pos:column="15"/></operator><name pos:line="360" pos:column="12">host<pos:position pos:line="360" pos:column="16"/></name><operator pos:line="360" pos:column="16">.<pos:position pos:line="360" pos:column="17"/></operator><name pos:line="360" pos:column="17">name<pos:position pos:line="360" pos:column="21"/></name><index pos:line="360" pos:column="21">[<expr><literal type="number" pos:line="360" pos:column="22">0<pos:position pos:line="360" pos:column="23"/></literal></expr>]<pos:position pos:line="360" pos:column="24"/></index></name> <operator pos:line="360" pos:column="25">==<pos:position pos:line="360" pos:column="27"/></operator> <literal type="char" pos:line="360" pos:column="28">'['<pos:position pos:line="360" pos:column="31"/></literal></expr>)<pos:position pos:line="360" pos:column="32"/></condition><then pos:line="360" pos:column="32"> <block pos:line="360" pos:column="33">{
    <comment type="block" pos:line="361" pos:column="5">/* This looks like an IPv6 address literal.  See if there is an address
       scope if there is no location header */</comment>
    <decl_stmt><decl><type><name pos:line="363" pos:column="5">char<pos:position pos:line="363" pos:column="9"/></name> <modifier pos:line="363" pos:column="10">*<pos:position pos:line="363" pos:column="11"/></modifier></type><name pos:line="363" pos:column="11">percent<pos:position pos:line="363" pos:column="18"/></name> <init pos:line="363" pos:column="19">= <expr><call><name pos:line="363" pos:column="21">strchr<pos:position pos:line="363" pos:column="27"/></name><argument_list pos:line="363" pos:column="27">(<argument><expr><name><name pos:line="363" pos:column="28">conn<pos:position pos:line="363" pos:column="32"/></name><operator pos:line="363" pos:column="32">-&gt;<pos:position pos:line="363" pos:column="37"/></operator><name pos:line="363" pos:column="34">host<pos:position pos:line="363" pos:column="38"/></name><operator pos:line="363" pos:column="38">.<pos:position pos:line="363" pos:column="39"/></operator><name pos:line="363" pos:column="39">name<pos:position pos:line="363" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="363" pos:column="45">'%'<pos:position pos:line="363" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="363" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="363" pos:column="50"/></decl_stmt>
    <if pos:line="364" pos:column="5">if<condition pos:line="364" pos:column="7">(<expr><name pos:line="364" pos:column="8">percent<pos:position pos:line="364" pos:column="15"/></name></expr>)<pos:position pos:line="364" pos:column="16"/></condition><then pos:line="364" pos:column="16"> <block pos:line="364" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="365" pos:column="7">unsigned<pos:position pos:line="365" pos:column="15"/></name> <name pos:line="365" pos:column="16">int<pos:position pos:line="365" pos:column="19"/></name></type> <name pos:line="365" pos:column="20">identifier_offset<pos:position pos:line="365" pos:column="37"/></name> <init pos:line="365" pos:column="38">= <expr><literal type="number" pos:line="365" pos:column="40">3<pos:position pos:line="365" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="365" pos:column="42"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="366" pos:column="7">char<pos:position pos:line="366" pos:column="11"/></name> <modifier pos:line="366" pos:column="12">*<pos:position pos:line="366" pos:column="13"/></modifier></type><name pos:line="366" pos:column="13">endp<pos:position pos:line="366" pos:column="17"/></name></decl>;<pos:position pos:line="366" pos:column="18"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="367" pos:column="7">unsigned<pos:position pos:line="367" pos:column="15"/></name> <name pos:line="367" pos:column="16">long<pos:position pos:line="367" pos:column="20"/></name></type> <name pos:line="367" pos:column="21">scope<pos:position pos:line="367" pos:column="26"/></name></decl>;<pos:position pos:line="367" pos:column="27"/></decl_stmt>
      <if pos:line="368" pos:column="7">if<condition pos:line="368" pos:column="9">(<expr><call><name pos:line="368" pos:column="10">strncmp<pos:position pos:line="368" pos:column="17"/></name><argument_list pos:line="368" pos:column="17">(<argument><expr><literal type="string" pos:line="368" pos:column="18">"%25"<pos:position pos:line="368" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="368" pos:column="25">percent<pos:position pos:line="368" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="368" pos:column="34">3<pos:position pos:line="368" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="368" pos:column="36"/></argument_list></call> <operator pos:line="368" pos:column="37">!=<pos:position pos:line="368" pos:column="39"/></operator> <literal type="number" pos:line="368" pos:column="40">0<pos:position pos:line="368" pos:column="41"/></literal></expr>)<pos:position pos:line="368" pos:column="42"/></condition><then pos:line="368" pos:column="42"> <block pos:line="368" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="369" pos:column="9">infof<pos:position pos:line="369" pos:column="14"/></name><argument_list pos:line="369" pos:column="14">(<argument><expr><name pos:line="369" pos:column="15">data<pos:position pos:line="369" pos:column="19"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="370" pos:column="15">"Please URL encode %% as %%25, see RFC 6874.\n"<pos:position pos:line="370" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="370" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="370" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><name pos:line="371" pos:column="9">identifier_offset<pos:position pos:line="371" pos:column="26"/></name> <operator pos:line="371" pos:column="27">=<pos:position pos:line="371" pos:column="28"/></operator> <literal type="number" pos:line="371" pos:column="29">1<pos:position pos:line="371" pos:column="30"/></literal></expr>;<pos:position pos:line="371" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="372" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="373" pos:column="7">scope<pos:position pos:line="373" pos:column="12"/></name> <operator pos:line="373" pos:column="13">=<pos:position pos:line="373" pos:column="14"/></operator> <call><name pos:line="373" pos:column="15">strtoul<pos:position pos:line="373" pos:column="22"/></name><argument_list pos:line="373" pos:column="22">(<argument><expr><name pos:line="373" pos:column="23">percent<pos:position pos:line="373" pos:column="30"/></name> <operator pos:line="373" pos:column="31">+<pos:position pos:line="373" pos:column="32"/></operator> <name pos:line="373" pos:column="33">identifier_offset<pos:position pos:line="373" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="373" pos:column="52">&amp;<pos:position pos:line="373" pos:column="57"/></operator><name pos:line="373" pos:column="53">endp<pos:position pos:line="373" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="373" pos:column="59">10<pos:position pos:line="373" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="373" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="63"/></expr_stmt>
      <if pos:line="374" pos:column="7">if<condition pos:line="374" pos:column="9">(<expr><operator pos:line="374" pos:column="10">*<pos:position pos:line="374" pos:column="11"/></operator><name pos:line="374" pos:column="11">endp<pos:position pos:line="374" pos:column="15"/></name> <operator pos:line="374" pos:column="16">==<pos:position pos:line="374" pos:column="18"/></operator> <literal type="char" pos:line="374" pos:column="19">']'<pos:position pos:line="374" pos:column="22"/></literal></expr>)<pos:position pos:line="374" pos:column="23"/></condition><then pos:line="374" pos:column="23"> <block pos:line="374" pos:column="24">{
        <comment type="block" pos:line="375" pos:column="9">/* The address scope was well formed.  Knock it out of the
           hostname. */</comment>
        <expr_stmt><expr><call><name pos:line="377" pos:column="9">memmove<pos:position pos:line="377" pos:column="16"/></name><argument_list pos:line="377" pos:column="16">(<argument><expr><name pos:line="377" pos:column="17">percent<pos:position pos:line="377" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="377" pos:column="26">endp<pos:position pos:line="377" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="377" pos:column="32">strlen<pos:position pos:line="377" pos:column="38"/></name><argument_list pos:line="377" pos:column="38">(<argument><expr><name pos:line="377" pos:column="39">endp<pos:position pos:line="377" pos:column="43"/></name></expr></argument>)<pos:position pos:line="377" pos:column="44"/></argument_list></call> <operator pos:line="377" pos:column="45">+<pos:position pos:line="377" pos:column="46"/></operator> <literal type="number" pos:line="377" pos:column="47">1<pos:position pos:line="377" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="377" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="377" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="378" pos:column="9">conn<pos:position pos:line="378" pos:column="13"/></name><operator pos:line="378" pos:column="13">-&gt;<pos:position pos:line="378" pos:column="18"/></operator><name pos:line="378" pos:column="15">scope_id<pos:position pos:line="378" pos:column="23"/></name></name> <operator pos:line="378" pos:column="24">=<pos:position pos:line="378" pos:column="25"/></operator> <operator pos:line="378" pos:column="26">(<pos:position pos:line="378" pos:column="27"/></operator><name pos:line="378" pos:column="27">unsigned<pos:position pos:line="378" pos:column="35"/></name> <name pos:line="378" pos:column="36">int<pos:position pos:line="378" pos:column="39"/></name><operator pos:line="378" pos:column="39">)<pos:position pos:line="378" pos:column="40"/></operator><name pos:line="378" pos:column="40">scope<pos:position pos:line="378" pos:column="45"/></name></expr>;<pos:position pos:line="378" pos:column="46"/></expr_stmt>
      }<pos:position pos:line="379" pos:column="8"/></block></then>
      <else pos:line="380" pos:column="7">else <block pos:line="380" pos:column="12">{
        <comment type="block" pos:line="381" pos:column="9">/* Zone identifier is not numeric */</comment>
<cpp:if pos:line="382" pos:column="1">#<cpp:directive pos:line="382" pos:column="2">if<pos:position pos:line="382" pos:column="4"/></cpp:directive> <expr><call><name pos:line="382" pos:column="5">defined<pos:position pos:line="382" pos:column="12"/></name><argument_list pos:line="382" pos:column="12">(<argument><expr><name pos:line="382" pos:column="13">HAVE_NET_IF_H<pos:position pos:line="382" pos:column="26"/></name></expr></argument>)<pos:position pos:line="382" pos:column="27"/></argument_list></call> <operator pos:line="382" pos:column="28">&amp;&amp;<pos:position pos:line="382" pos:column="38"/></operator> <call><name pos:line="382" pos:column="31">defined<pos:position pos:line="382" pos:column="38"/></name><argument_list pos:line="382" pos:column="38">(<argument><expr><name pos:line="382" pos:column="39">IFNAMSIZ<pos:position pos:line="382" pos:column="47"/></name></expr></argument>)<pos:position pos:line="382" pos:column="48"/></argument_list></call> <operator pos:line="382" pos:column="49">&amp;&amp;<pos:position pos:line="382" pos:column="59"/></operator> <call><name pos:line="382" pos:column="52">defined<pos:position pos:line="382" pos:column="59"/></name><argument_list pos:line="382" pos:column="59">(<argument><expr><name pos:line="382" pos:column="60">HAVE_IF_NAMETOINDEX<pos:position pos:line="382" pos:column="79"/></name></expr></argument>)<pos:position pos:line="382" pos:column="80"/></argument_list></call></expr></cpp:if>
        <decl_stmt><decl><type><name pos:line="383" pos:column="9">char<pos:position pos:line="383" pos:column="13"/></name></type> <name><name pos:line="383" pos:column="14">ifname<pos:position pos:line="383" pos:column="20"/></name><index pos:line="383" pos:column="20">[<expr><name pos:line="383" pos:column="21">IFNAMSIZ<pos:position pos:line="383" pos:column="29"/></name> <operator pos:line="383" pos:column="30">+<pos:position pos:line="383" pos:column="31"/></operator> <literal type="number" pos:line="383" pos:column="32">2<pos:position pos:line="383" pos:column="33"/></literal></expr>]<pos:position pos:line="383" pos:column="34"/></index></name></decl>;<pos:position pos:line="383" pos:column="35"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="384" pos:column="9">char<pos:position pos:line="384" pos:column="13"/></name> <modifier pos:line="384" pos:column="14">*<pos:position pos:line="384" pos:column="15"/></modifier></type><name pos:line="384" pos:column="15">square_bracket<pos:position pos:line="384" pos:column="29"/></name></decl>;<pos:position pos:line="384" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="385" pos:column="9">unsigned<pos:position pos:line="385" pos:column="17"/></name> <name pos:line="385" pos:column="18">int<pos:position pos:line="385" pos:column="21"/></name></type> <name pos:line="385" pos:column="22">scopeidx<pos:position pos:line="385" pos:column="30"/></name> <init pos:line="385" pos:column="31">= <expr><literal type="number" pos:line="385" pos:column="33">0<pos:position pos:line="385" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="385" pos:column="35"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="386" pos:column="9">strncpy<pos:position pos:line="386" pos:column="16"/></name><argument_list pos:line="386" pos:column="16">(<argument><expr><name pos:line="386" pos:column="17">ifname<pos:position pos:line="386" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="386" pos:column="25">percent<pos:position pos:line="386" pos:column="32"/></name> <operator pos:line="386" pos:column="33">+<pos:position pos:line="386" pos:column="34"/></operator> <name pos:line="386" pos:column="35">identifier_offset<pos:position pos:line="386" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="386" pos:column="54">IFNAMSIZ<pos:position pos:line="386" pos:column="62"/></name> <operator pos:line="386" pos:column="63">+<pos:position pos:line="386" pos:column="64"/></operator> <literal type="number" pos:line="386" pos:column="65">2<pos:position pos:line="386" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="386" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="386" pos:column="68"/></expr_stmt>
        <comment type="block" pos:line="387" pos:column="9">/* Ensure nullbyte termination */</comment>
        <expr_stmt><expr><name><name pos:line="388" pos:column="9">ifname<pos:position pos:line="388" pos:column="15"/></name><index pos:line="388" pos:column="15">[<expr><name pos:line="388" pos:column="16">IFNAMSIZ<pos:position pos:line="388" pos:column="24"/></name> <operator pos:line="388" pos:column="25">+<pos:position pos:line="388" pos:column="26"/></operator> <literal type="number" pos:line="388" pos:column="27">1<pos:position pos:line="388" pos:column="28"/></literal></expr>]<pos:position pos:line="388" pos:column="29"/></index></name> <operator pos:line="388" pos:column="30">=<pos:position pos:line="388" pos:column="31"/></operator> <literal type="char" pos:line="388" pos:column="32">'\0'<pos:position pos:line="388" pos:column="36"/></literal></expr>;<pos:position pos:line="388" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="389" pos:column="9">square_bracket<pos:position pos:line="389" pos:column="23"/></name> <operator pos:line="389" pos:column="24">=<pos:position pos:line="389" pos:column="25"/></operator> <call><name pos:line="389" pos:column="26">strchr<pos:position pos:line="389" pos:column="32"/></name><argument_list pos:line="389" pos:column="32">(<argument><expr><name pos:line="389" pos:column="33">ifname<pos:position pos:line="389" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="389" pos:column="41">']'<pos:position pos:line="389" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="389" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="46"/></expr_stmt>
        <if pos:line="390" pos:column="9">if<condition pos:line="390" pos:column="11">(<expr><name pos:line="390" pos:column="12">square_bracket<pos:position pos:line="390" pos:column="26"/></name></expr>)<pos:position pos:line="390" pos:column="27"/></condition><then pos:line="390" pos:column="27"> <block pos:line="390" pos:column="28">{
          <comment type="block" pos:line="391" pos:column="11">/* Remove ']' */</comment>
          <expr_stmt><expr><operator pos:line="392" pos:column="11">*<pos:position pos:line="392" pos:column="12"/></operator><name pos:line="392" pos:column="12">square_bracket<pos:position pos:line="392" pos:column="26"/></name> <operator pos:line="392" pos:column="27">=<pos:position pos:line="392" pos:column="28"/></operator> <literal type="char" pos:line="392" pos:column="29">'\0'<pos:position pos:line="392" pos:column="33"/></literal></expr>;<pos:position pos:line="392" pos:column="34"/></expr_stmt>
          <expr_stmt><expr><name pos:line="393" pos:column="11">scopeidx<pos:position pos:line="393" pos:column="19"/></name> <operator pos:line="393" pos:column="20">=<pos:position pos:line="393" pos:column="21"/></operator> <call><name pos:line="393" pos:column="22">if_nametoindex<pos:position pos:line="393" pos:column="36"/></name><argument_list pos:line="393" pos:column="36">(<argument><expr><name pos:line="393" pos:column="37">ifname<pos:position pos:line="393" pos:column="43"/></name></expr></argument>)<pos:position pos:line="393" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="393" pos:column="45"/></expr_stmt>
          <if pos:line="394" pos:column="11">if<condition pos:line="394" pos:column="13">(<expr><name pos:line="394" pos:column="14">scopeidx<pos:position pos:line="394" pos:column="22"/></name> <operator pos:line="394" pos:column="23">==<pos:position pos:line="394" pos:column="25"/></operator> <literal type="number" pos:line="394" pos:column="26">0<pos:position pos:line="394" pos:column="27"/></literal></expr>)<pos:position pos:line="394" pos:column="28"/></condition><then pos:line="394" pos:column="28"> <block pos:line="394" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="395" pos:column="13">infof<pos:position pos:line="395" pos:column="18"/></name><argument_list pos:line="395" pos:column="18">(<argument><expr><name pos:line="395" pos:column="19">data<pos:position pos:line="395" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="395" pos:column="25">"Invalid network interface: %s; %s\n"<pos:position pos:line="395" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="395" pos:column="64">ifname<pos:position pos:line="395" pos:column="70"/></name></expr></argument>,
                  <argument><expr><call><name pos:line="396" pos:column="19">strerror<pos:position pos:line="396" pos:column="27"/></name><argument_list pos:line="396" pos:column="27">(<argument><expr><name pos:line="396" pos:column="28">errno<pos:position pos:line="396" pos:column="33"/></name></expr></argument>)<pos:position pos:line="396" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="396" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="396" pos:column="36"/></expr_stmt>
          }<pos:position pos:line="397" pos:column="12"/></block></then></if>
        }<pos:position pos:line="398" pos:column="10"/></block></then></if>
        <if pos:line="399" pos:column="9">if<condition pos:line="399" pos:column="11">(<expr><name pos:line="399" pos:column="12">scopeidx<pos:position pos:line="399" pos:column="20"/></name> <operator pos:line="399" pos:column="21">&gt;<pos:position pos:line="399" pos:column="25"/></operator> <literal type="number" pos:line="399" pos:column="23">0<pos:position pos:line="399" pos:column="24"/></literal></expr>)<pos:position pos:line="399" pos:column="25"/></condition><then pos:line="399" pos:column="25"> <block pos:line="399" pos:column="26">{
          <decl_stmt><decl><type><name pos:line="400" pos:column="11">char<pos:position pos:line="400" pos:column="15"/></name> <modifier pos:line="400" pos:column="16">*<pos:position pos:line="400" pos:column="17"/></modifier></type><name pos:line="400" pos:column="17">p<pos:position pos:line="400" pos:column="18"/></name> <init pos:line="400" pos:column="19">= <expr><name pos:line="400" pos:column="21">percent<pos:position pos:line="400" pos:column="28"/></name> <operator pos:line="400" pos:column="29">+<pos:position pos:line="400" pos:column="30"/></operator> <name pos:line="400" pos:column="31">identifier_offset<pos:position pos:line="400" pos:column="48"/></name> <operator pos:line="400" pos:column="49">+<pos:position pos:line="400" pos:column="50"/></operator> <call><name pos:line="400" pos:column="51">strlen<pos:position pos:line="400" pos:column="57"/></name><argument_list pos:line="400" pos:column="57">(<argument><expr><name pos:line="400" pos:column="58">ifname<pos:position pos:line="400" pos:column="64"/></name></expr></argument>)<pos:position pos:line="400" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="400" pos:column="66"/></decl_stmt>

          <comment type="block" pos:line="402" pos:column="11">/* Remove zone identifier from hostname */</comment>
          <expr_stmt><expr><call><name pos:line="403" pos:column="11">memmove<pos:position pos:line="403" pos:column="18"/></name><argument_list pos:line="403" pos:column="18">(<argument><expr><name pos:line="403" pos:column="19">percent<pos:position pos:line="403" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="403" pos:column="28">p<pos:position pos:line="403" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="403" pos:column="31">strlen<pos:position pos:line="403" pos:column="37"/></name><argument_list pos:line="403" pos:column="37">(<argument><expr><name pos:line="403" pos:column="38">p<pos:position pos:line="403" pos:column="39"/></name></expr></argument>)<pos:position pos:line="403" pos:column="40"/></argument_list></call> <operator pos:line="403" pos:column="41">+<pos:position pos:line="403" pos:column="42"/></operator> <literal type="number" pos:line="403" pos:column="43">1<pos:position pos:line="403" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="403" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="403" pos:column="46"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="404" pos:column="11">conn<pos:position pos:line="404" pos:column="15"/></name><operator pos:line="404" pos:column="15">-&gt;<pos:position pos:line="404" pos:column="20"/></operator><name pos:line="404" pos:column="17">scope_id<pos:position pos:line="404" pos:column="25"/></name></name> <operator pos:line="404" pos:column="26">=<pos:position pos:line="404" pos:column="27"/></operator> <name pos:line="404" pos:column="28">scopeidx<pos:position pos:line="404" pos:column="36"/></name></expr>;<pos:position pos:line="404" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="405" pos:column="10"/></block></then>
        <else pos:line="406" pos:column="9">else
<cpp:endif pos:line="407" pos:column="1">#<cpp:directive pos:line="407" pos:column="2">endif<pos:position pos:line="407" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="407" pos:column="8">/* HAVE_NET_IF_H &amp;&amp; IFNAMSIZ */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="408" pos:column="11">infof<pos:position pos:line="408" pos:column="16"/></name><argument_list pos:line="408" pos:column="16">(<argument><expr><name pos:line="408" pos:column="17">data<pos:position pos:line="408" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="408" pos:column="23">"Invalid IPv6 address format\n"<pos:position pos:line="408" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="408" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="408" pos:column="56"/></expr_stmt></block></else></if>
      }<pos:position pos:line="409" pos:column="8"/></block></else></if>
    }<pos:position pos:line="410" pos:column="6"/></block></then></if>
  }<pos:position pos:line="411" pos:column="4"/></block></then></if>

  <if pos:line="413" pos:column="3">if<condition pos:line="413" pos:column="5">(<expr><name><name pos:line="413" pos:column="6">data<pos:position pos:line="413" pos:column="10"/></name><operator pos:line="413" pos:column="10">-&gt;<pos:position pos:line="413" pos:column="15"/></operator><name pos:line="413" pos:column="12">set<pos:position pos:line="413" pos:column="15"/></name><operator pos:line="413" pos:column="15">.<pos:position pos:line="413" pos:column="16"/></operator><name pos:line="413" pos:column="16">scope_id<pos:position pos:line="413" pos:column="24"/></name></name></expr>)<pos:position pos:line="413" pos:column="25"/></condition><then pos:line="413" pos:column="25">
    <comment type="block" pos:line="414" pos:column="5">/* Override any scope that was set above.  */</comment>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="415" pos:column="5">conn<pos:position pos:line="415" pos:column="9"/></name><operator pos:line="415" pos:column="9">-&gt;<pos:position pos:line="415" pos:column="14"/></operator><name pos:line="415" pos:column="11">scope_id<pos:position pos:line="415" pos:column="19"/></name></name> <operator pos:line="415" pos:column="20">=<pos:position pos:line="415" pos:column="21"/></operator> <name><name pos:line="415" pos:column="22">data<pos:position pos:line="415" pos:column="26"/></name><operator pos:line="415" pos:column="26">-&gt;<pos:position pos:line="415" pos:column="31"/></operator><name pos:line="415" pos:column="28">set<pos:position pos:line="415" pos:column="31"/></name><operator pos:line="415" pos:column="31">.<pos:position pos:line="415" pos:column="32"/></operator><name pos:line="415" pos:column="32">scope_id<pos:position pos:line="415" pos:column="40"/></name></name></expr>;<pos:position pos:line="415" pos:column="41"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="417" pos:column="3">/* Remove the fragment part of the path. Per RFC 2396, this is always the
     last part of the URI. We are looking for the first '#' so that we deal
     gracefully with non conformant URI such as http://example.com#foo#bar. */</comment>
  <expr_stmt><expr><name pos:line="420" pos:column="3">fragment<pos:position pos:line="420" pos:column="11"/></name> <operator pos:line="420" pos:column="12">=<pos:position pos:line="420" pos:column="13"/></operator> <call><name pos:line="420" pos:column="14">strchr<pos:position pos:line="420" pos:column="20"/></name><argument_list pos:line="420" pos:column="20">(<argument><expr><name pos:line="420" pos:column="21">path<pos:position pos:line="420" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="420" pos:column="27">'#'<pos:position pos:line="420" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="420" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="420" pos:column="32"/></expr_stmt>
  <if pos:line="421" pos:column="3">if<condition pos:line="421" pos:column="5">(<expr><name pos:line="421" pos:column="6">fragment<pos:position pos:line="421" pos:column="14"/></name></expr>)<pos:position pos:line="421" pos:column="15"/></condition><then pos:line="421" pos:column="15"> <block pos:line="421" pos:column="16">{
    <expr_stmt><expr><operator pos:line="422" pos:column="5">*<pos:position pos:line="422" pos:column="6"/></operator><name pos:line="422" pos:column="6">fragment<pos:position pos:line="422" pos:column="14"/></name> <operator pos:line="422" pos:column="15">=<pos:position pos:line="422" pos:column="16"/></operator> <literal type="number" pos:line="422" pos:column="17">0<pos:position pos:line="422" pos:column="18"/></literal></expr>;<pos:position pos:line="422" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="424" pos:column="5">/* we know the path part ended with a fragment, so we know the full URL
       string does too and we need to cut it off from there so it isn't used
       over proxy */</comment>
    <expr_stmt><expr><name pos:line="427" pos:column="5">fragment<pos:position pos:line="427" pos:column="13"/></name> <operator pos:line="427" pos:column="14">=<pos:position pos:line="427" pos:column="15"/></operator> <call><name pos:line="427" pos:column="16">strchr<pos:position pos:line="427" pos:column="22"/></name><argument_list pos:line="427" pos:column="22">(<argument><expr><name><name pos:line="427" pos:column="23">data<pos:position pos:line="427" pos:column="27"/></name><operator pos:line="427" pos:column="27">-&gt;<pos:position pos:line="427" pos:column="32"/></operator><name pos:line="427" pos:column="29">change<pos:position pos:line="427" pos:column="35"/></name><operator pos:line="427" pos:column="35">.<pos:position pos:line="427" pos:column="36"/></operator><name pos:line="427" pos:column="36">url<pos:position pos:line="427" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="427" pos:column="41">'#'<pos:position pos:line="427" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="427" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="427" pos:column="46"/></expr_stmt>
    <if pos:line="428" pos:column="5">if<condition pos:line="428" pos:column="7">(<expr><name pos:line="428" pos:column="8">fragment<pos:position pos:line="428" pos:column="16"/></name></expr>)<pos:position pos:line="428" pos:column="17"/></condition><then pos:line="428" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="429" pos:column="7">*<pos:position pos:line="429" pos:column="8"/></operator><name pos:line="429" pos:column="8">fragment<pos:position pos:line="429" pos:column="16"/></name> <operator pos:line="429" pos:column="17">=<pos:position pos:line="429" pos:column="18"/></operator> <literal type="number" pos:line="429" pos:column="19">0<pos:position pos:line="429" pos:column="20"/></literal></expr>;<pos:position pos:line="429" pos:column="21"/></expr_stmt></block></then></if>
  }<pos:position pos:line="430" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="432" pos:column="3">/*
   * So if the URL was A://B/C#D,
   *   protop is A
   *   conn-&gt;host.name is B
   *   data-&gt;state.path is /C
   */</comment>
  <return pos:line="438" pos:column="3">return <expr><name pos:line="438" pos:column="10">CURLE_OK<pos:position pos:line="438" pos:column="18"/></name></expr>;<pos:position pos:line="438" pos:column="19"/></return>
}<pos:position pos:line="439" pos:column="2"/></block></function></unit>
