<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2147_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">Curl_move_handle_from_send_to_recv_pipe<pos:position pos:line="1" pos:column="45"/></name><parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">Curl_easy<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">handle<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
                                             <parameter><decl><type><name><name pos:line="2" pos:column="46">struct<pos:position pos:line="2" pos:column="52"/></name> <name pos:line="2" pos:column="53">connectdata<pos:position pos:line="2" pos:column="64"/></name></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">conn<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">curl_llist_element<pos:position pos:line="4" pos:column="28"/></name></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">curr<pos:position pos:line="4" pos:column="34"/></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">curr<pos:position pos:line="6" pos:column="7"/></name> <operator pos:line="6" pos:column="8">=<pos:position pos:line="6" pos:column="9"/></operator> <name><name pos:line="6" pos:column="10">conn<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">send_pipe<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">.<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">head<pos:position pos:line="6" pos:column="30"/></name></name></expr>;<pos:position pos:line="6" pos:column="31"/></expr_stmt>
  <while pos:line="7" pos:column="3">while<condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">curr<pos:position pos:line="7" pos:column="13"/></name></expr>)<pos:position pos:line="7" pos:column="14"/></condition> <block pos:line="7" pos:column="15">{
    <if pos:line="8" pos:column="5">if<condition pos:line="8" pos:column="7">(<expr><name><name pos:line="8" pos:column="8">curr<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">ptr<pos:position pos:line="8" pos:column="17"/></name></name> <operator pos:line="8" pos:column="18">==<pos:position pos:line="8" pos:column="20"/></operator> <name pos:line="8" pos:column="21">handle<pos:position pos:line="8" pos:column="27"/></name></expr>)<pos:position pos:line="8" pos:column="28"/></condition><then pos:line="8" pos:column="28"> <block pos:line="8" pos:column="29">{
      <expr_stmt><expr><call><name pos:line="9" pos:column="7">Curl_llist_move<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><operator pos:line="9" pos:column="23">&amp;<pos:position pos:line="9" pos:column="28"/></operator><name><name pos:line="9" pos:column="24">conn<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">send_pipe<pos:position pos:line="9" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="41">curr<pos:position pos:line="9" pos:column="45"/></name></expr></argument>,
                      <argument><expr><operator pos:line="10" pos:column="23">&amp;<pos:position pos:line="10" pos:column="28"/></operator><name><name pos:line="10" pos:column="24">conn<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">-&gt;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="30">recv_pipe<pos:position pos:line="10" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="41">conn<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">-&gt;<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="47">recv_pipe<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">.<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="57">tail<pos:position pos:line="10" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="63"/></expr_stmt>

      <if pos:line="12" pos:column="7">if<condition pos:line="12" pos:column="9">(<expr><name><name pos:line="12" pos:column="10">conn<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">send_pipe<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">.<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">head<pos:position pos:line="12" pos:column="30"/></name></name></expr>)<pos:position pos:line="12" pos:column="31"/></condition><then pos:line="12" pos:column="31"> <block pos:line="12" pos:column="32">{
        <comment type="block" pos:line="13" pos:column="9">/* Since there's a new easy handle at the start of the send pipeline,
           set its timeout value to 1ms to make it trigger instantly */</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">Curl_pipeline_leave_write<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">conn<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt> <comment type="block" pos:line="15" pos:column="42">/* not used now */</comment>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">DEBUGBUILD<pos:position pos:line="16" pos:column="18"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">infof<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name><name pos:line="17" pos:column="15">conn<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="21">data<pos:position pos:line="17" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="27">"%p is at send pipe head B!\n"<pos:position pos:line="17" pos:column="57"/></literal></expr></argument>,
              <argument><expr><operator pos:line="18" pos:column="15">(<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">void<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><operator pos:line="18" pos:column="22">)<pos:position pos:line="18" pos:column="23"/></operator><name><name pos:line="18" pos:column="23">conn<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">-&gt;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="29">send_pipe<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">.<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="39">head<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">-&gt;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="45">ptr<pos:position pos:line="18" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">Curl_expire<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name><name pos:line="20" pos:column="21">conn<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">-&gt;<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="27">send_pipe<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">.<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="37">head<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">-&gt;<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="43">ptr<pos:position pos:line="20" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="48">0<pos:position pos:line="20" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="51">EXPIRE_RUN_NOW<pos:position pos:line="20" pos:column="65"/></name></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="67"/></expr_stmt>
      }<pos:position pos:line="21" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="23" pos:column="7">/* The receiver's list is not really interesting here since either this
         handle is now first in the list and we'll deal with it soon, or
         another handle is already first and thus is already taken care of */</comment>

      <break pos:line="27" pos:column="7">break;<pos:position pos:line="27" pos:column="13"/></break> <comment type="block" pos:line="27" pos:column="14">/* we're done! */</comment>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="29" pos:column="5">curr<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator> <name><name pos:line="29" pos:column="12">curr<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">next<pos:position pos:line="29" pos:column="22"/></name></name></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></while>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
