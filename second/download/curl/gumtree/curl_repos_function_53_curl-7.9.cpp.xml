<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_53_curl-7.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">Transfer<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name><name pos:line="2" pos:column="10">struct<pos:position pos:line="2" pos:column="16"/></name> <name pos:line="2" pos:column="17">connectdata<pos:position pos:line="2" pos:column="28"/></name></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">c_conn<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ssize_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">nread<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>                <comment type="block" pos:line="4" pos:column="33">/* number of bytes read */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">bytecount<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>            <comment type="block" pos:line="5" pos:column="33">/* total number of bytes read */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">writebytecount<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>       <comment type="block" pos:line="6" pos:column="33">/* number of bytes written */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">long<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">contentlength<pos:position pos:line="7" pos:column="21"/></name><init pos:line="7" pos:column="21">=<expr><literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>         <comment type="block" pos:line="7" pos:column="33">/* size of incoming data */</comment>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">timeval<pos:position pos:line="8" pos:column="17"/></name></name></type> <name pos:line="8" pos:column="18">start<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><call><name pos:line="8" pos:column="26">Curl_tvnow<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">()<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">timeval<pos:position pos:line="9" pos:column="17"/></name></name></type> <name pos:line="9" pos:column="18">now<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name pos:line="9" pos:column="24">start<pos:position pos:line="9" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>   <comment type="block" pos:line="9" pos:column="33">/* current time */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">header<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><name pos:line="10" pos:column="17">TRUE<pos:position pos:line="10" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>		<comment type="block" pos:line="10" pos:column="33">/* incoming data has HTTP header */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">headerline<pos:position pos:line="11" pos:column="17"/></name> <init pos:line="11" pos:column="18">= <expr><literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>		<comment type="block" pos:line="11" pos:column="33">/* counts header lines to better track the
                                   first one */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name> <modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type><name pos:line="13" pos:column="9">hbufp<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>			<comment type="block" pos:line="13" pos:column="33">/* points at *end* of header line */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">hbuflen<pos:position pos:line="14" pos:column="14"/></name> <init pos:line="14" pos:column="15">= <expr><literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">str<pos:position pos:line="15" pos:column="12"/></name></decl>;<pos:position pos:line="15" pos:column="13"/></decl_stmt>			<comment type="block" pos:line="15" pos:column="33">/* within buf */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">char<pos:position pos:line="16" pos:column="7"/></name> <modifier pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></modifier></type><name pos:line="16" pos:column="9">str_start<pos:position pos:line="16" pos:column="18"/></name></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>		<comment type="block" pos:line="16" pos:column="33">/* within buf */</comment>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name> <modifier pos:line="17" pos:column="8">*<pos:position pos:line="17" pos:column="9"/></modifier></type><name pos:line="17" pos:column="9">end_ptr<pos:position pos:line="17" pos:column="16"/></name></decl>;<pos:position pos:line="17" pos:column="17"/></decl_stmt>		<comment type="block" pos:line="17" pos:column="33">/* within buf */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name> <modifier pos:line="18" pos:column="8">*<pos:position pos:line="18" pos:column="9"/></modifier></type><name pos:line="18" pos:column="9">p<pos:position pos:line="18" pos:column="10"/></name></decl>;<pos:position pos:line="18" pos:column="11"/></decl_stmt>			<comment type="block" pos:line="18" pos:column="33">/* within headerbuff */</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">bool<pos:position pos:line="19" pos:column="7"/></name></type> <name pos:line="19" pos:column="8">content_range<pos:position pos:line="19" pos:column="21"/></name> <init pos:line="19" pos:column="22">= <expr><name pos:line="19" pos:column="24">FALSE<pos:position pos:line="19" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="30"/></decl_stmt>	<comment type="block" pos:line="19" pos:column="33">/* set TRUE if Content-Range: was found */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">offset<pos:position pos:line="20" pos:column="13"/></name> <init pos:line="20" pos:column="14">= <expr><literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="18"/></decl_stmt>		<comment type="block" pos:line="20" pos:column="33">/* possible resume offset read from the
                                   Content-Range: header */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">int<pos:position pos:line="22" pos:column="6"/></name></type> <name pos:line="22" pos:column="7">httpcode<pos:position pos:line="22" pos:column="15"/></name> <init pos:line="22" pos:column="16">= <expr><literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="20"/></decl_stmt>		<comment type="block" pos:line="22" pos:column="33">/* error code from the 'HTTP/1.? XXX' line */</comment>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">int<pos:position pos:line="23" pos:column="6"/></name></type> <name pos:line="23" pos:column="7">httpversion<pos:position pos:line="23" pos:column="18"/></name> <init pos:line="23" pos:column="19">= <expr><operator pos:line="23" pos:column="21">-<pos:position pos:line="23" pos:column="22"/></operator><literal type="number" pos:line="23" pos:column="22">1<pos:position pos:line="23" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="24"/></decl_stmt>			<comment type="block" pos:line="23" pos:column="41">/* the HTTP version*10 */</comment>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">bool<pos:position pos:line="24" pos:column="7"/></name></type> <name pos:line="24" pos:column="8">write_after_100_header<pos:position pos:line="24" pos:column="30"/></name> <init pos:line="24" pos:column="31">= <expr><name pos:line="24" pos:column="33">FALSE<pos:position pos:line="24" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="39"/></decl_stmt>  <comment type="block" pos:line="24" pos:column="41">/* should we enable the write after
                                           we received a 100-continue/timeout
                                           or directly */</comment>

  <comment type="block" pos:line="28" pos:column="3">/* for the low speed checks: */</comment>
  <decl_stmt><decl><type><name pos:line="29" pos:column="3">CURLcode<pos:position pos:line="29" pos:column="11"/></name></type> <name pos:line="29" pos:column="12">urg<pos:position pos:line="29" pos:column="15"/></name></decl>;<pos:position pos:line="29" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="30" pos:column="3">time_t<pos:position pos:line="30" pos:column="9"/></name></type> <name pos:line="30" pos:column="10">timeofdoc<pos:position pos:line="30" pos:column="19"/></name><init pos:line="30" pos:column="19">=<expr><literal type="number" pos:line="30" pos:column="20">0<pos:position pos:line="30" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="30" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="31" pos:column="3">long<pos:position pos:line="31" pos:column="7"/></name></type> <name pos:line="31" pos:column="8">bodywrites<pos:position pos:line="31" pos:column="18"/></name><init pos:line="31" pos:column="18">=<expr><literal type="number" pos:line="31" pos:column="19">0<pos:position pos:line="31" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="31" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="32" pos:column="3">int<pos:position pos:line="32" pos:column="6"/></name></type> <name pos:line="32" pos:column="7">writetype<pos:position pos:line="32" pos:column="16"/></name></decl>;<pos:position pos:line="32" pos:column="17"/></decl_stmt>

  <comment type="block" pos:line="34" pos:column="3">/* the highest fd we use + 1 */</comment>
  <decl_stmt><decl><type><name><name pos:line="35" pos:column="3">struct<pos:position pos:line="35" pos:column="9"/></name> <name pos:line="35" pos:column="10">SessionHandle<pos:position pos:line="35" pos:column="23"/></name></name> <modifier pos:line="35" pos:column="24">*<pos:position pos:line="35" pos:column="25"/></modifier></type><name pos:line="35" pos:column="25">data<pos:position pos:line="35" pos:column="29"/></name></decl>;<pos:position pos:line="35" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="36" pos:column="3">struct<pos:position pos:line="36" pos:column="9"/></name> <name pos:line="36" pos:column="10">connectdata<pos:position pos:line="36" pos:column="21"/></name></name> <modifier pos:line="36" pos:column="22">*<pos:position pos:line="36" pos:column="23"/></modifier></type><name pos:line="36" pos:column="23">conn<pos:position pos:line="36" pos:column="27"/></name> <init pos:line="36" pos:column="28">= <expr><operator pos:line="36" pos:column="30">(<pos:position pos:line="36" pos:column="31"/></operator>struct <name pos:line="36" pos:column="38">connectdata<pos:position pos:line="36" pos:column="49"/></name> <operator pos:line="36" pos:column="50">*<pos:position pos:line="36" pos:column="51"/></operator><operator pos:line="36" pos:column="51">)<pos:position pos:line="36" pos:column="52"/></operator><name pos:line="36" pos:column="52">c_conn<pos:position pos:line="36" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="36" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="37" pos:column="3">char<pos:position pos:line="37" pos:column="7"/></name> <modifier pos:line="37" pos:column="8">*<pos:position pos:line="37" pos:column="9"/></modifier></type><name pos:line="37" pos:column="9">buf<pos:position pos:line="37" pos:column="12"/></name></decl>;<pos:position pos:line="37" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="38" pos:column="3">int<pos:position pos:line="38" pos:column="6"/></name></type> <name pos:line="38" pos:column="7">maxfd<pos:position pos:line="38" pos:column="12"/></name></decl>;<pos:position pos:line="38" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="40" pos:column="3">data<pos:position pos:line="40" pos:column="7"/></name> <operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator> <name><name pos:line="40" pos:column="10">conn<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">-&gt;<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="16">data<pos:position pos:line="40" pos:column="20"/></name></name></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt> <comment type="block" pos:line="40" pos:column="22">/* there's the root struct */</comment>
  <expr_stmt><expr><name pos:line="41" pos:column="3">buf<pos:position pos:line="41" pos:column="6"/></name> <operator pos:line="41" pos:column="7">=<pos:position pos:line="41" pos:column="8"/></operator> <name><name pos:line="41" pos:column="9">data<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">-&gt;<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="15">state<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">.<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="21">buffer<pos:position pos:line="41" pos:column="27"/></name></name></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="42" pos:column="3">maxfd<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <operator pos:line="42" pos:column="11">(<pos:position pos:line="42" pos:column="12"/></operator><ternary><condition><expr><name><name pos:line="42" pos:column="12">conn<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">sockfd<pos:position pos:line="42" pos:column="24"/></name></name><operator pos:line="42" pos:column="24">&gt;<pos:position pos:line="42" pos:column="28"/></operator><name><name pos:line="42" pos:column="25">conn<pos:position pos:line="42" pos:column="29"/></name><operator pos:line="42" pos:column="29">-&gt;<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="31">writesockfd<pos:position pos:line="42" pos:column="42"/></name></name></expr>?<pos:position pos:line="42" pos:column="43"/></condition><then><expr><name><name pos:line="42" pos:column="43">conn<pos:position pos:line="42" pos:column="47"/></name><operator pos:line="42" pos:column="47">-&gt;<pos:position pos:line="42" pos:column="52"/></operator><name pos:line="42" pos:column="49">sockfd<pos:position pos:line="42" pos:column="55"/></name></name></expr></then><else pos:line="42" pos:column="55">:<expr><name><name pos:line="42" pos:column="56">conn<pos:position pos:line="42" pos:column="60"/></name><operator pos:line="42" pos:column="60">-&gt;<pos:position pos:line="42" pos:column="65"/></operator><name pos:line="42" pos:column="62">writesockfd<pos:position pos:line="42" pos:column="73"/></name></name></expr></else></ternary><operator pos:line="42" pos:column="73">)<pos:position pos:line="42" pos:column="74"/></operator><operator pos:line="42" pos:column="74">+<pos:position pos:line="42" pos:column="75"/></operator><literal type="number" pos:line="42" pos:column="75">1<pos:position pos:line="42" pos:column="76"/></literal></expr>;<pos:position pos:line="42" pos:column="77"/></expr_stmt>

  <expr_stmt><expr><name pos:line="44" pos:column="3">hbufp<pos:position pos:line="44" pos:column="8"/></name> <operator pos:line="44" pos:column="9">=<pos:position pos:line="44" pos:column="10"/></operator> <name><name pos:line="44" pos:column="11">data<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">state<pos:position pos:line="44" pos:column="22"/></name><operator pos:line="44" pos:column="22">.<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="23">headerbuff<pos:position pos:line="44" pos:column="33"/></name></name></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="46" pos:column="3">myalarm<pos:position pos:line="46" pos:column="10"/></name> <argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="number" pos:line="46" pos:column="12">0<pos:position pos:line="46" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="15"/></expr_stmt>			<comment type="block" pos:line="46" pos:column="33">/* switch off the alarm-style timeout */</comment>

  <expr_stmt><expr><name pos:line="48" pos:column="3">now<pos:position pos:line="48" pos:column="6"/></name> <operator pos:line="48" pos:column="7">=<pos:position pos:line="48" pos:column="8"/></operator> <call><name pos:line="48" pos:column="9">Curl_tvnow<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">()<pos:position pos:line="48" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="49" pos:column="3">start<pos:position pos:line="49" pos:column="8"/></name> <operator pos:line="49" pos:column="9">=<pos:position pos:line="49" pos:column="10"/></operator> <name pos:line="49" pos:column="11">now<pos:position pos:line="49" pos:column="14"/></name></expr>;<pos:position pos:line="49" pos:column="15"/></expr_stmt>

<cpp:define pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">define<pos:position pos:line="51" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="51" pos:column="9">KEEP_READ<pos:position pos:line="51" pos:column="18"/></name></cpp:macro>  <cpp:value pos:line="51" pos:column="20">1<pos:position pos:line="51" pos:column="21"/></cpp:value></cpp:define>
<cpp:define pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">define<pos:position pos:line="52" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="52" pos:column="9">KEEP_WRITE<pos:position pos:line="52" pos:column="19"/></name></cpp:macro> <cpp:value pos:line="52" pos:column="20">2<pos:position pos:line="52" pos:column="21"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="54" pos:column="3">Curl_pgrsTime<pos:position pos:line="54" pos:column="16"/></name><argument_list pos:line="54" pos:column="16">(<argument><expr><name pos:line="54" pos:column="17">data<pos:position pos:line="54" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="23">TIMER_PRETRANSFER<pos:position pos:line="54" pos:column="40"/></name></expr></argument>)<pos:position pos:line="54" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="55" pos:column="3">Curl_speedinit<pos:position pos:line="55" pos:column="17"/></name><argument_list pos:line="55" pos:column="17">(<argument><expr><name pos:line="55" pos:column="18">data<pos:position pos:line="55" pos:column="22"/></name></expr></argument>)<pos:position pos:line="55" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="24"/></expr_stmt>

  <if pos:line="57" pos:column="3">if<condition pos:line="57" pos:column="5">(<expr><operator pos:line="57" pos:column="6">(<pos:position pos:line="57" pos:column="7"/></operator><name><name pos:line="57" pos:column="7">conn<pos:position pos:line="57" pos:column="11"/></name><operator pos:line="57" pos:column="11">-&gt;<pos:position pos:line="57" pos:column="16"/></operator><name pos:line="57" pos:column="13">sockfd<pos:position pos:line="57" pos:column="19"/></name></name> <operator pos:line="57" pos:column="20">==<pos:position pos:line="57" pos:column="22"/></operator> <operator pos:line="57" pos:column="23">-<pos:position pos:line="57" pos:column="24"/></operator><literal type="number" pos:line="57" pos:column="24">1<pos:position pos:line="57" pos:column="25"/></literal><operator pos:line="57" pos:column="25">)<pos:position pos:line="57" pos:column="26"/></operator> <operator pos:line="57" pos:column="27">&amp;&amp;<pos:position pos:line="57" pos:column="37"/></operator>
     <operator pos:line="58" pos:column="6">(<pos:position pos:line="58" pos:column="7"/></operator><name><name pos:line="58" pos:column="7">conn<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">-&gt;<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="13">writesockfd<pos:position pos:line="58" pos:column="24"/></name></name> <operator pos:line="58" pos:column="25">==<pos:position pos:line="58" pos:column="27"/></operator> <operator pos:line="58" pos:column="28">-<pos:position pos:line="58" pos:column="29"/></operator><literal type="number" pos:line="58" pos:column="29">1<pos:position pos:line="58" pos:column="30"/></literal><operator pos:line="58" pos:column="30">)<pos:position pos:line="58" pos:column="31"/></operator></expr>)<pos:position pos:line="58" pos:column="32"/></condition><then pos:line="58" pos:column="32"> <block pos:line="58" pos:column="33">{
    <comment type="block" pos:line="59" pos:column="5">/* nothing to read, nothing to write, we're already OK! */</comment>
    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">CURLE_OK<pos:position pos:line="60" pos:column="20"/></name></expr>;<pos:position pos:line="60" pos:column="21"/></return>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if>

  <if pos:line="63" pos:column="3">if <condition pos:line="63" pos:column="6">(<expr><operator pos:line="63" pos:column="7">!<pos:position pos:line="63" pos:column="8"/></operator><name><name pos:line="63" pos:column="8">conn<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">-&gt;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="14">getheader<pos:position pos:line="63" pos:column="23"/></name></name></expr>)<pos:position pos:line="63" pos:column="24"/></condition><then pos:line="63" pos:column="24"> <block pos:line="63" pos:column="25">{
    <expr_stmt><expr><name pos:line="64" pos:column="5">header<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <name pos:line="64" pos:column="14">FALSE<pos:position pos:line="64" pos:column="19"/></name></expr>;<pos:position pos:line="64" pos:column="20"/></expr_stmt>
    <if pos:line="65" pos:column="5">if<condition pos:line="65" pos:column="7">(<expr><name><name pos:line="65" pos:column="8">conn<pos:position pos:line="65" pos:column="12"/></name><operator pos:line="65" pos:column="12">-&gt;<pos:position pos:line="65" pos:column="17"/></operator><name pos:line="65" pos:column="14">size<pos:position pos:line="65" pos:column="18"/></name></name> <operator pos:line="65" pos:column="19">&gt;<pos:position pos:line="65" pos:column="23"/></operator> <literal type="number" pos:line="65" pos:column="21">0<pos:position pos:line="65" pos:column="22"/></literal></expr>)<pos:position pos:line="65" pos:column="23"/></condition><then pos:line="65" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="7">Curl_pgrsSetDownloadSize<pos:position pos:line="66" pos:column="31"/></name><argument_list pos:line="66" pos:column="31">(<argument><expr><name pos:line="66" pos:column="32">data<pos:position pos:line="66" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="38">conn<pos:position pos:line="66" pos:column="42"/></name><operator pos:line="66" pos:column="42">-&gt;<pos:position pos:line="66" pos:column="47"/></operator><name pos:line="66" pos:column="44">size<pos:position pos:line="66" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="50"/></expr_stmt></block></then></if>
  }<pos:position pos:line="67" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="68" pos:column="3">/* we want header and/or body, if neither then don't do this! */</comment>
  <if pos:line="69" pos:column="3">if<condition pos:line="69" pos:column="5">(<expr><name><name pos:line="69" pos:column="6">conn<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">-&gt;<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="12">getheader<pos:position pos:line="69" pos:column="21"/></name></name> <operator pos:line="69" pos:column="22">||<pos:position pos:line="69" pos:column="24"/></operator>
     <operator pos:line="70" pos:column="6">!<pos:position pos:line="70" pos:column="7"/></operator><name><name pos:line="70" pos:column="7">data<pos:position pos:line="70" pos:column="11"/></name><operator pos:line="70" pos:column="11">-&gt;<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="13">set<pos:position pos:line="70" pos:column="16"/></name><operator pos:line="70" pos:column="16">.<pos:position pos:line="70" pos:column="17"/></operator><name pos:line="70" pos:column="17">no_body<pos:position pos:line="70" pos:column="24"/></name></name></expr>)<pos:position pos:line="70" pos:column="25"/></condition><then pos:line="70" pos:column="25"> <block pos:line="70" pos:column="26">{
    <decl_stmt><decl><type><name pos:line="71" pos:column="5">fd_set<pos:position pos:line="71" pos:column="11"/></name></type> <name pos:line="71" pos:column="12">readfd<pos:position pos:line="71" pos:column="18"/></name></decl>;<pos:position pos:line="71" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="72" pos:column="5">fd_set<pos:position pos:line="72" pos:column="11"/></name></type> <name pos:line="72" pos:column="12">writefd<pos:position pos:line="72" pos:column="19"/></name></decl>;<pos:position pos:line="72" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="73" pos:column="5">fd_set<pos:position pos:line="73" pos:column="11"/></name></type> <name pos:line="73" pos:column="12">rkeepfd<pos:position pos:line="73" pos:column="19"/></name></decl>;<pos:position pos:line="73" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="74" pos:column="5">fd_set<pos:position pos:line="74" pos:column="11"/></name></type> <name pos:line="74" pos:column="12">wkeepfd<pos:position pos:line="74" pos:column="19"/></name></decl>;<pos:position pos:line="74" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="75" pos:column="5">struct<pos:position pos:line="75" pos:column="11"/></name> <name pos:line="75" pos:column="12">timeval<pos:position pos:line="75" pos:column="19"/></name></name></type> <name pos:line="75" pos:column="20">interval<pos:position pos:line="75" pos:column="28"/></name></decl>;<pos:position pos:line="75" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">int<pos:position pos:line="76" pos:column="8"/></name></type> <name pos:line="76" pos:column="9">keepon<pos:position pos:line="76" pos:column="15"/></name><init pos:line="76" pos:column="15">=<expr><literal type="number" pos:line="76" pos:column="16">0<pos:position pos:line="76" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="76" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="78" pos:column="5">/* timeout every X second
       - makes a better progress meter (i.e even when no data is read, the
       meter can be updated and reflect reality)
       - allows removal of the alarm() crap
       - variable timeout is easier
     */</comment>

    <expr_stmt><expr><call><name pos:line="85" pos:column="5">FD_ZERO<pos:position pos:line="85" pos:column="12"/></name> <argument_list pos:line="85" pos:column="13">(<argument><expr><operator pos:line="85" pos:column="14">&amp;<pos:position pos:line="85" pos:column="19"/></operator><name pos:line="85" pos:column="15">readfd<pos:position pos:line="85" pos:column="21"/></name></expr></argument>)<pos:position pos:line="85" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="23"/></expr_stmt>		<comment type="block" pos:line="85" pos:column="33">/* clear it */</comment>
    <if pos:line="86" pos:column="5">if<condition pos:line="86" pos:column="7">(<expr><name><name pos:line="86" pos:column="8">conn<pos:position pos:line="86" pos:column="12"/></name><operator pos:line="86" pos:column="12">-&gt;<pos:position pos:line="86" pos:column="17"/></operator><name pos:line="86" pos:column="14">sockfd<pos:position pos:line="86" pos:column="20"/></name></name> <operator pos:line="86" pos:column="21">!=<pos:position pos:line="86" pos:column="23"/></operator> <operator pos:line="86" pos:column="24">-<pos:position pos:line="86" pos:column="25"/></operator><literal type="number" pos:line="86" pos:column="25">1<pos:position pos:line="86" pos:column="26"/></literal></expr>)<pos:position pos:line="86" pos:column="27"/></condition><then pos:line="86" pos:column="27"> <block pos:line="86" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">FD_SET<pos:position pos:line="87" pos:column="13"/></name> <argument_list pos:line="87" pos:column="14">(<argument><expr><name><name pos:line="87" pos:column="15">conn<pos:position pos:line="87" pos:column="19"/></name><operator pos:line="87" pos:column="19">-&gt;<pos:position pos:line="87" pos:column="24"/></operator><name pos:line="87" pos:column="21">sockfd<pos:position pos:line="87" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="29">&amp;<pos:position pos:line="87" pos:column="34"/></operator><name pos:line="87" pos:column="30">readfd<pos:position pos:line="87" pos:column="36"/></name></expr></argument>)<pos:position pos:line="87" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="38"/></expr_stmt> <comment type="block" pos:line="87" pos:column="39">/* read socket */</comment>
      <expr_stmt><expr><name pos:line="88" pos:column="7">keepon<pos:position pos:line="88" pos:column="13"/></name> <operator pos:line="88" pos:column="14">|=<pos:position pos:line="88" pos:column="16"/></operator> <name pos:line="88" pos:column="17">KEEP_READ<pos:position pos:line="88" pos:column="26"/></name></expr>;<pos:position pos:line="88" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="91" pos:column="5">FD_ZERO<pos:position pos:line="91" pos:column="12"/></name> <argument_list pos:line="91" pos:column="13">(<argument><expr><operator pos:line="91" pos:column="14">&amp;<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="15">writefd<pos:position pos:line="91" pos:column="22"/></name></expr></argument>)<pos:position pos:line="91" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="24"/></expr_stmt>		<comment type="block" pos:line="91" pos:column="33">/* clear it */</comment>
    <if pos:line="92" pos:column="5">if<condition pos:line="92" pos:column="7">(<expr><name><name pos:line="92" pos:column="8">conn<pos:position pos:line="92" pos:column="12"/></name><operator pos:line="92" pos:column="12">-&gt;<pos:position pos:line="92" pos:column="17"/></operator><name pos:line="92" pos:column="14">writesockfd<pos:position pos:line="92" pos:column="25"/></name></name> <operator pos:line="92" pos:column="26">!=<pos:position pos:line="92" pos:column="28"/></operator> <operator pos:line="92" pos:column="29">-<pos:position pos:line="92" pos:column="30"/></operator><literal type="number" pos:line="92" pos:column="30">1<pos:position pos:line="92" pos:column="31"/></literal></expr>)<pos:position pos:line="92" pos:column="32"/></condition><then pos:line="92" pos:column="32"> <block pos:line="92" pos:column="33">{
      <if pos:line="93" pos:column="7">if <condition pos:line="93" pos:column="10">(<expr><name><name pos:line="93" pos:column="11">data<pos:position pos:line="93" pos:column="15"/></name><operator pos:line="93" pos:column="15">-&gt;<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="17">set<pos:position pos:line="93" pos:column="20"/></name><operator pos:line="93" pos:column="20">.<pos:position pos:line="93" pos:column="21"/></operator><name pos:line="93" pos:column="21">expect100header<pos:position pos:line="93" pos:column="36"/></name></name></expr>)<pos:position pos:line="93" pos:column="37"/></condition><then pos:line="93" pos:column="37">
        <comment type="block" pos:line="94" pos:column="9">/* wait with write until we either got 100-continue or a timeout */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="95" pos:column="9">write_after_100_header<pos:position pos:line="95" pos:column="31"/></name> <operator pos:line="95" pos:column="32">=<pos:position pos:line="95" pos:column="33"/></operator> <name pos:line="95" pos:column="34">TRUE<pos:position pos:line="95" pos:column="38"/></name></expr>;<pos:position pos:line="95" pos:column="39"/></expr_stmt></block></then>
      <else pos:line="96" pos:column="7">else <block pos:line="96" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">FD_SET<pos:position pos:line="97" pos:column="15"/></name> <argument_list pos:line="97" pos:column="16">(<argument><expr><name><name pos:line="97" pos:column="17">conn<pos:position pos:line="97" pos:column="21"/></name><operator pos:line="97" pos:column="21">-&gt;<pos:position pos:line="97" pos:column="26"/></operator><name pos:line="97" pos:column="23">writesockfd<pos:position pos:line="97" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="36">&amp;<pos:position pos:line="97" pos:column="41"/></operator><name pos:line="97" pos:column="37">writefd<pos:position pos:line="97" pos:column="44"/></name></expr></argument>)<pos:position pos:line="97" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="46"/></expr_stmt> <comment type="block" pos:line="97" pos:column="47">/* write socket */</comment>
        <expr_stmt><expr><name pos:line="98" pos:column="9">keepon<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">|=<pos:position pos:line="98" pos:column="18"/></operator> <name pos:line="98" pos:column="19">KEEP_WRITE<pos:position pos:line="98" pos:column="29"/></name></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="99" pos:column="8"/></block></else></if>
    }<pos:position pos:line="100" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="102" pos:column="5">/* get these in backup variables to be able to restore them on each lap in
       the select() loop */</comment>
    <expr_stmt><expr><name pos:line="104" pos:column="5">rkeepfd<pos:position pos:line="104" pos:column="12"/></name> <operator pos:line="104" pos:column="13">=<pos:position pos:line="104" pos:column="14"/></operator> <name pos:line="104" pos:column="15">readfd<pos:position pos:line="104" pos:column="21"/></name></expr>;<pos:position pos:line="104" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="105" pos:column="5">wkeepfd<pos:position pos:line="105" pos:column="12"/></name> <operator pos:line="105" pos:column="13">=<pos:position pos:line="105" pos:column="14"/></operator> <name pos:line="105" pos:column="15">writefd<pos:position pos:line="105" pos:column="22"/></name></expr>;<pos:position pos:line="105" pos:column="23"/></expr_stmt>

    <while pos:line="107" pos:column="5">while <condition pos:line="107" pos:column="11">(<expr><name pos:line="107" pos:column="12">keepon<pos:position pos:line="107" pos:column="18"/></name></expr>)<pos:position pos:line="107" pos:column="19"/></condition> <block pos:line="107" pos:column="20">{
      <expr_stmt><expr><name pos:line="108" pos:column="7">readfd<pos:position pos:line="108" pos:column="13"/></name> <operator pos:line="108" pos:column="14">=<pos:position pos:line="108" pos:column="15"/></operator> <name pos:line="108" pos:column="16">rkeepfd<pos:position pos:line="108" pos:column="23"/></name></expr>;<pos:position pos:line="108" pos:column="24"/></expr_stmt>		<comment type="block" pos:line="108" pos:column="33">/* set those every lap in the loop */</comment>
      <expr_stmt><expr><name pos:line="109" pos:column="7">writefd<pos:position pos:line="109" pos:column="14"/></name> <operator pos:line="109" pos:column="15">=<pos:position pos:line="109" pos:column="16"/></operator> <name pos:line="109" pos:column="17">wkeepfd<pos:position pos:line="109" pos:column="24"/></name></expr>;<pos:position pos:line="109" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="110" pos:column="7">interval<pos:position pos:line="110" pos:column="15"/></name><operator pos:line="110" pos:column="15">.<pos:position pos:line="110" pos:column="16"/></operator><name pos:line="110" pos:column="16">tv_sec<pos:position pos:line="110" pos:column="22"/></name></name> <operator pos:line="110" pos:column="23">=<pos:position pos:line="110" pos:column="24"/></operator> <literal type="number" pos:line="110" pos:column="25">1<pos:position pos:line="110" pos:column="26"/></literal></expr>;<pos:position pos:line="110" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="111" pos:column="7">interval<pos:position pos:line="111" pos:column="15"/></name><operator pos:line="111" pos:column="15">.<pos:position pos:line="111" pos:column="16"/></operator><name pos:line="111" pos:column="16">tv_usec<pos:position pos:line="111" pos:column="23"/></name></name> <operator pos:line="111" pos:column="24">=<pos:position pos:line="111" pos:column="25"/></operator> <literal type="number" pos:line="111" pos:column="26">0<pos:position pos:line="111" pos:column="27"/></literal></expr>;<pos:position pos:line="111" pos:column="28"/></expr_stmt>

      <switch pos:line="113" pos:column="7">switch <condition pos:line="113" pos:column="14">(<expr><call><name pos:line="113" pos:column="15">select<pos:position pos:line="113" pos:column="21"/></name> <argument_list pos:line="113" pos:column="22">(<argument><expr><name pos:line="113" pos:column="23">maxfd<pos:position pos:line="113" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="30">&amp;<pos:position pos:line="113" pos:column="35"/></operator><name pos:line="113" pos:column="31">readfd<pos:position pos:line="113" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="39">&amp;<pos:position pos:line="113" pos:column="44"/></operator><name pos:line="113" pos:column="40">writefd<pos:position pos:line="113" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="49">NULL<pos:position pos:line="113" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="55">&amp;<pos:position pos:line="113" pos:column="60"/></operator><name pos:line="113" pos:column="56">interval<pos:position pos:line="113" pos:column="64"/></name></expr></argument>)<pos:position pos:line="113" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="66"/></condition> <block pos:line="113" pos:column="67">{
      <case pos:line="114" pos:column="7">case <expr><operator pos:line="114" pos:column="12">-<pos:position pos:line="114" pos:column="13"/></operator><literal type="number" pos:line="114" pos:column="13">1<pos:position pos:line="114" pos:column="14"/></literal></expr>:<pos:position pos:line="114" pos:column="15"/></case>			<comment type="block" pos:line="114" pos:column="33">/* select() error, stop reading */</comment>
<cpp:ifdef pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">ifdef<pos:position pos:line="115" pos:column="7"/></cpp:directive> <name pos:line="115" pos:column="8">EINTR<pos:position pos:line="115" pos:column="13"/></name></cpp:ifdef>
        <comment type="block" pos:line="116" pos:column="9">/* The EINTR is not serious, and it seems you might get this more
           ofen when using the lib in a multi-threaded environment! */</comment>
        <if pos:line="118" pos:column="9">if<condition pos:line="118" pos:column="11">(<expr><name pos:line="118" pos:column="12">errno<pos:position pos:line="118" pos:column="17"/></name> <operator pos:line="118" pos:column="18">==<pos:position pos:line="118" pos:column="20"/></operator> <name pos:line="118" pos:column="21">EINTR<pos:position pos:line="118" pos:column="26"/></name></expr>)<pos:position pos:line="118" pos:column="27"/></condition><then pos:line="118" pos:column="27">
          <block type="pseudo"><empty_stmt pos:line="119" pos:column="11">;<pos:position pos:line="119" pos:column="12"/></empty_stmt></block></then>
        <else pos:line="120" pos:column="9">else
<cpp:endif pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">endif<pos:position pos:line="121" pos:column="7"/></cpp:directive></cpp:endif>
          <block type="pseudo"><expr_stmt><expr><name pos:line="122" pos:column="11">keepon<pos:position pos:line="122" pos:column="17"/></name> <operator pos:line="122" pos:column="18">=<pos:position pos:line="122" pos:column="19"/></operator> <literal type="number" pos:line="122" pos:column="20">0<pos:position pos:line="122" pos:column="21"/></literal></expr>;<pos:position pos:line="122" pos:column="22"/></expr_stmt></block></else></if> <comment type="block" pos:line="122" pos:column="23">/* no more read or write */</comment>
	<continue pos:line="123" pos:column="9">continue;<pos:position pos:line="123" pos:column="18"/></continue>
      <case pos:line="124" pos:column="7">case <expr><literal type="number" pos:line="124" pos:column="12">0<pos:position pos:line="124" pos:column="13"/></literal></expr>:<pos:position pos:line="124" pos:column="14"/></case>			<comment type="block" pos:line="124" pos:column="33">/* timeout */</comment>
        <if pos:line="125" pos:column="9">if <condition pos:line="125" pos:column="12">(<expr><name pos:line="125" pos:column="13">write_after_100_header<pos:position pos:line="125" pos:column="35"/></name></expr>)<pos:position pos:line="125" pos:column="36"/></condition><then pos:line="125" pos:column="36"> <block pos:line="125" pos:column="37">{
          <expr_stmt><expr><name pos:line="126" pos:column="11">write_after_100_header<pos:position pos:line="126" pos:column="33"/></name> <operator pos:line="126" pos:column="34">=<pos:position pos:line="126" pos:column="35"/></operator> <name pos:line="126" pos:column="36">FALSE<pos:position pos:line="126" pos:column="41"/></name></expr>;<pos:position pos:line="126" pos:column="42"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="127" pos:column="11">FD_SET<pos:position pos:line="127" pos:column="17"/></name> <argument_list pos:line="127" pos:column="18">(<argument><expr><name><name pos:line="127" pos:column="19">conn<pos:position pos:line="127" pos:column="23"/></name><operator pos:line="127" pos:column="23">-&gt;<pos:position pos:line="127" pos:column="28"/></operator><name pos:line="127" pos:column="25">writesockfd<pos:position pos:line="127" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="38">&amp;<pos:position pos:line="127" pos:column="43"/></operator><name pos:line="127" pos:column="39">writefd<pos:position pos:line="127" pos:column="46"/></name></expr></argument>)<pos:position pos:line="127" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="48"/></expr_stmt> <comment type="block" pos:line="127" pos:column="49">/* write socket */</comment>
          <expr_stmt><expr><name pos:line="128" pos:column="11">keepon<pos:position pos:line="128" pos:column="17"/></name> <operator pos:line="128" pos:column="18">|=<pos:position pos:line="128" pos:column="20"/></operator> <name pos:line="128" pos:column="21">KEEP_WRITE<pos:position pos:line="128" pos:column="31"/></name></expr>;<pos:position pos:line="128" pos:column="32"/></expr_stmt>
          <expr_stmt><expr><name pos:line="129" pos:column="11">wkeepfd<pos:position pos:line="129" pos:column="18"/></name> <operator pos:line="129" pos:column="19">=<pos:position pos:line="129" pos:column="20"/></operator> <name pos:line="129" pos:column="21">writefd<pos:position pos:line="129" pos:column="28"/></name></expr>;<pos:position pos:line="129" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="130" pos:column="10"/></block></then></if>
	<break pos:line="131" pos:column="9">break;<pos:position pos:line="131" pos:column="15"/></break>
      <default pos:line="132" pos:column="7">default:<pos:position pos:line="132" pos:column="15"/></default>
        <if pos:line="133" pos:column="9">if<condition pos:line="133" pos:column="11">(<expr><operator pos:line="133" pos:column="12">(<pos:position pos:line="133" pos:column="13"/></operator><name pos:line="133" pos:column="13">keepon<pos:position pos:line="133" pos:column="19"/></name> <operator pos:line="133" pos:column="20">&amp;<pos:position pos:line="133" pos:column="25"/></operator> <name pos:line="133" pos:column="22">KEEP_READ<pos:position pos:line="133" pos:column="31"/></name><operator pos:line="133" pos:column="31">)<pos:position pos:line="133" pos:column="32"/></operator> <operator pos:line="133" pos:column="33">&amp;&amp;<pos:position pos:line="133" pos:column="43"/></operator> <call><name pos:line="133" pos:column="36">FD_ISSET<pos:position pos:line="133" pos:column="44"/></name><argument_list pos:line="133" pos:column="44">(<argument><expr><name><name pos:line="133" pos:column="45">conn<pos:position pos:line="133" pos:column="49"/></name><operator pos:line="133" pos:column="49">-&gt;<pos:position pos:line="133" pos:column="54"/></operator><name pos:line="133" pos:column="51">sockfd<pos:position pos:line="133" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="133" pos:column="59">&amp;<pos:position pos:line="133" pos:column="64"/></operator><name pos:line="133" pos:column="60">readfd<pos:position pos:line="133" pos:column="66"/></name></expr></argument>)<pos:position pos:line="133" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="68"/></condition><then pos:line="133" pos:column="68"> <block pos:line="133" pos:column="69">{
          <comment type="block" pos:line="134" pos:column="11">/* read! */</comment>
          <expr_stmt><expr><name pos:line="135" pos:column="11">urg<pos:position pos:line="135" pos:column="14"/></name> <operator pos:line="135" pos:column="15">=<pos:position pos:line="135" pos:column="16"/></operator> <call><name pos:line="135" pos:column="17">Curl_read<pos:position pos:line="135" pos:column="26"/></name><argument_list pos:line="135" pos:column="26">(<argument><expr><name pos:line="135" pos:column="27">conn<pos:position pos:line="135" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="33">conn<pos:position pos:line="135" pos:column="37"/></name><operator pos:line="135" pos:column="37">-&gt;<pos:position pos:line="135" pos:column="42"/></operator><name pos:line="135" pos:column="39">sockfd<pos:position pos:line="135" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="47">buf<pos:position pos:line="135" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="52">BUFSIZE<pos:position pos:line="135" pos:column="59"/></name> <operator pos:line="135" pos:column="60">-<pos:position pos:line="135" pos:column="61"/></operator><literal type="number" pos:line="135" pos:column="61">1<pos:position pos:line="135" pos:column="62"/></literal></expr></argument>, <argument><expr><operator pos:line="135" pos:column="64">&amp;<pos:position pos:line="135" pos:column="69"/></operator><name pos:line="135" pos:column="65">nread<pos:position pos:line="135" pos:column="70"/></name></expr></argument>)<pos:position pos:line="135" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="72"/></expr_stmt>

          <comment type="block" pos:line="137" pos:column="11">/* NULL terminate, allowing string ops to be used */</comment>
          <if pos:line="138" pos:column="11">if <condition pos:line="138" pos:column="14">(<expr><literal type="number" pos:line="138" pos:column="15">0<pos:position pos:line="138" pos:column="16"/></literal> <operator pos:line="138" pos:column="17">&lt;<pos:position pos:line="138" pos:column="21"/></operator> <operator pos:line="138" pos:column="19">(<pos:position pos:line="138" pos:column="20"/></operator><name pos:line="138" pos:column="20">signed<pos:position pos:line="138" pos:column="26"/></name> <name pos:line="138" pos:column="27">int<pos:position pos:line="138" pos:column="30"/></name><operator pos:line="138" pos:column="30">)<pos:position pos:line="138" pos:column="31"/></operator> <name pos:line="138" pos:column="32">nread<pos:position pos:line="138" pos:column="37"/></name></expr>)<pos:position pos:line="138" pos:column="38"/></condition><then pos:line="138" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="139" pos:column="13">buf<pos:position pos:line="139" pos:column="16"/></name><index pos:line="139" pos:column="16">[<expr><name pos:line="139" pos:column="17">nread<pos:position pos:line="139" pos:column="22"/></name></expr>]<pos:position pos:line="139" pos:column="23"/></index></name> <operator pos:line="139" pos:column="24">=<pos:position pos:line="139" pos:column="25"/></operator> <literal type="number" pos:line="139" pos:column="26">0<pos:position pos:line="139" pos:column="27"/></literal></expr>;<pos:position pos:line="139" pos:column="28"/></expr_stmt></block></then>

          <comment type="block" pos:line="141" pos:column="11">/* if we receive 0 or less here, the server closed the connection and
             we bail out from this! */</comment>
          <elseif pos:line="143" pos:column="11">else <if pos:line="143" pos:column="16">if <condition pos:line="143" pos:column="19">(<expr><literal type="number" pos:line="143" pos:column="20">0<pos:position pos:line="143" pos:column="21"/></literal> <operator pos:line="143" pos:column="22">&gt;=<pos:position pos:line="143" pos:column="27"/></operator> <operator pos:line="143" pos:column="25">(<pos:position pos:line="143" pos:column="26"/></operator><name pos:line="143" pos:column="26">signed<pos:position pos:line="143" pos:column="32"/></name> <name pos:line="143" pos:column="33">int<pos:position pos:line="143" pos:column="36"/></name><operator pos:line="143" pos:column="36">)<pos:position pos:line="143" pos:column="37"/></operator> <name pos:line="143" pos:column="38">nread<pos:position pos:line="143" pos:column="43"/></name></expr>)<pos:position pos:line="143" pos:column="44"/></condition><then pos:line="143" pos:column="44"> <block pos:line="143" pos:column="45">{
            <expr_stmt><expr><name pos:line="144" pos:column="13">keepon<pos:position pos:line="144" pos:column="19"/></name> <operator pos:line="144" pos:column="20">&amp;=<pos:position pos:line="144" pos:column="26"/></operator> <operator pos:line="144" pos:column="23">~<pos:position pos:line="144" pos:column="24"/></operator><name pos:line="144" pos:column="24">KEEP_READ<pos:position pos:line="144" pos:column="33"/></name></expr>;<pos:position pos:line="144" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="145" pos:column="13">FD_ZERO<pos:position pos:line="145" pos:column="20"/></name><argument_list pos:line="145" pos:column="20">(<argument><expr><operator pos:line="145" pos:column="21">&amp;<pos:position pos:line="145" pos:column="26"/></operator><name pos:line="145" pos:column="22">rkeepfd<pos:position pos:line="145" pos:column="29"/></name></expr></argument>)<pos:position pos:line="145" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="31"/></expr_stmt>
            <break pos:line="146" pos:column="13">break;<pos:position pos:line="146" pos:column="19"/></break>
          }<pos:position pos:line="147" pos:column="12"/></block></then></if></elseif></if>

          <expr_stmt><expr><name pos:line="149" pos:column="11">str<pos:position pos:line="149" pos:column="14"/></name> <operator pos:line="149" pos:column="15">=<pos:position pos:line="149" pos:column="16"/></operator> <name pos:line="149" pos:column="17">buf<pos:position pos:line="149" pos:column="20"/></name></expr>;<pos:position pos:line="149" pos:column="21"/></expr_stmt>		<comment type="block" pos:line="149" pos:column="33">/* Default buffer to use when we write the
                                   buffer, it may be changed in the flow below
                                   before the actual storing is done. */</comment>

          <comment type="block" pos:line="153" pos:column="11">/* Since this is a two-state thing, we check if we are parsing
             headers at the moment or not. */</comment>
          
          <if pos:line="156" pos:column="11">if <condition pos:line="156" pos:column="14">(<expr><name pos:line="156" pos:column="15">header<pos:position pos:line="156" pos:column="21"/></name></expr>)<pos:position pos:line="156" pos:column="22"/></condition><then pos:line="156" pos:column="22"> <block pos:line="156" pos:column="23">{
            <comment type="block" pos:line="157" pos:column="13">/* we are in parse-the-header-mode */</comment>

            <comment type="block" pos:line="159" pos:column="13">/* header line within buffer loop */</comment>
            <do pos:line="160" pos:column="13">do <block pos:line="160" pos:column="16">{
              <decl_stmt><decl><type><name pos:line="161" pos:column="15">int<pos:position pos:line="161" pos:column="18"/></name></type> <name pos:line="161" pos:column="19">hbufp_index<pos:position pos:line="161" pos:column="30"/></name></decl>;<pos:position pos:line="161" pos:column="31"/></decl_stmt>
              
              <expr_stmt><expr><name pos:line="163" pos:column="15">str_start<pos:position pos:line="163" pos:column="24"/></name> <operator pos:line="163" pos:column="25">=<pos:position pos:line="163" pos:column="26"/></operator> <name pos:line="163" pos:column="27">str<pos:position pos:line="163" pos:column="30"/></name></expr>;<pos:position pos:line="163" pos:column="31"/></expr_stmt>	<comment type="block" pos:line="163" pos:column="33">/* str_start is start of line within buf */</comment>
              
              <expr_stmt><expr><name pos:line="165" pos:column="15">end_ptr<pos:position pos:line="165" pos:column="22"/></name> <operator pos:line="165" pos:column="23">=<pos:position pos:line="165" pos:column="24"/></operator> <call><name pos:line="165" pos:column="25">strchr<pos:position pos:line="165" pos:column="31"/></name> <argument_list pos:line="165" pos:column="32">(<argument><expr><name pos:line="165" pos:column="33">str_start<pos:position pos:line="165" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="165" pos:column="44">'\n'<pos:position pos:line="165" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="50"/></expr_stmt>
              
              <if pos:line="167" pos:column="15">if <condition pos:line="167" pos:column="18">(<expr><operator pos:line="167" pos:column="19">!<pos:position pos:line="167" pos:column="20"/></operator><name pos:line="167" pos:column="20">end_ptr<pos:position pos:line="167" pos:column="27"/></name></expr>)<pos:position pos:line="167" pos:column="28"/></condition><then pos:line="167" pos:column="28"> <block pos:line="167" pos:column="29">{
                <comment type="block" pos:line="168" pos:column="17">/* no more complete header lines within buffer */</comment>
                <comment type="block" pos:line="169" pos:column="17">/* copy what is remaining into headerbuff */</comment>
                <decl_stmt><decl><type><name pos:line="170" pos:column="17">int<pos:position pos:line="170" pos:column="20"/></name></type> <name pos:line="170" pos:column="21">str_length<pos:position pos:line="170" pos:column="31"/></name> <init pos:line="170" pos:column="32">= <expr><operator pos:line="170" pos:column="34">(<pos:position pos:line="170" pos:column="35"/></operator><name pos:line="170" pos:column="35">int<pos:position pos:line="170" pos:column="38"/></name><operator pos:line="170" pos:column="38">)<pos:position pos:line="170" pos:column="39"/></operator><call><name pos:line="170" pos:column="39">strlen<pos:position pos:line="170" pos:column="45"/></name><argument_list pos:line="170" pos:column="45">(<argument><expr><name pos:line="170" pos:column="46">str<pos:position pos:line="170" pos:column="49"/></name></expr></argument>)<pos:position pos:line="170" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="170" pos:column="51"/></decl_stmt>

                <comment type="block" pos:line="172" pos:column="17">/*
                 * We enlarge the header buffer if it seems to be too
                 * smallish
                 */</comment>
                <if pos:line="176" pos:column="17">if <condition pos:line="176" pos:column="20">(<expr><name pos:line="176" pos:column="21">hbuflen<pos:position pos:line="176" pos:column="28"/></name> <operator pos:line="176" pos:column="29">+<pos:position pos:line="176" pos:column="30"/></operator> <operator pos:line="176" pos:column="31">(<pos:position pos:line="176" pos:column="32"/></operator><name pos:line="176" pos:column="32">int<pos:position pos:line="176" pos:column="35"/></name><operator pos:line="176" pos:column="35">)<pos:position pos:line="176" pos:column="36"/></operator><name pos:line="176" pos:column="36">str_length<pos:position pos:line="176" pos:column="46"/></name> <operator pos:line="176" pos:column="47">&gt;=<pos:position pos:line="176" pos:column="52"/></operator> <name><name pos:line="176" pos:column="50">data<pos:position pos:line="176" pos:column="54"/></name><operator pos:line="176" pos:column="54">-&gt;<pos:position pos:line="176" pos:column="59"/></operator><name pos:line="176" pos:column="56">state<pos:position pos:line="176" pos:column="61"/></name><operator pos:line="176" pos:column="61">.<pos:position pos:line="176" pos:column="62"/></operator><name pos:line="176" pos:column="62">headersize<pos:position pos:line="176" pos:column="72"/></name></name></expr>)<pos:position pos:line="176" pos:column="73"/></condition><then pos:line="176" pos:column="73"> <block pos:line="176" pos:column="74">{
                  <decl_stmt><decl><type><name pos:line="177" pos:column="19">char<pos:position pos:line="177" pos:column="23"/></name> <modifier pos:line="177" pos:column="24">*<pos:position pos:line="177" pos:column="25"/></modifier></type><name pos:line="177" pos:column="25">newbuff<pos:position pos:line="177" pos:column="32"/></name></decl>;<pos:position pos:line="177" pos:column="33"/></decl_stmt>
                  <decl_stmt><decl><type><name pos:line="178" pos:column="19">long<pos:position pos:line="178" pos:column="23"/></name></type> <name pos:line="178" pos:column="24">newsize<pos:position pos:line="178" pos:column="31"/></name><init pos:line="178" pos:column="31">=<expr><call><name pos:line="178" pos:column="32">MAX<pos:position pos:line="178" pos:column="35"/></name><argument_list pos:line="178" pos:column="35">(<argument><expr><operator pos:line="178" pos:column="36">(<pos:position pos:line="178" pos:column="37"/></operator><name pos:line="178" pos:column="37">hbuflen<pos:position pos:line="178" pos:column="44"/></name><operator pos:line="178" pos:column="44">+<pos:position pos:line="178" pos:column="45"/></operator><name pos:line="178" pos:column="45">str_length<pos:position pos:line="178" pos:column="55"/></name><operator pos:line="178" pos:column="55">)<pos:position pos:line="178" pos:column="56"/></operator><operator pos:line="178" pos:column="56">*<pos:position pos:line="178" pos:column="57"/></operator><literal type="number" pos:line="178" pos:column="57">3<pos:position pos:line="178" pos:column="58"/></literal><operator pos:line="178" pos:column="58">/<pos:position pos:line="178" pos:column="59"/></operator><literal type="number" pos:line="178" pos:column="59">2<pos:position pos:line="178" pos:column="60"/></literal></expr></argument>,
                                   <argument><expr><name><name pos:line="179" pos:column="36">data<pos:position pos:line="179" pos:column="40"/></name><operator pos:line="179" pos:column="40">-&gt;<pos:position pos:line="179" pos:column="45"/></operator><name pos:line="179" pos:column="42">state<pos:position pos:line="179" pos:column="47"/></name><operator pos:line="179" pos:column="47">.<pos:position pos:line="179" pos:column="48"/></operator><name pos:line="179" pos:column="48">headersize<pos:position pos:line="179" pos:column="58"/></name></name><operator pos:line="179" pos:column="58">*<pos:position pos:line="179" pos:column="59"/></operator><literal type="number" pos:line="179" pos:column="59">2<pos:position pos:line="179" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="179" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="179" pos:column="62"/></decl_stmt>
                  <expr_stmt><expr><name pos:line="180" pos:column="19">hbufp_index<pos:position pos:line="180" pos:column="30"/></name> <operator pos:line="180" pos:column="31">=<pos:position pos:line="180" pos:column="32"/></operator> <name pos:line="180" pos:column="33">hbufp<pos:position pos:line="180" pos:column="38"/></name> <operator pos:line="180" pos:column="39">-<pos:position pos:line="180" pos:column="40"/></operator> <name><name pos:line="180" pos:column="41">data<pos:position pos:line="180" pos:column="45"/></name><operator pos:line="180" pos:column="45">-&gt;<pos:position pos:line="180" pos:column="50"/></operator><name pos:line="180" pos:column="47">state<pos:position pos:line="180" pos:column="52"/></name><operator pos:line="180" pos:column="52">.<pos:position pos:line="180" pos:column="53"/></operator><name pos:line="180" pos:column="53">headerbuff<pos:position pos:line="180" pos:column="63"/></name></name></expr>;<pos:position pos:line="180" pos:column="64"/></expr_stmt>
                  <expr_stmt><expr><name pos:line="181" pos:column="19">newbuff<pos:position pos:line="181" pos:column="26"/></name> <operator pos:line="181" pos:column="27">=<pos:position pos:line="181" pos:column="28"/></operator> <operator pos:line="181" pos:column="29">(<pos:position pos:line="181" pos:column="30"/></operator><name pos:line="181" pos:column="30">char<pos:position pos:line="181" pos:column="34"/></name> <operator pos:line="181" pos:column="35">*<pos:position pos:line="181" pos:column="36"/></operator><operator pos:line="181" pos:column="36">)<pos:position pos:line="181" pos:column="37"/></operator><call><name pos:line="181" pos:column="37">realloc<pos:position pos:line="181" pos:column="44"/></name><argument_list pos:line="181" pos:column="44">(<argument><expr><name><name pos:line="181" pos:column="45">data<pos:position pos:line="181" pos:column="49"/></name><operator pos:line="181" pos:column="49">-&gt;<pos:position pos:line="181" pos:column="54"/></operator><name pos:line="181" pos:column="51">state<pos:position pos:line="181" pos:column="56"/></name><operator pos:line="181" pos:column="56">.<pos:position pos:line="181" pos:column="57"/></operator><name pos:line="181" pos:column="57">headerbuff<pos:position pos:line="181" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="69">newsize<pos:position pos:line="181" pos:column="76"/></name></expr></argument>)<pos:position pos:line="181" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="78"/></expr_stmt>
                  <if pos:line="182" pos:column="19">if<condition pos:line="182" pos:column="21">(<expr><operator pos:line="182" pos:column="22">!<pos:position pos:line="182" pos:column="23"/></operator><name pos:line="182" pos:column="23">newbuff<pos:position pos:line="182" pos:column="30"/></name></expr>)<pos:position pos:line="182" pos:column="31"/></condition><then pos:line="182" pos:column="31"> <block pos:line="182" pos:column="32">{
                    <expr_stmt><expr><call><name pos:line="183" pos:column="21">failf<pos:position pos:line="183" pos:column="26"/></name> <argument_list pos:line="183" pos:column="27">(<argument><expr><name pos:line="183" pos:column="28">data<pos:position pos:line="183" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="183" pos:column="34">"Failed to alloc memory for big header!"<pos:position pos:line="183" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="183" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="76"/></expr_stmt>
                    <return pos:line="184" pos:column="21">return <expr><name pos:line="184" pos:column="28">CURLE_READ_ERROR<pos:position pos:line="184" pos:column="44"/></name></expr>;<pos:position pos:line="184" pos:column="45"/></return>
                  }<pos:position pos:line="185" pos:column="20"/></block></then></if>
                  <expr_stmt><expr><name><name pos:line="186" pos:column="19">data<pos:position pos:line="186" pos:column="23"/></name><operator pos:line="186" pos:column="23">-&gt;<pos:position pos:line="186" pos:column="28"/></operator><name pos:line="186" pos:column="25">state<pos:position pos:line="186" pos:column="30"/></name><operator pos:line="186" pos:column="30">.<pos:position pos:line="186" pos:column="31"/></operator><name pos:line="186" pos:column="31">headersize<pos:position pos:line="186" pos:column="41"/></name></name><operator pos:line="186" pos:column="41">=<pos:position pos:line="186" pos:column="42"/></operator><name pos:line="186" pos:column="42">newsize<pos:position pos:line="186" pos:column="49"/></name></expr>;<pos:position pos:line="186" pos:column="50"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="187" pos:column="19">data<pos:position pos:line="187" pos:column="23"/></name><operator pos:line="187" pos:column="23">-&gt;<pos:position pos:line="187" pos:column="28"/></operator><name pos:line="187" pos:column="25">state<pos:position pos:line="187" pos:column="30"/></name><operator pos:line="187" pos:column="30">.<pos:position pos:line="187" pos:column="31"/></operator><name pos:line="187" pos:column="31">headerbuff<pos:position pos:line="187" pos:column="41"/></name></name> <operator pos:line="187" pos:column="42">=<pos:position pos:line="187" pos:column="43"/></operator> <name pos:line="187" pos:column="44">newbuff<pos:position pos:line="187" pos:column="51"/></name></expr>;<pos:position pos:line="187" pos:column="52"/></expr_stmt>
                  <expr_stmt><expr><name pos:line="188" pos:column="19">hbufp<pos:position pos:line="188" pos:column="24"/></name> <operator pos:line="188" pos:column="25">=<pos:position pos:line="188" pos:column="26"/></operator> <name><name pos:line="188" pos:column="27">data<pos:position pos:line="188" pos:column="31"/></name><operator pos:line="188" pos:column="31">-&gt;<pos:position pos:line="188" pos:column="36"/></operator><name pos:line="188" pos:column="33">state<pos:position pos:line="188" pos:column="38"/></name><operator pos:line="188" pos:column="38">.<pos:position pos:line="188" pos:column="39"/></operator><name pos:line="188" pos:column="39">headerbuff<pos:position pos:line="188" pos:column="49"/></name></name> <operator pos:line="188" pos:column="50">+<pos:position pos:line="188" pos:column="51"/></operator> <name pos:line="188" pos:column="52">hbufp_index<pos:position pos:line="188" pos:column="63"/></name></expr>;<pos:position pos:line="188" pos:column="64"/></expr_stmt>
                }<pos:position pos:line="189" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="190" pos:column="17">strcpy<pos:position pos:line="190" pos:column="23"/></name> <argument_list pos:line="190" pos:column="24">(<argument><expr><name pos:line="190" pos:column="25">hbufp<pos:position pos:line="190" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="32">str<pos:position pos:line="190" pos:column="35"/></name></expr></argument>)<pos:position pos:line="190" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name pos:line="191" pos:column="17">hbufp<pos:position pos:line="191" pos:column="22"/></name> <operator pos:line="191" pos:column="23">+=<pos:position pos:line="191" pos:column="25"/></operator> <call><name pos:line="191" pos:column="26">strlen<pos:position pos:line="191" pos:column="32"/></name> <argument_list pos:line="191" pos:column="33">(<argument><expr><name pos:line="191" pos:column="34">str<pos:position pos:line="191" pos:column="37"/></name></expr></argument>)<pos:position pos:line="191" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><name pos:line="192" pos:column="17">hbuflen<pos:position pos:line="192" pos:column="24"/></name> <operator pos:line="192" pos:column="25">+=<pos:position pos:line="192" pos:column="27"/></operator> <call><name pos:line="192" pos:column="28">strlen<pos:position pos:line="192" pos:column="34"/></name> <argument_list pos:line="192" pos:column="35">(<argument><expr><name pos:line="192" pos:column="36">str<pos:position pos:line="192" pos:column="39"/></name></expr></argument>)<pos:position pos:line="192" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="41"/></expr_stmt>
                <break pos:line="193" pos:column="17">break;<pos:position pos:line="193" pos:column="23"/></break>		<comment type="block" pos:line="193" pos:column="33">/* read more and try again */</comment>
              }<pos:position pos:line="194" pos:column="16"/></block></then></if>

              <expr_stmt><expr><name pos:line="196" pos:column="15">str<pos:position pos:line="196" pos:column="18"/></name> <operator pos:line="196" pos:column="19">=<pos:position pos:line="196" pos:column="20"/></operator> <name pos:line="196" pos:column="21">end_ptr<pos:position pos:line="196" pos:column="28"/></name> <operator pos:line="196" pos:column="29">+<pos:position pos:line="196" pos:column="30"/></operator> <literal type="number" pos:line="196" pos:column="31">1<pos:position pos:line="196" pos:column="32"/></literal></expr>;<pos:position pos:line="196" pos:column="33"/></expr_stmt>	<comment type="block" pos:line="196" pos:column="41">/* move just past new line */</comment>

              <comment type="block" pos:line="198" pos:column="15">/*
               * We're about to copy a chunk of data to the end of the
               * already received header. We make sure that the full string
               * fit in the allocated header buffer, or else we enlarge 
               * it.
               */</comment>
              <if pos:line="204" pos:column="15">if <condition pos:line="204" pos:column="18">(<expr><name pos:line="204" pos:column="19">hbuflen<pos:position pos:line="204" pos:column="26"/></name> <operator pos:line="204" pos:column="27">+<pos:position pos:line="204" pos:column="28"/></operator> <operator pos:line="204" pos:column="29">(<pos:position pos:line="204" pos:column="30"/></operator><name pos:line="204" pos:column="30">str<pos:position pos:line="204" pos:column="33"/></name> <operator pos:line="204" pos:column="34">-<pos:position pos:line="204" pos:column="35"/></operator> <name pos:line="204" pos:column="36">str_start<pos:position pos:line="204" pos:column="45"/></name><operator pos:line="204" pos:column="45">)<pos:position pos:line="204" pos:column="46"/></operator> <operator pos:line="204" pos:column="47">&gt;=<pos:position pos:line="204" pos:column="52"/></operator> <name><name pos:line="204" pos:column="50">data<pos:position pos:line="204" pos:column="54"/></name><operator pos:line="204" pos:column="54">-&gt;<pos:position pos:line="204" pos:column="59"/></operator><name pos:line="204" pos:column="56">state<pos:position pos:line="204" pos:column="61"/></name><operator pos:line="204" pos:column="61">.<pos:position pos:line="204" pos:column="62"/></operator><name pos:line="204" pos:column="62">headersize<pos:position pos:line="204" pos:column="72"/></name></name></expr>)<pos:position pos:line="204" pos:column="73"/></condition><then pos:line="204" pos:column="73"> <block pos:line="204" pos:column="74">{
                <decl_stmt><decl><type><name pos:line="205" pos:column="17">char<pos:position pos:line="205" pos:column="21"/></name> <modifier pos:line="205" pos:column="22">*<pos:position pos:line="205" pos:column="23"/></modifier></type><name pos:line="205" pos:column="23">newbuff<pos:position pos:line="205" pos:column="30"/></name></decl>;<pos:position pos:line="205" pos:column="31"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="206" pos:column="17">long<pos:position pos:line="206" pos:column="21"/></name></type> <name pos:line="206" pos:column="22">newsize<pos:position pos:line="206" pos:column="29"/></name><init pos:line="206" pos:column="29">=<expr><call><name pos:line="206" pos:column="30">MAX<pos:position pos:line="206" pos:column="33"/></name><argument_list pos:line="206" pos:column="33">(<argument><expr><operator pos:line="206" pos:column="34">(<pos:position pos:line="206" pos:column="35"/></operator><name pos:line="206" pos:column="35">hbuflen<pos:position pos:line="206" pos:column="42"/></name><operator pos:line="206" pos:column="42">+<pos:position pos:line="206" pos:column="43"/></operator><operator pos:line="206" pos:column="43">(<pos:position pos:line="206" pos:column="44"/></operator><name pos:line="206" pos:column="44">str<pos:position pos:line="206" pos:column="47"/></name><operator pos:line="206" pos:column="47">-<pos:position pos:line="206" pos:column="48"/></operator><name pos:line="206" pos:column="48">str_start<pos:position pos:line="206" pos:column="57"/></name><operator pos:line="206" pos:column="57">)<pos:position pos:line="206" pos:column="58"/></operator><operator pos:line="206" pos:column="58">)<pos:position pos:line="206" pos:column="59"/></operator><operator pos:line="206" pos:column="59">*<pos:position pos:line="206" pos:column="60"/></operator><literal type="number" pos:line="206" pos:column="60">3<pos:position pos:line="206" pos:column="61"/></literal><operator pos:line="206" pos:column="61">/<pos:position pos:line="206" pos:column="62"/></operator><literal type="number" pos:line="206" pos:column="62">2<pos:position pos:line="206" pos:column="63"/></literal></expr></argument>,
                                 <argument><expr><name><name pos:line="207" pos:column="34">data<pos:position pos:line="207" pos:column="38"/></name><operator pos:line="207" pos:column="38">-&gt;<pos:position pos:line="207" pos:column="43"/></operator><name pos:line="207" pos:column="40">state<pos:position pos:line="207" pos:column="45"/></name><operator pos:line="207" pos:column="45">.<pos:position pos:line="207" pos:column="46"/></operator><name pos:line="207" pos:column="46">headersize<pos:position pos:line="207" pos:column="56"/></name></name><operator pos:line="207" pos:column="56">*<pos:position pos:line="207" pos:column="57"/></operator><literal type="number" pos:line="207" pos:column="57">2<pos:position pos:line="207" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="207" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="207" pos:column="60"/></decl_stmt>
                <expr_stmt><expr><name pos:line="208" pos:column="17">hbufp_index<pos:position pos:line="208" pos:column="28"/></name> <operator pos:line="208" pos:column="29">=<pos:position pos:line="208" pos:column="30"/></operator> <name pos:line="208" pos:column="31">hbufp<pos:position pos:line="208" pos:column="36"/></name> <operator pos:line="208" pos:column="37">-<pos:position pos:line="208" pos:column="38"/></operator> <name><name pos:line="208" pos:column="39">data<pos:position pos:line="208" pos:column="43"/></name><operator pos:line="208" pos:column="43">-&gt;<pos:position pos:line="208" pos:column="48"/></operator><name pos:line="208" pos:column="45">state<pos:position pos:line="208" pos:column="50"/></name><operator pos:line="208" pos:column="50">.<pos:position pos:line="208" pos:column="51"/></operator><name pos:line="208" pos:column="51">headerbuff<pos:position pos:line="208" pos:column="61"/></name></name></expr>;<pos:position pos:line="208" pos:column="62"/></expr_stmt>
                <expr_stmt><expr><name pos:line="209" pos:column="17">newbuff<pos:position pos:line="209" pos:column="24"/></name> <operator pos:line="209" pos:column="25">=<pos:position pos:line="209" pos:column="26"/></operator> <operator pos:line="209" pos:column="27">(<pos:position pos:line="209" pos:column="28"/></operator><name pos:line="209" pos:column="28">char<pos:position pos:line="209" pos:column="32"/></name> <operator pos:line="209" pos:column="33">*<pos:position pos:line="209" pos:column="34"/></operator><operator pos:line="209" pos:column="34">)<pos:position pos:line="209" pos:column="35"/></operator><call><name pos:line="209" pos:column="35">realloc<pos:position pos:line="209" pos:column="42"/></name><argument_list pos:line="209" pos:column="42">(<argument><expr><name><name pos:line="209" pos:column="43">data<pos:position pos:line="209" pos:column="47"/></name><operator pos:line="209" pos:column="47">-&gt;<pos:position pos:line="209" pos:column="52"/></operator><name pos:line="209" pos:column="49">state<pos:position pos:line="209" pos:column="54"/></name><operator pos:line="209" pos:column="54">.<pos:position pos:line="209" pos:column="55"/></operator><name pos:line="209" pos:column="55">headerbuff<pos:position pos:line="209" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="209" pos:column="67">newsize<pos:position pos:line="209" pos:column="74"/></name></expr></argument>)<pos:position pos:line="209" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="76"/></expr_stmt>
                <if pos:line="210" pos:column="17">if<condition pos:line="210" pos:column="19">(<expr><operator pos:line="210" pos:column="20">!<pos:position pos:line="210" pos:column="21"/></operator><name pos:line="210" pos:column="21">newbuff<pos:position pos:line="210" pos:column="28"/></name></expr>)<pos:position pos:line="210" pos:column="29"/></condition><then pos:line="210" pos:column="29"> <block pos:line="210" pos:column="30">{
                  <expr_stmt><expr><call><name pos:line="211" pos:column="19">failf<pos:position pos:line="211" pos:column="24"/></name> <argument_list pos:line="211" pos:column="25">(<argument><expr><name pos:line="211" pos:column="26">data<pos:position pos:line="211" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="211" pos:column="32">"Failed to alloc memory for big header!"<pos:position pos:line="211" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="211" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="74"/></expr_stmt>
                  <return pos:line="212" pos:column="19">return <expr><name pos:line="212" pos:column="26">CURLE_READ_ERROR<pos:position pos:line="212" pos:column="42"/></name></expr>;<pos:position pos:line="212" pos:column="43"/></return>
                }<pos:position pos:line="213" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name><name pos:line="214" pos:column="17">data<pos:position pos:line="214" pos:column="21"/></name><operator pos:line="214" pos:column="21">-&gt;<pos:position pos:line="214" pos:column="26"/></operator><name pos:line="214" pos:column="23">state<pos:position pos:line="214" pos:column="28"/></name><operator pos:line="214" pos:column="28">.<pos:position pos:line="214" pos:column="29"/></operator><name pos:line="214" pos:column="29">headersize<pos:position pos:line="214" pos:column="39"/></name></name><operator pos:line="214" pos:column="39">=<pos:position pos:line="214" pos:column="40"/></operator> <name pos:line="214" pos:column="41">newsize<pos:position pos:line="214" pos:column="48"/></name></expr>;<pos:position pos:line="214" pos:column="49"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="215" pos:column="17">data<pos:position pos:line="215" pos:column="21"/></name><operator pos:line="215" pos:column="21">-&gt;<pos:position pos:line="215" pos:column="26"/></operator><name pos:line="215" pos:column="23">state<pos:position pos:line="215" pos:column="28"/></name><operator pos:line="215" pos:column="28">.<pos:position pos:line="215" pos:column="29"/></operator><name pos:line="215" pos:column="29">headerbuff<pos:position pos:line="215" pos:column="39"/></name></name> <operator pos:line="215" pos:column="40">=<pos:position pos:line="215" pos:column="41"/></operator> <name pos:line="215" pos:column="42">newbuff<pos:position pos:line="215" pos:column="49"/></name></expr>;<pos:position pos:line="215" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name pos:line="216" pos:column="17">hbufp<pos:position pos:line="216" pos:column="22"/></name> <operator pos:line="216" pos:column="23">=<pos:position pos:line="216" pos:column="24"/></operator> <name><name pos:line="216" pos:column="25">data<pos:position pos:line="216" pos:column="29"/></name><operator pos:line="216" pos:column="29">-&gt;<pos:position pos:line="216" pos:column="34"/></operator><name pos:line="216" pos:column="31">state<pos:position pos:line="216" pos:column="36"/></name><operator pos:line="216" pos:column="36">.<pos:position pos:line="216" pos:column="37"/></operator><name pos:line="216" pos:column="37">headerbuff<pos:position pos:line="216" pos:column="47"/></name></name> <operator pos:line="216" pos:column="48">+<pos:position pos:line="216" pos:column="49"/></operator> <name pos:line="216" pos:column="50">hbufp_index<pos:position pos:line="216" pos:column="61"/></name></expr>;<pos:position pos:line="216" pos:column="62"/></expr_stmt>
              }<pos:position pos:line="217" pos:column="16"/></block></then></if>

              <comment type="block" pos:line="219" pos:column="15">/* copy to end of line */</comment>
              <expr_stmt><expr><call><name pos:line="220" pos:column="15">strncpy<pos:position pos:line="220" pos:column="22"/></name> <argument_list pos:line="220" pos:column="23">(<argument><expr><name pos:line="220" pos:column="24">hbufp<pos:position pos:line="220" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="31">str_start<pos:position pos:line="220" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="42">str<pos:position pos:line="220" pos:column="45"/></name> <operator pos:line="220" pos:column="46">-<pos:position pos:line="220" pos:column="47"/></operator> <name pos:line="220" pos:column="48">str_start<pos:position pos:line="220" pos:column="57"/></name></expr></argument>)<pos:position pos:line="220" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="59"/></expr_stmt>
              <expr_stmt><expr><name pos:line="221" pos:column="15">hbufp<pos:position pos:line="221" pos:column="20"/></name> <operator pos:line="221" pos:column="21">+=<pos:position pos:line="221" pos:column="23"/></operator> <name pos:line="221" pos:column="24">str<pos:position pos:line="221" pos:column="27"/></name> <operator pos:line="221" pos:column="28">-<pos:position pos:line="221" pos:column="29"/></operator> <name pos:line="221" pos:column="30">str_start<pos:position pos:line="221" pos:column="39"/></name></expr>;<pos:position pos:line="221" pos:column="40"/></expr_stmt>
              <expr_stmt><expr><name pos:line="222" pos:column="15">hbuflen<pos:position pos:line="222" pos:column="22"/></name> <operator pos:line="222" pos:column="23">+=<pos:position pos:line="222" pos:column="25"/></operator> <name pos:line="222" pos:column="26">str<pos:position pos:line="222" pos:column="29"/></name> <operator pos:line="222" pos:column="30">-<pos:position pos:line="222" pos:column="31"/></operator> <name pos:line="222" pos:column="32">str_start<pos:position pos:line="222" pos:column="41"/></name></expr>;<pos:position pos:line="222" pos:column="42"/></expr_stmt>
              <expr_stmt><expr><operator pos:line="223" pos:column="15">*<pos:position pos:line="223" pos:column="16"/></operator><name pos:line="223" pos:column="16">hbufp<pos:position pos:line="223" pos:column="21"/></name> <operator pos:line="223" pos:column="22">=<pos:position pos:line="223" pos:column="23"/></operator> <literal type="number" pos:line="223" pos:column="24">0<pos:position pos:line="223" pos:column="25"/></literal></expr>;<pos:position pos:line="223" pos:column="26"/></expr_stmt>
              
              <expr_stmt><expr><name pos:line="225" pos:column="15">p<pos:position pos:line="225" pos:column="16"/></name> <operator pos:line="225" pos:column="17">=<pos:position pos:line="225" pos:column="18"/></operator> <name><name pos:line="225" pos:column="19">data<pos:position pos:line="225" pos:column="23"/></name><operator pos:line="225" pos:column="23">-&gt;<pos:position pos:line="225" pos:column="28"/></operator><name pos:line="225" pos:column="25">state<pos:position pos:line="225" pos:column="30"/></name><operator pos:line="225" pos:column="30">.<pos:position pos:line="225" pos:column="31"/></operator><name pos:line="225" pos:column="31">headerbuff<pos:position pos:line="225" pos:column="41"/></name></name></expr>;<pos:position pos:line="225" pos:column="42"/></expr_stmt>
              
              <comment type="block" format="doxygen" pos:line="227" pos:column="15">/****
               * We now have a FULL header line that p points to
               *****/</comment>

              <if pos:line="231" pos:column="15">if <condition pos:line="231" pos:column="18">(<expr><operator pos:line="231" pos:column="19">(<pos:position pos:line="231" pos:column="20"/></operator><literal type="char" pos:line="231" pos:column="20">'\n'<pos:position pos:line="231" pos:column="24"/></literal> <operator pos:line="231" pos:column="25">==<pos:position pos:line="231" pos:column="27"/></operator> <operator pos:line="231" pos:column="28">*<pos:position pos:line="231" pos:column="29"/></operator><name pos:line="231" pos:column="29">p<pos:position pos:line="231" pos:column="30"/></name><operator pos:line="231" pos:column="30">)<pos:position pos:line="231" pos:column="31"/></operator> <operator pos:line="231" pos:column="32">||<pos:position pos:line="231" pos:column="34"/></operator> <operator pos:line="231" pos:column="35">(<pos:position pos:line="231" pos:column="36"/></operator><literal type="char" pos:line="231" pos:column="36">'\r'<pos:position pos:line="231" pos:column="40"/></literal> <operator pos:line="231" pos:column="41">==<pos:position pos:line="231" pos:column="43"/></operator> <operator pos:line="231" pos:column="44">*<pos:position pos:line="231" pos:column="45"/></operator><name pos:line="231" pos:column="45">p<pos:position pos:line="231" pos:column="46"/></name><operator pos:line="231" pos:column="46">)<pos:position pos:line="231" pos:column="47"/></operator></expr>)<pos:position pos:line="231" pos:column="48"/></condition><then pos:line="231" pos:column="48"> <block pos:line="231" pos:column="49">{
                <comment type="block" pos:line="232" pos:column="17">/* Zero-length header line means end of headers! */</comment>

                <if pos:line="234" pos:column="17">if <condition pos:line="234" pos:column="20">(<expr><literal type="char" pos:line="234" pos:column="21">'\r'<pos:position pos:line="234" pos:column="25"/></literal> <operator pos:line="234" pos:column="26">==<pos:position pos:line="234" pos:column="28"/></operator> <operator pos:line="234" pos:column="29">*<pos:position pos:line="234" pos:column="30"/></operator><name pos:line="234" pos:column="30">p<pos:position pos:line="234" pos:column="31"/></name></expr>)<pos:position pos:line="234" pos:column="32"/></condition><then pos:line="234" pos:column="32">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="235" pos:column="19">p<pos:position pos:line="235" pos:column="20"/></name><operator pos:line="235" pos:column="20">++<pos:position pos:line="235" pos:column="22"/></operator></expr>;<pos:position pos:line="235" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="235" pos:column="33">/* pass the \r byte */</comment>
                <if pos:line="236" pos:column="17">if <condition pos:line="236" pos:column="20">(<expr><literal type="char" pos:line="236" pos:column="21">'\n'<pos:position pos:line="236" pos:column="25"/></literal> <operator pos:line="236" pos:column="26">==<pos:position pos:line="236" pos:column="28"/></operator> <operator pos:line="236" pos:column="29">*<pos:position pos:line="236" pos:column="30"/></operator><name pos:line="236" pos:column="30">p<pos:position pos:line="236" pos:column="31"/></name></expr>)<pos:position pos:line="236" pos:column="32"/></condition><then pos:line="236" pos:column="32">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="237" pos:column="19">p<pos:position pos:line="237" pos:column="20"/></name><operator pos:line="237" pos:column="20">++<pos:position pos:line="237" pos:column="22"/></operator></expr>;<pos:position pos:line="237" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="237" pos:column="33">/* pass the \n byte */</comment>

                <if pos:line="239" pos:column="17">if<condition pos:line="239" pos:column="19">(<expr><literal type="number" pos:line="239" pos:column="20">100<pos:position pos:line="239" pos:column="23"/></literal> <operator pos:line="239" pos:column="24">==<pos:position pos:line="239" pos:column="26"/></operator> <name pos:line="239" pos:column="27">httpcode<pos:position pos:line="239" pos:column="35"/></name></expr>)<pos:position pos:line="239" pos:column="36"/></condition><then pos:line="239" pos:column="36"> <block pos:line="239" pos:column="37">{
                  <comment type="block" pos:line="240" pos:column="19">/*
                   * we have made a HTTP PUT or POST and this is 1.1-lingo
                   * that tells us that the server is OK with this and ready
                   * to receive our stuff.
                   * However, we'll get more headers now so we must get
                   * back into the header-parsing state!
                   */</comment>
                  <expr_stmt><expr><name pos:line="247" pos:column="19">header<pos:position pos:line="247" pos:column="25"/></name> <operator pos:line="247" pos:column="26">=<pos:position pos:line="247" pos:column="27"/></operator> <name pos:line="247" pos:column="28">TRUE<pos:position pos:line="247" pos:column="32"/></name></expr>;<pos:position pos:line="247" pos:column="33"/></expr_stmt>
                  <expr_stmt><expr><name pos:line="248" pos:column="19">headerline<pos:position pos:line="248" pos:column="29"/></name> <operator pos:line="248" pos:column="30">=<pos:position pos:line="248" pos:column="31"/></operator> <literal type="number" pos:line="248" pos:column="32">0<pos:position pos:line="248" pos:column="33"/></literal></expr>;<pos:position pos:line="248" pos:column="34"/></expr_stmt> <comment type="block" pos:line="248" pos:column="35">/* we restart the header line counter */</comment>
                  <comment type="block" pos:line="249" pos:column="19">/* if we did wait for this do enable write now! */</comment>
                  <if pos:line="250" pos:column="19">if <condition pos:line="250" pos:column="22">(<expr><name pos:line="250" pos:column="23">write_after_100_header<pos:position pos:line="250" pos:column="45"/></name></expr>)<pos:position pos:line="250" pos:column="46"/></condition><then pos:line="250" pos:column="46"> <block pos:line="250" pos:column="47">{
                    <expr_stmt><expr><name pos:line="251" pos:column="21">write_after_100_header<pos:position pos:line="251" pos:column="43"/></name> <operator pos:line="251" pos:column="44">=<pos:position pos:line="251" pos:column="45"/></operator> <name pos:line="251" pos:column="46">FALSE<pos:position pos:line="251" pos:column="51"/></name></expr>;<pos:position pos:line="251" pos:column="52"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="252" pos:column="21">FD_SET<pos:position pos:line="252" pos:column="27"/></name> <argument_list pos:line="252" pos:column="28">(<argument><expr><name><name pos:line="252" pos:column="29">conn<pos:position pos:line="252" pos:column="33"/></name><operator pos:line="252" pos:column="33">-&gt;<pos:position pos:line="252" pos:column="38"/></operator><name pos:line="252" pos:column="35">writesockfd<pos:position pos:line="252" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="252" pos:column="48">&amp;<pos:position pos:line="252" pos:column="53"/></operator><name pos:line="252" pos:column="49">writefd<pos:position pos:line="252" pos:column="56"/></name></expr></argument>)<pos:position pos:line="252" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="58"/></expr_stmt> <comment type="block" pos:line="252" pos:column="59">/* write socket */</comment>
                    <expr_stmt><expr><name pos:line="253" pos:column="21">keepon<pos:position pos:line="253" pos:column="27"/></name> <operator pos:line="253" pos:column="28">|=<pos:position pos:line="253" pos:column="30"/></operator> <name pos:line="253" pos:column="31">KEEP_WRITE<pos:position pos:line="253" pos:column="41"/></name></expr>;<pos:position pos:line="253" pos:column="42"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="254" pos:column="21">wkeepfd<pos:position pos:line="254" pos:column="28"/></name> <operator pos:line="254" pos:column="29">=<pos:position pos:line="254" pos:column="30"/></operator> <name pos:line="254" pos:column="31">writefd<pos:position pos:line="254" pos:column="38"/></name></expr>;<pos:position pos:line="254" pos:column="39"/></expr_stmt>
                  }<pos:position pos:line="255" pos:column="20"/></block></then></if>
                }<pos:position pos:line="256" pos:column="18"/></block></then>
		<else pos:line="257" pos:column="17">else
                  <block type="pseudo"><expr_stmt><expr><name pos:line="258" pos:column="19">header<pos:position pos:line="258" pos:column="25"/></name> <operator pos:line="258" pos:column="26">=<pos:position pos:line="258" pos:column="27"/></operator> <name pos:line="258" pos:column="28">FALSE<pos:position pos:line="258" pos:column="33"/></name></expr>;<pos:position pos:line="258" pos:column="34"/></expr_stmt></block></else></if>	<comment type="block" pos:line="258" pos:column="41">/* no more header to parse! */</comment>

		<if pos:line="260" pos:column="17">if <condition pos:line="260" pos:column="20">(<expr><literal type="number" pos:line="260" pos:column="21">417<pos:position pos:line="260" pos:column="24"/></literal> <operator pos:line="260" pos:column="25">==<pos:position pos:line="260" pos:column="27"/></operator> <name pos:line="260" pos:column="28">httpcode<pos:position pos:line="260" pos:column="36"/></name></expr>)<pos:position pos:line="260" pos:column="37"/></condition><then pos:line="260" pos:column="37"> <block pos:line="260" pos:column="38">{
		  <comment type="block" pos:line="261" pos:column="19">/*
		   * we got: "417 Expectation Failed" this means:
		   * we have made a HTTP call and our Expect Header
		   * seems to cause a problem =&gt; abort the write operations
		   * (or prevent them from starting
		   */</comment>
		  <expr_stmt><expr><name pos:line="267" pos:column="19">write_after_100_header<pos:position pos:line="267" pos:column="41"/></name> <operator pos:line="267" pos:column="42">=<pos:position pos:line="267" pos:column="43"/></operator> <name pos:line="267" pos:column="44">FALSE<pos:position pos:line="267" pos:column="49"/></name></expr>;<pos:position pos:line="267" pos:column="50"/></expr_stmt>
		  <expr_stmt><expr><name pos:line="268" pos:column="19">keepon<pos:position pos:line="268" pos:column="25"/></name> <operator pos:line="268" pos:column="26">&amp;=<pos:position pos:line="268" pos:column="32"/></operator> <operator pos:line="268" pos:column="29">~<pos:position pos:line="268" pos:column="30"/></operator><name pos:line="268" pos:column="30">KEEP_WRITE<pos:position pos:line="268" pos:column="40"/></name></expr>;<pos:position pos:line="268" pos:column="41"/></expr_stmt>
		  <expr_stmt><expr><call><name pos:line="269" pos:column="19">FD_ZERO<pos:position pos:line="269" pos:column="26"/></name><argument_list pos:line="269" pos:column="26">(<argument><expr><operator pos:line="269" pos:column="27">&amp;<pos:position pos:line="269" pos:column="32"/></operator><name pos:line="269" pos:column="28">wkeepfd<pos:position pos:line="269" pos:column="35"/></name></expr></argument>)<pos:position pos:line="269" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="270" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="272" pos:column="17">/* now, only output this if the header AND body are requested:
                 */</comment>
                <expr_stmt><expr><name pos:line="274" pos:column="17">writetype<pos:position pos:line="274" pos:column="26"/></name> <operator pos:line="274" pos:column="27">=<pos:position pos:line="274" pos:column="28"/></operator> <name pos:line="274" pos:column="29">CLIENTWRITE_HEADER<pos:position pos:line="274" pos:column="47"/></name></expr>;<pos:position pos:line="274" pos:column="48"/></expr_stmt>
                <if pos:line="275" pos:column="17">if <condition pos:line="275" pos:column="20">(<expr><name><name pos:line="275" pos:column="21">data<pos:position pos:line="275" pos:column="25"/></name><operator pos:line="275" pos:column="25">-&gt;<pos:position pos:line="275" pos:column="30"/></operator><name pos:line="275" pos:column="27">set<pos:position pos:line="275" pos:column="30"/></name><operator pos:line="275" pos:column="30">.<pos:position pos:line="275" pos:column="31"/></operator><name pos:line="275" pos:column="31">http_include_header<pos:position pos:line="275" pos:column="50"/></name></name></expr>)<pos:position pos:line="275" pos:column="51"/></condition><then pos:line="275" pos:column="51">
                  <block type="pseudo"><expr_stmt><expr><name pos:line="276" pos:column="19">writetype<pos:position pos:line="276" pos:column="28"/></name> <operator pos:line="276" pos:column="29">|=<pos:position pos:line="276" pos:column="31"/></operator> <name pos:line="276" pos:column="32">CLIENTWRITE_BODY<pos:position pos:line="276" pos:column="48"/></name></expr>;<pos:position pos:line="276" pos:column="49"/></expr_stmt></block></then></if>

                <expr_stmt><expr><name pos:line="278" pos:column="17">urg<pos:position pos:line="278" pos:column="20"/></name> <operator pos:line="278" pos:column="21">=<pos:position pos:line="278" pos:column="22"/></operator> <call><name pos:line="278" pos:column="23">Curl_client_write<pos:position pos:line="278" pos:column="40"/></name><argument_list pos:line="278" pos:column="40">(<argument><expr><name pos:line="278" pos:column="41">data<pos:position pos:line="278" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="278" pos:column="47">writetype<pos:position pos:line="278" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="278" pos:column="58">data<pos:position pos:line="278" pos:column="62"/></name><operator pos:line="278" pos:column="62">-&gt;<pos:position pos:line="278" pos:column="67"/></operator><name pos:line="278" pos:column="64">state<pos:position pos:line="278" pos:column="69"/></name><operator pos:line="278" pos:column="69">.<pos:position pos:line="278" pos:column="70"/></operator><name pos:line="278" pos:column="70">headerbuff<pos:position pos:line="278" pos:column="80"/></name></name></expr></argument>,
                                        <argument><expr><name pos:line="279" pos:column="41">p<pos:position pos:line="279" pos:column="42"/></name> <operator pos:line="279" pos:column="43">-<pos:position pos:line="279" pos:column="44"/></operator> <name><name pos:line="279" pos:column="45">data<pos:position pos:line="279" pos:column="49"/></name><operator pos:line="279" pos:column="49">-&gt;<pos:position pos:line="279" pos:column="54"/></operator><name pos:line="279" pos:column="51">state<pos:position pos:line="279" pos:column="56"/></name><operator pos:line="279" pos:column="56">.<pos:position pos:line="279" pos:column="57"/></operator><name pos:line="279" pos:column="57">headerbuff<pos:position pos:line="279" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="279" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="69"/></expr_stmt>
                <if pos:line="280" pos:column="17">if<condition pos:line="280" pos:column="19">(<expr><name pos:line="280" pos:column="20">urg<pos:position pos:line="280" pos:column="23"/></name></expr>)<pos:position pos:line="280" pos:column="24"/></condition><then pos:line="280" pos:column="24">
                  <block type="pseudo"><return pos:line="281" pos:column="19">return <expr><name pos:line="281" pos:column="26">urg<pos:position pos:line="281" pos:column="29"/></name></expr>;<pos:position pos:line="281" pos:column="30"/></return></block></then></if>

                <expr_stmt><expr><name><name pos:line="283" pos:column="17">data<pos:position pos:line="283" pos:column="21"/></name><operator pos:line="283" pos:column="21">-&gt;<pos:position pos:line="283" pos:column="26"/></operator><name pos:line="283" pos:column="23">info<pos:position pos:line="283" pos:column="27"/></name><operator pos:line="283" pos:column="27">.<pos:position pos:line="283" pos:column="28"/></operator><name pos:line="283" pos:column="28">header_size<pos:position pos:line="283" pos:column="39"/></name></name> <operator pos:line="283" pos:column="40">+=<pos:position pos:line="283" pos:column="42"/></operator> <name pos:line="283" pos:column="43">p<pos:position pos:line="283" pos:column="44"/></name> <operator pos:line="283" pos:column="45">-<pos:position pos:line="283" pos:column="46"/></operator> <name><name pos:line="283" pos:column="47">data<pos:position pos:line="283" pos:column="51"/></name><operator pos:line="283" pos:column="51">-&gt;<pos:position pos:line="283" pos:column="56"/></operator><name pos:line="283" pos:column="53">state<pos:position pos:line="283" pos:column="58"/></name><operator pos:line="283" pos:column="58">.<pos:position pos:line="283" pos:column="59"/></operator><name pos:line="283" pos:column="59">headerbuff<pos:position pos:line="283" pos:column="69"/></name></name></expr>;<pos:position pos:line="283" pos:column="70"/></expr_stmt>

                <if pos:line="285" pos:column="17">if<condition pos:line="285" pos:column="19">(<expr><operator pos:line="285" pos:column="20">!<pos:position pos:line="285" pos:column="21"/></operator><name pos:line="285" pos:column="21">header<pos:position pos:line="285" pos:column="27"/></name></expr>)<pos:position pos:line="285" pos:column="28"/></condition><then pos:line="285" pos:column="28"> <block pos:line="285" pos:column="29">{
                  <comment type="block" pos:line="286" pos:column="19">/*
                   * really end-of-headers.
                   *
                   * If we requested a "no body", this is a good time to get
                   * out and return home.
                   */</comment>
                  <if pos:line="292" pos:column="19">if<condition pos:line="292" pos:column="21">(<expr><name><name pos:line="292" pos:column="22">data<pos:position pos:line="292" pos:column="26"/></name><operator pos:line="292" pos:column="26">-&gt;<pos:position pos:line="292" pos:column="31"/></operator><name pos:line="292" pos:column="28">set<pos:position pos:line="292" pos:column="31"/></name><operator pos:line="292" pos:column="31">.<pos:position pos:line="292" pos:column="32"/></operator><name pos:line="292" pos:column="32">no_body<pos:position pos:line="292" pos:column="39"/></name></name></expr>)<pos:position pos:line="292" pos:column="40"/></condition><then pos:line="292" pos:column="40">
                    <block type="pseudo"><return pos:line="293" pos:column="21">return <expr><name pos:line="293" pos:column="28">CURLE_OK<pos:position pos:line="293" pos:column="36"/></name></expr>;<pos:position pos:line="293" pos:column="37"/></return></block></then></if>

                  <if pos:line="295" pos:column="19">if<condition pos:line="295" pos:column="21">(<expr><operator pos:line="295" pos:column="22">!<pos:position pos:line="295" pos:column="23"/></operator><name><name pos:line="295" pos:column="23">conn<pos:position pos:line="295" pos:column="27"/></name><operator pos:line="295" pos:column="27">-&gt;<pos:position pos:line="295" pos:column="32"/></operator><name pos:line="295" pos:column="29">bits<pos:position pos:line="295" pos:column="33"/></name><operator pos:line="295" pos:column="33">.<pos:position pos:line="295" pos:column="34"/></operator><name pos:line="295" pos:column="34">close<pos:position pos:line="295" pos:column="39"/></name></name></expr>)<pos:position pos:line="295" pos:column="40"/></condition><then pos:line="295" pos:column="40"> <block pos:line="295" pos:column="41">{
                    <comment type="block" pos:line="296" pos:column="21">/* If this is not the last request before a close, we must
                       set the maximum download size to the size of the
                       expected document or else, we won't know when to stop
                       reading! */</comment>
                    <if pos:line="300" pos:column="21">if<condition pos:line="300" pos:column="23">(<expr><operator pos:line="300" pos:column="24">-<pos:position pos:line="300" pos:column="25"/></operator><literal type="number" pos:line="300" pos:column="25">1<pos:position pos:line="300" pos:column="26"/></literal> <operator pos:line="300" pos:column="27">!=<pos:position pos:line="300" pos:column="29"/></operator> <name><name pos:line="300" pos:column="30">conn<pos:position pos:line="300" pos:column="34"/></name><operator pos:line="300" pos:column="34">-&gt;<pos:position pos:line="300" pos:column="39"/></operator><name pos:line="300" pos:column="36">size<pos:position pos:line="300" pos:column="40"/></name></name></expr>)<pos:position pos:line="300" pos:column="41"/></condition><then pos:line="300" pos:column="41">
                      <block type="pseudo"><expr_stmt><expr><name><name pos:line="301" pos:column="23">conn<pos:position pos:line="301" pos:column="27"/></name><operator pos:line="301" pos:column="27">-&gt;<pos:position pos:line="301" pos:column="32"/></operator><name pos:line="301" pos:column="29">maxdownload<pos:position pos:line="301" pos:column="40"/></name></name> <operator pos:line="301" pos:column="41">=<pos:position pos:line="301" pos:column="42"/></operator> <name><name pos:line="301" pos:column="43">conn<pos:position pos:line="301" pos:column="47"/></name><operator pos:line="301" pos:column="47">-&gt;<pos:position pos:line="301" pos:column="52"/></operator><name pos:line="301" pos:column="49">size<pos:position pos:line="301" pos:column="53"/></name></name></expr>;<pos:position pos:line="301" pos:column="54"/></expr_stmt></block></then></if>

                    <comment type="block" pos:line="303" pos:column="21">/* If max download size is *zero* (nothing) we already
                       have nothing and can safely return ok now! */</comment>
                    <if pos:line="305" pos:column="21">if<condition pos:line="305" pos:column="23">(<expr><literal type="number" pos:line="305" pos:column="24">0<pos:position pos:line="305" pos:column="25"/></literal> <operator pos:line="305" pos:column="26">==<pos:position pos:line="305" pos:column="28"/></operator> <name><name pos:line="305" pos:column="29">conn<pos:position pos:line="305" pos:column="33"/></name><operator pos:line="305" pos:column="33">-&gt;<pos:position pos:line="305" pos:column="38"/></operator><name pos:line="305" pos:column="35">maxdownload<pos:position pos:line="305" pos:column="46"/></name></name></expr>)<pos:position pos:line="305" pos:column="47"/></condition><then pos:line="305" pos:column="47">
                      <block type="pseudo"><return pos:line="306" pos:column="23">return <expr><name pos:line="306" pos:column="30">CURLE_OK<pos:position pos:line="306" pos:column="38"/></name></expr>;<pos:position pos:line="306" pos:column="39"/></return></block></then></if>
                    
                    <comment type="block" pos:line="308" pos:column="21">/* What to do if the size is *not* known? */</comment>
                  }<pos:position pos:line="309" pos:column="20"/></block></then></if>
                  <break pos:line="310" pos:column="19">break;<pos:position pos:line="310" pos:column="25"/></break>		<comment type="block" pos:line="310" pos:column="41">/* exit header line loop */</comment>
                }<pos:position pos:line="311" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="313" pos:column="17">/* We continue reading headers, so reset the line-based
                   header parsing variables hbufp &amp;&amp; hbuflen */</comment>
                <expr_stmt><expr><name pos:line="315" pos:column="17">hbufp<pos:position pos:line="315" pos:column="22"/></name> <operator pos:line="315" pos:column="23">=<pos:position pos:line="315" pos:column="24"/></operator> <name><name pos:line="315" pos:column="25">data<pos:position pos:line="315" pos:column="29"/></name><operator pos:line="315" pos:column="29">-&gt;<pos:position pos:line="315" pos:column="34"/></operator><name pos:line="315" pos:column="31">state<pos:position pos:line="315" pos:column="36"/></name><operator pos:line="315" pos:column="36">.<pos:position pos:line="315" pos:column="37"/></operator><name pos:line="315" pos:column="37">headerbuff<pos:position pos:line="315" pos:column="47"/></name></name></expr>;<pos:position pos:line="315" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name pos:line="316" pos:column="17">hbuflen<pos:position pos:line="316" pos:column="24"/></name> <operator pos:line="316" pos:column="25">=<pos:position pos:line="316" pos:column="26"/></operator> <literal type="number" pos:line="316" pos:column="27">0<pos:position pos:line="316" pos:column="28"/></literal></expr>;<pos:position pos:line="316" pos:column="29"/></expr_stmt>
                <continue pos:line="317" pos:column="17">continue;<pos:position pos:line="317" pos:column="26"/></continue>
              }<pos:position pos:line="318" pos:column="16"/></block></then></if>

              <comment type="block" pos:line="320" pos:column="15">/*
               * Checks for special headers coming up.
               */</comment>
              
              <if pos:line="324" pos:column="15">if <condition pos:line="324" pos:column="18">(<expr><operator pos:line="324" pos:column="19">!<pos:position pos:line="324" pos:column="20"/></operator><name pos:line="324" pos:column="20">headerline<pos:position pos:line="324" pos:column="30"/></name><operator pos:line="324" pos:column="30">++<pos:position pos:line="324" pos:column="32"/></operator></expr>)<pos:position pos:line="324" pos:column="33"/></condition><then pos:line="324" pos:column="33"> <block pos:line="324" pos:column="34">{
                <comment type="block" pos:line="325" pos:column="17">/* This is the first header, it MUST be the error code line
                   or else we consiser this to be the body right away! */</comment>
                <decl_stmt><decl><type><name pos:line="327" pos:column="17">int<pos:position pos:line="327" pos:column="20"/></name></type> <name pos:line="327" pos:column="21">httpversion_major<pos:position pos:line="327" pos:column="38"/></name></decl>;<pos:position pos:line="327" pos:column="39"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="328" pos:column="17">int<pos:position pos:line="328" pos:column="20"/></name></type> <name pos:line="328" pos:column="21">nc<pos:position pos:line="328" pos:column="23"/></name><init pos:line="328" pos:column="23">=<expr><call><name pos:line="328" pos:column="24">sscanf<pos:position pos:line="328" pos:column="30"/></name> <argument_list pos:line="328" pos:column="31">(<argument><expr><name pos:line="328" pos:column="32">p<pos:position pos:line="328" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="328" pos:column="35">" HTTP/%d.%d %3d"<pos:position pos:line="328" pos:column="52"/></literal></expr></argument>,
                               <argument><expr><operator pos:line="329" pos:column="32">&amp;<pos:position pos:line="329" pos:column="37"/></operator><name pos:line="329" pos:column="33">httpversion_major<pos:position pos:line="329" pos:column="50"/></name></expr></argument> ,<argument><expr><operator pos:line="329" pos:column="52">&amp;<pos:position pos:line="329" pos:column="57"/></operator><name pos:line="329" pos:column="53">httpversion<pos:position pos:line="329" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="329" pos:column="66">&amp;<pos:position pos:line="329" pos:column="71"/></operator><name pos:line="329" pos:column="67">httpcode<pos:position pos:line="329" pos:column="75"/></name></expr></argument>)<pos:position pos:line="329" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="329" pos:column="77"/></decl_stmt>
                <if pos:line="330" pos:column="17">if <condition pos:line="330" pos:column="20">(<expr><name pos:line="330" pos:column="21">nc<pos:position pos:line="330" pos:column="23"/></name><operator pos:line="330" pos:column="23">==<pos:position pos:line="330" pos:column="25"/></operator><literal type="number" pos:line="330" pos:column="25">3<pos:position pos:line="330" pos:column="26"/></literal></expr>)<pos:position pos:line="330" pos:column="27"/></condition><then pos:line="330" pos:column="27"> <block pos:line="330" pos:column="28">{
                  <expr_stmt><expr><name pos:line="331" pos:column="19">httpversion<pos:position pos:line="331" pos:column="30"/></name><operator pos:line="331" pos:column="30">+=<pos:position pos:line="331" pos:column="32"/></operator><literal type="number" pos:line="331" pos:column="32">10<pos:position pos:line="331" pos:column="34"/></literal><operator pos:line="331" pos:column="34">*<pos:position pos:line="331" pos:column="35"/></operator><name pos:line="331" pos:column="35">httpversion_major<pos:position pos:line="331" pos:column="52"/></name></expr>;<pos:position pos:line="331" pos:column="53"/></expr_stmt>
                }<pos:position pos:line="332" pos:column="18"/></block></then>
                <else pos:line="333" pos:column="17">else <block pos:line="333" pos:column="22">{
                  <comment type="block" pos:line="334" pos:column="19">/* this is the real world, not a Nirvana
                     NCSA 1.5.x returns this crap when asked for HTTP/1.1
                  */</comment>
                  <expr_stmt><expr><name pos:line="337" pos:column="19">nc<pos:position pos:line="337" pos:column="21"/></name><operator pos:line="337" pos:column="21">=<pos:position pos:line="337" pos:column="22"/></operator><call><name pos:line="337" pos:column="22">sscanf<pos:position pos:line="337" pos:column="28"/></name> <argument_list pos:line="337" pos:column="29">(<argument><expr><name pos:line="337" pos:column="30">p<pos:position pos:line="337" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="337" pos:column="33">" HTTP %3d"<pos:position pos:line="337" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="337" pos:column="46">&amp;<pos:position pos:line="337" pos:column="51"/></operator><name pos:line="337" pos:column="47">httpcode<pos:position pos:line="337" pos:column="55"/></name></expr></argument>)<pos:position pos:line="337" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="57"/></expr_stmt>
                  <expr_stmt><expr><name pos:line="338" pos:column="19">httpversion<pos:position pos:line="338" pos:column="30"/></name> <operator pos:line="338" pos:column="31">=<pos:position pos:line="338" pos:column="32"/></operator> <literal type="number" pos:line="338" pos:column="33">10<pos:position pos:line="338" pos:column="35"/></literal></expr>;<pos:position pos:line="338" pos:column="36"/></expr_stmt>
                }<pos:position pos:line="339" pos:column="18"/></block></else></if>

                <if pos:line="341" pos:column="17">if <condition pos:line="341" pos:column="20">(<expr><name pos:line="341" pos:column="21">nc<pos:position pos:line="341" pos:column="23"/></name></expr>)<pos:position pos:line="341" pos:column="24"/></condition><then pos:line="341" pos:column="24"> <block pos:line="341" pos:column="25">{
                  <expr_stmt><expr><name><name pos:line="342" pos:column="19">data<pos:position pos:line="342" pos:column="23"/></name><operator pos:line="342" pos:column="23">-&gt;<pos:position pos:line="342" pos:column="28"/></operator><name pos:line="342" pos:column="25">info<pos:position pos:line="342" pos:column="29"/></name><operator pos:line="342" pos:column="29">.<pos:position pos:line="342" pos:column="30"/></operator><name pos:line="342" pos:column="30">httpcode<pos:position pos:line="342" pos:column="38"/></name></name> <operator pos:line="342" pos:column="39">=<pos:position pos:line="342" pos:column="40"/></operator> <name pos:line="342" pos:column="41">httpcode<pos:position pos:line="342" pos:column="49"/></name></expr>;<pos:position pos:line="342" pos:column="50"/></expr_stmt>
                  <expr_stmt><expr><name><name pos:line="343" pos:column="19">data<pos:position pos:line="343" pos:column="23"/></name><operator pos:line="343" pos:column="23">-&gt;<pos:position pos:line="343" pos:column="28"/></operator><name pos:line="343" pos:column="25">info<pos:position pos:line="343" pos:column="29"/></name><operator pos:line="343" pos:column="29">.<pos:position pos:line="343" pos:column="30"/></operator><name pos:line="343" pos:column="30">httpversion<pos:position pos:line="343" pos:column="41"/></name></name> <operator pos:line="343" pos:column="42">=<pos:position pos:line="343" pos:column="43"/></operator> <name pos:line="343" pos:column="44">httpversion<pos:position pos:line="343" pos:column="55"/></name></expr>;<pos:position pos:line="343" pos:column="56"/></expr_stmt>

                  <comment type="block" pos:line="345" pos:column="19">/* 404 -&gt; URL not found! */</comment>
                  <if pos:line="346" pos:column="19">if <condition pos:line="346" pos:column="22">(
                      <expr><operator pos:line="347" pos:column="23">(<pos:position pos:line="347" pos:column="24"/></operator> <operator pos:line="347" pos:column="25">(<pos:position pos:line="347" pos:column="26"/></operator><operator pos:line="347" pos:column="26">(<pos:position pos:line="347" pos:column="27"/></operator><name><name pos:line="347" pos:column="27">data<pos:position pos:line="347" pos:column="31"/></name><operator pos:line="347" pos:column="31">-&gt;<pos:position pos:line="347" pos:column="36"/></operator><name pos:line="347" pos:column="33">set<pos:position pos:line="347" pos:column="36"/></name><operator pos:line="347" pos:column="36">.<pos:position pos:line="347" pos:column="37"/></operator><name pos:line="347" pos:column="37">http_follow_location<pos:position pos:line="347" pos:column="57"/></name></name><operator pos:line="347" pos:column="57">)<pos:position pos:line="347" pos:column="58"/></operator> <operator pos:line="347" pos:column="59">&amp;&amp;<pos:position pos:line="347" pos:column="69"/></operator>
                         <operator pos:line="348" pos:column="26">(<pos:position pos:line="348" pos:column="27"/></operator><name pos:line="348" pos:column="27">httpcode<pos:position pos:line="348" pos:column="35"/></name> <operator pos:line="348" pos:column="36">&gt;=<pos:position pos:line="348" pos:column="41"/></operator> <literal type="number" pos:line="348" pos:column="39">400<pos:position pos:line="348" pos:column="42"/></literal><operator pos:line="348" pos:column="42">)<pos:position pos:line="348" pos:column="43"/></operator><operator pos:line="348" pos:column="43">)<pos:position pos:line="348" pos:column="44"/></operator>
                        <operator pos:line="349" pos:column="25">||<pos:position pos:line="349" pos:column="27"/></operator>
                        <operator pos:line="350" pos:column="25">(<pos:position pos:line="350" pos:column="26"/></operator><operator pos:line="350" pos:column="26">!<pos:position pos:line="350" pos:column="27"/></operator><name><name pos:line="350" pos:column="27">data<pos:position pos:line="350" pos:column="31"/></name><operator pos:line="350" pos:column="31">-&gt;<pos:position pos:line="350" pos:column="36"/></operator><name pos:line="350" pos:column="33">set<pos:position pos:line="350" pos:column="36"/></name><operator pos:line="350" pos:column="36">.<pos:position pos:line="350" pos:column="37"/></operator><name pos:line="350" pos:column="37">http_follow_location<pos:position pos:line="350" pos:column="57"/></name></name> <operator pos:line="350" pos:column="58">&amp;&amp;<pos:position pos:line="350" pos:column="68"/></operator>
                         <operator pos:line="351" pos:column="26">(<pos:position pos:line="351" pos:column="27"/></operator><name pos:line="351" pos:column="27">httpcode<pos:position pos:line="351" pos:column="35"/></name> <operator pos:line="351" pos:column="36">&gt;=<pos:position pos:line="351" pos:column="41"/></operator> <literal type="number" pos:line="351" pos:column="39">300<pos:position pos:line="351" pos:column="42"/></literal><operator pos:line="351" pos:column="42">)<pos:position pos:line="351" pos:column="43"/></operator><operator pos:line="351" pos:column="43">)<pos:position pos:line="351" pos:column="44"/></operator><operator pos:line="351" pos:column="44">)<pos:position pos:line="351" pos:column="45"/></operator>
                      <operator pos:line="352" pos:column="23">&amp;&amp;<pos:position pos:line="352" pos:column="33"/></operator> <operator pos:line="352" pos:column="26">(<pos:position pos:line="352" pos:column="27"/></operator><name><name pos:line="352" pos:column="27">data<pos:position pos:line="352" pos:column="31"/></name><operator pos:line="352" pos:column="31">-&gt;<pos:position pos:line="352" pos:column="36"/></operator><name pos:line="352" pos:column="33">set<pos:position pos:line="352" pos:column="36"/></name><operator pos:line="352" pos:column="36">.<pos:position pos:line="352" pos:column="37"/></operator><name pos:line="352" pos:column="37">http_fail_on_error<pos:position pos:line="352" pos:column="55"/></name></name><operator pos:line="352" pos:column="55">)<pos:position pos:line="352" pos:column="56"/></operator></expr>)<pos:position pos:line="352" pos:column="57"/></condition><then pos:line="352" pos:column="57"> <block pos:line="352" pos:column="58">{
                    <comment type="block" pos:line="353" pos:column="21">/* If we have been told to fail hard on HTTP-errors,
                       here is the check for that: */</comment>
                    <comment type="block" pos:line="355" pos:column="21">/* serious error, go home! */</comment>
                    <expr_stmt><expr><call><name pos:line="356" pos:column="21">failf<pos:position pos:line="356" pos:column="26"/></name> <argument_list pos:line="356" pos:column="27">(<argument><expr><name pos:line="356" pos:column="28">data<pos:position pos:line="356" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="356" pos:column="34">"The requested file was not found"<pos:position pos:line="356" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="356" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="356" pos:column="70"/></expr_stmt>
                    <return pos:line="357" pos:column="21">return <expr><name pos:line="357" pos:column="28">CURLE_HTTP_NOT_FOUND<pos:position pos:line="357" pos:column="48"/></name></expr>;<pos:position pos:line="357" pos:column="49"/></return>
                  }<pos:position pos:line="358" pos:column="20"/></block></then></if>

                  <if pos:line="360" pos:column="19">if<condition pos:line="360" pos:column="21">(<expr><name pos:line="360" pos:column="22">httpversion<pos:position pos:line="360" pos:column="33"/></name> <operator pos:line="360" pos:column="34">==<pos:position pos:line="360" pos:column="36"/></operator> <literal type="number" pos:line="360" pos:column="37">10<pos:position pos:line="360" pos:column="39"/></literal></expr>)<pos:position pos:line="360" pos:column="40"/></condition><then pos:line="360" pos:column="40">
                    <comment type="block" pos:line="361" pos:column="21">/* Default action for HTTP/1.0 must be to close, unless
                       we get one of those fancy headers that tell us the
                       server keeps it open for us! */</comment>
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="364" pos:column="21">conn<pos:position pos:line="364" pos:column="25"/></name><operator pos:line="364" pos:column="25">-&gt;<pos:position pos:line="364" pos:column="30"/></operator><name pos:line="364" pos:column="27">bits<pos:position pos:line="364" pos:column="31"/></name><operator pos:line="364" pos:column="31">.<pos:position pos:line="364" pos:column="32"/></operator><name pos:line="364" pos:column="32">close<pos:position pos:line="364" pos:column="37"/></name></name> <operator pos:line="364" pos:column="38">=<pos:position pos:line="364" pos:column="39"/></operator> <name pos:line="364" pos:column="40">TRUE<pos:position pos:line="364" pos:column="44"/></name></expr>;<pos:position pos:line="364" pos:column="45"/></expr_stmt></block></then></if>

                  <if pos:line="366" pos:column="19">if <condition pos:line="366" pos:column="22">(<expr><name pos:line="366" pos:column="23">httpcode<pos:position pos:line="366" pos:column="31"/></name> <operator pos:line="366" pos:column="32">==<pos:position pos:line="366" pos:column="34"/></operator> <literal type="number" pos:line="366" pos:column="35">304<pos:position pos:line="366" pos:column="38"/></literal></expr>)<pos:position pos:line="366" pos:column="39"/></condition><then pos:line="366" pos:column="39">
                    <comment type="block" pos:line="367" pos:column="21">/* (quote from RFC2616, section 10.3.5):
                     *  The 304 response MUST NOT contain a
                     * message-body, and thus is always
                     * terminated by the first empty line
                     * after the header fields.
                     */</comment>
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="373" pos:column="21">conn<pos:position pos:line="373" pos:column="25"/></name><operator pos:line="373" pos:column="25">-&gt;<pos:position pos:line="373" pos:column="30"/></operator><name pos:line="373" pos:column="27">size<pos:position pos:line="373" pos:column="31"/></name></name><operator pos:line="373" pos:column="31">=<pos:position pos:line="373" pos:column="32"/></operator><literal type="number" pos:line="373" pos:column="32">0<pos:position pos:line="373" pos:column="33"/></literal></expr>;<pos:position pos:line="373" pos:column="34"/></expr_stmt></block></then></if>
                }<pos:position pos:line="374" pos:column="18"/></block></then>
                <else pos:line="375" pos:column="17">else <block pos:line="375" pos:column="22">{
                  <expr_stmt><expr><name pos:line="376" pos:column="19">header<pos:position pos:line="376" pos:column="25"/></name> <operator pos:line="376" pos:column="26">=<pos:position pos:line="376" pos:column="27"/></operator> <name pos:line="376" pos:column="28">FALSE<pos:position pos:line="376" pos:column="33"/></name></expr>;<pos:position pos:line="376" pos:column="34"/></expr_stmt>	<comment type="block" pos:line="376" pos:column="41">/* this is not a header line */</comment>
                  <break pos:line="377" pos:column="19">break;<pos:position pos:line="377" pos:column="25"/></break>
                }<pos:position pos:line="378" pos:column="18"/></block></else></if>
              }<pos:position pos:line="379" pos:column="16"/></block></then></if>
              <comment type="block" pos:line="380" pos:column="15">/* check for Content-Length: header lines to get size */</comment>
              <if pos:line="381" pos:column="15">if <condition pos:line="381" pos:column="18">(<expr><call><name pos:line="381" pos:column="19">strnequal<pos:position pos:line="381" pos:column="28"/></name><argument_list pos:line="381" pos:column="28">(<argument><expr><literal type="string" pos:line="381" pos:column="29">"Content-Length:"<pos:position pos:line="381" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="381" pos:column="48">p<pos:position pos:line="381" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="381" pos:column="51">15<pos:position pos:line="381" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="381" pos:column="54"/></argument_list></call> <operator pos:line="381" pos:column="55">&amp;&amp;<pos:position pos:line="381" pos:column="65"/></operator>
                  <call><name pos:line="382" pos:column="19">sscanf<pos:position pos:line="382" pos:column="25"/></name> <argument_list pos:line="382" pos:column="26">(<argument><expr><name pos:line="382" pos:column="27">p<pos:position pos:line="382" pos:column="28"/></name><operator pos:line="382" pos:column="28">+<pos:position pos:line="382" pos:column="29"/></operator><literal type="number" pos:line="382" pos:column="29">15<pos:position pos:line="382" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="382" pos:column="33">" %ld"<pos:position pos:line="382" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="382" pos:column="41">&amp;<pos:position pos:line="382" pos:column="46"/></operator><name pos:line="382" pos:column="42">contentlength<pos:position pos:line="382" pos:column="55"/></name></expr></argument>)<pos:position pos:line="382" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="382" pos:column="57"/></condition><then pos:line="382" pos:column="57"> <block pos:line="382" pos:column="58">{
                <expr_stmt><expr><name><name pos:line="383" pos:column="17">conn<pos:position pos:line="383" pos:column="21"/></name><operator pos:line="383" pos:column="21">-&gt;<pos:position pos:line="383" pos:column="26"/></operator><name pos:line="383" pos:column="23">size<pos:position pos:line="383" pos:column="27"/></name></name> <operator pos:line="383" pos:column="28">=<pos:position pos:line="383" pos:column="29"/></operator> <name pos:line="383" pos:column="30">contentlength<pos:position pos:line="383" pos:column="43"/></name></expr>;<pos:position pos:line="383" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="384" pos:column="17">Curl_pgrsSetDownloadSize<pos:position pos:line="384" pos:column="41"/></name><argument_list pos:line="384" pos:column="41">(<argument><expr><name pos:line="384" pos:column="42">data<pos:position pos:line="384" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="384" pos:column="48">contentlength<pos:position pos:line="384" pos:column="61"/></name></expr></argument>)<pos:position pos:line="384" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="384" pos:column="63"/></expr_stmt>
              }<pos:position pos:line="385" pos:column="16"/></block></then>
              <elseif pos:line="386" pos:column="15">else <if pos:line="386" pos:column="20">if<condition pos:line="386" pos:column="22">(<expr><operator pos:line="386" pos:column="23">(<pos:position pos:line="386" pos:column="24"/></operator><name pos:line="386" pos:column="24">httpversion<pos:position pos:line="386" pos:column="35"/></name> <operator pos:line="386" pos:column="36">==<pos:position pos:line="386" pos:column="38"/></operator> <literal type="number" pos:line="386" pos:column="39">10<pos:position pos:line="386" pos:column="41"/></literal><operator pos:line="386" pos:column="41">)<pos:position pos:line="386" pos:column="42"/></operator> <operator pos:line="386" pos:column="43">&amp;&amp;<pos:position pos:line="386" pos:column="53"/></operator>
                      <name><name pos:line="387" pos:column="23">conn<pos:position pos:line="387" pos:column="27"/></name><operator pos:line="387" pos:column="27">-&gt;<pos:position pos:line="387" pos:column="32"/></operator><name pos:line="387" pos:column="29">bits<pos:position pos:line="387" pos:column="33"/></name><operator pos:line="387" pos:column="33">.<pos:position pos:line="387" pos:column="34"/></operator><name pos:line="387" pos:column="34">httpproxy<pos:position pos:line="387" pos:column="43"/></name></name> <operator pos:line="387" pos:column="44">&amp;&amp;<pos:position pos:line="387" pos:column="54"/></operator>
                      <call><name pos:line="388" pos:column="23">compareheader<pos:position pos:line="388" pos:column="36"/></name><argument_list pos:line="388" pos:column="36">(<argument><expr><name pos:line="388" pos:column="37">p<pos:position pos:line="388" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="388" pos:column="40">"Proxy-Connection:"<pos:position pos:line="388" pos:column="59"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="388" pos:column="61">"keep-alive"<pos:position pos:line="388" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="388" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="388" pos:column="75"/></condition><then pos:line="388" pos:column="75"> <block pos:line="388" pos:column="76">{
                <comment type="block" pos:line="389" pos:column="17">/*
                 * When a HTTP/1.0 reply comes when using a proxy, the
                 * 'Proxy-Connection: keep-alive' line tells us the
                 * connection will be kept alive for our pleasure.
                 * Default action for 1.0 is to close.
                 */</comment>
                <expr_stmt><expr><name><name pos:line="395" pos:column="17">conn<pos:position pos:line="395" pos:column="21"/></name><operator pos:line="395" pos:column="21">-&gt;<pos:position pos:line="395" pos:column="26"/></operator><name pos:line="395" pos:column="23">bits<pos:position pos:line="395" pos:column="27"/></name><operator pos:line="395" pos:column="27">.<pos:position pos:line="395" pos:column="28"/></operator><name pos:line="395" pos:column="28">close<pos:position pos:line="395" pos:column="33"/></name></name> <operator pos:line="395" pos:column="34">=<pos:position pos:line="395" pos:column="35"/></operator> <name pos:line="395" pos:column="36">FALSE<pos:position pos:line="395" pos:column="41"/></name></expr>;<pos:position pos:line="395" pos:column="42"/></expr_stmt> <comment type="block" pos:line="395" pos:column="43">/* don't close when done */</comment>
                <expr_stmt><expr><call><name pos:line="396" pos:column="17">infof<pos:position pos:line="396" pos:column="22"/></name><argument_list pos:line="396" pos:column="22">(<argument><expr><name pos:line="396" pos:column="23">data<pos:position pos:line="396" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="396" pos:column="29">"HTTP/1.0 proxy connection set to keep alive!\n"<pos:position pos:line="396" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="396" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="396" pos:column="79"/></expr_stmt>
              }<pos:position pos:line="397" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="398" pos:column="15">else <if pos:line="398" pos:column="20">if<condition pos:line="398" pos:column="22">(<expr><operator pos:line="398" pos:column="23">(<pos:position pos:line="398" pos:column="24"/></operator><name pos:line="398" pos:column="24">httpversion<pos:position pos:line="398" pos:column="35"/></name> <operator pos:line="398" pos:column="36">==<pos:position pos:line="398" pos:column="38"/></operator> <literal type="number" pos:line="398" pos:column="39">10<pos:position pos:line="398" pos:column="41"/></literal><operator pos:line="398" pos:column="41">)<pos:position pos:line="398" pos:column="42"/></operator> <operator pos:line="398" pos:column="43">&amp;&amp;<pos:position pos:line="398" pos:column="53"/></operator>
                      <call><name pos:line="399" pos:column="23">compareheader<pos:position pos:line="399" pos:column="36"/></name><argument_list pos:line="399" pos:column="36">(<argument><expr><name pos:line="399" pos:column="37">p<pos:position pos:line="399" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="399" pos:column="40">"Connection:"<pos:position pos:line="399" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="399" pos:column="55">"keep-alive"<pos:position pos:line="399" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="399" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="399" pos:column="69"/></condition><then pos:line="399" pos:column="69"> <block pos:line="399" pos:column="70">{
                <comment type="block" pos:line="400" pos:column="17">/*
                 * A HTTP/1.0 reply with the 'Connection: keep-alive' line
                 * tells us the connection will be kept alive for our
                 * pleasure.  Default action for 1.0 is to close.
                 *
                 * [RFC2068, section 19.7.1] */</comment>
                <expr_stmt><expr><name><name pos:line="406" pos:column="17">conn<pos:position pos:line="406" pos:column="21"/></name><operator pos:line="406" pos:column="21">-&gt;<pos:position pos:line="406" pos:column="26"/></operator><name pos:line="406" pos:column="23">bits<pos:position pos:line="406" pos:column="27"/></name><operator pos:line="406" pos:column="27">.<pos:position pos:line="406" pos:column="28"/></operator><name pos:line="406" pos:column="28">close<pos:position pos:line="406" pos:column="33"/></name></name> <operator pos:line="406" pos:column="34">=<pos:position pos:line="406" pos:column="35"/></operator> <name pos:line="406" pos:column="36">FALSE<pos:position pos:line="406" pos:column="41"/></name></expr>;<pos:position pos:line="406" pos:column="42"/></expr_stmt> <comment type="block" pos:line="406" pos:column="43">/* don't close when done */</comment>
                <expr_stmt><expr><call><name pos:line="407" pos:column="17">infof<pos:position pos:line="407" pos:column="22"/></name><argument_list pos:line="407" pos:column="22">(<argument><expr><name pos:line="407" pos:column="23">data<pos:position pos:line="407" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="407" pos:column="29">"HTTP/1.0 connection set to keep alive!\n"<pos:position pos:line="407" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="407" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="407" pos:column="73"/></expr_stmt>
              }<pos:position pos:line="408" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="409" pos:column="15">else <if pos:line="409" pos:column="20">if <condition pos:line="409" pos:column="23">(<expr><call><name pos:line="409" pos:column="24">compareheader<pos:position pos:line="409" pos:column="37"/></name><argument_list pos:line="409" pos:column="37">(<argument><expr><name pos:line="409" pos:column="38">p<pos:position pos:line="409" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="409" pos:column="41">"Connection:"<pos:position pos:line="409" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="409" pos:column="56">"close"<pos:position pos:line="409" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="409" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="409" pos:column="65"/></condition><then pos:line="409" pos:column="65"> <block pos:line="409" pos:column="66">{
                <comment type="block" pos:line="410" pos:column="17">/*
                 * [RFC 2616, section 8.1.2.1]
                 * "Connection: close" is HTTP/1.1 language and means that
                 * the connection will close when this request has been
                 * served.
                 */</comment>
                <expr_stmt><expr><name><name pos:line="416" pos:column="17">conn<pos:position pos:line="416" pos:column="21"/></name><operator pos:line="416" pos:column="21">-&gt;<pos:position pos:line="416" pos:column="26"/></operator><name pos:line="416" pos:column="23">bits<pos:position pos:line="416" pos:column="27"/></name><operator pos:line="416" pos:column="27">.<pos:position pos:line="416" pos:column="28"/></operator><name pos:line="416" pos:column="28">close<pos:position pos:line="416" pos:column="33"/></name></name> <operator pos:line="416" pos:column="34">=<pos:position pos:line="416" pos:column="35"/></operator> <name pos:line="416" pos:column="36">TRUE<pos:position pos:line="416" pos:column="40"/></name></expr>;<pos:position pos:line="416" pos:column="41"/></expr_stmt> <comment type="block" pos:line="416" pos:column="42">/* close when done */</comment>
              }<pos:position pos:line="417" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="418" pos:column="15">else <if pos:line="418" pos:column="20">if <condition pos:line="418" pos:column="23">(<expr><call><name pos:line="418" pos:column="24">compareheader<pos:position pos:line="418" pos:column="37"/></name><argument_list pos:line="418" pos:column="37">(<argument><expr><name pos:line="418" pos:column="38">p<pos:position pos:line="418" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="418" pos:column="41">"Transfer-Encoding:"<pos:position pos:line="418" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="418" pos:column="63">"chunked"<pos:position pos:line="418" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="418" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="418" pos:column="74"/></condition><then pos:line="418" pos:column="74"> <block pos:line="418" pos:column="75">{
                <comment type="block" pos:line="419" pos:column="17">/*
                 * [RFC 2616, section 3.6.1] A 'chunked' transfer encoding
                 * means that the server will send a series of "chunks". Each
                 * chunk starts with line with info (including size of the
                 * coming block) (terminated with CRLF), then a block of data
                 * with the previously mentioned size. There can be any amount
                 * of chunks, and a chunk-data set to zero signals the
                 * end-of-chunks. */</comment>
                <expr_stmt><expr><name><name pos:line="427" pos:column="17">conn<pos:position pos:line="427" pos:column="21"/></name><operator pos:line="427" pos:column="21">-&gt;<pos:position pos:line="427" pos:column="26"/></operator><name pos:line="427" pos:column="23">bits<pos:position pos:line="427" pos:column="27"/></name><operator pos:line="427" pos:column="27">.<pos:position pos:line="427" pos:column="28"/></operator><name pos:line="427" pos:column="28">chunk<pos:position pos:line="427" pos:column="33"/></name></name> <operator pos:line="427" pos:column="34">=<pos:position pos:line="427" pos:column="35"/></operator> <name pos:line="427" pos:column="36">TRUE<pos:position pos:line="427" pos:column="40"/></name></expr>;<pos:position pos:line="427" pos:column="41"/></expr_stmt> <comment type="block" pos:line="427" pos:column="42">/* chunks coming our way */</comment>

                <comment type="block" pos:line="429" pos:column="17">/* init our chunky engine */</comment>
                <expr_stmt><expr><call><name pos:line="430" pos:column="17">Curl_httpchunk_init<pos:position pos:line="430" pos:column="36"/></name><argument_list pos:line="430" pos:column="36">(<argument><expr><name pos:line="430" pos:column="37">conn<pos:position pos:line="430" pos:column="41"/></name></expr></argument>)<pos:position pos:line="430" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="430" pos:column="43"/></expr_stmt>
              }<pos:position pos:line="431" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="432" pos:column="15">else <if pos:line="432" pos:column="20">if <condition pos:line="432" pos:column="23">(<expr><call><name pos:line="432" pos:column="24">strnequal<pos:position pos:line="432" pos:column="33"/></name><argument_list pos:line="432" pos:column="33">(<argument><expr><literal type="string" pos:line="432" pos:column="34">"Content-Range:"<pos:position pos:line="432" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="432" pos:column="52">p<pos:position pos:line="432" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="432" pos:column="55">14<pos:position pos:line="432" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="432" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="432" pos:column="59"/></condition><then pos:line="432" pos:column="59"> <block pos:line="432" pos:column="60">{
                <if pos:line="433" pos:column="17">if <condition pos:line="433" pos:column="20">(<expr><call><name pos:line="433" pos:column="21">sscanf<pos:position pos:line="433" pos:column="27"/></name> <argument_list pos:line="433" pos:column="28">(<argument><expr><name pos:line="433" pos:column="29">p<pos:position pos:line="433" pos:column="30"/></name><operator pos:line="433" pos:column="30">+<pos:position pos:line="433" pos:column="31"/></operator><literal type="number" pos:line="433" pos:column="31">14<pos:position pos:line="433" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="433" pos:column="35">" bytes %d-"<pos:position pos:line="433" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="433" pos:column="49">&amp;<pos:position pos:line="433" pos:column="54"/></operator><name pos:line="433" pos:column="50">offset<pos:position pos:line="433" pos:column="56"/></name></expr></argument>)<pos:position pos:line="433" pos:column="57"/></argument_list></call> <operator pos:line="433" pos:column="58">||<pos:position pos:line="433" pos:column="60"/></operator>
                    <call><name pos:line="434" pos:column="21">sscanf<pos:position pos:line="434" pos:column="27"/></name> <argument_list pos:line="434" pos:column="28">(<argument><expr><name pos:line="434" pos:column="29">p<pos:position pos:line="434" pos:column="30"/></name><operator pos:line="434" pos:column="30">+<pos:position pos:line="434" pos:column="31"/></operator><literal type="number" pos:line="434" pos:column="31">14<pos:position pos:line="434" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="434" pos:column="35">" bytes: %d-"<pos:position pos:line="434" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="434" pos:column="50">&amp;<pos:position pos:line="434" pos:column="55"/></operator><name pos:line="434" pos:column="51">offset<pos:position pos:line="434" pos:column="57"/></name></expr></argument>)<pos:position pos:line="434" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="434" pos:column="59"/></condition><then pos:line="434" pos:column="59"> <block pos:line="434" pos:column="60">{
                  <comment type="block" pos:line="435" pos:column="19">/* This second format was added August 1st 2000 by Igor
                     Khristophorov since Sun's webserver JavaWebServer/1.1.1
                     obviously sends the header this way! :-( */</comment>
                  <if pos:line="438" pos:column="19">if <condition pos:line="438" pos:column="22">(<expr><name><name pos:line="438" pos:column="23">conn<pos:position pos:line="438" pos:column="27"/></name><operator pos:line="438" pos:column="27">-&gt;<pos:position pos:line="438" pos:column="32"/></operator><name pos:line="438" pos:column="29">resume_from<pos:position pos:line="438" pos:column="40"/></name></name> <operator pos:line="438" pos:column="41">==<pos:position pos:line="438" pos:column="43"/></operator> <name pos:line="438" pos:column="44">offset<pos:position pos:line="438" pos:column="50"/></name></expr>)<pos:position pos:line="438" pos:column="51"/></condition><then pos:line="438" pos:column="51"> <block pos:line="438" pos:column="52">{
                    <comment type="block" pos:line="439" pos:column="21">/* we asked for a resume and we got it */</comment>
                    <expr_stmt><expr><name pos:line="440" pos:column="21">content_range<pos:position pos:line="440" pos:column="34"/></name> <operator pos:line="440" pos:column="35">=<pos:position pos:line="440" pos:column="36"/></operator> <name pos:line="440" pos:column="37">TRUE<pos:position pos:line="440" pos:column="41"/></name></expr>;<pos:position pos:line="440" pos:column="42"/></expr_stmt>
                  }<pos:position pos:line="441" pos:column="20"/></block></then></if>
                }<pos:position pos:line="442" pos:column="18"/></block></then></if>
              }<pos:position pos:line="443" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="444" pos:column="15">else <if pos:line="444" pos:column="20">if<condition pos:line="444" pos:column="22">(<expr><name><name pos:line="444" pos:column="23">data<pos:position pos:line="444" pos:column="27"/></name><operator pos:line="444" pos:column="27">-&gt;<pos:position pos:line="444" pos:column="32"/></operator><name pos:line="444" pos:column="29">cookies<pos:position pos:line="444" pos:column="36"/></name></name> <operator pos:line="444" pos:column="37">&amp;&amp;<pos:position pos:line="444" pos:column="47"/></operator>
                      <call><name pos:line="445" pos:column="23">strnequal<pos:position pos:line="445" pos:column="32"/></name><argument_list pos:line="445" pos:column="32">(<argument><expr><literal type="string" pos:line="445" pos:column="33">"Set-Cookie:"<pos:position pos:line="445" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="445" pos:column="48">p<pos:position pos:line="445" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="445" pos:column="51">11<pos:position pos:line="445" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="445" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="445" pos:column="55"/></condition><then pos:line="445" pos:column="55"> <block pos:line="445" pos:column="56">{
                <expr_stmt><expr><call><name pos:line="446" pos:column="17">Curl_cookie_add<pos:position pos:line="446" pos:column="32"/></name><argument_list pos:line="446" pos:column="32">(<argument><expr><name><name pos:line="446" pos:column="33">data<pos:position pos:line="446" pos:column="37"/></name><operator pos:line="446" pos:column="37">-&gt;<pos:position pos:line="446" pos:column="42"/></operator><name pos:line="446" pos:column="39">cookies<pos:position pos:line="446" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="446" pos:column="48">TRUE<pos:position pos:line="446" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="446" pos:column="54">&amp;<pos:position pos:line="446" pos:column="59"/></operator><name><name pos:line="446" pos:column="55">p<pos:position pos:line="446" pos:column="56"/></name><index pos:line="446" pos:column="56">[<expr><literal type="number" pos:line="446" pos:column="57">12<pos:position pos:line="446" pos:column="59"/></literal></expr>]<pos:position pos:line="446" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="446" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="446" pos:column="62"/></expr_stmt>
              }<pos:position pos:line="447" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="448" pos:column="15">else <if pos:line="448" pos:column="20">if<condition pos:line="448" pos:column="22">(<expr><call><name pos:line="448" pos:column="23">strnequal<pos:position pos:line="448" pos:column="32"/></name><argument_list pos:line="448" pos:column="32">(<argument><expr><literal type="string" pos:line="448" pos:column="33">"Last-Modified:"<pos:position pos:line="448" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="448" pos:column="51">p<pos:position pos:line="448" pos:column="52"/></name></expr></argument>,
                                <argument><expr><call><name pos:line="449" pos:column="33">strlen<pos:position pos:line="449" pos:column="39"/></name><argument_list pos:line="449" pos:column="39">(<argument><expr><literal type="string" pos:line="449" pos:column="40">"Last-Modified:"<pos:position pos:line="449" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="449" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="449" pos:column="58"/></argument_list></call> <operator pos:line="449" pos:column="59">&amp;&amp;<pos:position pos:line="449" pos:column="69"/></operator>
                      <operator pos:line="450" pos:column="23">(<pos:position pos:line="450" pos:column="24"/></operator><name><name pos:line="450" pos:column="24">data<pos:position pos:line="450" pos:column="28"/></name><operator pos:line="450" pos:column="28">-&gt;<pos:position pos:line="450" pos:column="33"/></operator><name pos:line="450" pos:column="30">set<pos:position pos:line="450" pos:column="33"/></name><operator pos:line="450" pos:column="33">.<pos:position pos:line="450" pos:column="34"/></operator><name pos:line="450" pos:column="34">timecondition<pos:position pos:line="450" pos:column="47"/></name></name> <operator pos:line="450" pos:column="48">||<pos:position pos:line="450" pos:column="50"/></operator> <name><name pos:line="450" pos:column="51">data<pos:position pos:line="450" pos:column="55"/></name><operator pos:line="450" pos:column="55">-&gt;<pos:position pos:line="450" pos:column="60"/></operator><name pos:line="450" pos:column="57">set<pos:position pos:line="450" pos:column="60"/></name><operator pos:line="450" pos:column="60">.<pos:position pos:line="450" pos:column="61"/></operator><name pos:line="450" pos:column="61">get_filetime<pos:position pos:line="450" pos:column="73"/></name></name><operator pos:line="450" pos:column="73">)<pos:position pos:line="450" pos:column="74"/></operator></expr> )<pos:position pos:line="450" pos:column="76"/></condition><then pos:line="450" pos:column="76"> <block pos:line="450" pos:column="77">{
                <decl_stmt><decl><type><name pos:line="451" pos:column="17">time_t<pos:position pos:line="451" pos:column="23"/></name></type> <name pos:line="451" pos:column="24">secs<pos:position pos:line="451" pos:column="28"/></name><init pos:line="451" pos:column="28">=<expr><call><name pos:line="451" pos:column="29">time<pos:position pos:line="451" pos:column="33"/></name><argument_list pos:line="451" pos:column="33">(<argument><expr><name pos:line="451" pos:column="34">NULL<pos:position pos:line="451" pos:column="38"/></name></expr></argument>)<pos:position pos:line="451" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="451" pos:column="40"/></decl_stmt>
                <expr_stmt><expr><name pos:line="452" pos:column="17">timeofdoc<pos:position pos:line="452" pos:column="26"/></name> <operator pos:line="452" pos:column="27">=<pos:position pos:line="452" pos:column="28"/></operator> <call><name pos:line="452" pos:column="29">curl_getdate<pos:position pos:line="452" pos:column="41"/></name><argument_list pos:line="452" pos:column="41">(<argument><expr><name pos:line="452" pos:column="42">p<pos:position pos:line="452" pos:column="43"/></name><operator pos:line="452" pos:column="43">+<pos:position pos:line="452" pos:column="44"/></operator><call><name pos:line="452" pos:column="44">strlen<pos:position pos:line="452" pos:column="50"/></name><argument_list pos:line="452" pos:column="50">(<argument><expr><literal type="string" pos:line="452" pos:column="51">"Last-Modified:"<pos:position pos:line="452" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="452" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="452" pos:column="70">&amp;<pos:position pos:line="452" pos:column="75"/></operator><name pos:line="452" pos:column="71">secs<pos:position pos:line="452" pos:column="75"/></name></expr></argument>)<pos:position pos:line="452" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="452" pos:column="77"/></expr_stmt>
                <if pos:line="453" pos:column="17">if<condition pos:line="453" pos:column="19">(<expr><name><name pos:line="453" pos:column="20">data<pos:position pos:line="453" pos:column="24"/></name><operator pos:line="453" pos:column="24">-&gt;<pos:position pos:line="453" pos:column="29"/></operator><name pos:line="453" pos:column="26">set<pos:position pos:line="453" pos:column="29"/></name><operator pos:line="453" pos:column="29">.<pos:position pos:line="453" pos:column="30"/></operator><name pos:line="453" pos:column="30">get_filetime<pos:position pos:line="453" pos:column="42"/></name></name></expr>)<pos:position pos:line="453" pos:column="43"/></condition><then pos:line="453" pos:column="43">
                  <block type="pseudo"><expr_stmt><expr><name><name pos:line="454" pos:column="19">data<pos:position pos:line="454" pos:column="23"/></name><operator pos:line="454" pos:column="23">-&gt;<pos:position pos:line="454" pos:column="28"/></operator><name pos:line="454" pos:column="25">info<pos:position pos:line="454" pos:column="29"/></name><operator pos:line="454" pos:column="29">.<pos:position pos:line="454" pos:column="30"/></operator><name pos:line="454" pos:column="30">filetime<pos:position pos:line="454" pos:column="38"/></name></name> <operator pos:line="454" pos:column="39">=<pos:position pos:line="454" pos:column="40"/></operator> <name pos:line="454" pos:column="41">timeofdoc<pos:position pos:line="454" pos:column="50"/></name></expr>;<pos:position pos:line="454" pos:column="51"/></expr_stmt></block></then></if>
              }<pos:position pos:line="455" pos:column="16"/></block></then></if></elseif>
              <elseif pos:line="456" pos:column="15">else <if pos:line="456" pos:column="20">if <condition pos:line="456" pos:column="23">(<expr><operator pos:line="456" pos:column="24">(<pos:position pos:line="456" pos:column="25"/></operator><name pos:line="456" pos:column="25">httpcode<pos:position pos:line="456" pos:column="33"/></name> <operator pos:line="456" pos:column="34">&gt;=<pos:position pos:line="456" pos:column="39"/></operator> <literal type="number" pos:line="456" pos:column="37">300<pos:position pos:line="456" pos:column="40"/></literal> <operator pos:line="456" pos:column="41">&amp;&amp;<pos:position pos:line="456" pos:column="51"/></operator> <name pos:line="456" pos:column="44">httpcode<pos:position pos:line="456" pos:column="52"/></name> <operator pos:line="456" pos:column="53">&lt;<pos:position pos:line="456" pos:column="57"/></operator> <literal type="number" pos:line="456" pos:column="55">400<pos:position pos:line="456" pos:column="58"/></literal><operator pos:line="456" pos:column="58">)<pos:position pos:line="456" pos:column="59"/></operator> <operator pos:line="456" pos:column="60">&amp;&amp;<pos:position pos:line="456" pos:column="70"/></operator>
                       <operator pos:line="457" pos:column="24">(<pos:position pos:line="457" pos:column="25"/></operator><name><name pos:line="457" pos:column="25">data<pos:position pos:line="457" pos:column="29"/></name><operator pos:line="457" pos:column="29">-&gt;<pos:position pos:line="457" pos:column="34"/></operator><name pos:line="457" pos:column="31">set<pos:position pos:line="457" pos:column="34"/></name><operator pos:line="457" pos:column="34">.<pos:position pos:line="457" pos:column="35"/></operator><name pos:line="457" pos:column="35">http_follow_location<pos:position pos:line="457" pos:column="55"/></name></name><operator pos:line="457" pos:column="55">)<pos:position pos:line="457" pos:column="56"/></operator> <operator pos:line="457" pos:column="57">&amp;&amp;<pos:position pos:line="457" pos:column="67"/></operator>
                       <call><name pos:line="458" pos:column="24">strnequal<pos:position pos:line="458" pos:column="33"/></name><argument_list pos:line="458" pos:column="33">(<argument><expr><literal type="string" pos:line="458" pos:column="34">"Location:"<pos:position pos:line="458" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="458" pos:column="47">p<pos:position pos:line="458" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="458" pos:column="50">9<pos:position pos:line="458" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="458" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="458" pos:column="53"/></condition><then pos:line="458" pos:column="53"> <block pos:line="458" pos:column="54">{
                <comment type="block" pos:line="459" pos:column="17">/* this is the URL that the server advices us to get instead */</comment>
                <decl_stmt><decl><type><name pos:line="460" pos:column="17">char<pos:position pos:line="460" pos:column="21"/></name> <modifier pos:line="460" pos:column="22">*<pos:position pos:line="460" pos:column="23"/></modifier></type><name pos:line="460" pos:column="23">ptr<pos:position pos:line="460" pos:column="26"/></name></decl>;<pos:position pos:line="460" pos:column="27"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="461" pos:column="17">char<pos:position pos:line="461" pos:column="21"/></name> <modifier pos:line="461" pos:column="22">*<pos:position pos:line="461" pos:column="23"/></modifier></type><name pos:line="461" pos:column="23">start<pos:position pos:line="461" pos:column="28"/></name><init pos:line="461" pos:column="28">=<expr><name pos:line="461" pos:column="29">p<pos:position pos:line="461" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="461" pos:column="31"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="462" pos:column="17">char<pos:position pos:line="462" pos:column="21"/></name></type> <name pos:line="462" pos:column="22">backup<pos:position pos:line="462" pos:column="28"/></name></decl>;<pos:position pos:line="462" pos:column="29"/></decl_stmt>

                <expr_stmt><expr><name pos:line="464" pos:column="17">start<pos:position pos:line="464" pos:column="22"/></name> <operator pos:line="464" pos:column="23">+=<pos:position pos:line="464" pos:column="25"/></operator> <literal type="number" pos:line="464" pos:column="26">9<pos:position pos:line="464" pos:column="27"/></literal></expr>;<pos:position pos:line="464" pos:column="28"/></expr_stmt> <comment type="block" pos:line="464" pos:column="29">/* pass "Location:" */</comment>

                <comment type="block" pos:line="466" pos:column="17">/* Skip spaces and tabs. We do this to support multiple
                   white spaces after the "Location:" keyword. */</comment>
                <while pos:line="468" pos:column="17">while<condition pos:line="468" pos:column="22">(<expr><operator pos:line="468" pos:column="23">*<pos:position pos:line="468" pos:column="24"/></operator><name pos:line="468" pos:column="24">start<pos:position pos:line="468" pos:column="29"/></name> <operator pos:line="468" pos:column="30">&amp;&amp;<pos:position pos:line="468" pos:column="40"/></operator> <call><name pos:line="468" pos:column="33">isspace<pos:position pos:line="468" pos:column="40"/></name><argument_list pos:line="468" pos:column="40">(<argument><expr><operator pos:line="468" pos:column="41">(<pos:position pos:line="468" pos:column="42"/></operator><name pos:line="468" pos:column="42">int<pos:position pos:line="468" pos:column="45"/></name><operator pos:line="468" pos:column="45">)<pos:position pos:line="468" pos:column="46"/></operator><operator pos:line="468" pos:column="46">*<pos:position pos:line="468" pos:column="47"/></operator><name pos:line="468" pos:column="47">start<pos:position pos:line="468" pos:column="52"/></name></expr></argument> )<pos:position pos:line="468" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="468" pos:column="55"/></condition>
                  <block type="pseudo"><expr_stmt><expr><name pos:line="469" pos:column="19">start<pos:position pos:line="469" pos:column="24"/></name><operator pos:line="469" pos:column="24">++<pos:position pos:line="469" pos:column="26"/></operator></expr>;<pos:position pos:line="469" pos:column="27"/></expr_stmt></block></while>
                <expr_stmt><expr><name pos:line="470" pos:column="17">ptr<pos:position pos:line="470" pos:column="20"/></name> <operator pos:line="470" pos:column="21">=<pos:position pos:line="470" pos:column="22"/></operator> <name pos:line="470" pos:column="23">start<pos:position pos:line="470" pos:column="28"/></name></expr>;<pos:position pos:line="470" pos:column="29"/></expr_stmt> <comment type="block" pos:line="470" pos:column="30">/* start scanning here */</comment>

                <comment type="block" pos:line="472" pos:column="17">/* scan through the string to find the end */</comment>
                <while pos:line="473" pos:column="17">while<condition pos:line="473" pos:column="22">(<expr><operator pos:line="473" pos:column="23">*<pos:position pos:line="473" pos:column="24"/></operator><name pos:line="473" pos:column="24">ptr<pos:position pos:line="473" pos:column="27"/></name> <operator pos:line="473" pos:column="28">&amp;&amp;<pos:position pos:line="473" pos:column="38"/></operator> <operator pos:line="473" pos:column="31">!<pos:position pos:line="473" pos:column="32"/></operator><call><name pos:line="473" pos:column="32">isspace<pos:position pos:line="473" pos:column="39"/></name><argument_list pos:line="473" pos:column="39">(<argument><expr><operator pos:line="473" pos:column="40">(<pos:position pos:line="473" pos:column="41"/></operator><name pos:line="473" pos:column="41">int<pos:position pos:line="473" pos:column="44"/></name><operator pos:line="473" pos:column="44">)<pos:position pos:line="473" pos:column="45"/></operator><operator pos:line="473" pos:column="45">*<pos:position pos:line="473" pos:column="46"/></operator><name pos:line="473" pos:column="46">ptr<pos:position pos:line="473" pos:column="49"/></name></expr></argument>)<pos:position pos:line="473" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="473" pos:column="51"/></condition>
                  <block type="pseudo"><expr_stmt><expr><name pos:line="474" pos:column="19">ptr<pos:position pos:line="474" pos:column="22"/></name><operator pos:line="474" pos:column="22">++<pos:position pos:line="474" pos:column="24"/></operator></expr>;<pos:position pos:line="474" pos:column="25"/></expr_stmt></block></while>
                <expr_stmt><expr><name pos:line="475" pos:column="17">backup<pos:position pos:line="475" pos:column="23"/></name> <operator pos:line="475" pos:column="24">=<pos:position pos:line="475" pos:column="25"/></operator> <operator pos:line="475" pos:column="26">*<pos:position pos:line="475" pos:column="27"/></operator><name pos:line="475" pos:column="27">ptr<pos:position pos:line="475" pos:column="30"/></name></expr>;<pos:position pos:line="475" pos:column="31"/></expr_stmt> <comment type="block" pos:line="475" pos:column="32">/* store the ending letter */</comment>
                <expr_stmt><expr><operator pos:line="476" pos:column="17">*<pos:position pos:line="476" pos:column="18"/></operator><name pos:line="476" pos:column="18">ptr<pos:position pos:line="476" pos:column="21"/></name> <operator pos:line="476" pos:column="22">=<pos:position pos:line="476" pos:column="23"/></operator> <literal type="char" pos:line="476" pos:column="24">'\0'<pos:position pos:line="476" pos:column="28"/></literal></expr>;<pos:position pos:line="476" pos:column="29"/></expr_stmt>   <comment type="block" pos:line="476" pos:column="32">/* zero terminate */</comment>
                <expr_stmt><expr><name><name pos:line="477" pos:column="17">conn<pos:position pos:line="477" pos:column="21"/></name><operator pos:line="477" pos:column="21">-&gt;<pos:position pos:line="477" pos:column="26"/></operator><name pos:line="477" pos:column="23">newurl<pos:position pos:line="477" pos:column="29"/></name></name> <operator pos:line="477" pos:column="30">=<pos:position pos:line="477" pos:column="31"/></operator> <call><name pos:line="477" pos:column="32">strdup<pos:position pos:line="477" pos:column="38"/></name><argument_list pos:line="477" pos:column="38">(<argument><expr><name pos:line="477" pos:column="39">start<pos:position pos:line="477" pos:column="44"/></name></expr></argument>)<pos:position pos:line="477" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="477" pos:column="46"/></expr_stmt> <comment type="block" pos:line="477" pos:column="47">/* clone string */</comment>
                <expr_stmt><expr><operator pos:line="478" pos:column="17">*<pos:position pos:line="478" pos:column="18"/></operator><name pos:line="478" pos:column="18">ptr<pos:position pos:line="478" pos:column="21"/></name> <operator pos:line="478" pos:column="22">=<pos:position pos:line="478" pos:column="23"/></operator> <name pos:line="478" pos:column="24">backup<pos:position pos:line="478" pos:column="30"/></name></expr>;<pos:position pos:line="478" pos:column="31"/></expr_stmt> <comment type="block" pos:line="478" pos:column="32">/* restore ending letter */</comment>
              }<pos:position pos:line="479" pos:column="16"/></block></then></if></elseif></if>

              <comment type="block" pos:line="481" pos:column="15">/*
               * End of header-checks. Write them to the client.
               */</comment>

              <expr_stmt><expr><name pos:line="485" pos:column="15">writetype<pos:position pos:line="485" pos:column="24"/></name> <operator pos:line="485" pos:column="25">=<pos:position pos:line="485" pos:column="26"/></operator> <name pos:line="485" pos:column="27">CLIENTWRITE_HEADER<pos:position pos:line="485" pos:column="45"/></name></expr>;<pos:position pos:line="485" pos:column="46"/></expr_stmt>
              <if pos:line="486" pos:column="15">if <condition pos:line="486" pos:column="18">(<expr><name><name pos:line="486" pos:column="19">data<pos:position pos:line="486" pos:column="23"/></name><operator pos:line="486" pos:column="23">-&gt;<pos:position pos:line="486" pos:column="28"/></operator><name pos:line="486" pos:column="25">set<pos:position pos:line="486" pos:column="28"/></name><operator pos:line="486" pos:column="28">.<pos:position pos:line="486" pos:column="29"/></operator><name pos:line="486" pos:column="29">http_include_header<pos:position pos:line="486" pos:column="48"/></name></name></expr>)<pos:position pos:line="486" pos:column="49"/></condition><then pos:line="486" pos:column="49">
                <block type="pseudo"><expr_stmt><expr><name pos:line="487" pos:column="17">writetype<pos:position pos:line="487" pos:column="26"/></name> <operator pos:line="487" pos:column="27">|=<pos:position pos:line="487" pos:column="29"/></operator> <name pos:line="487" pos:column="30">CLIENTWRITE_BODY<pos:position pos:line="487" pos:column="46"/></name></expr>;<pos:position pos:line="487" pos:column="47"/></expr_stmt></block></then></if>

              <expr_stmt><expr><name pos:line="489" pos:column="15">urg<pos:position pos:line="489" pos:column="18"/></name> <operator pos:line="489" pos:column="19">=<pos:position pos:line="489" pos:column="20"/></operator> <call><name pos:line="489" pos:column="21">Curl_client_write<pos:position pos:line="489" pos:column="38"/></name><argument_list pos:line="489" pos:column="38">(<argument><expr><name pos:line="489" pos:column="39">data<pos:position pos:line="489" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="489" pos:column="45">writetype<pos:position pos:line="489" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="489" pos:column="56">p<pos:position pos:line="489" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="489" pos:column="59">hbuflen<pos:position pos:line="489" pos:column="66"/></name></expr></argument>)<pos:position pos:line="489" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="489" pos:column="68"/></expr_stmt>
              <if pos:line="490" pos:column="15">if<condition pos:line="490" pos:column="17">(<expr><name pos:line="490" pos:column="18">urg<pos:position pos:line="490" pos:column="21"/></name></expr>)<pos:position pos:line="490" pos:column="22"/></condition><then pos:line="490" pos:column="22">
                <block type="pseudo"><return pos:line="491" pos:column="17">return <expr><name pos:line="491" pos:column="24">urg<pos:position pos:line="491" pos:column="27"/></name></expr>;<pos:position pos:line="491" pos:column="28"/></return></block></then></if>

              <expr_stmt><expr><name><name pos:line="493" pos:column="15">data<pos:position pos:line="493" pos:column="19"/></name><operator pos:line="493" pos:column="19">-&gt;<pos:position pos:line="493" pos:column="24"/></operator><name pos:line="493" pos:column="21">info<pos:position pos:line="493" pos:column="25"/></name><operator pos:line="493" pos:column="25">.<pos:position pos:line="493" pos:column="26"/></operator><name pos:line="493" pos:column="26">header_size<pos:position pos:line="493" pos:column="37"/></name></name> <operator pos:line="493" pos:column="38">+=<pos:position pos:line="493" pos:column="40"/></operator> <name pos:line="493" pos:column="41">hbuflen<pos:position pos:line="493" pos:column="48"/></name></expr>;<pos:position pos:line="493" pos:column="49"/></expr_stmt>
              
              <comment type="block" pos:line="495" pos:column="15">/* reset hbufp pointer &amp;&amp; hbuflen */</comment>
              <expr_stmt><expr><name pos:line="496" pos:column="15">hbufp<pos:position pos:line="496" pos:column="20"/></name> <operator pos:line="496" pos:column="21">=<pos:position pos:line="496" pos:column="22"/></operator> <name><name pos:line="496" pos:column="23">data<pos:position pos:line="496" pos:column="27"/></name><operator pos:line="496" pos:column="27">-&gt;<pos:position pos:line="496" pos:column="32"/></operator><name pos:line="496" pos:column="29">state<pos:position pos:line="496" pos:column="34"/></name><operator pos:line="496" pos:column="34">.<pos:position pos:line="496" pos:column="35"/></operator><name pos:line="496" pos:column="35">headerbuff<pos:position pos:line="496" pos:column="45"/></name></name></expr>;<pos:position pos:line="496" pos:column="46"/></expr_stmt>
              <expr_stmt><expr><name pos:line="497" pos:column="15">hbuflen<pos:position pos:line="497" pos:column="22"/></name> <operator pos:line="497" pos:column="23">=<pos:position pos:line="497" pos:column="24"/></operator> <literal type="number" pos:line="497" pos:column="25">0<pos:position pos:line="497" pos:column="26"/></literal></expr>;<pos:position pos:line="497" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="498" pos:column="14"/></block>
            while <condition pos:line="499" pos:column="19">(<expr><operator pos:line="499" pos:column="20">*<pos:position pos:line="499" pos:column="21"/></operator><name pos:line="499" pos:column="21">str<pos:position pos:line="499" pos:column="24"/></name></expr>)<pos:position pos:line="499" pos:column="25"/></condition>;<pos:position pos:line="499" pos:column="26"/></do>		<comment type="block" pos:line="499" pos:column="41">/* header line within buffer */</comment>

            <comment type="block" pos:line="501" pos:column="13">/* We might have reached the end of the header part here, but
               there might be a non-header part left in the end of the read
               buffer. */</comment>

            <if pos:line="505" pos:column="13">if <condition pos:line="505" pos:column="16">(<expr><operator pos:line="505" pos:column="17">!<pos:position pos:line="505" pos:column="18"/></operator><name pos:line="505" pos:column="18">header<pos:position pos:line="505" pos:column="24"/></name></expr>)<pos:position pos:line="505" pos:column="25"/></condition><then pos:line="505" pos:column="25"> <block pos:line="505" pos:column="26">{
              <comment type="block" pos:line="506" pos:column="15">/* the next token and forward is not part of
                 the header! */</comment>

              <comment type="block" pos:line="509" pos:column="15">/* we subtract the remaining header size from the buffer */</comment>
              <expr_stmt><expr><name pos:line="510" pos:column="15">nread<pos:position pos:line="510" pos:column="20"/></name> <operator pos:line="510" pos:column="21">-=<pos:position pos:line="510" pos:column="23"/></operator> <operator pos:line="510" pos:column="24">(<pos:position pos:line="510" pos:column="25"/></operator><name pos:line="510" pos:column="25">str<pos:position pos:line="510" pos:column="28"/></name> <operator pos:line="510" pos:column="29">-<pos:position pos:line="510" pos:column="30"/></operator> <name pos:line="510" pos:column="31">buf<pos:position pos:line="510" pos:column="34"/></name><operator pos:line="510" pos:column="34">)<pos:position pos:line="510" pos:column="35"/></operator></expr>;<pos:position pos:line="510" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="511" pos:column="14"/></block></then></if>

          }<pos:position pos:line="513" pos:column="12"/></block></then></if>			<comment type="block" pos:line="513" pos:column="33">/* end if header mode */</comment>

          <comment type="block" pos:line="515" pos:column="11">/* This is not an 'else if' since it may be a rest from the header
             parsing, where the beginning of the buffer is headers and the end
             is non-headers. */</comment>
          <if pos:line="518" pos:column="11">if <condition pos:line="518" pos:column="14">(<expr><name pos:line="518" pos:column="15">str<pos:position pos:line="518" pos:column="18"/></name> <operator pos:line="518" pos:column="19">&amp;&amp;<pos:position pos:line="518" pos:column="29"/></operator> <operator pos:line="518" pos:column="22">!<pos:position pos:line="518" pos:column="23"/></operator><name pos:line="518" pos:column="23">header<pos:position pos:line="518" pos:column="29"/></name> <operator pos:line="518" pos:column="30">&amp;&amp;<pos:position pos:line="518" pos:column="40"/></operator> <operator pos:line="518" pos:column="33">(<pos:position pos:line="518" pos:column="34"/></operator><operator pos:line="518" pos:column="34">(<pos:position pos:line="518" pos:column="35"/></operator><name pos:line="518" pos:column="35">signed<pos:position pos:line="518" pos:column="41"/></name> <name pos:line="518" pos:column="42">int<pos:position pos:line="518" pos:column="45"/></name><operator pos:line="518" pos:column="45">)<pos:position pos:line="518" pos:column="46"/></operator><name pos:line="518" pos:column="46">nread<pos:position pos:line="518" pos:column="51"/></name> <operator pos:line="518" pos:column="52">&gt;<pos:position pos:line="518" pos:column="56"/></operator> <literal type="number" pos:line="518" pos:column="54">0<pos:position pos:line="518" pos:column="55"/></literal><operator pos:line="518" pos:column="55">)<pos:position pos:line="518" pos:column="56"/></operator></expr>)<pos:position pos:line="518" pos:column="57"/></condition><then pos:line="518" pos:column="57"> <block pos:line="518" pos:column="58">{
            
            <if pos:line="520" pos:column="13">if<condition pos:line="520" pos:column="15">(<expr><literal type="number" pos:line="520" pos:column="16">0<pos:position pos:line="520" pos:column="17"/></literal> <operator pos:line="520" pos:column="18">==<pos:position pos:line="520" pos:column="20"/></operator> <name pos:line="520" pos:column="21">bodywrites<pos:position pos:line="520" pos:column="31"/></name></expr>)<pos:position pos:line="520" pos:column="32"/></condition><then pos:line="520" pos:column="32"> <block pos:line="520" pos:column="33">{
              <comment type="block" pos:line="521" pos:column="15">/* These checks are only made the first time we are about to
                 write a piece of the body */</comment>
              <if pos:line="523" pos:column="15">if<condition pos:line="523" pos:column="17">(<expr><name><name pos:line="523" pos:column="18">conn<pos:position pos:line="523" pos:column="22"/></name><operator pos:line="523" pos:column="22">-&gt;<pos:position pos:line="523" pos:column="27"/></operator><name pos:line="523" pos:column="24">protocol<pos:position pos:line="523" pos:column="32"/></name></name><operator pos:line="523" pos:column="32">&amp;<pos:position pos:line="523" pos:column="37"/></operator><name pos:line="523" pos:column="33">PROT_HTTP<pos:position pos:line="523" pos:column="42"/></name></expr>)<pos:position pos:line="523" pos:column="43"/></condition><then pos:line="523" pos:column="43"> <block pos:line="523" pos:column="44">{
                <comment type="block" pos:line="524" pos:column="17">/* HTTP-only checks */</comment>
                <if pos:line="525" pos:column="17">if <condition pos:line="525" pos:column="20">(<expr><name><name pos:line="525" pos:column="21">conn<pos:position pos:line="525" pos:column="25"/></name><operator pos:line="525" pos:column="25">-&gt;<pos:position pos:line="525" pos:column="30"/></operator><name pos:line="525" pos:column="27">newurl<pos:position pos:line="525" pos:column="33"/></name></name></expr>)<pos:position pos:line="525" pos:column="34"/></condition><then pos:line="525" pos:column="34"> <block pos:line="525" pos:column="35">{
                  <comment type="block" pos:line="526" pos:column="19">/* abort after the headers if "follow Location" is set */</comment>
                  <expr_stmt><expr><call><name pos:line="527" pos:column="19">infof<pos:position pos:line="527" pos:column="24"/></name> <argument_list pos:line="527" pos:column="25">(<argument><expr><name pos:line="527" pos:column="26">data<pos:position pos:line="527" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="527" pos:column="32">"Follow to new URL: %s\n"<pos:position pos:line="527" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="527" pos:column="59">conn<pos:position pos:line="527" pos:column="63"/></name><operator pos:line="527" pos:column="63">-&gt;<pos:position pos:line="527" pos:column="68"/></operator><name pos:line="527" pos:column="65">newurl<pos:position pos:line="527" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="527" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="527" pos:column="73"/></expr_stmt>
                  <return pos:line="528" pos:column="19">return <expr><name pos:line="528" pos:column="26">CURLE_OK<pos:position pos:line="528" pos:column="34"/></name></expr>;<pos:position pos:line="528" pos:column="35"/></return>
                }<pos:position pos:line="529" pos:column="18"/></block></then>
                <elseif pos:line="530" pos:column="17">else <if pos:line="530" pos:column="22">if <condition pos:line="530" pos:column="25">(<expr><name><name pos:line="530" pos:column="26">conn<pos:position pos:line="530" pos:column="30"/></name><operator pos:line="530" pos:column="30">-&gt;<pos:position pos:line="530" pos:column="35"/></operator><name pos:line="530" pos:column="32">resume_from<pos:position pos:line="530" pos:column="43"/></name></name> <operator pos:line="530" pos:column="44">&amp;&amp;<pos:position pos:line="530" pos:column="54"/></operator>
                         <operator pos:line="531" pos:column="26">!<pos:position pos:line="531" pos:column="27"/></operator><name pos:line="531" pos:column="27">content_range<pos:position pos:line="531" pos:column="40"/></name> <operator pos:line="531" pos:column="41">&amp;&amp;<pos:position pos:line="531" pos:column="51"/></operator>
                         <operator pos:line="532" pos:column="26">(<pos:position pos:line="532" pos:column="27"/></operator><name><name pos:line="532" pos:column="27">data<pos:position pos:line="532" pos:column="31"/></name><operator pos:line="532" pos:column="31">-&gt;<pos:position pos:line="532" pos:column="36"/></operator><name pos:line="532" pos:column="33">set<pos:position pos:line="532" pos:column="36"/></name><operator pos:line="532" pos:column="36">.<pos:position pos:line="532" pos:column="37"/></operator><name pos:line="532" pos:column="37">httpreq<pos:position pos:line="532" pos:column="44"/></name></name><operator pos:line="532" pos:column="44">==<pos:position pos:line="532" pos:column="46"/></operator><name pos:line="532" pos:column="46">HTTPREQ_GET<pos:position pos:line="532" pos:column="57"/></name><operator pos:line="532" pos:column="57">)<pos:position pos:line="532" pos:column="58"/></operator></expr>)<pos:position pos:line="532" pos:column="59"/></condition><then pos:line="532" pos:column="59"> <block pos:line="532" pos:column="60">{
                  <comment type="block" pos:line="533" pos:column="19">/* we wanted to resume a download, although the server
                     doesn't seem to support this and we did this with a GET
                     (if it wasn't a GET we did a POST or PUT resume) */</comment>
                  <expr_stmt><expr><call><name pos:line="536" pos:column="19">failf<pos:position pos:line="536" pos:column="24"/></name> <argument_list pos:line="536" pos:column="25">(<argument><expr><name pos:line="536" pos:column="26">data<pos:position pos:line="536" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="536" pos:column="32">"HTTP server doesn't seem to support "<pos:position pos:line="536" pos:column="70"/></literal>
                         <literal type="string" pos:line="537" pos:column="26">"byte ranges. Cannot resume."<pos:position pos:line="537" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="537" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="537" pos:column="57"/></expr_stmt>
                  <return pos:line="538" pos:column="19">return <expr><name pos:line="538" pos:column="26">CURLE_HTTP_RANGE_ERROR<pos:position pos:line="538" pos:column="48"/></name></expr>;<pos:position pos:line="538" pos:column="49"/></return>
                }<pos:position pos:line="539" pos:column="18"/></block></then></if></elseif>
                <elseif pos:line="540" pos:column="17">else <if pos:line="540" pos:column="22">if<condition pos:line="540" pos:column="24">(<expr><name><name pos:line="540" pos:column="25">data<pos:position pos:line="540" pos:column="29"/></name><operator pos:line="540" pos:column="29">-&gt;<pos:position pos:line="540" pos:column="34"/></operator><name pos:line="540" pos:column="31">set<pos:position pos:line="540" pos:column="34"/></name><operator pos:line="540" pos:column="34">.<pos:position pos:line="540" pos:column="35"/></operator><name pos:line="540" pos:column="35">timecondition<pos:position pos:line="540" pos:column="48"/></name></name> <operator pos:line="540" pos:column="49">&amp;&amp;<pos:position pos:line="540" pos:column="59"/></operator> <operator pos:line="540" pos:column="52">!<pos:position pos:line="540" pos:column="53"/></operator><name><name pos:line="540" pos:column="53">conn<pos:position pos:line="540" pos:column="57"/></name><operator pos:line="540" pos:column="57">-&gt;<pos:position pos:line="540" pos:column="62"/></operator><name pos:line="540" pos:column="59">range<pos:position pos:line="540" pos:column="64"/></name></name></expr>)<pos:position pos:line="540" pos:column="65"/></condition><then pos:line="540" pos:column="65"> <block pos:line="540" pos:column="66">{
                  <comment type="block" pos:line="541" pos:column="19">/* A time condition has been set AND no ranges have been
                     requested. This seems to be what chapter 13.3.4 of
                     RFC 2616 defines to be the correct action for a
                     HTTP/1.1 client */</comment>
                  <if pos:line="545" pos:column="19">if<condition pos:line="545" pos:column="21">(<expr><operator pos:line="545" pos:column="22">(<pos:position pos:line="545" pos:column="23"/></operator><name pos:line="545" pos:column="23">timeofdoc<pos:position pos:line="545" pos:column="32"/></name> <operator pos:line="545" pos:column="33">&gt;<pos:position pos:line="545" pos:column="37"/></operator> <literal type="number" pos:line="545" pos:column="35">0<pos:position pos:line="545" pos:column="36"/></literal><operator pos:line="545" pos:column="36">)<pos:position pos:line="545" pos:column="37"/></operator> <operator pos:line="545" pos:column="38">&amp;&amp;<pos:position pos:line="545" pos:column="48"/></operator> <operator pos:line="545" pos:column="41">(<pos:position pos:line="545" pos:column="42"/></operator><name><name pos:line="545" pos:column="42">data<pos:position pos:line="545" pos:column="46"/></name><operator pos:line="545" pos:column="46">-&gt;<pos:position pos:line="545" pos:column="51"/></operator><name pos:line="545" pos:column="48">set<pos:position pos:line="545" pos:column="51"/></name><operator pos:line="545" pos:column="51">.<pos:position pos:line="545" pos:column="52"/></operator><name pos:line="545" pos:column="52">timevalue<pos:position pos:line="545" pos:column="61"/></name></name> <operator pos:line="545" pos:column="62">&gt;<pos:position pos:line="545" pos:column="66"/></operator> <literal type="number" pos:line="545" pos:column="64">0<pos:position pos:line="545" pos:column="65"/></literal><operator pos:line="545" pos:column="65">)<pos:position pos:line="545" pos:column="66"/></operator></expr>)<pos:position pos:line="545" pos:column="67"/></condition><then pos:line="545" pos:column="67"> <block pos:line="545" pos:column="68">{
                    <switch pos:line="546" pos:column="21">switch<condition pos:line="546" pos:column="27">(<expr><name><name pos:line="546" pos:column="28">data<pos:position pos:line="546" pos:column="32"/></name><operator pos:line="546" pos:column="32">-&gt;<pos:position pos:line="546" pos:column="37"/></operator><name pos:line="546" pos:column="34">set<pos:position pos:line="546" pos:column="37"/></name><operator pos:line="546" pos:column="37">.<pos:position pos:line="546" pos:column="38"/></operator><name pos:line="546" pos:column="38">timecondition<pos:position pos:line="546" pos:column="51"/></name></name></expr>)<pos:position pos:line="546" pos:column="52"/></condition> <block pos:line="546" pos:column="53">{
                    <case pos:line="547" pos:column="21">case <expr><name pos:line="547" pos:column="26">TIMECOND_IFMODSINCE<pos:position pos:line="547" pos:column="45"/></name></expr>:<pos:position pos:line="547" pos:column="46"/></case>
                    <default pos:line="548" pos:column="21">default:<pos:position pos:line="548" pos:column="29"/></default>
                      <if pos:line="549" pos:column="23">if<condition pos:line="549" pos:column="25">(<expr><name pos:line="549" pos:column="26">timeofdoc<pos:position pos:line="549" pos:column="35"/></name> <operator pos:line="549" pos:column="36">&lt;<pos:position pos:line="549" pos:column="40"/></operator> <name><name pos:line="549" pos:column="38">data<pos:position pos:line="549" pos:column="42"/></name><operator pos:line="549" pos:column="42">-&gt;<pos:position pos:line="549" pos:column="47"/></operator><name pos:line="549" pos:column="44">set<pos:position pos:line="549" pos:column="47"/></name><operator pos:line="549" pos:column="47">.<pos:position pos:line="549" pos:column="48"/></operator><name pos:line="549" pos:column="48">timevalue<pos:position pos:line="549" pos:column="57"/></name></name></expr>)<pos:position pos:line="549" pos:column="58"/></condition><then pos:line="549" pos:column="58"> <block pos:line="549" pos:column="59">{
                        <expr_stmt><expr><call><name pos:line="550" pos:column="25">infof<pos:position pos:line="550" pos:column="30"/></name><argument_list pos:line="550" pos:column="30">(<argument><expr><name pos:line="550" pos:column="31">data<pos:position pos:line="550" pos:column="35"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="551" pos:column="31">"The requested document is not new enough\n"<pos:position pos:line="551" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="551" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="551" pos:column="77"/></expr_stmt>
                        <return pos:line="552" pos:column="25">return <expr><name pos:line="552" pos:column="32">CURLE_OK<pos:position pos:line="552" pos:column="40"/></name></expr>;<pos:position pos:line="552" pos:column="41"/></return>
                      }<pos:position pos:line="553" pos:column="24"/></block></then></if>
                      <break pos:line="554" pos:column="23">break;<pos:position pos:line="554" pos:column="29"/></break>
                    <case pos:line="555" pos:column="21">case <expr><name pos:line="555" pos:column="26">TIMECOND_IFUNMODSINCE<pos:position pos:line="555" pos:column="47"/></name></expr>:<pos:position pos:line="555" pos:column="48"/></case>
                      <if pos:line="556" pos:column="23">if<condition pos:line="556" pos:column="25">(<expr><name pos:line="556" pos:column="26">timeofdoc<pos:position pos:line="556" pos:column="35"/></name> <operator pos:line="556" pos:column="36">&gt;<pos:position pos:line="556" pos:column="40"/></operator> <name><name pos:line="556" pos:column="38">data<pos:position pos:line="556" pos:column="42"/></name><operator pos:line="556" pos:column="42">-&gt;<pos:position pos:line="556" pos:column="47"/></operator><name pos:line="556" pos:column="44">set<pos:position pos:line="556" pos:column="47"/></name><operator pos:line="556" pos:column="47">.<pos:position pos:line="556" pos:column="48"/></operator><name pos:line="556" pos:column="48">timevalue<pos:position pos:line="556" pos:column="57"/></name></name></expr>)<pos:position pos:line="556" pos:column="58"/></condition><then pos:line="556" pos:column="58"> <block pos:line="556" pos:column="59">{
                        <expr_stmt><expr><call><name pos:line="557" pos:column="25">infof<pos:position pos:line="557" pos:column="30"/></name><argument_list pos:line="557" pos:column="30">(<argument><expr><name pos:line="557" pos:column="31">data<pos:position pos:line="557" pos:column="35"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="558" pos:column="31">"The requested document is not old enough\n"<pos:position pos:line="558" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="558" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="558" pos:column="77"/></expr_stmt>
                        <return pos:line="559" pos:column="25">return <expr><name pos:line="559" pos:column="32">CURLE_OK<pos:position pos:line="559" pos:column="40"/></name></expr>;<pos:position pos:line="559" pos:column="41"/></return>
                      }<pos:position pos:line="560" pos:column="24"/></block></then></if>
                      <break pos:line="561" pos:column="23">break;<pos:position pos:line="561" pos:column="29"/></break>
                    }<pos:position pos:line="562" pos:column="22"/></block></switch> <comment type="block" pos:line="562" pos:column="23">/* switch */</comment>
                  }<pos:position pos:line="563" pos:column="20"/></block></then></if> <comment type="block" pos:line="563" pos:column="21">/* two valid time strings */</comment>
                }<pos:position pos:line="564" pos:column="18"/></block></then></if></elseif></if> <comment type="block" pos:line="564" pos:column="19">/* we have a time condition */</comment>

              }<pos:position pos:line="566" pos:column="16"/></block></then></if> <comment type="block" pos:line="566" pos:column="17">/* this is HTTP */</comment>
            }<pos:position pos:line="567" pos:column="14"/></block></then></if> <comment type="block" pos:line="567" pos:column="15">/* this is the first time we write a body part */</comment>
            <expr_stmt><expr><name pos:line="568" pos:column="13">bodywrites<pos:position pos:line="568" pos:column="23"/></name><operator pos:line="568" pos:column="23">++<pos:position pos:line="568" pos:column="25"/></operator></expr>;<pos:position pos:line="568" pos:column="26"/></expr_stmt>

            <if pos:line="570" pos:column="13">if<condition pos:line="570" pos:column="15">(<expr><name><name pos:line="570" pos:column="16">conn<pos:position pos:line="570" pos:column="20"/></name><operator pos:line="570" pos:column="20">-&gt;<pos:position pos:line="570" pos:column="25"/></operator><name pos:line="570" pos:column="22">bits<pos:position pos:line="570" pos:column="26"/></name><operator pos:line="570" pos:column="26">.<pos:position pos:line="570" pos:column="27"/></operator><name pos:line="570" pos:column="27">chunk<pos:position pos:line="570" pos:column="32"/></name></name></expr>)<pos:position pos:line="570" pos:column="33"/></condition><then pos:line="570" pos:column="33"> <block pos:line="570" pos:column="34">{
              <comment type="block" pos:line="571" pos:column="15">/*
               * Bless me father for I have sinned. Here comes a chunked
               * transfer flying and we need to decode this properly.  While
               * the name says read, this function both reads and writes away
               * the data. The returned 'nread' holds the number of actual
               * data it wrote to the client.  */</comment>
              <decl_stmt><decl><type><name pos:line="577" pos:column="15">CHUNKcode<pos:position pos:line="577" pos:column="24"/></name></type> <name pos:line="577" pos:column="25">res<pos:position pos:line="577" pos:column="28"/></name> <init pos:line="577" pos:column="29">=
                <expr><call><name pos:line="578" pos:column="17">Curl_httpchunk_read<pos:position pos:line="578" pos:column="36"/></name><argument_list pos:line="578" pos:column="36">(<argument><expr><name pos:line="578" pos:column="37">conn<pos:position pos:line="578" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="578" pos:column="43">str<pos:position pos:line="578" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="578" pos:column="48">nread<pos:position pos:line="578" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="578" pos:column="55">&amp;<pos:position pos:line="578" pos:column="60"/></operator><name pos:line="578" pos:column="56">nread<pos:position pos:line="578" pos:column="61"/></name></expr></argument>)<pos:position pos:line="578" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="578" pos:column="63"/></decl_stmt>

              <if pos:line="580" pos:column="15">if<condition pos:line="580" pos:column="17">(<expr><name pos:line="580" pos:column="18">CHUNKE_OK<pos:position pos:line="580" pos:column="27"/></name> <operator pos:line="580" pos:column="28">&lt;<pos:position pos:line="580" pos:column="32"/></operator> <name pos:line="580" pos:column="30">res<pos:position pos:line="580" pos:column="33"/></name></expr>)<pos:position pos:line="580" pos:column="34"/></condition><then pos:line="580" pos:column="34"> <block pos:line="580" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="581" pos:column="17">failf<pos:position pos:line="581" pos:column="22"/></name><argument_list pos:line="581" pos:column="22">(<argument><expr><name pos:line="581" pos:column="23">data<pos:position pos:line="581" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="581" pos:column="29">"Receeived problem in the chunky parser"<pos:position pos:line="581" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="581" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="581" pos:column="71"/></expr_stmt>
                <return pos:line="582" pos:column="17">return <expr><name pos:line="582" pos:column="24">CURLE_READ_ERROR<pos:position pos:line="582" pos:column="40"/></name></expr>;<pos:position pos:line="582" pos:column="41"/></return>
              }<pos:position pos:line="583" pos:column="16"/></block></then>
              <elseif pos:line="584" pos:column="15">else <if pos:line="584" pos:column="20">if<condition pos:line="584" pos:column="22">(<expr><name pos:line="584" pos:column="23">CHUNKE_STOP<pos:position pos:line="584" pos:column="34"/></name> <operator pos:line="584" pos:column="35">==<pos:position pos:line="584" pos:column="37"/></operator> <name pos:line="584" pos:column="38">res<pos:position pos:line="584" pos:column="41"/></name></expr>)<pos:position pos:line="584" pos:column="42"/></condition><then pos:line="584" pos:column="42"> <block pos:line="584" pos:column="43">{
                <comment type="block" pos:line="585" pos:column="17">/* we're done reading chunks! */</comment>
                <expr_stmt><expr><name pos:line="586" pos:column="17">keepon<pos:position pos:line="586" pos:column="23"/></name> <operator pos:line="586" pos:column="24">&amp;=<pos:position pos:line="586" pos:column="30"/></operator> <operator pos:line="586" pos:column="27">~<pos:position pos:line="586" pos:column="28"/></operator><name pos:line="586" pos:column="28">KEEP_READ<pos:position pos:line="586" pos:column="37"/></name></expr>;<pos:position pos:line="586" pos:column="38"/></expr_stmt> <comment type="block" pos:line="586" pos:column="39">/* read no more */</comment>
                <expr_stmt><expr><call><name pos:line="587" pos:column="17">FD_ZERO<pos:position pos:line="587" pos:column="24"/></name><argument_list pos:line="587" pos:column="24">(<argument><expr><operator pos:line="587" pos:column="25">&amp;<pos:position pos:line="587" pos:column="30"/></operator><name pos:line="587" pos:column="26">rkeepfd<pos:position pos:line="587" pos:column="33"/></name></expr></argument>)<pos:position pos:line="587" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="587" pos:column="35"/></expr_stmt>

                <comment type="block" pos:line="589" pos:column="17">/* There are now possibly N number of bytes at the end of the
                   str buffer that weren't written to the client, but we don't
                   care about them right now. */</comment>
              }<pos:position pos:line="592" pos:column="16"/></block></then></if></elseif></if>
              <comment type="block" pos:line="593" pos:column="15">/* If it returned OK, we just keep going */</comment>
            }<pos:position pos:line="594" pos:column="14"/></block></then></if>

            <if pos:line="596" pos:column="13">if<condition pos:line="596" pos:column="15">(<expr><operator pos:line="596" pos:column="16">(<pos:position pos:line="596" pos:column="17"/></operator><operator pos:line="596" pos:column="17">-<pos:position pos:line="596" pos:column="18"/></operator><literal type="number" pos:line="596" pos:column="18">1<pos:position pos:line="596" pos:column="19"/></literal> <operator pos:line="596" pos:column="20">!=<pos:position pos:line="596" pos:column="22"/></operator> <name><name pos:line="596" pos:column="23">conn<pos:position pos:line="596" pos:column="27"/></name><operator pos:line="596" pos:column="27">-&gt;<pos:position pos:line="596" pos:column="32"/></operator><name pos:line="596" pos:column="29">maxdownload<pos:position pos:line="596" pos:column="40"/></name></name><operator pos:line="596" pos:column="40">)<pos:position pos:line="596" pos:column="41"/></operator> <operator pos:line="596" pos:column="42">&amp;&amp;<pos:position pos:line="596" pos:column="52"/></operator>
               <operator pos:line="597" pos:column="16">(<pos:position pos:line="597" pos:column="17"/></operator><name pos:line="597" pos:column="17">bytecount<pos:position pos:line="597" pos:column="26"/></name> <operator pos:line="597" pos:column="27">+<pos:position pos:line="597" pos:column="28"/></operator> <name pos:line="597" pos:column="29">nread<pos:position pos:line="597" pos:column="34"/></name> <operator pos:line="597" pos:column="35">&gt;=<pos:position pos:line="597" pos:column="40"/></operator> <name><name pos:line="597" pos:column="38">conn<pos:position pos:line="597" pos:column="42"/></name><operator pos:line="597" pos:column="42">-&gt;<pos:position pos:line="597" pos:column="47"/></operator><name pos:line="597" pos:column="44">maxdownload<pos:position pos:line="597" pos:column="55"/></name></name><operator pos:line="597" pos:column="55">)<pos:position pos:line="597" pos:column="56"/></operator></expr>)<pos:position pos:line="597" pos:column="57"/></condition><then pos:line="597" pos:column="57"> <block pos:line="597" pos:column="58">{
              <expr_stmt><expr><name pos:line="598" pos:column="15">nread<pos:position pos:line="598" pos:column="20"/></name> <operator pos:line="598" pos:column="21">=<pos:position pos:line="598" pos:column="22"/></operator> <name><name pos:line="598" pos:column="23">conn<pos:position pos:line="598" pos:column="27"/></name><operator pos:line="598" pos:column="27">-&gt;<pos:position pos:line="598" pos:column="32"/></operator><name pos:line="598" pos:column="29">maxdownload<pos:position pos:line="598" pos:column="40"/></name></name> <operator pos:line="598" pos:column="41">-<pos:position pos:line="598" pos:column="42"/></operator> <name pos:line="598" pos:column="43">bytecount<pos:position pos:line="598" pos:column="52"/></name></expr>;<pos:position pos:line="598" pos:column="53"/></expr_stmt>
              <if pos:line="599" pos:column="15">if<condition pos:line="599" pos:column="17">(<expr><operator pos:line="599" pos:column="18">(<pos:position pos:line="599" pos:column="19"/></operator><name pos:line="599" pos:column="19">signed<pos:position pos:line="599" pos:column="25"/></name> <name pos:line="599" pos:column="26">int<pos:position pos:line="599" pos:column="29"/></name><operator pos:line="599" pos:column="29">)<pos:position pos:line="599" pos:column="30"/></operator><name pos:line="599" pos:column="30">nread<pos:position pos:line="599" pos:column="35"/></name> <operator pos:line="599" pos:column="36">&lt;<pos:position pos:line="599" pos:column="40"/></operator> <literal type="number" pos:line="599" pos:column="38">0<pos:position pos:line="599" pos:column="39"/></literal></expr> )<pos:position pos:line="599" pos:column="41"/></condition><then pos:line="599" pos:column="41"> <comment type="block" pos:line="599" pos:column="42">/* this should be unusual */</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="600" pos:column="17">nread<pos:position pos:line="600" pos:column="22"/></name> <operator pos:line="600" pos:column="23">=<pos:position pos:line="600" pos:column="24"/></operator> <literal type="number" pos:line="600" pos:column="25">0<pos:position pos:line="600" pos:column="26"/></literal></expr>;<pos:position pos:line="600" pos:column="27"/></expr_stmt></block></then></if>

              <expr_stmt><expr><name pos:line="602" pos:column="15">keepon<pos:position pos:line="602" pos:column="21"/></name> <operator pos:line="602" pos:column="22">&amp;=<pos:position pos:line="602" pos:column="28"/></operator> <operator pos:line="602" pos:column="25">~<pos:position pos:line="602" pos:column="26"/></operator><name pos:line="602" pos:column="26">KEEP_READ<pos:position pos:line="602" pos:column="35"/></name></expr>;<pos:position pos:line="602" pos:column="36"/></expr_stmt> <comment type="block" pos:line="602" pos:column="37">/* we're done reading */</comment>
              <expr_stmt><expr><call><name pos:line="603" pos:column="15">FD_ZERO<pos:position pos:line="603" pos:column="22"/></name><argument_list pos:line="603" pos:column="22">(<argument><expr><operator pos:line="603" pos:column="23">&amp;<pos:position pos:line="603" pos:column="28"/></operator><name pos:line="603" pos:column="24">rkeepfd<pos:position pos:line="603" pos:column="31"/></name></expr></argument>)<pos:position pos:line="603" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="603" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="604" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="606" pos:column="13">bytecount<pos:position pos:line="606" pos:column="22"/></name> <operator pos:line="606" pos:column="23">+=<pos:position pos:line="606" pos:column="25"/></operator> <name pos:line="606" pos:column="26">nread<pos:position pos:line="606" pos:column="31"/></name></expr>;<pos:position pos:line="606" pos:column="32"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="608" pos:column="13">Curl_pgrsSetDownloadCounter<pos:position pos:line="608" pos:column="40"/></name><argument_list pos:line="608" pos:column="40">(<argument><expr><name pos:line="608" pos:column="41">data<pos:position pos:line="608" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="608" pos:column="47">(<pos:position pos:line="608" pos:column="48"/></operator><name pos:line="608" pos:column="48">double<pos:position pos:line="608" pos:column="54"/></name><operator pos:line="608" pos:column="54">)<pos:position pos:line="608" pos:column="55"/></operator><name pos:line="608" pos:column="55">bytecount<pos:position pos:line="608" pos:column="64"/></name></expr></argument>)<pos:position pos:line="608" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="608" pos:column="66"/></expr_stmt>
            
            <if pos:line="610" pos:column="13">if<condition pos:line="610" pos:column="15">(<expr><operator pos:line="610" pos:column="16">!<pos:position pos:line="610" pos:column="17"/></operator><name><name pos:line="610" pos:column="17">conn<pos:position pos:line="610" pos:column="21"/></name><operator pos:line="610" pos:column="21">-&gt;<pos:position pos:line="610" pos:column="26"/></operator><name pos:line="610" pos:column="23">bits<pos:position pos:line="610" pos:column="27"/></name><operator pos:line="610" pos:column="27">.<pos:position pos:line="610" pos:column="28"/></operator><name pos:line="610" pos:column="28">chunk<pos:position pos:line="610" pos:column="33"/></name></name> <operator pos:line="610" pos:column="34">&amp;&amp;<pos:position pos:line="610" pos:column="44"/></operator> <name pos:line="610" pos:column="37">nread<pos:position pos:line="610" pos:column="42"/></name></expr>)<pos:position pos:line="610" pos:column="43"/></condition><then pos:line="610" pos:column="43"> <block pos:line="610" pos:column="44">{
              <comment type="block" pos:line="611" pos:column="15">/* If this is chunky transfer, it was already written */</comment>
              <expr_stmt><expr><name pos:line="612" pos:column="15">urg<pos:position pos:line="612" pos:column="18"/></name> <operator pos:line="612" pos:column="19">=<pos:position pos:line="612" pos:column="20"/></operator> <call><name pos:line="612" pos:column="21">Curl_client_write<pos:position pos:line="612" pos:column="38"/></name><argument_list pos:line="612" pos:column="38">(<argument><expr><name pos:line="612" pos:column="39">data<pos:position pos:line="612" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="612" pos:column="45">CLIENTWRITE_BODY<pos:position pos:line="612" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="612" pos:column="63">str<pos:position pos:line="612" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="612" pos:column="68">nread<pos:position pos:line="612" pos:column="73"/></name></expr></argument>)<pos:position pos:line="612" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="612" pos:column="75"/></expr_stmt>
              <if pos:line="613" pos:column="15">if<condition pos:line="613" pos:column="17">(<expr><name pos:line="613" pos:column="18">urg<pos:position pos:line="613" pos:column="21"/></name></expr>)<pos:position pos:line="613" pos:column="22"/></condition><then pos:line="613" pos:column="22">
                <block type="pseudo"><return pos:line="614" pos:column="17">return <expr><name pos:line="614" pos:column="24">urg<pos:position pos:line="614" pos:column="27"/></name></expr>;<pos:position pos:line="614" pos:column="28"/></return></block></then></if>
            }<pos:position pos:line="615" pos:column="14"/></block></then></if>

          }<pos:position pos:line="617" pos:column="12"/></block></then></if> <comment type="block" pos:line="617" pos:column="13">/* if (! header and data to read ) */</comment>
        }<pos:position pos:line="618" pos:column="10"/></block></then></if> <comment type="block" pos:line="618" pos:column="11">/* if( read from socket ) */</comment>

        <if pos:line="620" pos:column="9">if<condition pos:line="620" pos:column="11">(<expr><operator pos:line="620" pos:column="12">(<pos:position pos:line="620" pos:column="13"/></operator><name pos:line="620" pos:column="13">keepon<pos:position pos:line="620" pos:column="19"/></name> <operator pos:line="620" pos:column="20">&amp;<pos:position pos:line="620" pos:column="25"/></operator> <name pos:line="620" pos:column="22">KEEP_WRITE<pos:position pos:line="620" pos:column="32"/></name><operator pos:line="620" pos:column="32">)<pos:position pos:line="620" pos:column="33"/></operator> <operator pos:line="620" pos:column="34">&amp;&amp;<pos:position pos:line="620" pos:column="44"/></operator> <call><name pos:line="620" pos:column="37">FD_ISSET<pos:position pos:line="620" pos:column="45"/></name><argument_list pos:line="620" pos:column="45">(<argument><expr><name><name pos:line="620" pos:column="46">conn<pos:position pos:line="620" pos:column="50"/></name><operator pos:line="620" pos:column="50">-&gt;<pos:position pos:line="620" pos:column="55"/></operator><name pos:line="620" pos:column="52">writesockfd<pos:position pos:line="620" pos:column="63"/></name></name></expr></argument>, <argument><expr><operator pos:line="620" pos:column="65">&amp;<pos:position pos:line="620" pos:column="70"/></operator><name pos:line="620" pos:column="66">writefd<pos:position pos:line="620" pos:column="73"/></name></expr></argument>)<pos:position pos:line="620" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="620" pos:column="75"/></condition><then pos:line="620" pos:column="75"> <block pos:line="620" pos:column="76">{
          <comment type="block" pos:line="621" pos:column="11">/* write */</comment>

          <decl_stmt><decl><type><name pos:line="623" pos:column="11">int<pos:position pos:line="623" pos:column="14"/></name></type> <name pos:line="623" pos:column="15">i<pos:position pos:line="623" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="623" pos:column="18">si<pos:position pos:line="623" pos:column="20"/></name></decl>;<pos:position pos:line="623" pos:column="21"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="624" pos:column="11">size_t<pos:position pos:line="624" pos:column="17"/></name></type> <name pos:line="624" pos:column="18">bytes_written<pos:position pos:line="624" pos:column="31"/></name></decl>;<pos:position pos:line="624" pos:column="32"/></decl_stmt>

          <expr_stmt><expr><name pos:line="626" pos:column="11">nread<pos:position pos:line="626" pos:column="16"/></name> <operator pos:line="626" pos:column="17">=<pos:position pos:line="626" pos:column="18"/></operator> <call><name><name pos:line="626" pos:column="19">data<pos:position pos:line="626" pos:column="23"/></name><operator pos:line="626" pos:column="23">-&gt;<pos:position pos:line="626" pos:column="28"/></operator><name pos:line="626" pos:column="25">set<pos:position pos:line="626" pos:column="28"/></name><operator pos:line="626" pos:column="28">.<pos:position pos:line="626" pos:column="29"/></operator><name pos:line="626" pos:column="29">fread<pos:position pos:line="626" pos:column="34"/></name></name><argument_list pos:line="626" pos:column="34">(<argument><expr><name pos:line="626" pos:column="35">buf<pos:position pos:line="626" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="626" pos:column="40">1<pos:position pos:line="626" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="626" pos:column="43">conn<pos:position pos:line="626" pos:column="47"/></name><operator pos:line="626" pos:column="47">-&gt;<pos:position pos:line="626" pos:column="52"/></operator><name pos:line="626" pos:column="49">upload_bufsize<pos:position pos:line="626" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="626" pos:column="65">data<pos:position pos:line="626" pos:column="69"/></name><operator pos:line="626" pos:column="69">-&gt;<pos:position pos:line="626" pos:column="74"/></operator><name pos:line="626" pos:column="71">set<pos:position pos:line="626" pos:column="74"/></name><operator pos:line="626" pos:column="74">.<pos:position pos:line="626" pos:column="75"/></operator><name pos:line="626" pos:column="75">in<pos:position pos:line="626" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="626" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="626" pos:column="79"/></expr_stmt>

          <comment type="block" pos:line="628" pos:column="11">/* the signed int typecase of nread of for systems that has
             unsigned size_t */</comment>
          <if pos:line="630" pos:column="11">if <condition pos:line="630" pos:column="14">(<expr><operator pos:line="630" pos:column="15">(<pos:position pos:line="630" pos:column="16"/></operator><name pos:line="630" pos:column="16">signed<pos:position pos:line="630" pos:column="22"/></name> <name pos:line="630" pos:column="23">int<pos:position pos:line="630" pos:column="26"/></name><operator pos:line="630" pos:column="26">)<pos:position pos:line="630" pos:column="27"/></operator><name pos:line="630" pos:column="27">nread<pos:position pos:line="630" pos:column="32"/></name><operator pos:line="630" pos:column="32">&lt;=<pos:position pos:line="630" pos:column="37"/></operator><literal type="number" pos:line="630" pos:column="34">0<pos:position pos:line="630" pos:column="35"/></literal></expr>)<pos:position pos:line="630" pos:column="36"/></condition><then pos:line="630" pos:column="36"> <block pos:line="630" pos:column="37">{
            <comment type="block" pos:line="631" pos:column="13">/* done */</comment>
            <expr_stmt><expr><name pos:line="632" pos:column="13">keepon<pos:position pos:line="632" pos:column="19"/></name> <operator pos:line="632" pos:column="20">&amp;=<pos:position pos:line="632" pos:column="26"/></operator> <operator pos:line="632" pos:column="23">~<pos:position pos:line="632" pos:column="24"/></operator><name pos:line="632" pos:column="24">KEEP_WRITE<pos:position pos:line="632" pos:column="34"/></name></expr>;<pos:position pos:line="632" pos:column="35"/></expr_stmt> <comment type="block" pos:line="632" pos:column="36">/* we're done writing */</comment>
            <expr_stmt><expr><call><name pos:line="633" pos:column="13">FD_ZERO<pos:position pos:line="633" pos:column="20"/></name><argument_list pos:line="633" pos:column="20">(<argument><expr><operator pos:line="633" pos:column="21">&amp;<pos:position pos:line="633" pos:column="26"/></operator><name pos:line="633" pos:column="22">wkeepfd<pos:position pos:line="633" pos:column="29"/></name></expr></argument>)<pos:position pos:line="633" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="633" pos:column="31"/></expr_stmt>
            <break pos:line="634" pos:column="13">break;<pos:position pos:line="634" pos:column="19"/></break>
          }<pos:position pos:line="635" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name pos:line="636" pos:column="11">writebytecount<pos:position pos:line="636" pos:column="25"/></name> <operator pos:line="636" pos:column="26">+=<pos:position pos:line="636" pos:column="28"/></operator> <name pos:line="636" pos:column="29">nread<pos:position pos:line="636" pos:column="34"/></name></expr>;<pos:position pos:line="636" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="637" pos:column="11">Curl_pgrsSetUploadCounter<pos:position pos:line="637" pos:column="36"/></name><argument_list pos:line="637" pos:column="36">(<argument><expr><name pos:line="637" pos:column="37">data<pos:position pos:line="637" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="637" pos:column="43">(<pos:position pos:line="637" pos:column="44"/></operator><name pos:line="637" pos:column="44">double<pos:position pos:line="637" pos:column="50"/></name><operator pos:line="637" pos:column="50">)<pos:position pos:line="637" pos:column="51"/></operator><name pos:line="637" pos:column="51">writebytecount<pos:position pos:line="637" pos:column="65"/></name></expr></argument>)<pos:position pos:line="637" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="637" pos:column="67"/></expr_stmt>            

          <comment type="block" pos:line="639" pos:column="11">/* convert LF to CRLF if so asked */</comment>
          <if pos:line="640" pos:column="11">if <condition pos:line="640" pos:column="14">(<expr><name><name pos:line="640" pos:column="15">data<pos:position pos:line="640" pos:column="19"/></name><operator pos:line="640" pos:column="19">-&gt;<pos:position pos:line="640" pos:column="24"/></operator><name pos:line="640" pos:column="21">set<pos:position pos:line="640" pos:column="24"/></name><operator pos:line="640" pos:column="24">.<pos:position pos:line="640" pos:column="25"/></operator><name pos:line="640" pos:column="25">crlf<pos:position pos:line="640" pos:column="29"/></name></name></expr>)<pos:position pos:line="640" pos:column="30"/></condition><then pos:line="640" pos:column="30"> <block pos:line="640" pos:column="31">{
            <for pos:line="641" pos:column="13">for<control pos:line="641" pos:column="16">(<init><expr><name pos:line="641" pos:column="17">i<pos:position pos:line="641" pos:column="18"/></name> <operator pos:line="641" pos:column="19">=<pos:position pos:line="641" pos:column="20"/></operator> <literal type="number" pos:line="641" pos:column="21">0<pos:position pos:line="641" pos:column="22"/></literal></expr><operator pos:line="641" pos:column="22">,<pos:position pos:line="641" pos:column="23"/></operator> <expr><name pos:line="641" pos:column="24">si<pos:position pos:line="641" pos:column="26"/></name> <operator pos:line="641" pos:column="27">=<pos:position pos:line="641" pos:column="28"/></operator> <literal type="number" pos:line="641" pos:column="29">0<pos:position pos:line="641" pos:column="30"/></literal></expr>;<pos:position pos:line="641" pos:column="31"/></init> <condition><expr><name pos:line="641" pos:column="32">i<pos:position pos:line="641" pos:column="33"/></name> <operator pos:line="641" pos:column="34">&lt;<pos:position pos:line="641" pos:column="38"/></operator> <operator pos:line="641" pos:column="36">(<pos:position pos:line="641" pos:column="37"/></operator><name pos:line="641" pos:column="37">int<pos:position pos:line="641" pos:column="40"/></name><operator pos:line="641" pos:column="40">)<pos:position pos:line="641" pos:column="41"/></operator><name pos:line="641" pos:column="41">nread<pos:position pos:line="641" pos:column="46"/></name></expr>;<pos:position pos:line="641" pos:column="47"/></condition> <incr><expr><name pos:line="641" pos:column="48">i<pos:position pos:line="641" pos:column="49"/></name><operator pos:line="641" pos:column="49">++<pos:position pos:line="641" pos:column="51"/></operator></expr><operator pos:line="641" pos:column="51">,<pos:position pos:line="641" pos:column="52"/></operator> <expr><name pos:line="641" pos:column="53">si<pos:position pos:line="641" pos:column="55"/></name><operator pos:line="641" pos:column="55">++<pos:position pos:line="641" pos:column="57"/></operator></expr></incr>)<pos:position pos:line="641" pos:column="58"/></control> <block pos:line="641" pos:column="59">{
              <if pos:line="642" pos:column="15">if <condition pos:line="642" pos:column="18">(<expr><name><name pos:line="642" pos:column="19">buf<pos:position pos:line="642" pos:column="22"/></name><index pos:line="642" pos:column="22">[<expr><name pos:line="642" pos:column="23">i<pos:position pos:line="642" pos:column="24"/></name></expr>]<pos:position pos:line="642" pos:column="25"/></index></name> <operator pos:line="642" pos:column="26">==<pos:position pos:line="642" pos:column="28"/></operator> <literal type="number" pos:line="642" pos:column="29">0x0a<pos:position pos:line="642" pos:column="33"/></literal></expr>)<pos:position pos:line="642" pos:column="34"/></condition><then pos:line="642" pos:column="34"> <block pos:line="642" pos:column="35">{
                <expr_stmt><expr><name><name pos:line="643" pos:column="17">data<pos:position pos:line="643" pos:column="21"/></name><operator pos:line="643" pos:column="21">-&gt;<pos:position pos:line="643" pos:column="26"/></operator><name pos:line="643" pos:column="23">state<pos:position pos:line="643" pos:column="28"/></name><operator pos:line="643" pos:column="28">.<pos:position pos:line="643" pos:column="29"/></operator><name pos:line="643" pos:column="29">scratch<pos:position pos:line="643" pos:column="36"/></name><index pos:line="643" pos:column="36">[<expr><name pos:line="643" pos:column="37">si<pos:position pos:line="643" pos:column="39"/></name><operator pos:line="643" pos:column="39">++<pos:position pos:line="643" pos:column="41"/></operator></expr>]<pos:position pos:line="643" pos:column="42"/></index></name> <operator pos:line="643" pos:column="43">=<pos:position pos:line="643" pos:column="44"/></operator> <literal type="number" pos:line="643" pos:column="45">0x0d<pos:position pos:line="643" pos:column="49"/></literal></expr>;<pos:position pos:line="643" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="644" pos:column="17">data<pos:position pos:line="644" pos:column="21"/></name><operator pos:line="644" pos:column="21">-&gt;<pos:position pos:line="644" pos:column="26"/></operator><name pos:line="644" pos:column="23">state<pos:position pos:line="644" pos:column="28"/></name><operator pos:line="644" pos:column="28">.<pos:position pos:line="644" pos:column="29"/></operator><name pos:line="644" pos:column="29">scratch<pos:position pos:line="644" pos:column="36"/></name><index pos:line="644" pos:column="36">[<expr><name pos:line="644" pos:column="37">si<pos:position pos:line="644" pos:column="39"/></name></expr>]<pos:position pos:line="644" pos:column="40"/></index></name> <operator pos:line="644" pos:column="41">=<pos:position pos:line="644" pos:column="42"/></operator> <literal type="number" pos:line="644" pos:column="43">0x0a<pos:position pos:line="644" pos:column="47"/></literal></expr>;<pos:position pos:line="644" pos:column="48"/></expr_stmt>
              }<pos:position pos:line="645" pos:column="16"/></block></then>
              <else pos:line="646" pos:column="15">else <block pos:line="646" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="647" pos:column="17">data<pos:position pos:line="647" pos:column="21"/></name><operator pos:line="647" pos:column="21">-&gt;<pos:position pos:line="647" pos:column="26"/></operator><name pos:line="647" pos:column="23">state<pos:position pos:line="647" pos:column="28"/></name><operator pos:line="647" pos:column="28">.<pos:position pos:line="647" pos:column="29"/></operator><name pos:line="647" pos:column="29">scratch<pos:position pos:line="647" pos:column="36"/></name><index pos:line="647" pos:column="36">[<expr><name pos:line="647" pos:column="37">si<pos:position pos:line="647" pos:column="39"/></name></expr>]<pos:position pos:line="647" pos:column="40"/></index></name> <operator pos:line="647" pos:column="41">=<pos:position pos:line="647" pos:column="42"/></operator> <name><name pos:line="647" pos:column="43">buf<pos:position pos:line="647" pos:column="46"/></name><index pos:line="647" pos:column="46">[<expr><name pos:line="647" pos:column="47">i<pos:position pos:line="647" pos:column="48"/></name></expr>]<pos:position pos:line="647" pos:column="49"/></index></name></expr>;<pos:position pos:line="647" pos:column="50"/></expr_stmt>
              }<pos:position pos:line="648" pos:column="16"/></block></else></if>
            }<pos:position pos:line="649" pos:column="14"/></block></for>
            <expr_stmt><expr><name pos:line="650" pos:column="13">nread<pos:position pos:line="650" pos:column="18"/></name> <operator pos:line="650" pos:column="19">=<pos:position pos:line="650" pos:column="20"/></operator> <name pos:line="650" pos:column="21">si<pos:position pos:line="650" pos:column="23"/></name></expr>;<pos:position pos:line="650" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><name pos:line="651" pos:column="13">buf<pos:position pos:line="651" pos:column="16"/></name> <operator pos:line="651" pos:column="17">=<pos:position pos:line="651" pos:column="18"/></operator> <name><name pos:line="651" pos:column="19">data<pos:position pos:line="651" pos:column="23"/></name><operator pos:line="651" pos:column="23">-&gt;<pos:position pos:line="651" pos:column="28"/></operator><name pos:line="651" pos:column="25">state<pos:position pos:line="651" pos:column="30"/></name><operator pos:line="651" pos:column="30">.<pos:position pos:line="651" pos:column="31"/></operator><name pos:line="651" pos:column="31">scratch<pos:position pos:line="651" pos:column="38"/></name></name></expr>;<pos:position pos:line="651" pos:column="39"/></expr_stmt> <comment type="block" pos:line="651" pos:column="40">/* point to the new buffer */</comment>
          }<pos:position pos:line="652" pos:column="12"/></block></then></if>

          <comment type="block" pos:line="654" pos:column="11">/* write to socket */</comment>
          <expr_stmt><expr><name pos:line="655" pos:column="11">urg<pos:position pos:line="655" pos:column="14"/></name> <operator pos:line="655" pos:column="15">=<pos:position pos:line="655" pos:column="16"/></operator> <call><name pos:line="655" pos:column="17">Curl_write<pos:position pos:line="655" pos:column="27"/></name><argument_list pos:line="655" pos:column="27">(<argument><expr><name pos:line="655" pos:column="28">conn<pos:position pos:line="655" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="655" pos:column="34">conn<pos:position pos:line="655" pos:column="38"/></name><operator pos:line="655" pos:column="38">-&gt;<pos:position pos:line="655" pos:column="43"/></operator><name pos:line="655" pos:column="40">writesockfd<pos:position pos:line="655" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="655" pos:column="53">buf<pos:position pos:line="655" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="655" pos:column="58">nread<pos:position pos:line="655" pos:column="63"/></name></expr></argument>,
                           <argument><expr><operator pos:line="656" pos:column="28">&amp;<pos:position pos:line="656" pos:column="33"/></operator><name pos:line="656" pos:column="29">bytes_written<pos:position pos:line="656" pos:column="42"/></name></expr></argument>)<pos:position pos:line="656" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="656" pos:column="44"/></expr_stmt>

          <if pos:line="658" pos:column="11">if<condition pos:line="658" pos:column="13">(<expr><name pos:line="658" pos:column="14">nread<pos:position pos:line="658" pos:column="19"/></name> <operator pos:line="658" pos:column="20">!=<pos:position pos:line="658" pos:column="22"/></operator> <operator pos:line="658" pos:column="23">(<pos:position pos:line="658" pos:column="24"/></operator><name pos:line="658" pos:column="24">int<pos:position pos:line="658" pos:column="27"/></name><operator pos:line="658" pos:column="27">)<pos:position pos:line="658" pos:column="28"/></operator><name pos:line="658" pos:column="28">bytes_written<pos:position pos:line="658" pos:column="41"/></name></expr>)<pos:position pos:line="658" pos:column="42"/></condition><then pos:line="658" pos:column="42"> <block pos:line="658" pos:column="43">{
            <expr_stmt><expr><call><name pos:line="659" pos:column="13">failf<pos:position pos:line="659" pos:column="18"/></name><argument_list pos:line="659" pos:column="18">(<argument><expr><name pos:line="659" pos:column="19">data<pos:position pos:line="659" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="659" pos:column="25">"Failed uploading data"<pos:position pos:line="659" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="659" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="659" pos:column="50"/></expr_stmt>
            <return pos:line="660" pos:column="13">return <expr><name pos:line="660" pos:column="20">CURLE_WRITE_ERROR<pos:position pos:line="660" pos:column="37"/></name></expr>;<pos:position pos:line="660" pos:column="38"/></return>
          }<pos:position pos:line="661" pos:column="12"/></block></then></if>
          <if pos:line="662" pos:column="11">if<condition pos:line="662" pos:column="13">(<expr><name><name pos:line="662" pos:column="14">data<pos:position pos:line="662" pos:column="18"/></name><operator pos:line="662" pos:column="18">-&gt;<pos:position pos:line="662" pos:column="23"/></operator><name pos:line="662" pos:column="20">set<pos:position pos:line="662" pos:column="23"/></name><operator pos:line="662" pos:column="23">.<pos:position pos:line="662" pos:column="24"/></operator><name pos:line="662" pos:column="24">crlf<pos:position pos:line="662" pos:column="28"/></name></name></expr>)<pos:position pos:line="662" pos:column="29"/></condition><then pos:line="662" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><name pos:line="663" pos:column="13">buf<pos:position pos:line="663" pos:column="16"/></name> <operator pos:line="663" pos:column="17">=<pos:position pos:line="663" pos:column="18"/></operator> <name><name pos:line="663" pos:column="19">data<pos:position pos:line="663" pos:column="23"/></name><operator pos:line="663" pos:column="23">-&gt;<pos:position pos:line="663" pos:column="28"/></operator><name pos:line="663" pos:column="25">state<pos:position pos:line="663" pos:column="30"/></name><operator pos:line="663" pos:column="30">.<pos:position pos:line="663" pos:column="31"/></operator><name pos:line="663" pos:column="31">buffer<pos:position pos:line="663" pos:column="37"/></name></name></expr>;<pos:position pos:line="663" pos:column="38"/></expr_stmt></block></then></if> <comment type="block" pos:line="663" pos:column="39">/* put it back on the buffer */</comment>

        }<pos:position pos:line="665" pos:column="10"/></block></then></if>

        <break pos:line="667" pos:column="9">break;<pos:position pos:line="667" pos:column="15"/></break>
      }<pos:position pos:line="668" pos:column="8"/></block></switch>

      <expr_stmt><expr><name pos:line="670" pos:column="7">now<pos:position pos:line="670" pos:column="10"/></name> <operator pos:line="670" pos:column="11">=<pos:position pos:line="670" pos:column="12"/></operator> <call><name pos:line="670" pos:column="13">Curl_tvnow<pos:position pos:line="670" pos:column="23"/></name><argument_list pos:line="670" pos:column="23">()<pos:position pos:line="670" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="670" pos:column="26"/></expr_stmt>
      <if pos:line="671" pos:column="7">if<condition pos:line="671" pos:column="9">(<expr><call><name pos:line="671" pos:column="10">Curl_pgrsUpdate<pos:position pos:line="671" pos:column="25"/></name><argument_list pos:line="671" pos:column="25">(<argument><expr><name pos:line="671" pos:column="26">conn<pos:position pos:line="671" pos:column="30"/></name></expr></argument>)<pos:position pos:line="671" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="671" pos:column="32"/></condition><then pos:line="671" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><name pos:line="672" pos:column="9">urg<pos:position pos:line="672" pos:column="12"/></name> <operator pos:line="672" pos:column="13">=<pos:position pos:line="672" pos:column="14"/></operator> <name pos:line="672" pos:column="15">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="672" pos:column="40"/></name></expr>;<pos:position pos:line="672" pos:column="41"/></expr_stmt></block></then>
      <else pos:line="673" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="674" pos:column="9">urg<pos:position pos:line="674" pos:column="12"/></name> <operator pos:line="674" pos:column="13">=<pos:position pos:line="674" pos:column="14"/></operator> <call><name pos:line="674" pos:column="15">Curl_speedcheck<pos:position pos:line="674" pos:column="30"/></name> <argument_list pos:line="674" pos:column="31">(<argument><expr><name pos:line="674" pos:column="32">data<pos:position pos:line="674" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="674" pos:column="38">now<pos:position pos:line="674" pos:column="41"/></name></expr></argument>)<pos:position pos:line="674" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="674" pos:column="43"/></expr_stmt></block></else></if>
      <if pos:line="675" pos:column="7">if <condition pos:line="675" pos:column="10">(<expr><name pos:line="675" pos:column="11">urg<pos:position pos:line="675" pos:column="14"/></name></expr>)<pos:position pos:line="675" pos:column="15"/></condition><then pos:line="675" pos:column="15">
	<block type="pseudo"><return pos:line="676" pos:column="9">return <expr><name pos:line="676" pos:column="16">urg<pos:position pos:line="676" pos:column="19"/></name></expr>;<pos:position pos:line="676" pos:column="20"/></return></block></then></if>

      <if pos:line="678" pos:column="7">if<condition pos:line="678" pos:column="9">(<expr><name><name pos:line="678" pos:column="10">data<pos:position pos:line="678" pos:column="14"/></name><operator pos:line="678" pos:column="14">-&gt;<pos:position pos:line="678" pos:column="19"/></operator><name pos:line="678" pos:column="16">progress<pos:position pos:line="678" pos:column="24"/></name><operator pos:line="678" pos:column="24">.<pos:position pos:line="678" pos:column="25"/></operator><name pos:line="678" pos:column="25">ulspeed<pos:position pos:line="678" pos:column="32"/></name></name> <operator pos:line="678" pos:column="33">&gt;<pos:position pos:line="678" pos:column="37"/></operator> <name><name pos:line="678" pos:column="35">conn<pos:position pos:line="678" pos:column="39"/></name><operator pos:line="678" pos:column="39">-&gt;<pos:position pos:line="678" pos:column="44"/></operator><name pos:line="678" pos:column="41">upload_bufsize<pos:position pos:line="678" pos:column="55"/></name></name></expr>)<pos:position pos:line="678" pos:column="56"/></condition><then pos:line="678" pos:column="56"> <block pos:line="678" pos:column="57">{
        <comment type="block" pos:line="679" pos:column="9">/* If we're transfering more data per second than fits in our buffer,
           we increase the buffer size to adjust to the current
           speed. However, we must not set it larger than BUFSIZE. We don't
           adjust it downwards again since we don't see any point in that!
        */</comment>
        <expr_stmt><expr><name><name pos:line="684" pos:column="9">conn<pos:position pos:line="684" pos:column="13"/></name><operator pos:line="684" pos:column="13">-&gt;<pos:position pos:line="684" pos:column="18"/></operator><name pos:line="684" pos:column="15">upload_bufsize<pos:position pos:line="684" pos:column="29"/></name></name><operator pos:line="684" pos:column="29">=<pos:position pos:line="684" pos:column="30"/></operator><operator pos:line="684" pos:column="30">(<pos:position pos:line="684" pos:column="31"/></operator><name pos:line="684" pos:column="31">long<pos:position pos:line="684" pos:column="35"/></name><operator pos:line="684" pos:column="35">)<pos:position pos:line="684" pos:column="36"/></operator><call><name pos:line="684" pos:column="36">min<pos:position pos:line="684" pos:column="39"/></name><argument_list pos:line="684" pos:column="39">(<argument><expr><name><name pos:line="684" pos:column="40">data<pos:position pos:line="684" pos:column="44"/></name><operator pos:line="684" pos:column="44">-&gt;<pos:position pos:line="684" pos:column="49"/></operator><name pos:line="684" pos:column="46">progress<pos:position pos:line="684" pos:column="54"/></name><operator pos:line="684" pos:column="54">.<pos:position pos:line="684" pos:column="55"/></operator><name pos:line="684" pos:column="55">ulspeed<pos:position pos:line="684" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="684" pos:column="64">BUFSIZE<pos:position pos:line="684" pos:column="71"/></name></expr></argument>)<pos:position pos:line="684" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="684" pos:column="73"/></expr_stmt>
      }<pos:position pos:line="685" pos:column="8"/></block></then></if>

      <if pos:line="687" pos:column="7">if <condition pos:line="687" pos:column="10">(<expr><name><name pos:line="687" pos:column="11">data<pos:position pos:line="687" pos:column="15"/></name><operator pos:line="687" pos:column="15">-&gt;<pos:position pos:line="687" pos:column="20"/></operator><name pos:line="687" pos:column="17">set<pos:position pos:line="687" pos:column="20"/></name><operator pos:line="687" pos:column="20">.<pos:position pos:line="687" pos:column="21"/></operator><name pos:line="687" pos:column="21">timeout<pos:position pos:line="687" pos:column="28"/></name></name> <operator pos:line="687" pos:column="29">&amp;&amp;<pos:position pos:line="687" pos:column="39"/></operator> <operator pos:line="687" pos:column="32">(<pos:position pos:line="687" pos:column="33"/></operator><call><name pos:line="687" pos:column="33">Curl_tvdiff<pos:position pos:line="687" pos:column="44"/></name> <argument_list pos:line="687" pos:column="45">(<argument><expr><name pos:line="687" pos:column="46">now<pos:position pos:line="687" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="687" pos:column="51">start<pos:position pos:line="687" pos:column="56"/></name></expr></argument>)<pos:position pos:line="687" pos:column="57"/></argument_list></call> <operator pos:line="687" pos:column="58">&gt;<pos:position pos:line="687" pos:column="62"/></operator> <name><name pos:line="687" pos:column="60">data<pos:position pos:line="687" pos:column="64"/></name><operator pos:line="687" pos:column="64">-&gt;<pos:position pos:line="687" pos:column="69"/></operator><name pos:line="687" pos:column="66">set<pos:position pos:line="687" pos:column="69"/></name><operator pos:line="687" pos:column="69">.<pos:position pos:line="687" pos:column="70"/></operator><name pos:line="687" pos:column="70">timeout<pos:position pos:line="687" pos:column="77"/></name></name><operator pos:line="687" pos:column="77">)<pos:position pos:line="687" pos:column="78"/></operator></expr>)<pos:position pos:line="687" pos:column="79"/></condition><then pos:line="687" pos:column="79"> <block pos:line="687" pos:column="80">{
	<expr_stmt><expr><call><name pos:line="688" pos:column="9">failf<pos:position pos:line="688" pos:column="14"/></name> <argument_list pos:line="688" pos:column="15">(<argument><expr><name pos:line="688" pos:column="16">data<pos:position pos:line="688" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="688" pos:column="22">"Operation timed out with %d out of %d bytes received"<pos:position pos:line="688" pos:column="76"/></literal></expr></argument>,
	       <argument><expr><name pos:line="689" pos:column="16">bytecount<pos:position pos:line="689" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="689" pos:column="27">conn<pos:position pos:line="689" pos:column="31"/></name><operator pos:line="689" pos:column="31">-&gt;<pos:position pos:line="689" pos:column="36"/></operator><name pos:line="689" pos:column="33">size<pos:position pos:line="689" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="689" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="689" pos:column="39"/></expr_stmt>
	<return pos:line="690" pos:column="9">return <expr><name pos:line="690" pos:column="16">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="690" pos:column="41"/></name></expr>;<pos:position pos:line="690" pos:column="42"/></return>
      }<pos:position pos:line="691" pos:column="8"/></block></then></if>
    }<pos:position pos:line="692" pos:column="6"/></block></while>
  }<pos:position pos:line="693" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="695" pos:column="3">/*
   * The tranfer has been performed. Just make some general checks before
   * returning.
   */</comment>

  <if pos:line="700" pos:column="3">if<condition pos:line="700" pos:column="5">(<expr><operator pos:line="700" pos:column="6">!<pos:position pos:line="700" pos:column="7"/></operator><operator pos:line="700" pos:column="7">(<pos:position pos:line="700" pos:column="8"/></operator><name><name pos:line="700" pos:column="8">data<pos:position pos:line="700" pos:column="12"/></name><operator pos:line="700" pos:column="12">-&gt;<pos:position pos:line="700" pos:column="17"/></operator><name pos:line="700" pos:column="14">set<pos:position pos:line="700" pos:column="17"/></name><operator pos:line="700" pos:column="17">.<pos:position pos:line="700" pos:column="18"/></operator><name pos:line="700" pos:column="18">no_body<pos:position pos:line="700" pos:column="25"/></name></name><operator pos:line="700" pos:column="25">)<pos:position pos:line="700" pos:column="26"/></operator> <operator pos:line="700" pos:column="27">&amp;&amp;<pos:position pos:line="700" pos:column="37"/></operator> <name pos:line="700" pos:column="30">contentlength<pos:position pos:line="700" pos:column="43"/></name> <operator pos:line="700" pos:column="44">&amp;&amp;<pos:position pos:line="700" pos:column="54"/></operator>
     <operator pos:line="701" pos:column="6">(<pos:position pos:line="701" pos:column="7"/></operator><name pos:line="701" pos:column="7">bytecount<pos:position pos:line="701" pos:column="16"/></name> <operator pos:line="701" pos:column="17">!=<pos:position pos:line="701" pos:column="19"/></operator> <name pos:line="701" pos:column="20">contentlength<pos:position pos:line="701" pos:column="33"/></name><operator pos:line="701" pos:column="33">)<pos:position pos:line="701" pos:column="34"/></operator></expr>)<pos:position pos:line="701" pos:column="35"/></condition><then pos:line="701" pos:column="35"> <block pos:line="701" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="702" pos:column="5">failf<pos:position pos:line="702" pos:column="10"/></name><argument_list pos:line="702" pos:column="10">(<argument><expr><name pos:line="702" pos:column="11">data<pos:position pos:line="702" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="702" pos:column="17">"transfer closed with %d bytes remaining to read"<pos:position pos:line="702" pos:column="66"/></literal></expr></argument>,
          <argument><expr><name pos:line="703" pos:column="11">contentlength<pos:position pos:line="703" pos:column="24"/></name><operator pos:line="703" pos:column="24">-<pos:position pos:line="703" pos:column="25"/></operator><name pos:line="703" pos:column="25">bytecount<pos:position pos:line="703" pos:column="34"/></name></expr></argument>)<pos:position pos:line="703" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="703" pos:column="36"/></expr_stmt>
    <return pos:line="704" pos:column="5">return <expr><name pos:line="704" pos:column="12">CURLE_PARTIAL_FILE<pos:position pos:line="704" pos:column="30"/></name></expr>;<pos:position pos:line="704" pos:column="31"/></return>
  }<pos:position pos:line="705" pos:column="4"/></block></then>
  <elseif pos:line="706" pos:column="3">else <if pos:line="706" pos:column="8">if<condition pos:line="706" pos:column="10">(<expr><name><name pos:line="706" pos:column="11">conn<pos:position pos:line="706" pos:column="15"/></name><operator pos:line="706" pos:column="15">-&gt;<pos:position pos:line="706" pos:column="20"/></operator><name pos:line="706" pos:column="17">bits<pos:position pos:line="706" pos:column="21"/></name><operator pos:line="706" pos:column="21">.<pos:position pos:line="706" pos:column="22"/></operator><name pos:line="706" pos:column="22">chunk<pos:position pos:line="706" pos:column="27"/></name></name> <operator pos:line="706" pos:column="28">&amp;&amp;<pos:position pos:line="706" pos:column="38"/></operator> <name><name pos:line="706" pos:column="31">conn<pos:position pos:line="706" pos:column="35"/></name><operator pos:line="706" pos:column="35">-&gt;<pos:position pos:line="706" pos:column="40"/></operator><name pos:line="706" pos:column="37">proto<pos:position pos:line="706" pos:column="42"/></name><operator pos:line="706" pos:column="42">.<pos:position pos:line="706" pos:column="43"/></operator><name pos:line="706" pos:column="43">http<pos:position pos:line="706" pos:column="47"/></name><operator pos:line="706" pos:column="47">-&gt;<pos:position pos:line="706" pos:column="52"/></operator><name pos:line="706" pos:column="49">chunk<pos:position pos:line="706" pos:column="54"/></name><operator pos:line="706" pos:column="54">.<pos:position pos:line="706" pos:column="55"/></operator><name pos:line="706" pos:column="55">datasize<pos:position pos:line="706" pos:column="63"/></name></name></expr>)<pos:position pos:line="706" pos:column="64"/></condition><then pos:line="706" pos:column="64"> <block pos:line="706" pos:column="65">{
    <expr_stmt><expr><call><name pos:line="707" pos:column="5">failf<pos:position pos:line="707" pos:column="10"/></name><argument_list pos:line="707" pos:column="10">(<argument><expr><name pos:line="707" pos:column="11">data<pos:position pos:line="707" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="707" pos:column="17">"transfer closed with at least %d bytes remaining"<pos:position pos:line="707" pos:column="67"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="708" pos:column="11">conn<pos:position pos:line="708" pos:column="15"/></name><operator pos:line="708" pos:column="15">-&gt;<pos:position pos:line="708" pos:column="20"/></operator><name pos:line="708" pos:column="17">proto<pos:position pos:line="708" pos:column="22"/></name><operator pos:line="708" pos:column="22">.<pos:position pos:line="708" pos:column="23"/></operator><name pos:line="708" pos:column="23">http<pos:position pos:line="708" pos:column="27"/></name><operator pos:line="708" pos:column="27">-&gt;<pos:position pos:line="708" pos:column="32"/></operator><name pos:line="708" pos:column="29">chunk<pos:position pos:line="708" pos:column="34"/></name><operator pos:line="708" pos:column="34">.<pos:position pos:line="708" pos:column="35"/></operator><name pos:line="708" pos:column="35">datasize<pos:position pos:line="708" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="708" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="708" pos:column="45"/></expr_stmt>
    <return pos:line="709" pos:column="5">return <expr><name pos:line="709" pos:column="12">CURLE_PARTIAL_FILE<pos:position pos:line="709" pos:column="30"/></name></expr>;<pos:position pos:line="709" pos:column="31"/></return>
  }<pos:position pos:line="710" pos:column="4"/></block></then></if></elseif></if>
  <if pos:line="711" pos:column="3">if<condition pos:line="711" pos:column="5">(<expr><call><name pos:line="711" pos:column="6">Curl_pgrsUpdate<pos:position pos:line="711" pos:column="21"/></name><argument_list pos:line="711" pos:column="21">(<argument><expr><name pos:line="711" pos:column="22">conn<pos:position pos:line="711" pos:column="26"/></name></expr></argument>)<pos:position pos:line="711" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="711" pos:column="28"/></condition><then pos:line="711" pos:column="28">
    <block type="pseudo"><return pos:line="712" pos:column="5">return <expr><name pos:line="712" pos:column="12">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="712" pos:column="37"/></name></expr>;<pos:position pos:line="712" pos:column="38"/></return></block></then></if>

  <if pos:line="714" pos:column="3">if<condition pos:line="714" pos:column="5">(<expr><name><name pos:line="714" pos:column="6">conn<pos:position pos:line="714" pos:column="10"/></name><operator pos:line="714" pos:column="10">-&gt;<pos:position pos:line="714" pos:column="15"/></operator><name pos:line="714" pos:column="12">bytecountp<pos:position pos:line="714" pos:column="22"/></name></name></expr>)<pos:position pos:line="714" pos:column="23"/></condition><then pos:line="714" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="715" pos:column="5">*<pos:position pos:line="715" pos:column="6"/></operator><name><name pos:line="715" pos:column="6">conn<pos:position pos:line="715" pos:column="10"/></name><operator pos:line="715" pos:column="10">-&gt;<pos:position pos:line="715" pos:column="15"/></operator><name pos:line="715" pos:column="12">bytecountp<pos:position pos:line="715" pos:column="22"/></name></name> <operator pos:line="715" pos:column="23">=<pos:position pos:line="715" pos:column="24"/></operator> <name pos:line="715" pos:column="25">bytecount<pos:position pos:line="715" pos:column="34"/></name></expr>;<pos:position pos:line="715" pos:column="35"/></expr_stmt></block></then></if> <comment type="block" pos:line="715" pos:column="36">/* read count */</comment>
  <if pos:line="716" pos:column="3">if<condition pos:line="716" pos:column="5">(<expr><name><name pos:line="716" pos:column="6">conn<pos:position pos:line="716" pos:column="10"/></name><operator pos:line="716" pos:column="10">-&gt;<pos:position pos:line="716" pos:column="15"/></operator><name pos:line="716" pos:column="12">writebytecountp<pos:position pos:line="716" pos:column="27"/></name></name></expr>)<pos:position pos:line="716" pos:column="28"/></condition><then pos:line="716" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="717" pos:column="5">*<pos:position pos:line="717" pos:column="6"/></operator><name><name pos:line="717" pos:column="6">conn<pos:position pos:line="717" pos:column="10"/></name><operator pos:line="717" pos:column="10">-&gt;<pos:position pos:line="717" pos:column="15"/></operator><name pos:line="717" pos:column="12">writebytecountp<pos:position pos:line="717" pos:column="27"/></name></name> <operator pos:line="717" pos:column="28">=<pos:position pos:line="717" pos:column="29"/></operator> <name pos:line="717" pos:column="30">writebytecount<pos:position pos:line="717" pos:column="44"/></name></expr>;<pos:position pos:line="717" pos:column="45"/></expr_stmt></block></then></if> <comment type="block" pos:line="717" pos:column="46">/* write count */</comment>

  <return pos:line="719" pos:column="3">return <expr><name pos:line="719" pos:column="10">CURLE_OK<pos:position pos:line="719" pos:column="18"/></name></expr>;<pos:position pos:line="719" pos:column="19"/></return>
}<pos:position pos:line="720" pos:column="2"/></block></function></unit>
