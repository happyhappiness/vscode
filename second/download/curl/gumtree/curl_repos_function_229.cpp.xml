<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_229.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">init_resolve_thread<pos:position pos:line="1" pos:column="32"/></name> <parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">connectdata<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">conn<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                                 <parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name pos:line="2" pos:column="40">char<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">hostname<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">port<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
                                 <parameter><decl><type><specifier pos:line="3" pos:column="34">const<pos:position pos:line="3" pos:column="39"/></specifier> <name pos:line="3" pos:column="40">Curl_addrinfo<pos:position pos:line="3" pos:column="53"/></name> <modifier pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></modifier></type><name pos:line="3" pos:column="55">hints<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="61"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">thread_data<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">td<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><call><name pos:line="5" pos:column="28">calloc<pos:position pos:line="5" pos:column="34"/></name><argument_list pos:line="5" pos:column="34">(<argument><expr><sizeof pos:line="5" pos:column="35">sizeof<argument_list pos:line="5" pos:column="41">(<argument><expr><operator pos:line="5" pos:column="42">*<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="43">td<pos:position pos:line="5" pos:column="45"/></name></expr></argument>)<pos:position pos:line="5" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="48">1<pos:position pos:line="5" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="51"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">td<pos:position pos:line="7" pos:column="10"/></name></expr>)<pos:position pos:line="7" pos:column="11"/></condition><then pos:line="7" pos:column="11"> <block pos:line="7" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">SetLastError<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><name pos:line="8" pos:column="18">ENOMEM<pos:position pos:line="8" pos:column="24"/></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">FALSE<pos:position pos:line="9" pos:column="17"/></name></expr>;<pos:position pos:line="9" pos:column="18"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">Curl_safefree<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name><name pos:line="12" pos:column="17">conn<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">-&gt;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="23">async<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">.<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="29">hostname<pos:position pos:line="12" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">conn<pos:position pos:line="13" pos:column="7"/></name><operator pos:line="13" pos:column="7">-&gt;<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="9">async<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">hostname<pos:position pos:line="13" pos:column="23"/></name></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <call><name pos:line="13" pos:column="26">strdup<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">hostname<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><operator pos:line="14" pos:column="7">!<pos:position pos:line="14" pos:column="8"/></operator><name><name pos:line="14" pos:column="8">conn<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">async<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">.<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">hostname<pos:position pos:line="14" pos:column="28"/></name></name></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29"> <block pos:line="14" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">free<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name pos:line="15" pos:column="10">td<pos:position pos:line="15" pos:column="12"/></name></expr></argument>)<pos:position pos:line="15" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">SetLastError<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">ENOMEM<pos:position pos:line="16" pos:column="24"/></name></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">FALSE<pos:position pos:line="17" pos:column="17"/></name></expr>;<pos:position pos:line="17" pos:column="18"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="20" pos:column="3">conn<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">-&gt;<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="9">async<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">.<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">port<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">port<pos:position pos:line="20" pos:column="26"/></name></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">conn<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">-&gt;<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="9">async<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">.<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">done<pos:position pos:line="21" pos:column="19"/></name></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">FALSE<pos:position pos:line="21" pos:column="27"/></name></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">conn<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">-&gt;<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="9">async<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">.<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">status<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <literal type="number" pos:line="22" pos:column="24">0<pos:position pos:line="22" pos:column="25"/></literal></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">conn<pos:position pos:line="23" pos:column="7"/></name><operator pos:line="23" pos:column="7">-&gt;<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="9">async<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">.<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">dns<pos:position pos:line="23" pos:column="18"/></name></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">NULL<pos:position pos:line="23" pos:column="25"/></name></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">conn<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">-&gt;<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="9">async<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">.<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">os_specific<pos:position pos:line="24" pos:column="26"/></name></name> <operator pos:line="24" pos:column="27">=<pos:position pos:line="24" pos:column="28"/></operator> <operator pos:line="24" pos:column="29">(<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">void<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">*<pos:position pos:line="24" pos:column="35"/></operator><operator pos:line="24" pos:column="35">)<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="37">td<pos:position pos:line="24" pos:column="39"/></name></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="25" pos:column="3">td<pos:position pos:line="25" pos:column="5"/></name><operator pos:line="25" pos:column="5">-&gt;<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="7">dummy_sock<pos:position pos:line="25" pos:column="17"/></name></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">CURL_SOCKET_BAD<pos:position pos:line="25" pos:column="35"/></name></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="27" pos:column="3">/* Create the mutex used to inform the resolver thread that we're
   * still waiting, and take initial ownership.
   */</comment>
  <expr_stmt><expr><name><name pos:line="30" pos:column="3">td<pos:position pos:line="30" pos:column="5"/></name><operator pos:line="30" pos:column="5">-&gt;<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="7">mutex_waiting<pos:position pos:line="30" pos:column="20"/></name></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">CreateMutex<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">NULL<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">TRUE<pos:position pos:line="30" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">NULL<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name><name pos:line="31" pos:column="7">td<pos:position pos:line="31" pos:column="9"/></name><operator pos:line="31" pos:column="9">-&gt;<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="11">mutex_waiting<pos:position pos:line="31" pos:column="24"/></name></name> <operator pos:line="31" pos:column="25">==<pos:position pos:line="31" pos:column="27"/></operator> <name pos:line="31" pos:column="28">NULL<pos:position pos:line="31" pos:column="32"/></name></expr>)<pos:position pos:line="31" pos:column="33"/></condition><then pos:line="31" pos:column="33"> <block pos:line="31" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">Curl_destroy_thread_data<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><operator pos:line="32" pos:column="30">&amp;<pos:position pos:line="32" pos:column="35"/></operator><name><name pos:line="32" pos:column="31">conn<pos:position pos:line="32" pos:column="35"/></name><operator pos:line="32" pos:column="35">-&gt;<pos:position pos:line="32" pos:column="40"/></operator><name pos:line="32" pos:column="37">async<pos:position pos:line="32" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">SetLastError<pos:position pos:line="33" pos:column="17"/></name><argument_list pos:line="33" pos:column="17">(<argument><expr><name pos:line="33" pos:column="18">EAGAIN<pos:position pos:line="33" pos:column="24"/></name></expr></argument>)<pos:position pos:line="33" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">FALSE<pos:position pos:line="34" pos:column="17"/></name></expr>;<pos:position pos:line="34" pos:column="18"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="37" pos:column="3">/* Create the event that the thread uses to inform us that it's
   * done resolving. Do not signal it.
   */</comment>
  <expr_stmt><expr><name><name pos:line="40" pos:column="3">td<pos:position pos:line="40" pos:column="5"/></name><operator pos:line="40" pos:column="5">-&gt;<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="7">event_resolved<pos:position pos:line="40" pos:column="21"/></name></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <call><name pos:line="40" pos:column="24">CreateEvent<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">NULL<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="42">TRUE<pos:position pos:line="40" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="48">FALSE<pos:position pos:line="40" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="55">NULL<pos:position pos:line="40" pos:column="59"/></name></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><name><name pos:line="41" pos:column="7">td<pos:position pos:line="41" pos:column="9"/></name><operator pos:line="41" pos:column="9">-&gt;<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="11">event_resolved<pos:position pos:line="41" pos:column="25"/></name></name> <operator pos:line="41" pos:column="26">==<pos:position pos:line="41" pos:column="28"/></operator> <name pos:line="41" pos:column="29">NULL<pos:position pos:line="41" pos:column="33"/></name></expr>)<pos:position pos:line="41" pos:column="34"/></condition><then pos:line="41" pos:column="34"> <block pos:line="41" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">Curl_destroy_thread_data<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><operator pos:line="42" pos:column="30">&amp;<pos:position pos:line="42" pos:column="35"/></operator><name><name pos:line="42" pos:column="31">conn<pos:position pos:line="42" pos:column="35"/></name><operator pos:line="42" pos:column="35">-&gt;<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="37">async<pos:position pos:line="42" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">SetLastError<pos:position pos:line="43" pos:column="17"/></name><argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">EAGAIN<pos:position pos:line="43" pos:column="24"/></name></expr></argument>)<pos:position pos:line="43" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>
    <return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">FALSE<pos:position pos:line="44" pos:column="17"/></name></expr>;<pos:position pos:line="44" pos:column="18"/></return>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="47" pos:column="3">td<pos:position pos:line="47" pos:column="5"/></name><operator pos:line="47" pos:column="5">-&gt;<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="7">stderr_file<pos:position pos:line="47" pos:column="18"/></name></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <name pos:line="47" pos:column="21">stderr<pos:position pos:line="47" pos:column="27"/></name></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt>

<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">_WIN32_WCE<pos:position pos:line="49" pos:column="18"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">td<pos:position pos:line="50" pos:column="5"/></name><operator pos:line="50" pos:column="5">-&gt;<pos:position pos:line="50" pos:column="10"/></operator><name pos:line="50" pos:column="7">thread_hnd<pos:position pos:line="50" pos:column="17"/></name></name> <operator pos:line="50" pos:column="18">=<pos:position pos:line="50" pos:column="19"/></operator> <operator pos:line="50" pos:column="20">(<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="21">HANDLE<pos:position pos:line="50" pos:column="27"/></name><operator pos:line="50" pos:column="27">)<pos:position pos:line="50" pos:column="28"/></operator> <call><name pos:line="50" pos:column="29">CreateThread<pos:position pos:line="50" pos:column="41"/></name><argument_list pos:line="50" pos:column="41">(<argument><expr><name pos:line="50" pos:column="42">NULL<pos:position pos:line="50" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="48">0<pos:position pos:line="50" pos:column="49"/></literal></expr></argument>,
                                         <argument><expr><operator pos:line="51" pos:column="42">(<pos:position pos:line="51" pos:column="43"/></operator><name pos:line="51" pos:column="43">LPTHREAD_START_ROUTINE<pos:position pos:line="51" pos:column="65"/></name><operator pos:line="51" pos:column="65">)<pos:position pos:line="51" pos:column="66"/></operator> <name pos:line="51" pos:column="67">THREAD_FUNC<pos:position pos:line="51" pos:column="78"/></name></expr></argument>,
                                         <argument><expr><name pos:line="52" pos:column="42">conn<pos:position pos:line="52" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="48">0<pos:position pos:line="52" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="52" pos:column="51">&amp;<pos:position pos:line="52" pos:column="56"/></operator><name><name pos:line="52" pos:column="52">td<pos:position pos:line="52" pos:column="54"/></name><operator pos:line="52" pos:column="54">-&gt;<pos:position pos:line="52" pos:column="59"/></operator><name pos:line="52" pos:column="56">thread_id<pos:position pos:line="52" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="67"/></expr_stmt>
<cpp:else pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">else<pos:position pos:line="53" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name><name pos:line="54" pos:column="3">td<pos:position pos:line="54" pos:column="5"/></name><operator pos:line="54" pos:column="5">-&gt;<pos:position pos:line="54" pos:column="10"/></operator><name pos:line="54" pos:column="7">thread_hnd<pos:position pos:line="54" pos:column="17"/></name></name> <operator pos:line="54" pos:column="18">=<pos:position pos:line="54" pos:column="19"/></operator> <operator pos:line="54" pos:column="20">(<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="21">HANDLE<pos:position pos:line="54" pos:column="27"/></name><operator pos:line="54" pos:column="27">)<pos:position pos:line="54" pos:column="28"/></operator> <call><name pos:line="54" pos:column="29">_beginthreadex<pos:position pos:line="54" pos:column="43"/></name><argument_list pos:line="54" pos:column="43">(<argument><expr><name pos:line="54" pos:column="44">NULL<pos:position pos:line="54" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="50">0<pos:position pos:line="54" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="53">THREAD_FUNC<pos:position pos:line="54" pos:column="64"/></name></expr></argument>,
                                           <argument><expr><name pos:line="55" pos:column="44">conn<pos:position pos:line="55" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="50">0<pos:position pos:line="55" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="55" pos:column="53">&amp;<pos:position pos:line="55" pos:column="58"/></operator><name><name pos:line="55" pos:column="54">td<pos:position pos:line="55" pos:column="56"/></name><operator pos:line="55" pos:column="56">-&gt;<pos:position pos:line="55" pos:column="61"/></operator><name pos:line="55" pos:column="58">thread_id<pos:position pos:line="55" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="69"/></expr_stmt>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">ifdef<pos:position pos:line="58" pos:column="7"/></cpp:directive> <name pos:line="58" pos:column="8">CURLRES_IPV6<pos:position pos:line="58" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">curlassert<pos:position pos:line="59" pos:column="13"/></name><argument_list pos:line="59" pos:column="13">(<argument><expr><name pos:line="59" pos:column="14">hints<pos:position pos:line="59" pos:column="19"/></name></expr></argument>)<pos:position pos:line="59" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="60" pos:column="3">td<pos:position pos:line="60" pos:column="5"/></name><operator pos:line="60" pos:column="5">-&gt;<pos:position pos:line="60" pos:column="10"/></operator><name pos:line="60" pos:column="7">hints<pos:position pos:line="60" pos:column="12"/></name></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <operator pos:line="60" pos:column="15">*<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="16">hints<pos:position pos:line="60" pos:column="21"/></name></expr>;<pos:position pos:line="60" pos:column="22"/></expr_stmt>
<cpp:else pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">else<pos:position pos:line="61" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="62" pos:column="3">(<pos:position pos:line="62" pos:column="4"/></operator><name pos:line="62" pos:column="4">void<pos:position pos:line="62" pos:column="8"/></name><operator pos:line="62" pos:column="8">)<pos:position pos:line="62" pos:column="9"/></operator> <name pos:line="62" pos:column="10">hints<pos:position pos:line="62" pos:column="15"/></name></expr>;<pos:position pos:line="62" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><operator pos:line="65" pos:column="7">!<pos:position pos:line="65" pos:column="8"/></operator><name><name pos:line="65" pos:column="8">td<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">thread_hnd<pos:position pos:line="65" pos:column="22"/></name></name></expr>)<pos:position pos:line="65" pos:column="23"/></condition><then pos:line="65" pos:column="23"> <block pos:line="65" pos:column="24">{
     <expr_stmt><expr><call><name pos:line="66" pos:column="6">SetLastError<pos:position pos:line="66" pos:column="18"/></name><argument_list pos:line="66" pos:column="18">(<argument><expr><name pos:line="66" pos:column="19">errno<pos:position pos:line="66" pos:column="24"/></name></expr></argument>)<pos:position pos:line="66" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="26"/></expr_stmt>
     <expr_stmt><expr><call><name pos:line="67" pos:column="6">TRACE<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><operator pos:line="67" pos:column="12">(<pos:position pos:line="67" pos:column="13"/></operator><literal type="string" pos:line="67" pos:column="13">"_beginthreadex() failed; %s\n"<pos:position pos:line="67" pos:column="44"/></literal><operator pos:line="67" pos:column="44">,<pos:position pos:line="67" pos:column="45"/></operator> <call><name pos:line="67" pos:column="46">Curl_strerror<pos:position pos:line="67" pos:column="59"/></name><argument_list pos:line="67" pos:column="59">(<argument><expr><name pos:line="67" pos:column="60">conn<pos:position pos:line="67" pos:column="64"/></name></expr></argument>,<argument><expr><name pos:line="67" pos:column="65">errno<pos:position pos:line="67" pos:column="70"/></name></expr></argument>)<pos:position pos:line="67" pos:column="71"/></argument_list></call><operator pos:line="67" pos:column="71">)<pos:position pos:line="67" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="67" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="74"/></expr_stmt>
     <expr_stmt><expr><call><name pos:line="68" pos:column="6">Curl_destroy_thread_data<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><operator pos:line="68" pos:column="31">&amp;<pos:position pos:line="68" pos:column="36"/></operator><name><name pos:line="68" pos:column="32">conn<pos:position pos:line="68" pos:column="36"/></name><operator pos:line="68" pos:column="36">-&gt;<pos:position pos:line="68" pos:column="41"/></operator><name pos:line="68" pos:column="38">async<pos:position pos:line="68" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="45"/></expr_stmt>
     <return pos:line="69" pos:column="6">return <expr><name pos:line="69" pos:column="13">FALSE<pos:position pos:line="69" pos:column="18"/></name></expr>;<pos:position pos:line="69" pos:column="19"/></return>
  }<pos:position pos:line="70" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="71" pos:column="3">/* This socket is only to keep Curl_resolv_fdset() and select() happy;
   * should never become signalled for read/write since it's unbound but
   * Windows needs atleast 1 socket in select().
   */</comment>
  <expr_stmt><expr><name><name pos:line="75" pos:column="3">td<pos:position pos:line="75" pos:column="5"/></name><operator pos:line="75" pos:column="5">-&gt;<pos:position pos:line="75" pos:column="10"/></operator><name pos:line="75" pos:column="7">dummy_sock<pos:position pos:line="75" pos:column="17"/></name></name> <operator pos:line="75" pos:column="18">=<pos:position pos:line="75" pos:column="19"/></operator> <call><name pos:line="75" pos:column="20">socket<pos:position pos:line="75" pos:column="26"/></name><argument_list pos:line="75" pos:column="26">(<argument><expr><name pos:line="75" pos:column="27">AF_INET<pos:position pos:line="75" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="36">SOCK_DGRAM<pos:position pos:line="75" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="48">0<pos:position pos:line="75" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="51"/></expr_stmt>
  <return pos:line="76" pos:column="3">return <expr><name pos:line="76" pos:column="10">TRUE<pos:position pos:line="76" pos:column="14"/></name></expr>;<pos:position pos:line="76" pos:column="15"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
