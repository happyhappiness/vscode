<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_372_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type>
<name pos:line="2" pos:column="1">Curl_formget_callback_ccsid<pos:position pos:line="2" pos:column="28"/></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">void<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">arg<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">char<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type> <name pos:line="2" pos:column="54">buf<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">size_t<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">len<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>

<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">cfcdata<pos:position pos:line="5" pos:column="10"/></name> <modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type> <name pos:line="5" pos:column="13">p<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type> <name pos:line="6" pos:column="10">b<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">l<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">ret<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">p<pos:position pos:line="10" pos:column="4"/></name> <operator pos:line="10" pos:column="5">=<pos:position pos:line="10" pos:column="6"/></operator> <operator pos:line="10" pos:column="7">(<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">cfcdata<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></operator><operator pos:line="10" pos:column="17">)<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">arg<pos:position pos:line="10" pos:column="22"/></name></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">(<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">long<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">)<pos:position pos:line="12" pos:column="12"/></operator> <name pos:line="12" pos:column="13">len<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">&lt;=<pos:position pos:line="12" pos:column="22"/></operator> <literal type="number" pos:line="12" pos:column="20">0<pos:position pos:line="12" pos:column="21"/></literal></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><call pos:line="13" pos:column="12">(<modifier pos:line="13" pos:column="13">*<pos:position pos:line="13" pos:column="14"/></modifier><name><name pos:line="13" pos:column="14">p<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">append<pos:position pos:line="13" pos:column="23"/></name></name>)<argument_list pos:line="13" pos:column="24">(<argument><expr><name><name pos:line="13" pos:column="25">p<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">-&gt;<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="28">arg<pos:position pos:line="13" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="33">buf<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="38">len<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="15" pos:column="3">b<pos:position pos:line="15" pos:column="4"/></name> <operator pos:line="15" pos:column="5">=<pos:position pos:line="15" pos:column="6"/></operator> <call><name pos:line="15" pos:column="7">malloc<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">MAX_CONV_EXPANSION<pos:position pos:line="15" pos:column="32"/></name> <operator pos:line="15" pos:column="33">*<pos:position pos:line="15" pos:column="34"/></operator> <name pos:line="15" pos:column="35">len<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">b<pos:position pos:line="17" pos:column="8"/></name></expr>)<pos:position pos:line="17" pos:column="9"/></condition><then pos:line="17" pos:column="9">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">size_t<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">)<pos:position pos:line="18" pos:column="20"/></operator> <operator pos:line="18" pos:column="21">-<pos:position pos:line="18" pos:column="22"/></operator><literal type="number" pos:line="18" pos:column="22">1<pos:position pos:line="18" pos:column="23"/></literal></expr>;<pos:position pos:line="18" pos:column="24"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">l<pos:position pos:line="20" pos:column="4"/></name> <operator pos:line="20" pos:column="5">=<pos:position pos:line="20" pos:column="6"/></operator> <call><name pos:line="20" pos:column="7">convert<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">b<pos:position pos:line="20" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="18">MAX_CONV_EXPANSION<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">*<pos:position pos:line="20" pos:column="38"/></operator> <name pos:line="20" pos:column="39">len<pos:position pos:line="20" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="44">p<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">-&gt;<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="47">ccsid<pos:position pos:line="20" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="54">buf<pos:position pos:line="20" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="59">len<pos:position pos:line="20" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="64">ASCII_CCSID<pos:position pos:line="20" pos:column="75"/></name></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>

  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">l<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">&lt;<pos:position pos:line="22" pos:column="12"/></operator> <literal type="number" pos:line="22" pos:column="10">0<pos:position pos:line="22" pos:column="11"/></literal></expr>)<pos:position pos:line="22" pos:column="12"/></condition><then pos:line="22" pos:column="12"> <block pos:line="22" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">free<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">b<pos:position pos:line="23" pos:column="11"/></name></expr></argument>)<pos:position pos:line="23" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="13"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">size_t<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">)<pos:position pos:line="24" pos:column="20"/></operator> <operator pos:line="24" pos:column="21">-<pos:position pos:line="24" pos:column="22"/></operator><literal type="number" pos:line="24" pos:column="22">1<pos:position pos:line="24" pos:column="23"/></literal></expr>;<pos:position pos:line="24" pos:column="24"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="27" pos:column="3">ret<pos:position pos:line="27" pos:column="6"/></name> <operator pos:line="27" pos:column="7">=<pos:position pos:line="27" pos:column="8"/></operator> <call pos:line="27" pos:column="9">(<modifier pos:line="27" pos:column="10">*<pos:position pos:line="27" pos:column="11"/></modifier><name><name pos:line="27" pos:column="11">p<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">append<pos:position pos:line="27" pos:column="20"/></name></name>)<argument_list pos:line="27" pos:column="21">(<argument><expr><name><name pos:line="27" pos:column="22">p<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">-&gt;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="25">arg<pos:position pos:line="27" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">b<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="33">l<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">free<pos:position pos:line="28" pos:column="7"/></name><argument_list pos:line="28" pos:column="7">(<argument><expr><name pos:line="28" pos:column="8">b<pos:position pos:line="28" pos:column="9"/></name></expr></argument>)<pos:position pos:line="28" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="11"/></expr_stmt>
  <return pos:line="29" pos:column="3">return <expr><ternary><condition><expr><name pos:line="29" pos:column="10">ret<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">==<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="17">l<pos:position pos:line="29" pos:column="18"/></name></expr>?<pos:position pos:line="29" pos:column="19"/></condition><then pos:line="29" pos:column="19"> <expr><name pos:line="29" pos:column="20">len<pos:position pos:line="29" pos:column="23"/></name></expr></then><else pos:line="29" pos:column="23">: <expr><operator pos:line="29" pos:column="25">-<pos:position pos:line="29" pos:column="26"/></operator><literal type="number" pos:line="29" pos:column="26">1<pos:position pos:line="29" pos:column="27"/></literal></expr></else></ternary></expr>;<pos:position pos:line="29" pos:column="28"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
