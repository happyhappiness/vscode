<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1107_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_http2_done_sending<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">connectdata<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">conn<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">CURLE_OK<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>

  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><operator pos:line="5" pos:column="6">(<pos:position pos:line="5" pos:column="7"/></operator><name><name pos:line="5" pos:column="7">conn<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">-&gt;<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="13">handler<pos:position pos:line="5" pos:column="20"/></name></name> <operator pos:line="5" pos:column="21">==<pos:position pos:line="5" pos:column="23"/></operator> <operator pos:line="5" pos:column="24">&amp;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="25">Curl_handler_http2_ssl<pos:position pos:line="5" pos:column="47"/></name><operator pos:line="5" pos:column="47">)<pos:position pos:line="5" pos:column="48"/></operator> <operator pos:line="5" pos:column="49">||<pos:position pos:line="5" pos:column="51"/></operator>
     <operator pos:line="6" pos:column="6">(<pos:position pos:line="6" pos:column="7"/></operator><name><name pos:line="6" pos:column="7">conn<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">handler<pos:position pos:line="6" pos:column="20"/></name></name> <operator pos:line="6" pos:column="21">==<pos:position pos:line="6" pos:column="23"/></operator> <operator pos:line="6" pos:column="24">&amp;<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="25">Curl_handler_http2<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">)<pos:position pos:line="6" pos:column="44"/></operator></expr>)<pos:position pos:line="6" pos:column="45"/></condition><then pos:line="6" pos:column="45"> <block pos:line="6" pos:column="46">{
    <comment type="block" pos:line="7" pos:column="5">/* make sure this is only attempted for HTTP/2 transfers */</comment>

    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">HTTP<pos:position pos:line="9" pos:column="16"/></name></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">stream<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name><name pos:line="9" pos:column="27">conn<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">data<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">-&gt;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="39">req<pos:position pos:line="9" pos:column="42"/></name><operator pos:line="9" pos:column="42">.<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="43">protop<pos:position pos:line="9" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="50"/></decl_stmt>

    <if pos:line="11" pos:column="5">if<condition pos:line="11" pos:column="7">(<expr><name><name pos:line="11" pos:column="8">stream<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">upload_left<pos:position pos:line="11" pos:column="27"/></name></name></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28"> <block pos:line="11" pos:column="29">{
      <comment type="block" pos:line="12" pos:column="7">/* If the stream still thinks there's data left to upload. */</comment>
      <decl_stmt><decl><type><name><name pos:line="13" pos:column="7">struct<pos:position pos:line="13" pos:column="13"/></name> <name pos:line="13" pos:column="14">http_conn<pos:position pos:line="13" pos:column="23"/></name></name> <modifier pos:line="13" pos:column="24">*<pos:position pos:line="13" pos:column="25"/></modifier></type><name pos:line="13" pos:column="25">httpc<pos:position pos:line="13" pos:column="30"/></name> <init pos:line="13" pos:column="31">= <expr><operator pos:line="13" pos:column="33">&amp;<pos:position pos:line="13" pos:column="38"/></operator><name><name pos:line="13" pos:column="34">conn<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">-&gt;<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="40">proto<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">.<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="46">httpc<pos:position pos:line="13" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="52"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">nghttp2_session<pos:position pos:line="14" pos:column="22"/></name> <modifier pos:line="14" pos:column="23">*<pos:position pos:line="14" pos:column="24"/></modifier></type><name pos:line="14" pos:column="24">h2<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><name><name pos:line="14" pos:column="29">httpc<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">h2<pos:position pos:line="14" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="39"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="16" pos:column="7">stream<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">upload_left<pos:position pos:line="16" pos:column="26"/></name></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <literal type="number" pos:line="16" pos:column="29">0<pos:position pos:line="16" pos:column="30"/></literal></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt> <comment type="block" pos:line="16" pos:column="32">/* DONE! */</comment>

      <comment type="block" pos:line="18" pos:column="7">/* resume sending here to trigger the callback to get called again so
         that it can signal EOF to nghttp2 */</comment>
      <expr_stmt><expr><operator pos:line="20" pos:column="7">(<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">void<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">)<pos:position pos:line="20" pos:column="13"/></operator><call><name pos:line="20" pos:column="13">nghttp2_session_resume_data<pos:position pos:line="20" pos:column="40"/></name><argument_list pos:line="20" pos:column="40">(<argument><expr><name pos:line="20" pos:column="41">h2<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="45">stream<pos:position pos:line="20" pos:column="51"/></name><operator pos:line="20" pos:column="51">-&gt;<pos:position pos:line="20" pos:column="56"/></operator><name pos:line="20" pos:column="53">stream_id<pos:position pos:line="20" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>

      <expr_stmt><expr><operator pos:line="22" pos:column="7">(<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">void<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">)<pos:position pos:line="22" pos:column="13"/></operator><call><name pos:line="22" pos:column="13">h2_process_pending_input<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><name><name pos:line="22" pos:column="38">conn<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">-&gt;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="44">data<pos:position pos:line="22" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="50">httpc<pos:position pos:line="22" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="57">&amp;<pos:position pos:line="22" pos:column="62"/></operator><name pos:line="22" pos:column="58">result<pos:position pos:line="22" pos:column="64"/></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>
  <return pos:line="25" pos:column="3">return <expr><name pos:line="25" pos:column="10">result<pos:position pos:line="25" pos:column="16"/></name></expr>;<pos:position pos:line="25" pos:column="17"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
