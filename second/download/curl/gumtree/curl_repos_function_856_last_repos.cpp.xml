<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_856_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SANITIZEcode<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">rename_if_reserved_dos_device_name<pos:position pos:line="1" pos:column="48"/></name><parameter_list pos:line="1" pos:column="48">(<parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier><modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier><specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier></type> <name pos:line="1" pos:column="62">sanitized<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
                                                <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">file_name<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>,
                                                <parameter><decl><type><name pos:line="3" pos:column="49">int<pos:position pos:line="3" pos:column="52"/></name></type> <name pos:line="3" pos:column="53">flags<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="59"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <comment type="block" pos:line="5" pos:column="3">/* We could have a file whose name is a device on MS-DOS.  Trying to
   * retrieve such a file would fail at best and wedge us at worst.  We need
   * to rename such files. */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">p<pos:position pos:line="8" pos:column="10"/></name></decl>, <modifier pos:line="8" pos:column="12">*<pos:position pos:line="8" pos:column="13"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="13">base<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">fname<pos:position pos:line="9" pos:column="13"/></name><index pos:line="9" pos:column="13">[<expr><name pos:line="9" pos:column="14">PATH_MAX<pos:position pos:line="9" pos:column="22"/></name></expr>]<pos:position pos:line="9" pos:column="23"/></index></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">MSDOS<pos:position pos:line="10" pos:column="13"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">struct_stat<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">st_buf<pos:position pos:line="11" pos:column="21"/></name></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">!<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">sanitized<pos:position pos:line="14" pos:column="16"/></name></expr>)<pos:position pos:line="14" pos:column="17"/></condition><then pos:line="14" pos:column="17">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">SANITIZE_ERR_BAD_ARGUMENT<pos:position pos:line="15" pos:column="37"/></name></expr>;<pos:position pos:line="15" pos:column="38"/></return></block></then></if>

  <expr_stmt><expr><operator pos:line="17" pos:column="3">*<pos:position pos:line="17" pos:column="4"/></operator><name pos:line="17" pos:column="4">sanitized<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">NULL<pos:position pos:line="17" pos:column="20"/></name></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><operator pos:line="19" pos:column="6">!<pos:position pos:line="19" pos:column="7"/></operator><name pos:line="19" pos:column="7">file_name<pos:position pos:line="19" pos:column="16"/></name></expr>)<pos:position pos:line="19" pos:column="17"/></condition><then pos:line="19" pos:column="17">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">SANITIZE_ERR_BAD_ARGUMENT<pos:position pos:line="20" pos:column="37"/></name></expr>;<pos:position pos:line="20" pos:column="38"/></return></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* Ignore UNC prefixed paths, they are allowed to contain a reserved name. */</comment>
<cpp:ifndef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifndef<pos:position pos:line="23" pos:column="8"/></cpp:directive> <name pos:line="23" pos:column="9">MSDOS<pos:position pos:line="23" pos:column="14"/></name></cpp:ifndef>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><operator pos:line="24" pos:column="6">(<pos:position pos:line="24" pos:column="7"/></operator><name pos:line="24" pos:column="7">flags<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">&amp;<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="15">SANITIZE_ALLOW_PATH<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">)<pos:position pos:line="24" pos:column="35"/></operator> <operator pos:line="24" pos:column="36">&amp;&amp;<pos:position pos:line="24" pos:column="46"/></operator>
     <name><name pos:line="25" pos:column="6">file_name<pos:position pos:line="25" pos:column="15"/></name><index pos:line="25" pos:column="15">[<expr><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>]<pos:position pos:line="25" pos:column="18"/></index></name> <operator pos:line="25" pos:column="19">==<pos:position pos:line="25" pos:column="21"/></operator> <literal type="char" pos:line="25" pos:column="22">'\\'<pos:position pos:line="25" pos:column="26"/></literal> <operator pos:line="25" pos:column="27">&amp;&amp;<pos:position pos:line="25" pos:column="37"/></operator> <name><name pos:line="25" pos:column="30">file_name<pos:position pos:line="25" pos:column="39"/></name><index pos:line="25" pos:column="39">[<expr><literal type="number" pos:line="25" pos:column="40">1<pos:position pos:line="25" pos:column="41"/></literal></expr>]<pos:position pos:line="25" pos:column="42"/></index></name> <operator pos:line="25" pos:column="43">==<pos:position pos:line="25" pos:column="45"/></operator> <literal type="char" pos:line="25" pos:column="46">'\\'<pos:position pos:line="25" pos:column="50"/></literal></expr>)<pos:position pos:line="25" pos:column="51"/></condition><then pos:line="25" pos:column="51"> <block pos:line="25" pos:column="52">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">size_t<pos:position pos:line="26" pos:column="11"/></name></type> <name pos:line="26" pos:column="12">len<pos:position pos:line="26" pos:column="15"/></name> <init pos:line="26" pos:column="16">= <expr><call><name pos:line="26" pos:column="18">strlen<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">file_name<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="36"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="27" pos:column="5">*<pos:position pos:line="27" pos:column="6"/></operator><name pos:line="27" pos:column="6">sanitized<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <call><name pos:line="27" pos:column="18">malloc<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">len<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">+<pos:position pos:line="27" pos:column="30"/></operator> <literal type="number" pos:line="27" pos:column="31">1<pos:position pos:line="27" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><operator pos:line="28" pos:column="8">!<pos:position pos:line="28" pos:column="9"/></operator><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">sanitized<pos:position pos:line="28" pos:column="19"/></name></expr>)<pos:position pos:line="28" pos:column="20"/></condition><then pos:line="28" pos:column="20">
      <block type="pseudo"><return pos:line="29" pos:column="7">return <expr><name pos:line="29" pos:column="14">SANITIZE_ERR_OUT_OF_MEMORY<pos:position pos:line="29" pos:column="40"/></name></expr>;<pos:position pos:line="29" pos:column="41"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">strncpy<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><operator pos:line="30" pos:column="13">*<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">sanitized<pos:position pos:line="30" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="25">file_name<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="36">len<pos:position pos:line="30" pos:column="39"/></name> <operator pos:line="30" pos:column="40">+<pos:position pos:line="30" pos:column="41"/></operator> <literal type="number" pos:line="30" pos:column="42">1<pos:position pos:line="30" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">SANITIZE_ERR_OK<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="35" pos:column="3">if<condition pos:line="35" pos:column="5">(<expr><call><name pos:line="35" pos:column="6">strlen<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">file_name<pos:position pos:line="35" pos:column="22"/></name></expr></argument>)<pos:position pos:line="35" pos:column="23"/></argument_list></call> <operator pos:line="35" pos:column="24">&gt;<pos:position pos:line="35" pos:column="28"/></operator> <name pos:line="35" pos:column="26">PATH_MAX<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">-<pos:position pos:line="35" pos:column="35"/></operator><literal type="number" pos:line="35" pos:column="35">1<pos:position pos:line="35" pos:column="36"/></literal> <operator pos:line="35" pos:column="37">&amp;&amp;<pos:position pos:line="35" pos:column="47"/></operator>
     <operator pos:line="36" pos:column="6">(<pos:position pos:line="36" pos:column="7"/></operator><operator pos:line="36" pos:column="7">!<pos:position pos:line="36" pos:column="8"/></operator><operator pos:line="36" pos:column="8">(<pos:position pos:line="36" pos:column="9"/></operator><name pos:line="36" pos:column="9">flags<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">&amp;<pos:position pos:line="36" pos:column="20"/></operator> <name pos:line="36" pos:column="17">SANITIZE_ALLOW_TRUNCATE<pos:position pos:line="36" pos:column="40"/></name><operator pos:line="36" pos:column="40">)<pos:position pos:line="36" pos:column="41"/></operator> <operator pos:line="36" pos:column="42">||<pos:position pos:line="36" pos:column="44"/></operator>
      <call><name pos:line="37" pos:column="7">truncate_dryrun<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">file_name<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="34">PATH_MAX<pos:position pos:line="37" pos:column="42"/></name><operator pos:line="37" pos:column="42">-<pos:position pos:line="37" pos:column="43"/></operator><literal type="number" pos:line="37" pos:column="43">1<pos:position pos:line="37" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call><operator pos:line="37" pos:column="45">)<pos:position pos:line="37" pos:column="46"/></operator></expr>)<pos:position pos:line="37" pos:column="47"/></condition><then pos:line="37" pos:column="47">
    <block type="pseudo"><return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">SANITIZE_ERR_INVALID_PATH<pos:position pos:line="38" pos:column="37"/></name></expr>;<pos:position pos:line="38" pos:column="38"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="40" pos:column="3">strncpy<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><name pos:line="40" pos:column="11">fname<pos:position pos:line="40" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="18">file_name<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="29">PATH_MAX<pos:position pos:line="40" pos:column="37"/></name><operator pos:line="40" pos:column="37">-<pos:position pos:line="40" pos:column="38"/></operator><literal type="number" pos:line="40" pos:column="38">1<pos:position pos:line="40" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="41" pos:column="3">fname<pos:position pos:line="41" pos:column="8"/></name><index pos:line="41" pos:column="8">[<expr><name pos:line="41" pos:column="9">PATH_MAX<pos:position pos:line="41" pos:column="17"/></name><operator pos:line="41" pos:column="17">-<pos:position pos:line="41" pos:column="18"/></operator><literal type="number" pos:line="41" pos:column="18">1<pos:position pos:line="41" pos:column="19"/></literal></expr>]<pos:position pos:line="41" pos:column="20"/></index></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <literal type="char" pos:line="41" pos:column="23">'\0'<pos:position pos:line="41" pos:column="27"/></literal></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="42" pos:column="3">base<pos:position pos:line="42" pos:column="7"/></name> <operator pos:line="42" pos:column="8">=<pos:position pos:line="42" pos:column="9"/></operator> <call><name pos:line="42" pos:column="10">basename<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><name pos:line="42" pos:column="19">fname<pos:position pos:line="42" pos:column="24"/></name></expr></argument>)<pos:position pos:line="42" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="44" pos:column="3">/* Rename reserved device names that are known to be accessible without \\.\
     Examples: CON =&gt; _CON, CON.EXT =&gt; CON_EXT, CON:ADS =&gt; CON_ADS
     https://support.microsoft.com/en-us/kb/74496
     https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247.aspx
     */</comment>
  <for pos:line="49" pos:column="3">for<control pos:line="49" pos:column="6">(<init><expr><name pos:line="49" pos:column="7">p<pos:position pos:line="49" pos:column="8"/></name> <operator pos:line="49" pos:column="9">=<pos:position pos:line="49" pos:column="10"/></operator> <name pos:line="49" pos:column="11">fname<pos:position pos:line="49" pos:column="16"/></name></expr>;<pos:position pos:line="49" pos:column="17"/></init> <condition><expr><name pos:line="49" pos:column="18">p<pos:position pos:line="49" pos:column="19"/></name></expr>;<pos:position pos:line="49" pos:column="20"/></condition> <incr><expr><name pos:line="49" pos:column="21">p<pos:position pos:line="49" pos:column="22"/></name> <operator pos:line="49" pos:column="23">=<pos:position pos:line="49" pos:column="24"/></operator> <operator pos:line="49" pos:column="25">(<pos:position pos:line="49" pos:column="26"/></operator><ternary><condition><expr><name pos:line="49" pos:column="26">p<pos:position pos:line="49" pos:column="27"/></name> <operator pos:line="49" pos:column="28">==<pos:position pos:line="49" pos:column="30"/></operator> <name pos:line="49" pos:column="31">fname<pos:position pos:line="49" pos:column="36"/></name> <operator pos:line="49" pos:column="37">&amp;&amp;<pos:position pos:line="49" pos:column="47"/></operator> <name pos:line="49" pos:column="40">fname<pos:position pos:line="49" pos:column="45"/></name> <operator pos:line="49" pos:column="46">!=<pos:position pos:line="49" pos:column="48"/></operator> <name pos:line="49" pos:column="49">base<pos:position pos:line="49" pos:column="53"/></name></expr> ?<pos:position pos:line="49" pos:column="55"/></condition><then pos:line="49" pos:column="55"> <expr><name pos:line="49" pos:column="56">base<pos:position pos:line="49" pos:column="60"/></name></expr> <pos:position pos:line="49" pos:column="61"/></then><else pos:line="49" pos:column="61">: <expr><name pos:line="49" pos:column="63">NULL<pos:position pos:line="49" pos:column="67"/></name></expr></else></ternary><operator pos:line="49" pos:column="67">)<pos:position pos:line="49" pos:column="68"/></operator></expr></incr>)<pos:position pos:line="49" pos:column="69"/></control> <block pos:line="49" pos:column="70">{
    <decl_stmt><decl><type><name pos:line="50" pos:column="5">size_t<pos:position pos:line="50" pos:column="11"/></name></type> <name pos:line="50" pos:column="12">p_len<pos:position pos:line="50" pos:column="17"/></name></decl>;<pos:position pos:line="50" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">int<pos:position pos:line="51" pos:column="8"/></name></type> <name pos:line="51" pos:column="9">x<pos:position pos:line="51" pos:column="10"/></name> <init pos:line="51" pos:column="11">= <expr><ternary><condition><expr><operator pos:line="51" pos:column="13">(<pos:position pos:line="51" pos:column="14"/></operator><call><name pos:line="51" pos:column="14">curl_strnequal<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">p<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="32">"CON"<pos:position pos:line="51" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="39">3<pos:position pos:line="51" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call> <operator pos:line="51" pos:column="42">||<pos:position pos:line="51" pos:column="44"/></operator>
             <call><name pos:line="52" pos:column="14">curl_strnequal<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">p<pos:position pos:line="52" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="32">"PRN"<pos:position pos:line="52" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="39">3<pos:position pos:line="52" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call> <operator pos:line="52" pos:column="42">||<pos:position pos:line="52" pos:column="44"/></operator>
             <call><name pos:line="53" pos:column="14">curl_strnequal<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">p<pos:position pos:line="53" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="32">"AUX"<pos:position pos:line="53" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="39">3<pos:position pos:line="53" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call> <operator pos:line="53" pos:column="42">||<pos:position pos:line="53" pos:column="44"/></operator>
             <call><name pos:line="54" pos:column="14">curl_strnequal<pos:position pos:line="54" pos:column="28"/></name><argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">p<pos:position pos:line="54" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="32">"NUL"<pos:position pos:line="54" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="39">3<pos:position pos:line="54" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="41"/></argument_list></call><operator pos:line="54" pos:column="41">)<pos:position pos:line="54" pos:column="42"/></operator></expr> ?<pos:position pos:line="54" pos:column="44"/></condition><then pos:line="54" pos:column="44"> <expr><literal type="number" pos:line="54" pos:column="45">3<pos:position pos:line="54" pos:column="46"/></literal></expr> <pos:position pos:line="54" pos:column="47"/></then><else pos:line="54" pos:column="47">:
            <expr><ternary><condition><expr><operator pos:line="55" pos:column="13">(<pos:position pos:line="55" pos:column="14"/></operator><call><name pos:line="55" pos:column="14">curl_strnequal<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">p<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="32">"CLOCK$"<pos:position pos:line="55" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="42">6<pos:position pos:line="55" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call><operator pos:line="55" pos:column="44">)<pos:position pos:line="55" pos:column="45"/></operator></expr> ?<pos:position pos:line="55" pos:column="47"/></condition><then pos:line="55" pos:column="47"> <expr><literal type="number" pos:line="55" pos:column="48">6<pos:position pos:line="55" pos:column="49"/></literal></expr> <pos:position pos:line="55" pos:column="50"/></then><else pos:line="55" pos:column="50">:
            <expr><ternary><condition><expr><operator pos:line="56" pos:column="13">(<pos:position pos:line="56" pos:column="14"/></operator><call><name pos:line="56" pos:column="14">curl_strnequal<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><name pos:line="56" pos:column="29">p<pos:position pos:line="56" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="32">"COM"<pos:position pos:line="56" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="39">3<pos:position pos:line="56" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call> <operator pos:line="56" pos:column="42">||<pos:position pos:line="56" pos:column="44"/></operator> <call><name pos:line="56" pos:column="45">curl_strnequal<pos:position pos:line="56" pos:column="59"/></name><argument_list pos:line="56" pos:column="59">(<argument><expr><name pos:line="56" pos:column="60">p<pos:position pos:line="56" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="63">"LPT"<pos:position pos:line="56" pos:column="68"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="70">3<pos:position pos:line="56" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="72"/></argument_list></call><operator pos:line="56" pos:column="72">)<pos:position pos:line="56" pos:column="73"/></operator></expr> ?<pos:position pos:line="56" pos:column="75"/></condition><then pos:line="56" pos:column="75">
              <expr><operator pos:line="57" pos:column="15">(<pos:position pos:line="57" pos:column="16"/></operator><ternary><condition><expr><operator pos:line="57" pos:column="16">(<pos:position pos:line="57" pos:column="17"/></operator><literal type="char" pos:line="57" pos:column="17">'1'<pos:position pos:line="57" pos:column="20"/></literal> <operator pos:line="57" pos:column="21">&lt;=<pos:position pos:line="57" pos:column="26"/></operator> <name><name pos:line="57" pos:column="24">p<pos:position pos:line="57" pos:column="25"/></name><index pos:line="57" pos:column="25">[<expr><literal type="number" pos:line="57" pos:column="26">3<pos:position pos:line="57" pos:column="27"/></literal></expr>]<pos:position pos:line="57" pos:column="28"/></index></name> <operator pos:line="57" pos:column="29">&amp;&amp;<pos:position pos:line="57" pos:column="39"/></operator> <name><name pos:line="57" pos:column="32">p<pos:position pos:line="57" pos:column="33"/></name><index pos:line="57" pos:column="33">[<expr><literal type="number" pos:line="57" pos:column="34">3<pos:position pos:line="57" pos:column="35"/></literal></expr>]<pos:position pos:line="57" pos:column="36"/></index></name> <operator pos:line="57" pos:column="37">&lt;=<pos:position pos:line="57" pos:column="42"/></operator> <literal type="char" pos:line="57" pos:column="40">'9'<pos:position pos:line="57" pos:column="43"/></literal><operator pos:line="57" pos:column="43">)<pos:position pos:line="57" pos:column="44"/></operator></expr> ?<pos:position pos:line="57" pos:column="46"/></condition><then pos:line="57" pos:column="46"> <expr><literal type="number" pos:line="57" pos:column="47">4<pos:position pos:line="57" pos:column="48"/></literal></expr> <pos:position pos:line="57" pos:column="49"/></then><else pos:line="57" pos:column="49">: <expr><literal type="number" pos:line="57" pos:column="51">3<pos:position pos:line="57" pos:column="52"/></literal></expr></else></ternary><operator pos:line="57" pos:column="52">)<pos:position pos:line="57" pos:column="53"/></operator></expr> <pos:position pos:line="57" pos:column="54"/></then><else pos:line="57" pos:column="54">: <expr><literal type="number" pos:line="57" pos:column="56">0<pos:position pos:line="57" pos:column="57"/></literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;<pos:position pos:line="57" pos:column="58"/></decl_stmt>

    <if pos:line="59" pos:column="5">if<condition pos:line="59" pos:column="7">(<expr><operator pos:line="59" pos:column="8">!<pos:position pos:line="59" pos:column="9"/></operator><name pos:line="59" pos:column="9">x<pos:position pos:line="59" pos:column="10"/></name></expr>)<pos:position pos:line="59" pos:column="11"/></condition><then pos:line="59" pos:column="11">
      <block type="pseudo"><continue pos:line="60" pos:column="7">continue;<pos:position pos:line="60" pos:column="16"/></continue></block></then></if>

    <comment type="block" pos:line="62" pos:column="5">/* the devices may be accessible with an extension or ADS, for
       example CON.AIR and 'CON . AIR' and CON:AIR access console */</comment>

    <for pos:line="65" pos:column="5">for<control pos:line="65" pos:column="8">(<init pos:line="65" pos:column="9">;<pos:position pos:line="65" pos:column="10"/></init> <condition><expr><name><name pos:line="65" pos:column="11">p<pos:position pos:line="65" pos:column="12"/></name><index pos:line="65" pos:column="12">[<expr><name pos:line="65" pos:column="13">x<pos:position pos:line="65" pos:column="14"/></name></expr>]<pos:position pos:line="65" pos:column="15"/></index></name> <operator pos:line="65" pos:column="16">==<pos:position pos:line="65" pos:column="18"/></operator> <literal type="char" pos:line="65" pos:column="19">' '<pos:position pos:line="65" pos:column="22"/></literal></expr>;<pos:position pos:line="65" pos:column="23"/></condition> <incr><expr><operator pos:line="65" pos:column="24">++<pos:position pos:line="65" pos:column="26"/></operator><name pos:line="65" pos:column="26">x<pos:position pos:line="65" pos:column="27"/></name></expr></incr>)<pos:position pos:line="65" pos:column="28"/></control>
      <block type="pseudo"><empty_stmt pos:line="66" pos:column="7">;<pos:position pos:line="66" pos:column="8"/></empty_stmt></block></for>

    <if pos:line="68" pos:column="5">if<condition pos:line="68" pos:column="7">(<expr><name><name pos:line="68" pos:column="8">p<pos:position pos:line="68" pos:column="9"/></name><index pos:line="68" pos:column="9">[<expr><name pos:line="68" pos:column="10">x<pos:position pos:line="68" pos:column="11"/></name></expr>]<pos:position pos:line="68" pos:column="12"/></index></name> <operator pos:line="68" pos:column="13">==<pos:position pos:line="68" pos:column="15"/></operator> <literal type="char" pos:line="68" pos:column="16">'.'<pos:position pos:line="68" pos:column="19"/></literal></expr>)<pos:position pos:line="68" pos:column="20"/></condition><then pos:line="68" pos:column="20"> <block pos:line="68" pos:column="21">{
      <expr_stmt><expr><name><name pos:line="69" pos:column="7">p<pos:position pos:line="69" pos:column="8"/></name><index pos:line="69" pos:column="8">[<expr><name pos:line="69" pos:column="9">x<pos:position pos:line="69" pos:column="10"/></name></expr>]<pos:position pos:line="69" pos:column="11"/></index></name> <operator pos:line="69" pos:column="12">=<pos:position pos:line="69" pos:column="13"/></operator> <literal type="char" pos:line="69" pos:column="14">'_'<pos:position pos:line="69" pos:column="17"/></literal></expr>;<pos:position pos:line="69" pos:column="18"/></expr_stmt>
      <continue pos:line="70" pos:column="7">continue;<pos:position pos:line="70" pos:column="16"/></continue>
    }<pos:position pos:line="71" pos:column="6"/></block></then>
    <elseif pos:line="72" pos:column="5">else <if pos:line="72" pos:column="10">if<condition pos:line="72" pos:column="12">(<expr><name><name pos:line="72" pos:column="13">p<pos:position pos:line="72" pos:column="14"/></name><index pos:line="72" pos:column="14">[<expr><name pos:line="72" pos:column="15">x<pos:position pos:line="72" pos:column="16"/></name></expr>]<pos:position pos:line="72" pos:column="17"/></index></name> <operator pos:line="72" pos:column="18">==<pos:position pos:line="72" pos:column="20"/></operator> <literal type="char" pos:line="72" pos:column="21">':'<pos:position pos:line="72" pos:column="24"/></literal></expr>)<pos:position pos:line="72" pos:column="25"/></condition><then pos:line="72" pos:column="25"> <block pos:line="72" pos:column="26">{
      <if pos:line="73" pos:column="7">if<condition pos:line="73" pos:column="9">(<expr><operator pos:line="73" pos:column="10">!<pos:position pos:line="73" pos:column="11"/></operator><operator pos:line="73" pos:column="11">(<pos:position pos:line="73" pos:column="12"/></operator><name pos:line="73" pos:column="12">flags<pos:position pos:line="73" pos:column="17"/></name> <operator pos:line="73" pos:column="18">&amp;<pos:position pos:line="73" pos:column="23"/></operator> <operator pos:line="73" pos:column="20">(<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="21">SANITIZE_ALLOW_COLONS<pos:position pos:line="73" pos:column="42"/></name><operator pos:line="73" pos:column="42">|<pos:position pos:line="73" pos:column="43"/></operator><name pos:line="73" pos:column="43">SANITIZE_ALLOW_PATH<pos:position pos:line="73" pos:column="62"/></name><operator pos:line="73" pos:column="62">)<pos:position pos:line="73" pos:column="63"/></operator><operator pos:line="73" pos:column="63">)<pos:position pos:line="73" pos:column="64"/></operator></expr>)<pos:position pos:line="73" pos:column="65"/></condition><then pos:line="73" pos:column="65"> <block pos:line="73" pos:column="66">{
        <expr_stmt><expr><name><name pos:line="74" pos:column="9">p<pos:position pos:line="74" pos:column="10"/></name><index pos:line="74" pos:column="10">[<expr><name pos:line="74" pos:column="11">x<pos:position pos:line="74" pos:column="12"/></name></expr>]<pos:position pos:line="74" pos:column="13"/></index></name> <operator pos:line="74" pos:column="14">=<pos:position pos:line="74" pos:column="15"/></operator> <literal type="char" pos:line="74" pos:column="16">'_'<pos:position pos:line="74" pos:column="19"/></literal></expr>;<pos:position pos:line="74" pos:column="20"/></expr_stmt>
        <continue pos:line="75" pos:column="9">continue;<pos:position pos:line="75" pos:column="18"/></continue>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if>
      <expr_stmt><expr><operator pos:line="77" pos:column="7">++<pos:position pos:line="77" pos:column="9"/></operator><name pos:line="77" pos:column="9">x<pos:position pos:line="77" pos:column="10"/></name></expr>;<pos:position pos:line="77" pos:column="11"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="79" pos:column="5">else <if pos:line="79" pos:column="10">if<condition pos:line="79" pos:column="12">(<expr><name><name pos:line="79" pos:column="13">p<pos:position pos:line="79" pos:column="14"/></name><index pos:line="79" pos:column="14">[<expr><name pos:line="79" pos:column="15">x<pos:position pos:line="79" pos:column="16"/></name></expr>]<pos:position pos:line="79" pos:column="17"/></index></name></expr>)<pos:position pos:line="79" pos:column="18"/></condition><then pos:line="79" pos:column="18"> <comment type="block" pos:line="79" pos:column="19">/* no match */</comment>
      <block type="pseudo"><continue pos:line="80" pos:column="7">continue;<pos:position pos:line="80" pos:column="16"/></continue></block></then></if></elseif></if>

    <comment type="block" pos:line="82" pos:column="5">/* p points to 'CON' or 'CON ' or 'CON:', etc */</comment>
    <expr_stmt><expr><name pos:line="83" pos:column="5">p_len<pos:position pos:line="83" pos:column="10"/></name> <operator pos:line="83" pos:column="11">=<pos:position pos:line="83" pos:column="12"/></operator> <call><name pos:line="83" pos:column="13">strlen<pos:position pos:line="83" pos:column="19"/></name><argument_list pos:line="83" pos:column="19">(<argument><expr><name pos:line="83" pos:column="20">p<pos:position pos:line="83" pos:column="21"/></name></expr></argument>)<pos:position pos:line="83" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="85" pos:column="5">/* Prepend a '_' */</comment>
    <if pos:line="86" pos:column="5">if<condition pos:line="86" pos:column="7">(<expr><call><name pos:line="86" pos:column="8">strlen<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><name pos:line="86" pos:column="15">fname<pos:position pos:line="86" pos:column="20"/></name></expr></argument>)<pos:position pos:line="86" pos:column="21"/></argument_list></call> <operator pos:line="86" pos:column="22">==<pos:position pos:line="86" pos:column="24"/></operator> <name pos:line="86" pos:column="25">PATH_MAX<pos:position pos:line="86" pos:column="33"/></name><operator pos:line="86" pos:column="33">-<pos:position pos:line="86" pos:column="34"/></operator><literal type="number" pos:line="86" pos:column="34">1<pos:position pos:line="86" pos:column="35"/></literal></expr>)<pos:position pos:line="86" pos:column="36"/></condition><then pos:line="86" pos:column="36"> <block pos:line="86" pos:column="37">{
      <expr_stmt><expr><operator pos:line="87" pos:column="7">--<pos:position pos:line="87" pos:column="9"/></operator><name pos:line="87" pos:column="9">p_len<pos:position pos:line="87" pos:column="14"/></name></expr>;<pos:position pos:line="87" pos:column="15"/></expr_stmt>
      <if pos:line="88" pos:column="7">if<condition pos:line="88" pos:column="9">(<expr><operator pos:line="88" pos:column="10">!<pos:position pos:line="88" pos:column="11"/></operator><operator pos:line="88" pos:column="11">(<pos:position pos:line="88" pos:column="12"/></operator><name pos:line="88" pos:column="12">flags<pos:position pos:line="88" pos:column="17"/></name> <operator pos:line="88" pos:column="18">&amp;<pos:position pos:line="88" pos:column="23"/></operator> <name pos:line="88" pos:column="20">SANITIZE_ALLOW_TRUNCATE<pos:position pos:line="88" pos:column="43"/></name><operator pos:line="88" pos:column="43">)<pos:position pos:line="88" pos:column="44"/></operator> <operator pos:line="88" pos:column="45">||<pos:position pos:line="88" pos:column="47"/></operator> <call><name pos:line="88" pos:column="48">truncate_dryrun<pos:position pos:line="88" pos:column="63"/></name><argument_list pos:line="88" pos:column="63">(<argument><expr><name pos:line="88" pos:column="64">p<pos:position pos:line="88" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="67">p_len<pos:position pos:line="88" pos:column="72"/></name></expr></argument>)<pos:position pos:line="88" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="74"/></condition><then pos:line="88" pos:column="74">
        <block type="pseudo"><return pos:line="89" pos:column="9">return <expr><name pos:line="89" pos:column="16">SANITIZE_ERR_INVALID_PATH<pos:position pos:line="89" pos:column="41"/></name></expr>;<pos:position pos:line="89" pos:column="42"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="90" pos:column="7">p<pos:position pos:line="90" pos:column="8"/></name><index pos:line="90" pos:column="8">[<expr><name pos:line="90" pos:column="9">p_len<pos:position pos:line="90" pos:column="14"/></name></expr>]<pos:position pos:line="90" pos:column="15"/></index></name> <operator pos:line="90" pos:column="16">=<pos:position pos:line="90" pos:column="17"/></operator> <literal type="char" pos:line="90" pos:column="18">'\0'<pos:position pos:line="90" pos:column="22"/></literal></expr>;<pos:position pos:line="90" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">memmove<pos:position pos:line="92" pos:column="12"/></name><argument_list pos:line="92" pos:column="12">(<argument><expr><name pos:line="92" pos:column="13">p<pos:position pos:line="92" pos:column="14"/></name> <operator pos:line="92" pos:column="15">+<pos:position pos:line="92" pos:column="16"/></operator> <literal type="number" pos:line="92" pos:column="17">1<pos:position pos:line="92" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="20">p<pos:position pos:line="92" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="23">p_len<pos:position pos:line="92" pos:column="28"/></name> <operator pos:line="92" pos:column="29">+<pos:position pos:line="92" pos:column="30"/></operator> <literal type="number" pos:line="92" pos:column="31">1<pos:position pos:line="92" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="93" pos:column="5">p<pos:position pos:line="93" pos:column="6"/></name><index pos:line="93" pos:column="6">[<expr><literal type="number" pos:line="93" pos:column="7">0<pos:position pos:line="93" pos:column="8"/></literal></expr>]<pos:position pos:line="93" pos:column="9"/></index></name> <operator pos:line="93" pos:column="10">=<pos:position pos:line="93" pos:column="11"/></operator> <literal type="char" pos:line="93" pos:column="12">'_'<pos:position pos:line="93" pos:column="15"/></literal></expr>;<pos:position pos:line="93" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="94" pos:column="5">++<pos:position pos:line="94" pos:column="7"/></operator><name pos:line="94" pos:column="7">p_len<pos:position pos:line="94" pos:column="12"/></name></expr>;<pos:position pos:line="94" pos:column="13"/></expr_stmt>

    <comment type="block" pos:line="96" pos:column="5">/* if fname was just modified then the basename pointer must be updated */</comment>
    <if pos:line="97" pos:column="5">if<condition pos:line="97" pos:column="7">(<expr><name pos:line="97" pos:column="8">p<pos:position pos:line="97" pos:column="9"/></name> <operator pos:line="97" pos:column="10">==<pos:position pos:line="97" pos:column="12"/></operator> <name pos:line="97" pos:column="13">fname<pos:position pos:line="97" pos:column="18"/></name></expr>)<pos:position pos:line="97" pos:column="19"/></condition><then pos:line="97" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><name pos:line="98" pos:column="7">base<pos:position pos:line="98" pos:column="11"/></name> <operator pos:line="98" pos:column="12">=<pos:position pos:line="98" pos:column="13"/></operator> <call><name pos:line="98" pos:column="14">basename<pos:position pos:line="98" pos:column="22"/></name><argument_list pos:line="98" pos:column="22">(<argument><expr><name pos:line="98" pos:column="23">fname<pos:position pos:line="98" pos:column="28"/></name></expr></argument>)<pos:position pos:line="98" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="30"/></expr_stmt></block></then></if>
  }<pos:position pos:line="99" pos:column="4"/></block></for>

  <comment type="block" pos:line="101" pos:column="3">/* This is the legacy portion from rename_if_dos_device_name that checks for
     reserved device names. It only works on MSDOS. On Windows XP the stat
     check errors with EINVAL if the device name is reserved. On Windows
     Vista/7/8 it sets mode S_IFREG (regular file or device). According to MSDN
     stat doc the latter behavior is correct, but that doesn't help us identify
     whether it's a reserved device name and not a regular file name. */</comment>
<cpp:ifdef pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">ifdef<pos:position pos:line="107" pos:column="7"/></cpp:directive> <name pos:line="107" pos:column="8">MSDOS<pos:position pos:line="107" pos:column="13"/></name></cpp:ifdef>
  <if pos:line="108" pos:column="3">if<condition pos:line="108" pos:column="5">(<expr><name pos:line="108" pos:column="6">base<pos:position pos:line="108" pos:column="10"/></name> <operator pos:line="108" pos:column="11">&amp;&amp;<pos:position pos:line="108" pos:column="21"/></operator> <operator pos:line="108" pos:column="14">(<pos:position pos:line="108" pos:column="15"/></operator><operator pos:line="108" pos:column="15">(<pos:position pos:line="108" pos:column="16"/></operator><call><name pos:line="108" pos:column="16">stat<pos:position pos:line="108" pos:column="20"/></name><argument_list pos:line="108" pos:column="20">(<argument><expr><name pos:line="108" pos:column="21">base<pos:position pos:line="108" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="27">&amp;<pos:position pos:line="108" pos:column="32"/></operator><name pos:line="108" pos:column="28">st_buf<pos:position pos:line="108" pos:column="34"/></name></expr></argument>)<pos:position pos:line="108" pos:column="35"/></argument_list></call><operator pos:line="108" pos:column="35">)<pos:position pos:line="108" pos:column="36"/></operator> <operator pos:line="108" pos:column="37">==<pos:position pos:line="108" pos:column="39"/></operator> <literal type="number" pos:line="108" pos:column="40">0<pos:position pos:line="108" pos:column="41"/></literal><operator pos:line="108" pos:column="41">)<pos:position pos:line="108" pos:column="42"/></operator> <operator pos:line="108" pos:column="43">&amp;&amp;<pos:position pos:line="108" pos:column="53"/></operator> <operator pos:line="108" pos:column="46">(<pos:position pos:line="108" pos:column="47"/></operator><call><name pos:line="108" pos:column="47">S_ISCHR<pos:position pos:line="108" pos:column="54"/></name><argument_list pos:line="108" pos:column="54">(<argument><expr><name><name pos:line="108" pos:column="55">st_buf<pos:position pos:line="108" pos:column="61"/></name><operator pos:line="108" pos:column="61">.<pos:position pos:line="108" pos:column="62"/></operator><name pos:line="108" pos:column="62">st_mode<pos:position pos:line="108" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="108" pos:column="70"/></argument_list></call><operator pos:line="108" pos:column="70">)<pos:position pos:line="108" pos:column="71"/></operator></expr>)<pos:position pos:line="108" pos:column="72"/></condition><then pos:line="108" pos:column="72"> <block pos:line="108" pos:column="73">{
    <comment type="block" pos:line="109" pos:column="5">/* Prepend a '_' */</comment>
    <decl_stmt><decl><type><name pos:line="110" pos:column="5">size_t<pos:position pos:line="110" pos:column="11"/></name></type> <name pos:line="110" pos:column="12">blen<pos:position pos:line="110" pos:column="16"/></name> <init pos:line="110" pos:column="17">= <expr><call><name pos:line="110" pos:column="19">strlen<pos:position pos:line="110" pos:column="25"/></name><argument_list pos:line="110" pos:column="25">(<argument><expr><name pos:line="110" pos:column="26">base<pos:position pos:line="110" pos:column="30"/></name></expr></argument>)<pos:position pos:line="110" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="110" pos:column="32"/></decl_stmt>
    <if pos:line="111" pos:column="5">if<condition pos:line="111" pos:column="7">(<expr><name pos:line="111" pos:column="8">blen<pos:position pos:line="111" pos:column="12"/></name></expr>)<pos:position pos:line="111" pos:column="13"/></condition><then pos:line="111" pos:column="13"> <block pos:line="111" pos:column="14">{
      <if pos:line="112" pos:column="7">if<condition pos:line="112" pos:column="9">(<expr><call><name pos:line="112" pos:column="10">strlen<pos:position pos:line="112" pos:column="16"/></name><argument_list pos:line="112" pos:column="16">(<argument><expr><name pos:line="112" pos:column="17">fname<pos:position pos:line="112" pos:column="22"/></name></expr></argument>)<pos:position pos:line="112" pos:column="23"/></argument_list></call> <operator pos:line="112" pos:column="24">==<pos:position pos:line="112" pos:column="26"/></operator> <name pos:line="112" pos:column="27">PATH_MAX<pos:position pos:line="112" pos:column="35"/></name><operator pos:line="112" pos:column="35">-<pos:position pos:line="112" pos:column="36"/></operator><literal type="number" pos:line="112" pos:column="36">1<pos:position pos:line="112" pos:column="37"/></literal></expr>)<pos:position pos:line="112" pos:column="38"/></condition><then pos:line="112" pos:column="38"> <block pos:line="112" pos:column="39">{
        <expr_stmt><expr><operator pos:line="113" pos:column="9">--<pos:position pos:line="113" pos:column="11"/></operator><name pos:line="113" pos:column="11">blen<pos:position pos:line="113" pos:column="15"/></name></expr>;<pos:position pos:line="113" pos:column="16"/></expr_stmt>
        <if pos:line="114" pos:column="9">if<condition pos:line="114" pos:column="11">(<expr><operator pos:line="114" pos:column="12">!<pos:position pos:line="114" pos:column="13"/></operator><operator pos:line="114" pos:column="13">(<pos:position pos:line="114" pos:column="14"/></operator><name pos:line="114" pos:column="14">flags<pos:position pos:line="114" pos:column="19"/></name> <operator pos:line="114" pos:column="20">&amp;<pos:position pos:line="114" pos:column="25"/></operator> <name pos:line="114" pos:column="22">SANITIZE_ALLOW_TRUNCATE<pos:position pos:line="114" pos:column="45"/></name><operator pos:line="114" pos:column="45">)<pos:position pos:line="114" pos:column="46"/></operator> <operator pos:line="114" pos:column="47">||<pos:position pos:line="114" pos:column="49"/></operator> <call><name pos:line="114" pos:column="50">truncate_dryrun<pos:position pos:line="114" pos:column="65"/></name><argument_list pos:line="114" pos:column="65">(<argument><expr><name pos:line="114" pos:column="66">base<pos:position pos:line="114" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="72">blen<pos:position pos:line="114" pos:column="76"/></name></expr></argument>)<pos:position pos:line="114" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="114" pos:column="78"/></condition><then pos:line="114" pos:column="78">
          <block type="pseudo"><return pos:line="115" pos:column="11">return <expr><name pos:line="115" pos:column="18">SANITIZE_ERR_INVALID_PATH<pos:position pos:line="115" pos:column="43"/></name></expr>;<pos:position pos:line="115" pos:column="44"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="116" pos:column="9">base<pos:position pos:line="116" pos:column="13"/></name><index pos:line="116" pos:column="13">[<expr><name pos:line="116" pos:column="14">blen<pos:position pos:line="116" pos:column="18"/></name></expr>]<pos:position pos:line="116" pos:column="19"/></index></name> <operator pos:line="116" pos:column="20">=<pos:position pos:line="116" pos:column="21"/></operator> <literal type="char" pos:line="116" pos:column="22">'\0'<pos:position pos:line="116" pos:column="26"/></literal></expr>;<pos:position pos:line="116" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="117" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="118" pos:column="7">memmove<pos:position pos:line="118" pos:column="14"/></name><argument_list pos:line="118" pos:column="14">(<argument><expr><name pos:line="118" pos:column="15">base<pos:position pos:line="118" pos:column="19"/></name> <operator pos:line="118" pos:column="20">+<pos:position pos:line="118" pos:column="21"/></operator> <literal type="number" pos:line="118" pos:column="22">1<pos:position pos:line="118" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="118" pos:column="25">base<pos:position pos:line="118" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="31">blen<pos:position pos:line="118" pos:column="35"/></name> <operator pos:line="118" pos:column="36">+<pos:position pos:line="118" pos:column="37"/></operator> <literal type="number" pos:line="118" pos:column="38">1<pos:position pos:line="118" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="119" pos:column="7">base<pos:position pos:line="119" pos:column="11"/></name><index pos:line="119" pos:column="11">[<expr><literal type="number" pos:line="119" pos:column="12">0<pos:position pos:line="119" pos:column="13"/></literal></expr>]<pos:position pos:line="119" pos:column="14"/></index></name> <operator pos:line="119" pos:column="15">=<pos:position pos:line="119" pos:column="16"/></operator> <literal type="char" pos:line="119" pos:column="17">'_'<pos:position pos:line="119" pos:column="20"/></literal></expr>;<pos:position pos:line="119" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="120" pos:column="7">++<pos:position pos:line="120" pos:column="9"/></operator><name pos:line="120" pos:column="9">blen<pos:position pos:line="120" pos:column="13"/></name></expr>;<pos:position pos:line="120" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="121" pos:column="6"/></block></then></if>
  }<pos:position pos:line="122" pos:column="4"/></block></then></if>
<cpp:endif pos:line="123" pos:column="1">#<cpp:directive pos:line="123" pos:column="2">endif<pos:position pos:line="123" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><operator pos:line="125" pos:column="3">*<pos:position pos:line="125" pos:column="4"/></operator><name pos:line="125" pos:column="4">sanitized<pos:position pos:line="125" pos:column="13"/></name> <operator pos:line="125" pos:column="14">=<pos:position pos:line="125" pos:column="15"/></operator> <call><name pos:line="125" pos:column="16">strdup<pos:position pos:line="125" pos:column="22"/></name><argument_list pos:line="125" pos:column="22">(<argument><expr><name pos:line="125" pos:column="23">fname<pos:position pos:line="125" pos:column="28"/></name></expr></argument>)<pos:position pos:line="125" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="30"/></expr_stmt>
  <return pos:line="126" pos:column="3">return <expr><operator pos:line="126" pos:column="10">(<pos:position pos:line="126" pos:column="11"/></operator><ternary><condition><expr><operator pos:line="126" pos:column="11">*<pos:position pos:line="126" pos:column="12"/></operator><name pos:line="126" pos:column="12">sanitized<pos:position pos:line="126" pos:column="21"/></name></expr> ?<pos:position pos:line="126" pos:column="23"/></condition><then pos:line="126" pos:column="23"> <expr><name pos:line="126" pos:column="24">SANITIZE_ERR_OK<pos:position pos:line="126" pos:column="39"/></name></expr> <pos:position pos:line="126" pos:column="40"/></then><else pos:line="126" pos:column="40">: <expr><name pos:line="126" pos:column="42">SANITIZE_ERR_OUT_OF_MEMORY<pos:position pos:line="126" pos:column="68"/></name></expr></else></ternary><operator pos:line="126" pos:column="68">)<pos:position pos:line="126" pos:column="69"/></operator></expr>;<pos:position pos:line="126" pos:column="70"/></return>
}<pos:position pos:line="127" pos:column="2"/></block></function></unit>
