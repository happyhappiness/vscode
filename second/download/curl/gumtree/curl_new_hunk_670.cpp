"              following  redirections  \"in absurdum\". By default, the limit is\n"
"              set to 50 redirections. Set this option to -1 to make it  limit-\n"
"              less.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --metalink\n"
"              This  option  can  tell curl to parse and process a given URI as\n"
, stdout);
 fputs(
"              Metalink file (both version 3 and 4 (RFC  5854)  are  supported)\n"
"              and  make use of the mirrors listed within for failover if there\n"
"              are errors (such as the file or server not being available).  It\n"
"              will  also  verify the hashe of the file after the download com-\n"
"              pletes. The Metalink file itself is downloaded and processed  in\n"
"              memory and not stored in the local file system.\n"
"\n"
, stdout);
 fputs(
"              Example to use a remote Metalink file:\n"
"\n"
"              curl --metalink http://www.example.com/example.metalink\n"
"\n"
"              To use a Metalink file in the local file system, use FILE proto-\n"
"              col (file://):\n"
"\n"
"              curl --metalink file://example.metalink\n"
"\n"
"              Please note that if FILE protocol is disabled, there is  no  way\n"
"              to  use  a local Metalink file at the time of this writing. Also\n"
, stdout);
 fputs(
"              note  that  If  --metalink  and  --include  are  used  together,\n"
"              --include  will be ignored. This is because including headers in\n"
"              the response will break Metalink parser and if the  headers  are\n"
"              included in the file described in Metalink file, hash check will\n"
"              fail.\n"
"\n"
"              (Added in 7.27.0, if built against the libmetalink library.)\n"
"\n"
"       -n, --netrc\n"
, stdout);
 fputs(
"              Makes curl scan the .netrc  (_netrc  on  Windows)  file  in  the\n"
"              user's home directory for login name and password. This is typi-\n"
"              cally used for FTP on UNIX. If used with HTTP, curl will  enable\n"
"              user  authentication.  See netrc(4) or ftp(1) for details on the\n"
"              file format. Curl will not complain if that  file  doesn't  have\n"
"              the  right permissions (it should not be either world- or group-\n"
, stdout);
 fputs(
"              readable). The environment variable \"HOME\" is used to  find  the\n"
"              home directory.\n"
"\n"
"              A  quick  and  very  simple  example of how to setup a .netrc to\n"
"              allow curl to FTP to the machine host.domain.com with user  name\n"
"              'myself' and password 'secret' should look similar to:\n"
"\n"
"              machine host.domain.com login myself password secret\n"
"\n"
"       -N, --no-buffer\n"
, stdout);
 fputs(
"              Disables the buffering of the output stream. In normal work sit-\n"
"              uations, curl will use a standard buffered  output  stream  that\n"
"              will have the effect that it will output the data in chunks, not\n"
"              necessarily exactly when the data arrives.   Using  this  option\n"
"              will disable that buffering.\n"
"\n"
"              Note  that  this  is the negated option name documented. You can\n"
"              thus use --buffer to enforce the buffering.\n"
"\n"
, stdout);
 fputs(
"       --netrc-file\n"
"              This option is similar to --netrc, except that you  provide  the\n"
"              path  (absolute  or relative) to the netrc file that Curl should\n"
"              use.  You can only specify one netrc  file  per  invocation.  If\n"
"              several  --netrc-file  options  are  provided, only the last one\n"
"              will be used.  (Added in 7.21.5)\n"
"\n"
"              This option overrides any use of --netrc as  they  are  mutually\n"
, stdout);
 fputs(
"              exclusive.  It will also abide by --netrc-optional if specified.\n"
"\n"
"       --netrc-optional\n"
"              Very  similar to --netrc, but this option makes the .netrc usage\n"
"              optional and not mandatory as the --netrc option does.\n"
"\n"
"       --negotiate\n"
"              (HTTP) Enables GSS-Negotiate authentication.  The  GSS-Negotiate\n"
"              method was designed by Microsoft and is used in their web appli-\n"
, stdout);
 fputs(
"              cations. It is  primarily  meant  as  a  support  for  Kerberos5\n"
"              authentication but may be also used along with another authenti-\n"
"              cation method. For more information see IETF draft draft-brezak-\n"
"              spnego-http-04.txt.\n"
"\n"
"              If  you  want to enable Negotiate for your proxy authentication,\n"
"              then use --proxy-negotiate.\n"
"\n"
"              This option requires a library built with GSSAPI  support.  This\n"
, stdout);
 fputs(
"              is  not  very  common.  Use -V, --version to see if your version\n"
"              supports GSS-Negotiate.\n"
"\n"
"              When using this option, you must also provide a fake -u,  --user\n"
"              option  to  activate the authentication code properly. Sending a\n"
"              '-u :' is enough as the user  name  and  password  from  the  -u\n"
"              option aren't actually used.\n"
"\n"
"              If  this option is used several times, the following occurrences\n"
, stdout);
 fputs(
"              make no difference.\n"
"\n"
"       --no-keepalive\n"
"              Disables the use of keepalive messages on the TCP connection, as\n"
"              by default curl enables them.\n"
"\n"
"              Note  that  this  is the negated option name documented. You can\n"
"              thus use --keepalive to enforce keepalive.\n"
"\n"
"       --no-sessionid\n"
"              (SSL) Disable curl's use of SSL session-ID caching.  By  default\n"
"              all  transfers are done using the cache. Note that while nothing\n"
, stdout);
 fputs(
"              should ever get hurt by attempting  to  reuse  SSL  session-IDs,\n"
"              there seem to be broken SSL implementations in the wild that may\n"
"              require you to disable this in order for you to succeed.  (Added\n"
"              in 7.16.0)\n"
"\n"
"              Note  that  this  is the negated option name documented. You can\n"
"              thus use --sessionid to enforce session-ID caching.\n"
"\n"
"       --noproxy <no-proxy-list>\n"
, stdout);
 fputs(
"              Comma-separated list of hosts which do not use a proxy,  if  one\n"
"              is  specified.  The only wildcard is a single * character, which\n"
"              matches all hosts, and effectively disables the proxy. Each name\n"
"              in  this  list  is matched as either a domain which contains the\n"
"              hostname, or the hostname itself. For example,  local.com  would\n"
"              match   local.com,  local.com:80,  and  www.local.com,  but  not\n"
, stdout);
 fputs(
"              www.notlocal.com.  (Added in 7.19.4).\n"
"\n"
"       --ntlm (HTTP) Enables  NTLM  authentication.  The  NTLM  authentication\n"
"              method was designed by Microsoft and is used by IIS web servers.\n"
"              It is a proprietary protocol, reverse-engineered by clever  peo-\n"
"              ple and implemented in curl based on their efforts. This kind of\n"
"              behavior should not be endorsed, you should  encourage  everyone\n"
, stdout);
 fputs(
"              who  uses  NTLM to switch to a public and documented authentica-\n"
"              tion method instead, such as Digest.\n"
"\n"
"              If you want to enable NTLM for your proxy  authentication,  then\n"
"              use --proxy-ntlm.\n"
"\n"
"              This  option  requires a library built with SSL support. Use -V,\n"
"              --version to see if your curl supports NTLM.\n"
"\n"
"              If this option is used several times, the following  occurrences\n"
"              make no difference.\n"
, stdout);
 fputs(
"       -o, --output <file>\n"
"              Write output to <file> instead of stdout. If you are using {} or\n"
"              [] to fetch multiple documents, you can use '#'  followed  by  a\n"
"              number  in  the <file> specifier. That variable will be replaced\n"
"              with the current string for the URL being fetched. Like in:\n"
"\n"
"                curl http://{one,two}.site.com -o \"file_#1.txt\"\n"
"\n"
"              or use several variables like:\n"
"\n"
, stdout);
 fputs(
"                curl http://{site,host}.host[1-5].com -o \"#1_#2\"\n"
"\n"
"              You may use this option as many times as the number of URLs  you\n"
"              have.\n"
"\n"
"              See  also  the --create-dirs option to create the local directo-\n"
"              ries dynamically. Specifying the output as '-' (a  single  dash)\n"
"              will force the output to be done to stdout.\n"
"\n"
"       -O, --remote-name\n"
"              Write  output to a local file named like the remote file we get.\n"
, stdout);
 fputs(
"              (Only the file part of the remote file is used, the path is  cut\n"
"              off.)\n"
"\n"
"              The  remote  file  name  to use for saving is extracted from the\n"
"              given URL, nothing else.\n"
"\n"
"              Consequentially, the file will be saved in the  current  working\n"
"              directory.  If you want the file saved in a different directory,\n"
"              make sure you change current working directory before you invoke\n"
, stdout);
 fputs(
"              curl with the -O, --remote-name flag!\n"
"\n"
"              You  may use this option as many times as the number of URLs you\n"
"              have.\n"
"\n"
"       -p, --proxytunnel\n"
"              When an HTTP proxy is used (-x, --proxy), this option will cause\n"
"              non-HTTP  protocols  to  attempt  to  tunnel  through  the proxy\n"
"              instead of merely using it to do HTTP-like operations. The  tun-\n"
"              nel  approach  is  made  with the HTTP proxy CONNECT request and\n"
, stdout);
 fputs(
"              requires that the proxy allows direct connect to the remote port\n"
"              number curl wants to tunnel through to.\n"
"\n"
"       -P, --ftp-port <address>\n"
"              (FTP)  Reverses  the  default initiator/listener roles when con-\n"
"              necting with FTP. This switch makes curl  use  active  mode.  In\n"
"              practice,  curl  then  tells  the  server to connect back to the\n"
"              client's specified address and port, while passive mode asks the\n"
, stdout);
 fputs(
"              server  to  setup  an  IP address and port for it to connect to.\n"
"              <address> should be one of:\n"
"\n"
"              interface\n"
"                     i.e \"eth0\" to specify which interface's  IP  address  you\n"
"                     want to use (Unix only)\n"
"\n"
"              IP address\n"
"                     i.e \"192.168.10.1\" to specify the exact IP address\n"
"\n"
"              host name\n"
"                     i.e \"my.host.domain\" to specify the machine\n"
"\n"
, stdout);
 fputs(
"              -      make  curl  pick the same IP address that is already used\n"
"                     for the control connection\n"
"\n"
"       If this option is used several times, the last one will be  used.  Dis-\n"
"       able  the  use  of PORT with --ftp-pasv. Disable the attempt to use the\n"
"       EPRT command instead of PORT by using --disable-eprt.  EPRT  is  really\n"
"       PORT++.\n"
"\n"
"       Starting in 7.19.5, you can append \":[start]-[end]\" to the right of the\n"
, stdout);
 fputs(
"       address, to tell curl what TCP port range to use. That means you  spec-\n"
"       ify  a  port  range,  from  a lower to a higher number. A single number\n"
"       works as well, but do note that it increases the risk of failure  since\n"
"       the port may not be available.\n"
"\n"
"       --pass <phrase>\n"
"              (SSL/SSH) Passphrase for the private key\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --post301\n"
, stdout);
 fputs(
"              Tells  curl  to  respect  RFC  2616/10.3.2  and not convert POST\n"
"              requests into GET requests when following a 301 redirection. The\n"
"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
"              the conversion by default to maintain  consistency.  However,  a\n"
"              server  may  require  a POST to remain a POST after such a redi-\n"
"              rection. This option is meaningful only when using  -L,  --loca-\n"
, stdout);
 fputs(
"              tion (Added in 7.17.1)\n"
"\n"
"       --post302\n"
"              Tells  curl  to  respect  RFC  2616/10.3.2  and not convert POST\n"
"              requests into GET requests when following a 302 redirection. The\n"
"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
"              the conversion by default to maintain  consistency.  However,  a\n"
"              server  may  require  a POST to remain a POST after such a redi-\n"
, stdout);
 fputs(
"              rection. This option is meaningful only when using  -L,  --loca-\n"
"              tion (Added in 7.19.1)\n"
"\n"
"       --proto <protocols>\n"
"              Tells   curl  to  use  the  listed  protocols  for  its  initial\n"
"              retrieval. Protocols are evaluated left to right, are comma sep-\n"
"              arated,  and  are each a protocol name or 'all', optionally pre-\n"
"              fixed by zero or more modifiers. Available modifiers are:\n"
"\n"
, stdout);
 fputs(
"              +  Permit this protocol in addition to protocols already permit-\n"
"                 ted (this is the default if no modifier is used).\n"
"\n"
"              -  Deny  this  protocol,  removing it from the list of protocols\n"
"                 already permitted.\n"
"\n"
"              =  Permit only this protocol (ignoring the list already  permit-\n"
"                 ted),  though  subject  to  later  modification by subsequent\n"
"                 entries in the comma separated list.\n"
"\n"
, stdout);
 fputs(
"              For example:\n"
"\n"
