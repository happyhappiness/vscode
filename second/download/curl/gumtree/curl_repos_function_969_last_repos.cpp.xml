<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_969_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">tool_debug_cb<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">CURL<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">handle<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">curl_infotype<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">type<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                  <parameter><decl><type><name pos:line="2" pos:column="19">char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">data<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">size_t<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">size<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
                  <parameter><decl><type><name pos:line="3" pos:column="19">void<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">userdata<pos:position pos:line="3" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="34"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">OperationConfig<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">operation<pos:position pos:line="5" pos:column="36"/></name> <init pos:line="5" pos:column="37">= <expr><name pos:line="5" pos:column="39">userdata<pos:position pos:line="5" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">GlobalConfig<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">config<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><name><name pos:line="6" pos:column="33">operation<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">-&gt;<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="44">global<pos:position pos:line="6" pos:column="50"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="51"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">FILE<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">output<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><name><name pos:line="7" pos:column="18">config<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">-&gt;<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="26">errors<pos:position pos:line="7" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">text<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">timeval<pos:position pos:line="9" pos:column="17"/></name></name></type> <name pos:line="9" pos:column="18">tv<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">tm<pos:position pos:line="10" pos:column="12"/></name></name> <modifier pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></modifier></type><name pos:line="10" pos:column="14">now<pos:position pos:line="10" pos:column="17"/></name></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name></type> <name><name pos:line="11" pos:column="8">timebuf<pos:position pos:line="11" pos:column="15"/></name><index pos:line="11" pos:column="15">[<expr><literal type="number" pos:line="11" pos:column="16">20<pos:position pos:line="11" pos:column="18"/></literal></expr>]<pos:position pos:line="11" pos:column="19"/></index></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">time_t<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">secs<pos:position pos:line="12" pos:column="14"/></name></decl>;<pos:position pos:line="12" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="13" pos:column="3">static<pos:position pos:line="13" pos:column="9"/></specifier> <type><name pos:line="13" pos:column="10">time_t<pos:position pos:line="13" pos:column="16"/></name></type> <name pos:line="13" pos:column="17">epoch_offset<pos:position pos:line="13" pos:column="29"/></name></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="14" pos:column="3">static<pos:position pos:line="14" pos:column="9"/></specifier> <type><name pos:line="14" pos:column="10">int<pos:position pos:line="14" pos:column="13"/></name></type>    <name pos:line="14" pos:column="17">known_offset<pos:position pos:line="14" pos:column="29"/></name></decl>;<pos:position pos:line="14" pos:column="30"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="16" pos:column="3">(<pos:position pos:line="16" pos:column="4"/></operator><name pos:line="16" pos:column="4">void<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">)<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">handle<pos:position pos:line="16" pos:column="15"/></name></expr>;<pos:position pos:line="16" pos:column="16"/></expr_stmt> <comment type="block" pos:line="16" pos:column="17">/* not used */</comment>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name><name pos:line="18" pos:column="6">config<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">tracetime<pos:position pos:line="18" pos:column="23"/></name></name></expr>)<pos:position pos:line="18" pos:column="24"/></condition><then pos:line="18" pos:column="24"> <block pos:line="18" pos:column="25">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">tv<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <call><name pos:line="19" pos:column="10">tvnow<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">()<pos:position pos:line="19" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><operator pos:line="20" pos:column="8">!<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="9">known_offset<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <block pos:line="20" pos:column="23">{
      <expr_stmt><expr><name pos:line="21" pos:column="7">epoch_offset<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name pos:line="21" pos:column="22">time<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">NULL<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call> <operator pos:line="21" pos:column="33">-<pos:position pos:line="21" pos:column="34"/></operator> <name><name pos:line="21" pos:column="35">tv<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">.<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">tv_sec<pos:position pos:line="21" pos:column="44"/></name></name></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><name pos:line="22" pos:column="7">known_offset<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <literal type="number" pos:line="22" pos:column="22">1<pos:position pos:line="22" pos:column="23"/></literal></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="24" pos:column="5">secs<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <name pos:line="24" pos:column="12">epoch_offset<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">+<pos:position pos:line="24" pos:column="26"/></operator> <name><name pos:line="24" pos:column="27">tv<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">.<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">tv_sec<pos:position pos:line="24" pos:column="36"/></name></name></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">now<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <call><name pos:line="25" pos:column="11">localtime<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><operator pos:line="25" pos:column="21">&amp;<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="22">secs<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>  <comment type="block" pos:line="25" pos:column="30">/* not thread safe but we don't care */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">snprintf<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">timebuf<pos:position pos:line="26" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="23">sizeof<argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">timebuf<pos:position pos:line="26" pos:column="37"/></name></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="40">"%02d:%02d:%02d.%06ld "<pos:position pos:line="26" pos:column="63"/></literal></expr></argument>,
             <argument><expr><name><name pos:line="27" pos:column="14">now<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">-&gt;<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="19">tm_hour<pos:position pos:line="27" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="28">now<pos:position pos:line="27" pos:column="31"/></name><operator pos:line="27" pos:column="31">-&gt;<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="33">tm_min<pos:position pos:line="27" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="41">now<pos:position pos:line="27" pos:column="44"/></name><operator pos:line="27" pos:column="44">-&gt;<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="46">tm_sec<pos:position pos:line="27" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="54">(<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="55">long<pos:position pos:line="27" pos:column="59"/></name><operator pos:line="27" pos:column="59">)<pos:position pos:line="27" pos:column="60"/></operator><name><name pos:line="27" pos:column="60">tv<pos:position pos:line="27" pos:column="62"/></name><operator pos:line="27" pos:column="62">.<pos:position pos:line="27" pos:column="63"/></operator><name pos:line="27" pos:column="63">tv_usec<pos:position pos:line="27" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then>
  <else pos:line="29" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="5">timebuf<pos:position pos:line="30" pos:column="12"/></name><index pos:line="30" pos:column="12">[<expr><literal type="number" pos:line="30" pos:column="13">0<pos:position pos:line="30" pos:column="14"/></literal></expr>]<pos:position pos:line="30" pos:column="15"/></index></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <literal type="number" pos:line="30" pos:column="18">0<pos:position pos:line="30" pos:column="19"/></literal></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt></block></else></if>

  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><operator pos:line="32" pos:column="6">!<pos:position pos:line="32" pos:column="7"/></operator><name><name pos:line="32" pos:column="7">config<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">trace_stream<pos:position pos:line="32" pos:column="27"/></name></name></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28"> <block pos:line="32" pos:column="29">{
    <comment type="block" pos:line="33" pos:column="5">/* open for append */</comment>
    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><operator pos:line="34" pos:column="8">!<pos:position pos:line="34" pos:column="9"/></operator><call><name pos:line="34" pos:column="9">strcmp<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><literal type="string" pos:line="34" pos:column="16">"-"<pos:position pos:line="34" pos:column="19"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="21">config<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-&gt;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="29">trace_dump<pos:position pos:line="34" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="41"/></condition><then pos:line="34" pos:column="41">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="7">config<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">-&gt;<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="15">trace_stream<pos:position pos:line="35" pos:column="27"/></name></name> <operator pos:line="35" pos:column="28">=<pos:position pos:line="35" pos:column="29"/></operator> <name pos:line="35" pos:column="30">stdout<pos:position pos:line="35" pos:column="36"/></name></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt></block></then>
    <elseif pos:line="36" pos:column="5">else <if pos:line="36" pos:column="10">if<condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><call><name pos:line="36" pos:column="14">strcmp<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><literal type="string" pos:line="36" pos:column="21">"%"<pos:position pos:line="36" pos:column="24"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="26">config<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">-&gt;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="34">trace_dump<pos:position pos:line="36" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="46"/></condition><then pos:line="36" pos:column="46">
      <comment type="block" pos:line="37" pos:column="7">/* Ok, this is somewhat hackish but we do it undocumented for now */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="38" pos:column="7">config<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">-&gt;<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="15">trace_stream<pos:position pos:line="38" pos:column="27"/></name></name> <operator pos:line="38" pos:column="28">=<pos:position pos:line="38" pos:column="29"/></operator> <name><name pos:line="38" pos:column="30">config<pos:position pos:line="38" pos:column="36"/></name><operator pos:line="38" pos:column="36">-&gt;<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="38">errors<pos:position pos:line="38" pos:column="44"/></name></name></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt></block></then></if></elseif>  <comment type="block" pos:line="38" pos:column="47">/* aka stderr */</comment>
    <else pos:line="39" pos:column="5">else <block pos:line="39" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">config<pos:position pos:line="40" pos:column="13"/></name><operator pos:line="40" pos:column="13">-&gt;<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="15">trace_stream<pos:position pos:line="40" pos:column="27"/></name></name> <operator pos:line="40" pos:column="28">=<pos:position pos:line="40" pos:column="29"/></operator> <call><name pos:line="40" pos:column="30">fopen<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name><name pos:line="40" pos:column="36">config<pos:position pos:line="40" pos:column="42"/></name><operator pos:line="40" pos:column="42">-&gt;<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="44">trace_dump<pos:position pos:line="40" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="56">FOPEN_WRITETEXT<pos:position pos:line="40" pos:column="71"/></name></expr></argument>)<pos:position pos:line="40" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="73"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="41" pos:column="7">config<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">-&gt;<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="15">trace_fopened<pos:position pos:line="41" pos:column="28"/></name></name> <operator pos:line="41" pos:column="29">=<pos:position pos:line="41" pos:column="30"/></operator> <name pos:line="41" pos:column="31">TRUE<pos:position pos:line="41" pos:column="35"/></name></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></else></if>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <if pos:line="45" pos:column="3">if<condition pos:line="45" pos:column="5">(<expr><name><name pos:line="45" pos:column="6">config<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">-&gt;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="14">trace_stream<pos:position pos:line="45" pos:column="26"/></name></name></expr>)<pos:position pos:line="45" pos:column="27"/></condition><then pos:line="45" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="5">output<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator> <name><name pos:line="46" pos:column="14">config<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">-&gt;<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="22">trace_stream<pos:position pos:line="46" pos:column="34"/></name></name></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt></block></then></if>

  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><operator pos:line="48" pos:column="6">!<pos:position pos:line="48" pos:column="7"/></operator><name pos:line="48" pos:column="7">output<pos:position pos:line="48" pos:column="13"/></name></expr>)<pos:position pos:line="48" pos:column="14"/></condition><then pos:line="48" pos:column="14"> <block pos:line="48" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">warnf<pos:position pos:line="49" pos:column="10"/></name><argument_list pos:line="49" pos:column="10">(<argument><expr><name pos:line="49" pos:column="11">config<pos:position pos:line="49" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="19">"Failed to create/open output"<pos:position pos:line="49" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt>
    <return pos:line="50" pos:column="5">return <expr><literal type="number" pos:line="50" pos:column="12">0<pos:position pos:line="50" pos:column="13"/></literal></expr>;<pos:position pos:line="50" pos:column="14"/></return>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>

  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><name><name pos:line="53" pos:column="6">config<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">tracetype<pos:position pos:line="53" pos:column="23"/></name></name> <operator pos:line="53" pos:column="24">==<pos:position pos:line="53" pos:column="26"/></operator> <name pos:line="53" pos:column="27">TRACE_PLAIN<pos:position pos:line="53" pos:column="38"/></name></expr>)<pos:position pos:line="53" pos:column="39"/></condition><then pos:line="53" pos:column="39"> <block pos:line="53" pos:column="40">{
    <comment type="block" pos:line="54" pos:column="5">/*
     * This is the trace look that is similar to what libcurl makes on its
     * own.
     */</comment>
    <decl_stmt><decl><specifier pos:line="58" pos:column="5">static<pos:position pos:line="58" pos:column="11"/></specifier> <type><specifier pos:line="58" pos:column="12">const<pos:position pos:line="58" pos:column="17"/></specifier> <name pos:line="58" pos:column="18">char<pos:position pos:line="58" pos:column="22"/></name> <modifier pos:line="58" pos:column="23">*<pos:position pos:line="58" pos:column="24"/></modifier> <specifier pos:line="58" pos:column="25">const<pos:position pos:line="58" pos:column="30"/></specifier></type> <name><name pos:line="58" pos:column="31">s_infotype<pos:position pos:line="58" pos:column="41"/></name><index pos:line="58" pos:column="41">[]<pos:position pos:line="58" pos:column="43"/></index></name> <init pos:line="58" pos:column="44">= <expr><block pos:line="58" pos:column="46">{
      <expr><literal type="string" pos:line="59" pos:column="7">"*"<pos:position pos:line="59" pos:column="10"/></literal></expr>, <expr><literal type="string" pos:line="59" pos:column="12">"&lt;"<pos:position pos:line="59" pos:column="18"/></literal></expr>, <expr><literal type="string" pos:line="59" pos:column="17">"&gt;"<pos:position pos:line="59" pos:column="23"/></literal></expr>, <expr><literal type="string" pos:line="59" pos:column="22">"{"<pos:position pos:line="59" pos:column="25"/></literal></expr>, <expr><literal type="string" pos:line="59" pos:column="27">"}"<pos:position pos:line="59" pos:column="30"/></literal></expr>, <expr><literal type="string" pos:line="59" pos:column="32">"{"<pos:position pos:line="59" pos:column="35"/></literal></expr>, <expr><literal type="string" pos:line="59" pos:column="37">"}"<pos:position pos:line="59" pos:column="40"/></literal></expr>
    }<pos:position pos:line="60" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="60" pos:column="7"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="61" pos:column="5">size_t<pos:position pos:line="61" pos:column="11"/></name></type> <name pos:line="61" pos:column="12">i<pos:position pos:line="61" pos:column="13"/></name></decl>;<pos:position pos:line="61" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="62" pos:column="5">size_t<pos:position pos:line="62" pos:column="11"/></name></type> <name pos:line="62" pos:column="12">st<pos:position pos:line="62" pos:column="14"/></name> <init pos:line="62" pos:column="15">= <expr><literal type="number" pos:line="62" pos:column="17">0<pos:position pos:line="62" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="62" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="63" pos:column="5">static<pos:position pos:line="63" pos:column="11"/></specifier> <type><name pos:line="63" pos:column="12">bool<pos:position pos:line="63" pos:column="16"/></name></type> <name pos:line="63" pos:column="17">newl<pos:position pos:line="63" pos:column="21"/></name> <init pos:line="63" pos:column="22">= <expr><name pos:line="63" pos:column="24">FALSE<pos:position pos:line="63" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="63" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="64" pos:column="5">static<pos:position pos:line="64" pos:column="11"/></specifier> <type><name pos:line="64" pos:column="12">bool<pos:position pos:line="64" pos:column="16"/></name></type> <name pos:line="64" pos:column="17">traced_data<pos:position pos:line="64" pos:column="28"/></name> <init pos:line="64" pos:column="29">= <expr><name pos:line="64" pos:column="31">FALSE<pos:position pos:line="64" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="64" pos:column="37"/></decl_stmt>

    <switch pos:line="66" pos:column="5">switch<condition pos:line="66" pos:column="11">(<expr><name pos:line="66" pos:column="12">type<pos:position pos:line="66" pos:column="16"/></name></expr>)<pos:position pos:line="66" pos:column="17"/></condition> <block pos:line="66" pos:column="18">{
    <case pos:line="67" pos:column="5">case <expr><name pos:line="67" pos:column="10">CURLINFO_HEADER_OUT<pos:position pos:line="67" pos:column="29"/></name></expr>:<pos:position pos:line="67" pos:column="30"/></case>
      <if pos:line="68" pos:column="7">if<condition pos:line="68" pos:column="9">(<expr><name pos:line="68" pos:column="10">size<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">&gt;<pos:position pos:line="68" pos:column="19"/></operator> <literal type="number" pos:line="68" pos:column="17">0<pos:position pos:line="68" pos:column="18"/></literal></expr>)<pos:position pos:line="68" pos:column="19"/></condition><then pos:line="68" pos:column="19"> <block pos:line="68" pos:column="20">{
        <for pos:line="69" pos:column="9">for<control pos:line="69" pos:column="12">(<init><expr><name pos:line="69" pos:column="13">i<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <literal type="number" pos:line="69" pos:column="17">0<pos:position pos:line="69" pos:column="18"/></literal></expr>;<pos:position pos:line="69" pos:column="19"/></init> <condition><expr><name pos:line="69" pos:column="20">i<pos:position pos:line="69" pos:column="21"/></name> <operator pos:line="69" pos:column="22">&lt;<pos:position pos:line="69" pos:column="26"/></operator> <name pos:line="69" pos:column="24">size<pos:position pos:line="69" pos:column="28"/></name> <operator pos:line="69" pos:column="29">-<pos:position pos:line="69" pos:column="30"/></operator> <literal type="number" pos:line="69" pos:column="31">1<pos:position pos:line="69" pos:column="32"/></literal></expr>;<pos:position pos:line="69" pos:column="33"/></condition> <incr><expr><name pos:line="69" pos:column="34">i<pos:position pos:line="69" pos:column="35"/></name><operator pos:line="69" pos:column="35">++<pos:position pos:line="69" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="69" pos:column="38"/></control> <block pos:line="69" pos:column="39">{
          <if pos:line="70" pos:column="11">if<condition pos:line="70" pos:column="13">(<expr><name><name pos:line="70" pos:column="14">data<pos:position pos:line="70" pos:column="18"/></name><index pos:line="70" pos:column="18">[<expr><name pos:line="70" pos:column="19">i<pos:position pos:line="70" pos:column="20"/></name></expr>]<pos:position pos:line="70" pos:column="21"/></index></name> <operator pos:line="70" pos:column="22">==<pos:position pos:line="70" pos:column="24"/></operator> <literal type="char" pos:line="70" pos:column="25">'\n'<pos:position pos:line="70" pos:column="29"/></literal></expr>)<pos:position pos:line="70" pos:column="30"/></condition><then pos:line="70" pos:column="30"> <block pos:line="70" pos:column="31">{ <comment type="block" pos:line="70" pos:column="33">/* LF */</comment>
            <if pos:line="71" pos:column="13">if<condition pos:line="71" pos:column="15">(<expr><operator pos:line="71" pos:column="16">!<pos:position pos:line="71" pos:column="17"/></operator><name pos:line="71" pos:column="17">newl<pos:position pos:line="71" pos:column="21"/></name></expr>)<pos:position pos:line="71" pos:column="22"/></condition><then pos:line="71" pos:column="22"> <block pos:line="71" pos:column="23">{
              <expr_stmt><expr><call><name pos:line="72" pos:column="15">fprintf<pos:position pos:line="72" pos:column="22"/></name><argument_list pos:line="72" pos:column="22">(<argument><expr><name pos:line="72" pos:column="23">output<pos:position pos:line="72" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="31">"%s%s "<pos:position pos:line="72" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="40">timebuf<pos:position pos:line="72" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="49">s_infotype<pos:position pos:line="72" pos:column="59"/></name><index pos:line="72" pos:column="59">[<expr><name pos:line="72" pos:column="60">type<pos:position pos:line="72" pos:column="64"/></name></expr>]<pos:position pos:line="72" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="72" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="67"/></expr_stmt>
            }<pos:position pos:line="73" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="74" pos:column="13">(<pos:position pos:line="74" pos:column="14"/></operator><name pos:line="74" pos:column="14">void<pos:position pos:line="74" pos:column="18"/></name><operator pos:line="74" pos:column="18">)<pos:position pos:line="74" pos:column="19"/></operator><call><name pos:line="74" pos:column="19">fwrite<pos:position pos:line="74" pos:column="25"/></name><argument_list pos:line="74" pos:column="25">(<argument><expr><name pos:line="74" pos:column="26">data<pos:position pos:line="74" pos:column="30"/></name> <operator pos:line="74" pos:column="31">+<pos:position pos:line="74" pos:column="32"/></operator> <name pos:line="74" pos:column="33">st<pos:position pos:line="74" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="37">i<pos:position pos:line="74" pos:column="38"/></name> <operator pos:line="74" pos:column="39">-<pos:position pos:line="74" pos:column="40"/></operator> <name pos:line="74" pos:column="41">st<pos:position pos:line="74" pos:column="43"/></name> <operator pos:line="74" pos:column="44">+<pos:position pos:line="74" pos:column="45"/></operator> <literal type="number" pos:line="74" pos:column="46">1<pos:position pos:line="74" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="49">1<pos:position pos:line="74" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="52">output<pos:position pos:line="74" pos:column="58"/></name></expr></argument>)<pos:position pos:line="74" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><name pos:line="75" pos:column="13">st<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">=<pos:position pos:line="75" pos:column="17"/></operator> <name pos:line="75" pos:column="18">i<pos:position pos:line="75" pos:column="19"/></name> <operator pos:line="75" pos:column="20">+<pos:position pos:line="75" pos:column="21"/></operator> <literal type="number" pos:line="75" pos:column="22">1<pos:position pos:line="75" pos:column="23"/></literal></expr>;<pos:position pos:line="75" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><name pos:line="76" pos:column="13">newl<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <name pos:line="76" pos:column="20">FALSE<pos:position pos:line="76" pos:column="25"/></name></expr>;<pos:position pos:line="76" pos:column="26"/></expr_stmt>
          }<pos:position pos:line="77" pos:column="12"/></block></then></if>
        }<pos:position pos:line="78" pos:column="10"/></block></for>
        <if pos:line="79" pos:column="9">if<condition pos:line="79" pos:column="11">(<expr><operator pos:line="79" pos:column="12">!<pos:position pos:line="79" pos:column="13"/></operator><name pos:line="79" pos:column="13">newl<pos:position pos:line="79" pos:column="17"/></name></expr>)<pos:position pos:line="79" pos:column="18"/></condition><then pos:line="79" pos:column="18">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="80" pos:column="11">fprintf<pos:position pos:line="80" pos:column="18"/></name><argument_list pos:line="80" pos:column="18">(<argument><expr><name pos:line="80" pos:column="19">output<pos:position pos:line="80" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="27">"%s%s "<pos:position pos:line="80" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="36">timebuf<pos:position pos:line="80" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="45">s_infotype<pos:position pos:line="80" pos:column="55"/></name><index pos:line="80" pos:column="55">[<expr><name pos:line="80" pos:column="56">type<pos:position pos:line="80" pos:column="60"/></name></expr>]<pos:position pos:line="80" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="80" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="63"/></expr_stmt></block></then></if>
        <expr_stmt><expr><operator pos:line="81" pos:column="9">(<pos:position pos:line="81" pos:column="10"/></operator><name pos:line="81" pos:column="10">void<pos:position pos:line="81" pos:column="14"/></name><operator pos:line="81" pos:column="14">)<pos:position pos:line="81" pos:column="15"/></operator><call><name pos:line="81" pos:column="15">fwrite<pos:position pos:line="81" pos:column="21"/></name><argument_list pos:line="81" pos:column="21">(<argument><expr><name pos:line="81" pos:column="22">data<pos:position pos:line="81" pos:column="26"/></name> <operator pos:line="81" pos:column="27">+<pos:position pos:line="81" pos:column="28"/></operator> <name pos:line="81" pos:column="29">st<pos:position pos:line="81" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="33">i<pos:position pos:line="81" pos:column="34"/></name> <operator pos:line="81" pos:column="35">-<pos:position pos:line="81" pos:column="36"/></operator> <name pos:line="81" pos:column="37">st<pos:position pos:line="81" pos:column="39"/></name> <operator pos:line="81" pos:column="40">+<pos:position pos:line="81" pos:column="41"/></operator> <literal type="number" pos:line="81" pos:column="42">1<pos:position pos:line="81" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="45">1<pos:position pos:line="81" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="48">output<pos:position pos:line="81" pos:column="54"/></name></expr></argument>)<pos:position pos:line="81" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="82" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="83" pos:column="7">newl<pos:position pos:line="83" pos:column="11"/></name> <operator pos:line="83" pos:column="12">=<pos:position pos:line="83" pos:column="13"/></operator> <ternary><condition><expr><operator pos:line="83" pos:column="14">(<pos:position pos:line="83" pos:column="15"/></operator><name pos:line="83" pos:column="15">size<pos:position pos:line="83" pos:column="19"/></name> <operator pos:line="83" pos:column="20">&amp;&amp;<pos:position pos:line="83" pos:column="30"/></operator> <operator pos:line="83" pos:column="23">(<pos:position pos:line="83" pos:column="24"/></operator><name><name pos:line="83" pos:column="24">data<pos:position pos:line="83" pos:column="28"/></name><index pos:line="83" pos:column="28">[<expr><name pos:line="83" pos:column="29">size<pos:position pos:line="83" pos:column="33"/></name> <operator pos:line="83" pos:column="34">-<pos:position pos:line="83" pos:column="35"/></operator> <literal type="number" pos:line="83" pos:column="36">1<pos:position pos:line="83" pos:column="37"/></literal></expr>]<pos:position pos:line="83" pos:column="38"/></index></name> <operator pos:line="83" pos:column="39">!=<pos:position pos:line="83" pos:column="41"/></operator> <literal type="char" pos:line="83" pos:column="42">'\n'<pos:position pos:line="83" pos:column="46"/></literal><operator pos:line="83" pos:column="46">)<pos:position pos:line="83" pos:column="47"/></operator><operator pos:line="83" pos:column="47">)<pos:position pos:line="83" pos:column="48"/></operator></expr> ?<pos:position pos:line="83" pos:column="50"/></condition><then pos:line="83" pos:column="50"> <expr><name pos:line="83" pos:column="51">TRUE<pos:position pos:line="83" pos:column="55"/></name></expr> <pos:position pos:line="83" pos:column="56"/></then><else pos:line="83" pos:column="56">: <expr><name pos:line="83" pos:column="58">FALSE<pos:position pos:line="83" pos:column="63"/></name></expr></else></ternary></expr>;<pos:position pos:line="83" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name pos:line="84" pos:column="7">traced_data<pos:position pos:line="84" pos:column="18"/></name> <operator pos:line="84" pos:column="19">=<pos:position pos:line="84" pos:column="20"/></operator> <name pos:line="84" pos:column="21">FALSE<pos:position pos:line="84" pos:column="26"/></name></expr>;<pos:position pos:line="84" pos:column="27"/></expr_stmt>
      <break pos:line="85" pos:column="7">break;<pos:position pos:line="85" pos:column="13"/></break>
    <case pos:line="86" pos:column="5">case <expr><name pos:line="86" pos:column="10">CURLINFO_TEXT<pos:position pos:line="86" pos:column="23"/></name></expr>:<pos:position pos:line="86" pos:column="24"/></case>
    <case pos:line="87" pos:column="5">case <expr><name pos:line="87" pos:column="10">CURLINFO_HEADER_IN<pos:position pos:line="87" pos:column="28"/></name></expr>:<pos:position pos:line="87" pos:column="29"/></case>
      <if pos:line="88" pos:column="7">if<condition pos:line="88" pos:column="9">(<expr><operator pos:line="88" pos:column="10">!<pos:position pos:line="88" pos:column="11"/></operator><name pos:line="88" pos:column="11">newl<pos:position pos:line="88" pos:column="15"/></name></expr>)<pos:position pos:line="88" pos:column="16"/></condition><then pos:line="88" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="9">fprintf<pos:position pos:line="89" pos:column="16"/></name><argument_list pos:line="89" pos:column="16">(<argument><expr><name pos:line="89" pos:column="17">output<pos:position pos:line="89" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="25">"%s%s "<pos:position pos:line="89" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="34">timebuf<pos:position pos:line="89" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="43">s_infotype<pos:position pos:line="89" pos:column="53"/></name><index pos:line="89" pos:column="53">[<expr><name pos:line="89" pos:column="54">type<pos:position pos:line="89" pos:column="58"/></name></expr>]<pos:position pos:line="89" pos:column="59"/></index></name></expr></argument>)<pos:position pos:line="89" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="61"/></expr_stmt></block></then></if>
      <expr_stmt><expr><operator pos:line="90" pos:column="7">(<pos:position pos:line="90" pos:column="8"/></operator><name pos:line="90" pos:column="8">void<pos:position pos:line="90" pos:column="12"/></name><operator pos:line="90" pos:column="12">)<pos:position pos:line="90" pos:column="13"/></operator><call><name pos:line="90" pos:column="13">fwrite<pos:position pos:line="90" pos:column="19"/></name><argument_list pos:line="90" pos:column="19">(<argument><expr><name pos:line="90" pos:column="20">data<pos:position pos:line="90" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="26">size<pos:position pos:line="90" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="32">1<pos:position pos:line="90" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="35">output<pos:position pos:line="90" pos:column="41"/></name></expr></argument>)<pos:position pos:line="90" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name pos:line="91" pos:column="7">newl<pos:position pos:line="91" pos:column="11"/></name> <operator pos:line="91" pos:column="12">=<pos:position pos:line="91" pos:column="13"/></operator> <ternary><condition><expr><operator pos:line="91" pos:column="14">(<pos:position pos:line="91" pos:column="15"/></operator><name pos:line="91" pos:column="15">size<pos:position pos:line="91" pos:column="19"/></name> <operator pos:line="91" pos:column="20">&amp;&amp;<pos:position pos:line="91" pos:column="30"/></operator> <operator pos:line="91" pos:column="23">(<pos:position pos:line="91" pos:column="24"/></operator><name><name pos:line="91" pos:column="24">data<pos:position pos:line="91" pos:column="28"/></name><index pos:line="91" pos:column="28">[<expr><name pos:line="91" pos:column="29">size<pos:position pos:line="91" pos:column="33"/></name> <operator pos:line="91" pos:column="34">-<pos:position pos:line="91" pos:column="35"/></operator> <literal type="number" pos:line="91" pos:column="36">1<pos:position pos:line="91" pos:column="37"/></literal></expr>]<pos:position pos:line="91" pos:column="38"/></index></name> <operator pos:line="91" pos:column="39">!=<pos:position pos:line="91" pos:column="41"/></operator> <literal type="char" pos:line="91" pos:column="42">'\n'<pos:position pos:line="91" pos:column="46"/></literal><operator pos:line="91" pos:column="46">)<pos:position pos:line="91" pos:column="47"/></operator><operator pos:line="91" pos:column="47">)<pos:position pos:line="91" pos:column="48"/></operator></expr> ?<pos:position pos:line="91" pos:column="50"/></condition><then pos:line="91" pos:column="50"> <expr><name pos:line="91" pos:column="51">TRUE<pos:position pos:line="91" pos:column="55"/></name></expr> <pos:position pos:line="91" pos:column="56"/></then><else pos:line="91" pos:column="56">: <expr><name pos:line="91" pos:column="58">FALSE<pos:position pos:line="91" pos:column="63"/></name></expr></else></ternary></expr>;<pos:position pos:line="91" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name pos:line="92" pos:column="7">traced_data<pos:position pos:line="92" pos:column="18"/></name> <operator pos:line="92" pos:column="19">=<pos:position pos:line="92" pos:column="20"/></operator> <name pos:line="92" pos:column="21">FALSE<pos:position pos:line="92" pos:column="26"/></name></expr>;<pos:position pos:line="92" pos:column="27"/></expr_stmt>
      <break pos:line="93" pos:column="7">break;<pos:position pos:line="93" pos:column="13"/></break>
    <case pos:line="94" pos:column="5">case <expr><name pos:line="94" pos:column="10">CURLINFO_DATA_OUT<pos:position pos:line="94" pos:column="27"/></name></expr>:<pos:position pos:line="94" pos:column="28"/></case>
    <case pos:line="95" pos:column="5">case <expr><name pos:line="95" pos:column="10">CURLINFO_DATA_IN<pos:position pos:line="95" pos:column="26"/></name></expr>:<pos:position pos:line="95" pos:column="27"/></case>
    <case pos:line="96" pos:column="5">case <expr><name pos:line="96" pos:column="10">CURLINFO_SSL_DATA_IN<pos:position pos:line="96" pos:column="30"/></name></expr>:<pos:position pos:line="96" pos:column="31"/></case>
    <case pos:line="97" pos:column="5">case <expr><name pos:line="97" pos:column="10">CURLINFO_SSL_DATA_OUT<pos:position pos:line="97" pos:column="31"/></name></expr>:<pos:position pos:line="97" pos:column="32"/></case>
      <if pos:line="98" pos:column="7">if<condition pos:line="98" pos:column="9">(<expr><operator pos:line="98" pos:column="10">!<pos:position pos:line="98" pos:column="11"/></operator><name pos:line="98" pos:column="11">traced_data<pos:position pos:line="98" pos:column="22"/></name></expr>)<pos:position pos:line="98" pos:column="23"/></condition><then pos:line="98" pos:column="23"> <block pos:line="98" pos:column="24">{
        <comment type="block" pos:line="99" pos:column="9">/* if the data is output to a tty and we're sending this debug trace
           to stderr or stdout, we don't display the alert about the data not
           being shown as the data _is_ shown then just not via this
           function */</comment>
        <if pos:line="103" pos:column="9">if<condition pos:line="103" pos:column="11">(<expr><operator pos:line="103" pos:column="12">!<pos:position pos:line="103" pos:column="13"/></operator><name><name pos:line="103" pos:column="13">config<pos:position pos:line="103" pos:column="19"/></name><operator pos:line="103" pos:column="19">-&gt;<pos:position pos:line="103" pos:column="24"/></operator><name pos:line="103" pos:column="21">isatty<pos:position pos:line="103" pos:column="27"/></name></name> <operator pos:line="103" pos:column="28">||<pos:position pos:line="103" pos:column="30"/></operator> <operator pos:line="103" pos:column="31">(<pos:position pos:line="103" pos:column="32"/></operator><operator pos:line="103" pos:column="32">(<pos:position pos:line="103" pos:column="33"/></operator><name pos:line="103" pos:column="33">output<pos:position pos:line="103" pos:column="39"/></name> <operator pos:line="103" pos:column="40">!=<pos:position pos:line="103" pos:column="42"/></operator> <name pos:line="103" pos:column="43">stderr<pos:position pos:line="103" pos:column="49"/></name><operator pos:line="103" pos:column="49">)<pos:position pos:line="103" pos:column="50"/></operator> <operator pos:line="103" pos:column="51">&amp;&amp;<pos:position pos:line="103" pos:column="61"/></operator> <operator pos:line="103" pos:column="54">(<pos:position pos:line="103" pos:column="55"/></operator><name pos:line="103" pos:column="55">output<pos:position pos:line="103" pos:column="61"/></name> <operator pos:line="103" pos:column="62">!=<pos:position pos:line="103" pos:column="64"/></operator> <name pos:line="103" pos:column="65">stdout<pos:position pos:line="103" pos:column="71"/></name><operator pos:line="103" pos:column="71">)<pos:position pos:line="103" pos:column="72"/></operator><operator pos:line="103" pos:column="72">)<pos:position pos:line="103" pos:column="73"/></operator></expr>)<pos:position pos:line="103" pos:column="74"/></condition><then pos:line="103" pos:column="74"> <block pos:line="103" pos:column="75">{
          <if pos:line="104" pos:column="11">if<condition pos:line="104" pos:column="13">(<expr><operator pos:line="104" pos:column="14">!<pos:position pos:line="104" pos:column="15"/></operator><name pos:line="104" pos:column="15">newl<pos:position pos:line="104" pos:column="19"/></name></expr>)<pos:position pos:line="104" pos:column="20"/></condition><then pos:line="104" pos:column="20">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="105" pos:column="13">fprintf<pos:position pos:line="105" pos:column="20"/></name><argument_list pos:line="105" pos:column="20">(<argument><expr><name pos:line="105" pos:column="21">output<pos:position pos:line="105" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="29">"%s%s "<pos:position pos:line="105" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="38">timebuf<pos:position pos:line="105" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="47">s_infotype<pos:position pos:line="105" pos:column="57"/></name><index pos:line="105" pos:column="57">[<expr><name pos:line="105" pos:column="58">type<pos:position pos:line="105" pos:column="62"/></name></expr>]<pos:position pos:line="105" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="105" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="65"/></expr_stmt></block></then></if>
          <expr_stmt><expr><call><name pos:line="106" pos:column="11">fprintf<pos:position pos:line="106" pos:column="18"/></name><argument_list pos:line="106" pos:column="18">(<argument><expr><name pos:line="106" pos:column="19">output<pos:position pos:line="106" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="27">"[%zd bytes data]\n"<pos:position pos:line="106" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="49">size<pos:position pos:line="106" pos:column="53"/></name></expr></argument>)<pos:position pos:line="106" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="55"/></expr_stmt>
          <expr_stmt><expr><name pos:line="107" pos:column="11">newl<pos:position pos:line="107" pos:column="15"/></name> <operator pos:line="107" pos:column="16">=<pos:position pos:line="107" pos:column="17"/></operator> <name pos:line="107" pos:column="18">FALSE<pos:position pos:line="107" pos:column="23"/></name></expr>;<pos:position pos:line="107" pos:column="24"/></expr_stmt>
          <expr_stmt><expr><name pos:line="108" pos:column="11">traced_data<pos:position pos:line="108" pos:column="22"/></name> <operator pos:line="108" pos:column="23">=<pos:position pos:line="108" pos:column="24"/></operator> <name pos:line="108" pos:column="25">TRUE<pos:position pos:line="108" pos:column="29"/></name></expr>;<pos:position pos:line="108" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="109" pos:column="10"/></block></then></if>
      }<pos:position pos:line="110" pos:column="8"/></block></then></if>
      <break pos:line="111" pos:column="7">break;<pos:position pos:line="111" pos:column="13"/></break>
    <default pos:line="112" pos:column="5">default:<pos:position pos:line="112" pos:column="13"/></default> <comment type="block" pos:line="112" pos:column="14">/* nada */</comment>
      <expr_stmt><expr><name pos:line="113" pos:column="7">newl<pos:position pos:line="113" pos:column="11"/></name> <operator pos:line="113" pos:column="12">=<pos:position pos:line="113" pos:column="13"/></operator> <name pos:line="113" pos:column="14">FALSE<pos:position pos:line="113" pos:column="19"/></name></expr>;<pos:position pos:line="113" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="114" pos:column="7">traced_data<pos:position pos:line="114" pos:column="18"/></name> <operator pos:line="114" pos:column="19">=<pos:position pos:line="114" pos:column="20"/></operator> <name pos:line="114" pos:column="21">FALSE<pos:position pos:line="114" pos:column="26"/></name></expr>;<pos:position pos:line="114" pos:column="27"/></expr_stmt>
      <break pos:line="115" pos:column="7">break;<pos:position pos:line="115" pos:column="13"/></break>
    }<pos:position pos:line="116" pos:column="6"/></block></switch>

    <return pos:line="118" pos:column="5">return <expr><literal type="number" pos:line="118" pos:column="12">0<pos:position pos:line="118" pos:column="13"/></literal></expr>;<pos:position pos:line="118" pos:column="14"/></return>
  }<pos:position pos:line="119" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">ifdef<pos:position pos:line="121" pos:column="7"/></cpp:directive> <name pos:line="121" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="121" pos:column="29"/></name></cpp:ifdef>
  <comment type="block" pos:line="122" pos:column="3">/* Special processing is needed for CURLINFO_HEADER_OUT blocks
   * if they contain both headers and data (separated by CRLFCRLF).
   * We dump the header text and then switch type to CURLINFO_DATA_OUT.
   */</comment>
  <if pos:line="126" pos:column="3">if<condition pos:line="126" pos:column="5">(<expr><operator pos:line="126" pos:column="6">(<pos:position pos:line="126" pos:column="7"/></operator><name pos:line="126" pos:column="7">type<pos:position pos:line="126" pos:column="11"/></name> <operator pos:line="126" pos:column="12">==<pos:position pos:line="126" pos:column="14"/></operator> <name pos:line="126" pos:column="15">CURLINFO_HEADER_OUT<pos:position pos:line="126" pos:column="34"/></name><operator pos:line="126" pos:column="34">)<pos:position pos:line="126" pos:column="35"/></operator> <operator pos:line="126" pos:column="36">&amp;&amp;<pos:position pos:line="126" pos:column="46"/></operator> <operator pos:line="126" pos:column="39">(<pos:position pos:line="126" pos:column="40"/></operator><name pos:line="126" pos:column="40">size<pos:position pos:line="126" pos:column="44"/></name> <operator pos:line="126" pos:column="45">&gt;<pos:position pos:line="126" pos:column="49"/></operator> <literal type="number" pos:line="126" pos:column="47">4<pos:position pos:line="126" pos:column="48"/></literal><operator pos:line="126" pos:column="48">)<pos:position pos:line="126" pos:column="49"/></operator></expr>)<pos:position pos:line="126" pos:column="50"/></condition><then pos:line="126" pos:column="50"> <block pos:line="126" pos:column="51">{
    <decl_stmt><decl><type><name pos:line="127" pos:column="5">size_t<pos:position pos:line="127" pos:column="11"/></name></type> <name pos:line="127" pos:column="12">i<pos:position pos:line="127" pos:column="13"/></name></decl>;<pos:position pos:line="127" pos:column="14"/></decl_stmt>
    <for pos:line="128" pos:column="5">for<control pos:line="128" pos:column="8">(<init><expr><name pos:line="128" pos:column="9">i<pos:position pos:line="128" pos:column="10"/></name> <operator pos:line="128" pos:column="11">=<pos:position pos:line="128" pos:column="12"/></operator> <literal type="number" pos:line="128" pos:column="13">0<pos:position pos:line="128" pos:column="14"/></literal></expr>;<pos:position pos:line="128" pos:column="15"/></init> <condition><expr><name pos:line="128" pos:column="16">i<pos:position pos:line="128" pos:column="17"/></name> <operator pos:line="128" pos:column="18">&lt;<pos:position pos:line="128" pos:column="22"/></operator> <name pos:line="128" pos:column="20">size<pos:position pos:line="128" pos:column="24"/></name> <operator pos:line="128" pos:column="25">-<pos:position pos:line="128" pos:column="26"/></operator> <literal type="number" pos:line="128" pos:column="27">4<pos:position pos:line="128" pos:column="28"/></literal></expr>;<pos:position pos:line="128" pos:column="29"/></condition> <incr><expr><name pos:line="128" pos:column="30">i<pos:position pos:line="128" pos:column="31"/></name><operator pos:line="128" pos:column="31">++<pos:position pos:line="128" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="128" pos:column="34"/></control> <block pos:line="128" pos:column="35">{
      <if pos:line="129" pos:column="7">if<condition pos:line="129" pos:column="9">(<expr><call><name pos:line="129" pos:column="10">memcmp<pos:position pos:line="129" pos:column="16"/></name><argument_list pos:line="129" pos:column="16">(<argument><expr><operator pos:line="129" pos:column="17">&amp;<pos:position pos:line="129" pos:column="22"/></operator><name><name pos:line="129" pos:column="18">data<pos:position pos:line="129" pos:column="22"/></name><index pos:line="129" pos:column="22">[<expr><name pos:line="129" pos:column="23">i<pos:position pos:line="129" pos:column="24"/></name></expr>]<pos:position pos:line="129" pos:column="25"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="129" pos:column="27">"\r\n\r\n"<pos:position pos:line="129" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="129" pos:column="39">4<pos:position pos:line="129" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="41"/></argument_list></call> <operator pos:line="129" pos:column="42">==<pos:position pos:line="129" pos:column="44"/></operator> <literal type="number" pos:line="129" pos:column="45">0<pos:position pos:line="129" pos:column="46"/></literal></expr>)<pos:position pos:line="129" pos:column="47"/></condition><then pos:line="129" pos:column="47"> <block pos:line="129" pos:column="48">{
        <comment type="block" pos:line="130" pos:column="9">/* dump everything through the CRLFCRLF as a sent header */</comment>
        <expr_stmt><expr><name pos:line="131" pos:column="9">text<pos:position pos:line="131" pos:column="13"/></name> <operator pos:line="131" pos:column="14">=<pos:position pos:line="131" pos:column="15"/></operator> <literal type="string" pos:line="131" pos:column="16">"=&gt; Send header"<pos:position pos:line="131" pos:column="35"/></literal></expr>;<pos:position pos:line="131" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="132" pos:column="9">dump<pos:position pos:line="132" pos:column="13"/></name><argument_list pos:line="132" pos:column="13">(<argument><expr><name pos:line="132" pos:column="14">timebuf<pos:position pos:line="132" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="23">text<pos:position pos:line="132" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="29">output<pos:position pos:line="132" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="37">(<pos:position pos:line="132" pos:column="38"/></operator><name pos:line="132" pos:column="38">unsigned<pos:position pos:line="132" pos:column="46"/></name> <name pos:line="132" pos:column="47">char<pos:position pos:line="132" pos:column="51"/></name> <operator pos:line="132" pos:column="52">*<pos:position pos:line="132" pos:column="53"/></operator><operator pos:line="132" pos:column="53">)<pos:position pos:line="132" pos:column="54"/></operator><name pos:line="132" pos:column="54">data<pos:position pos:line="132" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="60">i<pos:position pos:line="132" pos:column="61"/></name> <operator pos:line="132" pos:column="62">+<pos:position pos:line="132" pos:column="63"/></operator> <literal type="number" pos:line="132" pos:column="64">4<pos:position pos:line="132" pos:column="65"/></literal></expr></argument>,
             <argument><expr><name><name pos:line="133" pos:column="14">config<pos:position pos:line="133" pos:column="20"/></name><operator pos:line="133" pos:column="20">-&gt;<pos:position pos:line="133" pos:column="25"/></operator><name pos:line="133" pos:column="22">tracetype<pos:position pos:line="133" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="33">type<pos:position pos:line="133" pos:column="37"/></name></expr></argument>)<pos:position pos:line="133" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="134" pos:column="9">data<pos:position pos:line="134" pos:column="13"/></name> <operator pos:line="134" pos:column="14">+=<pos:position pos:line="134" pos:column="16"/></operator> <name pos:line="134" pos:column="17">i<pos:position pos:line="134" pos:column="18"/></name> <operator pos:line="134" pos:column="19">+<pos:position pos:line="134" pos:column="20"/></operator> <literal type="number" pos:line="134" pos:column="21">3<pos:position pos:line="134" pos:column="22"/></literal></expr>;<pos:position pos:line="134" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="135" pos:column="9">size<pos:position pos:line="135" pos:column="13"/></name> <operator pos:line="135" pos:column="14">-=<pos:position pos:line="135" pos:column="16"/></operator> <name pos:line="135" pos:column="17">i<pos:position pos:line="135" pos:column="18"/></name> <operator pos:line="135" pos:column="19">+<pos:position pos:line="135" pos:column="20"/></operator> <literal type="number" pos:line="135" pos:column="21">4<pos:position pos:line="135" pos:column="22"/></literal></expr>;<pos:position pos:line="135" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="136" pos:column="9">type<pos:position pos:line="136" pos:column="13"/></name> <operator pos:line="136" pos:column="14">=<pos:position pos:line="136" pos:column="15"/></operator> <name pos:line="136" pos:column="16">CURLINFO_DATA_OUT<pos:position pos:line="136" pos:column="33"/></name></expr>;<pos:position pos:line="136" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="137" pos:column="9">data<pos:position pos:line="137" pos:column="13"/></name> <operator pos:line="137" pos:column="14">+=<pos:position pos:line="137" pos:column="16"/></operator> <literal type="number" pos:line="137" pos:column="17">1<pos:position pos:line="137" pos:column="18"/></literal></expr>;<pos:position pos:line="137" pos:column="19"/></expr_stmt>
        <break pos:line="138" pos:column="9">break;<pos:position pos:line="138" pos:column="15"/></break>
      }<pos:position pos:line="139" pos:column="8"/></block></then></if>
    }<pos:position pos:line="140" pos:column="6"/></block></for>
  }<pos:position pos:line="141" pos:column="4"/></block></then></if>
<cpp:endif pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">endif<pos:position pos:line="142" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="142" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

  <switch pos:line="144" pos:column="3">switch<condition pos:line="144" pos:column="9">(<expr><name pos:line="144" pos:column="10">type<pos:position pos:line="144" pos:column="14"/></name></expr>)<pos:position pos:line="144" pos:column="15"/></condition> <block pos:line="144" pos:column="16">{
  <case pos:line="145" pos:column="3">case <expr><name pos:line="145" pos:column="8">CURLINFO_TEXT<pos:position pos:line="145" pos:column="21"/></name></expr>:<pos:position pos:line="145" pos:column="22"/></case>
    <expr_stmt><expr><call><name pos:line="146" pos:column="5">fprintf<pos:position pos:line="146" pos:column="12"/></name><argument_list pos:line="146" pos:column="12">(<argument><expr><name pos:line="146" pos:column="13">output<pos:position pos:line="146" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="21">"%s== Info: %s"<pos:position pos:line="146" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="38">timebuf<pos:position pos:line="146" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="47">data<pos:position pos:line="146" pos:column="51"/></name></expr></argument>)<pos:position pos:line="146" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="53"/></expr_stmt>
    <comment type="block" pos:line="147" pos:column="5">/* FALLTHROUGH */</comment>
  <default pos:line="148" pos:column="3">default:<pos:position pos:line="148" pos:column="11"/></default> <comment type="block" pos:line="148" pos:column="12">/* in case a new one is introduced to shock us */</comment>
    <return pos:line="149" pos:column="5">return <expr><literal type="number" pos:line="149" pos:column="12">0<pos:position pos:line="149" pos:column="13"/></literal></expr>;<pos:position pos:line="149" pos:column="14"/></return>

  <case pos:line="151" pos:column="3">case <expr><name pos:line="151" pos:column="8">CURLINFO_HEADER_OUT<pos:position pos:line="151" pos:column="27"/></name></expr>:<pos:position pos:line="151" pos:column="28"/></case>
    <expr_stmt><expr><name pos:line="152" pos:column="5">text<pos:position pos:line="152" pos:column="9"/></name> <operator pos:line="152" pos:column="10">=<pos:position pos:line="152" pos:column="11"/></operator> <literal type="string" pos:line="152" pos:column="12">"=&gt; Send header"<pos:position pos:line="152" pos:column="31"/></literal></expr>;<pos:position pos:line="152" pos:column="29"/></expr_stmt>
    <break pos:line="153" pos:column="5">break;<pos:position pos:line="153" pos:column="11"/></break>
  <case pos:line="154" pos:column="3">case <expr><name pos:line="154" pos:column="8">CURLINFO_DATA_OUT<pos:position pos:line="154" pos:column="25"/></name></expr>:<pos:position pos:line="154" pos:column="26"/></case>
    <expr_stmt><expr><name pos:line="155" pos:column="5">text<pos:position pos:line="155" pos:column="9"/></name> <operator pos:line="155" pos:column="10">=<pos:position pos:line="155" pos:column="11"/></operator> <literal type="string" pos:line="155" pos:column="12">"=&gt; Send data"<pos:position pos:line="155" pos:column="29"/></literal></expr>;<pos:position pos:line="155" pos:column="27"/></expr_stmt>
    <break pos:line="156" pos:column="5">break;<pos:position pos:line="156" pos:column="11"/></break>
  <case pos:line="157" pos:column="3">case <expr><name pos:line="157" pos:column="8">CURLINFO_HEADER_IN<pos:position pos:line="157" pos:column="26"/></name></expr>:<pos:position pos:line="157" pos:column="27"/></case>
    <expr_stmt><expr><name pos:line="158" pos:column="5">text<pos:position pos:line="158" pos:column="9"/></name> <operator pos:line="158" pos:column="10">=<pos:position pos:line="158" pos:column="11"/></operator> <literal type="string" pos:line="158" pos:column="12">"&lt;= Recv header"<pos:position pos:line="158" pos:column="31"/></literal></expr>;<pos:position pos:line="158" pos:column="29"/></expr_stmt>
    <break pos:line="159" pos:column="5">break;<pos:position pos:line="159" pos:column="11"/></break>
  <case pos:line="160" pos:column="3">case <expr><name pos:line="160" pos:column="8">CURLINFO_DATA_IN<pos:position pos:line="160" pos:column="24"/></name></expr>:<pos:position pos:line="160" pos:column="25"/></case>
    <expr_stmt><expr><name pos:line="161" pos:column="5">text<pos:position pos:line="161" pos:column="9"/></name> <operator pos:line="161" pos:column="10">=<pos:position pos:line="161" pos:column="11"/></operator> <literal type="string" pos:line="161" pos:column="12">"&lt;= Recv data"<pos:position pos:line="161" pos:column="29"/></literal></expr>;<pos:position pos:line="161" pos:column="27"/></expr_stmt>
    <break pos:line="162" pos:column="5">break;<pos:position pos:line="162" pos:column="11"/></break>
  <case pos:line="163" pos:column="3">case <expr><name pos:line="163" pos:column="8">CURLINFO_SSL_DATA_IN<pos:position pos:line="163" pos:column="28"/></name></expr>:<pos:position pos:line="163" pos:column="29"/></case>
    <expr_stmt><expr><name pos:line="164" pos:column="5">text<pos:position pos:line="164" pos:column="9"/></name> <operator pos:line="164" pos:column="10">=<pos:position pos:line="164" pos:column="11"/></operator> <literal type="string" pos:line="164" pos:column="12">"&lt;= Recv SSL data"<pos:position pos:line="164" pos:column="33"/></literal></expr>;<pos:position pos:line="164" pos:column="31"/></expr_stmt>
    <break pos:line="165" pos:column="5">break;<pos:position pos:line="165" pos:column="11"/></break>
  <case pos:line="166" pos:column="3">case <expr><name pos:line="166" pos:column="8">CURLINFO_SSL_DATA_OUT<pos:position pos:line="166" pos:column="29"/></name></expr>:<pos:position pos:line="166" pos:column="30"/></case>
    <expr_stmt><expr><name pos:line="167" pos:column="5">text<pos:position pos:line="167" pos:column="9"/></name> <operator pos:line="167" pos:column="10">=<pos:position pos:line="167" pos:column="11"/></operator> <literal type="string" pos:line="167" pos:column="12">"=&gt; Send SSL data"<pos:position pos:line="167" pos:column="33"/></literal></expr>;<pos:position pos:line="167" pos:column="31"/></expr_stmt>
    <break pos:line="168" pos:column="5">break;<pos:position pos:line="168" pos:column="11"/></break>
  }<pos:position pos:line="169" pos:column="4"/></block></switch>

  <expr_stmt><expr><call><name pos:line="171" pos:column="3">dump<pos:position pos:line="171" pos:column="7"/></name><argument_list pos:line="171" pos:column="7">(<argument><expr><name pos:line="171" pos:column="8">timebuf<pos:position pos:line="171" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="17">text<pos:position pos:line="171" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="23">output<pos:position pos:line="171" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="171" pos:column="31">(<pos:position pos:line="171" pos:column="32"/></operator><name pos:line="171" pos:column="32">unsigned<pos:position pos:line="171" pos:column="40"/></name> <name pos:line="171" pos:column="41">char<pos:position pos:line="171" pos:column="45"/></name> <operator pos:line="171" pos:column="46">*<pos:position pos:line="171" pos:column="47"/></operator><operator pos:line="171" pos:column="47">)<pos:position pos:line="171" pos:column="48"/></operator> <name pos:line="171" pos:column="49">data<pos:position pos:line="171" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="55">size<pos:position pos:line="171" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="61">config<pos:position pos:line="171" pos:column="67"/></name><operator pos:line="171" pos:column="67">-&gt;<pos:position pos:line="171" pos:column="72"/></operator><name pos:line="171" pos:column="69">tracetype<pos:position pos:line="171" pos:column="78"/></name></name></expr></argument>,
       <argument><expr><name pos:line="172" pos:column="8">type<pos:position pos:line="172" pos:column="12"/></name></expr></argument>)<pos:position pos:line="172" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="14"/></expr_stmt>
  <return pos:line="173" pos:column="3">return <expr><literal type="number" pos:line="173" pos:column="10">0<pos:position pos:line="173" pos:column="11"/></literal></expr>;<pos:position pos:line="173" pos:column="12"/></return>
}<pos:position pos:line="174" pos:column="2"/></block></function></unit>
