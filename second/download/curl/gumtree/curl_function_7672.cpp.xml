<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_7672.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">hugehelp<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">void<pos:position pos:line="1" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
   <expr_stmt><expr><call><name pos:line="3" pos:column="4">fputs<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(
<argument><expr><literal type="string" pos:line="4" pos:column="1">"                                  _   _ ____  _\n"<pos:position pos:line="4" pos:column="52"/></literal>
<literal type="string" pos:line="5" pos:column="1">"  Project                     ___| | | |  _ \\| |\n"<pos:position pos:line="5" pos:column="54"/></literal>
<literal type="string" pos:line="6" pos:column="1">"                             / __| | | | |_) | |\n"<pos:position pos:line="6" pos:column="53"/></literal>
<literal type="string" pos:line="7" pos:column="1">"                            | (__| |_| |  _ &lt;| |___\n"<pos:position pos:line="7" pos:column="59"/></literal>
<literal type="string" pos:line="8" pos:column="1">"                             \\___|\\___/|_| \\_\\_____|\n"<pos:position pos:line="8" pos:column="61"/></literal>
<literal type="string" pos:line="9" pos:column="1">"\n"<pos:position pos:line="9" pos:column="5"/></literal>
<literal type="string" pos:line="10" pos:column="1">"NAME\n"<pos:position pos:line="10" pos:column="9"/></literal>
<literal type="string" pos:line="11" pos:column="1">"       curl - transfer a URL\n"<pos:position pos:line="11" pos:column="33"/></literal>
<literal type="string" pos:line="12" pos:column="1">"\n"<pos:position pos:line="12" pos:column="5"/></literal>
<literal type="string" pos:line="13" pos:column="1">"SYNOPSIS\n"<pos:position pos:line="13" pos:column="13"/></literal>
<literal type="string" pos:line="14" pos:column="1">"       curl [options] [URL...]\n"<pos:position pos:line="14" pos:column="35"/></literal>
<literal type="string" pos:line="15" pos:column="1">"\n"<pos:position pos:line="15" pos:column="5"/></literal>
<literal type="string" pos:line="16" pos:column="1">"DESCRIPTION\n"<pos:position pos:line="16" pos:column="16"/></literal>
<literal type="string" pos:line="17" pos:column="1">"       curl  is  a tool to transfer data from or to a server, using one of the\n"<pos:position pos:line="17" pos:column="83"/></literal>
<literal type="string" pos:line="18" pos:column="1">"       supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS,  IMAP,\n"<pos:position pos:line="18" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="19" pos:column="3">stdout<pos:position pos:line="19" pos:column="9"/></name></expr></argument>)<pos:position pos:line="19" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="20" pos:column="2">fputs<pos:position pos:line="20" pos:column="7"/></name><argument_list pos:line="20" pos:column="7">(
<argument><expr><literal type="string" pos:line="21" pos:column="1">"       IMAPS,  LDAP,  LDAPS,  POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS,\n"<pos:position pos:line="21" pos:column="83"/></literal>
<literal type="string" pos:line="22" pos:column="1">"       TELNET and TFTP).  The command is designed to work without user  inter-\n"<pos:position pos:line="22" pos:column="83"/></literal>
<literal type="string" pos:line="23" pos:column="1">"       action.\n"<pos:position pos:line="23" pos:column="19"/></literal>
<literal type="string" pos:line="24" pos:column="1">"\n"<pos:position pos:line="24" pos:column="5"/></literal>
<literal type="string" pos:line="25" pos:column="1">"       curl offers a busload of useful tricks like proxy support, user authen-\n"<pos:position pos:line="25" pos:column="83"/></literal>
<literal type="string" pos:line="26" pos:column="1">"       tication, FTP upload, HTTP post, SSL connections, cookies, file  trans-\n"<pos:position pos:line="26" pos:column="83"/></literal>
<literal type="string" pos:line="27" pos:column="1">"       fer  resume,  Metalink,  and more. As you will see below, the number of\n"<pos:position pos:line="27" pos:column="83"/></literal>
<literal type="string" pos:line="28" pos:column="1">"       features will make your head spin!\n"<pos:position pos:line="28" pos:column="46"/></literal>
<literal type="string" pos:line="29" pos:column="1">"\n"<pos:position pos:line="29" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="30" pos:column="3">stdout<pos:position pos:line="30" pos:column="9"/></name></expr></argument>)<pos:position pos:line="30" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="31" pos:column="2">fputs<pos:position pos:line="31" pos:column="7"/></name><argument_list pos:line="31" pos:column="7">(
<argument><expr><literal type="string" pos:line="32" pos:column="1">"       curl is powered by  libcurl  for  all  transfer-related  features.  See\n"<pos:position pos:line="32" pos:column="83"/></literal>
<literal type="string" pos:line="33" pos:column="1">"       libcurl(3) for details.\n"<pos:position pos:line="33" pos:column="35"/></literal>
<literal type="string" pos:line="34" pos:column="1">"\n"<pos:position pos:line="34" pos:column="5"/></literal>
<literal type="string" pos:line="35" pos:column="1">"URL\n"<pos:position pos:line="35" pos:column="8"/></literal>
<literal type="string" pos:line="36" pos:column="1">"       The  URL  syntax is protocol-dependent. You'll find a detailed descrip-\n"<pos:position pos:line="36" pos:column="83"/></literal>
<literal type="string" pos:line="37" pos:column="1">"       tion in RFC 3986.\n"<pos:position pos:line="37" pos:column="29"/></literal>
<literal type="string" pos:line="38" pos:column="1">"\n"<pos:position pos:line="38" pos:column="5"/></literal>
<literal type="string" pos:line="39" pos:column="1">"       You can specify multiple URLs or parts of URLs  by  writing  part  sets\n"<pos:position pos:line="39" pos:column="83"/></literal>
<literal type="string" pos:line="40" pos:column="1">"       within braces as in:\n"<pos:position pos:line="40" pos:column="32"/></literal>
<literal type="string" pos:line="41" pos:column="1">"\n"<pos:position pos:line="41" pos:column="5"/></literal>
<literal type="string" pos:line="42" pos:column="1">"        http://site.{one,two,three}.com\n"<pos:position pos:line="42" pos:column="44"/></literal>
<literal type="string" pos:line="43" pos:column="1">"\n"<pos:position pos:line="43" pos:column="5"/></literal>
<literal type="string" pos:line="44" pos:column="1">"       or you can get sequences of alphanumeric series by using [] as in:\n"<pos:position pos:line="44" pos:column="78"/></literal>
<literal type="string" pos:line="45" pos:column="1">"\n"<pos:position pos:line="45" pos:column="5"/></literal>
<literal type="string" pos:line="46" pos:column="1">"        ftp://ftp.numericals.com/file[1-100].txt\n"<pos:position pos:line="46" pos:column="53"/></literal></expr></argument>
, <argument><expr><name pos:line="47" pos:column="3">stdout<pos:position pos:line="47" pos:column="9"/></name></expr></argument>)<pos:position pos:line="47" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="48" pos:column="2">fputs<pos:position pos:line="48" pos:column="7"/></name><argument_list pos:line="48" pos:column="7">(
<argument><expr><literal type="string" pos:line="49" pos:column="1">"        ftp://ftp.numericals.com/file[001-100].txt    (with leading zeros)\n"<pos:position pos:line="49" pos:column="79"/></literal>
<literal type="string" pos:line="50" pos:column="1">"        ftp://ftp.letters.com/file[a-z].txt\n"<pos:position pos:line="50" pos:column="48"/></literal>
<literal type="string" pos:line="51" pos:column="1">"\n"<pos:position pos:line="51" pos:column="5"/></literal>
<literal type="string" pos:line="52" pos:column="1">"       Nested  sequences  are not supported, but you can use several ones next\n"<pos:position pos:line="52" pos:column="83"/></literal>
<literal type="string" pos:line="53" pos:column="1">"       to each other:\n"<pos:position pos:line="53" pos:column="26"/></literal>
<literal type="string" pos:line="54" pos:column="1">"\n"<pos:position pos:line="54" pos:column="5"/></literal>
<literal type="string" pos:line="55" pos:column="1">"        http://any.org/archive[1996-1999]/vol[1-4]/part{a,b,c}.html\n"<pos:position pos:line="55" pos:column="72"/></literal>
<literal type="string" pos:line="56" pos:column="1">"\n"<pos:position pos:line="56" pos:column="5"/></literal>
<literal type="string" pos:line="57" pos:column="1">"       You can specify any amount of URLs on the command line.  They  will  be\n"<pos:position pos:line="57" pos:column="83"/></literal>
<literal type="string" pos:line="58" pos:column="1">"       fetched in a sequential manner in the specified order.\n"<pos:position pos:line="58" pos:column="66"/></literal>
<literal type="string" pos:line="59" pos:column="1">"\n"<pos:position pos:line="59" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="60" pos:column="3">stdout<pos:position pos:line="60" pos:column="9"/></name></expr></argument>)<pos:position pos:line="60" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="61" pos:column="2">fputs<pos:position pos:line="61" pos:column="7"/></name><argument_list pos:line="61" pos:column="7">(
<argument><expr><literal type="string" pos:line="62" pos:column="1">"       You  can  specify a step counter for the ranges to get every Nth number\n"<pos:position pos:line="62" pos:column="83"/></literal>
<literal type="string" pos:line="63" pos:column="1">"       or letter:\n"<pos:position pos:line="63" pos:column="22"/></literal>
<literal type="string" pos:line="64" pos:column="1">"\n"<pos:position pos:line="64" pos:column="5"/></literal>
<literal type="string" pos:line="65" pos:column="1">"        http://www.numericals.com/file[1-100:10].txt\n"<pos:position pos:line="65" pos:column="57"/></literal>
<literal type="string" pos:line="66" pos:column="1">"        http://www.letters.com/file[a-z:2].txt\n"<pos:position pos:line="66" pos:column="51"/></literal>
<literal type="string" pos:line="67" pos:column="1">"\n"<pos:position pos:line="67" pos:column="5"/></literal>
<literal type="string" pos:line="68" pos:column="1">"       If you specify URL without protocol:// prefix,  curl  will  attempt  to\n"<pos:position pos:line="68" pos:column="83"/></literal>
<literal type="string" pos:line="69" pos:column="1">"       guess  what  protocol  you might want. It will then default to HTTP but\n"<pos:position pos:line="69" pos:column="83"/></literal>
<literal type="string" pos:line="70" pos:column="1">"       try other protocols based on often-used host name prefixes.  For  exam-\n"<pos:position pos:line="70" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="71" pos:column="3">stdout<pos:position pos:line="71" pos:column="9"/></name></expr></argument>)<pos:position pos:line="71" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="72" pos:column="2">fputs<pos:position pos:line="72" pos:column="7"/></name><argument_list pos:line="72" pos:column="7">(
<argument><expr><literal type="string" pos:line="73" pos:column="1">"       ple,  for  host names starting with \"ftp.\" curl will assume you want to\n"<pos:position pos:line="73" pos:column="85"/></literal>
<literal type="string" pos:line="74" pos:column="1">"       speak FTP.\n"<pos:position pos:line="74" pos:column="22"/></literal>
<literal type="string" pos:line="75" pos:column="1">"\n"<pos:position pos:line="75" pos:column="5"/></literal>
<literal type="string" pos:line="76" pos:column="1">"       curl will do its best to use what you pass to it as a URL.  It  is  not\n"<pos:position pos:line="76" pos:column="83"/></literal>
<literal type="string" pos:line="77" pos:column="1">"       trying  to  validate it as a syntactically correct URL by any means but\n"<pos:position pos:line="77" pos:column="83"/></literal>
<literal type="string" pos:line="78" pos:column="1">"       is instead very liberal with what it accepts.\n"<pos:position pos:line="78" pos:column="57"/></literal>
<literal type="string" pos:line="79" pos:column="1">"\n"<pos:position pos:line="79" pos:column="5"/></literal>
<literal type="string" pos:line="80" pos:column="1">"       Curl will attempt to re-use connections for multiple file transfers, so\n"<pos:position pos:line="80" pos:column="83"/></literal>
<literal type="string" pos:line="81" pos:column="1">"       that  getting many files from the same server will not do multiple con-\n"<pos:position pos:line="81" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="82" pos:column="3">stdout<pos:position pos:line="82" pos:column="9"/></name></expr></argument>)<pos:position pos:line="82" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="83" pos:column="2">fputs<pos:position pos:line="83" pos:column="7"/></name><argument_list pos:line="83" pos:column="7">(
<argument><expr><literal type="string" pos:line="84" pos:column="1">"       nects / handshakes. This improves speed. Of course this is only done on\n"<pos:position pos:line="84" pos:column="83"/></literal>
<literal type="string" pos:line="85" pos:column="1">"       files  specified  on  a  single command line and cannot be used between\n"<pos:position pos:line="85" pos:column="83"/></literal>
<literal type="string" pos:line="86" pos:column="1">"       separate curl invokes.\n"<pos:position pos:line="86" pos:column="34"/></literal>
<literal type="string" pos:line="87" pos:column="1">"\n"<pos:position pos:line="87" pos:column="5"/></literal>
<literal type="string" pos:line="88" pos:column="1">"PROGRESS METER\n"<pos:position pos:line="88" pos:column="19"/></literal>
<literal type="string" pos:line="89" pos:column="1">"       curl normally displays a progress meter during  operations,  indicating\n"<pos:position pos:line="89" pos:column="83"/></literal>
<literal type="string" pos:line="90" pos:column="1">"       the  amount  of  transferred  data,  transfer speeds and estimated time\n"<pos:position pos:line="90" pos:column="83"/></literal>
<literal type="string" pos:line="91" pos:column="1">"       left, etc.\n"<pos:position pos:line="91" pos:column="22"/></literal>
<literal type="string" pos:line="92" pos:column="1">"\n"<pos:position pos:line="92" pos:column="5"/></literal>
<literal type="string" pos:line="93" pos:column="1">"       curl displays this data to the terminal by default, so  if  you  invoke\n"<pos:position pos:line="93" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="94" pos:column="3">stdout<pos:position pos:line="94" pos:column="9"/></name></expr></argument>)<pos:position pos:line="94" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="95" pos:column="2">fputs<pos:position pos:line="95" pos:column="7"/></name><argument_list pos:line="95" pos:column="7">(
<argument><expr><literal type="string" pos:line="96" pos:column="1">"       curl  to do an operation and it is about to write data to the terminal,\n"<pos:position pos:line="96" pos:column="83"/></literal>
<literal type="string" pos:line="97" pos:column="1">"       it disables the progress meter as otherwise it would mess up the output\n"<pos:position pos:line="97" pos:column="83"/></literal>
<literal type="string" pos:line="98" pos:column="1">"       mixing progress meter and response data.\n"<pos:position pos:line="98" pos:column="52"/></literal>
<literal type="string" pos:line="99" pos:column="1">"\n"<pos:position pos:line="99" pos:column="5"/></literal>
<literal type="string" pos:line="100" pos:column="1">"       If you want a progress meter for HTTP POST or PUT requests, you need to\n"<pos:position pos:line="100" pos:column="83"/></literal>
<literal type="string" pos:line="101" pos:column="1">"       redirect the response output to a file, using shell  redirect  (&gt;),  -o\n"<pos:position pos:line="101" pos:column="86"/></literal>
<literal type="string" pos:line="102" pos:column="1">"       [file] or similar.\n"<pos:position pos:line="102" pos:column="30"/></literal>
<literal type="string" pos:line="103" pos:column="1">"\n"<pos:position pos:line="103" pos:column="5"/></literal>
<literal type="string" pos:line="104" pos:column="1">"       It  is not the same case for FTP upload as that operation does not spit\n"<pos:position pos:line="104" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="105" pos:column="3">stdout<pos:position pos:line="105" pos:column="9"/></name></expr></argument>)<pos:position pos:line="105" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="106" pos:column="2">fputs<pos:position pos:line="106" pos:column="7"/></name><argument_list pos:line="106" pos:column="7">(
<argument><expr><literal type="string" pos:line="107" pos:column="1">"       out any response data to the terminal.\n"<pos:position pos:line="107" pos:column="50"/></literal>
<literal type="string" pos:line="108" pos:column="1">"\n"<pos:position pos:line="108" pos:column="5"/></literal>
<literal type="string" pos:line="109" pos:column="1">"       If you prefer a progress \"bar\" instead of the regular meter, -# is your\n"<pos:position pos:line="109" pos:column="85"/></literal>
<literal type="string" pos:line="110" pos:column="1">"       friend.\n"<pos:position pos:line="110" pos:column="19"/></literal>
<literal type="string" pos:line="111" pos:column="1">"OPTIONS\n"<pos:position pos:line="111" pos:column="12"/></literal>
<literal type="string" pos:line="112" pos:column="1">"       In general, all boolean options are enabled with --option and yet again\n"<pos:position pos:line="112" pos:column="83"/></literal>
<literal type="string" pos:line="113" pos:column="1">"       disabled with --no-option. That is, you use the exact same option  name\n"<pos:position pos:line="113" pos:column="83"/></literal>
<literal type="string" pos:line="114" pos:column="1">"       but prefix it with \"no-\". However, in this list we mostly only list and\n"<pos:position pos:line="114" pos:column="85"/></literal>
<literal type="string" pos:line="115" pos:column="1">"       show the --option version of them. (This concept with --no options  was\n"<pos:position pos:line="115" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="116" pos:column="3">stdout<pos:position pos:line="116" pos:column="9"/></name></expr></argument>)<pos:position pos:line="116" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="117" pos:column="2">fputs<pos:position pos:line="117" pos:column="7"/></name><argument_list pos:line="117" pos:column="7">(
<argument><expr><literal type="string" pos:line="118" pos:column="1">"       added  in  7.19.0.  Previously  most  options  were  toggled  on/off on\n"<pos:position pos:line="118" pos:column="83"/></literal>
<literal type="string" pos:line="119" pos:column="1">"       repeated use of the same command line option.)\n"<pos:position pos:line="119" pos:column="58"/></literal>
<literal type="string" pos:line="120" pos:column="1">"\n"<pos:position pos:line="120" pos:column="5"/></literal>
<literal type="string" pos:line="121" pos:column="1">"       -#, --progress-bar\n"<pos:position pos:line="121" pos:column="30"/></literal>
<literal type="string" pos:line="122" pos:column="1">"              Make curl display progress as a simple progress bar  instead  of\n"<pos:position pos:line="122" pos:column="83"/></literal>
<literal type="string" pos:line="123" pos:column="1">"              the standard, more informational, meter.\n"<pos:position pos:line="123" pos:column="59"/></literal>
<literal type="string" pos:line="124" pos:column="1">"\n"<pos:position pos:line="124" pos:column="5"/></literal>
<literal type="string" pos:line="125" pos:column="1">"       -0, --http1.0\n"<pos:position pos:line="125" pos:column="25"/></literal>
<literal type="string" pos:line="126" pos:column="1">"              (HTTP)  Forces curl to issue its requests using HTTP 1.0 instead\n"<pos:position pos:line="126" pos:column="83"/></literal>
<literal type="string" pos:line="127" pos:column="1">"              of using its internally preferred: HTTP 1.1.\n"<pos:position pos:line="127" pos:column="63"/></literal>
<literal type="string" pos:line="128" pos:column="1">"\n"<pos:position pos:line="128" pos:column="5"/></literal>
<literal type="string" pos:line="129" pos:column="1">"       -1, --tlsv1\n"<pos:position pos:line="129" pos:column="23"/></literal></expr></argument>
, <argument><expr><name pos:line="130" pos:column="3">stdout<pos:position pos:line="130" pos:column="9"/></name></expr></argument>)<pos:position pos:line="130" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="131" pos:column="2">fputs<pos:position pos:line="131" pos:column="7"/></name><argument_list pos:line="131" pos:column="7">(
<argument><expr><literal type="string" pos:line="132" pos:column="1">"              (SSL) Forces curl to use TLS version 1 when negotiating  with  a\n"<pos:position pos:line="132" pos:column="83"/></literal>
<literal type="string" pos:line="133" pos:column="1">"              remote TLS server.\n"<pos:position pos:line="133" pos:column="37"/></literal>
<literal type="string" pos:line="134" pos:column="1">"\n"<pos:position pos:line="134" pos:column="5"/></literal>
<literal type="string" pos:line="135" pos:column="1">"       -2, --sslv2\n"<pos:position pos:line="135" pos:column="23"/></literal>
<literal type="string" pos:line="136" pos:column="1">"              (SSL)  Forces  curl to use SSL version 2 when negotiating with a\n"<pos:position pos:line="136" pos:column="83"/></literal>
<literal type="string" pos:line="137" pos:column="1">"              remote SSL server.\n"<pos:position pos:line="137" pos:column="37"/></literal>
<literal type="string" pos:line="138" pos:column="1">"\n"<pos:position pos:line="138" pos:column="5"/></literal>
<literal type="string" pos:line="139" pos:column="1">"       -3, --sslv3\n"<pos:position pos:line="139" pos:column="23"/></literal>
<literal type="string" pos:line="140" pos:column="1">"              (SSL) Forces curl to use SSL version 3 when negotiating  with  a\n"<pos:position pos:line="140" pos:column="83"/></literal>
<literal type="string" pos:line="141" pos:column="1">"              remote SSL server.\n"<pos:position pos:line="141" pos:column="37"/></literal>
<literal type="string" pos:line="142" pos:column="1">"\n"<pos:position pos:line="142" pos:column="5"/></literal>
<literal type="string" pos:line="143" pos:column="1">"       -4, --ipv4\n"<pos:position pos:line="143" pos:column="22"/></literal>
<literal type="string" pos:line="144" pos:column="1">"              If  libcurl  is  capable  of resolving an address to multiple IP\n"<pos:position pos:line="144" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="145" pos:column="3">stdout<pos:position pos:line="145" pos:column="9"/></name></expr></argument>)<pos:position pos:line="145" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="146" pos:column="2">fputs<pos:position pos:line="146" pos:column="7"/></name><argument_list pos:line="146" pos:column="7">(
<argument><expr><literal type="string" pos:line="147" pos:column="1">"              versions (which it is if it is IPv6-capable), this option  tells\n"<pos:position pos:line="147" pos:column="83"/></literal>
<literal type="string" pos:line="148" pos:column="1">"              libcurl to resolve names to IPv4 addresses only.\n"<pos:position pos:line="148" pos:column="67"/></literal>
<literal type="string" pos:line="149" pos:column="1">"\n"<pos:position pos:line="149" pos:column="5"/></literal>
<literal type="string" pos:line="150" pos:column="1">"       -6, --ipv6\n"<pos:position pos:line="150" pos:column="22"/></literal>
<literal type="string" pos:line="151" pos:column="1">"              If  libcurl  is  capable  of resolving an address to multiple IP\n"<pos:position pos:line="151" pos:column="83"/></literal>
<literal type="string" pos:line="152" pos:column="1">"              versions (which it is if it is IPv6-capable), this option  tells\n"<pos:position pos:line="152" pos:column="83"/></literal>
<literal type="string" pos:line="153" pos:column="1">"              libcurl  to  resolve names to IPv6 addresses only.  default sta-\n"<pos:position pos:line="153" pos:column="83"/></literal>
<literal type="string" pos:line="154" pos:column="1">"              tistics.\n"<pos:position pos:line="154" pos:column="27"/></literal>
<literal type="string" pos:line="155" pos:column="1">"\n"<pos:position pos:line="155" pos:column="5"/></literal>
<literal type="string" pos:line="156" pos:column="1">"       -a, --append\n"<pos:position pos:line="156" pos:column="24"/></literal></expr></argument>
, <argument><expr><name pos:line="157" pos:column="3">stdout<pos:position pos:line="157" pos:column="9"/></name></expr></argument>)<pos:position pos:line="157" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="158" pos:column="2">fputs<pos:position pos:line="158" pos:column="7"/></name><argument_list pos:line="158" pos:column="7">(
<argument><expr><literal type="string" pos:line="159" pos:column="1">"              (FTP/SFTP) When used in an upload, this will tell curl to append\n"<pos:position pos:line="159" pos:column="83"/></literal>
<literal type="string" pos:line="160" pos:column="1">"              to  the  target  file  instead  of  overwriting  it. If the file\n"<pos:position pos:line="160" pos:column="83"/></literal>
<literal type="string" pos:line="161" pos:column="1">"              doesn't exist, it will be  created.   Note  that  this  flag  is\n"<pos:position pos:line="161" pos:column="83"/></literal>
<literal type="string" pos:line="162" pos:column="1">"              ignored by some SSH servers (including OpenSSH).\n"<pos:position pos:line="162" pos:column="67"/></literal>
<literal type="string" pos:line="163" pos:column="1">"\n"<pos:position pos:line="163" pos:column="5"/></literal>
<literal type="string" pos:line="164" pos:column="1">"       -A, --user-agent &lt;agent string&gt;\n"<pos:position pos:line="164" pos:column="49"/></literal>
<literal type="string" pos:line="165" pos:column="1">"              (HTTP) Specify the User-Agent string to send to the HTTP server.\n"<pos:position pos:line="165" pos:column="83"/></literal>
<literal type="string" pos:line="166" pos:column="1">"              Some  badly  done  CGIs  fail  if  this  field  isn't   set   to\n"<pos:position pos:line="166" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="167" pos:column="3">stdout<pos:position pos:line="167" pos:column="9"/></name></expr></argument>)<pos:position pos:line="167" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="168" pos:column="2">fputs<pos:position pos:line="168" pos:column="7"/></name><argument_list pos:line="168" pos:column="7">(
<argument><expr><literal type="string" pos:line="169" pos:column="1">"              \"Mozilla/4.0\".  To  encode  blanks  in  the string, surround the\n"<pos:position pos:line="169" pos:column="85"/></literal>
<literal type="string" pos:line="170" pos:column="1">"              string with single quote marks. This can also be  set  with  the\n"<pos:position pos:line="170" pos:column="83"/></literal>
<literal type="string" pos:line="171" pos:column="1">"              -H, --header option of course.\n"<pos:position pos:line="171" pos:column="49"/></literal>
<literal type="string" pos:line="172" pos:column="1">"\n"<pos:position pos:line="172" pos:column="5"/></literal>
<literal type="string" pos:line="173" pos:column="1">"              If  this  option is set more than once, the last one will be the\n"<pos:position pos:line="173" pos:column="83"/></literal>
<literal type="string" pos:line="174" pos:column="1">"              one that's used.\n"<pos:position pos:line="174" pos:column="35"/></literal>
<literal type="string" pos:line="175" pos:column="1">"\n"<pos:position pos:line="175" pos:column="5"/></literal>
<literal type="string" pos:line="176" pos:column="1">"       --anyauth\n"<pos:position pos:line="176" pos:column="21"/></literal>
<literal type="string" pos:line="177" pos:column="1">"              (HTTP) Tells curl to figure out authentication method by itself,\n"<pos:position pos:line="177" pos:column="83"/></literal>
<literal type="string" pos:line="178" pos:column="1">"              and  use  the most secure one the remote site claims to support.\n"<pos:position pos:line="178" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="179" pos:column="3">stdout<pos:position pos:line="179" pos:column="9"/></name></expr></argument>)<pos:position pos:line="179" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="180" pos:column="2">fputs<pos:position pos:line="180" pos:column="7"/></name><argument_list pos:line="180" pos:column="7">(
<argument><expr><literal type="string" pos:line="181" pos:column="1">"              This is done by first doing a request and checking the response-\n"<pos:position pos:line="181" pos:column="83"/></literal>
<literal type="string" pos:line="182" pos:column="1">"              headers,  thus  possibly  inducing  an extra network round-trip.\n"<pos:position pos:line="182" pos:column="83"/></literal>
<literal type="string" pos:line="183" pos:column="1">"              This is  used  instead  of  setting  a  specific  authentication\n"<pos:position pos:line="183" pos:column="83"/></literal>
<literal type="string" pos:line="184" pos:column="1">"              method,  which  you  can  do with --basic, --digest, --ntlm, and\n"<pos:position pos:line="184" pos:column="83"/></literal>
<literal type="string" pos:line="185" pos:column="1">"              --negotiate.\n"<pos:position pos:line="185" pos:column="31"/></literal>
<literal type="string" pos:line="186" pos:column="1">"\n"<pos:position pos:line="186" pos:column="5"/></literal>
<literal type="string" pos:line="187" pos:column="1">"              Note that using --anyauth is not recommended if you  do  uploads\n"<pos:position pos:line="187" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="188" pos:column="3">stdout<pos:position pos:line="188" pos:column="9"/></name></expr></argument>)<pos:position pos:line="188" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="189" pos:column="2">fputs<pos:position pos:line="189" pos:column="7"/></name><argument_list pos:line="189" pos:column="7">(
<argument><expr><literal type="string" pos:line="190" pos:column="1">"              from  stdin, since it may require data to be sent twice and then\n"<pos:position pos:line="190" pos:column="83"/></literal>
<literal type="string" pos:line="191" pos:column="1">"              the client must be able to rewind. If the need should arise when\n"<pos:position pos:line="191" pos:column="83"/></literal>
<literal type="string" pos:line="192" pos:column="1">"              uploading from stdin, the upload operation will fail.\n"<pos:position pos:line="192" pos:column="72"/></literal>
<literal type="string" pos:line="193" pos:column="1">"\n"<pos:position pos:line="193" pos:column="5"/></literal>
<literal type="string" pos:line="194" pos:column="1">"       -b, --cookie &lt;name=data&gt;\n"<pos:position pos:line="194" pos:column="42"/></literal>
<literal type="string" pos:line="195" pos:column="1">"              (HTTP)  Pass the data to the HTTP server as a cookie. It is sup-\n"<pos:position pos:line="195" pos:column="83"/></literal>
<literal type="string" pos:line="196" pos:column="1">"              posedly the data previously received from the server in a  \"Set-\n"<pos:position pos:line="196" pos:column="84"/></literal>
<literal type="string" pos:line="197" pos:column="1">"              Cookie:\"  line.  The data should be in the format \"NAME1=VALUE1;\n"<pos:position pos:line="197" pos:column="85"/></literal></expr></argument>
, <argument><expr><name pos:line="198" pos:column="3">stdout<pos:position pos:line="198" pos:column="9"/></name></expr></argument>)<pos:position pos:line="198" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="199" pos:column="2">fputs<pos:position pos:line="199" pos:column="7"/></name><argument_list pos:line="199" pos:column="7">(
<argument><expr><literal type="string" pos:line="200" pos:column="1">"              NAME2=VALUE2\".\n"<pos:position pos:line="200" pos:column="34"/></literal>
<literal type="string" pos:line="201" pos:column="1">"\n"<pos:position pos:line="201" pos:column="5"/></literal>
<literal type="string" pos:line="202" pos:column="1">"              If no '=' symbol is used in the line, it is treated as  a  file-\n"<pos:position pos:line="202" pos:column="83"/></literal>
<literal type="string" pos:line="203" pos:column="1">"              name  to  use to read previously stored cookie lines from, which\n"<pos:position pos:line="203" pos:column="83"/></literal>
<literal type="string" pos:line="204" pos:column="1">"              should be used in this session if they match. Using this  method\n"<pos:position pos:line="204" pos:column="83"/></literal>
<literal type="string" pos:line="205" pos:column="1">"              also  activates  the \"cookie parser\" which will make curl record\n"<pos:position pos:line="205" pos:column="85"/></literal>
<literal type="string" pos:line="206" pos:column="1">"              incoming cookies too, which may be handy if you're using this in\n"<pos:position pos:line="206" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="207" pos:column="3">stdout<pos:position pos:line="207" pos:column="9"/></name></expr></argument>)<pos:position pos:line="207" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="208" pos:column="2">fputs<pos:position pos:line="208" pos:column="7"/></name><argument_list pos:line="208" pos:column="7">(
<argument><expr><literal type="string" pos:line="209" pos:column="1">"              combination  with  the -L, --location option. The file format of\n"<pos:position pos:line="209" pos:column="83"/></literal>
<literal type="string" pos:line="210" pos:column="1">"              the file to read cookies from should be plain  HTTP  headers  or\n"<pos:position pos:line="210" pos:column="83"/></literal>
<literal type="string" pos:line="211" pos:column="1">"              the Netscape/Mozilla cookie file format.\n"<pos:position pos:line="211" pos:column="59"/></literal>
<literal type="string" pos:line="212" pos:column="1">"\n"<pos:position pos:line="212" pos:column="5"/></literal>
<literal type="string" pos:line="213" pos:column="1">"              NOTE  that  the file specified with -b, --cookie is only used as\n"<pos:position pos:line="213" pos:column="83"/></literal>
<literal type="string" pos:line="214" pos:column="1">"              input. No cookies will be stored in the file. To store  cookies,\n"<pos:position pos:line="214" pos:column="83"/></literal>
<literal type="string" pos:line="215" pos:column="1">"              use  the -c, --cookie-jar option or you could even save the HTTP\n"<pos:position pos:line="215" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="216" pos:column="3">stdout<pos:position pos:line="216" pos:column="9"/></name></expr></argument>)<pos:position pos:line="216" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="217" pos:column="2">fputs<pos:position pos:line="217" pos:column="7"/></name><argument_list pos:line="217" pos:column="7">(
<argument><expr><literal type="string" pos:line="218" pos:column="1">"              headers to a file using -D, --dump-header!\n"<pos:position pos:line="218" pos:column="61"/></literal>
<literal type="string" pos:line="219" pos:column="1">"\n"<pos:position pos:line="219" pos:column="5"/></literal>
<literal type="string" pos:line="220" pos:column="1">"              If this option is set more than once, the last one will  be  the\n"<pos:position pos:line="220" pos:column="83"/></literal>
<literal type="string" pos:line="221" pos:column="1">"              one that's used.\n"<pos:position pos:line="221" pos:column="35"/></literal>
<literal type="string" pos:line="222" pos:column="1">"\n"<pos:position pos:line="222" pos:column="5"/></literal>
<literal type="string" pos:line="223" pos:column="1">"       -B, --use-ascii\n"<pos:position pos:line="223" pos:column="27"/></literal>
<literal type="string" pos:line="224" pos:column="1">"              Enable  ASCII transfer when using FTP or LDAP. For FTP, this can\n"<pos:position pos:line="224" pos:column="83"/></literal>
<literal type="string" pos:line="225" pos:column="1">"              also be enforced by using an URL that ends with \";type=A\".  This\n"<pos:position pos:line="225" pos:column="85"/></literal>
<literal type="string" pos:line="226" pos:column="1">"              option  causes  data sent to stdout to be in text mode for win32\n"<pos:position pos:line="226" pos:column="83"/></literal>
<literal type="string" pos:line="227" pos:column="1">"              systems.\n"<pos:position pos:line="227" pos:column="27"/></literal>
<literal type="string" pos:line="228" pos:column="1">"\n"<pos:position pos:line="228" pos:column="5"/></literal>
<literal type="string" pos:line="229" pos:column="1">"       --basic\n"<pos:position pos:line="229" pos:column="19"/></literal></expr></argument>
, <argument><expr><name pos:line="230" pos:column="3">stdout<pos:position pos:line="230" pos:column="9"/></name></expr></argument>)<pos:position pos:line="230" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="231" pos:column="2">fputs<pos:position pos:line="231" pos:column="7"/></name><argument_list pos:line="231" pos:column="7">(
<argument><expr><literal type="string" pos:line="232" pos:column="1">"              (HTTP) Tells curl to use HTTP Basic authentication. This is  the\n"<pos:position pos:line="232" pos:column="83"/></literal>
<literal type="string" pos:line="233" pos:column="1">"              default  and this option is usually pointless, unless you use it\n"<pos:position pos:line="233" pos:column="83"/></literal>
<literal type="string" pos:line="234" pos:column="1">"              to override a  previously  set  option  that  sets  a  different\n"<pos:position pos:line="234" pos:column="83"/></literal>
<literal type="string" pos:line="235" pos:column="1">"              authentication  method  (such  as --ntlm, --digest, or --negoti-\n"<pos:position pos:line="235" pos:column="83"/></literal>
<literal type="string" pos:line="236" pos:column="1">"              ate).\n"<pos:position pos:line="236" pos:column="24"/></literal>
<literal type="string" pos:line="237" pos:column="1">"\n"<pos:position pos:line="237" pos:column="5"/></literal>
<literal type="string" pos:line="238" pos:column="1">"       -c, --cookie-jar &lt;file name&gt;\n"<pos:position pos:line="238" pos:column="46"/></literal>
<literal type="string" pos:line="239" pos:column="1">"              Specify to which file you want curl to write all cookies after a\n"<pos:position pos:line="239" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="240" pos:column="3">stdout<pos:position pos:line="240" pos:column="9"/></name></expr></argument>)<pos:position pos:line="240" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="241" pos:column="2">fputs<pos:position pos:line="241" pos:column="7"/></name><argument_list pos:line="241" pos:column="7">(
<argument><expr><literal type="string" pos:line="242" pos:column="1">"              completed  operation.  Curl  writes  all cookies previously read\n"<pos:position pos:line="242" pos:column="83"/></literal>
<literal type="string" pos:line="243" pos:column="1">"              from a specified file as  well  as  all  cookies  received  from\n"<pos:position pos:line="243" pos:column="83"/></literal>
<literal type="string" pos:line="244" pos:column="1">"              remote server(s). If no cookies are known, no file will be writ-\n"<pos:position pos:line="244" pos:column="83"/></literal>
<literal type="string" pos:line="245" pos:column="1">"              ten. The file will be written using  the  Netscape  cookie  file\n"<pos:position pos:line="245" pos:column="83"/></literal>
<literal type="string" pos:line="246" pos:column="1">"              format.  If  you  set  the  file name to a single dash, \"-\", the\n"<pos:position pos:line="246" pos:column="85"/></literal>
<literal type="string" pos:line="247" pos:column="1">"              cookies will be written to stdout.\n"<pos:position pos:line="247" pos:column="53"/></literal>
<literal type="string" pos:line="248" pos:column="1">"\n"<pos:position pos:line="248" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="249" pos:column="3">stdout<pos:position pos:line="249" pos:column="9"/></name></expr></argument>)<pos:position pos:line="249" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="250" pos:column="2">fputs<pos:position pos:line="250" pos:column="7"/></name><argument_list pos:line="250" pos:column="7">(
<argument><expr><literal type="string" pos:line="251" pos:column="1">"              This command line option will activate the  cookie  engine  that\n"<pos:position pos:line="251" pos:column="83"/></literal>
<literal type="string" pos:line="252" pos:column="1">"              makes curl record and use cookies. Another way to activate it is\n"<pos:position pos:line="252" pos:column="83"/></literal>
<literal type="string" pos:line="253" pos:column="1">"              to use the -b, --cookie option.\n"<pos:position pos:line="253" pos:column="50"/></literal>
<literal type="string" pos:line="254" pos:column="1">"\n"<pos:position pos:line="254" pos:column="5"/></literal>
<literal type="string" pos:line="255" pos:column="1">"              If the cookie jar can't be created or written to, the whole curl\n"<pos:position pos:line="255" pos:column="83"/></literal>
<literal type="string" pos:line="256" pos:column="1">"              operation  won't  fail or even report an error clearly. Using -v\n"<pos:position pos:line="256" pos:column="83"/></literal>
<literal type="string" pos:line="257" pos:column="1">"              will get a warning displayed, but that is the only visible feed-\n"<pos:position pos:line="257" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="258" pos:column="3">stdout<pos:position pos:line="258" pos:column="9"/></name></expr></argument>)<pos:position pos:line="258" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="259" pos:column="2">fputs<pos:position pos:line="259" pos:column="7"/></name><argument_list pos:line="259" pos:column="7">(
<argument><expr><literal type="string" pos:line="260" pos:column="1">"              back you get about this possibly lethal situation.\n"<pos:position pos:line="260" pos:column="69"/></literal>
<literal type="string" pos:line="261" pos:column="1">"\n"<pos:position pos:line="261" pos:column="5"/></literal>
<literal type="string" pos:line="262" pos:column="1">"              If  this  option  is used several times, the last specified file\n"<pos:position pos:line="262" pos:column="83"/></literal>
<literal type="string" pos:line="263" pos:column="1">"              name will be used.\n"<pos:position pos:line="263" pos:column="37"/></literal>
<literal type="string" pos:line="264" pos:column="1">"\n"<pos:position pos:line="264" pos:column="5"/></literal>
<literal type="string" pos:line="265" pos:column="1">"       -C, --continue-at &lt;offset&gt;\n"<pos:position pos:line="265" pos:column="44"/></literal>
<literal type="string" pos:line="266" pos:column="1">"              Continue/Resume a previous file transfer at  the  given  offset.\n"<pos:position pos:line="266" pos:column="83"/></literal>
<literal type="string" pos:line="267" pos:column="1">"              The  given  offset  is  the  exact  number of bytes that will be\n"<pos:position pos:line="267" pos:column="83"/></literal>
<literal type="string" pos:line="268" pos:column="1">"              skipped, counting from the beginning of the source  file  before\n"<pos:position pos:line="268" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="269" pos:column="3">stdout<pos:position pos:line="269" pos:column="9"/></name></expr></argument>)<pos:position pos:line="269" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="270" pos:column="2">fputs<pos:position pos:line="270" pos:column="7"/></name><argument_list pos:line="270" pos:column="7">(
<argument><expr><literal type="string" pos:line="271" pos:column="1">"              it is transferred to the destination.  If used with uploads, the\n"<pos:position pos:line="271" pos:column="83"/></literal>
<literal type="string" pos:line="272" pos:column="1">"              FTP server command SIZE will not be used by curl.\n"<pos:position pos:line="272" pos:column="68"/></literal>
<literal type="string" pos:line="273" pos:column="1">"\n"<pos:position pos:line="273" pos:column="5"/></literal>
<literal type="string" pos:line="274" pos:column="1">"              Use \"-C -\" to tell curl to automatically find out  where/how  to\n"<pos:position pos:line="274" pos:column="85"/></literal>
<literal type="string" pos:line="275" pos:column="1">"              resume  the  transfer. It then uses the given output/input files\n"<pos:position pos:line="275" pos:column="83"/></literal>
<literal type="string" pos:line="276" pos:column="1">"              to figure that out.\n"<pos:position pos:line="276" pos:column="38"/></literal>
<literal type="string" pos:line="277" pos:column="1">"\n"<pos:position pos:line="277" pos:column="5"/></literal>
<literal type="string" pos:line="278" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="278" pos:column="83"/></literal>
<literal type="string" pos:line="279" pos:column="1">"\n"<pos:position pos:line="279" pos:column="5"/></literal>
<literal type="string" pos:line="280" pos:column="1">"       --ciphers &lt;list of ciphers&gt;\n"<pos:position pos:line="280" pos:column="45"/></literal></expr></argument>
, <argument><expr><name pos:line="281" pos:column="3">stdout<pos:position pos:line="281" pos:column="9"/></name></expr></argument>)<pos:position pos:line="281" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="281" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="282" pos:column="2">fputs<pos:position pos:line="282" pos:column="7"/></name><argument_list pos:line="282" pos:column="7">(
<argument><expr><literal type="string" pos:line="283" pos:column="1">"              (SSL) Specifies which ciphers to use in the connection. The list\n"<pos:position pos:line="283" pos:column="83"/></literal>
<literal type="string" pos:line="284" pos:column="1">"              of  ciphers  must  specify  valid ciphers. Read up on SSL cipher\n"<pos:position pos:line="284" pos:column="83"/></literal>
<literal type="string" pos:line="285" pos:column="1">"              list          details           on           this           URL:\n"<pos:position pos:line="285" pos:column="83"/></literal>
<literal type="string" pos:line="286" pos:column="1">"              http://www.openssl.org/docs/apps/ciphers.html\n"<pos:position pos:line="286" pos:column="64"/></literal>
<literal type="string" pos:line="287" pos:column="1">"\n"<pos:position pos:line="287" pos:column="5"/></literal>
<literal type="string" pos:line="288" pos:column="1">"              NSS  ciphers  are  done differently than OpenSSL and GnuTLS. The\n"<pos:position pos:line="288" pos:column="83"/></literal>
<literal type="string" pos:line="289" pos:column="1">"              full list of NSS ciphers is in the NSSCipherSuite entry at  this\n"<pos:position pos:line="289" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="290" pos:column="3">stdout<pos:position pos:line="290" pos:column="9"/></name></expr></argument>)<pos:position pos:line="290" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="291" pos:column="2">fputs<pos:position pos:line="291" pos:column="7"/></name><argument_list pos:line="291" pos:column="7">(
<argument><expr><literal type="string" pos:line="292" pos:column="1">"              URL: http://directory.fedora.redhat.com/docs/mod_nss.html#Direc-\n"<pos:position pos:line="292" pos:column="83"/></literal>
<literal type="string" pos:line="293" pos:column="1">"              tives\n"<pos:position pos:line="293" pos:column="24"/></literal>
<literal type="string" pos:line="294" pos:column="1">"\n"<pos:position pos:line="294" pos:column="5"/></literal>
<literal type="string" pos:line="295" pos:column="1">"              If this option is used several times, the last one will override\n"<pos:position pos:line="295" pos:column="83"/></literal>
<literal type="string" pos:line="296" pos:column="1">"              the others.\n"<pos:position pos:line="296" pos:column="30"/></literal>
<literal type="string" pos:line="297" pos:column="1">"\n"<pos:position pos:line="297" pos:column="5"/></literal>
<literal type="string" pos:line="298" pos:column="1">"       --compressed\n"<pos:position pos:line="298" pos:column="24"/></literal>
<literal type="string" pos:line="299" pos:column="1">"              (HTTP) Request a compressed response using one of the algorithms\n"<pos:position pos:line="299" pos:column="83"/></literal>
<literal type="string" pos:line="300" pos:column="1">"              libcurl supports, and save the uncompressed document.   If  this\n"<pos:position pos:line="300" pos:column="83"/></literal>
<literal type="string" pos:line="301" pos:column="1">"              option  is  used  and  the server sends an unsupported encoding,\n"<pos:position pos:line="301" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="302" pos:column="3">stdout<pos:position pos:line="302" pos:column="9"/></name></expr></argument>)<pos:position pos:line="302" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="303" pos:column="2">fputs<pos:position pos:line="303" pos:column="7"/></name><argument_list pos:line="303" pos:column="7">(
<argument><expr><literal type="string" pos:line="304" pos:column="1">"              curl will report an error.\n"<pos:position pos:line="304" pos:column="45"/></literal>
<literal type="string" pos:line="305" pos:column="1">"\n"<pos:position pos:line="305" pos:column="5"/></literal>
<literal type="string" pos:line="306" pos:column="1">"       --connect-timeout &lt;seconds&gt;\n"<pos:position pos:line="306" pos:column="45"/></literal>
<literal type="string" pos:line="307" pos:column="1">"              Maximum time in seconds that you allow  the  connection  to  the\n"<pos:position pos:line="307" pos:column="83"/></literal>
<literal type="string" pos:line="308" pos:column="1">"              server  to  take.   This  only limits the connection phase, once\n"<pos:position pos:line="308" pos:column="83"/></literal>
<literal type="string" pos:line="309" pos:column="1">"              curl has connected this option is of no more use. See  also  the\n"<pos:position pos:line="309" pos:column="83"/></literal>
<literal type="string" pos:line="310" pos:column="1">"              -m, --max-time option.\n"<pos:position pos:line="310" pos:column="41"/></literal>
<literal type="string" pos:line="311" pos:column="1">"\n"<pos:position pos:line="311" pos:column="5"/></literal>
<literal type="string" pos:line="312" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="312" pos:column="83"/></literal>
<literal type="string" pos:line="313" pos:column="1">"\n"<pos:position pos:line="313" pos:column="5"/></literal>
<literal type="string" pos:line="314" pos:column="1">"       --create-dirs\n"<pos:position pos:line="314" pos:column="25"/></literal></expr></argument>
, <argument><expr><name pos:line="315" pos:column="3">stdout<pos:position pos:line="315" pos:column="9"/></name></expr></argument>)<pos:position pos:line="315" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="316" pos:column="2">fputs<pos:position pos:line="316" pos:column="7"/></name><argument_list pos:line="316" pos:column="7">(
<argument><expr><literal type="string" pos:line="317" pos:column="1">"              When  used  in  conjunction with the -o option, curl will create\n"<pos:position pos:line="317" pos:column="83"/></literal>
<literal type="string" pos:line="318" pos:column="1">"              the necessary local directory hierarchy as needed.  This  option\n"<pos:position pos:line="318" pos:column="83"/></literal>
<literal type="string" pos:line="319" pos:column="1">"              creates  the dirs mentioned with the -o option, nothing else. If\n"<pos:position pos:line="319" pos:column="83"/></literal>
<literal type="string" pos:line="320" pos:column="1">"              the -o file name uses no dir or if the dirs it mentions  already\n"<pos:position pos:line="320" pos:column="83"/></literal>
<literal type="string" pos:line="321" pos:column="1">"              exist, no dir will be created.\n"<pos:position pos:line="321" pos:column="49"/></literal>
<literal type="string" pos:line="322" pos:column="1">"\n"<pos:position pos:line="322" pos:column="5"/></literal>
<literal type="string" pos:line="323" pos:column="1">"              To  create remote directories when using FTP or SFTP, try --ftp-\n"<pos:position pos:line="323" pos:column="83"/></literal>
<literal type="string" pos:line="324" pos:column="1">"              create-dirs.\n"<pos:position pos:line="324" pos:column="31"/></literal>
<literal type="string" pos:line="325" pos:column="1">"\n"<pos:position pos:line="325" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="326" pos:column="3">stdout<pos:position pos:line="326" pos:column="9"/></name></expr></argument>)<pos:position pos:line="326" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="326" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="327" pos:column="2">fputs<pos:position pos:line="327" pos:column="7"/></name><argument_list pos:line="327" pos:column="7">(
<argument><expr><literal type="string" pos:line="328" pos:column="1">"       --crlf (FTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).\n"<pos:position pos:line="328" pos:column="79"/></literal>
<literal type="string" pos:line="329" pos:column="1">"\n"<pos:position pos:line="329" pos:column="5"/></literal>
<literal type="string" pos:line="330" pos:column="1">"       --crlfile &lt;file&gt;\n"<pos:position pos:line="330" pos:column="34"/></literal>
<literal type="string" pos:line="331" pos:column="1">"              (HTTPS/FTPS) Provide a file using PEM format with a  Certificate\n"<pos:position pos:line="331" pos:column="83"/></literal>
<literal type="string" pos:line="332" pos:column="1">"              Revocation  List  that may specify peer certificates that are to\n"<pos:position pos:line="332" pos:column="83"/></literal>
<literal type="string" pos:line="333" pos:column="1">"              be considered revoked.\n"<pos:position pos:line="333" pos:column="41"/></literal>
<literal type="string" pos:line="334" pos:column="1">"\n"<pos:position pos:line="334" pos:column="5"/></literal>
<literal type="string" pos:line="335" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="335" pos:column="83"/></literal>
<literal type="string" pos:line="336" pos:column="1">"\n"<pos:position pos:line="336" pos:column="5"/></literal>
<literal type="string" pos:line="337" pos:column="1">"              (Added in 7.19.7)\n"<pos:position pos:line="337" pos:column="36"/></literal>
<literal type="string" pos:line="338" pos:column="1">"       -d, --data &lt;data&gt;\n"<pos:position pos:line="338" pos:column="35"/></literal></expr></argument>
, <argument><expr><name pos:line="339" pos:column="3">stdout<pos:position pos:line="339" pos:column="9"/></name></expr></argument>)<pos:position pos:line="339" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="339" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="340" pos:column="2">fputs<pos:position pos:line="340" pos:column="7"/></name><argument_list pos:line="340" pos:column="7">(
<argument><expr><literal type="string" pos:line="341" pos:column="1">"              (HTTP) Sends the specified data in a POST request  to  the  HTTP\n"<pos:position pos:line="341" pos:column="83"/></literal>
<literal type="string" pos:line="342" pos:column="1">"              server,  in  the  same  way  that a browser does when a user has\n"<pos:position pos:line="342" pos:column="83"/></literal>
<literal type="string" pos:line="343" pos:column="1">"              filled in an HTML form and presses the submit button. This  will\n"<pos:position pos:line="343" pos:column="83"/></literal>
<literal type="string" pos:line="344" pos:column="1">"              cause curl to pass the data to the server using the content-type\n"<pos:position pos:line="344" pos:column="83"/></literal>
<literal type="string" pos:line="345" pos:column="1">"              application/x-www-form-urlencoded.  Compare to -F, --form.\n"<pos:position pos:line="345" pos:column="77"/></literal>
<literal type="string" pos:line="346" pos:column="1">"\n"<pos:position pos:line="346" pos:column="5"/></literal>
<literal type="string" pos:line="347" pos:column="1">"              -d, --data is the same as  --data-ascii.  To  post  data  purely\n"<pos:position pos:line="347" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="348" pos:column="3">stdout<pos:position pos:line="348" pos:column="9"/></name></expr></argument>)<pos:position pos:line="348" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="348" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="349" pos:column="2">fputs<pos:position pos:line="349" pos:column="7"/></name><argument_list pos:line="349" pos:column="7">(
<argument><expr><literal type="string" pos:line="350" pos:column="1">"              binary, you should instead use the --data-binary option. To URL-\n"<pos:position pos:line="350" pos:column="83"/></literal>
<literal type="string" pos:line="351" pos:column="1">"              encode the value of a form field you may use --data-urlencode.\n"<pos:position pos:line="351" pos:column="81"/></literal>
<literal type="string" pos:line="352" pos:column="1">"\n"<pos:position pos:line="352" pos:column="5"/></literal>
<literal type="string" pos:line="353" pos:column="1">"              If any of these options is used more than once on the same  com-\n"<pos:position pos:line="353" pos:column="83"/></literal>
<literal type="string" pos:line="354" pos:column="1">"              mand  line,  the  data  pieces specified will be merged together\n"<pos:position pos:line="354" pos:column="83"/></literal>
<literal type="string" pos:line="355" pos:column="1">"              with a separating  &amp;-symbol.  Thus,  using  '-d  name=daniel  -d\n"<pos:position pos:line="355" pos:column="87"/></literal>
<literal type="string" pos:line="356" pos:column="1">"              skill=lousy'  would  generate  a  post  chunk  that  looks  like\n"<pos:position pos:line="356" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="357" pos:column="3">stdout<pos:position pos:line="357" pos:column="9"/></name></expr></argument>)<pos:position pos:line="357" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="357" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="358" pos:column="2">fputs<pos:position pos:line="358" pos:column="7"/></name><argument_list pos:line="358" pos:column="7">(
<argument><expr><literal type="string" pos:line="359" pos:column="1">"              'name=daniel&amp;skill=lousy'.\n"<pos:position pos:line="359" pos:column="49"/></literal>
<literal type="string" pos:line="360" pos:column="1">"\n"<pos:position pos:line="360" pos:column="5"/></literal>
<literal type="string" pos:line="361" pos:column="1">"              If you start the data with the letter @, the rest  should  be  a\n"<pos:position pos:line="361" pos:column="83"/></literal>
<literal type="string" pos:line="362" pos:column="1">"              file  name  to read the data from, or - if you want curl to read\n"<pos:position pos:line="362" pos:column="83"/></literal>
<literal type="string" pos:line="363" pos:column="1">"              the data from stdin.  The contents of the file must  already  be\n"<pos:position pos:line="363" pos:column="83"/></literal>
<literal type="string" pos:line="364" pos:column="1">"              URL-encoded.  Multiple files can also be specified. Posting data\n"<pos:position pos:line="364" pos:column="83"/></literal>
<literal type="string" pos:line="365" pos:column="1">"              from a file named 'foobar' would thus be done with --data  @foo-\n"<pos:position pos:line="365" pos:column="83"/></literal>
<literal type="string" pos:line="366" pos:column="1">"              bar.\n"<pos:position pos:line="366" pos:column="23"/></literal>
<literal type="string" pos:line="367" pos:column="1">"\n"<pos:position pos:line="367" pos:column="5"/></literal>
<literal type="string" pos:line="368" pos:column="1">"       -D, --dump-header &lt;file&gt;\n"<pos:position pos:line="368" pos:column="42"/></literal></expr></argument>
, <argument><expr><name pos:line="369" pos:column="3">stdout<pos:position pos:line="369" pos:column="9"/></name></expr></argument>)<pos:position pos:line="369" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="369" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="370" pos:column="2">fputs<pos:position pos:line="370" pos:column="7"/></name><argument_list pos:line="370" pos:column="7">(
<argument><expr><literal type="string" pos:line="371" pos:column="1">"              Write the protocol headers to the specified file.\n"<pos:position pos:line="371" pos:column="68"/></literal>
<literal type="string" pos:line="372" pos:column="1">"\n"<pos:position pos:line="372" pos:column="5"/></literal>
<literal type="string" pos:line="373" pos:column="1">"              This  option  is handy to use when you want to store the headers\n"<pos:position pos:line="373" pos:column="83"/></literal>
<literal type="string" pos:line="374" pos:column="1">"              that a HTTP site sends to you. Cookies from  the  headers  could\n"<pos:position pos:line="374" pos:column="83"/></literal>
<literal type="string" pos:line="375" pos:column="1">"              then  be  read  in  a  second  curl  invocation by using the -b,\n"<pos:position pos:line="375" pos:column="83"/></literal>
<literal type="string" pos:line="376" pos:column="1">"              --cookie option! The -c, --cookie-jar option is however a better\n"<pos:position pos:line="376" pos:column="83"/></literal>
<literal type="string" pos:line="377" pos:column="1">"              way to store cookies.\n"<pos:position pos:line="377" pos:column="40"/></literal>
<literal type="string" pos:line="378" pos:column="1">"\n"<pos:position pos:line="378" pos:column="5"/></literal>
<literal type="string" pos:line="379" pos:column="1">"              When  used  in FTP, the FTP server response lines are considered\n"<pos:position pos:line="379" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="380" pos:column="3">stdout<pos:position pos:line="380" pos:column="9"/></name></expr></argument>)<pos:position pos:line="380" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="380" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="381" pos:column="2">fputs<pos:position pos:line="381" pos:column="7"/></name><argument_list pos:line="381" pos:column="7">(
<argument><expr><literal type="string" pos:line="382" pos:column="1">"              being \"headers\" and thus are saved there.\n"<pos:position pos:line="382" pos:column="62"/></literal>
<literal type="string" pos:line="383" pos:column="1">"\n"<pos:position pos:line="383" pos:column="5"/></literal>
<literal type="string" pos:line="384" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="384" pos:column="83"/></literal>
<literal type="string" pos:line="385" pos:column="1">"              IP \"--data-ascii &lt;data&gt;\" See -d, --data.\n"<pos:position pos:line="385" pos:column="67"/></literal>
<literal type="string" pos:line="386" pos:column="1">"\n"<pos:position pos:line="386" pos:column="5"/></literal>
<literal type="string" pos:line="387" pos:column="1">"       --data-binary &lt;data&gt;\n"<pos:position pos:line="387" pos:column="38"/></literal>
<literal type="string" pos:line="388" pos:column="1">"              (HTTP)  This  posts data exactly as specified with no extra pro-\n"<pos:position pos:line="388" pos:column="83"/></literal>
<literal type="string" pos:line="389" pos:column="1">"              cessing whatsoever.\n"<pos:position pos:line="389" pos:column="38"/></literal>
<literal type="string" pos:line="390" pos:column="1">"\n"<pos:position pos:line="390" pos:column="5"/></literal>
<literal type="string" pos:line="391" pos:column="1">"              If you start the data with the letter @, the rest  should  be  a\n"<pos:position pos:line="391" pos:column="83"/></literal>
<literal type="string" pos:line="392" pos:column="1">"              filename.   Data  is  posted in a similar manner as --data-ascii\n"<pos:position pos:line="392" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="393" pos:column="3">stdout<pos:position pos:line="393" pos:column="9"/></name></expr></argument>)<pos:position pos:line="393" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="393" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="394" pos:column="2">fputs<pos:position pos:line="394" pos:column="7"/></name><argument_list pos:line="394" pos:column="7">(
<argument><expr><literal type="string" pos:line="395" pos:column="1">"              does, except that newlines are  preserved  and  conversions  are\n"<pos:position pos:line="395" pos:column="83"/></literal>
<literal type="string" pos:line="396" pos:column="1">"              never done.\n"<pos:position pos:line="396" pos:column="30"/></literal>
<literal type="string" pos:line="397" pos:column="1">"\n"<pos:position pos:line="397" pos:column="5"/></literal>
<literal type="string" pos:line="398" pos:column="1">"              If  this  option  is  used several times, the ones following the\n"<pos:position pos:line="398" pos:column="83"/></literal>
<literal type="string" pos:line="399" pos:column="1">"              first will append data as described in -d, --data.\n"<pos:position pos:line="399" pos:column="69"/></literal>
<literal type="string" pos:line="400" pos:column="1">"\n"<pos:position pos:line="400" pos:column="5"/></literal>
<literal type="string" pos:line="401" pos:column="1">"       --data-urlencode &lt;data&gt;\n"<pos:position pos:line="401" pos:column="41"/></literal>
<literal type="string" pos:line="402" pos:column="1">"              (HTTP) This posts data, similar to the other --data options with\n"<pos:position pos:line="402" pos:column="83"/></literal>
<literal type="string" pos:line="403" pos:column="1">"              the exception that this performs URL-encoding. (Added in 7.18.0)\n"<pos:position pos:line="403" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="404" pos:column="3">stdout<pos:position pos:line="404" pos:column="9"/></name></expr></argument>)<pos:position pos:line="404" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="404" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="405" pos:column="2">fputs<pos:position pos:line="405" pos:column="7"/></name><argument_list pos:line="405" pos:column="7">(
<argument><expr><literal type="string" pos:line="406" pos:column="1">"              To  be  CGI-compliant,  the &lt;data&gt; part should begin with a name\n"<pos:position pos:line="406" pos:column="89"/></literal>
<literal type="string" pos:line="407" pos:column="1">"              followed by a separator and a content specification. The  &lt;data&gt;\n"<pos:position pos:line="407" pos:column="89"/></literal>
<literal type="string" pos:line="408" pos:column="1">"              part can be passed to curl using one of the following syntaxes:\n"<pos:position pos:line="408" pos:column="82"/></literal>
<literal type="string" pos:line="409" pos:column="1">"\n"<pos:position pos:line="409" pos:column="5"/></literal>
<literal type="string" pos:line="410" pos:column="1">"              content\n"<pos:position pos:line="410" pos:column="26"/></literal>
<literal type="string" pos:line="411" pos:column="1">"                     This  will make curl URL-encode the content and pass that\n"<pos:position pos:line="411" pos:column="83"/></literal>
<literal type="string" pos:line="412" pos:column="1">"                     on. Just be careful so that the content  doesn't  contain\n"<pos:position pos:line="412" pos:column="83"/></literal>
<literal type="string" pos:line="413" pos:column="1">"                     any  =  or  @  symbols, as that will then make the syntax\n"<pos:position pos:line="413" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="414" pos:column="3">stdout<pos:position pos:line="414" pos:column="9"/></name></expr></argument>)<pos:position pos:line="414" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="414" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="415" pos:column="2">fputs<pos:position pos:line="415" pos:column="7"/></name><argument_list pos:line="415" pos:column="7">(
<argument><expr><literal type="string" pos:line="416" pos:column="1">"                     match one of the other cases below!\n"<pos:position pos:line="416" pos:column="61"/></literal>
<literal type="string" pos:line="417" pos:column="1">"\n"<pos:position pos:line="417" pos:column="5"/></literal>
<literal type="string" pos:line="418" pos:column="1">"              =content\n"<pos:position pos:line="418" pos:column="27"/></literal>
<literal type="string" pos:line="419" pos:column="1">"                     This will make curl URL-encode the content and pass  that\n"<pos:position pos:line="419" pos:column="83"/></literal>
<literal type="string" pos:line="420" pos:column="1">"                     on. The preceding = symbol is not included in the data.\n"<pos:position pos:line="420" pos:column="81"/></literal>
<literal type="string" pos:line="421" pos:column="1">"\n"<pos:position pos:line="421" pos:column="5"/></literal>
<literal type="string" pos:line="422" pos:column="1">"              name=content\n"<pos:position pos:line="422" pos:column="31"/></literal>
<literal type="string" pos:line="423" pos:column="1">"                     This  will make curl URL-encode the content part and pass\n"<pos:position pos:line="423" pos:column="83"/></literal>
<literal type="string" pos:line="424" pos:column="1">"                     that on. Note that the name part is expected to  be  URL-\n"<pos:position pos:line="424" pos:column="83"/></literal>
<literal type="string" pos:line="425" pos:column="1">"                     encoded already.\n"<pos:position pos:line="425" pos:column="42"/></literal>
<literal type="string" pos:line="426" pos:column="1">"\n"<pos:position pos:line="426" pos:column="5"/></literal>
<literal type="string" pos:line="427" pos:column="1">"              @filename\n"<pos:position pos:line="427" pos:column="28"/></literal></expr></argument>
, <argument><expr><name pos:line="428" pos:column="3">stdout<pos:position pos:line="428" pos:column="9"/></name></expr></argument>)<pos:position pos:line="428" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="428" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="429" pos:column="2">fputs<pos:position pos:line="429" pos:column="7"/></name><argument_list pos:line="429" pos:column="7">(
<argument><expr><literal type="string" pos:line="430" pos:column="1">"                     This  will  make  curl  load  data  from  the  given file\n"<pos:position pos:line="430" pos:column="83"/></literal>
<literal type="string" pos:line="431" pos:column="1">"                     (including any newlines), URL-encode that data  and  pass\n"<pos:position pos:line="431" pos:column="83"/></literal>
<literal type="string" pos:line="432" pos:column="1">"                     it on in the POST.\n"<pos:position pos:line="432" pos:column="44"/></literal>
<literal type="string" pos:line="433" pos:column="1">"\n"<pos:position pos:line="433" pos:column="5"/></literal>
<literal type="string" pos:line="434" pos:column="1">"              name@filename\n"<pos:position pos:line="434" pos:column="32"/></literal>
<literal type="string" pos:line="435" pos:column="1">"                     This  will  make  curl  load  data  from  the  given file\n"<pos:position pos:line="435" pos:column="83"/></literal>
<literal type="string" pos:line="436" pos:column="1">"                     (including any newlines), URL-encode that data  and  pass\n"<pos:position pos:line="436" pos:column="83"/></literal>
<literal type="string" pos:line="437" pos:column="1">"                     it  on  in  the  POST.  The  name part gets an equal sign\n"<pos:position pos:line="437" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="438" pos:column="3">stdout<pos:position pos:line="438" pos:column="9"/></name></expr></argument>)<pos:position pos:line="438" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="438" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="439" pos:column="2">fputs<pos:position pos:line="439" pos:column="7"/></name><argument_list pos:line="439" pos:column="7">(
<argument><expr><literal type="string" pos:line="440" pos:column="1">"                     appended, resulting in name=urlencoded-file-content. Note\n"<pos:position pos:line="440" pos:column="83"/></literal>
<literal type="string" pos:line="441" pos:column="1">"                     that the name is expected to be URL-encoded already.\n"<pos:position pos:line="441" pos:column="78"/></literal>
<literal type="string" pos:line="442" pos:column="1">"\n"<pos:position pos:line="442" pos:column="5"/></literal>
<literal type="string" pos:line="443" pos:column="1">"       --delegation LEVEL\n"<pos:position pos:line="443" pos:column="30"/></literal>
<literal type="string" pos:line="444" pos:column="1">"              Set LEVEL to tell the server what it is allowed to delegate when\n"<pos:position pos:line="444" pos:column="83"/></literal>
<literal type="string" pos:line="445" pos:column="1">"              it comes to user credentials. Used with GSS/kerberos.\n"<pos:position pos:line="445" pos:column="72"/></literal>
<literal type="string" pos:line="446" pos:column="1">"\n"<pos:position pos:line="446" pos:column="5"/></literal>
<literal type="string" pos:line="447" pos:column="1">"              none   Don't allow any delegation.\n"<pos:position pos:line="447" pos:column="53"/></literal>
<literal type="string" pos:line="448" pos:column="1">"\n"<pos:position pos:line="448" pos:column="5"/></literal>
<literal type="string" pos:line="449" pos:column="1">"              policy Delegates if and only if the OK-AS-DELEGATE flag  is  set\n"<pos:position pos:line="449" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="450" pos:column="3">stdout<pos:position pos:line="450" pos:column="9"/></name></expr></argument>)<pos:position pos:line="450" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="450" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="451" pos:column="2">fputs<pos:position pos:line="451" pos:column="7"/></name><argument_list pos:line="451" pos:column="7">(
<argument><expr><literal type="string" pos:line="452" pos:column="1">"                     in  the  Kerberos  service  ticket,  which is a matter of\n"<pos:position pos:line="452" pos:column="83"/></literal>
<literal type="string" pos:line="453" pos:column="1">"                     realm policy.\n"<pos:position pos:line="453" pos:column="39"/></literal>
<literal type="string" pos:line="454" pos:column="1">"\n"<pos:position pos:line="454" pos:column="5"/></literal>
<literal type="string" pos:line="455" pos:column="1">"              always Unconditionally allow the server to delegate.\n"<pos:position pos:line="455" pos:column="71"/></literal>
<literal type="string" pos:line="456" pos:column="1">"\n"<pos:position pos:line="456" pos:column="5"/></literal>
<literal type="string" pos:line="457" pos:column="1">"       --digest\n"<pos:position pos:line="457" pos:column="20"/></literal>
<literal type="string" pos:line="458" pos:column="1">"              (HTTP) Enables HTTP Digest authentication. This is a authentica-\n"<pos:position pos:line="458" pos:column="83"/></literal>
<literal type="string" pos:line="459" pos:column="1">"              tion that prevents the password from being sent over the wire in\n"<pos:position pos:line="459" pos:column="83"/></literal>
<literal type="string" pos:line="460" pos:column="1">"              clear text. Use this in combination with the normal  -u,  --user\n"<pos:position pos:line="460" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="461" pos:column="3">stdout<pos:position pos:line="461" pos:column="9"/></name></expr></argument>)<pos:position pos:line="461" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="461" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="462" pos:column="2">fputs<pos:position pos:line="462" pos:column="7"/></name><argument_list pos:line="462" pos:column="7">(
<argument><expr><literal type="string" pos:line="463" pos:column="1">"              option to set user name and password. See also --ntlm, --negoti-\n"<pos:position pos:line="463" pos:column="83"/></literal>
<literal type="string" pos:line="464" pos:column="1">"              ate and --anyauth for related options.\n"<pos:position pos:line="464" pos:column="57"/></literal>
<literal type="string" pos:line="465" pos:column="1">"\n"<pos:position pos:line="465" pos:column="5"/></literal>
<literal type="string" pos:line="466" pos:column="1">"              If this option is used several times, the following  occurrences\n"<pos:position pos:line="466" pos:column="83"/></literal>
<literal type="string" pos:line="467" pos:column="1">"              make no difference.\n"<pos:position pos:line="467" pos:column="38"/></literal>
<literal type="string" pos:line="468" pos:column="1">"\n"<pos:position pos:line="468" pos:column="5"/></literal>
<literal type="string" pos:line="469" pos:column="1">"       --disable-eprt\n"<pos:position pos:line="469" pos:column="26"/></literal>
<literal type="string" pos:line="470" pos:column="1">"              (FTP) Tell curl to disable the use of the EPRT and LPRT commands\n"<pos:position pos:line="470" pos:column="83"/></literal>
<literal type="string" pos:line="471" pos:column="1">"              when doing active FTP transfers. Curl will normally always first\n"<pos:position pos:line="471" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="472" pos:column="3">stdout<pos:position pos:line="472" pos:column="9"/></name></expr></argument>)<pos:position pos:line="472" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="472" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="473" pos:column="2">fputs<pos:position pos:line="473" pos:column="7"/></name><argument_list pos:line="473" pos:column="7">(
<argument><expr><literal type="string" pos:line="474" pos:column="1">"              attempt  to use EPRT, then LPRT before using PORT, but with this\n"<pos:position pos:line="474" pos:column="83"/></literal>
<literal type="string" pos:line="475" pos:column="1">"              option, it will use PORT right away. EPRT and  LPRT  are  exten-\n"<pos:position pos:line="475" pos:column="83"/></literal>
<literal type="string" pos:line="476" pos:column="1">"              sions  to  the  original  FTP  protocol, and may not work on all\n"<pos:position pos:line="476" pos:column="83"/></literal>
<literal type="string" pos:line="477" pos:column="1">"              servers, but they enable more functionality in a better way than\n"<pos:position pos:line="477" pos:column="83"/></literal>
<literal type="string" pos:line="478" pos:column="1">"              the traditional PORT command.\n"<pos:position pos:line="478" pos:column="48"/></literal>
<literal type="string" pos:line="479" pos:column="1">"\n"<pos:position pos:line="479" pos:column="5"/></literal>
<literal type="string" pos:line="480" pos:column="1">"              --eprt can be used to explicitly enable EPRT again and --no-eprt\n"<pos:position pos:line="480" pos:column="83"/></literal>
<literal type="string" pos:line="481" pos:column="1">"              is an alias for --disable-eprt.\n"<pos:position pos:line="481" pos:column="50"/></literal>
<literal type="string" pos:line="482" pos:column="1">"\n"<pos:position pos:line="482" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="483" pos:column="3">stdout<pos:position pos:line="483" pos:column="9"/></name></expr></argument>)<pos:position pos:line="483" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="483" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="484" pos:column="2">fputs<pos:position pos:line="484" pos:column="7"/></name><argument_list pos:line="484" pos:column="7">(
<argument><expr><literal type="string" pos:line="485" pos:column="1">"              Disabling EPRT only changes the active behavior. If you want  to\n"<pos:position pos:line="485" pos:column="83"/></literal>
<literal type="string" pos:line="486" pos:column="1">"              switch  to  passive  mode  you need to not use -P, --ftp-port or\n"<pos:position pos:line="486" pos:column="83"/></literal>
<literal type="string" pos:line="487" pos:column="1">"              force it with --ftp-pasv.\n"<pos:position pos:line="487" pos:column="44"/></literal>
<literal type="string" pos:line="488" pos:column="1">"\n"<pos:position pos:line="488" pos:column="5"/></literal>
<literal type="string" pos:line="489" pos:column="1">"       --disable-epsv\n"<pos:position pos:line="489" pos:column="26"/></literal>
<literal type="string" pos:line="490" pos:column="1">"              (FTP) Tell curl to disable the use  of  the  EPSV  command  when\n"<pos:position pos:line="490" pos:column="83"/></literal>
<literal type="string" pos:line="491" pos:column="1">"              doing  passive  FTP  transfers.  Curl will normally always first\n"<pos:position pos:line="491" pos:column="83"/></literal>
<literal type="string" pos:line="492" pos:column="1">"              attempt to use EPSV before PASV, but with this option,  it  will\n"<pos:position pos:line="492" pos:column="83"/></literal>
<literal type="string" pos:line="493" pos:column="1">"              not try using EPSV.\n"<pos:position pos:line="493" pos:column="38"/></literal>
<literal type="string" pos:line="494" pos:column="1">"\n"<pos:position pos:line="494" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="495" pos:column="3">stdout<pos:position pos:line="495" pos:column="9"/></name></expr></argument>)<pos:position pos:line="495" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="495" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="496" pos:column="2">fputs<pos:position pos:line="496" pos:column="7"/></name><argument_list pos:line="496" pos:column="7">(
<argument><expr><literal type="string" pos:line="497" pos:column="1">"              --epsv can be used to explicitly enable EPSV again and --no-epsv\n"<pos:position pos:line="497" pos:column="83"/></literal>
<literal type="string" pos:line="498" pos:column="1">"              is an alias for --disable-epsv.\n"<pos:position pos:line="498" pos:column="50"/></literal>
<literal type="string" pos:line="499" pos:column="1">"\n"<pos:position pos:line="499" pos:column="5"/></literal>
<literal type="string" pos:line="500" pos:column="1">"              Disabling EPSV only changes the passive behavior. If you want to\n"<pos:position pos:line="500" pos:column="83"/></literal>
<literal type="string" pos:line="501" pos:column="1">"              switch to active mode you need to use -P, --ftp-port.\n"<pos:position pos:line="501" pos:column="72"/></literal>
<literal type="string" pos:line="502" pos:column="1">"\n"<pos:position pos:line="502" pos:column="5"/></literal>
<literal type="string" pos:line="503" pos:column="1">"       -e, --referer &lt;URL&gt;\n"<pos:position pos:line="503" pos:column="37"/></literal>
<literal type="string" pos:line="504" pos:column="1">"              (HTTP)  Sends the \"Referer Page\" information to the HTTP server.\n"<pos:position pos:line="504" pos:column="85"/></literal>
<literal type="string" pos:line="505" pos:column="1">"              This can also be set with the -H, --header flag of course.  When\n"<pos:position pos:line="505" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="506" pos:column="3">stdout<pos:position pos:line="506" pos:column="9"/></name></expr></argument>)<pos:position pos:line="506" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="506" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="507" pos:column="2">fputs<pos:position pos:line="507" pos:column="7"/></name><argument_list pos:line="507" pos:column="7">(
<argument><expr><literal type="string" pos:line="508" pos:column="1">"              used with -L, --location you can append \";auto\" to the --referer\n"<pos:position pos:line="508" pos:column="85"/></literal>
<literal type="string" pos:line="509" pos:column="1">"              URL to make curl automatically set the previous URL when it fol-\n"<pos:position pos:line="509" pos:column="83"/></literal>
<literal type="string" pos:line="510" pos:column="1">"              lows  a  Location: header. The \";auto\" string can be used alone,\n"<pos:position pos:line="510" pos:column="85"/></literal>
<literal type="string" pos:line="511" pos:column="1">"              even if you don't set an initial --referer.\n"<pos:position pos:line="511" pos:column="62"/></literal>
<literal type="string" pos:line="512" pos:column="1">"\n"<pos:position pos:line="512" pos:column="5"/></literal>
<literal type="string" pos:line="513" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="513" pos:column="83"/></literal>
<literal type="string" pos:line="514" pos:column="1">"\n"<pos:position pos:line="514" pos:column="5"/></literal>
<literal type="string" pos:line="515" pos:column="1">"       -E, --cert &lt;certificate[:password]&gt;\n"<pos:position pos:line="515" pos:column="53"/></literal>
<literal type="string" pos:line="516" pos:column="1">"              (SSL) Tells curl to use the specified  client  certificate  file\n"<pos:position pos:line="516" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="517" pos:column="3">stdout<pos:position pos:line="517" pos:column="9"/></name></expr></argument>)<pos:position pos:line="517" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="517" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="518" pos:column="2">fputs<pos:position pos:line="518" pos:column="7"/></name><argument_list pos:line="518" pos:column="7">(
<argument><expr><literal type="string" pos:line="519" pos:column="1">"              when getting a file with HTTPS, FTPS or another SSL-based proto-\n"<pos:position pos:line="519" pos:column="83"/></literal>
<literal type="string" pos:line="520" pos:column="1">"              col. The certificate must be in PEM  format.   If  the  optional\n"<pos:position pos:line="520" pos:column="83"/></literal>
<literal type="string" pos:line="521" pos:column="1">"              password  isn't  specified, it will be queried for on the termi-\n"<pos:position pos:line="521" pos:column="83"/></literal>
<literal type="string" pos:line="522" pos:column="1">"              nal. Note that this option assumes a \"certificate\" file that  is\n"<pos:position pos:line="522" pos:column="85"/></literal>
<literal type="string" pos:line="523" pos:column="1">"              the  private  key  and the private certificate concatenated! See\n"<pos:position pos:line="523" pos:column="83"/></literal>
<literal type="string" pos:line="524" pos:column="1">"              --cert and --key to specify them independently.\n"<pos:position pos:line="524" pos:column="66"/></literal>
<literal type="string" pos:line="525" pos:column="1">"\n"<pos:position pos:line="525" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="526" pos:column="3">stdout<pos:position pos:line="526" pos:column="9"/></name></expr></argument>)<pos:position pos:line="526" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="526" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="527" pos:column="2">fputs<pos:position pos:line="527" pos:column="7"/></name><argument_list pos:line="527" pos:column="7">(
<argument><expr><literal type="string" pos:line="528" pos:column="1">"              If curl is built against the NSS SSL library  then  this  option\n"<pos:position pos:line="528" pos:column="83"/></literal>
<literal type="string" pos:line="529" pos:column="1">"              can  tell curl the nickname of the certificate to use within the\n"<pos:position pos:line="529" pos:column="83"/></literal>
<literal type="string" pos:line="530" pos:column="1">"              NSS database defined by the environment variable SSL_DIR (or  by\n"<pos:position pos:line="530" pos:column="83"/></literal>
<literal type="string" pos:line="531" pos:column="1">"              default  /etc/pki/nssdb).  If  the  NSS PEM PKCS#11 module (lib-\n"<pos:position pos:line="531" pos:column="83"/></literal>
<literal type="string" pos:line="532" pos:column="1">"              nsspem.so) is available then PEM files may  be  loaded.  If  you\n"<pos:position pos:line="532" pos:column="83"/></literal>
<literal type="string" pos:line="533" pos:column="1">"              want to use a file from the current directory, please precede it\n"<pos:position pos:line="533" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="534" pos:column="3">stdout<pos:position pos:line="534" pos:column="9"/></name></expr></argument>)<pos:position pos:line="534" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="534" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="535" pos:column="2">fputs<pos:position pos:line="535" pos:column="7"/></name><argument_list pos:line="535" pos:column="7">(
<argument><expr><literal type="string" pos:line="536" pos:column="1">"              with \"./\" prefix, in order to avoid confusion with a nickname.\n"<pos:position pos:line="536" pos:column="83"/></literal>
<literal type="string" pos:line="537" pos:column="1">"\n"<pos:position pos:line="537" pos:column="5"/></literal>
<literal type="string" pos:line="538" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="538" pos:column="83"/></literal>
<literal type="string" pos:line="539" pos:column="1">"\n"<pos:position pos:line="539" pos:column="5"/></literal>
<literal type="string" pos:line="540" pos:column="1">"       --engine &lt;name&gt;\n"<pos:position pos:line="540" pos:column="33"/></literal>
<literal type="string" pos:line="541" pos:column="1">"              Select the OpenSSL crypto engine to use for  cipher  operations.\n"<pos:position pos:line="541" pos:column="83"/></literal>
<literal type="string" pos:line="542" pos:column="1">"              Use  --engine  list  to  print  a  list  of build-time supported\n"<pos:position pos:line="542" pos:column="83"/></literal>
<literal type="string" pos:line="543" pos:column="1">"              engines. Note that not all (or  none)  of  the  engines  may  be\n"<pos:position pos:line="543" pos:column="83"/></literal>
<literal type="string" pos:line="544" pos:column="1">"              available at run-time.\n"<pos:position pos:line="544" pos:column="41"/></literal>
<literal type="string" pos:line="545" pos:column="1">"\n"<pos:position pos:line="545" pos:column="5"/></literal>
<literal type="string" pos:line="546" pos:column="1">"       --environment\n"<pos:position pos:line="546" pos:column="25"/></literal></expr></argument>
, <argument><expr><name pos:line="547" pos:column="3">stdout<pos:position pos:line="547" pos:column="9"/></name></expr></argument>)<pos:position pos:line="547" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="547" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="548" pos:column="2">fputs<pos:position pos:line="548" pos:column="7"/></name><argument_list pos:line="548" pos:column="7">(
<argument><expr><literal type="string" pos:line="549" pos:column="1">"              (RISC  OS ONLY) Sets a range of environment variables, using the\n"<pos:position pos:line="549" pos:column="83"/></literal>
<literal type="string" pos:line="550" pos:column="1">"              names the -w option supports, to allow easier extraction of use-\n"<pos:position pos:line="550" pos:column="83"/></literal>
<literal type="string" pos:line="551" pos:column="1">"              ful information after having run curl.\n"<pos:position pos:line="551" pos:column="57"/></literal>
<literal type="string" pos:line="552" pos:column="1">"\n"<pos:position pos:line="552" pos:column="5"/></literal>
<literal type="string" pos:line="553" pos:column="1">"       --egd-file &lt;file&gt;\n"<pos:position pos:line="553" pos:column="35"/></literal>
<literal type="string" pos:line="554" pos:column="1">"              (SSL)  Specify  the  path  name  to the Entropy Gathering Daemon\n"<pos:position pos:line="554" pos:column="83"/></literal>
<literal type="string" pos:line="555" pos:column="1">"              socket. The socket is used to seed the  random  engine  for  SSL\n"<pos:position pos:line="555" pos:column="83"/></literal>
<literal type="string" pos:line="556" pos:column="1">"              connections. See also the --random-file option.\n"<pos:position pos:line="556" pos:column="66"/></literal>
<literal type="string" pos:line="557" pos:column="1">"\n"<pos:position pos:line="557" pos:column="5"/></literal>
<literal type="string" pos:line="558" pos:column="1">"       --cert-type &lt;type&gt;\n"<pos:position pos:line="558" pos:column="36"/></literal></expr></argument>
, <argument><expr><name pos:line="559" pos:column="3">stdout<pos:position pos:line="559" pos:column="9"/></name></expr></argument>)<pos:position pos:line="559" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="559" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="560" pos:column="2">fputs<pos:position pos:line="560" pos:column="7"/></name><argument_list pos:line="560" pos:column="7">(
<argument><expr><literal type="string" pos:line="561" pos:column="1">"              (SSL)  Tells curl what certificate type the provided certificate\n"<pos:position pos:line="561" pos:column="83"/></literal>
<literal type="string" pos:line="562" pos:column="1">"              is in. PEM, DER and ENG are recognized types.  If not specified,\n"<pos:position pos:line="562" pos:column="83"/></literal>
<literal type="string" pos:line="563" pos:column="1">"              PEM is assumed.\n"<pos:position pos:line="563" pos:column="34"/></literal>
<literal type="string" pos:line="564" pos:column="1">"\n"<pos:position pos:line="564" pos:column="5"/></literal>
<literal type="string" pos:line="565" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="565" pos:column="83"/></literal>
<literal type="string" pos:line="566" pos:column="1">"\n"<pos:position pos:line="566" pos:column="5"/></literal>
<literal type="string" pos:line="567" pos:column="1">"       --cacert &lt;CA certificate&gt;\n"<pos:position pos:line="567" pos:column="43"/></literal>
<literal type="string" pos:line="568" pos:column="1">"              (SSL) Tells curl to use the specified certificate file to verify\n"<pos:position pos:line="568" pos:column="83"/></literal>
<literal type="string" pos:line="569" pos:column="1">"              the peer. The file may contain  multiple  CA  certificates.  The\n"<pos:position pos:line="569" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="570" pos:column="3">stdout<pos:position pos:line="570" pos:column="9"/></name></expr></argument>)<pos:position pos:line="570" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="570" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="571" pos:column="2">fputs<pos:position pos:line="571" pos:column="7"/></name><argument_list pos:line="571" pos:column="7">(
<argument><expr><literal type="string" pos:line="572" pos:column="1">"              certificate(s)  must be in PEM format. Normally curl is built to\n"<pos:position pos:line="572" pos:column="83"/></literal>
<literal type="string" pos:line="573" pos:column="1">"              use a default file for this, so this option is typically used to\n"<pos:position pos:line="573" pos:column="83"/></literal>
<literal type="string" pos:line="574" pos:column="1">"              alter that default file.\n"<pos:position pos:line="574" pos:column="43"/></literal>
<literal type="string" pos:line="575" pos:column="1">"\n"<pos:position pos:line="575" pos:column="5"/></literal>
<literal type="string" pos:line="576" pos:column="1">"              curl  recognizes the environment variable named 'CURL_CA_BUNDLE'\n"<pos:position pos:line="576" pos:column="83"/></literal>
<literal type="string" pos:line="577" pos:column="1">"              if it is set, and uses the given path as a path  to  a  CA  cert\n"<pos:position pos:line="577" pos:column="83"/></literal>
<literal type="string" pos:line="578" pos:column="1">"              bundle. This option overrides that variable.\n"<pos:position pos:line="578" pos:column="63"/></literal>
<literal type="string" pos:line="579" pos:column="1">"\n"<pos:position pos:line="579" pos:column="5"/></literal>
<literal type="string" pos:line="580" pos:column="1">"              The  windows  version  of  curl will automatically look for a CA\n"<pos:position pos:line="580" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="581" pos:column="3">stdout<pos:position pos:line="581" pos:column="9"/></name></expr></argument>)<pos:position pos:line="581" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="581" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="582" pos:column="2">fputs<pos:position pos:line="582" pos:column="7"/></name><argument_list pos:line="582" pos:column="7">(
<argument><expr><literal type="string" pos:line="583" pos:column="1">"              certs file named 'curl-ca-bundle.crt', either in the same direc-\n"<pos:position pos:line="583" pos:column="83"/></literal>
<literal type="string" pos:line="584" pos:column="1">"              tory as curl.exe, or in the Current Working Directory, or in any\n"<pos:position pos:line="584" pos:column="83"/></literal>
<literal type="string" pos:line="585" pos:column="1">"              folder along your PATH.\n"<pos:position pos:line="585" pos:column="42"/></literal>
<literal type="string" pos:line="586" pos:column="1">"\n"<pos:position pos:line="586" pos:column="5"/></literal>
<literal type="string" pos:line="587" pos:column="1">"              If curl is built against the NSS SSL library  then  this  option\n"<pos:position pos:line="587" pos:column="83"/></literal>
<literal type="string" pos:line="588" pos:column="1">"              tells  curl the nickname of the CA certificate to use within the\n"<pos:position pos:line="588" pos:column="83"/></literal>
<literal type="string" pos:line="589" pos:column="1">"              NSS database defined by the environment variable SSL_DIR (or  by\n"<pos:position pos:line="589" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="590" pos:column="3">stdout<pos:position pos:line="590" pos:column="9"/></name></expr></argument>)<pos:position pos:line="590" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="590" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="591" pos:column="2">fputs<pos:position pos:line="591" pos:column="7"/></name><argument_list pos:line="591" pos:column="7">(
<argument><expr><literal type="string" pos:line="592" pos:column="1">"              default  /etc/pki/nssdb).   If  the NSS PEM PKCS#11 module (lib-\n"<pos:position pos:line="592" pos:column="83"/></literal>
<literal type="string" pos:line="593" pos:column="1">"              nsspem.so) is available then PEM files may be loaded.\n"<pos:position pos:line="593" pos:column="72"/></literal>
<literal type="string" pos:line="594" pos:column="1">"\n"<pos:position pos:line="594" pos:column="5"/></literal>
<literal type="string" pos:line="595" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="595" pos:column="83"/></literal>
<literal type="string" pos:line="596" pos:column="1">"\n"<pos:position pos:line="596" pos:column="5"/></literal>
<literal type="string" pos:line="597" pos:column="1">"       --capath &lt;CA certificate directory&gt;\n"<pos:position pos:line="597" pos:column="53"/></literal>
<literal type="string" pos:line="598" pos:column="1">"              (SSL) Tells curl to use the specified certificate  directory  to\n"<pos:position pos:line="598" pos:column="83"/></literal>
<literal type="string" pos:line="599" pos:column="1">"              verify  the  peer.  Multiple paths can be provided by separating\n"<pos:position pos:line="599" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="600" pos:column="3">stdout<pos:position pos:line="600" pos:column="9"/></name></expr></argument>)<pos:position pos:line="600" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="600" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="601" pos:column="2">fputs<pos:position pos:line="601" pos:column="7"/></name><argument_list pos:line="601" pos:column="7">(
<argument><expr><literal type="string" pos:line="602" pos:column="1">"              them with \":\" (e.g.  \"path1:path2:path3\"). The certificates must\n"<pos:position pos:line="602" pos:column="87"/></literal>
<literal type="string" pos:line="603" pos:column="1">"              be  in  PEM  format,  and  if curl is built against OpenSSL, the\n"<pos:position pos:line="603" pos:column="83"/></literal>
<literal type="string" pos:line="604" pos:column="1">"              directory must have been processed using  the  c_rehash  utility\n"<pos:position pos:line="604" pos:column="83"/></literal>
<literal type="string" pos:line="605" pos:column="1">"              supplied  with OpenSSL. Using --capath can allow OpenSSL-powered\n"<pos:position pos:line="605" pos:column="83"/></literal>
<literal type="string" pos:line="606" pos:column="1">"              curl to make SSL-connections much more  efficiently  than  using\n"<pos:position pos:line="606" pos:column="83"/></literal>
<literal type="string" pos:line="607" pos:column="1">"              --cacert if the --cacert file contains many CA certificates.\n"<pos:position pos:line="607" pos:column="79"/></literal>
<literal type="string" pos:line="608" pos:column="1">"\n"<pos:position pos:line="608" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="609" pos:column="3">stdout<pos:position pos:line="609" pos:column="9"/></name></expr></argument>)<pos:position pos:line="609" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="609" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="610" pos:column="2">fputs<pos:position pos:line="610" pos:column="7"/></name><argument_list pos:line="610" pos:column="7">(
<argument><expr><literal type="string" pos:line="611" pos:column="1">"              If this option is set, the default capath value will be ignored,\n"<pos:position pos:line="611" pos:column="83"/></literal>
<literal type="string" pos:line="612" pos:column="1">"              and if it is used several times, the last one will be used.\n"<pos:position pos:line="612" pos:column="78"/></literal>
<literal type="string" pos:line="613" pos:column="1">"\n"<pos:position pos:line="613" pos:column="5"/></literal>
<literal type="string" pos:line="614" pos:column="1">"       -f, --fail\n"<pos:position pos:line="614" pos:column="22"/></literal>
<literal type="string" pos:line="615" pos:column="1">"              (HTTP) Fail silently (no output at all) on server  errors.  This\n"<pos:position pos:line="615" pos:column="83"/></literal>
<literal type="string" pos:line="616" pos:column="1">"              is  mostly done to better enable scripts etc to better deal with\n"<pos:position pos:line="616" pos:column="83"/></literal>
<literal type="string" pos:line="617" pos:column="1">"              failed attempts. In normal cases when a  HTTP  server  fails  to\n"<pos:position pos:line="617" pos:column="83"/></literal>
<literal type="string" pos:line="618" pos:column="1">"              deliver  a  document,  it  returns  an  HTML document stating so\n"<pos:position pos:line="618" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="619" pos:column="3">stdout<pos:position pos:line="619" pos:column="9"/></name></expr></argument>)<pos:position pos:line="619" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="619" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="620" pos:column="2">fputs<pos:position pos:line="620" pos:column="7"/></name><argument_list pos:line="620" pos:column="7">(
<argument><expr><literal type="string" pos:line="621" pos:column="1">"              (which often also describes why and more). This flag  will  pre-\n"<pos:position pos:line="621" pos:column="83"/></literal>
<literal type="string" pos:line="622" pos:column="1">"              vent curl from outputting that and return error 22.\n"<pos:position pos:line="622" pos:column="70"/></literal>
<literal type="string" pos:line="623" pos:column="1">"\n"<pos:position pos:line="623" pos:column="5"/></literal>
<literal type="string" pos:line="624" pos:column="1">"              This  method is not fail-safe and there are occasions where non-\n"<pos:position pos:line="624" pos:column="83"/></literal>
<literal type="string" pos:line="625" pos:column="1">"              successful response codes will  slip  through,  especially  when\n"<pos:position pos:line="625" pos:column="83"/></literal>
<literal type="string" pos:line="626" pos:column="1">"              authentication is involved (response codes 401 and 407).\n"<pos:position pos:line="626" pos:column="75"/></literal>
<literal type="string" pos:line="627" pos:column="1">"\n"<pos:position pos:line="627" pos:column="5"/></literal>
<literal type="string" pos:line="628" pos:column="1">"       -F, --form &lt;name=content&gt;\n"<pos:position pos:line="628" pos:column="43"/></literal>
<literal type="string" pos:line="629" pos:column="1">"              (HTTP)  This  lets curl emulate a filled-in form in which a user\n"<pos:position pos:line="629" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="630" pos:column="3">stdout<pos:position pos:line="630" pos:column="9"/></name></expr></argument>)<pos:position pos:line="630" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="630" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="631" pos:column="2">fputs<pos:position pos:line="631" pos:column="7"/></name><argument_list pos:line="631" pos:column="7">(
<argument><expr><literal type="string" pos:line="632" pos:column="1">"              has pressed the submit button. This causes  curl  to  POST  data\n"<pos:position pos:line="632" pos:column="83"/></literal>
<literal type="string" pos:line="633" pos:column="1">"              using  the  Content-Type  multipart/form-data  according  to RFC\n"<pos:position pos:line="633" pos:column="83"/></literal>
<literal type="string" pos:line="634" pos:column="1">"              2388. This enables uploading of binary files etc. To  force  the\n"<pos:position pos:line="634" pos:column="83"/></literal>
<literal type="string" pos:line="635" pos:column="1">"              'content'  part  to  be  a  file, prefix the file name with an @\n"<pos:position pos:line="635" pos:column="83"/></literal>
<literal type="string" pos:line="636" pos:column="1">"              sign. To just get the content part from a file, prefix the  file\n"<pos:position pos:line="636" pos:column="83"/></literal>
<literal type="string" pos:line="637" pos:column="1">"              name  with  the symbol &lt;. The difference between @ and &lt; is then\n"<pos:position pos:line="637" pos:column="89"/></literal></expr></argument>
, <argument><expr><name pos:line="638" pos:column="3">stdout<pos:position pos:line="638" pos:column="9"/></name></expr></argument>)<pos:position pos:line="638" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="638" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="639" pos:column="2">fputs<pos:position pos:line="639" pos:column="7"/></name><argument_list pos:line="639" pos:column="7">(
<argument><expr><literal type="string" pos:line="640" pos:column="1">"              that @ makes a file get attached in the post as a  file  upload,\n"<pos:position pos:line="640" pos:column="83"/></literal>
<literal type="string" pos:line="641" pos:column="1">"              while  the  &lt;  makes  a text field and just get the contents for\n"<pos:position pos:line="641" pos:column="86"/></literal>
<literal type="string" pos:line="642" pos:column="1">"              that text field from a file.\n"<pos:position pos:line="642" pos:column="47"/></literal>
<literal type="string" pos:line="643" pos:column="1">"\n"<pos:position pos:line="643" pos:column="5"/></literal>
<literal type="string" pos:line="644" pos:column="1">"              Example, to send your password file to the server, where  'pass-\n"<pos:position pos:line="644" pos:column="83"/></literal>
<literal type="string" pos:line="645" pos:column="1">"              word' is the name of the form-field to which /etc/passwd will be\n"<pos:position pos:line="645" pos:column="83"/></literal>
<literal type="string" pos:line="646" pos:column="1">"              the input:\n"<pos:position pos:line="646" pos:column="29"/></literal>
<literal type="string" pos:line="647" pos:column="1">"\n"<pos:position pos:line="647" pos:column="5"/></literal>
<literal type="string" pos:line="648" pos:column="1">"              curl -F password=@/etc/passwd www.mypasswords.com\n"<pos:position pos:line="648" pos:column="68"/></literal>
<literal type="string" pos:line="649" pos:column="1">"\n"<pos:position pos:line="649" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="650" pos:column="3">stdout<pos:position pos:line="650" pos:column="9"/></name></expr></argument>)<pos:position pos:line="650" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="650" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="651" pos:column="2">fputs<pos:position pos:line="651" pos:column="7"/></name><argument_list pos:line="651" pos:column="7">(
<argument><expr><literal type="string" pos:line="652" pos:column="1">"              To read content from stdin instead of a file, use - as the file-\n"<pos:position pos:line="652" pos:column="83"/></literal>
<literal type="string" pos:line="653" pos:column="1">"              name. This goes for both @ and &lt; constructs.\n"<pos:position pos:line="653" pos:column="66"/></literal>
<literal type="string" pos:line="654" pos:column="1">"\n"<pos:position pos:line="654" pos:column="5"/></literal>
<literal type="string" pos:line="655" pos:column="1">"              You  can  also  tell  curl  what  Content-Type  to  use by using\n"<pos:position pos:line="655" pos:column="83"/></literal>
<literal type="string" pos:line="656" pos:column="1">"              'type=', in a manner similar to:\n"<pos:position pos:line="656" pos:column="51"/></literal>
<literal type="string" pos:line="657" pos:column="1">"\n"<pos:position pos:line="657" pos:column="5"/></literal>
<literal type="string" pos:line="658" pos:column="1">"              curl -F \"web=@index.html;type=text/html\" url.com\n"<pos:position pos:line="658" pos:column="69"/></literal>
<literal type="string" pos:line="659" pos:column="1">"\n"<pos:position pos:line="659" pos:column="5"/></literal>
<literal type="string" pos:line="660" pos:column="1">"              or\n"<pos:position pos:line="660" pos:column="21"/></literal>
<literal type="string" pos:line="661" pos:column="1">"\n"<pos:position pos:line="661" pos:column="5"/></literal>
<literal type="string" pos:line="662" pos:column="1">"              curl -F \"name=daniel;type=text/foo\" url.com\n"<pos:position pos:line="662" pos:column="64"/></literal>
<literal type="string" pos:line="663" pos:column="1">"\n"<pos:position pos:line="663" pos:column="5"/></literal>
<literal type="string" pos:line="664" pos:column="1">"              You can also explicitly change the name field of a  file  upload\n"<pos:position pos:line="664" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="665" pos:column="3">stdout<pos:position pos:line="665" pos:column="9"/></name></expr></argument>)<pos:position pos:line="665" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="665" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="666" pos:column="2">fputs<pos:position pos:line="666" pos:column="7"/></name><argument_list pos:line="666" pos:column="7">(
<argument><expr><literal type="string" pos:line="667" pos:column="1">"              part by setting filename=, like this:\n"<pos:position pos:line="667" pos:column="56"/></literal>
<literal type="string" pos:line="668" pos:column="1">"\n"<pos:position pos:line="668" pos:column="5"/></literal>
<literal type="string" pos:line="669" pos:column="1">"              curl -F \"file=@localfile;filename=nameinpost\" url.com\n"<pos:position pos:line="669" pos:column="74"/></literal>
<literal type="string" pos:line="670" pos:column="1">"\n"<pos:position pos:line="670" pos:column="5"/></literal>
<literal type="string" pos:line="671" pos:column="1">"              See further examples and details in the MANUAL.\n"<pos:position pos:line="671" pos:column="66"/></literal>
<literal type="string" pos:line="672" pos:column="1">"\n"<pos:position pos:line="672" pos:column="5"/></literal>
<literal type="string" pos:line="673" pos:column="1">"              This option can be used multiple times.\n"<pos:position pos:line="673" pos:column="58"/></literal>
<literal type="string" pos:line="674" pos:column="1">"\n"<pos:position pos:line="674" pos:column="5"/></literal>
<literal type="string" pos:line="675" pos:column="1">"       --ftp-account [data]\n"<pos:position pos:line="675" pos:column="32"/></literal>
<literal type="string" pos:line="676" pos:column="1">"              (FTP) When an FTP server asks for \"account data\" after user name\n"<pos:position pos:line="676" pos:column="85"/></literal>
<literal type="string" pos:line="677" pos:column="1">"              and password has been provided, this data is sent off using  the\n"<pos:position pos:line="677" pos:column="83"/></literal>
<literal type="string" pos:line="678" pos:column="1">"              ACCT command. (Added in 7.13.0)\n"<pos:position pos:line="678" pos:column="50"/></literal>
<literal type="string" pos:line="679" pos:column="1">"\n"<pos:position pos:line="679" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="680" pos:column="3">stdout<pos:position pos:line="680" pos:column="9"/></name></expr></argument>)<pos:position pos:line="680" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="680" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="681" pos:column="2">fputs<pos:position pos:line="681" pos:column="7"/></name><argument_list pos:line="681" pos:column="7">(
<argument><expr><literal type="string" pos:line="682" pos:column="1">"              If  this option is used twice, the second will override the pre-\n"<pos:position pos:line="682" pos:column="83"/></literal>
<literal type="string" pos:line="683" pos:column="1">"              vious use.\n"<pos:position pos:line="683" pos:column="29"/></literal>
<literal type="string" pos:line="684" pos:column="1">"\n"<pos:position pos:line="684" pos:column="5"/></literal>
<literal type="string" pos:line="685" pos:column="1">"       --ftp-alternative-to-user &lt;command&gt;\n"<pos:position pos:line="685" pos:column="53"/></literal>
<literal type="string" pos:line="686" pos:column="1">"              (FTP) If authenticating with the USER and PASS  commands  fails,\n"<pos:position pos:line="686" pos:column="83"/></literal>
<literal type="string" pos:line="687" pos:column="1">"              send  this  command.   When  connecting  to  Tumbleweed's Secure\n"<pos:position pos:line="687" pos:column="83"/></literal>
<literal type="string" pos:line="688" pos:column="1">"              Transport server over FTPS using  a  client  certificate,  using\n"<pos:position pos:line="688" pos:column="83"/></literal>
<literal type="string" pos:line="689" pos:column="1">"              \"SITE  AUTH\"  will tell the server to retrieve the username from\n"<pos:position pos:line="689" pos:column="85"/></literal></expr></argument>
, <argument><expr><name pos:line="690" pos:column="3">stdout<pos:position pos:line="690" pos:column="9"/></name></expr></argument>)<pos:position pos:line="690" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="690" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="691" pos:column="2">fputs<pos:position pos:line="691" pos:column="7"/></name><argument_list pos:line="691" pos:column="7">(
<argument><expr><literal type="string" pos:line="692" pos:column="1">"              the certificate. (Added in 7.15.5)\n"<pos:position pos:line="692" pos:column="53"/></literal>
<literal type="string" pos:line="693" pos:column="1">"\n"<pos:position pos:line="693" pos:column="5"/></literal>
<literal type="string" pos:line="694" pos:column="1">"       --ftp-create-dirs\n"<pos:position pos:line="694" pos:column="29"/></literal>
<literal type="string" pos:line="695" pos:column="1">"              (FTP/SFTP) When an FTP or SFTP URL/operation uses  a  path  that\n"<pos:position pos:line="695" pos:column="83"/></literal>
<literal type="string" pos:line="696" pos:column="1">"              doesn't  currently exist on the server, the standard behavior of\n"<pos:position pos:line="696" pos:column="83"/></literal>
<literal type="string" pos:line="697" pos:column="1">"              curl is to fail. Using this option, curl will instead attempt to\n"<pos:position pos:line="697" pos:column="83"/></literal>
<literal type="string" pos:line="698" pos:column="1">"              create missing directories.\n"<pos:position pos:line="698" pos:column="46"/></literal>
<literal type="string" pos:line="699" pos:column="1">"\n"<pos:position pos:line="699" pos:column="5"/></literal>
<literal type="string" pos:line="700" pos:column="1">"       --ftp-method [method]\n"<pos:position pos:line="700" pos:column="33"/></literal>
<literal type="string" pos:line="701" pos:column="1">"              (FTP)  Control  what method curl should use to reach a file on a\n"<pos:position pos:line="701" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="702" pos:column="3">stdout<pos:position pos:line="702" pos:column="9"/></name></expr></argument>)<pos:position pos:line="702" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="702" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="703" pos:column="2">fputs<pos:position pos:line="703" pos:column="7"/></name><argument_list pos:line="703" pos:column="7">(
<argument><expr><literal type="string" pos:line="704" pos:column="1">"              FTP(S) server. The method argument should be one of the  follow-\n"<pos:position pos:line="704" pos:column="83"/></literal>
<literal type="string" pos:line="705" pos:column="1">"              ing alternatives:\n"<pos:position pos:line="705" pos:column="36"/></literal>
<literal type="string" pos:line="706" pos:column="1">"\n"<pos:position pos:line="706" pos:column="5"/></literal>
<literal type="string" pos:line="707" pos:column="1">"              multicwd\n"<pos:position pos:line="707" pos:column="27"/></literal>
<literal type="string" pos:line="708" pos:column="1">"                     curl  does  a  single CWD operation for each path part in\n"<pos:position pos:line="708" pos:column="83"/></literal>
<literal type="string" pos:line="709" pos:column="1">"                     the given URL. For deep hierarchies this means very  many\n"<pos:position pos:line="709" pos:column="83"/></literal>
<literal type="string" pos:line="710" pos:column="1">"                     commands.  This  is  how RFC 1738 says it should be done.\n"<pos:position pos:line="710" pos:column="83"/></literal>
<literal type="string" pos:line="711" pos:column="1">"                     This is the default but the slowest behavior.\n"<pos:position pos:line="711" pos:column="71"/></literal>
<literal type="string" pos:line="712" pos:column="1">"\n"<pos:position pos:line="712" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="713" pos:column="3">stdout<pos:position pos:line="713" pos:column="9"/></name></expr></argument>)<pos:position pos:line="713" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="713" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="714" pos:column="2">fputs<pos:position pos:line="714" pos:column="7"/></name><argument_list pos:line="714" pos:column="7">(
<argument><expr><literal type="string" pos:line="715" pos:column="1">"              nocwd  curl does no CWD at all. curl will do  SIZE,  RETR,  STOR\n"<pos:position pos:line="715" pos:column="83"/></literal>
<literal type="string" pos:line="716" pos:column="1">"                     etc and give a full path to the server for all these com-\n"<pos:position pos:line="716" pos:column="83"/></literal>
<literal type="string" pos:line="717" pos:column="1">"                     mands. This is the fastest behavior.\n"<pos:position pos:line="717" pos:column="62"/></literal>
<literal type="string" pos:line="718" pos:column="1">"\n"<pos:position pos:line="718" pos:column="5"/></literal>
<literal type="string" pos:line="719" pos:column="1">"              singlecwd\n"<pos:position pos:line="719" pos:column="28"/></literal>
<literal type="string" pos:line="720" pos:column="1">"                     curl does one CWD with the full target directory and then\n"<pos:position pos:line="720" pos:column="83"/></literal>
<literal type="string" pos:line="721" pos:column="1">"                     operates  on  the  file  \"normally\" (like in the multicwd\n"<pos:position pos:line="721" pos:column="85"/></literal>
<literal type="string" pos:line="722" pos:column="1">"                     case). This is somewhat  more  standards  compliant  than\n"<pos:position pos:line="722" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="723" pos:column="3">stdout<pos:position pos:line="723" pos:column="9"/></name></expr></argument>)<pos:position pos:line="723" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="723" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="724" pos:column="2">fputs<pos:position pos:line="724" pos:column="7"/></name><argument_list pos:line="724" pos:column="7">(
<argument><expr><literal type="string" pos:line="725" pos:column="1">"                     'nocwd' but without the full penalty of 'multicwd'.\n"<pos:position pos:line="725" pos:column="77"/></literal>
<literal type="string" pos:line="726" pos:column="1">"       (Added in 7.15.1)\n"<pos:position pos:line="726" pos:column="29"/></literal>
<literal type="string" pos:line="727" pos:column="1">"\n"<pos:position pos:line="727" pos:column="5"/></literal>
<literal type="string" pos:line="728" pos:column="1">"       --ftp-pasv\n"<pos:position pos:line="728" pos:column="22"/></literal>
<literal type="string" pos:line="729" pos:column="1">"              (FTP)  Use  passive mode for the data connection. Passive is the\n"<pos:position pos:line="729" pos:column="83"/></literal>
<literal type="string" pos:line="730" pos:column="1">"              internal default behavior, but using this option can be used  to\n"<pos:position pos:line="730" pos:column="83"/></literal>
<literal type="string" pos:line="731" pos:column="1">"              override a previous -P/-ftp-port option. (Added in 7.11.0)\n"<pos:position pos:line="731" pos:column="77"/></literal>
<literal type="string" pos:line="732" pos:column="1">"\n"<pos:position pos:line="732" pos:column="5"/></literal>
<literal type="string" pos:line="733" pos:column="1">"              If  this option is used several times, the following occurrences\n"<pos:position pos:line="733" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="734" pos:column="3">stdout<pos:position pos:line="734" pos:column="9"/></name></expr></argument>)<pos:position pos:line="734" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="734" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="735" pos:column="2">fputs<pos:position pos:line="735" pos:column="7"/></name><argument_list pos:line="735" pos:column="7">(
<argument><expr><literal type="string" pos:line="736" pos:column="1">"              make no difference. Undoing an  enforced  passive  really  isn't\n"<pos:position pos:line="736" pos:column="83"/></literal>
<literal type="string" pos:line="737" pos:column="1">"              doable  but you must then instead enforce the correct -P, --ftp-\n"<pos:position pos:line="737" pos:column="83"/></literal>
<literal type="string" pos:line="738" pos:column="1">"              port again.\n"<pos:position pos:line="738" pos:column="30"/></literal>
<literal type="string" pos:line="739" pos:column="1">"\n"<pos:position pos:line="739" pos:column="5"/></literal>
<literal type="string" pos:line="740" pos:column="1">"              Passive mode means that curl will try the EPSV command first and\n"<pos:position pos:line="740" pos:column="83"/></literal>
<literal type="string" pos:line="741" pos:column="1">"              then PASV, unless --disable-epsv is used.\n"<pos:position pos:line="741" pos:column="60"/></literal>
<literal type="string" pos:line="742" pos:column="1">"\n"<pos:position pos:line="742" pos:column="5"/></literal>
<literal type="string" pos:line="743" pos:column="1">"       --ftp-skip-pasv-ip\n"<pos:position pos:line="743" pos:column="30"/></literal>
<literal type="string" pos:line="744" pos:column="1">"              (FTP) Tell curl to not use the IP address the server suggests in\n"<pos:position pos:line="744" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="745" pos:column="3">stdout<pos:position pos:line="745" pos:column="9"/></name></expr></argument>)<pos:position pos:line="745" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="745" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="746" pos:column="2">fputs<pos:position pos:line="746" pos:column="7"/></name><argument_list pos:line="746" pos:column="7">(
<argument><expr><literal type="string" pos:line="747" pos:column="1">"              its response to curl's PASV command when curl connects the  data\n"<pos:position pos:line="747" pos:column="83"/></literal>
<literal type="string" pos:line="748" pos:column="1">"              connection.  Instead  curl  will  re-use  the same IP address it\n"<pos:position pos:line="748" pos:column="83"/></literal>
<literal type="string" pos:line="749" pos:column="1">"              already uses for the control connection. (Added in 7.14.2)\n"<pos:position pos:line="749" pos:column="77"/></literal>
<literal type="string" pos:line="750" pos:column="1">"\n"<pos:position pos:line="750" pos:column="5"/></literal>
<literal type="string" pos:line="751" pos:column="1">"              This option has no effect if PORT, EPRT or EPSV is used  instead\n"<pos:position pos:line="751" pos:column="83"/></literal>
<literal type="string" pos:line="752" pos:column="1">"              of PASV.\n"<pos:position pos:line="752" pos:column="27"/></literal>
<literal type="string" pos:line="753" pos:column="1">"\n"<pos:position pos:line="753" pos:column="5"/></literal>
<literal type="string" pos:line="754" pos:column="1">"       --ftp-pret\n"<pos:position pos:line="754" pos:column="22"/></literal>
<literal type="string" pos:line="755" pos:column="1">"              (FTP)  Tell  curl to send a PRET command before PASV (and EPSV).\n"<pos:position pos:line="755" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="756" pos:column="3">stdout<pos:position pos:line="756" pos:column="9"/></name></expr></argument>)<pos:position pos:line="756" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="756" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="757" pos:column="2">fputs<pos:position pos:line="757" pos:column="7"/></name><argument_list pos:line="757" pos:column="7">(
<argument><expr><literal type="string" pos:line="758" pos:column="1">"              Certain FTP servers, mainly drftpd,  require  this  non-standard\n"<pos:position pos:line="758" pos:column="83"/></literal>
<literal type="string" pos:line="759" pos:column="1">"              command  for  directory  listings as well as up and downloads in\n"<pos:position pos:line="759" pos:column="83"/></literal>
<literal type="string" pos:line="760" pos:column="1">"              PASV mode.  (Added in 7.20.x)\n"<pos:position pos:line="760" pos:column="48"/></literal>
<literal type="string" pos:line="761" pos:column="1">"\n"<pos:position pos:line="761" pos:column="5"/></literal>
<literal type="string" pos:line="762" pos:column="1">"       --ftp-ssl-ccc\n"<pos:position pos:line="762" pos:column="25"/></literal>
<literal type="string" pos:line="763" pos:column="1">"              (FTP) Use CCC (Clear Command Channel)  Shuts  down  the  SSL/TLS\n"<pos:position pos:line="763" pos:column="83"/></literal>
<literal type="string" pos:line="764" pos:column="1">"              layer after authenticating. The rest of the control channel com-\n"<pos:position pos:line="764" pos:column="83"/></literal>
<literal type="string" pos:line="765" pos:column="1">"              munication will be unencrypted. This allows NAT routers to  fol-\n"<pos:position pos:line="765" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="766" pos:column="3">stdout<pos:position pos:line="766" pos:column="9"/></name></expr></argument>)<pos:position pos:line="766" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="766" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="767" pos:column="2">fputs<pos:position pos:line="767" pos:column="7"/></name><argument_list pos:line="767" pos:column="7">(
<argument><expr><literal type="string" pos:line="768" pos:column="1">"              low the FTP transaction. The default mode is passive. See --ftp-\n"<pos:position pos:line="768" pos:column="83"/></literal>
<literal type="string" pos:line="769" pos:column="1">"              ssl-ccc-mode for other modes.  (Added in 7.16.1)\n"<pos:position pos:line="769" pos:column="67"/></literal>
<literal type="string" pos:line="770" pos:column="1">"\n"<pos:position pos:line="770" pos:column="5"/></literal>
<literal type="string" pos:line="771" pos:column="1">"       --ftp-ssl-ccc-mode [active/passive]\n"<pos:position pos:line="771" pos:column="47"/></literal>
<literal type="string" pos:line="772" pos:column="1">"              (FTP) Use CCC (Clear Command Channel) Sets  the  CCC  mode.  The\n"<pos:position pos:line="772" pos:column="83"/></literal>
<literal type="string" pos:line="773" pos:column="1">"              passive  mode  will  not initiate the shutdown, but instead wait\n"<pos:position pos:line="773" pos:column="83"/></literal>
<literal type="string" pos:line="774" pos:column="1">"              for the server to do it, and will not reply to the shutdown from\n"<pos:position pos:line="774" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="775" pos:column="3">stdout<pos:position pos:line="775" pos:column="9"/></name></expr></argument>)<pos:position pos:line="775" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="775" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="776" pos:column="2">fputs<pos:position pos:line="776" pos:column="7"/></name><argument_list pos:line="776" pos:column="7">(
<argument><expr><literal type="string" pos:line="777" pos:column="1">"              the server. The active mode initiates the shutdown and waits for\n"<pos:position pos:line="777" pos:column="83"/></literal>
<literal type="string" pos:line="778" pos:column="1">"              a reply from the server.  (Added in 7.16.2)\n"<pos:position pos:line="778" pos:column="62"/></literal>
<literal type="string" pos:line="779" pos:column="1">"\n"<pos:position pos:line="779" pos:column="5"/></literal>
<literal type="string" pos:line="780" pos:column="1">"       --ftp-ssl-control\n"<pos:position pos:line="780" pos:column="29"/></literal>
<literal type="string" pos:line="781" pos:column="1">"              (FTP) Require SSL/TLS for the FTP  login,  clear  for  transfer.\n"<pos:position pos:line="781" pos:column="83"/></literal>
<literal type="string" pos:line="782" pos:column="1">"              Allows  secure  authentication, but non-encrypted data transfers\n"<pos:position pos:line="782" pos:column="83"/></literal>
<literal type="string" pos:line="783" pos:column="1">"              for efficiency.  Fails the transfer if the server  doesn't  sup-\n"<pos:position pos:line="783" pos:column="83"/></literal>
<literal type="string" pos:line="784" pos:column="1">"              port SSL/TLS.  (Added in 7.16.0) that can still be used but will\n"<pos:position pos:line="784" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="785" pos:column="3">stdout<pos:position pos:line="785" pos:column="9"/></name></expr></argument>)<pos:position pos:line="785" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="785" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="786" pos:column="2">fputs<pos:position pos:line="786" pos:column="7"/></name><argument_list pos:line="786" pos:column="7">(
<argument><expr><literal type="string" pos:line="787" pos:column="1">"              be removed in a future version.\n"<pos:position pos:line="787" pos:column="50"/></literal>
<literal type="string" pos:line="788" pos:column="1">"\n"<pos:position pos:line="788" pos:column="5"/></literal>
<literal type="string" pos:line="789" pos:column="1">"       --form-string &lt;name=string&gt;\n"<pos:position pos:line="789" pos:column="45"/></literal>
<literal type="string" pos:line="790" pos:column="1">"              (HTTP) Similar to --form except that the value  string  for  the\n"<pos:position pos:line="790" pos:column="83"/></literal>
<literal type="string" pos:line="791" pos:column="1">"              named  parameter  is used literally. Leading '@' and '&lt;' charac-\n"<pos:position pos:line="791" pos:column="86"/></literal>
<literal type="string" pos:line="792" pos:column="1">"              ters, and the ';type=' string in the value have no special mean-\n"<pos:position pos:line="792" pos:column="83"/></literal>
<literal type="string" pos:line="793" pos:column="1">"              ing. Use this in preference to --form if there's any possibility\n"<pos:position pos:line="793" pos:column="83"/></literal>
<literal type="string" pos:line="794" pos:column="1">"              that the string value may accidentally trigger the  '@'  or  '&lt;'\n"<pos:position pos:line="794" pos:column="86"/></literal></expr></argument>
, <argument><expr><name pos:line="795" pos:column="3">stdout<pos:position pos:line="795" pos:column="9"/></name></expr></argument>)<pos:position pos:line="795" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="795" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="796" pos:column="2">fputs<pos:position pos:line="796" pos:column="7"/></name><argument_list pos:line="796" pos:column="7">(
<argument><expr><literal type="string" pos:line="797" pos:column="1">"              features of --form.\n"<pos:position pos:line="797" pos:column="38"/></literal>
<literal type="string" pos:line="798" pos:column="1">"\n"<pos:position pos:line="798" pos:column="5"/></literal>
<literal type="string" pos:line="799" pos:column="1">"       -g, --globoff\n"<pos:position pos:line="799" pos:column="25"/></literal>
<literal type="string" pos:line="800" pos:column="1">"              This option switches off the \"URL globbing parser\". When you set\n"<pos:position pos:line="800" pos:column="85"/></literal>
<literal type="string" pos:line="801" pos:column="1">"              this option, you can specify URLs that contain the letters  {}[]\n"<pos:position pos:line="801" pos:column="83"/></literal>
<literal type="string" pos:line="802" pos:column="1">"              without  having them being interpreted by curl itself. Note that\n"<pos:position pos:line="802" pos:column="83"/></literal>
<literal type="string" pos:line="803" pos:column="1">"              these letters are not normal legal URL contents but they  should\n"<pos:position pos:line="803" pos:column="83"/></literal>
<literal type="string" pos:line="804" pos:column="1">"              be encoded according to the URI standard.\n"<pos:position pos:line="804" pos:column="60"/></literal>
<literal type="string" pos:line="805" pos:column="1">"\n"<pos:position pos:line="805" pos:column="5"/></literal>
<literal type="string" pos:line="806" pos:column="1">"       -G, --get\n"<pos:position pos:line="806" pos:column="21"/></literal></expr></argument>
, <argument><expr><name pos:line="807" pos:column="3">stdout<pos:position pos:line="807" pos:column="9"/></name></expr></argument>)<pos:position pos:line="807" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="807" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="808" pos:column="2">fputs<pos:position pos:line="808" pos:column="7"/></name><argument_list pos:line="808" pos:column="7">(
<argument><expr><literal type="string" pos:line="809" pos:column="1">"              When  used,  this  option  will make all data specified with -d,\n"<pos:position pos:line="809" pos:column="83"/></literal>
<literal type="string" pos:line="810" pos:column="1">"              --data or --data-binary to be used in a HTTP GET request instead\n"<pos:position pos:line="810" pos:column="83"/></literal>
<literal type="string" pos:line="811" pos:column="1">"              of  the POST request that otherwise would be used. The data will\n"<pos:position pos:line="811" pos:column="83"/></literal>
<literal type="string" pos:line="812" pos:column="1">"              be appended to the URL with a '?' separator.\n"<pos:position pos:line="812" pos:column="63"/></literal>
<literal type="string" pos:line="813" pos:column="1">"\n"<pos:position pos:line="813" pos:column="5"/></literal>
<literal type="string" pos:line="814" pos:column="1">"              If used in combination with -I, the POST data  will  instead  be\n"<pos:position pos:line="814" pos:column="83"/></literal>
<literal type="string" pos:line="815" pos:column="1">"              appended to the URL with a HEAD request.\n"<pos:position pos:line="815" pos:column="59"/></literal>
<literal type="string" pos:line="816" pos:column="1">"\n"<pos:position pos:line="816" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="817" pos:column="3">stdout<pos:position pos:line="817" pos:column="9"/></name></expr></argument>)<pos:position pos:line="817" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="817" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="818" pos:column="2">fputs<pos:position pos:line="818" pos:column="7"/></name><argument_list pos:line="818" pos:column="7">(
<argument><expr><literal type="string" pos:line="819" pos:column="1">"              If  this option is used several times, the following occurrences\n"<pos:position pos:line="819" pos:column="83"/></literal>
<literal type="string" pos:line="820" pos:column="1">"              make no difference. This is because undoing a GET  doesn't  make\n"<pos:position pos:line="820" pos:column="83"/></literal>
<literal type="string" pos:line="821" pos:column="1">"              sense,  but  you  should  then  instead  enforce the alternative\n"<pos:position pos:line="821" pos:column="83"/></literal>
<literal type="string" pos:line="822" pos:column="1">"              method you prefer.\n"<pos:position pos:line="822" pos:column="37"/></literal>
<literal type="string" pos:line="823" pos:column="1">"\n"<pos:position pos:line="823" pos:column="5"/></literal>
<literal type="string" pos:line="824" pos:column="1">"       -H, --header &lt;header&gt;\n"<pos:position pos:line="824" pos:column="39"/></literal>
<literal type="string" pos:line="825" pos:column="1">"              (HTTP) Extra header to use when getting  a  web  page.  You  may\n"<pos:position pos:line="825" pos:column="83"/></literal>
<literal type="string" pos:line="826" pos:column="1">"              specify any number of extra headers. Note that if you should add\n"<pos:position pos:line="826" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="827" pos:column="3">stdout<pos:position pos:line="827" pos:column="9"/></name></expr></argument>)<pos:position pos:line="827" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="827" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="828" pos:column="2">fputs<pos:position pos:line="828" pos:column="7"/></name><argument_list pos:line="828" pos:column="7">(
<argument><expr><literal type="string" pos:line="829" pos:column="1">"              a custom header that has the same name as one  of  the  internal\n"<pos:position pos:line="829" pos:column="83"/></literal>
<literal type="string" pos:line="830" pos:column="1">"              ones  curl  would  use,  your externally set header will be used\n"<pos:position pos:line="830" pos:column="83"/></literal>
<literal type="string" pos:line="831" pos:column="1">"              instead of the internal one. This allows you to make even trick-\n"<pos:position pos:line="831" pos:column="83"/></literal>
<literal type="string" pos:line="832" pos:column="1">"              ier  stuff  than  curl would normally do. You should not replace\n"<pos:position pos:line="832" pos:column="83"/></literal>
<literal type="string" pos:line="833" pos:column="1">"              internally set  headers  without  knowing  perfectly  well  what\n"<pos:position pos:line="833" pos:column="83"/></literal>
<literal type="string" pos:line="834" pos:column="1">"              you're  doing. Remove an internal header by giving a replacement\n"<pos:position pos:line="834" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="835" pos:column="3">stdout<pos:position pos:line="835" pos:column="9"/></name></expr></argument>)<pos:position pos:line="835" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="835" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="836" pos:column="2">fputs<pos:position pos:line="836" pos:column="7"/></name><argument_list pos:line="836" pos:column="7">(
<argument><expr><literal type="string" pos:line="837" pos:column="1">"              without content on the right  side  of  the  colon,  as  in:  -H\n"<pos:position pos:line="837" pos:column="83"/></literal>
<literal type="string" pos:line="838" pos:column="1">"              \"Host:\".  If  you  send the custom header with no-value then its\n"<pos:position pos:line="838" pos:column="85"/></literal>
<literal type="string" pos:line="839" pos:column="1">"              header must be terminated with a semicolon, such as  -H  \"X-Cus-\n"<pos:position pos:line="839" pos:column="84"/></literal>
<literal type="string" pos:line="840" pos:column="1">"              tom-Header;\" to send \"X-Custom-Header:\".\n"<pos:position pos:line="840" pos:column="62"/></literal>
<literal type="string" pos:line="841" pos:column="1">"\n"<pos:position pos:line="841" pos:column="5"/></literal>
<literal type="string" pos:line="842" pos:column="1">"              curl  will  make  sure  that each header you add/replace is sent\n"<pos:position pos:line="842" pos:column="83"/></literal>
<literal type="string" pos:line="843" pos:column="1">"              with the proper end-of-line marker, you should thus not add that\n"<pos:position pos:line="843" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="844" pos:column="3">stdout<pos:position pos:line="844" pos:column="9"/></name></expr></argument>)<pos:position pos:line="844" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="844" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="845" pos:column="2">fputs<pos:position pos:line="845" pos:column="7"/></name><argument_list pos:line="845" pos:column="7">(
<argument><expr><literal type="string" pos:line="846" pos:column="1">"              as a part of the header content: do not add newlines or carriage\n"<pos:position pos:line="846" pos:column="83"/></literal>
<literal type="string" pos:line="847" pos:column="1">"              returns, they will only mess things up for you.\n"<pos:position pos:line="847" pos:column="66"/></literal>
<literal type="string" pos:line="848" pos:column="1">"\n"<pos:position pos:line="848" pos:column="5"/></literal>
<literal type="string" pos:line="849" pos:column="1">"              See also the -A, --user-agent and -e, --referer options.\n"<pos:position pos:line="849" pos:column="75"/></literal>
<literal type="string" pos:line="850" pos:column="1">"\n"<pos:position pos:line="850" pos:column="5"/></literal>
<literal type="string" pos:line="851" pos:column="1">"              This option can be used  multiple  times  to  add/replace/remove\n"<pos:position pos:line="851" pos:column="83"/></literal>
<literal type="string" pos:line="852" pos:column="1">"              multiple headers.\n"<pos:position pos:line="852" pos:column="36"/></literal>
<literal type="string" pos:line="853" pos:column="1">"\n"<pos:position pos:line="853" pos:column="5"/></literal>
<literal type="string" pos:line="854" pos:column="1">"       --hostpubmd5 &lt;md5&gt;\n"<pos:position pos:line="854" pos:column="36"/></literal>
<literal type="string" pos:line="855" pos:column="1">"              Pass  a  string  containing  32  hexadecimal  digits. The string\n"<pos:position pos:line="855" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="856" pos:column="3">stdout<pos:position pos:line="856" pos:column="9"/></name></expr></argument>)<pos:position pos:line="856" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="856" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="857" pos:column="2">fputs<pos:position pos:line="857" pos:column="7"/></name><argument_list pos:line="857" pos:column="7">(
<argument><expr><literal type="string" pos:line="858" pos:column="1">"              should be the 128 bit MD5 checksum of the remote  host's  public\n"<pos:position pos:line="858" pos:column="83"/></literal>
<literal type="string" pos:line="859" pos:column="1">"              key,  curl  will  refuse the connection with the host unless the\n"<pos:position pos:line="859" pos:column="83"/></literal>
<literal type="string" pos:line="860" pos:column="1">"              md5sums match. This option is only for SCP and  SFTP  transfers.\n"<pos:position pos:line="860" pos:column="83"/></literal>
<literal type="string" pos:line="861" pos:column="1">"              (Added in 7.17.1)\n"<pos:position pos:line="861" pos:column="36"/></literal>
<literal type="string" pos:line="862" pos:column="1">"\n"<pos:position pos:line="862" pos:column="5"/></literal>
<literal type="string" pos:line="863" pos:column="1">"       --ignore-content-length\n"<pos:position pos:line="863" pos:column="35"/></literal>
<literal type="string" pos:line="864" pos:column="1">"              (HTTP)  Ignore  the  Content-Length header. This is particularly\n"<pos:position pos:line="864" pos:column="83"/></literal>
<literal type="string" pos:line="865" pos:column="1">"              useful for servers running Apache 1.x, which will report  incor-\n"<pos:position pos:line="865" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="866" pos:column="3">stdout<pos:position pos:line="866" pos:column="9"/></name></expr></argument>)<pos:position pos:line="866" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="866" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="867" pos:column="2">fputs<pos:position pos:line="867" pos:column="7"/></name><argument_list pos:line="867" pos:column="7">(
<argument><expr><literal type="string" pos:line="868" pos:column="1">"              rect Content-Length for files larger than 2 gigabytes.\n"<pos:position pos:line="868" pos:column="73"/></literal>
<literal type="string" pos:line="869" pos:column="1">"\n"<pos:position pos:line="869" pos:column="5"/></literal>
<literal type="string" pos:line="870" pos:column="1">"       -i, --include\n"<pos:position pos:line="870" pos:column="25"/></literal>
<literal type="string" pos:line="871" pos:column="1">"              (HTTP)  Include  the  HTTP-header in the output. The HTTP-header\n"<pos:position pos:line="871" pos:column="83"/></literal>
<literal type="string" pos:line="872" pos:column="1">"              includes things like server-name, date of  the  document,  HTTP-\n"<pos:position pos:line="872" pos:column="83"/></literal>
<literal type="string" pos:line="873" pos:column="1">"              version and more...\n"<pos:position pos:line="873" pos:column="38"/></literal>
<literal type="string" pos:line="874" pos:column="1">"\n"<pos:position pos:line="874" pos:column="5"/></literal>
<literal type="string" pos:line="875" pos:column="1">"       -I, --head\n"<pos:position pos:line="875" pos:column="22"/></literal>
<literal type="string" pos:line="876" pos:column="1">"              (HTTP/FTP/FILE) Fetch the HTTP-header only! HTTP-servers feature\n"<pos:position pos:line="876" pos:column="83"/></literal>
<literal type="string" pos:line="877" pos:column="1">"              the command HEAD which this uses to get nothing but  the  header\n"<pos:position pos:line="877" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="878" pos:column="3">stdout<pos:position pos:line="878" pos:column="9"/></name></expr></argument>)<pos:position pos:line="878" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="878" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="879" pos:column="2">fputs<pos:position pos:line="879" pos:column="7"/></name><argument_list pos:line="879" pos:column="7">(
<argument><expr><literal type="string" pos:line="880" pos:column="1">"              of  a  document.  When used on a FTP or FILE file, curl displays\n"<pos:position pos:line="880" pos:column="83"/></literal>
<literal type="string" pos:line="881" pos:column="1">"              the file size and last modification time only.\n"<pos:position pos:line="881" pos:column="65"/></literal>
<literal type="string" pos:line="882" pos:column="1">"\n"<pos:position pos:line="882" pos:column="5"/></literal>
<literal type="string" pos:line="883" pos:column="1">"       --interface &lt;name&gt;\n"<pos:position pos:line="883" pos:column="36"/></literal>
<literal type="string" pos:line="884" pos:column="1">"              Perform an operation using a specified interface. You can  enter\n"<pos:position pos:line="884" pos:column="83"/></literal>
<literal type="string" pos:line="885" pos:column="1">"              interface  name,  IP address or host name. An example could look\n"<pos:position pos:line="885" pos:column="83"/></literal>
<literal type="string" pos:line="886" pos:column="1">"              like:\n"<pos:position pos:line="886" pos:column="24"/></literal>
<literal type="string" pos:line="887" pos:column="1">"\n"<pos:position pos:line="887" pos:column="5"/></literal>
<literal type="string" pos:line="888" pos:column="1">"               curl --interface eth0:1 http://www.netscape.com/\n"<pos:position pos:line="888" pos:column="68"/></literal>
<literal type="string" pos:line="889" pos:column="1">"\n"<pos:position pos:line="889" pos:column="5"/></literal>
<literal type="string" pos:line="890" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="890" pos:column="83"/></literal>
<literal type="string" pos:line="891" pos:column="1">"\n"<pos:position pos:line="891" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="892" pos:column="3">stdout<pos:position pos:line="892" pos:column="9"/></name></expr></argument>)<pos:position pos:line="892" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="892" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="893" pos:column="2">fputs<pos:position pos:line="893" pos:column="7"/></name><argument_list pos:line="893" pos:column="7">(
<argument><expr><literal type="string" pos:line="894" pos:column="1">"       -j, --junk-session-cookies\n"<pos:position pos:line="894" pos:column="38"/></literal>
<literal type="string" pos:line="895" pos:column="1">"              (HTTP) When curl is told to read cookies from a given file, this\n"<pos:position pos:line="895" pos:column="83"/></literal>
<literal type="string" pos:line="896" pos:column="1">"              option  will  make  it  discard all \"session cookies\". This will\n"<pos:position pos:line="896" pos:column="85"/></literal>
<literal type="string" pos:line="897" pos:column="1">"              basically have the same effect as if a new session  is  started.\n"<pos:position pos:line="897" pos:column="83"/></literal>
<literal type="string" pos:line="898" pos:column="1">"              Typical  browsers  always  discard  session cookies when they're\n"<pos:position pos:line="898" pos:column="83"/></literal>
<literal type="string" pos:line="899" pos:column="1">"              closed down.\n"<pos:position pos:line="899" pos:column="31"/></literal>
<literal type="string" pos:line="900" pos:column="1">"\n"<pos:position pos:line="900" pos:column="5"/></literal>
<literal type="string" pos:line="901" pos:column="1">"       -J, --remote-header-name\n"<pos:position pos:line="901" pos:column="36"/></literal>
<literal type="string" pos:line="902" pos:column="1">"              (HTTP) This option tells the -O, --remote-name option to use the\n"<pos:position pos:line="902" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="903" pos:column="3">stdout<pos:position pos:line="903" pos:column="9"/></name></expr></argument>)<pos:position pos:line="903" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="903" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="904" pos:column="2">fputs<pos:position pos:line="904" pos:column="7"/></name><argument_list pos:line="904" pos:column="7">(
<argument><expr><literal type="string" pos:line="905" pos:column="1">"              server-specified   Content-Disposition   filename   instead   of\n"<pos:position pos:line="905" pos:column="83"/></literal>
<literal type="string" pos:line="906" pos:column="1">"              extracting a filename from the URL.\n"<pos:position pos:line="906" pos:column="54"/></literal>
<literal type="string" pos:line="907" pos:column="1">"\n"<pos:position pos:line="907" pos:column="5"/></literal>
<literal type="string" pos:line="908" pos:column="1">"       -k, --insecure\n"<pos:position pos:line="908" pos:column="26"/></literal>
<literal type="string" pos:line="909" pos:column="1">"              (SSL) This option explicitly allows curl to  perform  \"insecure\"\n"<pos:position pos:line="909" pos:column="85"/></literal>
<literal type="string" pos:line="910" pos:column="1">"              SSL connections and transfers. All SSL connections are attempted\n"<pos:position pos:line="910" pos:column="83"/></literal>
<literal type="string" pos:line="911" pos:column="1">"              to be made secure by using the CA certificate  bundle  installed\n"<pos:position pos:line="911" pos:column="83"/></literal>
<literal type="string" pos:line="912" pos:column="1">"              by  default.  This  makes  all connections considered \"insecure\"\n"<pos:position pos:line="912" pos:column="85"/></literal></expr></argument>
, <argument><expr><name pos:line="913" pos:column="3">stdout<pos:position pos:line="913" pos:column="9"/></name></expr></argument>)<pos:position pos:line="913" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="913" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="914" pos:column="2">fputs<pos:position pos:line="914" pos:column="7"/></name><argument_list pos:line="914" pos:column="7">(
<argument><expr><literal type="string" pos:line="915" pos:column="1">"              fail unless -k, --insecure is used.\n"<pos:position pos:line="915" pos:column="54"/></literal>
<literal type="string" pos:line="916" pos:column="1">"\n"<pos:position pos:line="916" pos:column="5"/></literal>
<literal type="string" pos:line="917" pos:column="1">"              See    this    online    resource    for    further     details:\n"<pos:position pos:line="917" pos:column="83"/></literal>
<literal type="string" pos:line="918" pos:column="1">"              http://curl.haxx.se/docs/sslcerts.html\n"<pos:position pos:line="918" pos:column="57"/></literal>
<literal type="string" pos:line="919" pos:column="1">"\n"<pos:position pos:line="919" pos:column="5"/></literal>
<literal type="string" pos:line="920" pos:column="1">"       -K, --config &lt;config file&gt;\n"<pos:position pos:line="920" pos:column="44"/></literal>
<literal type="string" pos:line="921" pos:column="1">"              Specify  which config file to read curl arguments from. The con-\n"<pos:position pos:line="921" pos:column="83"/></literal>
<literal type="string" pos:line="922" pos:column="1">"              fig file is a text file in which command line arguments  can  be\n"<pos:position pos:line="922" pos:column="83"/></literal>
<literal type="string" pos:line="923" pos:column="1">"              written  which  then will be used as if they were written on the\n"<pos:position pos:line="923" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="924" pos:column="3">stdout<pos:position pos:line="924" pos:column="9"/></name></expr></argument>)<pos:position pos:line="924" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="924" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="925" pos:column="2">fputs<pos:position pos:line="925" pos:column="7"/></name><argument_list pos:line="925" pos:column="7">(
<argument><expr><literal type="string" pos:line="926" pos:column="1">"              actual command line. Options and their parameters must be speci-\n"<pos:position pos:line="926" pos:column="83"/></literal>
<literal type="string" pos:line="927" pos:column="1">"              fied  on  the  same  config  file line, separated by whitespace,\n"<pos:position pos:line="927" pos:column="83"/></literal>
<literal type="string" pos:line="928" pos:column="1">"              colon, the equals sign or any combination thereof (however,  the\n"<pos:position pos:line="928" pos:column="83"/></literal>
<literal type="string" pos:line="929" pos:column="1">"              preferred  separator is the equals sign). If the parameter is to\n"<pos:position pos:line="929" pos:column="83"/></literal>
<literal type="string" pos:line="930" pos:column="1">"              contain  whitespace,  the  parameter  must  be  enclosed  within\n"<pos:position pos:line="930" pos:column="83"/></literal>
<literal type="string" pos:line="931" pos:column="1">"              quotes. Within double quotes, the following escape sequences are\n"<pos:position pos:line="931" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="932" pos:column="3">stdout<pos:position pos:line="932" pos:column="9"/></name></expr></argument>)<pos:position pos:line="932" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="932" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="933" pos:column="2">fputs<pos:position pos:line="933" pos:column="7"/></name><argument_list pos:line="933" pos:column="7">(
<argument><expr><literal type="string" pos:line="934" pos:column="1">"              available: \\\\, \\\", \\t, \\n, \\r and \\v. A backslash preceding  any\n"<pos:position pos:line="934" pos:column="91"/></literal>
<literal type="string" pos:line="935" pos:column="1">"              other letter is ignored. If the first column of a config line is\n"<pos:position pos:line="935" pos:column="83"/></literal>
<literal type="string" pos:line="936" pos:column="1">"              a '#' character, the rest of the line will be treated as a  com-\n"<pos:position pos:line="936" pos:column="83"/></literal>
<literal type="string" pos:line="937" pos:column="1">"              ment.  Only  write  one  option  per physical line in the config\n"<pos:position pos:line="937" pos:column="83"/></literal>
<literal type="string" pos:line="938" pos:column="1">"              file.\n"<pos:position pos:line="938" pos:column="24"/></literal>
<literal type="string" pos:line="939" pos:column="1">"\n"<pos:position pos:line="939" pos:column="5"/></literal>
<literal type="string" pos:line="940" pos:column="1">"              Specify the filename to -K, --config as '-' to  make  curl  read\n"<pos:position pos:line="940" pos:column="83"/></literal>
<literal type="string" pos:line="941" pos:column="1">"              the file from stdin.\n"<pos:position pos:line="941" pos:column="39"/></literal>
<literal type="string" pos:line="942" pos:column="1">"\n"<pos:position pos:line="942" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="943" pos:column="3">stdout<pos:position pos:line="943" pos:column="9"/></name></expr></argument>)<pos:position pos:line="943" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="943" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="944" pos:column="2">fputs<pos:position pos:line="944" pos:column="7"/></name><argument_list pos:line="944" pos:column="7">(
<argument><expr><literal type="string" pos:line="945" pos:column="1">"              Note  that  to  be able to specify a URL in the config file, you\n"<pos:position pos:line="945" pos:column="83"/></literal>
<literal type="string" pos:line="946" pos:column="1">"              need to specify it using the --url option,  and  not  by  simply\n"<pos:position pos:line="946" pos:column="83"/></literal>
<literal type="string" pos:line="947" pos:column="1">"              writing  the  URL  on its own line. So, it could look similar to\n"<pos:position pos:line="947" pos:column="83"/></literal>
<literal type="string" pos:line="948" pos:column="1">"              this:\n"<pos:position pos:line="948" pos:column="24"/></literal>
<literal type="string" pos:line="949" pos:column="1">"\n"<pos:position pos:line="949" pos:column="5"/></literal>
<literal type="string" pos:line="950" pos:column="1">"              url = \"http://curl.haxx.se/docs/\"\n"<pos:position pos:line="950" pos:column="54"/></literal>
<literal type="string" pos:line="951" pos:column="1">"\n"<pos:position pos:line="951" pos:column="5"/></literal>
<literal type="string" pos:line="952" pos:column="1">"              Long option names can optionally be given  in  the  config  file\n"<pos:position pos:line="952" pos:column="83"/></literal>
<literal type="string" pos:line="953" pos:column="1">"              without the initial double dashes.\n"<pos:position pos:line="953" pos:column="53"/></literal>
<literal type="string" pos:line="954" pos:column="1">"\n"<pos:position pos:line="954" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="955" pos:column="3">stdout<pos:position pos:line="955" pos:column="9"/></name></expr></argument>)<pos:position pos:line="955" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="955" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="956" pos:column="2">fputs<pos:position pos:line="956" pos:column="7"/></name><argument_list pos:line="956" pos:column="7">(
<argument><expr><literal type="string" pos:line="957" pos:column="1">"              When curl is invoked, it always (unless -q is used) checks for a\n"<pos:position pos:line="957" pos:column="83"/></literal>
<literal type="string" pos:line="958" pos:column="1">"              default config file and uses it if  found.  The  default  config\n"<pos:position pos:line="958" pos:column="83"/></literal>
<literal type="string" pos:line="959" pos:column="1">"              file is checked for in the following places in this order:\n"<pos:position pos:line="959" pos:column="77"/></literal>
<literal type="string" pos:line="960" pos:column="1">"\n"<pos:position pos:line="960" pos:column="5"/></literal>
<literal type="string" pos:line="961" pos:column="1">"              1)  curl  tries  to find the \"home dir\": It first checks for the\n"<pos:position pos:line="961" pos:column="85"/></literal>
<literal type="string" pos:line="962" pos:column="1">"              CURL_HOME and then the HOME environment variables. Failing that,\n"<pos:position pos:line="962" pos:column="83"/></literal>
<literal type="string" pos:line="963" pos:column="1">"              it  uses getpwuid() on UNIX-like systems (which returns the home\n"<pos:position pos:line="963" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="964" pos:column="3">stdout<pos:position pos:line="964" pos:column="9"/></name></expr></argument>)<pos:position pos:line="964" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="964" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="965" pos:column="2">fputs<pos:position pos:line="965" pos:column="7"/></name><argument_list pos:line="965" pos:column="7">(
<argument><expr><literal type="string" pos:line="966" pos:column="1">"              dir given the current user in your system). On Windows, it  then\n"<pos:position pos:line="966" pos:column="83"/></literal>
<literal type="string" pos:line="967" pos:column="1">"              checks for the APPDATA variable, or as a last resort the '%USER-\n"<pos:position pos:line="967" pos:column="83"/></literal>
<literal type="string" pos:line="968" pos:column="1">"              PROFILE%\\Application Data'.\n"<pos:position pos:line="968" pos:column="47"/></literal>
<literal type="string" pos:line="969" pos:column="1">"\n"<pos:position pos:line="969" pos:column="5"/></literal>
<literal type="string" pos:line="970" pos:column="1">"              2) On windows, if there is no _curlrc file in the home  dir,  it\n"<pos:position pos:line="970" pos:column="83"/></literal>
<literal type="string" pos:line="971" pos:column="1">"              checks for one in the same dir the curl executable is placed. On\n"<pos:position pos:line="971" pos:column="83"/></literal>
<literal type="string" pos:line="972" pos:column="1">"              UNIX-like systems, it will simply try to load .curlrc  from  the\n"<pos:position pos:line="972" pos:column="83"/></literal>
<literal type="string" pos:line="973" pos:column="1">"              determined home dir.\n"<pos:position pos:line="973" pos:column="39"/></literal>
<literal type="string" pos:line="974" pos:column="1">"\n"<pos:position pos:line="974" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="975" pos:column="3">stdout<pos:position pos:line="975" pos:column="9"/></name></expr></argument>)<pos:position pos:line="975" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="975" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="976" pos:column="2">fputs<pos:position pos:line="976" pos:column="7"/></name><argument_list pos:line="976" pos:column="7">(
<argument><expr><literal type="string" pos:line="977" pos:column="1">"              # --- Example file ---\n"<pos:position pos:line="977" pos:column="41"/></literal>
<literal type="string" pos:line="978" pos:column="1">"              # this is a comment\n"<pos:position pos:line="978" pos:column="38"/></literal>
<literal type="string" pos:line="979" pos:column="1">"              url = \"curl.haxx.se\"\n"<pos:position pos:line="979" pos:column="41"/></literal>
<literal type="string" pos:line="980" pos:column="1">"              output = \"curlhere.html\"\n"<pos:position pos:line="980" pos:column="45"/></literal>
<literal type="string" pos:line="981" pos:column="1">"              user-agent = \"superagent/1.0\"\n"<pos:position pos:line="981" pos:column="50"/></literal>
<literal type="string" pos:line="982" pos:column="1">"\n"<pos:position pos:line="982" pos:column="5"/></literal>
<literal type="string" pos:line="983" pos:column="1">"              # and fetch another URL too\n"<pos:position pos:line="983" pos:column="46"/></literal>
<literal type="string" pos:line="984" pos:column="1">"              url = \"curl.haxx.se/docs/manpage.html\"\n"<pos:position pos:line="984" pos:column="59"/></literal>
<literal type="string" pos:line="985" pos:column="1">"              -O\n"<pos:position pos:line="985" pos:column="21"/></literal>
<literal type="string" pos:line="986" pos:column="1">"              referer = \"http://nowhereatall.com/\"\n"<pos:position pos:line="986" pos:column="57"/></literal>
<literal type="string" pos:line="987" pos:column="1">"              # --- End of example file ---\n"<pos:position pos:line="987" pos:column="48"/></literal>
<literal type="string" pos:line="988" pos:column="1">"\n"<pos:position pos:line="988" pos:column="5"/></literal>
<literal type="string" pos:line="989" pos:column="1">"              This  option  can be used multiple times to load multiple config\n"<pos:position pos:line="989" pos:column="83"/></literal>
<literal type="string" pos:line="990" pos:column="1">"              files.\n"<pos:position pos:line="990" pos:column="25"/></literal>
<literal type="string" pos:line="991" pos:column="1">"\n"<pos:position pos:line="991" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="992" pos:column="3">stdout<pos:position pos:line="992" pos:column="9"/></name></expr></argument>)<pos:position pos:line="992" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="992" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="993" pos:column="2">fputs<pos:position pos:line="993" pos:column="7"/></name><argument_list pos:line="993" pos:column="7">(
<argument><expr><literal type="string" pos:line="994" pos:column="1">"       --keepalive-time &lt;seconds&gt;\n"<pos:position pos:line="994" pos:column="44"/></literal>
<literal type="string" pos:line="995" pos:column="1">"              This option sets the time a  connection  needs  to  remain  idle\n"<pos:position pos:line="995" pos:column="83"/></literal>
<literal type="string" pos:line="996" pos:column="1">"              before  sending keepalive probes and the time between individual\n"<pos:position pos:line="996" pos:column="83"/></literal>
<literal type="string" pos:line="997" pos:column="1">"              keepalive probes. It is currently effective on operating systems\n"<pos:position pos:line="997" pos:column="83"/></literal>
<literal type="string" pos:line="998" pos:column="1">"              offering  the  TCP_KEEPIDLE  and  TCP_KEEPINTVL  socket  options\n"<pos:position pos:line="998" pos:column="83"/></literal>
<literal type="string" pos:line="999" pos:column="1">"              (meaning Linux, recent AIX, HP-UX and more). This option has  no\n"<pos:position pos:line="999" pos:column="83"/></literal>
<literal type="string" pos:line="1000" pos:column="1">"              effect if --no-keepalive is used. (Added in 7.18.0)\n"<pos:position pos:line="1000" pos:column="70"/></literal>
<literal type="string" pos:line="1001" pos:column="1">"\n"<pos:position pos:line="1001" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1002" pos:column="3">stdout<pos:position pos:line="1002" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1002" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1002" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1003" pos:column="2">fputs<pos:position pos:line="1003" pos:column="7"/></name><argument_list pos:line="1003" pos:column="7">(
<argument><expr><literal type="string" pos:line="1004" pos:column="1">"              If  this option is used multiple times, the last occurrence sets\n"<pos:position pos:line="1004" pos:column="83"/></literal>
<literal type="string" pos:line="1005" pos:column="1">"              the amount. If unspecified, the option defaults to 60 seconds.\n"<pos:position pos:line="1005" pos:column="81"/></literal>
<literal type="string" pos:line="1006" pos:column="1">"\n"<pos:position pos:line="1006" pos:column="5"/></literal>
<literal type="string" pos:line="1007" pos:column="1">"       --key &lt;key&gt;\n"<pos:position pos:line="1007" pos:column="29"/></literal>
<literal type="string" pos:line="1008" pos:column="1">"              (SSL/SSH) Private key file name. Allows you to provide your pri-\n"<pos:position pos:line="1008" pos:column="83"/></literal>
<literal type="string" pos:line="1009" pos:column="1">"              vate key in this separate file.\n"<pos:position pos:line="1009" pos:column="50"/></literal>
<literal type="string" pos:line="1010" pos:column="1">"\n"<pos:position pos:line="1010" pos:column="5"/></literal>
<literal type="string" pos:line="1011" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1011" pos:column="83"/></literal>
<literal type="string" pos:line="1012" pos:column="1">"\n"<pos:position pos:line="1012" pos:column="5"/></literal>
<literal type="string" pos:line="1013" pos:column="1">"       --key-type &lt;type&gt;\n"<pos:position pos:line="1013" pos:column="35"/></literal>
<literal type="string" pos:line="1014" pos:column="1">"              (SSL)  Private key file type. Specify which type your --key pro-\n"<pos:position pos:line="1014" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1015" pos:column="3">stdout<pos:position pos:line="1015" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1015" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1015" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1016" pos:column="2">fputs<pos:position pos:line="1016" pos:column="7"/></name><argument_list pos:line="1016" pos:column="7">(
<argument><expr><literal type="string" pos:line="1017" pos:column="1">"              vided private key is. DER, PEM, and ENG are  supported.  If  not\n"<pos:position pos:line="1017" pos:column="83"/></literal>
<literal type="string" pos:line="1018" pos:column="1">"              specified, PEM is assumed.\n"<pos:position pos:line="1018" pos:column="45"/></literal>
<literal type="string" pos:line="1019" pos:column="1">"\n"<pos:position pos:line="1019" pos:column="5"/></literal>
<literal type="string" pos:line="1020" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1020" pos:column="83"/></literal>
<literal type="string" pos:line="1021" pos:column="1">"\n"<pos:position pos:line="1021" pos:column="5"/></literal>
<literal type="string" pos:line="1022" pos:column="1">"       --krb &lt;level&gt;\n"<pos:position pos:line="1022" pos:column="31"/></literal>
<literal type="string" pos:line="1023" pos:column="1">"              (FTP)  Enable Kerberos authentication and use. The level must be\n"<pos:position pos:line="1023" pos:column="83"/></literal>
<literal type="string" pos:line="1024" pos:column="1">"              entered and should be one of 'clear', 'safe', 'confidential', or\n"<pos:position pos:line="1024" pos:column="83"/></literal>
<literal type="string" pos:line="1025" pos:column="1">"              'private'.  Should  you  use  a  level that is not one of these,\n"<pos:position pos:line="1025" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1026" pos:column="3">stdout<pos:position pos:line="1026" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1026" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1026" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1027" pos:column="2">fputs<pos:position pos:line="1027" pos:column="7"/></name><argument_list pos:line="1027" pos:column="7">(
<argument><expr><literal type="string" pos:line="1028" pos:column="1">"              'private' will instead be used.\n"<pos:position pos:line="1028" pos:column="50"/></literal>
<literal type="string" pos:line="1029" pos:column="1">"\n"<pos:position pos:line="1029" pos:column="5"/></literal>
<literal type="string" pos:line="1030" pos:column="1">"              This option requires a library built with  kerberos4  or  GSSAPI\n"<pos:position pos:line="1030" pos:column="83"/></literal>
<literal type="string" pos:line="1031" pos:column="1">"              (GSS-Negotiate) support. This is not very common. Use -V, --ver-\n"<pos:position pos:line="1031" pos:column="83"/></literal>
<literal type="string" pos:line="1032" pos:column="1">"              sion to see if your curl supports it.\n"<pos:position pos:line="1032" pos:column="56"/></literal>
<literal type="string" pos:line="1033" pos:column="1">"\n"<pos:position pos:line="1033" pos:column="5"/></literal>
<literal type="string" pos:line="1034" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1034" pos:column="83"/></literal>
<literal type="string" pos:line="1035" pos:column="1">"\n"<pos:position pos:line="1035" pos:column="5"/></literal>
<literal type="string" pos:line="1036" pos:column="1">"       -l, --list-only\n"<pos:position pos:line="1036" pos:column="27"/></literal>
<literal type="string" pos:line="1037" pos:column="1">"              (FTP) When listing an FTP directory, this switch forces a  name-\n"<pos:position pos:line="1037" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1038" pos:column="3">stdout<pos:position pos:line="1038" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1038" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1038" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1039" pos:column="2">fputs<pos:position pos:line="1039" pos:column="7"/></name><argument_list pos:line="1039" pos:column="7">(
<argument><expr><literal type="string" pos:line="1040" pos:column="1">"              only  view.   Especially useful if you want to machine-parse the\n"<pos:position pos:line="1040" pos:column="83"/></literal>
<literal type="string" pos:line="1041" pos:column="1">"              contents of an FTP directory since  the  normal  directory  view\n"<pos:position pos:line="1041" pos:column="83"/></literal>
<literal type="string" pos:line="1042" pos:column="1">"              doesn't use a standard look or format.\n"<pos:position pos:line="1042" pos:column="57"/></literal>
<literal type="string" pos:line="1043" pos:column="1">"\n"<pos:position pos:line="1043" pos:column="5"/></literal>
<literal type="string" pos:line="1044" pos:column="1">"              This  option  causes  an  FTP NLST command to be sent.  Some FTP\n"<pos:position pos:line="1044" pos:column="83"/></literal>
<literal type="string" pos:line="1045" pos:column="1">"              servers list only files in their response to NLST; they  do  not\n"<pos:position pos:line="1045" pos:column="83"/></literal>
<literal type="string" pos:line="1046" pos:column="1">"              include subdirectories and symbolic links.\n"<pos:position pos:line="1046" pos:column="61"/></literal>
<literal type="string" pos:line="1047" pos:column="1">"\n"<pos:position pos:line="1047" pos:column="5"/></literal>
<literal type="string" pos:line="1048" pos:column="1">"       -L, --location\n"<pos:position pos:line="1048" pos:column="26"/></literal></expr></argument>
, <argument><expr><name pos:line="1049" pos:column="3">stdout<pos:position pos:line="1049" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1049" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1049" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1050" pos:column="2">fputs<pos:position pos:line="1050" pos:column="7"/></name><argument_list pos:line="1050" pos:column="7">(
<argument><expr><literal type="string" pos:line="1051" pos:column="1">"              (HTTP/HTTPS)  If  the server reports that the requested page has\n"<pos:position pos:line="1051" pos:column="83"/></literal>
<literal type="string" pos:line="1052" pos:column="1">"              moved to a different location (indicated with a Location: header\n"<pos:position pos:line="1052" pos:column="83"/></literal>
<literal type="string" pos:line="1053" pos:column="1">"              and  a  3XX  response code), this option will make curl redo the\n"<pos:position pos:line="1053" pos:column="83"/></literal>
<literal type="string" pos:line="1054" pos:column="1">"              request on the new place. If used together with -i, --include or\n"<pos:position pos:line="1054" pos:column="83"/></literal>
<literal type="string" pos:line="1055" pos:column="1">"              -I, --head, headers from all requested pages will be shown. When\n"<pos:position pos:line="1055" pos:column="83"/></literal>
<literal type="string" pos:line="1056" pos:column="1">"              authentication is used, curl only sends its credentials  to  the\n"<pos:position pos:line="1056" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1057" pos:column="3">stdout<pos:position pos:line="1057" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1057" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1057" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1058" pos:column="2">fputs<pos:position pos:line="1058" pos:column="7"/></name><argument_list pos:line="1058" pos:column="7">(
<argument><expr><literal type="string" pos:line="1059" pos:column="1">"              initial  host.  If a redirect takes curl to a different host, it\n"<pos:position pos:line="1059" pos:column="83"/></literal>
<literal type="string" pos:line="1060" pos:column="1">"              won't be able to intercept the user+password. See  also  --loca-\n"<pos:position pos:line="1060" pos:column="83"/></literal>
<literal type="string" pos:line="1061" pos:column="1">"              tion-trusted  on how to change this. You can limit the amount of\n"<pos:position pos:line="1061" pos:column="83"/></literal>
<literal type="string" pos:line="1062" pos:column="1">"              redirects to follow by using the --max-redirs option.\n"<pos:position pos:line="1062" pos:column="72"/></literal>
<literal type="string" pos:line="1063" pos:column="1">"\n"<pos:position pos:line="1063" pos:column="5"/></literal>
<literal type="string" pos:line="1064" pos:column="1">"              When curl follows a redirect and the request is not a plain  GET\n"<pos:position pos:line="1064" pos:column="83"/></literal>
<literal type="string" pos:line="1065" pos:column="1">"              (for example POST or PUT), it will do the following request with\n"<pos:position pos:line="1065" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1066" pos:column="3">stdout<pos:position pos:line="1066" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1066" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1066" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1067" pos:column="2">fputs<pos:position pos:line="1067" pos:column="7"/></name><argument_list pos:line="1067" pos:column="7">(
<argument><expr><literal type="string" pos:line="1068" pos:column="1">"              a GET if the HTTP response was 301, 302, or 303. If the response\n"<pos:position pos:line="1068" pos:column="83"/></literal>
<literal type="string" pos:line="1069" pos:column="1">"              code  was  any  other  3xx code, curl will re-send the following\n"<pos:position pos:line="1069" pos:column="83"/></literal>
<literal type="string" pos:line="1070" pos:column="1">"              request using the same unmodified method.\n"<pos:position pos:line="1070" pos:column="60"/></literal>
<literal type="string" pos:line="1071" pos:column="1">"\n"<pos:position pos:line="1071" pos:column="5"/></literal>
<literal type="string" pos:line="1072" pos:column="1">"       --libcurl &lt;file&gt;\n"<pos:position pos:line="1072" pos:column="34"/></literal>
<literal type="string" pos:line="1073" pos:column="1">"              Append this option to any ordinary curl command  line,  and  you\n"<pos:position pos:line="1073" pos:column="83"/></literal>
<literal type="string" pos:line="1074" pos:column="1">"              will  get a libcurl-using C source code written to the file that\n"<pos:position pos:line="1074" pos:column="83"/></literal>
<literal type="string" pos:line="1075" pos:column="1">"              does the equivalent of what your command-line operation does!\n"<pos:position pos:line="1075" pos:column="80"/></literal>
<literal type="string" pos:line="1076" pos:column="1">"\n"<pos:position pos:line="1076" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1077" pos:column="3">stdout<pos:position pos:line="1077" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1077" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1077" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1078" pos:column="2">fputs<pos:position pos:line="1078" pos:column="7"/></name><argument_list pos:line="1078" pos:column="7">(
<argument><expr><literal type="string" pos:line="1079" pos:column="1">"              If this option is used several times, the last given  file  name\n"<pos:position pos:line="1079" pos:column="83"/></literal>
<literal type="string" pos:line="1080" pos:column="1">"              will be used. (Added in 7.16.1)\n"<pos:position pos:line="1080" pos:column="50"/></literal>
<literal type="string" pos:line="1081" pos:column="1">"\n"<pos:position pos:line="1081" pos:column="5"/></literal>
<literal type="string" pos:line="1082" pos:column="1">"       --limit-rate &lt;speed&gt;\n"<pos:position pos:line="1082" pos:column="38"/></literal>
<literal type="string" pos:line="1083" pos:column="1">"              Specify  the  maximum  transfer  rate you want curl to use. This\n"<pos:position pos:line="1083" pos:column="83"/></literal>
<literal type="string" pos:line="1084" pos:column="1">"              feature is useful if you have a limited pipe and you'd like your\n"<pos:position pos:line="1084" pos:column="83"/></literal>
<literal type="string" pos:line="1085" pos:column="1">"              transfer not to use your entire bandwidth.\n"<pos:position pos:line="1085" pos:column="61"/></literal>
<literal type="string" pos:line="1086" pos:column="1">"\n"<pos:position pos:line="1086" pos:column="5"/></literal>
<literal type="string" pos:line="1087" pos:column="1">"              The  given speed is measured in bytes/second, unless a suffix is\n"<pos:position pos:line="1087" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1088" pos:column="3">stdout<pos:position pos:line="1088" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1088" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1088" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1089" pos:column="2">fputs<pos:position pos:line="1089" pos:column="7"/></name><argument_list pos:line="1089" pos:column="7">(
<argument><expr><literal type="string" pos:line="1090" pos:column="1">"              appended.  Appending 'k' or 'K' will count the number  as  kilo-\n"<pos:position pos:line="1090" pos:column="83"/></literal>
<literal type="string" pos:line="1091" pos:column="1">"              bytes,  'm'  or M' makes it megabytes, while 'g' or 'G' makes it\n"<pos:position pos:line="1091" pos:column="83"/></literal>
<literal type="string" pos:line="1092" pos:column="1">"              gigabytes. Examples: 200K, 3m and 1G.\n"<pos:position pos:line="1092" pos:column="56"/></literal>
<literal type="string" pos:line="1093" pos:column="1">"\n"<pos:position pos:line="1093" pos:column="5"/></literal>
<literal type="string" pos:line="1094" pos:column="1">"              The given rate is the average speed counted  during  the  entire\n"<pos:position pos:line="1094" pos:column="83"/></literal>
<literal type="string" pos:line="1095" pos:column="1">"              transfer. It means that curl might use higher transfer speeds in\n"<pos:position pos:line="1095" pos:column="83"/></literal>
<literal type="string" pos:line="1096" pos:column="1">"              short bursts, but over time it uses no more than the given rate.\n"<pos:position pos:line="1096" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1097" pos:column="3">stdout<pos:position pos:line="1097" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1097" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1097" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1098" pos:column="2">fputs<pos:position pos:line="1098" pos:column="7"/></name><argument_list pos:line="1098" pos:column="7">(
<argument><expr><literal type="string" pos:line="1099" pos:column="1">"              If you also use the -Y, --speed-limit option, that  option  will\n"<pos:position pos:line="1099" pos:column="83"/></literal>
<literal type="string" pos:line="1100" pos:column="1">"              take precedence and might cripple the rate-limiting slightly, to\n"<pos:position pos:line="1100" pos:column="83"/></literal>
<literal type="string" pos:line="1101" pos:column="1">"              help keeping the speed-limit logic working.\n"<pos:position pos:line="1101" pos:column="62"/></literal>
<literal type="string" pos:line="1102" pos:column="1">"\n"<pos:position pos:line="1102" pos:column="5"/></literal>
<literal type="string" pos:line="1103" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1103" pos:column="83"/></literal>
<literal type="string" pos:line="1104" pos:column="1">"\n"<pos:position pos:line="1104" pos:column="5"/></literal>
<literal type="string" pos:line="1105" pos:column="1">"       --local-port &lt;num&gt;[-num]\n"<pos:position pos:line="1105" pos:column="42"/></literal>
<literal type="string" pos:line="1106" pos:column="1">"              Set a preferred number or range of local port numbers to use for\n"<pos:position pos:line="1106" pos:column="83"/></literal>
<literal type="string" pos:line="1107" pos:column="1">"              the  connection(s).   Note  that  port  numbers  by nature are a\n"<pos:position pos:line="1107" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1108" pos:column="3">stdout<pos:position pos:line="1108" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1108" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1108" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1109" pos:column="2">fputs<pos:position pos:line="1109" pos:column="7"/></name><argument_list pos:line="1109" pos:column="7">(
<argument><expr><literal type="string" pos:line="1110" pos:column="1">"              scarce resource that will be busy at times so setting this range\n"<pos:position pos:line="1110" pos:column="83"/></literal>
<literal type="string" pos:line="1111" pos:column="1">"              to something too narrow might cause unnecessary connection setup\n"<pos:position pos:line="1111" pos:column="83"/></literal>
<literal type="string" pos:line="1112" pos:column="1">"              failures. (Added in 7.15.2)\n"<pos:position pos:line="1112" pos:column="46"/></literal>
<literal type="string" pos:line="1113" pos:column="1">"\n"<pos:position pos:line="1113" pos:column="5"/></literal>
<literal type="string" pos:line="1114" pos:column="1">"       --location-trusted\n"<pos:position pos:line="1114" pos:column="30"/></literal>
<literal type="string" pos:line="1115" pos:column="1">"              (HTTP/HTTPS) Like -L, --location, but  will  allow  sending  the\n"<pos:position pos:line="1115" pos:column="83"/></literal>
<literal type="string" pos:line="1116" pos:column="1">"              name + password to all hosts that the site may redirect to. This\n"<pos:position pos:line="1116" pos:column="83"/></literal>
<literal type="string" pos:line="1117" pos:column="1">"              may or may not introduce a security breach if the site redirects\n"<pos:position pos:line="1117" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1118" pos:column="3">stdout<pos:position pos:line="1118" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1118" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1118" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1119" pos:column="2">fputs<pos:position pos:line="1119" pos:column="7"/></name><argument_list pos:line="1119" pos:column="7">(
<argument><expr><literal type="string" pos:line="1120" pos:column="1">"              you  to  a  site  to  which you'll send your authentication info\n"<pos:position pos:line="1120" pos:column="83"/></literal>
<literal type="string" pos:line="1121" pos:column="1">"              (which is plaintext in the case of HTTP Basic authentication).\n"<pos:position pos:line="1121" pos:column="81"/></literal>
<literal type="string" pos:line="1122" pos:column="1">"\n"<pos:position pos:line="1122" pos:column="5"/></literal>
<literal type="string" pos:line="1123" pos:column="1">"       -m, --max-time &lt;seconds&gt;\n"<pos:position pos:line="1123" pos:column="42"/></literal>
<literal type="string" pos:line="1124" pos:column="1">"              Maximum time in seconds that you allow the  whole  operation  to\n"<pos:position pos:line="1124" pos:column="83"/></literal>
<literal type="string" pos:line="1125" pos:column="1">"              take.   This is useful for preventing your batch jobs from hang-\n"<pos:position pos:line="1125" pos:column="83"/></literal>
<literal type="string" pos:line="1126" pos:column="1">"              ing for hours due to slow networks or  links  going  down.   See\n"<pos:position pos:line="1126" pos:column="83"/></literal>
<literal type="string" pos:line="1127" pos:column="1">"              also the --connect-timeout option.\n"<pos:position pos:line="1127" pos:column="53"/></literal>
<literal type="string" pos:line="1128" pos:column="1">"\n"<pos:position pos:line="1128" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1129" pos:column="3">stdout<pos:position pos:line="1129" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1129" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1129" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1130" pos:column="2">fputs<pos:position pos:line="1130" pos:column="7"/></name><argument_list pos:line="1130" pos:column="7">(
<argument><expr><literal type="string" pos:line="1131" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1131" pos:column="83"/></literal>
<literal type="string" pos:line="1132" pos:column="1">"\n"<pos:position pos:line="1132" pos:column="5"/></literal>
<literal type="string" pos:line="1133" pos:column="1">"       --mail-auth &lt;address&gt;\n"<pos:position pos:line="1133" pos:column="39"/></literal>
<literal type="string" pos:line="1134" pos:column="1">"              (SMTP)  Specify  a  single address. This will be used to specify\n"<pos:position pos:line="1134" pos:column="83"/></literal>
<literal type="string" pos:line="1135" pos:column="1">"              the authentication address (identity)  of  a  submitted  message\n"<pos:position pos:line="1135" pos:column="83"/></literal>
<literal type="string" pos:line="1136" pos:column="1">"              that is being relayed to another server.\n"<pos:position pos:line="1136" pos:column="59"/></literal>
<literal type="string" pos:line="1137" pos:column="1">"\n"<pos:position pos:line="1137" pos:column="5"/></literal>
<literal type="string" pos:line="1138" pos:column="1">"              (Added in 7.25.0)\n"<pos:position pos:line="1138" pos:column="36"/></literal>
<literal type="string" pos:line="1139" pos:column="1">"\n"<pos:position pos:line="1139" pos:column="5"/></literal>
<literal type="string" pos:line="1140" pos:column="1">"       --mail-from &lt;address&gt;\n"<pos:position pos:line="1140" pos:column="39"/></literal>
<literal type="string" pos:line="1141" pos:column="1">"              (SMTP)  Specify  a single address that the given mail should get\n"<pos:position pos:line="1141" pos:column="83"/></literal>
<literal type="string" pos:line="1142" pos:column="1">"              sent from.\n"<pos:position pos:line="1142" pos:column="29"/></literal>
<literal type="string" pos:line="1143" pos:column="1">"\n"<pos:position pos:line="1143" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1144" pos:column="3">stdout<pos:position pos:line="1144" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1144" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1144" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1145" pos:column="2">fputs<pos:position pos:line="1145" pos:column="7"/></name><argument_list pos:line="1145" pos:column="7">(
<argument><expr><literal type="string" pos:line="1146" pos:column="1">"              (Added in 7.20.0)\n"<pos:position pos:line="1146" pos:column="36"/></literal>
<literal type="string" pos:line="1147" pos:column="1">"\n"<pos:position pos:line="1147" pos:column="5"/></literal>
<literal type="string" pos:line="1148" pos:column="1">"       --max-filesize &lt;bytes&gt;\n"<pos:position pos:line="1148" pos:column="40"/></literal>
<literal type="string" pos:line="1149" pos:column="1">"              Specify the maximum size (in bytes) of a file  to  download.  If\n"<pos:position pos:line="1149" pos:column="83"/></literal>
<literal type="string" pos:line="1150" pos:column="1">"              the  file requested is larger than this value, the transfer will\n"<pos:position pos:line="1150" pos:column="83"/></literal>
<literal type="string" pos:line="1151" pos:column="1">"              not start and curl will return with exit code 63.\n"<pos:position pos:line="1151" pos:column="68"/></literal>
<literal type="string" pos:line="1152" pos:column="1">"\n"<pos:position pos:line="1152" pos:column="5"/></literal>
<literal type="string" pos:line="1153" pos:column="1">"              NOTE: The file size is not always known prior to  download,  and\n"<pos:position pos:line="1153" pos:column="83"/></literal>
<literal type="string" pos:line="1154" pos:column="1">"              for such files this option has no effect even if the file trans-\n"<pos:position pos:line="1154" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1155" pos:column="3">stdout<pos:position pos:line="1155" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1155" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1155" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1156" pos:column="2">fputs<pos:position pos:line="1156" pos:column="7"/></name><argument_list pos:line="1156" pos:column="7">(
<argument><expr><literal type="string" pos:line="1157" pos:column="1">"              fer ends up being larger than this given  limit.  This  concerns\n"<pos:position pos:line="1157" pos:column="83"/></literal>
<literal type="string" pos:line="1158" pos:column="1">"              both FTP and HTTP transfers.\n"<pos:position pos:line="1158" pos:column="47"/></literal>
<literal type="string" pos:line="1159" pos:column="1">"\n"<pos:position pos:line="1159" pos:column="5"/></literal>
<literal type="string" pos:line="1160" pos:column="1">"       --mail-rcpt &lt;address&gt;\n"<pos:position pos:line="1160" pos:column="39"/></literal>
<literal type="string" pos:line="1161" pos:column="1">"              (SMTP)  Specify  a single address that the given mail should get\n"<pos:position pos:line="1161" pos:column="83"/></literal>
<literal type="string" pos:line="1162" pos:column="1">"              sent to. This option can be used multiple times to specify  many\n"<pos:position pos:line="1162" pos:column="83"/></literal>
<literal type="string" pos:line="1163" pos:column="1">"              recipients.\n"<pos:position pos:line="1163" pos:column="30"/></literal>
<literal type="string" pos:line="1164" pos:column="1">"\n"<pos:position pos:line="1164" pos:column="5"/></literal>
<literal type="string" pos:line="1165" pos:column="1">"              (Added in 7.20.0)\n"<pos:position pos:line="1165" pos:column="36"/></literal>
<literal type="string" pos:line="1166" pos:column="1">"\n"<pos:position pos:line="1166" pos:column="5"/></literal>
<literal type="string" pos:line="1167" pos:column="1">"       --max-redirs &lt;num&gt;\n"<pos:position pos:line="1167" pos:column="36"/></literal>
<literal type="string" pos:line="1168" pos:column="1">"              Set  maximum  number  of  redirection-followings allowed. If -L,\n"<pos:position pos:line="1168" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1169" pos:column="3">stdout<pos:position pos:line="1169" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1169" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1169" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1170" pos:column="2">fputs<pos:position pos:line="1170" pos:column="7"/></name><argument_list pos:line="1170" pos:column="7">(
<argument><expr><literal type="string" pos:line="1171" pos:column="1">"              --location is used, this option can be used to prevent curl from\n"<pos:position pos:line="1171" pos:column="83"/></literal>
<literal type="string" pos:line="1172" pos:column="1">"              following  redirections  \"in absurdum\". By default, the limit is\n"<pos:position pos:line="1172" pos:column="85"/></literal>
<literal type="string" pos:line="1173" pos:column="1">"              set to 50 redirections. Set this option to -1 to make it  limit-\n"<pos:position pos:line="1173" pos:column="83"/></literal>
<literal type="string" pos:line="1174" pos:column="1">"              less.\n"<pos:position pos:line="1174" pos:column="24"/></literal>
<literal type="string" pos:line="1175" pos:column="1">"\n"<pos:position pos:line="1175" pos:column="5"/></literal>
<literal type="string" pos:line="1176" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1176" pos:column="83"/></literal>
<literal type="string" pos:line="1177" pos:column="1">"\n"<pos:position pos:line="1177" pos:column="5"/></literal>
<literal type="string" pos:line="1178" pos:column="1">"       --metalink\n"<pos:position pos:line="1178" pos:column="22"/></literal>
<literal type="string" pos:line="1179" pos:column="1">"              This  option  can  tell curl to parse and process a given URI as\n"<pos:position pos:line="1179" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1180" pos:column="3">stdout<pos:position pos:line="1180" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1180" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1180" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1181" pos:column="2">fputs<pos:position pos:line="1181" pos:column="7"/></name><argument_list pos:line="1181" pos:column="7">(
<argument><expr><literal type="string" pos:line="1182" pos:column="1">"              Metalink file (both version 3 and 4 (RFC  5854)  are  supported)\n"<pos:position pos:line="1182" pos:column="83"/></literal>
<literal type="string" pos:line="1183" pos:column="1">"              and  make use of the mirrors listed within for failover if there\n"<pos:position pos:line="1183" pos:column="83"/></literal>
<literal type="string" pos:line="1184" pos:column="1">"              are errors (such as the file or server not being available).  It\n"<pos:position pos:line="1184" pos:column="83"/></literal>
<literal type="string" pos:line="1185" pos:column="1">"              will  also  verify the hashe of the file after the download com-\n"<pos:position pos:line="1185" pos:column="83"/></literal>
<literal type="string" pos:line="1186" pos:column="1">"              pletes. The Metalink file itself is downloaded and processed  in\n"<pos:position pos:line="1186" pos:column="83"/></literal>
<literal type="string" pos:line="1187" pos:column="1">"              memory and not stored in the local file system.\n"<pos:position pos:line="1187" pos:column="66"/></literal>
<literal type="string" pos:line="1188" pos:column="1">"\n"<pos:position pos:line="1188" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1189" pos:column="3">stdout<pos:position pos:line="1189" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1189" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1189" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1190" pos:column="2">fputs<pos:position pos:line="1190" pos:column="7"/></name><argument_list pos:line="1190" pos:column="7">(
<argument><expr><literal type="string" pos:line="1191" pos:column="1">"              Example to use a remote Metalink file:\n"<pos:position pos:line="1191" pos:column="57"/></literal>
<literal type="string" pos:line="1192" pos:column="1">"\n"<pos:position pos:line="1192" pos:column="5"/></literal>
<literal type="string" pos:line="1193" pos:column="1">"              curl --metalink http://www.example.com/example.metalink\n"<pos:position pos:line="1193" pos:column="74"/></literal>
<literal type="string" pos:line="1194" pos:column="1">"\n"<pos:position pos:line="1194" pos:column="5"/></literal>
<literal type="string" pos:line="1195" pos:column="1">"              To use a Metalink file in the local file system, use FILE proto-\n"<pos:position pos:line="1195" pos:column="83"/></literal>
<literal type="string" pos:line="1196" pos:column="1">"              col (file://):\n"<pos:position pos:line="1196" pos:column="33"/></literal>
<literal type="string" pos:line="1197" pos:column="1">"\n"<pos:position pos:line="1197" pos:column="5"/></literal>
<literal type="string" pos:line="1198" pos:column="1">"              curl --metalink file://example.metalink\n"<pos:position pos:line="1198" pos:column="58"/></literal>
<literal type="string" pos:line="1199" pos:column="1">"\n"<pos:position pos:line="1199" pos:column="5"/></literal>
<literal type="string" pos:line="1200" pos:column="1">"              Please note that if FILE protocol is disabled, there is  no  way\n"<pos:position pos:line="1200" pos:column="83"/></literal>
<literal type="string" pos:line="1201" pos:column="1">"              to  use  a local Metalink file at the time of this writing. Also\n"<pos:position pos:line="1201" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1202" pos:column="3">stdout<pos:position pos:line="1202" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1202" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1202" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1203" pos:column="2">fputs<pos:position pos:line="1203" pos:column="7"/></name><argument_list pos:line="1203" pos:column="7">(
<argument><expr><literal type="string" pos:line="1204" pos:column="1">"              note  that  If  --metalink  and  --include  are  used  together,\n"<pos:position pos:line="1204" pos:column="83"/></literal>
<literal type="string" pos:line="1205" pos:column="1">"              --include  will be ignored. This is because including headers in\n"<pos:position pos:line="1205" pos:column="83"/></literal>
<literal type="string" pos:line="1206" pos:column="1">"              the response will break Metalink parser and if the  headers  are\n"<pos:position pos:line="1206" pos:column="83"/></literal>
<literal type="string" pos:line="1207" pos:column="1">"              included in the file described in Metalink file, hash check will\n"<pos:position pos:line="1207" pos:column="83"/></literal>
<literal type="string" pos:line="1208" pos:column="1">"              fail.\n"<pos:position pos:line="1208" pos:column="24"/></literal>
<literal type="string" pos:line="1209" pos:column="1">"\n"<pos:position pos:line="1209" pos:column="5"/></literal>
<literal type="string" pos:line="1210" pos:column="1">"              (Added in 7.27.0, if built against the libmetalink library.)\n"<pos:position pos:line="1210" pos:column="79"/></literal>
<literal type="string" pos:line="1211" pos:column="1">"\n"<pos:position pos:line="1211" pos:column="5"/></literal>
<literal type="string" pos:line="1212" pos:column="1">"       -n, --netrc\n"<pos:position pos:line="1212" pos:column="23"/></literal></expr></argument>
, <argument><expr><name pos:line="1213" pos:column="3">stdout<pos:position pos:line="1213" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1213" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1213" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1214" pos:column="2">fputs<pos:position pos:line="1214" pos:column="7"/></name><argument_list pos:line="1214" pos:column="7">(
<argument><expr><literal type="string" pos:line="1215" pos:column="1">"              Makes curl scan the .netrc  (_netrc  on  Windows)  file  in  the\n"<pos:position pos:line="1215" pos:column="83"/></literal>
<literal type="string" pos:line="1216" pos:column="1">"              user's home directory for login name and password. This is typi-\n"<pos:position pos:line="1216" pos:column="83"/></literal>
<literal type="string" pos:line="1217" pos:column="1">"              cally used for FTP on UNIX. If used with HTTP, curl will  enable\n"<pos:position pos:line="1217" pos:column="83"/></literal>
<literal type="string" pos:line="1218" pos:column="1">"              user  authentication.  See netrc(4) or ftp(1) for details on the\n"<pos:position pos:line="1218" pos:column="83"/></literal>
<literal type="string" pos:line="1219" pos:column="1">"              file format. Curl will not complain if that  file  doesn't  have\n"<pos:position pos:line="1219" pos:column="83"/></literal>
<literal type="string" pos:line="1220" pos:column="1">"              the  right permissions (it should not be either world- or group-\n"<pos:position pos:line="1220" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1221" pos:column="3">stdout<pos:position pos:line="1221" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1221" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1221" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1222" pos:column="2">fputs<pos:position pos:line="1222" pos:column="7"/></name><argument_list pos:line="1222" pos:column="7">(
<argument><expr><literal type="string" pos:line="1223" pos:column="1">"              readable). The environment variable \"HOME\" is used to  find  the\n"<pos:position pos:line="1223" pos:column="85"/></literal>
<literal type="string" pos:line="1224" pos:column="1">"              home directory.\n"<pos:position pos:line="1224" pos:column="34"/></literal>
<literal type="string" pos:line="1225" pos:column="1">"\n"<pos:position pos:line="1225" pos:column="5"/></literal>
<literal type="string" pos:line="1226" pos:column="1">"              A  quick  and  very  simple  example of how to setup a .netrc to\n"<pos:position pos:line="1226" pos:column="83"/></literal>
<literal type="string" pos:line="1227" pos:column="1">"              allow curl to FTP to the machine host.domain.com with user  name\n"<pos:position pos:line="1227" pos:column="83"/></literal>
<literal type="string" pos:line="1228" pos:column="1">"              'myself' and password 'secret' should look similar to:\n"<pos:position pos:line="1228" pos:column="73"/></literal>
<literal type="string" pos:line="1229" pos:column="1">"\n"<pos:position pos:line="1229" pos:column="5"/></literal>
<literal type="string" pos:line="1230" pos:column="1">"              machine host.domain.com login myself password secret\n"<pos:position pos:line="1230" pos:column="71"/></literal>
<literal type="string" pos:line="1231" pos:column="1">"\n"<pos:position pos:line="1231" pos:column="5"/></literal>
<literal type="string" pos:line="1232" pos:column="1">"       -N, --no-buffer\n"<pos:position pos:line="1232" pos:column="27"/></literal></expr></argument>
, <argument><expr><name pos:line="1233" pos:column="3">stdout<pos:position pos:line="1233" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1233" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1233" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1234" pos:column="2">fputs<pos:position pos:line="1234" pos:column="7"/></name><argument_list pos:line="1234" pos:column="7">(
<argument><expr><literal type="string" pos:line="1235" pos:column="1">"              Disables the buffering of the output stream. In normal work sit-\n"<pos:position pos:line="1235" pos:column="83"/></literal>
<literal type="string" pos:line="1236" pos:column="1">"              uations, curl will use a standard buffered  output  stream  that\n"<pos:position pos:line="1236" pos:column="83"/></literal>
<literal type="string" pos:line="1237" pos:column="1">"              will have the effect that it will output the data in chunks, not\n"<pos:position pos:line="1237" pos:column="83"/></literal>
<literal type="string" pos:line="1238" pos:column="1">"              necessarily exactly when the data arrives.   Using  this  option\n"<pos:position pos:line="1238" pos:column="83"/></literal>
<literal type="string" pos:line="1239" pos:column="1">"              will disable that buffering.\n"<pos:position pos:line="1239" pos:column="47"/></literal>
<literal type="string" pos:line="1240" pos:column="1">"\n"<pos:position pos:line="1240" pos:column="5"/></literal>
<literal type="string" pos:line="1241" pos:column="1">"              Note  that  this  is the negated option name documented. You can\n"<pos:position pos:line="1241" pos:column="83"/></literal>
<literal type="string" pos:line="1242" pos:column="1">"              thus use --buffer to enforce the buffering.\n"<pos:position pos:line="1242" pos:column="62"/></literal>
<literal type="string" pos:line="1243" pos:column="1">"\n"<pos:position pos:line="1243" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1244" pos:column="3">stdout<pos:position pos:line="1244" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1244" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1244" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1245" pos:column="2">fputs<pos:position pos:line="1245" pos:column="7"/></name><argument_list pos:line="1245" pos:column="7">(
<argument><expr><literal type="string" pos:line="1246" pos:column="1">"       --netrc-file\n"<pos:position pos:line="1246" pos:column="24"/></literal>
<literal type="string" pos:line="1247" pos:column="1">"              This option is similar to --netrc, except that you  provide  the\n"<pos:position pos:line="1247" pos:column="83"/></literal>
<literal type="string" pos:line="1248" pos:column="1">"              path  (absolute  or relative) to the netrc file that Curl should\n"<pos:position pos:line="1248" pos:column="83"/></literal>
<literal type="string" pos:line="1249" pos:column="1">"              use.  You can only specify one netrc  file  per  invocation.  If\n"<pos:position pos:line="1249" pos:column="83"/></literal>
<literal type="string" pos:line="1250" pos:column="1">"              several  --netrc-file  options  are  provided, only the last one\n"<pos:position pos:line="1250" pos:column="83"/></literal>
<literal type="string" pos:line="1251" pos:column="1">"              will be used.  (Added in 7.21.5)\n"<pos:position pos:line="1251" pos:column="51"/></literal>
<literal type="string" pos:line="1252" pos:column="1">"\n"<pos:position pos:line="1252" pos:column="5"/></literal>
<literal type="string" pos:line="1253" pos:column="1">"              This option overrides any use of --netrc as  they  are  mutually\n"<pos:position pos:line="1253" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1254" pos:column="3">stdout<pos:position pos:line="1254" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1254" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1254" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1255" pos:column="2">fputs<pos:position pos:line="1255" pos:column="7"/></name><argument_list pos:line="1255" pos:column="7">(
<argument><expr><literal type="string" pos:line="1256" pos:column="1">"              exclusive.  It will also abide by --netrc-optional if specified.\n"<pos:position pos:line="1256" pos:column="83"/></literal>
<literal type="string" pos:line="1257" pos:column="1">"\n"<pos:position pos:line="1257" pos:column="5"/></literal>
<literal type="string" pos:line="1258" pos:column="1">"       --netrc-optional\n"<pos:position pos:line="1258" pos:column="28"/></literal>
<literal type="string" pos:line="1259" pos:column="1">"              Very  similar to --netrc, but this option makes the .netrc usage\n"<pos:position pos:line="1259" pos:column="83"/></literal>
<literal type="string" pos:line="1260" pos:column="1">"              optional and not mandatory as the --netrc option does.\n"<pos:position pos:line="1260" pos:column="73"/></literal>
<literal type="string" pos:line="1261" pos:column="1">"\n"<pos:position pos:line="1261" pos:column="5"/></literal>
<literal type="string" pos:line="1262" pos:column="1">"       --negotiate\n"<pos:position pos:line="1262" pos:column="23"/></literal>
<literal type="string" pos:line="1263" pos:column="1">"              (HTTP) Enables GSS-Negotiate authentication.  The  GSS-Negotiate\n"<pos:position pos:line="1263" pos:column="83"/></literal>
<literal type="string" pos:line="1264" pos:column="1">"              method was designed by Microsoft and is used in their web appli-\n"<pos:position pos:line="1264" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1265" pos:column="3">stdout<pos:position pos:line="1265" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1265" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1265" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1266" pos:column="2">fputs<pos:position pos:line="1266" pos:column="7"/></name><argument_list pos:line="1266" pos:column="7">(
<argument><expr><literal type="string" pos:line="1267" pos:column="1">"              cations. It is  primarily  meant  as  a  support  for  Kerberos5\n"<pos:position pos:line="1267" pos:column="83"/></literal>
<literal type="string" pos:line="1268" pos:column="1">"              authentication but may be also used along with another authenti-\n"<pos:position pos:line="1268" pos:column="83"/></literal>
<literal type="string" pos:line="1269" pos:column="1">"              cation method. For more information see IETF draft draft-brezak-\n"<pos:position pos:line="1269" pos:column="83"/></literal>
<literal type="string" pos:line="1270" pos:column="1">"              spnego-http-04.txt.\n"<pos:position pos:line="1270" pos:column="38"/></literal>
<literal type="string" pos:line="1271" pos:column="1">"\n"<pos:position pos:line="1271" pos:column="5"/></literal>
<literal type="string" pos:line="1272" pos:column="1">"              If  you  want to enable Negotiate for your proxy authentication,\n"<pos:position pos:line="1272" pos:column="83"/></literal>
<literal type="string" pos:line="1273" pos:column="1">"              then use --proxy-negotiate.\n"<pos:position pos:line="1273" pos:column="46"/></literal>
<literal type="string" pos:line="1274" pos:column="1">"\n"<pos:position pos:line="1274" pos:column="5"/></literal>
<literal type="string" pos:line="1275" pos:column="1">"              This option requires a library built with GSSAPI  support.  This\n"<pos:position pos:line="1275" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1276" pos:column="3">stdout<pos:position pos:line="1276" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1276" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1276" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1277" pos:column="2">fputs<pos:position pos:line="1277" pos:column="7"/></name><argument_list pos:line="1277" pos:column="7">(
<argument><expr><literal type="string" pos:line="1278" pos:column="1">"              is  not  very  common.  Use -V, --version to see if your version\n"<pos:position pos:line="1278" pos:column="83"/></literal>
<literal type="string" pos:line="1279" pos:column="1">"              supports GSS-Negotiate.\n"<pos:position pos:line="1279" pos:column="42"/></literal>
<literal type="string" pos:line="1280" pos:column="1">"\n"<pos:position pos:line="1280" pos:column="5"/></literal>
<literal type="string" pos:line="1281" pos:column="1">"              When using this option, you must also provide a fake -u,  --user\n"<pos:position pos:line="1281" pos:column="83"/></literal>
<literal type="string" pos:line="1282" pos:column="1">"              option  to  activate the authentication code properly. Sending a\n"<pos:position pos:line="1282" pos:column="83"/></literal>
<literal type="string" pos:line="1283" pos:column="1">"              '-u :' is enough as the user  name  and  password  from  the  -u\n"<pos:position pos:line="1283" pos:column="83"/></literal>
<literal type="string" pos:line="1284" pos:column="1">"              option aren't actually used.\n"<pos:position pos:line="1284" pos:column="47"/></literal>
<literal type="string" pos:line="1285" pos:column="1">"\n"<pos:position pos:line="1285" pos:column="5"/></literal>
<literal type="string" pos:line="1286" pos:column="1">"              If  this option is used several times, the following occurrences\n"<pos:position pos:line="1286" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1287" pos:column="3">stdout<pos:position pos:line="1287" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1287" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1287" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1288" pos:column="2">fputs<pos:position pos:line="1288" pos:column="7"/></name><argument_list pos:line="1288" pos:column="7">(
<argument><expr><literal type="string" pos:line="1289" pos:column="1">"              make no difference.\n"<pos:position pos:line="1289" pos:column="38"/></literal>
<literal type="string" pos:line="1290" pos:column="1">"\n"<pos:position pos:line="1290" pos:column="5"/></literal>
<literal type="string" pos:line="1291" pos:column="1">"       --no-keepalive\n"<pos:position pos:line="1291" pos:column="26"/></literal>
<literal type="string" pos:line="1292" pos:column="1">"              Disables the use of keepalive messages on the TCP connection, as\n"<pos:position pos:line="1292" pos:column="83"/></literal>
<literal type="string" pos:line="1293" pos:column="1">"              by default curl enables them.\n"<pos:position pos:line="1293" pos:column="48"/></literal>
<literal type="string" pos:line="1294" pos:column="1">"\n"<pos:position pos:line="1294" pos:column="5"/></literal>
<literal type="string" pos:line="1295" pos:column="1">"              Note  that  this  is the negated option name documented. You can\n"<pos:position pos:line="1295" pos:column="83"/></literal>
<literal type="string" pos:line="1296" pos:column="1">"              thus use --keepalive to enforce keepalive.\n"<pos:position pos:line="1296" pos:column="61"/></literal>
<literal type="string" pos:line="1297" pos:column="1">"\n"<pos:position pos:line="1297" pos:column="5"/></literal>
<literal type="string" pos:line="1298" pos:column="1">"       --no-sessionid\n"<pos:position pos:line="1298" pos:column="26"/></literal>
<literal type="string" pos:line="1299" pos:column="1">"              (SSL) Disable curl's use of SSL session-ID caching.  By  default\n"<pos:position pos:line="1299" pos:column="83"/></literal>
<literal type="string" pos:line="1300" pos:column="1">"              all  transfers are done using the cache. Note that while nothing\n"<pos:position pos:line="1300" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1301" pos:column="3">stdout<pos:position pos:line="1301" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1301" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1301" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1302" pos:column="2">fputs<pos:position pos:line="1302" pos:column="7"/></name><argument_list pos:line="1302" pos:column="7">(
<argument><expr><literal type="string" pos:line="1303" pos:column="1">"              should ever get hurt by attempting  to  reuse  SSL  session-IDs,\n"<pos:position pos:line="1303" pos:column="83"/></literal>
<literal type="string" pos:line="1304" pos:column="1">"              there seem to be broken SSL implementations in the wild that may\n"<pos:position pos:line="1304" pos:column="83"/></literal>
<literal type="string" pos:line="1305" pos:column="1">"              require you to disable this in order for you to succeed.  (Added\n"<pos:position pos:line="1305" pos:column="83"/></literal>
<literal type="string" pos:line="1306" pos:column="1">"              in 7.16.0)\n"<pos:position pos:line="1306" pos:column="29"/></literal>
<literal type="string" pos:line="1307" pos:column="1">"\n"<pos:position pos:line="1307" pos:column="5"/></literal>
<literal type="string" pos:line="1308" pos:column="1">"              Note  that  this  is the negated option name documented. You can\n"<pos:position pos:line="1308" pos:column="83"/></literal>
<literal type="string" pos:line="1309" pos:column="1">"              thus use --sessionid to enforce session-ID caching.\n"<pos:position pos:line="1309" pos:column="70"/></literal>
<literal type="string" pos:line="1310" pos:column="1">"\n"<pos:position pos:line="1310" pos:column="5"/></literal>
<literal type="string" pos:line="1311" pos:column="1">"       --noproxy &lt;no-proxy-list&gt;\n"<pos:position pos:line="1311" pos:column="43"/></literal></expr></argument>
, <argument><expr><name pos:line="1312" pos:column="3">stdout<pos:position pos:line="1312" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1312" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1312" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1313" pos:column="2">fputs<pos:position pos:line="1313" pos:column="7"/></name><argument_list pos:line="1313" pos:column="7">(
<argument><expr><literal type="string" pos:line="1314" pos:column="1">"              Comma-separated list of hosts which do not use a proxy,  if  one\n"<pos:position pos:line="1314" pos:column="83"/></literal>
<literal type="string" pos:line="1315" pos:column="1">"              is  specified.  The only wildcard is a single * character, which\n"<pos:position pos:line="1315" pos:column="83"/></literal>
<literal type="string" pos:line="1316" pos:column="1">"              matches all hosts, and effectively disables the proxy. Each name\n"<pos:position pos:line="1316" pos:column="83"/></literal>
<literal type="string" pos:line="1317" pos:column="1">"              in  this  list  is matched as either a domain which contains the\n"<pos:position pos:line="1317" pos:column="83"/></literal>
<literal type="string" pos:line="1318" pos:column="1">"              hostname, or the hostname itself. For example,  local.com  would\n"<pos:position pos:line="1318" pos:column="83"/></literal>
<literal type="string" pos:line="1319" pos:column="1">"              match   local.com,  local.com:80,  and  www.local.com,  but  not\n"<pos:position pos:line="1319" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1320" pos:column="3">stdout<pos:position pos:line="1320" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1320" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1320" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1321" pos:column="2">fputs<pos:position pos:line="1321" pos:column="7"/></name><argument_list pos:line="1321" pos:column="7">(
<argument><expr><literal type="string" pos:line="1322" pos:column="1">"              www.notlocal.com.  (Added in 7.19.4).\n"<pos:position pos:line="1322" pos:column="56"/></literal>
<literal type="string" pos:line="1323" pos:column="1">"\n"<pos:position pos:line="1323" pos:column="5"/></literal>
<literal type="string" pos:line="1324" pos:column="1">"       --ntlm (HTTP) Enables  NTLM  authentication.  The  NTLM  authentication\n"<pos:position pos:line="1324" pos:column="83"/></literal>
<literal type="string" pos:line="1325" pos:column="1">"              method was designed by Microsoft and is used by IIS web servers.\n"<pos:position pos:line="1325" pos:column="83"/></literal>
<literal type="string" pos:line="1326" pos:column="1">"              It is a proprietary protocol, reverse-engineered by clever  peo-\n"<pos:position pos:line="1326" pos:column="83"/></literal>
<literal type="string" pos:line="1327" pos:column="1">"              ple and implemented in curl based on their efforts. This kind of\n"<pos:position pos:line="1327" pos:column="83"/></literal>
<literal type="string" pos:line="1328" pos:column="1">"              behavior should not be endorsed, you should  encourage  everyone\n"<pos:position pos:line="1328" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1329" pos:column="3">stdout<pos:position pos:line="1329" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1329" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1329" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1330" pos:column="2">fputs<pos:position pos:line="1330" pos:column="7"/></name><argument_list pos:line="1330" pos:column="7">(
<argument><expr><literal type="string" pos:line="1331" pos:column="1">"              who  uses  NTLM to switch to a public and documented authentica-\n"<pos:position pos:line="1331" pos:column="83"/></literal>
<literal type="string" pos:line="1332" pos:column="1">"              tion method instead, such as Digest.\n"<pos:position pos:line="1332" pos:column="55"/></literal>
<literal type="string" pos:line="1333" pos:column="1">"\n"<pos:position pos:line="1333" pos:column="5"/></literal>
<literal type="string" pos:line="1334" pos:column="1">"              If you want to enable NTLM for your proxy  authentication,  then\n"<pos:position pos:line="1334" pos:column="83"/></literal>
<literal type="string" pos:line="1335" pos:column="1">"              use --proxy-ntlm.\n"<pos:position pos:line="1335" pos:column="36"/></literal>
<literal type="string" pos:line="1336" pos:column="1">"\n"<pos:position pos:line="1336" pos:column="5"/></literal>
<literal type="string" pos:line="1337" pos:column="1">"              This  option  requires a library built with SSL support. Use -V,\n"<pos:position pos:line="1337" pos:column="83"/></literal>
<literal type="string" pos:line="1338" pos:column="1">"              --version to see if your curl supports NTLM.\n"<pos:position pos:line="1338" pos:column="63"/></literal>
<literal type="string" pos:line="1339" pos:column="1">"\n"<pos:position pos:line="1339" pos:column="5"/></literal>
<literal type="string" pos:line="1340" pos:column="1">"              If this option is used several times, the following  occurrences\n"<pos:position pos:line="1340" pos:column="83"/></literal>
<literal type="string" pos:line="1341" pos:column="1">"              make no difference.\n"<pos:position pos:line="1341" pos:column="38"/></literal></expr></argument>
, <argument><expr><name pos:line="1342" pos:column="3">stdout<pos:position pos:line="1342" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1342" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1342" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1343" pos:column="2">fputs<pos:position pos:line="1343" pos:column="7"/></name><argument_list pos:line="1343" pos:column="7">(
<argument><expr><literal type="string" pos:line="1344" pos:column="1">"       -o, --output &lt;file&gt;\n"<pos:position pos:line="1344" pos:column="37"/></literal>
<literal type="string" pos:line="1345" pos:column="1">"              Write output to &lt;file&gt; instead of stdout. If you are using {} or\n"<pos:position pos:line="1345" pos:column="89"/></literal>
<literal type="string" pos:line="1346" pos:column="1">"              [] to fetch multiple documents, you can use '#'  followed  by  a\n"<pos:position pos:line="1346" pos:column="83"/></literal>
<literal type="string" pos:line="1347" pos:column="1">"              number  in  the &lt;file&gt; specifier. That variable will be replaced\n"<pos:position pos:line="1347" pos:column="89"/></literal>
<literal type="string" pos:line="1348" pos:column="1">"              with the current string for the URL being fetched. Like in:\n"<pos:position pos:line="1348" pos:column="78"/></literal>
<literal type="string" pos:line="1349" pos:column="1">"\n"<pos:position pos:line="1349" pos:column="5"/></literal>
<literal type="string" pos:line="1350" pos:column="1">"                curl http://{one,two}.site.com -o \"file_#1.txt\"\n"<pos:position pos:line="1350" pos:column="70"/></literal>
<literal type="string" pos:line="1351" pos:column="1">"\n"<pos:position pos:line="1351" pos:column="5"/></literal>
<literal type="string" pos:line="1352" pos:column="1">"              or use several variables like:\n"<pos:position pos:line="1352" pos:column="49"/></literal>
<literal type="string" pos:line="1353" pos:column="1">"\n"<pos:position pos:line="1353" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1354" pos:column="3">stdout<pos:position pos:line="1354" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1354" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1354" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1355" pos:column="2">fputs<pos:position pos:line="1355" pos:column="7"/></name><argument_list pos:line="1355" pos:column="7">(
<argument><expr><literal type="string" pos:line="1356" pos:column="1">"                curl http://{site,host}.host[1-5].com -o \"#1_#2\"\n"<pos:position pos:line="1356" pos:column="71"/></literal>
<literal type="string" pos:line="1357" pos:column="1">"\n"<pos:position pos:line="1357" pos:column="5"/></literal>
<literal type="string" pos:line="1358" pos:column="1">"              You may use this option as many times as the number of URLs  you\n"<pos:position pos:line="1358" pos:column="83"/></literal>
<literal type="string" pos:line="1359" pos:column="1">"              have.\n"<pos:position pos:line="1359" pos:column="24"/></literal>
<literal type="string" pos:line="1360" pos:column="1">"\n"<pos:position pos:line="1360" pos:column="5"/></literal>
<literal type="string" pos:line="1361" pos:column="1">"              See  also  the --create-dirs option to create the local directo-\n"<pos:position pos:line="1361" pos:column="83"/></literal>
<literal type="string" pos:line="1362" pos:column="1">"              ries dynamically. Specifying the output as '-' (a  single  dash)\n"<pos:position pos:line="1362" pos:column="83"/></literal>
<literal type="string" pos:line="1363" pos:column="1">"              will force the output to be done to stdout.\n"<pos:position pos:line="1363" pos:column="62"/></literal>
<literal type="string" pos:line="1364" pos:column="1">"\n"<pos:position pos:line="1364" pos:column="5"/></literal>
<literal type="string" pos:line="1365" pos:column="1">"       -O, --remote-name\n"<pos:position pos:line="1365" pos:column="29"/></literal>
<literal type="string" pos:line="1366" pos:column="1">"              Write  output to a local file named like the remote file we get.\n"<pos:position pos:line="1366" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1367" pos:column="3">stdout<pos:position pos:line="1367" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1367" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1367" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1368" pos:column="2">fputs<pos:position pos:line="1368" pos:column="7"/></name><argument_list pos:line="1368" pos:column="7">(
<argument><expr><literal type="string" pos:line="1369" pos:column="1">"              (Only the file part of the remote file is used, the path is  cut\n"<pos:position pos:line="1369" pos:column="83"/></literal>
<literal type="string" pos:line="1370" pos:column="1">"              off.)\n"<pos:position pos:line="1370" pos:column="24"/></literal>
<literal type="string" pos:line="1371" pos:column="1">"\n"<pos:position pos:line="1371" pos:column="5"/></literal>
<literal type="string" pos:line="1372" pos:column="1">"              The  remote  file  name  to use for saving is extracted from the\n"<pos:position pos:line="1372" pos:column="83"/></literal>
<literal type="string" pos:line="1373" pos:column="1">"              given URL, nothing else.\n"<pos:position pos:line="1373" pos:column="43"/></literal>
<literal type="string" pos:line="1374" pos:column="1">"\n"<pos:position pos:line="1374" pos:column="5"/></literal>
<literal type="string" pos:line="1375" pos:column="1">"              Consequentially, the file will be saved in the  current  working\n"<pos:position pos:line="1375" pos:column="83"/></literal>
<literal type="string" pos:line="1376" pos:column="1">"              directory.  If you want the file saved in a different directory,\n"<pos:position pos:line="1376" pos:column="83"/></literal>
<literal type="string" pos:line="1377" pos:column="1">"              make sure you change current working directory before you invoke\n"<pos:position pos:line="1377" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1378" pos:column="3">stdout<pos:position pos:line="1378" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1378" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1378" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1379" pos:column="2">fputs<pos:position pos:line="1379" pos:column="7"/></name><argument_list pos:line="1379" pos:column="7">(
<argument><expr><literal type="string" pos:line="1380" pos:column="1">"              curl with the -O, --remote-name flag!\n"<pos:position pos:line="1380" pos:column="56"/></literal>
<literal type="string" pos:line="1381" pos:column="1">"\n"<pos:position pos:line="1381" pos:column="5"/></literal>
<literal type="string" pos:line="1382" pos:column="1">"              You  may use this option as many times as the number of URLs you\n"<pos:position pos:line="1382" pos:column="83"/></literal>
<literal type="string" pos:line="1383" pos:column="1">"              have.\n"<pos:position pos:line="1383" pos:column="24"/></literal>
<literal type="string" pos:line="1384" pos:column="1">"\n"<pos:position pos:line="1384" pos:column="5"/></literal>
<literal type="string" pos:line="1385" pos:column="1">"       -p, --proxytunnel\n"<pos:position pos:line="1385" pos:column="29"/></literal>
<literal type="string" pos:line="1386" pos:column="1">"              When an HTTP proxy is used (-x, --proxy), this option will cause\n"<pos:position pos:line="1386" pos:column="83"/></literal>
<literal type="string" pos:line="1387" pos:column="1">"              non-HTTP  protocols  to  attempt  to  tunnel  through  the proxy\n"<pos:position pos:line="1387" pos:column="83"/></literal>
<literal type="string" pos:line="1388" pos:column="1">"              instead of merely using it to do HTTP-like operations. The  tun-\n"<pos:position pos:line="1388" pos:column="83"/></literal>
<literal type="string" pos:line="1389" pos:column="1">"              nel  approach  is  made  with the HTTP proxy CONNECT request and\n"<pos:position pos:line="1389" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1390" pos:column="3">stdout<pos:position pos:line="1390" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1390" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1390" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1391" pos:column="2">fputs<pos:position pos:line="1391" pos:column="7"/></name><argument_list pos:line="1391" pos:column="7">(
<argument><expr><literal type="string" pos:line="1392" pos:column="1">"              requires that the proxy allows direct connect to the remote port\n"<pos:position pos:line="1392" pos:column="83"/></literal>
<literal type="string" pos:line="1393" pos:column="1">"              number curl wants to tunnel through to.\n"<pos:position pos:line="1393" pos:column="58"/></literal>
<literal type="string" pos:line="1394" pos:column="1">"\n"<pos:position pos:line="1394" pos:column="5"/></literal>
<literal type="string" pos:line="1395" pos:column="1">"       -P, --ftp-port &lt;address&gt;\n"<pos:position pos:line="1395" pos:column="42"/></literal>
<literal type="string" pos:line="1396" pos:column="1">"              (FTP)  Reverses  the  default initiator/listener roles when con-\n"<pos:position pos:line="1396" pos:column="83"/></literal>
<literal type="string" pos:line="1397" pos:column="1">"              necting with FTP. This switch makes curl  use  active  mode.  In\n"<pos:position pos:line="1397" pos:column="83"/></literal>
<literal type="string" pos:line="1398" pos:column="1">"              practice,  curl  then  tells  the  server to connect back to the\n"<pos:position pos:line="1398" pos:column="83"/></literal>
<literal type="string" pos:line="1399" pos:column="1">"              client's specified address and port, while passive mode asks the\n"<pos:position pos:line="1399" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1400" pos:column="3">stdout<pos:position pos:line="1400" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1400" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1400" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1401" pos:column="2">fputs<pos:position pos:line="1401" pos:column="7"/></name><argument_list pos:line="1401" pos:column="7">(
<argument><expr><literal type="string" pos:line="1402" pos:column="1">"              server  to  setup  an  IP address and port for it to connect to.\n"<pos:position pos:line="1402" pos:column="83"/></literal>
<literal type="string" pos:line="1403" pos:column="1">"              &lt;address&gt; should be one of:\n"<pos:position pos:line="1403" pos:column="52"/></literal>
<literal type="string" pos:line="1404" pos:column="1">"\n"<pos:position pos:line="1404" pos:column="5"/></literal>
<literal type="string" pos:line="1405" pos:column="1">"              interface\n"<pos:position pos:line="1405" pos:column="28"/></literal>
<literal type="string" pos:line="1406" pos:column="1">"                     i.e \"eth0\" to specify which interface's  IP  address  you\n"<pos:position pos:line="1406" pos:column="85"/></literal>
<literal type="string" pos:line="1407" pos:column="1">"                     want to use (Unix only)\n"<pos:position pos:line="1407" pos:column="49"/></literal>
<literal type="string" pos:line="1408" pos:column="1">"\n"<pos:position pos:line="1408" pos:column="5"/></literal>
<literal type="string" pos:line="1409" pos:column="1">"              IP address\n"<pos:position pos:line="1409" pos:column="29"/></literal>
<literal type="string" pos:line="1410" pos:column="1">"                     i.e \"192.168.10.1\" to specify the exact IP address\n"<pos:position pos:line="1410" pos:column="78"/></literal>
<literal type="string" pos:line="1411" pos:column="1">"\n"<pos:position pos:line="1411" pos:column="5"/></literal>
<literal type="string" pos:line="1412" pos:column="1">"              host name\n"<pos:position pos:line="1412" pos:column="28"/></literal>
<literal type="string" pos:line="1413" pos:column="1">"                     i.e \"my.host.domain\" to specify the machine\n"<pos:position pos:line="1413" pos:column="71"/></literal>
<literal type="string" pos:line="1414" pos:column="1">"\n"<pos:position pos:line="1414" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1415" pos:column="3">stdout<pos:position pos:line="1415" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1415" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1415" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1416" pos:column="2">fputs<pos:position pos:line="1416" pos:column="7"/></name><argument_list pos:line="1416" pos:column="7">(
<argument><expr><literal type="string" pos:line="1417" pos:column="1">"              -      make  curl  pick the same IP address that is already used\n"<pos:position pos:line="1417" pos:column="83"/></literal>
<literal type="string" pos:line="1418" pos:column="1">"                     for the control connection\n"<pos:position pos:line="1418" pos:column="52"/></literal>
<literal type="string" pos:line="1419" pos:column="1">"\n"<pos:position pos:line="1419" pos:column="5"/></literal>
<literal type="string" pos:line="1420" pos:column="1">"       If this option is used several times, the last one will be  used.  Dis-\n"<pos:position pos:line="1420" pos:column="83"/></literal>
<literal type="string" pos:line="1421" pos:column="1">"       able  the  use  of PORT with --ftp-pasv. Disable the attempt to use the\n"<pos:position pos:line="1421" pos:column="83"/></literal>
<literal type="string" pos:line="1422" pos:column="1">"       EPRT command instead of PORT by using --disable-eprt.  EPRT  is  really\n"<pos:position pos:line="1422" pos:column="83"/></literal>
<literal type="string" pos:line="1423" pos:column="1">"       PORT++.\n"<pos:position pos:line="1423" pos:column="19"/></literal>
<literal type="string" pos:line="1424" pos:column="1">"\n"<pos:position pos:line="1424" pos:column="5"/></literal>
<literal type="string" pos:line="1425" pos:column="1">"       Starting in 7.19.5, you can append \":[start]-[end]\" to the right of the\n"<pos:position pos:line="1425" pos:column="85"/></literal></expr></argument>
, <argument><expr><name pos:line="1426" pos:column="3">stdout<pos:position pos:line="1426" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1426" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1426" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1427" pos:column="2">fputs<pos:position pos:line="1427" pos:column="7"/></name><argument_list pos:line="1427" pos:column="7">(
<argument><expr><literal type="string" pos:line="1428" pos:column="1">"       address, to tell curl what TCP port range to use. That means you  spec-\n"<pos:position pos:line="1428" pos:column="83"/></literal>
<literal type="string" pos:line="1429" pos:column="1">"       ify  a  port  range,  from  a lower to a higher number. A single number\n"<pos:position pos:line="1429" pos:column="83"/></literal>
<literal type="string" pos:line="1430" pos:column="1">"       works as well, but do note that it increases the risk of failure  since\n"<pos:position pos:line="1430" pos:column="83"/></literal>
<literal type="string" pos:line="1431" pos:column="1">"       the port may not be available.\n"<pos:position pos:line="1431" pos:column="42"/></literal>
<literal type="string" pos:line="1432" pos:column="1">"\n"<pos:position pos:line="1432" pos:column="5"/></literal>
<literal type="string" pos:line="1433" pos:column="1">"       --pass &lt;phrase&gt;\n"<pos:position pos:line="1433" pos:column="33"/></literal>
<literal type="string" pos:line="1434" pos:column="1">"              (SSL/SSH) Passphrase for the private key\n"<pos:position pos:line="1434" pos:column="59"/></literal>
<literal type="string" pos:line="1435" pos:column="1">"\n"<pos:position pos:line="1435" pos:column="5"/></literal>
<literal type="string" pos:line="1436" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1436" pos:column="83"/></literal>
<literal type="string" pos:line="1437" pos:column="1">"\n"<pos:position pos:line="1437" pos:column="5"/></literal>
<literal type="string" pos:line="1438" pos:column="1">"       --post301\n"<pos:position pos:line="1438" pos:column="21"/></literal></expr></argument>
, <argument><expr><name pos:line="1439" pos:column="3">stdout<pos:position pos:line="1439" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1439" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1439" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1440" pos:column="2">fputs<pos:position pos:line="1440" pos:column="7"/></name><argument_list pos:line="1440" pos:column="7">(
<argument><expr><literal type="string" pos:line="1441" pos:column="1">"              Tells  curl  to  respect  RFC  2616/10.3.2  and not convert POST\n"<pos:position pos:line="1441" pos:column="83"/></literal>
<literal type="string" pos:line="1442" pos:column="1">"              requests into GET requests when following a 301 redirection. The\n"<pos:position pos:line="1442" pos:column="83"/></literal>
<literal type="string" pos:line="1443" pos:column="1">"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"<pos:position pos:line="1443" pos:column="83"/></literal>
<literal type="string" pos:line="1444" pos:column="1">"              the conversion by default to maintain  consistency.  However,  a\n"<pos:position pos:line="1444" pos:column="83"/></literal>
<literal type="string" pos:line="1445" pos:column="1">"              server  may  require  a POST to remain a POST after such a redi-\n"<pos:position pos:line="1445" pos:column="83"/></literal>
<literal type="string" pos:line="1446" pos:column="1">"              rection. This option is meaningful only when using  -L,  --loca-\n"<pos:position pos:line="1446" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1447" pos:column="3">stdout<pos:position pos:line="1447" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1447" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1447" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1448" pos:column="2">fputs<pos:position pos:line="1448" pos:column="7"/></name><argument_list pos:line="1448" pos:column="7">(
<argument><expr><literal type="string" pos:line="1449" pos:column="1">"              tion (Added in 7.17.1)\n"<pos:position pos:line="1449" pos:column="41"/></literal>
<literal type="string" pos:line="1450" pos:column="1">"\n"<pos:position pos:line="1450" pos:column="5"/></literal>
<literal type="string" pos:line="1451" pos:column="1">"       --post302\n"<pos:position pos:line="1451" pos:column="21"/></literal>
<literal type="string" pos:line="1452" pos:column="1">"              Tells  curl  to  respect  RFC  2616/10.3.2  and not convert POST\n"<pos:position pos:line="1452" pos:column="83"/></literal>
<literal type="string" pos:line="1453" pos:column="1">"              requests into GET requests when following a 302 redirection. The\n"<pos:position pos:line="1453" pos:column="83"/></literal>
<literal type="string" pos:line="1454" pos:column="1">"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"<pos:position pos:line="1454" pos:column="83"/></literal>
<literal type="string" pos:line="1455" pos:column="1">"              the conversion by default to maintain  consistency.  However,  a\n"<pos:position pos:line="1455" pos:column="83"/></literal>
<literal type="string" pos:line="1456" pos:column="1">"              server  may  require  a POST to remain a POST after such a redi-\n"<pos:position pos:line="1456" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1457" pos:column="3">stdout<pos:position pos:line="1457" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1457" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1457" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1458" pos:column="2">fputs<pos:position pos:line="1458" pos:column="7"/></name><argument_list pos:line="1458" pos:column="7">(
<argument><expr><literal type="string" pos:line="1459" pos:column="1">"              rection. This option is meaningful only when using  -L,  --loca-\n"<pos:position pos:line="1459" pos:column="83"/></literal>
<literal type="string" pos:line="1460" pos:column="1">"              tion (Added in 7.19.1)\n"<pos:position pos:line="1460" pos:column="41"/></literal>
<literal type="string" pos:line="1461" pos:column="1">"\n"<pos:position pos:line="1461" pos:column="5"/></literal>
<literal type="string" pos:line="1462" pos:column="1">"       --proto &lt;protocols&gt;\n"<pos:position pos:line="1462" pos:column="37"/></literal>
<literal type="string" pos:line="1463" pos:column="1">"              Tells   curl  to  use  the  listed  protocols  for  its  initial\n"<pos:position pos:line="1463" pos:column="83"/></literal>
<literal type="string" pos:line="1464" pos:column="1">"              retrieval. Protocols are evaluated left to right, are comma sep-\n"<pos:position pos:line="1464" pos:column="83"/></literal>
<literal type="string" pos:line="1465" pos:column="1">"              arated,  and  are each a protocol name or 'all', optionally pre-\n"<pos:position pos:line="1465" pos:column="83"/></literal>
<literal type="string" pos:line="1466" pos:column="1">"              fixed by zero or more modifiers. Available modifiers are:\n"<pos:position pos:line="1466" pos:column="76"/></literal>
<literal type="string" pos:line="1467" pos:column="1">"\n"<pos:position pos:line="1467" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1468" pos:column="3">stdout<pos:position pos:line="1468" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1468" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1468" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1469" pos:column="2">fputs<pos:position pos:line="1469" pos:column="7"/></name><argument_list pos:line="1469" pos:column="7">(
<argument><expr><literal type="string" pos:line="1470" pos:column="1">"              +  Permit this protocol in addition to protocols already permit-\n"<pos:position pos:line="1470" pos:column="83"/></literal>
<literal type="string" pos:line="1471" pos:column="1">"                 ted (this is the default if no modifier is used).\n"<pos:position pos:line="1471" pos:column="71"/></literal>
<literal type="string" pos:line="1472" pos:column="1">"\n"<pos:position pos:line="1472" pos:column="5"/></literal>
<literal type="string" pos:line="1473" pos:column="1">"              -  Deny  this  protocol,  removing it from the list of protocols\n"<pos:position pos:line="1473" pos:column="83"/></literal>
<literal type="string" pos:line="1474" pos:column="1">"                 already permitted.\n"<pos:position pos:line="1474" pos:column="40"/></literal>
<literal type="string" pos:line="1475" pos:column="1">"\n"<pos:position pos:line="1475" pos:column="5"/></literal>
<literal type="string" pos:line="1476" pos:column="1">"              =  Permit only this protocol (ignoring the list already  permit-\n"<pos:position pos:line="1476" pos:column="83"/></literal>
<literal type="string" pos:line="1477" pos:column="1">"                 ted),  though  subject  to  later  modification by subsequent\n"<pos:position pos:line="1477" pos:column="83"/></literal>
<literal type="string" pos:line="1478" pos:column="1">"                 entries in the comma separated list.\n"<pos:position pos:line="1478" pos:column="58"/></literal>
<literal type="string" pos:line="1479" pos:column="1">"\n"<pos:position pos:line="1479" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1480" pos:column="3">stdout<pos:position pos:line="1480" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1480" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1480" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1481" pos:column="2">fputs<pos:position pos:line="1481" pos:column="7"/></name><argument_list pos:line="1481" pos:column="7">(
<argument><expr><literal type="string" pos:line="1482" pos:column="1">"              For example:\n"<pos:position pos:line="1482" pos:column="31"/></literal>
<literal type="string" pos:line="1483" pos:column="1">"\n"<pos:position pos:line="1483" pos:column="5"/></literal>
<literal type="string" pos:line="1484" pos:column="1">"              --proto -ftps  uses the default protocols, but disables ftps\n"<pos:position pos:line="1484" pos:column="79"/></literal>
<literal type="string" pos:line="1485" pos:column="1">"\n"<pos:position pos:line="1485" pos:column="5"/></literal>
<literal type="string" pos:line="1486" pos:column="1">"              --proto -all,https,+http\n"<pos:position pos:line="1486" pos:column="43"/></literal>
<literal type="string" pos:line="1487" pos:column="1">"                             only enables http and https\n"<pos:position pos:line="1487" pos:column="61"/></literal>
<literal type="string" pos:line="1488" pos:column="1">"\n"<pos:position pos:line="1488" pos:column="5"/></literal>
<literal type="string" pos:line="1489" pos:column="1">"              --proto =http,https\n"<pos:position pos:line="1489" pos:column="38"/></literal>
<literal type="string" pos:line="1490" pos:column="1">"                             also only enables http and https\n"<pos:position pos:line="1490" pos:column="66"/></literal>
<literal type="string" pos:line="1491" pos:column="1">"\n"<pos:position pos:line="1491" pos:column="5"/></literal>
<literal type="string" pos:line="1492" pos:column="1">"              Unknown protocols produce a  warning.  This  allows  scripts  to\n"<pos:position pos:line="1492" pos:column="83"/></literal>
<literal type="string" pos:line="1493" pos:column="1">"              safely  rely on being able to disable potentially dangerous pro-\n"<pos:position pos:line="1493" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1494" pos:column="3">stdout<pos:position pos:line="1494" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1494" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1494" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1495" pos:column="2">fputs<pos:position pos:line="1495" pos:column="7"/></name><argument_list pos:line="1495" pos:column="7">(
<argument><expr><literal type="string" pos:line="1496" pos:column="1">"              tocols, without relying upon support  for  that  protocol  being\n"<pos:position pos:line="1496" pos:column="83"/></literal>
<literal type="string" pos:line="1497" pos:column="1">"              built into curl to avoid an error.\n"<pos:position pos:line="1497" pos:column="53"/></literal>
<literal type="string" pos:line="1498" pos:column="1">"\n"<pos:position pos:line="1498" pos:column="5"/></literal>
<literal type="string" pos:line="1499" pos:column="1">"              This option can be used multiple times, in which case the effect\n"<pos:position pos:line="1499" pos:column="83"/></literal>
<literal type="string" pos:line="1500" pos:column="1">"              is the same as concatenating the protocols into one instance  of\n"<pos:position pos:line="1500" pos:column="83"/></literal>
<literal type="string" pos:line="1501" pos:column="1">"              the option.\n"<pos:position pos:line="1501" pos:column="30"/></literal>
<literal type="string" pos:line="1502" pos:column="1">"\n"<pos:position pos:line="1502" pos:column="5"/></literal>
<literal type="string" pos:line="1503" pos:column="1">"              (Added in 7.20.2)\n"<pos:position pos:line="1503" pos:column="36"/></literal>
<literal type="string" pos:line="1504" pos:column="1">"\n"<pos:position pos:line="1504" pos:column="5"/></literal>
<literal type="string" pos:line="1505" pos:column="1">"       --proto-redir &lt;protocols&gt;\n"<pos:position pos:line="1505" pos:column="43"/></literal>
<literal type="string" pos:line="1506" pos:column="1">"              Tells  curl  to  use  the listed protocols after a redirect. See\n"<pos:position pos:line="1506" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1507" pos:column="3">stdout<pos:position pos:line="1507" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1507" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1507" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1508" pos:column="2">fputs<pos:position pos:line="1508" pos:column="7"/></name><argument_list pos:line="1508" pos:column="7">(
<argument><expr><literal type="string" pos:line="1509" pos:column="1">"              --proto for how protocols are represented.\n"<pos:position pos:line="1509" pos:column="61"/></literal>
<literal type="string" pos:line="1510" pos:column="1">"\n"<pos:position pos:line="1510" pos:column="5"/></literal>
<literal type="string" pos:line="1511" pos:column="1">"              (Added in 7.20.2)\n"<pos:position pos:line="1511" pos:column="36"/></literal>
<literal type="string" pos:line="1512" pos:column="1">"\n"<pos:position pos:line="1512" pos:column="5"/></literal>
<literal type="string" pos:line="1513" pos:column="1">"       --proxy-anyauth\n"<pos:position pos:line="1513" pos:column="27"/></literal>
<literal type="string" pos:line="1514" pos:column="1">"              Tells curl to pick a suitable authentication method when  commu-\n"<pos:position pos:line="1514" pos:column="83"/></literal>
<literal type="string" pos:line="1515" pos:column="1">"              nicating  with  the  given  proxy.  This  might  cause  an extra\n"<pos:position pos:line="1515" pos:column="83"/></literal>
<literal type="string" pos:line="1516" pos:column="1">"              request/response round-trip. (Added in 7.13.2)\n"<pos:position pos:line="1516" pos:column="65"/></literal>
<literal type="string" pos:line="1517" pos:column="1">"\n"<pos:position pos:line="1517" pos:column="5"/></literal>
<literal type="string" pos:line="1518" pos:column="1">"       --proxy-basic\n"<pos:position pos:line="1518" pos:column="25"/></literal>
<literal type="string" pos:line="1519" pos:column="1">"              Tells curl to use HTTP Basic authentication  when  communicating\n"<pos:position pos:line="1519" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1520" pos:column="3">stdout<pos:position pos:line="1520" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1520" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1520" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1521" pos:column="2">fputs<pos:position pos:line="1521" pos:column="7"/></name><argument_list pos:line="1521" pos:column="7">(
<argument><expr><literal type="string" pos:line="1522" pos:column="1">"              with the given proxy. Use --basic for enabling HTTP Basic with a\n"<pos:position pos:line="1522" pos:column="83"/></literal>
<literal type="string" pos:line="1523" pos:column="1">"              remote host. Basic is the  default  authentication  method  curl\n"<pos:position pos:line="1523" pos:column="83"/></literal>
<literal type="string" pos:line="1524" pos:column="1">"              uses with proxies.\n"<pos:position pos:line="1524" pos:column="37"/></literal>
<literal type="string" pos:line="1525" pos:column="1">"\n"<pos:position pos:line="1525" pos:column="5"/></literal>
<literal type="string" pos:line="1526" pos:column="1">"       --proxy-digest\n"<pos:position pos:line="1526" pos:column="26"/></literal>
<literal type="string" pos:line="1527" pos:column="1">"              Tells  curl to use HTTP Digest authentication when communicating\n"<pos:position pos:line="1527" pos:column="83"/></literal>
<literal type="string" pos:line="1528" pos:column="1">"              with the given proxy. Use --digest for enabling HTTP Digest with\n"<pos:position pos:line="1528" pos:column="83"/></literal>
<literal type="string" pos:line="1529" pos:column="1">"              a remote host.\n"<pos:position pos:line="1529" pos:column="33"/></literal>
<literal type="string" pos:line="1530" pos:column="1">"\n"<pos:position pos:line="1530" pos:column="5"/></literal>
<literal type="string" pos:line="1531" pos:column="1">"       --proxy-negotiate\n"<pos:position pos:line="1531" pos:column="29"/></literal></expr></argument>
, <argument><expr><name pos:line="1532" pos:column="3">stdout<pos:position pos:line="1532" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1532" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1532" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1533" pos:column="2">fputs<pos:position pos:line="1533" pos:column="7"/></name><argument_list pos:line="1533" pos:column="7">(
<argument><expr><literal type="string" pos:line="1534" pos:column="1">"              Tells curl to use HTTP Negotiate authentication when communicat-\n"<pos:position pos:line="1534" pos:column="83"/></literal>
<literal type="string" pos:line="1535" pos:column="1">"              ing with the given proxy.  Use  --negotiate  for  enabling  HTTP\n"<pos:position pos:line="1535" pos:column="83"/></literal>
<literal type="string" pos:line="1536" pos:column="1">"              Negotiate with a remote host. (Added in 7.17.1)\n"<pos:position pos:line="1536" pos:column="66"/></literal>
<literal type="string" pos:line="1537" pos:column="1">"\n"<pos:position pos:line="1537" pos:column="5"/></literal>
<literal type="string" pos:line="1538" pos:column="1">"       --proxy-ntlm\n"<pos:position pos:line="1538" pos:column="24"/></literal>
<literal type="string" pos:line="1539" pos:column="1">"              Tells  curl  to  use HTTP NTLM authentication when communicating\n"<pos:position pos:line="1539" pos:column="83"/></literal>
<literal type="string" pos:line="1540" pos:column="1">"              with the given proxy. Use --ntlm for enabling NTLM with a remote\n"<pos:position pos:line="1540" pos:column="83"/></literal>
<literal type="string" pos:line="1541" pos:column="1">"              host.\n"<pos:position pos:line="1541" pos:column="24"/></literal>
<literal type="string" pos:line="1542" pos:column="1">"\n"<pos:position pos:line="1542" pos:column="5"/></literal>
<literal type="string" pos:line="1543" pos:column="1">"       --proxy1.0 &lt;proxyhost[:port]&gt;\n"<pos:position pos:line="1543" pos:column="47"/></literal></expr></argument>
, <argument><expr><name pos:line="1544" pos:column="3">stdout<pos:position pos:line="1544" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1544" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1544" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1545" pos:column="2">fputs<pos:position pos:line="1545" pos:column="7"/></name><argument_list pos:line="1545" pos:column="7">(
<argument><expr><literal type="string" pos:line="1546" pos:column="1">"              Use  the  specified  HTTP  1.0  proxy. If the port number is not\n"<pos:position pos:line="1546" pos:column="83"/></literal>
<literal type="string" pos:line="1547" pos:column="1">"              specified, it is assumed at port 1080.\n"<pos:position pos:line="1547" pos:column="57"/></literal>
<literal type="string" pos:line="1548" pos:column="1">"\n"<pos:position pos:line="1548" pos:column="5"/></literal>
<literal type="string" pos:line="1549" pos:column="1">"              The only difference between this and the HTTP proxy option  (-x,\n"<pos:position pos:line="1549" pos:column="83"/></literal>
<literal type="string" pos:line="1550" pos:column="1">"              --proxy), is that attempts to use CONNECT through the proxy will\n"<pos:position pos:line="1550" pos:column="83"/></literal>
<literal type="string" pos:line="1551" pos:column="1">"              specify an HTTP 1.0 protocol instead of the default HTTP 1.1.\n"<pos:position pos:line="1551" pos:column="80"/></literal>
<literal type="string" pos:line="1552" pos:column="1">"\n"<pos:position pos:line="1552" pos:column="5"/></literal>
<literal type="string" pos:line="1553" pos:column="1">"       --pubkey &lt;key&gt;\n"<pos:position pos:line="1553" pos:column="32"/></literal>
<literal type="string" pos:line="1554" pos:column="1">"              (SSH) Public key file name. Allows you to  provide  your  public\n"<pos:position pos:line="1554" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1555" pos:column="3">stdout<pos:position pos:line="1555" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1555" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1555" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1556" pos:column="2">fputs<pos:position pos:line="1556" pos:column="7"/></name><argument_list pos:line="1556" pos:column="7">(
<argument><expr><literal type="string" pos:line="1557" pos:column="1">"              key in this separate file.\n"<pos:position pos:line="1557" pos:column="45"/></literal>
<literal type="string" pos:line="1558" pos:column="1">"\n"<pos:position pos:line="1558" pos:column="5"/></literal>
<literal type="string" pos:line="1559" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1559" pos:column="83"/></literal>
<literal type="string" pos:line="1560" pos:column="1">"\n"<pos:position pos:line="1560" pos:column="5"/></literal>
<literal type="string" pos:line="1561" pos:column="1">"       -q     If  used  as the first parameter on the command line, the curlrc\n"<pos:position pos:line="1561" pos:column="83"/></literal>
<literal type="string" pos:line="1562" pos:column="1">"              config file will not be read and used. See the -K, --config  for\n"<pos:position pos:line="1562" pos:column="83"/></literal>
<literal type="string" pos:line="1563" pos:column="1">"              details on the default config file search path.\n"<pos:position pos:line="1563" pos:column="66"/></literal>
<literal type="string" pos:line="1564" pos:column="1">"\n"<pos:position pos:line="1564" pos:column="5"/></literal>
<literal type="string" pos:line="1565" pos:column="1">"       -Q, --quote &lt;command&gt;\n"<pos:position pos:line="1565" pos:column="39"/></literal>
<literal type="string" pos:line="1566" pos:column="1">"              (FTP/SFTP)  Send  an arbitrary command to the remote FTP or SFTP\n"<pos:position pos:line="1566" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1567" pos:column="3">stdout<pos:position pos:line="1567" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1567" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1567" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1568" pos:column="2">fputs<pos:position pos:line="1568" pos:column="7"/></name><argument_list pos:line="1568" pos:column="7">(
<argument><expr><literal type="string" pos:line="1569" pos:column="1">"              server. Quote commands are sent BEFORE the transfer takes  place\n"<pos:position pos:line="1569" pos:column="83"/></literal>
<literal type="string" pos:line="1570" pos:column="1">"              (just  after  the  initial PWD command in an FTP transfer, to be\n"<pos:position pos:line="1570" pos:column="83"/></literal>
<literal type="string" pos:line="1571" pos:column="1">"              exact). To make commands take place after a successful transfer,\n"<pos:position pos:line="1571" pos:column="83"/></literal>
<literal type="string" pos:line="1572" pos:column="1">"              prefix  them  with  a  dash '-'.  To make commands be sent after\n"<pos:position pos:line="1572" pos:column="83"/></literal>
<literal type="string" pos:line="1573" pos:column="1">"              libcurl has changed  the  working  directory,  just  before  the\n"<pos:position pos:line="1573" pos:column="83"/></literal>
<literal type="string" pos:line="1574" pos:column="1">"              transfer command(s), prefix the command with a '+' (this is only\n"<pos:position pos:line="1574" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1575" pos:column="3">stdout<pos:position pos:line="1575" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1575" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1575" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1576" pos:column="2">fputs<pos:position pos:line="1576" pos:column="7"/></name><argument_list pos:line="1576" pos:column="7">(
<argument><expr><literal type="string" pos:line="1577" pos:column="1">"              supported for FTP). You may specify any number of  commands.  If\n"<pos:position pos:line="1577" pos:column="83"/></literal>
<literal type="string" pos:line="1578" pos:column="1">"              the  server  returns failure for one of the commands, the entire\n"<pos:position pos:line="1578" pos:column="83"/></literal>
<literal type="string" pos:line="1579" pos:column="1">"              operation will be aborted. You must send  syntactically  correct\n"<pos:position pos:line="1579" pos:column="83"/></literal>
<literal type="string" pos:line="1580" pos:column="1">"              FTP  commands  as  RFC 959 defines to FTP servers, or one of the\n"<pos:position pos:line="1580" pos:column="83"/></literal>
<literal type="string" pos:line="1581" pos:column="1">"              commands listed below to SFTP servers.  This option can be  used\n"<pos:position pos:line="1581" pos:column="83"/></literal>
<literal type="string" pos:line="1582" pos:column="1">"              multiple  times.  When speaking to a FTP server, prefix the com-\n"<pos:position pos:line="1582" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1583" pos:column="3">stdout<pos:position pos:line="1583" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1583" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1583" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1584" pos:column="2">fputs<pos:position pos:line="1584" pos:column="7"/></name><argument_list pos:line="1584" pos:column="7">(
<argument><expr><literal type="string" pos:line="1585" pos:column="1">"              mand with an asterisk (*) to make libcurl continue even  if  the\n"<pos:position pos:line="1585" pos:column="83"/></literal>
<literal type="string" pos:line="1586" pos:column="1">"              command fails as by default curl will stop at first failure.\n"<pos:position pos:line="1586" pos:column="79"/></literal>
<literal type="string" pos:line="1587" pos:column="1">"\n"<pos:position pos:line="1587" pos:column="5"/></literal>
<literal type="string" pos:line="1588" pos:column="1">"              SFTP  is  a  binary protocol. Unlike for FTP, libcurl interprets\n"<pos:position pos:line="1588" pos:column="83"/></literal>
<literal type="string" pos:line="1589" pos:column="1">"              SFTP quote commands itself before sending them  to  the  server.\n"<pos:position pos:line="1589" pos:column="83"/></literal>
<literal type="string" pos:line="1590" pos:column="1">"              File  names may be quoted shell-style to embed spaces or special\n"<pos:position pos:line="1590" pos:column="83"/></literal>
<literal type="string" pos:line="1591" pos:column="1">"              characters.  Following is the list of all supported  SFTP  quote\n"<pos:position pos:line="1591" pos:column="83"/></literal>
<literal type="string" pos:line="1592" pos:column="1">"              commands:\n"<pos:position pos:line="1592" pos:column="28"/></literal>
<literal type="string" pos:line="1593" pos:column="1">"\n"<pos:position pos:line="1593" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1594" pos:column="3">stdout<pos:position pos:line="1594" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1594" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1594" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1595" pos:column="2">fputs<pos:position pos:line="1595" pos:column="7"/></name><argument_list pos:line="1595" pos:column="7">(
<argument><expr><literal type="string" pos:line="1596" pos:column="1">"              chgrp group file\n"<pos:position pos:line="1596" pos:column="35"/></literal>
<literal type="string" pos:line="1597" pos:column="1">"                     The  chgrp command sets the group ID of the file named by\n"<pos:position pos:line="1597" pos:column="83"/></literal>
<literal type="string" pos:line="1598" pos:column="1">"                     the file operand to the group ID specified by  the  group\n"<pos:position pos:line="1598" pos:column="83"/></literal>
<literal type="string" pos:line="1599" pos:column="1">"                     operand. The group operand is a decimal integer group ID.\n"<pos:position pos:line="1599" pos:column="83"/></literal>
<literal type="string" pos:line="1600" pos:column="1">"\n"<pos:position pos:line="1600" pos:column="5"/></literal>
<literal type="string" pos:line="1601" pos:column="1">"              chmod mode file\n"<pos:position pos:line="1601" pos:column="34"/></literal>
<literal type="string" pos:line="1602" pos:column="1">"                     The  chmod  command  modifies  the  file mode bits of the\n"<pos:position pos:line="1602" pos:column="83"/></literal>
<literal type="string" pos:line="1603" pos:column="1">"                     specified file. The mode operand is an octal integer mode\n"<pos:position pos:line="1603" pos:column="83"/></literal>
<literal type="string" pos:line="1604" pos:column="1">"                     number.\n"<pos:position pos:line="1604" pos:column="33"/></literal>
<literal type="string" pos:line="1605" pos:column="1">"\n"<pos:position pos:line="1605" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1606" pos:column="3">stdout<pos:position pos:line="1606" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1606" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1606" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1607" pos:column="2">fputs<pos:position pos:line="1607" pos:column="7"/></name><argument_list pos:line="1607" pos:column="7">(
<argument><expr><literal type="string" pos:line="1608" pos:column="1">"              chown user file\n"<pos:position pos:line="1608" pos:column="34"/></literal>
<literal type="string" pos:line="1609" pos:column="1">"                     The chown command sets the owner of the file named by the\n"<pos:position pos:line="1609" pos:column="83"/></literal>
<literal type="string" pos:line="1610" pos:column="1">"                     file operand to the user ID specified by the  user  oper-\n"<pos:position pos:line="1610" pos:column="83"/></literal>
<literal type="string" pos:line="1611" pos:column="1">"                     and. The user operand is a decimal integer user ID.\n"<pos:position pos:line="1611" pos:column="77"/></literal>
<literal type="string" pos:line="1612" pos:column="1">"\n"<pos:position pos:line="1612" pos:column="5"/></literal>
<literal type="string" pos:line="1613" pos:column="1">"              ln source_file target_file\n"<pos:position pos:line="1613" pos:column="45"/></literal>
<literal type="string" pos:line="1614" pos:column="1">"                     The ln and symlink commands create a symbolic link at the\n"<pos:position pos:line="1614" pos:column="83"/></literal>
<literal type="string" pos:line="1615" pos:column="1">"                     target_file location pointing to  the  source_file  loca-\n"<pos:position pos:line="1615" pos:column="83"/></literal>
<literal type="string" pos:line="1616" pos:column="1">"                     tion.\n"<pos:position pos:line="1616" pos:column="31"/></literal>
<literal type="string" pos:line="1617" pos:column="1">"\n"<pos:position pos:line="1617" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1618" pos:column="3">stdout<pos:position pos:line="1618" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1618" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1618" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1619" pos:column="2">fputs<pos:position pos:line="1619" pos:column="7"/></name><argument_list pos:line="1619" pos:column="7">(
<argument><expr><literal type="string" pos:line="1620" pos:column="1">"              mkdir directory_name\n"<pos:position pos:line="1620" pos:column="39"/></literal>
<literal type="string" pos:line="1621" pos:column="1">"                     The  mkdir  command  creates  the  directory named by the\n"<pos:position pos:line="1621" pos:column="83"/></literal>
<literal type="string" pos:line="1622" pos:column="1">"                     directory_name operand.\n"<pos:position pos:line="1622" pos:column="49"/></literal>
<literal type="string" pos:line="1623" pos:column="1">"\n"<pos:position pos:line="1623" pos:column="5"/></literal>
<literal type="string" pos:line="1624" pos:column="1">"              pwd    The pwd command returns the absolute pathname of the cur-\n"<pos:position pos:line="1624" pos:column="83"/></literal>
<literal type="string" pos:line="1625" pos:column="1">"                     rent working directory.\n"<pos:position pos:line="1625" pos:column="49"/></literal>
<literal type="string" pos:line="1626" pos:column="1">"\n"<pos:position pos:line="1626" pos:column="5"/></literal>
<literal type="string" pos:line="1627" pos:column="1">"              rename source target\n"<pos:position pos:line="1627" pos:column="39"/></literal>
<literal type="string" pos:line="1628" pos:column="1">"                     The rename command renames the file or directory named by\n"<pos:position pos:line="1628" pos:column="83"/></literal>
<literal type="string" pos:line="1629" pos:column="1">"                     the source operand to the destination path named  by  the\n"<pos:position pos:line="1629" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1630" pos:column="3">stdout<pos:position pos:line="1630" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1630" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1630" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1631" pos:column="2">fputs<pos:position pos:line="1631" pos:column="7"/></name><argument_list pos:line="1631" pos:column="7">(
<argument><expr><literal type="string" pos:line="1632" pos:column="1">"                     target operand.\n"<pos:position pos:line="1632" pos:column="41"/></literal>
<literal type="string" pos:line="1633" pos:column="1">"\n"<pos:position pos:line="1633" pos:column="5"/></literal>
<literal type="string" pos:line="1634" pos:column="1">"              rm file\n"<pos:position pos:line="1634" pos:column="26"/></literal>
<literal type="string" pos:line="1635" pos:column="1">"                     The rm command removes the file specified by the file op-\n"<pos:position pos:line="1635" pos:column="83"/></literal>
<literal type="string" pos:line="1636" pos:column="1">"                     erand.\n"<pos:position pos:line="1636" pos:column="32"/></literal>
<literal type="string" pos:line="1637" pos:column="1">"\n"<pos:position pos:line="1637" pos:column="5"/></literal>
<literal type="string" pos:line="1638" pos:column="1">"              rmdir directory\n"<pos:position pos:line="1638" pos:column="34"/></literal>
<literal type="string" pos:line="1639" pos:column="1">"                     The rmdir command removes the directory  entry  specified\n"<pos:position pos:line="1639" pos:column="83"/></literal>
<literal type="string" pos:line="1640" pos:column="1">"                     by the directory operand, provided it is empty.\n"<pos:position pos:line="1640" pos:column="73"/></literal>
<literal type="string" pos:line="1641" pos:column="1">"\n"<pos:position pos:line="1641" pos:column="5"/></literal>
<literal type="string" pos:line="1642" pos:column="1">"              symlink source_file target_file\n"<pos:position pos:line="1642" pos:column="50"/></literal>
<literal type="string" pos:line="1643" pos:column="1">"                     See ln.\n"<pos:position pos:line="1643" pos:column="33"/></literal>
<literal type="string" pos:line="1644" pos:column="1">"\n"<pos:position pos:line="1644" pos:column="5"/></literal>
<literal type="string" pos:line="1645" pos:column="1">"       -r, --range &lt;range&gt;\n"<pos:position pos:line="1645" pos:column="37"/></literal></expr></argument>
, <argument><expr><name pos:line="1646" pos:column="3">stdout<pos:position pos:line="1646" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1646" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1646" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1647" pos:column="2">fputs<pos:position pos:line="1647" pos:column="7"/></name><argument_list pos:line="1647" pos:column="7">(
<argument><expr><literal type="string" pos:line="1648" pos:column="1">"              (HTTP/FTP/SFTP/FILE)  Retrieve a byte range (i.e a partial docu-\n"<pos:position pos:line="1648" pos:column="83"/></literal>
<literal type="string" pos:line="1649" pos:column="1">"              ment) from a HTTP/1.1, FTP or  SFTP  server  or  a  local  FILE.\n"<pos:position pos:line="1649" pos:column="83"/></literal>
<literal type="string" pos:line="1650" pos:column="1">"              Ranges can be specified in a number of ways.\n"<pos:position pos:line="1650" pos:column="63"/></literal>
<literal type="string" pos:line="1651" pos:column="1">"\n"<pos:position pos:line="1651" pos:column="5"/></literal>
<literal type="string" pos:line="1652" pos:column="1">"              0-499     specifies the first 500 bytes\n"<pos:position pos:line="1652" pos:column="58"/></literal>
<literal type="string" pos:line="1653" pos:column="1">"\n"<pos:position pos:line="1653" pos:column="5"/></literal>
<literal type="string" pos:line="1654" pos:column="1">"              500-999   specifies the second 500 bytes\n"<pos:position pos:line="1654" pos:column="59"/></literal>
<literal type="string" pos:line="1655" pos:column="1">"\n"<pos:position pos:line="1655" pos:column="5"/></literal>
<literal type="string" pos:line="1656" pos:column="1">"              -500      specifies the last 500 bytes\n"<pos:position pos:line="1656" pos:column="57"/></literal>
<literal type="string" pos:line="1657" pos:column="1">"\n"<pos:position pos:line="1657" pos:column="5"/></literal>
<literal type="string" pos:line="1658" pos:column="1">"              9500-     specifies the bytes from offset 9500 and forward\n"<pos:position pos:line="1658" pos:column="77"/></literal>
<literal type="string" pos:line="1659" pos:column="1">"\n"<pos:position pos:line="1659" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1660" pos:column="3">stdout<pos:position pos:line="1660" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1660" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1660" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1661" pos:column="2">fputs<pos:position pos:line="1661" pos:column="7"/></name><argument_list pos:line="1661" pos:column="7">(
<argument><expr><literal type="string" pos:line="1662" pos:column="1">"              0-0,-1    specifies the first and last byte only(*)(H)\n"<pos:position pos:line="1662" pos:column="73"/></literal>
<literal type="string" pos:line="1663" pos:column="1">"\n"<pos:position pos:line="1663" pos:column="5"/></literal>
<literal type="string" pos:line="1664" pos:column="1">"              500-700,600-799\n"<pos:position pos:line="1664" pos:column="34"/></literal>
<literal type="string" pos:line="1665" pos:column="1">"                        specifies 300 bytes from offset 500(H)\n"<pos:position pos:line="1665" pos:column="67"/></literal>
<literal type="string" pos:line="1666" pos:column="1">"\n"<pos:position pos:line="1666" pos:column="5"/></literal>
<literal type="string" pos:line="1667" pos:column="1">"              100-199,500-599\n"<pos:position pos:line="1667" pos:column="34"/></literal>
<literal type="string" pos:line="1668" pos:column="1">"                        specifies two separate 100-byte ranges(*)(H)\n"<pos:position pos:line="1668" pos:column="73"/></literal>
<literal type="string" pos:line="1669" pos:column="1">"\n"<pos:position pos:line="1669" pos:column="5"/></literal>
<literal type="string" pos:line="1670" pos:column="1">"       (*)  =  NOTE  that this will cause the server to reply with a multipart\n"<pos:position pos:line="1670" pos:column="83"/></literal>
<literal type="string" pos:line="1671" pos:column="1">"       response!\n"<pos:position pos:line="1671" pos:column="21"/></literal>
<literal type="string" pos:line="1672" pos:column="1">"\n"<pos:position pos:line="1672" pos:column="5"/></literal>
<literal type="string" pos:line="1673" pos:column="1">"       Only digit characters (0-9) are valid in the 'start' and 'stop'  fields\n"<pos:position pos:line="1673" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1674" pos:column="3">stdout<pos:position pos:line="1674" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1674" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1674" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1675" pos:column="2">fputs<pos:position pos:line="1675" pos:column="7"/></name><argument_list pos:line="1675" pos:column="7">(
<argument><expr><literal type="string" pos:line="1676" pos:column="1">"       of  the 'start-stop' range syntax. If a non-digit character is given in\n"<pos:position pos:line="1676" pos:column="83"/></literal>
<literal type="string" pos:line="1677" pos:column="1">"       the range, the server's response will be unspecified, depending on  the\n"<pos:position pos:line="1677" pos:column="83"/></literal>
<literal type="string" pos:line="1678" pos:column="1">"       server's configuration.\n"<pos:position pos:line="1678" pos:column="35"/></literal>
<literal type="string" pos:line="1679" pos:column="1">"\n"<pos:position pos:line="1679" pos:column="5"/></literal>
<literal type="string" pos:line="1680" pos:column="1">"       You  should  also  be aware that many HTTP/1.1 servers do not have this\n"<pos:position pos:line="1680" pos:column="83"/></literal>
<literal type="string" pos:line="1681" pos:column="1">"       feature enabled, so that when  you  attempt  to  get  a  range,  you'll\n"<pos:position pos:line="1681" pos:column="83"/></literal>
<literal type="string" pos:line="1682" pos:column="1">"       instead get the whole document.\n"<pos:position pos:line="1682" pos:column="43"/></literal>
<literal type="string" pos:line="1683" pos:column="1">"\n"<pos:position pos:line="1683" pos:column="5"/></literal>
<literal type="string" pos:line="1684" pos:column="1">"       FTP  and SFTP range downloads only support the simple 'start-stop' syn-\n"<pos:position pos:line="1684" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1685" pos:column="3">stdout<pos:position pos:line="1685" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1685" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1685" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1686" pos:column="2">fputs<pos:position pos:line="1686" pos:column="7"/></name><argument_list pos:line="1686" pos:column="7">(
<argument><expr><literal type="string" pos:line="1687" pos:column="1">"       tax (optionally with one of the numbers omitted). FTP  use  depends  on\n"<pos:position pos:line="1687" pos:column="83"/></literal>
<literal type="string" pos:line="1688" pos:column="1">"       the extended FTP command SIZE.\n"<pos:position pos:line="1688" pos:column="42"/></literal>
<literal type="string" pos:line="1689" pos:column="1">"\n"<pos:position pos:line="1689" pos:column="5"/></literal>
<literal type="string" pos:line="1690" pos:column="1">"       If this option is used several times, the last one will be used.\n"<pos:position pos:line="1690" pos:column="76"/></literal>
<literal type="string" pos:line="1691" pos:column="1">"\n"<pos:position pos:line="1691" pos:column="5"/></literal>
<literal type="string" pos:line="1692" pos:column="1">"       -R, --remote-time\n"<pos:position pos:line="1692" pos:column="29"/></literal>
<literal type="string" pos:line="1693" pos:column="1">"              When  used,  this  will  make  libcurl attempt to figure out the\n"<pos:position pos:line="1693" pos:column="83"/></literal>
<literal type="string" pos:line="1694" pos:column="1">"              timestamp of the remote file, and if that is available make  the\n"<pos:position pos:line="1694" pos:column="83"/></literal>
<literal type="string" pos:line="1695" pos:column="1">"              local file get that same timestamp.\n"<pos:position pos:line="1695" pos:column="54"/></literal>
<literal type="string" pos:line="1696" pos:column="1">"\n"<pos:position pos:line="1696" pos:column="5"/></literal>
<literal type="string" pos:line="1697" pos:column="1">"       --random-file &lt;file&gt;\n"<pos:position pos:line="1697" pos:column="38"/></literal></expr></argument>
, <argument><expr><name pos:line="1698" pos:column="3">stdout<pos:position pos:line="1698" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1698" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1698" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1699" pos:column="2">fputs<pos:position pos:line="1699" pos:column="7"/></name><argument_list pos:line="1699" pos:column="7">(
<argument><expr><literal type="string" pos:line="1700" pos:column="1">"              (SSL) Specify the path name to file containing what will be con-\n"<pos:position pos:line="1700" pos:column="83"/></literal>
<literal type="string" pos:line="1701" pos:column="1">"              sidered as random data. The data is  used  to  seed  the  random\n"<pos:position pos:line="1701" pos:column="83"/></literal>
<literal type="string" pos:line="1702" pos:column="1">"              engine for SSL connections.  See also the --egd-file option.\n"<pos:position pos:line="1702" pos:column="79"/></literal>
<literal type="string" pos:line="1703" pos:column="1">"\n"<pos:position pos:line="1703" pos:column="5"/></literal>
<literal type="string" pos:line="1704" pos:column="1">"       --raw  When  used, it disables all internal HTTP decoding of content or\n"<pos:position pos:line="1704" pos:column="83"/></literal>
<literal type="string" pos:line="1705" pos:column="1">"              transfer encodings and instead makes them passed  on  unaltered,\n"<pos:position pos:line="1705" pos:column="83"/></literal>
<literal type="string" pos:line="1706" pos:column="1">"              raw. (Added in 7.16.2)\n"<pos:position pos:line="1706" pos:column="41"/></literal>
<literal type="string" pos:line="1707" pos:column="1">"\n"<pos:position pos:line="1707" pos:column="5"/></literal>
<literal type="string" pos:line="1708" pos:column="1">"       --remote-name-all\n"<pos:position pos:line="1708" pos:column="29"/></literal></expr></argument>
, <argument><expr><name pos:line="1709" pos:column="3">stdout<pos:position pos:line="1709" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1709" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1709" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1710" pos:column="2">fputs<pos:position pos:line="1710" pos:column="7"/></name><argument_list pos:line="1710" pos:column="7">(
<argument><expr><literal type="string" pos:line="1711" pos:column="1">"              This  option changes the default action for all given URLs to be\n"<pos:position pos:line="1711" pos:column="83"/></literal>
<literal type="string" pos:line="1712" pos:column="1">"              dealt with as if -O, --remote-name were used for each one. So if\n"<pos:position pos:line="1712" pos:column="83"/></literal>
<literal type="string" pos:line="1713" pos:column="1">"              you want to disable that for a specific URL after --remote-name-\n"<pos:position pos:line="1713" pos:column="83"/></literal>
<literal type="string" pos:line="1714" pos:column="1">"              all has been used, you must  use  \"-o  -\"  or  --no-remote-name.\n"<pos:position pos:line="1714" pos:column="85"/></literal>
<literal type="string" pos:line="1715" pos:column="1">"              (Added in 7.19.0)\n"<pos:position pos:line="1715" pos:column="36"/></literal>
<literal type="string" pos:line="1716" pos:column="1">"\n"<pos:position pos:line="1716" pos:column="5"/></literal>
<literal type="string" pos:line="1717" pos:column="1">"       --resolve &lt;host:port:address&gt;\n"<pos:position pos:line="1717" pos:column="47"/></literal>
<literal type="string" pos:line="1718" pos:column="1">"              Provide  a  custom  address  for  a specific host and port pair.\n"<pos:position pos:line="1718" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1719" pos:column="3">stdout<pos:position pos:line="1719" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1719" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1719" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1720" pos:column="2">fputs<pos:position pos:line="1720" pos:column="7"/></name><argument_list pos:line="1720" pos:column="7">(
<argument><expr><literal type="string" pos:line="1721" pos:column="1">"              Using this, you can make the curl requests(s)  use  a  specified\n"<pos:position pos:line="1721" pos:column="83"/></literal>
<literal type="string" pos:line="1722" pos:column="1">"              address  and  prevent the otherwise normally resolved address to\n"<pos:position pos:line="1722" pos:column="83"/></literal>
<literal type="string" pos:line="1723" pos:column="1">"              be used. Consider it a sort of /etc/hosts  alternative  provided\n"<pos:position pos:line="1723" pos:column="83"/></literal>
<literal type="string" pos:line="1724" pos:column="1">"              on  the  command line. The port number should be the number used\n"<pos:position pos:line="1724" pos:column="83"/></literal>
<literal type="string" pos:line="1725" pos:column="1">"              for the specific protocol the host will be used  for.  It  means\n"<pos:position pos:line="1725" pos:column="83"/></literal>
<literal type="string" pos:line="1726" pos:column="1">"              you  need several entries if you want to provide address for the\n"<pos:position pos:line="1726" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1727" pos:column="3">stdout<pos:position pos:line="1727" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1727" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1727" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1728" pos:column="2">fputs<pos:position pos:line="1728" pos:column="7"/></name><argument_list pos:line="1728" pos:column="7">(
<argument><expr><literal type="string" pos:line="1729" pos:column="1">"              same host but different ports.\n"<pos:position pos:line="1729" pos:column="49"/></literal>
<literal type="string" pos:line="1730" pos:column="1">"\n"<pos:position pos:line="1730" pos:column="5"/></literal>
<literal type="string" pos:line="1731" pos:column="1">"              This option can be used many times to add  many  host  names  to\n"<pos:position pos:line="1731" pos:column="83"/></literal>
<literal type="string" pos:line="1732" pos:column="1">"              resolve.\n"<pos:position pos:line="1732" pos:column="27"/></literal>
<literal type="string" pos:line="1733" pos:column="1">"\n"<pos:position pos:line="1733" pos:column="5"/></literal>
<literal type="string" pos:line="1734" pos:column="1">"              (Added in 7.21.3)\n"<pos:position pos:line="1734" pos:column="36"/></literal>
<literal type="string" pos:line="1735" pos:column="1">"\n"<pos:position pos:line="1735" pos:column="5"/></literal>
<literal type="string" pos:line="1736" pos:column="1">"       --retry &lt;num&gt;\n"<pos:position pos:line="1736" pos:column="31"/></literal>
<literal type="string" pos:line="1737" pos:column="1">"              If  a  transient  error is returned when curl tries to perform a\n"<pos:position pos:line="1737" pos:column="83"/></literal>
<literal type="string" pos:line="1738" pos:column="1">"              transfer, it will retry this number of times before  giving  up.\n"<pos:position pos:line="1738" pos:column="83"/></literal>
<literal type="string" pos:line="1739" pos:column="1">"              Setting  the  number to 0 makes curl do no retries (which is the\n"<pos:position pos:line="1739" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1740" pos:column="3">stdout<pos:position pos:line="1740" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1740" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1740" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1741" pos:column="2">fputs<pos:position pos:line="1741" pos:column="7"/></name><argument_list pos:line="1741" pos:column="7">(
<argument><expr><literal type="string" pos:line="1742" pos:column="1">"              default). Transient error means either: a timeout,  an  FTP  4xx\n"<pos:position pos:line="1742" pos:column="83"/></literal>
<literal type="string" pos:line="1743" pos:column="1">"              response code or an HTTP 5xx response code.\n"<pos:position pos:line="1743" pos:column="62"/></literal>
<literal type="string" pos:line="1744" pos:column="1">"\n"<pos:position pos:line="1744" pos:column="5"/></literal>
<literal type="string" pos:line="1745" pos:column="1">"              When  curl  is about to retry a transfer, it will first wait one\n"<pos:position pos:line="1745" pos:column="83"/></literal>
<literal type="string" pos:line="1746" pos:column="1">"              second and then for all forthcoming retries it will  double  the\n"<pos:position pos:line="1746" pos:column="83"/></literal>
<literal type="string" pos:line="1747" pos:column="1">"              waiting  time until it reaches 10 minutes which then will be the\n"<pos:position pos:line="1747" pos:column="83"/></literal>
<literal type="string" pos:line="1748" pos:column="1">"              delay between the rest of the retries.  By  using  --retry-delay\n"<pos:position pos:line="1748" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1749" pos:column="3">stdout<pos:position pos:line="1749" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1749" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1749" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1750" pos:column="2">fputs<pos:position pos:line="1750" pos:column="7"/></name><argument_list pos:line="1750" pos:column="7">(
<argument><expr><literal type="string" pos:line="1751" pos:column="1">"              you   disable  this  exponential  backoff  algorithm.  See  also\n"<pos:position pos:line="1751" pos:column="83"/></literal>
<literal type="string" pos:line="1752" pos:column="1">"              --retry-max-time to limit the total time  allowed  for  retries.\n"<pos:position pos:line="1752" pos:column="83"/></literal>
<literal type="string" pos:line="1753" pos:column="1">"              (Added in 7.12.3)\n"<pos:position pos:line="1753" pos:column="36"/></literal>
<literal type="string" pos:line="1754" pos:column="1">"\n"<pos:position pos:line="1754" pos:column="5"/></literal>
<literal type="string" pos:line="1755" pos:column="1">"              If  this  option  is  used  multiple  times, the last occurrence\n"<pos:position pos:line="1755" pos:column="83"/></literal>
<literal type="string" pos:line="1756" pos:column="1">"              determines the amount.\n"<pos:position pos:line="1756" pos:column="41"/></literal>
<literal type="string" pos:line="1757" pos:column="1">"\n"<pos:position pos:line="1757" pos:column="5"/></literal>
<literal type="string" pos:line="1758" pos:column="1">"       --retry-delay &lt;seconds&gt;\n"<pos:position pos:line="1758" pos:column="41"/></literal>
<literal type="string" pos:line="1759" pos:column="1">"              Make curl sleep this amount of time before  each  retry  when  a\n"<pos:position pos:line="1759" pos:column="83"/></literal>
<literal type="string" pos:line="1760" pos:column="1">"              transfer  has  failed  with  a  transient  error (it changes the\n"<pos:position pos:line="1760" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1761" pos:column="3">stdout<pos:position pos:line="1761" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1761" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1761" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1762" pos:column="2">fputs<pos:position pos:line="1762" pos:column="7"/></name><argument_list pos:line="1762" pos:column="7">(
<argument><expr><literal type="string" pos:line="1763" pos:column="1">"              default backoff time algorithm between retries). This option  is\n"<pos:position pos:line="1763" pos:column="83"/></literal>
<literal type="string" pos:line="1764" pos:column="1">"              only  interesting if --retry is also used. Setting this delay to\n"<pos:position pos:line="1764" pos:column="83"/></literal>
<literal type="string" pos:line="1765" pos:column="1">"              zero will make curl use the default  backoff  time.   (Added  in\n"<pos:position pos:line="1765" pos:column="83"/></literal>
<literal type="string" pos:line="1766" pos:column="1">"              7.12.3)\n"<pos:position pos:line="1766" pos:column="26"/></literal>
<literal type="string" pos:line="1767" pos:column="1">"\n"<pos:position pos:line="1767" pos:column="5"/></literal>
<literal type="string" pos:line="1768" pos:column="1">"              If  this  option  is  used  multiple  times, the last occurrence\n"<pos:position pos:line="1768" pos:column="83"/></literal>
<literal type="string" pos:line="1769" pos:column="1">"              determines the amount.\n"<pos:position pos:line="1769" pos:column="41"/></literal>
<literal type="string" pos:line="1770" pos:column="1">"\n"<pos:position pos:line="1770" pos:column="5"/></literal>
<literal type="string" pos:line="1771" pos:column="1">"       --retry-max-time &lt;seconds&gt;\n"<pos:position pos:line="1771" pos:column="44"/></literal>
<literal type="string" pos:line="1772" pos:column="1">"              The retry timer is reset  before  the  first  transfer  attempt.\n"<pos:position pos:line="1772" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1773" pos:column="3">stdout<pos:position pos:line="1773" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1773" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1773" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1774" pos:column="2">fputs<pos:position pos:line="1774" pos:column="7"/></name><argument_list pos:line="1774" pos:column="7">(
<argument><expr><literal type="string" pos:line="1775" pos:column="1">"              Retries will be done as usual (see --retry) as long as the timer\n"<pos:position pos:line="1775" pos:column="83"/></literal>
<literal type="string" pos:line="1776" pos:column="1">"              hasn't reached this given limit. Notice that if the timer hasn't\n"<pos:position pos:line="1776" pos:column="83"/></literal>
<literal type="string" pos:line="1777" pos:column="1">"              reached  the  limit, the request will be made and while perform-\n"<pos:position pos:line="1777" pos:column="83"/></literal>
<literal type="string" pos:line="1778" pos:column="1">"              ing, it may take longer than this given time period. To limit  a\n"<pos:position pos:line="1778" pos:column="83"/></literal>
<literal type="string" pos:line="1779" pos:column="1">"              single  request's  maximum  time,  use -m, --max-time.  Set this\n"<pos:position pos:line="1779" pos:column="83"/></literal>
<literal type="string" pos:line="1780" pos:column="1">"              option to zero to not timeout retries. (Added in 7.12.3)\n"<pos:position pos:line="1780" pos:column="75"/></literal>
<literal type="string" pos:line="1781" pos:column="1">"\n"<pos:position pos:line="1781" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1782" pos:column="3">stdout<pos:position pos:line="1782" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1782" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1782" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1783" pos:column="2">fputs<pos:position pos:line="1783" pos:column="7"/></name><argument_list pos:line="1783" pos:column="7">(
<argument><expr><literal type="string" pos:line="1784" pos:column="1">"              If this option is  used  multiple  times,  the  last  occurrence\n"<pos:position pos:line="1784" pos:column="83"/></literal>
<literal type="string" pos:line="1785" pos:column="1">"              determines the amount.\n"<pos:position pos:line="1785" pos:column="41"/></literal>
<literal type="string" pos:line="1786" pos:column="1">"\n"<pos:position pos:line="1786" pos:column="5"/></literal>
<literal type="string" pos:line="1787" pos:column="1">"       -s, --silent\n"<pos:position pos:line="1787" pos:column="24"/></literal>
<literal type="string" pos:line="1788" pos:column="1">"              Silent  or  quiet  mode. Don't show progress meter or error mes-\n"<pos:position pos:line="1788" pos:column="83"/></literal>
<literal type="string" pos:line="1789" pos:column="1">"              sages.  Makes Curl mute.\n"<pos:position pos:line="1789" pos:column="43"/></literal>
<literal type="string" pos:line="1790" pos:column="1">"\n"<pos:position pos:line="1790" pos:column="5"/></literal>
<literal type="string" pos:line="1791" pos:column="1">"       -S, --show-error\n"<pos:position pos:line="1791" pos:column="28"/></literal>
<literal type="string" pos:line="1792" pos:column="1">"              When used with -s it makes curl show  an  error  message  if  it\n"<pos:position pos:line="1792" pos:column="83"/></literal>
<literal type="string" pos:line="1793" pos:column="1">"              fails.\n"<pos:position pos:line="1793" pos:column="25"/></literal>
<literal type="string" pos:line="1794" pos:column="1">"\n"<pos:position pos:line="1794" pos:column="5"/></literal>
<literal type="string" pos:line="1795" pos:column="1">"       --ssl  (FTP,  POP3,  IMAP, SMTP) Try to use SSL/TLS for the connection.\n"<pos:position pos:line="1795" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1796" pos:column="3">stdout<pos:position pos:line="1796" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1796" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1796" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1797" pos:column="2">fputs<pos:position pos:line="1797" pos:column="7"/></name><argument_list pos:line="1797" pos:column="7">(
<argument><expr><literal type="string" pos:line="1798" pos:column="1">"              Reverts to a non-secure connection if the server doesn't support\n"<pos:position pos:line="1798" pos:column="83"/></literal>
<literal type="string" pos:line="1799" pos:column="1">"              SSL/TLS.   See also --ftp-ssl-control and --ssl-reqd for differ-\n"<pos:position pos:line="1799" pos:column="83"/></literal>
<literal type="string" pos:line="1800" pos:column="1">"              ent levels of encryption required. (Added in 7.20.0)\n"<pos:position pos:line="1800" pos:column="71"/></literal>
<literal type="string" pos:line="1801" pos:column="1">"\n"<pos:position pos:line="1801" pos:column="5"/></literal>
<literal type="string" pos:line="1802" pos:column="1">"              This option was formerly known as --ftp-ssl (Added  in  7.11.0).\n"<pos:position pos:line="1802" pos:column="83"/></literal>
<literal type="string" pos:line="1803" pos:column="1">"              That  option  name  can  still  be used but will be removed in a\n"<pos:position pos:line="1803" pos:column="83"/></literal>
<literal type="string" pos:line="1804" pos:column="1">"              future version.\n"<pos:position pos:line="1804" pos:column="34"/></literal>
<literal type="string" pos:line="1805" pos:column="1">"\n"<pos:position pos:line="1805" pos:column="5"/></literal>
<literal type="string" pos:line="1806" pos:column="1">"       --ssl-reqd\n"<pos:position pos:line="1806" pos:column="22"/></literal></expr></argument>
, <argument><expr><name pos:line="1807" pos:column="3">stdout<pos:position pos:line="1807" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1807" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1807" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1808" pos:column="2">fputs<pos:position pos:line="1808" pos:column="7"/></name><argument_list pos:line="1808" pos:column="7">(
<argument><expr><literal type="string" pos:line="1809" pos:column="1">"              (FTP, POP3, IMAP, SMTP)  Require  SSL/TLS  for  the  connection.\n"<pos:position pos:line="1809" pos:column="83"/></literal>
<literal type="string" pos:line="1810" pos:column="1">"              Terminates the connection if the server doesn't support SSL/TLS.\n"<pos:position pos:line="1810" pos:column="83"/></literal>
<literal type="string" pos:line="1811" pos:column="1">"              (Added in 7.20.0)\n"<pos:position pos:line="1811" pos:column="36"/></literal>
<literal type="string" pos:line="1812" pos:column="1">"\n"<pos:position pos:line="1812" pos:column="5"/></literal>
<literal type="string" pos:line="1813" pos:column="1">"              This option was  formerly  known  as  --ftp-ssl-reqd  (added  in\n"<pos:position pos:line="1813" pos:column="83"/></literal>
<literal type="string" pos:line="1814" pos:column="1">"              7.15.5).  That option name can still be used but will be removed\n"<pos:position pos:line="1814" pos:column="83"/></literal>
<literal type="string" pos:line="1815" pos:column="1">"              in a future version.\n"<pos:position pos:line="1815" pos:column="39"/></literal>
<literal type="string" pos:line="1816" pos:column="1">"\n"<pos:position pos:line="1816" pos:column="5"/></literal>
<literal type="string" pos:line="1817" pos:column="1">"       --ssl-allow-beast\n"<pos:position pos:line="1817" pos:column="29"/></literal>
<literal type="string" pos:line="1818" pos:column="1">"              (SSL) This option tells curl to not work around a security  flaw\n"<pos:position pos:line="1818" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1819" pos:column="3">stdout<pos:position pos:line="1819" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1819" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1819" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1820" pos:column="2">fputs<pos:position pos:line="1820" pos:column="7"/></name><argument_list pos:line="1820" pos:column="7">(
<argument><expr><literal type="string" pos:line="1821" pos:column="1">"              in the SSL3 and TLS1.0 protocols known as BEAST.  If this option\n"<pos:position pos:line="1821" pos:column="83"/></literal>
<literal type="string" pos:line="1822" pos:column="1">"              isn't used, the SSL layer may use work-arounds  known  to  cause\n"<pos:position pos:line="1822" pos:column="83"/></literal>
<literal type="string" pos:line="1823" pos:column="1">"              interoperability  problems  with some older SSL implementations.\n"<pos:position pos:line="1823" pos:column="83"/></literal>
<literal type="string" pos:line="1824" pos:column="1">"              WARNING: this option loosens the SSL security, and by using this\n"<pos:position pos:line="1824" pos:column="83"/></literal>
<literal type="string" pos:line="1825" pos:column="1">"              flag you ask for exactly that.  (Added in 7.25.0)\n"<pos:position pos:line="1825" pos:column="68"/></literal>
<literal type="string" pos:line="1826" pos:column="1">"\n"<pos:position pos:line="1826" pos:column="5"/></literal>
<literal type="string" pos:line="1827" pos:column="1">"       --socks4 &lt;host[:port]&gt;\n"<pos:position pos:line="1827" pos:column="40"/></literal>
<literal type="string" pos:line="1828" pos:column="1">"              Use the specified SOCKS4 proxy. If the port number is not speci-\n"<pos:position pos:line="1828" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1829" pos:column="3">stdout<pos:position pos:line="1829" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1829" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1829" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1830" pos:column="2">fputs<pos:position pos:line="1830" pos:column="7"/></name><argument_list pos:line="1830" pos:column="7">(
<argument><expr><literal type="string" pos:line="1831" pos:column="1">"              fied, it is assumed at port 1080. (Added in 7.15.2)\n"<pos:position pos:line="1831" pos:column="70"/></literal>
<literal type="string" pos:line="1832" pos:column="1">"\n"<pos:position pos:line="1832" pos:column="5"/></literal>
<literal type="string" pos:line="1833" pos:column="1">"              This option overrides any previous use of -x, --proxy,  as  they\n"<pos:position pos:line="1833" pos:column="83"/></literal>
<literal type="string" pos:line="1834" pos:column="1">"              are mutually exclusive.\n"<pos:position pos:line="1834" pos:column="42"/></literal>
<literal type="string" pos:line="1835" pos:column="1">"\n"<pos:position pos:line="1835" pos:column="5"/></literal>
<literal type="string" pos:line="1836" pos:column="1">"              Since 7.21.7, this option is superfluous since you can specify a\n"<pos:position pos:line="1836" pos:column="83"/></literal>
<literal type="string" pos:line="1837" pos:column="1">"              socks4 proxy with -x, --proxy using a socks4:// protocol prefix.\n"<pos:position pos:line="1837" pos:column="83"/></literal>
<literal type="string" pos:line="1838" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1838" pos:column="83"/></literal>
<literal type="string" pos:line="1839" pos:column="1">"\n"<pos:position pos:line="1839" pos:column="5"/></literal>
<literal type="string" pos:line="1840" pos:column="1">"       --socks4a &lt;host[:port]&gt;\n"<pos:position pos:line="1840" pos:column="41"/></literal></expr></argument>
, <argument><expr><name pos:line="1841" pos:column="3">stdout<pos:position pos:line="1841" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1841" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1841" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1842" pos:column="2">fputs<pos:position pos:line="1842" pos:column="7"/></name><argument_list pos:line="1842" pos:column="7">(
<argument><expr><literal type="string" pos:line="1843" pos:column="1">"              Use the specified SOCKS4a proxy. If the port number is not spec-\n"<pos:position pos:line="1843" pos:column="83"/></literal>
<literal type="string" pos:line="1844" pos:column="1">"              ified, it is assumed at port 1080. (Added in 7.18.0)\n"<pos:position pos:line="1844" pos:column="71"/></literal>
<literal type="string" pos:line="1845" pos:column="1">"\n"<pos:position pos:line="1845" pos:column="5"/></literal>
<literal type="string" pos:line="1846" pos:column="1">"              This  option  overrides any previous use of -x, --proxy, as they\n"<pos:position pos:line="1846" pos:column="83"/></literal>
<literal type="string" pos:line="1847" pos:column="1">"              are mutually exclusive.\n"<pos:position pos:line="1847" pos:column="42"/></literal>
<literal type="string" pos:line="1848" pos:column="1">"\n"<pos:position pos:line="1848" pos:column="5"/></literal>
<literal type="string" pos:line="1849" pos:column="1">"              Since 7.21.7, this option is superfluous since you can specify a\n"<pos:position pos:line="1849" pos:column="83"/></literal>
<literal type="string" pos:line="1850" pos:column="1">"              socks4a  proxy with -x, --proxy using a socks4a:// protocol pre-\n"<pos:position pos:line="1850" pos:column="83"/></literal>
<literal type="string" pos:line="1851" pos:column="1">"              fix.\n"<pos:position pos:line="1851" pos:column="23"/></literal>
<literal type="string" pos:line="1852" pos:column="1">"\n"<pos:position pos:line="1852" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1853" pos:column="3">stdout<pos:position pos:line="1853" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1853" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1853" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1854" pos:column="2">fputs<pos:position pos:line="1854" pos:column="7"/></name><argument_list pos:line="1854" pos:column="7">(
<argument><expr><literal type="string" pos:line="1855" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1855" pos:column="83"/></literal>
<literal type="string" pos:line="1856" pos:column="1">"\n"<pos:position pos:line="1856" pos:column="5"/></literal>
<literal type="string" pos:line="1857" pos:column="1">"       --socks5-hostname &lt;host[:port]&gt;\n"<pos:position pos:line="1857" pos:column="49"/></literal>
<literal type="string" pos:line="1858" pos:column="1">"              Use the specified SOCKS5 proxy (and let the  proxy  resolve  the\n"<pos:position pos:line="1858" pos:column="83"/></literal>
<literal type="string" pos:line="1859" pos:column="1">"              host  name).  If the port number is not specified, it is assumed\n"<pos:position pos:line="1859" pos:column="83"/></literal>
<literal type="string" pos:line="1860" pos:column="1">"              at port 1080. (Added in 7.18.0)\n"<pos:position pos:line="1860" pos:column="50"/></literal>
<literal type="string" pos:line="1861" pos:column="1">"\n"<pos:position pos:line="1861" pos:column="5"/></literal>
<literal type="string" pos:line="1862" pos:column="1">"              This option overrides any previous use of -x, --proxy,  as  they\n"<pos:position pos:line="1862" pos:column="83"/></literal>
<literal type="string" pos:line="1863" pos:column="1">"              are mutually exclusive.\n"<pos:position pos:line="1863" pos:column="42"/></literal>
<literal type="string" pos:line="1864" pos:column="1">"\n"<pos:position pos:line="1864" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1865" pos:column="3">stdout<pos:position pos:line="1865" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1865" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1865" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1866" pos:column="2">fputs<pos:position pos:line="1866" pos:column="7"/></name><argument_list pos:line="1866" pos:column="7">(
<argument><expr><literal type="string" pos:line="1867" pos:column="1">"              Since 7.21.7, this option is superfluous since you can specify a\n"<pos:position pos:line="1867" pos:column="83"/></literal>
<literal type="string" pos:line="1868" pos:column="1">"              socks5 hostname proxy with -x, --proxy using a socks5h:// proto-\n"<pos:position pos:line="1868" pos:column="83"/></literal>
<literal type="string" pos:line="1869" pos:column="1">"              col prefix.\n"<pos:position pos:line="1869" pos:column="30"/></literal>
<literal type="string" pos:line="1870" pos:column="1">"\n"<pos:position pos:line="1870" pos:column="5"/></literal>
<literal type="string" pos:line="1871" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1871" pos:column="83"/></literal>
<literal type="string" pos:line="1872" pos:column="1">"              (This option was  previously  wrongly  documented  and  used  as\n"<pos:position pos:line="1872" pos:column="83"/></literal>
<literal type="string" pos:line="1873" pos:column="1">"              --socks without the number appended.)\n"<pos:position pos:line="1873" pos:column="56"/></literal>
<literal type="string" pos:line="1874" pos:column="1">"\n"<pos:position pos:line="1874" pos:column="5"/></literal>
<literal type="string" pos:line="1875" pos:column="1">"       --socks5 &lt;host[:port]&gt;\n"<pos:position pos:line="1875" pos:column="40"/></literal></expr></argument>
, <argument><expr><name pos:line="1876" pos:column="3">stdout<pos:position pos:line="1876" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1876" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1876" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1877" pos:column="2">fputs<pos:position pos:line="1877" pos:column="7"/></name><argument_list pos:line="1877" pos:column="7">(
<argument><expr><literal type="string" pos:line="1878" pos:column="1">"              Use  the  specified  SOCKS5  proxy  -  but resolve the host name\n"<pos:position pos:line="1878" pos:column="83"/></literal>
<literal type="string" pos:line="1879" pos:column="1">"              locally. If the port number is not specified, it is  assumed  at\n"<pos:position pos:line="1879" pos:column="83"/></literal>
<literal type="string" pos:line="1880" pos:column="1">"              port 1080.\n"<pos:position pos:line="1880" pos:column="29"/></literal>
<literal type="string" pos:line="1881" pos:column="1">"\n"<pos:position pos:line="1881" pos:column="5"/></literal>
<literal type="string" pos:line="1882" pos:column="1">"              This  option  overrides any previous use of -x, --proxy, as they\n"<pos:position pos:line="1882" pos:column="83"/></literal>
<literal type="string" pos:line="1883" pos:column="1">"              are mutually exclusive.\n"<pos:position pos:line="1883" pos:column="42"/></literal>
<literal type="string" pos:line="1884" pos:column="1">"\n"<pos:position pos:line="1884" pos:column="5"/></literal>
<literal type="string" pos:line="1885" pos:column="1">"              Since 7.21.7, this option is superfluous since you can specify a\n"<pos:position pos:line="1885" pos:column="83"/></literal>
<literal type="string" pos:line="1886" pos:column="1">"              socks5 proxy with -x, --proxy using a socks5:// protocol prefix.\n"<pos:position pos:line="1886" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1887" pos:column="3">stdout<pos:position pos:line="1887" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1887" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1887" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1888" pos:column="2">fputs<pos:position pos:line="1888" pos:column="7"/></name><argument_list pos:line="1888" pos:column="7">(
<argument><expr><literal type="string" pos:line="1889" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1889" pos:column="83"/></literal>
<literal type="string" pos:line="1890" pos:column="1">"              (This option was  previously  wrongly  documented  and  used  as\n"<pos:position pos:line="1890" pos:column="83"/></literal>
<literal type="string" pos:line="1891" pos:column="1">"              --socks without the number appended.)\n"<pos:position pos:line="1891" pos:column="56"/></literal>
<literal type="string" pos:line="1892" pos:column="1">"\n"<pos:position pos:line="1892" pos:column="5"/></literal>
<literal type="string" pos:line="1893" pos:column="1">"              This  option (as well as --socks4) does not work with IPV6, FTPS\n"<pos:position pos:line="1893" pos:column="83"/></literal>
<literal type="string" pos:line="1894" pos:column="1">"              or LDAP.\n"<pos:position pos:line="1894" pos:column="27"/></literal>
<literal type="string" pos:line="1895" pos:column="1">"\n"<pos:position pos:line="1895" pos:column="5"/></literal>
<literal type="string" pos:line="1896" pos:column="1">"       --socks5-gssapi-service &lt;servicename&gt;\n"<pos:position pos:line="1896" pos:column="55"/></literal>
<literal type="string" pos:line="1897" pos:column="1">"              The default service name for a socks server is rcmd/server-fqdn.\n"<pos:position pos:line="1897" pos:column="83"/></literal>
<literal type="string" pos:line="1898" pos:column="1">"              This option allows you to change it.\n"<pos:position pos:line="1898" pos:column="55"/></literal>
<literal type="string" pos:line="1899" pos:column="1">"\n"<pos:position pos:line="1899" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1900" pos:column="3">stdout<pos:position pos:line="1900" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1900" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1900" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1901" pos:column="2">fputs<pos:position pos:line="1901" pos:column="7"/></name><argument_list pos:line="1901" pos:column="7">(
<argument><expr><literal type="string" pos:line="1902" pos:column="1">"              Examples:   --socks5  proxy-name  --socks5-gssapi-service  sockd\n"<pos:position pos:line="1902" pos:column="83"/></literal>
<literal type="string" pos:line="1903" pos:column="1">"              would use sockd/proxy-name --socks5 proxy-name  --socks5-gssapi-\n"<pos:position pos:line="1903" pos:column="83"/></literal>
<literal type="string" pos:line="1904" pos:column="1">"              service  sockd/real-name  would  use  sockd/real-name  for cases\n"<pos:position pos:line="1904" pos:column="83"/></literal>
<literal type="string" pos:line="1905" pos:column="1">"              where the proxy-name does not match the principal name.   (Added\n"<pos:position pos:line="1905" pos:column="83"/></literal>
<literal type="string" pos:line="1906" pos:column="1">"              in 7.19.4).\n"<pos:position pos:line="1906" pos:column="30"/></literal>
<literal type="string" pos:line="1907" pos:column="1">"\n"<pos:position pos:line="1907" pos:column="5"/></literal>
<literal type="string" pos:line="1908" pos:column="1">"       --socks5-gssapi-nec\n"<pos:position pos:line="1908" pos:column="31"/></literal>
<literal type="string" pos:line="1909" pos:column="1">"              As  part  of the gssapi negotiation a protection mode is negoti-\n"<pos:position pos:line="1909" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1910" pos:column="3">stdout<pos:position pos:line="1910" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1910" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1910" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1911" pos:column="2">fputs<pos:position pos:line="1911" pos:column="7"/></name><argument_list pos:line="1911" pos:column="7">(
<argument><expr><literal type="string" pos:line="1912" pos:column="1">"              ated. RFC 1961 says in section 4.3/4.4 it should  be  protected,\n"<pos:position pos:line="1912" pos:column="83"/></literal>
<literal type="string" pos:line="1913" pos:column="1">"              but  the  NEC  reference  implementation  does  not.  The option\n"<pos:position pos:line="1913" pos:column="83"/></literal>
<literal type="string" pos:line="1914" pos:column="1">"              --socks5-gssapi-nec allows the unprotected exchange of the  pro-\n"<pos:position pos:line="1914" pos:column="83"/></literal>
<literal type="string" pos:line="1915" pos:column="1">"              tection mode negotiation. (Added in 7.19.4).\n"<pos:position pos:line="1915" pos:column="63"/></literal>
<literal type="string" pos:line="1916" pos:column="1">"\n"<pos:position pos:line="1916" pos:column="5"/></literal>
<literal type="string" pos:line="1917" pos:column="1">"       --stderr &lt;file&gt;\n"<pos:position pos:line="1917" pos:column="33"/></literal>
<literal type="string" pos:line="1918" pos:column="1">"              Redirect  all writes to stderr to the specified file instead. If\n"<pos:position pos:line="1918" pos:column="83"/></literal>
<literal type="string" pos:line="1919" pos:column="1">"              the file name is a plain '-', it is instead written to stdout.\n"<pos:position pos:line="1919" pos:column="81"/></literal>
<literal type="string" pos:line="1920" pos:column="1">"\n"<pos:position pos:line="1920" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1921" pos:column="3">stdout<pos:position pos:line="1921" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1921" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1921" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1922" pos:column="2">fputs<pos:position pos:line="1922" pos:column="7"/></name><argument_list pos:line="1922" pos:column="7">(
<argument><expr><literal type="string" pos:line="1923" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1923" pos:column="83"/></literal>
<literal type="string" pos:line="1924" pos:column="1">"\n"<pos:position pos:line="1924" pos:column="5"/></literal>
<literal type="string" pos:line="1925" pos:column="1">"       -t, --telnet-option &lt;OPT=val&gt;\n"<pos:position pos:line="1925" pos:column="47"/></literal>
<literal type="string" pos:line="1926" pos:column="1">"              Pass options to the telnet protocol. Supported options are:\n"<pos:position pos:line="1926" pos:column="78"/></literal>
<literal type="string" pos:line="1927" pos:column="1">"\n"<pos:position pos:line="1927" pos:column="5"/></literal>
<literal type="string" pos:line="1928" pos:column="1">"              TTYPE=&lt;term&gt; Sets the terminal type.\n"<pos:position pos:line="1928" pos:column="61"/></literal>
<literal type="string" pos:line="1929" pos:column="1">"\n"<pos:position pos:line="1929" pos:column="5"/></literal>
<literal type="string" pos:line="1930" pos:column="1">"              XDISPLOC=&lt;X display&gt; Sets the X display location.\n"<pos:position pos:line="1930" pos:column="74"/></literal>
<literal type="string" pos:line="1931" pos:column="1">"\n"<pos:position pos:line="1931" pos:column="5"/></literal>
<literal type="string" pos:line="1932" pos:column="1">"              NEW_ENV=&lt;var,val&gt; Sets an environment variable.\n"<pos:position pos:line="1932" pos:column="72"/></literal>
<literal type="string" pos:line="1933" pos:column="1">"\n"<pos:position pos:line="1933" pos:column="5"/></literal>
<literal type="string" pos:line="1934" pos:column="1">"       -T, --upload-file &lt;file&gt;\n"<pos:position pos:line="1934" pos:column="42"/></literal>
<literal type="string" pos:line="1935" pos:column="1">"              This transfers the specified local file to the  remote  URL.  If\n"<pos:position pos:line="1935" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1936" pos:column="3">stdout<pos:position pos:line="1936" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1936" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1936" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1937" pos:column="2">fputs<pos:position pos:line="1937" pos:column="7"/></name><argument_list pos:line="1937" pos:column="7">(
<argument><expr><literal type="string" pos:line="1938" pos:column="1">"              there is no file part in the specified URL, Curl will append the\n"<pos:position pos:line="1938" pos:column="83"/></literal>
<literal type="string" pos:line="1939" pos:column="1">"              local file name. NOTE that you must use a trailing / on the last\n"<pos:position pos:line="1939" pos:column="83"/></literal>
<literal type="string" pos:line="1940" pos:column="1">"              directory  to really prove to Curl that there is no file name or\n"<pos:position pos:line="1940" pos:column="83"/></literal>
<literal type="string" pos:line="1941" pos:column="1">"              curl will think that your last directory name is the remote file\n"<pos:position pos:line="1941" pos:column="83"/></literal>
<literal type="string" pos:line="1942" pos:column="1">"              name to use. That will most likely cause the upload operation to\n"<pos:position pos:line="1942" pos:column="83"/></literal>
<literal type="string" pos:line="1943" pos:column="1">"              fail. If this is used on a HTTP(S) server, the PUT command  will\n"<pos:position pos:line="1943" pos:column="83"/></literal>
<literal type="string" pos:line="1944" pos:column="1">"              be used.\n"<pos:position pos:line="1944" pos:column="27"/></literal>
<literal type="string" pos:line="1945" pos:column="1">"\n"<pos:position pos:line="1945" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1946" pos:column="3">stdout<pos:position pos:line="1946" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1946" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1946" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1947" pos:column="2">fputs<pos:position pos:line="1947" pos:column="7"/></name><argument_list pos:line="1947" pos:column="7">(
<argument><expr><literal type="string" pos:line="1948" pos:column="1">"              Use  the file name \"-\" (a single dash) to use stdin instead of a\n"<pos:position pos:line="1948" pos:column="85"/></literal>
<literal type="string" pos:line="1949" pos:column="1">"              given file.  Alternately, the file name \".\"  (a  single  period)\n"<pos:position pos:line="1949" pos:column="85"/></literal>
<literal type="string" pos:line="1950" pos:column="1">"              may  be  specified  instead  of \"-\" to use stdin in non-blocking\n"<pos:position pos:line="1950" pos:column="85"/></literal>
<literal type="string" pos:line="1951" pos:column="1">"              mode to  allow  reading  server  output  while  stdin  is  being\n"<pos:position pos:line="1951" pos:column="83"/></literal>
<literal type="string" pos:line="1952" pos:column="1">"              uploaded.\n"<pos:position pos:line="1952" pos:column="28"/></literal>
<literal type="string" pos:line="1953" pos:column="1">"\n"<pos:position pos:line="1953" pos:column="5"/></literal>
<literal type="string" pos:line="1954" pos:column="1">"              You can specify one -T for each URL on the command line. Each -T\n"<pos:position pos:line="1954" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1955" pos:column="3">stdout<pos:position pos:line="1955" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1955" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1955" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1956" pos:column="2">fputs<pos:position pos:line="1956" pos:column="7"/></name><argument_list pos:line="1956" pos:column="7">(
<argument><expr><literal type="string" pos:line="1957" pos:column="1">"              + URL pair specifies what to upload and to where. curl also sup-\n"<pos:position pos:line="1957" pos:column="83"/></literal>
<literal type="string" pos:line="1958" pos:column="1">"              ports \"globbing\" of the -T argument, meaning that you can upload\n"<pos:position pos:line="1958" pos:column="85"/></literal>
<literal type="string" pos:line="1959" pos:column="1">"              multiple files to a single URL by using the  same  URL  globbing\n"<pos:position pos:line="1959" pos:column="83"/></literal>
<literal type="string" pos:line="1960" pos:column="1">"              style supported in the URL, like this:\n"<pos:position pos:line="1960" pos:column="57"/></literal>
<literal type="string" pos:line="1961" pos:column="1">"\n"<pos:position pos:line="1961" pos:column="5"/></literal>
<literal type="string" pos:line="1962" pos:column="1">"              curl -T \"{file1,file2}\" http://www.uploadtothissite.com\n"<pos:position pos:line="1962" pos:column="76"/></literal>
<literal type="string" pos:line="1963" pos:column="1">"\n"<pos:position pos:line="1963" pos:column="5"/></literal>
<literal type="string" pos:line="1964" pos:column="1">"              or even\n"<pos:position pos:line="1964" pos:column="26"/></literal>
<literal type="string" pos:line="1965" pos:column="1">"\n"<pos:position pos:line="1965" pos:column="5"/></literal>
<literal type="string" pos:line="1966" pos:column="1">"              curl -T \"img[1-1000].png\" ftp://ftp.picturemania.com/upload/\n"<pos:position pos:line="1966" pos:column="81"/></literal>
<literal type="string" pos:line="1967" pos:column="1">"\n"<pos:position pos:line="1967" pos:column="5"/></literal>
<literal type="string" pos:line="1968" pos:column="1">"       --tcp-nodelay\n"<pos:position pos:line="1968" pos:column="25"/></literal></expr></argument>
, <argument><expr><name pos:line="1969" pos:column="3">stdout<pos:position pos:line="1969" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1969" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1969" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1970" pos:column="2">fputs<pos:position pos:line="1970" pos:column="7"/></name><argument_list pos:line="1970" pos:column="7">(
<argument><expr><literal type="string" pos:line="1971" pos:column="1">"              Turn  on the TCP_NODELAY option. See the curl_easy_setopt(3) man\n"<pos:position pos:line="1971" pos:column="83"/></literal>
<literal type="string" pos:line="1972" pos:column="1">"              page for details about this option. (Added in 7.11.2)\n"<pos:position pos:line="1972" pos:column="72"/></literal>
<literal type="string" pos:line="1973" pos:column="1">"\n"<pos:position pos:line="1973" pos:column="5"/></literal>
<literal type="string" pos:line="1974" pos:column="1">"       --tftp-blksize &lt;value&gt;\n"<pos:position pos:line="1974" pos:column="40"/></literal>
<literal type="string" pos:line="1975" pos:column="1">"              (TFTP) Set TFTP BLKSIZE option (must be &gt;512). This is the block\n"<pos:position pos:line="1975" pos:column="86"/></literal>
<literal type="string" pos:line="1976" pos:column="1">"              size that curl will try to use when transferring data to or from\n"<pos:position pos:line="1976" pos:column="83"/></literal>
<literal type="string" pos:line="1977" pos:column="1">"              a TFTP server. By default 512 bytes will be used.\n"<pos:position pos:line="1977" pos:column="68"/></literal>
<literal type="string" pos:line="1978" pos:column="1">"\n"<pos:position pos:line="1978" pos:column="5"/></literal>
<literal type="string" pos:line="1979" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="1979" pos:column="83"/></literal>
<literal type="string" pos:line="1980" pos:column="1">"\n"<pos:position pos:line="1980" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="1981" pos:column="3">stdout<pos:position pos:line="1981" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1981" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1981" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1982" pos:column="2">fputs<pos:position pos:line="1982" pos:column="7"/></name><argument_list pos:line="1982" pos:column="7">(
<argument><expr><literal type="string" pos:line="1983" pos:column="1">"              (Added in 7.20.0)\n"<pos:position pos:line="1983" pos:column="36"/></literal>
<literal type="string" pos:line="1984" pos:column="1">"\n"<pos:position pos:line="1984" pos:column="5"/></literal>
<literal type="string" pos:line="1985" pos:column="1">"       --tlsauthtype &lt;authtype&gt;\n"<pos:position pos:line="1985" pos:column="42"/></literal>
<literal type="string" pos:line="1986" pos:column="1">"              Set TLS  authentication  type.  Currently,  the  only  supported\n"<pos:position pos:line="1986" pos:column="83"/></literal>
<literal type="string" pos:line="1987" pos:column="1">"              option  is  \"SRP\",  for  TLS-SRP  (RFC  5054).  If --tlsuser and\n"<pos:position pos:line="1987" pos:column="85"/></literal>
<literal type="string" pos:line="1988" pos:column="1">"              --tlspassword are specified but --tlsauthtype is not, then  this\n"<pos:position pos:line="1988" pos:column="83"/></literal>
<literal type="string" pos:line="1989" pos:column="1">"              option defaults to \"SRP\".  (Added in 7.21.4)\n"<pos:position pos:line="1989" pos:column="65"/></literal>
<literal type="string" pos:line="1990" pos:column="1">"\n"<pos:position pos:line="1990" pos:column="5"/></literal>
<literal type="string" pos:line="1991" pos:column="1">"       --tlsuser &lt;user&gt;\n"<pos:position pos:line="1991" pos:column="34"/></literal>
<literal type="string" pos:line="1992" pos:column="1">"              Set  username  for use with the TLS authentication method speci-\n"<pos:position pos:line="1992" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="1993" pos:column="3">stdout<pos:position pos:line="1993" pos:column="9"/></name></expr></argument>)<pos:position pos:line="1993" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="1993" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="1994" pos:column="2">fputs<pos:position pos:line="1994" pos:column="7"/></name><argument_list pos:line="1994" pos:column="7">(
<argument><expr><literal type="string" pos:line="1995" pos:column="1">"              fied with --tlsauthtype. Requires  that  --tlspassword  also  be\n"<pos:position pos:line="1995" pos:column="83"/></literal>
<literal type="string" pos:line="1996" pos:column="1">"              set.  (Added in 7.21.4)\n"<pos:position pos:line="1996" pos:column="42"/></literal>
<literal type="string" pos:line="1997" pos:column="1">"\n"<pos:position pos:line="1997" pos:column="5"/></literal>
<literal type="string" pos:line="1998" pos:column="1">"       --tlspassword &lt;password&gt;\n"<pos:position pos:line="1998" pos:column="42"/></literal>
<literal type="string" pos:line="1999" pos:column="1">"              Set  password  for use with the TLS authentication method speci-\n"<pos:position pos:line="1999" pos:column="83"/></literal>
<literal type="string" pos:line="2000" pos:column="1">"              fied with --tlsauthtype. Requires that --tlsuser  also  be  set.\n"<pos:position pos:line="2000" pos:column="83"/></literal>
<literal type="string" pos:line="2001" pos:column="1">"              (Added in 7.21.4)\n"<pos:position pos:line="2001" pos:column="36"/></literal>
<literal type="string" pos:line="2002" pos:column="1">"\n"<pos:position pos:line="2002" pos:column="5"/></literal>
<literal type="string" pos:line="2003" pos:column="1">"       --tr-encoding\n"<pos:position pos:line="2003" pos:column="25"/></literal>
<literal type="string" pos:line="2004" pos:column="1">"              (HTTP) Request a compressed Transfer-Encoding response using one\n"<pos:position pos:line="2004" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2005" pos:column="3">stdout<pos:position pos:line="2005" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2005" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2005" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2006" pos:column="2">fputs<pos:position pos:line="2006" pos:column="7"/></name><argument_list pos:line="2006" pos:column="7">(
<argument><expr><literal type="string" pos:line="2007" pos:column="1">"              of the algorithms libcurl  supports,  and  uncompress  the  data\n"<pos:position pos:line="2007" pos:column="83"/></literal>
<literal type="string" pos:line="2008" pos:column="1">"              while receiving it.\n"<pos:position pos:line="2008" pos:column="38"/></literal>
<literal type="string" pos:line="2009" pos:column="1">"\n"<pos:position pos:line="2009" pos:column="5"/></literal>
<literal type="string" pos:line="2010" pos:column="1">"              (Added in 7.21.6)\n"<pos:position pos:line="2010" pos:column="36"/></literal>
<literal type="string" pos:line="2011" pos:column="1">"\n"<pos:position pos:line="2011" pos:column="5"/></literal>
<literal type="string" pos:line="2012" pos:column="1">"       --trace &lt;file&gt;\n"<pos:position pos:line="2012" pos:column="32"/></literal>
<literal type="string" pos:line="2013" pos:column="1">"              Enables  a  full  trace  dump of all incoming and outgoing data,\n"<pos:position pos:line="2013" pos:column="83"/></literal>
<literal type="string" pos:line="2014" pos:column="1">"              including descriptive information, to the given output file. Use\n"<pos:position pos:line="2014" pos:column="83"/></literal>
<literal type="string" pos:line="2015" pos:column="1">"              \"-\" as filename to have the output sent to stdout.\n"<pos:position pos:line="2015" pos:column="71"/></literal>
<literal type="string" pos:line="2016" pos:column="1">"\n"<pos:position pos:line="2016" pos:column="5"/></literal>
<literal type="string" pos:line="2017" pos:column="1">"              This option overrides previous uses of -v, --verbose or --trace-\n"<pos:position pos:line="2017" pos:column="83"/></literal>
<literal type="string" pos:line="2018" pos:column="1">"              ascii.\n"<pos:position pos:line="2018" pos:column="25"/></literal>
<literal type="string" pos:line="2019" pos:column="1">"\n"<pos:position pos:line="2019" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2020" pos:column="3">stdout<pos:position pos:line="2020" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2020" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2020" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2021" pos:column="2">fputs<pos:position pos:line="2021" pos:column="7"/></name><argument_list pos:line="2021" pos:column="7">(
<argument><expr><literal type="string" pos:line="2022" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="2022" pos:column="83"/></literal>
<literal type="string" pos:line="2023" pos:column="1">"\n"<pos:position pos:line="2023" pos:column="5"/></literal>
<literal type="string" pos:line="2024" pos:column="1">"       --trace-ascii &lt;file&gt;\n"<pos:position pos:line="2024" pos:column="38"/></literal>
<literal type="string" pos:line="2025" pos:column="1">"              Enables a full trace dump of all  incoming  and  outgoing  data,\n"<pos:position pos:line="2025" pos:column="83"/></literal>
<literal type="string" pos:line="2026" pos:column="1">"              including descriptive information, to the given output file. Use\n"<pos:position pos:line="2026" pos:column="83"/></literal>
<literal type="string" pos:line="2027" pos:column="1">"              \"-\" as filename to have the output sent to stdout.\n"<pos:position pos:line="2027" pos:column="71"/></literal>
<literal type="string" pos:line="2028" pos:column="1">"\n"<pos:position pos:line="2028" pos:column="5"/></literal>
<literal type="string" pos:line="2029" pos:column="1">"              This is very similar to --trace, but leaves out the hex part and\n"<pos:position pos:line="2029" pos:column="83"/></literal>
<literal type="string" pos:line="2030" pos:column="1">"              only  shows  the ASCII part of the dump. It makes smaller output\n"<pos:position pos:line="2030" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2031" pos:column="3">stdout<pos:position pos:line="2031" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2031" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2031" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2032" pos:column="2">fputs<pos:position pos:line="2032" pos:column="7"/></name><argument_list pos:line="2032" pos:column="7">(
<argument><expr><literal type="string" pos:line="2033" pos:column="1">"              that might be easier to read for untrained humans.\n"<pos:position pos:line="2033" pos:column="69"/></literal>
<literal type="string" pos:line="2034" pos:column="1">"\n"<pos:position pos:line="2034" pos:column="5"/></literal>
<literal type="string" pos:line="2035" pos:column="1">"              This option overrides previous uses of -v, --verbose or --trace.\n"<pos:position pos:line="2035" pos:column="83"/></literal>
<literal type="string" pos:line="2036" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="2036" pos:column="83"/></literal>
<literal type="string" pos:line="2037" pos:column="1">"\n"<pos:position pos:line="2037" pos:column="5"/></literal>
<literal type="string" pos:line="2038" pos:column="1">"       --trace-time\n"<pos:position pos:line="2038" pos:column="24"/></literal>
<literal type="string" pos:line="2039" pos:column="1">"              Prepends a time stamp to each trace or verbose  line  that  curl\n"<pos:position pos:line="2039" pos:column="83"/></literal>
<literal type="string" pos:line="2040" pos:column="1">"              displays.  (Added in 7.14.0)\n"<pos:position pos:line="2040" pos:column="47"/></literal>
<literal type="string" pos:line="2041" pos:column="1">"\n"<pos:position pos:line="2041" pos:column="5"/></literal>
<literal type="string" pos:line="2042" pos:column="1">"       -u, --user &lt;user:password&gt;\n"<pos:position pos:line="2042" pos:column="44"/></literal>
<literal type="string" pos:line="2043" pos:column="1">"              Specify the user name and password to use for server authentica-\n"<pos:position pos:line="2043" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2044" pos:column="3">stdout<pos:position pos:line="2044" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2044" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2044" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2045" pos:column="2">fputs<pos:position pos:line="2045" pos:column="7"/></name><argument_list pos:line="2045" pos:column="7">(
<argument><expr><literal type="string" pos:line="2046" pos:column="1">"              tion. Overrides -n, --netrc and --netrc-optional.\n"<pos:position pos:line="2046" pos:column="68"/></literal>
<literal type="string" pos:line="2047" pos:column="1">"\n"<pos:position pos:line="2047" pos:column="5"/></literal>
<literal type="string" pos:line="2048" pos:column="1">"              If you just give the user name (without entering a  colon)  curl\n"<pos:position pos:line="2048" pos:column="83"/></literal>
<literal type="string" pos:line="2049" pos:column="1">"              will prompt for a password.\n"<pos:position pos:line="2049" pos:column="46"/></literal>
<literal type="string" pos:line="2050" pos:column="1">"\n"<pos:position pos:line="2050" pos:column="5"/></literal>
<literal type="string" pos:line="2051" pos:column="1">"              If  you  use an SSPI-enabled curl binary and do NTLM authentica-\n"<pos:position pos:line="2051" pos:column="83"/></literal>
<literal type="string" pos:line="2052" pos:column="1">"              tion, you can force curl to pick up the user name  and  password\n"<pos:position pos:line="2052" pos:column="83"/></literal>
<literal type="string" pos:line="2053" pos:column="1">"              from  your  environment by simply specifying a single colon with\n"<pos:position pos:line="2053" pos:column="83"/></literal>
<literal type="string" pos:line="2054" pos:column="1">"              this option: \"-u :\".\n"<pos:position pos:line="2054" pos:column="41"/></literal>
<literal type="string" pos:line="2055" pos:column="1">"\n"<pos:position pos:line="2055" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2056" pos:column="3">stdout<pos:position pos:line="2056" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2056" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2056" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2057" pos:column="2">fputs<pos:position pos:line="2057" pos:column="7"/></name><argument_list pos:line="2057" pos:column="7">(
<argument><expr><literal type="string" pos:line="2058" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="2058" pos:column="83"/></literal>
<literal type="string" pos:line="2059" pos:column="1">"\n"<pos:position pos:line="2059" pos:column="5"/></literal>
<literal type="string" pos:line="2060" pos:column="1">"       -U, --proxy-user &lt;user:password&gt;\n"<pos:position pos:line="2060" pos:column="50"/></literal>
<literal type="string" pos:line="2061" pos:column="1">"              Specify the user name and password to use for proxy  authentica-\n"<pos:position pos:line="2061" pos:column="83"/></literal>
<literal type="string" pos:line="2062" pos:column="1">"              tion.\n"<pos:position pos:line="2062" pos:column="24"/></literal>
<literal type="string" pos:line="2063" pos:column="1">"\n"<pos:position pos:line="2063" pos:column="5"/></literal>
<literal type="string" pos:line="2064" pos:column="1">"              If  you  use an SSPI-enabled curl binary and do NTLM authentica-\n"<pos:position pos:line="2064" pos:column="83"/></literal>
<literal type="string" pos:line="2065" pos:column="1">"              tion, you can force curl to pick up the user name  and  password\n"<pos:position pos:line="2065" pos:column="83"/></literal>
<literal type="string" pos:line="2066" pos:column="1">"              from  your  environment by simply specifying a single colon with\n"<pos:position pos:line="2066" pos:column="83"/></literal>
<literal type="string" pos:line="2067" pos:column="1">"              this option: \"-U :\".\n"<pos:position pos:line="2067" pos:column="41"/></literal>
<literal type="string" pos:line="2068" pos:column="1">"\n"<pos:position pos:line="2068" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2069" pos:column="3">stdout<pos:position pos:line="2069" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2069" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2069" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2070" pos:column="2">fputs<pos:position pos:line="2070" pos:column="7"/></name><argument_list pos:line="2070" pos:column="7">(
<argument><expr><literal type="string" pos:line="2071" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="2071" pos:column="83"/></literal>
<literal type="string" pos:line="2072" pos:column="1">"\n"<pos:position pos:line="2072" pos:column="5"/></literal>
<literal type="string" pos:line="2073" pos:column="1">"       --url &lt;URL&gt;\n"<pos:position pos:line="2073" pos:column="29"/></literal>
<literal type="string" pos:line="2074" pos:column="1">"              Specify a URL to fetch. This option is  mostly  handy  when  you\n"<pos:position pos:line="2074" pos:column="83"/></literal>
<literal type="string" pos:line="2075" pos:column="1">"              want to specify URL(s) in a config file.\n"<pos:position pos:line="2075" pos:column="59"/></literal>
<literal type="string" pos:line="2076" pos:column="1">"\n"<pos:position pos:line="2076" pos:column="5"/></literal>
<literal type="string" pos:line="2077" pos:column="1">"              This  option  may  be used any number of times. To control where\n"<pos:position pos:line="2077" pos:column="83"/></literal>
<literal type="string" pos:line="2078" pos:column="1">"              this URL is written, use the -o, --output or the  -O,  --remote-\n"<pos:position pos:line="2078" pos:column="83"/></literal>
<literal type="string" pos:line="2079" pos:column="1">"              name options.\n"<pos:position pos:line="2079" pos:column="32"/></literal>
<literal type="string" pos:line="2080" pos:column="1">"       -v, --verbose\n"<pos:position pos:line="2080" pos:column="25"/></literal></expr></argument>
, <argument><expr><name pos:line="2081" pos:column="3">stdout<pos:position pos:line="2081" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2081" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2081" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2082" pos:column="2">fputs<pos:position pos:line="2082" pos:column="7"/></name><argument_list pos:line="2082" pos:column="7">(
<argument><expr><literal type="string" pos:line="2083" pos:column="1">"              Makes  the  fetching  more  verbose/talkative. Mostly useful for\n"<pos:position pos:line="2083" pos:column="83"/></literal>
<literal type="string" pos:line="2084" pos:column="1">"              debugging. A line starting with '&gt;' means \"header data\" sent  by\n"<pos:position pos:line="2084" pos:column="88"/></literal>
<literal type="string" pos:line="2085" pos:column="1">"              curl, '&lt;' means \"header data\" received by curl that is hidden in\n"<pos:position pos:line="2085" pos:column="88"/></literal>
<literal type="string" pos:line="2086" pos:column="1">"              normal cases, and a line starting with '*' means additional info\n"<pos:position pos:line="2086" pos:column="83"/></literal>
<literal type="string" pos:line="2087" pos:column="1">"              provided by curl.\n"<pos:position pos:line="2087" pos:column="36"/></literal>
<literal type="string" pos:line="2088" pos:column="1">"\n"<pos:position pos:line="2088" pos:column="5"/></literal>
<literal type="string" pos:line="2089" pos:column="1">"              Note  that  if  you  only  want  HTTP headers in the output, -i,\n"<pos:position pos:line="2089" pos:column="83"/></literal>
<literal type="string" pos:line="2090" pos:column="1">"              --include might be the option you're looking for.\n"<pos:position pos:line="2090" pos:column="68"/></literal>
<literal type="string" pos:line="2091" pos:column="1">"\n"<pos:position pos:line="2091" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2092" pos:column="3">stdout<pos:position pos:line="2092" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2092" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2092" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2093" pos:column="2">fputs<pos:position pos:line="2093" pos:column="7"/></name><argument_list pos:line="2093" pos:column="7">(
<argument><expr><literal type="string" pos:line="2094" pos:column="1">"              If you think this option still doesn't give you enough  details,\n"<pos:position pos:line="2094" pos:column="83"/></literal>
<literal type="string" pos:line="2095" pos:column="1">"              consider using --trace or --trace-ascii instead.\n"<pos:position pos:line="2095" pos:column="67"/></literal>
<literal type="string" pos:line="2096" pos:column="1">"\n"<pos:position pos:line="2096" pos:column="5"/></literal>
<literal type="string" pos:line="2097" pos:column="1">"              This option overrides previous uses of --trace-ascii or --trace.\n"<pos:position pos:line="2097" pos:column="83"/></literal>
<literal type="string" pos:line="2098" pos:column="1">"\n"<pos:position pos:line="2098" pos:column="5"/></literal>
<literal type="string" pos:line="2099" pos:column="1">"              Use -s, --silent to make curl quiet.\n"<pos:position pos:line="2099" pos:column="55"/></literal>
<literal type="string" pos:line="2100" pos:column="1">"\n"<pos:position pos:line="2100" pos:column="5"/></literal>
<literal type="string" pos:line="2101" pos:column="1">"       -w, --write-out &lt;format&gt;\n"<pos:position pos:line="2101" pos:column="42"/></literal>
<literal type="string" pos:line="2102" pos:column="1">"              Defines what to display on stdout after a completed and success-\n"<pos:position pos:line="2102" pos:column="83"/></literal>
<literal type="string" pos:line="2103" pos:column="1">"              ful operation. The format is a string  that  may  contain  plain\n"<pos:position pos:line="2103" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2104" pos:column="3">stdout<pos:position pos:line="2104" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2104" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2104" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2105" pos:column="2">fputs<pos:position pos:line="2105" pos:column="7"/></name><argument_list pos:line="2105" pos:column="7">(
<argument><expr><literal type="string" pos:line="2106" pos:column="1">"              text mixed with any number of variables. The string can be spec-\n"<pos:position pos:line="2106" pos:column="83"/></literal>
<literal type="string" pos:line="2107" pos:column="1">"              ified as \"string\", to get read from a particular file you  spec-\n"<pos:position pos:line="2107" pos:column="85"/></literal>
<literal type="string" pos:line="2108" pos:column="1">"              ify  it  \"@filename\"  and  to  tell curl to read the format from\n"<pos:position pos:line="2108" pos:column="85"/></literal>
<literal type="string" pos:line="2109" pos:column="1">"              stdin you write \"@-\".\n"<pos:position pos:line="2109" pos:column="42"/></literal>
<literal type="string" pos:line="2110" pos:column="1">"\n"<pos:position pos:line="2110" pos:column="5"/></literal>
<literal type="string" pos:line="2111" pos:column="1">"              The variables present in the output format will  be  substituted\n"<pos:position pos:line="2111" pos:column="83"/></literal>
<literal type="string" pos:line="2112" pos:column="1">"              by  the  value or text that curl thinks fit, as described below.\n"<pos:position pos:line="2112" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2113" pos:column="3">stdout<pos:position pos:line="2113" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2113" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2113" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2114" pos:column="2">fputs<pos:position pos:line="2114" pos:column="7"/></name><argument_list pos:line="2114" pos:column="7">(
<argument><expr><literal type="string" pos:line="2115" pos:column="1">"              All variables are specified as %{variable_name} and to output  a\n"<pos:position pos:line="2115" pos:column="83"/></literal>
<literal type="string" pos:line="2116" pos:column="1">"              normal  % you just write them as %%. You can output a newline by\n"<pos:position pos:line="2116" pos:column="83"/></literal>
<literal type="string" pos:line="2117" pos:column="1">"              using \\n, a carriage return with \\r and a tab space with \\t.\n"<pos:position pos:line="2117" pos:column="82"/></literal>
<literal type="string" pos:line="2118" pos:column="1">"\n"<pos:position pos:line="2118" pos:column="5"/></literal>
<literal type="string" pos:line="2119" pos:column="1">"              NOTE: The %-symbol is a special symbol in the win32-environment,\n"<pos:position pos:line="2119" pos:column="83"/></literal>
<literal type="string" pos:line="2120" pos:column="1">"              where  all  occurrences  of  %  must  be doubled when using this\n"<pos:position pos:line="2120" pos:column="83"/></literal>
<literal type="string" pos:line="2121" pos:column="1">"              option.\n"<pos:position pos:line="2121" pos:column="26"/></literal>
<literal type="string" pos:line="2122" pos:column="1">"\n"<pos:position pos:line="2122" pos:column="5"/></literal>
<literal type="string" pos:line="2123" pos:column="1">"              The variables available at this point are:\n"<pos:position pos:line="2123" pos:column="61"/></literal>
<literal type="string" pos:line="2124" pos:column="1">"\n"<pos:position pos:line="2124" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2125" pos:column="3">stdout<pos:position pos:line="2125" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2125" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2125" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2126" pos:column="2">fputs<pos:position pos:line="2126" pos:column="7"/></name><argument_list pos:line="2126" pos:column="7">(
<argument><expr><literal type="string" pos:line="2127" pos:column="1">"              url_effective  The URL that was fetched last. This is most mean-\n"<pos:position pos:line="2127" pos:column="83"/></literal>
<literal type="string" pos:line="2128" pos:column="1">"                             ingful  if  you've  told curl to follow location:\n"<pos:position pos:line="2128" pos:column="83"/></literal>
<literal type="string" pos:line="2129" pos:column="1">"                             headers.\n"<pos:position pos:line="2129" pos:column="42"/></literal>
<literal type="string" pos:line="2130" pos:column="1">"\n"<pos:position pos:line="2130" pos:column="5"/></literal>
<literal type="string" pos:line="2131" pos:column="1">"              filename_effective\n"<pos:position pos:line="2131" pos:column="37"/></literal>
<literal type="string" pos:line="2132" pos:column="1">"                             The ultimate filename that curl  writes  out  to.\n"<pos:position pos:line="2132" pos:column="83"/></literal>
<literal type="string" pos:line="2133" pos:column="1">"                             This  is only meaningful if curl is told to write\n"<pos:position pos:line="2133" pos:column="83"/></literal>
<literal type="string" pos:line="2134" pos:column="1">"                             to a file  with  the  --remote-name  or  --output\n"<pos:position pos:line="2134" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2135" pos:column="3">stdout<pos:position pos:line="2135" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2135" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2135" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2136" pos:column="2">fputs<pos:position pos:line="2136" pos:column="7"/></name><argument_list pos:line="2136" pos:column="7">(
<argument><expr><literal type="string" pos:line="2137" pos:column="1">"                             option.  It's most useful in combination with the\n"<pos:position pos:line="2137" pos:column="83"/></literal>
<literal type="string" pos:line="2138" pos:column="1">"                             --remote-header-name option. (Added in 7.25.1)\n"<pos:position pos:line="2138" pos:column="80"/></literal>
<literal type="string" pos:line="2139" pos:column="1">"\n"<pos:position pos:line="2139" pos:column="5"/></literal>
<literal type="string" pos:line="2140" pos:column="1">"              http_code      The numerical response code that was found in the\n"<pos:position pos:line="2140" pos:column="83"/></literal>
<literal type="string" pos:line="2141" pos:column="1">"                             last  retrieved  HTTP(S)  or  FTP(s) transfer. In\n"<pos:position pos:line="2141" pos:column="83"/></literal>
<literal type="string" pos:line="2142" pos:column="1">"                             7.18.2 the alias response_code was added to  show\n"<pos:position pos:line="2142" pos:column="83"/></literal>
<literal type="string" pos:line="2143" pos:column="1">"                             the same info.\n"<pos:position pos:line="2143" pos:column="48"/></literal>
<literal type="string" pos:line="2144" pos:column="1">"\n"<pos:position pos:line="2144" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2145" pos:column="3">stdout<pos:position pos:line="2145" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2145" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2145" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2146" pos:column="2">fputs<pos:position pos:line="2146" pos:column="7"/></name><argument_list pos:line="2146" pos:column="7">(
<argument><expr><literal type="string" pos:line="2147" pos:column="1">"              http_connect   The  numerical  code  that  was found in the last\n"<pos:position pos:line="2147" pos:column="83"/></literal>
<literal type="string" pos:line="2148" pos:column="1">"                             response  (from  a  proxy)  to  a  curl   CONNECT\n"<pos:position pos:line="2148" pos:column="83"/></literal>
<literal type="string" pos:line="2149" pos:column="1">"                             request. (Added in 7.12.4)\n"<pos:position pos:line="2149" pos:column="60"/></literal>
<literal type="string" pos:line="2150" pos:column="1">"\n"<pos:position pos:line="2150" pos:column="5"/></literal>
<literal type="string" pos:line="2151" pos:column="1">"              time_total     The  total time, in seconds, that the full opera-\n"<pos:position pos:line="2151" pos:column="83"/></literal>
<literal type="string" pos:line="2152" pos:column="1">"                             tion lasted. The time will be displayed with mil-\n"<pos:position pos:line="2152" pos:column="83"/></literal>
<literal type="string" pos:line="2153" pos:column="1">"                             lisecond resolution.\n"<pos:position pos:line="2153" pos:column="54"/></literal>
<literal type="string" pos:line="2154" pos:column="1">"\n"<pos:position pos:line="2154" pos:column="5"/></literal>
<literal type="string" pos:line="2155" pos:column="1">"              time_namelookup\n"<pos:position pos:line="2155" pos:column="34"/></literal></expr></argument>
, <argument><expr><name pos:line="2156" pos:column="3">stdout<pos:position pos:line="2156" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2156" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2156" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2157" pos:column="2">fputs<pos:position pos:line="2157" pos:column="7"/></name><argument_list pos:line="2157" pos:column="7">(
<argument><expr><literal type="string" pos:line="2158" pos:column="1">"                             The  time,  in  seconds,  it  took from the start\n"<pos:position pos:line="2158" pos:column="83"/></literal>
<literal type="string" pos:line="2159" pos:column="1">"                             until the name resolving was completed.\n"<pos:position pos:line="2159" pos:column="73"/></literal>
<literal type="string" pos:line="2160" pos:column="1">"\n"<pos:position pos:line="2160" pos:column="5"/></literal>
<literal type="string" pos:line="2161" pos:column="1">"              time_connect   The time, in seconds,  it  took  from  the  start\n"<pos:position pos:line="2161" pos:column="83"/></literal>
<literal type="string" pos:line="2162" pos:column="1">"                             until  the  TCP  connect  to  the remote host (or\n"<pos:position pos:line="2162" pos:column="83"/></literal>
<literal type="string" pos:line="2163" pos:column="1">"                             proxy) was completed.\n"<pos:position pos:line="2163" pos:column="55"/></literal>
<literal type="string" pos:line="2164" pos:column="1">"\n"<pos:position pos:line="2164" pos:column="5"/></literal>
<literal type="string" pos:line="2165" pos:column="1">"              time_appconnect\n"<pos:position pos:line="2165" pos:column="34"/></literal>
<literal type="string" pos:line="2166" pos:column="1">"                             The time, in seconds,  it  took  from  the  start\n"<pos:position pos:line="2166" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2167" pos:column="3">stdout<pos:position pos:line="2167" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2167" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2167" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2168" pos:column="2">fputs<pos:position pos:line="2168" pos:column="7"/></name><argument_list pos:line="2168" pos:column="7">(
<argument><expr><literal type="string" pos:line="2169" pos:column="1">"                             until  the  SSL/SSH/etc  connect/handshake to the\n"<pos:position pos:line="2169" pos:column="83"/></literal>
<literal type="string" pos:line="2170" pos:column="1">"                             remote host was completed. (Added in 7.19.0)\n"<pos:position pos:line="2170" pos:column="78"/></literal>
<literal type="string" pos:line="2171" pos:column="1">"\n"<pos:position pos:line="2171" pos:column="5"/></literal>
<literal type="string" pos:line="2172" pos:column="1">"              time_pretransfer\n"<pos:position pos:line="2172" pos:column="35"/></literal>
<literal type="string" pos:line="2173" pos:column="1">"                             The time, in seconds,  it  took  from  the  start\n"<pos:position pos:line="2173" pos:column="83"/></literal>
<literal type="string" pos:line="2174" pos:column="1">"                             until  the file transfer was just about to begin.\n"<pos:position pos:line="2174" pos:column="83"/></literal>
<literal type="string" pos:line="2175" pos:column="1">"                             This includes all pre-transfer commands and nego-\n"<pos:position pos:line="2175" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2176" pos:column="3">stdout<pos:position pos:line="2176" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2176" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2176" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2177" pos:column="2">fputs<pos:position pos:line="2177" pos:column="7"/></name><argument_list pos:line="2177" pos:column="7">(
<argument><expr><literal type="string" pos:line="2178" pos:column="1">"                             tiations that are specific to the particular pro-\n"<pos:position pos:line="2178" pos:column="83"/></literal>
<literal type="string" pos:line="2179" pos:column="1">"                             tocol(s) involved.\n"<pos:position pos:line="2179" pos:column="52"/></literal>
<literal type="string" pos:line="2180" pos:column="1">"\n"<pos:position pos:line="2180" pos:column="5"/></literal>
<literal type="string" pos:line="2181" pos:column="1">"              time_redirect  The time, in seconds, it took for all redirection\n"<pos:position pos:line="2181" pos:column="83"/></literal>
<literal type="string" pos:line="2182" pos:column="1">"                             steps  include  name lookup, connect, pretransfer\n"<pos:position pos:line="2182" pos:column="83"/></literal>
<literal type="string" pos:line="2183" pos:column="1">"                             and transfer before  the  final  transaction  was\n"<pos:position pos:line="2183" pos:column="83"/></literal>
<literal type="string" pos:line="2184" pos:column="1">"                             started.  time_redirect shows the complete execu-\n"<pos:position pos:line="2184" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2185" pos:column="3">stdout<pos:position pos:line="2185" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2185" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2185" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2186" pos:column="2">fputs<pos:position pos:line="2186" pos:column="7"/></name><argument_list pos:line="2186" pos:column="7">(
<argument><expr><literal type="string" pos:line="2187" pos:column="1">"                             tion time for multiple  redirections.  (Added  in\n"<pos:position pos:line="2187" pos:column="83"/></literal>
<literal type="string" pos:line="2188" pos:column="1">"                             7.12.3)\n"<pos:position pos:line="2188" pos:column="41"/></literal>
<literal type="string" pos:line="2189" pos:column="1">"\n"<pos:position pos:line="2189" pos:column="5"/></literal>
<literal type="string" pos:line="2190" pos:column="1">"              time_starttransfer\n"<pos:position pos:line="2190" pos:column="37"/></literal>
<literal type="string" pos:line="2191" pos:column="1">"                             The  time,  in  seconds,  it  took from the start\n"<pos:position pos:line="2191" pos:column="83"/></literal>
<literal type="string" pos:line="2192" pos:column="1">"                             until the first byte was just about to be  trans-\n"<pos:position pos:line="2192" pos:column="83"/></literal>
<literal type="string" pos:line="2193" pos:column="1">"                             ferred.  This  includes time_pretransfer and also\n"<pos:position pos:line="2193" pos:column="83"/></literal>
<literal type="string" pos:line="2194" pos:column="1">"                             the time  the  server  needed  to  calculate  the\n"<pos:position pos:line="2194" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2195" pos:column="3">stdout<pos:position pos:line="2195" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2195" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2195" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2196" pos:column="2">fputs<pos:position pos:line="2196" pos:column="7"/></name><argument_list pos:line="2196" pos:column="7">(
<argument><expr><literal type="string" pos:line="2197" pos:column="1">"                             result.\n"<pos:position pos:line="2197" pos:column="41"/></literal>
<literal type="string" pos:line="2198" pos:column="1">"\n"<pos:position pos:line="2198" pos:column="5"/></literal>
<literal type="string" pos:line="2199" pos:column="1">"              size_download  The total amount of bytes that were downloaded.\n"<pos:position pos:line="2199" pos:column="81"/></literal>
<literal type="string" pos:line="2200" pos:column="1">"\n"<pos:position pos:line="2200" pos:column="5"/></literal>
<literal type="string" pos:line="2201" pos:column="1">"              size_upload    The total amount of bytes that were uploaded.\n"<pos:position pos:line="2201" pos:column="79"/></literal>
<literal type="string" pos:line="2202" pos:column="1">"\n"<pos:position pos:line="2202" pos:column="5"/></literal>
<literal type="string" pos:line="2203" pos:column="1">"              size_header    The total amount of bytes of the downloaded head-\n"<pos:position pos:line="2203" pos:column="83"/></literal>
<literal type="string" pos:line="2204" pos:column="1">"                             ers.\n"<pos:position pos:line="2204" pos:column="38"/></literal>
<literal type="string" pos:line="2205" pos:column="1">"\n"<pos:position pos:line="2205" pos:column="5"/></literal>
<literal type="string" pos:line="2206" pos:column="1">"              size_request   The total amount of bytes that were sent  in  the\n"<pos:position pos:line="2206" pos:column="83"/></literal>
<literal type="string" pos:line="2207" pos:column="1">"                             HTTP request.\n"<pos:position pos:line="2207" pos:column="47"/></literal>
<literal type="string" pos:line="2208" pos:column="1">"\n"<pos:position pos:line="2208" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2209" pos:column="3">stdout<pos:position pos:line="2209" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2209" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2209" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2210" pos:column="2">fputs<pos:position pos:line="2210" pos:column="7"/></name><argument_list pos:line="2210" pos:column="7">(
<argument><expr><literal type="string" pos:line="2211" pos:column="1">"              speed_download The average download speed that curl measured for\n"<pos:position pos:line="2211" pos:column="83"/></literal>
<literal type="string" pos:line="2212" pos:column="1">"                             the complete download. Bytes per second.\n"<pos:position pos:line="2212" pos:column="74"/></literal>
<literal type="string" pos:line="2213" pos:column="1">"\n"<pos:position pos:line="2213" pos:column="5"/></literal>
<literal type="string" pos:line="2214" pos:column="1">"              speed_upload   The average upload speed that curl  measured  for\n"<pos:position pos:line="2214" pos:column="83"/></literal>
<literal type="string" pos:line="2215" pos:column="1">"                             the complete upload. Bytes per second.\n"<pos:position pos:line="2215" pos:column="72"/></literal>
<literal type="string" pos:line="2216" pos:column="1">"\n"<pos:position pos:line="2216" pos:column="5"/></literal>
<literal type="string" pos:line="2217" pos:column="1">"              content_type   The  Content-Type  of  the requested document, if\n"<pos:position pos:line="2217" pos:column="83"/></literal>
<literal type="string" pos:line="2218" pos:column="1">"                             there was any.\n"<pos:position pos:line="2218" pos:column="48"/></literal>
<literal type="string" pos:line="2219" pos:column="1">"\n"<pos:position pos:line="2219" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2220" pos:column="3">stdout<pos:position pos:line="2220" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2220" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2220" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2221" pos:column="2">fputs<pos:position pos:line="2221" pos:column="7"/></name><argument_list pos:line="2221" pos:column="7">(
<argument><expr><literal type="string" pos:line="2222" pos:column="1">"              num_connects   Number of new connects made in the recent  trans-\n"<pos:position pos:line="2222" pos:column="83"/></literal>
<literal type="string" pos:line="2223" pos:column="1">"                             fer. (Added in 7.12.3)\n"<pos:position pos:line="2223" pos:column="56"/></literal>
<literal type="string" pos:line="2224" pos:column="1">"\n"<pos:position pos:line="2224" pos:column="5"/></literal>
<literal type="string" pos:line="2225" pos:column="1">"              num_redirects  Number  of  redirects  that  were followed in the\n"<pos:position pos:line="2225" pos:column="83"/></literal>
<literal type="string" pos:line="2226" pos:column="1">"                             request. (Added in 7.12.3)\n"<pos:position pos:line="2226" pos:column="60"/></literal>
<literal type="string" pos:line="2227" pos:column="1">"\n"<pos:position pos:line="2227" pos:column="5"/></literal>
<literal type="string" pos:line="2228" pos:column="1">"              redirect_url   When a HTTP request was made without -L to follow\n"<pos:position pos:line="2228" pos:column="83"/></literal>
<literal type="string" pos:line="2229" pos:column="1">"                             redirects, this variable will show the actual URL\n"<pos:position pos:line="2229" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2230" pos:column="3">stdout<pos:position pos:line="2230" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2230" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2230" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2231" pos:column="2">fputs<pos:position pos:line="2231" pos:column="7"/></name><argument_list pos:line="2231" pos:column="7">(
<argument><expr><literal type="string" pos:line="2232" pos:column="1">"                             a redirect would take you to. (Added in 7.18.2)\n"<pos:position pos:line="2232" pos:column="81"/></literal>
<literal type="string" pos:line="2233" pos:column="1">"\n"<pos:position pos:line="2233" pos:column="5"/></literal>
<literal type="string" pos:line="2234" pos:column="1">"              ftp_entry_path The initial path libcurl ended up in when logging\n"<pos:position pos:line="2234" pos:column="83"/></literal>
<literal type="string" pos:line="2235" pos:column="1">"                             on to the remote FTP server. (Added in 7.15.4)\n"<pos:position pos:line="2235" pos:column="80"/></literal>
<literal type="string" pos:line="2236" pos:column="1">"\n"<pos:position pos:line="2236" pos:column="5"/></literal>
<literal type="string" pos:line="2237" pos:column="1">"              ssl_verify_result\n"<pos:position pos:line="2237" pos:column="36"/></literal>
<literal type="string" pos:line="2238" pos:column="1">"                             The  result of the SSL peer certificate verifica-\n"<pos:position pos:line="2238" pos:column="83"/></literal>
<literal type="string" pos:line="2239" pos:column="1">"                             tion that was requested. 0 means the verification\n"<pos:position pos:line="2239" pos:column="83"/></literal>
<literal type="string" pos:line="2240" pos:column="1">"                             was successful. (Added in 7.19.0)\n"<pos:position pos:line="2240" pos:column="67"/></literal>
<literal type="string" pos:line="2241" pos:column="1">"\n"<pos:position pos:line="2241" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2242" pos:column="3">stdout<pos:position pos:line="2242" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2242" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2242" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2243" pos:column="2">fputs<pos:position pos:line="2243" pos:column="7"/></name><argument_list pos:line="2243" pos:column="7">(
<argument><expr><literal type="string" pos:line="2244" pos:column="1">"       If this option is used several times, the last one will be used.\n"<pos:position pos:line="2244" pos:column="76"/></literal>
<literal type="string" pos:line="2245" pos:column="1">"\n"<pos:position pos:line="2245" pos:column="5"/></literal>
<literal type="string" pos:line="2246" pos:column="1">"       -x, --proxy &lt;[protocol://][user:password@]proxyhost[:port]&gt;\n"<pos:position pos:line="2246" pos:column="77"/></literal>
<literal type="string" pos:line="2247" pos:column="1">"              Use  the  specified HTTP proxy. If the port number is not speci-\n"<pos:position pos:line="2247" pos:column="83"/></literal>
<literal type="string" pos:line="2248" pos:column="1">"              fied, it is assumed at port 1080.\n"<pos:position pos:line="2248" pos:column="52"/></literal>
<literal type="string" pos:line="2249" pos:column="1">"\n"<pos:position pos:line="2249" pos:column="5"/></literal>
<literal type="string" pos:line="2250" pos:column="1">"              This option overrides existing environment  variables  that  set\n"<pos:position pos:line="2250" pos:column="83"/></literal>
<literal type="string" pos:line="2251" pos:column="1">"              the  proxy  to use. If there's an environment variable setting a\n"<pos:position pos:line="2251" pos:column="83"/></literal>
<literal type="string" pos:line="2252" pos:column="1">"              proxy, you can set proxy to \"\" to override it.\n"<pos:position pos:line="2252" pos:column="67"/></literal>
<literal type="string" pos:line="2253" pos:column="1">"\n"<pos:position pos:line="2253" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2254" pos:column="3">stdout<pos:position pos:line="2254" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2254" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2254" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2255" pos:column="2">fputs<pos:position pos:line="2255" pos:column="7"/></name><argument_list pos:line="2255" pos:column="7">(
<argument><expr><literal type="string" pos:line="2256" pos:column="1">"              All operations that are performed over a HTTP proxy will  trans-\n"<pos:position pos:line="2256" pos:column="83"/></literal>
<literal type="string" pos:line="2257" pos:column="1">"              parently  be  converted  to HTTP. It means that certain protocol\n"<pos:position pos:line="2257" pos:column="83"/></literal>
<literal type="string" pos:line="2258" pos:column="1">"              specific operations might not be available. This is not the case\n"<pos:position pos:line="2258" pos:column="83"/></literal>
<literal type="string" pos:line="2259" pos:column="1">"              if you can tunnel through the proxy, as one with the -p, --prox-\n"<pos:position pos:line="2259" pos:column="83"/></literal>
<literal type="string" pos:line="2260" pos:column="1">"              ytunnel option.\n"<pos:position pos:line="2260" pos:column="34"/></literal>
<literal type="string" pos:line="2261" pos:column="1">"\n"<pos:position pos:line="2261" pos:column="5"/></literal>
<literal type="string" pos:line="2262" pos:column="1">"              User and password that might be provided in the proxy string are\n"<pos:position pos:line="2262" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2263" pos:column="3">stdout<pos:position pos:line="2263" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2263" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2263" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2264" pos:column="2">fputs<pos:position pos:line="2264" pos:column="7"/></name><argument_list pos:line="2264" pos:column="7">(
<argument><expr><literal type="string" pos:line="2265" pos:column="1">"              URL decoded by libcurl. This allows you to pass in special char-\n"<pos:position pos:line="2265" pos:column="83"/></literal>
<literal type="string" pos:line="2266" pos:column="1">"              acters such as @ by using %40 or pass in a colon with %3a.\n"<pos:position pos:line="2266" pos:column="77"/></literal>
<literal type="string" pos:line="2267" pos:column="1">"\n"<pos:position pos:line="2267" pos:column="5"/></literal>
<literal type="string" pos:line="2268" pos:column="1">"              The proxy host can be specified the exact same way as the  proxy\n"<pos:position pos:line="2268" pos:column="83"/></literal>
<literal type="string" pos:line="2269" pos:column="1">"              environment  variables,  including the protocol prefix (http://)\n"<pos:position pos:line="2269" pos:column="83"/></literal>
<literal type="string" pos:line="2270" pos:column="1">"              and the embedded user + password.\n"<pos:position pos:line="2270" pos:column="52"/></literal>
<literal type="string" pos:line="2271" pos:column="1">"\n"<pos:position pos:line="2271" pos:column="5"/></literal>
<literal type="string" pos:line="2272" pos:column="1">"              From 7.21.7, the proxy string may be  specified  with  a  proto-\n"<pos:position pos:line="2272" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2273" pos:column="3">stdout<pos:position pos:line="2273" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2273" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2273" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2274" pos:column="2">fputs<pos:position pos:line="2274" pos:column="7"/></name><argument_list pos:line="2274" pos:column="7">(
<argument><expr><literal type="string" pos:line="2275" pos:column="1">"              col://  prefix  to  specify  alternative  proxy  protocols.  Use\n"<pos:position pos:line="2275" pos:column="83"/></literal>
<literal type="string" pos:line="2276" pos:column="1">"              socks4://, socks4a://, socks5:// or socks5h://  to  request  the\n"<pos:position pos:line="2276" pos:column="83"/></literal>
<literal type="string" pos:line="2277" pos:column="1">"              specific  SOCKS  version  to  be  used.  No  protocol specified,\n"<pos:position pos:line="2277" pos:column="83"/></literal>
<literal type="string" pos:line="2278" pos:column="1">"              http:// and all others will be treated as HTTP proxies.\n"<pos:position pos:line="2278" pos:column="74"/></literal>
<literal type="string" pos:line="2279" pos:column="1">"\n"<pos:position pos:line="2279" pos:column="5"/></literal>
<literal type="string" pos:line="2280" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="2280" pos:column="83"/></literal>
<literal type="string" pos:line="2281" pos:column="1">"\n"<pos:position pos:line="2281" pos:column="5"/></literal>
<literal type="string" pos:line="2282" pos:column="1">"       -X, --request &lt;command&gt;\n"<pos:position pos:line="2282" pos:column="41"/></literal>
<literal type="string" pos:line="2283" pos:column="1">"              (HTTP) Specifies a custom request method to use when communicat-\n"<pos:position pos:line="2283" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2284" pos:column="3">stdout<pos:position pos:line="2284" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2284" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2284" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2285" pos:column="2">fputs<pos:position pos:line="2285" pos:column="7"/></name><argument_list pos:line="2285" pos:column="7">(
<argument><expr><literal type="string" pos:line="2286" pos:column="1">"              ing  with  the  HTTP server.  The specified request will be used\n"<pos:position pos:line="2286" pos:column="83"/></literal>
<literal type="string" pos:line="2287" pos:column="1">"              instead of the method otherwise used (which  defaults  to  GET).\n"<pos:position pos:line="2287" pos:column="83"/></literal>
<literal type="string" pos:line="2288" pos:column="1">"              Read  the  HTTP  1.1 specification for details and explanations.\n"<pos:position pos:line="2288" pos:column="83"/></literal>
<literal type="string" pos:line="2289" pos:column="1">"              Common additional HTTP requests  include  PUT  and  DELETE,  but\n"<pos:position pos:line="2289" pos:column="83"/></literal>
<literal type="string" pos:line="2290" pos:column="1">"              related technologies like WebDAV offers PROPFIND, COPY, MOVE and\n"<pos:position pos:line="2290" pos:column="83"/></literal>
<literal type="string" pos:line="2291" pos:column="1">"              more.\n"<pos:position pos:line="2291" pos:column="24"/></literal>
<literal type="string" pos:line="2292" pos:column="1">"\n"<pos:position pos:line="2292" pos:column="5"/></literal>
<literal type="string" pos:line="2293" pos:column="1">"              (FTP) Specifies a custom FTP command to use instead of LIST when\n"<pos:position pos:line="2293" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2294" pos:column="3">stdout<pos:position pos:line="2294" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2294" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2294" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2295" pos:column="2">fputs<pos:position pos:line="2295" pos:column="7"/></name><argument_list pos:line="2295" pos:column="7">(
<argument><expr><literal type="string" pos:line="2296" pos:column="1">"              doing file lists with FTP.\n"<pos:position pos:line="2296" pos:column="45"/></literal>
<literal type="string" pos:line="2297" pos:column="1">"\n"<pos:position pos:line="2297" pos:column="5"/></literal>
<literal type="string" pos:line="2298" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="2298" pos:column="83"/></literal>
<literal type="string" pos:line="2299" pos:column="1">"\n"<pos:position pos:line="2299" pos:column="5"/></literal>
<literal type="string" pos:line="2300" pos:column="1">"       --xattr\n"<pos:position pos:line="2300" pos:column="19"/></literal>
<literal type="string" pos:line="2301" pos:column="1">"              When  saving  output  to a file, this option tells curl to store\n"<pos:position pos:line="2301" pos:column="83"/></literal>
<literal type="string" pos:line="2302" pos:column="1">"              certain file metadata in extened file attributes. Currently, the\n"<pos:position pos:line="2302" pos:column="83"/></literal>
<literal type="string" pos:line="2303" pos:column="1">"              URL is stored in the xdg.origin.url attribute and, for HTTP, the\n"<pos:position pos:line="2303" pos:column="83"/></literal>
<literal type="string" pos:line="2304" pos:column="1">"              content type is stored in the mime_type attribute. If  the  file\n"<pos:position pos:line="2304" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2305" pos:column="3">stdout<pos:position pos:line="2305" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2305" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2305" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2306" pos:column="2">fputs<pos:position pos:line="2306" pos:column="7"/></name><argument_list pos:line="2306" pos:column="7">(
<argument><expr><literal type="string" pos:line="2307" pos:column="1">"              system  does  not  support  extended  attributes,  a  warning is\n"<pos:position pos:line="2307" pos:column="83"/></literal>
<literal type="string" pos:line="2308" pos:column="1">"              issued.\n"<pos:position pos:line="2308" pos:column="26"/></literal>
<literal type="string" pos:line="2309" pos:column="1">"\n"<pos:position pos:line="2309" pos:column="5"/></literal>
<literal type="string" pos:line="2310" pos:column="1">"       -y, --speed-time &lt;time&gt;\n"<pos:position pos:line="2310" pos:column="41"/></literal>
<literal type="string" pos:line="2311" pos:column="1">"              If a download is slower than speed-limit bytes per second during\n"<pos:position pos:line="2311" pos:column="83"/></literal>
<literal type="string" pos:line="2312" pos:column="1">"              a speed-time period, the download gets aborted. If speed-time is\n"<pos:position pos:line="2312" pos:column="83"/></literal>
<literal type="string" pos:line="2313" pos:column="1">"              used, the default speed-limit will be 1 unless set with -Y.\n"<pos:position pos:line="2313" pos:column="78"/></literal>
<literal type="string" pos:line="2314" pos:column="1">"\n"<pos:position pos:line="2314" pos:column="5"/></literal>
<literal type="string" pos:line="2315" pos:column="1">"              This option controls transfers and thus  will  not  affect  slow\n"<pos:position pos:line="2315" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2316" pos:column="3">stdout<pos:position pos:line="2316" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2316" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2316" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2317" pos:column="2">fputs<pos:position pos:line="2317" pos:column="7"/></name><argument_list pos:line="2317" pos:column="7">(
<argument><expr><literal type="string" pos:line="2318" pos:column="1">"              connects  etc.  If this is a concern for you, try the --connect-\n"<pos:position pos:line="2318" pos:column="83"/></literal>
<literal type="string" pos:line="2319" pos:column="1">"              timeout option.\n"<pos:position pos:line="2319" pos:column="34"/></literal>
<literal type="string" pos:line="2320" pos:column="1">"\n"<pos:position pos:line="2320" pos:column="5"/></literal>
<literal type="string" pos:line="2321" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="2321" pos:column="83"/></literal>
<literal type="string" pos:line="2322" pos:column="1">"\n"<pos:position pos:line="2322" pos:column="5"/></literal>
<literal type="string" pos:line="2323" pos:column="1">"       -Y, --speed-limit &lt;speed&gt;\n"<pos:position pos:line="2323" pos:column="43"/></literal>
<literal type="string" pos:line="2324" pos:column="1">"              If a download is slower than this given speed (in bytes per sec-\n"<pos:position pos:line="2324" pos:column="83"/></literal>
<literal type="string" pos:line="2325" pos:column="1">"              ond)  for  speed-time seconds it gets aborted. speed-time is set\n"<pos:position pos:line="2325" pos:column="83"/></literal>
<literal type="string" pos:line="2326" pos:column="1">"              with -y and is 30 if not set.\n"<pos:position pos:line="2326" pos:column="48"/></literal>
<literal type="string" pos:line="2327" pos:column="1">"\n"<pos:position pos:line="2327" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2328" pos:column="3">stdout<pos:position pos:line="2328" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2328" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2328" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2329" pos:column="2">fputs<pos:position pos:line="2329" pos:column="7"/></name><argument_list pos:line="2329" pos:column="7">(
<argument><expr><literal type="string" pos:line="2330" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="2330" pos:column="83"/></literal>
<literal type="string" pos:line="2331" pos:column="1">"\n"<pos:position pos:line="2331" pos:column="5"/></literal>
<literal type="string" pos:line="2332" pos:column="1">"       -z/--time-cond &lt;date expression&gt;|&lt;file&gt;\n"<pos:position pos:line="2332" pos:column="63"/></literal>
<literal type="string" pos:line="2333" pos:column="1">"              (HTTP/FTP) Request a file that has been modified later than  the\n"<pos:position pos:line="2333" pos:column="83"/></literal>
<literal type="string" pos:line="2334" pos:column="1">"              given  time  and date, or one that has been modified before that\n"<pos:position pos:line="2334" pos:column="83"/></literal>
<literal type="string" pos:line="2335" pos:column="1">"              time. The &lt;date expression&gt; can be all sorts of date strings  or\n"<pos:position pos:line="2335" pos:column="89"/></literal>
<literal type="string" pos:line="2336" pos:column="1">"              if it doesn't match any internal ones, it is taken as a filename\n"<pos:position pos:line="2336" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2337" pos:column="3">stdout<pos:position pos:line="2337" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2337" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2337" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2338" pos:column="2">fputs<pos:position pos:line="2338" pos:column="7"/></name><argument_list pos:line="2338" pos:column="7">(
<argument><expr><literal type="string" pos:line="2339" pos:column="1">"              and tries to get  the  modification  date  (mtime)  from  &lt;file&gt;\n"<pos:position pos:line="2339" pos:column="89"/></literal>
<literal type="string" pos:line="2340" pos:column="1">"              instead.  See  the curl_getdate(3) man pages for date expression\n"<pos:position pos:line="2340" pos:column="83"/></literal>
<literal type="string" pos:line="2341" pos:column="1">"              details.\n"<pos:position pos:line="2341" pos:column="27"/></literal>
<literal type="string" pos:line="2342" pos:column="1">"\n"<pos:position pos:line="2342" pos:column="5"/></literal>
<literal type="string" pos:line="2343" pos:column="1">"              Start the date expression with a dash (-) to make it request for\n"<pos:position pos:line="2343" pos:column="83"/></literal>
<literal type="string" pos:line="2344" pos:column="1">"              a  document that is older than the given date/time, default is a\n"<pos:position pos:line="2344" pos:column="83"/></literal>
<literal type="string" pos:line="2345" pos:column="1">"              document that is newer than the specified date/time.\n"<pos:position pos:line="2345" pos:column="71"/></literal>
<literal type="string" pos:line="2346" pos:column="1">"\n"<pos:position pos:line="2346" pos:column="5"/></literal>
<literal type="string" pos:line="2347" pos:column="1">"              If this option is used several times, the last one will be used.\n"<pos:position pos:line="2347" pos:column="83"/></literal>
<literal type="string" pos:line="2348" pos:column="1">"\n"<pos:position pos:line="2348" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2349" pos:column="3">stdout<pos:position pos:line="2349" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2349" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2349" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2350" pos:column="2">fputs<pos:position pos:line="2350" pos:column="7"/></name><argument_list pos:line="2350" pos:column="7">(
<argument><expr><literal type="string" pos:line="2351" pos:column="1">"       -h, --help\n"<pos:position pos:line="2351" pos:column="22"/></literal>
<literal type="string" pos:line="2352" pos:column="1">"              Usage help.\n"<pos:position pos:line="2352" pos:column="30"/></literal>
<literal type="string" pos:line="2353" pos:column="1">"\n"<pos:position pos:line="2353" pos:column="5"/></literal>
<literal type="string" pos:line="2354" pos:column="1">"       -M, --manual\n"<pos:position pos:line="2354" pos:column="24"/></literal>
<literal type="string" pos:line="2355" pos:column="1">"              Manual. Display the huge help text.\n"<pos:position pos:line="2355" pos:column="54"/></literal>
<literal type="string" pos:line="2356" pos:column="1">"\n"<pos:position pos:line="2356" pos:column="5"/></literal>
<literal type="string" pos:line="2357" pos:column="1">"       -V, --version\n"<pos:position pos:line="2357" pos:column="25"/></literal>
<literal type="string" pos:line="2358" pos:column="1">"              Displays information about curl and the libcurl version it uses.\n"<pos:position pos:line="2358" pos:column="83"/></literal>
<literal type="string" pos:line="2359" pos:column="1">"              The first line includes the full version of  curl,  libcurl  and\n"<pos:position pos:line="2359" pos:column="83"/></literal>
<literal type="string" pos:line="2360" pos:column="1">"              other 3rd party libraries linked with the executable.\n"<pos:position pos:line="2360" pos:column="72"/></literal>
<literal type="string" pos:line="2361" pos:column="1">"\n"<pos:position pos:line="2361" pos:column="5"/></literal>
<literal type="string" pos:line="2362" pos:column="1">"              The  second  line (starts with \"Protocols:\") shows all protocols\n"<pos:position pos:line="2362" pos:column="85"/></literal>
<literal type="string" pos:line="2363" pos:column="1">"              that libcurl reports to support.\n"<pos:position pos:line="2363" pos:column="51"/></literal>
<literal type="string" pos:line="2364" pos:column="1">"\n"<pos:position pos:line="2364" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2365" pos:column="3">stdout<pos:position pos:line="2365" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2365" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2365" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2366" pos:column="2">fputs<pos:position pos:line="2366" pos:column="7"/></name><argument_list pos:line="2366" pos:column="7">(
<argument><expr><literal type="string" pos:line="2367" pos:column="1">"              The third line (starts with \"Features:\") shows specific features\n"<pos:position pos:line="2367" pos:column="85"/></literal>
<literal type="string" pos:line="2368" pos:column="1">"              libcurl reports to offer. Available features include:\n"<pos:position pos:line="2368" pos:column="72"/></literal>
<literal type="string" pos:line="2369" pos:column="1">"\n"<pos:position pos:line="2369" pos:column="5"/></literal>
<literal type="string" pos:line="2370" pos:column="1">"              IPv6   You can use IPv6 with this.\n"<pos:position pos:line="2370" pos:column="53"/></literal>
<literal type="string" pos:line="2371" pos:column="1">"\n"<pos:position pos:line="2371" pos:column="5"/></literal>
<literal type="string" pos:line="2372" pos:column="1">"              krb4   Krb4 for FTP is supported.\n"<pos:position pos:line="2372" pos:column="52"/></literal>
<literal type="string" pos:line="2373" pos:column="1">"\n"<pos:position pos:line="2373" pos:column="5"/></literal>
<literal type="string" pos:line="2374" pos:column="1">"              SSL    HTTPS and FTPS are supported.\n"<pos:position pos:line="2374" pos:column="55"/></literal>
<literal type="string" pos:line="2375" pos:column="1">"\n"<pos:position pos:line="2375" pos:column="5"/></literal>
<literal type="string" pos:line="2376" pos:column="1">"              libz   Automatic  decompression of compressed files over HTTP is\n"<pos:position pos:line="2376" pos:column="83"/></literal>
<literal type="string" pos:line="2377" pos:column="1">"                     supported.\n"<pos:position pos:line="2377" pos:column="36"/></literal>
<literal type="string" pos:line="2378" pos:column="1">"\n"<pos:position pos:line="2378" pos:column="5"/></literal>
<literal type="string" pos:line="2379" pos:column="1">"              NTLM   NTLM authentication is supported.\n"<pos:position pos:line="2379" pos:column="59"/></literal>
<literal type="string" pos:line="2380" pos:column="1">"\n"<pos:position pos:line="2380" pos:column="5"/></literal>
<literal type="string" pos:line="2381" pos:column="1">"              GSS-Negotiate\n"<pos:position pos:line="2381" pos:column="32"/></literal></expr></argument>
, <argument><expr><name pos:line="2382" pos:column="3">stdout<pos:position pos:line="2382" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2382" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2382" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2383" pos:column="2">fputs<pos:position pos:line="2383" pos:column="7"/></name><argument_list pos:line="2383" pos:column="7">(
<argument><expr><literal type="string" pos:line="2384" pos:column="1">"                     Negotiate authentication and krb5 for FTP is supported.\n"<pos:position pos:line="2384" pos:column="81"/></literal>
<literal type="string" pos:line="2385" pos:column="1">"\n"<pos:position pos:line="2385" pos:column="5"/></literal>
<literal type="string" pos:line="2386" pos:column="1">"              Debug  This curl uses a libcurl built with Debug.  This  enables\n"<pos:position pos:line="2386" pos:column="83"/></literal>
<literal type="string" pos:line="2387" pos:column="1">"                     more  error-tracking  and memory debugging etc. For curl-\n"<pos:position pos:line="2387" pos:column="83"/></literal>
<literal type="string" pos:line="2388" pos:column="1">"                     developers only!\n"<pos:position pos:line="2388" pos:column="42"/></literal>
<literal type="string" pos:line="2389" pos:column="1">"\n"<pos:position pos:line="2389" pos:column="5"/></literal>
<literal type="string" pos:line="2390" pos:column="1">"              AsynchDNS\n"<pos:position pos:line="2390" pos:column="28"/></literal>
<literal type="string" pos:line="2391" pos:column="1">"                     This curl uses asynchronous name resolves.\n"<pos:position pos:line="2391" pos:column="68"/></literal>
<literal type="string" pos:line="2392" pos:column="1">"\n"<pos:position pos:line="2392" pos:column="5"/></literal>
<literal type="string" pos:line="2393" pos:column="1">"              SPNEGO SPNEGO Negotiate authentication is supported.\n"<pos:position pos:line="2393" pos:column="71"/></literal>
<literal type="string" pos:line="2394" pos:column="1">"\n"<pos:position pos:line="2394" pos:column="5"/></literal>
<literal type="string" pos:line="2395" pos:column="1">"              Largefile\n"<pos:position pos:line="2395" pos:column="28"/></literal></expr></argument>
, <argument><expr><name pos:line="2396" pos:column="3">stdout<pos:position pos:line="2396" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2396" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2396" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2397" pos:column="2">fputs<pos:position pos:line="2397" pos:column="7"/></name><argument_list pos:line="2397" pos:column="7">(
<argument><expr><literal type="string" pos:line="2398" pos:column="1">"                     This curl supports transfers of large files, files larger\n"<pos:position pos:line="2398" pos:column="83"/></literal>
<literal type="string" pos:line="2399" pos:column="1">"                     than 2GB.\n"<pos:position pos:line="2399" pos:column="35"/></literal>
<literal type="string" pos:line="2400" pos:column="1">"\n"<pos:position pos:line="2400" pos:column="5"/></literal>
<literal type="string" pos:line="2401" pos:column="1">"              IDN    This curl supports IDN - international domain names.\n"<pos:position pos:line="2401" pos:column="78"/></literal>
<literal type="string" pos:line="2402" pos:column="1">"\n"<pos:position pos:line="2402" pos:column="5"/></literal>
<literal type="string" pos:line="2403" pos:column="1">"              SSPI   SSPI  is  supported. If you use NTLM and set a blank user\n"<pos:position pos:line="2403" pos:column="83"/></literal>
<literal type="string" pos:line="2404" pos:column="1">"                     name, curl will authenticate with your current  user  and\n"<pos:position pos:line="2404" pos:column="83"/></literal>
<literal type="string" pos:line="2405" pos:column="1">"                     password.\n"<pos:position pos:line="2405" pos:column="35"/></literal>
<literal type="string" pos:line="2406" pos:column="1">"\n"<pos:position pos:line="2406" pos:column="5"/></literal>
<literal type="string" pos:line="2407" pos:column="1">"              TLS-SRP\n"<pos:position pos:line="2407" pos:column="26"/></literal>
<literal type="string" pos:line="2408" pos:column="1">"                     SRP  (Secure Remote Password) authentication is supported\n"<pos:position pos:line="2408" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2409" pos:column="3">stdout<pos:position pos:line="2409" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2409" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2409" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2410" pos:column="2">fputs<pos:position pos:line="2410" pos:column="7"/></name><argument_list pos:line="2410" pos:column="7">(
<argument><expr><literal type="string" pos:line="2411" pos:column="1">"                     for TLS.\n"<pos:position pos:line="2411" pos:column="34"/></literal>
<literal type="string" pos:line="2412" pos:column="1">"              Metalink\n"<pos:position pos:line="2412" pos:column="27"/></literal>
<literal type="string" pos:line="2413" pos:column="1">"                     This curl supports Metalink (both version 3  and  4  (RFC\n"<pos:position pos:line="2413" pos:column="83"/></literal>
<literal type="string" pos:line="2414" pos:column="1">"                     5854)),  which  describes  mirrors and hashes.  curl will\n"<pos:position pos:line="2414" pos:column="83"/></literal>
<literal type="string" pos:line="2415" pos:column="1">"                     use mirrors for failover if there are errors (such as the\n"<pos:position pos:line="2415" pos:column="83"/></literal>
<literal type="string" pos:line="2416" pos:column="1">"                     file or server not being available).\n"<pos:position pos:line="2416" pos:column="62"/></literal>
<literal type="string" pos:line="2417" pos:column="1">"\n"<pos:position pos:line="2417" pos:column="5"/></literal>
<literal type="string" pos:line="2418" pos:column="1">"FILES\n"<pos:position pos:line="2418" pos:column="10"/></literal>
<literal type="string" pos:line="2419" pos:column="1">"       ~/.curlrc\n"<pos:position pos:line="2419" pos:column="21"/></literal>
<literal type="string" pos:line="2420" pos:column="1">"              Default config file, see -K, --config for details.\n"<pos:position pos:line="2420" pos:column="69"/></literal>
<literal type="string" pos:line="2421" pos:column="1">"\n"<pos:position pos:line="2421" pos:column="5"/></literal>
<literal type="string" pos:line="2422" pos:column="1">"ENVIRONMENT\n"<pos:position pos:line="2422" pos:column="16"/></literal></expr></argument>
, <argument><expr><name pos:line="2423" pos:column="3">stdout<pos:position pos:line="2423" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2423" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2423" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2424" pos:column="2">fputs<pos:position pos:line="2424" pos:column="7"/></name><argument_list pos:line="2424" pos:column="7">(
<argument><expr><literal type="string" pos:line="2425" pos:column="1">"       The environment variables can be specified in lower case or upper case.\n"<pos:position pos:line="2425" pos:column="83"/></literal>
<literal type="string" pos:line="2426" pos:column="1">"       The lower case version has precedence. http_proxy is an exception as it\n"<pos:position pos:line="2426" pos:column="83"/></literal>
<literal type="string" pos:line="2427" pos:column="1">"       is only available in lower case.\n"<pos:position pos:line="2427" pos:column="44"/></literal>
<literal type="string" pos:line="2428" pos:column="1">"\n"<pos:position pos:line="2428" pos:column="5"/></literal>
<literal type="string" pos:line="2429" pos:column="1">"       Using  an  environment variable to set the proxy has the same effect as\n"<pos:position pos:line="2429" pos:column="83"/></literal>
<literal type="string" pos:line="2430" pos:column="1">"       using the --proxy option.\n"<pos:position pos:line="2430" pos:column="37"/></literal>
<literal type="string" pos:line="2431" pos:column="1">"\n"<pos:position pos:line="2431" pos:column="5"/></literal>
<literal type="string" pos:line="2432" pos:column="1">"       http_proxy [protocol://]&lt;host&gt;[:port]\n"<pos:position pos:line="2432" pos:column="55"/></literal>
<literal type="string" pos:line="2433" pos:column="1">"              Sets the proxy server to use for HTTP.\n"<pos:position pos:line="2433" pos:column="57"/></literal>
<literal type="string" pos:line="2434" pos:column="1">"       HTTPS_PROXY [protocol://]&lt;host&gt;[:port]\n"<pos:position pos:line="2434" pos:column="56"/></literal></expr></argument>
, <argument><expr><name pos:line="2435" pos:column="3">stdout<pos:position pos:line="2435" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2435" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2435" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2436" pos:column="2">fputs<pos:position pos:line="2436" pos:column="7"/></name><argument_list pos:line="2436" pos:column="7">(
<argument><expr><literal type="string" pos:line="2437" pos:column="1">"              Sets the proxy server to use for HTTPS.\n"<pos:position pos:line="2437" pos:column="58"/></literal>
<literal type="string" pos:line="2438" pos:column="1">"\n"<pos:position pos:line="2438" pos:column="5"/></literal>
<literal type="string" pos:line="2439" pos:column="1">"       [url-protocol]_PROXY [protocol://]&lt;host&gt;[:port]\n"<pos:position pos:line="2439" pos:column="65"/></literal>
<literal type="string" pos:line="2440" pos:column="1">"              Sets the proxy server to use for [url-protocol], where the  pro-\n"<pos:position pos:line="2440" pos:column="83"/></literal>
<literal type="string" pos:line="2441" pos:column="1">"              tocol  is  a  protocol  that curl supports and as specified in a\n"<pos:position pos:line="2441" pos:column="83"/></literal>
<literal type="string" pos:line="2442" pos:column="1">"              URL. FTP, FTPS, POP3, IMAP, SMTP, LDAP etc.\n"<pos:position pos:line="2442" pos:column="62"/></literal>
<literal type="string" pos:line="2443" pos:column="1">"\n"<pos:position pos:line="2443" pos:column="5"/></literal>
<literal type="string" pos:line="2444" pos:column="1">"       ALL_PROXY [protocol://]&lt;host&gt;[:port]\n"<pos:position pos:line="2444" pos:column="54"/></literal>
<literal type="string" pos:line="2445" pos:column="1">"              Sets the proxy server to use if no  protocol-specific  proxy  is\n"<pos:position pos:line="2445" pos:column="83"/></literal>
<literal type="string" pos:line="2446" pos:column="1">"              set.\n"<pos:position pos:line="2446" pos:column="23"/></literal>
<literal type="string" pos:line="2447" pos:column="1">"\n"<pos:position pos:line="2447" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2448" pos:column="3">stdout<pos:position pos:line="2448" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2448" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2448" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2449" pos:column="2">fputs<pos:position pos:line="2449" pos:column="7"/></name><argument_list pos:line="2449" pos:column="7">(
<argument><expr><literal type="string" pos:line="2450" pos:column="1">"       NO_PROXY &lt;comma-separated list of hosts&gt;\n"<pos:position pos:line="2450" pos:column="58"/></literal>
<literal type="string" pos:line="2451" pos:column="1">"              list  of  host names that shouldn't go through any proxy. If set\n"<pos:position pos:line="2451" pos:column="83"/></literal>
<literal type="string" pos:line="2452" pos:column="1">"              to a asterisk '*' only, it matches all hosts.\n"<pos:position pos:line="2452" pos:column="64"/></literal>
<literal type="string" pos:line="2453" pos:column="1">"\n"<pos:position pos:line="2453" pos:column="5"/></literal>
<literal type="string" pos:line="2454" pos:column="1">"PROXY PROTOCOL PREFIXES\n"<pos:position pos:line="2454" pos:column="28"/></literal>
<literal type="string" pos:line="2455" pos:column="1">"       Since curl version 7.21.7, the proxy string may  be  specified  with  a\n"<pos:position pos:line="2455" pos:column="83"/></literal>
<literal type="string" pos:line="2456" pos:column="1">"       protocol:// prefix to specify alternative proxy protocols.\n"<pos:position pos:line="2456" pos:column="70"/></literal>
<literal type="string" pos:line="2457" pos:column="1">"\n"<pos:position pos:line="2457" pos:column="5"/></literal>
<literal type="string" pos:line="2458" pos:column="1">"       If  no  protocol  is  specified  in  the  proxy string or if the string\n"<pos:position pos:line="2458" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2459" pos:column="3">stdout<pos:position pos:line="2459" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2459" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2459" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2460" pos:column="2">fputs<pos:position pos:line="2460" pos:column="7"/></name><argument_list pos:line="2460" pos:column="7">(
<argument><expr><literal type="string" pos:line="2461" pos:column="1">"       doesn't match a supported one, the proxy will  be  treated  as  a  HTTP\n"<pos:position pos:line="2461" pos:column="83"/></literal>
<literal type="string" pos:line="2462" pos:column="1">"       proxy.\n"<pos:position pos:line="2462" pos:column="18"/></literal>
<literal type="string" pos:line="2463" pos:column="1">"\n"<pos:position pos:line="2463" pos:column="5"/></literal>
<literal type="string" pos:line="2464" pos:column="1">"       The supported proxy protocol prefixes are as follows:\n"<pos:position pos:line="2464" pos:column="65"/></literal>
<literal type="string" pos:line="2465" pos:column="1">"\n"<pos:position pos:line="2465" pos:column="5"/></literal>
<literal type="string" pos:line="2466" pos:column="1">"       socks4://\n"<pos:position pos:line="2466" pos:column="21"/></literal>
<literal type="string" pos:line="2467" pos:column="1">"              Makes it the equivalent of --socks4\n"<pos:position pos:line="2467" pos:column="54"/></literal>
<literal type="string" pos:line="2468" pos:column="1">"\n"<pos:position pos:line="2468" pos:column="5"/></literal>
<literal type="string" pos:line="2469" pos:column="1">"       socks4a://\n"<pos:position pos:line="2469" pos:column="22"/></literal>
<literal type="string" pos:line="2470" pos:column="1">"              Makes it the equivalent of --socks4a\n"<pos:position pos:line="2470" pos:column="55"/></literal>
<literal type="string" pos:line="2471" pos:column="1">"\n"<pos:position pos:line="2471" pos:column="5"/></literal>
<literal type="string" pos:line="2472" pos:column="1">"       socks5://\n"<pos:position pos:line="2472" pos:column="21"/></literal>
<literal type="string" pos:line="2473" pos:column="1">"              Makes it the equivalent of --socks5\n"<pos:position pos:line="2473" pos:column="54"/></literal>
<literal type="string" pos:line="2474" pos:column="1">"\n"<pos:position pos:line="2474" pos:column="5"/></literal>
<literal type="string" pos:line="2475" pos:column="1">"       socks5h://\n"<pos:position pos:line="2475" pos:column="22"/></literal>
<literal type="string" pos:line="2476" pos:column="1">"              Makes it the equivalent of --socks5-hostname\n"<pos:position pos:line="2476" pos:column="63"/></literal>
<literal type="string" pos:line="2477" pos:column="1">"\n"<pos:position pos:line="2477" pos:column="5"/></literal>
<literal type="string" pos:line="2478" pos:column="1">"EXIT CODES\n"<pos:position pos:line="2478" pos:column="15"/></literal></expr></argument>
, <argument><expr><name pos:line="2479" pos:column="3">stdout<pos:position pos:line="2479" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2479" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2479" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2480" pos:column="2">fputs<pos:position pos:line="2480" pos:column="7"/></name><argument_list pos:line="2480" pos:column="7">(
<argument><expr><literal type="string" pos:line="2481" pos:column="1">"       There  are  a  bunch  of  different error codes and their corresponding\n"<pos:position pos:line="2481" pos:column="83"/></literal>
<literal type="string" pos:line="2482" pos:column="1">"       error messages that may appear during bad conditions. At  the  time  of\n"<pos:position pos:line="2482" pos:column="83"/></literal>
<literal type="string" pos:line="2483" pos:column="1">"       this writing, the exit codes are:\n"<pos:position pos:line="2483" pos:column="45"/></literal>
<literal type="string" pos:line="2484" pos:column="1">"\n"<pos:position pos:line="2484" pos:column="5"/></literal>
<literal type="string" pos:line="2485" pos:column="1">"       1      Unsupported protocol. This build of curl has no support for this\n"<pos:position pos:line="2485" pos:column="83"/></literal>
<literal type="string" pos:line="2486" pos:column="1">"              protocol.\n"<pos:position pos:line="2486" pos:column="28"/></literal>
<literal type="string" pos:line="2487" pos:column="1">"\n"<pos:position pos:line="2487" pos:column="5"/></literal>
<literal type="string" pos:line="2488" pos:column="1">"       2      Failed to initialize.\n"<pos:position pos:line="2488" pos:column="40"/></literal>
<literal type="string" pos:line="2489" pos:column="1">"\n"<pos:position pos:line="2489" pos:column="5"/></literal>
<literal type="string" pos:line="2490" pos:column="1">"       3      URL malformed. The syntax was not correct.\n"<pos:position pos:line="2490" pos:column="61"/></literal>
<literal type="string" pos:line="2491" pos:column="1">"\n"<pos:position pos:line="2491" pos:column="5"/></literal>
<literal type="string" pos:line="2492" pos:column="1">"       4      A feature or option that  was  needed  to  perform  the  desired\n"<pos:position pos:line="2492" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2493" pos:column="3">stdout<pos:position pos:line="2493" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2493" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2493" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2494" pos:column="2">fputs<pos:position pos:line="2494" pos:column="7"/></name><argument_list pos:line="2494" pos:column="7">(
<argument><expr><literal type="string" pos:line="2495" pos:column="1">"              request  was  not  enabled  or was explicitly disabled at build-\n"<pos:position pos:line="2495" pos:column="83"/></literal>
<literal type="string" pos:line="2496" pos:column="1">"              time. To make curl able to do this, you  probably  need  another\n"<pos:position pos:line="2496" pos:column="83"/></literal>
<literal type="string" pos:line="2497" pos:column="1">"              build of libcurl!\n"<pos:position pos:line="2497" pos:column="36"/></literal>
<literal type="string" pos:line="2498" pos:column="1">"\n"<pos:position pos:line="2498" pos:column="5"/></literal>
<literal type="string" pos:line="2499" pos:column="1">"       5      Couldn't  resolve  proxy.  The  given  proxy  host  could not be\n"<pos:position pos:line="2499" pos:column="83"/></literal>
<literal type="string" pos:line="2500" pos:column="1">"              resolved.\n"<pos:position pos:line="2500" pos:column="28"/></literal>
<literal type="string" pos:line="2501" pos:column="1">"\n"<pos:position pos:line="2501" pos:column="5"/></literal>
<literal type="string" pos:line="2502" pos:column="1">"       6      Couldn't resolve host. The given remote host was not resolved.\n"<pos:position pos:line="2502" pos:column="81"/></literal>
<literal type="string" pos:line="2503" pos:column="1">"\n"<pos:position pos:line="2503" pos:column="5"/></literal>
<literal type="string" pos:line="2504" pos:column="1">"       7      Failed to connect to host.\n"<pos:position pos:line="2504" pos:column="45"/></literal>
<literal type="string" pos:line="2505" pos:column="1">"\n"<pos:position pos:line="2505" pos:column="5"/></literal>
<literal type="string" pos:line="2506" pos:column="1">"       8      FTP weird server reply.  The  server  sent  data  curl  couldn't\n"<pos:position pos:line="2506" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2507" pos:column="3">stdout<pos:position pos:line="2507" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2507" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2507" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2508" pos:column="2">fputs<pos:position pos:line="2508" pos:column="7"/></name><argument_list pos:line="2508" pos:column="7">(
<argument><expr><literal type="string" pos:line="2509" pos:column="1">"              parse.\n"<pos:position pos:line="2509" pos:column="25"/></literal>
<literal type="string" pos:line="2510" pos:column="1">"\n"<pos:position pos:line="2510" pos:column="5"/></literal>
<literal type="string" pos:line="2511" pos:column="1">"       9      FTP  access  denied. The server denied login or denied access to\n"<pos:position pos:line="2511" pos:column="83"/></literal>
<literal type="string" pos:line="2512" pos:column="1">"              the particular resource or directory you wanted to  reach.  Most\n"<pos:position pos:line="2512" pos:column="83"/></literal>
<literal type="string" pos:line="2513" pos:column="1">"              often  you  tried to change to a directory that doesn't exist on\n"<pos:position pos:line="2513" pos:column="83"/></literal>
<literal type="string" pos:line="2514" pos:column="1">"              the server.\n"<pos:position pos:line="2514" pos:column="30"/></literal>
<literal type="string" pos:line="2515" pos:column="1">"\n"<pos:position pos:line="2515" pos:column="5"/></literal>
<literal type="string" pos:line="2516" pos:column="1">"       11     FTP weird PASS reply. Curl couldn't parse the reply sent to  the\n"<pos:position pos:line="2516" pos:column="83"/></literal>
<literal type="string" pos:line="2517" pos:column="1">"              PASS request.\n"<pos:position pos:line="2517" pos:column="32"/></literal>
<literal type="string" pos:line="2518" pos:column="1">"\n"<pos:position pos:line="2518" pos:column="5"/></literal>
<literal type="string" pos:line="2519" pos:column="1">"       13     FTP  weird PASV reply, Curl couldn't parse the reply sent to the\n"<pos:position pos:line="2519" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2520" pos:column="3">stdout<pos:position pos:line="2520" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2520" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2520" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2521" pos:column="2">fputs<pos:position pos:line="2521" pos:column="7"/></name><argument_list pos:line="2521" pos:column="7">(
<argument><expr><literal type="string" pos:line="2522" pos:column="1">"              PASV request.\n"<pos:position pos:line="2522" pos:column="32"/></literal>
<literal type="string" pos:line="2523" pos:column="1">"\n"<pos:position pos:line="2523" pos:column="5"/></literal>
<literal type="string" pos:line="2524" pos:column="1">"       14     FTP weird 227 format.  Curl  couldn't  parse  the  227-line  the\n"<pos:position pos:line="2524" pos:column="83"/></literal>
<literal type="string" pos:line="2525" pos:column="1">"              server sent.\n"<pos:position pos:line="2525" pos:column="31"/></literal>
<literal type="string" pos:line="2526" pos:column="1">"\n"<pos:position pos:line="2526" pos:column="5"/></literal>
<literal type="string" pos:line="2527" pos:column="1">"       15     FTP  can't  get host. Couldn't resolve the host IP we got in the\n"<pos:position pos:line="2527" pos:column="83"/></literal>
<literal type="string" pos:line="2528" pos:column="1">"              227-line.\n"<pos:position pos:line="2528" pos:column="28"/></literal>
<literal type="string" pos:line="2529" pos:column="1">"\n"<pos:position pos:line="2529" pos:column="5"/></literal>
<literal type="string" pos:line="2530" pos:column="1">"       17     FTP couldn't set binary.  Couldn't  change  transfer  method  to\n"<pos:position pos:line="2530" pos:column="83"/></literal>
<literal type="string" pos:line="2531" pos:column="1">"              binary.\n"<pos:position pos:line="2531" pos:column="26"/></literal>
<literal type="string" pos:line="2532" pos:column="1">"\n"<pos:position pos:line="2532" pos:column="5"/></literal>
<literal type="string" pos:line="2533" pos:column="1">"       18     Partial file. Only a part of the file was transferred.\n"<pos:position pos:line="2533" pos:column="73"/></literal>
<literal type="string" pos:line="2534" pos:column="1">"\n"<pos:position pos:line="2534" pos:column="5"/></literal>
<literal type="string" pos:line="2535" pos:column="1">"       19     FTP  couldn't download/access the given file, the RETR (or simi-\n"<pos:position pos:line="2535" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2536" pos:column="3">stdout<pos:position pos:line="2536" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2536" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2536" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2537" pos:column="2">fputs<pos:position pos:line="2537" pos:column="7"/></name><argument_list pos:line="2537" pos:column="7">(
<argument><expr><literal type="string" pos:line="2538" pos:column="1">"              lar) command failed.\n"<pos:position pos:line="2538" pos:column="39"/></literal>
<literal type="string" pos:line="2539" pos:column="1">"\n"<pos:position pos:line="2539" pos:column="5"/></literal>
<literal type="string" pos:line="2540" pos:column="1">"       21     FTP quote error. A quote command returned error from the server.\n"<pos:position pos:line="2540" pos:column="83"/></literal>
<literal type="string" pos:line="2541" pos:column="1">"       22     HTTP page not retrieved. The requested  url  was  not  found  or\n"<pos:position pos:line="2541" pos:column="83"/></literal>
<literal type="string" pos:line="2542" pos:column="1">"              returned  another  error  with  the HTTP error code being 400 or\n"<pos:position pos:line="2542" pos:column="83"/></literal>
<literal type="string" pos:line="2543" pos:column="1">"              above. This return code only appears if -f, --fail is used.\n"<pos:position pos:line="2543" pos:column="78"/></literal>
<literal type="string" pos:line="2544" pos:column="1">"\n"<pos:position pos:line="2544" pos:column="5"/></literal>
<literal type="string" pos:line="2545" pos:column="1">"       23     Write error. Curl couldn't write data to a local  filesystem  or\n"<pos:position pos:line="2545" pos:column="83"/></literal>
<literal type="string" pos:line="2546" pos:column="1">"              similar.\n"<pos:position pos:line="2546" pos:column="27"/></literal>
<literal type="string" pos:line="2547" pos:column="1">"\n"<pos:position pos:line="2547" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2548" pos:column="3">stdout<pos:position pos:line="2548" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2548" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2548" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2549" pos:column="2">fputs<pos:position pos:line="2549" pos:column="7"/></name><argument_list pos:line="2549" pos:column="7">(
<argument><expr><literal type="string" pos:line="2550" pos:column="1">"       25     FTP  couldn't  STOR  file. The server denied the STOR operation,\n"<pos:position pos:line="2550" pos:column="83"/></literal>
<literal type="string" pos:line="2551" pos:column="1">"              used for FTP uploading.\n"<pos:position pos:line="2551" pos:column="42"/></literal>
<literal type="string" pos:line="2552" pos:column="1">"\n"<pos:position pos:line="2552" pos:column="5"/></literal>
<literal type="string" pos:line="2553" pos:column="1">"       26     Read error. Various reading problems.\n"<pos:position pos:line="2553" pos:column="56"/></literal>
<literal type="string" pos:line="2554" pos:column="1">"\n"<pos:position pos:line="2554" pos:column="5"/></literal>
<literal type="string" pos:line="2555" pos:column="1">"       27     Out of memory. A memory allocation request failed.\n"<pos:position pos:line="2555" pos:column="69"/></literal>
<literal type="string" pos:line="2556" pos:column="1">"\n"<pos:position pos:line="2556" pos:column="5"/></literal>
<literal type="string" pos:line="2557" pos:column="1">"       28     Operation timeout. The specified  time-out  period  was  reached\n"<pos:position pos:line="2557" pos:column="83"/></literal>
<literal type="string" pos:line="2558" pos:column="1">"              according to the conditions.\n"<pos:position pos:line="2558" pos:column="47"/></literal>
<literal type="string" pos:line="2559" pos:column="1">"\n"<pos:position pos:line="2559" pos:column="5"/></literal>
<literal type="string" pos:line="2560" pos:column="1">"       30     FTP  PORT  failed.  The PORT command failed. Not all FTP servers\n"<pos:position pos:line="2560" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2561" pos:column="3">stdout<pos:position pos:line="2561" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2561" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2561" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2562" pos:column="2">fputs<pos:position pos:line="2562" pos:column="7"/></name><argument_list pos:line="2562" pos:column="7">(
<argument><expr><literal type="string" pos:line="2563" pos:column="1">"              support the PORT  command,  try  doing  a  transfer  using  PASV\n"<pos:position pos:line="2563" pos:column="83"/></literal>
<literal type="string" pos:line="2564" pos:column="1">"              instead!\n"<pos:position pos:line="2564" pos:column="27"/></literal>
<literal type="string" pos:line="2565" pos:column="1">"\n"<pos:position pos:line="2565" pos:column="5"/></literal>
<literal type="string" pos:line="2566" pos:column="1">"       31     FTP  couldn't use REST. The REST command failed. This command is\n"<pos:position pos:line="2566" pos:column="83"/></literal>
<literal type="string" pos:line="2567" pos:column="1">"              used for resumed FTP transfers.\n"<pos:position pos:line="2567" pos:column="50"/></literal>
<literal type="string" pos:line="2568" pos:column="1">"\n"<pos:position pos:line="2568" pos:column="5"/></literal>
<literal type="string" pos:line="2569" pos:column="1">"       33     HTTP range error. The range \"command\" didn't work.\n"<pos:position pos:line="2569" pos:column="71"/></literal>
<literal type="string" pos:line="2570" pos:column="1">"\n"<pos:position pos:line="2570" pos:column="5"/></literal>
<literal type="string" pos:line="2571" pos:column="1">"       34     HTTP post error. Internal post-request generation error.\n"<pos:position pos:line="2571" pos:column="75"/></literal>
<literal type="string" pos:line="2572" pos:column="1">"\n"<pos:position pos:line="2572" pos:column="5"/></literal>
<literal type="string" pos:line="2573" pos:column="1">"       35     SSL connect error. The SSL handshaking failed.\n"<pos:position pos:line="2573" pos:column="65"/></literal>
<literal type="string" pos:line="2574" pos:column="1">"\n"<pos:position pos:line="2574" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2575" pos:column="3">stdout<pos:position pos:line="2575" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2575" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2575" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2576" pos:column="2">fputs<pos:position pos:line="2576" pos:column="7"/></name><argument_list pos:line="2576" pos:column="7">(
<argument><expr><literal type="string" pos:line="2577" pos:column="1">"       36     FTP bad download resume. Couldn't continue  an  earlier  aborted\n"<pos:position pos:line="2577" pos:column="83"/></literal>
<literal type="string" pos:line="2578" pos:column="1">"              download.\n"<pos:position pos:line="2578" pos:column="28"/></literal>
<literal type="string" pos:line="2579" pos:column="1">"\n"<pos:position pos:line="2579" pos:column="5"/></literal>
<literal type="string" pos:line="2580" pos:column="1">"       37     FILE couldn't read file. Failed to open the file. Permissions?\n"<pos:position pos:line="2580" pos:column="81"/></literal>
<literal type="string" pos:line="2581" pos:column="1">"\n"<pos:position pos:line="2581" pos:column="5"/></literal>
<literal type="string" pos:line="2582" pos:column="1">"       38     LDAP cannot bind. LDAP bind operation failed.\n"<pos:position pos:line="2582" pos:column="64"/></literal>
<literal type="string" pos:line="2583" pos:column="1">"\n"<pos:position pos:line="2583" pos:column="5"/></literal>
<literal type="string" pos:line="2584" pos:column="1">"       39     LDAP search failed.\n"<pos:position pos:line="2584" pos:column="38"/></literal>
<literal type="string" pos:line="2585" pos:column="1">"\n"<pos:position pos:line="2585" pos:column="5"/></literal>
<literal type="string" pos:line="2586" pos:column="1">"       41     Function not found. A required LDAP function was not found.\n"<pos:position pos:line="2586" pos:column="78"/></literal>
<literal type="string" pos:line="2587" pos:column="1">"\n"<pos:position pos:line="2587" pos:column="5"/></literal>
<literal type="string" pos:line="2588" pos:column="1">"       42     Aborted by callback. An application told curl to abort the oper-\n"<pos:position pos:line="2588" pos:column="83"/></literal>
<literal type="string" pos:line="2589" pos:column="1">"              ation.\n"<pos:position pos:line="2589" pos:column="25"/></literal>
<literal type="string" pos:line="2590" pos:column="1">"\n"<pos:position pos:line="2590" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2591" pos:column="3">stdout<pos:position pos:line="2591" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2591" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2591" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2592" pos:column="2">fputs<pos:position pos:line="2592" pos:column="7"/></name><argument_list pos:line="2592" pos:column="7">(
<argument><expr><literal type="string" pos:line="2593" pos:column="1">"       43     Internal error. A function was called with a bad parameter.\n"<pos:position pos:line="2593" pos:column="78"/></literal>
<literal type="string" pos:line="2594" pos:column="1">"\n"<pos:position pos:line="2594" pos:column="5"/></literal>
<literal type="string" pos:line="2595" pos:column="1">"       45     Interface error. A specified outgoing  interface  could  not  be\n"<pos:position pos:line="2595" pos:column="83"/></literal>
<literal type="string" pos:line="2596" pos:column="1">"              used.\n"<pos:position pos:line="2596" pos:column="24"/></literal>
<literal type="string" pos:line="2597" pos:column="1">"\n"<pos:position pos:line="2597" pos:column="5"/></literal>
<literal type="string" pos:line="2598" pos:column="1">"       47     Too many redirects. When following redirects, curl hit the maxi-\n"<pos:position pos:line="2598" pos:column="83"/></literal>
<literal type="string" pos:line="2599" pos:column="1">"              mum amount.\n"<pos:position pos:line="2599" pos:column="30"/></literal>
<literal type="string" pos:line="2600" pos:column="1">"\n"<pos:position pos:line="2600" pos:column="5"/></literal>
<literal type="string" pos:line="2601" pos:column="1">"       48     Unknown option specified to libcurl.  This  indicates  that  you\n"<pos:position pos:line="2601" pos:column="83"/></literal>
<literal type="string" pos:line="2602" pos:column="1">"              passed  a weird option to curl that was passed on to libcurl and\n"<pos:position pos:line="2602" pos:column="83"/></literal>
<literal type="string" pos:line="2603" pos:column="1">"              rejected. Read up in the manual!\n"<pos:position pos:line="2603" pos:column="51"/></literal>
<literal type="string" pos:line="2604" pos:column="1">"\n"<pos:position pos:line="2604" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2605" pos:column="3">stdout<pos:position pos:line="2605" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2605" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2605" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2606" pos:column="2">fputs<pos:position pos:line="2606" pos:column="7"/></name><argument_list pos:line="2606" pos:column="7">(
<argument><expr><literal type="string" pos:line="2607" pos:column="1">"       49     Malformed telnet option.\n"<pos:position pos:line="2607" pos:column="43"/></literal>
<literal type="string" pos:line="2608" pos:column="1">"\n"<pos:position pos:line="2608" pos:column="5"/></literal>
<literal type="string" pos:line="2609" pos:column="1">"       51     The peer's SSL certificate or SSH MD5 fingerprint was not OK.\n"<pos:position pos:line="2609" pos:column="80"/></literal>
<literal type="string" pos:line="2610" pos:column="1">"\n"<pos:position pos:line="2610" pos:column="5"/></literal>
<literal type="string" pos:line="2611" pos:column="1">"       52     The server didn't reply anything, which here  is  considered  an\n"<pos:position pos:line="2611" pos:column="83"/></literal>
<literal type="string" pos:line="2612" pos:column="1">"              error.\n"<pos:position pos:line="2612" pos:column="25"/></literal>
<literal type="string" pos:line="2613" pos:column="1">"\n"<pos:position pos:line="2613" pos:column="5"/></literal>
<literal type="string" pos:line="2614" pos:column="1">"       53     SSL crypto engine not found.\n"<pos:position pos:line="2614" pos:column="47"/></literal>
<literal type="string" pos:line="2615" pos:column="1">"\n"<pos:position pos:line="2615" pos:column="5"/></literal>
<literal type="string" pos:line="2616" pos:column="1">"       54     Cannot set SSL crypto engine as default.\n"<pos:position pos:line="2616" pos:column="59"/></literal>
<literal type="string" pos:line="2617" pos:column="1">"\n"<pos:position pos:line="2617" pos:column="5"/></literal>
<literal type="string" pos:line="2618" pos:column="1">"       55     Failed sending network data.\n"<pos:position pos:line="2618" pos:column="47"/></literal>
<literal type="string" pos:line="2619" pos:column="1">"\n"<pos:position pos:line="2619" pos:column="5"/></literal>
<literal type="string" pos:line="2620" pos:column="1">"       56     Failure in receiving network data.\n"<pos:position pos:line="2620" pos:column="53"/></literal>
<literal type="string" pos:line="2621" pos:column="1">"\n"<pos:position pos:line="2621" pos:column="5"/></literal>
<literal type="string" pos:line="2622" pos:column="1">"       58     Problem with the local certificate.\n"<pos:position pos:line="2622" pos:column="54"/></literal>
<literal type="string" pos:line="2623" pos:column="1">"\n"<pos:position pos:line="2623" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2624" pos:column="3">stdout<pos:position pos:line="2624" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2624" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2624" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2625" pos:column="2">fputs<pos:position pos:line="2625" pos:column="7"/></name><argument_list pos:line="2625" pos:column="7">(
<argument><expr><literal type="string" pos:line="2626" pos:column="1">"       59     Couldn't use specified SSL cipher.\n"<pos:position pos:line="2626" pos:column="53"/></literal>
<literal type="string" pos:line="2627" pos:column="1">"\n"<pos:position pos:line="2627" pos:column="5"/></literal>
<literal type="string" pos:line="2628" pos:column="1">"       60     Peer  certificate cannot be authenticated with known CA certifi-\n"<pos:position pos:line="2628" pos:column="83"/></literal>
<literal type="string" pos:line="2629" pos:column="1">"              cates.\n"<pos:position pos:line="2629" pos:column="25"/></literal>
<literal type="string" pos:line="2630" pos:column="1">"\n"<pos:position pos:line="2630" pos:column="5"/></literal>
<literal type="string" pos:line="2631" pos:column="1">"       61     Unrecognized transfer encoding.\n"<pos:position pos:line="2631" pos:column="50"/></literal>
<literal type="string" pos:line="2632" pos:column="1">"\n"<pos:position pos:line="2632" pos:column="5"/></literal>
<literal type="string" pos:line="2633" pos:column="1">"       62     Invalid LDAP URL.\n"<pos:position pos:line="2633" pos:column="36"/></literal>
<literal type="string" pos:line="2634" pos:column="1">"\n"<pos:position pos:line="2634" pos:column="5"/></literal>
<literal type="string" pos:line="2635" pos:column="1">"       63     Maximum file size exceeded.\n"<pos:position pos:line="2635" pos:column="46"/></literal>
<literal type="string" pos:line="2636" pos:column="1">"\n"<pos:position pos:line="2636" pos:column="5"/></literal>
<literal type="string" pos:line="2637" pos:column="1">"       64     Requested FTP SSL level failed.\n"<pos:position pos:line="2637" pos:column="50"/></literal>
<literal type="string" pos:line="2638" pos:column="1">"\n"<pos:position pos:line="2638" pos:column="5"/></literal>
<literal type="string" pos:line="2639" pos:column="1">"       65     Sending the data requires a rewind that failed.\n"<pos:position pos:line="2639" pos:column="66"/></literal>
<literal type="string" pos:line="2640" pos:column="1">"\n"<pos:position pos:line="2640" pos:column="5"/></literal>
<literal type="string" pos:line="2641" pos:column="1">"       66     Failed to initialise SSL Engine.\n"<pos:position pos:line="2641" pos:column="51"/></literal>
<literal type="string" pos:line="2642" pos:column="1">"\n"<pos:position pos:line="2642" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2643" pos:column="3">stdout<pos:position pos:line="2643" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2643" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2643" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2644" pos:column="2">fputs<pos:position pos:line="2644" pos:column="7"/></name><argument_list pos:line="2644" pos:column="7">(
<argument><expr><literal type="string" pos:line="2645" pos:column="1">"       67     The user name, password, or similar was not  accepted  and  curl\n"<pos:position pos:line="2645" pos:column="83"/></literal>
<literal type="string" pos:line="2646" pos:column="1">"              failed to log in.\n"<pos:position pos:line="2646" pos:column="36"/></literal>
<literal type="string" pos:line="2647" pos:column="1">"\n"<pos:position pos:line="2647" pos:column="5"/></literal>
<literal type="string" pos:line="2648" pos:column="1">"       68     File not found on TFTP server.\n"<pos:position pos:line="2648" pos:column="49"/></literal>
<literal type="string" pos:line="2649" pos:column="1">"\n"<pos:position pos:line="2649" pos:column="5"/></literal>
<literal type="string" pos:line="2650" pos:column="1">"       69     Permission problem on TFTP server.\n"<pos:position pos:line="2650" pos:column="53"/></literal>
<literal type="string" pos:line="2651" pos:column="1">"\n"<pos:position pos:line="2651" pos:column="5"/></literal>
<literal type="string" pos:line="2652" pos:column="1">"       70     Out of disk space on TFTP server.\n"<pos:position pos:line="2652" pos:column="52"/></literal>
<literal type="string" pos:line="2653" pos:column="1">"\n"<pos:position pos:line="2653" pos:column="5"/></literal>
<literal type="string" pos:line="2654" pos:column="1">"       71     Illegal TFTP operation.\n"<pos:position pos:line="2654" pos:column="42"/></literal>
<literal type="string" pos:line="2655" pos:column="1">"\n"<pos:position pos:line="2655" pos:column="5"/></literal>
<literal type="string" pos:line="2656" pos:column="1">"       72     Unknown TFTP transfer ID.\n"<pos:position pos:line="2656" pos:column="44"/></literal>
<literal type="string" pos:line="2657" pos:column="1">"\n"<pos:position pos:line="2657" pos:column="5"/></literal>
<literal type="string" pos:line="2658" pos:column="1">"       73     File already exists (TFTP).\n"<pos:position pos:line="2658" pos:column="46"/></literal>
<literal type="string" pos:line="2659" pos:column="1">"\n"<pos:position pos:line="2659" pos:column="5"/></literal>
<literal type="string" pos:line="2660" pos:column="1">"       74     No such user (TFTP).\n"<pos:position pos:line="2660" pos:column="39"/></literal>
<literal type="string" pos:line="2661" pos:column="1">"\n"<pos:position pos:line="2661" pos:column="5"/></literal>
<literal type="string" pos:line="2662" pos:column="1">"       75     Character conversion failed.\n"<pos:position pos:line="2662" pos:column="47"/></literal>
<literal type="string" pos:line="2663" pos:column="1">"\n"<pos:position pos:line="2663" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2664" pos:column="3">stdout<pos:position pos:line="2664" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2664" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2664" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2665" pos:column="2">fputs<pos:position pos:line="2665" pos:column="7"/></name><argument_list pos:line="2665" pos:column="7">(
<argument><expr><literal type="string" pos:line="2666" pos:column="1">"       76     Character conversion functions required.\n"<pos:position pos:line="2666" pos:column="59"/></literal>
<literal type="string" pos:line="2667" pos:column="1">"\n"<pos:position pos:line="2667" pos:column="5"/></literal>
<literal type="string" pos:line="2668" pos:column="1">"       77     Problem with reading the SSL CA cert (path? access rights?).\n"<pos:position pos:line="2668" pos:column="79"/></literal>
<literal type="string" pos:line="2669" pos:column="1">"\n"<pos:position pos:line="2669" pos:column="5"/></literal>
<literal type="string" pos:line="2670" pos:column="1">"       78     The resource referenced in the URL does not exist.\n"<pos:position pos:line="2670" pos:column="69"/></literal>
<literal type="string" pos:line="2671" pos:column="1">"\n"<pos:position pos:line="2671" pos:column="5"/></literal>
<literal type="string" pos:line="2672" pos:column="1">"       79     An unspecified error occurred during the SSH session.\n"<pos:position pos:line="2672" pos:column="72"/></literal>
<literal type="string" pos:line="2673" pos:column="1">"\n"<pos:position pos:line="2673" pos:column="5"/></literal>
<literal type="string" pos:line="2674" pos:column="1">"       80     Failed to shut down the SSL connection.\n"<pos:position pos:line="2674" pos:column="58"/></literal>
<literal type="string" pos:line="2675" pos:column="1">"\n"<pos:position pos:line="2675" pos:column="5"/></literal>
<literal type="string" pos:line="2676" pos:column="1">"       82     Could  not  load  CRL  file,  missing  or wrong format (added in\n"<pos:position pos:line="2676" pos:column="83"/></literal>
<literal type="string" pos:line="2677" pos:column="1">"              7.19.0).\n"<pos:position pos:line="2677" pos:column="27"/></literal>
<literal type="string" pos:line="2678" pos:column="1">"\n"<pos:position pos:line="2678" pos:column="5"/></literal>
<literal type="string" pos:line="2679" pos:column="1">"       83     Issuer check failed (added in 7.19.0).\n"<pos:position pos:line="2679" pos:column="57"/></literal>
<literal type="string" pos:line="2680" pos:column="1">"\n"<pos:position pos:line="2680" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2681" pos:column="3">stdout<pos:position pos:line="2681" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2681" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2681" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2682" pos:column="2">fputs<pos:position pos:line="2682" pos:column="7"/></name><argument_list pos:line="2682" pos:column="7">(
<argument><expr><literal type="string" pos:line="2683" pos:column="1">"       84     The FTP PRET command failed\n"<pos:position pos:line="2683" pos:column="46"/></literal>
<literal type="string" pos:line="2684" pos:column="1">"\n"<pos:position pos:line="2684" pos:column="5"/></literal>
<literal type="string" pos:line="2685" pos:column="1">"       85     RTSP: mismatch of CSeq numbers\n"<pos:position pos:line="2685" pos:column="49"/></literal>
<literal type="string" pos:line="2686" pos:column="1">"\n"<pos:position pos:line="2686" pos:column="5"/></literal>
<literal type="string" pos:line="2687" pos:column="1">"       86     RTSP: mismatch of Session Identifiers\n"<pos:position pos:line="2687" pos:column="56"/></literal>
<literal type="string" pos:line="2688" pos:column="1">"\n"<pos:position pos:line="2688" pos:column="5"/></literal>
<literal type="string" pos:line="2689" pos:column="1">"       87     unable to parse FTP file list\n"<pos:position pos:line="2689" pos:column="48"/></literal>
<literal type="string" pos:line="2690" pos:column="1">"\n"<pos:position pos:line="2690" pos:column="5"/></literal>
<literal type="string" pos:line="2691" pos:column="1">"       88     FTP chunk callback reported error\n"<pos:position pos:line="2691" pos:column="52"/></literal>
<literal type="string" pos:line="2692" pos:column="1">"\n"<pos:position pos:line="2692" pos:column="5"/></literal>
<literal type="string" pos:line="2693" pos:column="1">"       XX     More error codes will appear here in future releases. The exist-\n"<pos:position pos:line="2693" pos:column="83"/></literal>
<literal type="string" pos:line="2694" pos:column="1">"              ing ones are meant to never change.\n"<pos:position pos:line="2694" pos:column="54"/></literal>
<literal type="string" pos:line="2695" pos:column="1">"\n"<pos:position pos:line="2695" pos:column="5"/></literal>
<literal type="string" pos:line="2696" pos:column="1">"AUTHORS / CONTRIBUTORS\n"<pos:position pos:line="2696" pos:column="27"/></literal>
<literal type="string" pos:line="2697" pos:column="1">"       Daniel  Stenberg is the main author, but the whole list of contributors\n"<pos:position pos:line="2697" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2698" pos:column="3">stdout<pos:position pos:line="2698" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2698" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2698" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2699" pos:column="2">fputs<pos:position pos:line="2699" pos:column="7"/></name><argument_list pos:line="2699" pos:column="7">(
<argument><expr><literal type="string" pos:line="2700" pos:column="1">"       is found in the separate THANKS file.\n"<pos:position pos:line="2700" pos:column="49"/></literal>
<literal type="string" pos:line="2701" pos:column="1">"\n"<pos:position pos:line="2701" pos:column="5"/></literal>
<literal type="string" pos:line="2702" pos:column="1">"WWW\n"<pos:position pos:line="2702" pos:column="8"/></literal>
<literal type="string" pos:line="2703" pos:column="1">"       http://curl.haxx.se\n"<pos:position pos:line="2703" pos:column="31"/></literal>
<literal type="string" pos:line="2704" pos:column="1">"\n"<pos:position pos:line="2704" pos:column="5"/></literal>
<literal type="string" pos:line="2705" pos:column="1">"FTP\n"<pos:position pos:line="2705" pos:column="8"/></literal>
<literal type="string" pos:line="2706" pos:column="1">"       ftp://ftp.sunet.se/pub/www/utilities/curl/\n"<pos:position pos:line="2706" pos:column="54"/></literal>
<literal type="string" pos:line="2707" pos:column="1">"\n"<pos:position pos:line="2707" pos:column="5"/></literal>
<literal type="string" pos:line="2708" pos:column="1">"SEE ALSO\n"<pos:position pos:line="2708" pos:column="13"/></literal>
<literal type="string" pos:line="2709" pos:column="1">"       ftp(1), wget(1)\n"<pos:position pos:line="2709" pos:column="27"/></literal>
<literal type="string" pos:line="2710" pos:column="1">"\n"<pos:position pos:line="2710" pos:column="5"/></literal>
<literal type="string" pos:line="2711" pos:column="1">"LATEST VERSION\n"<pos:position pos:line="2711" pos:column="19"/></literal>
<literal type="string" pos:line="2712" pos:column="1">"\n"<pos:position pos:line="2712" pos:column="5"/></literal>
<literal type="string" pos:line="2713" pos:column="1">"  You always find news about what's going on as well as the latest versions\n"<pos:position pos:line="2713" pos:column="80"/></literal>
<literal type="string" pos:line="2714" pos:column="1">"  from the curl web pages, located at:\n"<pos:position pos:line="2714" pos:column="43"/></literal>
<literal type="string" pos:line="2715" pos:column="1">"\n"<pos:position pos:line="2715" pos:column="5"/></literal>
<literal type="string" pos:line="2716" pos:column="1">"        http://curl.haxx.se\n"<pos:position pos:line="2716" pos:column="32"/></literal>
<literal type="string" pos:line="2717" pos:column="1">"\n"<pos:position pos:line="2717" pos:column="5"/></literal>
<literal type="string" pos:line="2718" pos:column="1">"SIMPLE USAGE\n"<pos:position pos:line="2718" pos:column="17"/></literal>
<literal type="string" pos:line="2719" pos:column="1">"\n"<pos:position pos:line="2719" pos:column="5"/></literal>
<literal type="string" pos:line="2720" pos:column="1">"  Get the main page from Netscape's web-server:\n"<pos:position pos:line="2720" pos:column="52"/></literal>
<literal type="string" pos:line="2721" pos:column="1">"\n"<pos:position pos:line="2721" pos:column="5"/></literal>
<literal type="string" pos:line="2722" pos:column="1">"        curl http://www.netscape.com/\n"<pos:position pos:line="2722" pos:column="42"/></literal>
<literal type="string" pos:line="2723" pos:column="1">"\n"<pos:position pos:line="2723" pos:column="5"/></literal>
<literal type="string" pos:line="2724" pos:column="1">"  Get the README file the user's home directory at funet's ftp-server:\n"<pos:position pos:line="2724" pos:column="75"/></literal></expr></argument>
, <argument><expr><name pos:line="2725" pos:column="3">stdout<pos:position pos:line="2725" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2725" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2725" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2726" pos:column="2">fputs<pos:position pos:line="2726" pos:column="7"/></name><argument_list pos:line="2726" pos:column="7">(
<argument><expr><literal type="string" pos:line="2727" pos:column="1">"\n"<pos:position pos:line="2727" pos:column="5"/></literal>
<literal type="string" pos:line="2728" pos:column="1">"        curl ftp://ftp.funet.fi/README\n"<pos:position pos:line="2728" pos:column="43"/></literal>
<literal type="string" pos:line="2729" pos:column="1">"\n"<pos:position pos:line="2729" pos:column="5"/></literal>
<literal type="string" pos:line="2730" pos:column="1">"  Get a web page from a server using port 8000:\n"<pos:position pos:line="2730" pos:column="52"/></literal>
<literal type="string" pos:line="2731" pos:column="1">"\n"<pos:position pos:line="2731" pos:column="5"/></literal>
<literal type="string" pos:line="2732" pos:column="1">"        curl http://www.weirdserver.com:8000/\n"<pos:position pos:line="2732" pos:column="50"/></literal>
<literal type="string" pos:line="2733" pos:column="1">"\n"<pos:position pos:line="2733" pos:column="5"/></literal>
<literal type="string" pos:line="2734" pos:column="1">"  Get a list of a directory of an FTP site:\n"<pos:position pos:line="2734" pos:column="48"/></literal>
<literal type="string" pos:line="2735" pos:column="1">"\n"<pos:position pos:line="2735" pos:column="5"/></literal>
<literal type="string" pos:line="2736" pos:column="1">"        curl ftp://cool.haxx.se/\n"<pos:position pos:line="2736" pos:column="37"/></literal>
<literal type="string" pos:line="2737" pos:column="1">"\n"<pos:position pos:line="2737" pos:column="5"/></literal>
<literal type="string" pos:line="2738" pos:column="1">"  Get the definition of curl from a dictionary:\n"<pos:position pos:line="2738" pos:column="52"/></literal>
<literal type="string" pos:line="2739" pos:column="1">"\n"<pos:position pos:line="2739" pos:column="5"/></literal>
<literal type="string" pos:line="2740" pos:column="1">"        curl dict://dict.org/m:curl\n"<pos:position pos:line="2740" pos:column="40"/></literal>
<literal type="string" pos:line="2741" pos:column="1">"\n"<pos:position pos:line="2741" pos:column="5"/></literal>
<literal type="string" pos:line="2742" pos:column="1">"  Fetch two documents at once:\n"<pos:position pos:line="2742" pos:column="35"/></literal>
<literal type="string" pos:line="2743" pos:column="1">"\n"<pos:position pos:line="2743" pos:column="5"/></literal>
<literal type="string" pos:line="2744" pos:column="1">"        curl ftp://cool.haxx.se/ http://www.weirdserver.com:8000/\n"<pos:position pos:line="2744" pos:column="70"/></literal>
<literal type="string" pos:line="2745" pos:column="1">"\n"<pos:position pos:line="2745" pos:column="5"/></literal>
<literal type="string" pos:line="2746" pos:column="1">"  Get a file off an FTPS server:\n"<pos:position pos:line="2746" pos:column="37"/></literal>
<literal type="string" pos:line="2747" pos:column="1">"\n"<pos:position pos:line="2747" pos:column="5"/></literal>
<literal type="string" pos:line="2748" pos:column="1">"        curl ftps://files.are.secure.com/secrets.txt\n"<pos:position pos:line="2748" pos:column="57"/></literal>
<literal type="string" pos:line="2749" pos:column="1">"\n"<pos:position pos:line="2749" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2750" pos:column="3">stdout<pos:position pos:line="2750" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2750" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2750" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2751" pos:column="2">fputs<pos:position pos:line="2751" pos:column="7"/></name><argument_list pos:line="2751" pos:column="7">(
<argument><expr><literal type="string" pos:line="2752" pos:column="1">"  or use the more appropriate FTPS way to get the same file:\n"<pos:position pos:line="2752" pos:column="65"/></literal>
<literal type="string" pos:line="2753" pos:column="1">"\n"<pos:position pos:line="2753" pos:column="5"/></literal>
<literal type="string" pos:line="2754" pos:column="1">"        curl --ftp-ssl ftp://files.are.secure.com/secrets.txt\n"<pos:position pos:line="2754" pos:column="66"/></literal>
<literal type="string" pos:line="2755" pos:column="1">"\n"<pos:position pos:line="2755" pos:column="5"/></literal>
<literal type="string" pos:line="2756" pos:column="1">"  Get a file from an SSH server using SFTP:\n"<pos:position pos:line="2756" pos:column="48"/></literal>
<literal type="string" pos:line="2757" pos:column="1">"\n"<pos:position pos:line="2757" pos:column="5"/></literal>
<literal type="string" pos:line="2758" pos:column="1">"        curl -u username sftp://shell.example.com/etc/issue\n"<pos:position pos:line="2758" pos:column="64"/></literal>
<literal type="string" pos:line="2759" pos:column="1">"\n"<pos:position pos:line="2759" pos:column="5"/></literal>
<literal type="string" pos:line="2760" pos:column="1">"  Get a file from an SSH server using SCP using a private key to authenticate:\n"<pos:position pos:line="2760" pos:column="83"/></literal>
<literal type="string" pos:line="2761" pos:column="1">"\n"<pos:position pos:line="2761" pos:column="5"/></literal>
<literal type="string" pos:line="2762" pos:column="1">"        curl -u username: --key ~/.ssh/id_dsa --pubkey ~/.ssh/id_dsa.pub \\\n"<pos:position pos:line="2762" pos:column="80"/></literal>
<literal type="string" pos:line="2763" pos:column="1">"            scp://shell.example.com/~/personal.txt\n"<pos:position pos:line="2763" pos:column="55"/></literal>
<literal type="string" pos:line="2764" pos:column="1">"\n"<pos:position pos:line="2764" pos:column="5"/></literal>
<literal type="string" pos:line="2765" pos:column="1">"  Get the main page from an IPv6 web server:\n"<pos:position pos:line="2765" pos:column="49"/></literal>
<literal type="string" pos:line="2766" pos:column="1">"\n"<pos:position pos:line="2766" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2767" pos:column="3">stdout<pos:position pos:line="2767" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2767" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2767" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2768" pos:column="2">fputs<pos:position pos:line="2768" pos:column="7"/></name><argument_list pos:line="2768" pos:column="7">(
<argument><expr><literal type="string" pos:line="2769" pos:column="1">"        curl -g \"http://[2001:1890:1112:1::20]/\"\n"<pos:position pos:line="2769" pos:column="55"/></literal>
<literal type="string" pos:line="2770" pos:column="1">"\n"<pos:position pos:line="2770" pos:column="5"/></literal>
<literal type="string" pos:line="2771" pos:column="1">"DOWNLOAD TO A FILE\n"<pos:position pos:line="2771" pos:column="23"/></literal>
<literal type="string" pos:line="2772" pos:column="1">"\n"<pos:position pos:line="2772" pos:column="5"/></literal>
<literal type="string" pos:line="2773" pos:column="1">"  Get a web page and store in a local file:\n"<pos:position pos:line="2773" pos:column="48"/></literal>
<literal type="string" pos:line="2774" pos:column="1">"\n"<pos:position pos:line="2774" pos:column="5"/></literal>
<literal type="string" pos:line="2775" pos:column="1">"        curl -o thatpage.html http://www.netscape.com/\n"<pos:position pos:line="2775" pos:column="59"/></literal>
<literal type="string" pos:line="2776" pos:column="1">"\n"<pos:position pos:line="2776" pos:column="5"/></literal>
<literal type="string" pos:line="2777" pos:column="1">"  Get a web page and store in a local file, make the local file get the name\n"<pos:position pos:line="2777" pos:column="81"/></literal>
<literal type="string" pos:line="2778" pos:column="1">"  of the remote document (if no file name part is specified in the URL, this\n"<pos:position pos:line="2778" pos:column="81"/></literal>
<literal type="string" pos:line="2779" pos:column="1">"  will fail):\n"<pos:position pos:line="2779" pos:column="18"/></literal>
<literal type="string" pos:line="2780" pos:column="1">"\n"<pos:position pos:line="2780" pos:column="5"/></literal>
<literal type="string" pos:line="2781" pos:column="1">"        curl -O http://www.netscape.com/index.html\n"<pos:position pos:line="2781" pos:column="55"/></literal>
<literal type="string" pos:line="2782" pos:column="1">"\n"<pos:position pos:line="2782" pos:column="5"/></literal>
<literal type="string" pos:line="2783" pos:column="1">"  Fetch two files and store them with their remote names:\n"<pos:position pos:line="2783" pos:column="62"/></literal>
<literal type="string" pos:line="2784" pos:column="1">"\n"<pos:position pos:line="2784" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2785" pos:column="3">stdout<pos:position pos:line="2785" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2785" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2785" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2786" pos:column="2">fputs<pos:position pos:line="2786" pos:column="7"/></name><argument_list pos:line="2786" pos:column="7">(
<argument><expr><literal type="string" pos:line="2787" pos:column="1">"        curl -O www.haxx.se/index.html -O curl.haxx.se/download.html\n"<pos:position pos:line="2787" pos:column="73"/></literal>
<literal type="string" pos:line="2788" pos:column="1">"\n"<pos:position pos:line="2788" pos:column="5"/></literal>
<literal type="string" pos:line="2789" pos:column="1">"USING PASSWORDS\n"<pos:position pos:line="2789" pos:column="20"/></literal>
<literal type="string" pos:line="2790" pos:column="1">"\n"<pos:position pos:line="2790" pos:column="5"/></literal>
<literal type="string" pos:line="2791" pos:column="1">" FTP\n"<pos:position pos:line="2791" pos:column="9"/></literal>
<literal type="string" pos:line="2792" pos:column="1">"\n"<pos:position pos:line="2792" pos:column="5"/></literal>
<literal type="string" pos:line="2793" pos:column="1">"   To ftp files using name+passwd, include them in the URL like:\n"<pos:position pos:line="2793" pos:column="69"/></literal>
<literal type="string" pos:line="2794" pos:column="1">"\n"<pos:position pos:line="2794" pos:column="5"/></literal>
<literal type="string" pos:line="2795" pos:column="1">"        curl ftp://name:passwd@machine.domain:port/full/path/to/file\n"<pos:position pos:line="2795" pos:column="73"/></literal>
<literal type="string" pos:line="2796" pos:column="1">"\n"<pos:position pos:line="2796" pos:column="5"/></literal>
<literal type="string" pos:line="2797" pos:column="1">"   or specify them with the -u flag like\n"<pos:position pos:line="2797" pos:column="45"/></literal>
<literal type="string" pos:line="2798" pos:column="1">"\n"<pos:position pos:line="2798" pos:column="5"/></literal>
<literal type="string" pos:line="2799" pos:column="1">"        curl -u name:passwd ftp://machine.domain:port/full/path/to/file\n"<pos:position pos:line="2799" pos:column="76"/></literal>
<literal type="string" pos:line="2800" pos:column="1">"\n"<pos:position pos:line="2800" pos:column="5"/></literal>
<literal type="string" pos:line="2801" pos:column="1">" FTPS\n"<pos:position pos:line="2801" pos:column="10"/></literal>
<literal type="string" pos:line="2802" pos:column="1">"\n"<pos:position pos:line="2802" pos:column="5"/></literal>
<literal type="string" pos:line="2803" pos:column="1">"   It is just like for FTP, but you may also want to specify and use\n"<pos:position pos:line="2803" pos:column="73"/></literal>
<literal type="string" pos:line="2804" pos:column="1">"   SSL-specific options for certificates etc.\n"<pos:position pos:line="2804" pos:column="50"/></literal>
<literal type="string" pos:line="2805" pos:column="1">"\n"<pos:position pos:line="2805" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2806" pos:column="3">stdout<pos:position pos:line="2806" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2806" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2806" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2807" pos:column="2">fputs<pos:position pos:line="2807" pos:column="7"/></name><argument_list pos:line="2807" pos:column="7">(
<argument><expr><literal type="string" pos:line="2808" pos:column="1">"   Note that using FTPS:// as prefix is the \"implicit\" way as described in the\n"<pos:position pos:line="2808" pos:column="85"/></literal>
<literal type="string" pos:line="2809" pos:column="1">"   standards while the recommended \"explicit\" way is done by using FTP:// and\n"<pos:position pos:line="2809" pos:column="84"/></literal>
<literal type="string" pos:line="2810" pos:column="1">"   the --ftp-ssl option.\n"<pos:position pos:line="2810" pos:column="29"/></literal>
<literal type="string" pos:line="2811" pos:column="1">"\n"<pos:position pos:line="2811" pos:column="5"/></literal>
<literal type="string" pos:line="2812" pos:column="1">" SFTP / SCP\n"<pos:position pos:line="2812" pos:column="16"/></literal>
<literal type="string" pos:line="2813" pos:column="1">"\n"<pos:position pos:line="2813" pos:column="5"/></literal>
<literal type="string" pos:line="2814" pos:column="1">"   This is similar to FTP, but you can specify a private key to use instead of\n"<pos:position pos:line="2814" pos:column="83"/></literal>
<literal type="string" pos:line="2815" pos:column="1">"   a password. Note that the private key may itself be protected by a password\n"<pos:position pos:line="2815" pos:column="83"/></literal>
<literal type="string" pos:line="2816" pos:column="1">"   that is unrelated to the login password of the remote system.  If you\n"<pos:position pos:line="2816" pos:column="77"/></literal>
<literal type="string" pos:line="2817" pos:column="1">"   provide a private key file you must also provide a public key file.\n"<pos:position pos:line="2817" pos:column="75"/></literal></expr></argument>
, <argument><expr><name pos:line="2818" pos:column="3">stdout<pos:position pos:line="2818" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2818" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2818" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2819" pos:column="2">fputs<pos:position pos:line="2819" pos:column="7"/></name><argument_list pos:line="2819" pos:column="7">(
<argument><expr><literal type="string" pos:line="2820" pos:column="1">"\n"<pos:position pos:line="2820" pos:column="5"/></literal>
<literal type="string" pos:line="2821" pos:column="1">" HTTP\n"<pos:position pos:line="2821" pos:column="10"/></literal>
<literal type="string" pos:line="2822" pos:column="1">"\n"<pos:position pos:line="2822" pos:column="5"/></literal>
<literal type="string" pos:line="2823" pos:column="1">"   Curl also supports user and password in HTTP URLs, thus you can pick a file\n"<pos:position pos:line="2823" pos:column="83"/></literal>
<literal type="string" pos:line="2824" pos:column="1">"   like:\n"<pos:position pos:line="2824" pos:column="13"/></literal>
<literal type="string" pos:line="2825" pos:column="1">"\n"<pos:position pos:line="2825" pos:column="5"/></literal>
<literal type="string" pos:line="2826" pos:column="1">"        curl http://name:passwd@machine.domain/full/path/to/file\n"<pos:position pos:line="2826" pos:column="69"/></literal>
<literal type="string" pos:line="2827" pos:column="1">"\n"<pos:position pos:line="2827" pos:column="5"/></literal>
<literal type="string" pos:line="2828" pos:column="1">"   or specify user and password separately like in\n"<pos:position pos:line="2828" pos:column="55"/></literal>
<literal type="string" pos:line="2829" pos:column="1">"\n"<pos:position pos:line="2829" pos:column="5"/></literal>
<literal type="string" pos:line="2830" pos:column="1">"        curl -u name:passwd http://machine.domain/full/path/to/file\n"<pos:position pos:line="2830" pos:column="72"/></literal>
<literal type="string" pos:line="2831" pos:column="1">"\n"<pos:position pos:line="2831" pos:column="5"/></literal>
<literal type="string" pos:line="2832" pos:column="1">"   HTTP offers many different methods of authentication and curl supports\n"<pos:position pos:line="2832" pos:column="78"/></literal>
<literal type="string" pos:line="2833" pos:column="1">"   several: Basic, Digest, NTLM and Negotiate. Without telling which method to\n"<pos:position pos:line="2833" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="2834" pos:column="3">stdout<pos:position pos:line="2834" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2834" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2834" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2835" pos:column="2">fputs<pos:position pos:line="2835" pos:column="7"/></name><argument_list pos:line="2835" pos:column="7">(
<argument><expr><literal type="string" pos:line="2836" pos:column="1">"   use, curl defaults to Basic. You can also ask curl to pick the most secure\n"<pos:position pos:line="2836" pos:column="82"/></literal>
<literal type="string" pos:line="2837" pos:column="1">"   ones out of the ones that the server accepts for the given URL, by using\n"<pos:position pos:line="2837" pos:column="80"/></literal>
<literal type="string" pos:line="2838" pos:column="1">"   --anyauth.\n"<pos:position pos:line="2838" pos:column="18"/></literal>
<literal type="string" pos:line="2839" pos:column="1">"\n"<pos:position pos:line="2839" pos:column="5"/></literal>
<literal type="string" pos:line="2840" pos:column="1">"   NOTE! Since HTTP URLs don't support user and password, you can't use that\n"<pos:position pos:line="2840" pos:column="81"/></literal>
<literal type="string" pos:line="2841" pos:column="1">"   style when using Curl via a proxy. You _must_ use the -u style fetch\n"<pos:position pos:line="2841" pos:column="76"/></literal>
<literal type="string" pos:line="2842" pos:column="1">"   during such circumstances.\n"<pos:position pos:line="2842" pos:column="34"/></literal>
<literal type="string" pos:line="2843" pos:column="1">"\n"<pos:position pos:line="2843" pos:column="5"/></literal>
<literal type="string" pos:line="2844" pos:column="1">" HTTPS\n"<pos:position pos:line="2844" pos:column="11"/></literal>
<literal type="string" pos:line="2845" pos:column="1">"\n"<pos:position pos:line="2845" pos:column="5"/></literal>
<literal type="string" pos:line="2846" pos:column="1">"   Probably most commonly used with private certificates, as explained below.\n"<pos:position pos:line="2846" pos:column="82"/></literal>
<literal type="string" pos:line="2847" pos:column="1">"\n"<pos:position pos:line="2847" pos:column="5"/></literal>
<literal type="string" pos:line="2848" pos:column="1">"PROXY\n"<pos:position pos:line="2848" pos:column="10"/></literal>
<literal type="string" pos:line="2849" pos:column="1">"\n"<pos:position pos:line="2849" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2850" pos:column="3">stdout<pos:position pos:line="2850" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2850" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2850" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2851" pos:column="2">fputs<pos:position pos:line="2851" pos:column="7"/></name><argument_list pos:line="2851" pos:column="7">(
<argument><expr><literal type="string" pos:line="2852" pos:column="1">" curl supports both HTTP and SOCKS proxy servers, with optional authentication.\n"<pos:position pos:line="2852" pos:column="84"/></literal>
<literal type="string" pos:line="2853" pos:column="1">" It does not have special support for FTP proxy servers since there are no\n"<pos:position pos:line="2853" pos:column="79"/></literal>
<literal type="string" pos:line="2854" pos:column="1">" standards for those, but it can still be made to work with many of them. You\n"<pos:position pos:line="2854" pos:column="82"/></literal>
<literal type="string" pos:line="2855" pos:column="1">" can also use both HTTP and SOCKS proxies to transfer files to and from FTP\n"<pos:position pos:line="2855" pos:column="80"/></literal>
<literal type="string" pos:line="2856" pos:column="1">" servers.\n"<pos:position pos:line="2856" pos:column="14"/></literal>
<literal type="string" pos:line="2857" pos:column="1">"\n"<pos:position pos:line="2857" pos:column="5"/></literal>
<literal type="string" pos:line="2858" pos:column="1">" Get an ftp file using an HTTP proxy named my-proxy that uses port 888:\n"<pos:position pos:line="2858" pos:column="76"/></literal>
<literal type="string" pos:line="2859" pos:column="1">"\n"<pos:position pos:line="2859" pos:column="5"/></literal>
<literal type="string" pos:line="2860" pos:column="1">"        curl -x my-proxy:888 ftp://ftp.leachsite.com/README\n"<pos:position pos:line="2860" pos:column="64"/></literal>
<literal type="string" pos:line="2861" pos:column="1">"\n"<pos:position pos:line="2861" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2862" pos:column="3">stdout<pos:position pos:line="2862" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2862" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2862" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2863" pos:column="2">fputs<pos:position pos:line="2863" pos:column="7"/></name><argument_list pos:line="2863" pos:column="7">(
<argument><expr><literal type="string" pos:line="2864" pos:column="1">" Get a file from a HTTP server that requires user and password, using the\n"<pos:position pos:line="2864" pos:column="78"/></literal>
<literal type="string" pos:line="2865" pos:column="1">" same proxy as above:\n"<pos:position pos:line="2865" pos:column="26"/></literal>
<literal type="string" pos:line="2866" pos:column="1">"\n"<pos:position pos:line="2866" pos:column="5"/></literal>
<literal type="string" pos:line="2867" pos:column="1">"        curl -u user:passwd -x my-proxy:888 http://www.get.this/\n"<pos:position pos:line="2867" pos:column="69"/></literal>
<literal type="string" pos:line="2868" pos:column="1">"\n"<pos:position pos:line="2868" pos:column="5"/></literal>
<literal type="string" pos:line="2869" pos:column="1">" Some proxies require special authentication. Specify by using -U as above:\n"<pos:position pos:line="2869" pos:column="80"/></literal>
<literal type="string" pos:line="2870" pos:column="1">"\n"<pos:position pos:line="2870" pos:column="5"/></literal>
<literal type="string" pos:line="2871" pos:column="1">"        curl -U user:passwd -x my-proxy:888 http://www.get.this/\n"<pos:position pos:line="2871" pos:column="69"/></literal>
<literal type="string" pos:line="2872" pos:column="1">"\n"<pos:position pos:line="2872" pos:column="5"/></literal>
<literal type="string" pos:line="2873" pos:column="1">" A comma-separated list of hosts and domains which do not use the proxy can\n"<pos:position pos:line="2873" pos:column="80"/></literal>
<literal type="string" pos:line="2874" pos:column="1">" be specified as:\n"<pos:position pos:line="2874" pos:column="22"/></literal>
<literal type="string" pos:line="2875" pos:column="1">"\n"<pos:position pos:line="2875" pos:column="5"/></literal>
<literal type="string" pos:line="2876" pos:column="1">"        curl --noproxy localhost,get.this -x my-proxy:888 http://www.get.this/\n"<pos:position pos:line="2876" pos:column="83"/></literal>
<literal type="string" pos:line="2877" pos:column="1">"\n"<pos:position pos:line="2877" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2878" pos:column="3">stdout<pos:position pos:line="2878" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2878" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2878" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2879" pos:column="2">fputs<pos:position pos:line="2879" pos:column="7"/></name><argument_list pos:line="2879" pos:column="7">(
<argument><expr><literal type="string" pos:line="2880" pos:column="1">" If the proxy is specified with --proxy1.0 instead of --proxy or -x, then\n"<pos:position pos:line="2880" pos:column="78"/></literal>
<literal type="string" pos:line="2881" pos:column="1">" curl will use HTTP/1.0 instead of HTTP/1.1 for any CONNECT attempts.\n"<pos:position pos:line="2881" pos:column="74"/></literal>
<literal type="string" pos:line="2882" pos:column="1">"\n"<pos:position pos:line="2882" pos:column="5"/></literal>
<literal type="string" pos:line="2883" pos:column="1">" curl also supports SOCKS4 and SOCKS5 proxies with --socks4 and --socks5.\n"<pos:position pos:line="2883" pos:column="78"/></literal>
<literal type="string" pos:line="2884" pos:column="1">"\n"<pos:position pos:line="2884" pos:column="5"/></literal>
<literal type="string" pos:line="2885" pos:column="1">" See also the environment variables Curl supports that offer further proxy\n"<pos:position pos:line="2885" pos:column="79"/></literal>
<literal type="string" pos:line="2886" pos:column="1">" control.\n"<pos:position pos:line="2886" pos:column="14"/></literal>
<literal type="string" pos:line="2887" pos:column="1">"\n"<pos:position pos:line="2887" pos:column="5"/></literal>
<literal type="string" pos:line="2888" pos:column="1">" Most FTP proxy servers are set up to appear as a normal FTP server from the\n"<pos:position pos:line="2888" pos:column="81"/></literal>
<literal type="string" pos:line="2889" pos:column="1">" client's perspective, with special commands to select the remote FTP server.\n"<pos:position pos:line="2889" pos:column="82"/></literal></expr></argument>
, <argument><expr><name pos:line="2890" pos:column="3">stdout<pos:position pos:line="2890" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2890" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2890" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2891" pos:column="2">fputs<pos:position pos:line="2891" pos:column="7"/></name><argument_list pos:line="2891" pos:column="7">(
<argument><expr><literal type="string" pos:line="2892" pos:column="1">" curl supports the -u, -Q and --ftp-account options that can be used to\n"<pos:position pos:line="2892" pos:column="76"/></literal>
<literal type="string" pos:line="2893" pos:column="1">" set up transfers through many FTP proxies. For example, a file can be\n"<pos:position pos:line="2893" pos:column="75"/></literal>
<literal type="string" pos:line="2894" pos:column="1">" uploaded to a remote FTP server using a Blue Coat FTP proxy with the\n"<pos:position pos:line="2894" pos:column="74"/></literal>
<literal type="string" pos:line="2895" pos:column="1">" options:\n"<pos:position pos:line="2895" pos:column="14"/></literal>
<literal type="string" pos:line="2896" pos:column="1">"\n"<pos:position pos:line="2896" pos:column="5"/></literal>
<literal type="string" pos:line="2897" pos:column="1">"   curl -u \"Remote-FTP-Username@remote.ftp.server Proxy-Username:Remote-Pass\" \\\n"<pos:position pos:line="2897" pos:column="87"/></literal>
<literal type="string" pos:line="2898" pos:column="1">"    --ftp-account Proxy-Password --upload-file local-file \\\n"<pos:position pos:line="2898" pos:column="65"/></literal>
<literal type="string" pos:line="2899" pos:column="1">"    ftp://my-ftp.proxy.server:21/remote/upload/path/\n"<pos:position pos:line="2899" pos:column="57"/></literal>
<literal type="string" pos:line="2900" pos:column="1">"\n"<pos:position pos:line="2900" pos:column="5"/></literal>
<literal type="string" pos:line="2901" pos:column="1">" See the manual for your FTP proxy to determine the form it expects to set up\n"<pos:position pos:line="2901" pos:column="82"/></literal></expr></argument>
, <argument><expr><name pos:line="2902" pos:column="3">stdout<pos:position pos:line="2902" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2902" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2902" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2903" pos:column="2">fputs<pos:position pos:line="2903" pos:column="7"/></name><argument_list pos:line="2903" pos:column="7">(
<argument><expr><literal type="string" pos:line="2904" pos:column="1">" transfers, and curl's -v option to see exactly what curl is sending.\n"<pos:position pos:line="2904" pos:column="74"/></literal>
<literal type="string" pos:line="2905" pos:column="1">"\n"<pos:position pos:line="2905" pos:column="5"/></literal>
<literal type="string" pos:line="2906" pos:column="1">"RANGES\n"<pos:position pos:line="2906" pos:column="11"/></literal>
<literal type="string" pos:line="2907" pos:column="1">"\n"<pos:position pos:line="2907" pos:column="5"/></literal>
<literal type="string" pos:line="2908" pos:column="1">"  With HTTP 1.1 byte-ranges were introduced. Using this, a client can request\n"<pos:position pos:line="2908" pos:column="82"/></literal>
<literal type="string" pos:line="2909" pos:column="1">"  to get only one or more subparts of a specified document. Curl supports\n"<pos:position pos:line="2909" pos:column="78"/></literal>
<literal type="string" pos:line="2910" pos:column="1">"  this with the -r flag.\n"<pos:position pos:line="2910" pos:column="29"/></literal>
<literal type="string" pos:line="2911" pos:column="1">"\n"<pos:position pos:line="2911" pos:column="5"/></literal>
<literal type="string" pos:line="2912" pos:column="1">"  Get the first 100 bytes of a document:\n"<pos:position pos:line="2912" pos:column="45"/></literal>
<literal type="string" pos:line="2913" pos:column="1">"\n"<pos:position pos:line="2913" pos:column="5"/></literal>
<literal type="string" pos:line="2914" pos:column="1">"        curl -r 0-99 http://www.get.this/\n"<pos:position pos:line="2914" pos:column="46"/></literal>
<literal type="string" pos:line="2915" pos:column="1">"\n"<pos:position pos:line="2915" pos:column="5"/></literal>
<literal type="string" pos:line="2916" pos:column="1">"  Get the last 500 bytes of a document:\n"<pos:position pos:line="2916" pos:column="44"/></literal>
<literal type="string" pos:line="2917" pos:column="1">"\n"<pos:position pos:line="2917" pos:column="5"/></literal>
<literal type="string" pos:line="2918" pos:column="1">"        curl -r -500 http://www.get.this/\n"<pos:position pos:line="2918" pos:column="46"/></literal>
<literal type="string" pos:line="2919" pos:column="1">"\n"<pos:position pos:line="2919" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2920" pos:column="3">stdout<pos:position pos:line="2920" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2920" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2920" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2921" pos:column="2">fputs<pos:position pos:line="2921" pos:column="7"/></name><argument_list pos:line="2921" pos:column="7">(
<argument><expr><literal type="string" pos:line="2922" pos:column="1">"  Curl also supports simple ranges for FTP files as well. Then you can only\n"<pos:position pos:line="2922" pos:column="80"/></literal>
<literal type="string" pos:line="2923" pos:column="1">"  specify start and stop position.\n"<pos:position pos:line="2923" pos:column="39"/></literal>
<literal type="string" pos:line="2924" pos:column="1">"\n"<pos:position pos:line="2924" pos:column="5"/></literal>
<literal type="string" pos:line="2925" pos:column="1">"  Get the first 100 bytes of a document using FTP:\n"<pos:position pos:line="2925" pos:column="55"/></literal>
<literal type="string" pos:line="2926" pos:column="1">"\n"<pos:position pos:line="2926" pos:column="5"/></literal>
<literal type="string" pos:line="2927" pos:column="1">"        curl -r 0-99 ftp://www.get.this/README\n"<pos:position pos:line="2927" pos:column="51"/></literal>
<literal type="string" pos:line="2928" pos:column="1">"\n"<pos:position pos:line="2928" pos:column="5"/></literal>
<literal type="string" pos:line="2929" pos:column="1">"UPLOADING\n"<pos:position pos:line="2929" pos:column="14"/></literal>
<literal type="string" pos:line="2930" pos:column="1">"\n"<pos:position pos:line="2930" pos:column="5"/></literal>
<literal type="string" pos:line="2931" pos:column="1">" FTP / FTPS / SFTP / SCP\n"<pos:position pos:line="2931" pos:column="29"/></literal>
<literal type="string" pos:line="2932" pos:column="1">"\n"<pos:position pos:line="2932" pos:column="5"/></literal>
<literal type="string" pos:line="2933" pos:column="1">"  Upload all data on stdin to a specified server:\n"<pos:position pos:line="2933" pos:column="54"/></literal>
<literal type="string" pos:line="2934" pos:column="1">"\n"<pos:position pos:line="2934" pos:column="5"/></literal>
<literal type="string" pos:line="2935" pos:column="1">"        curl -T - ftp://ftp.upload.com/myfile\n"<pos:position pos:line="2935" pos:column="50"/></literal>
<literal type="string" pos:line="2936" pos:column="1">"\n"<pos:position pos:line="2936" pos:column="5"/></literal>
<literal type="string" pos:line="2937" pos:column="1">"  Upload data from a specified file, login with user and password:\n"<pos:position pos:line="2937" pos:column="71"/></literal>
<literal type="string" pos:line="2938" pos:column="1">"\n"<pos:position pos:line="2938" pos:column="5"/></literal>
<literal type="string" pos:line="2939" pos:column="1">"        curl -T uploadfile -u user:passwd ftp://ftp.upload.com/myfile\n"<pos:position pos:line="2939" pos:column="74"/></literal>
<literal type="string" pos:line="2940" pos:column="1">"\n"<pos:position pos:line="2940" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2941" pos:column="3">stdout<pos:position pos:line="2941" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2941" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2941" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2942" pos:column="2">fputs<pos:position pos:line="2942" pos:column="7"/></name><argument_list pos:line="2942" pos:column="7">(
<argument><expr><literal type="string" pos:line="2943" pos:column="1">"  Upload a local file to the remote site, and use the local file name remote\n"<pos:position pos:line="2943" pos:column="81"/></literal>
<literal type="string" pos:line="2944" pos:column="1">"  too:\n"<pos:position pos:line="2944" pos:column="11"/></literal>
<literal type="string" pos:line="2945" pos:column="1">"\n"<pos:position pos:line="2945" pos:column="5"/></literal>
<literal type="string" pos:line="2946" pos:column="1">"        curl -T uploadfile -u user:passwd ftp://ftp.upload.com/\n"<pos:position pos:line="2946" pos:column="68"/></literal>
<literal type="string" pos:line="2947" pos:column="1">"\n"<pos:position pos:line="2947" pos:column="5"/></literal>
<literal type="string" pos:line="2948" pos:column="1">"  Upload a local file to get appended to the remote file:\n"<pos:position pos:line="2948" pos:column="62"/></literal>
<literal type="string" pos:line="2949" pos:column="1">"\n"<pos:position pos:line="2949" pos:column="5"/></literal>
<literal type="string" pos:line="2950" pos:column="1">"        curl -T localfile -a ftp://ftp.upload.com/remotefile\n"<pos:position pos:line="2950" pos:column="65"/></literal>
<literal type="string" pos:line="2951" pos:column="1">"\n"<pos:position pos:line="2951" pos:column="5"/></literal>
<literal type="string" pos:line="2952" pos:column="1">"  Curl also supports ftp upload through a proxy, but only if the proxy is\n"<pos:position pos:line="2952" pos:column="78"/></literal>
<literal type="string" pos:line="2953" pos:column="1">"  configured to allow that kind of tunneling. If it does, you can run curl in\n"<pos:position pos:line="2953" pos:column="82"/></literal>
<literal type="string" pos:line="2954" pos:column="1">"  a fashion similar to:\n"<pos:position pos:line="2954" pos:column="28"/></literal>
<literal type="string" pos:line="2955" pos:column="1">"\n"<pos:position pos:line="2955" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2956" pos:column="3">stdout<pos:position pos:line="2956" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2956" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2956" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2957" pos:column="2">fputs<pos:position pos:line="2957" pos:column="7"/></name><argument_list pos:line="2957" pos:column="7">(
<argument><expr><literal type="string" pos:line="2958" pos:column="1">"        curl --proxytunnel -x proxy:port -T localfile ftp.upload.com\n"<pos:position pos:line="2958" pos:column="73"/></literal>
<literal type="string" pos:line="2959" pos:column="1">"\n"<pos:position pos:line="2959" pos:column="5"/></literal>
<literal type="string" pos:line="2960" pos:column="1">" HTTP\n"<pos:position pos:line="2960" pos:column="10"/></literal>
<literal type="string" pos:line="2961" pos:column="1">"\n"<pos:position pos:line="2961" pos:column="5"/></literal>
<literal type="string" pos:line="2962" pos:column="1">"  Upload all data on stdin to a specified http site:\n"<pos:position pos:line="2962" pos:column="57"/></literal>
<literal type="string" pos:line="2963" pos:column="1">"\n"<pos:position pos:line="2963" pos:column="5"/></literal>
<literal type="string" pos:line="2964" pos:column="1">"        curl -T - http://www.upload.com/myfile\n"<pos:position pos:line="2964" pos:column="51"/></literal>
<literal type="string" pos:line="2965" pos:column="1">"\n"<pos:position pos:line="2965" pos:column="5"/></literal>
<literal type="string" pos:line="2966" pos:column="1">"  Note that the http server must have been configured to accept PUT before\n"<pos:position pos:line="2966" pos:column="79"/></literal>
<literal type="string" pos:line="2967" pos:column="1">"  this can be done successfully.\n"<pos:position pos:line="2967" pos:column="37"/></literal>
<literal type="string" pos:line="2968" pos:column="1">"\n"<pos:position pos:line="2968" pos:column="5"/></literal>
<literal type="string" pos:line="2969" pos:column="1">"  For other ways to do http data upload, see the POST section below.\n"<pos:position pos:line="2969" pos:column="73"/></literal>
<literal type="string" pos:line="2970" pos:column="1">"\n"<pos:position pos:line="2970" pos:column="5"/></literal>
<literal type="string" pos:line="2971" pos:column="1">"VERBOSE / DEBUG\n"<pos:position pos:line="2971" pos:column="20"/></literal>
<literal type="string" pos:line="2972" pos:column="1">"\n"<pos:position pos:line="2972" pos:column="5"/></literal>
<literal type="string" pos:line="2973" pos:column="1">"  If curl fails where it isn't supposed to, if the servers don't let you in,\n"<pos:position pos:line="2973" pos:column="81"/></literal></expr></argument>
, <argument><expr><name pos:line="2974" pos:column="3">stdout<pos:position pos:line="2974" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2974" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2974" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2975" pos:column="2">fputs<pos:position pos:line="2975" pos:column="7"/></name><argument_list pos:line="2975" pos:column="7">(
<argument><expr><literal type="string" pos:line="2976" pos:column="1">"  if you can't understand the responses: use the -v flag to get verbose\n"<pos:position pos:line="2976" pos:column="76"/></literal>
<literal type="string" pos:line="2977" pos:column="1">"  fetching. Curl will output lots of info and what it sends and receives in\n"<pos:position pos:line="2977" pos:column="80"/></literal>
<literal type="string" pos:line="2978" pos:column="1">"  order to let the user see all client-server interaction (but it won't show\n"<pos:position pos:line="2978" pos:column="81"/></literal>
<literal type="string" pos:line="2979" pos:column="1">"  you the actual data).\n"<pos:position pos:line="2979" pos:column="28"/></literal>
<literal type="string" pos:line="2980" pos:column="1">"\n"<pos:position pos:line="2980" pos:column="5"/></literal>
<literal type="string" pos:line="2981" pos:column="1">"        curl -v ftp://ftp.upload.com/\n"<pos:position pos:line="2981" pos:column="42"/></literal>
<literal type="string" pos:line="2982" pos:column="1">"\n"<pos:position pos:line="2982" pos:column="5"/></literal>
<literal type="string" pos:line="2983" pos:column="1">"  To get even more details and information on what curl does, try using the\n"<pos:position pos:line="2983" pos:column="80"/></literal>
<literal type="string" pos:line="2984" pos:column="1">"  --trace or --trace-ascii options with a given file name to log to, like\n"<pos:position pos:line="2984" pos:column="78"/></literal>
<literal type="string" pos:line="2985" pos:column="1">"  this:\n"<pos:position pos:line="2985" pos:column="12"/></literal>
<literal type="string" pos:line="2986" pos:column="1">"\n"<pos:position pos:line="2986" pos:column="5"/></literal>
<literal type="string" pos:line="2987" pos:column="1">"        curl --trace trace.txt www.haxx.se\n"<pos:position pos:line="2987" pos:column="47"/></literal>
<literal type="string" pos:line="2988" pos:column="1">"\n"<pos:position pos:line="2988" pos:column="5"/></literal>
<literal type="string" pos:line="2989" pos:column="1">"\n"<pos:position pos:line="2989" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="2990" pos:column="3">stdout<pos:position pos:line="2990" pos:column="9"/></name></expr></argument>)<pos:position pos:line="2990" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="2990" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="2991" pos:column="2">fputs<pos:position pos:line="2991" pos:column="7"/></name><argument_list pos:line="2991" pos:column="7">(
<argument><expr><literal type="string" pos:line="2992" pos:column="1">"DETAILED INFORMATION\n"<pos:position pos:line="2992" pos:column="25"/></literal>
<literal type="string" pos:line="2993" pos:column="1">"\n"<pos:position pos:line="2993" pos:column="5"/></literal>
<literal type="string" pos:line="2994" pos:column="1">"  Different protocols provide different ways of getting detailed information\n"<pos:position pos:line="2994" pos:column="81"/></literal>
<literal type="string" pos:line="2995" pos:column="1">"  about specific files/documents. To get curl to show detailed information\n"<pos:position pos:line="2995" pos:column="79"/></literal>
<literal type="string" pos:line="2996" pos:column="1">"  about a single file, you should use -I/--head option. It displays all\n"<pos:position pos:line="2996" pos:column="76"/></literal>
<literal type="string" pos:line="2997" pos:column="1">"  available info on a single file for HTTP and FTP. The HTTP information is a\n"<pos:position pos:line="2997" pos:column="82"/></literal>
<literal type="string" pos:line="2998" pos:column="1">"  lot more extensive.\n"<pos:position pos:line="2998" pos:column="26"/></literal>
<literal type="string" pos:line="2999" pos:column="1">"\n"<pos:position pos:line="2999" pos:column="5"/></literal>
<literal type="string" pos:line="3000" pos:column="1">"  For HTTP, you can get the header information (the same as -I would show)\n"<pos:position pos:line="3000" pos:column="79"/></literal>
<literal type="string" pos:line="3001" pos:column="1">"  shown before the data by using -i/--include. Curl understands the\n"<pos:position pos:line="3001" pos:column="72"/></literal></expr></argument>
, <argument><expr><name pos:line="3002" pos:column="3">stdout<pos:position pos:line="3002" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3002" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3002" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3003" pos:column="2">fputs<pos:position pos:line="3003" pos:column="7"/></name><argument_list pos:line="3003" pos:column="7">(
<argument><expr><literal type="string" pos:line="3004" pos:column="1">"  -D/--dump-header option when getting files from both FTP and HTTP, and it\n"<pos:position pos:line="3004" pos:column="80"/></literal>
<literal type="string" pos:line="3005" pos:column="1">"  will then store the headers in the specified file.\n"<pos:position pos:line="3005" pos:column="57"/></literal>
<literal type="string" pos:line="3006" pos:column="1">"\n"<pos:position pos:line="3006" pos:column="5"/></literal>
<literal type="string" pos:line="3007" pos:column="1">"  Store the HTTP headers in a separate file (headers.txt in the example):\n"<pos:position pos:line="3007" pos:column="78"/></literal>
<literal type="string" pos:line="3008" pos:column="1">"\n"<pos:position pos:line="3008" pos:column="5"/></literal>
<literal type="string" pos:line="3009" pos:column="1">"        curl --dump-header headers.txt curl.haxx.se\n"<pos:position pos:line="3009" pos:column="56"/></literal>
<literal type="string" pos:line="3010" pos:column="1">"\n"<pos:position pos:line="3010" pos:column="5"/></literal>
<literal type="string" pos:line="3011" pos:column="1">"  Note that headers stored in a separate file can be very useful at a later\n"<pos:position pos:line="3011" pos:column="80"/></literal>
<literal type="string" pos:line="3012" pos:column="1">"  time if you want curl to use cookies sent by the server. More about that in\n"<pos:position pos:line="3012" pos:column="82"/></literal>
<literal type="string" pos:line="3013" pos:column="1">"  the cookies section.\n"<pos:position pos:line="3013" pos:column="27"/></literal>
<literal type="string" pos:line="3014" pos:column="1">"\n"<pos:position pos:line="3014" pos:column="5"/></literal>
<literal type="string" pos:line="3015" pos:column="1">"POST (HTTP)\n"<pos:position pos:line="3015" pos:column="16"/></literal>
<literal type="string" pos:line="3016" pos:column="1">"\n"<pos:position pos:line="3016" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3017" pos:column="3">stdout<pos:position pos:line="3017" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3017" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3017" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3018" pos:column="2">fputs<pos:position pos:line="3018" pos:column="7"/></name><argument_list pos:line="3018" pos:column="7">(
<argument><expr><literal type="string" pos:line="3019" pos:column="1">"  It's easy to post data using curl. This is done using the -d &lt;data&gt;\n"<pos:position pos:line="3019" pos:column="80"/></literal>
<literal type="string" pos:line="3020" pos:column="1">"  option.  The post data must be urlencoded.\n"<pos:position pos:line="3020" pos:column="49"/></literal>
<literal type="string" pos:line="3021" pos:column="1">"\n"<pos:position pos:line="3021" pos:column="5"/></literal>
<literal type="string" pos:line="3022" pos:column="1">"  Post a simple \"name\" and \"phone\" guestbook.\n"<pos:position pos:line="3022" pos:column="54"/></literal>
<literal type="string" pos:line="3023" pos:column="1">"\n"<pos:position pos:line="3023" pos:column="5"/></literal>
<literal type="string" pos:line="3024" pos:column="1">"        curl -d \"name=Rafael%20Sagula&amp;phone=3320780\" \\\n"<pos:position pos:line="3024" pos:column="66"/></literal>
<literal type="string" pos:line="3025" pos:column="1">"                http://www.where.com/guest.cgi\n"<pos:position pos:line="3025" pos:column="51"/></literal>
<literal type="string" pos:line="3026" pos:column="1">"\n"<pos:position pos:line="3026" pos:column="5"/></literal>
<literal type="string" pos:line="3027" pos:column="1">"  How to post a form with curl, lesson #1:\n"<pos:position pos:line="3027" pos:column="47"/></literal>
<literal type="string" pos:line="3028" pos:column="1">"\n"<pos:position pos:line="3028" pos:column="5"/></literal>
<literal type="string" pos:line="3029" pos:column="1">"  Dig out all the &lt;input&gt; tags in the form that you want to fill in. (There's\n"<pos:position pos:line="3029" pos:column="88"/></literal>
<literal type="string" pos:line="3030" pos:column="1">"  a perl program called formfind.pl on the curl site that helps with this).\n"<pos:position pos:line="3030" pos:column="80"/></literal>
<literal type="string" pos:line="3031" pos:column="1">"\n"<pos:position pos:line="3031" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3032" pos:column="3">stdout<pos:position pos:line="3032" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3032" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3032" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3033" pos:column="2">fputs<pos:position pos:line="3033" pos:column="7"/></name><argument_list pos:line="3033" pos:column="7">(
<argument><expr><literal type="string" pos:line="3034" pos:column="1">"  If there's a \"normal\" post, you use -d to post. -d takes a full \"post\n"<pos:position pos:line="3034" pos:column="79"/></literal>
<literal type="string" pos:line="3035" pos:column="1">"  string\", which is in the format\n"<pos:position pos:line="3035" pos:column="39"/></literal>
<literal type="string" pos:line="3036" pos:column="1">"\n"<pos:position pos:line="3036" pos:column="5"/></literal>
<literal type="string" pos:line="3037" pos:column="1">"        &lt;variable1&gt;=&lt;data1&gt;&amp;&lt;variable2&gt;=&lt;data2&gt;&amp;...\n"<pos:position pos:line="3037" pos:column="88"/></literal>
<literal type="string" pos:line="3038" pos:column="1">"\n"<pos:position pos:line="3038" pos:column="5"/></literal>
<literal type="string" pos:line="3039" pos:column="1">"  The 'variable' names are the names set with \"name=\" in the &lt;input&gt; tags, and\n"<pos:position pos:line="3039" pos:column="91"/></literal>
<literal type="string" pos:line="3040" pos:column="1">"  the data is the contents you want to fill in for the inputs. The data *must*\n"<pos:position pos:line="3040" pos:column="83"/></literal>
<literal type="string" pos:line="3041" pos:column="1">"  be properly URL encoded. That means you replace space with + and that you\n"<pos:position pos:line="3041" pos:column="80"/></literal>
<literal type="string" pos:line="3042" pos:column="1">"  write weird letters with %XX where XX is the hexadecimal representation of\n"<pos:position pos:line="3042" pos:column="81"/></literal></expr></argument>
, <argument><expr><name pos:line="3043" pos:column="3">stdout<pos:position pos:line="3043" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3043" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3043" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3044" pos:column="2">fputs<pos:position pos:line="3044" pos:column="7"/></name><argument_list pos:line="3044" pos:column="7">(
<argument><expr><literal type="string" pos:line="3045" pos:column="1">"  the letter's ASCII code.\n"<pos:position pos:line="3045" pos:column="31"/></literal>
<literal type="string" pos:line="3046" pos:column="1">"\n"<pos:position pos:line="3046" pos:column="5"/></literal>
<literal type="string" pos:line="3047" pos:column="1">"  Example:\n"<pos:position pos:line="3047" pos:column="15"/></literal>
<literal type="string" pos:line="3048" pos:column="1">"\n"<pos:position pos:line="3048" pos:column="5"/></literal>
<literal type="string" pos:line="3049" pos:column="1">"  (page located at http://www.formpost.com/getthis/\n"<pos:position pos:line="3049" pos:column="56"/></literal>
<literal type="string" pos:line="3050" pos:column="1">"\n"<pos:position pos:line="3050" pos:column="5"/></literal>
<literal type="string" pos:line="3051" pos:column="1">"        &lt;form action=\"post.cgi\" method=\"post\"&gt;\n"<pos:position pos:line="3051" pos:column="61"/></literal>
<literal type="string" pos:line="3052" pos:column="1">"        &lt;input name=user size=10&gt;\n"<pos:position pos:line="3052" pos:column="44"/></literal>
<literal type="string" pos:line="3053" pos:column="1">"        &lt;input name=pass type=password size=10&gt;\n"<pos:position pos:line="3053" pos:column="58"/></literal>
<literal type="string" pos:line="3054" pos:column="1">"        &lt;input name=id type=hidden value=\"blablabla\"&gt;\n"<pos:position pos:line="3054" pos:column="66"/></literal>
<literal type="string" pos:line="3055" pos:column="1">"        &lt;input name=ding value=\"submit\"&gt;\n"<pos:position pos:line="3055" pos:column="53"/></literal>
<literal type="string" pos:line="3056" pos:column="1">"        &lt;/form&gt;\n"<pos:position pos:line="3056" pos:column="26"/></literal>
<literal type="string" pos:line="3057" pos:column="1">"\n"<pos:position pos:line="3057" pos:column="5"/></literal>
<literal type="string" pos:line="3058" pos:column="1">"  We want to enter user 'foobar' with password '12345'.\n"<pos:position pos:line="3058" pos:column="60"/></literal>
<literal type="string" pos:line="3059" pos:column="1">"\n"<pos:position pos:line="3059" pos:column="5"/></literal>
<literal type="string" pos:line="3060" pos:column="1">"  To post to this, you enter a curl command line like:\n"<pos:position pos:line="3060" pos:column="59"/></literal>
<literal type="string" pos:line="3061" pos:column="1">"\n"<pos:position pos:line="3061" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3062" pos:column="3">stdout<pos:position pos:line="3062" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3062" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3062" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3063" pos:column="2">fputs<pos:position pos:line="3063" pos:column="7"/></name><argument_list pos:line="3063" pos:column="7">(
<argument><expr><literal type="string" pos:line="3064" pos:column="1">"        curl -d \"user=foobar&amp;pass=12345&amp;id=blablabla&amp;ding=submit\"  (continues)\n"<pos:position pos:line="3064" pos:column="97"/></literal>
<literal type="string" pos:line="3065" pos:column="1">"          http://www.formpost.com/getthis/post.cgi\n"<pos:position pos:line="3065" pos:column="55"/></literal>
<literal type="string" pos:line="3066" pos:column="1">"\n"<pos:position pos:line="3066" pos:column="5"/></literal>
<literal type="string" pos:line="3067" pos:column="1">"\n"<pos:position pos:line="3067" pos:column="5"/></literal>
<literal type="string" pos:line="3068" pos:column="1">"  While -d uses the application/x-www-form-urlencoded mime-type, generally\n"<pos:position pos:line="3068" pos:column="79"/></literal>
<literal type="string" pos:line="3069" pos:column="1">"  understood by CGI's and similar, curl also supports the more capable\n"<pos:position pos:line="3069" pos:column="75"/></literal>
<literal type="string" pos:line="3070" pos:column="1">"  multipart/form-data type. This latter type supports things like file upload.\n"<pos:position pos:line="3070" pos:column="83"/></literal>
<literal type="string" pos:line="3071" pos:column="1">"\n"<pos:position pos:line="3071" pos:column="5"/></literal>
<literal type="string" pos:line="3072" pos:column="1">"  -F accepts parameters like -F \"name=contents\". If you want the contents to\n"<pos:position pos:line="3072" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="3073" pos:column="3">stdout<pos:position pos:line="3073" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3073" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3073" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3074" pos:column="2">fputs<pos:position pos:line="3074" pos:column="7"/></name><argument_list pos:line="3074" pos:column="7">(
<argument><expr><literal type="string" pos:line="3075" pos:column="1">"  be read from a file, use &lt;@filename&gt; as contents. When specifying a file,\n"<pos:position pos:line="3075" pos:column="86"/></literal>
<literal type="string" pos:line="3076" pos:column="1">"  you can also specify the file content type by appending ';type=&lt;mime type&gt;'\n"<pos:position pos:line="3076" pos:column="88"/></literal>
<literal type="string" pos:line="3077" pos:column="1">"  to the file name. You can also post the contents of several files in one\n"<pos:position pos:line="3077" pos:column="79"/></literal>
<literal type="string" pos:line="3078" pos:column="1">"  field.  For example, the field name 'coolfiles' is used to send three files,\n"<pos:position pos:line="3078" pos:column="83"/></literal>
<literal type="string" pos:line="3079" pos:column="1">"  with different content types using the following syntax:\n"<pos:position pos:line="3079" pos:column="63"/></literal>
<literal type="string" pos:line="3080" pos:column="1">"\n"<pos:position pos:line="3080" pos:column="5"/></literal>
<literal type="string" pos:line="3081" pos:column="1">"        curl -F \"coolfiles=@fil1.gif;type=image/gif,fil2.txt,fil3.html\" \\\n"<pos:position pos:line="3081" pos:column="81"/></literal>
<literal type="string" pos:line="3082" pos:column="1">"        http://www.post.com/postit.cgi\n"<pos:position pos:line="3082" pos:column="43"/></literal>
<literal type="string" pos:line="3083" pos:column="1">"\n"<pos:position pos:line="3083" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3084" pos:column="3">stdout<pos:position pos:line="3084" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3084" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3084" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3085" pos:column="2">fputs<pos:position pos:line="3085" pos:column="7"/></name><argument_list pos:line="3085" pos:column="7">(
<argument><expr><literal type="string" pos:line="3086" pos:column="1">"  If the content-type is not specified, curl will try to guess from the file\n"<pos:position pos:line="3086" pos:column="81"/></literal>
<literal type="string" pos:line="3087" pos:column="1">"  extension (it only knows a few), or use the previously specified type (from\n"<pos:position pos:line="3087" pos:column="82"/></literal>
<literal type="string" pos:line="3088" pos:column="1">"  an earlier file if several files are specified in a list) or else it will\n"<pos:position pos:line="3088" pos:column="80"/></literal>
<literal type="string" pos:line="3089" pos:column="1">"  use the default type 'application/octet-stream'.\n"<pos:position pos:line="3089" pos:column="55"/></literal>
<literal type="string" pos:line="3090" pos:column="1">"\n"<pos:position pos:line="3090" pos:column="5"/></literal>
<literal type="string" pos:line="3091" pos:column="1">"  Emulate a fill-in form with -F. Let's say you fill in three fields in a\n"<pos:position pos:line="3091" pos:column="78"/></literal>
<literal type="string" pos:line="3092" pos:column="1">"  form. One field is a file name which to post, one field is your name and one\n"<pos:position pos:line="3092" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="3093" pos:column="3">stdout<pos:position pos:line="3093" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3093" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3093" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3094" pos:column="2">fputs<pos:position pos:line="3094" pos:column="7"/></name><argument_list pos:line="3094" pos:column="7">(
<argument><expr><literal type="string" pos:line="3095" pos:column="1">"  field is a file description. We want to post the file we have written named\n"<pos:position pos:line="3095" pos:column="82"/></literal>
<literal type="string" pos:line="3096" pos:column="1">"  \"cooltext.txt\". To let curl do the posting of this data instead of your\n"<pos:position pos:line="3096" pos:column="80"/></literal>
<literal type="string" pos:line="3097" pos:column="1">"  favourite browser, you have to read the HTML source of the form page and\n"<pos:position pos:line="3097" pos:column="79"/></literal>
<literal type="string" pos:line="3098" pos:column="1">"  find the names of the input fields. In our example, the input field names\n"<pos:position pos:line="3098" pos:column="80"/></literal>
<literal type="string" pos:line="3099" pos:column="1">"  are 'file', 'yourname' and 'filedescription'.\n"<pos:position pos:line="3099" pos:column="52"/></literal>
<literal type="string" pos:line="3100" pos:column="1">"\n"<pos:position pos:line="3100" pos:column="5"/></literal>
<literal type="string" pos:line="3101" pos:column="1">"        curl -F \"file=@cooltext.txt\" -F \"yourname=Daniel\" \\\n"<pos:position pos:line="3101" pos:column="69"/></literal>
<literal type="string" pos:line="3102" pos:column="1">"             -F \"filedescription=Cool text file with cool text inside\" \\\n"<pos:position pos:line="3102" pos:column="80"/></literal></expr></argument>
, <argument><expr><name pos:line="3103" pos:column="3">stdout<pos:position pos:line="3103" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3103" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3103" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3104" pos:column="2">fputs<pos:position pos:line="3104" pos:column="7"/></name><argument_list pos:line="3104" pos:column="7">(
<argument><expr><literal type="string" pos:line="3105" pos:column="1">"             http://www.post.com/postit.cgi\n"<pos:position pos:line="3105" pos:column="48"/></literal>
<literal type="string" pos:line="3106" pos:column="1">"\n"<pos:position pos:line="3106" pos:column="5"/></literal>
<literal type="string" pos:line="3107" pos:column="1">"  To send two files in one post you can do it in two ways:\n"<pos:position pos:line="3107" pos:column="63"/></literal>
<literal type="string" pos:line="3108" pos:column="1">"\n"<pos:position pos:line="3108" pos:column="5"/></literal>
<literal type="string" pos:line="3109" pos:column="1">"  1. Send multiple files in a single \"field\" with a single field name:\n"<pos:position pos:line="3109" pos:column="77"/></literal>
<literal type="string" pos:line="3110" pos:column="1">"\n"<pos:position pos:line="3110" pos:column="5"/></literal>
<literal type="string" pos:line="3111" pos:column="1">"        curl -F \"pictures=@dog.gif,cat.gif\"\n"<pos:position pos:line="3111" pos:column="50"/></literal>
<literal type="string" pos:line="3112" pos:column="1">"\n"<pos:position pos:line="3112" pos:column="5"/></literal>
<literal type="string" pos:line="3113" pos:column="1">"  2. Send two fields with two field names:\n"<pos:position pos:line="3113" pos:column="47"/></literal>
<literal type="string" pos:line="3114" pos:column="1">"\n"<pos:position pos:line="3114" pos:column="5"/></literal>
<literal type="string" pos:line="3115" pos:column="1">"        curl -F \"docpicture=@dog.gif\" -F \"catpicture=@cat.gif\"\n"<pos:position pos:line="3115" pos:column="71"/></literal>
<literal type="string" pos:line="3116" pos:column="1">"\n"<pos:position pos:line="3116" pos:column="5"/></literal>
<literal type="string" pos:line="3117" pos:column="1">"  To send a field value literally without interpreting a leading '@'\n"<pos:position pos:line="3117" pos:column="73"/></literal>
<literal type="string" pos:line="3118" pos:column="1">"  or '&lt;', or an embedded ';type=', use --form-string instead of\n"<pos:position pos:line="3118" pos:column="71"/></literal></expr></argument>
, <argument><expr><name pos:line="3119" pos:column="3">stdout<pos:position pos:line="3119" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3119" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3119" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3120" pos:column="2">fputs<pos:position pos:line="3120" pos:column="7"/></name><argument_list pos:line="3120" pos:column="7">(
<argument><expr><literal type="string" pos:line="3121" pos:column="1">"  -F. This is recommended when the value is obtained from a user or\n"<pos:position pos:line="3121" pos:column="72"/></literal>
<literal type="string" pos:line="3122" pos:column="1">"  some other unpredictable source. Under these circumstances, using\n"<pos:position pos:line="3122" pos:column="72"/></literal>
<literal type="string" pos:line="3123" pos:column="1">"  -F instead of --form-string would allow a user to trick curl into\n"<pos:position pos:line="3123" pos:column="72"/></literal>
<literal type="string" pos:line="3124" pos:column="1">"  uploading a file.\n"<pos:position pos:line="3124" pos:column="24"/></literal>
<literal type="string" pos:line="3125" pos:column="1">"\n"<pos:position pos:line="3125" pos:column="5"/></literal>
<literal type="string" pos:line="3126" pos:column="1">"REFERRER\n"<pos:position pos:line="3126" pos:column="13"/></literal>
<literal type="string" pos:line="3127" pos:column="1">"\n"<pos:position pos:line="3127" pos:column="5"/></literal>
<literal type="string" pos:line="3128" pos:column="1">"  A HTTP request has the option to include information about which address\n"<pos:position pos:line="3128" pos:column="79"/></literal>
<literal type="string" pos:line="3129" pos:column="1">"  that referred to actual page.  Curl allows you to specify the\n"<pos:position pos:line="3129" pos:column="68"/></literal>
<literal type="string" pos:line="3130" pos:column="1">"  referrer to be used on the command line. It is especially useful to\n"<pos:position pos:line="3130" pos:column="74"/></literal></expr></argument>
, <argument><expr><name pos:line="3131" pos:column="3">stdout<pos:position pos:line="3131" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3131" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3131" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3132" pos:column="2">fputs<pos:position pos:line="3132" pos:column="7"/></name><argument_list pos:line="3132" pos:column="7">(
<argument><expr><literal type="string" pos:line="3133" pos:column="1">"  fool or trick stupid servers or CGI scripts that rely on that information\n"<pos:position pos:line="3133" pos:column="80"/></literal>
<literal type="string" pos:line="3134" pos:column="1">"  being available or contain certain data.\n"<pos:position pos:line="3134" pos:column="47"/></literal>
<literal type="string" pos:line="3135" pos:column="1">"\n"<pos:position pos:line="3135" pos:column="5"/></literal>
<literal type="string" pos:line="3136" pos:column="1">"        curl -e www.coolsite.com http://www.showme.com/\n"<pos:position pos:line="3136" pos:column="60"/></literal>
<literal type="string" pos:line="3137" pos:column="1">"\n"<pos:position pos:line="3137" pos:column="5"/></literal>
<literal type="string" pos:line="3138" pos:column="1">"  NOTE: The Referer: [sic] field is defined in the HTTP spec to be a full URL.\n"<pos:position pos:line="3138" pos:column="83"/></literal>
<literal type="string" pos:line="3139" pos:column="1">"\n"<pos:position pos:line="3139" pos:column="5"/></literal>
<literal type="string" pos:line="3140" pos:column="1">"USER AGENT\n"<pos:position pos:line="3140" pos:column="15"/></literal>
<literal type="string" pos:line="3141" pos:column="1">"\n"<pos:position pos:line="3141" pos:column="5"/></literal>
<literal type="string" pos:line="3142" pos:column="1">"  A HTTP request has the option to include information about the browser\n"<pos:position pos:line="3142" pos:column="77"/></literal>
<literal type="string" pos:line="3143" pos:column="1">"  that generated the request. Curl allows it to be specified on the command\n"<pos:position pos:line="3143" pos:column="80"/></literal>
<literal type="string" pos:line="3144" pos:column="1">"  line. It is especially useful to fool or trick stupid servers or CGI\n"<pos:position pos:line="3144" pos:column="75"/></literal></expr></argument>
, <argument><expr><name pos:line="3145" pos:column="3">stdout<pos:position pos:line="3145" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3145" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3145" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3146" pos:column="2">fputs<pos:position pos:line="3146" pos:column="7"/></name><argument_list pos:line="3146" pos:column="7">(
<argument><expr><literal type="string" pos:line="3147" pos:column="1">"  scripts that only accept certain browsers.\n"<pos:position pos:line="3147" pos:column="49"/></literal>
<literal type="string" pos:line="3148" pos:column="1">"\n"<pos:position pos:line="3148" pos:column="5"/></literal>
<literal type="string" pos:line="3149" pos:column="1">"  Example:\n"<pos:position pos:line="3149" pos:column="15"/></literal>
<literal type="string" pos:line="3150" pos:column="1">"\n"<pos:position pos:line="3150" pos:column="5"/></literal>
<literal type="string" pos:line="3151" pos:column="1">"  curl -A 'Mozilla/3.0 (Win95; I)' http://www.nationsbank.com/\n"<pos:position pos:line="3151" pos:column="67"/></literal>
<literal type="string" pos:line="3152" pos:column="1">"\n"<pos:position pos:line="3152" pos:column="5"/></literal>
<literal type="string" pos:line="3153" pos:column="1">"  Other common strings:\n"<pos:position pos:line="3153" pos:column="28"/></literal>
<literal type="string" pos:line="3154" pos:column="1">"    'Mozilla/3.0 (Win95; I)'     Netscape Version 3 for Windows 95\n"<pos:position pos:line="3154" pos:column="71"/></literal>
<literal type="string" pos:line="3155" pos:column="1">"    'Mozilla/3.04 (Win95; U)'    Netscape Version 3 for Windows 95\n"<pos:position pos:line="3155" pos:column="71"/></literal>
<literal type="string" pos:line="3156" pos:column="1">"    'Mozilla/2.02 (OS/2; U)'     Netscape Version 2 for OS/2\n"<pos:position pos:line="3156" pos:column="65"/></literal>
<literal type="string" pos:line="3157" pos:column="1">"    'Mozilla/4.04 [en] (X11; U; AIX 4.2; Nav)'           NS for AIX\n"<pos:position pos:line="3157" pos:column="72"/></literal>
<literal type="string" pos:line="3158" pos:column="1">"    'Mozilla/4.05 [en] (X11; U; Linux 2.0.32 i586)'      NS for Linux\n"<pos:position pos:line="3158" pos:column="74"/></literal>
<literal type="string" pos:line="3159" pos:column="1">"\n"<pos:position pos:line="3159" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3160" pos:column="3">stdout<pos:position pos:line="3160" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3160" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3160" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3161" pos:column="2">fputs<pos:position pos:line="3161" pos:column="7"/></name><argument_list pos:line="3161" pos:column="7">(
<argument><expr><literal type="string" pos:line="3162" pos:column="1">"  Note that Internet Explorer tries hard to be compatible in every way:\n"<pos:position pos:line="3162" pos:column="76"/></literal>
<literal type="string" pos:line="3163" pos:column="1">"    'Mozilla/4.0 (compatible; MSIE 4.01; Windows 95)'    MSIE for W95\n"<pos:position pos:line="3163" pos:column="74"/></literal>
<literal type="string" pos:line="3164" pos:column="1">"\n"<pos:position pos:line="3164" pos:column="5"/></literal>
<literal type="string" pos:line="3165" pos:column="1">"  Mozilla is not the only possible User-Agent name:\n"<pos:position pos:line="3165" pos:column="56"/></literal>
<literal type="string" pos:line="3166" pos:column="1">"    'Konqueror/1.0'             KDE File Manager desktop client\n"<pos:position pos:line="3166" pos:column="68"/></literal>
<literal type="string" pos:line="3167" pos:column="1">"    'Lynx/2.7.1 libwww-FM/2.14' Lynx command line browser\n"<pos:position pos:line="3167" pos:column="62"/></literal>
<literal type="string" pos:line="3168" pos:column="1">"\n"<pos:position pos:line="3168" pos:column="5"/></literal>
<literal type="string" pos:line="3169" pos:column="1">"COOKIES\n"<pos:position pos:line="3169" pos:column="12"/></literal>
<literal type="string" pos:line="3170" pos:column="1">"\n"<pos:position pos:line="3170" pos:column="5"/></literal>
<literal type="string" pos:line="3171" pos:column="1">"  Cookies are generally used by web servers to keep state information at the\n"<pos:position pos:line="3171" pos:column="81"/></literal>
<literal type="string" pos:line="3172" pos:column="1">"  client's side. The server sets cookies by sending a response line in the\n"<pos:position pos:line="3172" pos:column="79"/></literal></expr></argument>
, <argument><expr><name pos:line="3173" pos:column="3">stdout<pos:position pos:line="3173" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3173" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3173" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3174" pos:column="2">fputs<pos:position pos:line="3174" pos:column="7"/></name><argument_list pos:line="3174" pos:column="7">(
<argument><expr><literal type="string" pos:line="3175" pos:column="1">"  headers that looks like 'Set-Cookie: &lt;data&gt;' where the data part then\n"<pos:position pos:line="3175" pos:column="82"/></literal>
<literal type="string" pos:line="3176" pos:column="1">"  typically contains a set of NAME=VALUE pairs (separated by semicolons ';'\n"<pos:position pos:line="3176" pos:column="80"/></literal>
<literal type="string" pos:line="3177" pos:column="1">"  like \"NAME1=VALUE1; NAME2=VALUE2;\"). The server can also specify for what\n"<pos:position pos:line="3177" pos:column="82"/></literal>
<literal type="string" pos:line="3178" pos:column="1">"  path the \"cookie\" should be used for (by specifying \"path=value\"), when the\n"<pos:position pos:line="3178" pos:column="86"/></literal>
<literal type="string" pos:line="3179" pos:column="1">"  cookie should expire (\"expire=DATE\"), for what domain to use it\n"<pos:position pos:line="3179" pos:column="72"/></literal>
<literal type="string" pos:line="3180" pos:column="1">"  (\"domain=NAME\") and if it should be used on secure connections only\n"<pos:position pos:line="3180" pos:column="76"/></literal>
<literal type="string" pos:line="3181" pos:column="1">"  (\"secure\").\n"<pos:position pos:line="3181" pos:column="20"/></literal>
<literal type="string" pos:line="3182" pos:column="1">"\n"<pos:position pos:line="3182" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3183" pos:column="3">stdout<pos:position pos:line="3183" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3183" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3183" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3184" pos:column="2">fputs<pos:position pos:line="3184" pos:column="7"/></name><argument_list pos:line="3184" pos:column="7">(
<argument><expr><literal type="string" pos:line="3185" pos:column="1">"  If you've received a page from a server that contains a header like:\n"<pos:position pos:line="3185" pos:column="75"/></literal>
<literal type="string" pos:line="3186" pos:column="1">"        Set-Cookie: sessionid=boo123; path=\"/foo\";\n"<pos:position pos:line="3186" pos:column="57"/></literal>
<literal type="string" pos:line="3187" pos:column="1">"\n"<pos:position pos:line="3187" pos:column="5"/></literal>
<literal type="string" pos:line="3188" pos:column="1">"  it means the server wants that first pair passed on when we get anything in\n"<pos:position pos:line="3188" pos:column="82"/></literal>
<literal type="string" pos:line="3189" pos:column="1">"  a path beginning with \"/foo\".\n"<pos:position pos:line="3189" pos:column="38"/></literal>
<literal type="string" pos:line="3190" pos:column="1">"\n"<pos:position pos:line="3190" pos:column="5"/></literal>
<literal type="string" pos:line="3191" pos:column="1">"  Example, get a page that wants my name passed in a cookie:\n"<pos:position pos:line="3191" pos:column="65"/></literal>
<literal type="string" pos:line="3192" pos:column="1">"\n"<pos:position pos:line="3192" pos:column="5"/></literal>
<literal type="string" pos:line="3193" pos:column="1">"        curl -b \"name=Daniel\" www.sillypage.com\n"<pos:position pos:line="3193" pos:column="54"/></literal>
<literal type="string" pos:line="3194" pos:column="1">"\n"<pos:position pos:line="3194" pos:column="5"/></literal>
<literal type="string" pos:line="3195" pos:column="1">"  Curl also has the ability to use previously received cookies in following\n"<pos:position pos:line="3195" pos:column="80"/></literal>
<literal type="string" pos:line="3196" pos:column="1">"  sessions. If you get cookies from a server and store them in a file in a\n"<pos:position pos:line="3196" pos:column="79"/></literal></expr></argument>
, <argument><expr><name pos:line="3197" pos:column="3">stdout<pos:position pos:line="3197" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3197" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3197" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3198" pos:column="2">fputs<pos:position pos:line="3198" pos:column="7"/></name><argument_list pos:line="3198" pos:column="7">(
<argument><expr><literal type="string" pos:line="3199" pos:column="1">"  manner similar to:\n"<pos:position pos:line="3199" pos:column="25"/></literal>
<literal type="string" pos:line="3200" pos:column="1">"\n"<pos:position pos:line="3200" pos:column="5"/></literal>
<literal type="string" pos:line="3201" pos:column="1">"        curl --dump-header headers www.example.com\n"<pos:position pos:line="3201" pos:column="55"/></literal>
<literal type="string" pos:line="3202" pos:column="1">"\n"<pos:position pos:line="3202" pos:column="5"/></literal>
<literal type="string" pos:line="3203" pos:column="1">"  ... you can then in a second connect to that (or another) site, use the\n"<pos:position pos:line="3203" pos:column="78"/></literal>
<literal type="string" pos:line="3204" pos:column="1">"  cookies from the 'headers' file like:\n"<pos:position pos:line="3204" pos:column="44"/></literal>
<literal type="string" pos:line="3205" pos:column="1">"\n"<pos:position pos:line="3205" pos:column="5"/></literal>
<literal type="string" pos:line="3206" pos:column="1">"        curl -b headers www.example.com\n"<pos:position pos:line="3206" pos:column="44"/></literal>
<literal type="string" pos:line="3207" pos:column="1">"\n"<pos:position pos:line="3207" pos:column="5"/></literal>
<literal type="string" pos:line="3208" pos:column="1">"  While saving headers to a file is a working way to store cookies, it is\n"<pos:position pos:line="3208" pos:column="78"/></literal>
<literal type="string" pos:line="3209" pos:column="1">"  however error-prone and not the preferred way to do this. Instead, make curl\n"<pos:position pos:line="3209" pos:column="83"/></literal>
<literal type="string" pos:line="3210" pos:column="1">"  save the incoming cookies using the well-known netscape cookie format like\n"<pos:position pos:line="3210" pos:column="81"/></literal>
<literal type="string" pos:line="3211" pos:column="1">"  this:\n"<pos:position pos:line="3211" pos:column="12"/></literal>
<literal type="string" pos:line="3212" pos:column="1">"\n"<pos:position pos:line="3212" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3213" pos:column="3">stdout<pos:position pos:line="3213" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3213" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3213" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3214" pos:column="2">fputs<pos:position pos:line="3214" pos:column="7"/></name><argument_list pos:line="3214" pos:column="7">(
<argument><expr><literal type="string" pos:line="3215" pos:column="1">"        curl -c cookies.txt www.example.com\n"<pos:position pos:line="3215" pos:column="48"/></literal>
<literal type="string" pos:line="3216" pos:column="1">"\n"<pos:position pos:line="3216" pos:column="5"/></literal>
<literal type="string" pos:line="3217" pos:column="1">"  Note that by specifying -b you enable the \"cookie awareness\" and with -L\n"<pos:position pos:line="3217" pos:column="81"/></literal>
<literal type="string" pos:line="3218" pos:column="1">"  you can make curl follow a location: (which often is used in combination\n"<pos:position pos:line="3218" pos:column="79"/></literal>
<literal type="string" pos:line="3219" pos:column="1">"  with cookies). So that if a site sends cookies and a location, you can\n"<pos:position pos:line="3219" pos:column="77"/></literal>
<literal type="string" pos:line="3220" pos:column="1">"  use a non-existing file to trigger the cookie awareness like:\n"<pos:position pos:line="3220" pos:column="68"/></literal>
<literal type="string" pos:line="3221" pos:column="1">"\n"<pos:position pos:line="3221" pos:column="5"/></literal>
<literal type="string" pos:line="3222" pos:column="1">"        curl -L -b empty.txt www.example.com\n"<pos:position pos:line="3222" pos:column="49"/></literal>
<literal type="string" pos:line="3223" pos:column="1">"\n"<pos:position pos:line="3223" pos:column="5"/></literal>
<literal type="string" pos:line="3224" pos:column="1">"  The file to read cookies from must be formatted using plain HTTP headers OR\n"<pos:position pos:line="3224" pos:column="82"/></literal></expr></argument>
, <argument><expr><name pos:line="3225" pos:column="3">stdout<pos:position pos:line="3225" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3225" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3225" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3226" pos:column="2">fputs<pos:position pos:line="3226" pos:column="7"/></name><argument_list pos:line="3226" pos:column="7">(
<argument><expr><literal type="string" pos:line="3227" pos:column="1">"  as netscape's cookie file. Curl will determine what kind it is based on the\n"<pos:position pos:line="3227" pos:column="82"/></literal>
<literal type="string" pos:line="3228" pos:column="1">"  file contents.  In the above command, curl will parse the header and store\n"<pos:position pos:line="3228" pos:column="81"/></literal>
<literal type="string" pos:line="3229" pos:column="1">"  the cookies received from www.example.com.  curl will send to the server the\n"<pos:position pos:line="3229" pos:column="83"/></literal>
<literal type="string" pos:line="3230" pos:column="1">"  stored cookies which match the request as it follows the location.  The\n"<pos:position pos:line="3230" pos:column="78"/></literal>
<literal type="string" pos:line="3231" pos:column="1">"  file \"empty.txt\" may be a nonexistent file.\n"<pos:position pos:line="3231" pos:column="52"/></literal>
<literal type="string" pos:line="3232" pos:column="1">"\n"<pos:position pos:line="3232" pos:column="5"/></literal>
<literal type="string" pos:line="3233" pos:column="1">"  Alas, to both read and write cookies from a netscape cookie file, you can\n"<pos:position pos:line="3233" pos:column="80"/></literal>
<literal type="string" pos:line="3234" pos:column="1">"  set both -b and -c to use the same file:\n"<pos:position pos:line="3234" pos:column="47"/></literal>
<literal type="string" pos:line="3235" pos:column="1">"\n"<pos:position pos:line="3235" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3236" pos:column="3">stdout<pos:position pos:line="3236" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3236" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3236" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3237" pos:column="2">fputs<pos:position pos:line="3237" pos:column="7"/></name><argument_list pos:line="3237" pos:column="7">(
<argument><expr><literal type="string" pos:line="3238" pos:column="1">"        curl -b cookies.txt -c cookies.txt www.example.com\n"<pos:position pos:line="3238" pos:column="63"/></literal>
<literal type="string" pos:line="3239" pos:column="1">"\n"<pos:position pos:line="3239" pos:column="5"/></literal>
<literal type="string" pos:line="3240" pos:column="1">"PROGRESS METER\n"<pos:position pos:line="3240" pos:column="19"/></literal>
<literal type="string" pos:line="3241" pos:column="1">"\n"<pos:position pos:line="3241" pos:column="5"/></literal>
<literal type="string" pos:line="3242" pos:column="1">"  The progress meter exists to show a user that something actually is\n"<pos:position pos:line="3242" pos:column="74"/></literal>
<literal type="string" pos:line="3243" pos:column="1">"  happening. The different fields in the output have the following meaning:\n"<pos:position pos:line="3243" pos:column="80"/></literal>
<literal type="string" pos:line="3244" pos:column="1">"\n"<pos:position pos:line="3244" pos:column="5"/></literal>
<literal type="string" pos:line="3245" pos:column="1">"  % Total    % Received % Xferd  Average Speed          Time             Curr.\n"<pos:position pos:line="3245" pos:column="83"/></literal>
<literal type="string" pos:line="3246" pos:column="1">"                                 Dload  Upload Total    Current  Left    Speed\n"<pos:position pos:line="3246" pos:column="83"/></literal>
<literal type="string" pos:line="3247" pos:column="1">"  0  151M    0 38608    0     0   9406      0  4:41:43  0:00:04  4:41:39  9287\n"<pos:position pos:line="3247" pos:column="83"/></literal>
<literal type="string" pos:line="3248" pos:column="1">"\n"<pos:position pos:line="3248" pos:column="5"/></literal>
<literal type="string" pos:line="3249" pos:column="1">"  From left-to-right:\n"<pos:position pos:line="3249" pos:column="26"/></literal></expr></argument>
, <argument><expr><name pos:line="3250" pos:column="3">stdout<pos:position pos:line="3250" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3250" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3250" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3251" pos:column="2">fputs<pos:position pos:line="3251" pos:column="7"/></name><argument_list pos:line="3251" pos:column="7">(
<argument><expr><literal type="string" pos:line="3252" pos:column="1">"   %             - percentage completed of the whole transfer\n"<pos:position pos:line="3252" pos:column="66"/></literal>
<literal type="string" pos:line="3253" pos:column="1">"   Total         - total size of the whole expected transfer\n"<pos:position pos:line="3253" pos:column="65"/></literal>
<literal type="string" pos:line="3254" pos:column="1">"   %             - percentage completed of the download\n"<pos:position pos:line="3254" pos:column="60"/></literal>
<literal type="string" pos:line="3255" pos:column="1">"   Received      - currently downloaded amount of bytes\n"<pos:position pos:line="3255" pos:column="60"/></literal>
<literal type="string" pos:line="3256" pos:column="1">"   %             - percentage completed of the upload\n"<pos:position pos:line="3256" pos:column="58"/></literal>
<literal type="string" pos:line="3257" pos:column="1">"   Xferd         - currently uploaded amount of bytes\n"<pos:position pos:line="3257" pos:column="58"/></literal>
<literal type="string" pos:line="3258" pos:column="1">"   Average Speed\n"<pos:position pos:line="3258" pos:column="21"/></literal>
<literal type="string" pos:line="3259" pos:column="1">"   Dload         - the average transfer speed of the download\n"<pos:position pos:line="3259" pos:column="66"/></literal>
<literal type="string" pos:line="3260" pos:column="1">"   Average Speed\n"<pos:position pos:line="3260" pos:column="21"/></literal>
<literal type="string" pos:line="3261" pos:column="1">"   Upload        - the average transfer speed of the upload\n"<pos:position pos:line="3261" pos:column="64"/></literal></expr></argument>
, <argument><expr><name pos:line="3262" pos:column="3">stdout<pos:position pos:line="3262" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3262" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3262" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3263" pos:column="2">fputs<pos:position pos:line="3263" pos:column="7"/></name><argument_list pos:line="3263" pos:column="7">(
<argument><expr><literal type="string" pos:line="3264" pos:column="1">"   Time Total    - expected time to complete the operation\n"<pos:position pos:line="3264" pos:column="63"/></literal>
<literal type="string" pos:line="3265" pos:column="1">"   Time Current  - time passed since the invoke\n"<pos:position pos:line="3265" pos:column="52"/></literal>
<literal type="string" pos:line="3266" pos:column="1">"   Time Left     - expected time left to completion\n"<pos:position pos:line="3266" pos:column="56"/></literal>
<literal type="string" pos:line="3267" pos:column="1">"   Curr.Speed    - the average transfer speed the last 5 seconds (the first\n"<pos:position pos:line="3267" pos:column="80"/></literal>
<literal type="string" pos:line="3268" pos:column="1">"                   5 seconds of a transfer is based on less time of course.)\n"<pos:position pos:line="3268" pos:column="81"/></literal>
<literal type="string" pos:line="3269" pos:column="1">"\n"<pos:position pos:line="3269" pos:column="5"/></literal>
<literal type="string" pos:line="3270" pos:column="1">"  The -# option will display a totally different progress bar that doesn't\n"<pos:position pos:line="3270" pos:column="79"/></literal>
<literal type="string" pos:line="3271" pos:column="1">"  need much explanation!\n"<pos:position pos:line="3271" pos:column="29"/></literal>
<literal type="string" pos:line="3272" pos:column="1">"\n"<pos:position pos:line="3272" pos:column="5"/></literal>
<literal type="string" pos:line="3273" pos:column="1">"SPEED LIMIT\n"<pos:position pos:line="3273" pos:column="16"/></literal>
<literal type="string" pos:line="3274" pos:column="1">"\n"<pos:position pos:line="3274" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3275" pos:column="3">stdout<pos:position pos:line="3275" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3275" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3275" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3276" pos:column="2">fputs<pos:position pos:line="3276" pos:column="7"/></name><argument_list pos:line="3276" pos:column="7">(
<argument><expr><literal type="string" pos:line="3277" pos:column="1">"  Curl allows the user to set the transfer speed conditions that must be met\n"<pos:position pos:line="3277" pos:column="81"/></literal>
<literal type="string" pos:line="3278" pos:column="1">"  to let the transfer keep going. By using the switch -y and -Y you\n"<pos:position pos:line="3278" pos:column="72"/></literal>
<literal type="string" pos:line="3279" pos:column="1">"  can make curl abort transfers if the transfer speed is below the specified\n"<pos:position pos:line="3279" pos:column="81"/></literal>
<literal type="string" pos:line="3280" pos:column="1">"  lowest limit for a specified time.\n"<pos:position pos:line="3280" pos:column="41"/></literal>
<literal type="string" pos:line="3281" pos:column="1">"\n"<pos:position pos:line="3281" pos:column="5"/></literal>
<literal type="string" pos:line="3282" pos:column="1">"  To have curl abort the download if the speed is slower than 3000 bytes per\n"<pos:position pos:line="3282" pos:column="81"/></literal>
<literal type="string" pos:line="3283" pos:column="1">"  second for 1 minute, run:\n"<pos:position pos:line="3283" pos:column="32"/></literal>
<literal type="string" pos:line="3284" pos:column="1">"\n"<pos:position pos:line="3284" pos:column="5"/></literal>
<literal type="string" pos:line="3285" pos:column="1">"        curl -Y 3000 -y 60 www.far-away-site.com\n"<pos:position pos:line="3285" pos:column="53"/></literal>
<literal type="string" pos:line="3286" pos:column="1">"\n"<pos:position pos:line="3286" pos:column="5"/></literal>
<literal type="string" pos:line="3287" pos:column="1">"  This can very well be used in combination with the overall time limit, so\n"<pos:position pos:line="3287" pos:column="80"/></literal></expr></argument>
, <argument><expr><name pos:line="3288" pos:column="3">stdout<pos:position pos:line="3288" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3288" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3288" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3289" pos:column="2">fputs<pos:position pos:line="3289" pos:column="7"/></name><argument_list pos:line="3289" pos:column="7">(
<argument><expr><literal type="string" pos:line="3290" pos:column="1">"  that the above operation must be completed in whole within 30 minutes:\n"<pos:position pos:line="3290" pos:column="77"/></literal>
<literal type="string" pos:line="3291" pos:column="1">"\n"<pos:position pos:line="3291" pos:column="5"/></literal>
<literal type="string" pos:line="3292" pos:column="1">"        curl -m 1800 -Y 3000 -y 60 www.far-away-site.com\n"<pos:position pos:line="3292" pos:column="61"/></literal>
<literal type="string" pos:line="3293" pos:column="1">"\n"<pos:position pos:line="3293" pos:column="5"/></literal>
<literal type="string" pos:line="3294" pos:column="1">"  Forcing curl not to transfer data faster than a given rate is also possible,\n"<pos:position pos:line="3294" pos:column="83"/></literal>
<literal type="string" pos:line="3295" pos:column="1">"  which might be useful if you're using a limited bandwidth connection and you\n"<pos:position pos:line="3295" pos:column="83"/></literal>
<literal type="string" pos:line="3296" pos:column="1">"  don't want your transfer to use all of it (sometimes referred to as\n"<pos:position pos:line="3296" pos:column="74"/></literal>
<literal type="string" pos:line="3297" pos:column="1">"  \"bandwidth throttle\").\n"<pos:position pos:line="3297" pos:column="31"/></literal>
<literal type="string" pos:line="3298" pos:column="1">"\n"<pos:position pos:line="3298" pos:column="5"/></literal>
<literal type="string" pos:line="3299" pos:column="1">"  Make curl transfer data no faster than 10 kilobytes per second:\n"<pos:position pos:line="3299" pos:column="70"/></literal>
<literal type="string" pos:line="3300" pos:column="1">"\n"<pos:position pos:line="3300" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3301" pos:column="3">stdout<pos:position pos:line="3301" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3301" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3301" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3302" pos:column="2">fputs<pos:position pos:line="3302" pos:column="7"/></name><argument_list pos:line="3302" pos:column="7">(
<argument><expr><literal type="string" pos:line="3303" pos:column="1">"        curl --limit-rate 10K www.far-away-site.com\n"<pos:position pos:line="3303" pos:column="56"/></literal>
<literal type="string" pos:line="3304" pos:column="1">"\n"<pos:position pos:line="3304" pos:column="5"/></literal>
<literal type="string" pos:line="3305" pos:column="1">"    or\n"<pos:position pos:line="3305" pos:column="11"/></literal>
<literal type="string" pos:line="3306" pos:column="1">"\n"<pos:position pos:line="3306" pos:column="5"/></literal>
<literal type="string" pos:line="3307" pos:column="1">"        curl --limit-rate 10240 www.far-away-site.com\n"<pos:position pos:line="3307" pos:column="58"/></literal>
<literal type="string" pos:line="3308" pos:column="1">"\n"<pos:position pos:line="3308" pos:column="5"/></literal>
<literal type="string" pos:line="3309" pos:column="1">"  Or prevent curl from uploading data faster than 1 megabyte per second:\n"<pos:position pos:line="3309" pos:column="77"/></literal>
<literal type="string" pos:line="3310" pos:column="1">"\n"<pos:position pos:line="3310" pos:column="5"/></literal>
<literal type="string" pos:line="3311" pos:column="1">"        curl -T upload --limit-rate 1M ftp://uploadshereplease.com\n"<pos:position pos:line="3311" pos:column="71"/></literal>
<literal type="string" pos:line="3312" pos:column="1">"\n"<pos:position pos:line="3312" pos:column="5"/></literal>
<literal type="string" pos:line="3313" pos:column="1">"  When using the --limit-rate option, the transfer rate is regulated on a\n"<pos:position pos:line="3313" pos:column="78"/></literal>
<literal type="string" pos:line="3314" pos:column="1">"  per-second basis, which will cause the total transfer speed to become lower\n"<pos:position pos:line="3314" pos:column="82"/></literal>
<literal type="string" pos:line="3315" pos:column="1">"  than the given number. Sometimes of course substantially lower, if your\n"<pos:position pos:line="3315" pos:column="78"/></literal></expr></argument>
, <argument><expr><name pos:line="3316" pos:column="3">stdout<pos:position pos:line="3316" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3316" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3316" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3317" pos:column="2">fputs<pos:position pos:line="3317" pos:column="7"/></name><argument_list pos:line="3317" pos:column="7">(
<argument><expr><literal type="string" pos:line="3318" pos:column="1">"  transfer stalls during periods.\n"<pos:position pos:line="3318" pos:column="38"/></literal>
<literal type="string" pos:line="3319" pos:column="1">"\n"<pos:position pos:line="3319" pos:column="5"/></literal>
<literal type="string" pos:line="3320" pos:column="1">"CONFIG FILE\n"<pos:position pos:line="3320" pos:column="16"/></literal>
<literal type="string" pos:line="3321" pos:column="1">"\n"<pos:position pos:line="3321" pos:column="5"/></literal>
<literal type="string" pos:line="3322" pos:column="1">"  Curl automatically tries to read the .curlrc file (or _curlrc file on win32\n"<pos:position pos:line="3322" pos:column="82"/></literal>
<literal type="string" pos:line="3323" pos:column="1">"  systems) from the user's home dir on startup.\n"<pos:position pos:line="3323" pos:column="52"/></literal>
<literal type="string" pos:line="3324" pos:column="1">"\n"<pos:position pos:line="3324" pos:column="5"/></literal>
<literal type="string" pos:line="3325" pos:column="1">"  The config file could be made up with normal command line switches, but you\n"<pos:position pos:line="3325" pos:column="82"/></literal>
<literal type="string" pos:line="3326" pos:column="1">"  can also specify the long options without the dashes to make it more\n"<pos:position pos:line="3326" pos:column="75"/></literal>
<literal type="string" pos:line="3327" pos:column="1">"  readable. You can separate the options and the parameter with spaces, or\n"<pos:position pos:line="3327" pos:column="79"/></literal>
<literal type="string" pos:line="3328" pos:column="1">"  with = or :. Comments can be used within the file. If the first letter on a\n"<pos:position pos:line="3328" pos:column="82"/></literal></expr></argument>
, <argument><expr><name pos:line="3329" pos:column="3">stdout<pos:position pos:line="3329" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3329" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3329" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3330" pos:column="2">fputs<pos:position pos:line="3330" pos:column="7"/></name><argument_list pos:line="3330" pos:column="7">(
<argument><expr><literal type="string" pos:line="3331" pos:column="1">"  line is a '#'-symbol the rest of the line is treated as a comment.\n"<pos:position pos:line="3331" pos:column="73"/></literal>
<literal type="string" pos:line="3332" pos:column="1">"\n"<pos:position pos:line="3332" pos:column="5"/></literal>
<literal type="string" pos:line="3333" pos:column="1">"  If you want the parameter to contain spaces, you must enclose the entire\n"<pos:position pos:line="3333" pos:column="79"/></literal>
<literal type="string" pos:line="3334" pos:column="1">"  parameter within double quotes (\"). Within those quotes, you specify a\n"<pos:position pos:line="3334" pos:column="78"/></literal>
<literal type="string" pos:line="3335" pos:column="1">"  quote as \\\".\n"<pos:position pos:line="3335" pos:column="21"/></literal>
<literal type="string" pos:line="3336" pos:column="1">"\n"<pos:position pos:line="3336" pos:column="5"/></literal>
<literal type="string" pos:line="3337" pos:column="1">"  NOTE: You must specify options and their arguments on the same line.\n"<pos:position pos:line="3337" pos:column="75"/></literal>
<literal type="string" pos:line="3338" pos:column="1">"\n"<pos:position pos:line="3338" pos:column="5"/></literal>
<literal type="string" pos:line="3339" pos:column="1">"  Example, set default time out and proxy in a config file:\n"<pos:position pos:line="3339" pos:column="64"/></literal>
<literal type="string" pos:line="3340" pos:column="1">"\n"<pos:position pos:line="3340" pos:column="5"/></literal>
<literal type="string" pos:line="3341" pos:column="1">"        # We want a 30 minute timeout:\n"<pos:position pos:line="3341" pos:column="43"/></literal>
<literal type="string" pos:line="3342" pos:column="1">"        -m 1800\n"<pos:position pos:line="3342" pos:column="20"/></literal>
<literal type="string" pos:line="3343" pos:column="1">"        # ... and we use a proxy for all accesses:\n"<pos:position pos:line="3343" pos:column="55"/></literal></expr></argument>
, <argument><expr><name pos:line="3344" pos:column="3">stdout<pos:position pos:line="3344" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3344" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3344" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3345" pos:column="2">fputs<pos:position pos:line="3345" pos:column="7"/></name><argument_list pos:line="3345" pos:column="7">(
<argument><expr><literal type="string" pos:line="3346" pos:column="1">"        proxy = proxy.our.domain.com:8080\n"<pos:position pos:line="3346" pos:column="46"/></literal>
<literal type="string" pos:line="3347" pos:column="1">"\n"<pos:position pos:line="3347" pos:column="5"/></literal>
<literal type="string" pos:line="3348" pos:column="1">"  White spaces ARE significant at the end of lines, but all white spaces\n"<pos:position pos:line="3348" pos:column="77"/></literal>
<literal type="string" pos:line="3349" pos:column="1">"  leading up to the first characters of each line are ignored.\n"<pos:position pos:line="3349" pos:column="67"/></literal>
<literal type="string" pos:line="3350" pos:column="1">"\n"<pos:position pos:line="3350" pos:column="5"/></literal>
<literal type="string" pos:line="3351" pos:column="1">"  Prevent curl from reading the default file by using -q as the first command\n"<pos:position pos:line="3351" pos:column="82"/></literal>
<literal type="string" pos:line="3352" pos:column="1">"  line parameter, like:\n"<pos:position pos:line="3352" pos:column="28"/></literal>
<literal type="string" pos:line="3353" pos:column="1">"\n"<pos:position pos:line="3353" pos:column="5"/></literal>
<literal type="string" pos:line="3354" pos:column="1">"        curl -q www.thatsite.com\n"<pos:position pos:line="3354" pos:column="37"/></literal>
<literal type="string" pos:line="3355" pos:column="1">"\n"<pos:position pos:line="3355" pos:column="5"/></literal>
<literal type="string" pos:line="3356" pos:column="1">"  Force curl to get and display a local help page in case it is invoked\n"<pos:position pos:line="3356" pos:column="76"/></literal>
<literal type="string" pos:line="3357" pos:column="1">"  without URL by making a config file similar to:\n"<pos:position pos:line="3357" pos:column="54"/></literal>
<literal type="string" pos:line="3358" pos:column="1">"\n"<pos:position pos:line="3358" pos:column="5"/></literal>
<literal type="string" pos:line="3359" pos:column="1">"        # default url to get\n"<pos:position pos:line="3359" pos:column="33"/></literal></expr></argument>
, <argument><expr><name pos:line="3360" pos:column="3">stdout<pos:position pos:line="3360" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3360" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3360" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3361" pos:column="2">fputs<pos:position pos:line="3361" pos:column="7"/></name><argument_list pos:line="3361" pos:column="7">(
<argument><expr><literal type="string" pos:line="3362" pos:column="1">"        url = \"http://help.with.curl.com/curlhelp.html\"\n"<pos:position pos:line="3362" pos:column="62"/></literal>
<literal type="string" pos:line="3363" pos:column="1">"\n"<pos:position pos:line="3363" pos:column="5"/></literal>
<literal type="string" pos:line="3364" pos:column="1">"  You can specify another config file to be read by using the -K/--config\n"<pos:position pos:line="3364" pos:column="78"/></literal>
<literal type="string" pos:line="3365" pos:column="1">"  flag. If you set config file name to \"-\" it'll read the config from stdin,\n"<pos:position pos:line="3365" pos:column="83"/></literal>
<literal type="string" pos:line="3366" pos:column="1">"  which can be handy if you want to hide options from being visible in process\n"<pos:position pos:line="3366" pos:column="83"/></literal>
<literal type="string" pos:line="3367" pos:column="1">"  tables etc:\n"<pos:position pos:line="3367" pos:column="18"/></literal>
<literal type="string" pos:line="3368" pos:column="1">"\n"<pos:position pos:line="3368" pos:column="5"/></literal>
<literal type="string" pos:line="3369" pos:column="1">"        echo \"user = user:passwd\" | curl -K - http://that.secret.site.com\n"<pos:position pos:line="3369" pos:column="80"/></literal>
<literal type="string" pos:line="3370" pos:column="1">"\n"<pos:position pos:line="3370" pos:column="5"/></literal>
<literal type="string" pos:line="3371" pos:column="1">"EXTRA HEADERS\n"<pos:position pos:line="3371" pos:column="18"/></literal>
<literal type="string" pos:line="3372" pos:column="1">"\n"<pos:position pos:line="3372" pos:column="5"/></literal>
<literal type="string" pos:line="3373" pos:column="1">"  When using curl in your own very special programs, you may end up needing\n"<pos:position pos:line="3373" pos:column="80"/></literal></expr></argument>
, <argument><expr><name pos:line="3374" pos:column="3">stdout<pos:position pos:line="3374" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3374" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3374" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3375" pos:column="2">fputs<pos:position pos:line="3375" pos:column="7"/></name><argument_list pos:line="3375" pos:column="7">(
<argument><expr><literal type="string" pos:line="3376" pos:column="1">"  to pass on your own custom headers when getting a web page. You can do\n"<pos:position pos:line="3376" pos:column="77"/></literal>
<literal type="string" pos:line="3377" pos:column="1">"  this by using the -H flag.\n"<pos:position pos:line="3377" pos:column="33"/></literal>
<literal type="string" pos:line="3378" pos:column="1">"\n"<pos:position pos:line="3378" pos:column="5"/></literal>
<literal type="string" pos:line="3379" pos:column="1">"  Example, send the header \"X-you-and-me: yes\" to the server when getting a\n"<pos:position pos:line="3379" pos:column="82"/></literal>
<literal type="string" pos:line="3380" pos:column="1">"  page:\n"<pos:position pos:line="3380" pos:column="12"/></literal>
<literal type="string" pos:line="3381" pos:column="1">"\n"<pos:position pos:line="3381" pos:column="5"/></literal>
<literal type="string" pos:line="3382" pos:column="1">"        curl -H \"X-you-and-me: yes\" www.love.com\n"<pos:position pos:line="3382" pos:column="55"/></literal>
<literal type="string" pos:line="3383" pos:column="1">"\n"<pos:position pos:line="3383" pos:column="5"/></literal>
<literal type="string" pos:line="3384" pos:column="1">"  This can also be useful in case you want curl to send a different text in a\n"<pos:position pos:line="3384" pos:column="82"/></literal>
<literal type="string" pos:line="3385" pos:column="1">"  header than it normally does. The -H header you specify then replaces the\n"<pos:position pos:line="3385" pos:column="80"/></literal>
<literal type="string" pos:line="3386" pos:column="1">"  header curl would normally send. If you replace an internal header with an\n"<pos:position pos:line="3386" pos:column="81"/></literal></expr></argument>
, <argument><expr><name pos:line="3387" pos:column="3">stdout<pos:position pos:line="3387" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3387" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3387" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3388" pos:column="2">fputs<pos:position pos:line="3388" pos:column="7"/></name><argument_list pos:line="3388" pos:column="7">(
<argument><expr><literal type="string" pos:line="3389" pos:column="1">"  empty one, you prevent that header from being sent. To prevent the Host:\n"<pos:position pos:line="3389" pos:column="79"/></literal>
<literal type="string" pos:line="3390" pos:column="1">"  header from being used:\n"<pos:position pos:line="3390" pos:column="30"/></literal>
<literal type="string" pos:line="3391" pos:column="1">"\n"<pos:position pos:line="3391" pos:column="5"/></literal>
<literal type="string" pos:line="3392" pos:column="1">"        curl -H \"Host:\" www.server.com\n"<pos:position pos:line="3392" pos:column="45"/></literal>
<literal type="string" pos:line="3393" pos:column="1">"\n"<pos:position pos:line="3393" pos:column="5"/></literal>
<literal type="string" pos:line="3394" pos:column="1">"FTP and PATH NAMES\n"<pos:position pos:line="3394" pos:column="23"/></literal>
<literal type="string" pos:line="3395" pos:column="1">"\n"<pos:position pos:line="3395" pos:column="5"/></literal>
<literal type="string" pos:line="3396" pos:column="1">"  Do note that when getting files with the ftp:// URL, the given path is\n"<pos:position pos:line="3396" pos:column="77"/></literal>
<literal type="string" pos:line="3397" pos:column="1">"  relative the directory you enter. To get the file 'README' from your home\n"<pos:position pos:line="3397" pos:column="80"/></literal>
<literal type="string" pos:line="3398" pos:column="1">"  directory at your ftp site, do:\n"<pos:position pos:line="3398" pos:column="38"/></literal>
<literal type="string" pos:line="3399" pos:column="1">"\n"<pos:position pos:line="3399" pos:column="5"/></literal>
<literal type="string" pos:line="3400" pos:column="1">"        curl ftp://user:passwd@my.site.com/README\n"<pos:position pos:line="3400" pos:column="54"/></literal>
<literal type="string" pos:line="3401" pos:column="1">"\n"<pos:position pos:line="3401" pos:column="5"/></literal>
<literal type="string" pos:line="3402" pos:column="1">"  But if you want the README file from the root directory of that very same\n"<pos:position pos:line="3402" pos:column="80"/></literal></expr></argument>
, <argument><expr><name pos:line="3403" pos:column="3">stdout<pos:position pos:line="3403" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3403" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3403" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3404" pos:column="2">fputs<pos:position pos:line="3404" pos:column="7"/></name><argument_list pos:line="3404" pos:column="7">(
<argument><expr><literal type="string" pos:line="3405" pos:column="1">"  site, you need to specify the absolute file name:\n"<pos:position pos:line="3405" pos:column="56"/></literal>
<literal type="string" pos:line="3406" pos:column="1">"\n"<pos:position pos:line="3406" pos:column="5"/></literal>
<literal type="string" pos:line="3407" pos:column="1">"        curl ftp://user:passwd@my.site.com//README\n"<pos:position pos:line="3407" pos:column="55"/></literal>
<literal type="string" pos:line="3408" pos:column="1">"\n"<pos:position pos:line="3408" pos:column="5"/></literal>
<literal type="string" pos:line="3409" pos:column="1">"  (I.e with an extra slash in front of the file name.)\n"<pos:position pos:line="3409" pos:column="59"/></literal>
<literal type="string" pos:line="3410" pos:column="1">"\n"<pos:position pos:line="3410" pos:column="5"/></literal>
<literal type="string" pos:line="3411" pos:column="1">"SFTP and SCP and PATH NAMES\n"<pos:position pos:line="3411" pos:column="32"/></literal>
<literal type="string" pos:line="3412" pos:column="1">"\n"<pos:position pos:line="3412" pos:column="5"/></literal>
<literal type="string" pos:line="3413" pos:column="1">"  With sftp: and scp: URLs, the path name given is the absolute name on the\n"<pos:position pos:line="3413" pos:column="80"/></literal>
<literal type="string" pos:line="3414" pos:column="1">"  server. To access a file relative to the remote user's home directory,\n"<pos:position pos:line="3414" pos:column="77"/></literal>
<literal type="string" pos:line="3415" pos:column="1">"  prefix the file with /~/ , such as:\n"<pos:position pos:line="3415" pos:column="42"/></literal>
<literal type="string" pos:line="3416" pos:column="1">"\n"<pos:position pos:line="3416" pos:column="5"/></literal>
<literal type="string" pos:line="3417" pos:column="1">"        curl -u $USER sftp://home.example.com/~/.bashrc\n"<pos:position pos:line="3417" pos:column="60"/></literal>
<literal type="string" pos:line="3418" pos:column="1">"\n"<pos:position pos:line="3418" pos:column="5"/></literal>
<literal type="string" pos:line="3419" pos:column="1">"FTP and firewalls\n"<pos:position pos:line="3419" pos:column="22"/></literal>
<literal type="string" pos:line="3420" pos:column="1">"\n"<pos:position pos:line="3420" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3421" pos:column="3">stdout<pos:position pos:line="3421" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3421" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3421" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3422" pos:column="2">fputs<pos:position pos:line="3422" pos:column="7"/></name><argument_list pos:line="3422" pos:column="7">(
<argument><expr><literal type="string" pos:line="3423" pos:column="1">"  The FTP protocol requires one of the involved parties to open a second\n"<pos:position pos:line="3423" pos:column="77"/></literal>
<literal type="string" pos:line="3424" pos:column="1">"  connection as soon as data is about to get transferred. There are two ways to\n"<pos:position pos:line="3424" pos:column="84"/></literal>
<literal type="string" pos:line="3425" pos:column="1">"  do this.\n"<pos:position pos:line="3425" pos:column="15"/></literal>
<literal type="string" pos:line="3426" pos:column="1">"\n"<pos:position pos:line="3426" pos:column="5"/></literal>
<literal type="string" pos:line="3427" pos:column="1">"  The default way for curl is to issue the PASV command which causes the\n"<pos:position pos:line="3427" pos:column="77"/></literal>
<literal type="string" pos:line="3428" pos:column="1">"  server to open another port and await another connection performed by the\n"<pos:position pos:line="3428" pos:column="80"/></literal>
<literal type="string" pos:line="3429" pos:column="1">"  client. This is good if the client is behind a firewall that don't allow\n"<pos:position pos:line="3429" pos:column="79"/></literal>
<literal type="string" pos:line="3430" pos:column="1">"  incoming connections.\n"<pos:position pos:line="3430" pos:column="28"/></literal>
<literal type="string" pos:line="3431" pos:column="1">"\n"<pos:position pos:line="3431" pos:column="5"/></literal>
<literal type="string" pos:line="3432" pos:column="1">"        curl ftp.download.com\n"<pos:position pos:line="3432" pos:column="34"/></literal>
<literal type="string" pos:line="3433" pos:column="1">"\n"<pos:position pos:line="3433" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3434" pos:column="3">stdout<pos:position pos:line="3434" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3434" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3434" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3435" pos:column="2">fputs<pos:position pos:line="3435" pos:column="7"/></name><argument_list pos:line="3435" pos:column="7">(
<argument><expr><literal type="string" pos:line="3436" pos:column="1">"  If the server for example, is behind a firewall that don't allow connections\n"<pos:position pos:line="3436" pos:column="83"/></literal>
<literal type="string" pos:line="3437" pos:column="1">"  on other ports than 21 (or if it just doesn't support the PASV command), the\n"<pos:position pos:line="3437" pos:column="83"/></literal>
<literal type="string" pos:line="3438" pos:column="1">"  other way to do it is to use the PORT command and instruct the server to\n"<pos:position pos:line="3438" pos:column="79"/></literal>
<literal type="string" pos:line="3439" pos:column="1">"  connect to the client on the given (as parameters to the PORT command) IP\n"<pos:position pos:line="3439" pos:column="80"/></literal>
<literal type="string" pos:line="3440" pos:column="1">"  number and port.\n"<pos:position pos:line="3440" pos:column="23"/></literal>
<literal type="string" pos:line="3441" pos:column="1">"\n"<pos:position pos:line="3441" pos:column="5"/></literal>
<literal type="string" pos:line="3442" pos:column="1">"  The -P flag to curl supports a few different options. Your machine may have\n"<pos:position pos:line="3442" pos:column="82"/></literal>
<literal type="string" pos:line="3443" pos:column="1">"  several IP-addresses and/or network interfaces and curl allows you to select\n"<pos:position pos:line="3443" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="3444" pos:column="3">stdout<pos:position pos:line="3444" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3444" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3444" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3445" pos:column="2">fputs<pos:position pos:line="3445" pos:column="7"/></name><argument_list pos:line="3445" pos:column="7">(
<argument><expr><literal type="string" pos:line="3446" pos:column="1">"  which of them to use. Default address can also be used:\n"<pos:position pos:line="3446" pos:column="62"/></literal>
<literal type="string" pos:line="3447" pos:column="1">"\n"<pos:position pos:line="3447" pos:column="5"/></literal>
<literal type="string" pos:line="3448" pos:column="1">"        curl -P - ftp.download.com\n"<pos:position pos:line="3448" pos:column="39"/></literal>
<literal type="string" pos:line="3449" pos:column="1">"\n"<pos:position pos:line="3449" pos:column="5"/></literal>
<literal type="string" pos:line="3450" pos:column="1">"  Download with PORT but use the IP address of our 'le0' interface (this does\n"<pos:position pos:line="3450" pos:column="82"/></literal>
<literal type="string" pos:line="3451" pos:column="1">"  not work on windows):\n"<pos:position pos:line="3451" pos:column="28"/></literal>
<literal type="string" pos:line="3452" pos:column="1">"\n"<pos:position pos:line="3452" pos:column="5"/></literal>
<literal type="string" pos:line="3453" pos:column="1">"        curl -P le0 ftp.download.com\n"<pos:position pos:line="3453" pos:column="41"/></literal>
<literal type="string" pos:line="3454" pos:column="1">"\n"<pos:position pos:line="3454" pos:column="5"/></literal>
<literal type="string" pos:line="3455" pos:column="1">"  Download with PORT but use 192.168.0.10 as our IP address to use:\n"<pos:position pos:line="3455" pos:column="72"/></literal>
<literal type="string" pos:line="3456" pos:column="1">"\n"<pos:position pos:line="3456" pos:column="5"/></literal>
<literal type="string" pos:line="3457" pos:column="1">"        curl -P 192.168.0.10 ftp.download.com\n"<pos:position pos:line="3457" pos:column="50"/></literal>
<literal type="string" pos:line="3458" pos:column="1">"\n"<pos:position pos:line="3458" pos:column="5"/></literal>
<literal type="string" pos:line="3459" pos:column="1">"NETWORK INTERFACE\n"<pos:position pos:line="3459" pos:column="22"/></literal>
<literal type="string" pos:line="3460" pos:column="1">"\n"<pos:position pos:line="3460" pos:column="5"/></literal>
<literal type="string" pos:line="3461" pos:column="1">"  Get a web page from a server using a specified port for the interface:\n"<pos:position pos:line="3461" pos:column="77"/></literal>
<literal type="string" pos:line="3462" pos:column="1">"\n"<pos:position pos:line="3462" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3463" pos:column="3">stdout<pos:position pos:line="3463" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3463" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3463" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3464" pos:column="2">fputs<pos:position pos:line="3464" pos:column="7"/></name><argument_list pos:line="3464" pos:column="7">(
<argument><expr><literal type="string" pos:line="3465" pos:column="1">"        curl --interface eth0:1 http://www.netscape.com/\n"<pos:position pos:line="3465" pos:column="61"/></literal>
<literal type="string" pos:line="3466" pos:column="1">"\n"<pos:position pos:line="3466" pos:column="5"/></literal>
<literal type="string" pos:line="3467" pos:column="1">"  or\n"<pos:position pos:line="3467" pos:column="9"/></literal>
<literal type="string" pos:line="3468" pos:column="1">"\n"<pos:position pos:line="3468" pos:column="5"/></literal>
<literal type="string" pos:line="3469" pos:column="1">"        curl --interface 192.168.1.10 http://www.netscape.com/\n"<pos:position pos:line="3469" pos:column="67"/></literal>
<literal type="string" pos:line="3470" pos:column="1">"\n"<pos:position pos:line="3470" pos:column="5"/></literal>
<literal type="string" pos:line="3471" pos:column="1">"HTTPS\n"<pos:position pos:line="3471" pos:column="10"/></literal>
<literal type="string" pos:line="3472" pos:column="1">"\n"<pos:position pos:line="3472" pos:column="5"/></literal>
<literal type="string" pos:line="3473" pos:column="1">"  Secure HTTP requires SSL libraries to be installed and used when curl is\n"<pos:position pos:line="3473" pos:column="79"/></literal>
<literal type="string" pos:line="3474" pos:column="1">"  built. If that is done, curl is capable of retrieving and posting documents\n"<pos:position pos:line="3474" pos:column="82"/></literal>
<literal type="string" pos:line="3475" pos:column="1">"  using the HTTPS protocol.\n"<pos:position pos:line="3475" pos:column="32"/></literal>
<literal type="string" pos:line="3476" pos:column="1">"\n"<pos:position pos:line="3476" pos:column="5"/></literal>
<literal type="string" pos:line="3477" pos:column="1">"  Example:\n"<pos:position pos:line="3477" pos:column="15"/></literal>
<literal type="string" pos:line="3478" pos:column="1">"\n"<pos:position pos:line="3478" pos:column="5"/></literal>
<literal type="string" pos:line="3479" pos:column="1">"        curl https://www.secure-site.com\n"<pos:position pos:line="3479" pos:column="45"/></literal>
<literal type="string" pos:line="3480" pos:column="1">"\n"<pos:position pos:line="3480" pos:column="5"/></literal>
<literal type="string" pos:line="3481" pos:column="1">"  Curl is also capable of using your personal certificates to get/post files\n"<pos:position pos:line="3481" pos:column="81"/></literal></expr></argument>
, <argument><expr><name pos:line="3482" pos:column="3">stdout<pos:position pos:line="3482" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3482" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3482" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3483" pos:column="2">fputs<pos:position pos:line="3483" pos:column="7"/></name><argument_list pos:line="3483" pos:column="7">(
<argument><expr><literal type="string" pos:line="3484" pos:column="1">"  from sites that require valid certificates. The only drawback is that the\n"<pos:position pos:line="3484" pos:column="80"/></literal>
<literal type="string" pos:line="3485" pos:column="1">"  certificate needs to be in PEM-format. PEM is a standard and open format to\n"<pos:position pos:line="3485" pos:column="82"/></literal>
<literal type="string" pos:line="3486" pos:column="1">"  store certificates with, but it is not used by the most commonly used\n"<pos:position pos:line="3486" pos:column="76"/></literal>
<literal type="string" pos:line="3487" pos:column="1">"  browsers (Netscape and MSIE both use the so called PKCS#12 format). If you\n"<pos:position pos:line="3487" pos:column="81"/></literal>
<literal type="string" pos:line="3488" pos:column="1">"  want curl to use the certificates you use with your (favourite) browser, you\n"<pos:position pos:line="3488" pos:column="83"/></literal>
<literal type="string" pos:line="3489" pos:column="1">"  may need to download/compile a converter that can convert your browser's\n"<pos:position pos:line="3489" pos:column="79"/></literal></expr></argument>
, <argument><expr><name pos:line="3490" pos:column="3">stdout<pos:position pos:line="3490" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3490" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3490" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3491" pos:column="2">fputs<pos:position pos:line="3491" pos:column="7"/></name><argument_list pos:line="3491" pos:column="7">(
<argument><expr><literal type="string" pos:line="3492" pos:column="1">"  formatted certificates to PEM formatted ones. This kind of converter is\n"<pos:position pos:line="3492" pos:column="78"/></literal>
<literal type="string" pos:line="3493" pos:column="1">"  included in recent versions of OpenSSL, and for older versions Dr Stephen\n"<pos:position pos:line="3493" pos:column="80"/></literal>
<literal type="string" pos:line="3494" pos:column="1">"  N. Henson has written a patch for SSLeay that adds this functionality. You\n"<pos:position pos:line="3494" pos:column="81"/></literal>
<literal type="string" pos:line="3495" pos:column="1">"  can get his patch (that requires an SSLeay installation) from his site at:\n"<pos:position pos:line="3495" pos:column="81"/></literal>
<literal type="string" pos:line="3496" pos:column="1">"  http://www.drh-consultancy.demon.co.uk/\n"<pos:position pos:line="3496" pos:column="46"/></literal>
<literal type="string" pos:line="3497" pos:column="1">"\n"<pos:position pos:line="3497" pos:column="5"/></literal>
<literal type="string" pos:line="3498" pos:column="1">"  Example on how to automatically retrieve a document using a certificate with\n"<pos:position pos:line="3498" pos:column="83"/></literal>
<literal type="string" pos:line="3499" pos:column="1">"  a personal password:\n"<pos:position pos:line="3499" pos:column="27"/></literal>
<literal type="string" pos:line="3500" pos:column="1">"\n"<pos:position pos:line="3500" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3501" pos:column="3">stdout<pos:position pos:line="3501" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3501" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3501" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3502" pos:column="2">fputs<pos:position pos:line="3502" pos:column="7"/></name><argument_list pos:line="3502" pos:column="7">(
<argument><expr><literal type="string" pos:line="3503" pos:column="1">"        curl -E /path/to/cert.pem:password https://secure.site.com/\n"<pos:position pos:line="3503" pos:column="72"/></literal>
<literal type="string" pos:line="3504" pos:column="1">"\n"<pos:position pos:line="3504" pos:column="5"/></literal>
<literal type="string" pos:line="3505" pos:column="1">"  If you neglect to specify the password on the command line, you will be\n"<pos:position pos:line="3505" pos:column="78"/></literal>
<literal type="string" pos:line="3506" pos:column="1">"  prompted for the correct password before any data can be received.\n"<pos:position pos:line="3506" pos:column="73"/></literal>
<literal type="string" pos:line="3507" pos:column="1">"\n"<pos:position pos:line="3507" pos:column="5"/></literal>
<literal type="string" pos:line="3508" pos:column="1">"  Many older SSL-servers have problems with SSLv3 or TLS, that newer versions\n"<pos:position pos:line="3508" pos:column="82"/></literal>
<literal type="string" pos:line="3509" pos:column="1">"  of OpenSSL etc is using, therefore it is sometimes useful to specify what\n"<pos:position pos:line="3509" pos:column="80"/></literal>
<literal type="string" pos:line="3510" pos:column="1">"  SSL-version curl should use. Use -3, -2 or -1 to specify that exact SSL\n"<pos:position pos:line="3510" pos:column="78"/></literal>
<literal type="string" pos:line="3511" pos:column="1">"  version to use (for SSLv3, SSLv2 or TLSv1 respectively):\n"<pos:position pos:line="3511" pos:column="63"/></literal></expr></argument>
, <argument><expr><name pos:line="3512" pos:column="3">stdout<pos:position pos:line="3512" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3512" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3512" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3513" pos:column="2">fputs<pos:position pos:line="3513" pos:column="7"/></name><argument_list pos:line="3513" pos:column="7">(
<argument><expr><literal type="string" pos:line="3514" pos:column="1">"\n"<pos:position pos:line="3514" pos:column="5"/></literal>
<literal type="string" pos:line="3515" pos:column="1">"        curl -2 https://secure.site.com/\n"<pos:position pos:line="3515" pos:column="45"/></literal>
<literal type="string" pos:line="3516" pos:column="1">"\n"<pos:position pos:line="3516" pos:column="5"/></literal>
<literal type="string" pos:line="3517" pos:column="1">"  Otherwise, curl will first attempt to use v3 and then v2.\n"<pos:position pos:line="3517" pos:column="64"/></literal>
<literal type="string" pos:line="3518" pos:column="1">"\n"<pos:position pos:line="3518" pos:column="5"/></literal>
<literal type="string" pos:line="3519" pos:column="1">"  To use OpenSSL to convert your favourite browser's certificate into a PEM\n"<pos:position pos:line="3519" pos:column="80"/></literal>
<literal type="string" pos:line="3520" pos:column="1">"  formatted one that curl can use, do something like this (assuming netscape,\n"<pos:position pos:line="3520" pos:column="82"/></literal>
<literal type="string" pos:line="3521" pos:column="1">"  but IE is likely to work similarly):\n"<pos:position pos:line="3521" pos:column="43"/></literal>
<literal type="string" pos:line="3522" pos:column="1">"\n"<pos:position pos:line="3522" pos:column="5"/></literal>
<literal type="string" pos:line="3523" pos:column="1">"    You start with hitting the 'security' menu button in netscape.\n"<pos:position pos:line="3523" pos:column="71"/></literal>
<literal type="string" pos:line="3524" pos:column="1">"\n"<pos:position pos:line="3524" pos:column="5"/></literal>
<literal type="string" pos:line="3525" pos:column="1">"    Select 'certificates-&gt;yours' and then pick a certificate in the list\n"<pos:position pos:line="3525" pos:column="80"/></literal>
<literal type="string" pos:line="3526" pos:column="1">"\n"<pos:position pos:line="3526" pos:column="5"/></literal>
<literal type="string" pos:line="3527" pos:column="1">"    Press the 'export' button\n"<pos:position pos:line="3527" pos:column="34"/></literal>
<literal type="string" pos:line="3528" pos:column="1">"\n"<pos:position pos:line="3528" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3529" pos:column="3">stdout<pos:position pos:line="3529" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3529" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3529" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3530" pos:column="2">fputs<pos:position pos:line="3530" pos:column="7"/></name><argument_list pos:line="3530" pos:column="7">(
<argument><expr><literal type="string" pos:line="3531" pos:column="1">"    enter your PIN code for the certs\n"<pos:position pos:line="3531" pos:column="42"/></literal>
<literal type="string" pos:line="3532" pos:column="1">"\n"<pos:position pos:line="3532" pos:column="5"/></literal>
<literal type="string" pos:line="3533" pos:column="1">"    select a proper place to save it\n"<pos:position pos:line="3533" pos:column="41"/></literal>
<literal type="string" pos:line="3534" pos:column="1">"\n"<pos:position pos:line="3534" pos:column="5"/></literal>
<literal type="string" pos:line="3535" pos:column="1">"    Run the 'openssl' application to convert the certificate. If you cd to the\n"<pos:position pos:line="3535" pos:column="83"/></literal>
<literal type="string" pos:line="3536" pos:column="1">"    openssl installation, you can do it like:\n"<pos:position pos:line="3536" pos:column="50"/></literal>
<literal type="string" pos:line="3537" pos:column="1">"\n"<pos:position pos:line="3537" pos:column="5"/></literal>
<literal type="string" pos:line="3538" pos:column="1">"     # ./apps/openssl pkcs12 -in [file you saved] -clcerts -out [PEMfile]\n"<pos:position pos:line="3538" pos:column="78"/></literal>
<literal type="string" pos:line="3539" pos:column="1">"\n"<pos:position pos:line="3539" pos:column="5"/></literal>
<literal type="string" pos:line="3540" pos:column="1">"\n"<pos:position pos:line="3540" pos:column="5"/></literal>
<literal type="string" pos:line="3541" pos:column="1">"RESUMING FILE TRANSFERS\n"<pos:position pos:line="3541" pos:column="28"/></literal>
<literal type="string" pos:line="3542" pos:column="1">"\n"<pos:position pos:line="3542" pos:column="5"/></literal>
<literal type="string" pos:line="3543" pos:column="1">" To continue a file transfer where it was previously aborted, curl supports\n"<pos:position pos:line="3543" pos:column="80"/></literal>
<literal type="string" pos:line="3544" pos:column="1">" resume on http(s) downloads as well as ftp uploads and downloads.\n"<pos:position pos:line="3544" pos:column="71"/></literal>
<literal type="string" pos:line="3545" pos:column="1">"\n"<pos:position pos:line="3545" pos:column="5"/></literal>
<literal type="string" pos:line="3546" pos:column="1">" Continue downloading a document:\n"<pos:position pos:line="3546" pos:column="38"/></literal>
<literal type="string" pos:line="3547" pos:column="1">"\n"<pos:position pos:line="3547" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3548" pos:column="3">stdout<pos:position pos:line="3548" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3548" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3548" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3549" pos:column="2">fputs<pos:position pos:line="3549" pos:column="7"/></name><argument_list pos:line="3549" pos:column="7">(
<argument><expr><literal type="string" pos:line="3550" pos:column="1">"        curl -C - -o file ftp://ftp.server.com/path/file\n"<pos:position pos:line="3550" pos:column="61"/></literal>
<literal type="string" pos:line="3551" pos:column="1">"\n"<pos:position pos:line="3551" pos:column="5"/></literal>
<literal type="string" pos:line="3552" pos:column="1">" Continue uploading a document(*1):\n"<pos:position pos:line="3552" pos:column="40"/></literal>
<literal type="string" pos:line="3553" pos:column="1">"\n"<pos:position pos:line="3553" pos:column="5"/></literal>
<literal type="string" pos:line="3554" pos:column="1">"        curl -C - -T file ftp://ftp.server.com/path/file\n"<pos:position pos:line="3554" pos:column="61"/></literal>
<literal type="string" pos:line="3555" pos:column="1">"\n"<pos:position pos:line="3555" pos:column="5"/></literal>
<literal type="string" pos:line="3556" pos:column="1">" Continue downloading a document from a web server(*2):\n"<pos:position pos:line="3556" pos:column="60"/></literal>
<literal type="string" pos:line="3557" pos:column="1">"\n"<pos:position pos:line="3557" pos:column="5"/></literal>
<literal type="string" pos:line="3558" pos:column="1">"        curl -C - -o file http://www.server.com/\n"<pos:position pos:line="3558" pos:column="53"/></literal>
<literal type="string" pos:line="3559" pos:column="1">"\n"<pos:position pos:line="3559" pos:column="5"/></literal>
<literal type="string" pos:line="3560" pos:column="1">" (*1) = This requires that the ftp server supports the non-standard command\n"<pos:position pos:line="3560" pos:column="80"/></literal>
<literal type="string" pos:line="3561" pos:column="1">"        SIZE. If it doesn't, curl will say so.\n"<pos:position pos:line="3561" pos:column="51"/></literal>
<literal type="string" pos:line="3562" pos:column="1">"\n"<pos:position pos:line="3562" pos:column="5"/></literal>
<literal type="string" pos:line="3563" pos:column="1">" (*2) = This requires that the web server supports at least HTTP/1.1. If it\n"<pos:position pos:line="3563" pos:column="80"/></literal>
<literal type="string" pos:line="3564" pos:column="1">"        doesn't, curl will say so.\n"<pos:position pos:line="3564" pos:column="39"/></literal>
<literal type="string" pos:line="3565" pos:column="1">"\n"<pos:position pos:line="3565" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3566" pos:column="3">stdout<pos:position pos:line="3566" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3566" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3566" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3567" pos:column="2">fputs<pos:position pos:line="3567" pos:column="7"/></name><argument_list pos:line="3567" pos:column="7">(
<argument><expr><literal type="string" pos:line="3568" pos:column="1">"TIME CONDITIONS\n"<pos:position pos:line="3568" pos:column="20"/></literal>
<literal type="string" pos:line="3569" pos:column="1">"\n"<pos:position pos:line="3569" pos:column="5"/></literal>
<literal type="string" pos:line="3570" pos:column="1">" HTTP allows a client to specify a time condition for the document it\n"<pos:position pos:line="3570" pos:column="74"/></literal>
<literal type="string" pos:line="3571" pos:column="1">" requests. It is If-Modified-Since or If-Unmodified-Since. Curl allow you to\n"<pos:position pos:line="3571" pos:column="81"/></literal>
<literal type="string" pos:line="3572" pos:column="1">" specify them with the -z/--time-cond flag.\n"<pos:position pos:line="3572" pos:column="48"/></literal>
<literal type="string" pos:line="3573" pos:column="1">"\n"<pos:position pos:line="3573" pos:column="5"/></literal>
<literal type="string" pos:line="3574" pos:column="1">" For example, you can easily make a download that only gets performed if the\n"<pos:position pos:line="3574" pos:column="81"/></literal>
<literal type="string" pos:line="3575" pos:column="1">" remote file is newer than a local copy. It would be made like:\n"<pos:position pos:line="3575" pos:column="68"/></literal>
<literal type="string" pos:line="3576" pos:column="1">"\n"<pos:position pos:line="3576" pos:column="5"/></literal>
<literal type="string" pos:line="3577" pos:column="1">"        curl -z local.html http://remote.server.com/remote.html\n"<pos:position pos:line="3577" pos:column="68"/></literal>
<literal type="string" pos:line="3578" pos:column="1">"\n"<pos:position pos:line="3578" pos:column="5"/></literal>
<literal type="string" pos:line="3579" pos:column="1">" Or you can download a file only if the local file is newer than the remote\n"<pos:position pos:line="3579" pos:column="80"/></literal></expr></argument>
, <argument><expr><name pos:line="3580" pos:column="3">stdout<pos:position pos:line="3580" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3580" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3580" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3581" pos:column="2">fputs<pos:position pos:line="3581" pos:column="7"/></name><argument_list pos:line="3581" pos:column="7">(
<argument><expr><literal type="string" pos:line="3582" pos:column="1">" one. Do this by prepending the date string with a '-', as in:\n"<pos:position pos:line="3582" pos:column="67"/></literal>
<literal type="string" pos:line="3583" pos:column="1">"\n"<pos:position pos:line="3583" pos:column="5"/></literal>
<literal type="string" pos:line="3584" pos:column="1">"        curl -z -local.html http://remote.server.com/remote.html\n"<pos:position pos:line="3584" pos:column="69"/></literal>
<literal type="string" pos:line="3585" pos:column="1">"\n"<pos:position pos:line="3585" pos:column="5"/></literal>
<literal type="string" pos:line="3586" pos:column="1">" You can specify a \"free text\" date as condition. Tell curl to only download\n"<pos:position pos:line="3586" pos:column="83"/></literal>
<literal type="string" pos:line="3587" pos:column="1">" the file if it was updated since January 12, 2012:\n"<pos:position pos:line="3587" pos:column="56"/></literal>
<literal type="string" pos:line="3588" pos:column="1">"\n"<pos:position pos:line="3588" pos:column="5"/></literal>
<literal type="string" pos:line="3589" pos:column="1">"        curl -z \"Jan 12 2012\" http://remote.server.com/remote.html\n"<pos:position pos:line="3589" pos:column="73"/></literal>
<literal type="string" pos:line="3590" pos:column="1">"\n"<pos:position pos:line="3590" pos:column="5"/></literal>
<literal type="string" pos:line="3591" pos:column="1">" Curl will then accept a wide range of date formats. You always make the date\n"<pos:position pos:line="3591" pos:column="82"/></literal>
<literal type="string" pos:line="3592" pos:column="1">" check the other way around by prepending it with a dash '-'.\n"<pos:position pos:line="3592" pos:column="66"/></literal>
<literal type="string" pos:line="3593" pos:column="1">"\n"<pos:position pos:line="3593" pos:column="5"/></literal>
<literal type="string" pos:line="3594" pos:column="1">"DICT\n"<pos:position pos:line="3594" pos:column="9"/></literal>
<literal type="string" pos:line="3595" pos:column="1">"\n"<pos:position pos:line="3595" pos:column="5"/></literal>
<literal type="string" pos:line="3596" pos:column="1">"  For fun try\n"<pos:position pos:line="3596" pos:column="18"/></literal>
<literal type="string" pos:line="3597" pos:column="1">"\n"<pos:position pos:line="3597" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3598" pos:column="3">stdout<pos:position pos:line="3598" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3598" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3598" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3599" pos:column="2">fputs<pos:position pos:line="3599" pos:column="7"/></name><argument_list pos:line="3599" pos:column="7">(
<argument><expr><literal type="string" pos:line="3600" pos:column="1">"        curl dict://dict.org/m:curl\n"<pos:position pos:line="3600" pos:column="40"/></literal>
<literal type="string" pos:line="3601" pos:column="1">"        curl dict://dict.org/d:heisenbug:jargon\n"<pos:position pos:line="3601" pos:column="52"/></literal>
<literal type="string" pos:line="3602" pos:column="1">"        curl dict://dict.org/d:daniel:web1913\n"<pos:position pos:line="3602" pos:column="50"/></literal>
<literal type="string" pos:line="3603" pos:column="1">"\n"<pos:position pos:line="3603" pos:column="5"/></literal>
<literal type="string" pos:line="3604" pos:column="1">"  Aliases for 'm' are 'match' and 'find', and aliases for 'd' are 'define'\n"<pos:position pos:line="3604" pos:column="79"/></literal>
<literal type="string" pos:line="3605" pos:column="1">"  and 'lookup'. For example,\n"<pos:position pos:line="3605" pos:column="33"/></literal>
<literal type="string" pos:line="3606" pos:column="1">"\n"<pos:position pos:line="3606" pos:column="5"/></literal>
<literal type="string" pos:line="3607" pos:column="1">"        curl dict://dict.org/find:curl\n"<pos:position pos:line="3607" pos:column="43"/></literal>
<literal type="string" pos:line="3608" pos:column="1">"\n"<pos:position pos:line="3608" pos:column="5"/></literal>
<literal type="string" pos:line="3609" pos:column="1">"  Commands that break the URL description of the RFC (but not the DICT\n"<pos:position pos:line="3609" pos:column="75"/></literal>
<literal type="string" pos:line="3610" pos:column="1">"  protocol) are\n"<pos:position pos:line="3610" pos:column="20"/></literal>
<literal type="string" pos:line="3611" pos:column="1">"\n"<pos:position pos:line="3611" pos:column="5"/></literal>
<literal type="string" pos:line="3612" pos:column="1">"        curl dict://dict.org/show:db\n"<pos:position pos:line="3612" pos:column="41"/></literal>
<literal type="string" pos:line="3613" pos:column="1">"        curl dict://dict.org/show:strat\n"<pos:position pos:line="3613" pos:column="44"/></literal>
<literal type="string" pos:line="3614" pos:column="1">"\n"<pos:position pos:line="3614" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3615" pos:column="3">stdout<pos:position pos:line="3615" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3615" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3615" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3616" pos:column="2">fputs<pos:position pos:line="3616" pos:column="7"/></name><argument_list pos:line="3616" pos:column="7">(
<argument><expr><literal type="string" pos:line="3617" pos:column="1">"  Authentication is still missing (but this is not required by the RFC)\n"<pos:position pos:line="3617" pos:column="76"/></literal>
<literal type="string" pos:line="3618" pos:column="1">"\n"<pos:position pos:line="3618" pos:column="5"/></literal>
<literal type="string" pos:line="3619" pos:column="1">"LDAP\n"<pos:position pos:line="3619" pos:column="9"/></literal>
<literal type="string" pos:line="3620" pos:column="1">"\n"<pos:position pos:line="3620" pos:column="5"/></literal>
<literal type="string" pos:line="3621" pos:column="1">"  If you have installed the OpenLDAP library, curl can take advantage of it\n"<pos:position pos:line="3621" pos:column="80"/></literal>
<literal type="string" pos:line="3622" pos:column="1">"  and offer ldap:// support.\n"<pos:position pos:line="3622" pos:column="33"/></literal>
<literal type="string" pos:line="3623" pos:column="1">"\n"<pos:position pos:line="3623" pos:column="5"/></literal>
<literal type="string" pos:line="3624" pos:column="1">"  LDAP is a complex thing and writing an LDAP query is not an easy task. I do\n"<pos:position pos:line="3624" pos:column="82"/></literal>
<literal type="string" pos:line="3625" pos:column="1">"  advice you to dig up the syntax description for that elsewhere. Two places\n"<pos:position pos:line="3625" pos:column="81"/></literal>
<literal type="string" pos:line="3626" pos:column="1">"  that might suit you are:\n"<pos:position pos:line="3626" pos:column="31"/></literal>
<literal type="string" pos:line="3627" pos:column="1">"\n"<pos:position pos:line="3627" pos:column="5"/></literal>
<literal type="string" pos:line="3628" pos:column="1">"  Netscape's \"Netscape Directory SDK 3.0 for C Programmer's Guide Chapter 10:\n"<pos:position pos:line="3628" pos:column="83"/></literal>
<literal type="string" pos:line="3629" pos:column="1">"  Working with LDAP URLs\":\n"<pos:position pos:line="3629" pos:column="32"/></literal></expr></argument>
, <argument><expr><name pos:line="3630" pos:column="3">stdout<pos:position pos:line="3630" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3630" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3630" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3631" pos:column="2">fputs<pos:position pos:line="3631" pos:column="7"/></name><argument_list pos:line="3631" pos:column="7">(
<argument><expr><literal type="string" pos:line="3632" pos:column="1">"  http://developer.netscape.com/docs/manuals/dirsdk/csdk30/url.htm\n"<pos:position pos:line="3632" pos:column="71"/></literal>
<literal type="string" pos:line="3633" pos:column="1">"\n"<pos:position pos:line="3633" pos:column="5"/></literal>
<literal type="string" pos:line="3634" pos:column="1">"  RFC 2255, \"The LDAP URL Format\" http://curl.haxx.se/rfc/rfc2255.txt\n"<pos:position pos:line="3634" pos:column="76"/></literal>
<literal type="string" pos:line="3635" pos:column="1">"\n"<pos:position pos:line="3635" pos:column="5"/></literal>
<literal type="string" pos:line="3636" pos:column="1">"  To show you an example, this is now I can get all people from my local LDAP\n"<pos:position pos:line="3636" pos:column="82"/></literal>
<literal type="string" pos:line="3637" pos:column="1">"  server that has a certain sub-domain in their email address:\n"<pos:position pos:line="3637" pos:column="67"/></literal>
<literal type="string" pos:line="3638" pos:column="1">"\n"<pos:position pos:line="3638" pos:column="5"/></literal>
<literal type="string" pos:line="3639" pos:column="1">"        curl -B \"ldap://ldap.frontec.se/o=frontec??sub?mail=*sth.frontec.se\"\n"<pos:position pos:line="3639" pos:column="83"/></literal>
<literal type="string" pos:line="3640" pos:column="1">"\n"<pos:position pos:line="3640" pos:column="5"/></literal>
<literal type="string" pos:line="3641" pos:column="1">"  If I want the same info in HTML format, I can get it by not using the -B\n"<pos:position pos:line="3641" pos:column="79"/></literal>
<literal type="string" pos:line="3642" pos:column="1">"  (enforce ASCII) flag.\n"<pos:position pos:line="3642" pos:column="28"/></literal>
<literal type="string" pos:line="3643" pos:column="1">"\n"<pos:position pos:line="3643" pos:column="5"/></literal>
<literal type="string" pos:line="3644" pos:column="1">"ENVIRONMENT VARIABLES\n"<pos:position pos:line="3644" pos:column="26"/></literal>
<literal type="string" pos:line="3645" pos:column="1">"\n"<pos:position pos:line="3645" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3646" pos:column="3">stdout<pos:position pos:line="3646" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3646" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3646" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3647" pos:column="2">fputs<pos:position pos:line="3647" pos:column="7"/></name><argument_list pos:line="3647" pos:column="7">(
<argument><expr><literal type="string" pos:line="3648" pos:column="1">"  Curl reads and understands the following environment variables:\n"<pos:position pos:line="3648" pos:column="70"/></literal>
<literal type="string" pos:line="3649" pos:column="1">"\n"<pos:position pos:line="3649" pos:column="5"/></literal>
<literal type="string" pos:line="3650" pos:column="1">"        http_proxy, HTTPS_PROXY, FTP_PROXY\n"<pos:position pos:line="3650" pos:column="47"/></literal>
<literal type="string" pos:line="3651" pos:column="1">"\n"<pos:position pos:line="3651" pos:column="5"/></literal>
<literal type="string" pos:line="3652" pos:column="1">"  They should be set for protocol-specific proxies. General proxy should be\n"<pos:position pos:line="3652" pos:column="80"/></literal>
<literal type="string" pos:line="3653" pos:column="1">"  set with\n"<pos:position pos:line="3653" pos:column="15"/></literal>
<literal type="string" pos:line="3654" pos:column="1">"\n"<pos:position pos:line="3654" pos:column="5"/></literal>
<literal type="string" pos:line="3655" pos:column="1">"        ALL_PROXY\n"<pos:position pos:line="3655" pos:column="22"/></literal>
<literal type="string" pos:line="3656" pos:column="1">"\n"<pos:position pos:line="3656" pos:column="5"/></literal>
<literal type="string" pos:line="3657" pos:column="1">"  A comma-separated list of host names that shouldn't go through any proxy is\n"<pos:position pos:line="3657" pos:column="82"/></literal>
<literal type="string" pos:line="3658" pos:column="1">"  set in (only an asterisk, '*' matches all hosts)\n"<pos:position pos:line="3658" pos:column="55"/></literal>
<literal type="string" pos:line="3659" pos:column="1">"\n"<pos:position pos:line="3659" pos:column="5"/></literal>
<literal type="string" pos:line="3660" pos:column="1">"        NO_PROXY\n"<pos:position pos:line="3660" pos:column="21"/></literal>
<literal type="string" pos:line="3661" pos:column="1">"\n"<pos:position pos:line="3661" pos:column="5"/></literal>
<literal type="string" pos:line="3662" pos:column="1">"  If the host name matches one of these strings, or the host is within the\n"<pos:position pos:line="3662" pos:column="79"/></literal></expr></argument>
, <argument><expr><name pos:line="3663" pos:column="3">stdout<pos:position pos:line="3663" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3663" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3663" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3664" pos:column="2">fputs<pos:position pos:line="3664" pos:column="7"/></name><argument_list pos:line="3664" pos:column="7">(
<argument><expr><literal type="string" pos:line="3665" pos:column="1">"  domain of one of these strings, transactions with that node will not be\n"<pos:position pos:line="3665" pos:column="78"/></literal>
<literal type="string" pos:line="3666" pos:column="1">"  proxied.\n"<pos:position pos:line="3666" pos:column="15"/></literal>
<literal type="string" pos:line="3667" pos:column="1">"\n"<pos:position pos:line="3667" pos:column="5"/></literal>
<literal type="string" pos:line="3668" pos:column="1">"\n"<pos:position pos:line="3668" pos:column="5"/></literal>
<literal type="string" pos:line="3669" pos:column="1">"  The usage of the -x/--proxy flag overrides the environment variables.\n"<pos:position pos:line="3669" pos:column="76"/></literal>
<literal type="string" pos:line="3670" pos:column="1">"\n"<pos:position pos:line="3670" pos:column="5"/></literal>
<literal type="string" pos:line="3671" pos:column="1">"NETRC\n"<pos:position pos:line="3671" pos:column="10"/></literal>
<literal type="string" pos:line="3672" pos:column="1">"\n"<pos:position pos:line="3672" pos:column="5"/></literal>
<literal type="string" pos:line="3673" pos:column="1">"  Unix introduced the .netrc concept a long time ago. It is a way for a user\n"<pos:position pos:line="3673" pos:column="81"/></literal>
<literal type="string" pos:line="3674" pos:column="1">"  to specify name and password for commonly visited ftp sites in a file so\n"<pos:position pos:line="3674" pos:column="79"/></literal>
<literal type="string" pos:line="3675" pos:column="1">"  that you don't have to type them in each time you visit those sites. You\n"<pos:position pos:line="3675" pos:column="79"/></literal>
<literal type="string" pos:line="3676" pos:column="1">"  realize this is a big security risk if someone else gets hold of your\n"<pos:position pos:line="3676" pos:column="76"/></literal></expr></argument>
, <argument><expr><name pos:line="3677" pos:column="3">stdout<pos:position pos:line="3677" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3677" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3677" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3678" pos:column="2">fputs<pos:position pos:line="3678" pos:column="7"/></name><argument_list pos:line="3678" pos:column="7">(
<argument><expr><literal type="string" pos:line="3679" pos:column="1">"  passwords, so therefore most unix programs won't read this file unless it is\n"<pos:position pos:line="3679" pos:column="83"/></literal>
<literal type="string" pos:line="3680" pos:column="1">"  only readable by yourself (curl doesn't care though).\n"<pos:position pos:line="3680" pos:column="60"/></literal>
<literal type="string" pos:line="3681" pos:column="1">"\n"<pos:position pos:line="3681" pos:column="5"/></literal>
<literal type="string" pos:line="3682" pos:column="1">"  Curl supports .netrc files if told so (using the -n/--netrc and\n"<pos:position pos:line="3682" pos:column="70"/></literal>
<literal type="string" pos:line="3683" pos:column="1">"  --netrc-optional options). This is not restricted to only ftp,\n"<pos:position pos:line="3683" pos:column="69"/></literal>
<literal type="string" pos:line="3684" pos:column="1">"  but curl can use it for all protocols where authentication is used.\n"<pos:position pos:line="3684" pos:column="74"/></literal>
<literal type="string" pos:line="3685" pos:column="1">"\n"<pos:position pos:line="3685" pos:column="5"/></literal>
<literal type="string" pos:line="3686" pos:column="1">"  A very simple .netrc file could look something like:\n"<pos:position pos:line="3686" pos:column="59"/></literal>
<literal type="string" pos:line="3687" pos:column="1">"\n"<pos:position pos:line="3687" pos:column="5"/></literal>
<literal type="string" pos:line="3688" pos:column="1">"        machine curl.haxx.se login iamdaniel password mysecret\n"<pos:position pos:line="3688" pos:column="67"/></literal>
<literal type="string" pos:line="3689" pos:column="1">"\n"<pos:position pos:line="3689" pos:column="5"/></literal>
<literal type="string" pos:line="3690" pos:column="1">"CUSTOM OUTPUT\n"<pos:position pos:line="3690" pos:column="18"/></literal>
<literal type="string" pos:line="3691" pos:column="1">"\n"<pos:position pos:line="3691" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3692" pos:column="3">stdout<pos:position pos:line="3692" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3692" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3692" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3693" pos:column="2">fputs<pos:position pos:line="3693" pos:column="7"/></name><argument_list pos:line="3693" pos:column="7">(
<argument><expr><literal type="string" pos:line="3694" pos:column="1">"  To better allow script programmers to get to know about the progress of\n"<pos:position pos:line="3694" pos:column="78"/></literal>
<literal type="string" pos:line="3695" pos:column="1">"  curl, the -w/--write-out option was introduced. Using this, you can specify\n"<pos:position pos:line="3695" pos:column="82"/></literal>
<literal type="string" pos:line="3696" pos:column="1">"  what information from the previous transfer you want to extract.\n"<pos:position pos:line="3696" pos:column="71"/></literal>
<literal type="string" pos:line="3697" pos:column="1">"\n"<pos:position pos:line="3697" pos:column="5"/></literal>
<literal type="string" pos:line="3698" pos:column="1">"  To display the amount of bytes downloaded together with some text and an\n"<pos:position pos:line="3698" pos:column="79"/></literal>
<literal type="string" pos:line="3699" pos:column="1">"  ending newline:\n"<pos:position pos:line="3699" pos:column="22"/></literal>
<literal type="string" pos:line="3700" pos:column="1">"\n"<pos:position pos:line="3700" pos:column="5"/></literal>
<literal type="string" pos:line="3701" pos:column="1">"        curl -w 'We downloaded %{size_download} bytes\\n' www.download.com\n"<pos:position pos:line="3701" pos:column="79"/></literal>
<literal type="string" pos:line="3702" pos:column="1">"\n"<pos:position pos:line="3702" pos:column="5"/></literal>
<literal type="string" pos:line="3703" pos:column="1">"KERBEROS FTP TRANSFER\n"<pos:position pos:line="3703" pos:column="26"/></literal>
<literal type="string" pos:line="3704" pos:column="1">"\n"<pos:position pos:line="3704" pos:column="5"/></literal>
<literal type="string" pos:line="3705" pos:column="1">"  Curl supports kerberos4 and kerberos5/GSSAPI for FTP transfers. You need\n"<pos:position pos:line="3705" pos:column="79"/></literal></expr></argument>
, <argument><expr><name pos:line="3706" pos:column="3">stdout<pos:position pos:line="3706" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3706" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3706" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3707" pos:column="2">fputs<pos:position pos:line="3707" pos:column="7"/></name><argument_list pos:line="3707" pos:column="7">(
<argument><expr><literal type="string" pos:line="3708" pos:column="1">"  the kerberos package installed and used at curl build time for it to be\n"<pos:position pos:line="3708" pos:column="78"/></literal>
<literal type="string" pos:line="3709" pos:column="1">"  used.\n"<pos:position pos:line="3709" pos:column="12"/></literal>
<literal type="string" pos:line="3710" pos:column="1">"\n"<pos:position pos:line="3710" pos:column="5"/></literal>
<literal type="string" pos:line="3711" pos:column="1">"  First, get the krb-ticket the normal way, like with the kinit/kauth tool.\n"<pos:position pos:line="3711" pos:column="80"/></literal>
<literal type="string" pos:line="3712" pos:column="1">"  Then use curl in way similar to:\n"<pos:position pos:line="3712" pos:column="39"/></literal>
<literal type="string" pos:line="3713" pos:column="1">"\n"<pos:position pos:line="3713" pos:column="5"/></literal>
<literal type="string" pos:line="3714" pos:column="1">"        curl --krb private ftp://krb4site.com -u username:fakepwd\n"<pos:position pos:line="3714" pos:column="70"/></literal>
<literal type="string" pos:line="3715" pos:column="1">"\n"<pos:position pos:line="3715" pos:column="5"/></literal>
<literal type="string" pos:line="3716" pos:column="1">"  There's no use for a password on the -u switch, but a blank one will make\n"<pos:position pos:line="3716" pos:column="80"/></literal>
<literal type="string" pos:line="3717" pos:column="1">"  curl ask for one and you already entered the real password to kinit/kauth.\n"<pos:position pos:line="3717" pos:column="81"/></literal>
<literal type="string" pos:line="3718" pos:column="1">"\n"<pos:position pos:line="3718" pos:column="5"/></literal>
<literal type="string" pos:line="3719" pos:column="1">"TELNET\n"<pos:position pos:line="3719" pos:column="11"/></literal>
<literal type="string" pos:line="3720" pos:column="1">"\n"<pos:position pos:line="3720" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3721" pos:column="3">stdout<pos:position pos:line="3721" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3721" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3721" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3722" pos:column="2">fputs<pos:position pos:line="3722" pos:column="7"/></name><argument_list pos:line="3722" pos:column="7">(
<argument><expr><literal type="string" pos:line="3723" pos:column="1">"  The curl telnet support is basic and very easy to use. Curl passes all data\n"<pos:position pos:line="3723" pos:column="82"/></literal>
<literal type="string" pos:line="3724" pos:column="1">"  passed to it on stdin to the remote server. Connect to a remote telnet\n"<pos:position pos:line="3724" pos:column="77"/></literal>
<literal type="string" pos:line="3725" pos:column="1">"  server using a command line similar to:\n"<pos:position pos:line="3725" pos:column="46"/></literal>
<literal type="string" pos:line="3726" pos:column="1">"\n"<pos:position pos:line="3726" pos:column="5"/></literal>
<literal type="string" pos:line="3727" pos:column="1">"        curl telnet://remote.server.com\n"<pos:position pos:line="3727" pos:column="44"/></literal>
<literal type="string" pos:line="3728" pos:column="1">"\n"<pos:position pos:line="3728" pos:column="5"/></literal>
<literal type="string" pos:line="3729" pos:column="1">"  And enter the data to pass to the server on stdin. The result will be sent\n"<pos:position pos:line="3729" pos:column="81"/></literal>
<literal type="string" pos:line="3730" pos:column="1">"  to stdout or to the file you specify with -o.\n"<pos:position pos:line="3730" pos:column="52"/></literal>
<literal type="string" pos:line="3731" pos:column="1">"\n"<pos:position pos:line="3731" pos:column="5"/></literal>
<literal type="string" pos:line="3732" pos:column="1">"  You might want the -N/--no-buffer option to switch off the buffered output\n"<pos:position pos:line="3732" pos:column="81"/></literal>
<literal type="string" pos:line="3733" pos:column="1">"  for slow connections or similar.\n"<pos:position pos:line="3733" pos:column="39"/></literal>
<literal type="string" pos:line="3734" pos:column="1">"\n"<pos:position pos:line="3734" pos:column="5"/></literal></expr></argument>
, <argument><expr><name pos:line="3735" pos:column="3">stdout<pos:position pos:line="3735" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3735" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3735" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3736" pos:column="2">fputs<pos:position pos:line="3736" pos:column="7"/></name><argument_list pos:line="3736" pos:column="7">(
<argument><expr><literal type="string" pos:line="3737" pos:column="1">"  Pass options to the telnet protocol negotiation, by using the -t option. To\n"<pos:position pos:line="3737" pos:column="82"/></literal>
<literal type="string" pos:line="3738" pos:column="1">"  tell the server we use a vt100 terminal, try something like:\n"<pos:position pos:line="3738" pos:column="67"/></literal>
<literal type="string" pos:line="3739" pos:column="1">"\n"<pos:position pos:line="3739" pos:column="5"/></literal>
<literal type="string" pos:line="3740" pos:column="1">"        curl -tTTYPE=vt100 telnet://remote.server.com\n"<pos:position pos:line="3740" pos:column="58"/></literal>
<literal type="string" pos:line="3741" pos:column="1">"\n"<pos:position pos:line="3741" pos:column="5"/></literal>
<literal type="string" pos:line="3742" pos:column="1">"  Other interesting options for it -t include:\n"<pos:position pos:line="3742" pos:column="51"/></literal>
<literal type="string" pos:line="3743" pos:column="1">"\n"<pos:position pos:line="3743" pos:column="5"/></literal>
<literal type="string" pos:line="3744" pos:column="1">"   - XDISPLOC=&lt;X display&gt; Sets the X display location.\n"<pos:position pos:line="3744" pos:column="65"/></literal>
<literal type="string" pos:line="3745" pos:column="1">"\n"<pos:position pos:line="3745" pos:column="5"/></literal>
<literal type="string" pos:line="3746" pos:column="1">"   - NEW_ENV=&lt;var,val&gt; Sets an environment variable.\n"<pos:position pos:line="3746" pos:column="63"/></literal>
<literal type="string" pos:line="3747" pos:column="1">"\n"<pos:position pos:line="3747" pos:column="5"/></literal>
<literal type="string" pos:line="3748" pos:column="1">"  NOTE: the telnet protocol does not specify any way to login with a specified\n"<pos:position pos:line="3748" pos:column="83"/></literal></expr></argument>
, <argument><expr><name pos:line="3749" pos:column="3">stdout<pos:position pos:line="3749" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3749" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3749" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3750" pos:column="2">fputs<pos:position pos:line="3750" pos:column="7"/></name><argument_list pos:line="3750" pos:column="7">(
<argument><expr><literal type="string" pos:line="3751" pos:column="1">"  user and password so curl can't do that automatically. To do that, you need\n"<pos:position pos:line="3751" pos:column="82"/></literal>
<literal type="string" pos:line="3752" pos:column="1">"  to track when the login prompt is received and send the username and\n"<pos:position pos:line="3752" pos:column="75"/></literal>
<literal type="string" pos:line="3753" pos:column="1">"  password accordingly.\n"<pos:position pos:line="3753" pos:column="28"/></literal>
<literal type="string" pos:line="3754" pos:column="1">"\n"<pos:position pos:line="3754" pos:column="5"/></literal>
<literal type="string" pos:line="3755" pos:column="1">"PERSISTENT CONNECTIONS\n"<pos:position pos:line="3755" pos:column="27"/></literal>
<literal type="string" pos:line="3756" pos:column="1">"\n"<pos:position pos:line="3756" pos:column="5"/></literal>
<literal type="string" pos:line="3757" pos:column="1">"  Specifying multiple files on a single command line will make curl transfer\n"<pos:position pos:line="3757" pos:column="81"/></literal>
<literal type="string" pos:line="3758" pos:column="1">"  all of them, one after the other in the specified order.\n"<pos:position pos:line="3758" pos:column="63"/></literal>
<literal type="string" pos:line="3759" pos:column="1">"\n"<pos:position pos:line="3759" pos:column="5"/></literal>
<literal type="string" pos:line="3760" pos:column="1">"  libcurl will attempt to use persistent connections for the transfers so that\n"<pos:position pos:line="3760" pos:column="83"/></literal>
<literal type="string" pos:line="3761" pos:column="1">"  the second transfer to the same host can use the same connection that was\n"<pos:position pos:line="3761" pos:column="80"/></literal></expr></argument>
, <argument><expr><name pos:line="3762" pos:column="3">stdout<pos:position pos:line="3762" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3762" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3762" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3763" pos:column="2">fputs<pos:position pos:line="3763" pos:column="7"/></name><argument_list pos:line="3763" pos:column="7">(
<argument><expr><literal type="string" pos:line="3764" pos:column="1">"  already initiated and was left open in the previous transfer. This greatly\n"<pos:position pos:line="3764" pos:column="81"/></literal>
<literal type="string" pos:line="3765" pos:column="1">"  decreases connection time for all but the first transfer and it makes a far\n"<pos:position pos:line="3765" pos:column="82"/></literal>
<literal type="string" pos:line="3766" pos:column="1">"  better use of the network.\n"<pos:position pos:line="3766" pos:column="33"/></literal>
<literal type="string" pos:line="3767" pos:column="1">"\n"<pos:position pos:line="3767" pos:column="5"/></literal>
<literal type="string" pos:line="3768" pos:column="1">"  Note that curl cannot use persistent connections for transfers that are used\n"<pos:position pos:line="3768" pos:column="83"/></literal>
<literal type="string" pos:line="3769" pos:column="1">"  in subsequence curl invokes. Try to stuff as many URLs as possible on the\n"<pos:position pos:line="3769" pos:column="80"/></literal>
<literal type="string" pos:line="3770" pos:column="1">"  same command line if they are using the same host, as that'll make the\n"<pos:position pos:line="3770" pos:column="77"/></literal>
<literal type="string" pos:line="3771" pos:column="1">"  transfers faster. If you use a http proxy for file transfers, practically\n"<pos:position pos:line="3771" pos:column="80"/></literal></expr></argument>
, <argument><expr><name pos:line="3772" pos:column="3">stdout<pos:position pos:line="3772" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3772" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3772" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3773" pos:column="2">fputs<pos:position pos:line="3773" pos:column="7"/></name><argument_list pos:line="3773" pos:column="7">(
<argument><expr><literal type="string" pos:line="3774" pos:column="1">"  all transfers will be persistent.\n"<pos:position pos:line="3774" pos:column="40"/></literal>
<literal type="string" pos:line="3775" pos:column="1">"\n"<pos:position pos:line="3775" pos:column="5"/></literal>
<literal type="string" pos:line="3776" pos:column="1">"MULTIPLE TRANSFERS WITH A SINGLE COMMAND LINE\n"<pos:position pos:line="3776" pos:column="50"/></literal>
<literal type="string" pos:line="3777" pos:column="1">"\n"<pos:position pos:line="3777" pos:column="5"/></literal>
<literal type="string" pos:line="3778" pos:column="1">"  As is mentioned above, you can download multiple files with one command line\n"<pos:position pos:line="3778" pos:column="83"/></literal>
<literal type="string" pos:line="3779" pos:column="1">"  by simply adding more URLs. If you want those to get saved to a local file\n"<pos:position pos:line="3779" pos:column="81"/></literal>
<literal type="string" pos:line="3780" pos:column="1">"  instead of just printed to stdout, you need to add one save option for each\n"<pos:position pos:line="3780" pos:column="82"/></literal>
<literal type="string" pos:line="3781" pos:column="1">"  URL you specify. Note that this also goes for the -O option (but not\n"<pos:position pos:line="3781" pos:column="75"/></literal>
<literal type="string" pos:line="3782" pos:column="1">"  --remote-name-all).\n"<pos:position pos:line="3782" pos:column="26"/></literal>
<literal type="string" pos:line="3783" pos:column="1">"\n"<pos:position pos:line="3783" pos:column="5"/></literal>
<literal type="string" pos:line="3784" pos:column="1">"  For example: get two files and use -O for the first and a custom file\n"<pos:position pos:line="3784" pos:column="76"/></literal></expr></argument>
, <argument><expr><name pos:line="3785" pos:column="3">stdout<pos:position pos:line="3785" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3785" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3785" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3786" pos:column="2">fputs<pos:position pos:line="3786" pos:column="7"/></name><argument_list pos:line="3786" pos:column="7">(
<argument><expr><literal type="string" pos:line="3787" pos:column="1">"  name for the second:\n"<pos:position pos:line="3787" pos:column="27"/></literal>
<literal type="string" pos:line="3788" pos:column="1">"\n"<pos:position pos:line="3788" pos:column="5"/></literal>
<literal type="string" pos:line="3789" pos:column="1">"    curl -O http://url.com/file.txt ftp://ftp.com/moo.exe -o moo.jpg\n"<pos:position pos:line="3789" pos:column="73"/></literal>
<literal type="string" pos:line="3790" pos:column="1">"\n"<pos:position pos:line="3790" pos:column="5"/></literal>
<literal type="string" pos:line="3791" pos:column="1">"  You can also upload multiple files in a similar fashion:\n"<pos:position pos:line="3791" pos:column="63"/></literal>
<literal type="string" pos:line="3792" pos:column="1">"\n"<pos:position pos:line="3792" pos:column="5"/></literal>
<literal type="string" pos:line="3793" pos:column="1">"    curl -T local1 ftp://ftp.com/moo.exe -T local2 ftp://ftp.com/moo2.txt\n"<pos:position pos:line="3793" pos:column="78"/></literal>
<literal type="string" pos:line="3794" pos:column="1">"\n"<pos:position pos:line="3794" pos:column="5"/></literal>
<literal type="string" pos:line="3795" pos:column="1">"IPv6\n"<pos:position pos:line="3795" pos:column="9"/></literal>
<literal type="string" pos:line="3796" pos:column="1">"\n"<pos:position pos:line="3796" pos:column="5"/></literal>
<literal type="string" pos:line="3797" pos:column="1">"  curl will connect to a server with IPv6 when a host lookup returns an IPv6\n"<pos:position pos:line="3797" pos:column="81"/></literal>
<literal type="string" pos:line="3798" pos:column="1">"  address and fall back to IPv4 if the connection fails. The --ipv4 and --ipv6\n"<pos:position pos:line="3798" pos:column="83"/></literal>
<literal type="string" pos:line="3799" pos:column="1">"  options can specify which address to use when both are available. IPv6\n"<pos:position pos:line="3799" pos:column="77"/></literal></expr></argument>
, <argument><expr><name pos:line="3800" pos:column="3">stdout<pos:position pos:line="3800" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3800" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3800" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3801" pos:column="2">fputs<pos:position pos:line="3801" pos:column="7"/></name><argument_list pos:line="3801" pos:column="7">(
<argument><expr><literal type="string" pos:line="3802" pos:column="1">"  addresses can also be specified directly in URLs using the syntax:\n"<pos:position pos:line="3802" pos:column="73"/></literal>
<literal type="string" pos:line="3803" pos:column="1">"\n"<pos:position pos:line="3803" pos:column="5"/></literal>
<literal type="string" pos:line="3804" pos:column="1">"    http://[2001:1890:1112:1::20]/overview.html\n"<pos:position pos:line="3804" pos:column="52"/></literal>
<literal type="string" pos:line="3805" pos:column="1">"\n"<pos:position pos:line="3805" pos:column="5"/></literal>
<literal type="string" pos:line="3806" pos:column="1">"  When this style is used, the -g option must be given to stop curl from\n"<pos:position pos:line="3806" pos:column="77"/></literal>
<literal type="string" pos:line="3807" pos:column="1">"  interpreting the square brackets as special globbing characters.  Link local\n"<pos:position pos:line="3807" pos:column="83"/></literal>
<literal type="string" pos:line="3808" pos:column="1">"  and site local addresses including a scope identifier, such as fe80::1234%1,\n"<pos:position pos:line="3808" pos:column="83"/></literal>
<literal type="string" pos:line="3809" pos:column="1">"  may also be used, but the scope portion must be numeric and the percent\n"<pos:position pos:line="3809" pos:column="78"/></literal>
<literal type="string" pos:line="3810" pos:column="1">"  character must be URL escaped. The previous example in an SFTP URL might\n"<pos:position pos:line="3810" pos:column="79"/></literal></expr></argument>
, <argument><expr><name pos:line="3811" pos:column="3">stdout<pos:position pos:line="3811" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3811" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3811" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3812" pos:column="2">fputs<pos:position pos:line="3812" pos:column="7"/></name><argument_list pos:line="3812" pos:column="7">(
<argument><expr><literal type="string" pos:line="3813" pos:column="1">"  look like:\n"<pos:position pos:line="3813" pos:column="17"/></literal>
<literal type="string" pos:line="3814" pos:column="1">"\n"<pos:position pos:line="3814" pos:column="5"/></literal>
<literal type="string" pos:line="3815" pos:column="1">"    sftp://[fe80::1234%251]/\n"<pos:position pos:line="3815" pos:column="33"/></literal>
<literal type="string" pos:line="3816" pos:column="1">"\n"<pos:position pos:line="3816" pos:column="5"/></literal>
<literal type="string" pos:line="3817" pos:column="1">"  IPv6 addresses provided other than in URLs (e.g. to the --proxy, --interface\n"<pos:position pos:line="3817" pos:column="83"/></literal>
<literal type="string" pos:line="3818" pos:column="1">"  or --ftp-port options) should not be URL encoded.\n"<pos:position pos:line="3818" pos:column="56"/></literal>
<literal type="string" pos:line="3819" pos:column="1">"\n"<pos:position pos:line="3819" pos:column="5"/></literal>
<literal type="string" pos:line="3820" pos:column="1">"\n"<pos:position pos:line="3820" pos:column="5"/></literal>
<literal type="string" pos:line="3821" pos:column="1">"MAILING LISTS\n"<pos:position pos:line="3821" pos:column="18"/></literal>
<literal type="string" pos:line="3822" pos:column="1">"\n"<pos:position pos:line="3822" pos:column="5"/></literal>
<literal type="string" pos:line="3823" pos:column="1">"  For your convenience, we have several open mailing lists to discuss curl,\n"<pos:position pos:line="3823" pos:column="80"/></literal>
<literal type="string" pos:line="3824" pos:column="1">"  its development and things relevant to this. Get all info at\n"<pos:position pos:line="3824" pos:column="67"/></literal>
<literal type="string" pos:line="3825" pos:column="1">"  http://curl.haxx.se/mail/. Some of the lists available are:\n"<pos:position pos:line="3825" pos:column="66"/></literal>
<literal type="string" pos:line="3826" pos:column="1">"\n"<pos:position pos:line="3826" pos:column="5"/></literal>
<literal type="string" pos:line="3827" pos:column="1">"  curl-users\n"<pos:position pos:line="3827" pos:column="17"/></literal>
<literal type="string" pos:line="3828" pos:column="1">"\n"<pos:position pos:line="3828" pos:column="5"/></literal>
<literal type="string" pos:line="3829" pos:column="1">"    Users of the command line tool. How to use it, what doesn't work, new\n"<pos:position pos:line="3829" pos:column="78"/></literal></expr></argument>
, <argument><expr><name pos:line="3830" pos:column="3">stdout<pos:position pos:line="3830" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3830" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3830" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3831" pos:column="2">fputs<pos:position pos:line="3831" pos:column="7"/></name><argument_list pos:line="3831" pos:column="7">(
<argument><expr><literal type="string" pos:line="3832" pos:column="1">"    features, related tools, questions, news, installations, compilations,\n"<pos:position pos:line="3832" pos:column="79"/></literal>
<literal type="string" pos:line="3833" pos:column="1">"    running, porting etc.\n"<pos:position pos:line="3833" pos:column="30"/></literal>
<literal type="string" pos:line="3834" pos:column="1">"\n"<pos:position pos:line="3834" pos:column="5"/></literal>
<literal type="string" pos:line="3835" pos:column="1">"  curl-library\n"<pos:position pos:line="3835" pos:column="19"/></literal>
<literal type="string" pos:line="3836" pos:column="1">"\n"<pos:position pos:line="3836" pos:column="5"/></literal>
<literal type="string" pos:line="3837" pos:column="1">"    Developers using or developing libcurl. Bugs, extensions, improvements.\n"<pos:position pos:line="3837" pos:column="80"/></literal>
<literal type="string" pos:line="3838" pos:column="1">"\n"<pos:position pos:line="3838" pos:column="5"/></literal>
<literal type="string" pos:line="3839" pos:column="1">"  curl-announce\n"<pos:position pos:line="3839" pos:column="20"/></literal>
<literal type="string" pos:line="3840" pos:column="1">"\n"<pos:position pos:line="3840" pos:column="5"/></literal>
<literal type="string" pos:line="3841" pos:column="1">"    Low-traffic. Only receives announcements of new public versions. At worst,\n"<pos:position pos:line="3841" pos:column="83"/></literal>
<literal type="string" pos:line="3842" pos:column="1">"    that makes something like one or two mails per month, but usually only one\n"<pos:position pos:line="3842" pos:column="83"/></literal>
<literal type="string" pos:line="3843" pos:column="1">"    mail every second month.\n"<pos:position pos:line="3843" pos:column="33"/></literal>
<literal type="string" pos:line="3844" pos:column="1">"\n"<pos:position pos:line="3844" pos:column="5"/></literal>
<literal type="string" pos:line="3845" pos:column="1">"  curl-and-php\n"<pos:position pos:line="3845" pos:column="19"/></literal>
<literal type="string" pos:line="3846" pos:column="1">"\n"<pos:position pos:line="3846" pos:column="5"/></literal>
<literal type="string" pos:line="3847" pos:column="1">"    Using the curl functions in PHP. Everything curl with a PHP angle. Or PHP\n"<pos:position pos:line="3847" pos:column="82"/></literal></expr></argument>
, <argument><expr><name pos:line="3848" pos:column="3">stdout<pos:position pos:line="3848" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3848" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="3848" pos:column="11"/></expr_stmt>
 <expr_stmt><expr><call><name pos:line="3849" pos:column="2">fputs<pos:position pos:line="3849" pos:column="7"/></name><argument_list pos:line="3849" pos:column="7">(
<argument><expr><literal type="string" pos:line="3850" pos:column="1">"    with a curl angle.\n"<pos:position pos:line="3850" pos:column="27"/></literal>
<literal type="string" pos:line="3851" pos:column="1">"\n"<pos:position pos:line="3851" pos:column="5"/></literal>
<literal type="string" pos:line="3852" pos:column="1">"  curl-and-python\n"<pos:position pos:line="3852" pos:column="22"/></literal>
<literal type="string" pos:line="3853" pos:column="1">"\n"<pos:position pos:line="3853" pos:column="5"/></literal>
<literal type="string" pos:line="3854" pos:column="1">"    Python hackers using curl with or without the python binding pycurl.\n"<pos:position pos:line="3854" pos:column="77"/></literal>
<literal type="string" pos:line="3855" pos:column="1">"\n"<pos:position pos:line="3855" pos:column="5"/></literal>
<literal type="string" pos:line="3856" pos:column="1">"  Please direct curl questions, feature requests and trouble reports to one of\n"<pos:position pos:line="3856" pos:column="83"/></literal>
<literal type="string" pos:line="3857" pos:column="1">"  these mailing lists instead of mailing any individual.\n"<pos:position pos:line="3857" pos:column="61"/></literal></expr></argument>
, <argument><expr><name pos:line="3858" pos:column="3">stdout<pos:position pos:line="3858" pos:column="9"/></name></expr></argument>)<pos:position pos:line="3858" pos:column="10"/></argument_list></call></expr> ;<pos:position pos:line="3858" pos:column="12"/></expr_stmt>
}<pos:position pos:line="3859" pos:column="2"/></block></function></unit>
