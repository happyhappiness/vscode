<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2349_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_auth_create_gssapi_security_message<pos:position pos:line="1" pos:column="50"/></name><parameter_list pos:line="1" pos:column="50">(<parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">Curl_easy<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">data<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
                                                  <parameter><decl><type><specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier> <name pos:line="2" pos:column="57">char<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">chlg64<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
                                                  <parameter><decl><type><name><name pos:line="3" pos:column="51">struct<pos:position pos:line="3" pos:column="57"/></name> <name pos:line="3" pos:column="58">kerberos5data<pos:position pos:line="3" pos:column="71"/></name></name> <modifier pos:line="3" pos:column="72">*<pos:position pos:line="3" pos:column="73"/></modifier></type><name pos:line="3" pos:column="73">krb5<pos:position pos:line="3" pos:column="77"/></name></decl></parameter>,
                                                  <parameter><decl><type><name pos:line="4" pos:column="51">char<pos:position pos:line="4" pos:column="55"/></name> <modifier pos:line="4" pos:column="56">*<pos:position pos:line="4" pos:column="57"/></modifier><modifier pos:line="4" pos:column="57">*<pos:position pos:line="4" pos:column="58"/></modifier></type><name pos:line="4" pos:column="58">outptr<pos:position pos:line="4" pos:column="64"/></name></decl></parameter>,
                                                  <parameter><decl><type><name pos:line="5" pos:column="51">size_t<pos:position pos:line="5" pos:column="57"/></name> <modifier pos:line="5" pos:column="58">*<pos:position pos:line="5" pos:column="59"/></modifier></type><name pos:line="5" pos:column="59">outlen<pos:position pos:line="5" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="66"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLcode<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">result<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><name pos:line="7" pos:column="21">CURLE_OK<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">offset<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">chlglen<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">messagelen<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">size_t<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">appdatalen<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><literal type="number" pos:line="11" pos:column="23">0<pos:position pos:line="11" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">unsigned<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">char<pos:position pos:line="12" pos:column="16"/></name> <modifier pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></modifier></type><name pos:line="12" pos:column="18">chlg<pos:position pos:line="12" pos:column="22"/></name> <init pos:line="12" pos:column="23">= <expr><name pos:line="12" pos:column="25">NULL<pos:position pos:line="12" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">unsigned<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">char<pos:position pos:line="13" pos:column="16"/></name> <modifier pos:line="13" pos:column="17">*<pos:position pos:line="13" pos:column="18"/></modifier></type><name pos:line="13" pos:column="18">trailer<pos:position pos:line="13" pos:column="25"/></name> <init pos:line="13" pos:column="26">= <expr><name pos:line="13" pos:column="28">NULL<pos:position pos:line="13" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">unsigned<pos:position pos:line="14" pos:column="11"/></name> <name pos:line="14" pos:column="12">char<pos:position pos:line="14" pos:column="16"/></name> <modifier pos:line="14" pos:column="17">*<pos:position pos:line="14" pos:column="18"/></modifier></type><name pos:line="14" pos:column="18">message<pos:position pos:line="14" pos:column="25"/></name> <init pos:line="14" pos:column="26">= <expr><name pos:line="14" pos:column="28">NULL<pos:position pos:line="14" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">unsigned<pos:position pos:line="15" pos:column="11"/></name> <name pos:line="15" pos:column="12">char<pos:position pos:line="15" pos:column="16"/></name> <modifier pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></modifier></type><name pos:line="15" pos:column="18">padding<pos:position pos:line="15" pos:column="25"/></name> <init pos:line="15" pos:column="26">= <expr><name pos:line="15" pos:column="28">NULL<pos:position pos:line="15" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">unsigned<pos:position pos:line="16" pos:column="11"/></name> <name pos:line="16" pos:column="12">char<pos:position pos:line="16" pos:column="16"/></name> <modifier pos:line="16" pos:column="17">*<pos:position pos:line="16" pos:column="18"/></modifier></type><name pos:line="16" pos:column="18">appdata<pos:position pos:line="16" pos:column="25"/></name> <init pos:line="16" pos:column="26">= <expr><name pos:line="16" pos:column="28">NULL<pos:position pos:line="16" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">SecBuffer<pos:position pos:line="17" pos:column="12"/></name></type> <name><name pos:line="17" pos:column="13">input_buf<pos:position pos:line="17" pos:column="22"/></name><index pos:line="17" pos:column="22">[<expr><literal type="number" pos:line="17" pos:column="23">2<pos:position pos:line="17" pos:column="24"/></literal></expr>]<pos:position pos:line="17" pos:column="25"/></index></name></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">SecBuffer<pos:position pos:line="18" pos:column="12"/></name></type> <name><name pos:line="18" pos:column="13">wrap_buf<pos:position pos:line="18" pos:column="21"/></name><index pos:line="18" pos:column="21">[<expr><literal type="number" pos:line="18" pos:column="22">3<pos:position pos:line="18" pos:column="23"/></literal></expr>]<pos:position pos:line="18" pos:column="24"/></index></name></decl>;<pos:position pos:line="18" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">SecBufferDesc<pos:position pos:line="19" pos:column="16"/></name></type> <name pos:line="19" pos:column="17">input_desc<pos:position pos:line="19" pos:column="27"/></name></decl>;<pos:position pos:line="19" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">SecBufferDesc<pos:position pos:line="20" pos:column="16"/></name></type> <name pos:line="20" pos:column="17">wrap_desc<pos:position pos:line="20" pos:column="26"/></name></decl>;<pos:position pos:line="20" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">unsigned<pos:position pos:line="21" pos:column="11"/></name> <name pos:line="21" pos:column="12">long<pos:position pos:line="21" pos:column="16"/></name></type> <name pos:line="21" pos:column="17">indata<pos:position pos:line="21" pos:column="23"/></name> <init pos:line="21" pos:column="24">= <expr><literal type="number" pos:line="21" pos:column="26">0<pos:position pos:line="21" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">unsigned<pos:position pos:line="22" pos:column="11"/></name> <name pos:line="22" pos:column="12">long<pos:position pos:line="22" pos:column="16"/></name></type> <name pos:line="22" pos:column="17">outdata<pos:position pos:line="22" pos:column="24"/></name> <init pos:line="22" pos:column="25">= <expr><literal type="number" pos:line="22" pos:column="27">0<pos:position pos:line="22" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">unsigned<pos:position pos:line="23" pos:column="11"/></name> <name pos:line="23" pos:column="12">long<pos:position pos:line="23" pos:column="16"/></name></type> <name pos:line="23" pos:column="17">qop<pos:position pos:line="23" pos:column="20"/></name> <init pos:line="23" pos:column="21">= <expr><literal type="number" pos:line="23" pos:column="23">0<pos:position pos:line="23" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">unsigned<pos:position pos:line="24" pos:column="11"/></name> <name pos:line="24" pos:column="12">long<pos:position pos:line="24" pos:column="16"/></name></type> <name pos:line="24" pos:column="17">sec_layer<pos:position pos:line="24" pos:column="26"/></name> <init pos:line="24" pos:column="27">= <expr><literal type="number" pos:line="24" pos:column="29">0<pos:position pos:line="24" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">unsigned<pos:position pos:line="25" pos:column="11"/></name> <name pos:line="25" pos:column="12">long<pos:position pos:line="25" pos:column="16"/></name></type> <name pos:line="25" pos:column="17">max_size<pos:position pos:line="25" pos:column="25"/></name> <init pos:line="25" pos:column="26">= <expr><literal type="number" pos:line="25" pos:column="28">0<pos:position pos:line="25" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="26" pos:column="3">SecPkgContext_Sizes<pos:position pos:line="26" pos:column="22"/></name></type> <name pos:line="26" pos:column="23">sizes<pos:position pos:line="26" pos:column="28"/></name></decl>;<pos:position pos:line="26" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">SecPkgCredentials_Names<pos:position pos:line="27" pos:column="26"/></name></type> <name pos:line="27" pos:column="27">names<pos:position pos:line="27" pos:column="32"/></name></decl>;<pos:position pos:line="27" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="28" pos:column="3">SECURITY_STATUS<pos:position pos:line="28" pos:column="18"/></name></type> <name pos:line="28" pos:column="19">status<pos:position pos:line="28" pos:column="25"/></name></decl>;<pos:position pos:line="28" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="29" pos:column="3">char<pos:position pos:line="29" pos:column="7"/></name> <modifier pos:line="29" pos:column="8">*<pos:position pos:line="29" pos:column="9"/></modifier></type><name pos:line="29" pos:column="9">user_name<pos:position pos:line="29" pos:column="18"/></name></decl>;<pos:position pos:line="29" pos:column="19"/></decl_stmt>

  <comment type="block" pos:line="31" pos:column="3">/* Decode the base-64 encoded input message */</comment>
  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><call><name pos:line="32" pos:column="6">strlen<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><name pos:line="32" pos:column="13">chlg64<pos:position pos:line="32" pos:column="19"/></name></expr></argument>)<pos:position pos:line="32" pos:column="20"/></argument_list></call> <operator pos:line="32" pos:column="21">&amp;&amp;<pos:position pos:line="32" pos:column="31"/></operator> <operator pos:line="32" pos:column="24">*<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="25">chlg64<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">!=<pos:position pos:line="32" pos:column="34"/></operator> <literal type="char" pos:line="32" pos:column="35">'='<pos:position pos:line="32" pos:column="38"/></literal></expr>)<pos:position pos:line="32" pos:column="39"/></condition><then pos:line="32" pos:column="39"> <block pos:line="32" pos:column="40">{
    <expr_stmt><expr><name pos:line="33" pos:column="5">result<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <call><name pos:line="33" pos:column="14">Curl_base64_decode<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">chlg64<pos:position pos:line="33" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="41">&amp;<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="42">chlg<pos:position pos:line="33" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="48">&amp;<pos:position pos:line="33" pos:column="53"/></operator><name pos:line="33" pos:column="49">chlglen<pos:position pos:line="33" pos:column="56"/></name></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name pos:line="34" pos:column="8">result<pos:position pos:line="34" pos:column="14"/></name></expr>)<pos:position pos:line="34" pos:column="15"/></condition><then pos:line="34" pos:column="15">
      <block type="pseudo"><return pos:line="35" pos:column="7">return <expr><name pos:line="35" pos:column="14">result<pos:position pos:line="35" pos:column="20"/></name></expr>;<pos:position pos:line="35" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="38" pos:column="3">/* Ensure we have a valid challenge message */</comment>
  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><operator pos:line="39" pos:column="6">!<pos:position pos:line="39" pos:column="7"/></operator><name pos:line="39" pos:column="7">chlg<pos:position pos:line="39" pos:column="11"/></name></expr>)<pos:position pos:line="39" pos:column="12"/></condition><then pos:line="39" pos:column="12"> <block pos:line="39" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">infof<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><name pos:line="40" pos:column="11">data<pos:position pos:line="40" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="17">"GSSAPI handshake failure (empty security message)\n"<pos:position pos:line="40" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="72"/></expr_stmt>

    <return pos:line="42" pos:column="5">return <expr><name pos:line="42" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="42" pos:column="38"/></name></expr>;<pos:position pos:line="42" pos:column="39"/></return>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="45" pos:column="3">/* Get our response size information */</comment>
  <expr_stmt><expr><name pos:line="46" pos:column="3">status<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <call><name><name pos:line="46" pos:column="12">s_pSecFn<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">-&gt;<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="22">QueryContextAttributes<pos:position pos:line="46" pos:column="44"/></name></name><argument_list pos:line="46" pos:column="44">(<argument><expr><name><name pos:line="46" pos:column="45">krb5<pos:position pos:line="46" pos:column="49"/></name><operator pos:line="46" pos:column="49">-&gt;<pos:position pos:line="46" pos:column="54"/></operator><name pos:line="46" pos:column="51">context<pos:position pos:line="46" pos:column="58"/></name></name></expr></argument>,
                                            <argument><expr><name pos:line="47" pos:column="45">SECPKG_ATTR_SIZES<pos:position pos:line="47" pos:column="62"/></name></expr></argument>,
                                            <argument><expr><operator pos:line="48" pos:column="45">&amp;<pos:position pos:line="48" pos:column="50"/></operator><name pos:line="48" pos:column="46">sizes<pos:position pos:line="48" pos:column="51"/></name></expr></argument>)<pos:position pos:line="48" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="53"/></expr_stmt>
  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><name pos:line="49" pos:column="6">status<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">!=<pos:position pos:line="49" pos:column="15"/></operator> <name pos:line="49" pos:column="16">SEC_E_OK<pos:position pos:line="49" pos:column="24"/></name></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25"> <block pos:line="49" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">free<pos:position pos:line="50" pos:column="9"/></name><argument_list pos:line="50" pos:column="9">(<argument><expr><name pos:line="50" pos:column="10">chlg<pos:position pos:line="50" pos:column="14"/></name></expr></argument>)<pos:position pos:line="50" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="16"/></expr_stmt>

    <return pos:line="52" pos:column="5">return <expr><name pos:line="52" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="52" pos:column="31"/></name></expr>;<pos:position pos:line="52" pos:column="32"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="55" pos:column="3">/* Get the fully qualified username back from the context */</comment>
  <expr_stmt><expr><name pos:line="56" pos:column="3">status<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator> <call><name><name pos:line="56" pos:column="12">s_pSecFn<pos:position pos:line="56" pos:column="20"/></name><operator pos:line="56" pos:column="20">-&gt;<pos:position pos:line="56" pos:column="25"/></operator><name pos:line="56" pos:column="22">QueryCredentialsAttributes<pos:position pos:line="56" pos:column="48"/></name></name><argument_list pos:line="56" pos:column="48">(<argument><expr><name><name pos:line="56" pos:column="49">krb5<pos:position pos:line="56" pos:column="53"/></name><operator pos:line="56" pos:column="53">-&gt;<pos:position pos:line="56" pos:column="58"/></operator><name pos:line="56" pos:column="55">credentials<pos:position pos:line="56" pos:column="66"/></name></name></expr></argument>,
                                                <argument><expr><name pos:line="57" pos:column="49">SECPKG_CRED_ATTR_NAMES<pos:position pos:line="57" pos:column="71"/></name></expr></argument>,
                                                <argument><expr><operator pos:line="58" pos:column="49">&amp;<pos:position pos:line="58" pos:column="54"/></operator><name pos:line="58" pos:column="50">names<pos:position pos:line="58" pos:column="55"/></name></expr></argument>)<pos:position pos:line="58" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="57"/></expr_stmt>
  <if pos:line="59" pos:column="3">if<condition pos:line="59" pos:column="5">(<expr><name pos:line="59" pos:column="6">status<pos:position pos:line="59" pos:column="12"/></name> <operator pos:line="59" pos:column="13">!=<pos:position pos:line="59" pos:column="15"/></operator> <name pos:line="59" pos:column="16">SEC_E_OK<pos:position pos:line="59" pos:column="24"/></name></expr>)<pos:position pos:line="59" pos:column="25"/></condition><then pos:line="59" pos:column="25"> <block pos:line="59" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">free<pos:position pos:line="60" pos:column="9"/></name><argument_list pos:line="60" pos:column="9">(<argument><expr><name pos:line="60" pos:column="10">chlg<pos:position pos:line="60" pos:column="14"/></name></expr></argument>)<pos:position pos:line="60" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="16"/></expr_stmt>

    <return pos:line="62" pos:column="5">return <expr><name pos:line="62" pos:column="12">CURLE_RECV_ERROR<pos:position pos:line="62" pos:column="28"/></name></expr>;<pos:position pos:line="62" pos:column="29"/></return>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="65" pos:column="3">/* Setup the "input" security buffer */</comment>
  <expr_stmt><expr><name><name pos:line="66" pos:column="3">input_desc<pos:position pos:line="66" pos:column="13"/></name><operator pos:line="66" pos:column="13">.<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">ulVersion<pos:position pos:line="66" pos:column="23"/></name></name> <operator pos:line="66" pos:column="24">=<pos:position pos:line="66" pos:column="25"/></operator> <name pos:line="66" pos:column="26">SECBUFFER_VERSION<pos:position pos:line="66" pos:column="43"/></name></expr>;<pos:position pos:line="66" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="67" pos:column="3">input_desc<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">.<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">cBuffers<pos:position pos:line="67" pos:column="22"/></name></name> <operator pos:line="67" pos:column="23">=<pos:position pos:line="67" pos:column="24"/></operator> <literal type="number" pos:line="67" pos:column="25">2<pos:position pos:line="67" pos:column="26"/></literal></expr>;<pos:position pos:line="67" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="68" pos:column="3">input_desc<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">.<pos:position pos:line="68" pos:column="14"/></operator><name pos:line="68" pos:column="14">pBuffers<pos:position pos:line="68" pos:column="22"/></name></name> <operator pos:line="68" pos:column="23">=<pos:position pos:line="68" pos:column="24"/></operator> <name pos:line="68" pos:column="25">input_buf<pos:position pos:line="68" pos:column="34"/></name></expr>;<pos:position pos:line="68" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="69" pos:column="3">input_buf<pos:position pos:line="69" pos:column="12"/></name><index pos:line="69" pos:column="12">[<expr><literal type="number" pos:line="69" pos:column="13">0<pos:position pos:line="69" pos:column="14"/></literal></expr>]<pos:position pos:line="69" pos:column="15"/></index></name><operator pos:line="69" pos:column="15">.<pos:position pos:line="69" pos:column="16"/></operator><name pos:line="69" pos:column="16">BufferType<pos:position pos:line="69" pos:column="26"/></name> <operator pos:line="69" pos:column="27">=<pos:position pos:line="69" pos:column="28"/></operator> <name pos:line="69" pos:column="29">SECBUFFER_STREAM<pos:position pos:line="69" pos:column="45"/></name></expr>;<pos:position pos:line="69" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="70" pos:column="3">input_buf<pos:position pos:line="70" pos:column="12"/></name><index pos:line="70" pos:column="12">[<expr><literal type="number" pos:line="70" pos:column="13">0<pos:position pos:line="70" pos:column="14"/></literal></expr>]<pos:position pos:line="70" pos:column="15"/></index></name><operator pos:line="70" pos:column="15">.<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="16">pvBuffer<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">=<pos:position pos:line="70" pos:column="26"/></operator> <name pos:line="70" pos:column="27">chlg<pos:position pos:line="70" pos:column="31"/></name></expr>;<pos:position pos:line="70" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="71" pos:column="3">input_buf<pos:position pos:line="71" pos:column="12"/></name><index pos:line="71" pos:column="12">[<expr><literal type="number" pos:line="71" pos:column="13">0<pos:position pos:line="71" pos:column="14"/></literal></expr>]<pos:position pos:line="71" pos:column="15"/></index></name><operator pos:line="71" pos:column="15">.<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="16">cbBuffer<pos:position pos:line="71" pos:column="24"/></name> <operator pos:line="71" pos:column="25">=<pos:position pos:line="71" pos:column="26"/></operator> <call><name pos:line="71" pos:column="27">curlx_uztoul<pos:position pos:line="71" pos:column="39"/></name><argument_list pos:line="71" pos:column="39">(<argument><expr><name pos:line="71" pos:column="40">chlglen<pos:position pos:line="71" pos:column="47"/></name></expr></argument>)<pos:position pos:line="71" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="72" pos:column="3">input_buf<pos:position pos:line="72" pos:column="12"/></name><index pos:line="72" pos:column="12">[<expr><literal type="number" pos:line="72" pos:column="13">1<pos:position pos:line="72" pos:column="14"/></literal></expr>]<pos:position pos:line="72" pos:column="15"/></index></name><operator pos:line="72" pos:column="15">.<pos:position pos:line="72" pos:column="16"/></operator><name pos:line="72" pos:column="16">BufferType<pos:position pos:line="72" pos:column="26"/></name> <operator pos:line="72" pos:column="27">=<pos:position pos:line="72" pos:column="28"/></operator> <name pos:line="72" pos:column="29">SECBUFFER_DATA<pos:position pos:line="72" pos:column="43"/></name></expr>;<pos:position pos:line="72" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="73" pos:column="3">input_buf<pos:position pos:line="73" pos:column="12"/></name><index pos:line="73" pos:column="12">[<expr><literal type="number" pos:line="73" pos:column="13">1<pos:position pos:line="73" pos:column="14"/></literal></expr>]<pos:position pos:line="73" pos:column="15"/></index></name><operator pos:line="73" pos:column="15">.<pos:position pos:line="73" pos:column="16"/></operator><name pos:line="73" pos:column="16">pvBuffer<pos:position pos:line="73" pos:column="24"/></name> <operator pos:line="73" pos:column="25">=<pos:position pos:line="73" pos:column="26"/></operator> <name pos:line="73" pos:column="27">NULL<pos:position pos:line="73" pos:column="31"/></name></expr>;<pos:position pos:line="73" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="74" pos:column="3">input_buf<pos:position pos:line="74" pos:column="12"/></name><index pos:line="74" pos:column="12">[<expr><literal type="number" pos:line="74" pos:column="13">1<pos:position pos:line="74" pos:column="14"/></literal></expr>]<pos:position pos:line="74" pos:column="15"/></index></name><operator pos:line="74" pos:column="15">.<pos:position pos:line="74" pos:column="16"/></operator><name pos:line="74" pos:column="16">cbBuffer<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">=<pos:position pos:line="74" pos:column="26"/></operator> <literal type="number" pos:line="74" pos:column="27">0<pos:position pos:line="74" pos:column="28"/></literal></expr>;<pos:position pos:line="74" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="76" pos:column="3">/* Decrypt the inbound challenge and obtain the qop */</comment>
  <expr_stmt><expr><name pos:line="77" pos:column="3">status<pos:position pos:line="77" pos:column="9"/></name> <operator pos:line="77" pos:column="10">=<pos:position pos:line="77" pos:column="11"/></operator> <call><name><name pos:line="77" pos:column="12">s_pSecFn<pos:position pos:line="77" pos:column="20"/></name><operator pos:line="77" pos:column="20">-&gt;<pos:position pos:line="77" pos:column="25"/></operator><name pos:line="77" pos:column="22">DecryptMessage<pos:position pos:line="77" pos:column="36"/></name></name><argument_list pos:line="77" pos:column="36">(<argument><expr><name><name pos:line="77" pos:column="37">krb5<pos:position pos:line="77" pos:column="41"/></name><operator pos:line="77" pos:column="41">-&gt;<pos:position pos:line="77" pos:column="46"/></operator><name pos:line="77" pos:column="43">context<pos:position pos:line="77" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="52">&amp;<pos:position pos:line="77" pos:column="57"/></operator><name pos:line="77" pos:column="53">input_desc<pos:position pos:line="77" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="65">0<pos:position pos:line="77" pos:column="66"/></literal></expr></argument>, <argument><expr><operator pos:line="77" pos:column="68">&amp;<pos:position pos:line="77" pos:column="73"/></operator><name pos:line="77" pos:column="69">qop<pos:position pos:line="77" pos:column="72"/></name></expr></argument>)<pos:position pos:line="77" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="74"/></expr_stmt>
  <if pos:line="78" pos:column="3">if<condition pos:line="78" pos:column="5">(<expr><name pos:line="78" pos:column="6">status<pos:position pos:line="78" pos:column="12"/></name> <operator pos:line="78" pos:column="13">!=<pos:position pos:line="78" pos:column="15"/></operator> <name pos:line="78" pos:column="16">SEC_E_OK<pos:position pos:line="78" pos:column="24"/></name></expr>)<pos:position pos:line="78" pos:column="25"/></condition><then pos:line="78" pos:column="25"> <block pos:line="78" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">infof<pos:position pos:line="79" pos:column="10"/></name><argument_list pos:line="79" pos:column="10">(<argument><expr><name pos:line="79" pos:column="11">data<pos:position pos:line="79" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="17">"GSSAPI handshake failure (empty security message)\n"<pos:position pos:line="79" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="72"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="81" pos:column="5">free<pos:position pos:line="81" pos:column="9"/></name><argument_list pos:line="81" pos:column="9">(<argument><expr><name pos:line="81" pos:column="10">chlg<pos:position pos:line="81" pos:column="14"/></name></expr></argument>)<pos:position pos:line="81" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="16"/></expr_stmt>

    <return pos:line="83" pos:column="5">return <expr><name pos:line="83" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="83" pos:column="38"/></name></expr>;<pos:position pos:line="83" pos:column="39"/></return>
  }<pos:position pos:line="84" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="86" pos:column="3">/* Not 4 octets long so fail as per RFC4752 Section 3.1 */</comment>
  <if pos:line="87" pos:column="3">if<condition pos:line="87" pos:column="5">(<expr><name><name pos:line="87" pos:column="6">input_buf<pos:position pos:line="87" pos:column="15"/></name><index pos:line="87" pos:column="15">[<expr><literal type="number" pos:line="87" pos:column="16">1<pos:position pos:line="87" pos:column="17"/></literal></expr>]<pos:position pos:line="87" pos:column="18"/></index></name><operator pos:line="87" pos:column="18">.<pos:position pos:line="87" pos:column="19"/></operator><name pos:line="87" pos:column="19">cbBuffer<pos:position pos:line="87" pos:column="27"/></name> <operator pos:line="87" pos:column="28">!=<pos:position pos:line="87" pos:column="30"/></operator> <literal type="number" pos:line="87" pos:column="31">4<pos:position pos:line="87" pos:column="32"/></literal></expr>)<pos:position pos:line="87" pos:column="33"/></condition><then pos:line="87" pos:column="33"> <block pos:line="87" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">infof<pos:position pos:line="88" pos:column="10"/></name><argument_list pos:line="88" pos:column="10">(<argument><expr><name pos:line="88" pos:column="11">data<pos:position pos:line="88" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="17">"GSSAPI handshake failure (invalid security data)\n"<pos:position pos:line="88" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="71"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="90" pos:column="5">free<pos:position pos:line="90" pos:column="9"/></name><argument_list pos:line="90" pos:column="9">(<argument><expr><name pos:line="90" pos:column="10">chlg<pos:position pos:line="90" pos:column="14"/></name></expr></argument>)<pos:position pos:line="90" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="16"/></expr_stmt>

    <return pos:line="92" pos:column="5">return <expr><name pos:line="92" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="92" pos:column="38"/></name></expr>;<pos:position pos:line="92" pos:column="39"/></return>
  }<pos:position pos:line="93" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="95" pos:column="3">/* Copy the data out and free the challenge as it is not required anymore */</comment>
  <expr_stmt><expr><call><name pos:line="96" pos:column="3">memcpy<pos:position pos:line="96" pos:column="9"/></name><argument_list pos:line="96" pos:column="9">(<argument><expr><operator pos:line="96" pos:column="10">&amp;<pos:position pos:line="96" pos:column="15"/></operator><name pos:line="96" pos:column="11">indata<pos:position pos:line="96" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="19">input_buf<pos:position pos:line="96" pos:column="28"/></name><index pos:line="96" pos:column="28">[<expr><literal type="number" pos:line="96" pos:column="29">1<pos:position pos:line="96" pos:column="30"/></literal></expr>]<pos:position pos:line="96" pos:column="31"/></index></name><operator pos:line="96" pos:column="31">.<pos:position pos:line="96" pos:column="32"/></operator><name pos:line="96" pos:column="32">pvBuffer<pos:position pos:line="96" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="42">4<pos:position pos:line="96" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name><name pos:line="97" pos:column="3">s_pSecFn<pos:position pos:line="97" pos:column="11"/></name><operator pos:line="97" pos:column="11">-&gt;<pos:position pos:line="97" pos:column="16"/></operator><name pos:line="97" pos:column="13">FreeContextBuffer<pos:position pos:line="97" pos:column="30"/></name></name><argument_list pos:line="97" pos:column="30">(<argument><expr><name><name pos:line="97" pos:column="31">input_buf<pos:position pos:line="97" pos:column="40"/></name><index pos:line="97" pos:column="40">[<expr><literal type="number" pos:line="97" pos:column="41">1<pos:position pos:line="97" pos:column="42"/></literal></expr>]<pos:position pos:line="97" pos:column="43"/></index></name><operator pos:line="97" pos:column="43">.<pos:position pos:line="97" pos:column="44"/></operator><name pos:line="97" pos:column="44">pvBuffer<pos:position pos:line="97" pos:column="52"/></name></expr></argument>)<pos:position pos:line="97" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="98" pos:column="3">free<pos:position pos:line="98" pos:column="7"/></name><argument_list pos:line="98" pos:column="7">(<argument><expr><name pos:line="98" pos:column="8">chlg<pos:position pos:line="98" pos:column="12"/></name></expr></argument>)<pos:position pos:line="98" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="14"/></expr_stmt>

  <comment type="block" pos:line="100" pos:column="3">/* Extract the security layer */</comment>
  <expr_stmt><expr><name pos:line="101" pos:column="3">sec_layer<pos:position pos:line="101" pos:column="12"/></name> <operator pos:line="101" pos:column="13">=<pos:position pos:line="101" pos:column="14"/></operator> <name pos:line="101" pos:column="15">indata<pos:position pos:line="101" pos:column="21"/></name> <operator pos:line="101" pos:column="22">&amp;<pos:position pos:line="101" pos:column="27"/></operator> <literal type="number" pos:line="101" pos:column="24">0x000000FF<pos:position pos:line="101" pos:column="34"/></literal></expr>;<pos:position pos:line="101" pos:column="35"/></expr_stmt>
  <if pos:line="102" pos:column="3">if<condition pos:line="102" pos:column="5">(<expr><operator pos:line="102" pos:column="6">!<pos:position pos:line="102" pos:column="7"/></operator><operator pos:line="102" pos:column="7">(<pos:position pos:line="102" pos:column="8"/></operator><name pos:line="102" pos:column="8">sec_layer<pos:position pos:line="102" pos:column="17"/></name> <operator pos:line="102" pos:column="18">&amp;<pos:position pos:line="102" pos:column="23"/></operator> <name pos:line="102" pos:column="20">KERB_WRAP_NO_ENCRYPT<pos:position pos:line="102" pos:column="40"/></name><operator pos:line="102" pos:column="40">)<pos:position pos:line="102" pos:column="41"/></operator></expr>)<pos:position pos:line="102" pos:column="42"/></condition><then pos:line="102" pos:column="42"> <block pos:line="102" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">infof<pos:position pos:line="103" pos:column="10"/></name><argument_list pos:line="103" pos:column="10">(<argument><expr><name pos:line="103" pos:column="11">data<pos:position pos:line="103" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="17">"GSSAPI handshake failure (invalid security layer)\n"<pos:position pos:line="103" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="72"/></expr_stmt>

    <return pos:line="105" pos:column="5">return <expr><name pos:line="105" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="105" pos:column="38"/></name></expr>;<pos:position pos:line="105" pos:column="39"/></return>
  }<pos:position pos:line="106" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="108" pos:column="3">/* Extract the maximum message size the server can receive */</comment>
  <expr_stmt><expr><name pos:line="109" pos:column="3">max_size<pos:position pos:line="109" pos:column="11"/></name> <operator pos:line="109" pos:column="12">=<pos:position pos:line="109" pos:column="13"/></operator> <call><name pos:line="109" pos:column="14">ntohl<pos:position pos:line="109" pos:column="19"/></name><argument_list pos:line="109" pos:column="19">(<argument><expr><name pos:line="109" pos:column="20">indata<pos:position pos:line="109" pos:column="26"/></name> <operator pos:line="109" pos:column="27">&amp;<pos:position pos:line="109" pos:column="32"/></operator> <literal type="number" pos:line="109" pos:column="29">0xFFFFFF00<pos:position pos:line="109" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="41"/></expr_stmt>
  <if pos:line="110" pos:column="3">if<condition pos:line="110" pos:column="5">(<expr><name pos:line="110" pos:column="6">max_size<pos:position pos:line="110" pos:column="14"/></name> <operator pos:line="110" pos:column="15">&gt;<pos:position pos:line="110" pos:column="19"/></operator> <literal type="number" pos:line="110" pos:column="17">0<pos:position pos:line="110" pos:column="18"/></literal></expr>)<pos:position pos:line="110" pos:column="19"/></condition><then pos:line="110" pos:column="19"> <block pos:line="110" pos:column="20">{
    <comment type="block" pos:line="111" pos:column="5">/* The server has told us it supports a maximum receive buffer, however, as
       we don't require one unless we are encrypting data, we tell the server
       our receive buffer is zero. */</comment>
    <expr_stmt><expr><name pos:line="114" pos:column="5">max_size<pos:position pos:line="114" pos:column="13"/></name> <operator pos:line="114" pos:column="14">=<pos:position pos:line="114" pos:column="15"/></operator> <literal type="number" pos:line="114" pos:column="16">0<pos:position pos:line="114" pos:column="17"/></literal></expr>;<pos:position pos:line="114" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="115" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="117" pos:column="3">/* Allocate the trailer */</comment>
  <expr_stmt><expr><name pos:line="118" pos:column="3">trailer<pos:position pos:line="118" pos:column="10"/></name> <operator pos:line="118" pos:column="11">=<pos:position pos:line="118" pos:column="12"/></operator> <call><name pos:line="118" pos:column="13">malloc<pos:position pos:line="118" pos:column="19"/></name><argument_list pos:line="118" pos:column="19">(<argument><expr><name><name pos:line="118" pos:column="20">sizes<pos:position pos:line="118" pos:column="25"/></name><operator pos:line="118" pos:column="25">.<pos:position pos:line="118" pos:column="26"/></operator><name pos:line="118" pos:column="26">cbSecurityTrailer<pos:position pos:line="118" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="118" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="45"/></expr_stmt>
  <if pos:line="119" pos:column="3">if<condition pos:line="119" pos:column="5">(<expr><operator pos:line="119" pos:column="6">!<pos:position pos:line="119" pos:column="7"/></operator><name pos:line="119" pos:column="7">trailer<pos:position pos:line="119" pos:column="14"/></name></expr>)<pos:position pos:line="119" pos:column="15"/></condition><then pos:line="119" pos:column="15">
    <block type="pseudo"><return pos:line="120" pos:column="5">return <expr><name pos:line="120" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="120" pos:column="31"/></name></expr>;<pos:position pos:line="120" pos:column="32"/></return></block></then></if>

  <comment type="block" pos:line="122" pos:column="3">/* Convert the user name to UTF8 when operating with Unicode */</comment>
  <expr_stmt><expr><name pos:line="123" pos:column="3">user_name<pos:position pos:line="123" pos:column="12"/></name> <operator pos:line="123" pos:column="13">=<pos:position pos:line="123" pos:column="14"/></operator> <call><name pos:line="123" pos:column="15">Curl_convert_tchar_to_UTF8<pos:position pos:line="123" pos:column="41"/></name><argument_list pos:line="123" pos:column="41">(<argument><expr><name><name pos:line="123" pos:column="42">names<pos:position pos:line="123" pos:column="47"/></name><operator pos:line="123" pos:column="47">.<pos:position pos:line="123" pos:column="48"/></operator><name pos:line="123" pos:column="48">sUserName<pos:position pos:line="123" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="59"/></expr_stmt>
  <if pos:line="124" pos:column="3">if<condition pos:line="124" pos:column="5">(<expr><operator pos:line="124" pos:column="6">!<pos:position pos:line="124" pos:column="7"/></operator><name pos:line="124" pos:column="7">user_name<pos:position pos:line="124" pos:column="16"/></name></expr>)<pos:position pos:line="124" pos:column="17"/></condition><then pos:line="124" pos:column="17"> <block pos:line="124" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="125" pos:column="5">free<pos:position pos:line="125" pos:column="9"/></name><argument_list pos:line="125" pos:column="9">(<argument><expr><name pos:line="125" pos:column="10">trailer<pos:position pos:line="125" pos:column="17"/></name></expr></argument>)<pos:position pos:line="125" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="19"/></expr_stmt>

    <return pos:line="127" pos:column="5">return <expr><name pos:line="127" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="127" pos:column="31"/></name></expr>;<pos:position pos:line="127" pos:column="32"/></return>
  }<pos:position pos:line="128" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="130" pos:column="3">/* Allocate our message */</comment>
  <expr_stmt><expr><name pos:line="131" pos:column="3">messagelen<pos:position pos:line="131" pos:column="13"/></name> <operator pos:line="131" pos:column="14">=<pos:position pos:line="131" pos:column="15"/></operator> <sizeof pos:line="131" pos:column="16">sizeof<argument_list pos:line="131" pos:column="22">(<argument><expr><name pos:line="131" pos:column="23">outdata<pos:position pos:line="131" pos:column="30"/></name></expr></argument>)<pos:position pos:line="131" pos:column="31"/></argument_list></sizeof> <operator pos:line="131" pos:column="32">+<pos:position pos:line="131" pos:column="33"/></operator> <call><name pos:line="131" pos:column="34">strlen<pos:position pos:line="131" pos:column="40"/></name><argument_list pos:line="131" pos:column="40">(<argument><expr><name pos:line="131" pos:column="41">user_name<pos:position pos:line="131" pos:column="50"/></name></expr></argument>)<pos:position pos:line="131" pos:column="51"/></argument_list></call> <operator pos:line="131" pos:column="52">+<pos:position pos:line="131" pos:column="53"/></operator> <literal type="number" pos:line="131" pos:column="54">1<pos:position pos:line="131" pos:column="55"/></literal></expr>;<pos:position pos:line="131" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name pos:line="132" pos:column="3">message<pos:position pos:line="132" pos:column="10"/></name> <operator pos:line="132" pos:column="11">=<pos:position pos:line="132" pos:column="12"/></operator> <call><name pos:line="132" pos:column="13">malloc<pos:position pos:line="132" pos:column="19"/></name><argument_list pos:line="132" pos:column="19">(<argument><expr><name pos:line="132" pos:column="20">messagelen<pos:position pos:line="132" pos:column="30"/></name></expr></argument>)<pos:position pos:line="132" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="32"/></expr_stmt>
  <if pos:line="133" pos:column="3">if<condition pos:line="133" pos:column="5">(<expr><operator pos:line="133" pos:column="6">!<pos:position pos:line="133" pos:column="7"/></operator><name pos:line="133" pos:column="7">message<pos:position pos:line="133" pos:column="14"/></name></expr>)<pos:position pos:line="133" pos:column="15"/></condition><then pos:line="133" pos:column="15"> <block pos:line="133" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="134" pos:column="5">free<pos:position pos:line="134" pos:column="9"/></name><argument_list pos:line="134" pos:column="9">(<argument><expr><name pos:line="134" pos:column="10">trailer<pos:position pos:line="134" pos:column="17"/></name></expr></argument>)<pos:position pos:line="134" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">Curl_unicodefree<pos:position pos:line="135" pos:column="21"/></name><argument_list pos:line="135" pos:column="21">(<argument><expr><name pos:line="135" pos:column="22">user_name<pos:position pos:line="135" pos:column="31"/></name></expr></argument>)<pos:position pos:line="135" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="33"/></expr_stmt>

    <return pos:line="137" pos:column="5">return <expr><name pos:line="137" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="137" pos:column="31"/></name></expr>;<pos:position pos:line="137" pos:column="32"/></return>
  }<pos:position pos:line="138" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="140" pos:column="3">/* Populate the message with the security layer, client supported receive
     message size and authorization identity including the 0x00 based
     terminator. Note: Despite RFC4752 Section 3.1 stating "The authorization
     identity is not terminated with the zero-valued (%x00) octet." it seems
     necessary to include it. */</comment>
  <expr_stmt><expr><name pos:line="145" pos:column="3">outdata<pos:position pos:line="145" pos:column="10"/></name> <operator pos:line="145" pos:column="11">=<pos:position pos:line="145" pos:column="12"/></operator> <call><name pos:line="145" pos:column="13">htonl<pos:position pos:line="145" pos:column="18"/></name><argument_list pos:line="145" pos:column="18">(<argument><expr><name pos:line="145" pos:column="19">max_size<pos:position pos:line="145" pos:column="27"/></name></expr></argument>)<pos:position pos:line="145" pos:column="28"/></argument_list></call> <operator pos:line="145" pos:column="29">|<pos:position pos:line="145" pos:column="30"/></operator> <name pos:line="145" pos:column="31">sec_layer<pos:position pos:line="145" pos:column="40"/></name></expr>;<pos:position pos:line="145" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="146" pos:column="3">memcpy<pos:position pos:line="146" pos:column="9"/></name><argument_list pos:line="146" pos:column="9">(<argument><expr><name pos:line="146" pos:column="10">message<pos:position pos:line="146" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="146" pos:column="19">&amp;<pos:position pos:line="146" pos:column="24"/></operator><name pos:line="146" pos:column="20">outdata<pos:position pos:line="146" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="146" pos:column="29">sizeof<argument_list pos:line="146" pos:column="35">(<argument><expr><name pos:line="146" pos:column="36">outdata<pos:position pos:line="146" pos:column="43"/></name></expr></argument>)<pos:position pos:line="146" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="146" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="147" pos:column="3">strcpy<pos:position pos:line="147" pos:column="9"/></name><argument_list pos:line="147" pos:column="9">(<argument><expr><operator pos:line="147" pos:column="10">(<pos:position pos:line="147" pos:column="11"/></operator><name pos:line="147" pos:column="11">char<pos:position pos:line="147" pos:column="15"/></name> <operator pos:line="147" pos:column="16">*<pos:position pos:line="147" pos:column="17"/></operator><operator pos:line="147" pos:column="17">)<pos:position pos:line="147" pos:column="18"/></operator> <name pos:line="147" pos:column="19">message<pos:position pos:line="147" pos:column="26"/></name> <operator pos:line="147" pos:column="27">+<pos:position pos:line="147" pos:column="28"/></operator> <sizeof pos:line="147" pos:column="29">sizeof<argument_list pos:line="147" pos:column="35">(<argument><expr><name pos:line="147" pos:column="36">outdata<pos:position pos:line="147" pos:column="43"/></name></expr></argument>)<pos:position pos:line="147" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="147" pos:column="46">user_name<pos:position pos:line="147" pos:column="55"/></name></expr></argument>)<pos:position pos:line="147" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="148" pos:column="3">Curl_unicodefree<pos:position pos:line="148" pos:column="19"/></name><argument_list pos:line="148" pos:column="19">(<argument><expr><name pos:line="148" pos:column="20">user_name<pos:position pos:line="148" pos:column="29"/></name></expr></argument>)<pos:position pos:line="148" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="150" pos:column="3">/* Allocate the padding */</comment>
  <expr_stmt><expr><name pos:line="151" pos:column="3">padding<pos:position pos:line="151" pos:column="10"/></name> <operator pos:line="151" pos:column="11">=<pos:position pos:line="151" pos:column="12"/></operator> <call><name pos:line="151" pos:column="13">malloc<pos:position pos:line="151" pos:column="19"/></name><argument_list pos:line="151" pos:column="19">(<argument><expr><name><name pos:line="151" pos:column="20">sizes<pos:position pos:line="151" pos:column="25"/></name><operator pos:line="151" pos:column="25">.<pos:position pos:line="151" pos:column="26"/></operator><name pos:line="151" pos:column="26">cbBlockSize<pos:position pos:line="151" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="151" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="39"/></expr_stmt>
  <if pos:line="152" pos:column="3">if<condition pos:line="152" pos:column="5">(<expr><operator pos:line="152" pos:column="6">!<pos:position pos:line="152" pos:column="7"/></operator><name pos:line="152" pos:column="7">padding<pos:position pos:line="152" pos:column="14"/></name></expr>)<pos:position pos:line="152" pos:column="15"/></condition><then pos:line="152" pos:column="15"> <block pos:line="152" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="153" pos:column="5">free<pos:position pos:line="153" pos:column="9"/></name><argument_list pos:line="153" pos:column="9">(<argument><expr><name pos:line="153" pos:column="10">message<pos:position pos:line="153" pos:column="17"/></name></expr></argument>)<pos:position pos:line="153" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="154" pos:column="5">free<pos:position pos:line="154" pos:column="9"/></name><argument_list pos:line="154" pos:column="9">(<argument><expr><name pos:line="154" pos:column="10">trailer<pos:position pos:line="154" pos:column="17"/></name></expr></argument>)<pos:position pos:line="154" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="19"/></expr_stmt>

    <return pos:line="156" pos:column="5">return <expr><name pos:line="156" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="156" pos:column="31"/></name></expr>;<pos:position pos:line="156" pos:column="32"/></return>
  }<pos:position pos:line="157" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="159" pos:column="3">/* Setup the "authentication data" security buffer */</comment>
  <expr_stmt><expr><name><name pos:line="160" pos:column="3">wrap_desc<pos:position pos:line="160" pos:column="12"/></name><operator pos:line="160" pos:column="12">.<pos:position pos:line="160" pos:column="13"/></operator><name pos:line="160" pos:column="13">ulVersion<pos:position pos:line="160" pos:column="22"/></name></name>    <operator pos:line="160" pos:column="26">=<pos:position pos:line="160" pos:column="27"/></operator> <name pos:line="160" pos:column="28">SECBUFFER_VERSION<pos:position pos:line="160" pos:column="45"/></name></expr>;<pos:position pos:line="160" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="161" pos:column="3">wrap_desc<pos:position pos:line="161" pos:column="12"/></name><operator pos:line="161" pos:column="12">.<pos:position pos:line="161" pos:column="13"/></operator><name pos:line="161" pos:column="13">cBuffers<pos:position pos:line="161" pos:column="21"/></name></name>     <operator pos:line="161" pos:column="26">=<pos:position pos:line="161" pos:column="27"/></operator> <literal type="number" pos:line="161" pos:column="28">3<pos:position pos:line="161" pos:column="29"/></literal></expr>;<pos:position pos:line="161" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="162" pos:column="3">wrap_desc<pos:position pos:line="162" pos:column="12"/></name><operator pos:line="162" pos:column="12">.<pos:position pos:line="162" pos:column="13"/></operator><name pos:line="162" pos:column="13">pBuffers<pos:position pos:line="162" pos:column="21"/></name></name>     <operator pos:line="162" pos:column="26">=<pos:position pos:line="162" pos:column="27"/></operator> <name pos:line="162" pos:column="28">wrap_buf<pos:position pos:line="162" pos:column="36"/></name></expr>;<pos:position pos:line="162" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="163" pos:column="3">wrap_buf<pos:position pos:line="163" pos:column="11"/></name><index pos:line="163" pos:column="11">[<expr><literal type="number" pos:line="163" pos:column="12">0<pos:position pos:line="163" pos:column="13"/></literal></expr>]<pos:position pos:line="163" pos:column="14"/></index></name><operator pos:line="163" pos:column="14">.<pos:position pos:line="163" pos:column="15"/></operator><name pos:line="163" pos:column="15">BufferType<pos:position pos:line="163" pos:column="25"/></name> <operator pos:line="163" pos:column="26">=<pos:position pos:line="163" pos:column="27"/></operator> <name pos:line="163" pos:column="28">SECBUFFER_TOKEN<pos:position pos:line="163" pos:column="43"/></name></expr>;<pos:position pos:line="163" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="164" pos:column="3">wrap_buf<pos:position pos:line="164" pos:column="11"/></name><index pos:line="164" pos:column="11">[<expr><literal type="number" pos:line="164" pos:column="12">0<pos:position pos:line="164" pos:column="13"/></literal></expr>]<pos:position pos:line="164" pos:column="14"/></index></name><operator pos:line="164" pos:column="14">.<pos:position pos:line="164" pos:column="15"/></operator><name pos:line="164" pos:column="15">pvBuffer<pos:position pos:line="164" pos:column="23"/></name>   <operator pos:line="164" pos:column="26">=<pos:position pos:line="164" pos:column="27"/></operator> <name pos:line="164" pos:column="28">trailer<pos:position pos:line="164" pos:column="35"/></name></expr>;<pos:position pos:line="164" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="165" pos:column="3">wrap_buf<pos:position pos:line="165" pos:column="11"/></name><index pos:line="165" pos:column="11">[<expr><literal type="number" pos:line="165" pos:column="12">0<pos:position pos:line="165" pos:column="13"/></literal></expr>]<pos:position pos:line="165" pos:column="14"/></index></name><operator pos:line="165" pos:column="14">.<pos:position pos:line="165" pos:column="15"/></operator><name pos:line="165" pos:column="15">cbBuffer<pos:position pos:line="165" pos:column="23"/></name>   <operator pos:line="165" pos:column="26">=<pos:position pos:line="165" pos:column="27"/></operator> <name><name pos:line="165" pos:column="28">sizes<pos:position pos:line="165" pos:column="33"/></name><operator pos:line="165" pos:column="33">.<pos:position pos:line="165" pos:column="34"/></operator><name pos:line="165" pos:column="34">cbSecurityTrailer<pos:position pos:line="165" pos:column="51"/></name></name></expr>;<pos:position pos:line="165" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="166" pos:column="3">wrap_buf<pos:position pos:line="166" pos:column="11"/></name><index pos:line="166" pos:column="11">[<expr><literal type="number" pos:line="166" pos:column="12">1<pos:position pos:line="166" pos:column="13"/></literal></expr>]<pos:position pos:line="166" pos:column="14"/></index></name><operator pos:line="166" pos:column="14">.<pos:position pos:line="166" pos:column="15"/></operator><name pos:line="166" pos:column="15">BufferType<pos:position pos:line="166" pos:column="25"/></name> <operator pos:line="166" pos:column="26">=<pos:position pos:line="166" pos:column="27"/></operator> <name pos:line="166" pos:column="28">SECBUFFER_DATA<pos:position pos:line="166" pos:column="42"/></name></expr>;<pos:position pos:line="166" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="167" pos:column="3">wrap_buf<pos:position pos:line="167" pos:column="11"/></name><index pos:line="167" pos:column="11">[<expr><literal type="number" pos:line="167" pos:column="12">1<pos:position pos:line="167" pos:column="13"/></literal></expr>]<pos:position pos:line="167" pos:column="14"/></index></name><operator pos:line="167" pos:column="14">.<pos:position pos:line="167" pos:column="15"/></operator><name pos:line="167" pos:column="15">pvBuffer<pos:position pos:line="167" pos:column="23"/></name>   <operator pos:line="167" pos:column="26">=<pos:position pos:line="167" pos:column="27"/></operator> <name pos:line="167" pos:column="28">message<pos:position pos:line="167" pos:column="35"/></name></expr>;<pos:position pos:line="167" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="168" pos:column="3">wrap_buf<pos:position pos:line="168" pos:column="11"/></name><index pos:line="168" pos:column="11">[<expr><literal type="number" pos:line="168" pos:column="12">1<pos:position pos:line="168" pos:column="13"/></literal></expr>]<pos:position pos:line="168" pos:column="14"/></index></name><operator pos:line="168" pos:column="14">.<pos:position pos:line="168" pos:column="15"/></operator><name pos:line="168" pos:column="15">cbBuffer<pos:position pos:line="168" pos:column="23"/></name>   <operator pos:line="168" pos:column="26">=<pos:position pos:line="168" pos:column="27"/></operator> <call><name pos:line="168" pos:column="28">curlx_uztoul<pos:position pos:line="168" pos:column="40"/></name><argument_list pos:line="168" pos:column="40">(<argument><expr><name pos:line="168" pos:column="41">messagelen<pos:position pos:line="168" pos:column="51"/></name></expr></argument>)<pos:position pos:line="168" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="169" pos:column="3">wrap_buf<pos:position pos:line="169" pos:column="11"/></name><index pos:line="169" pos:column="11">[<expr><literal type="number" pos:line="169" pos:column="12">2<pos:position pos:line="169" pos:column="13"/></literal></expr>]<pos:position pos:line="169" pos:column="14"/></index></name><operator pos:line="169" pos:column="14">.<pos:position pos:line="169" pos:column="15"/></operator><name pos:line="169" pos:column="15">BufferType<pos:position pos:line="169" pos:column="25"/></name> <operator pos:line="169" pos:column="26">=<pos:position pos:line="169" pos:column="27"/></operator> <name pos:line="169" pos:column="28">SECBUFFER_PADDING<pos:position pos:line="169" pos:column="45"/></name></expr>;<pos:position pos:line="169" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="170" pos:column="3">wrap_buf<pos:position pos:line="170" pos:column="11"/></name><index pos:line="170" pos:column="11">[<expr><literal type="number" pos:line="170" pos:column="12">2<pos:position pos:line="170" pos:column="13"/></literal></expr>]<pos:position pos:line="170" pos:column="14"/></index></name><operator pos:line="170" pos:column="14">.<pos:position pos:line="170" pos:column="15"/></operator><name pos:line="170" pos:column="15">pvBuffer<pos:position pos:line="170" pos:column="23"/></name>   <operator pos:line="170" pos:column="26">=<pos:position pos:line="170" pos:column="27"/></operator> <name pos:line="170" pos:column="28">padding<pos:position pos:line="170" pos:column="35"/></name></expr>;<pos:position pos:line="170" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="171" pos:column="3">wrap_buf<pos:position pos:line="171" pos:column="11"/></name><index pos:line="171" pos:column="11">[<expr><literal type="number" pos:line="171" pos:column="12">2<pos:position pos:line="171" pos:column="13"/></literal></expr>]<pos:position pos:line="171" pos:column="14"/></index></name><operator pos:line="171" pos:column="14">.<pos:position pos:line="171" pos:column="15"/></operator><name pos:line="171" pos:column="15">cbBuffer<pos:position pos:line="171" pos:column="23"/></name>   <operator pos:line="171" pos:column="26">=<pos:position pos:line="171" pos:column="27"/></operator> <name><name pos:line="171" pos:column="28">sizes<pos:position pos:line="171" pos:column="33"/></name><operator pos:line="171" pos:column="33">.<pos:position pos:line="171" pos:column="34"/></operator><name pos:line="171" pos:column="34">cbBlockSize<pos:position pos:line="171" pos:column="45"/></name></name></expr>;<pos:position pos:line="171" pos:column="46"/></expr_stmt>

  <comment type="block" pos:line="173" pos:column="3">/* Encrypt the data */</comment>
  <expr_stmt><expr><name pos:line="174" pos:column="3">status<pos:position pos:line="174" pos:column="9"/></name> <operator pos:line="174" pos:column="10">=<pos:position pos:line="174" pos:column="11"/></operator> <call><name><name pos:line="174" pos:column="12">s_pSecFn<pos:position pos:line="174" pos:column="20"/></name><operator pos:line="174" pos:column="20">-&gt;<pos:position pos:line="174" pos:column="25"/></operator><name pos:line="174" pos:column="22">EncryptMessage<pos:position pos:line="174" pos:column="36"/></name></name><argument_list pos:line="174" pos:column="36">(<argument><expr><name><name pos:line="174" pos:column="37">krb5<pos:position pos:line="174" pos:column="41"/></name><operator pos:line="174" pos:column="41">-&gt;<pos:position pos:line="174" pos:column="46"/></operator><name pos:line="174" pos:column="43">context<pos:position pos:line="174" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="174" pos:column="52">KERB_WRAP_NO_ENCRYPT<pos:position pos:line="174" pos:column="72"/></name></expr></argument>,
                                    <argument><expr><operator pos:line="175" pos:column="37">&amp;<pos:position pos:line="175" pos:column="42"/></operator><name pos:line="175" pos:column="38">wrap_desc<pos:position pos:line="175" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="175" pos:column="49">0<pos:position pos:line="175" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="52"/></expr_stmt>
  <if pos:line="176" pos:column="3">if<condition pos:line="176" pos:column="5">(<expr><name pos:line="176" pos:column="6">status<pos:position pos:line="176" pos:column="12"/></name> <operator pos:line="176" pos:column="13">!=<pos:position pos:line="176" pos:column="15"/></operator> <name pos:line="176" pos:column="16">SEC_E_OK<pos:position pos:line="176" pos:column="24"/></name></expr>)<pos:position pos:line="176" pos:column="25"/></condition><then pos:line="176" pos:column="25"> <block pos:line="176" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="177" pos:column="5">free<pos:position pos:line="177" pos:column="9"/></name><argument_list pos:line="177" pos:column="9">(<argument><expr><name pos:line="177" pos:column="10">padding<pos:position pos:line="177" pos:column="17"/></name></expr></argument>)<pos:position pos:line="177" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="178" pos:column="5">free<pos:position pos:line="178" pos:column="9"/></name><argument_list pos:line="178" pos:column="9">(<argument><expr><name pos:line="178" pos:column="10">message<pos:position pos:line="178" pos:column="17"/></name></expr></argument>)<pos:position pos:line="178" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="179" pos:column="5">free<pos:position pos:line="179" pos:column="9"/></name><argument_list pos:line="179" pos:column="9">(<argument><expr><name pos:line="179" pos:column="10">trailer<pos:position pos:line="179" pos:column="17"/></name></expr></argument>)<pos:position pos:line="179" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="19"/></expr_stmt>

    <return pos:line="181" pos:column="5">return <expr><name pos:line="181" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="181" pos:column="31"/></name></expr>;<pos:position pos:line="181" pos:column="32"/></return>
  }<pos:position pos:line="182" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="184" pos:column="3">/* Allocate the encryption (wrap) buffer */</comment>
  <expr_stmt><expr><name pos:line="185" pos:column="3">appdatalen<pos:position pos:line="185" pos:column="13"/></name> <operator pos:line="185" pos:column="14">=<pos:position pos:line="185" pos:column="15"/></operator> <name><name pos:line="185" pos:column="16">wrap_buf<pos:position pos:line="185" pos:column="24"/></name><index pos:line="185" pos:column="24">[<expr><literal type="number" pos:line="185" pos:column="25">0<pos:position pos:line="185" pos:column="26"/></literal></expr>]<pos:position pos:line="185" pos:column="27"/></index></name><operator pos:line="185" pos:column="27">.<pos:position pos:line="185" pos:column="28"/></operator><name pos:line="185" pos:column="28">cbBuffer<pos:position pos:line="185" pos:column="36"/></name> <operator pos:line="185" pos:column="37">+<pos:position pos:line="185" pos:column="38"/></operator> <name><name pos:line="185" pos:column="39">wrap_buf<pos:position pos:line="185" pos:column="47"/></name><index pos:line="185" pos:column="47">[<expr><literal type="number" pos:line="185" pos:column="48">1<pos:position pos:line="185" pos:column="49"/></literal></expr>]<pos:position pos:line="185" pos:column="50"/></index></name><operator pos:line="185" pos:column="50">.<pos:position pos:line="185" pos:column="51"/></operator><name pos:line="185" pos:column="51">cbBuffer<pos:position pos:line="185" pos:column="59"/></name> <operator pos:line="185" pos:column="60">+<pos:position pos:line="185" pos:column="61"/></operator>
               <name><name pos:line="186" pos:column="16">wrap_buf<pos:position pos:line="186" pos:column="24"/></name><index pos:line="186" pos:column="24">[<expr><literal type="number" pos:line="186" pos:column="25">2<pos:position pos:line="186" pos:column="26"/></literal></expr>]<pos:position pos:line="186" pos:column="27"/></index></name><operator pos:line="186" pos:column="27">.<pos:position pos:line="186" pos:column="28"/></operator><name pos:line="186" pos:column="28">cbBuffer<pos:position pos:line="186" pos:column="36"/></name></expr>;<pos:position pos:line="186" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="187" pos:column="3">appdata<pos:position pos:line="187" pos:column="10"/></name> <operator pos:line="187" pos:column="11">=<pos:position pos:line="187" pos:column="12"/></operator> <call><name pos:line="187" pos:column="13">malloc<pos:position pos:line="187" pos:column="19"/></name><argument_list pos:line="187" pos:column="19">(<argument><expr><name pos:line="187" pos:column="20">appdatalen<pos:position pos:line="187" pos:column="30"/></name></expr></argument>)<pos:position pos:line="187" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="32"/></expr_stmt>
  <if pos:line="188" pos:column="3">if<condition pos:line="188" pos:column="5">(<expr><operator pos:line="188" pos:column="6">!<pos:position pos:line="188" pos:column="7"/></operator><name pos:line="188" pos:column="7">appdata<pos:position pos:line="188" pos:column="14"/></name></expr>)<pos:position pos:line="188" pos:column="15"/></condition><then pos:line="188" pos:column="15"> <block pos:line="188" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="189" pos:column="5">free<pos:position pos:line="189" pos:column="9"/></name><argument_list pos:line="189" pos:column="9">(<argument><expr><name pos:line="189" pos:column="10">padding<pos:position pos:line="189" pos:column="17"/></name></expr></argument>)<pos:position pos:line="189" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="190" pos:column="5">free<pos:position pos:line="190" pos:column="9"/></name><argument_list pos:line="190" pos:column="9">(<argument><expr><name pos:line="190" pos:column="10">message<pos:position pos:line="190" pos:column="17"/></name></expr></argument>)<pos:position pos:line="190" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="191" pos:column="5">free<pos:position pos:line="191" pos:column="9"/></name><argument_list pos:line="191" pos:column="9">(<argument><expr><name pos:line="191" pos:column="10">trailer<pos:position pos:line="191" pos:column="17"/></name></expr></argument>)<pos:position pos:line="191" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="19"/></expr_stmt>

    <return pos:line="193" pos:column="5">return <expr><name pos:line="193" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="193" pos:column="31"/></name></expr>;<pos:position pos:line="193" pos:column="32"/></return>
  }<pos:position pos:line="194" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="196" pos:column="3">/* Populate the encryption buffer */</comment>
  <expr_stmt><expr><call><name pos:line="197" pos:column="3">memcpy<pos:position pos:line="197" pos:column="9"/></name><argument_list pos:line="197" pos:column="9">(<argument><expr><name pos:line="197" pos:column="10">appdata<pos:position pos:line="197" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="19">wrap_buf<pos:position pos:line="197" pos:column="27"/></name><index pos:line="197" pos:column="27">[<expr><literal type="number" pos:line="197" pos:column="28">0<pos:position pos:line="197" pos:column="29"/></literal></expr>]<pos:position pos:line="197" pos:column="30"/></index></name><operator pos:line="197" pos:column="30">.<pos:position pos:line="197" pos:column="31"/></operator><name pos:line="197" pos:column="31">pvBuffer<pos:position pos:line="197" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="41">wrap_buf<pos:position pos:line="197" pos:column="49"/></name><index pos:line="197" pos:column="49">[<expr><literal type="number" pos:line="197" pos:column="50">0<pos:position pos:line="197" pos:column="51"/></literal></expr>]<pos:position pos:line="197" pos:column="52"/></index></name><operator pos:line="197" pos:column="52">.<pos:position pos:line="197" pos:column="53"/></operator><name pos:line="197" pos:column="53">cbBuffer<pos:position pos:line="197" pos:column="61"/></name></expr></argument>)<pos:position pos:line="197" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="63"/></expr_stmt>
  <expr_stmt><expr><name pos:line="198" pos:column="3">offset<pos:position pos:line="198" pos:column="9"/></name> <operator pos:line="198" pos:column="10">+=<pos:position pos:line="198" pos:column="12"/></operator> <name><name pos:line="198" pos:column="13">wrap_buf<pos:position pos:line="198" pos:column="21"/></name><index pos:line="198" pos:column="21">[<expr><literal type="number" pos:line="198" pos:column="22">0<pos:position pos:line="198" pos:column="23"/></literal></expr>]<pos:position pos:line="198" pos:column="24"/></index></name><operator pos:line="198" pos:column="24">.<pos:position pos:line="198" pos:column="25"/></operator><name pos:line="198" pos:column="25">cbBuffer<pos:position pos:line="198" pos:column="33"/></name></expr>;<pos:position pos:line="198" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="199" pos:column="3">memcpy<pos:position pos:line="199" pos:column="9"/></name><argument_list pos:line="199" pos:column="9">(<argument><expr><name pos:line="199" pos:column="10">appdata<pos:position pos:line="199" pos:column="17"/></name> <operator pos:line="199" pos:column="18">+<pos:position pos:line="199" pos:column="19"/></operator> <name pos:line="199" pos:column="20">offset<pos:position pos:line="199" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="28">wrap_buf<pos:position pos:line="199" pos:column="36"/></name><index pos:line="199" pos:column="36">[<expr><literal type="number" pos:line="199" pos:column="37">1<pos:position pos:line="199" pos:column="38"/></literal></expr>]<pos:position pos:line="199" pos:column="39"/></index></name><operator pos:line="199" pos:column="39">.<pos:position pos:line="199" pos:column="40"/></operator><name pos:line="199" pos:column="40">pvBuffer<pos:position pos:line="199" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="50">wrap_buf<pos:position pos:line="199" pos:column="58"/></name><index pos:line="199" pos:column="58">[<expr><literal type="number" pos:line="199" pos:column="59">1<pos:position pos:line="199" pos:column="60"/></literal></expr>]<pos:position pos:line="199" pos:column="61"/></index></name><operator pos:line="199" pos:column="61">.<pos:position pos:line="199" pos:column="62"/></operator><name pos:line="199" pos:column="62">cbBuffer<pos:position pos:line="199" pos:column="70"/></name></expr></argument>)<pos:position pos:line="199" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><name pos:line="200" pos:column="3">offset<pos:position pos:line="200" pos:column="9"/></name> <operator pos:line="200" pos:column="10">+=<pos:position pos:line="200" pos:column="12"/></operator> <name><name pos:line="200" pos:column="13">wrap_buf<pos:position pos:line="200" pos:column="21"/></name><index pos:line="200" pos:column="21">[<expr><literal type="number" pos:line="200" pos:column="22">1<pos:position pos:line="200" pos:column="23"/></literal></expr>]<pos:position pos:line="200" pos:column="24"/></index></name><operator pos:line="200" pos:column="24">.<pos:position pos:line="200" pos:column="25"/></operator><name pos:line="200" pos:column="25">cbBuffer<pos:position pos:line="200" pos:column="33"/></name></expr>;<pos:position pos:line="200" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="201" pos:column="3">memcpy<pos:position pos:line="201" pos:column="9"/></name><argument_list pos:line="201" pos:column="9">(<argument><expr><name pos:line="201" pos:column="10">appdata<pos:position pos:line="201" pos:column="17"/></name> <operator pos:line="201" pos:column="18">+<pos:position pos:line="201" pos:column="19"/></operator> <name pos:line="201" pos:column="20">offset<pos:position pos:line="201" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="201" pos:column="28">wrap_buf<pos:position pos:line="201" pos:column="36"/></name><index pos:line="201" pos:column="36">[<expr><literal type="number" pos:line="201" pos:column="37">2<pos:position pos:line="201" pos:column="38"/></literal></expr>]<pos:position pos:line="201" pos:column="39"/></index></name><operator pos:line="201" pos:column="39">.<pos:position pos:line="201" pos:column="40"/></operator><name pos:line="201" pos:column="40">pvBuffer<pos:position pos:line="201" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="201" pos:column="50">wrap_buf<pos:position pos:line="201" pos:column="58"/></name><index pos:line="201" pos:column="58">[<expr><literal type="number" pos:line="201" pos:column="59">2<pos:position pos:line="201" pos:column="60"/></literal></expr>]<pos:position pos:line="201" pos:column="61"/></index></name><operator pos:line="201" pos:column="61">.<pos:position pos:line="201" pos:column="62"/></operator><name pos:line="201" pos:column="62">cbBuffer<pos:position pos:line="201" pos:column="70"/></name></expr></argument>)<pos:position pos:line="201" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="72"/></expr_stmt>

  <comment type="block" pos:line="203" pos:column="3">/* Base64 encode the response */</comment>
  <expr_stmt><expr><name pos:line="204" pos:column="3">result<pos:position pos:line="204" pos:column="9"/></name> <operator pos:line="204" pos:column="10">=<pos:position pos:line="204" pos:column="11"/></operator> <call><name pos:line="204" pos:column="12">Curl_base64_encode<pos:position pos:line="204" pos:column="30"/></name><argument_list pos:line="204" pos:column="30">(<argument><expr><name pos:line="204" pos:column="31">data<pos:position pos:line="204" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="204" pos:column="37">(<pos:position pos:line="204" pos:column="38"/></operator><name pos:line="204" pos:column="38">char<pos:position pos:line="204" pos:column="42"/></name> <operator pos:line="204" pos:column="43">*<pos:position pos:line="204" pos:column="44"/></operator><operator pos:line="204" pos:column="44">)<pos:position pos:line="204" pos:column="45"/></operator> <name pos:line="204" pos:column="46">appdata<pos:position pos:line="204" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="55">appdatalen<pos:position pos:line="204" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="67">outptr<pos:position pos:line="204" pos:column="73"/></name></expr></argument>,
                              <argument><expr><name pos:line="205" pos:column="31">outlen<pos:position pos:line="205" pos:column="37"/></name></expr></argument>)<pos:position pos:line="205" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="39"/></expr_stmt>

  <comment type="block" pos:line="207" pos:column="3">/* Free all of our local buffers */</comment>
  <expr_stmt><expr><call><name pos:line="208" pos:column="3">free<pos:position pos:line="208" pos:column="7"/></name><argument_list pos:line="208" pos:column="7">(<argument><expr><name pos:line="208" pos:column="8">appdata<pos:position pos:line="208" pos:column="15"/></name></expr></argument>)<pos:position pos:line="208" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="209" pos:column="3">free<pos:position pos:line="209" pos:column="7"/></name><argument_list pos:line="209" pos:column="7">(<argument><expr><name pos:line="209" pos:column="8">padding<pos:position pos:line="209" pos:column="15"/></name></expr></argument>)<pos:position pos:line="209" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="210" pos:column="3">free<pos:position pos:line="210" pos:column="7"/></name><argument_list pos:line="210" pos:column="7">(<argument><expr><name pos:line="210" pos:column="8">message<pos:position pos:line="210" pos:column="15"/></name></expr></argument>)<pos:position pos:line="210" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="211" pos:column="3">free<pos:position pos:line="211" pos:column="7"/></name><argument_list pos:line="211" pos:column="7">(<argument><expr><name pos:line="211" pos:column="8">trailer<pos:position pos:line="211" pos:column="15"/></name></expr></argument>)<pos:position pos:line="211" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="17"/></expr_stmt>

  <return pos:line="213" pos:column="3">return <expr><name pos:line="213" pos:column="10">result<pos:position pos:line="213" pos:column="16"/></name></expr>;<pos:position pos:line="213" pos:column="17"/></return>
}<pos:position pos:line="214" pos:column="2"/></block></function></unit>
