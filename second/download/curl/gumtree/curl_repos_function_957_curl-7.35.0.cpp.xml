<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_957_curl-7.35.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">imap_state_auth_digest_resp<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">connectdata<pos:position pos:line="1" pos:column="63"/></name></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">conn<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
                                            <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">imapcode<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
                                            <parameter><decl><type><name pos:line="3" pos:column="45">imapstate<pos:position pos:line="3" pos:column="54"/></name></type> <name pos:line="3" pos:column="55">instate<pos:position pos:line="3" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="63"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURLE_OK<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SessionHandle<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">conn<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">-&gt;<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="38">data<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">chlg64<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><name pos:line="7" pos:column="18">NULL<pos:position pos:line="7" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">rplyb64<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><name pos:line="8" pos:column="19">NULL<pos:position pos:line="8" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">len<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name></type> <name><name pos:line="11" pos:column="8">nonce<pos:position pos:line="11" pos:column="13"/></name><index pos:line="11" pos:column="13">[<expr><literal type="number" pos:line="11" pos:column="14">64<pos:position pos:line="11" pos:column="16"/></literal></expr>]<pos:position pos:line="11" pos:column="17"/></index></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name><name pos:line="12" pos:column="8">realm<pos:position pos:line="12" pos:column="13"/></name><index pos:line="12" pos:column="13">[<expr><literal type="number" pos:line="12" pos:column="14">128<pos:position pos:line="12" pos:column="17"/></literal></expr>]<pos:position pos:line="12" pos:column="18"/></index></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name></type> <name><name pos:line="13" pos:column="8">algorithm<pos:position pos:line="13" pos:column="17"/></name><index pos:line="13" pos:column="17">[<expr><literal type="number" pos:line="13" pos:column="18">64<pos:position pos:line="13" pos:column="20"/></literal></expr>]<pos:position pos:line="13" pos:column="21"/></index></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="15" pos:column="3">(<pos:position pos:line="15" pos:column="4"/></operator><name pos:line="15" pos:column="4">void<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">)<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">instate<pos:position pos:line="15" pos:column="16"/></name></expr>;<pos:position pos:line="15" pos:column="17"/></expr_stmt> <comment type="block" pos:line="15" pos:column="18">/* no use for this yet */</comment>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name pos:line="17" pos:column="6">imapcode<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">!=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="char" pos:line="17" pos:column="18">'+'<pos:position pos:line="17" pos:column="21"/></literal></expr>)<pos:position pos:line="17" pos:column="22"/></condition><then pos:line="17" pos:column="22"> <block pos:line="17" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">failf<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><name pos:line="18" pos:column="11">data<pos:position pos:line="18" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="17">"Access denied: %d"<pos:position pos:line="18" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="38">imapcode<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">CURLE_LOGIN_DENIED<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* Get the challenge message */</comment>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">imap_get_message<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name><name pos:line="23" pos:column="20">data<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">state<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">.<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">buffer<pos:position pos:line="23" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="40">&amp;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="41">chlg64<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt>

  <comment type="block" pos:line="25" pos:column="3">/* Decode the challange message */</comment>
  <expr_stmt><expr><name pos:line="26" pos:column="3">result<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">=<pos:position pos:line="26" pos:column="11"/></operator> <call><name pos:line="26" pos:column="12">Curl_sasl_decode_digest_md5_message<pos:position pos:line="26" pos:column="47"/></name><argument_list pos:line="26" pos:column="47">(<argument><expr><name pos:line="26" pos:column="48">chlg64<pos:position pos:line="26" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="56">nonce<pos:position pos:line="26" pos:column="61"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="63">sizeof<argument_list pos:line="26" pos:column="69">(<argument><expr><name pos:line="26" pos:column="70">nonce<pos:position pos:line="26" pos:column="75"/></name></expr></argument>)<pos:position pos:line="26" pos:column="76"/></argument_list></sizeof></expr></argument>,
                                               <argument><expr><name pos:line="27" pos:column="48">realm<pos:position pos:line="27" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="55">sizeof<argument_list pos:line="27" pos:column="61">(<argument><expr><name pos:line="27" pos:column="62">realm<pos:position pos:line="27" pos:column="67"/></name></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></sizeof></expr></argument>,
                                               <argument><expr><name pos:line="28" pos:column="48">algorithm<pos:position pos:line="28" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="59">sizeof<argument_list pos:line="28" pos:column="65">(<argument><expr><name pos:line="28" pos:column="66">algorithm<pos:position pos:line="28" pos:column="75"/></name></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="78"/></expr_stmt>
  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><name pos:line="29" pos:column="6">result<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">||<pos:position pos:line="29" pos:column="15"/></operator> <call><name pos:line="29" pos:column="16">strcmp<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">algorithm<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="34">"md5-sess"<pos:position pos:line="29" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call> <operator pos:line="29" pos:column="46">!=<pos:position pos:line="29" pos:column="48"/></operator> <literal type="number" pos:line="29" pos:column="49">0<pos:position pos:line="29" pos:column="50"/></literal></expr>)<pos:position pos:line="29" pos:column="51"/></condition><then pos:line="29" pos:column="51"> <block pos:line="29" pos:column="52">{
    <comment type="block" pos:line="30" pos:column="5">/* Send the cancellation */</comment>
    <expr_stmt><expr><name pos:line="31" pos:column="5">result<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <call><name pos:line="31" pos:column="14">Curl_pp_sendf<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><operator pos:line="31" pos:column="28">&amp;<pos:position pos:line="31" pos:column="33"/></operator><name><name pos:line="31" pos:column="29">conn<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">-&gt;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="35">proto<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">.<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="41">imapc<pos:position pos:line="31" pos:column="46"/></name><operator pos:line="31" pos:column="46">.<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="47">pp<pos:position pos:line="31" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="51">"%s"<pos:position pos:line="31" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="57">"*"<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt>

    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><operator pos:line="33" pos:column="8">!<pos:position pos:line="33" pos:column="9"/></operator><name pos:line="33" pos:column="9">result<pos:position pos:line="33" pos:column="15"/></name></expr>)<pos:position pos:line="33" pos:column="16"/></condition><then pos:line="33" pos:column="16">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="7">state<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">conn<pos:position pos:line="34" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="19">IMAP_AUTHENTICATE_CANCEL<pos:position pos:line="34" pos:column="43"/></name></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt></block></then></if>
  }<pos:position pos:line="35" pos:column="4"/></block></then>
  <else pos:line="36" pos:column="3">else <block pos:line="36" pos:column="8">{
    <comment type="block" pos:line="37" pos:column="5">/* Create the response message */</comment>
    <expr_stmt><expr><name pos:line="38" pos:column="5">result<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">=<pos:position pos:line="38" pos:column="13"/></operator> <call><name pos:line="38" pos:column="14">Curl_sasl_create_digest_md5_message<pos:position pos:line="38" pos:column="49"/></name><argument_list pos:line="38" pos:column="49">(<argument><expr><name pos:line="38" pos:column="50">data<pos:position pos:line="38" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="56">nonce<pos:position pos:line="38" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="63">realm<pos:position pos:line="38" pos:column="68"/></name></expr></argument>,
                                                 <argument><expr><name><name pos:line="39" pos:column="50">conn<pos:position pos:line="39" pos:column="54"/></name><operator pos:line="39" pos:column="54">-&gt;<pos:position pos:line="39" pos:column="59"/></operator><name pos:line="39" pos:column="56">user<pos:position pos:line="39" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="62">conn<pos:position pos:line="39" pos:column="66"/></name><operator pos:line="39" pos:column="66">-&gt;<pos:position pos:line="39" pos:column="71"/></operator><name pos:line="39" pos:column="68">passwd<pos:position pos:line="39" pos:column="74"/></name></name></expr></argument>,
                                                 <argument><expr><literal type="string" pos:line="40" pos:column="50">"imap"<pos:position pos:line="40" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="40" pos:column="58">&amp;<pos:position pos:line="40" pos:column="63"/></operator><name pos:line="40" pos:column="59">rplyb64<pos:position pos:line="40" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="68">&amp;<pos:position pos:line="40" pos:column="73"/></operator><name pos:line="40" pos:column="69">len<pos:position pos:line="40" pos:column="72"/></name></expr></argument>)<pos:position pos:line="40" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="74"/></expr_stmt>
    <if pos:line="41" pos:column="5">if<condition pos:line="41" pos:column="7">(<expr><operator pos:line="41" pos:column="8">!<pos:position pos:line="41" pos:column="9"/></operator><name pos:line="41" pos:column="9">result<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">&amp;&amp;<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="19">rplyb64<pos:position pos:line="41" pos:column="26"/></name></expr>)<pos:position pos:line="41" pos:column="27"/></condition><then pos:line="41" pos:column="27"> <block pos:line="41" pos:column="28">{
      <comment type="block" pos:line="42" pos:column="7">/* Send the response */</comment>
      <expr_stmt><expr><name pos:line="43" pos:column="7">result<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <call><name pos:line="43" pos:column="16">Curl_pp_sendf<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><operator pos:line="43" pos:column="30">&amp;<pos:position pos:line="43" pos:column="35"/></operator><name><name pos:line="43" pos:column="31">conn<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">-&gt;<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="37">proto<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">.<pos:position pos:line="43" pos:column="43"/></operator><name pos:line="43" pos:column="43">imapc<pos:position pos:line="43" pos:column="48"/></name><operator pos:line="43" pos:column="48">.<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="49">pp<pos:position pos:line="43" pos:column="51"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="53">"%s"<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="59">rplyb64<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="68"/></expr_stmt>

      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><operator pos:line="45" pos:column="10">!<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">result<pos:position pos:line="45" pos:column="17"/></name></expr>)<pos:position pos:line="45" pos:column="18"/></condition><then pos:line="45" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="9">state<pos:position pos:line="46" pos:column="14"/></name><argument_list pos:line="46" pos:column="14">(<argument><expr><name pos:line="46" pos:column="15">conn<pos:position pos:line="46" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="21">IMAP_AUTHENTICATE_DIGESTMD5_RESP<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
  }<pos:position pos:line="48" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="50" pos:column="3">Curl_safefree<pos:position pos:line="50" pos:column="16"/></name><argument_list pos:line="50" pos:column="16">(<argument><expr><name pos:line="50" pos:column="17">rplyb64<pos:position pos:line="50" pos:column="24"/></name></expr></argument>)<pos:position pos:line="50" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="26"/></expr_stmt>

  <return pos:line="52" pos:column="3">return <expr><name pos:line="52" pos:column="10">result<pos:position pos:line="52" pos:column="16"/></name></expr>;<pos:position pos:line="52" pos:column="17"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
