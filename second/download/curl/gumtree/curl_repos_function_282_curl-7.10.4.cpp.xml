<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_282_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_write<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name><name pos:line="1" pos:column="21">struct<pos:position pos:line="1" pos:column="27"/></name> <name pos:line="1" pos:column="28">connectdata<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">conn<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">int<pos:position pos:line="1" pos:column="50"/></name></type> <name pos:line="1" pos:column="51">sockfd<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="2" pos:column="21">void<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">mem<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">size_t<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">len<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="3" pos:column="21">ssize_t<pos:position pos:line="3" pos:column="28"/></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type><name pos:line="3" pos:column="30">written<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="38"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ssize_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">bytes_written<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">USE_SSLEAY<pos:position pos:line="7" pos:column="18"/></name></cpp:ifdef>
  <comment type="block" pos:line="8" pos:column="3">/* SSL_write() is said to return 'int' while write() and send() returns
     'size_t' */</comment>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name><name pos:line="10" pos:column="7">conn<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">-&gt;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="13">ssl<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">.<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">use<pos:position pos:line="10" pos:column="20"/></name></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21"> <block pos:line="10" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">err<pos:position pos:line="11" pos:column="12"/></name></decl>;<pos:position pos:line="11" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">rc<pos:position pos:line="12" pos:column="11"/></name> <init pos:line="12" pos:column="12">= <expr><call><name pos:line="12" pos:column="14">SSL_write<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name><name pos:line="12" pos:column="24">conn<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">ssl<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">.<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">handle<pos:position pos:line="12" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">mem<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="47">len<pos:position pos:line="12" pos:column="50"/></name></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="52"/></decl_stmt>

    <if pos:line="14" pos:column="5">if<condition pos:line="14" pos:column="7">(<expr><name pos:line="14" pos:column="8">rc<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">&lt;<pos:position pos:line="14" pos:column="15"/></operator> <literal type="number" pos:line="14" pos:column="13">0<pos:position pos:line="14" pos:column="14"/></literal></expr>)<pos:position pos:line="14" pos:column="15"/></condition><then pos:line="14" pos:column="15"> <block pos:line="14" pos:column="16">{
      <expr_stmt><expr><name pos:line="15" pos:column="7">err<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <call><name pos:line="15" pos:column="13">SSL_get_error<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name><name pos:line="15" pos:column="27">conn<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">ssl<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">.<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="37">handle<pos:position pos:line="15" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="45">rc<pos:position pos:line="15" pos:column="47"/></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>
    
      <switch pos:line="17" pos:column="7">switch<condition pos:line="17" pos:column="13">(<expr><name pos:line="17" pos:column="14">err<pos:position pos:line="17" pos:column="17"/></name></expr>)<pos:position pos:line="17" pos:column="18"/></condition> <block pos:line="17" pos:column="19">{
      <case pos:line="18" pos:column="7">case <expr><name pos:line="18" pos:column="12">SSL_ERROR_WANT_READ<pos:position pos:line="18" pos:column="31"/></name></expr>:<pos:position pos:line="18" pos:column="32"/></case>
      <case pos:line="19" pos:column="7">case <expr><name pos:line="19" pos:column="12">SSL_ERROR_WANT_WRITE<pos:position pos:line="19" pos:column="32"/></name></expr>:<pos:position pos:line="19" pos:column="33"/></case>
        <comment type="block" pos:line="20" pos:column="9">/* this is basicly the EWOULDBLOCK equivalent */</comment>
        <expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">written<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <literal type="number" pos:line="21" pos:column="20">0<pos:position pos:line="21" pos:column="21"/></literal></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">CURLE_OK<pos:position pos:line="22" pos:column="24"/></name></expr>;<pos:position pos:line="22" pos:column="25"/></return>
      <case pos:line="23" pos:column="7">case <expr><name pos:line="23" pos:column="12">SSL_ERROR_SYSCALL<pos:position pos:line="23" pos:column="29"/></name></expr>:<pos:position pos:line="23" pos:column="30"/></case>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">failf<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name><name pos:line="24" pos:column="15">conn<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">-&gt;<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="21">data<pos:position pos:line="24" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="27">"SSL_write() returned SYSCALL, errno = %d\n"<pos:position pos:line="24" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="73">errno<pos:position pos:line="24" pos:column="78"/></name></expr></argument>)<pos:position pos:line="24" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="80"/></expr_stmt>
        <return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">CURLE_SEND_ERROR<pos:position pos:line="25" pos:column="32"/></name></expr>;<pos:position pos:line="25" pos:column="33"/></return>
      }<pos:position pos:line="26" pos:column="8"/></block></switch>
      <comment type="block" pos:line="27" pos:column="7">/* a true error */</comment>
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">failf<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name><name pos:line="28" pos:column="13">conn<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">data<pos:position pos:line="28" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="25">"SSL_write() return error %d\n"<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">err<pos:position pos:line="28" pos:column="61"/></name></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt>
      <return pos:line="29" pos:column="7">return <expr><name pos:line="29" pos:column="14">CURLE_SEND_ERROR<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="31" pos:column="5">bytes_written<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">rc<pos:position pos:line="31" pos:column="23"/></name></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then>
  <else pos:line="33" pos:column="3">else <block pos:line="33" pos:column="8">{
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef<pos:position pos:line="35" pos:column="7"/></cpp:directive> <name pos:line="35" pos:column="8">KRB4<pos:position pos:line="35" pos:column="12"/></name></cpp:ifdef>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><name><name pos:line="36" pos:column="8">conn<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">-&gt;<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="14">sec_complete<pos:position pos:line="36" pos:column="26"/></name></name></expr>)<pos:position pos:line="36" pos:column="27"/></condition><then pos:line="36" pos:column="27"> <block pos:line="36" pos:column="28">{
      <expr_stmt><expr><name pos:line="37" pos:column="7">bytes_written<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <call><name pos:line="37" pos:column="23">Curl_sec_write<pos:position pos:line="37" pos:column="37"/></name><argument_list pos:line="37" pos:column="37">(<argument><expr><name pos:line="37" pos:column="38">conn<pos:position pos:line="37" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="44">sockfd<pos:position pos:line="37" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="52">mem<pos:position pos:line="37" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="57">len<pos:position pos:line="37" pos:column="60"/></name></expr></argument>)<pos:position pos:line="37" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then>
    <else pos:line="39" pos:column="5">else
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="40" pos:column="8">/* KRB4 */</comment>
    <block pos:line="41" pos:column="5">{
      <expr_stmt><expr><name pos:line="42" pos:column="7">bytes_written<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">swrite<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">sockfd<pos:position pos:line="42" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="38">mem<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="43">len<pos:position pos:line="42" pos:column="46"/></name></expr></argument>)<pos:position pos:line="42" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></else></if>
    <if pos:line="44" pos:column="5">if<condition pos:line="44" pos:column="7">(<expr><operator pos:line="44" pos:column="8">-<pos:position pos:line="44" pos:column="9"/></operator><literal type="number" pos:line="44" pos:column="9">1<pos:position pos:line="44" pos:column="10"/></literal> <operator pos:line="44" pos:column="11">==<pos:position pos:line="44" pos:column="13"/></operator> <name pos:line="44" pos:column="14">bytes_written<pos:position pos:line="44" pos:column="27"/></name></expr>)<pos:position pos:line="44" pos:column="28"/></condition><then pos:line="44" pos:column="28"> <block pos:line="44" pos:column="29">{
<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">WIN32<pos:position pos:line="45" pos:column="13"/></name></cpp:ifdef>
      <if pos:line="46" pos:column="7">if<condition pos:line="46" pos:column="9">(<expr><name pos:line="46" pos:column="10">WSAEWOULDBLOCK<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">==<pos:position pos:line="46" pos:column="27"/></operator> <call><name pos:line="46" pos:column="28">GetLastError<pos:position pos:line="46" pos:column="40"/></name><argument_list pos:line="46" pos:column="40">()<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="43"/></condition><then pos:line="46" pos:column="43">
<cpp:else pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">else<pos:position pos:line="47" pos:column="6"/></cpp:directive></cpp:else>
      <comment type="block" pos:line="48" pos:column="7">/* As pointed out by Christophe Demory on March 11 2003, errno
         may be EWOULDBLOCK or on some systems EAGAIN when it returned
         due to its inability to send off data without blocking. We
         therefor treat both error codes the same here */</comment>
      <block type="pseudo"><if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><operator pos:line="52" pos:column="10">(<pos:position pos:line="52" pos:column="11"/></operator><name pos:line="52" pos:column="11">EWOULDBLOCK<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">==<pos:position pos:line="52" pos:column="25"/></operator> <name pos:line="52" pos:column="26">errno<pos:position pos:line="52" pos:column="31"/></name><operator pos:line="52" pos:column="31">)<pos:position pos:line="52" pos:column="32"/></operator> <operator pos:line="52" pos:column="33">||<pos:position pos:line="52" pos:column="35"/></operator> <operator pos:line="52" pos:column="36">(<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="37">EAGAIN<pos:position pos:line="52" pos:column="43"/></name> <operator pos:line="52" pos:column="44">==<pos:position pos:line="52" pos:column="46"/></operator> <name pos:line="52" pos:column="47">errno<pos:position pos:line="52" pos:column="52"/></name><operator pos:line="52" pos:column="52">)<pos:position pos:line="52" pos:column="53"/></operator></expr>)<pos:position pos:line="52" pos:column="54"/></condition><then pos:line="52" pos:column="54">
<cpp:endif pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">endif<pos:position pos:line="53" pos:column="7"/></cpp:directive></cpp:endif>
      <block pos:line="54" pos:column="7">{
        <comment type="block" pos:line="55" pos:column="9">/* this is just a case of EWOULDBLOCK */</comment>
        <expr_stmt><expr><operator pos:line="56" pos:column="9">*<pos:position pos:line="56" pos:column="10"/></operator><name pos:line="56" pos:column="10">written<pos:position pos:line="56" pos:column="17"/></name><operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator><literal type="number" pos:line="56" pos:column="18">0<pos:position pos:line="56" pos:column="19"/></literal></expr>;<pos:position pos:line="56" pos:column="20"/></expr_stmt>
        <return pos:line="57" pos:column="9">return <expr><name pos:line="57" pos:column="16">CURLE_OK<pos:position pos:line="57" pos:column="24"/></name></expr>;<pos:position pos:line="57" pos:column="25"/></return>
      }<pos:position pos:line="58" pos:column="8"/></block></then></if></block></then></if>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">ifdef<pos:position pos:line="60" pos:column="7"/></cpp:directive> <name pos:line="60" pos:column="8">USE_SSLEAY<pos:position pos:line="60" pos:column="18"/></name></cpp:ifdef>
  }<pos:position pos:line="61" pos:column="4"/></block></else></if>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><operator pos:line="64" pos:column="3">*<pos:position pos:line="64" pos:column="4"/></operator><name pos:line="64" pos:column="4">written<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <name pos:line="64" pos:column="14">bytes_written<pos:position pos:line="64" pos:column="27"/></name></expr>;<pos:position pos:line="64" pos:column="28"/></expr_stmt>
  <return pos:line="65" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="65" pos:column="10">(<pos:position pos:line="65" pos:column="11"/></operator><operator pos:line="65" pos:column="11">-<pos:position pos:line="65" pos:column="12"/></operator><literal type="number" pos:line="65" pos:column="12">1<pos:position pos:line="65" pos:column="13"/></literal> <operator pos:line="65" pos:column="14">!=<pos:position pos:line="65" pos:column="16"/></operator> <name pos:line="65" pos:column="17">bytes_written<pos:position pos:line="65" pos:column="30"/></name><operator pos:line="65" pos:column="30">)<pos:position pos:line="65" pos:column="31"/></operator></expr>?<pos:position pos:line="65" pos:column="32"/></condition><then><expr><name pos:line="65" pos:column="32">CURLE_OK<pos:position pos:line="65" pos:column="40"/></name></expr></then><else pos:line="65" pos:column="40">:<expr><name pos:line="65" pos:column="41">CURLE_SEND_ERROR<pos:position pos:line="65" pos:column="57"/></name></expr></else></ternary></expr>;<pos:position pos:line="65" pos:column="58"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
