<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1258_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">curl_dofree<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">ptr<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">line<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">source<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">memdebug<pos:position pos:line="3" pos:column="18"/></name></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">mem<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><name pos:line="5" pos:column="6">ptr<pos:position pos:line="5" pos:column="9"/></name></expr>)<pos:position pos:line="5" pos:column="10"/></condition><then pos:line="5" pos:column="10"> <block pos:line="5" pos:column="11">{

<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">__INTEL_COMPILER<pos:position pos:line="7" pos:column="24"/></name></cpp:ifdef>
<cpp:pragma pos:line="8" pos:column="1">#  <cpp:directive pos:line="8" pos:column="4">pragma<pos:position pos:line="8" pos:column="10"/></cpp:directive> <name pos:line="8" pos:column="11">warning<pos:position pos:line="8" pos:column="18"/></name><name pos:line="8" pos:column="18">(<pos:position pos:line="8" pos:column="19"/></name><name pos:line="8" pos:column="19">push<pos:position pos:line="8" pos:column="23"/></name><name pos:line="8" pos:column="23">)<pos:position pos:line="8" pos:column="24"/></name></cpp:pragma>
<cpp:pragma pos:line="9" pos:column="1">#  <cpp:directive pos:line="9" pos:column="4">pragma<pos:position pos:line="9" pos:column="10"/></cpp:directive> <name pos:line="9" pos:column="11">warning<pos:position pos:line="9" pos:column="18"/></name><name pos:line="9" pos:column="18">(<pos:position pos:line="9" pos:column="19"/></name><name pos:line="9" pos:column="19">disable<pos:position pos:line="9" pos:column="26"/></name><name pos:line="9" pos:column="26">:<pos:position pos:line="9" pos:column="27"/></name><name pos:line="9" pos:column="27">1684<pos:position pos:line="9" pos:column="31"/></name><name pos:line="9" pos:column="31">)<pos:position pos:line="9" pos:column="32"/></name></cpp:pragma>
   <comment type="block" pos:line="10" pos:column="4">/* 1684: conversion from pointer to same-sized integral type */</comment>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="13" pos:column="5">mem<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <operator pos:line="13" pos:column="11">(<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="12">void<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">*<pos:position pos:line="13" pos:column="18"/></operator><operator pos:line="13" pos:column="18">)<pos:position pos:line="13" pos:column="19"/></operator><operator pos:line="13" pos:column="19">(<pos:position pos:line="13" pos:column="20"/></operator><operator pos:line="13" pos:column="20">(<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">char<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></operator><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">ptr<pos:position pos:line="13" pos:column="31"/></name> <operator pos:line="13" pos:column="32">-<pos:position pos:line="13" pos:column="33"/></operator> <call><name pos:line="13" pos:column="34">offsetof<pos:position pos:line="13" pos:column="42"/></name><argument_list pos:line="13" pos:column="42">(<argument><expr pos:line="13" pos:column="43">struct <name pos:line="13" pos:column="50">memdebug<pos:position pos:line="13" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="60">mem<pos:position pos:line="13" pos:column="63"/></name></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call><operator pos:line="13" pos:column="64">)<pos:position pos:line="13" pos:column="65"/></operator></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt>

<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">__INTEL_COMPILER<pos:position pos:line="15" pos:column="24"/></name></cpp:ifdef>
<cpp:pragma pos:line="16" pos:column="1">#  <cpp:directive pos:line="16" pos:column="4">pragma<pos:position pos:line="16" pos:column="10"/></cpp:directive> <name pos:line="16" pos:column="11">warning<pos:position pos:line="16" pos:column="18"/></name><name pos:line="16" pos:column="18">(<pos:position pos:line="16" pos:column="19"/></name><name pos:line="16" pos:column="19">pop<pos:position pos:line="16" pos:column="22"/></name><name pos:line="16" pos:column="22">)<pos:position pos:line="16" pos:column="23"/></name></cpp:pragma>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="19" pos:column="5">/* destroy */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">mt_free_fill<pos:position pos:line="20" pos:column="17"/></name><argument_list pos:line="20" pos:column="17">(<argument><expr><name><name pos:line="20" pos:column="18">mem<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">-&gt;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="23">mem<pos:position pos:line="20" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="28">mem<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">-&gt;<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="33">size<pos:position pos:line="20" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* free for real */</comment>
    <expr_stmt><expr><call pos:line="23" pos:column="5">(<name pos:line="23" pos:column="6">Curl_cfree<pos:position pos:line="23" pos:column="16"/></name>)<argument_list pos:line="23" pos:column="17">(<argument><expr><name pos:line="23" pos:column="18">mem<pos:position pos:line="23" pos:column="21"/></name></expr></argument>)<pos:position pos:line="23" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name pos:line="26" pos:column="6">source<pos:position pos:line="26" pos:column="12"/></name></expr>)<pos:position pos:line="26" pos:column="13"/></condition><then pos:line="26" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="5">curl_memlog<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><literal type="string" pos:line="27" pos:column="17">"MEM %s:%d free(%p)\n"<pos:position pos:line="27" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="41">source<pos:position pos:line="27" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="49">line<pos:position pos:line="27" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="55">(<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="56">void<pos:position pos:line="27" pos:column="60"/></name> <operator pos:line="27" pos:column="61">*<pos:position pos:line="27" pos:column="62"/></operator><operator pos:line="27" pos:column="62">)<pos:position pos:line="27" pos:column="63"/></operator><name pos:line="27" pos:column="63">ptr<pos:position pos:line="27" pos:column="66"/></name></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="68"/></expr_stmt></block></then></if>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
