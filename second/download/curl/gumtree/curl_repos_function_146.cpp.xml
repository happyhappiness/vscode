<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_146.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">char<pos:position pos:line="2" pos:column="5"/></name> <modifier pos:line="2" pos:column="6">*<pos:position pos:line="2" pos:column="7"/></modifier></type><name pos:line="2" pos:column="7">GetEnv<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">variable<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">do_expand<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">env<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><name pos:line="4" pos:column="15">NULL<pos:position pos:line="4" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">WIN32<pos:position pos:line="5" pos:column="13"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type>  <name><name pos:line="6" pos:column="9">buf1<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">1024<pos:position pos:line="6" pos:column="18"/></literal></expr>]<pos:position pos:line="6" pos:column="19"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="6" pos:column="21">buf2<pos:position pos:line="6" pos:column="25"/></name><index pos:line="6" pos:column="25">[<expr><literal type="number" pos:line="6" pos:column="26">1024<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">DWORD<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">rc<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* Don't use getenv(); it doesn't find variable added after program was
   * started. Don't accept truncated results (i.e. rc &gt;= sizeof(buf1)).  */</comment>

  <expr_stmt><expr><name pos:line="12" pos:column="3">rc<pos:position pos:line="12" pos:column="5"/></name> <operator pos:line="12" pos:column="6">=<pos:position pos:line="12" pos:column="7"/></operator> <call><name pos:line="12" pos:column="8">GetEnvironmentVariable<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">variable<pos:position pos:line="12" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="41">buf1<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="47">sizeof<argument_list pos:line="12" pos:column="53">(<argument><expr><name pos:line="12" pos:column="54">buf1<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="61"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">rc<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">&gt;<pos:position pos:line="13" pos:column="14"/></operator> <literal type="number" pos:line="13" pos:column="12">0<pos:position pos:line="13" pos:column="13"/></literal> <operator pos:line="13" pos:column="14">&amp;&amp;<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="17">rc<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">&lt;<pos:position pos:line="13" pos:column="24"/></operator> <sizeof pos:line="13" pos:column="22">sizeof<argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">buf1<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></sizeof></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35"> <block pos:line="13" pos:column="36">{
    <expr_stmt><expr><name pos:line="14" pos:column="5">env<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <name pos:line="14" pos:column="11">buf1<pos:position pos:line="14" pos:column="15"/></name></expr>;<pos:position pos:line="14" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">variable<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">buf1<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">do_expand<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">&amp;&amp;<pos:position pos:line="17" pos:column="27"/></operator> <call><name pos:line="17" pos:column="20">strchr<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">variable<pos:position pos:line="17" pos:column="35"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="17" pos:column="36">'%'<pos:position pos:line="17" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="41"/></condition><then pos:line="17" pos:column="41"> <block pos:line="17" pos:column="42">{
    <comment type="block" pos:line="18" pos:column="5">/* buf2 == variable if not expanded */</comment>
    <expr_stmt><expr><name pos:line="19" pos:column="5">rc<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <call><name pos:line="19" pos:column="10">ExpandEnvironmentStrings<pos:position pos:line="19" pos:column="34"/></name> <argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">variable<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">buf2<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="52">sizeof<argument_list pos:line="19" pos:column="58">(<argument><expr><name pos:line="19" pos:column="59">buf2<pos:position pos:line="19" pos:column="63"/></name></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">rc<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">&gt;<pos:position pos:line="20" pos:column="16"/></operator> <literal type="number" pos:line="20" pos:column="14">0<pos:position pos:line="20" pos:column="15"/></literal> <operator pos:line="20" pos:column="16">&amp;&amp;<pos:position pos:line="20" pos:column="26"/></operator> <name pos:line="20" pos:column="19">rc<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">&lt;<pos:position pos:line="20" pos:column="26"/></operator> <sizeof pos:line="20" pos:column="24">sizeof<argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">buf2<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></sizeof> <operator pos:line="20" pos:column="37">&amp;&amp;<pos:position pos:line="20" pos:column="47"/></operator>
        <operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><call><name pos:line="21" pos:column="10">strchr<pos:position pos:line="21" pos:column="16"/></name><argument_list pos:line="21" pos:column="16">(<argument><expr><name pos:line="21" pos:column="17">buf2<pos:position pos:line="21" pos:column="21"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="21" pos:column="22">'%'<pos:position pos:line="21" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27">    <comment type="block" pos:line="21" pos:column="31">/* no vars still unexpanded */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="7">env<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <name pos:line="22" pos:column="13">buf2<pos:position pos:line="22" pos:column="17"/></name></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt></block></then></if>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
<cpp:else pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">else<pos:position pos:line="24" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="25" pos:column="3">(<pos:position pos:line="25" pos:column="4"/></operator><name pos:line="25" pos:column="4">void<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">)<pos:position pos:line="25" pos:column="9"/></operator><name pos:line="25" pos:column="9">do_expand<pos:position pos:line="25" pos:column="18"/></name></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>
<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive>  <name pos:line="26" pos:column="9">VMS<pos:position pos:line="26" pos:column="12"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="27" pos:column="3">env<pos:position pos:line="27" pos:column="6"/></name> <operator pos:line="27" pos:column="7">=<pos:position pos:line="27" pos:column="8"/></operator> <call><name pos:line="27" pos:column="9">getenv<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">variable<pos:position pos:line="27" pos:column="24"/></name></expr></argument>)<pos:position pos:line="27" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name pos:line="28" pos:column="7">env<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">&amp;&amp;<pos:position pos:line="28" pos:column="21"/></operator> <call><name pos:line="28" pos:column="14">strcmp<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><literal type="string" pos:line="28" pos:column="21">"HOME"<pos:position pos:line="28" pos:column="27"/></literal></expr></argument>,<argument><expr><name pos:line="28" pos:column="28">variable<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call> <operator pos:line="28" pos:column="38">==<pos:position pos:line="28" pos:column="40"/></operator> <literal type="number" pos:line="28" pos:column="41">0<pos:position pos:line="28" pos:column="42"/></literal></expr>)<pos:position pos:line="28" pos:column="43"/></condition><then pos:line="28" pos:column="43"> <block pos:line="28" pos:column="44">{
        <expr_stmt><expr><name pos:line="29" pos:column="9">env<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">decc$translate_vms<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><name pos:line="29" pos:column="34">env<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>
<cpp:else pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">else<pos:position pos:line="31" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="32" pos:column="3">/* no length control */</comment>
  <expr_stmt><expr><name pos:line="33" pos:column="3">env<pos:position pos:line="33" pos:column="6"/></name> <operator pos:line="33" pos:column="7">=<pos:position pos:line="33" pos:column="8"/></operator> <call><name pos:line="33" pos:column="9">getenv<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">variable<pos:position pos:line="33" pos:column="24"/></name></expr></argument>)<pos:position pos:line="33" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="36" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="36" pos:column="10">(<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">env<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">&amp;&amp;<pos:position pos:line="36" pos:column="25"/></operator> <name><name pos:line="36" pos:column="18">env<pos:position pos:line="36" pos:column="21"/></name><index pos:line="36" pos:column="21">[<expr><literal type="number" pos:line="36" pos:column="22">0<pos:position pos:line="36" pos:column="23"/></literal></expr>]<pos:position pos:line="36" pos:column="24"/></index></name><operator pos:line="36" pos:column="24">)<pos:position pos:line="36" pos:column="25"/></operator></expr>?<pos:position pos:line="36" pos:column="26"/></condition><then><expr><call><name pos:line="36" pos:column="26">strdup<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">env<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr></then><else pos:line="36" pos:column="37">:<expr><name pos:line="36" pos:column="38">NULL<pos:position pos:line="36" pos:column="42"/></name></expr></else></ternary></expr>;<pos:position pos:line="36" pos:column="43"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
