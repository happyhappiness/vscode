<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_440_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">long<pos:position pos:line="2" pos:column="5"/></name></type> <name pos:line="2" pos:column="6">chunk_bgn<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name><name pos:line="2" pos:column="22">struct<pos:position pos:line="2" pos:column="28"/></name> <name pos:line="2" pos:column="29">curl_fileinfo<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">finfo<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">void<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">ptr<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="62">int<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">remains<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">chunk_data_t<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">ch_d<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name pos:line="4" pos:column="24">ptr<pos:position pos:line="4" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="5" pos:column="3">ch_d<pos:position pos:line="5" pos:column="7"/></name><operator pos:line="5" pos:column="7">-&gt;<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="9">remains<pos:position pos:line="5" pos:column="16"/></name></name> <operator pos:line="5" pos:column="17">=<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">remains<pos:position pos:line="5" pos:column="26"/></name></expr>;<pos:position pos:line="5" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">printf<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><literal type="string" pos:line="7" pos:column="10">"=============================================================\n"<pos:position pos:line="7" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="77"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">printf<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><literal type="string" pos:line="8" pos:column="10">"Remains:      %d\n"<pos:position pos:line="8" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="32">remains<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">printf<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><literal type="string" pos:line="9" pos:column="10">"Filename:     %s\n"<pos:position pos:line="9" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="32">finfo<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">-&gt;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="39">filename<pos:position pos:line="9" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="49"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name><name pos:line="10" pos:column="6">finfo<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">-&gt;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="13">strings<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">.<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">perm<pos:position pos:line="10" pos:column="25"/></name></name></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26"> <block pos:line="10" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">printf<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="string" pos:line="11" pos:column="12">"Permissions:  %s"<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="32">finfo<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">-&gt;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="39">strings<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">.<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="47">perm<pos:position pos:line="11" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>
    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">(<expr><name><name pos:line="12" pos:column="8">finfo<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">flags<pos:position pos:line="12" pos:column="20"/></name></name> <operator pos:line="12" pos:column="21">&amp;<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="23">CURLFINFOFLAG_KNOWN_PERM<pos:position pos:line="12" pos:column="47"/></name></expr>)<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="7">printf<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><literal type="string" pos:line="13" pos:column="14">" (parsed =&gt; %o)"<pos:position pos:line="13" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="33">finfo<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">-&gt;<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="40">perm<pos:position pos:line="13" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">printf<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="string" pos:line="14" pos:column="12">"\n"<pos:position pos:line="14" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">printf<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><literal type="string" pos:line="16" pos:column="10">"Size:         %ldB\n"<pos:position pos:line="16" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="34">(<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="35">long<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">)<pos:position pos:line="16" pos:column="40"/></operator><name><name pos:line="16" pos:column="40">finfo<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">-&gt;<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="47">size<pos:position pos:line="16" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="53"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name><name pos:line="17" pos:column="6">finfo<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">strings<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">.<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">user<pos:position pos:line="17" pos:column="25"/></name></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="5">printf<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><literal type="string" pos:line="18" pos:column="12">"User:         %s\n"<pos:position pos:line="18" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="34">finfo<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">strings<pos:position pos:line="18" pos:column="48"/></name><operator pos:line="18" pos:column="48">.<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="49">user<pos:position pos:line="18" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt></block></then></if>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name><name pos:line="19" pos:column="6">finfo<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">strings<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">.<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">group<pos:position pos:line="19" pos:column="26"/></name></name></expr>)<pos:position pos:line="19" pos:column="27"/></condition><then pos:line="19" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="5">printf<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="string" pos:line="20" pos:column="12">"Group:        %s\n"<pos:position pos:line="20" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="34">finfo<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">strings<pos:position pos:line="20" pos:column="48"/></name><operator pos:line="20" pos:column="48">.<pos:position pos:line="20" pos:column="49"/></operator><name pos:line="20" pos:column="49">group<pos:position pos:line="20" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt></block></then></if>
  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><name><name pos:line="21" pos:column="6">finfo<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">-&gt;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="13">strings<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">.<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="21">time<pos:position pos:line="21" pos:column="25"/></name></name></expr>)<pos:position pos:line="21" pos:column="26"/></condition><then pos:line="21" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="5">printf<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="string" pos:line="22" pos:column="12">"Time:         %s\n"<pos:position pos:line="22" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="34">finfo<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">-&gt;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="41">strings<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">.<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="49">time<pos:position pos:line="22" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">printf<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><literal type="string" pos:line="23" pos:column="10">"Filetype:     "<pos:position pos:line="23" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>
  <switch pos:line="24" pos:column="3">switch<condition pos:line="24" pos:column="9">(<expr><name><name pos:line="24" pos:column="10">finfo<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">filetype<pos:position pos:line="24" pos:column="25"/></name></name></expr>)<pos:position pos:line="24" pos:column="26"/></condition> <block pos:line="24" pos:column="27">{
  <case pos:line="25" pos:column="3">case <expr><name pos:line="25" pos:column="8">CURLFILETYPE_FILE<pos:position pos:line="25" pos:column="25"/></name></expr>:<pos:position pos:line="25" pos:column="26"/></case>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">printf<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="string" pos:line="26" pos:column="12">"regular file\n"<pos:position pos:line="26" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
    <break pos:line="27" pos:column="5">break;<pos:position pos:line="27" pos:column="11"/></break>
  <case pos:line="28" pos:column="3">case <expr><name pos:line="28" pos:column="8">CURLFILETYPE_DIRECTORY<pos:position pos:line="28" pos:column="30"/></name></expr>:<pos:position pos:line="28" pos:column="31"/></case>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">printf<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><literal type="string" pos:line="29" pos:column="12">"directory\n"<pos:position pos:line="29" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
    <break pos:line="30" pos:column="5">break;<pos:position pos:line="30" pos:column="11"/></break>
  <case pos:line="31" pos:column="3">case <expr><name pos:line="31" pos:column="8">CURLFILETYPE_SYMLINK<pos:position pos:line="31" pos:column="28"/></name></expr>:<pos:position pos:line="31" pos:column="29"/></case>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">printf<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><literal type="string" pos:line="32" pos:column="12">"symlink\n"<pos:position pos:line="32" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">printf<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="string" pos:line="33" pos:column="12">"Target:       %s\n"<pos:position pos:line="33" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="34">finfo<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">-&gt;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="41">strings<pos:position pos:line="33" pos:column="48"/></name><operator pos:line="33" pos:column="48">.<pos:position pos:line="33" pos:column="49"/></operator><name pos:line="33" pos:column="49">target<pos:position pos:line="33" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
    <break pos:line="34" pos:column="5">break;<pos:position pos:line="34" pos:column="11"/></break>
  <default pos:line="35" pos:column="3">default:<pos:position pos:line="35" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">printf<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="string" pos:line="36" pos:column="12">"other type\n"<pos:position pos:line="36" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="28"/></expr_stmt>
    <break pos:line="37" pos:column="5">break;<pos:position pos:line="37" pos:column="11"/></break>
  }<pos:position pos:line="38" pos:column="4"/></block></switch>
  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name><name pos:line="39" pos:column="6">finfo<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">-&gt;<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="13">filetype<pos:position pos:line="39" pos:column="21"/></name></name> <operator pos:line="39" pos:column="22">==<pos:position pos:line="39" pos:column="24"/></operator> <name pos:line="39" pos:column="25">CURLFILETYPE_FILE<pos:position pos:line="39" pos:column="42"/></name></expr>)<pos:position pos:line="39" pos:column="43"/></condition><then pos:line="39" pos:column="43"> <block pos:line="39" pos:column="44">{
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">ch_d<pos:position pos:line="40" pos:column="9"/></name><operator pos:line="40" pos:column="9">-&gt;<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="11">print_content<pos:position pos:line="40" pos:column="24"/></name></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <literal type="number" pos:line="40" pos:column="27">1<pos:position pos:line="40" pos:column="28"/></literal></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">printf<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><literal type="string" pos:line="41" pos:column="12">"Content:\n-----------------------"<pos:position pos:line="41" pos:column="47"/></literal>
           <literal type="string" pos:line="42" pos:column="12">"--------------------------------------\n"<pos:position pos:line="42" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><call><name pos:line="44" pos:column="6">strcmp<pos:position pos:line="44" pos:column="12"/></name><argument_list pos:line="44" pos:column="12">(<argument><expr><name><name pos:line="44" pos:column="13">finfo<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">-&gt;<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="20">filename<pos:position pos:line="44" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="30">"someothertext.txt"<pos:position pos:line="44" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call> <operator pos:line="44" pos:column="51">==<pos:position pos:line="44" pos:column="53"/></operator> <literal type="number" pos:line="44" pos:column="54">0<pos:position pos:line="44" pos:column="55"/></literal></expr>)<pos:position pos:line="44" pos:column="56"/></condition><then pos:line="44" pos:column="56"> <block pos:line="44" pos:column="57">{
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">printf<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><literal type="string" pos:line="45" pos:column="12">"# THIS CONTENT WAS SKIPPED IN CHUNK_BGN CALLBACK #\n"<pos:position pos:line="45" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="68"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><name pos:line="46" pos:column="12">CURL_CHUNK_BGN_FUNC_SKIP<pos:position pos:line="46" pos:column="36"/></name></expr>;<pos:position pos:line="46" pos:column="37"/></return>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>
  <return pos:line="48" pos:column="3">return <expr><name pos:line="48" pos:column="10">CURL_CHUNK_BGN_FUNC_OK<pos:position pos:line="48" pos:column="32"/></name></expr>;<pos:position pos:line="48" pos:column="33"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
