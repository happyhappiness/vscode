<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_518.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_GetFTPResponse<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">ssize_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">nreadp<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="47">/* return number of bytes read */</comment>
                             <parameter><decl><type><name><name pos:line="2" pos:column="30">struct<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">connectdata<pos:position pos:line="2" pos:column="48"/></name></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">conn<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">ftpcode<pos:position pos:line="3" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="43"/></parameter_list> <comment type="block" pos:line="3" pos:column="44">/* return the ftp-code */</comment>
<block pos:line="4" pos:column="1">{
  <comment type="block" pos:line="5" pos:column="3">/*
   * We cannot read just one byte per read() and then go back to select() as
   * the OpenSSL read() doesn't grok that properly.
   *
   * Alas, read as much as possible, split up into lines, use the ending
   * line in a response or continue reading.  */</comment>

  <decl_stmt><decl><type><name pos:line="12" pos:column="3">curl_socket_t<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">sockfd<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name><name pos:line="12" pos:column="26">conn<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">-&gt;<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="32">sock<pos:position pos:line="12" pos:column="36"/></name><index pos:line="12" pos:column="36">[<expr><name pos:line="12" pos:column="37">FIRSTSOCKET<pos:position pos:line="12" pos:column="48"/></name></expr>]<pos:position pos:line="12" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="50"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">perline<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt> <comment type="block" pos:line="13" pos:column="16">/* count bytes per line */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">bool<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">keepon<pos:position pos:line="14" pos:column="14"/></name><init pos:line="14" pos:column="14">=<expr><name pos:line="14" pos:column="15">TRUE<pos:position pos:line="14" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">ssize_t<pos:position pos:line="15" pos:column="10"/></name></type> <name pos:line="15" pos:column="11">gotbytes<pos:position pos:line="15" pos:column="19"/></name></decl>;<pos:position pos:line="15" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">char<pos:position pos:line="16" pos:column="7"/></name> <modifier pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></modifier></type><name pos:line="16" pos:column="9">ptr<pos:position pos:line="16" pos:column="12"/></name></decl>;<pos:position pos:line="16" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">long<pos:position pos:line="17" pos:column="7"/></name></type> <name pos:line="17" pos:column="8">timeout<pos:position pos:line="17" pos:column="15"/></name></decl>;<pos:position pos:line="17" pos:column="16"/></decl_stmt>              <comment type="block" pos:line="17" pos:column="30">/* timeout in seconds */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">int<pos:position pos:line="18" pos:column="6"/></name></type> <name pos:line="18" pos:column="7">interval_ms<pos:position pos:line="18" pos:column="18"/></name></decl>;<pos:position pos:line="18" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">struct<pos:position pos:line="19" pos:column="9"/></name> <name pos:line="19" pos:column="10">SessionHandle<pos:position pos:line="19" pos:column="23"/></name></name> <modifier pos:line="19" pos:column="24">*<pos:position pos:line="19" pos:column="25"/></modifier></type><name pos:line="19" pos:column="25">data<pos:position pos:line="19" pos:column="29"/></name> <init pos:line="19" pos:column="30">= <expr><name><name pos:line="19" pos:column="32">conn<pos:position pos:line="19" pos:column="36"/></name><operator pos:line="19" pos:column="36">-&gt;<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="38">data<pos:position pos:line="19" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name> <modifier pos:line="20" pos:column="8">*<pos:position pos:line="20" pos:column="9"/></modifier></type><name pos:line="20" pos:column="9">line_start<pos:position pos:line="20" pos:column="19"/></name></decl>;<pos:position pos:line="20" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">code<pos:position pos:line="21" pos:column="11"/></name><init pos:line="21" pos:column="11">=<expr><literal type="number" pos:line="21" pos:column="12">0<pos:position pos:line="21" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="14"/></decl_stmt> <comment type="block" pos:line="21" pos:column="15">/* default ftp "error code" to return */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">char<pos:position pos:line="22" pos:column="7"/></name> <modifier pos:line="22" pos:column="8">*<pos:position pos:line="22" pos:column="9"/></modifier></type><name pos:line="22" pos:column="9">buf<pos:position pos:line="22" pos:column="12"/></name> <init pos:line="22" pos:column="13">= <expr><name><name pos:line="22" pos:column="15">data<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">-&gt;<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="21">state<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">.<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">buffer<pos:position pos:line="22" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="22" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">CURLcode<pos:position pos:line="23" pos:column="11"/></name></type> <name pos:line="23" pos:column="12">result<pos:position pos:line="23" pos:column="18"/></name> <init pos:line="23" pos:column="19">= <expr><name pos:line="23" pos:column="21">CURLE_OK<pos:position pos:line="23" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="24" pos:column="3">struct<pos:position pos:line="24" pos:column="9"/></name> <name pos:line="24" pos:column="10">FTP<pos:position pos:line="24" pos:column="13"/></name></name> <modifier pos:line="24" pos:column="14">*<pos:position pos:line="24" pos:column="15"/></modifier></type><name pos:line="24" pos:column="15">ftp<pos:position pos:line="24" pos:column="18"/></name> <init pos:line="24" pos:column="19">= <expr><name><name pos:line="24" pos:column="21">conn<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">-&gt;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="27">proto<pos:position pos:line="24" pos:column="32"/></name><operator pos:line="24" pos:column="32">.<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="33">ftp<pos:position pos:line="24" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="24" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="25" pos:column="3">struct<pos:position pos:line="25" pos:column="9"/></name> <name pos:line="25" pos:column="10">timeval<pos:position pos:line="25" pos:column="17"/></name></name></type> <name pos:line="25" pos:column="18">now<pos:position pos:line="25" pos:column="21"/></name> <init pos:line="25" pos:column="22">= <expr><call><name pos:line="25" pos:column="24">Curl_tvnow<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">()<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="37"/></decl_stmt>

  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">ftpcode<pos:position pos:line="27" pos:column="14"/></name></expr>)<pos:position pos:line="27" pos:column="15"/></condition><then pos:line="27" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="28" pos:column="5">*<pos:position pos:line="28" pos:column="6"/></operator><name pos:line="28" pos:column="6">ftpcode<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt></block></then></if> <comment type="block" pos:line="28" pos:column="19">/* 0 for errors */</comment>

  <expr_stmt><expr><name pos:line="30" pos:column="3">ptr<pos:position pos:line="30" pos:column="6"/></name><operator pos:line="30" pos:column="6">=<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">buf<pos:position pos:line="30" pos:column="10"/></name></expr>;<pos:position pos:line="30" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="31" pos:column="3">line_start<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">buf<pos:position pos:line="31" pos:column="19"/></name></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="33" pos:column="3">*<pos:position pos:line="33" pos:column="4"/></operator><name pos:line="33" pos:column="4">nreadp<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator><literal type="number" pos:line="33" pos:column="11">0<pos:position pos:line="33" pos:column="12"/></literal></expr>;<pos:position pos:line="33" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="34" pos:column="3">perline<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator><literal type="number" pos:line="34" pos:column="11">0<pos:position pos:line="34" pos:column="12"/></literal></expr>;<pos:position pos:line="34" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="35" pos:column="3">keepon<pos:position pos:line="35" pos:column="9"/></name><operator pos:line="35" pos:column="9">=<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">TRUE<pos:position pos:line="35" pos:column="14"/></name></expr>;<pos:position pos:line="35" pos:column="15"/></expr_stmt>

  <while pos:line="37" pos:column="3">while<condition pos:line="37" pos:column="8">(<expr><operator pos:line="37" pos:column="9">(<pos:position pos:line="37" pos:column="10"/></operator><operator pos:line="37" pos:column="10">*<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">nreadp<pos:position pos:line="37" pos:column="17"/></name><operator pos:line="37" pos:column="17">&lt;<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="18">BUFSIZE<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">)<pos:position pos:line="37" pos:column="26"/></operator> <operator pos:line="37" pos:column="27">&amp;&amp;<pos:position pos:line="37" pos:column="37"/></operator> <operator pos:line="37" pos:column="30">(<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="31">keepon<pos:position pos:line="37" pos:column="37"/></name> <operator pos:line="37" pos:column="38">&amp;&amp;<pos:position pos:line="37" pos:column="48"/></operator> <operator pos:line="37" pos:column="41">!<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="42">result<pos:position pos:line="37" pos:column="48"/></name><operator pos:line="37" pos:column="48">)<pos:position pos:line="37" pos:column="49"/></operator></expr>)<pos:position pos:line="37" pos:column="50"/></condition> <block pos:line="37" pos:column="51">{
    <comment type="block" pos:line="38" pos:column="5">/* check and reset timeout value every lap */</comment>
    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name><name pos:line="39" pos:column="8">data<pos:position pos:line="39" pos:column="12"/></name><operator pos:line="39" pos:column="12">-&gt;<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="14">set<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">.<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="18">ftp_response_timeout<pos:position pos:line="39" pos:column="38"/></name></name></expr> )<pos:position pos:line="39" pos:column="40"/></condition><then pos:line="39" pos:column="40">
      <comment type="block" pos:line="40" pos:column="7">/* if CURLOPT_FTP_RESPONSE_TIMEOUT is set, use that to determine
         remaining time.  Also, use "now" as opposed to "conn-&gt;now"
         because ftp_response_timeout is only supposed to govern
         the response for any given ftp response, not for the time
         from connect to the given ftp response. */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="7">timeout<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">=<pos:position pos:line="45" pos:column="16"/></operator> <name><name pos:line="45" pos:column="17">data<pos:position pos:line="45" pos:column="21"/></name><operator pos:line="45" pos:column="21">-&gt;<pos:position pos:line="45" pos:column="26"/></operator><name pos:line="45" pos:column="23">set<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">.<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="27">ftp_response_timeout<pos:position pos:line="45" pos:column="47"/></name></name> <operator pos:line="45" pos:column="48">-<pos:position pos:line="45" pos:column="49"/></operator> <comment type="block" pos:line="45" pos:column="50">/* timeout time */</comment>
        <call><name pos:line="46" pos:column="9">Curl_tvdiff<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><call><name pos:line="46" pos:column="21">Curl_tvnow<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">()<pos:position pos:line="46" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">now<pos:position pos:line="46" pos:column="38"/></name></expr></argument>)<pos:position pos:line="46" pos:column="39"/></argument_list></call><operator pos:line="46" pos:column="39">/<pos:position pos:line="46" pos:column="40"/></operator><literal type="number" pos:line="46" pos:column="40">1000<pos:position pos:line="46" pos:column="44"/></literal></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt></block></then> <comment type="block" pos:line="46" pos:column="46">/* spent time */</comment>
    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if<condition pos:line="47" pos:column="12">(<expr><name><name pos:line="47" pos:column="13">data<pos:position pos:line="47" pos:column="17"/></name><operator pos:line="47" pos:column="17">-&gt;<pos:position pos:line="47" pos:column="22"/></operator><name pos:line="47" pos:column="19">set<pos:position pos:line="47" pos:column="22"/></name><operator pos:line="47" pos:column="22">.<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="23">timeout<pos:position pos:line="47" pos:column="30"/></name></name></expr>)<pos:position pos:line="47" pos:column="31"/></condition><then pos:line="47" pos:column="31">
      <comment type="block" pos:line="48" pos:column="7">/* if timeout is requested, find out how much remaining time we have */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="7">timeout<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <name><name pos:line="49" pos:column="17">data<pos:position pos:line="49" pos:column="21"/></name><operator pos:line="49" pos:column="21">-&gt;<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="23">set<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">.<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="27">timeout<pos:position pos:line="49" pos:column="34"/></name></name> <operator pos:line="49" pos:column="35">-<pos:position pos:line="49" pos:column="36"/></operator> <comment type="block" pos:line="49" pos:column="37">/* timeout time */</comment>
        <call><name pos:line="50" pos:column="9">Curl_tvdiff<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><call><name pos:line="50" pos:column="21">Curl_tvnow<pos:position pos:line="50" pos:column="31"/></name><argument_list pos:line="50" pos:column="31">()<pos:position pos:line="50" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="35">conn<pos:position pos:line="50" pos:column="39"/></name><operator pos:line="50" pos:column="39">-&gt;<pos:position pos:line="50" pos:column="44"/></operator><name pos:line="50" pos:column="41">now<pos:position pos:line="50" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="45"/></argument_list></call><operator pos:line="50" pos:column="45">/<pos:position pos:line="50" pos:column="46"/></operator><literal type="number" pos:line="50" pos:column="46">1000<pos:position pos:line="50" pos:column="50"/></literal></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt></block></then></if></elseif> <comment type="block" pos:line="50" pos:column="52">/* spent time */</comment>
    <else pos:line="51" pos:column="5">else
      <comment type="block" pos:line="52" pos:column="7">/* Even without a requested timeout, we only wait response_time
         seconds for the full response to arrive before we bail out */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="7">timeout<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <name><name pos:line="54" pos:column="17">ftp<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">-&gt;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="22">response_time<pos:position pos:line="54" pos:column="35"/></name></name> <operator pos:line="54" pos:column="36">-<pos:position pos:line="54" pos:column="37"/></operator>
        <call><name pos:line="55" pos:column="9">Curl_tvdiff<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">(<argument><expr><call><name pos:line="55" pos:column="21">Curl_tvnow<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">()<pos:position pos:line="55" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">now<pos:position pos:line="55" pos:column="38"/></name></expr></argument>)<pos:position pos:line="55" pos:column="39"/></argument_list></call><operator pos:line="55" pos:column="39">/<pos:position pos:line="55" pos:column="40"/></operator><literal type="number" pos:line="55" pos:column="40">1000<pos:position pos:line="55" pos:column="44"/></literal></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt></block></else></if> <comment type="block" pos:line="55" pos:column="46">/* spent time */</comment>

    <if pos:line="57" pos:column="5">if<condition pos:line="57" pos:column="7">(<expr><name pos:line="57" pos:column="8">timeout<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">&lt;=<pos:position pos:line="57" pos:column="21"/></operator><literal type="number" pos:line="57" pos:column="18">0<pos:position pos:line="57" pos:column="19"/></literal></expr> )<pos:position pos:line="57" pos:column="21"/></condition><then pos:line="57" pos:column="21"> <block pos:line="57" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">failf<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">data<pos:position pos:line="58" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="19">"FTP response timeout"<pos:position pos:line="58" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt>
      <return pos:line="59" pos:column="7">return <expr><name pos:line="59" pos:column="14">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="59" pos:column="38"/></name></expr>;<pos:position pos:line="59" pos:column="39"/></return> <comment type="block" pos:line="59" pos:column="40">/* already too little time */</comment>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <if pos:line="62" pos:column="5">if<condition pos:line="62" pos:column="7">(<expr><operator pos:line="62" pos:column="8">!<pos:position pos:line="62" pos:column="9"/></operator><name><name pos:line="62" pos:column="9">ftp<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">-&gt;<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="14">cache<pos:position pos:line="62" pos:column="19"/></name></name></expr>)<pos:position pos:line="62" pos:column="20"/></condition><then pos:line="62" pos:column="20"> <block pos:line="62" pos:column="21">{
      <expr_stmt><expr><name pos:line="63" pos:column="7">interval_ms<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">=<pos:position pos:line="63" pos:column="20"/></operator> <literal type="number" pos:line="63" pos:column="21">1<pos:position pos:line="63" pos:column="22"/></literal> <operator pos:line="63" pos:column="23">*<pos:position pos:line="63" pos:column="24"/></operator> <literal type="number" pos:line="63" pos:column="25">1000<pos:position pos:line="63" pos:column="29"/></literal></expr>;<pos:position pos:line="63" pos:column="30"/></expr_stmt>  <comment type="block" pos:line="63" pos:column="32">/* use 1 second timeout intervals */</comment>

      <switch pos:line="65" pos:column="7">switch <condition pos:line="65" pos:column="14">(<expr><call><name pos:line="65" pos:column="15">Curl_select<pos:position pos:line="65" pos:column="26"/></name><argument_list pos:line="65" pos:column="26">(<argument><expr><name pos:line="65" pos:column="27">sockfd<pos:position pos:line="65" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="35">CURL_SOCKET_BAD<pos:position pos:line="65" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="52">interval_ms<pos:position pos:line="65" pos:column="63"/></name></expr></argument>)<pos:position pos:line="65" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="65"/></condition> <block pos:line="65" pos:column="66">{
      <case pos:line="66" pos:column="7">case <expr><operator pos:line="66" pos:column="12">-<pos:position pos:line="66" pos:column="13"/></operator><literal type="number" pos:line="66" pos:column="13">1<pos:position pos:line="66" pos:column="14"/></literal></expr>:<pos:position pos:line="66" pos:column="15"/></case> <comment type="block" pos:line="66" pos:column="16">/* select() error, stop reading */</comment>
        <expr_stmt><expr><name pos:line="67" pos:column="9">result<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <name pos:line="67" pos:column="18">CURLE_RECV_ERROR<pos:position pos:line="67" pos:column="34"/></name></expr>;<pos:position pos:line="67" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">failf<pos:position pos:line="68" pos:column="14"/></name><argument_list pos:line="68" pos:column="14">(<argument><expr><name pos:line="68" pos:column="15">data<pos:position pos:line="68" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="21">"FTP response aborted due to select() error: %d"<pos:position pos:line="68" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="71">errno<pos:position pos:line="68" pos:column="76"/></name></expr></argument>)<pos:position pos:line="68" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="78"/></expr_stmt>
        <break pos:line="69" pos:column="9">break;<pos:position pos:line="69" pos:column="15"/></break>
      <case pos:line="70" pos:column="7">case <expr><literal type="number" pos:line="70" pos:column="12">0<pos:position pos:line="70" pos:column="13"/></literal></expr>:<pos:position pos:line="70" pos:column="14"/></case> <comment type="block" pos:line="70" pos:column="15">/* timeout */</comment>
        <if pos:line="71" pos:column="9">if<condition pos:line="71" pos:column="11">(<expr><call><name pos:line="71" pos:column="12">Curl_pgrsUpdate<pos:position pos:line="71" pos:column="27"/></name><argument_list pos:line="71" pos:column="27">(<argument><expr><name pos:line="71" pos:column="28">conn<pos:position pos:line="71" pos:column="32"/></name></expr></argument>)<pos:position pos:line="71" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="34"/></condition><then pos:line="71" pos:column="34">
          <block type="pseudo"><return pos:line="72" pos:column="11">return <expr><name pos:line="72" pos:column="18">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="72" pos:column="43"/></name></expr>;<pos:position pos:line="72" pos:column="44"/></return></block></then></if>
        <continue pos:line="73" pos:column="9">continue;<pos:position pos:line="73" pos:column="18"/></continue> <comment type="block" pos:line="73" pos:column="19">/* just continue in our loop for the timeout duration */</comment>

      <default pos:line="75" pos:column="7">default:<pos:position pos:line="75" pos:column="15"/></default>
        <break pos:line="76" pos:column="9">break;<pos:position pos:line="76" pos:column="15"/></break>
      }<pos:position pos:line="77" pos:column="8"/></block></switch>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>
    <if pos:line="79" pos:column="5">if<condition pos:line="79" pos:column="7">(<expr><name pos:line="79" pos:column="8">CURLE_OK<pos:position pos:line="79" pos:column="16"/></name> <operator pos:line="79" pos:column="17">==<pos:position pos:line="79" pos:column="19"/></operator> <name pos:line="79" pos:column="20">result<pos:position pos:line="79" pos:column="26"/></name></expr>)<pos:position pos:line="79" pos:column="27"/></condition><then pos:line="79" pos:column="27"> <block pos:line="79" pos:column="28">{
      <comment type="block" pos:line="80" pos:column="7">/*
       * This code previously didn't use the kerberos sec_read() code
       * to read, but when we use Curl_read() it may do so. Do confirm
       * that this is still ok and then remove this comment!
       */</comment>
      <if pos:line="85" pos:column="7">if<condition pos:line="85" pos:column="9">(<expr><name><name pos:line="85" pos:column="10">ftp<pos:position pos:line="85" pos:column="13"/></name><operator pos:line="85" pos:column="13">-&gt;<pos:position pos:line="85" pos:column="18"/></operator><name pos:line="85" pos:column="15">cache<pos:position pos:line="85" pos:column="20"/></name></name></expr>)<pos:position pos:line="85" pos:column="21"/></condition><then pos:line="85" pos:column="21"> <block pos:line="85" pos:column="22">{
        <comment type="block" pos:line="86" pos:column="9">/* we had data in the "cache", copy that instead of doing an actual
         * read
         *
         * Dave Meyer, December 2003:
         * ftp-&gt;cache_size is cast to int here.  This should be safe,
         * because it would have been populated with something of size
         * int to begin with, even though its datatype may be larger
         * than an int.
         */</comment>
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">memcpy<pos:position pos:line="95" pos:column="15"/></name><argument_list pos:line="95" pos:column="15">(<argument><expr><name pos:line="95" pos:column="16">ptr<pos:position pos:line="95" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="21">ftp<pos:position pos:line="95" pos:column="24"/></name><operator pos:line="95" pos:column="24">-&gt;<pos:position pos:line="95" pos:column="29"/></operator><name pos:line="95" pos:column="26">cache<pos:position pos:line="95" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="33">(<pos:position pos:line="95" pos:column="34"/></operator><name pos:line="95" pos:column="34">int<pos:position pos:line="95" pos:column="37"/></name><operator pos:line="95" pos:column="37">)<pos:position pos:line="95" pos:column="38"/></operator><name><name pos:line="95" pos:column="38">ftp<pos:position pos:line="95" pos:column="41"/></name><operator pos:line="95" pos:column="41">-&gt;<pos:position pos:line="95" pos:column="46"/></operator><name pos:line="95" pos:column="43">cache_size<pos:position pos:line="95" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name pos:line="96" pos:column="9">gotbytes<pos:position pos:line="96" pos:column="17"/></name> <operator pos:line="96" pos:column="18">=<pos:position pos:line="96" pos:column="19"/></operator> <operator pos:line="96" pos:column="20">(<pos:position pos:line="96" pos:column="21"/></operator><name pos:line="96" pos:column="21">int<pos:position pos:line="96" pos:column="24"/></name><operator pos:line="96" pos:column="24">)<pos:position pos:line="96" pos:column="25"/></operator><name><name pos:line="96" pos:column="25">ftp<pos:position pos:line="96" pos:column="28"/></name><operator pos:line="96" pos:column="28">-&gt;<pos:position pos:line="96" pos:column="33"/></operator><name pos:line="96" pos:column="30">cache_size<pos:position pos:line="96" pos:column="40"/></name></name></expr>;<pos:position pos:line="96" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">free<pos:position pos:line="97" pos:column="13"/></name><argument_list pos:line="97" pos:column="13">(<argument><expr><name><name pos:line="97" pos:column="14">ftp<pos:position pos:line="97" pos:column="17"/></name><operator pos:line="97" pos:column="17">-&gt;<pos:position pos:line="97" pos:column="22"/></operator><name pos:line="97" pos:column="19">cache<pos:position pos:line="97" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="26"/></expr_stmt>    <comment type="block" pos:line="97" pos:column="30">/* free the cache */</comment>
        <expr_stmt><expr><name><name pos:line="98" pos:column="9">ftp<pos:position pos:line="98" pos:column="12"/></name><operator pos:line="98" pos:column="12">-&gt;<pos:position pos:line="98" pos:column="17"/></operator><name pos:line="98" pos:column="14">cache<pos:position pos:line="98" pos:column="19"/></name></name> <operator pos:line="98" pos:column="20">=<pos:position pos:line="98" pos:column="21"/></operator> <name pos:line="98" pos:column="22">NULL<pos:position pos:line="98" pos:column="26"/></name></expr>;<pos:position pos:line="98" pos:column="27"/></expr_stmt>   <comment type="block" pos:line="98" pos:column="30">/* clear the pointer */</comment>
        <expr_stmt><expr><name><name pos:line="99" pos:column="9">ftp<pos:position pos:line="99" pos:column="12"/></name><operator pos:line="99" pos:column="12">-&gt;<pos:position pos:line="99" pos:column="17"/></operator><name pos:line="99" pos:column="14">cache_size<pos:position pos:line="99" pos:column="24"/></name></name> <operator pos:line="99" pos:column="25">=<pos:position pos:line="99" pos:column="26"/></operator> <literal type="number" pos:line="99" pos:column="27">0<pos:position pos:line="99" pos:column="28"/></literal></expr>;<pos:position pos:line="99" pos:column="29"/></expr_stmt> <comment type="block" pos:line="99" pos:column="30">/* zero the size just in case */</comment>
      }<pos:position pos:line="100" pos:column="8"/></block></then>
      <else pos:line="101" pos:column="7">else <block pos:line="101" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="102" pos:column="9">int<pos:position pos:line="102" pos:column="12"/></name></type> <name pos:line="102" pos:column="13">res<pos:position pos:line="102" pos:column="16"/></name> <init pos:line="102" pos:column="17">= <expr><call><name pos:line="102" pos:column="19">Curl_read<pos:position pos:line="102" pos:column="28"/></name><argument_list pos:line="102" pos:column="28">(<argument><expr><name pos:line="102" pos:column="29">conn<pos:position pos:line="102" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="35">sockfd<pos:position pos:line="102" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="43">ptr<pos:position pos:line="102" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="48">BUFSIZE<pos:position pos:line="102" pos:column="55"/></name><operator pos:line="102" pos:column="55">-<pos:position pos:line="102" pos:column="56"/></operator><operator pos:line="102" pos:column="56">*<pos:position pos:line="102" pos:column="57"/></operator><name pos:line="102" pos:column="57">nreadp<pos:position pos:line="102" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="65">&amp;<pos:position pos:line="102" pos:column="70"/></operator><name pos:line="102" pos:column="66">gotbytes<pos:position pos:line="102" pos:column="74"/></name></expr></argument>)<pos:position pos:line="102" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="102" pos:column="76"/></decl_stmt>
        <if pos:line="103" pos:column="9">if<condition pos:line="103" pos:column="11">(<expr><name pos:line="103" pos:column="12">res<pos:position pos:line="103" pos:column="15"/></name> <operator pos:line="103" pos:column="16">&lt;<pos:position pos:line="103" pos:column="20"/></operator> <literal type="number" pos:line="103" pos:column="18">0<pos:position pos:line="103" pos:column="19"/></literal></expr>)<pos:position pos:line="103" pos:column="20"/></condition><then pos:line="103" pos:column="20">
          <comment type="block" pos:line="104" pos:column="11">/* EWOULDBLOCK */</comment>
          <block type="pseudo"><continue pos:line="105" pos:column="11">continue;<pos:position pos:line="105" pos:column="20"/></continue></block></then></if> <comment type="block" pos:line="105" pos:column="21">/* go looping again */</comment>

        <if pos:line="107" pos:column="9">if<condition pos:line="107" pos:column="11">(<expr><name pos:line="107" pos:column="12">CURLE_OK<pos:position pos:line="107" pos:column="20"/></name> <operator pos:line="107" pos:column="21">!=<pos:position pos:line="107" pos:column="23"/></operator> <name pos:line="107" pos:column="24">res<pos:position pos:line="107" pos:column="27"/></name></expr>)<pos:position pos:line="107" pos:column="28"/></condition><then pos:line="107" pos:column="28">
          <block type="pseudo"><expr_stmt><expr><name pos:line="108" pos:column="11">keepon<pos:position pos:line="108" pos:column="17"/></name> <operator pos:line="108" pos:column="18">=<pos:position pos:line="108" pos:column="19"/></operator> <name pos:line="108" pos:column="20">FALSE<pos:position pos:line="108" pos:column="25"/></name></expr>;<pos:position pos:line="108" pos:column="26"/></expr_stmt></block></then></if>
      }<pos:position pos:line="109" pos:column="8"/></block></else></if>

      <if pos:line="111" pos:column="7">if<condition pos:line="111" pos:column="9">(<expr><operator pos:line="111" pos:column="10">!<pos:position pos:line="111" pos:column="11"/></operator><name pos:line="111" pos:column="11">keepon<pos:position pos:line="111" pos:column="17"/></name></expr>)<pos:position pos:line="111" pos:column="18"/></condition><then pos:line="111" pos:column="18">
        <block type="pseudo"><empty_stmt pos:line="112" pos:column="9">;<pos:position pos:line="112" pos:column="10"/></empty_stmt></block></then>
      <elseif pos:line="113" pos:column="7">else <if pos:line="113" pos:column="12">if<condition pos:line="113" pos:column="14">(<expr><name pos:line="113" pos:column="15">gotbytes<pos:position pos:line="113" pos:column="23"/></name> <operator pos:line="113" pos:column="24">&lt;=<pos:position pos:line="113" pos:column="29"/></operator> <literal type="number" pos:line="113" pos:column="27">0<pos:position pos:line="113" pos:column="28"/></literal></expr>)<pos:position pos:line="113" pos:column="29"/></condition><then pos:line="113" pos:column="29"> <block pos:line="113" pos:column="30">{
        <expr_stmt><expr><name pos:line="114" pos:column="9">keepon<pos:position pos:line="114" pos:column="15"/></name> <operator pos:line="114" pos:column="16">=<pos:position pos:line="114" pos:column="17"/></operator> <name pos:line="114" pos:column="18">FALSE<pos:position pos:line="114" pos:column="23"/></name></expr>;<pos:position pos:line="114" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="115" pos:column="9">result<pos:position pos:line="115" pos:column="15"/></name> <operator pos:line="115" pos:column="16">=<pos:position pos:line="115" pos:column="17"/></operator> <name pos:line="115" pos:column="18">CURLE_RECV_ERROR<pos:position pos:line="115" pos:column="34"/></name></expr>;<pos:position pos:line="115" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="116" pos:column="9">failf<pos:position pos:line="116" pos:column="14"/></name><argument_list pos:line="116" pos:column="14">(<argument><expr><name pos:line="116" pos:column="15">data<pos:position pos:line="116" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="21">"FTP response reading failed"<pos:position pos:line="116" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="52"/></expr_stmt>
      }<pos:position pos:line="117" pos:column="8"/></block></then></if></elseif>
      <else pos:line="118" pos:column="7">else <block pos:line="118" pos:column="12">{
        <comment type="block" pos:line="119" pos:column="9">/* we got a whole chunk of data, which can be anything from one
         * byte to a set of lines and possible just a piece of the last
         * line */</comment>
        <decl_stmt><decl><type><name pos:line="122" pos:column="9">int<pos:position pos:line="122" pos:column="12"/></name></type> <name pos:line="122" pos:column="13">i<pos:position pos:line="122" pos:column="14"/></name></decl>;<pos:position pos:line="122" pos:column="15"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="124" pos:column="9">conn<pos:position pos:line="124" pos:column="13"/></name><operator pos:line="124" pos:column="13">-&gt;<pos:position pos:line="124" pos:column="18"/></operator><name pos:line="124" pos:column="15">headerbytecount<pos:position pos:line="124" pos:column="30"/></name></name> <operator pos:line="124" pos:column="31">+=<pos:position pos:line="124" pos:column="33"/></operator> <name pos:line="124" pos:column="34">gotbytes<pos:position pos:line="124" pos:column="42"/></name></expr>;<pos:position pos:line="124" pos:column="43"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="126" pos:column="9">*<pos:position pos:line="126" pos:column="10"/></operator><name pos:line="126" pos:column="10">nreadp<pos:position pos:line="126" pos:column="16"/></name> <operator pos:line="126" pos:column="17">+=<pos:position pos:line="126" pos:column="19"/></operator> <name pos:line="126" pos:column="20">gotbytes<pos:position pos:line="126" pos:column="28"/></name></expr>;<pos:position pos:line="126" pos:column="29"/></expr_stmt>
        <for pos:line="127" pos:column="9">for<control pos:line="127" pos:column="12">(<init><expr><name pos:line="127" pos:column="13">i<pos:position pos:line="127" pos:column="14"/></name> <operator pos:line="127" pos:column="15">=<pos:position pos:line="127" pos:column="16"/></operator> <literal type="number" pos:line="127" pos:column="17">0<pos:position pos:line="127" pos:column="18"/></literal></expr>;<pos:position pos:line="127" pos:column="19"/></init> <condition><expr><name pos:line="127" pos:column="20">i<pos:position pos:line="127" pos:column="21"/></name> <operator pos:line="127" pos:column="22">&lt;<pos:position pos:line="127" pos:column="26"/></operator> <name pos:line="127" pos:column="24">gotbytes<pos:position pos:line="127" pos:column="32"/></name></expr>;<pos:position pos:line="127" pos:column="33"/></condition> <incr><expr><name pos:line="127" pos:column="34">ptr<pos:position pos:line="127" pos:column="37"/></name><operator pos:line="127" pos:column="37">++<pos:position pos:line="127" pos:column="39"/></operator></expr><operator pos:line="127" pos:column="39">,<pos:position pos:line="127" pos:column="40"/></operator> <expr><name pos:line="127" pos:column="41">i<pos:position pos:line="127" pos:column="42"/></name><operator pos:line="127" pos:column="42">++<pos:position pos:line="127" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="127" pos:column="45"/></control> <block pos:line="127" pos:column="46">{
          <expr_stmt><expr><name pos:line="128" pos:column="11">perline<pos:position pos:line="128" pos:column="18"/></name><operator pos:line="128" pos:column="18">++<pos:position pos:line="128" pos:column="20"/></operator></expr>;<pos:position pos:line="128" pos:column="21"/></expr_stmt>
          <if pos:line="129" pos:column="11">if<condition pos:line="129" pos:column="13">(<expr><operator pos:line="129" pos:column="14">*<pos:position pos:line="129" pos:column="15"/></operator><name pos:line="129" pos:column="15">ptr<pos:position pos:line="129" pos:column="18"/></name><operator pos:line="129" pos:column="18">==<pos:position pos:line="129" pos:column="20"/></operator><literal type="char" pos:line="129" pos:column="20">'\n'<pos:position pos:line="129" pos:column="24"/></literal></expr>)<pos:position pos:line="129" pos:column="25"/></condition><then pos:line="129" pos:column="25"> <block pos:line="129" pos:column="26">{
            <comment type="block" pos:line="130" pos:column="13">/* a newline is CRLF in ftp-talk, so the CR is ignored as
               the line isn't really terminated until the LF comes */</comment>

            <comment type="block" pos:line="133" pos:column="13">/* output debug output if that is requested */</comment>
            <if pos:line="134" pos:column="13">if<condition pos:line="134" pos:column="15">(<expr><name><name pos:line="134" pos:column="16">data<pos:position pos:line="134" pos:column="20"/></name><operator pos:line="134" pos:column="20">-&gt;<pos:position pos:line="134" pos:column="25"/></operator><name pos:line="134" pos:column="22">set<pos:position pos:line="134" pos:column="25"/></name><operator pos:line="134" pos:column="25">.<pos:position pos:line="134" pos:column="26"/></operator><name pos:line="134" pos:column="26">verbose<pos:position pos:line="134" pos:column="33"/></name></name></expr>)<pos:position pos:line="134" pos:column="34"/></condition><then pos:line="134" pos:column="34">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="135" pos:column="15">Curl_debug<pos:position pos:line="135" pos:column="25"/></name><argument_list pos:line="135" pos:column="25">(<argument><expr><name pos:line="135" pos:column="26">data<pos:position pos:line="135" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="32">CURLINFO_HEADER_IN<pos:position pos:line="135" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="52">line_start<pos:position pos:line="135" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="64">perline<pos:position pos:line="135" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="73">conn<pos:position pos:line="135" pos:column="77"/></name></expr></argument>)<pos:position pos:line="135" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="79"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="137" pos:column="13">/*
             * We pass all response-lines to the callback function registered
             * for "headers". The response lines can be seen as a kind of
             * headers.
             */</comment>
            <expr_stmt><expr><name pos:line="142" pos:column="13">result<pos:position pos:line="142" pos:column="19"/></name> <operator pos:line="142" pos:column="20">=<pos:position pos:line="142" pos:column="21"/></operator> <call><name pos:line="142" pos:column="22">Curl_client_write<pos:position pos:line="142" pos:column="39"/></name><argument_list pos:line="142" pos:column="39">(<argument><expr><name pos:line="142" pos:column="40">data<pos:position pos:line="142" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="46">CLIENTWRITE_HEADER<pos:position pos:line="142" pos:column="64"/></name></expr></argument>,
                                       <argument><expr><name pos:line="143" pos:column="40">line_start<pos:position pos:line="143" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="52">perline<pos:position pos:line="143" pos:column="59"/></name></expr></argument>)<pos:position pos:line="143" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="61"/></expr_stmt>
            <if pos:line="144" pos:column="13">if<condition pos:line="144" pos:column="15">(<expr><name pos:line="144" pos:column="16">result<pos:position pos:line="144" pos:column="22"/></name></expr>)<pos:position pos:line="144" pos:column="23"/></condition><then pos:line="144" pos:column="23">
              <block type="pseudo"><return pos:line="145" pos:column="15">return <expr><name pos:line="145" pos:column="22">result<pos:position pos:line="145" pos:column="28"/></name></expr>;<pos:position pos:line="145" pos:column="29"/></return></block></then></if>

            <if pos:line="147" pos:column="13">if<condition pos:line="147" pos:column="15">(<expr><name pos:line="147" pos:column="16">perline<pos:position pos:line="147" pos:column="23"/></name><operator pos:line="147" pos:column="23">&gt;<pos:position pos:line="147" pos:column="27"/></operator><literal type="number" pos:line="147" pos:column="24">3<pos:position pos:line="147" pos:column="25"/></literal> <operator pos:line="147" pos:column="26">&amp;&amp;<pos:position pos:line="147" pos:column="36"/></operator> <call><name pos:line="147" pos:column="29">lastline<pos:position pos:line="147" pos:column="37"/></name><argument_list pos:line="147" pos:column="37">(<argument><expr><name pos:line="147" pos:column="38">line_start<pos:position pos:line="147" pos:column="48"/></name></expr></argument>)<pos:position pos:line="147" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="50"/></condition><then pos:line="147" pos:column="50"> <block pos:line="147" pos:column="51">{
              <comment type="block" pos:line="148" pos:column="15">/* This is the end of the last line, copy the last
               * line to the start of the buffer and zero terminate,
               * for old times sake (and krb4)! */</comment>
              <decl_stmt><decl><type><name pos:line="151" pos:column="15">char<pos:position pos:line="151" pos:column="19"/></name> <modifier pos:line="151" pos:column="20">*<pos:position pos:line="151" pos:column="21"/></modifier></type><name pos:line="151" pos:column="21">meow<pos:position pos:line="151" pos:column="25"/></name></decl>;<pos:position pos:line="151" pos:column="26"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="152" pos:column="15">int<pos:position pos:line="152" pos:column="18"/></name></type> <name pos:line="152" pos:column="19">n<pos:position pos:line="152" pos:column="20"/></name></decl>;<pos:position pos:line="152" pos:column="21"/></decl_stmt>
              <for pos:line="153" pos:column="15">for<control pos:line="153" pos:column="18">(<init><expr><name pos:line="153" pos:column="19">meow<pos:position pos:line="153" pos:column="23"/></name><operator pos:line="153" pos:column="23">=<pos:position pos:line="153" pos:column="24"/></operator><name pos:line="153" pos:column="24">line_start<pos:position pos:line="153" pos:column="34"/></name></expr><operator pos:line="153" pos:column="34">,<pos:position pos:line="153" pos:column="35"/></operator> <expr><name pos:line="153" pos:column="36">n<pos:position pos:line="153" pos:column="37"/></name><operator pos:line="153" pos:column="37">=<pos:position pos:line="153" pos:column="38"/></operator><literal type="number" pos:line="153" pos:column="38">0<pos:position pos:line="153" pos:column="39"/></literal></expr>;<pos:position pos:line="153" pos:column="40"/></init> <condition><expr><name pos:line="153" pos:column="41">meow<pos:position pos:line="153" pos:column="45"/></name><operator pos:line="153" pos:column="45">&lt;<pos:position pos:line="153" pos:column="49"/></operator><name pos:line="153" pos:column="46">ptr<pos:position pos:line="153" pos:column="49"/></name></expr>;<pos:position pos:line="153" pos:column="50"/></condition> <incr><expr><name pos:line="153" pos:column="51">meow<pos:position pos:line="153" pos:column="55"/></name><operator pos:line="153" pos:column="55">++<pos:position pos:line="153" pos:column="57"/></operator></expr><operator pos:line="153" pos:column="57">,<pos:position pos:line="153" pos:column="58"/></operator> <expr><name pos:line="153" pos:column="59">n<pos:position pos:line="153" pos:column="60"/></name><operator pos:line="153" pos:column="60">++<pos:position pos:line="153" pos:column="62"/></operator></expr></incr>)<pos:position pos:line="153" pos:column="63"/></control>
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="154" pos:column="17">buf<pos:position pos:line="154" pos:column="20"/></name><index pos:line="154" pos:column="20">[<expr><name pos:line="154" pos:column="21">n<pos:position pos:line="154" pos:column="22"/></name></expr>]<pos:position pos:line="154" pos:column="23"/></index></name> <operator pos:line="154" pos:column="24">=<pos:position pos:line="154" pos:column="25"/></operator> <operator pos:line="154" pos:column="26">*<pos:position pos:line="154" pos:column="27"/></operator><name pos:line="154" pos:column="27">meow<pos:position pos:line="154" pos:column="31"/></name></expr>;<pos:position pos:line="154" pos:column="32"/></expr_stmt></block></for>
              <expr_stmt><expr><operator pos:line="155" pos:column="15">*<pos:position pos:line="155" pos:column="16"/></operator><name pos:line="155" pos:column="16">meow<pos:position pos:line="155" pos:column="20"/></name><operator pos:line="155" pos:column="20">=<pos:position pos:line="155" pos:column="21"/></operator><literal type="number" pos:line="155" pos:column="21">0<pos:position pos:line="155" pos:column="22"/></literal></expr>;<pos:position pos:line="155" pos:column="23"/></expr_stmt> <comment type="block" pos:line="155" pos:column="24">/* zero terminate */</comment>
              <expr_stmt><expr><name pos:line="156" pos:column="15">keepon<pos:position pos:line="156" pos:column="21"/></name><operator pos:line="156" pos:column="21">=<pos:position pos:line="156" pos:column="22"/></operator><name pos:line="156" pos:column="22">FALSE<pos:position pos:line="156" pos:column="27"/></name></expr>;<pos:position pos:line="156" pos:column="28"/></expr_stmt>
              <expr_stmt><expr><name pos:line="157" pos:column="15">line_start<pos:position pos:line="157" pos:column="25"/></name> <operator pos:line="157" pos:column="26">=<pos:position pos:line="157" pos:column="27"/></operator> <name pos:line="157" pos:column="28">ptr<pos:position pos:line="157" pos:column="31"/></name><operator pos:line="157" pos:column="31">+<pos:position pos:line="157" pos:column="32"/></operator><literal type="number" pos:line="157" pos:column="32">1<pos:position pos:line="157" pos:column="33"/></literal></expr>;<pos:position pos:line="157" pos:column="34"/></expr_stmt> <comment type="block" pos:line="157" pos:column="35">/* advance pointer */</comment>
              <expr_stmt><expr><name pos:line="158" pos:column="15">i<pos:position pos:line="158" pos:column="16"/></name><operator pos:line="158" pos:column="16">++<pos:position pos:line="158" pos:column="18"/></operator></expr>;<pos:position pos:line="158" pos:column="19"/></expr_stmt> <comment type="block" pos:line="158" pos:column="20">/* skip this before getting out */</comment>
              <break pos:line="159" pos:column="15">break;<pos:position pos:line="159" pos:column="21"/></break>
            }<pos:position pos:line="160" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="161" pos:column="13">perline<pos:position pos:line="161" pos:column="20"/></name><operator pos:line="161" pos:column="20">=<pos:position pos:line="161" pos:column="21"/></operator><literal type="number" pos:line="161" pos:column="21">0<pos:position pos:line="161" pos:column="22"/></literal></expr>;<pos:position pos:line="161" pos:column="23"/></expr_stmt> <comment type="block" pos:line="161" pos:column="24">/* line starts over here */</comment>
            <expr_stmt><expr><name pos:line="162" pos:column="13">line_start<pos:position pos:line="162" pos:column="23"/></name> <operator pos:line="162" pos:column="24">=<pos:position pos:line="162" pos:column="25"/></operator> <name pos:line="162" pos:column="26">ptr<pos:position pos:line="162" pos:column="29"/></name><operator pos:line="162" pos:column="29">+<pos:position pos:line="162" pos:column="30"/></operator><literal type="number" pos:line="162" pos:column="30">1<pos:position pos:line="162" pos:column="31"/></literal></expr>;<pos:position pos:line="162" pos:column="32"/></expr_stmt>
          }<pos:position pos:line="163" pos:column="12"/></block></then></if>
        }<pos:position pos:line="164" pos:column="10"/></block></for>
        <if pos:line="165" pos:column="9">if<condition pos:line="165" pos:column="11">(<expr><operator pos:line="165" pos:column="12">!<pos:position pos:line="165" pos:column="13"/></operator><name pos:line="165" pos:column="13">keepon<pos:position pos:line="165" pos:column="19"/></name> <operator pos:line="165" pos:column="20">&amp;&amp;<pos:position pos:line="165" pos:column="30"/></operator> <operator pos:line="165" pos:column="23">(<pos:position pos:line="165" pos:column="24"/></operator><name pos:line="165" pos:column="24">i<pos:position pos:line="165" pos:column="25"/></name> <operator pos:line="165" pos:column="26">!=<pos:position pos:line="165" pos:column="28"/></operator> <name pos:line="165" pos:column="29">gotbytes<pos:position pos:line="165" pos:column="37"/></name><operator pos:line="165" pos:column="37">)<pos:position pos:line="165" pos:column="38"/></operator></expr>)<pos:position pos:line="165" pos:column="39"/></condition><then pos:line="165" pos:column="39"> <block pos:line="165" pos:column="40">{
          <comment type="block" pos:line="166" pos:column="11">/* We found the end of the response lines, but we didn't parse the
             full chunk of data we have read from the server. We therefore
             need to store the rest of the data to be checked on the next
             invoke as it may actually contain another end of response
             already!  Cleverly figured out by Eric Lavigne in December
             2001. */</comment>
          <expr_stmt><expr><name><name pos:line="172" pos:column="11">ftp<pos:position pos:line="172" pos:column="14"/></name><operator pos:line="172" pos:column="14">-&gt;<pos:position pos:line="172" pos:column="19"/></operator><name pos:line="172" pos:column="16">cache_size<pos:position pos:line="172" pos:column="26"/></name></name> <operator pos:line="172" pos:column="27">=<pos:position pos:line="172" pos:column="28"/></operator> <name pos:line="172" pos:column="29">gotbytes<pos:position pos:line="172" pos:column="37"/></name> <operator pos:line="172" pos:column="38">-<pos:position pos:line="172" pos:column="39"/></operator> <name pos:line="172" pos:column="40">i<pos:position pos:line="172" pos:column="41"/></name></expr>;<pos:position pos:line="172" pos:column="42"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="173" pos:column="11">ftp<pos:position pos:line="173" pos:column="14"/></name><operator pos:line="173" pos:column="14">-&gt;<pos:position pos:line="173" pos:column="19"/></operator><name pos:line="173" pos:column="16">cache<pos:position pos:line="173" pos:column="21"/></name></name> <operator pos:line="173" pos:column="22">=<pos:position pos:line="173" pos:column="23"/></operator> <operator pos:line="173" pos:column="24">(<pos:position pos:line="173" pos:column="25"/></operator><name pos:line="173" pos:column="25">char<pos:position pos:line="173" pos:column="29"/></name> <operator pos:line="173" pos:column="30">*<pos:position pos:line="173" pos:column="31"/></operator><operator pos:line="173" pos:column="31">)<pos:position pos:line="173" pos:column="32"/></operator><call><name pos:line="173" pos:column="32">malloc<pos:position pos:line="173" pos:column="38"/></name><argument_list pos:line="173" pos:column="38">(<argument><expr><operator pos:line="173" pos:column="39">(<pos:position pos:line="173" pos:column="40"/></operator><name pos:line="173" pos:column="40">int<pos:position pos:line="173" pos:column="43"/></name><operator pos:line="173" pos:column="43">)<pos:position pos:line="173" pos:column="44"/></operator><name><name pos:line="173" pos:column="44">ftp<pos:position pos:line="173" pos:column="47"/></name><operator pos:line="173" pos:column="47">-&gt;<pos:position pos:line="173" pos:column="52"/></operator><name pos:line="173" pos:column="49">cache_size<pos:position pos:line="173" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="173" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="61"/></expr_stmt>
          <if pos:line="174" pos:column="11">if<condition pos:line="174" pos:column="13">(<expr><name><name pos:line="174" pos:column="14">ftp<pos:position pos:line="174" pos:column="17"/></name><operator pos:line="174" pos:column="17">-&gt;<pos:position pos:line="174" pos:column="22"/></operator><name pos:line="174" pos:column="19">cache<pos:position pos:line="174" pos:column="24"/></name></name></expr>)<pos:position pos:line="174" pos:column="25"/></condition><then pos:line="174" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="175" pos:column="13">memcpy<pos:position pos:line="175" pos:column="19"/></name><argument_list pos:line="175" pos:column="19">(<argument><expr><name><name pos:line="175" pos:column="20">ftp<pos:position pos:line="175" pos:column="23"/></name><operator pos:line="175" pos:column="23">-&gt;<pos:position pos:line="175" pos:column="28"/></operator><name pos:line="175" pos:column="25">cache<pos:position pos:line="175" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="32">line_start<pos:position pos:line="175" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="175" pos:column="44">(<pos:position pos:line="175" pos:column="45"/></operator><name pos:line="175" pos:column="45">int<pos:position pos:line="175" pos:column="48"/></name><operator pos:line="175" pos:column="48">)<pos:position pos:line="175" pos:column="49"/></operator><name><name pos:line="175" pos:column="49">ftp<pos:position pos:line="175" pos:column="52"/></name><operator pos:line="175" pos:column="52">-&gt;<pos:position pos:line="175" pos:column="57"/></operator><name pos:line="175" pos:column="54">cache_size<pos:position pos:line="175" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="175" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="66"/></expr_stmt></block></then>
          <else pos:line="176" pos:column="11">else
            <block type="pseudo"><return pos:line="177" pos:column="13">return <expr><name pos:line="177" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="177" pos:column="39"/></name></expr>;<pos:position pos:line="177" pos:column="40"/></return></block></else></if> <comment type="block" format="doxygen" pos:line="177" pos:column="41">/**BANG**/</comment>
        }<pos:position pos:line="178" pos:column="10"/></block></then></if>
      }<pos:position pos:line="179" pos:column="8"/></block></else></if> <comment type="block" pos:line="179" pos:column="9">/* there was data */</comment>
    }<pos:position pos:line="180" pos:column="6"/></block></then></if> <comment type="block" pos:line="180" pos:column="7">/* if(no error) */</comment>
  }<pos:position pos:line="181" pos:column="4"/></block></while> <comment type="block" pos:line="181" pos:column="5">/* while there's buffer left and loop is requested */</comment>

  <if pos:line="183" pos:column="3">if<condition pos:line="183" pos:column="5">(<expr><operator pos:line="183" pos:column="6">!<pos:position pos:line="183" pos:column="7"/></operator><name pos:line="183" pos:column="7">result<pos:position pos:line="183" pos:column="13"/></name></expr>)<pos:position pos:line="183" pos:column="14"/></condition><then pos:line="183" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><name pos:line="184" pos:column="5">code<pos:position pos:line="184" pos:column="9"/></name> <operator pos:line="184" pos:column="10">=<pos:position pos:line="184" pos:column="11"/></operator> <call><name pos:line="184" pos:column="12">atoi<pos:position pos:line="184" pos:column="16"/></name><argument_list pos:line="184" pos:column="16">(<argument><expr><name pos:line="184" pos:column="17">buf<pos:position pos:line="184" pos:column="20"/></name></expr></argument>)<pos:position pos:line="184" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="22"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="186" pos:column="1">#<cpp:directive pos:line="186" pos:column="2">ifdef<pos:position pos:line="186" pos:column="7"/></cpp:directive> <name pos:line="186" pos:column="8">HAVE_KRB4<pos:position pos:line="186" pos:column="17"/></name></cpp:ifdef>
  <comment type="block" pos:line="187" pos:column="3">/* handle the security-oriented responses 6xx ***/</comment>
  <comment type="block" pos:line="188" pos:column="3">/* FIXME: some errorchecking perhaps... ***/</comment>
  <switch pos:line="189" pos:column="3">switch<condition pos:line="189" pos:column="9">(<expr><name pos:line="189" pos:column="10">code<pos:position pos:line="189" pos:column="14"/></name></expr>)<pos:position pos:line="189" pos:column="15"/></condition> <block pos:line="189" pos:column="16">{
  <case pos:line="190" pos:column="3">case <expr><literal type="number" pos:line="190" pos:column="8">631<pos:position pos:line="190" pos:column="11"/></literal></expr>:<pos:position pos:line="190" pos:column="12"/></case>
    <expr_stmt><expr><call><name pos:line="191" pos:column="5">Curl_sec_read_msg<pos:position pos:line="191" pos:column="22"/></name><argument_list pos:line="191" pos:column="22">(<argument><expr><name pos:line="191" pos:column="23">conn<pos:position pos:line="191" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="29">buf<pos:position pos:line="191" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="34">prot_safe<pos:position pos:line="191" pos:column="43"/></name></expr></argument>)<pos:position pos:line="191" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="45"/></expr_stmt>
    <break pos:line="192" pos:column="5">break;<pos:position pos:line="192" pos:column="11"/></break>
  <case pos:line="193" pos:column="3">case <expr><literal type="number" pos:line="193" pos:column="8">632<pos:position pos:line="193" pos:column="11"/></literal></expr>:<pos:position pos:line="193" pos:column="12"/></case>
    <expr_stmt><expr><call><name pos:line="194" pos:column="5">Curl_sec_read_msg<pos:position pos:line="194" pos:column="22"/></name><argument_list pos:line="194" pos:column="22">(<argument><expr><name pos:line="194" pos:column="23">conn<pos:position pos:line="194" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="29">buf<pos:position pos:line="194" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="34">prot_private<pos:position pos:line="194" pos:column="46"/></name></expr></argument>)<pos:position pos:line="194" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="48"/></expr_stmt>
    <break pos:line="195" pos:column="5">break;<pos:position pos:line="195" pos:column="11"/></break>
  <case pos:line="196" pos:column="3">case <expr><literal type="number" pos:line="196" pos:column="8">633<pos:position pos:line="196" pos:column="11"/></literal></expr>:<pos:position pos:line="196" pos:column="12"/></case>
    <expr_stmt><expr><call><name pos:line="197" pos:column="5">Curl_sec_read_msg<pos:position pos:line="197" pos:column="22"/></name><argument_list pos:line="197" pos:column="22">(<argument><expr><name pos:line="197" pos:column="23">conn<pos:position pos:line="197" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="29">buf<pos:position pos:line="197" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="34">prot_confidential<pos:position pos:line="197" pos:column="51"/></name></expr></argument>)<pos:position pos:line="197" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="53"/></expr_stmt>
    <break pos:line="198" pos:column="5">break;<pos:position pos:line="198" pos:column="11"/></break>
  <default pos:line="199" pos:column="3">default:<pos:position pos:line="199" pos:column="11"/></default>
    <comment type="block" pos:line="200" pos:column="5">/* normal ftp stuff we pass through! */</comment>
    <break pos:line="201" pos:column="5">break;<pos:position pos:line="201" pos:column="11"/></break>
  }<pos:position pos:line="202" pos:column="4"/></block></switch>
<cpp:endif pos:line="203" pos:column="1">#<cpp:directive pos:line="203" pos:column="2">endif<pos:position pos:line="203" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="205" pos:column="3">if<condition pos:line="205" pos:column="5">(<expr><name pos:line="205" pos:column="6">ftpcode<pos:position pos:line="205" pos:column="13"/></name></expr>)<pos:position pos:line="205" pos:column="14"/></condition><then pos:line="205" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="206" pos:column="5">*<pos:position pos:line="206" pos:column="6"/></operator><name pos:line="206" pos:column="6">ftpcode<pos:position pos:line="206" pos:column="13"/></name><operator pos:line="206" pos:column="13">=<pos:position pos:line="206" pos:column="14"/></operator><name pos:line="206" pos:column="14">code<pos:position pos:line="206" pos:column="18"/></name></expr>;<pos:position pos:line="206" pos:column="19"/></expr_stmt></block></then></if> <comment type="block" pos:line="206" pos:column="20">/* return the initial number like this */</comment>

  <comment type="block" pos:line="208" pos:column="3">/* store the latest code for later retrieval */</comment>
  <expr_stmt><expr><name><name pos:line="209" pos:column="3">conn<pos:position pos:line="209" pos:column="7"/></name><operator pos:line="209" pos:column="7">-&gt;<pos:position pos:line="209" pos:column="12"/></operator><name pos:line="209" pos:column="9">data<pos:position pos:line="209" pos:column="13"/></name><operator pos:line="209" pos:column="13">-&gt;<pos:position pos:line="209" pos:column="18"/></operator><name pos:line="209" pos:column="15">info<pos:position pos:line="209" pos:column="19"/></name><operator pos:line="209" pos:column="19">.<pos:position pos:line="209" pos:column="20"/></operator><name pos:line="209" pos:column="20">httpcode<pos:position pos:line="209" pos:column="28"/></name></name><operator pos:line="209" pos:column="28">=<pos:position pos:line="209" pos:column="29"/></operator><name pos:line="209" pos:column="29">code<pos:position pos:line="209" pos:column="33"/></name></expr>;<pos:position pos:line="209" pos:column="34"/></expr_stmt>

  <return pos:line="211" pos:column="3">return <expr><name pos:line="211" pos:column="10">result<pos:position pos:line="211" pos:column="16"/></name></expr>;<pos:position pos:line="211" pos:column="17"/></return>
}<pos:position pos:line="212" pos:column="2"/></block></function></unit>
