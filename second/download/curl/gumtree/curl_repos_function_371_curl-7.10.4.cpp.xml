<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_371_curl-7.10.4.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">CookieInfo<pos:position pos:line="1" pos:column="18"/></name></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">Curl_cookie_init<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">file<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
                                    <parameter><decl><type><name><name pos:line="2" pos:column="37">struct<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">CookieInfo<pos:position pos:line="2" pos:column="54"/></name></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">inc<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="3" pos:column="37">bool<pos:position pos:line="3" pos:column="41"/></name></type> <name pos:line="3" pos:column="42">newsession<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="53"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">line<pos:position pos:line="5" pos:column="12"/></name><index pos:line="5" pos:column="12">[<expr><name pos:line="5" pos:column="13">MAX_COOKIE_LINE<pos:position pos:line="5" pos:column="28"/></name></expr>]<pos:position pos:line="5" pos:column="29"/></index></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">CookieInfo<pos:position pos:line="6" pos:column="20"/></name></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">c<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">FILE<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">fp<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">fromfile<pos:position pos:line="8" pos:column="16"/></name><init pos:line="8" pos:column="16">=<expr><name pos:line="8" pos:column="17">TRUE<pos:position pos:line="8" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">NULL<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">==<pos:position pos:line="10" pos:column="13"/></operator> <name pos:line="10" pos:column="14">inc<pos:position pos:line="10" pos:column="17"/></name></expr>)<pos:position pos:line="10" pos:column="18"/></condition><then pos:line="10" pos:column="18"> <block pos:line="10" pos:column="19">{
    <comment type="block" pos:line="11" pos:column="5">/* we didn't get a struct, create one */</comment>
    <expr_stmt><expr><name pos:line="12" pos:column="5">c<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator>struct <name pos:line="12" pos:column="17">CookieInfo<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">*<pos:position pos:line="12" pos:column="29"/></operator><operator pos:line="12" pos:column="29">)<pos:position pos:line="12" pos:column="30"/></operator><call><name pos:line="12" pos:column="30">malloc<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><sizeof pos:line="12" pos:column="37">sizeof<argument_list pos:line="12" pos:column="43">(<argument><expr pos:line="12" pos:column="44">struct <name pos:line="12" pos:column="51">CookieInfo<pos:position pos:line="12" pos:column="61"/></name></expr></argument>)<pos:position pos:line="12" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>
    <if pos:line="13" pos:column="5">if<condition pos:line="13" pos:column="7">(<expr><operator pos:line="13" pos:column="8">!<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">c<pos:position pos:line="13" pos:column="10"/></name></expr>)<pos:position pos:line="13" pos:column="11"/></condition><then pos:line="13" pos:column="11">
      <block type="pseudo"><return pos:line="14" pos:column="7">return <expr><name pos:line="14" pos:column="14">NULL<pos:position pos:line="14" pos:column="18"/></name></expr>;<pos:position pos:line="14" pos:column="19"/></return></block></then></if> <comment type="block" pos:line="14" pos:column="20">/* failed to get memory */</comment>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">memset<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">c<pos:position pos:line="15" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="15">0<pos:position pos:line="15" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="18">sizeof<argument_list pos:line="15" pos:column="24">(<argument><expr pos:line="15" pos:column="25">struct <name pos:line="15" pos:column="32">CookieInfo<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">c<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">-&gt;<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="8">filename<pos:position pos:line="16" pos:column="16"/></name></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <call><name pos:line="16" pos:column="19">strdup<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><ternary><condition><expr><name pos:line="16" pos:column="26">file<pos:position pos:line="16" pos:column="30"/></name></expr>?<pos:position pos:line="16" pos:column="31"/></condition><then><expr><name pos:line="16" pos:column="31">file<pos:position pos:line="16" pos:column="35"/></name></expr></then><else pos:line="16" pos:column="35">:<expr><literal type="string" pos:line="16" pos:column="36">"none"<pos:position pos:line="16" pos:column="42"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt> <comment type="block" pos:line="16" pos:column="45">/* copy the name just in case */</comment>
  }<pos:position pos:line="17" pos:column="4"/></block></then>
  <else pos:line="18" pos:column="3">else <block pos:line="18" pos:column="8">{
    <comment type="block" pos:line="19" pos:column="5">/* we got an already existing one, use that */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">c<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <name pos:line="20" pos:column="9">inc<pos:position pos:line="20" pos:column="12"/></name></expr>;<pos:position pos:line="20" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">c<pos:position pos:line="22" pos:column="4"/></name><operator pos:line="22" pos:column="4">-&gt;<pos:position pos:line="22" pos:column="9"/></operator><name pos:line="22" pos:column="6">running<pos:position pos:line="22" pos:column="13"/></name></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">FALSE<pos:position pos:line="22" pos:column="21"/></name></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt> <comment type="block" pos:line="22" pos:column="23">/* this is not running, this is init */</comment>

  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><name pos:line="24" pos:column="6">file<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">&amp;&amp;<pos:position pos:line="24" pos:column="21"/></operator> <call><name pos:line="24" pos:column="14">strequal<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">file<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="29">"-"<pos:position pos:line="24" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34"> <block pos:line="24" pos:column="35">{
    <expr_stmt><expr><name pos:line="25" pos:column="5">fp<pos:position pos:line="25" pos:column="7"/></name> <operator pos:line="25" pos:column="8">=<pos:position pos:line="25" pos:column="9"/></operator> <name pos:line="25" pos:column="10">stdin<pos:position pos:line="25" pos:column="15"/></name></expr>;<pos:position pos:line="25" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">fromfile<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">FALSE<pos:position pos:line="26" pos:column="19"/></name></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then>
  <else pos:line="28" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="5">fp<pos:position pos:line="29" pos:column="7"/></name> <operator pos:line="29" pos:column="8">=<pos:position pos:line="29" pos:column="9"/></operator> <ternary><condition><expr><name pos:line="29" pos:column="10">file<pos:position pos:line="29" pos:column="14"/></name></expr>?<pos:position pos:line="29" pos:column="15"/></condition><then><expr><call><name pos:line="29" pos:column="15">fopen<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">file<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="27">"r"<pos:position pos:line="29" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr></then><else pos:line="29" pos:column="31">:<expr><name pos:line="29" pos:column="32">NULL<pos:position pos:line="29" pos:column="36"/></name></expr></else></ternary></expr>;<pos:position pos:line="29" pos:column="37"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name><name pos:line="31" pos:column="3">c<pos:position pos:line="31" pos:column="4"/></name><operator pos:line="31" pos:column="4">-&gt;<pos:position pos:line="31" pos:column="9"/></operator><name pos:line="31" pos:column="6">newsession<pos:position pos:line="31" pos:column="16"/></name></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">newsession<pos:position pos:line="31" pos:column="29"/></name></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt> <comment type="block" pos:line="31" pos:column="31">/* new session? */</comment>

  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><name pos:line="33" pos:column="6">fp<pos:position pos:line="33" pos:column="8"/></name></expr>)<pos:position pos:line="33" pos:column="9"/></condition><then pos:line="33" pos:column="9"> <block pos:line="33" pos:column="10">{
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">char<pos:position pos:line="34" pos:column="9"/></name> <modifier pos:line="34" pos:column="10">*<pos:position pos:line="34" pos:column="11"/></modifier></type><name pos:line="34" pos:column="11">lineptr<pos:position pos:line="34" pos:column="18"/></name></decl>;<pos:position pos:line="34" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">bool<pos:position pos:line="35" pos:column="9"/></name></type> <name pos:line="35" pos:column="10">headerline<pos:position pos:line="35" pos:column="20"/></name></decl>;<pos:position pos:line="35" pos:column="21"/></decl_stmt>
    <while pos:line="36" pos:column="5">while<condition pos:line="36" pos:column="10">(<expr><call><name pos:line="36" pos:column="11">fgets<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><name pos:line="36" pos:column="17">line<pos:position pos:line="36" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="23">MAX_COOKIE_LINE<pos:position pos:line="36" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="40">fp<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="44"/></condition> <block pos:line="36" pos:column="45">{
      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><call><name pos:line="37" pos:column="10">checkprefix<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><literal type="string" pos:line="37" pos:column="22">"Set-Cookie:"<pos:position pos:line="37" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="37">line<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="43"/></condition><then pos:line="37" pos:column="43"> <block pos:line="37" pos:column="44">{
        <comment type="block" pos:line="38" pos:column="9">/* This is a cookie line, get it! */</comment>
        <expr_stmt><expr><name pos:line="39" pos:column="9">lineptr<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator><operator pos:line="39" pos:column="17">&amp;<pos:position pos:line="39" pos:column="22"/></operator><name><name pos:line="39" pos:column="18">line<pos:position pos:line="39" pos:column="22"/></name><index pos:line="39" pos:column="22">[<expr><literal type="number" pos:line="39" pos:column="23">11<pos:position pos:line="39" pos:column="25"/></literal></expr>]<pos:position pos:line="39" pos:column="26"/></index></name></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">headerline<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="20">TRUE<pos:position pos:line="40" pos:column="24"/></name></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="41" pos:column="8"/></block></then>
      <else pos:line="42" pos:column="7">else <block pos:line="42" pos:column="12">{
        <expr_stmt><expr><name pos:line="43" pos:column="9">lineptr<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">line<pos:position pos:line="43" pos:column="21"/></name></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="44" pos:column="9">headerline<pos:position pos:line="44" pos:column="19"/></name><operator pos:line="44" pos:column="19">=<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="20">FALSE<pos:position pos:line="44" pos:column="25"/></name></expr>;<pos:position pos:line="44" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="45" pos:column="8"/></block></else></if>
      <while pos:line="46" pos:column="7">while<condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">*<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">lineptr<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">&amp;&amp;<pos:position pos:line="46" pos:column="32"/></operator> <call><name pos:line="46" pos:column="25">isspace<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><operator pos:line="46" pos:column="33">(<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">int<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">)<pos:position pos:line="46" pos:column="38"/></operator><operator pos:line="46" pos:column="38">*<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="39">lineptr<pos:position pos:line="46" pos:column="46"/></name></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="48"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="9">lineptr<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">++<pos:position pos:line="47" pos:column="18"/></operator></expr>;<pos:position pos:line="47" pos:column="19"/></expr_stmt></block></while>

      <expr_stmt><expr><call><name pos:line="49" pos:column="7">Curl_cookie_add<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">c<pos:position pos:line="49" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="26">headerline<pos:position pos:line="49" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="38">lineptr<pos:position pos:line="49" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="47">NULL<pos:position pos:line="49" pos:column="51"/></name></expr></argument>)<pos:position pos:line="49" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></while>
    <if pos:line="51" pos:column="5">if<condition pos:line="51" pos:column="7">(<expr><name pos:line="51" pos:column="8">fromfile<pos:position pos:line="51" pos:column="16"/></name></expr>)<pos:position pos:line="51" pos:column="17"/></condition><then pos:line="51" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="7">fclose<pos:position pos:line="52" pos:column="13"/></name><argument_list pos:line="52" pos:column="13">(<argument><expr><name pos:line="52" pos:column="14">fp<pos:position pos:line="52" pos:column="16"/></name></expr></argument>)<pos:position pos:line="52" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="18"/></expr_stmt></block></then></if>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="55" pos:column="3">c<pos:position pos:line="55" pos:column="4"/></name><operator pos:line="55" pos:column="4">-&gt;<pos:position pos:line="55" pos:column="9"/></operator><name pos:line="55" pos:column="6">running<pos:position pos:line="55" pos:column="13"/></name></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <name pos:line="55" pos:column="16">TRUE<pos:position pos:line="55" pos:column="20"/></name></expr>;<pos:position pos:line="55" pos:column="21"/></expr_stmt>          <comment type="block" pos:line="55" pos:column="31">/* now, we're running */</comment>

  <return pos:line="57" pos:column="3">return <expr><name pos:line="57" pos:column="10">c<pos:position pos:line="57" pos:column="11"/></name></expr>;<pos:position pos:line="57" pos:column="12"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
