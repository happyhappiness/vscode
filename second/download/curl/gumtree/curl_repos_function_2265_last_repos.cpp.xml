<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2265_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">events_socket<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">Curl_easy<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">easy<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,      <comment type="block" pos:line="1" pos:column="55">/* easy handle */</comment>
                         <parameter><decl><type><name pos:line="2" pos:column="26">curl_socket_t<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">s<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <comment type="block" pos:line="2" pos:column="43">/* socket */</comment>
                         <parameter><decl><type><name pos:line="3" pos:column="26">int<pos:position pos:line="3" pos:column="29"/></name></type> <name pos:line="3" pos:column="30">what<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>,        <comment type="block" pos:line="3" pos:column="43">/* see above */</comment>
                         <parameter><decl><type><name pos:line="4" pos:column="26">void<pos:position pos:line="4" pos:column="30"/></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">userp<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>,     <comment type="block" pos:line="4" pos:column="43">/* private callback
                                             pointer */</comment>
                         <parameter><decl><type><name pos:line="6" pos:column="26">void<pos:position pos:line="6" pos:column="30"/></name> <modifier pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></modifier></type><name pos:line="6" pos:column="32">socketp<pos:position pos:line="6" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="40"/></parameter_list>   <comment type="block" pos:line="6" pos:column="43">/* private socket
                                             pointer */</comment>
<block pos:line="8" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">events<pos:position pos:line="9" pos:column="16"/></name></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">ev<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><name pos:line="9" pos:column="23">userp<pos:position pos:line="9" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">socketmonitor<pos:position pos:line="10" pos:column="23"/></name></name> <modifier pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></modifier></type><name pos:line="10" pos:column="25">m<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">socketmonitor<pos:position pos:line="11" pos:column="23"/></name></name> <modifier pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></modifier></type><name pos:line="11" pos:column="25">prev<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><name pos:line="11" pos:column="32">NULL<pos:position pos:line="11" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><call><name pos:line="13" pos:column="5">defined<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><operator pos:line="14" pos:column="3">(<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">void<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">)<pos:position pos:line="14" pos:column="9"/></operator> <name pos:line="14" pos:column="10">easy<pos:position pos:line="14" pos:column="14"/></name></expr>;<pos:position pos:line="14" pos:column="15"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><operator pos:line="16" pos:column="3">(<pos:position pos:line="16" pos:column="4"/></operator><name pos:line="16" pos:column="4">void<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">)<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">socketp<pos:position pos:line="16" pos:column="16"/></name></expr>;<pos:position pos:line="16" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">m<pos:position pos:line="18" pos:column="4"/></name> <operator pos:line="18" pos:column="5">=<pos:position pos:line="18" pos:column="6"/></operator> <name><name pos:line="18" pos:column="7">ev<pos:position pos:line="18" pos:column="9"/></name><operator pos:line="18" pos:column="9">-&gt;<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="11">list<pos:position pos:line="18" pos:column="15"/></name></name></expr>;<pos:position pos:line="18" pos:column="16"/></expr_stmt>
  <while pos:line="19" pos:column="3">while<condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">m<pos:position pos:line="19" pos:column="10"/></name></expr>)<pos:position pos:line="19" pos:column="11"/></condition> <block pos:line="19" pos:column="12">{
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name><name pos:line="20" pos:column="8">m<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">-&gt;<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="11">socket<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">.<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">fd<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">==<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">s<pos:position pos:line="20" pos:column="25"/></name></expr>)<pos:position pos:line="20" pos:column="26"/></condition><then pos:line="20" pos:column="26"> <block pos:line="20" pos:column="27">{

      <if pos:line="22" pos:column="7">if<condition pos:line="22" pos:column="9">(<expr><name pos:line="22" pos:column="10">what<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">==<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="18">CURL_POLL_REMOVE<pos:position pos:line="22" pos:column="34"/></name></expr>)<pos:position pos:line="22" pos:column="35"/></condition><then pos:line="22" pos:column="35"> <block pos:line="22" pos:column="36">{
        <decl_stmt><decl><type><name><name pos:line="23" pos:column="9">struct<pos:position pos:line="23" pos:column="15"/></name> <name pos:line="23" pos:column="16">socketmonitor<pos:position pos:line="23" pos:column="29"/></name></name> <modifier pos:line="23" pos:column="30">*<pos:position pos:line="23" pos:column="31"/></modifier></type><name pos:line="23" pos:column="31">nxt<pos:position pos:line="23" pos:column="34"/></name> <init pos:line="23" pos:column="35">= <expr><name><name pos:line="23" pos:column="37">m<pos:position pos:line="23" pos:column="38"/></name><operator pos:line="23" pos:column="38">-&gt;<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="40">next<pos:position pos:line="23" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="23" pos:column="45"/></decl_stmt>
        <comment type="block" pos:line="24" pos:column="9">/* remove this node from the list of monitored sockets */</comment>
        <if pos:line="25" pos:column="9">if<condition pos:line="25" pos:column="11">(<expr><name pos:line="25" pos:column="12">prev<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="11">prev<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">-&gt;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="17">next<pos:position pos:line="26" pos:column="21"/></name></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">nxt<pos:position pos:line="26" pos:column="27"/></name></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt></block></then>
        <else pos:line="27" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="11">ev<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">-&gt;<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="15">list<pos:position pos:line="28" pos:column="19"/></name></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="22">nxt<pos:position pos:line="28" pos:column="25"/></name></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt></block></else></if>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">free<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">m<pos:position pos:line="29" pos:column="15"/></name></expr></argument>)<pos:position pos:line="29" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="30" pos:column="9">m<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <name pos:line="30" pos:column="13">nxt<pos:position pos:line="30" pos:column="16"/></name></expr>;<pos:position pos:line="30" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">infof<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">easy<pos:position pos:line="31" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="21">"socket cb: socket %d REMOVED\n"<pos:position pos:line="31" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="55">s<pos:position pos:line="31" pos:column="56"/></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt>
      }<pos:position pos:line="32" pos:column="8"/></block></then>
      <else pos:line="33" pos:column="7">else <block pos:line="33" pos:column="12">{
        <comment type="block" pos:line="34" pos:column="9">/* The socket 's' is already being monitored, update the activity
           mask. Convert from libcurl bitmask to the poll one. */</comment>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">m<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">socket<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">.<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">events<pos:position pos:line="36" pos:column="25"/></name></name> <operator pos:line="36" pos:column="26">=<pos:position pos:line="36" pos:column="27"/></operator> <call><name pos:line="36" pos:column="28">socketcb2poll<pos:position pos:line="36" pos:column="41"/></name><argument_list pos:line="36" pos:column="41">(<argument><expr><name pos:line="36" pos:column="42">what<pos:position pos:line="36" pos:column="46"/></name></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">infof<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">easy<pos:position pos:line="37" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="21">"socket cb: socket %d UPDATED as %s%s\n"<pos:position pos:line="37" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="63">s<pos:position pos:line="37" pos:column="64"/></name></expr></argument>,
              <argument><expr><ternary><condition><expr><name pos:line="38" pos:column="15">what<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">&amp;<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="20">CURL_POLL_IN<pos:position pos:line="38" pos:column="32"/></name></expr>?<pos:position pos:line="38" pos:column="33"/></condition><then><expr><literal type="string" pos:line="38" pos:column="33">"IN"<pos:position pos:line="38" pos:column="37"/></literal></expr></then><else pos:line="38" pos:column="37">:<expr><literal type="string" pos:line="38" pos:column="38">""<pos:position pos:line="38" pos:column="40"/></literal></expr></else></ternary></expr></argument>,
              <argument><expr><ternary><condition><expr><name pos:line="39" pos:column="15">what<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">&amp;<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="20">CURL_POLL_OUT<pos:position pos:line="39" pos:column="33"/></name></expr>?<pos:position pos:line="39" pos:column="34"/></condition><then><expr><literal type="string" pos:line="39" pos:column="34">"OUT"<pos:position pos:line="39" pos:column="39"/></literal></expr></then><else pos:line="39" pos:column="39">:<expr><literal type="string" pos:line="39" pos:column="40">""<pos:position pos:line="39" pos:column="42"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></else></if>
      <break pos:line="41" pos:column="7">break;<pos:position pos:line="41" pos:column="13"/></break>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="43" pos:column="5">prev<pos:position pos:line="43" pos:column="9"/></name> <operator pos:line="43" pos:column="10">=<pos:position pos:line="43" pos:column="11"/></operator> <name pos:line="43" pos:column="12">m<pos:position pos:line="43" pos:column="13"/></name></expr>;<pos:position pos:line="43" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="44" pos:column="5">m<pos:position pos:line="44" pos:column="6"/></name> <operator pos:line="44" pos:column="7">=<pos:position pos:line="44" pos:column="8"/></operator> <name><name pos:line="44" pos:column="9">m<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">-&gt;<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="12">next<pos:position pos:line="44" pos:column="16"/></name></name></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt> <comment type="block" pos:line="44" pos:column="18">/* move to next node */</comment>
  }<pos:position pos:line="45" pos:column="4"/></block></while>
  <if pos:line="46" pos:column="3">if<condition pos:line="46" pos:column="5">(<expr><operator pos:line="46" pos:column="6">!<pos:position pos:line="46" pos:column="7"/></operator><name pos:line="46" pos:column="7">m<pos:position pos:line="46" pos:column="8"/></name></expr>)<pos:position pos:line="46" pos:column="9"/></condition><then pos:line="46" pos:column="9"> <block pos:line="46" pos:column="10">{
    <if pos:line="47" pos:column="5">if<condition pos:line="47" pos:column="7">(<expr><name pos:line="47" pos:column="8">what<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">==<pos:position pos:line="47" pos:column="15"/></operator> <name pos:line="47" pos:column="16">CURL_POLL_REMOVE<pos:position pos:line="47" pos:column="32"/></name></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33"> <block pos:line="47" pos:column="34">{
      <comment type="block" pos:line="48" pos:column="7">/* this happens a bit too often, libcurl fix perhaps? */</comment>
      <comment type="block" pos:line="49" pos:column="7">/* fprintf(stderr,
         "%s: socket %d asked to be REMOVED but not present!\n",
                 __func__, s); */</comment>
    }<pos:position pos:line="52" pos:column="6"/></block></then>
    <else pos:line="53" pos:column="5">else <block pos:line="53" pos:column="10">{
      <expr_stmt><expr><name pos:line="54" pos:column="7">m<pos:position pos:line="54" pos:column="8"/></name> <operator pos:line="54" pos:column="9">=<pos:position pos:line="54" pos:column="10"/></operator> <call><name pos:line="54" pos:column="11">malloc<pos:position pos:line="54" pos:column="17"/></name><argument_list pos:line="54" pos:column="17">(<argument><expr><sizeof pos:line="54" pos:column="18">sizeof<argument_list pos:line="54" pos:column="24">(<argument><expr pos:line="54" pos:column="25">struct <name pos:line="54" pos:column="32">socketmonitor<pos:position pos:line="54" pos:column="45"/></name></expr></argument>)<pos:position pos:line="54" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt>
      <if pos:line="55" pos:column="7">if<condition pos:line="55" pos:column="9">(<expr><name pos:line="55" pos:column="10">m<pos:position pos:line="55" pos:column="11"/></name></expr>)<pos:position pos:line="55" pos:column="12"/></condition><then pos:line="55" pos:column="12"> <block pos:line="55" pos:column="13">{
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">m<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">next<pos:position pos:line="56" pos:column="16"/></name></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <name><name pos:line="56" pos:column="19">ev<pos:position pos:line="56" pos:column="21"/></name><operator pos:line="56" pos:column="21">-&gt;<pos:position pos:line="56" pos:column="26"/></operator><name pos:line="56" pos:column="23">list<pos:position pos:line="56" pos:column="27"/></name></name></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="57" pos:column="9">m<pos:position pos:line="57" pos:column="10"/></name><operator pos:line="57" pos:column="10">-&gt;<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="12">socket<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">.<pos:position pos:line="57" pos:column="19"/></operator><name pos:line="57" pos:column="19">fd<pos:position pos:line="57" pos:column="21"/></name></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <name pos:line="57" pos:column="24">s<pos:position pos:line="57" pos:column="25"/></name></expr>;<pos:position pos:line="57" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">m<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">socket<pos:position pos:line="58" pos:column="18"/></name><operator pos:line="58" pos:column="18">.<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="19">events<pos:position pos:line="58" pos:column="25"/></name></name> <operator pos:line="58" pos:column="26">=<pos:position pos:line="58" pos:column="27"/></operator> <call><name pos:line="58" pos:column="28">socketcb2poll<pos:position pos:line="58" pos:column="41"/></name><argument_list pos:line="58" pos:column="41">(<argument><expr><name pos:line="58" pos:column="42">what<pos:position pos:line="58" pos:column="46"/></name></expr></argument>)<pos:position pos:line="58" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">m<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">-&gt;<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="12">socket<pos:position pos:line="59" pos:column="18"/></name><operator pos:line="59" pos:column="18">.<pos:position pos:line="59" pos:column="19"/></operator><name pos:line="59" pos:column="19">revents<pos:position pos:line="59" pos:column="26"/></name></name> <operator pos:line="59" pos:column="27">=<pos:position pos:line="59" pos:column="28"/></operator> <literal type="number" pos:line="59" pos:column="29">0<pos:position pos:line="59" pos:column="30"/></literal></expr>;<pos:position pos:line="59" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="60" pos:column="9">ev<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">-&gt;<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="13">list<pos:position pos:line="60" pos:column="17"/></name></name> <operator pos:line="60" pos:column="18">=<pos:position pos:line="60" pos:column="19"/></operator> <name pos:line="60" pos:column="20">m<pos:position pos:line="60" pos:column="21"/></name></expr>;<pos:position pos:line="60" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">infof<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><name pos:line="61" pos:column="15">easy<pos:position pos:line="61" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="21">"socket cb: socket %d ADDED as %s%s\n"<pos:position pos:line="61" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="61">s<pos:position pos:line="61" pos:column="62"/></name></expr></argument>,
              <argument><expr><ternary><condition><expr><name pos:line="62" pos:column="15">what<pos:position pos:line="62" pos:column="19"/></name><operator pos:line="62" pos:column="19">&amp;<pos:position pos:line="62" pos:column="24"/></operator><name pos:line="62" pos:column="20">CURL_POLL_IN<pos:position pos:line="62" pos:column="32"/></name></expr>?<pos:position pos:line="62" pos:column="33"/></condition><then><expr><literal type="string" pos:line="62" pos:column="33">"IN"<pos:position pos:line="62" pos:column="37"/></literal></expr></then><else pos:line="62" pos:column="37">:<expr><literal type="string" pos:line="62" pos:column="38">""<pos:position pos:line="62" pos:column="40"/></literal></expr></else></ternary></expr></argument>,
              <argument><expr><ternary><condition><expr><name pos:line="63" pos:column="15">what<pos:position pos:line="63" pos:column="19"/></name><operator pos:line="63" pos:column="19">&amp;<pos:position pos:line="63" pos:column="24"/></operator><name pos:line="63" pos:column="20">CURL_POLL_OUT<pos:position pos:line="63" pos:column="33"/></name></expr>?<pos:position pos:line="63" pos:column="34"/></condition><then><expr><literal type="string" pos:line="63" pos:column="34">"OUT"<pos:position pos:line="63" pos:column="39"/></literal></expr></then><else pos:line="63" pos:column="39">:<expr><literal type="string" pos:line="63" pos:column="40">""<pos:position pos:line="63" pos:column="42"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="63" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="64" pos:column="8"/></block></then>
      <else pos:line="65" pos:column="7">else
        <block type="pseudo"><return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="66" pos:column="35"/></name></expr>;<pos:position pos:line="66" pos:column="36"/></return></block></else></if>
    }<pos:position pos:line="67" pos:column="6"/></block></else></if>
  }<pos:position pos:line="68" pos:column="4"/></block></then></if>

  <return pos:line="70" pos:column="3">return <expr><literal type="number" pos:line="70" pos:column="10">0<pos:position pos:line="70" pos:column="11"/></literal></expr>;<pos:position pos:line="70" pos:column="12"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
