<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_160_curl-7.35.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fill_buffer<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">URL_FILE<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">file<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">size_t<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">want<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">fd_set<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">fdread<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">fd_set<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">fdwrite<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">fd_set<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">fdexcep<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">timeval<pos:position pos:line="6" pos:column="17"/></name></name></type> <name pos:line="6" pos:column="18">timeout<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">rc<pos:position pos:line="7" pos:column="9"/></name></decl>;<pos:position pos:line="7" pos:column="10"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* only attempt to fill buffer if transactions still running and buffer
   * doesnt exceed required size already
   */</comment>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">(<pos:position pos:line="12" pos:column="7"/></operator><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><name><name pos:line="12" pos:column="8">file<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">still_running<pos:position pos:line="12" pos:column="27"/></name></name><operator pos:line="12" pos:column="27">)<pos:position pos:line="12" pos:column="28"/></operator> <operator pos:line="12" pos:column="29">||<pos:position pos:line="12" pos:column="31"/></operator> <operator pos:line="12" pos:column="32">(<pos:position pos:line="12" pos:column="33"/></operator><name><name pos:line="12" pos:column="33">file<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">-&gt;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="39">buffer_pos<pos:position pos:line="12" pos:column="49"/></name></name> <operator pos:line="12" pos:column="50">&gt;<pos:position pos:line="12" pos:column="54"/></operator> <name pos:line="12" pos:column="52">want<pos:position pos:line="12" pos:column="56"/></name><operator pos:line="12" pos:column="56">)<pos:position pos:line="12" pos:column="57"/></operator></expr>)<pos:position pos:line="12" pos:column="58"/></condition><then pos:line="12" pos:column="58">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><literal type="number" pos:line="13" pos:column="12">0<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></return></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/* attempt to fill buffer */</comment>
  <do pos:line="16" pos:column="3">do <block pos:line="16" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">maxfd<pos:position pos:line="17" pos:column="14"/></name> <init pos:line="17" pos:column="15">= <expr><operator pos:line="17" pos:column="17">-<pos:position pos:line="17" pos:column="18"/></operator><literal type="number" pos:line="17" pos:column="18">1<pos:position pos:line="17" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">long<pos:position pos:line="18" pos:column="9"/></name></type> <name pos:line="18" pos:column="10">curl_timeo<pos:position pos:line="18" pos:column="20"/></name> <init pos:line="18" pos:column="21">= <expr><operator pos:line="18" pos:column="23">-<pos:position pos:line="18" pos:column="24"/></operator><literal type="number" pos:line="18" pos:column="24">1<pos:position pos:line="18" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">FD_ZERO<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><operator pos:line="20" pos:column="13">&amp;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="14">fdread<pos:position pos:line="20" pos:column="20"/></name></expr></argument>)<pos:position pos:line="20" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">FD_ZERO<pos:position pos:line="21" pos:column="12"/></name><argument_list pos:line="21" pos:column="12">(<argument><expr><operator pos:line="21" pos:column="13">&amp;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="14">fdwrite<pos:position pos:line="21" pos:column="21"/></name></expr></argument>)<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">FD_ZERO<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><operator pos:line="22" pos:column="13">&amp;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="14">fdexcep<pos:position pos:line="22" pos:column="21"/></name></expr></argument>)<pos:position pos:line="22" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="24" pos:column="5">/* set a suitable timeout to fail on */</comment>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">timeout<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">.<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">tv_sec<pos:position pos:line="25" pos:column="19"/></name></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <literal type="number" pos:line="25" pos:column="22">60<pos:position pos:line="25" pos:column="24"/></literal></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt> <comment type="block" pos:line="25" pos:column="26">/* 1 minute */</comment>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">timeout<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">.<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">tv_usec<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <literal type="number" pos:line="26" pos:column="23">0<pos:position pos:line="26" pos:column="24"/></literal></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">curl_multi_timeout<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name pos:line="28" pos:column="24">multi_handle<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="38">&amp;<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="39">curl_timeo<pos:position pos:line="28" pos:column="49"/></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><name pos:line="29" pos:column="8">curl_timeo<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">&gt;=<pos:position pos:line="29" pos:column="24"/></operator> <literal type="number" pos:line="29" pos:column="22">0<pos:position pos:line="29" pos:column="23"/></literal></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24"> <block pos:line="29" pos:column="25">{
      <expr_stmt><expr><name><name pos:line="30" pos:column="7">timeout<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">.<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="15">tv_sec<pos:position pos:line="30" pos:column="21"/></name></name> <operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator> <name pos:line="30" pos:column="24">curl_timeo<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">/<pos:position pos:line="30" pos:column="36"/></operator> <literal type="number" pos:line="30" pos:column="37">1000<pos:position pos:line="30" pos:column="41"/></literal></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
      <if pos:line="31" pos:column="7">if<condition pos:line="31" pos:column="9">(<expr><name><name pos:line="31" pos:column="10">timeout<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">.<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">tv_sec<pos:position pos:line="31" pos:column="24"/></name></name> <operator pos:line="31" pos:column="25">&gt;<pos:position pos:line="31" pos:column="29"/></operator> <literal type="number" pos:line="31" pos:column="27">1<pos:position pos:line="31" pos:column="28"/></literal></expr>)<pos:position pos:line="31" pos:column="29"/></condition><then pos:line="31" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="9">timeout<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">.<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">tv_sec<pos:position pos:line="32" pos:column="23"/></name></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="26">1<pos:position pos:line="32" pos:column="27"/></literal></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt></block></then>
      <else pos:line="33" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="9">timeout<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">.<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">tv_usec<pos:position pos:line="34" pos:column="24"/></name></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <operator pos:line="34" pos:column="27">(<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="28">curl_timeo<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">%<pos:position pos:line="34" pos:column="40"/></operator> <literal type="number" pos:line="34" pos:column="41">1000<pos:position pos:line="34" pos:column="45"/></literal><operator pos:line="34" pos:column="45">)<pos:position pos:line="34" pos:column="46"/></operator> <operator pos:line="34" pos:column="47">*<pos:position pos:line="34" pos:column="48"/></operator> <literal type="number" pos:line="34" pos:column="49">1000<pos:position pos:line="34" pos:column="53"/></literal></expr>;<pos:position pos:line="34" pos:column="54"/></expr_stmt></block></else></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="37" pos:column="5">/* get file descriptors from the transfers */</comment>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">curl_multi_fdset<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">multi_handle<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="36">&amp;<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="37">fdread<pos:position pos:line="38" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="45">&amp;<pos:position pos:line="38" pos:column="50"/></operator><name pos:line="38" pos:column="46">fdwrite<pos:position pos:line="38" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="55">&amp;<pos:position pos:line="38" pos:column="60"/></operator><name pos:line="38" pos:column="56">fdexcep<pos:position pos:line="38" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="65">&amp;<pos:position pos:line="38" pos:column="70"/></operator><name pos:line="38" pos:column="66">maxfd<pos:position pos:line="38" pos:column="71"/></name></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></expr_stmt>

    <comment type="block" pos:line="40" pos:column="5">/* In a real-world program you OF COURSE check the return code of the
       function calls.  On success, the value of maxfd is guaranteed to be
       greater or equal than -1.  We call select(maxfd + 1, ...), specially
       in case of (maxfd == -1), we call select(0, ...), which is basically
       equal to sleep. */</comment>

    <expr_stmt><expr><name pos:line="46" pos:column="5">rc<pos:position pos:line="46" pos:column="7"/></name> <operator pos:line="46" pos:column="8">=<pos:position pos:line="46" pos:column="9"/></operator> <call><name pos:line="46" pos:column="10">select<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">maxfd<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">+<pos:position pos:line="46" pos:column="23"/></operator><literal type="number" pos:line="46" pos:column="23">1<pos:position pos:line="46" pos:column="24"/></literal></expr></argument>, <argument><expr><operator pos:line="46" pos:column="26">&amp;<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="27">fdread<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="35">&amp;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="36">fdwrite<pos:position pos:line="46" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="45">&amp;<pos:position pos:line="46" pos:column="50"/></operator><name pos:line="46" pos:column="46">fdexcep<pos:position pos:line="46" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="55">&amp;<pos:position pos:line="46" pos:column="60"/></operator><name pos:line="46" pos:column="56">timeout<pos:position pos:line="46" pos:column="63"/></name></expr></argument>)<pos:position pos:line="46" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="65"/></expr_stmt>

    <switch pos:line="48" pos:column="5">switch<condition pos:line="48" pos:column="11">(<expr><name pos:line="48" pos:column="12">rc<pos:position pos:line="48" pos:column="14"/></name></expr>)<pos:position pos:line="48" pos:column="15"/></condition> <block pos:line="48" pos:column="16">{
    <case pos:line="49" pos:column="5">case <expr><operator pos:line="49" pos:column="10">-<pos:position pos:line="49" pos:column="11"/></operator><literal type="number" pos:line="49" pos:column="11">1<pos:position pos:line="49" pos:column="12"/></literal></expr>:<pos:position pos:line="49" pos:column="13"/></case>
      <comment type="block" pos:line="50" pos:column="7">/* select error */</comment>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>

    <case pos:line="53" pos:column="5">case <expr><literal type="number" pos:line="53" pos:column="10">0<pos:position pos:line="53" pos:column="11"/></literal></expr>:<pos:position pos:line="53" pos:column="12"/></case>
    <default pos:line="54" pos:column="5">default:<pos:position pos:line="54" pos:column="13"/></default>
      <comment type="block" pos:line="55" pos:column="7">/* timeout or readable/writable sockets */</comment>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">curl_multi_perform<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><name pos:line="56" pos:column="26">multi_handle<pos:position pos:line="56" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="40">&amp;<pos:position pos:line="56" pos:column="45"/></operator><name><name pos:line="56" pos:column="41">file<pos:position pos:line="56" pos:column="45"/></name><operator pos:line="56" pos:column="45">-&gt;<pos:position pos:line="56" pos:column="50"/></operator><name pos:line="56" pos:column="47">still_running<pos:position pos:line="56" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="62"/></expr_stmt>
      <break pos:line="57" pos:column="7">break;<pos:position pos:line="57" pos:column="13"/></break>
    }<pos:position pos:line="58" pos:column="6"/></block></switch>
  }<pos:position pos:line="59" pos:column="4"/></block> while<condition pos:line="59" pos:column="10">(<expr><name><name pos:line="59" pos:column="11">file<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">-&gt;<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="17">still_running<pos:position pos:line="59" pos:column="30"/></name></name> <operator pos:line="59" pos:column="31">&amp;&amp;<pos:position pos:line="59" pos:column="41"/></operator> <operator pos:line="59" pos:column="34">(<pos:position pos:line="59" pos:column="35"/></operator><name><name pos:line="59" pos:column="35">file<pos:position pos:line="59" pos:column="39"/></name><operator pos:line="59" pos:column="39">-&gt;<pos:position pos:line="59" pos:column="44"/></operator><name pos:line="59" pos:column="41">buffer_pos<pos:position pos:line="59" pos:column="51"/></name></name> <operator pos:line="59" pos:column="52">&lt;<pos:position pos:line="59" pos:column="56"/></operator> <name pos:line="59" pos:column="54">want<pos:position pos:line="59" pos:column="58"/></name><operator pos:line="59" pos:column="58">)<pos:position pos:line="59" pos:column="59"/></operator></expr>)<pos:position pos:line="59" pos:column="60"/></condition>;<pos:position pos:line="59" pos:column="61"/></do>
  <return pos:line="60" pos:column="3">return <expr><literal type="number" pos:line="60" pos:column="10">1<pos:position pos:line="60" pos:column="11"/></literal></expr>;<pos:position pos:line="60" pos:column="12"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
