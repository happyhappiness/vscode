<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_257_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="15"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">curl_handle<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">res<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">MemoryStruct<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">chunk<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="8" pos:column="3">chunk<pos:position pos:line="8" pos:column="8"/></name><operator pos:line="8" pos:column="8">.<pos:position pos:line="8" pos:column="9"/></operator><name pos:line="8" pos:column="9">memory<pos:position pos:line="8" pos:column="15"/></name></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <call><name pos:line="8" pos:column="18">malloc<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><literal type="number" pos:line="8" pos:column="25">1<pos:position pos:line="8" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="28"/></expr_stmt>  <comment type="block" pos:line="8" pos:column="30">/* will be grown as needed by the realloc above */</comment>
  <expr_stmt><expr><name><name pos:line="9" pos:column="3">chunk<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">.<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">size<pos:position pos:line="9" pos:column="13"/></name></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>    <comment type="block" pos:line="9" pos:column="22">/* no data at this point */</comment>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">curl_global_init<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">CURL_GLOBAL_ALL<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="13" pos:column="3">/* init the curl session */</comment>
  <expr_stmt><expr><name pos:line="14" pos:column="3">curl_handle<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <call><name pos:line="14" pos:column="17">curl_easy_init<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">()<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* specify URL to get */</comment>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">curl_easy_setopt<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">curl_handle<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">CURLOPT_URL<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="46">"http://www.example.com/"<pos:position pos:line="17" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="73"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* send all data to this function  */</comment>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">curl_easy_setopt<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">curl_handle<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="33">CURLOPT_WRITEFUNCTION<pos:position pos:line="20" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="56">WriteMemoryCallback<pos:position pos:line="20" pos:column="75"/></name></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* we pass our 'chunk' struct to the callback function */</comment>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">curl_easy_setopt<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">curl_handle<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="33">CURLOPT_WRITEDATA<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="52">(<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="53">void<pos:position pos:line="23" pos:column="57"/></name> <operator pos:line="23" pos:column="58">*<pos:position pos:line="23" pos:column="59"/></operator><operator pos:line="23" pos:column="59">)<pos:position pos:line="23" pos:column="60"/></operator><operator pos:line="23" pos:column="60">&amp;<pos:position pos:line="23" pos:column="65"/></operator><name pos:line="23" pos:column="61">chunk<pos:position pos:line="23" pos:column="66"/></name></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt>

  <comment type="block" pos:line="25" pos:column="3">/* some servers don't like requests that are made without a user-agent
     field, so we provide one */</comment>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">curl_easy_setopt<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">curl_handle<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="33">CURLOPT_USERAGENT<pos:position pos:line="27" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="52">"libcurl-agent/1.0"<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="73"/></expr_stmt>

  <comment type="block" pos:line="29" pos:column="3">/* get it! */</comment>
  <expr_stmt><expr><name pos:line="30" pos:column="3">res<pos:position pos:line="30" pos:column="6"/></name> <operator pos:line="30" pos:column="7">=<pos:position pos:line="30" pos:column="8"/></operator> <call><name pos:line="30" pos:column="9">curl_easy_perform<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">curl_handle<pos:position pos:line="30" pos:column="38"/></name></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="32" pos:column="3">/* check for errors */</comment>
  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><name pos:line="33" pos:column="6">res<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">!=<pos:position pos:line="33" pos:column="12"/></operator> <name pos:line="33" pos:column="13">CURLE_OK<pos:position pos:line="33" pos:column="21"/></name></expr>)<pos:position pos:line="33" pos:column="22"/></condition><then pos:line="33" pos:column="22"> <block pos:line="33" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">fprintf<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">stderr<pos:position pos:line="34" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="21">"curl_easy_perform() failed: %s\n"<pos:position pos:line="34" pos:column="55"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="35" pos:column="13">curl_easy_strerror<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">res<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="36" pos:column="4"/></block></then>
  <else pos:line="37" pos:column="3">else <block pos:line="37" pos:column="8">{
    <comment type="block" pos:line="38" pos:column="5">/*
     * Now, our chunk.memory points to a memory block that is chunk.size
     * bytes big and contains the remote file.
     *
     * Do something nice with it!
     */</comment>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">printf<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><literal type="string" pos:line="45" pos:column="12">"%lu bytes retrieved\n"<pos:position pos:line="45" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="37">(<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="38">long<pos:position pos:line="45" pos:column="42"/></name><operator pos:line="45" pos:column="42">)<pos:position pos:line="45" pos:column="43"/></operator><name><name pos:line="45" pos:column="43">chunk<pos:position pos:line="45" pos:column="48"/></name><operator pos:line="45" pos:column="48">.<pos:position pos:line="45" pos:column="49"/></operator><name pos:line="45" pos:column="49">size<pos:position pos:line="45" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="55"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="48" pos:column="3">/* cleanup curl stuff */</comment>
  <expr_stmt><expr><call><name pos:line="49" pos:column="3">curl_easy_cleanup<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">curl_handle<pos:position pos:line="49" pos:column="32"/></name></expr></argument>)<pos:position pos:line="49" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="51" pos:column="3">free<pos:position pos:line="51" pos:column="7"/></name><argument_list pos:line="51" pos:column="7">(<argument><expr><name><name pos:line="51" pos:column="8">chunk<pos:position pos:line="51" pos:column="13"/></name><operator pos:line="51" pos:column="13">.<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">memory<pos:position pos:line="51" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="53" pos:column="3">/* we're done with libcurl, so clean it up */</comment>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">curl_global_cleanup<pos:position pos:line="54" pos:column="22"/></name><argument_list pos:line="54" pos:column="22">()<pos:position pos:line="54" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="25"/></expr_stmt>

  <return pos:line="56" pos:column="3">return <expr><literal type="number" pos:line="56" pos:column="10">0<pos:position pos:line="56" pos:column="11"/></literal></expr>;<pos:position pos:line="56" pos:column="12"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
