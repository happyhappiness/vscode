<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_203_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">verifyconnect<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">curl_socket_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">sockfd<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">int<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">error<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">bool<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">rc<pos:position pos:line="3" pos:column="10"/></name> <init pos:line="3" pos:column="11">= <expr><name pos:line="3" pos:column="13">TRUE<pos:position pos:line="3" pos:column="17"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">SO_ERROR<pos:position pos:line="4" pos:column="16"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">err<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><literal type="number" pos:line="5" pos:column="13">0<pos:position pos:line="5" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">socklen_t<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">errSize<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><sizeof pos:line="6" pos:column="23">sizeof<argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">err<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">WIN32<pos:position pos:line="8" pos:column="13"/></name></cpp:ifdef>
  <comment type="block" pos:line="9" pos:column="3">/*
   * In October 2003 we effectively nullified this function on Windows due to
   * problems with it using all CPU in multi-threaded cases.
   *
   * In May 2004, we bring it back to offer more info back on connect failures.
   * Gisle Vanem could reproduce the former problems with this function, but
   * could avoid them by adding this SleepEx() call below:
   *
   *    "I don't have Rational Quantify, but the hint from his post was
   *    ntdll::NtRemoveIoCompletion(). So I'd assume the SleepEx (or maybe
   *    just Sleep(0) would be enough?) would release whatever
   *    mutex/critical-section the ntdll call is waiting on.
   *
   *    Someone got to verify this on Win-NT 4.0, 2000."
   */</comment>

<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">_WIN32_WCE<pos:position pos:line="25" pos:column="18"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">Sleep<pos:position pos:line="26" pos:column="8"/></name><argument_list pos:line="26" pos:column="8">(<argument><expr><literal type="number" pos:line="26" pos:column="9">0<pos:position pos:line="26" pos:column="10"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="12"/></expr_stmt>
<cpp:else pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">else<pos:position pos:line="27" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">SleepEx<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><literal type="number" pos:line="28" pos:column="11">0<pos:position pos:line="28" pos:column="12"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="14">FALSE<pos:position pos:line="28" pos:column="19"/></name></expr></argument>)<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">( <expr><operator pos:line="33" pos:column="7">-<pos:position pos:line="33" pos:column="8"/></operator><literal type="number" pos:line="33" pos:column="8">1<pos:position pos:line="33" pos:column="9"/></literal> <operator pos:line="33" pos:column="10">==<pos:position pos:line="33" pos:column="12"/></operator> <call><name pos:line="33" pos:column="13">getsockopt<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">sockfd<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="32">SOL_SOCKET<pos:position pos:line="33" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="44">SO_ERROR<pos:position pos:line="33" pos:column="52"/></name></expr></argument>,
                       <argument><expr><operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="25">void<pos:position pos:line="34" pos:column="29"/></name> <operator pos:line="34" pos:column="30">*<pos:position pos:line="34" pos:column="31"/></operator><operator pos:line="34" pos:column="31">)<pos:position pos:line="34" pos:column="32"/></operator><operator pos:line="34" pos:column="32">&amp;<pos:position pos:line="34" pos:column="37"/></operator><name pos:line="34" pos:column="33">err<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="38">&amp;<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="39">errSize<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="48"/></condition><then pos:line="34" pos:column="48">
    <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="5">err<pos:position pos:line="35" pos:column="8"/></name> <operator pos:line="35" pos:column="9">=<pos:position pos:line="35" pos:column="10"/></operator> <call><name pos:line="35" pos:column="11">Curl_ourerrno<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">()<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">_WIN32_WCE<pos:position pos:line="37" pos:column="18"/></name></cpp:ifdef>
  <comment type="block" pos:line="38" pos:column="3">/* Always returns this error, bug in CE? */</comment>
  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name pos:line="39" pos:column="6">WSAENOPROTOOPT<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">==<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">err<pos:position pos:line="39" pos:column="25"/></name></expr>)<pos:position pos:line="39" pos:column="26"/></condition><then pos:line="39" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="5">err<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator><literal type="number" pos:line="40" pos:column="9">0<pos:position pos:line="40" pos:column="10"/></literal></expr>;<pos:position pos:line="40" pos:column="11"/></expr_stmt></block></then></if>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><operator pos:line="43" pos:column="7">(<pos:position pos:line="43" pos:column="8"/></operator><literal type="number" pos:line="43" pos:column="8">0<pos:position pos:line="43" pos:column="9"/></literal> <operator pos:line="43" pos:column="10">==<pos:position pos:line="43" pos:column="12"/></operator> <name pos:line="43" pos:column="13">err<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">)<pos:position pos:line="43" pos:column="17"/></operator> <operator pos:line="43" pos:column="18">||<pos:position pos:line="43" pos:column="20"/></operator> <operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">EISCONN<pos:position pos:line="43" pos:column="29"/></name> <operator pos:line="43" pos:column="30">==<pos:position pos:line="43" pos:column="32"/></operator> <name pos:line="43" pos:column="33">err<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">)<pos:position pos:line="43" pos:column="37"/></operator></expr>)<pos:position pos:line="43" pos:column="38"/></condition><then pos:line="43" pos:column="38">
    <comment type="block" pos:line="44" pos:column="5">/* we are connected, awesome! */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="5">rc<pos:position pos:line="45" pos:column="7"/></name> <operator pos:line="45" pos:column="8">=<pos:position pos:line="45" pos:column="9"/></operator> <name pos:line="45" pos:column="10">TRUE<pos:position pos:line="45" pos:column="14"/></name></expr>;<pos:position pos:line="45" pos:column="15"/></expr_stmt></block></then>
  <else pos:line="46" pos:column="3">else
    <comment type="block" pos:line="47" pos:column="5">/* This wasn't a successful connect */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="5">rc<pos:position pos:line="48" pos:column="7"/></name> <operator pos:line="48" pos:column="8">=<pos:position pos:line="48" pos:column="9"/></operator> <name pos:line="48" pos:column="10">FALSE<pos:position pos:line="48" pos:column="15"/></name></expr>;<pos:position pos:line="48" pos:column="16"/></expr_stmt></block></else></if>
  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><name pos:line="49" pos:column="7">error<pos:position pos:line="49" pos:column="12"/></name></expr>)<pos:position pos:line="49" pos:column="13"/></condition><then pos:line="49" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="50" pos:column="5">*<pos:position pos:line="50" pos:column="6"/></operator><name pos:line="50" pos:column="6">error<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <name pos:line="50" pos:column="14">err<pos:position pos:line="50" pos:column="17"/></name></expr>;<pos:position pos:line="50" pos:column="18"/></expr_stmt></block></then></if>
<cpp:else pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">else<pos:position pos:line="51" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="52" pos:column="3">(<pos:position pos:line="52" pos:column="4"/></operator><name pos:line="52" pos:column="4">void<pos:position pos:line="52" pos:column="8"/></name><operator pos:line="52" pos:column="8">)<pos:position pos:line="52" pos:column="9"/></operator><name pos:line="52" pos:column="9">sockfd<pos:position pos:line="52" pos:column="15"/></name></expr>;<pos:position pos:line="52" pos:column="16"/></expr_stmt>
  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><name pos:line="53" pos:column="7">error<pos:position pos:line="53" pos:column="12"/></name></expr>)<pos:position pos:line="53" pos:column="13"/></condition><then pos:line="53" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="54" pos:column="5">*<pos:position pos:line="54" pos:column="6"/></operator><name pos:line="54" pos:column="6">error<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">=<pos:position pos:line="54" pos:column="13"/></operator> <call><name pos:line="54" pos:column="14">Curl_ourerrno<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">()<pos:position pos:line="54" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="30"/></expr_stmt></block></then></if>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>
  <return pos:line="56" pos:column="3">return <expr><name pos:line="56" pos:column="10">rc<pos:position pos:line="56" pos:column="12"/></name></expr>;<pos:position pos:line="56" pos:column="13"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
