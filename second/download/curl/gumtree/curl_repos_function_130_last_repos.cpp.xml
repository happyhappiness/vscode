<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_130_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="15"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">curl_handle<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">res<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">XML_Parser<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">parser<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">ParserStruct<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">state<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Initialize the state structure for parsing. */</comment>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memset<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><operator pos:line="9" pos:column="10">&amp;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="11">state<pos:position pos:line="9" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="21">sizeof<argument_list pos:line="9" pos:column="27">(<argument><expr pos:line="9" pos:column="28">struct <name pos:line="9" pos:column="35">ParserStruct<pos:position pos:line="9" pos:column="47"/></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">state<pos:position pos:line="10" pos:column="8"/></name><operator pos:line="10" pos:column="8">.<pos:position pos:line="10" pos:column="9"/></operator><name pos:line="10" pos:column="9">ok<pos:position pos:line="10" pos:column="11"/></name></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal></expr>;<pos:position pos:line="10" pos:column="16"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* Initialize a namespace-aware parser. */</comment>
  <expr_stmt><expr><name pos:line="13" pos:column="3">parser<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <call><name pos:line="13" pos:column="12">XML_ParserCreateNS<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">NULL<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="37">'\0'<pos:position pos:line="13" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">XML_SetUserData<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">parser<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="27">&amp;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="28">state<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">XML_SetElementHandler<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">parser<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">startElement<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="47">endElement<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">XML_SetCharacterDataHandler<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">parser<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">characterDataHandler<pos:position pos:line="16" pos:column="59"/></name></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="61"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* Initialize a libcurl handle. */</comment>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">curl_global_init<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">CURL_GLOBAL_ALL<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">^<pos:position pos:line="19" pos:column="37"/></operator> <name pos:line="19" pos:column="38">CURL_GLOBAL_SSL<pos:position pos:line="19" pos:column="53"/></name></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">curl_handle<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <call><name pos:line="20" pos:column="17">curl_easy_init<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">()<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">curl_easy_setopt<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">curl_handle<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">CURLOPT_URL<pos:position pos:line="21" pos:column="44"/></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="22" pos:column="20">"http://www.w3schools.com/xml/simple.xml"<pos:position pos:line="22" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">curl_easy_setopt<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">curl_handle<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="33">CURLOPT_WRITEFUNCTION<pos:position pos:line="23" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="56">parseStreamCallback<pos:position pos:line="23" pos:column="75"/></name></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">curl_easy_setopt<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name pos:line="24" pos:column="20">curl_handle<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="33">CURLOPT_WRITEDATA<pos:position pos:line="24" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="52">(<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">void<pos:position pos:line="24" pos:column="57"/></name> <operator pos:line="24" pos:column="58">*<pos:position pos:line="24" pos:column="59"/></operator><operator pos:line="24" pos:column="59">)<pos:position pos:line="24" pos:column="60"/></operator><name pos:line="24" pos:column="60">parser<pos:position pos:line="24" pos:column="66"/></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="68"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">printf<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><literal type="string" pos:line="26" pos:column="10">"Depth   Characters   Closing Tag\n"<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* Perform the request and any follow-up parsing. */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">res<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <call><name pos:line="29" pos:column="9">curl_easy_perform<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">curl_handle<pos:position pos:line="29" pos:column="38"/></name></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name pos:line="30" pos:column="6">res<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">!=<pos:position pos:line="30" pos:column="12"/></operator> <name pos:line="30" pos:column="13">CURLE_OK<pos:position pos:line="30" pos:column="21"/></name></expr>)<pos:position pos:line="30" pos:column="22"/></condition><then pos:line="30" pos:column="22"> <block pos:line="30" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">fprintf<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">stderr<pos:position pos:line="31" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="21">"curl_easy_perform() failed: %s\n"<pos:position pos:line="31" pos:column="55"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="32" pos:column="13">curl_easy_strerror<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name pos:line="32" pos:column="32">res<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></then>
  <elseif pos:line="34" pos:column="3">else <if pos:line="34" pos:column="8">if<condition pos:line="34" pos:column="10">(<expr><name><name pos:line="34" pos:column="11">state<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">.<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">ok<pos:position pos:line="34" pos:column="19"/></name></name></expr>)<pos:position pos:line="34" pos:column="20"/></condition><then pos:line="34" pos:column="20"> <block pos:line="34" pos:column="21">{
    <comment type="block" pos:line="35" pos:column="5">/* Expat requires one final call to finalize parsing. */</comment>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><call><name pos:line="36" pos:column="8">XML_Parse<pos:position pos:line="36" pos:column="17"/></name><argument_list pos:line="36" pos:column="17">(<argument><expr><name pos:line="36" pos:column="18">parser<pos:position pos:line="36" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="26">NULL<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="32">0<pos:position pos:line="36" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="35">1<pos:position pos:line="36" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call> <operator pos:line="36" pos:column="38">==<pos:position pos:line="36" pos:column="40"/></operator> <literal type="number" pos:line="36" pos:column="41">0<pos:position pos:line="36" pos:column="42"/></literal></expr>)<pos:position pos:line="36" pos:column="43"/></condition><then pos:line="36" pos:column="43"> <block pos:line="36" pos:column="44">{
      <decl_stmt><decl><type><name pos:line="37" pos:column="7">int<pos:position pos:line="37" pos:column="10"/></name></type> <name pos:line="37" pos:column="11">error_code<pos:position pos:line="37" pos:column="21"/></name> <init pos:line="37" pos:column="22">= <expr><call><name pos:line="37" pos:column="24">XML_GetErrorCode<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">parser<pos:position pos:line="37" pos:column="47"/></name></expr></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="49"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="38" pos:column="7">fprintf<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><name pos:line="38" pos:column="15">stderr<pos:position pos:line="38" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="23">"Finalizing parsing failed with error code %d (%s).\n"<pos:position pos:line="38" pos:column="77"/></literal></expr></argument>,
              <argument><expr><name pos:line="39" pos:column="15">error_code<pos:position pos:line="39" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="27">XML_ErrorString<pos:position pos:line="39" pos:column="42"/></name><argument_list pos:line="39" pos:column="42">(<argument><expr><name pos:line="39" pos:column="43">error_code<pos:position pos:line="39" pos:column="53"/></name></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then>
    <else pos:line="41" pos:column="5">else <block pos:line="41" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">printf<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><literal type="string" pos:line="42" pos:column="14">"                     --------------\n"<pos:position pos:line="42" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">printf<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">(<argument><expr><literal type="string" pos:line="43" pos:column="14">"                     %lu tags total\n"<pos:position pos:line="43" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="55">state<pos:position pos:line="43" pos:column="60"/></name><operator pos:line="43" pos:column="60">.<pos:position pos:line="43" pos:column="61"/></operator><name pos:line="43" pos:column="61">tags<pos:position pos:line="43" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="47" pos:column="3">/* Clean up. */</comment>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">free<pos:position pos:line="48" pos:column="7"/></name><argument_list pos:line="48" pos:column="7">(<argument><expr><name><name pos:line="48" pos:column="8">state<pos:position pos:line="48" pos:column="13"/></name><operator pos:line="48" pos:column="13">.<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">characters<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">.<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">memory<pos:position pos:line="48" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="49" pos:column="3">XML_ParserFree<pos:position pos:line="49" pos:column="17"/></name><argument_list pos:line="49" pos:column="17">(<argument><expr><name pos:line="49" pos:column="18">parser<pos:position pos:line="49" pos:column="24"/></name></expr></argument>)<pos:position pos:line="49" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="50" pos:column="3">curl_easy_cleanup<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name pos:line="50" pos:column="21">curl_handle<pos:position pos:line="50" pos:column="32"/></name></expr></argument>)<pos:position pos:line="50" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">curl_global_cleanup<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">()<pos:position pos:line="51" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="25"/></expr_stmt>

  <return pos:line="53" pos:column="3">return <expr><literal type="number" pos:line="53" pos:column="10">0<pos:position pos:line="53" pos:column="11"/></literal></expr>;<pos:position pos:line="53" pos:column="12"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
