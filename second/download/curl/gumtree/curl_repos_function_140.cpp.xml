<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_140.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">Cookie<pos:position pos:line="1" pos:column="14"/></name></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">cookie_add<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">CookieInfo<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">c<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">bool<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">httpheader<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <comment type="block" pos:line="2" pos:column="44">/* TRUE if HTTP header-style line */</comment>
                          <parameter><decl><type><name pos:line="3" pos:column="27">char<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">lineptr<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="41"/></parameter_list> <comment type="block" pos:line="3" pos:column="42">/* first non-space of the line */</comment>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Cookie<pos:position pos:line="5" pos:column="16"/></name></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">clist<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">what<pos:position pos:line="6" pos:column="12"/></name><index pos:line="6" pos:column="12">[<expr><name pos:line="6" pos:column="13">MAX_COOKIE_LINE<pos:position pos:line="6" pos:column="28"/></name></expr>]<pos:position pos:line="6" pos:column="29"/></index></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">name<pos:position pos:line="7" pos:column="12"/></name><index pos:line="7" pos:column="12">[<expr><name pos:line="7" pos:column="13">MAX_NAME<pos:position pos:line="7" pos:column="21"/></name></expr>]<pos:position pos:line="7" pos:column="22"/></index></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">ptr<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">semiptr<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">Cookie<pos:position pos:line="10" pos:column="16"/></name></name> <modifier pos:line="10" pos:column="17">*<pos:position pos:line="10" pos:column="18"/></modifier></type><name pos:line="10" pos:column="18">co<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">time_t<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">now<pos:position pos:line="11" pos:column="13"/></name> <init pos:line="11" pos:column="14">= <expr><call><name pos:line="11" pos:column="16">time<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">NULL<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">bool<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">replace_old<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><name pos:line="12" pos:column="22">FALSE<pos:position pos:line="12" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* First, alloc and init a new struct for it */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">co<pos:position pos:line="15" pos:column="5"/></name> <operator pos:line="15" pos:column="6">=<pos:position pos:line="15" pos:column="7"/></operator> <operator pos:line="15" pos:column="8">(<pos:position pos:line="15" pos:column="9"/></operator>struct <name pos:line="15" pos:column="16">Cookie<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">*<pos:position pos:line="15" pos:column="24"/></operator><operator pos:line="15" pos:column="24">)<pos:position pos:line="15" pos:column="25"/></operator><call><name pos:line="15" pos:column="25">malloc<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><sizeof pos:line="15" pos:column="32">sizeof<argument_list pos:line="15" pos:column="38">(<argument><expr pos:line="15" pos:column="39">struct <name pos:line="15" pos:column="46">Cookie<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">!<pos:position pos:line="16" pos:column="7"/></operator><name pos:line="16" pos:column="7">co<pos:position pos:line="16" pos:column="9"/></name></expr>)<pos:position pos:line="16" pos:column="10"/></condition><then pos:line="16" pos:column="10">
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">NULL<pos:position pos:line="17" pos:column="16"/></name></expr>;<pos:position pos:line="17" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="17" pos:column="18">/* bail out if we're this low on memory */</comment>

  <comment type="block" pos:line="19" pos:column="3">/* clear the whole struct first */</comment>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">memset<pos:position pos:line="20" pos:column="9"/></name><argument_list pos:line="20" pos:column="9">(<argument><expr><name pos:line="20" pos:column="10">co<pos:position pos:line="20" pos:column="12"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="14">0<pos:position pos:line="20" pos:column="15"/></literal></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="17">sizeof<argument_list pos:line="20" pos:column="23">(<argument><expr pos:line="20" pos:column="24">struct <name pos:line="20" pos:column="31">Cookie<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
	    
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">httpheader<pos:position pos:line="22" pos:column="16"/></name></expr>)<pos:position pos:line="22" pos:column="17"/></condition><then pos:line="22" pos:column="17"> <block pos:line="22" pos:column="18">{
    <comment type="block" pos:line="23" pos:column="5">/* This line was read off a HTTP-header */</comment>

    <expr_stmt><expr><name pos:line="25" pos:column="5">semiptr<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator><call><name pos:line="25" pos:column="13">strchr<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">lineptr<pos:position pos:line="25" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="29">';'<pos:position pos:line="25" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt> <comment type="block" pos:line="25" pos:column="35">/* first, find a semicolon */</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">ptr<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <name pos:line="26" pos:column="11">lineptr<pos:position pos:line="26" pos:column="18"/></name></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
    <while pos:line="27" pos:column="5">while<condition pos:line="27" pos:column="10">(<expr><name pos:line="27" pos:column="11">semiptr<pos:position pos:line="27" pos:column="18"/></name></expr>)<pos:position pos:line="27" pos:column="19"/></condition> <block pos:line="27" pos:column="20">{
      <expr_stmt><expr><operator pos:line="28" pos:column="7">*<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">semiptr<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator><literal type="char" pos:line="28" pos:column="16">'\0'<pos:position pos:line="28" pos:column="20"/></literal></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt> <comment type="block" pos:line="28" pos:column="22">/* zero terminate for a while */</comment>
      <comment type="block" pos:line="29" pos:column="7">/* we have a &lt;what&gt;=&lt;this&gt; pair or a 'secure' word here */</comment>
      <if pos:line="30" pos:column="7">if<condition pos:line="30" pos:column="9">(<expr><call><name pos:line="30" pos:column="10">strchr<pos:position pos:line="30" pos:column="16"/></name><argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">ptr<pos:position pos:line="30" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="22">'='<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="27"/></condition><then pos:line="30" pos:column="27"> <block pos:line="30" pos:column="28">{
        <expr_stmt><expr><name><name pos:line="31" pos:column="9">name<pos:position pos:line="31" pos:column="13"/></name><index pos:line="31" pos:column="13">[<expr><literal type="number" pos:line="31" pos:column="14">0<pos:position pos:line="31" pos:column="15"/></literal></expr>]<pos:position pos:line="31" pos:column="16"/></index></name><operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator><name><name pos:line="31" pos:column="17">what<pos:position pos:line="31" pos:column="21"/></name><index pos:line="31" pos:column="21">[<expr><literal type="number" pos:line="31" pos:column="22">0<pos:position pos:line="31" pos:column="23"/></literal></expr>]<pos:position pos:line="31" pos:column="24"/></index></name><operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator><literal type="number" pos:line="31" pos:column="25">0<pos:position pos:line="31" pos:column="26"/></literal></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt> <comment type="block" pos:line="31" pos:column="28">/* init the buffers */</comment>
        <if pos:line="32" pos:column="9">if<condition pos:line="32" pos:column="11">(<expr><literal type="number" pos:line="32" pos:column="12">1<pos:position pos:line="32" pos:column="13"/></literal> <operator pos:line="32" pos:column="14">&lt;=<pos:position pos:line="32" pos:column="19"/></operator> <call><name pos:line="32" pos:column="17">sscanf<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">ptr<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="29">"%"<pos:position pos:line="32" pos:column="32"/></literal> <name pos:line="32" pos:column="33">MAX_NAME_TXT<pos:position pos:line="32" pos:column="45"/></name> <literal type="string" pos:line="32" pos:column="46">"[^=]=%"<pos:position pos:line="32" pos:column="54"/></literal>
                       <name pos:line="33" pos:column="24">MAX_COOKIE_LINE_TXT<pos:position pos:line="33" pos:column="43"/></name> <literal type="string" pos:line="33" pos:column="44">"[^\r\n]"<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>,
                       <argument><expr><name pos:line="34" pos:column="24">name<pos:position pos:line="34" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="30">what<pos:position pos:line="34" pos:column="34"/></name></expr></argument>)<pos:position pos:line="34" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36"> <block pos:line="34" pos:column="37">{
          <comment type="block" pos:line="35" pos:column="11">/* this is a legal &lt;what&gt;=&lt;this&gt; pair */</comment>
          <if pos:line="36" pos:column="11">if<condition pos:line="36" pos:column="13">(<expr><call><name pos:line="36" pos:column="14">strequal<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><literal type="string" pos:line="36" pos:column="23">"path"<pos:position pos:line="36" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="31">name<pos:position pos:line="36" pos:column="35"/></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="37"/></condition><then pos:line="36" pos:column="37"> <block pos:line="36" pos:column="38">{
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">co<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">-&gt;<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="17">path<pos:position pos:line="37" pos:column="21"/></name></name><operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator><call><name pos:line="37" pos:column="22">strdup<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">what<pos:position pos:line="37" pos:column="33"/></name></expr></argument>)<pos:position pos:line="37" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
          }<pos:position pos:line="38" pos:column="12"/></block></then>
          <elseif pos:line="39" pos:column="11">else <if pos:line="39" pos:column="16">if<condition pos:line="39" pos:column="18">(<expr><call><name pos:line="39" pos:column="19">strequal<pos:position pos:line="39" pos:column="27"/></name><argument_list pos:line="39" pos:column="27">(<argument><expr><literal type="string" pos:line="39" pos:column="28">"domain"<pos:position pos:line="39" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="38">name<pos:position pos:line="39" pos:column="42"/></name></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44"> <block pos:line="39" pos:column="45">{
            <expr_stmt><expr><name><name pos:line="40" pos:column="13">co<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">domain<pos:position pos:line="40" pos:column="23"/></name></name><operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator><call><name pos:line="40" pos:column="24">strdup<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">what<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
          }<pos:position pos:line="41" pos:column="12"/></block></then></if></elseif>
          <elseif pos:line="42" pos:column="11">else <if pos:line="42" pos:column="16">if<condition pos:line="42" pos:column="18">(<expr><call><name pos:line="42" pos:column="19">strequal<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><literal type="string" pos:line="42" pos:column="28">"version"<pos:position pos:line="42" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="39">name<pos:position pos:line="42" pos:column="43"/></name></expr></argument>)<pos:position pos:line="42" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="45"/></condition><then pos:line="42" pos:column="45"> <block pos:line="42" pos:column="46">{
            <expr_stmt><expr><name><name pos:line="43" pos:column="13">co<pos:position pos:line="43" pos:column="15"/></name><operator pos:line="43" pos:column="15">-&gt;<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="17">version<pos:position pos:line="43" pos:column="24"/></name></name><operator pos:line="43" pos:column="24">=<pos:position pos:line="43" pos:column="25"/></operator><call><name pos:line="43" pos:column="25">strdup<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">what<pos:position pos:line="43" pos:column="36"/></name></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>
          }<pos:position pos:line="44" pos:column="12"/></block></then></if></elseif>
          <elseif pos:line="45" pos:column="11">else <if pos:line="45" pos:column="16">if<condition pos:line="45" pos:column="18">(<expr><call><name pos:line="45" pos:column="19">strequal<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><literal type="string" pos:line="45" pos:column="28">"max-age"<pos:position pos:line="45" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="39">name<pos:position pos:line="45" pos:column="43"/></name></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="45"/></condition><then pos:line="45" pos:column="45"> <block pos:line="45" pos:column="46">{
            <comment type="block" pos:line="46" pos:column="13">/* Defined in RFC2109:

               Optional.  The Max-Age attribute defines the lifetime of the
               cookie, in seconds.  The delta-seconds value is a decimal non-
               negative integer.  After delta-seconds seconds elapse, the
               client should discard the cookie.  A value of zero means the
               cookie should be discarded immediately.

             */</comment>
            <expr_stmt><expr><name><name pos:line="55" pos:column="13">co<pos:position pos:line="55" pos:column="15"/></name><operator pos:line="55" pos:column="15">-&gt;<pos:position pos:line="55" pos:column="20"/></operator><name pos:line="55" pos:column="17">maxage<pos:position pos:line="55" pos:column="23"/></name></name> <operator pos:line="55" pos:column="24">=<pos:position pos:line="55" pos:column="25"/></operator> <call><name pos:line="55" pos:column="26">strdup<pos:position pos:line="55" pos:column="32"/></name><argument_list pos:line="55" pos:column="32">(<argument><expr><name pos:line="55" pos:column="33">what<pos:position pos:line="55" pos:column="37"/></name></expr></argument>)<pos:position pos:line="55" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="56" pos:column="13">co<pos:position pos:line="56" pos:column="15"/></name><operator pos:line="56" pos:column="15">-&gt;<pos:position pos:line="56" pos:column="20"/></operator><name pos:line="56" pos:column="17">expires<pos:position pos:line="56" pos:column="24"/></name></name> <operator pos:line="56" pos:column="25">=<pos:position pos:line="56" pos:column="26"/></operator>
              <call><name pos:line="57" pos:column="15">atoi<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><ternary><condition><expr><operator pos:line="57" pos:column="20">(<pos:position pos:line="57" pos:column="21"/></operator><operator pos:line="57" pos:column="21">*<pos:position pos:line="57" pos:column="22"/></operator><name><name pos:line="57" pos:column="22">co<pos:position pos:line="57" pos:column="24"/></name><operator pos:line="57" pos:column="24">-&gt;<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="26">maxage<pos:position pos:line="57" pos:column="32"/></name></name><operator pos:line="57" pos:column="32">==<pos:position pos:line="57" pos:column="34"/></operator><literal type="char" pos:line="57" pos:column="34">'\"'<pos:position pos:line="57" pos:column="38"/></literal><operator pos:line="57" pos:column="38">)<pos:position pos:line="57" pos:column="39"/></operator></expr>?<pos:position pos:line="57" pos:column="40"/></condition><then><expr><operator pos:line="57" pos:column="40">&amp;<pos:position pos:line="57" pos:column="45"/></operator><name><name pos:line="57" pos:column="41">co<pos:position pos:line="57" pos:column="43"/></name><operator pos:line="57" pos:column="43">-&gt;<pos:position pos:line="57" pos:column="48"/></operator><name pos:line="57" pos:column="45">maxage<pos:position pos:line="57" pos:column="51"/></name><index pos:line="57" pos:column="51">[<expr><literal type="number" pos:line="57" pos:column="52">1<pos:position pos:line="57" pos:column="53"/></literal></expr>]<pos:position pos:line="57" pos:column="54"/></index></name></expr></then><else pos:line="57" pos:column="54">:<expr><operator pos:line="57" pos:column="55">&amp;<pos:position pos:line="57" pos:column="60"/></operator><name><name pos:line="57" pos:column="56">co<pos:position pos:line="57" pos:column="58"/></name><operator pos:line="57" pos:column="58">-&gt;<pos:position pos:line="57" pos:column="63"/></operator><name pos:line="57" pos:column="60">maxage<pos:position pos:line="57" pos:column="66"/></name><index pos:line="57" pos:column="66">[<expr><literal type="number" pos:line="57" pos:column="67">0<pos:position pos:line="57" pos:column="68"/></literal></expr>]<pos:position pos:line="57" pos:column="69"/></index></name></expr></else></ternary></expr></argument>)<pos:position pos:line="57" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="71"/></expr_stmt>
          }<pos:position pos:line="58" pos:column="12"/></block></then></if></elseif>
          <elseif pos:line="59" pos:column="11">else <if pos:line="59" pos:column="16">if<condition pos:line="59" pos:column="18">(<expr><call><name pos:line="59" pos:column="19">strequal<pos:position pos:line="59" pos:column="27"/></name><argument_list pos:line="59" pos:column="27">(<argument><expr><literal type="string" pos:line="59" pos:column="28">"expires"<pos:position pos:line="59" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="39">name<pos:position pos:line="59" pos:column="43"/></name></expr></argument>)<pos:position pos:line="59" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="45"/></condition><then pos:line="59" pos:column="45"> <block pos:line="59" pos:column="46">{
            <expr_stmt><expr><name><name pos:line="60" pos:column="13">co<pos:position pos:line="60" pos:column="15"/></name><operator pos:line="60" pos:column="15">-&gt;<pos:position pos:line="60" pos:column="20"/></operator><name pos:line="60" pos:column="17">expirestr<pos:position pos:line="60" pos:column="26"/></name></name><operator pos:line="60" pos:column="26">=<pos:position pos:line="60" pos:column="27"/></operator><call><name pos:line="60" pos:column="27">strdup<pos:position pos:line="60" pos:column="33"/></name><argument_list pos:line="60" pos:column="33">(<argument><expr><name pos:line="60" pos:column="34">what<pos:position pos:line="60" pos:column="38"/></name></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="61" pos:column="13">co<pos:position pos:line="61" pos:column="15"/></name><operator pos:line="61" pos:column="15">-&gt;<pos:position pos:line="61" pos:column="20"/></operator><name pos:line="61" pos:column="17">expires<pos:position pos:line="61" pos:column="24"/></name></name> <operator pos:line="61" pos:column="25">=<pos:position pos:line="61" pos:column="26"/></operator> <call><name pos:line="61" pos:column="27">curl_getdate<pos:position pos:line="61" pos:column="39"/></name><argument_list pos:line="61" pos:column="39">(<argument><expr><name pos:line="61" pos:column="40">what<pos:position pos:line="61" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="46">&amp;<pos:position pos:line="61" pos:column="51"/></operator><name pos:line="61" pos:column="47">now<pos:position pos:line="61" pos:column="50"/></name></expr></argument>)<pos:position pos:line="61" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="52"/></expr_stmt>
          }<pos:position pos:line="62" pos:column="12"/></block></then></if></elseif>
          <elseif pos:line="63" pos:column="11">else <if pos:line="63" pos:column="16">if<condition pos:line="63" pos:column="18">(<expr><operator pos:line="63" pos:column="19">!<pos:position pos:line="63" pos:column="20"/></operator><name><name pos:line="63" pos:column="20">co<pos:position pos:line="63" pos:column="22"/></name><operator pos:line="63" pos:column="22">-&gt;<pos:position pos:line="63" pos:column="27"/></operator><name pos:line="63" pos:column="24">name<pos:position pos:line="63" pos:column="28"/></name></name></expr>)<pos:position pos:line="63" pos:column="29"/></condition><then pos:line="63" pos:column="29"> <block pos:line="63" pos:column="30">{
            <expr_stmt><expr><name><name pos:line="64" pos:column="13">co<pos:position pos:line="64" pos:column="15"/></name><operator pos:line="64" pos:column="15">-&gt;<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="17">name<pos:position pos:line="64" pos:column="21"/></name></name> <operator pos:line="64" pos:column="22">=<pos:position pos:line="64" pos:column="23"/></operator> <call><name pos:line="64" pos:column="24">strdup<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name pos:line="64" pos:column="31">name<pos:position pos:line="64" pos:column="35"/></name></expr></argument>)<pos:position pos:line="64" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="65" pos:column="13">co<pos:position pos:line="65" pos:column="15"/></name><operator pos:line="65" pos:column="15">-&gt;<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="17">value<pos:position pos:line="65" pos:column="22"/></name></name> <operator pos:line="65" pos:column="23">=<pos:position pos:line="65" pos:column="24"/></operator> <call><name pos:line="65" pos:column="25">strdup<pos:position pos:line="65" pos:column="31"/></name><argument_list pos:line="65" pos:column="31">(<argument><expr><name pos:line="65" pos:column="32">what<pos:position pos:line="65" pos:column="36"/></name></expr></argument>)<pos:position pos:line="65" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="38"/></expr_stmt>
          }<pos:position pos:line="66" pos:column="12"/></block></then></if></elseif>
          <else pos:line="67" pos:column="11">else
            <block type="pseudo"><empty_stmt pos:line="68" pos:column="13">;<pos:position pos:line="68" pos:column="14"/></empty_stmt></block></else></if><comment type="block" pos:line="68" pos:column="14">/* this is the second (or more) name we don't know
                about! */</comment>
        }<pos:position pos:line="70" pos:column="10"/></block></then>
        <else pos:line="71" pos:column="9">else <block pos:line="71" pos:column="14">{
          <comment type="block" pos:line="72" pos:column="11">/* this is an "illegal" &lt;what&gt;=&lt;this&gt; pair */</comment>
        }<pos:position pos:line="73" pos:column="10"/></block></else></if>
      }<pos:position pos:line="74" pos:column="8"/></block></then>
      <else pos:line="75" pos:column="7">else <block pos:line="75" pos:column="12">{
        <if pos:line="76" pos:column="9">if<condition pos:line="76" pos:column="11">(<expr><call><name pos:line="76" pos:column="12">sscanf<pos:position pos:line="76" pos:column="18"/></name><argument_list pos:line="76" pos:column="18">(<argument><expr><name pos:line="76" pos:column="19">ptr<pos:position pos:line="76" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="24">"%"<pos:position pos:line="76" pos:column="27"/></literal> <name pos:line="76" pos:column="28">MAX_COOKIE_LINE_TXT<pos:position pos:line="76" pos:column="47"/></name> <literal type="string" pos:line="76" pos:column="48">"[^\r\n]"<pos:position pos:line="76" pos:column="57"/></literal></expr></argument>,
                  <argument><expr><name pos:line="77" pos:column="19">what<pos:position pos:line="77" pos:column="23"/></name></expr></argument>)<pos:position pos:line="77" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="25"/></condition><then pos:line="77" pos:column="25"> <block pos:line="77" pos:column="26">{
          <if pos:line="78" pos:column="11">if<condition pos:line="78" pos:column="13">(<expr><call><name pos:line="78" pos:column="14">strequal<pos:position pos:line="78" pos:column="22"/></name><argument_list pos:line="78" pos:column="22">(<argument><expr><literal type="string" pos:line="78" pos:column="23">"secure"<pos:position pos:line="78" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="33">what<pos:position pos:line="78" pos:column="37"/></name></expr></argument>)<pos:position pos:line="78" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="39"/></condition><then pos:line="78" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="79" pos:column="13">co<pos:position pos:line="79" pos:column="15"/></name><operator pos:line="79" pos:column="15">-&gt;<pos:position pos:line="79" pos:column="20"/></operator><name pos:line="79" pos:column="17">secure<pos:position pos:line="79" pos:column="23"/></name></name> <operator pos:line="79" pos:column="24">=<pos:position pos:line="79" pos:column="25"/></operator> <name pos:line="79" pos:column="26">TRUE<pos:position pos:line="79" pos:column="30"/></name></expr>;<pos:position pos:line="79" pos:column="31"/></expr_stmt></block></then>
          <else pos:line="80" pos:column="11">else
            <block type="pseudo"><empty_stmt pos:line="81" pos:column="13">;<pos:position pos:line="81" pos:column="14"/></empty_stmt></block></else></if> <comment type="block" pos:line="81" pos:column="15">/* unsupported keyword without assign! */</comment>
        }<pos:position pos:line="82" pos:column="10"/></block></then></if>
      }<pos:position pos:line="83" pos:column="8"/></block></else></if>
      <expr_stmt><expr><operator pos:line="84" pos:column="7">*<pos:position pos:line="84" pos:column="8"/></operator><name pos:line="84" pos:column="8">semiptr<pos:position pos:line="84" pos:column="15"/></name><operator pos:line="84" pos:column="15">=<pos:position pos:line="84" pos:column="16"/></operator><literal type="char" pos:line="84" pos:column="16">';'<pos:position pos:line="84" pos:column="19"/></literal></expr>;<pos:position pos:line="84" pos:column="20"/></expr_stmt> <comment type="block" pos:line="84" pos:column="21">/* put the semicolon back */</comment>
      <expr_stmt><expr><name pos:line="85" pos:column="7">ptr<pos:position pos:line="85" pos:column="10"/></name><operator pos:line="85" pos:column="10">=<pos:position pos:line="85" pos:column="11"/></operator><name pos:line="85" pos:column="11">semiptr<pos:position pos:line="85" pos:column="18"/></name><operator pos:line="85" pos:column="18">+<pos:position pos:line="85" pos:column="19"/></operator><literal type="number" pos:line="85" pos:column="19">1<pos:position pos:line="85" pos:column="20"/></literal></expr>;<pos:position pos:line="85" pos:column="21"/></expr_stmt>
      <while pos:line="86" pos:column="7">while<condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">ptr<pos:position pos:line="86" pos:column="16"/></name> <operator pos:line="86" pos:column="17">&amp;&amp;<pos:position pos:line="86" pos:column="27"/></operator> <operator pos:line="86" pos:column="20">*<pos:position pos:line="86" pos:column="21"/></operator><name pos:line="86" pos:column="21">ptr<pos:position pos:line="86" pos:column="24"/></name> <operator pos:line="86" pos:column="25">&amp;&amp;<pos:position pos:line="86" pos:column="35"/></operator> <call><name pos:line="86" pos:column="28">isspace<pos:position pos:line="86" pos:column="35"/></name><argument_list pos:line="86" pos:column="35">(<argument><expr><operator pos:line="86" pos:column="36">(<pos:position pos:line="86" pos:column="37"/></operator><name pos:line="86" pos:column="37">int<pos:position pos:line="86" pos:column="40"/></name><operator pos:line="86" pos:column="40">)<pos:position pos:line="86" pos:column="41"/></operator><operator pos:line="86" pos:column="41">*<pos:position pos:line="86" pos:column="42"/></operator><name pos:line="86" pos:column="42">ptr<pos:position pos:line="86" pos:column="45"/></name></expr></argument>)<pos:position pos:line="86" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="47"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="9">ptr<pos:position pos:line="87" pos:column="12"/></name><operator pos:line="87" pos:column="12">++<pos:position pos:line="87" pos:column="14"/></operator></expr>;<pos:position pos:line="87" pos:column="15"/></expr_stmt></block></while>
      <expr_stmt><expr><name pos:line="88" pos:column="7">semiptr<pos:position pos:line="88" pos:column="14"/></name><operator pos:line="88" pos:column="14">=<pos:position pos:line="88" pos:column="15"/></operator><call><name pos:line="88" pos:column="15">strchr<pos:position pos:line="88" pos:column="21"/></name><argument_list pos:line="88" pos:column="21">(<argument><expr><name pos:line="88" pos:column="22">ptr<pos:position pos:line="88" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="88" pos:column="27">';'<pos:position pos:line="88" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="32"/></expr_stmt> <comment type="block" pos:line="88" pos:column="33">/* now, find the next semicolon */</comment>
    }<pos:position pos:line="89" pos:column="6"/></block></while>
  }<pos:position pos:line="90" pos:column="4"/></block></then>
  <else pos:line="91" pos:column="3">else <block pos:line="91" pos:column="8">{
    <comment type="block" pos:line="92" pos:column="5">/* This line is NOT a HTTP header style line, we do offer support for
       reading the odd netscape cookies-file format here */</comment>
    <decl_stmt><decl><type><name pos:line="94" pos:column="5">char<pos:position pos:line="94" pos:column="9"/></name> <modifier pos:line="94" pos:column="10">*<pos:position pos:line="94" pos:column="11"/></modifier></type><name pos:line="94" pos:column="11">firstptr<pos:position pos:line="94" pos:column="19"/></name></decl>;<pos:position pos:line="94" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="95" pos:column="5">int<pos:position pos:line="95" pos:column="8"/></name></type> <name pos:line="95" pos:column="9">fields<pos:position pos:line="95" pos:column="15"/></name></decl>;<pos:position pos:line="95" pos:column="16"/></decl_stmt>

    <if pos:line="97" pos:column="5">if<condition pos:line="97" pos:column="7">(<expr><name><name pos:line="97" pos:column="8">lineptr<pos:position pos:line="97" pos:column="15"/></name><index pos:line="97" pos:column="15">[<expr><literal type="number" pos:line="97" pos:column="16">0<pos:position pos:line="97" pos:column="17"/></literal></expr>]<pos:position pos:line="97" pos:column="18"/></index></name><operator pos:line="97" pos:column="18">==<pos:position pos:line="97" pos:column="20"/></operator><literal type="char" pos:line="97" pos:column="20">'#'<pos:position pos:line="97" pos:column="23"/></literal></expr>)<pos:position pos:line="97" pos:column="24"/></condition><then pos:line="97" pos:column="24"> <block pos:line="97" pos:column="25">{
      <comment type="block" pos:line="98" pos:column="7">/* don't even try the comments */</comment>
      <expr_stmt><expr><call><name pos:line="99" pos:column="7">free<pos:position pos:line="99" pos:column="11"/></name><argument_list pos:line="99" pos:column="11">(<argument><expr><name pos:line="99" pos:column="12">co<pos:position pos:line="99" pos:column="14"/></name></expr></argument>)<pos:position pos:line="99" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="16"/></expr_stmt>
      <return pos:line="100" pos:column="7">return <expr><name pos:line="100" pos:column="14">NULL<pos:position pos:line="100" pos:column="18"/></name></expr>;<pos:position pos:line="100" pos:column="19"/></return>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="102" pos:column="5">/* strip off the possible end-of-line characters */</comment>
    <expr_stmt><expr><name pos:line="103" pos:column="5">ptr<pos:position pos:line="103" pos:column="8"/></name><operator pos:line="103" pos:column="8">=<pos:position pos:line="103" pos:column="9"/></operator><call><name pos:line="103" pos:column="9">strchr<pos:position pos:line="103" pos:column="15"/></name><argument_list pos:line="103" pos:column="15">(<argument><expr><name pos:line="103" pos:column="16">lineptr<pos:position pos:line="103" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="103" pos:column="25">'\r'<pos:position pos:line="103" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="31"/></expr_stmt>
    <if pos:line="104" pos:column="5">if<condition pos:line="104" pos:column="7">(<expr><name pos:line="104" pos:column="8">ptr<pos:position pos:line="104" pos:column="11"/></name></expr>)<pos:position pos:line="104" pos:column="12"/></condition><then pos:line="104" pos:column="12">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="105" pos:column="7">*<pos:position pos:line="105" pos:column="8"/></operator><name pos:line="105" pos:column="8">ptr<pos:position pos:line="105" pos:column="11"/></name><operator pos:line="105" pos:column="11">=<pos:position pos:line="105" pos:column="12"/></operator><literal type="number" pos:line="105" pos:column="12">0<pos:position pos:line="105" pos:column="13"/></literal></expr>;<pos:position pos:line="105" pos:column="14"/></expr_stmt></block></then></if> <comment type="block" pos:line="105" pos:column="15">/* clear it */</comment>
    <expr_stmt><expr><name pos:line="106" pos:column="5">ptr<pos:position pos:line="106" pos:column="8"/></name><operator pos:line="106" pos:column="8">=<pos:position pos:line="106" pos:column="9"/></operator><call><name pos:line="106" pos:column="9">strchr<pos:position pos:line="106" pos:column="15"/></name><argument_list pos:line="106" pos:column="15">(<argument><expr><name pos:line="106" pos:column="16">lineptr<pos:position pos:line="106" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="106" pos:column="25">'\n'<pos:position pos:line="106" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="31"/></expr_stmt>
    <if pos:line="107" pos:column="5">if<condition pos:line="107" pos:column="7">(<expr><name pos:line="107" pos:column="8">ptr<pos:position pos:line="107" pos:column="11"/></name></expr>)<pos:position pos:line="107" pos:column="12"/></condition><then pos:line="107" pos:column="12">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="108" pos:column="7">*<pos:position pos:line="108" pos:column="8"/></operator><name pos:line="108" pos:column="8">ptr<pos:position pos:line="108" pos:column="11"/></name><operator pos:line="108" pos:column="11">=<pos:position pos:line="108" pos:column="12"/></operator><literal type="number" pos:line="108" pos:column="12">0<pos:position pos:line="108" pos:column="13"/></literal></expr>;<pos:position pos:line="108" pos:column="14"/></expr_stmt></block></then></if> <comment type="block" pos:line="108" pos:column="15">/* clear it */</comment>

    <expr_stmt><expr><name pos:line="110" pos:column="5">firstptr<pos:position pos:line="110" pos:column="13"/></name><operator pos:line="110" pos:column="13">=<pos:position pos:line="110" pos:column="14"/></operator><call><name pos:line="110" pos:column="14">strtok<pos:position pos:line="110" pos:column="20"/></name><argument_list pos:line="110" pos:column="20">(<argument><expr><name pos:line="110" pos:column="21">lineptr<pos:position pos:line="110" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="30">"\t"<pos:position pos:line="110" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="36"/></expr_stmt> <comment type="block" pos:line="110" pos:column="37">/* first tokenize it on the TAB */</comment>

    <comment type="block" pos:line="112" pos:column="5">/* Here's a quick check to eliminate normal HTTP-headers from this */</comment>
    <if pos:line="113" pos:column="5">if<condition pos:line="113" pos:column="7">(<expr><operator pos:line="113" pos:column="8">!<pos:position pos:line="113" pos:column="9"/></operator><name pos:line="113" pos:column="9">firstptr<pos:position pos:line="113" pos:column="17"/></name> <operator pos:line="113" pos:column="18">||<pos:position pos:line="113" pos:column="20"/></operator> <call><name pos:line="113" pos:column="21">strchr<pos:position pos:line="113" pos:column="27"/></name><argument_list pos:line="113" pos:column="27">(<argument><expr><name pos:line="113" pos:column="28">firstptr<pos:position pos:line="113" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="113" pos:column="38">':'<pos:position pos:line="113" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="43"/></condition><then pos:line="113" pos:column="43"> <block pos:line="113" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="114" pos:column="7">free<pos:position pos:line="114" pos:column="11"/></name><argument_list pos:line="114" pos:column="11">(<argument><expr><name pos:line="114" pos:column="12">co<pos:position pos:line="114" pos:column="14"/></name></expr></argument>)<pos:position pos:line="114" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="16"/></expr_stmt>
      <return pos:line="115" pos:column="7">return <expr><name pos:line="115" pos:column="14">NULL<pos:position pos:line="115" pos:column="18"/></name></expr>;<pos:position pos:line="115" pos:column="19"/></return>
    }<pos:position pos:line="116" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="118" pos:column="5">/* Now loop through the fields and init the struct we already have
       allocated */</comment>
    <for pos:line="120" pos:column="5">for<control pos:line="120" pos:column="8">(<init><expr><name pos:line="120" pos:column="9">ptr<pos:position pos:line="120" pos:column="12"/></name><operator pos:line="120" pos:column="12">=<pos:position pos:line="120" pos:column="13"/></operator><name pos:line="120" pos:column="13">firstptr<pos:position pos:line="120" pos:column="21"/></name></expr><operator pos:line="120" pos:column="21">,<pos:position pos:line="120" pos:column="22"/></operator> <expr><name pos:line="120" pos:column="23">fields<pos:position pos:line="120" pos:column="29"/></name><operator pos:line="120" pos:column="29">=<pos:position pos:line="120" pos:column="30"/></operator><literal type="number" pos:line="120" pos:column="30">0<pos:position pos:line="120" pos:column="31"/></literal></expr>;<pos:position pos:line="120" pos:column="32"/></init> <condition><expr><name pos:line="120" pos:column="33">ptr<pos:position pos:line="120" pos:column="36"/></name></expr>;<pos:position pos:line="120" pos:column="37"/></condition> <incr><expr><name pos:line="120" pos:column="38">ptr<pos:position pos:line="120" pos:column="41"/></name><operator pos:line="120" pos:column="41">=<pos:position pos:line="120" pos:column="42"/></operator><call><name pos:line="120" pos:column="42">strtok<pos:position pos:line="120" pos:column="48"/></name><argument_list pos:line="120" pos:column="48">(<argument><expr><name pos:line="120" pos:column="49">NULL<pos:position pos:line="120" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="55">"\t"<pos:position pos:line="120" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="60"/></argument_list></call></expr><operator pos:line="120" pos:column="60">,<pos:position pos:line="120" pos:column="61"/></operator> <expr><name pos:line="120" pos:column="62">fields<pos:position pos:line="120" pos:column="68"/></name><operator pos:line="120" pos:column="68">++<pos:position pos:line="120" pos:column="70"/></operator></expr></incr>)<pos:position pos:line="120" pos:column="71"/></control> <block pos:line="120" pos:column="72">{
      <switch pos:line="121" pos:column="7">switch<condition pos:line="121" pos:column="13">(<expr><name pos:line="121" pos:column="14">fields<pos:position pos:line="121" pos:column="20"/></name></expr>)<pos:position pos:line="121" pos:column="21"/></condition> <block pos:line="121" pos:column="22">{
      <case pos:line="122" pos:column="7">case <expr><literal type="number" pos:line="122" pos:column="12">0<pos:position pos:line="122" pos:column="13"/></literal></expr>:<pos:position pos:line="122" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="123" pos:column="9">co<pos:position pos:line="123" pos:column="11"/></name><operator pos:line="123" pos:column="11">-&gt;<pos:position pos:line="123" pos:column="16"/></operator><name pos:line="123" pos:column="13">domain<pos:position pos:line="123" pos:column="19"/></name></name> <operator pos:line="123" pos:column="20">=<pos:position pos:line="123" pos:column="21"/></operator> <call><name pos:line="123" pos:column="22">strdup<pos:position pos:line="123" pos:column="28"/></name><argument_list pos:line="123" pos:column="28">(<argument><expr><name pos:line="123" pos:column="29">ptr<pos:position pos:line="123" pos:column="32"/></name></expr></argument>)<pos:position pos:line="123" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="34"/></expr_stmt>
        <break pos:line="124" pos:column="9">break;<pos:position pos:line="124" pos:column="15"/></break>
      <case pos:line="125" pos:column="7">case <expr><literal type="number" pos:line="125" pos:column="12">1<pos:position pos:line="125" pos:column="13"/></literal></expr>:<pos:position pos:line="125" pos:column="14"/></case>
        <comment type="block" pos:line="126" pos:column="9">/* what _is_ this field for? */</comment>
        <break pos:line="127" pos:column="9">break;<pos:position pos:line="127" pos:column="15"/></break>
      <case pos:line="128" pos:column="7">case <expr><literal type="number" pos:line="128" pos:column="12">2<pos:position pos:line="128" pos:column="13"/></literal></expr>:<pos:position pos:line="128" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="129" pos:column="9">co<pos:position pos:line="129" pos:column="11"/></name><operator pos:line="129" pos:column="11">-&gt;<pos:position pos:line="129" pos:column="16"/></operator><name pos:line="129" pos:column="13">path<pos:position pos:line="129" pos:column="17"/></name></name> <operator pos:line="129" pos:column="18">=<pos:position pos:line="129" pos:column="19"/></operator> <call><name pos:line="129" pos:column="20">strdup<pos:position pos:line="129" pos:column="26"/></name><argument_list pos:line="129" pos:column="26">(<argument><expr><name pos:line="129" pos:column="27">ptr<pos:position pos:line="129" pos:column="30"/></name></expr></argument>)<pos:position pos:line="129" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="32"/></expr_stmt>
        <break pos:line="130" pos:column="9">break;<pos:position pos:line="130" pos:column="15"/></break>
      <case pos:line="131" pos:column="7">case <expr><literal type="number" pos:line="131" pos:column="12">3<pos:position pos:line="131" pos:column="13"/></literal></expr>:<pos:position pos:line="131" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="132" pos:column="9">co<pos:position pos:line="132" pos:column="11"/></name><operator pos:line="132" pos:column="11">-&gt;<pos:position pos:line="132" pos:column="16"/></operator><name pos:line="132" pos:column="13">secure<pos:position pos:line="132" pos:column="19"/></name></name> <operator pos:line="132" pos:column="20">=<pos:position pos:line="132" pos:column="21"/></operator> <call><name pos:line="132" pos:column="22">strequal<pos:position pos:line="132" pos:column="30"/></name><argument_list pos:line="132" pos:column="30">(<argument><expr><name pos:line="132" pos:column="31">ptr<pos:position pos:line="132" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="132" pos:column="36">"TRUE"<pos:position pos:line="132" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="44"/></expr_stmt>
        <break pos:line="133" pos:column="9">break;<pos:position pos:line="133" pos:column="15"/></break>
      <case pos:line="134" pos:column="7">case <expr><literal type="number" pos:line="134" pos:column="12">4<pos:position pos:line="134" pos:column="13"/></literal></expr>:<pos:position pos:line="134" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="135" pos:column="9">co<pos:position pos:line="135" pos:column="11"/></name><operator pos:line="135" pos:column="11">-&gt;<pos:position pos:line="135" pos:column="16"/></operator><name pos:line="135" pos:column="13">expires<pos:position pos:line="135" pos:column="20"/></name></name> <operator pos:line="135" pos:column="21">=<pos:position pos:line="135" pos:column="22"/></operator> <call><name pos:line="135" pos:column="23">atoi<pos:position pos:line="135" pos:column="27"/></name><argument_list pos:line="135" pos:column="27">(<argument><expr><name pos:line="135" pos:column="28">ptr<pos:position pos:line="135" pos:column="31"/></name></expr></argument>)<pos:position pos:line="135" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="33"/></expr_stmt>
        <break pos:line="136" pos:column="9">break;<pos:position pos:line="136" pos:column="15"/></break>
      <case pos:line="137" pos:column="7">case <expr><literal type="number" pos:line="137" pos:column="12">5<pos:position pos:line="137" pos:column="13"/></literal></expr>:<pos:position pos:line="137" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="138" pos:column="9">co<pos:position pos:line="138" pos:column="11"/></name><operator pos:line="138" pos:column="11">-&gt;<pos:position pos:line="138" pos:column="16"/></operator><name pos:line="138" pos:column="13">name<pos:position pos:line="138" pos:column="17"/></name></name> <operator pos:line="138" pos:column="18">=<pos:position pos:line="138" pos:column="19"/></operator> <call><name pos:line="138" pos:column="20">strdup<pos:position pos:line="138" pos:column="26"/></name><argument_list pos:line="138" pos:column="26">(<argument><expr><name pos:line="138" pos:column="27">ptr<pos:position pos:line="138" pos:column="30"/></name></expr></argument>)<pos:position pos:line="138" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="32"/></expr_stmt>
        <break pos:line="139" pos:column="9">break;<pos:position pos:line="139" pos:column="15"/></break>
      <case pos:line="140" pos:column="7">case <expr><literal type="number" pos:line="140" pos:column="12">6<pos:position pos:line="140" pos:column="13"/></literal></expr>:<pos:position pos:line="140" pos:column="14"/></case>
        <expr_stmt><expr><name><name pos:line="141" pos:column="9">co<pos:position pos:line="141" pos:column="11"/></name><operator pos:line="141" pos:column="11">-&gt;<pos:position pos:line="141" pos:column="16"/></operator><name pos:line="141" pos:column="13">value<pos:position pos:line="141" pos:column="18"/></name></name> <operator pos:line="141" pos:column="19">=<pos:position pos:line="141" pos:column="20"/></operator> <call><name pos:line="141" pos:column="21">strdup<pos:position pos:line="141" pos:column="27"/></name><argument_list pos:line="141" pos:column="27">(<argument><expr><name pos:line="141" pos:column="28">ptr<pos:position pos:line="141" pos:column="31"/></name></expr></argument>)<pos:position pos:line="141" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="33"/></expr_stmt>
        <break pos:line="142" pos:column="9">break;<pos:position pos:line="142" pos:column="15"/></break>
      }<pos:position pos:line="143" pos:column="8"/></block></switch>
    }<pos:position pos:line="144" pos:column="6"/></block></for>

    <if pos:line="146" pos:column="5">if<condition pos:line="146" pos:column="7">(<expr><literal type="number" pos:line="146" pos:column="8">7<pos:position pos:line="146" pos:column="9"/></literal> <operator pos:line="146" pos:column="10">!=<pos:position pos:line="146" pos:column="12"/></operator> <name pos:line="146" pos:column="13">fields<pos:position pos:line="146" pos:column="19"/></name></expr>)<pos:position pos:line="146" pos:column="20"/></condition><then pos:line="146" pos:column="20"> <block pos:line="146" pos:column="21">{
      <comment type="block" pos:line="147" pos:column="7">/* we did not find the sufficient number of fields to recognize this
         as a valid line, abort and go home */</comment>

      <if pos:line="150" pos:column="7">if<condition pos:line="150" pos:column="9">(<expr><name><name pos:line="150" pos:column="10">co<pos:position pos:line="150" pos:column="12"/></name><operator pos:line="150" pos:column="12">-&gt;<pos:position pos:line="150" pos:column="17"/></operator><name pos:line="150" pos:column="14">domain<pos:position pos:line="150" pos:column="20"/></name></name></expr>)<pos:position pos:line="150" pos:column="21"/></condition><then pos:line="150" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="151" pos:column="9">free<pos:position pos:line="151" pos:column="13"/></name><argument_list pos:line="151" pos:column="13">(<argument><expr><name><name pos:line="151" pos:column="14">co<pos:position pos:line="151" pos:column="16"/></name><operator pos:line="151" pos:column="16">-&gt;<pos:position pos:line="151" pos:column="21"/></operator><name pos:line="151" pos:column="18">domain<pos:position pos:line="151" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="151" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="26"/></expr_stmt></block></then></if>
      <if pos:line="152" pos:column="7">if<condition pos:line="152" pos:column="9">(<expr><name><name pos:line="152" pos:column="10">co<pos:position pos:line="152" pos:column="12"/></name><operator pos:line="152" pos:column="12">-&gt;<pos:position pos:line="152" pos:column="17"/></operator><name pos:line="152" pos:column="14">path<pos:position pos:line="152" pos:column="18"/></name></name></expr>)<pos:position pos:line="152" pos:column="19"/></condition><then pos:line="152" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="153" pos:column="9">free<pos:position pos:line="153" pos:column="13"/></name><argument_list pos:line="153" pos:column="13">(<argument><expr><name><name pos:line="153" pos:column="14">co<pos:position pos:line="153" pos:column="16"/></name><operator pos:line="153" pos:column="16">-&gt;<pos:position pos:line="153" pos:column="21"/></operator><name pos:line="153" pos:column="18">path<pos:position pos:line="153" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="153" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="24"/></expr_stmt></block></then></if>
      <if pos:line="154" pos:column="7">if<condition pos:line="154" pos:column="9">(<expr><name><name pos:line="154" pos:column="10">co<pos:position pos:line="154" pos:column="12"/></name><operator pos:line="154" pos:column="12">-&gt;<pos:position pos:line="154" pos:column="17"/></operator><name pos:line="154" pos:column="14">name<pos:position pos:line="154" pos:column="18"/></name></name></expr>)<pos:position pos:line="154" pos:column="19"/></condition><then pos:line="154" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="155" pos:column="9">free<pos:position pos:line="155" pos:column="13"/></name><argument_list pos:line="155" pos:column="13">(<argument><expr><name><name pos:line="155" pos:column="14">co<pos:position pos:line="155" pos:column="16"/></name><operator pos:line="155" pos:column="16">-&gt;<pos:position pos:line="155" pos:column="21"/></operator><name pos:line="155" pos:column="18">name<pos:position pos:line="155" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="155" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="24"/></expr_stmt></block></then></if>
      <if pos:line="156" pos:column="7">if<condition pos:line="156" pos:column="9">(<expr><name><name pos:line="156" pos:column="10">co<pos:position pos:line="156" pos:column="12"/></name><operator pos:line="156" pos:column="12">-&gt;<pos:position pos:line="156" pos:column="17"/></operator><name pos:line="156" pos:column="14">value<pos:position pos:line="156" pos:column="19"/></name></name></expr>)<pos:position pos:line="156" pos:column="20"/></condition><then pos:line="156" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="157" pos:column="9">free<pos:position pos:line="157" pos:column="13"/></name><argument_list pos:line="157" pos:column="13">(<argument><expr><name><name pos:line="157" pos:column="14">co<pos:position pos:line="157" pos:column="16"/></name><operator pos:line="157" pos:column="16">-&gt;<pos:position pos:line="157" pos:column="21"/></operator><name pos:line="157" pos:column="18">value<pos:position pos:line="157" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="157" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="25"/></expr_stmt></block></then></if>

      <expr_stmt><expr><call><name pos:line="159" pos:column="7">free<pos:position pos:line="159" pos:column="11"/></name><argument_list pos:line="159" pos:column="11">(<argument><expr><name pos:line="159" pos:column="12">co<pos:position pos:line="159" pos:column="14"/></name></expr></argument>)<pos:position pos:line="159" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="16"/></expr_stmt>
      <return pos:line="160" pos:column="7">return <expr><name pos:line="160" pos:column="14">NULL<pos:position pos:line="160" pos:column="18"/></name></expr>;<pos:position pos:line="160" pos:column="19"/></return>
    }<pos:position pos:line="161" pos:column="6"/></block></then></if>

  }<pos:position pos:line="163" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="165" pos:column="3">/* now, we have parsed the incoming line, we must now check if this
     superceeds an already existing cookie, which it may if the previous have
     the same domain and path as this */</comment>

  <expr_stmt><expr><name pos:line="169" pos:column="3">clist<pos:position pos:line="169" pos:column="8"/></name> <operator pos:line="169" pos:column="9">=<pos:position pos:line="169" pos:column="10"/></operator> <name><name pos:line="169" pos:column="11">c<pos:position pos:line="169" pos:column="12"/></name><operator pos:line="169" pos:column="12">-&gt;<pos:position pos:line="169" pos:column="17"/></operator><name pos:line="169" pos:column="14">cookies<pos:position pos:line="169" pos:column="21"/></name></name></expr>;<pos:position pos:line="169" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="170" pos:column="3">replace_old<pos:position pos:line="170" pos:column="14"/></name> <operator pos:line="170" pos:column="15">=<pos:position pos:line="170" pos:column="16"/></operator> <name pos:line="170" pos:column="17">FALSE<pos:position pos:line="170" pos:column="22"/></name></expr>;<pos:position pos:line="170" pos:column="23"/></expr_stmt>
  <while pos:line="171" pos:column="3">while<condition pos:line="171" pos:column="8">(<expr><name pos:line="171" pos:column="9">clist<pos:position pos:line="171" pos:column="14"/></name></expr>)<pos:position pos:line="171" pos:column="15"/></condition> <block pos:line="171" pos:column="16">{
    <if pos:line="172" pos:column="5">if<condition pos:line="172" pos:column="7">(<expr><call><name pos:line="172" pos:column="8">strequal<pos:position pos:line="172" pos:column="16"/></name><argument_list pos:line="172" pos:column="16">(<argument><expr><name><name pos:line="172" pos:column="17">clist<pos:position pos:line="172" pos:column="22"/></name><operator pos:line="172" pos:column="22">-&gt;<pos:position pos:line="172" pos:column="27"/></operator><name pos:line="172" pos:column="24">name<pos:position pos:line="172" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="172" pos:column="30">co<pos:position pos:line="172" pos:column="32"/></name><operator pos:line="172" pos:column="32">-&gt;<pos:position pos:line="172" pos:column="37"/></operator><name pos:line="172" pos:column="34">name<pos:position pos:line="172" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="172" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="172" pos:column="40"/></condition><then pos:line="172" pos:column="40"> <block pos:line="172" pos:column="41">{
      <comment type="block" pos:line="173" pos:column="7">/* the names are identical */</comment>

      <if pos:line="175" pos:column="7">if<condition pos:line="175" pos:column="9">(<expr><name><name pos:line="175" pos:column="10">clist<pos:position pos:line="175" pos:column="15"/></name><operator pos:line="175" pos:column="15">-&gt;<pos:position pos:line="175" pos:column="20"/></operator><name pos:line="175" pos:column="17">domain<pos:position pos:line="175" pos:column="23"/></name></name> <operator pos:line="175" pos:column="24">&amp;&amp;<pos:position pos:line="175" pos:column="34"/></operator> <name><name pos:line="175" pos:column="27">co<pos:position pos:line="175" pos:column="29"/></name><operator pos:line="175" pos:column="29">-&gt;<pos:position pos:line="175" pos:column="34"/></operator><name pos:line="175" pos:column="31">domain<pos:position pos:line="175" pos:column="37"/></name></name></expr>)<pos:position pos:line="175" pos:column="38"/></condition><then pos:line="175" pos:column="38"> <block pos:line="175" pos:column="39">{
        <if pos:line="176" pos:column="9">if<condition pos:line="176" pos:column="11">(<expr><call><name pos:line="176" pos:column="12">strequal<pos:position pos:line="176" pos:column="20"/></name><argument_list pos:line="176" pos:column="20">(<argument><expr><name><name pos:line="176" pos:column="21">clist<pos:position pos:line="176" pos:column="26"/></name><operator pos:line="176" pos:column="26">-&gt;<pos:position pos:line="176" pos:column="31"/></operator><name pos:line="176" pos:column="28">domain<pos:position pos:line="176" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="36">co<pos:position pos:line="176" pos:column="38"/></name><operator pos:line="176" pos:column="38">-&gt;<pos:position pos:line="176" pos:column="43"/></operator><name pos:line="176" pos:column="40">domain<pos:position pos:line="176" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="176" pos:column="48"/></condition><then pos:line="176" pos:column="48">
          <block type="pseudo"><expr_stmt><expr><name pos:line="177" pos:column="11">replace_old<pos:position pos:line="177" pos:column="22"/></name><operator pos:line="177" pos:column="22">=<pos:position pos:line="177" pos:column="23"/></operator><name pos:line="177" pos:column="23">TRUE<pos:position pos:line="177" pos:column="27"/></name></expr>;<pos:position pos:line="177" pos:column="28"/></expr_stmt></block></then></if>
      }<pos:position pos:line="178" pos:column="8"/></block></then>
      <elseif pos:line="179" pos:column="7">else <if pos:line="179" pos:column="12">if<condition pos:line="179" pos:column="14">(<expr><operator pos:line="179" pos:column="15">!<pos:position pos:line="179" pos:column="16"/></operator><name><name pos:line="179" pos:column="16">clist<pos:position pos:line="179" pos:column="21"/></name><operator pos:line="179" pos:column="21">-&gt;<pos:position pos:line="179" pos:column="26"/></operator><name pos:line="179" pos:column="23">domain<pos:position pos:line="179" pos:column="29"/></name></name> <operator pos:line="179" pos:column="30">&amp;&amp;<pos:position pos:line="179" pos:column="40"/></operator> <operator pos:line="179" pos:column="33">!<pos:position pos:line="179" pos:column="34"/></operator><name><name pos:line="179" pos:column="34">co<pos:position pos:line="179" pos:column="36"/></name><operator pos:line="179" pos:column="36">-&gt;<pos:position pos:line="179" pos:column="41"/></operator><name pos:line="179" pos:column="38">domain<pos:position pos:line="179" pos:column="44"/></name></name></expr>)<pos:position pos:line="179" pos:column="45"/></condition><then pos:line="179" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><name pos:line="180" pos:column="9">replace_old<pos:position pos:line="180" pos:column="20"/></name> <operator pos:line="180" pos:column="21">=<pos:position pos:line="180" pos:column="22"/></operator> <name pos:line="180" pos:column="23">TRUE<pos:position pos:line="180" pos:column="27"/></name></expr>;<pos:position pos:line="180" pos:column="28"/></expr_stmt></block></then></if></elseif></if>

      <if pos:line="182" pos:column="7">if<condition pos:line="182" pos:column="9">(<expr><name pos:line="182" pos:column="10">replace_old<pos:position pos:line="182" pos:column="21"/></name></expr>)<pos:position pos:line="182" pos:column="22"/></condition><then pos:line="182" pos:column="22"> <block pos:line="182" pos:column="23">{
        <comment type="block" pos:line="183" pos:column="9">/* the domains were identical */</comment>

        <if pos:line="185" pos:column="9">if<condition pos:line="185" pos:column="11">(<expr><name><name pos:line="185" pos:column="12">clist<pos:position pos:line="185" pos:column="17"/></name><operator pos:line="185" pos:column="17">-&gt;<pos:position pos:line="185" pos:column="22"/></operator><name pos:line="185" pos:column="19">path<pos:position pos:line="185" pos:column="23"/></name></name> <operator pos:line="185" pos:column="24">&amp;&amp;<pos:position pos:line="185" pos:column="34"/></operator> <name><name pos:line="185" pos:column="27">co<pos:position pos:line="185" pos:column="29"/></name><operator pos:line="185" pos:column="29">-&gt;<pos:position pos:line="185" pos:column="34"/></operator><name pos:line="185" pos:column="31">path<pos:position pos:line="185" pos:column="35"/></name></name></expr>)<pos:position pos:line="185" pos:column="36"/></condition><then pos:line="185" pos:column="36"> <block pos:line="185" pos:column="37">{
          <if pos:line="186" pos:column="11">if<condition pos:line="186" pos:column="13">(<expr><call><name pos:line="186" pos:column="14">strequal<pos:position pos:line="186" pos:column="22"/></name><argument_list pos:line="186" pos:column="22">(<argument><expr><name><name pos:line="186" pos:column="23">clist<pos:position pos:line="186" pos:column="28"/></name><operator pos:line="186" pos:column="28">-&gt;<pos:position pos:line="186" pos:column="33"/></operator><name pos:line="186" pos:column="30">path<pos:position pos:line="186" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="36">co<pos:position pos:line="186" pos:column="38"/></name><operator pos:line="186" pos:column="38">-&gt;<pos:position pos:line="186" pos:column="43"/></operator><name pos:line="186" pos:column="40">path<pos:position pos:line="186" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="186" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="186" pos:column="46"/></condition><then pos:line="186" pos:column="46"> <block pos:line="186" pos:column="47">{
            <expr_stmt><expr><name pos:line="187" pos:column="13">replace_old<pos:position pos:line="187" pos:column="24"/></name> <operator pos:line="187" pos:column="25">=<pos:position pos:line="187" pos:column="26"/></operator> <name pos:line="187" pos:column="27">TRUE<pos:position pos:line="187" pos:column="31"/></name></expr>;<pos:position pos:line="187" pos:column="32"/></expr_stmt>
          }<pos:position pos:line="188" pos:column="12"/></block></then>
          <else pos:line="189" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="190" pos:column="13">replace_old<pos:position pos:line="190" pos:column="24"/></name> <operator pos:line="190" pos:column="25">=<pos:position pos:line="190" pos:column="26"/></operator> <name pos:line="190" pos:column="27">FALSE<pos:position pos:line="190" pos:column="32"/></name></expr>;<pos:position pos:line="190" pos:column="33"/></expr_stmt></block></else></if>
        }<pos:position pos:line="191" pos:column="10"/></block></then>
        <elseif pos:line="192" pos:column="9">else <if pos:line="192" pos:column="14">if<condition pos:line="192" pos:column="16">(<expr><operator pos:line="192" pos:column="17">!<pos:position pos:line="192" pos:column="18"/></operator><name><name pos:line="192" pos:column="18">clist<pos:position pos:line="192" pos:column="23"/></name><operator pos:line="192" pos:column="23">-&gt;<pos:position pos:line="192" pos:column="28"/></operator><name pos:line="192" pos:column="25">path<pos:position pos:line="192" pos:column="29"/></name></name> <operator pos:line="192" pos:column="30">&amp;&amp;<pos:position pos:line="192" pos:column="40"/></operator> <operator pos:line="192" pos:column="33">!<pos:position pos:line="192" pos:column="34"/></operator><name><name pos:line="192" pos:column="34">co<pos:position pos:line="192" pos:column="36"/></name><operator pos:line="192" pos:column="36">-&gt;<pos:position pos:line="192" pos:column="41"/></operator><name pos:line="192" pos:column="38">path<pos:position pos:line="192" pos:column="42"/></name></name></expr>)<pos:position pos:line="192" pos:column="43"/></condition><then pos:line="192" pos:column="43">
          <block type="pseudo"><expr_stmt><expr><name pos:line="193" pos:column="11">replace_old<pos:position pos:line="193" pos:column="22"/></name> <operator pos:line="193" pos:column="23">=<pos:position pos:line="193" pos:column="24"/></operator> <name pos:line="193" pos:column="25">TRUE<pos:position pos:line="193" pos:column="29"/></name></expr>;<pos:position pos:line="193" pos:column="30"/></expr_stmt></block></then></if></elseif>
        <else pos:line="194" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="195" pos:column="11">replace_old<pos:position pos:line="195" pos:column="22"/></name> <operator pos:line="195" pos:column="23">=<pos:position pos:line="195" pos:column="24"/></operator> <name pos:line="195" pos:column="25">FALSE<pos:position pos:line="195" pos:column="30"/></name></expr>;<pos:position pos:line="195" pos:column="31"/></expr_stmt></block></else></if>
        
      }<pos:position pos:line="197" pos:column="8"/></block></then></if>

      <if pos:line="199" pos:column="7">if<condition pos:line="199" pos:column="9">(<expr><name pos:line="199" pos:column="10">replace_old<pos:position pos:line="199" pos:column="21"/></name></expr>)<pos:position pos:line="199" pos:column="22"/></condition><then pos:line="199" pos:column="22"> <block pos:line="199" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="200" pos:column="9">co<pos:position pos:line="200" pos:column="11"/></name><operator pos:line="200" pos:column="11">-&gt;<pos:position pos:line="200" pos:column="16"/></operator><name pos:line="200" pos:column="13">next<pos:position pos:line="200" pos:column="17"/></name></name> <operator pos:line="200" pos:column="18">=<pos:position pos:line="200" pos:column="19"/></operator> <name><name pos:line="200" pos:column="20">clist<pos:position pos:line="200" pos:column="25"/></name><operator pos:line="200" pos:column="25">-&gt;<pos:position pos:line="200" pos:column="30"/></operator><name pos:line="200" pos:column="27">next<pos:position pos:line="200" pos:column="31"/></name></name></expr>;<pos:position pos:line="200" pos:column="32"/></expr_stmt> <comment type="block" pos:line="200" pos:column="33">/* get the next-pointer first */</comment>

        <comment type="block" pos:line="202" pos:column="9">/* then free all the old pointers */</comment>
        <if pos:line="203" pos:column="9">if<condition pos:line="203" pos:column="11">(<expr><name><name pos:line="203" pos:column="12">clist<pos:position pos:line="203" pos:column="17"/></name><operator pos:line="203" pos:column="17">-&gt;<pos:position pos:line="203" pos:column="22"/></operator><name pos:line="203" pos:column="19">name<pos:position pos:line="203" pos:column="23"/></name></name></expr>)<pos:position pos:line="203" pos:column="24"/></condition><then pos:line="203" pos:column="24">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="204" pos:column="11">free<pos:position pos:line="204" pos:column="15"/></name><argument_list pos:line="204" pos:column="15">(<argument><expr><name><name pos:line="204" pos:column="16">clist<pos:position pos:line="204" pos:column="21"/></name><operator pos:line="204" pos:column="21">-&gt;<pos:position pos:line="204" pos:column="26"/></operator><name pos:line="204" pos:column="23">name<pos:position pos:line="204" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="204" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="29"/></expr_stmt></block></then></if>
        <if pos:line="205" pos:column="9">if<condition pos:line="205" pos:column="11">(<expr><name><name pos:line="205" pos:column="12">clist<pos:position pos:line="205" pos:column="17"/></name><operator pos:line="205" pos:column="17">-&gt;<pos:position pos:line="205" pos:column="22"/></operator><name pos:line="205" pos:column="19">value<pos:position pos:line="205" pos:column="24"/></name></name></expr>)<pos:position pos:line="205" pos:column="25"/></condition><then pos:line="205" pos:column="25">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="206" pos:column="11">free<pos:position pos:line="206" pos:column="15"/></name><argument_list pos:line="206" pos:column="15">(<argument><expr><name><name pos:line="206" pos:column="16">clist<pos:position pos:line="206" pos:column="21"/></name><operator pos:line="206" pos:column="21">-&gt;<pos:position pos:line="206" pos:column="26"/></operator><name pos:line="206" pos:column="23">value<pos:position pos:line="206" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="206" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="30"/></expr_stmt></block></then></if>
        <if pos:line="207" pos:column="9">if<condition pos:line="207" pos:column="11">(<expr><name><name pos:line="207" pos:column="12">clist<pos:position pos:line="207" pos:column="17"/></name><operator pos:line="207" pos:column="17">-&gt;<pos:position pos:line="207" pos:column="22"/></operator><name pos:line="207" pos:column="19">domain<pos:position pos:line="207" pos:column="25"/></name></name></expr>)<pos:position pos:line="207" pos:column="26"/></condition><then pos:line="207" pos:column="26">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="208" pos:column="11">free<pos:position pos:line="208" pos:column="15"/></name><argument_list pos:line="208" pos:column="15">(<argument><expr><name><name pos:line="208" pos:column="16">clist<pos:position pos:line="208" pos:column="21"/></name><operator pos:line="208" pos:column="21">-&gt;<pos:position pos:line="208" pos:column="26"/></operator><name pos:line="208" pos:column="23">domain<pos:position pos:line="208" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="208" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="31"/></expr_stmt></block></then></if>
        <if pos:line="209" pos:column="9">if<condition pos:line="209" pos:column="11">(<expr><name><name pos:line="209" pos:column="12">clist<pos:position pos:line="209" pos:column="17"/></name><operator pos:line="209" pos:column="17">-&gt;<pos:position pos:line="209" pos:column="22"/></operator><name pos:line="209" pos:column="19">path<pos:position pos:line="209" pos:column="23"/></name></name></expr>)<pos:position pos:line="209" pos:column="24"/></condition><then pos:line="209" pos:column="24">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="210" pos:column="11">free<pos:position pos:line="210" pos:column="15"/></name><argument_list pos:line="210" pos:column="15">(<argument><expr><name><name pos:line="210" pos:column="16">clist<pos:position pos:line="210" pos:column="21"/></name><operator pos:line="210" pos:column="21">-&gt;<pos:position pos:line="210" pos:column="26"/></operator><name pos:line="210" pos:column="23">path<pos:position pos:line="210" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="210" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="29"/></expr_stmt></block></then></if>
        <if pos:line="211" pos:column="9">if<condition pos:line="211" pos:column="11">(<expr><name><name pos:line="211" pos:column="12">clist<pos:position pos:line="211" pos:column="17"/></name><operator pos:line="211" pos:column="17">-&gt;<pos:position pos:line="211" pos:column="22"/></operator><name pos:line="211" pos:column="19">expirestr<pos:position pos:line="211" pos:column="28"/></name></name></expr>)<pos:position pos:line="211" pos:column="29"/></condition><then pos:line="211" pos:column="29">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="212" pos:column="11">free<pos:position pos:line="212" pos:column="15"/></name><argument_list pos:line="212" pos:column="15">(<argument><expr><name><name pos:line="212" pos:column="16">clist<pos:position pos:line="212" pos:column="21"/></name><operator pos:line="212" pos:column="21">-&gt;<pos:position pos:line="212" pos:column="26"/></operator><name pos:line="212" pos:column="23">expirestr<pos:position pos:line="212" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="212" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="34"/></expr_stmt></block></then></if>

        <if pos:line="214" pos:column="9">if<condition pos:line="214" pos:column="11">(<expr><name><name pos:line="214" pos:column="12">clist<pos:position pos:line="214" pos:column="17"/></name><operator pos:line="214" pos:column="17">-&gt;<pos:position pos:line="214" pos:column="22"/></operator><name pos:line="214" pos:column="19">version<pos:position pos:line="214" pos:column="26"/></name></name></expr>)<pos:position pos:line="214" pos:column="27"/></condition><then pos:line="214" pos:column="27">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="215" pos:column="11">free<pos:position pos:line="215" pos:column="15"/></name><argument_list pos:line="215" pos:column="15">(<argument><expr><name><name pos:line="215" pos:column="16">clist<pos:position pos:line="215" pos:column="21"/></name><operator pos:line="215" pos:column="21">-&gt;<pos:position pos:line="215" pos:column="26"/></operator><name pos:line="215" pos:column="23">version<pos:position pos:line="215" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="215" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="32"/></expr_stmt></block></then></if>
        <if pos:line="216" pos:column="9">if<condition pos:line="216" pos:column="11">(<expr><name><name pos:line="216" pos:column="12">clist<pos:position pos:line="216" pos:column="17"/></name><operator pos:line="216" pos:column="17">-&gt;<pos:position pos:line="216" pos:column="22"/></operator><name pos:line="216" pos:column="19">maxage<pos:position pos:line="216" pos:column="25"/></name></name></expr>)<pos:position pos:line="216" pos:column="26"/></condition><then pos:line="216" pos:column="26">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="217" pos:column="11">free<pos:position pos:line="217" pos:column="15"/></name><argument_list pos:line="217" pos:column="15">(<argument><expr><name><name pos:line="217" pos:column="16">clist<pos:position pos:line="217" pos:column="21"/></name><operator pos:line="217" pos:column="21">-&gt;<pos:position pos:line="217" pos:column="26"/></operator><name pos:line="217" pos:column="23">maxage<pos:position pos:line="217" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="217" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="31"/></expr_stmt></block></then></if>

        <expr_stmt><expr><operator pos:line="219" pos:column="9">*<pos:position pos:line="219" pos:column="10"/></operator><name pos:line="219" pos:column="10">clist<pos:position pos:line="219" pos:column="15"/></name> <operator pos:line="219" pos:column="16">=<pos:position pos:line="219" pos:column="17"/></operator> <operator pos:line="219" pos:column="18">*<pos:position pos:line="219" pos:column="19"/></operator><name pos:line="219" pos:column="19">co<pos:position pos:line="219" pos:column="21"/></name></expr>;<pos:position pos:line="219" pos:column="22"/></expr_stmt>  <comment type="block" pos:line="219" pos:column="24">/* then store all the new data */</comment>
      }<pos:position pos:line="220" pos:column="8"/></block></then></if>

    }<pos:position pos:line="222" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="223" pos:column="5">clist<pos:position pos:line="223" pos:column="10"/></name> <operator pos:line="223" pos:column="11">=<pos:position pos:line="223" pos:column="12"/></operator> <name><name pos:line="223" pos:column="13">clist<pos:position pos:line="223" pos:column="18"/></name><operator pos:line="223" pos:column="18">-&gt;<pos:position pos:line="223" pos:column="23"/></operator><name pos:line="223" pos:column="20">next<pos:position pos:line="223" pos:column="24"/></name></name></expr>;<pos:position pos:line="223" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="224" pos:column="4"/></block></while>

  <if pos:line="226" pos:column="3">if<condition pos:line="226" pos:column="5">(<expr><operator pos:line="226" pos:column="6">!<pos:position pos:line="226" pos:column="7"/></operator><name pos:line="226" pos:column="7">replace_old<pos:position pos:line="226" pos:column="18"/></name></expr>)<pos:position pos:line="226" pos:column="19"/></condition><then pos:line="226" pos:column="19"> <block pos:line="226" pos:column="20">{

    <comment type="block" pos:line="228" pos:column="5">/* first, point to our "next" */</comment>
    <expr_stmt><expr><name><name pos:line="229" pos:column="5">co<pos:position pos:line="229" pos:column="7"/></name><operator pos:line="229" pos:column="7">-&gt;<pos:position pos:line="229" pos:column="12"/></operator><name pos:line="229" pos:column="9">next<pos:position pos:line="229" pos:column="13"/></name></name> <operator pos:line="229" pos:column="14">=<pos:position pos:line="229" pos:column="15"/></operator> <name><name pos:line="229" pos:column="16">c<pos:position pos:line="229" pos:column="17"/></name><operator pos:line="229" pos:column="17">-&gt;<pos:position pos:line="229" pos:column="22"/></operator><name pos:line="229" pos:column="19">cookies<pos:position pos:line="229" pos:column="26"/></name></name></expr>;<pos:position pos:line="229" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="230" pos:column="5">/* then make ourselves first in the list */</comment>
    <expr_stmt><expr><name><name pos:line="231" pos:column="5">c<pos:position pos:line="231" pos:column="6"/></name><operator pos:line="231" pos:column="6">-&gt;<pos:position pos:line="231" pos:column="11"/></operator><name pos:line="231" pos:column="8">cookies<pos:position pos:line="231" pos:column="15"/></name></name> <operator pos:line="231" pos:column="16">=<pos:position pos:line="231" pos:column="17"/></operator> <name pos:line="231" pos:column="18">co<pos:position pos:line="231" pos:column="20"/></name></expr>;<pos:position pos:line="231" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="232" pos:column="4"/></block></then></if>
  <return pos:line="233" pos:column="3">return <expr><name pos:line="233" pos:column="10">co<pos:position pos:line="233" pos:column="12"/></name></expr>;<pos:position pos:line="233" pos:column="13"/></return>
}<pos:position pos:line="234" pos:column="2"/></block></function></unit>
