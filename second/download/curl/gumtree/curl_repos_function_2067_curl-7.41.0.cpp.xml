<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2067_curl-7.41.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Curl_addrinfo<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">Curl_unix2addr<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">path<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">Curl_addrinfo<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">ai<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">sockaddr_un<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">sa_un<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">path_len<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">ai<pos:position pos:line="7" pos:column="5"/></name> <operator pos:line="7" pos:column="6">=<pos:position pos:line="7" pos:column="7"/></operator> <call><name pos:line="7" pos:column="8">calloc<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><literal type="number" pos:line="7" pos:column="15">1<pos:position pos:line="7" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="18">sizeof<argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">Curl_addrinfo<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="41"/></expr_stmt>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><name pos:line="8" pos:column="7">ai<pos:position pos:line="8" pos:column="9"/></name></expr>)<pos:position pos:line="8" pos:column="10"/></condition><then pos:line="8" pos:column="10">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">NULL<pos:position pos:line="9" pos:column="16"/></name></expr>;<pos:position pos:line="9" pos:column="17"/></return></block></then></if>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">(<pos:position pos:line="10" pos:column="7"/></operator><name><name pos:line="10" pos:column="7">ai<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">-&gt;<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="11">ai_addr<pos:position pos:line="10" pos:column="18"/></name></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">calloc<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><literal type="number" pos:line="10" pos:column="28">1<pos:position pos:line="10" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="31">sizeof<argument_list pos:line="10" pos:column="37">(<argument><expr pos:line="10" pos:column="38">struct <name pos:line="10" pos:column="45">sockaddr_un<pos:position pos:line="10" pos:column="56"/></name></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call><operator pos:line="10" pos:column="58">)<pos:position pos:line="10" pos:column="59"/></operator> <operator pos:line="10" pos:column="60">==<pos:position pos:line="10" pos:column="62"/></operator> <name pos:line="10" pos:column="63">NULL<pos:position pos:line="10" pos:column="67"/></name></expr>)<pos:position pos:line="10" pos:column="68"/></condition><then pos:line="10" pos:column="68"> <block pos:line="10" pos:column="69">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">free<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><name pos:line="11" pos:column="10">ai<pos:position pos:line="11" pos:column="12"/></name></expr></argument>)<pos:position pos:line="11" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="14"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="14" pos:column="3">/* sun_path must be able to store the NUL-terminated path */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">path_len<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">strlen<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">path<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">path_len<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">&gt;=<pos:position pos:line="16" pos:column="20"/></operator> <sizeof pos:line="16" pos:column="18">sizeof<argument_list pos:line="16" pos:column="24">(<argument><expr><name><name pos:line="16" pos:column="25">sa_un<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">-&gt;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="32">sun_path<pos:position pos:line="16" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></sizeof></expr>)<pos:position pos:line="16" pos:column="42"/></condition><then pos:line="16" pos:column="42"> <block pos:line="16" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">free<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name><name pos:line="17" pos:column="10">ai<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">ai_addr<pos:position pos:line="17" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">free<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><name pos:line="18" pos:column="10">ai<pos:position pos:line="18" pos:column="12"/></name></expr></argument>)<pos:position pos:line="18" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="14"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">NULL<pos:position pos:line="19" pos:column="16"/></name></expr>;<pos:position pos:line="19" pos:column="17"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="22" pos:column="3">ai<pos:position pos:line="22" pos:column="5"/></name><operator pos:line="22" pos:column="5">-&gt;<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="7">ai_family<pos:position pos:line="22" pos:column="16"/></name></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="19">AF_UNIX<pos:position pos:line="22" pos:column="26"/></name></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">ai<pos:position pos:line="23" pos:column="5"/></name><operator pos:line="23" pos:column="5">-&gt;<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="7">ai_socktype<pos:position pos:line="23" pos:column="18"/></name></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">SOCK_STREAM<pos:position pos:line="23" pos:column="32"/></name></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt> <comment type="block" pos:line="23" pos:column="34">/* assume reliable transport for HTTP */</comment>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">ai<pos:position pos:line="24" pos:column="5"/></name><operator pos:line="24" pos:column="5">-&gt;<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="7">ai_addrlen<pos:position pos:line="24" pos:column="17"/></name></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <operator pos:line="24" pos:column="20">(<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="21">curl_socklen_t<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">)<pos:position pos:line="24" pos:column="36"/></operator> <sizeof pos:line="24" pos:column="37">sizeof<argument_list pos:line="24" pos:column="43">(<argument><expr pos:line="24" pos:column="44">struct <name pos:line="24" pos:column="51">sockaddr_un<pos:position pos:line="24" pos:column="62"/></name></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></sizeof></expr>;<pos:position pos:line="24" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">sa_un<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <operator pos:line="25" pos:column="11">(<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="12">void<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">*<pos:position pos:line="25" pos:column="18"/></operator><operator pos:line="25" pos:column="18">)<pos:position pos:line="25" pos:column="19"/></operator> <name><name pos:line="25" pos:column="20">ai<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">-&gt;<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="24">ai_addr<pos:position pos:line="25" pos:column="31"/></name></name></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">sa_un<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">-&gt;<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="10">sun_family<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">AF_UNIX<pos:position pos:line="26" pos:column="30"/></name></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">memcpy<pos:position pos:line="27" pos:column="9"/></name><argument_list pos:line="27" pos:column="9">(<argument><expr><name><name pos:line="27" pos:column="10">sa_un<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">sun_path<pos:position pos:line="27" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="27">path<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="33">path_len<pos:position pos:line="27" pos:column="41"/></name> <operator pos:line="27" pos:column="42">+<pos:position pos:line="27" pos:column="43"/></operator> <literal type="number" pos:line="27" pos:column="44">1<pos:position pos:line="27" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt> <comment type="block" pos:line="27" pos:column="48">/* copy NUL byte */</comment>
  <return pos:line="28" pos:column="3">return <expr><name pos:line="28" pos:column="10">ai<pos:position pos:line="28" pos:column="12"/></name></expr>;<pos:position pos:line="28" pos:column="13"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
