<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_329_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">ftp_pasv_verbose<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name><name pos:line="2" pos:column="18">struct<pos:position pos:line="2" pos:column="24"/></name> <name pos:line="2" pos:column="25">connectdata<pos:position pos:line="2" pos:column="36"/></name></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">conn<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
                 <parameter><decl><type><name pos:line="3" pos:column="18">Curl_ipconnect<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">addr<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>,
                 <parameter><decl><type><name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">newhost<pos:position pos:line="4" pos:column="31"/></name></decl></parameter>, <comment type="block" pos:line="4" pos:column="33">/* ascii version */</comment>
                 <parameter><decl><type><name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">port<pos:position pos:line="5" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="27"/></parameter_list>
<block pos:line="6" pos:column="1">{
<cpp:ifndef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifndef<pos:position pos:line="7" pos:column="8"/></cpp:directive> <name pos:line="7" pos:column="9">ENABLE_IPV6<pos:position pos:line="7" pos:column="20"/></name></cpp:ifndef>
  <comment type="block" format="doxygen" pos:line="8" pos:column="3">/*****************************************************************
   *
   * IPv4-only code section
   */</comment>

  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">in_addr<pos:position pos:line="13" pos:column="17"/></name></name></type> <name pos:line="13" pos:column="18">in<pos:position pos:line="13" pos:column="20"/></name></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">hostent<pos:position pos:line="14" pos:column="17"/></name></name> <modifier pos:line="14" pos:column="18">*<pos:position pos:line="14" pos:column="19"/></modifier></type> <name pos:line="14" pos:column="20">answer<pos:position pos:line="14" pos:column="26"/></name></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>

<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">HAVE_INET_NTOA_R<pos:position pos:line="16" pos:column="24"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name></type> <name><name pos:line="17" pos:column="8">ntoa_buf<pos:position pos:line="17" pos:column="16"/></name><index pos:line="17" pos:column="16">[<expr><literal type="number" pos:line="17" pos:column="17">64<pos:position pos:line="17" pos:column="19"/></literal></expr>]<pos:position pos:line="17" pos:column="20"/></index></name></decl>;<pos:position pos:line="17" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
  <comment type="block" pos:line="19" pos:column="3">/* The array size trick below is to make this a large chunk of memory
     suitably 8-byte aligned on 64-bit platforms. This was thoughtfully
     suggested by Philip Gladstone. */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">long<pos:position pos:line="22" pos:column="7"/></name></type> <name><name pos:line="22" pos:column="8">bigbuf<pos:position pos:line="22" pos:column="14"/></name><index pos:line="22" pos:column="14">[<expr><literal type="number" pos:line="22" pos:column="15">9000<pos:position pos:line="22" pos:column="19"/></literal> <operator pos:line="22" pos:column="20">/<pos:position pos:line="22" pos:column="21"/></operator> <sizeof pos:line="22" pos:column="22">sizeof<argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">long<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></sizeof></expr>]<pos:position pos:line="22" pos:column="35"/></index></name></decl>;<pos:position pos:line="22" pos:column="36"/></decl_stmt>

<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><call><name pos:line="24" pos:column="5">defined<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">HAVE_INET_ADDR<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">in_addr_t<pos:position pos:line="25" pos:column="12"/></name></type> <name pos:line="25" pos:column="13">address<pos:position pos:line="25" pos:column="20"/></name></decl>;<pos:position pos:line="25" pos:column="21"/></decl_stmt>
<cpp:if pos:line="26" pos:column="1"># <cpp:directive pos:line="26" pos:column="3">if<pos:position pos:line="26" pos:column="5"/></cpp:directive> <expr><call><name pos:line="26" pos:column="6">defined<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">HAVE_GETHOSTBYADDR_R<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">int<pos:position pos:line="27" pos:column="6"/></name></type> <name pos:line="27" pos:column="7">h_errnop<pos:position pos:line="27" pos:column="15"/></name></decl>;<pos:position pos:line="27" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="28" pos:column="1"># <cpp:directive pos:line="28" pos:column="3">endif<pos:position pos:line="28" pos:column="8"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="29" pos:column="3">char<pos:position pos:line="29" pos:column="7"/></name> <modifier pos:line="29" pos:column="8">*<pos:position pos:line="29" pos:column="9"/></modifier></type><name pos:line="29" pos:column="9">hostent_buf<pos:position pos:line="29" pos:column="20"/></name> <init pos:line="29" pos:column="21">= <expr><operator pos:line="29" pos:column="23">(<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">char<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">*<pos:position pos:line="29" pos:column="30"/></operator><operator pos:line="29" pos:column="30">)<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="31">bigbuf<pos:position pos:line="29" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="38"/></decl_stmt> <comment type="block" pos:line="29" pos:column="39">/* get a char * to the buffer */</comment>

  <expr_stmt><expr><name pos:line="31" pos:column="3">address<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <call><name pos:line="31" pos:column="13">inet_addr<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">newhost<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
<cpp:ifdef pos:line="32" pos:column="1"># <cpp:directive pos:line="32" pos:column="3">ifdef<pos:position pos:line="32" pos:column="8"/></cpp:directive> <name pos:line="32" pos:column="9">HAVE_GETHOSTBYADDR_R<pos:position pos:line="32" pos:column="29"/></name></cpp:ifdef>

<cpp:ifdef pos:line="34" pos:column="1">#  <cpp:directive pos:line="34" pos:column="4">ifdef<pos:position pos:line="34" pos:column="9"/></cpp:directive> <name pos:line="34" pos:column="10">HAVE_GETHOSTBYADDR_R_5<pos:position pos:line="34" pos:column="32"/></name></cpp:ifdef>
  <comment type="block" pos:line="35" pos:column="3">/* AIX, Digital Unix (OSF1, Tru64) style:
     extern int gethostbyaddr_r(char *addr, size_t len, int type,
     struct hostent *htent, struct hostent_data *ht_data); */</comment>

  <comment type="block" pos:line="39" pos:column="3">/* Fred Noz helped me try this out, now it at least compiles! */</comment>

  <comment type="block" pos:line="41" pos:column="3">/* Bjorn Reese (November 28 2001):
     The Tru64 man page on gethostbyaddr_r() says that
     the hostent struct must be filled with zeroes before the call to
     gethostbyaddr_r(). 

     ... as must be struct hostent_data Craig Markwardt 19 Sep 2002. */</comment>

  <expr_stmt><expr><call><name pos:line="48" pos:column="3">memset<pos:position pos:line="48" pos:column="9"/></name><argument_list pos:line="48" pos:column="9">(<argument><expr><name pos:line="48" pos:column="10">hostent_buf<pos:position pos:line="48" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="23">0<pos:position pos:line="48" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="26">sizeof<argument_list pos:line="48" pos:column="32">(<argument><expr pos:line="48" pos:column="33">struct <name pos:line="48" pos:column="40">hostent<pos:position pos:line="48" pos:column="47"/></name></expr></argument>)<pos:position pos:line="48" pos:column="48"/></argument_list></sizeof><operator pos:line="48" pos:column="48">+<pos:position pos:line="48" pos:column="49"/></operator><sizeof pos:line="48" pos:column="49">sizeof<argument_list pos:line="48" pos:column="55">(<argument><expr pos:line="48" pos:column="56">struct <name pos:line="48" pos:column="63">hostent_data<pos:position pos:line="48" pos:column="75"/></name></expr></argument>)<pos:position pos:line="48" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="78"/></expr_stmt>

  <if pos:line="50" pos:column="3">if<condition pos:line="50" pos:column="5">(<expr><call><name pos:line="50" pos:column="6">gethostbyaddr_r<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><operator pos:line="50" pos:column="22">(<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">char<pos:position pos:line="50" pos:column="27"/></name> <operator pos:line="50" pos:column="28">*<pos:position pos:line="50" pos:column="29"/></operator><operator pos:line="50" pos:column="29">)<pos:position pos:line="50" pos:column="30"/></operator> <operator pos:line="50" pos:column="31">&amp;<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="32">address<pos:position pos:line="50" pos:column="39"/></name></expr></argument>,
                     <argument><expr><sizeof pos:line="51" pos:column="22">sizeof<argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">address<pos:position pos:line="51" pos:column="36"/></name></expr></argument>)<pos:position pos:line="51" pos:column="37"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="51" pos:column="39">AF_INET<pos:position pos:line="51" pos:column="46"/></name></expr></argument>,
                     <argument><expr><operator pos:line="52" pos:column="22">(<pos:position pos:line="52" pos:column="23"/></operator>struct <name pos:line="52" pos:column="30">hostent<pos:position pos:line="52" pos:column="37"/></name> <operator pos:line="52" pos:column="38">*<pos:position pos:line="52" pos:column="39"/></operator><operator pos:line="52" pos:column="39">)<pos:position pos:line="52" pos:column="40"/></operator><name pos:line="52" pos:column="40">hostent_buf<pos:position pos:line="52" pos:column="51"/></name></expr></argument>,
                     <argument><expr><operator pos:line="53" pos:column="22">(<pos:position pos:line="53" pos:column="23"/></operator>struct <name pos:line="53" pos:column="30">hostent_data<pos:position pos:line="53" pos:column="42"/></name> <operator pos:line="53" pos:column="43">*<pos:position pos:line="53" pos:column="44"/></operator><operator pos:line="53" pos:column="44">)<pos:position pos:line="53" pos:column="45"/></operator><operator pos:line="53" pos:column="45">(<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="46">hostent_buf<pos:position pos:line="53" pos:column="57"/></name> <operator pos:line="53" pos:column="58">+<pos:position pos:line="53" pos:column="59"/></operator> <sizeof pos:line="53" pos:column="60">sizeof<argument_list pos:line="53" pos:column="66">(<argument><expr><operator pos:line="53" pos:column="67">*<pos:position pos:line="53" pos:column="68"/></operator><name pos:line="53" pos:column="68">answer<pos:position pos:line="53" pos:column="74"/></name></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></sizeof><operator pos:line="53" pos:column="75">)<pos:position pos:line="53" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="53" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="78"/></condition><then pos:line="53" pos:column="78">
    <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="5">answer<pos:position pos:line="54" pos:column="11"/></name><operator pos:line="54" pos:column="11">=<pos:position pos:line="54" pos:column="12"/></operator><name pos:line="54" pos:column="12">NULL<pos:position pos:line="54" pos:column="16"/></name></expr>;<pos:position pos:line="54" pos:column="17"/></expr_stmt></block></then>
  <else pos:line="55" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="5">answer<pos:position pos:line="56" pos:column="11"/></name><operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator><operator pos:line="56" pos:column="12">(<pos:position pos:line="56" pos:column="13"/></operator>struct <name pos:line="56" pos:column="20">hostent<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">*<pos:position pos:line="56" pos:column="29"/></operator><operator pos:line="56" pos:column="29">)<pos:position pos:line="56" pos:column="30"/></operator><name pos:line="56" pos:column="30">hostent_buf<pos:position pos:line="56" pos:column="41"/></name></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt></block></else></if>
                           
<cpp:endif pos:line="58" pos:column="1">#  <cpp:directive pos:line="58" pos:column="4">endif<pos:position pos:line="58" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="59" pos:column="1">#  <cpp:directive pos:line="59" pos:column="4">ifdef<pos:position pos:line="59" pos:column="9"/></cpp:directive> <name pos:line="59" pos:column="10">HAVE_GETHOSTBYADDR_R_7<pos:position pos:line="59" pos:column="32"/></name></cpp:ifdef>
  <comment type="block" pos:line="60" pos:column="3">/* Solaris and IRIX */</comment>
  <expr_stmt><expr><name pos:line="61" pos:column="3">answer<pos:position pos:line="61" pos:column="9"/></name> <operator pos:line="61" pos:column="10">=<pos:position pos:line="61" pos:column="11"/></operator> <call><name pos:line="61" pos:column="12">gethostbyaddr_r<pos:position pos:line="61" pos:column="27"/></name><argument_list pos:line="61" pos:column="27">(<argument><expr><operator pos:line="61" pos:column="28">(<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="29">char<pos:position pos:line="61" pos:column="33"/></name> <operator pos:line="61" pos:column="34">*<pos:position pos:line="61" pos:column="35"/></operator><operator pos:line="61" pos:column="35">)<pos:position pos:line="61" pos:column="36"/></operator> <operator pos:line="61" pos:column="37">&amp;<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="38">address<pos:position pos:line="61" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="47">sizeof<argument_list pos:line="61" pos:column="53">(<argument><expr><name pos:line="61" pos:column="54">address<pos:position pos:line="61" pos:column="61"/></name></expr></argument>)<pos:position pos:line="61" pos:column="62"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="61" pos:column="64">AF_INET<pos:position pos:line="61" pos:column="71"/></name></expr></argument>,
                           <argument><expr><operator pos:line="62" pos:column="28">(<pos:position pos:line="62" pos:column="29"/></operator>struct <name pos:line="62" pos:column="36">hostent<pos:position pos:line="62" pos:column="43"/></name> <operator pos:line="62" pos:column="44">*<pos:position pos:line="62" pos:column="45"/></operator><operator pos:line="62" pos:column="45">)<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="46">bigbuf<pos:position pos:line="62" pos:column="52"/></name></expr></argument>,
                           <argument><expr><name pos:line="63" pos:column="28">hostent_buf<pos:position pos:line="63" pos:column="39"/></name> <operator pos:line="63" pos:column="40">+<pos:position pos:line="63" pos:column="41"/></operator> <sizeof pos:line="63" pos:column="42">sizeof<argument_list pos:line="63" pos:column="48">(<argument><expr><operator pos:line="63" pos:column="49">*<pos:position pos:line="63" pos:column="50"/></operator><name pos:line="63" pos:column="50">answer<pos:position pos:line="63" pos:column="56"/></name></expr></argument>)<pos:position pos:line="63" pos:column="57"/></argument_list></sizeof></expr></argument>,
                           <argument><expr><sizeof pos:line="64" pos:column="28">sizeof<argument_list pos:line="64" pos:column="34">(<argument><expr><name pos:line="64" pos:column="35">bigbuf<pos:position pos:line="64" pos:column="41"/></name></expr></argument>)<pos:position pos:line="64" pos:column="42"/></argument_list></sizeof> <operator pos:line="64" pos:column="43">-<pos:position pos:line="64" pos:column="44"/></operator> <sizeof pos:line="64" pos:column="45">sizeof<argument_list pos:line="64" pos:column="51">(<argument><expr><operator pos:line="64" pos:column="52">*<pos:position pos:line="64" pos:column="53"/></operator><name pos:line="64" pos:column="53">answer<pos:position pos:line="64" pos:column="59"/></name></expr></argument>)<pos:position pos:line="64" pos:column="60"/></argument_list></sizeof></expr></argument>,
                           <argument><expr><operator pos:line="65" pos:column="28">&amp;<pos:position pos:line="65" pos:column="33"/></operator><name pos:line="65" pos:column="29">h_errnop<pos:position pos:line="65" pos:column="37"/></name></expr></argument>)<pos:position pos:line="65" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="66" pos:column="1">#  <cpp:directive pos:line="66" pos:column="4">endif<pos:position pos:line="66" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="67" pos:column="1">#  <cpp:directive pos:line="67" pos:column="4">ifdef<pos:position pos:line="67" pos:column="9"/></cpp:directive> <name pos:line="67" pos:column="10">HAVE_GETHOSTBYADDR_R_8<pos:position pos:line="67" pos:column="32"/></name></cpp:ifdef>
  <comment type="block" pos:line="68" pos:column="3">/* Linux style */</comment>
  <if pos:line="69" pos:column="3">if<condition pos:line="69" pos:column="5">(<expr><call><name pos:line="69" pos:column="6">gethostbyaddr_r<pos:position pos:line="69" pos:column="21"/></name><argument_list pos:line="69" pos:column="21">(<argument><expr><operator pos:line="69" pos:column="22">(<pos:position pos:line="69" pos:column="23"/></operator><name pos:line="69" pos:column="23">char<pos:position pos:line="69" pos:column="27"/></name> <operator pos:line="69" pos:column="28">*<pos:position pos:line="69" pos:column="29"/></operator><operator pos:line="69" pos:column="29">)<pos:position pos:line="69" pos:column="30"/></operator> <operator pos:line="69" pos:column="31">&amp;<pos:position pos:line="69" pos:column="36"/></operator><name pos:line="69" pos:column="32">address<pos:position pos:line="69" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="41">sizeof<argument_list pos:line="69" pos:column="47">(<argument><expr><name pos:line="69" pos:column="48">address<pos:position pos:line="69" pos:column="55"/></name></expr></argument>)<pos:position pos:line="69" pos:column="56"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="69" pos:column="58">AF_INET<pos:position pos:line="69" pos:column="65"/></name></expr></argument>,
                     <argument><expr><operator pos:line="70" pos:column="22">(<pos:position pos:line="70" pos:column="23"/></operator>struct <name pos:line="70" pos:column="30">hostent<pos:position pos:line="70" pos:column="37"/></name> <operator pos:line="70" pos:column="38">*<pos:position pos:line="70" pos:column="39"/></operator><operator pos:line="70" pos:column="39">)<pos:position pos:line="70" pos:column="40"/></operator><name pos:line="70" pos:column="40">hostent_buf<pos:position pos:line="70" pos:column="51"/></name></expr></argument>,
                     <argument><expr><name pos:line="71" pos:column="22">hostent_buf<pos:position pos:line="71" pos:column="33"/></name> <operator pos:line="71" pos:column="34">+<pos:position pos:line="71" pos:column="35"/></operator> <sizeof pos:line="71" pos:column="36">sizeof<argument_list pos:line="71" pos:column="42">(<argument><expr><operator pos:line="71" pos:column="43">*<pos:position pos:line="71" pos:column="44"/></operator><name pos:line="71" pos:column="44">answer<pos:position pos:line="71" pos:column="50"/></name></expr></argument>)<pos:position pos:line="71" pos:column="51"/></argument_list></sizeof></expr></argument>,
                     <argument><expr><sizeof pos:line="72" pos:column="22">sizeof<argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">bigbuf<pos:position pos:line="72" pos:column="35"/></name></expr></argument>)<pos:position pos:line="72" pos:column="36"/></argument_list></sizeof> <operator pos:line="72" pos:column="37">-<pos:position pos:line="72" pos:column="38"/></operator> <sizeof pos:line="72" pos:column="39">sizeof<argument_list pos:line="72" pos:column="45">(<argument><expr><operator pos:line="72" pos:column="46">*<pos:position pos:line="72" pos:column="47"/></operator><name pos:line="72" pos:column="47">answer<pos:position pos:line="72" pos:column="53"/></name></expr></argument>)<pos:position pos:line="72" pos:column="54"/></argument_list></sizeof></expr></argument>,
                     <argument><expr><operator pos:line="73" pos:column="22">&amp;<pos:position pos:line="73" pos:column="27"/></operator><name pos:line="73" pos:column="23">answer<pos:position pos:line="73" pos:column="29"/></name></expr></argument>,
                     <argument><expr><operator pos:line="74" pos:column="22">&amp;<pos:position pos:line="74" pos:column="27"/></operator><name pos:line="74" pos:column="23">h_errnop<pos:position pos:line="74" pos:column="31"/></name></expr></argument>)<pos:position pos:line="74" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="33"/></condition><then pos:line="74" pos:column="33">
    <block type="pseudo"><expr_stmt><expr><name pos:line="75" pos:column="5">answer<pos:position pos:line="75" pos:column="11"/></name><operator pos:line="75" pos:column="11">=<pos:position pos:line="75" pos:column="12"/></operator><name pos:line="75" pos:column="12">NULL<pos:position pos:line="75" pos:column="16"/></name></expr>;<pos:position pos:line="75" pos:column="17"/></expr_stmt></block></then></if> <comment type="block" pos:line="75" pos:column="18">/* error */</comment>
<cpp:endif pos:line="76" pos:column="1">#  <cpp:directive pos:line="76" pos:column="4">endif<pos:position pos:line="76" pos:column="9"/></cpp:directive></cpp:endif>
        
<cpp:else pos:line="78" pos:column="1"># <cpp:directive pos:line="78" pos:column="3">else<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="79" pos:column="3">answer<pos:position pos:line="79" pos:column="9"/></name> <operator pos:line="79" pos:column="10">=<pos:position pos:line="79" pos:column="11"/></operator> <call><name pos:line="79" pos:column="12">gethostbyaddr<pos:position pos:line="79" pos:column="25"/></name><argument_list pos:line="79" pos:column="25">(<argument><expr><operator pos:line="79" pos:column="26">(<pos:position pos:line="79" pos:column="27"/></operator><name pos:line="79" pos:column="27">char<pos:position pos:line="79" pos:column="31"/></name> <operator pos:line="79" pos:column="32">*<pos:position pos:line="79" pos:column="33"/></operator><operator pos:line="79" pos:column="33">)<pos:position pos:line="79" pos:column="34"/></operator> <operator pos:line="79" pos:column="35">&amp;<pos:position pos:line="79" pos:column="40"/></operator><name pos:line="79" pos:column="36">address<pos:position pos:line="79" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="79" pos:column="45">sizeof<argument_list pos:line="79" pos:column="51">(<argument><expr><name pos:line="79" pos:column="52">address<pos:position pos:line="79" pos:column="59"/></name></expr></argument>)<pos:position pos:line="79" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="79" pos:column="62">AF_INET<pos:position pos:line="79" pos:column="69"/></name></expr></argument>)<pos:position pos:line="79" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="71"/></expr_stmt>
<cpp:endif pos:line="80" pos:column="1"># <cpp:directive pos:line="80" pos:column="3">endif<pos:position pos:line="80" pos:column="8"/></cpp:directive></cpp:endif>
<cpp:else pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">else<pos:position pos:line="81" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="82" pos:column="3">answer<pos:position pos:line="82" pos:column="9"/></name> <operator pos:line="82" pos:column="10">=<pos:position pos:line="82" pos:column="11"/></operator> <name pos:line="82" pos:column="12">NULL<pos:position pos:line="82" pos:column="16"/></name></expr>;<pos:position pos:line="82" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">endif<pos:position pos:line="83" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><operator pos:line="84" pos:column="3">(<pos:position pos:line="84" pos:column="4"/></operator><name pos:line="84" pos:column="4">void<pos:position pos:line="84" pos:column="8"/></name><operator pos:line="84" pos:column="8">)<pos:position pos:line="84" pos:column="9"/></operator> <call><name pos:line="84" pos:column="10">memcpy<pos:position pos:line="84" pos:column="16"/></name><argument_list pos:line="84" pos:column="16">(<argument><expr><operator pos:line="84" pos:column="17">&amp;<pos:position pos:line="84" pos:column="22"/></operator><name><name pos:line="84" pos:column="18">in<pos:position pos:line="84" pos:column="20"/></name><operator pos:line="84" pos:column="20">.<pos:position pos:line="84" pos:column="21"/></operator><name pos:line="84" pos:column="21">s_addr<pos:position pos:line="84" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="29">addr<pos:position pos:line="84" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="84" pos:column="35">sizeof <argument_list pos:line="84" pos:column="42">(<argument><expr><name pos:line="84" pos:column="43">Curl_ipconnect<pos:position pos:line="84" pos:column="57"/></name></expr></argument>)<pos:position pos:line="84" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="84" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="85" pos:column="3">infof<pos:position pos:line="85" pos:column="8"/></name><argument_list pos:line="85" pos:column="8">(<argument><expr><name><name pos:line="85" pos:column="9">conn<pos:position pos:line="85" pos:column="13"/></name><operator pos:line="85" pos:column="13">-&gt;<pos:position pos:line="85" pos:column="18"/></operator><name pos:line="85" pos:column="15">data<pos:position pos:line="85" pos:column="19"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="21">"Connecting to %s (%s) port %u\n"<pos:position pos:line="85" pos:column="54"/></literal></expr></argument>,
        <argument><expr><ternary><condition><expr><name pos:line="86" pos:column="9">answer<pos:position pos:line="86" pos:column="15"/></name></expr>?<pos:position pos:line="86" pos:column="16"/></condition><then><expr><name><name pos:line="86" pos:column="16">answer<pos:position pos:line="86" pos:column="22"/></name><operator pos:line="86" pos:column="22">-&gt;<pos:position pos:line="86" pos:column="27"/></operator><name pos:line="86" pos:column="24">h_name<pos:position pos:line="86" pos:column="30"/></name></name></expr></then><else pos:line="86" pos:column="30">:<expr><name pos:line="86" pos:column="31">newhost<pos:position pos:line="86" pos:column="38"/></name></expr></else></ternary></expr></argument>,
<cpp:if pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">if<pos:position pos:line="87" pos:column="4"/></cpp:directive> <expr><call><name pos:line="87" pos:column="5">defined<pos:position pos:line="87" pos:column="12"/></name><argument_list pos:line="87" pos:column="12">(<argument><expr><name pos:line="87" pos:column="13">HAVE_INET_NTOA_R<pos:position pos:line="87" pos:column="29"/></name></expr></argument>)<pos:position pos:line="87" pos:column="30"/></argument_list></call></expr></cpp:if>
        <argument><expr><call><name pos:line="88" pos:column="9">inet_ntoa_r<pos:position pos:line="88" pos:column="20"/></name><argument_list pos:line="88" pos:column="20">(<argument><expr><name pos:line="88" pos:column="21">in<pos:position pos:line="88" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="25">ntoa_buf<pos:position pos:line="88" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="88" pos:column="35">sizeof<argument_list pos:line="88" pos:column="41">(<argument><expr><name pos:line="88" pos:column="42">ntoa_buf<pos:position pos:line="88" pos:column="50"/></name></expr></argument>)<pos:position pos:line="88" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="88" pos:column="52"/></argument_list></call></expr></argument>,
<cpp:else pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">else<pos:position pos:line="89" pos:column="6"/></cpp:directive></cpp:else>
        <argument><expr><call><name pos:line="90" pos:column="9">inet_ntoa<pos:position pos:line="90" pos:column="18"/></name><argument_list pos:line="90" pos:column="18">(<argument><expr><name pos:line="90" pos:column="19">in<pos:position pos:line="90" pos:column="21"/></name></expr></argument>)<pos:position pos:line="90" pos:column="22"/></argument_list></call></expr></argument>,
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif>
        <argument><expr><name pos:line="92" pos:column="9">port<pos:position pos:line="92" pos:column="13"/></name></expr></argument>)<pos:position pos:line="92" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="15"/></expr_stmt>

<cpp:else pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">else<pos:position pos:line="94" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" format="doxygen" pos:line="95" pos:column="3">/*****************************************************************
   *
   * IPv6-only code section
   */</comment>
  <decl_stmt><decl><type><name pos:line="99" pos:column="3">char<pos:position pos:line="99" pos:column="7"/></name></type> <name><name pos:line="99" pos:column="8">hbuf<pos:position pos:line="99" pos:column="12"/></name><index pos:line="99" pos:column="12">[<expr><name pos:line="99" pos:column="13">NI_MAXHOST<pos:position pos:line="99" pos:column="23"/></name></expr>]<pos:position pos:line="99" pos:column="24"/></index></name></decl>;<pos:position pos:line="99" pos:column="25"/></decl_stmt> <comment type="block" pos:line="99" pos:column="26">/* ~1KB */</comment>
  <decl_stmt><decl><type><name pos:line="100" pos:column="3">char<pos:position pos:line="100" pos:column="7"/></name></type> <name><name pos:line="100" pos:column="8">nbuf<pos:position pos:line="100" pos:column="12"/></name><index pos:line="100" pos:column="12">[<expr><name pos:line="100" pos:column="13">NI_MAXHOST<pos:position pos:line="100" pos:column="23"/></name></expr>]<pos:position pos:line="100" pos:column="24"/></index></name></decl>;<pos:position pos:line="100" pos:column="25"/></decl_stmt> <comment type="block" pos:line="100" pos:column="26">/* ~1KB */</comment>
  <decl_stmt><decl><type><name pos:line="101" pos:column="3">char<pos:position pos:line="101" pos:column="7"/></name></type> <name><name pos:line="101" pos:column="8">sbuf<pos:position pos:line="101" pos:column="12"/></name><index pos:line="101" pos:column="12">[<expr><name pos:line="101" pos:column="13">NI_MAXSERV<pos:position pos:line="101" pos:column="23"/></name></expr>]<pos:position pos:line="101" pos:column="24"/></index></name></decl>;<pos:position pos:line="101" pos:column="25"/></decl_stmt> <comment type="block" pos:line="101" pos:column="26">/* around 32 */</comment>
<cpp:ifdef pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">ifdef<pos:position pos:line="102" pos:column="7"/></cpp:directive> <name pos:line="102" pos:column="8">NI_WITHSCOPEID<pos:position pos:line="102" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><specifier pos:line="103" pos:column="3">const<pos:position pos:line="103" pos:column="8"/></specifier> <name pos:line="103" pos:column="9">int<pos:position pos:line="103" pos:column="12"/></name></type> <name pos:line="103" pos:column="13">niflags<pos:position pos:line="103" pos:column="20"/></name> <init pos:line="103" pos:column="21">= <expr><name pos:line="103" pos:column="23">NI_NUMERICHOST<pos:position pos:line="103" pos:column="37"/></name> <operator pos:line="103" pos:column="38">|<pos:position pos:line="103" pos:column="39"/></operator> <name pos:line="103" pos:column="40">NI_NUMERICSERV<pos:position pos:line="103" pos:column="54"/></name> <operator pos:line="103" pos:column="55">|<pos:position pos:line="103" pos:column="56"/></operator> <name pos:line="103" pos:column="57">NI_WITHSCOPEID<pos:position pos:line="103" pos:column="71"/></name></expr></init></decl>;<pos:position pos:line="103" pos:column="72"/></decl_stmt>
<cpp:else pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">else<pos:position pos:line="104" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier pos:line="105" pos:column="3">const<pos:position pos:line="105" pos:column="8"/></specifier> <name pos:line="105" pos:column="9">int<pos:position pos:line="105" pos:column="12"/></name></type> <name pos:line="105" pos:column="13">niflags<pos:position pos:line="105" pos:column="20"/></name> <init pos:line="105" pos:column="21">= <expr><name pos:line="105" pos:column="23">NI_NUMERICHOST<pos:position pos:line="105" pos:column="37"/></name> <operator pos:line="105" pos:column="38">|<pos:position pos:line="105" pos:column="39"/></operator> <name pos:line="105" pos:column="40">NI_NUMERICSERV<pos:position pos:line="105" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="105" pos:column="55"/></decl_stmt>
<cpp:endif pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">endif<pos:position pos:line="106" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name pos:line="107" pos:column="3">port<pos:position pos:line="107" pos:column="7"/></name> <operator pos:line="107" pos:column="8">=<pos:position pos:line="107" pos:column="9"/></operator> <literal type="number" pos:line="107" pos:column="10">0<pos:position pos:line="107" pos:column="11"/></literal></expr>;<pos:position pos:line="107" pos:column="12"/></expr_stmt> <comment type="block" pos:line="107" pos:column="13">/* unused, prevent warning */</comment>
  <if pos:line="108" pos:column="3">if <condition pos:line="108" pos:column="6">(<expr><call><name pos:line="108" pos:column="7">getnameinfo<pos:position pos:line="108" pos:column="18"/></name><argument_list pos:line="108" pos:column="18">(<argument><expr><name><name pos:line="108" pos:column="19">addr<pos:position pos:line="108" pos:column="23"/></name><operator pos:line="108" pos:column="23">-&gt;<pos:position pos:line="108" pos:column="28"/></operator><name pos:line="108" pos:column="25">ai_addr<pos:position pos:line="108" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="34">addr<pos:position pos:line="108" pos:column="38"/></name><operator pos:line="108" pos:column="38">-&gt;<pos:position pos:line="108" pos:column="43"/></operator><name pos:line="108" pos:column="40">ai_addrlen<pos:position pos:line="108" pos:column="50"/></name></name></expr></argument>,
                  <argument><expr><name pos:line="109" pos:column="19">nbuf<pos:position pos:line="109" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="109" pos:column="25">sizeof<argument_list pos:line="109" pos:column="31">(<argument><expr><name pos:line="109" pos:column="32">nbuf<pos:position pos:line="109" pos:column="36"/></name></expr></argument>)<pos:position pos:line="109" pos:column="37"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="109" pos:column="39">sbuf<pos:position pos:line="109" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="109" pos:column="45">sizeof<argument_list pos:line="109" pos:column="51">(<argument><expr><name pos:line="109" pos:column="52">sbuf<pos:position pos:line="109" pos:column="56"/></name></expr></argument>)<pos:position pos:line="109" pos:column="57"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="109" pos:column="59">niflags<pos:position pos:line="109" pos:column="66"/></name></expr></argument>)<pos:position pos:line="109" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="68"/></condition><then pos:line="109" pos:column="68"> <block pos:line="109" pos:column="69">{
    <expr_stmt><expr><call><name pos:line="110" pos:column="5">snprintf<pos:position pos:line="110" pos:column="13"/></name><argument_list pos:line="110" pos:column="13">(<argument><expr><name pos:line="110" pos:column="14">nbuf<pos:position pos:line="110" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="110" pos:column="20">sizeof<argument_list pos:line="110" pos:column="26">(<argument><expr><name pos:line="110" pos:column="27">nbuf<pos:position pos:line="110" pos:column="31"/></name></expr></argument>)<pos:position pos:line="110" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="34">"?"<pos:position pos:line="110" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="111" pos:column="5">snprintf<pos:position pos:line="111" pos:column="13"/></name><argument_list pos:line="111" pos:column="13">(<argument><expr><name pos:line="111" pos:column="14">sbuf<pos:position pos:line="111" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="111" pos:column="20">sizeof<argument_list pos:line="111" pos:column="26">(<argument><expr><name pos:line="111" pos:column="27">sbuf<pos:position pos:line="111" pos:column="31"/></name></expr></argument>)<pos:position pos:line="111" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="34">"?"<pos:position pos:line="111" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="112" pos:column="4"/></block></then></if>
        
  <if pos:line="114" pos:column="3">if <condition pos:line="114" pos:column="6">(<expr><call><name pos:line="114" pos:column="7">getnameinfo<pos:position pos:line="114" pos:column="18"/></name><argument_list pos:line="114" pos:column="18">(<argument><expr><name><name pos:line="114" pos:column="19">addr<pos:position pos:line="114" pos:column="23"/></name><operator pos:line="114" pos:column="23">-&gt;<pos:position pos:line="114" pos:column="28"/></operator><name pos:line="114" pos:column="25">ai_addr<pos:position pos:line="114" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="34">addr<pos:position pos:line="114" pos:column="38"/></name><operator pos:line="114" pos:column="38">-&gt;<pos:position pos:line="114" pos:column="43"/></operator><name pos:line="114" pos:column="40">ai_addrlen<pos:position pos:line="114" pos:column="50"/></name></name></expr></argument>,
                  <argument><expr><name pos:line="115" pos:column="19">hbuf<pos:position pos:line="115" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="115" pos:column="25">sizeof<argument_list pos:line="115" pos:column="31">(<argument><expr><name pos:line="115" pos:column="32">hbuf<pos:position pos:line="115" pos:column="36"/></name></expr></argument>)<pos:position pos:line="115" pos:column="37"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="115" pos:column="39">NULL<pos:position pos:line="115" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="45">0<pos:position pos:line="115" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="48">0<pos:position pos:line="115" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="115" pos:column="51"/></condition><then pos:line="115" pos:column="51"> <block pos:line="115" pos:column="52">{
    <expr_stmt><expr><call><name pos:line="116" pos:column="5">infof<pos:position pos:line="116" pos:column="10"/></name><argument_list pos:line="116" pos:column="10">(<argument><expr><name><name pos:line="116" pos:column="11">conn<pos:position pos:line="116" pos:column="15"/></name><operator pos:line="116" pos:column="15">-&gt;<pos:position pos:line="116" pos:column="20"/></operator><name pos:line="116" pos:column="17">data<pos:position pos:line="116" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="23">"Connecting to %s (%s) port %s\n"<pos:position pos:line="116" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="58">nbuf<pos:position pos:line="116" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="64">newhost<pos:position pos:line="116" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="73">sbuf<pos:position pos:line="116" pos:column="77"/></name></expr></argument>)<pos:position pos:line="116" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="79"/></expr_stmt>
  }<pos:position pos:line="117" pos:column="4"/></block></then>
  <else pos:line="118" pos:column="3">else <block pos:line="118" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">infof<pos:position pos:line="119" pos:column="10"/></name><argument_list pos:line="119" pos:column="10">(<argument><expr><name><name pos:line="119" pos:column="11">conn<pos:position pos:line="119" pos:column="15"/></name><operator pos:line="119" pos:column="15">-&gt;<pos:position pos:line="119" pos:column="20"/></operator><name pos:line="119" pos:column="17">data<pos:position pos:line="119" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="23">"Connecting to %s (%s) port %s\n"<pos:position pos:line="119" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="119" pos:column="58">hbuf<pos:position pos:line="119" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="64">nbuf<pos:position pos:line="119" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="70">sbuf<pos:position pos:line="119" pos:column="74"/></name></expr></argument>)<pos:position pos:line="119" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="76"/></expr_stmt>
  }<pos:position pos:line="120" pos:column="4"/></block></else></if>
<cpp:endif pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">endif<pos:position pos:line="121" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
