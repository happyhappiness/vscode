<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_243_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">Transfer<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name><name pos:line="2" pos:column="10">struct<pos:position pos:line="2" pos:column="16"/></name> <name pos:line="2" pos:column="17">connectdata<pos:position pos:line="2" pos:column="28"/></name></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">conn<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_transfer_keeper<pos:position pos:line="5" pos:column="30"/></name></name> <modifier pos:line="5" pos:column="31">*<pos:position pos:line="5" pos:column="32"/></modifier></type><name pos:line="5" pos:column="32">k<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><operator pos:line="5" pos:column="36">&amp;<pos:position pos:line="5" pos:column="41"/></operator><name><name pos:line="5" pos:column="37">conn<pos:position pos:line="5" pos:column="41"/></name><operator pos:line="5" pos:column="41">-&gt;<pos:position pos:line="5" pos:column="46"/></operator><name pos:line="5" pos:column="43">keep<pos:position pos:line="5" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">done<pos:position pos:line="6" pos:column="12"/></name><init pos:line="6" pos:column="12">=<expr><name pos:line="6" pos:column="13">FALSE<pos:position pos:line="6" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><operator pos:line="8" pos:column="7">(<pos:position pos:line="8" pos:column="8"/></operator><name><name pos:line="8" pos:column="8">conn<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">protocol<pos:position pos:line="8" pos:column="22"/></name></name> <operator pos:line="8" pos:column="23">&amp;<pos:position pos:line="8" pos:column="28"/></operator> <name pos:line="8" pos:column="25">PROT_FILE<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">)<pos:position pos:line="8" pos:column="35"/></operator></expr>)<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36">
    <comment type="block" pos:line="9" pos:column="5">/* Only do this if we are not transferring FILE:, since the file: treatment
       is different*/</comment>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="5">Curl_readwrite_init<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">conn<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt></block></then></if>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><operator pos:line="13" pos:column="6">(<pos:position pos:line="13" pos:column="7"/></operator><name><name pos:line="13" pos:column="7">conn<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">-&gt;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="13">sockfd<pos:position pos:line="13" pos:column="19"/></name></name> <operator pos:line="13" pos:column="20">==<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">CURL_SOCKET_BAD<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">)<pos:position pos:line="13" pos:column="39"/></operator> <operator pos:line="13" pos:column="40">&amp;&amp;<pos:position pos:line="13" pos:column="50"/></operator>
     <operator pos:line="14" pos:column="6">(<pos:position pos:line="14" pos:column="7"/></operator><name><name pos:line="14" pos:column="7">conn<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">-&gt;<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="13">writesockfd<pos:position pos:line="14" pos:column="24"/></name></name> <operator pos:line="14" pos:column="25">==<pos:position pos:line="14" pos:column="27"/></operator> <name pos:line="14" pos:column="28">CURL_SOCKET_BAD<pos:position pos:line="14" pos:column="43"/></name><operator pos:line="14" pos:column="43">)<pos:position pos:line="14" pos:column="44"/></operator></expr>)<pos:position pos:line="14" pos:column="45"/></condition><then pos:line="14" pos:column="45">
    <comment type="block" pos:line="15" pos:column="5">/* nothing to read, nothing to write, we're already OK! */</comment>
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">CURLE_OK<pos:position pos:line="16" pos:column="20"/></name></expr>;<pos:position pos:line="16" pos:column="21"/></return></block></then></if>

  <comment type="block" pos:line="18" pos:column="3">/* we want header and/or body, if neither then don't do this! */</comment>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><operator pos:line="19" pos:column="6">!<pos:position pos:line="19" pos:column="7"/></operator><name><name pos:line="19" pos:column="7">conn<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">bits<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">.<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">getheader<pos:position pos:line="19" pos:column="27"/></name></name> <operator pos:line="19" pos:column="28">&amp;&amp;<pos:position pos:line="19" pos:column="38"/></operator> <name><name pos:line="19" pos:column="31">conn<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">-&gt;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="37">bits<pos:position pos:line="19" pos:column="41"/></name><operator pos:line="19" pos:column="41">.<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="42">no_body<pos:position pos:line="19" pos:column="49"/></name></name></expr>)<pos:position pos:line="19" pos:column="50"/></condition><then pos:line="19" pos:column="50">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">CURLE_OK<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></return></block></then></if>

  <while pos:line="22" pos:column="3">while <condition pos:line="22" pos:column="9">(<expr><operator pos:line="22" pos:column="10">!<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">done<pos:position pos:line="22" pos:column="15"/></name></expr>)<pos:position pos:line="22" pos:column="16"/></condition> <block pos:line="22" pos:column="17">{
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">curl_socket_t<pos:position pos:line="23" pos:column="18"/></name></type> <name pos:line="23" pos:column="19">fd_read<pos:position pos:line="23" pos:column="26"/></name></decl>;<pos:position pos:line="23" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">curl_socket_t<pos:position pos:line="24" pos:column="18"/></name></type> <name pos:line="24" pos:column="19">fd_write<pos:position pos:line="24" pos:column="27"/></name></decl>;<pos:position pos:line="24" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">int<pos:position pos:line="25" pos:column="8"/></name></type> <name pos:line="25" pos:column="9">interval_ms<pos:position pos:line="25" pos:column="20"/></name></decl>;<pos:position pos:line="25" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">interval_ms<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <literal type="number" pos:line="27" pos:column="19">1<pos:position pos:line="27" pos:column="20"/></literal> <operator pos:line="27" pos:column="21">*<pos:position pos:line="27" pos:column="22"/></operator> <literal type="number" pos:line="27" pos:column="23">1000<pos:position pos:line="27" pos:column="27"/></literal></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>

    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><name><name pos:line="29" pos:column="8">k<pos:position pos:line="29" pos:column="9"/></name><operator pos:line="29" pos:column="9">-&gt;<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="11">keepon<pos:position pos:line="29" pos:column="17"/></name></name> <operator pos:line="29" pos:column="18">&amp;<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="20">KEEP_READ<pos:position pos:line="29" pos:column="29"/></name></expr>)<pos:position pos:line="29" pos:column="30"/></condition><then pos:line="29" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="7">fd_read<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <name><name pos:line="30" pos:column="17">conn<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">-&gt;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="23">sockfd<pos:position pos:line="30" pos:column="29"/></name></name></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt></block></then>
    <else pos:line="31" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="7">fd_read<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="32" pos:column="32"/></name></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt></block></else></if>

    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name><name pos:line="34" pos:column="8">k<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">keepon<pos:position pos:line="34" pos:column="17"/></name></name> <operator pos:line="34" pos:column="18">&amp;<pos:position pos:line="34" pos:column="23"/></operator> <name pos:line="34" pos:column="20">KEEP_WRITE<pos:position pos:line="34" pos:column="30"/></name></expr>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="7">fd_write<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <name><name pos:line="35" pos:column="18">conn<pos:position pos:line="35" pos:column="22"/></name><operator pos:line="35" pos:column="22">-&gt;<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="24">writesockfd<pos:position pos:line="35" pos:column="35"/></name></name></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt></block></then>
    <else pos:line="36" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="7">fd_write<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <name pos:line="37" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="37" pos:column="33"/></name></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt></block></else></if>

    <switch pos:line="39" pos:column="5">switch <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">Curl_select<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">fd_read<pos:position pos:line="39" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="34">fd_write<pos:position pos:line="39" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="44">interval_ms<pos:position pos:line="39" pos:column="55"/></name></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="57"/></condition> <block pos:line="39" pos:column="58">{
    <case pos:line="40" pos:column="5">case <expr><operator pos:line="40" pos:column="10">-<pos:position pos:line="40" pos:column="11"/></operator><literal type="number" pos:line="40" pos:column="11">1<pos:position pos:line="40" pos:column="12"/></literal></expr>:<pos:position pos:line="40" pos:column="13"/></case> <comment type="block" pos:line="40" pos:column="14">/* select() error, stop reading */</comment>
<cpp:ifdef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifdef<pos:position pos:line="41" pos:column="7"/></cpp:directive> <name pos:line="41" pos:column="8">EINTR<pos:position pos:line="41" pos:column="13"/></name></cpp:ifdef>
      <comment type="block" pos:line="42" pos:column="7">/* The EINTR is not serious, and it seems you might get this more
         ofen when using the lib in a multi-threaded environment! */</comment>
      <if pos:line="44" pos:column="7">if<condition pos:line="44" pos:column="9">(<expr><name pos:line="44" pos:column="10">errno<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">==<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">EINTR<pos:position pos:line="44" pos:column="24"/></name></expr>)<pos:position pos:line="44" pos:column="25"/></condition><then pos:line="44" pos:column="25">
        <block type="pseudo"><empty_stmt pos:line="45" pos:column="9">;<pos:position pos:line="45" pos:column="10"/></empty_stmt></block></then>
      <else pos:line="46" pos:column="7">else
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="9">done<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <name pos:line="48" pos:column="16">TRUE<pos:position pos:line="48" pos:column="20"/></name></expr>;<pos:position pos:line="48" pos:column="21"/></expr_stmt></block></else></if> <comment type="block" pos:line="48" pos:column="22">/* no more read or write */</comment>
      <continue pos:line="49" pos:column="7">continue;<pos:position pos:line="49" pos:column="16"/></continue>
    <case pos:line="50" pos:column="5">case <expr><literal type="number" pos:line="50" pos:column="10">0<pos:position pos:line="50" pos:column="11"/></literal></expr>:<pos:position pos:line="50" pos:column="12"/></case>  <comment type="block" pos:line="50" pos:column="14">/* timeout */</comment>
    <default pos:line="51" pos:column="5">default:<pos:position pos:line="51" pos:column="13"/></default> <comment type="block" pos:line="51" pos:column="14">/* readable descriptors */</comment>
      <expr_stmt><expr><name pos:line="52" pos:column="7">result<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">=<pos:position pos:line="52" pos:column="15"/></operator> <call><name pos:line="52" pos:column="16">Curl_readwrite<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><name pos:line="52" pos:column="31">conn<pos:position pos:line="52" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="37">&amp;<pos:position pos:line="52" pos:column="42"/></operator><name pos:line="52" pos:column="38">done<pos:position pos:line="52" pos:column="42"/></name></expr></argument>)<pos:position pos:line="52" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>
      <break pos:line="53" pos:column="7">break;<pos:position pos:line="53" pos:column="13"/></break>
    }<pos:position pos:line="54" pos:column="6"/></block></switch>
    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">(<expr><name pos:line="55" pos:column="8">result<pos:position pos:line="55" pos:column="14"/></name></expr>)<pos:position pos:line="55" pos:column="15"/></condition><then pos:line="55" pos:column="15">
      <block type="pseudo"><return pos:line="56" pos:column="7">return <expr><name pos:line="56" pos:column="14">result<pos:position pos:line="56" pos:column="20"/></name></expr>;<pos:position pos:line="56" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="58" pos:column="5">/* "done" signals to us if the transfer(s) are ready */</comment>
  }<pos:position pos:line="59" pos:column="4"/></block></while>

  <return pos:line="61" pos:column="3">return <expr><name pos:line="61" pos:column="10">CURLE_OK<pos:position pos:line="61" pos:column="18"/></name></expr>;<pos:position pos:line="61" pos:column="19"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
