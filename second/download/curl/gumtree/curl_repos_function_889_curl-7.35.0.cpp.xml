<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_889_curl-7.35.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_readwrite<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">connectdata<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conn<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="2" pos:column="25">bool<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">done<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SessionHandle<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name><name pos:line="4" pos:column="32">conn<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">data<pos:position pos:line="4" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SingleRequest<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">k<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><operator pos:line="5" pos:column="29">&amp;<pos:position pos:line="5" pos:column="34"/></operator><name><name pos:line="5" pos:column="30">data<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">-&gt;<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="36">req<pos:position pos:line="5" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">didwhat<pos:position pos:line="7" pos:column="14"/></name><init pos:line="7" pos:column="14">=<expr><literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">curl_socket_t<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">fd_read<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">curl_socket_t<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">fd_write<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">select_res<pos:position pos:line="11" pos:column="17"/></name> <init pos:line="11" pos:column="18">= <expr><name><name pos:line="11" pos:column="20">conn<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">-&gt;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="26">cselect_bits<pos:position pos:line="11" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="39"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="13" pos:column="3">conn<pos:position pos:line="13" pos:column="7"/></name><operator pos:line="13" pos:column="7">-&gt;<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="9">cselect_bits<pos:position pos:line="13" pos:column="21"/></name></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* only use the proper socket if the *_HOLD bit is not set simultaneously as
     then we are in rate limiting state in that transfer direction */</comment>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><operator pos:line="18" pos:column="6">(<pos:position pos:line="18" pos:column="7"/></operator><name><name pos:line="18" pos:column="7">k<pos:position pos:line="18" pos:column="8"/></name><operator pos:line="18" pos:column="8">-&gt;<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="10">keepon<pos:position pos:line="18" pos:column="16"/></name></name> <operator pos:line="18" pos:column="17">&amp;<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="19">KEEP_RECVBITS<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">)<pos:position pos:line="18" pos:column="33"/></operator> <operator pos:line="18" pos:column="34">==<pos:position pos:line="18" pos:column="36"/></operator> <name pos:line="18" pos:column="37">KEEP_RECV<pos:position pos:line="18" pos:column="46"/></name></expr>)<pos:position pos:line="18" pos:column="47"/></condition><then pos:line="18" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="5">fd_read<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <name><name pos:line="19" pos:column="15">conn<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">sockfd<pos:position pos:line="19" pos:column="27"/></name></name></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt></block></then>
  <else pos:line="20" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="5">fd_read<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">CURL_SOCKET_BAD<pos:position pos:line="21" pos:column="30"/></name></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt></block></else></if>

  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">(<pos:position pos:line="23" pos:column="7"/></operator><name><name pos:line="23" pos:column="7">k<pos:position pos:line="23" pos:column="8"/></name><operator pos:line="23" pos:column="8">-&gt;<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="10">keepon<pos:position pos:line="23" pos:column="16"/></name></name> <operator pos:line="23" pos:column="17">&amp;<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="19">KEEP_SENDBITS<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">)<pos:position pos:line="23" pos:column="33"/></operator> <operator pos:line="23" pos:column="34">==<pos:position pos:line="23" pos:column="36"/></operator> <name pos:line="23" pos:column="37">KEEP_SEND<pos:position pos:line="23" pos:column="46"/></name></expr>)<pos:position pos:line="23" pos:column="47"/></condition><then pos:line="23" pos:column="47">
    <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="5">fd_write<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <name><name pos:line="24" pos:column="16">conn<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">-&gt;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="22">writesockfd<pos:position pos:line="24" pos:column="33"/></name></name></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt></block></then>
  <else pos:line="25" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="5">fd_write<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <name pos:line="26" pos:column="16">CURL_SOCKET_BAD<pos:position pos:line="26" pos:column="31"/></name></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt></block></else></if>

  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">(<expr><operator pos:line="28" pos:column="6">!<pos:position pos:line="28" pos:column="7"/></operator><name pos:line="28" pos:column="7">select_res<pos:position pos:line="28" pos:column="17"/></name></expr>)<pos:position pos:line="28" pos:column="18"/></condition><then pos:line="28" pos:column="18"> <comment type="block" pos:line="28" pos:column="19">/* Call for select()/poll() only, if read/write/error
                     status is not known. */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="5">select_res<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">Curl_socket_ready<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name pos:line="30" pos:column="36">fd_read<pos:position pos:line="30" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="45">fd_write<pos:position pos:line="30" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="55">0<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="58"/></expr_stmt></block></then></if>

  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><name pos:line="32" pos:column="6">select_res<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">==<pos:position pos:line="32" pos:column="19"/></operator> <name pos:line="32" pos:column="20">CURL_CSELECT_ERR<pos:position pos:line="32" pos:column="36"/></name></expr>)<pos:position pos:line="32" pos:column="37"/></condition><then pos:line="32" pos:column="37"> <block pos:line="32" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">failf<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><name pos:line="33" pos:column="11">data<pos:position pos:line="33" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="17">"select/poll returned error"<pos:position pos:line="33" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">CURLE_SEND_ERROR<pos:position pos:line="34" pos:column="28"/></name></expr>;<pos:position pos:line="34" pos:column="29"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="37" pos:column="3">/* We go ahead and do a read if we have a readable socket or if
     the stream was rewound (in which case we have data in a
     buffer) */</comment>
  <if pos:line="40" pos:column="3">if<condition pos:line="40" pos:column="5">(<expr><operator pos:line="40" pos:column="6">(<pos:position pos:line="40" pos:column="7"/></operator><name><name pos:line="40" pos:column="7">k<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">-&gt;<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="10">keepon<pos:position pos:line="40" pos:column="16"/></name></name> <operator pos:line="40" pos:column="17">&amp;<pos:position pos:line="40" pos:column="22"/></operator> <name pos:line="40" pos:column="19">KEEP_RECV<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">)<pos:position pos:line="40" pos:column="29"/></operator> <operator pos:line="40" pos:column="30">&amp;&amp;<pos:position pos:line="40" pos:column="40"/></operator>
     <operator pos:line="41" pos:column="6">(<pos:position pos:line="41" pos:column="7"/></operator><operator pos:line="41" pos:column="7">(<pos:position pos:line="41" pos:column="8"/></operator><name pos:line="41" pos:column="8">select_res<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">&amp;<pos:position pos:line="41" pos:column="24"/></operator> <name pos:line="41" pos:column="21">CURL_CSELECT_IN<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">)<pos:position pos:line="41" pos:column="37"/></operator> <operator pos:line="41" pos:column="38">||<pos:position pos:line="41" pos:column="40"/></operator> <name><name pos:line="41" pos:column="41">conn<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">-&gt;<pos:position pos:line="41" pos:column="50"/></operator><name pos:line="41" pos:column="47">bits<pos:position pos:line="41" pos:column="51"/></name><operator pos:line="41" pos:column="51">.<pos:position pos:line="41" pos:column="52"/></operator><name pos:line="41" pos:column="52">stream_was_rewound<pos:position pos:line="41" pos:column="70"/></name></name><operator pos:line="41" pos:column="70">)<pos:position pos:line="41" pos:column="71"/></operator></expr>)<pos:position pos:line="41" pos:column="72"/></condition><then pos:line="41" pos:column="72"> <block pos:line="41" pos:column="73">{

    <expr_stmt><expr><name pos:line="43" pos:column="5">result<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <call><name pos:line="43" pos:column="14">readwrite_data<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">data<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">conn<pos:position pos:line="43" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="41">k<pos:position pos:line="43" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="44">&amp;<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="45">didwhat<pos:position pos:line="43" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="54">done<pos:position pos:line="43" pos:column="58"/></name></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="60"/></expr_stmt>
    <if pos:line="44" pos:column="5">if<condition pos:line="44" pos:column="7">(<expr><name pos:line="44" pos:column="8">result<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">||<pos:position pos:line="44" pos:column="17"/></operator> <operator pos:line="44" pos:column="18">*<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="19">done<pos:position pos:line="44" pos:column="23"/></name></expr>)<pos:position pos:line="44" pos:column="24"/></condition><then pos:line="44" pos:column="24">
      <block type="pseudo"><return pos:line="45" pos:column="7">return <expr><name pos:line="45" pos:column="14">result<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="48" pos:column="3">/* If we still have writing to do, we check if we have a writable socket. */</comment>
  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><operator pos:line="49" pos:column="6">(<pos:position pos:line="49" pos:column="7"/></operator><name><name pos:line="49" pos:column="7">k<pos:position pos:line="49" pos:column="8"/></name><operator pos:line="49" pos:column="8">-&gt;<pos:position pos:line="49" pos:column="13"/></operator><name pos:line="49" pos:column="10">keepon<pos:position pos:line="49" pos:column="16"/></name></name> <operator pos:line="49" pos:column="17">&amp;<pos:position pos:line="49" pos:column="22"/></operator> <name pos:line="49" pos:column="19">KEEP_SEND<pos:position pos:line="49" pos:column="28"/></name><operator pos:line="49" pos:column="28">)<pos:position pos:line="49" pos:column="29"/></operator> <operator pos:line="49" pos:column="30">&amp;&amp;<pos:position pos:line="49" pos:column="40"/></operator> <operator pos:line="49" pos:column="33">(<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="34">select_res<pos:position pos:line="49" pos:column="44"/></name> <operator pos:line="49" pos:column="45">&amp;<pos:position pos:line="49" pos:column="50"/></operator> <name pos:line="49" pos:column="47">CURL_CSELECT_OUT<pos:position pos:line="49" pos:column="63"/></name><operator pos:line="49" pos:column="63">)<pos:position pos:line="49" pos:column="64"/></operator></expr>)<pos:position pos:line="49" pos:column="65"/></condition><then pos:line="49" pos:column="65"> <block pos:line="49" pos:column="66">{
    <comment type="block" pos:line="50" pos:column="5">/* write */</comment>

    <expr_stmt><expr><name pos:line="52" pos:column="5">result<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <call><name pos:line="52" pos:column="14">readwrite_upload<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><name pos:line="52" pos:column="31">data<pos:position pos:line="52" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="37">conn<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="43">k<pos:position pos:line="52" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="46">&amp;<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="47">didwhat<pos:position pos:line="52" pos:column="54"/></name></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="56"/></expr_stmt>
    <if pos:line="53" pos:column="5">if<condition pos:line="53" pos:column="7">(<expr><name pos:line="53" pos:column="8">result<pos:position pos:line="53" pos:column="14"/></name></expr>)<pos:position pos:line="53" pos:column="15"/></condition><then pos:line="53" pos:column="15">
      <block type="pseudo"><return pos:line="54" pos:column="7">return <expr><name pos:line="54" pos:column="14">result<pos:position pos:line="54" pos:column="20"/></name></expr>;<pos:position pos:line="54" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="57" pos:column="3">k<pos:position pos:line="57" pos:column="4"/></name><operator pos:line="57" pos:column="4">-&gt;<pos:position pos:line="57" pos:column="9"/></operator><name pos:line="57" pos:column="6">now<pos:position pos:line="57" pos:column="9"/></name></name> <operator pos:line="57" pos:column="10">=<pos:position pos:line="57" pos:column="11"/></operator> <call><name pos:line="57" pos:column="12">Curl_tvnow<pos:position pos:line="57" pos:column="22"/></name><argument_list pos:line="57" pos:column="22">()<pos:position pos:line="57" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="25"/></expr_stmt>
  <if pos:line="58" pos:column="3">if<condition pos:line="58" pos:column="5">(<expr><name pos:line="58" pos:column="6">didwhat<pos:position pos:line="58" pos:column="13"/></name></expr>)<pos:position pos:line="58" pos:column="14"/></condition><then pos:line="58" pos:column="14"> <block pos:line="58" pos:column="15">{
    <comment type="block" pos:line="59" pos:column="5">/* Update read/write counters */</comment>
    <if pos:line="60" pos:column="5">if<condition pos:line="60" pos:column="7">(<expr><name><name pos:line="60" pos:column="8">k<pos:position pos:line="60" pos:column="9"/></name><operator pos:line="60" pos:column="9">-&gt;<pos:position pos:line="60" pos:column="14"/></operator><name pos:line="60" pos:column="11">bytecountp<pos:position pos:line="60" pos:column="21"/></name></name></expr>)<pos:position pos:line="60" pos:column="22"/></condition><then pos:line="60" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="61" pos:column="7">*<pos:position pos:line="61" pos:column="8"/></operator><name><name pos:line="61" pos:column="8">k<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">-&gt;<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="11">bytecountp<pos:position pos:line="61" pos:column="21"/></name></name> <operator pos:line="61" pos:column="22">=<pos:position pos:line="61" pos:column="23"/></operator> <name><name pos:line="61" pos:column="24">k<pos:position pos:line="61" pos:column="25"/></name><operator pos:line="61" pos:column="25">-&gt;<pos:position pos:line="61" pos:column="30"/></operator><name pos:line="61" pos:column="27">bytecount<pos:position pos:line="61" pos:column="36"/></name></name></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt></block></then></if> <comment type="block" pos:line="61" pos:column="38">/* read count */</comment>
    <if pos:line="62" pos:column="5">if<condition pos:line="62" pos:column="7">(<expr><name><name pos:line="62" pos:column="8">k<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">-&gt;<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="11">writebytecountp<pos:position pos:line="62" pos:column="26"/></name></name></expr>)<pos:position pos:line="62" pos:column="27"/></condition><then pos:line="62" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="63" pos:column="7">*<pos:position pos:line="63" pos:column="8"/></operator><name><name pos:line="63" pos:column="8">k<pos:position pos:line="63" pos:column="9"/></name><operator pos:line="63" pos:column="9">-&gt;<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="11">writebytecountp<pos:position pos:line="63" pos:column="26"/></name></name> <operator pos:line="63" pos:column="27">=<pos:position pos:line="63" pos:column="28"/></operator> <name><name pos:line="63" pos:column="29">k<pos:position pos:line="63" pos:column="30"/></name><operator pos:line="63" pos:column="30">-&gt;<pos:position pos:line="63" pos:column="35"/></operator><name pos:line="63" pos:column="32">writebytecount<pos:position pos:line="63" pos:column="46"/></name></name></expr>;<pos:position pos:line="63" pos:column="47"/></expr_stmt></block></then></if> <comment type="block" pos:line="63" pos:column="48">/* write count */</comment>
  }<pos:position pos:line="64" pos:column="4"/></block></then>
  <else pos:line="65" pos:column="3">else <block pos:line="65" pos:column="8">{
    <comment type="block" pos:line="66" pos:column="5">/* no read no write, this is a timeout? */</comment>
    <if pos:line="67" pos:column="5">if<condition pos:line="67" pos:column="7">(<expr><name><name pos:line="67" pos:column="8">k<pos:position pos:line="67" pos:column="9"/></name><operator pos:line="67" pos:column="9">-&gt;<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="11">exp100<pos:position pos:line="67" pos:column="17"/></name></name> <operator pos:line="67" pos:column="18">==<pos:position pos:line="67" pos:column="20"/></operator> <name pos:line="67" pos:column="21">EXP100_AWAITING_CONTINUE<pos:position pos:line="67" pos:column="45"/></name></expr>)<pos:position pos:line="67" pos:column="46"/></condition><then pos:line="67" pos:column="46"> <block pos:line="67" pos:column="47">{
      <comment type="block" pos:line="68" pos:column="7">/* This should allow some time for the header to arrive, but only a
         very short time as otherwise it'll be too much wasted time too
         often. */</comment>

      <comment type="block" pos:line="72" pos:column="7">/* Quoting RFC2616, section "8.2.3 Use of the 100 (Continue) Status":

         Therefore, when a client sends this header field to an origin server
         (possibly via a proxy) from which it has never seen a 100 (Continue)
         status, the client SHOULD NOT wait for an indefinite period before
         sending the request body.

      */</comment>

      <decl_stmt><decl><type><name pos:line="81" pos:column="7">long<pos:position pos:line="81" pos:column="11"/></name></type> <name pos:line="81" pos:column="12">ms<pos:position pos:line="81" pos:column="14"/></name> <init pos:line="81" pos:column="15">= <expr><call><name pos:line="81" pos:column="17">Curl_tvdiff<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><name><name pos:line="81" pos:column="29">k<pos:position pos:line="81" pos:column="30"/></name><operator pos:line="81" pos:column="30">-&gt;<pos:position pos:line="81" pos:column="35"/></operator><name pos:line="81" pos:column="32">now<pos:position pos:line="81" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="37">k<pos:position pos:line="81" pos:column="38"/></name><operator pos:line="81" pos:column="38">-&gt;<pos:position pos:line="81" pos:column="43"/></operator><name pos:line="81" pos:column="40">start100<pos:position pos:line="81" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="81" pos:column="50"/></decl_stmt>
      <if pos:line="82" pos:column="7">if<condition pos:line="82" pos:column="9">(<expr><name pos:line="82" pos:column="10">ms<pos:position pos:line="82" pos:column="12"/></name> <operator pos:line="82" pos:column="13">&gt;<pos:position pos:line="82" pos:column="17"/></operator> <name pos:line="82" pos:column="15">CURL_TIMEOUT_EXPECT_100<pos:position pos:line="82" pos:column="38"/></name></expr>)<pos:position pos:line="82" pos:column="39"/></condition><then pos:line="82" pos:column="39"> <block pos:line="82" pos:column="40">{
        <comment type="block" pos:line="83" pos:column="9">/* we've waited long enough, continue anyway */</comment>
        <expr_stmt><expr><name><name pos:line="84" pos:column="9">k<pos:position pos:line="84" pos:column="10"/></name><operator pos:line="84" pos:column="10">-&gt;<pos:position pos:line="84" pos:column="15"/></operator><name pos:line="84" pos:column="12">exp100<pos:position pos:line="84" pos:column="18"/></name></name> <operator pos:line="84" pos:column="19">=<pos:position pos:line="84" pos:column="20"/></operator> <name pos:line="84" pos:column="21">EXP100_SEND_DATA<pos:position pos:line="84" pos:column="37"/></name></expr>;<pos:position pos:line="84" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="85" pos:column="9">k<pos:position pos:line="85" pos:column="10"/></name><operator pos:line="85" pos:column="10">-&gt;<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="12">keepon<pos:position pos:line="85" pos:column="18"/></name></name> <operator pos:line="85" pos:column="19">|=<pos:position pos:line="85" pos:column="21"/></operator> <name pos:line="85" pos:column="22">KEEP_SEND<pos:position pos:line="85" pos:column="31"/></name></expr>;<pos:position pos:line="85" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="86" pos:column="9">infof<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><name pos:line="86" pos:column="15">data<pos:position pos:line="86" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="21">"Done waiting for 100-continue\n"<pos:position pos:line="86" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="87" pos:column="8"/></block></then></if>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>
  }<pos:position pos:line="89" pos:column="4"/></block></else></if>

  <if pos:line="91" pos:column="3">if<condition pos:line="91" pos:column="5">(<expr><call><name pos:line="91" pos:column="6">Curl_pgrsUpdate<pos:position pos:line="91" pos:column="21"/></name><argument_list pos:line="91" pos:column="21">(<argument><expr><name pos:line="91" pos:column="22">conn<pos:position pos:line="91" pos:column="26"/></name></expr></argument>)<pos:position pos:line="91" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="28"/></condition><then pos:line="91" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="5">result<pos:position pos:line="92" pos:column="11"/></name> <operator pos:line="92" pos:column="12">=<pos:position pos:line="92" pos:column="13"/></operator> <name pos:line="92" pos:column="14">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="92" pos:column="39"/></name></expr>;<pos:position pos:line="92" pos:column="40"/></expr_stmt></block></then>
  <else pos:line="93" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="94" pos:column="5">result<pos:position pos:line="94" pos:column="11"/></name> <operator pos:line="94" pos:column="12">=<pos:position pos:line="94" pos:column="13"/></operator> <call><name pos:line="94" pos:column="14">Curl_speedcheck<pos:position pos:line="94" pos:column="29"/></name><argument_list pos:line="94" pos:column="29">(<argument><expr><name pos:line="94" pos:column="30">data<pos:position pos:line="94" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="36">k<pos:position pos:line="94" pos:column="37"/></name><operator pos:line="94" pos:column="37">-&gt;<pos:position pos:line="94" pos:column="42"/></operator><name pos:line="94" pos:column="39">now<pos:position pos:line="94" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="44"/></expr_stmt></block></else></if>
  <if pos:line="95" pos:column="3">if<condition pos:line="95" pos:column="5">(<expr><name pos:line="95" pos:column="6">result<pos:position pos:line="95" pos:column="12"/></name></expr>)<pos:position pos:line="95" pos:column="13"/></condition><then pos:line="95" pos:column="13">
    <block type="pseudo"><return pos:line="96" pos:column="5">return <expr><name pos:line="96" pos:column="12">result<pos:position pos:line="96" pos:column="18"/></name></expr>;<pos:position pos:line="96" pos:column="19"/></return></block></then></if>

  <if pos:line="98" pos:column="3">if<condition pos:line="98" pos:column="5">(<expr><name><name pos:line="98" pos:column="6">k<pos:position pos:line="98" pos:column="7"/></name><operator pos:line="98" pos:column="7">-&gt;<pos:position pos:line="98" pos:column="12"/></operator><name pos:line="98" pos:column="9">keepon<pos:position pos:line="98" pos:column="15"/></name></name></expr>)<pos:position pos:line="98" pos:column="16"/></condition><then pos:line="98" pos:column="16"> <block pos:line="98" pos:column="17">{
    <if pos:line="99" pos:column="5">if<condition pos:line="99" pos:column="7">(<expr><literal type="number" pos:line="99" pos:column="8">0<pos:position pos:line="99" pos:column="9"/></literal> <operator pos:line="99" pos:column="10">&gt;<pos:position pos:line="99" pos:column="14"/></operator> <call><name pos:line="99" pos:column="12">Curl_timeleft<pos:position pos:line="99" pos:column="25"/></name><argument_list pos:line="99" pos:column="25">(<argument><expr><name pos:line="99" pos:column="26">data<pos:position pos:line="99" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="32">&amp;<pos:position pos:line="99" pos:column="37"/></operator><name><name pos:line="99" pos:column="33">k<pos:position pos:line="99" pos:column="34"/></name><operator pos:line="99" pos:column="34">-&gt;<pos:position pos:line="99" pos:column="39"/></operator><name pos:line="99" pos:column="36">now<pos:position pos:line="99" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="41">FALSE<pos:position pos:line="99" pos:column="46"/></name></expr></argument>)<pos:position pos:line="99" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="48"/></condition><then pos:line="99" pos:column="48"> <block pos:line="99" pos:column="49">{
      <if pos:line="100" pos:column="7">if<condition pos:line="100" pos:column="9">(<expr><name><name pos:line="100" pos:column="10">k<pos:position pos:line="100" pos:column="11"/></name><operator pos:line="100" pos:column="11">-&gt;<pos:position pos:line="100" pos:column="16"/></operator><name pos:line="100" pos:column="13">size<pos:position pos:line="100" pos:column="17"/></name></name> <operator pos:line="100" pos:column="18">!=<pos:position pos:line="100" pos:column="20"/></operator> <operator pos:line="100" pos:column="21">-<pos:position pos:line="100" pos:column="22"/></operator><literal type="number" pos:line="100" pos:column="22">1<pos:position pos:line="100" pos:column="23"/></literal></expr>)<pos:position pos:line="100" pos:column="24"/></condition><then pos:line="100" pos:column="24"> <block pos:line="100" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">failf<pos:position pos:line="101" pos:column="14"/></name><argument_list pos:line="101" pos:column="14">(<argument><expr><name pos:line="101" pos:column="15">data<pos:position pos:line="101" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="21">"Operation timed out after %ld milliseconds with %"<pos:position pos:line="101" pos:column="72"/></literal>
              <name pos:line="102" pos:column="15">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="102" pos:column="37"/></name> <literal type="string" pos:line="102" pos:column="38">" out of %"<pos:position pos:line="102" pos:column="49"/></literal>
              <name pos:line="103" pos:column="15">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="103" pos:column="37"/></name> <literal type="string" pos:line="103" pos:column="38">" bytes received"<pos:position pos:line="103" pos:column="55"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="104" pos:column="15">Curl_tvdiff<pos:position pos:line="104" pos:column="26"/></name><argument_list pos:line="104" pos:column="26">(<argument><expr><name><name pos:line="104" pos:column="27">k<pos:position pos:line="104" pos:column="28"/></name><operator pos:line="104" pos:column="28">-&gt;<pos:position pos:line="104" pos:column="33"/></operator><name pos:line="104" pos:column="30">now<pos:position pos:line="104" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="35">data<pos:position pos:line="104" pos:column="39"/></name><operator pos:line="104" pos:column="39">-&gt;<pos:position pos:line="104" pos:column="44"/></operator><name pos:line="104" pos:column="41">progress<pos:position pos:line="104" pos:column="49"/></name><operator pos:line="104" pos:column="49">.<pos:position pos:line="104" pos:column="50"/></operator><name pos:line="104" pos:column="50">t_startsingle<pos:position pos:line="104" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="66">k<pos:position pos:line="104" pos:column="67"/></name><operator pos:line="104" pos:column="67">-&gt;<pos:position pos:line="104" pos:column="72"/></operator><name pos:line="104" pos:column="69">bytecount<pos:position pos:line="104" pos:column="78"/></name></name></expr></argument>,
              <argument><expr><name><name pos:line="105" pos:column="15">k<pos:position pos:line="105" pos:column="16"/></name><operator pos:line="105" pos:column="16">-&gt;<pos:position pos:line="105" pos:column="21"/></operator><name pos:line="105" pos:column="18">size<pos:position pos:line="105" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="106" pos:column="8"/></block></then>
      <else pos:line="107" pos:column="7">else <block pos:line="107" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="108" pos:column="9">failf<pos:position pos:line="108" pos:column="14"/></name><argument_list pos:line="108" pos:column="14">(<argument><expr><name pos:line="108" pos:column="15">data<pos:position pos:line="108" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="21">"Operation timed out after %ld milliseconds with %"<pos:position pos:line="108" pos:column="72"/></literal>
              <name pos:line="109" pos:column="15">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="109" pos:column="37"/></name> <literal type="string" pos:line="109" pos:column="38">" bytes received"<pos:position pos:line="109" pos:column="55"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="110" pos:column="15">Curl_tvdiff<pos:position pos:line="110" pos:column="26"/></name><argument_list pos:line="110" pos:column="26">(<argument><expr><name><name pos:line="110" pos:column="27">k<pos:position pos:line="110" pos:column="28"/></name><operator pos:line="110" pos:column="28">-&gt;<pos:position pos:line="110" pos:column="33"/></operator><name pos:line="110" pos:column="30">now<pos:position pos:line="110" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="35">data<pos:position pos:line="110" pos:column="39"/></name><operator pos:line="110" pos:column="39">-&gt;<pos:position pos:line="110" pos:column="44"/></operator><name pos:line="110" pos:column="41">progress<pos:position pos:line="110" pos:column="49"/></name><operator pos:line="110" pos:column="49">.<pos:position pos:line="110" pos:column="50"/></operator><name pos:line="110" pos:column="50">t_startsingle<pos:position pos:line="110" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="66">k<pos:position pos:line="110" pos:column="67"/></name><operator pos:line="110" pos:column="67">-&gt;<pos:position pos:line="110" pos:column="72"/></operator><name pos:line="110" pos:column="69">bytecount<pos:position pos:line="110" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="80"/></expr_stmt>
      }<pos:position pos:line="111" pos:column="8"/></block></else></if>
      <return pos:line="112" pos:column="7">return <expr><name pos:line="112" pos:column="14">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="112" pos:column="38"/></name></expr>;<pos:position pos:line="112" pos:column="39"/></return>
    }<pos:position pos:line="113" pos:column="6"/></block></then></if>
  }<pos:position pos:line="114" pos:column="4"/></block></then>
  <else pos:line="115" pos:column="3">else <block pos:line="115" pos:column="8">{
    <comment type="block" pos:line="116" pos:column="5">/*
     * The transfer has been performed. Just make some general checks before
     * returning.
     */</comment>

    <if pos:line="121" pos:column="5">if<condition pos:line="121" pos:column="7">(<expr><operator pos:line="121" pos:column="8">!<pos:position pos:line="121" pos:column="9"/></operator><operator pos:line="121" pos:column="9">(<pos:position pos:line="121" pos:column="10"/></operator><name><name pos:line="121" pos:column="10">data<pos:position pos:line="121" pos:column="14"/></name><operator pos:line="121" pos:column="14">-&gt;<pos:position pos:line="121" pos:column="19"/></operator><name pos:line="121" pos:column="16">set<pos:position pos:line="121" pos:column="19"/></name><operator pos:line="121" pos:column="19">.<pos:position pos:line="121" pos:column="20"/></operator><name pos:line="121" pos:column="20">opt_no_body<pos:position pos:line="121" pos:column="31"/></name></name><operator pos:line="121" pos:column="31">)<pos:position pos:line="121" pos:column="32"/></operator> <operator pos:line="121" pos:column="33">&amp;&amp;<pos:position pos:line="121" pos:column="43"/></operator> <operator pos:line="121" pos:column="36">(<pos:position pos:line="121" pos:column="37"/></operator><name><name pos:line="121" pos:column="37">k<pos:position pos:line="121" pos:column="38"/></name><operator pos:line="121" pos:column="38">-&gt;<pos:position pos:line="121" pos:column="43"/></operator><name pos:line="121" pos:column="40">size<pos:position pos:line="121" pos:column="44"/></name></name> <operator pos:line="121" pos:column="45">!=<pos:position pos:line="121" pos:column="47"/></operator> <operator pos:line="121" pos:column="48">-<pos:position pos:line="121" pos:column="49"/></operator><literal type="number" pos:line="121" pos:column="49">1<pos:position pos:line="121" pos:column="50"/></literal><operator pos:line="121" pos:column="50">)<pos:position pos:line="121" pos:column="51"/></operator> <operator pos:line="121" pos:column="52">&amp;&amp;<pos:position pos:line="121" pos:column="62"/></operator>
       <operator pos:line="122" pos:column="8">(<pos:position pos:line="122" pos:column="9"/></operator><name><name pos:line="122" pos:column="9">k<pos:position pos:line="122" pos:column="10"/></name><operator pos:line="122" pos:column="10">-&gt;<pos:position pos:line="122" pos:column="15"/></operator><name pos:line="122" pos:column="12">bytecount<pos:position pos:line="122" pos:column="21"/></name></name> <operator pos:line="122" pos:column="22">!=<pos:position pos:line="122" pos:column="24"/></operator> <name><name pos:line="122" pos:column="25">k<pos:position pos:line="122" pos:column="26"/></name><operator pos:line="122" pos:column="26">-&gt;<pos:position pos:line="122" pos:column="31"/></operator><name pos:line="122" pos:column="28">size<pos:position pos:line="122" pos:column="32"/></name></name><operator pos:line="122" pos:column="32">)<pos:position pos:line="122" pos:column="33"/></operator> <operator pos:line="122" pos:column="34">&amp;&amp;<pos:position pos:line="122" pos:column="44"/></operator>
<cpp:ifdef pos:line="123" pos:column="1">#<cpp:directive pos:line="123" pos:column="2">ifdef<pos:position pos:line="123" pos:column="7"/></cpp:directive> <name pos:line="123" pos:column="8">CURL_DO_LINEEND_CONV<pos:position pos:line="123" pos:column="28"/></name></cpp:ifdef>
       <comment type="block" pos:line="124" pos:column="8">/* Most FTP servers don't adjust their file SIZE response for CRLFs,
          so we'll check to see if the discrepancy can be explained
          by the number of CRLFs we've changed to LFs.
       */</comment>
       <operator pos:line="128" pos:column="8">(<pos:position pos:line="128" pos:column="9"/></operator><name><name pos:line="128" pos:column="9">k<pos:position pos:line="128" pos:column="10"/></name><operator pos:line="128" pos:column="10">-&gt;<pos:position pos:line="128" pos:column="15"/></operator><name pos:line="128" pos:column="12">bytecount<pos:position pos:line="128" pos:column="21"/></name></name> <operator pos:line="128" pos:column="22">!=<pos:position pos:line="128" pos:column="24"/></operator> <operator pos:line="128" pos:column="25">(<pos:position pos:line="128" pos:column="26"/></operator><name><name pos:line="128" pos:column="26">k<pos:position pos:line="128" pos:column="27"/></name><operator pos:line="128" pos:column="27">-&gt;<pos:position pos:line="128" pos:column="32"/></operator><name pos:line="128" pos:column="29">size<pos:position pos:line="128" pos:column="33"/></name></name> <operator pos:line="128" pos:column="34">+<pos:position pos:line="128" pos:column="35"/></operator> <name><name pos:line="128" pos:column="36">data<pos:position pos:line="128" pos:column="40"/></name><operator pos:line="128" pos:column="40">-&gt;<pos:position pos:line="128" pos:column="45"/></operator><name pos:line="128" pos:column="42">state<pos:position pos:line="128" pos:column="47"/></name><operator pos:line="128" pos:column="47">.<pos:position pos:line="128" pos:column="48"/></operator><name pos:line="128" pos:column="48">crlf_conversions<pos:position pos:line="128" pos:column="64"/></name></name><operator pos:line="128" pos:column="64">)<pos:position pos:line="128" pos:column="65"/></operator><operator pos:line="128" pos:column="65">)<pos:position pos:line="128" pos:column="66"/></operator> <operator pos:line="128" pos:column="67">&amp;&amp;<pos:position pos:line="128" pos:column="77"/></operator>
<cpp:endif pos:line="129" pos:column="1">#<cpp:directive pos:line="129" pos:column="2">endif<pos:position pos:line="129" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="129" pos:column="8">/* CURL_DO_LINEEND_CONV */</comment>
       <operator pos:line="130" pos:column="8">!<pos:position pos:line="130" pos:column="9"/></operator><name><name pos:line="130" pos:column="9">data<pos:position pos:line="130" pos:column="13"/></name><operator pos:line="130" pos:column="13">-&gt;<pos:position pos:line="130" pos:column="18"/></operator><name pos:line="130" pos:column="15">req<pos:position pos:line="130" pos:column="18"/></name><operator pos:line="130" pos:column="18">.<pos:position pos:line="130" pos:column="19"/></operator><name pos:line="130" pos:column="19">newurl<pos:position pos:line="130" pos:column="25"/></name></name></expr>)<pos:position pos:line="130" pos:column="26"/></condition><then pos:line="130" pos:column="26"> <block pos:line="130" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="131" pos:column="7">failf<pos:position pos:line="131" pos:column="12"/></name><argument_list pos:line="131" pos:column="12">(<argument><expr><name pos:line="131" pos:column="13">data<pos:position pos:line="131" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="19">"transfer closed with %"<pos:position pos:line="131" pos:column="43"/></literal> <name pos:line="131" pos:column="44">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="131" pos:column="66"/></name>
            <literal type="string" pos:line="132" pos:column="13">" bytes remaining to read"<pos:position pos:line="132" pos:column="39"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="133" pos:column="13">k<pos:position pos:line="133" pos:column="14"/></name><operator pos:line="133" pos:column="14">-&gt;<pos:position pos:line="133" pos:column="19"/></operator><name pos:line="133" pos:column="16">size<pos:position pos:line="133" pos:column="20"/></name></name> <operator pos:line="133" pos:column="21">-<pos:position pos:line="133" pos:column="22"/></operator> <name><name pos:line="133" pos:column="23">k<pos:position pos:line="133" pos:column="24"/></name><operator pos:line="133" pos:column="24">-&gt;<pos:position pos:line="133" pos:column="29"/></operator><name pos:line="133" pos:column="26">bytecount<pos:position pos:line="133" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="133" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="37"/></expr_stmt>
      <return pos:line="134" pos:column="7">return <expr><name pos:line="134" pos:column="14">CURLE_PARTIAL_FILE<pos:position pos:line="134" pos:column="32"/></name></expr>;<pos:position pos:line="134" pos:column="33"/></return>
    }<pos:position pos:line="135" pos:column="6"/></block></then>
    <elseif pos:line="136" pos:column="5">else <if pos:line="136" pos:column="10">if<condition pos:line="136" pos:column="12">(<expr><operator pos:line="136" pos:column="13">!<pos:position pos:line="136" pos:column="14"/></operator><operator pos:line="136" pos:column="14">(<pos:position pos:line="136" pos:column="15"/></operator><name><name pos:line="136" pos:column="15">data<pos:position pos:line="136" pos:column="19"/></name><operator pos:line="136" pos:column="19">-&gt;<pos:position pos:line="136" pos:column="24"/></operator><name pos:line="136" pos:column="21">set<pos:position pos:line="136" pos:column="24"/></name><operator pos:line="136" pos:column="24">.<pos:position pos:line="136" pos:column="25"/></operator><name pos:line="136" pos:column="25">opt_no_body<pos:position pos:line="136" pos:column="36"/></name></name><operator pos:line="136" pos:column="36">)<pos:position pos:line="136" pos:column="37"/></operator> <operator pos:line="136" pos:column="38">&amp;&amp;<pos:position pos:line="136" pos:column="48"/></operator>
            <name><name pos:line="137" pos:column="13">k<pos:position pos:line="137" pos:column="14"/></name><operator pos:line="137" pos:column="14">-&gt;<pos:position pos:line="137" pos:column="19"/></operator><name pos:line="137" pos:column="16">chunk<pos:position pos:line="137" pos:column="21"/></name></name> <operator pos:line="137" pos:column="22">&amp;&amp;<pos:position pos:line="137" pos:column="32"/></operator>
            <operator pos:line="138" pos:column="13">(<pos:position pos:line="138" pos:column="14"/></operator><name><name pos:line="138" pos:column="14">conn<pos:position pos:line="138" pos:column="18"/></name><operator pos:line="138" pos:column="18">-&gt;<pos:position pos:line="138" pos:column="23"/></operator><name pos:line="138" pos:column="20">chunk<pos:position pos:line="138" pos:column="25"/></name><operator pos:line="138" pos:column="25">.<pos:position pos:line="138" pos:column="26"/></operator><name pos:line="138" pos:column="26">state<pos:position pos:line="138" pos:column="31"/></name></name> <operator pos:line="138" pos:column="32">!=<pos:position pos:line="138" pos:column="34"/></operator> <name pos:line="138" pos:column="35">CHUNK_STOP<pos:position pos:line="138" pos:column="45"/></name><operator pos:line="138" pos:column="45">)<pos:position pos:line="138" pos:column="46"/></operator></expr>)<pos:position pos:line="138" pos:column="47"/></condition><then pos:line="138" pos:column="47"> <block pos:line="138" pos:column="48">{
      <comment type="block" pos:line="139" pos:column="7">/*
       * In chunked mode, return an error if the connection is closed prior to
       * the empty (terminating) chunk is read.
       *
       * The condition above used to check for
       * conn-&gt;proto.http-&gt;chunk.datasize != 0 which is true after reading
       * *any* chunk, not just the empty chunk.
       *
       */</comment>
      <expr_stmt><expr><call><name pos:line="148" pos:column="7">failf<pos:position pos:line="148" pos:column="12"/></name><argument_list pos:line="148" pos:column="12">(<argument><expr><name pos:line="148" pos:column="13">data<pos:position pos:line="148" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="148" pos:column="19">"transfer closed with outstanding read data remaining"<pos:position pos:line="148" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="75"/></expr_stmt>
      <return pos:line="149" pos:column="7">return <expr><name pos:line="149" pos:column="14">CURLE_PARTIAL_FILE<pos:position pos:line="149" pos:column="32"/></name></expr>;<pos:position pos:line="149" pos:column="33"/></return>
    }<pos:position pos:line="150" pos:column="6"/></block></then></if></elseif></if>
    <if pos:line="151" pos:column="5">if<condition pos:line="151" pos:column="7">(<expr><call><name pos:line="151" pos:column="8">Curl_pgrsUpdate<pos:position pos:line="151" pos:column="23"/></name><argument_list pos:line="151" pos:column="23">(<argument><expr><name pos:line="151" pos:column="24">conn<pos:position pos:line="151" pos:column="28"/></name></expr></argument>)<pos:position pos:line="151" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="151" pos:column="30"/></condition><then pos:line="151" pos:column="30">
      <block type="pseudo"><return pos:line="152" pos:column="7">return <expr><name pos:line="152" pos:column="14">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="152" pos:column="39"/></name></expr>;<pos:position pos:line="152" pos:column="40"/></return></block></then></if>
  }<pos:position pos:line="153" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="155" pos:column="3">/* Now update the "done" boolean we return */</comment>
  <expr_stmt><expr><operator pos:line="156" pos:column="3">*<pos:position pos:line="156" pos:column="4"/></operator><name pos:line="156" pos:column="4">done<pos:position pos:line="156" pos:column="8"/></name> <operator pos:line="156" pos:column="9">=<pos:position pos:line="156" pos:column="10"/></operator> <ternary><condition><expr><operator pos:line="156" pos:column="11">(<pos:position pos:line="156" pos:column="12"/></operator><literal type="number" pos:line="156" pos:column="12">0<pos:position pos:line="156" pos:column="13"/></literal> <operator pos:line="156" pos:column="14">==<pos:position pos:line="156" pos:column="16"/></operator> <operator pos:line="156" pos:column="17">(<pos:position pos:line="156" pos:column="18"/></operator><name><name pos:line="156" pos:column="18">k<pos:position pos:line="156" pos:column="19"/></name><operator pos:line="156" pos:column="19">-&gt;<pos:position pos:line="156" pos:column="24"/></operator><name pos:line="156" pos:column="21">keepon<pos:position pos:line="156" pos:column="27"/></name></name><operator pos:line="156" pos:column="27">&amp;<pos:position pos:line="156" pos:column="32"/></operator><operator pos:line="156" pos:column="28">(<pos:position pos:line="156" pos:column="29"/></operator><name pos:line="156" pos:column="29">KEEP_RECV<pos:position pos:line="156" pos:column="38"/></name><operator pos:line="156" pos:column="38">|<pos:position pos:line="156" pos:column="39"/></operator><name pos:line="156" pos:column="39">KEEP_SEND<pos:position pos:line="156" pos:column="48"/></name><operator pos:line="156" pos:column="48">|<pos:position pos:line="156" pos:column="49"/></operator>
                            <name pos:line="157" pos:column="29">KEEP_RECV_PAUSE<pos:position pos:line="157" pos:column="44"/></name><operator pos:line="157" pos:column="44">|<pos:position pos:line="157" pos:column="45"/></operator><name pos:line="157" pos:column="45">KEEP_SEND_PAUSE<pos:position pos:line="157" pos:column="60"/></name><operator pos:line="157" pos:column="60">)<pos:position pos:line="157" pos:column="61"/></operator><operator pos:line="157" pos:column="61">)<pos:position pos:line="157" pos:column="62"/></operator><operator pos:line="157" pos:column="62">)<pos:position pos:line="157" pos:column="63"/></operator></expr> ?<pos:position pos:line="157" pos:column="65"/></condition><then pos:line="157" pos:column="65"> <expr><name pos:line="157" pos:column="66">TRUE<pos:position pos:line="157" pos:column="70"/></name></expr> <pos:position pos:line="157" pos:column="71"/></then><else pos:line="157" pos:column="71">: <expr><name pos:line="157" pos:column="73">FALSE<pos:position pos:line="157" pos:column="78"/></name></expr></else></ternary></expr>;<pos:position pos:line="157" pos:column="79"/></expr_stmt>

  <return pos:line="159" pos:column="3">return <expr><name pos:line="159" pos:column="10">CURLE_OK<pos:position pos:line="159" pos:column="18"/></name></expr>;<pos:position pos:line="159" pos:column="19"/></return>
}<pos:position pos:line="160" pos:column="2"/></block></function></unit>
