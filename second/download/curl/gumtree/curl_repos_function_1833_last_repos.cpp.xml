<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1833_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">checkOID<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">beg<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">end<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                            <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">oid<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_asn1Element<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">e<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">ccp<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">p<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">matched<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* Check if first ASN.1 element at `beg' is the given OID.
     Return a pointer in the source after the OID if found, else NULL. */</comment>

  <expr_stmt><expr><name pos:line="12" pos:column="3">ccp<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">Curl_getASN1Element<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><operator pos:line="12" pos:column="29">&amp;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="30">e<pos:position pos:line="12" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="33">beg<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="38">end<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><operator pos:line="13" pos:column="6">!<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">ccp<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">||<pos:position pos:line="13" pos:column="13"/></operator> <name><name pos:line="13" pos:column="14">e<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">tag<pos:position pos:line="13" pos:column="19"/></name></name> <operator pos:line="13" pos:column="20">!=<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">CURL_ASN1_OBJECT_IDENTIFIER<pos:position pos:line="13" pos:column="50"/></name></expr>)<pos:position pos:line="13" pos:column="51"/></condition><then pos:line="13" pos:column="51">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><specifier pos:line="14" pos:column="13">const<pos:position pos:line="14" pos:column="18"/></specifier> <name pos:line="14" pos:column="19">char<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><operator pos:line="14" pos:column="25">)<pos:position pos:line="14" pos:column="26"/></operator> <name pos:line="14" pos:column="27">NULL<pos:position pos:line="14" pos:column="31"/></name></expr>;<pos:position pos:line="14" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">p<pos:position pos:line="16" pos:column="4"/></name> <operator pos:line="16" pos:column="5">=<pos:position pos:line="16" pos:column="6"/></operator> <call><name pos:line="16" pos:column="7">OID2str<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name><name pos:line="16" pos:column="15">e<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">.<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">beg<pos:position pos:line="16" pos:column="20"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="22">e<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">end<pos:position pos:line="16" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="29">FALSE<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">p<pos:position pos:line="17" pos:column="8"/></name></expr>)<pos:position pos:line="17" pos:column="9"/></condition><then pos:line="17" pos:column="9">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><specifier pos:line="18" pos:column="13">const<pos:position pos:line="18" pos:column="18"/></specifier> <name pos:line="18" pos:column="19">char<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">*<pos:position pos:line="18" pos:column="25"/></operator><operator pos:line="18" pos:column="25">)<pos:position pos:line="18" pos:column="26"/></operator> <name pos:line="18" pos:column="27">NULL<pos:position pos:line="18" pos:column="31"/></name></expr>;<pos:position pos:line="18" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">matched<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">strcmp<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">p<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">oid<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">free<pos:position pos:line="21" pos:column="7"/></name><argument_list pos:line="21" pos:column="7">(<argument><expr><operator pos:line="21" pos:column="8">(<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">char<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></operator><operator pos:line="21" pos:column="15">)<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="17">p<pos:position pos:line="21" pos:column="18"/></name></expr></argument>)<pos:position pos:line="21" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="20"/></expr_stmt>
  <return pos:line="22" pos:column="3">return <expr><ternary><condition><expr><name pos:line="22" pos:column="10">matched<pos:position pos:line="22" pos:column="17"/></name></expr>?<pos:position pos:line="22" pos:column="18"/></condition><then pos:line="22" pos:column="18"> <expr><name pos:line="22" pos:column="19">ccp<pos:position pos:line="22" pos:column="22"/></name></expr></then><else pos:line="22" pos:column="22">: <expr><operator pos:line="22" pos:column="24">(<pos:position pos:line="22" pos:column="25"/></operator><specifier pos:line="22" pos:column="25">const<pos:position pos:line="22" pos:column="30"/></specifier> <name pos:line="22" pos:column="31">char<pos:position pos:line="22" pos:column="35"/></name> <operator pos:line="22" pos:column="36">*<pos:position pos:line="22" pos:column="37"/></operator><operator pos:line="22" pos:column="37">)<pos:position pos:line="22" pos:column="38"/></operator> <name pos:line="22" pos:column="39">NULL<pos:position pos:line="22" pos:column="43"/></name></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="44"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
