<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_462_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ssize_t<pos:position pos:line="1" pos:column="8"/></name></type> <name pos:line="1" pos:column="9">Curl_qsossl_recv<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type> <name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">num<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type> <name pos:line="1" pos:column="69">buf<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">size_t<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">buffersize<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">bool<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type> <name pos:line="2" pos:column="52">wouldblock<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>

<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">error_buffer<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><literal type="number" pos:line="5" pos:column="21">120<pos:position pos:line="5" pos:column="24"/></literal></expr>]<pos:position pos:line="5" pos:column="25"/></index></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt> <comment type="block" pos:line="5" pos:column="27">/* OpenSSL documents that this must be at
                             least 120 bytes long. */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">long<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">sslerror<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">nread<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">nread<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <call><name pos:line="10" pos:column="11">SSL_Read<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name><name pos:line="10" pos:column="20">conn<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">-&gt;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="26">ssl<pos:position pos:line="10" pos:column="29"/></name><index pos:line="10" pos:column="29">[<expr><name pos:line="10" pos:column="30">num<pos:position pos:line="10" pos:column="33"/></name></expr>]<pos:position pos:line="10" pos:column="34"/></index></name><operator pos:line="10" pos:column="34">.<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">handle<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="43">buf<pos:position pos:line="10" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="48">(<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="49">int<pos:position pos:line="10" pos:column="52"/></name><operator pos:line="10" pos:column="52">)<pos:position pos:line="10" pos:column="53"/></operator> <name pos:line="10" pos:column="54">buffersize<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="11" pos:column="3">*<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">wouldblock<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">FALSE<pos:position pos:line="11" pos:column="22"/></name></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">nread<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&lt;<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
    <comment type="block" pos:line="14" pos:column="5">/* failed SSL_read */</comment>

    <switch pos:line="16" pos:column="5">switch <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">nread<pos:position pos:line="16" pos:column="18"/></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition> <block pos:line="16" pos:column="20">{

    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">SSL_ERROR_BAD_STATE<pos:position pos:line="18" pos:column="29"/></name></expr>:<pos:position pos:line="18" pos:column="30"/></case>
      <comment type="block" pos:line="19" pos:column="7">/* there's data pending, re-invoke SSL_Read(). */</comment>
      <expr_stmt><expr><operator pos:line="20" pos:column="7">*<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">wouldblock<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">TRUE<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><operator pos:line="21" pos:column="14">-<pos:position pos:line="21" pos:column="15"/></operator><literal type="number" pos:line="21" pos:column="15">1<pos:position pos:line="21" pos:column="16"/></literal></expr>;<pos:position pos:line="21" pos:column="17"/></return> <comment type="block" pos:line="21" pos:column="18">/* basically EWOULDBLOCK */</comment>

    <case pos:line="23" pos:column="5">case <expr><name pos:line="23" pos:column="10">SSL_ERROR_IO<pos:position pos:line="23" pos:column="22"/></name></expr>:<pos:position pos:line="23" pos:column="23"/></case>
      <switch pos:line="24" pos:column="7">switch <condition pos:line="24" pos:column="14">(<expr><name pos:line="24" pos:column="15">errno<pos:position pos:line="24" pos:column="20"/></name></expr>)<pos:position pos:line="24" pos:column="21"/></condition> <block pos:line="24" pos:column="22">{
      <case pos:line="25" pos:column="7">case <expr><name pos:line="25" pos:column="12">EWOULDBLOCK<pos:position pos:line="25" pos:column="23"/></name></expr>:<pos:position pos:line="25" pos:column="24"/></case>
        <expr_stmt><expr><operator pos:line="26" pos:column="9">*<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">wouldblock<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">TRUE<pos:position pos:line="26" pos:column="27"/></name></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
        <return pos:line="27" pos:column="9">return <expr><operator pos:line="27" pos:column="16">-<pos:position pos:line="27" pos:column="17"/></operator><literal type="number" pos:line="27" pos:column="17">1<pos:position pos:line="27" pos:column="18"/></literal></expr>;<pos:position pos:line="27" pos:column="19"/></return>
        }<pos:position pos:line="28" pos:column="10"/></block></switch>

      <expr_stmt><expr><call><name pos:line="30" pos:column="7">failf<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name><name pos:line="30" pos:column="13">conn<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">-&gt;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="19">data<pos:position pos:line="30" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="25">"SSL_Read() I/O error: %s"<pos:position pos:line="30" pos:column="51"/></literal></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="53">strerror<pos:position pos:line="30" pos:column="61"/></name><argument_list pos:line="30" pos:column="61">(<argument><expr><name pos:line="30" pos:column="62">errno<pos:position pos:line="30" pos:column="67"/></name></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="70"/></expr_stmt>
      <return pos:line="31" pos:column="7">return <expr><operator pos:line="31" pos:column="14">-<pos:position pos:line="31" pos:column="15"/></operator><literal type="number" pos:line="31" pos:column="15">1<pos:position pos:line="31" pos:column="16"/></literal></expr>;<pos:position pos:line="31" pos:column="17"/></return>

    <default pos:line="33" pos:column="5">default:<pos:position pos:line="33" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">failf<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name><name pos:line="34" pos:column="13">conn<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">-&gt;<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="19">data<pos:position pos:line="34" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="25">"SSL read error: %s"<pos:position pos:line="34" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="47">SSL_Strerror<pos:position pos:line="34" pos:column="59"/></name><argument_list pos:line="34" pos:column="59">(<argument><expr><name pos:line="34" pos:column="60">nread<pos:position pos:line="34" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="67">NULL<pos:position pos:line="34" pos:column="71"/></name></expr></argument>)<pos:position pos:line="34" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="74"/></expr_stmt>
      <return pos:line="35" pos:column="7">return <expr><operator pos:line="35" pos:column="14">-<pos:position pos:line="35" pos:column="15"/></operator><literal type="number" pos:line="35" pos:column="15">1<pos:position pos:line="35" pos:column="16"/></literal></expr>;<pos:position pos:line="35" pos:column="17"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></switch>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>
  <return pos:line="38" pos:column="3">return <expr><operator pos:line="38" pos:column="10">(<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="11">ssize_t<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">)<pos:position pos:line="38" pos:column="19"/></operator> <name pos:line="38" pos:column="20">nread<pos:position pos:line="38" pos:column="25"/></name></expr>;<pos:position pos:line="38" pos:column="26"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
