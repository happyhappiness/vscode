<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_3595.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">_my_setopt<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">CURL<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">curl<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">Configurable<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">config<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="62">const<pos:position pos:line="1" pos:column="67"/></specifier> <name pos:line="1" pos:column="68">char<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">name<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="2" pos:column="21">CURLoption<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">tag<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="2" pos:column="37">...<pos:position pos:line="2" pos:column="40"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">va_list<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">arg<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">ret<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">bufp<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">value<pos:position pos:line="7" pos:column="13"/></name><index pos:line="7" pos:column="13">[<expr><literal type="number" pos:line="7" pos:column="14">256<pos:position pos:line="7" pos:column="17"/></literal></expr>]<pos:position pos:line="7" pos:column="18"/></index></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">remark<pos:position pos:line="8" pos:column="14"/></name><init pos:line="8" pos:column="14">=<expr><name pos:line="8" pos:column="15">FALSE<pos:position pos:line="8" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">va_start<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">arg<pos:position pos:line="10" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="17">tag<pos:position pos:line="10" pos:column="20"/></name></expr></argument>)<pos:position pos:line="10" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name pos:line="12" pos:column="6">tag<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">&lt;<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="12">CURLOPTTYPE_OBJECTPOINT<pos:position pos:line="12" pos:column="35"/></name></expr>)<pos:position pos:line="12" pos:column="36"/></condition><then pos:line="12" pos:column="36"> <block pos:line="12" pos:column="37">{
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">long<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">lval<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><call><name pos:line="13" pos:column="17">va_arg<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">arg<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="29">long<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="35"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">snprintf<pos:position pos:line="14" pos:column="13"/></name><argument_list pos:line="14" pos:column="13">(<argument><expr><name pos:line="14" pos:column="14">value<pos:position pos:line="14" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="21">sizeof<argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">value<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="36">"%ld"<pos:position pos:line="14" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="43">lval<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">ret<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">curl_easy_setopt<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">curl<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">tag<pos:position pos:line="15" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="39">lval<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>

  }<pos:position pos:line="17" pos:column="4"/></block></then>
  <elseif pos:line="18" pos:column="3">else <if pos:line="18" pos:column="8">if<condition pos:line="18" pos:column="10">(<expr><name pos:line="18" pos:column="11">tag<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">&lt;<pos:position pos:line="18" pos:column="19"/></operator> <name pos:line="18" pos:column="17">CURLOPTTYPE_OFF_T<pos:position pos:line="18" pos:column="34"/></name></expr>)<pos:position pos:line="18" pos:column="35"/></condition><then pos:line="18" pos:column="35"> <block pos:line="18" pos:column="36">{
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">void<pos:position pos:line="19" pos:column="9"/></name> <modifier pos:line="19" pos:column="10">*<pos:position pos:line="19" pos:column="11"/></modifier></type><name pos:line="19" pos:column="11">pval<pos:position pos:line="19" pos:column="15"/></name> <init pos:line="19" pos:column="16">= <expr><call><name pos:line="19" pos:column="18">va_arg<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">arg<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="30">void<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">*<pos:position pos:line="19" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">unsigned<pos:position pos:line="20" pos:column="13"/></name> <name pos:line="20" pos:column="14">char<pos:position pos:line="20" pos:column="18"/></name> <modifier pos:line="20" pos:column="19">*<pos:position pos:line="20" pos:column="20"/></modifier></type><name pos:line="20" pos:column="20">ptr<pos:position pos:line="20" pos:column="23"/></name> <init pos:line="20" pos:column="24">= <expr><operator pos:line="20" pos:column="26">(<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="27">unsigned<pos:position pos:line="20" pos:column="35"/></name> <name pos:line="20" pos:column="36">char<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">*<pos:position pos:line="20" pos:column="42"/></operator><operator pos:line="20" pos:column="42">)<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="43">pval<pos:position pos:line="20" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="48"/></decl_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* function pointers are never printable */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">tag<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">&gt;=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="16">CURLOPTTYPE_FUNCTIONPOINT<pos:position pos:line="23" pos:column="41"/></name></expr>)<pos:position pos:line="23" pos:column="42"/></condition><then pos:line="23" pos:column="42"> <block pos:line="23" pos:column="43">{
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name pos:line="24" pos:column="11">pval<pos:position pos:line="24" pos:column="15"/></name></expr>)<pos:position pos:line="24" pos:column="16"/></condition><then pos:line="24" pos:column="16"> <block pos:line="24" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">snprintf<pos:position pos:line="25" pos:column="17"/></name><argument_list pos:line="25" pos:column="17">(<argument><expr><name pos:line="25" pos:column="18">value<pos:position pos:line="25" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="25">sizeof<argument_list pos:line="25" pos:column="31">(<argument><expr><name pos:line="25" pos:column="32">value<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="40">"%p"<pos:position pos:line="25" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">pval<pos:position pos:line="25" pos:column="50"/></name></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">remark<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <name pos:line="26" pos:column="18">TRUE<pos:position pos:line="26" pos:column="22"/></name></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="27" pos:column="8"/></block></then>
      <else pos:line="28" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="9">strcpy<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">value<pos:position pos:line="29" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="23">"NULL"<pos:position pos:line="29" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt></block></else></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then>
    <comment type="block" pos:line="31" pos:column="5">/* attempt to figure out if it is a string (since the tag numerical doesn't
       offer this info) and then output it as a string if so */</comment>
    <elseif pos:line="33" pos:column="5">else <if pos:line="33" pos:column="10">if<condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">pval<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">&amp;&amp;<pos:position pos:line="33" pos:column="28"/></operator> <call><name pos:line="33" pos:column="21">isgraph<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name><name pos:line="33" pos:column="29">ptr<pos:position pos:line="33" pos:column="32"/></name><index pos:line="33" pos:column="32">[<expr><literal type="number" pos:line="33" pos:column="33">0<pos:position pos:line="33" pos:column="34"/></literal></expr>]<pos:position pos:line="33" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></call> <operator pos:line="33" pos:column="37">&amp;&amp;<pos:position pos:line="33" pos:column="47"/></operator> <call><name pos:line="33" pos:column="40">isgraph<pos:position pos:line="33" pos:column="47"/></name><argument_list pos:line="33" pos:column="47">(<argument><expr><name><name pos:line="33" pos:column="48">ptr<pos:position pos:line="33" pos:column="51"/></name><index pos:line="33" pos:column="51">[<expr><literal type="number" pos:line="33" pos:column="52">1<pos:position pos:line="33" pos:column="53"/></literal></expr>]<pos:position pos:line="33" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call> <operator pos:line="33" pos:column="56">&amp;&amp;<pos:position pos:line="33" pos:column="66"/></operator> <call><name pos:line="33" pos:column="59">isgraph<pos:position pos:line="33" pos:column="66"/></name><argument_list pos:line="33" pos:column="66">(<argument><expr><name><name pos:line="33" pos:column="67">ptr<pos:position pos:line="33" pos:column="70"/></name><index pos:line="33" pos:column="70">[<expr><literal type="number" pos:line="33" pos:column="71">2<pos:position pos:line="33" pos:column="72"/></literal></expr>]<pos:position pos:line="33" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="75"/></condition><then pos:line="33" pos:column="75">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="7">snprintf<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><name pos:line="34" pos:column="16">value<pos:position pos:line="34" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="23">sizeof<argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">value<pos:position pos:line="34" pos:column="35"/></name></expr></argument>)<pos:position pos:line="34" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="38">"\"%s\""<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="48">(<pos:position pos:line="34" pos:column="49"/></operator><name pos:line="34" pos:column="49">char<pos:position pos:line="34" pos:column="53"/></name> <operator pos:line="34" pos:column="54">*<pos:position pos:line="34" pos:column="55"/></operator><operator pos:line="34" pos:column="55">)<pos:position pos:line="34" pos:column="56"/></operator><name pos:line="34" pos:column="56">ptr<pos:position pos:line="34" pos:column="59"/></name></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="61"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="35" pos:column="5">else <if pos:line="35" pos:column="10">if<condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">pval<pos:position pos:line="35" pos:column="17"/></name></expr>)<pos:position pos:line="35" pos:column="18"/></condition><then pos:line="35" pos:column="18"> <block pos:line="35" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">snprintf<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">value<pos:position pos:line="36" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="23">sizeof<argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">value<pos:position pos:line="36" pos:column="35"/></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="38">"%p"<pos:position pos:line="36" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="44">pval<pos:position pos:line="36" pos:column="48"/></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name pos:line="37" pos:column="7">remark<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">TRUE<pos:position pos:line="37" pos:column="20"/></name></expr>;<pos:position pos:line="37" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if></elseif>
    <else pos:line="39" pos:column="5">else <block pos:line="39" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">strcpy<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">value<pos:position pos:line="40" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="21">"NULL"<pos:position pos:line="40" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt> <comment type="block" pos:line="40" pos:column="30">/* value fits more than 5 bytes */</comment>
    }<pos:position pos:line="41" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="42" pos:column="5">ret<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <call><name pos:line="42" pos:column="11">curl_easy_setopt<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">curl<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="34">tag<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="39">pval<pos:position pos:line="42" pos:column="43"/></name></expr></argument>)<pos:position pos:line="42" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="45"/></expr_stmt>

  }<pos:position pos:line="44" pos:column="4"/></block></then></if></elseif>
  <else pos:line="45" pos:column="3">else <block pos:line="45" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="46" pos:column="5">curl_off_t<pos:position pos:line="46" pos:column="15"/></name></type> <name pos:line="46" pos:column="16">oval<pos:position pos:line="46" pos:column="20"/></name> <init pos:line="46" pos:column="21">= <expr><call><name pos:line="46" pos:column="23">va_arg<pos:position pos:line="46" pos:column="29"/></name><argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">arg<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">curl_off_t<pos:position pos:line="46" pos:column="45"/></name></expr></argument>)<pos:position pos:line="46" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="47"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">snprintf<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><name pos:line="47" pos:column="14">value<pos:position pos:line="47" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="21">sizeof<argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">value<pos:position pos:line="47" pos:column="33"/></name></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="36">"(curl_off_t)%Od"<pos:position pos:line="47" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="55">oval<pos:position pos:line="47" pos:column="59"/></name></expr></argument>)<pos:position pos:line="47" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name pos:line="48" pos:column="5">ret<pos:position pos:line="48" pos:column="8"/></name> <operator pos:line="48" pos:column="9">=<pos:position pos:line="48" pos:column="10"/></operator> <call><name pos:line="48" pos:column="11">curl_easy_setopt<pos:position pos:line="48" pos:column="27"/></name><argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">curl<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="34">tag<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="39">oval<pos:position pos:line="48" pos:column="43"/></name></expr></argument>)<pos:position pos:line="48" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="49" pos:column="4"/></block></else></if>

  <if pos:line="51" pos:column="3">if<condition pos:line="51" pos:column="5">(<expr><name><name pos:line="51" pos:column="6">config<pos:position pos:line="51" pos:column="12"/></name><operator pos:line="51" pos:column="12">-&gt;<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="14">libcurl<pos:position pos:line="51" pos:column="21"/></name></name></expr>)<pos:position pos:line="51" pos:column="22"/></condition><then pos:line="51" pos:column="22"> <block pos:line="51" pos:column="23">{
    <comment type="block" pos:line="52" pos:column="5">/* we only use this for real if --libcurl was used */</comment>

    <expr_stmt><expr><name pos:line="54" pos:column="5">bufp<pos:position pos:line="54" pos:column="9"/></name> <operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator> <call><name pos:line="54" pos:column="12">curl_maprintf<pos:position pos:line="54" pos:column="25"/></name><argument_list pos:line="54" pos:column="25">(<argument><expr><literal type="string" pos:line="54" pos:column="26">"%scurl_easy_setopt(hnd, %s, %s);%s"<pos:position pos:line="54" pos:column="62"/></literal></expr></argument>,
                         <argument><expr><ternary><condition><expr><name pos:line="55" pos:column="26">remark<pos:position pos:line="55" pos:column="32"/></name></expr>?<pos:position pos:line="55" pos:column="33"/></condition><then><expr><literal type="string" pos:line="55" pos:column="33">"/* "<pos:position pos:line="55" pos:column="38"/></literal></expr></then><else pos:line="55" pos:column="38">:<expr><literal type="string" pos:line="55" pos:column="39">""<pos:position pos:line="55" pos:column="41"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="55" pos:column="43">name<pos:position pos:line="55" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="49">value<pos:position pos:line="55" pos:column="54"/></name></expr></argument>,
                         <argument><expr><ternary><condition><expr><name pos:line="56" pos:column="26">remark<pos:position pos:line="56" pos:column="32"/></name></expr>?<pos:position pos:line="56" pos:column="33"/></condition><then><expr><literal type="string" pos:line="56" pos:column="33">" [REMARK] */"<pos:position pos:line="56" pos:column="47"/></literal></expr></then><else pos:line="56" pos:column="47">:<expr><literal type="string" pos:line="56" pos:column="48">""<pos:position pos:line="56" pos:column="50"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="52"/></expr_stmt>

    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><operator pos:line="58" pos:column="9">!<pos:position pos:line="58" pos:column="10"/></operator><name pos:line="58" pos:column="10">bufp<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">||<pos:position pos:line="58" pos:column="17"/></operator> <operator pos:line="58" pos:column="18">!<pos:position pos:line="58" pos:column="19"/></operator><call><name pos:line="58" pos:column="19">curl_slist_append<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">(<argument><expr><name pos:line="58" pos:column="37">easycode<pos:position pos:line="58" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="47">bufp<pos:position pos:line="58" pos:column="51"/></name></expr></argument>)<pos:position pos:line="58" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="53"/></condition><then pos:line="58" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="7">ret<pos:position pos:line="59" pos:column="10"/></name> <operator pos:line="59" pos:column="11">=<pos:position pos:line="59" pos:column="12"/></operator> <name pos:line="59" pos:column="13">CURLE_OUT_OF_MEMORY<pos:position pos:line="59" pos:column="32"/></name></expr>;<pos:position pos:line="59" pos:column="33"/></expr_stmt></block></then></if>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">bufp<pos:position pos:line="60" pos:column="13"/></name></expr>)<pos:position pos:line="60" pos:column="14"/></condition><then pos:line="60" pos:column="14">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="7">curl_free<pos:position pos:line="61" pos:column="16"/></name><argument_list pos:line="61" pos:column="16">(<argument><expr><name pos:line="61" pos:column="17">bufp<pos:position pos:line="61" pos:column="21"/></name></expr></argument>)<pos:position pos:line="61" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="23"/></expr_stmt></block></then></if>
  }<pos:position pos:line="62" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="63" pos:column="3">va_end<pos:position pos:line="63" pos:column="9"/></name><argument_list pos:line="63" pos:column="9">(<argument><expr><name pos:line="63" pos:column="10">arg<pos:position pos:line="63" pos:column="13"/></name></expr></argument>)<pos:position pos:line="63" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="15"/></expr_stmt>

  <return pos:line="65" pos:column="3">return <expr><name pos:line="65" pos:column="10">ret<pos:position pos:line="65" pos:column="13"/></name></expr>;<pos:position pos:line="65" pos:column="14"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
