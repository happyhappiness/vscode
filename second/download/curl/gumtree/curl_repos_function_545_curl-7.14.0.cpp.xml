<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_545_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ftp_state_loggedin<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">CURLE_OK<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>

<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">HAVE_KRB4<pos:position pos:line="5" pos:column="17"/></name></cpp:ifdef>
  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><name><name pos:line="6" pos:column="6">conn<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">data<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">-&gt;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="18">set<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">krb4<pos:position pos:line="6" pos:column="26"/></name></name></expr>)<pos:position pos:line="6" pos:column="27"/></condition><then pos:line="6" pos:column="27"> <block pos:line="6" pos:column="28">{
    <comment type="block" pos:line="7" pos:column="5">/* We are logged in, asked to use Kerberos. Set the requested
     * protection level
     */</comment>
    <if pos:line="10" pos:column="5">if<condition pos:line="10" pos:column="7">(<expr><name><name pos:line="10" pos:column="8">conn<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">sec_complete<pos:position pos:line="10" pos:column="26"/></name></name></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27">
      <comment type="block" pos:line="11" pos:column="7">/* BLOCKING */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="7">Curl_sec_set_protection_level<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><name pos:line="12" pos:column="37">conn<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="14" pos:column="5">/* We may need to issue a KAUTH here to have access to the files
     * do it if user supplied a password
     */</comment>
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><name><name pos:line="17" pos:column="8">conn<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">passwd<pos:position pos:line="17" pos:column="20"/></name></name> <operator pos:line="17" pos:column="21">&amp;&amp;<pos:position pos:line="17" pos:column="31"/></operator> <operator pos:line="17" pos:column="24">*<pos:position pos:line="17" pos:column="25"/></operator><name><name pos:line="17" pos:column="25">conn<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">-&gt;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="31">passwd<pos:position pos:line="17" pos:column="37"/></name></name></expr>)<pos:position pos:line="17" pos:column="38"/></condition><then pos:line="17" pos:column="38"> <block pos:line="17" pos:column="39">{
      <comment type="block" pos:line="18" pos:column="7">/* BLOCKING */</comment>
      <expr_stmt><expr><name pos:line="19" pos:column="7">result<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">Curl_krb_kauth<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">conn<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
      <if pos:line="20" pos:column="7">if<condition pos:line="20" pos:column="9">(<expr><name pos:line="20" pos:column="10">result<pos:position pos:line="20" pos:column="16"/></name></expr>)<pos:position pos:line="20" pos:column="17"/></condition><then pos:line="20" pos:column="17">
        <block type="pseudo"><return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">result<pos:position pos:line="21" pos:column="22"/></name></expr>;<pos:position pos:line="21" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name><name pos:line="25" pos:column="6">conn<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">ssl<pos:position pos:line="25" pos:column="15"/></name><index pos:line="25" pos:column="15">[<expr><name pos:line="25" pos:column="16">FIRSTSOCKET<pos:position pos:line="25" pos:column="27"/></name></expr>]<pos:position pos:line="25" pos:column="28"/></index></name><operator pos:line="25" pos:column="28">.<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">use<pos:position pos:line="25" pos:column="32"/></name></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33"> <block pos:line="25" pos:column="34">{
    <comment type="block" pos:line="26" pos:column="5">/* PBSZ = PROTECTION BUFFER SIZE.

    The 'draft-murray-auth-ftp-ssl' (draft 12, page 7) says:

    Specifically, the PROT command MUST be preceded by a PBSZ
    command and a PBSZ command MUST be preceded by a successful
    security data exchange (the TLS negotiation in this case)

    ... (and on page 8):

    Thus the PBSZ command must still be issued, but must have a
    parameter of '0' to indicate that no buffering is taking place
    and the data connection should not be encapsulated.
    */</comment>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">NBFTPSENDF<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">conn<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="22">"PBSZ %d"<pos:position pos:line="40" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="33">0<pos:position pos:line="40" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">state<pos:position pos:line="41" pos:column="10"/></name><argument_list pos:line="41" pos:column="10">(<argument><expr><name pos:line="41" pos:column="11">conn<pos:position pos:line="41" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="17">FTP_PBSZ<pos:position pos:line="41" pos:column="25"/></name></expr></argument>)<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="42" pos:column="4"/></block></then>
  <else pos:line="43" pos:column="3">else <block pos:line="43" pos:column="8">{
    <expr_stmt><expr><name pos:line="44" pos:column="5">result<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">ftp_state_pwd<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">conn<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="45" pos:column="4"/></block></else></if>
  <return pos:line="46" pos:column="3">return <expr><name pos:line="46" pos:column="10">result<pos:position pos:line="46" pos:column="16"/></name></expr>;<pos:position pos:line="46" pos:column="17"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
