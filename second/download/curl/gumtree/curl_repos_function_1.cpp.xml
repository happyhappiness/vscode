<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">glob_set<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">pattern<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">pos<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list> <block pos:line="1" pos:column="38">{
  <comment type="block" pos:line="2" pos:column="3">/* processes a set expression with the point behind the opening '{'
     ','-separated elements are collected until the next closing '}'
  */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name><modifier pos:line="5" pos:column="7">*<pos:position pos:line="5" pos:column="8"/></modifier></type> <name pos:line="5" pos:column="9">buf<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">glob_buffer<pos:position pos:line="5" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">URLPattern<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">pat<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">pat<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <operator pos:line="8" pos:column="9">(<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">URLPattern<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></operator><operator pos:line="8" pos:column="21">)<pos:position pos:line="8" pos:column="22"/></operator><operator pos:line="8" pos:column="22">&amp;<pos:position pos:line="8" pos:column="27"/></operator><name><name pos:line="8" pos:column="23">glob_expand<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">pattern<pos:position pos:line="8" pos:column="43"/></name><index pos:line="8" pos:column="43">[<expr><name><name pos:line="8" pos:column="44">glob_expand<pos:position pos:line="8" pos:column="55"/></name><operator pos:line="8" pos:column="55">-&gt;<pos:position pos:line="8" pos:column="60"/></operator><name pos:line="8" pos:column="57">size<pos:position pos:line="8" pos:column="61"/></name></name> <operator pos:line="8" pos:column="62">/<pos:position pos:line="8" pos:column="63"/></operator> <literal type="number" pos:line="8" pos:column="64">2<pos:position pos:line="8" pos:column="65"/></literal></expr>]<pos:position pos:line="8" pos:column="66"/></index></name></expr>;<pos:position pos:line="8" pos:column="67"/></expr_stmt>
  <comment type="block" pos:line="9" pos:column="3">/* patterns 0,1,2,... correspond to size=1,3,5,... */</comment>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">pat<pos:position pos:line="10" pos:column="6"/></name><operator pos:line="10" pos:column="6">-&gt;<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="8">type<pos:position pos:line="10" pos:column="12"/></name></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="15">UPTSet<pos:position pos:line="10" pos:column="21"/></name></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">pat<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">-&gt;<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="8">content<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">Set<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">.<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">size<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">pat<pos:position pos:line="12" pos:column="6"/></name><operator pos:line="12" pos:column="6">-&gt;<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="8">content<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">Set<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">.<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">ptr_s<pos:position pos:line="12" pos:column="25"/></name></name> <operator pos:line="12" pos:column="26">=<pos:position pos:line="12" pos:column="27"/></operator> <literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">pat<pos:position pos:line="13" pos:column="6"/></name><operator pos:line="13" pos:column="6">-&gt;<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="8">content<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">Set<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">elements<pos:position pos:line="13" pos:column="28"/></name></name> <operator pos:line="13" pos:column="29">=<pos:position pos:line="13" pos:column="30"/></operator> <operator pos:line="13" pos:column="31">(<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="32">char<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">*<pos:position pos:line="13" pos:column="37"/></operator><operator pos:line="13" pos:column="37">*<pos:position pos:line="13" pos:column="38"/></operator><operator pos:line="13" pos:column="38">)<pos:position pos:line="13" pos:column="39"/></operator><call><name pos:line="13" pos:column="39">malloc<pos:position pos:line="13" pos:column="45"/></name><argument_list pos:line="13" pos:column="45">(<argument><expr><literal type="number" pos:line="13" pos:column="46">0<pos:position pos:line="13" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="14" pos:column="3">++<pos:position pos:line="14" pos:column="5"/></operator><name><name pos:line="14" pos:column="5">glob_expand<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">size<pos:position pos:line="14" pos:column="22"/></name></name></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>

  <while pos:line="16" pos:column="3">while <condition pos:line="16" pos:column="9">(<expr><literal type="number" pos:line="16" pos:column="10">1<pos:position pos:line="16" pos:column="11"/></literal></expr>)<pos:position pos:line="16" pos:column="12"/></condition> <block pos:line="16" pos:column="13">{
    <switch pos:line="17" pos:column="5">switch <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">*<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">pattern<pos:position pos:line="17" pos:column="21"/></name></expr>)<pos:position pos:line="17" pos:column="22"/></condition> <block pos:line="17" pos:column="23">{
    <case pos:line="18" pos:column="5">case <expr><literal type="char" pos:line="18" pos:column="10">'\0'<pos:position pos:line="18" pos:column="14"/></literal></expr>:<pos:position pos:line="18" pos:column="15"/></case>				<comment type="block" pos:line="18" pos:column="41">/* URL ended while set was still open */</comment>
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">printf<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><literal type="string" pos:line="19" pos:column="14">"error: unmatched brace at pos %d\n"<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="52">pos<pos:position pos:line="19" pos:column="55"/></name></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">exit<pos:position pos:line="20" pos:column="11"/></name> <argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">CURLE_URL_MALFORMAT<pos:position pos:line="20" pos:column="32"/></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
    <case pos:line="21" pos:column="5">case <expr><literal type="char" pos:line="21" pos:column="10">'{'<pos:position pos:line="21" pos:column="13"/></literal></expr>:<pos:position pos:line="21" pos:column="14"/></case>
    <case pos:line="22" pos:column="5">case <expr><literal type="char" pos:line="22" pos:column="10">'['<pos:position pos:line="22" pos:column="13"/></literal></expr>:<pos:position pos:line="22" pos:column="14"/></case>				<comment type="block" pos:line="22" pos:column="41">/* no nested expressions at this time */</comment>
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">printf<pos:position pos:line="23" pos:column="13"/></name><argument_list pos:line="23" pos:column="13">(<argument><expr><literal type="string" pos:line="23" pos:column="14">"error: nested braces not supported %d\n"<pos:position pos:line="23" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="57">pos<pos:position pos:line="23" pos:column="60"/></name></expr></argument>)<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">exit<pos:position pos:line="24" pos:column="11"/></name> <argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">CURLE_URL_MALFORMAT<pos:position pos:line="24" pos:column="32"/></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
    <case pos:line="25" pos:column="5">case <expr><literal type="char" pos:line="25" pos:column="10">','<pos:position pos:line="25" pos:column="13"/></literal></expr>:<pos:position pos:line="25" pos:column="14"/></case>
    <case pos:line="26" pos:column="5">case <expr><literal type="char" pos:line="26" pos:column="10">'}'<pos:position pos:line="26" pos:column="13"/></literal></expr>:<pos:position pos:line="26" pos:column="14"/></case>				<comment type="block" pos:line="26" pos:column="41">/* set element completed */</comment>
      <expr_stmt><expr><operator pos:line="27" pos:column="7">*<pos:position pos:line="27" pos:column="8"/></operator><name pos:line="27" pos:column="8">buf<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <literal type="char" pos:line="27" pos:column="14">'\0'<pos:position pos:line="27" pos:column="18"/></literal></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="28" pos:column="7">pat<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">content<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">.<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">Set<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">.<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="24">elements<pos:position pos:line="28" pos:column="32"/></name></name> <operator pos:line="28" pos:column="33">=<pos:position pos:line="28" pos:column="34"/></operator> <call><name pos:line="28" pos:column="35">realloc<pos:position pos:line="28" pos:column="42"/></name><argument_list pos:line="28" pos:column="42">(<argument><expr><name><name pos:line="28" pos:column="43">pat<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">-&gt;<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="48">content<pos:position pos:line="28" pos:column="55"/></name><operator pos:line="28" pos:column="55">.<pos:position pos:line="28" pos:column="56"/></operator><name pos:line="28" pos:column="56">Set<pos:position pos:line="28" pos:column="59"/></name><operator pos:line="28" pos:column="59">.<pos:position pos:line="28" pos:column="60"/></operator><name pos:line="28" pos:column="60">elements<pos:position pos:line="28" pos:column="68"/></name></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="70">(<pos:position pos:line="28" pos:column="71"/></operator><name><name pos:line="28" pos:column="71">pat<pos:position pos:line="28" pos:column="74"/></name><operator pos:line="28" pos:column="74">-&gt;<pos:position pos:line="28" pos:column="79"/></operator><name pos:line="28" pos:column="76">content<pos:position pos:line="28" pos:column="83"/></name><operator pos:line="28" pos:column="83">.<pos:position pos:line="28" pos:column="84"/></operator><name pos:line="28" pos:column="84">Set<pos:position pos:line="28" pos:column="87"/></name><operator pos:line="28" pos:column="87">.<pos:position pos:line="28" pos:column="88"/></operator><name pos:line="28" pos:column="88">size<pos:position pos:line="28" pos:column="92"/></name></name> <operator pos:line="28" pos:column="93">+<pos:position pos:line="28" pos:column="94"/></operator> <literal type="number" pos:line="28" pos:column="95">1<pos:position pos:line="28" pos:column="96"/></literal><operator pos:line="28" pos:column="96">)<pos:position pos:line="28" pos:column="97"/></operator> <operator pos:line="28" pos:column="98">*<pos:position pos:line="28" pos:column="99"/></operator> <sizeof pos:line="28" pos:column="100">sizeof<argument_list pos:line="28" pos:column="106">(<argument><expr><name pos:line="28" pos:column="107">char<pos:position pos:line="28" pos:column="111"/></name><operator pos:line="28" pos:column="111">*<pos:position pos:line="28" pos:column="112"/></operator></expr></argument>)<pos:position pos:line="28" pos:column="113"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="115"/></expr_stmt>
      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><operator pos:line="29" pos:column="11">!<pos:position pos:line="29" pos:column="12"/></operator><name><name pos:line="29" pos:column="12">pat<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">content<pos:position pos:line="29" pos:column="24"/></name><operator pos:line="29" pos:column="24">.<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">Set<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">.<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="29">elements<pos:position pos:line="29" pos:column="37"/></name></name></expr>)<pos:position pos:line="29" pos:column="38"/></condition><then pos:line="29" pos:column="38"> <block pos:line="29" pos:column="39">{
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">printf<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="string" pos:line="30" pos:column="16">"out of memory in set pattern\n"<pos:position pos:line="30" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">exit<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
      }<pos:position pos:line="32" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="33" pos:column="7">pat<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">content<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">Set<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">.<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">elements<pos:position pos:line="33" pos:column="32"/></name><index pos:line="33" pos:column="32">[<expr><name><name pos:line="33" pos:column="33">pat<pos:position pos:line="33" pos:column="36"/></name><operator pos:line="33" pos:column="36">-&gt;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="38">content<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">.<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="46">Set<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">.<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="50">size<pos:position pos:line="33" pos:column="54"/></name></name></expr>]<pos:position pos:line="33" pos:column="55"/></index></name> <operator pos:line="33" pos:column="56">=<pos:position pos:line="33" pos:column="57"/></operator> <call><name pos:line="33" pos:column="58">strdup<pos:position pos:line="33" pos:column="64"/></name><argument_list pos:line="33" pos:column="64">(<argument><expr><name pos:line="33" pos:column="65">glob_buffer<pos:position pos:line="33" pos:column="76"/></name></expr></argument>)<pos:position pos:line="33" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="34" pos:column="7">++<pos:position pos:line="34" pos:column="9"/></operator><name><name pos:line="34" pos:column="9">pat<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">-&gt;<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="14">content<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">.<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">Set<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">.<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">size<pos:position pos:line="34" pos:column="30"/></name></name></expr>;<pos:position pos:line="34" pos:column="31"/></expr_stmt>

      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><operator pos:line="36" pos:column="11">*<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">pattern<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">==<pos:position pos:line="36" pos:column="22"/></operator> <literal type="char" pos:line="36" pos:column="23">'}'<pos:position pos:line="36" pos:column="26"/></literal></expr>)<pos:position pos:line="36" pos:column="27"/></condition><then pos:line="36" pos:column="27">		<comment type="block" pos:line="36" pos:column="41">/* entire set pattern completed */</comment>
	<comment type="block" pos:line="37" pos:column="9">/* always check for a literal (may be "") between patterns */</comment>
	<block type="pseudo"><return pos:line="38" pos:column="9">return <expr><name><name pos:line="38" pos:column="16">pat<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">-&gt;<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="21">content<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">.<pos:position pos:line="38" pos:column="29"/></operator><name pos:line="38" pos:column="29">Set<pos:position pos:line="38" pos:column="32"/></name><operator pos:line="38" pos:column="32">.<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="33">size<pos:position pos:line="38" pos:column="37"/></name></name> <operator pos:line="38" pos:column="38">*<pos:position pos:line="38" pos:column="39"/></operator> <call><name pos:line="38" pos:column="40">glob_word<pos:position pos:line="38" pos:column="49"/></name><argument_list pos:line="38" pos:column="49">(<argument><expr><operator pos:line="38" pos:column="50">++<pos:position pos:line="38" pos:column="52"/></operator><name pos:line="38" pos:column="52">pattern<pos:position pos:line="38" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="61">++<pos:position pos:line="38" pos:column="63"/></operator><name pos:line="38" pos:column="63">pos<pos:position pos:line="38" pos:column="66"/></name></expr></argument>)<pos:position pos:line="38" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="68"/></return></block></then></if>

      <expr_stmt><expr><name pos:line="40" pos:column="7">buf<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <name pos:line="40" pos:column="13">glob_buffer<pos:position pos:line="40" pos:column="24"/></name></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="41" pos:column="7">++<pos:position pos:line="41" pos:column="9"/></operator><name pos:line="41" pos:column="9">pattern<pos:position pos:line="41" pos:column="16"/></name></expr>;<pos:position pos:line="41" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="42" pos:column="7">++<pos:position pos:line="42" pos:column="9"/></operator><name pos:line="42" pos:column="9">pos<pos:position pos:line="42" pos:column="12"/></name></expr>;<pos:position pos:line="42" pos:column="13"/></expr_stmt>
      <break pos:line="43" pos:column="7">break;<pos:position pos:line="43" pos:column="13"/></break>
    <case pos:line="44" pos:column="5">case <expr><literal type="char" pos:line="44" pos:column="10">']'<pos:position pos:line="44" pos:column="13"/></literal></expr>:<pos:position pos:line="44" pos:column="14"/></case>				<comment type="block" pos:line="44" pos:column="41">/* illegal closing bracket */</comment>
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">printf<pos:position pos:line="45" pos:column="13"/></name><argument_list pos:line="45" pos:column="13">(<argument><expr><literal type="string" pos:line="45" pos:column="14">"error: illegal pattern at pos %d\n"<pos:position pos:line="45" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="52">pos<pos:position pos:line="45" pos:column="55"/></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="57"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">exit<pos:position pos:line="46" pos:column="11"/></name> <argument_list pos:line="46" pos:column="12">(<argument><expr><name pos:line="46" pos:column="13">CURLE_URL_MALFORMAT<pos:position pos:line="46" pos:column="32"/></name></expr></argument>)<pos:position pos:line="46" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="34"/></expr_stmt>
    <case pos:line="47" pos:column="5">case <expr><literal type="char" pos:line="47" pos:column="10">'\\'<pos:position pos:line="47" pos:column="14"/></literal></expr>:<pos:position pos:line="47" pos:column="15"/></case>				<comment type="block" pos:line="47" pos:column="41">/* escaped character, skip '\' */</comment>
      <if pos:line="48" pos:column="7">if <condition pos:line="48" pos:column="10">(<expr><operator pos:line="48" pos:column="11">*<pos:position pos:line="48" pos:column="12"/></operator><operator pos:line="48" pos:column="12">(<pos:position pos:line="48" pos:column="13"/></operator><name pos:line="48" pos:column="13">buf<pos:position pos:line="48" pos:column="16"/></name><operator pos:line="48" pos:column="16">+<pos:position pos:line="48" pos:column="17"/></operator><literal type="number" pos:line="48" pos:column="17">1<pos:position pos:line="48" pos:column="18"/></literal><operator pos:line="48" pos:column="18">)<pos:position pos:line="48" pos:column="19"/></operator> <operator pos:line="48" pos:column="20">==<pos:position pos:line="48" pos:column="22"/></operator> <literal type="char" pos:line="48" pos:column="23">'\0'<pos:position pos:line="48" pos:column="27"/></literal></expr>)<pos:position pos:line="48" pos:column="28"/></condition><then pos:line="48" pos:column="28"> <block pos:line="48" pos:column="29">{		<comment type="block" pos:line="48" pos:column="41">/* but no escaping of '\0'! */</comment>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">printf<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="string" pos:line="49" pos:column="16">"error: illegal pattern at pos %d\n"<pos:position pos:line="49" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="54">pos<pos:position pos:line="49" pos:column="57"/></name></expr></argument>)<pos:position pos:line="49" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="50" pos:column="9">exit<pos:position pos:line="50" pos:column="13"/></name> <argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">CURLE_URL_MALFORMAT<pos:position pos:line="50" pos:column="34"/></name></expr></argument>)<pos:position pos:line="50" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="51" pos:column="8"/></block></then></if>
      <expr_stmt><expr><operator pos:line="52" pos:column="7">++<pos:position pos:line="52" pos:column="9"/></operator><name pos:line="52" pos:column="9">pattern<pos:position pos:line="52" pos:column="16"/></name></expr>;<pos:position pos:line="52" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="53" pos:column="7">++<pos:position pos:line="53" pos:column="9"/></operator><name pos:line="53" pos:column="9">pos<pos:position pos:line="53" pos:column="12"/></name></expr>;<pos:position pos:line="53" pos:column="13"/></expr_stmt>				<comment type="block" pos:line="53" pos:column="41">/* intentional fallthrough */</comment>
    <default pos:line="54" pos:column="5">default:<pos:position pos:line="54" pos:column="13"/></default>
      <expr_stmt><expr><operator pos:line="55" pos:column="7">*<pos:position pos:line="55" pos:column="8"/></operator><name pos:line="55" pos:column="8">buf<pos:position pos:line="55" pos:column="11"/></name><operator pos:line="55" pos:column="11">++<pos:position pos:line="55" pos:column="13"/></operator> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <operator pos:line="55" pos:column="16">*<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="17">pattern<pos:position pos:line="55" pos:column="24"/></name><operator pos:line="55" pos:column="24">++<pos:position pos:line="55" pos:column="26"/></operator></expr>;<pos:position pos:line="55" pos:column="27"/></expr_stmt>		<comment type="block" pos:line="55" pos:column="41">/* copy character to set element */</comment>
      <expr_stmt><expr><operator pos:line="56" pos:column="7">++<pos:position pos:line="56" pos:column="9"/></operator><name pos:line="56" pos:column="9">pos<pos:position pos:line="56" pos:column="12"/></name></expr>;<pos:position pos:line="56" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></switch>
  }<pos:position pos:line="58" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">exit<pos:position pos:line="59" pos:column="7"/></name> <argument_list pos:line="59" pos:column="8">(<argument><expr><name pos:line="59" pos:column="9">CURLE_FAILED_INIT<pos:position pos:line="59" pos:column="26"/></name></expr></argument>)<pos:position pos:line="59" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
