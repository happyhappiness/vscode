<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_185_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">test<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">char<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">URL<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">res<pos:position pos:line="3" pos:column="10"/></name> <init pos:line="3" pos:column="11">= <expr><literal type="number" pos:line="3" pos:column="13">0<pos:position pos:line="3" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURL<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name><name pos:line="4" pos:column="9">curl<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">NUM_HANDLES<pos:position pos:line="4" pos:column="25"/></name></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">running<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">done<pos:position pos:line="6" pos:column="12"/></name><init pos:line="6" pos:column="12">=<expr><name pos:line="6" pos:column="13">FALSE<pos:position pos:line="6" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLM<pos:position pos:line="7" pos:column="8"/></name> <modifier pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></modifier></type><name pos:line="7" pos:column="10">m<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">current<pos:position pos:line="8" pos:column="14"/></name><init pos:line="8" pos:column="14">=<expr><literal type="number" pos:line="8" pos:column="15">0<pos:position pos:line="8" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">i<pos:position pos:line="9" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="10">j<pos:position pos:line="9" pos:column="11"/></name></decl>;<pos:position pos:line="9" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">timeval<pos:position pos:line="10" pos:column="17"/></name></name></type> <name pos:line="10" pos:column="18">ml_start<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">timeval<pos:position pos:line="11" pos:column="17"/></name></name></type> <name pos:line="11" pos:column="18">mp_start<pos:position pos:line="11" pos:column="26"/></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">ml_timedout<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><name pos:line="12" pos:column="22">FALSE<pos:position pos:line="12" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name></type> <name pos:line="13" pos:column="8">mp_timedout<pos:position pos:line="13" pos:column="19"/></name> <init pos:line="13" pos:column="20">= <expr><name pos:line="13" pos:column="22">FALSE<pos:position pos:line="13" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="28"/></decl_stmt>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><call><name pos:line="15" pos:column="7">curl_global_init<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">CURL_GLOBAL_ALL<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call> <operator pos:line="15" pos:column="41">!=<pos:position pos:line="15" pos:column="43"/></operator> <name pos:line="15" pos:column="44">CURLE_OK<pos:position pos:line="15" pos:column="52"/></name></expr>)<pos:position pos:line="15" pos:column="53"/></condition><then pos:line="15" pos:column="53"> <block pos:line="15" pos:column="54">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">fprintf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">stderr<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="21">"curl_global_init() failed\n"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="20" pos:column="3">/* get NUM_HANDLES easy handles */</comment>
  <for pos:line="21" pos:column="3">for<control pos:line="21" pos:column="6">(<init><expr><name pos:line="21" pos:column="7">i<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator><literal type="number" pos:line="21" pos:column="9">0<pos:position pos:line="21" pos:column="10"/></literal></expr>;<pos:position pos:line="21" pos:column="11"/></init> <condition><expr><name pos:line="21" pos:column="12">i<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">&lt;<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="16">NUM_HANDLES<pos:position pos:line="21" pos:column="27"/></name></expr>;<pos:position pos:line="21" pos:column="28"/></condition> <incr><expr><name pos:line="21" pos:column="29">i<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">++<pos:position pos:line="21" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="33"/></control> <block pos:line="21" pos:column="34">{
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">curl<pos:position pos:line="22" pos:column="9"/></name><index pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">i<pos:position pos:line="22" pos:column="11"/></name></expr>]<pos:position pos:line="22" pos:column="12"/></index></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">curl_easy_init<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">()<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">(<expr><operator pos:line="23" pos:column="8">!<pos:position pos:line="23" pos:column="9"/></operator><name><name pos:line="23" pos:column="9">curl<pos:position pos:line="23" pos:column="13"/></name><index pos:line="23" pos:column="13">[<expr><name pos:line="23" pos:column="14">i<pos:position pos:line="23" pos:column="15"/></name></expr>]<pos:position pos:line="23" pos:column="16"/></index></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17"> <block pos:line="23" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">fprintf<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">stderr<pos:position pos:line="24" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="23">"curl_easy_init() failed "<pos:position pos:line="24" pos:column="49"/></literal>
              <literal type="string" pos:line="25" pos:column="15">"on handle #%d\n"<pos:position pos:line="25" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">i<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>
      <for pos:line="26" pos:column="7">for <control pos:line="26" pos:column="11">(<init><expr><name pos:line="26" pos:column="12">j<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">-<pos:position pos:line="26" pos:column="16"/></operator><literal type="number" pos:line="26" pos:column="16">1<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></init> <condition><expr><name pos:line="26" pos:column="19">j<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">&gt;=<pos:position pos:line="26" pos:column="26"/></operator> <literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></condition> <incr><expr><name pos:line="26" pos:column="27">j<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">--<pos:position pos:line="26" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="31"/></control> <block pos:line="26" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">curl_easy_cleanup<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name><name pos:line="27" pos:column="27">curl<pos:position pos:line="27" pos:column="31"/></name><index pos:line="27" pos:column="31">[<expr><name pos:line="27" pos:column="32">j<pos:position pos:line="27" pos:column="33"/></name></expr>]<pos:position pos:line="27" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="28" pos:column="8"/></block></for>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">curl_global_cleanup<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">()<pos:position pos:line="29" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
      <return pos:line="30" pos:column="7">return <expr><name pos:line="30" pos:column="14">TEST_ERR_MAJOR_BAD<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">+<pos:position pos:line="30" pos:column="34"/></operator> <name pos:line="30" pos:column="35">i<pos:position pos:line="30" pos:column="36"/></name></expr>;<pos:position pos:line="30" pos:column="37"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">curl_easy_setopt<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name><name pos:line="32" pos:column="22">curl<pos:position pos:line="32" pos:column="26"/></name><index pos:line="32" pos:column="26">[<expr><name pos:line="32" pos:column="27">i<pos:position pos:line="32" pos:column="28"/></name></expr>]<pos:position pos:line="32" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="31">CURLOPT_URL<pos:position pos:line="32" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="44">URL<pos:position pos:line="32" pos:column="47"/></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* go verbose */</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">curl_easy_setopt<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name><name pos:line="35" pos:column="22">curl<pos:position pos:line="35" pos:column="26"/></name><index pos:line="35" pos:column="26">[<expr><name pos:line="35" pos:column="27">i<pos:position pos:line="35" pos:column="28"/></name></expr>]<pos:position pos:line="35" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="31">CURLOPT_VERBOSE<pos:position pos:line="35" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="48">1<pos:position pos:line="35" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="36" pos:column="4"/></block></for>

  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><operator pos:line="38" pos:column="7">(<pos:position pos:line="38" pos:column="8"/></operator><name pos:line="38" pos:column="8">m<pos:position pos:line="38" pos:column="9"/></name> <operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator> <call><name pos:line="38" pos:column="12">curl_multi_init<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">()<pos:position pos:line="38" pos:column="29"/></argument_list></call><operator pos:line="38" pos:column="29">)<pos:position pos:line="38" pos:column="30"/></operator> <operator pos:line="38" pos:column="31">==<pos:position pos:line="38" pos:column="33"/></operator> <name pos:line="38" pos:column="34">NULL<pos:position pos:line="38" pos:column="38"/></name></expr>)<pos:position pos:line="38" pos:column="39"/></condition><then pos:line="38" pos:column="39"> <block pos:line="38" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">fprintf<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name pos:line="39" pos:column="13">stderr<pos:position pos:line="39" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="21">"curl_multi_init() failed\n"<pos:position pos:line="39" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="51"/></expr_stmt>
    <for pos:line="40" pos:column="5">for<control pos:line="40" pos:column="8">(<init><expr><name pos:line="40" pos:column="9">i<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator><literal type="number" pos:line="40" pos:column="11">0<pos:position pos:line="40" pos:column="12"/></literal></expr>;<pos:position pos:line="40" pos:column="13"/></init> <condition><expr><name pos:line="40" pos:column="14">i<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">&lt;<pos:position pos:line="40" pos:column="20"/></operator> <name pos:line="40" pos:column="18">NUM_HANDLES<pos:position pos:line="40" pos:column="29"/></name></expr>;<pos:position pos:line="40" pos:column="30"/></condition> <incr><expr><name pos:line="40" pos:column="31">i<pos:position pos:line="40" pos:column="32"/></name><operator pos:line="40" pos:column="32">++<pos:position pos:line="40" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="40" pos:column="35"/></control> <block pos:line="40" pos:column="36">{
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">curl_easy_cleanup<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name><name pos:line="41" pos:column="25">curl<pos:position pos:line="41" pos:column="29"/></name><index pos:line="41" pos:column="29">[<expr><name pos:line="41" pos:column="30">i<pos:position pos:line="41" pos:column="31"/></name></expr>]<pos:position pos:line="41" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">curl_global_cleanup<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">()<pos:position pos:line="43" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt>
    <return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="44" pos:column="30"/></name></expr>;<pos:position pos:line="44" pos:column="31"/></return>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <if pos:line="47" pos:column="3">if <condition pos:line="47" pos:column="6">(<expr><operator pos:line="47" pos:column="7">(<pos:position pos:line="47" pos:column="8"/></operator><name pos:line="47" pos:column="8">res<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <operator pos:line="47" pos:column="14">(<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">int<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">)<pos:position pos:line="47" pos:column="19"/></operator><call><name pos:line="47" pos:column="19">curl_multi_add_handle<pos:position pos:line="47" pos:column="40"/></name><argument_list pos:line="47" pos:column="40">(<argument><expr><name pos:line="47" pos:column="41">m<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="44">curl<pos:position pos:line="47" pos:column="48"/></name><index pos:line="47" pos:column="48">[<expr><name pos:line="47" pos:column="49">current<pos:position pos:line="47" pos:column="56"/></name></expr>]<pos:position pos:line="47" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="47" pos:column="58"/></argument_list></call><operator pos:line="47" pos:column="58">)<pos:position pos:line="47" pos:column="59"/></operator> <operator pos:line="47" pos:column="60">!=<pos:position pos:line="47" pos:column="62"/></operator> <name pos:line="47" pos:column="63">CURLM_OK<pos:position pos:line="47" pos:column="71"/></name></expr>)<pos:position pos:line="47" pos:column="72"/></condition><then pos:line="47" pos:column="72"> <block pos:line="47" pos:column="73">{
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">fprintf<pos:position pos:line="48" pos:column="12"/></name><argument_list pos:line="48" pos:column="12">(<argument><expr><name pos:line="48" pos:column="13">stderr<pos:position pos:line="48" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="21">"curl_multi_add_handle() failed, "<pos:position pos:line="48" pos:column="55"/></literal>
            <literal type="string" pos:line="49" pos:column="13">"with code %d\n"<pos:position pos:line="49" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="31">res<pos:position pos:line="49" pos:column="34"/></name></expr></argument>)<pos:position pos:line="49" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">curl_multi_cleanup<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">m<pos:position pos:line="50" pos:column="25"/></name></expr></argument>)<pos:position pos:line="50" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="27"/></expr_stmt>
    <for pos:line="51" pos:column="5">for<control pos:line="51" pos:column="8">(<init><expr><name pos:line="51" pos:column="9">i<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">=<pos:position pos:line="51" pos:column="11"/></operator><literal type="number" pos:line="51" pos:column="11">0<pos:position pos:line="51" pos:column="12"/></literal></expr>;<pos:position pos:line="51" pos:column="13"/></init> <condition><expr><name pos:line="51" pos:column="14">i<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">&lt;<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="18">NUM_HANDLES<pos:position pos:line="51" pos:column="29"/></name></expr>;<pos:position pos:line="51" pos:column="30"/></condition> <incr><expr><name pos:line="51" pos:column="31">i<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">++<pos:position pos:line="51" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="35"/></control> <block pos:line="51" pos:column="36">{
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">curl_easy_cleanup<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name><name pos:line="52" pos:column="25">curl<pos:position pos:line="52" pos:column="29"/></name><index pos:line="52" pos:column="29">[<expr><name pos:line="52" pos:column="30">i<pos:position pos:line="52" pos:column="31"/></name></expr>]<pos:position pos:line="52" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">curl_global_cleanup<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">()<pos:position pos:line="54" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="27"/></expr_stmt>
    <return pos:line="55" pos:column="5">return <expr><name pos:line="55" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="55" pos:column="30"/></name></expr>;<pos:position pos:line="55" pos:column="31"/></return>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="58" pos:column="3">ml_timedout<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">=<pos:position pos:line="58" pos:column="16"/></operator> <name pos:line="58" pos:column="17">FALSE<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="59" pos:column="3">ml_start<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">=<pos:position pos:line="59" pos:column="13"/></operator> <call><name pos:line="59" pos:column="14">tutil_tvnow<pos:position pos:line="59" pos:column="25"/></name><argument_list pos:line="59" pos:column="25">()<pos:position pos:line="59" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="61" pos:column="3">fprintf<pos:position pos:line="61" pos:column="10"/></name><argument_list pos:line="61" pos:column="10">(<argument><expr><name pos:line="61" pos:column="11">stderr<pos:position pos:line="61" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="19">"Start at URL 0\n"<pos:position pos:line="61" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="39"/></expr_stmt>

  <while pos:line="63" pos:column="3">while <condition pos:line="63" pos:column="9">(<expr><operator pos:line="63" pos:column="10">!<pos:position pos:line="63" pos:column="11"/></operator><name pos:line="63" pos:column="11">done<pos:position pos:line="63" pos:column="15"/></name></expr>)<pos:position pos:line="63" pos:column="16"/></condition> <block pos:line="63" pos:column="17">{
    <decl_stmt><decl><type><name pos:line="64" pos:column="5">fd_set<pos:position pos:line="64" pos:column="11"/></name></type> <name pos:line="64" pos:column="12">rd<pos:position pos:line="64" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="64" pos:column="16">wr<pos:position pos:line="64" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="64" pos:column="20">exc<pos:position pos:line="64" pos:column="23"/></name></decl>;<pos:position pos:line="64" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="65" pos:column="5">int<pos:position pos:line="65" pos:column="8"/></name></type> <name pos:line="65" pos:column="9">max_fd<pos:position pos:line="65" pos:column="15"/></name></decl>;<pos:position pos:line="65" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="66" pos:column="5">struct<pos:position pos:line="66" pos:column="11"/></name> <name pos:line="66" pos:column="12">timeval<pos:position pos:line="66" pos:column="19"/></name></name></type> <name pos:line="66" pos:column="20">interval<pos:position pos:line="66" pos:column="28"/></name></decl>;<pos:position pos:line="66" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="68" pos:column="5">interval<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">.<pos:position pos:line="68" pos:column="14"/></operator><name pos:line="68" pos:column="14">tv_sec<pos:position pos:line="68" pos:column="20"/></name></name> <operator pos:line="68" pos:column="21">=<pos:position pos:line="68" pos:column="22"/></operator> <literal type="number" pos:line="68" pos:column="23">1<pos:position pos:line="68" pos:column="24"/></literal></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="69" pos:column="5">interval<pos:position pos:line="69" pos:column="13"/></name><operator pos:line="69" pos:column="13">.<pos:position pos:line="69" pos:column="14"/></operator><name pos:line="69" pos:column="14">tv_usec<pos:position pos:line="69" pos:column="21"/></name></name> <operator pos:line="69" pos:column="22">=<pos:position pos:line="69" pos:column="23"/></operator> <literal type="number" pos:line="69" pos:column="24">0<pos:position pos:line="69" pos:column="25"/></literal></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt>

    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><call><name pos:line="71" pos:column="9">tutil_tvdiff<pos:position pos:line="71" pos:column="21"/></name><argument_list pos:line="71" pos:column="21">(<argument><expr><call><name pos:line="71" pos:column="22">tutil_tvnow<pos:position pos:line="71" pos:column="33"/></name><argument_list pos:line="71" pos:column="33">()<pos:position pos:line="71" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="71" pos:column="37">ml_start<pos:position pos:line="71" pos:column="45"/></name></expr></argument>)<pos:position pos:line="71" pos:column="46"/></argument_list></call> <operator pos:line="71" pos:column="47">&gt;<pos:position pos:line="71" pos:column="51"/></operator> 
        <name pos:line="72" pos:column="9">MAIN_LOOP_HANG_TIMEOUT<pos:position pos:line="72" pos:column="31"/></name></expr>)<pos:position pos:line="72" pos:column="32"/></condition><then pos:line="72" pos:column="32"> <block pos:line="72" pos:column="33">{
      <expr_stmt><expr><name pos:line="73" pos:column="7">ml_timedout<pos:position pos:line="73" pos:column="18"/></name> <operator pos:line="73" pos:column="19">=<pos:position pos:line="73" pos:column="20"/></operator> <name pos:line="73" pos:column="21">TRUE<pos:position pos:line="73" pos:column="25"/></name></expr>;<pos:position pos:line="73" pos:column="26"/></expr_stmt>
      <break pos:line="74" pos:column="7">break;<pos:position pos:line="74" pos:column="13"/></break>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="76" pos:column="5">mp_timedout<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name pos:line="76" pos:column="19">FALSE<pos:position pos:line="76" pos:column="24"/></name></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="77" pos:column="5">mp_start<pos:position pos:line="77" pos:column="13"/></name> <operator pos:line="77" pos:column="14">=<pos:position pos:line="77" pos:column="15"/></operator> <call><name pos:line="77" pos:column="16">tutil_tvnow<pos:position pos:line="77" pos:column="27"/></name><argument_list pos:line="77" pos:column="27">()<pos:position pos:line="77" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt>

    <while pos:line="79" pos:column="5">while <condition pos:line="79" pos:column="11">(<expr><name pos:line="79" pos:column="12">res<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">==<pos:position pos:line="79" pos:column="18"/></operator> <name pos:line="79" pos:column="19">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="79" pos:column="43"/></name></expr>)<pos:position pos:line="79" pos:column="44"/></condition> <block pos:line="79" pos:column="45">{
      <expr_stmt><expr><name pos:line="80" pos:column="7">res<pos:position pos:line="80" pos:column="10"/></name> <operator pos:line="80" pos:column="11">=<pos:position pos:line="80" pos:column="12"/></operator> <operator pos:line="80" pos:column="13">(<pos:position pos:line="80" pos:column="14"/></operator><name pos:line="80" pos:column="14">int<pos:position pos:line="80" pos:column="17"/></name><operator pos:line="80" pos:column="17">)<pos:position pos:line="80" pos:column="18"/></operator><call><name pos:line="80" pos:column="18">curl_multi_perform<pos:position pos:line="80" pos:column="36"/></name><argument_list pos:line="80" pos:column="36">(<argument><expr><name pos:line="80" pos:column="37">m<pos:position pos:line="80" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="40">&amp;<pos:position pos:line="80" pos:column="45"/></operator><name pos:line="80" pos:column="41">running<pos:position pos:line="80" pos:column="48"/></name></expr></argument>)<pos:position pos:line="80" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="50"/></expr_stmt>
      <if pos:line="81" pos:column="7">if <condition pos:line="81" pos:column="10">(<expr><call><name pos:line="81" pos:column="11">tutil_tvdiff<pos:position pos:line="81" pos:column="23"/></name><argument_list pos:line="81" pos:column="23">(<argument><expr><call><name pos:line="81" pos:column="24">tutil_tvnow<pos:position pos:line="81" pos:column="35"/></name><argument_list pos:line="81" pos:column="35">()<pos:position pos:line="81" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="81" pos:column="39">mp_start<pos:position pos:line="81" pos:column="47"/></name></expr></argument>)<pos:position pos:line="81" pos:column="48"/></argument_list></call> <operator pos:line="81" pos:column="49">&gt;<pos:position pos:line="81" pos:column="53"/></operator> 
          <name pos:line="82" pos:column="11">MULTI_PERFORM_HANG_TIMEOUT<pos:position pos:line="82" pos:column="37"/></name></expr>)<pos:position pos:line="82" pos:column="38"/></condition><then pos:line="82" pos:column="38"> <block pos:line="82" pos:column="39">{
        <expr_stmt><expr><name pos:line="83" pos:column="9">mp_timedout<pos:position pos:line="83" pos:column="20"/></name> <operator pos:line="83" pos:column="21">=<pos:position pos:line="83" pos:column="22"/></operator> <name pos:line="83" pos:column="23">TRUE<pos:position pos:line="83" pos:column="27"/></name></expr>;<pos:position pos:line="83" pos:column="28"/></expr_stmt>
        <break pos:line="84" pos:column="9">break;<pos:position pos:line="84" pos:column="15"/></break>
      }<pos:position pos:line="85" pos:column="8"/></block></then></if>
      <if pos:line="86" pos:column="7">if <condition pos:line="86" pos:column="10">(<expr><name pos:line="86" pos:column="11">running<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">&lt;=<pos:position pos:line="86" pos:column="24"/></operator> <literal type="number" pos:line="86" pos:column="22">0<pos:position pos:line="86" pos:column="23"/></literal></expr>)<pos:position pos:line="86" pos:column="24"/></condition><then pos:line="86" pos:column="24"> <block pos:line="86" pos:column="25">{
<cpp:ifdef pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">ifdef<pos:position pos:line="87" pos:column="7"/></cpp:directive> <name pos:line="87" pos:column="8">LIB527<pos:position pos:line="87" pos:column="14"/></name></cpp:ifdef>
        <comment type="block" pos:line="88" pos:column="9">/* NOTE: this code does not remove the handle from the multi handle
           here, which would be the nice, sane and documented way of working.
           This however tests that the API survives this abuse gracefully. */</comment>
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">curl_easy_cleanup<pos:position pos:line="91" pos:column="26"/></name><argument_list pos:line="91" pos:column="26">(<argument><expr><name><name pos:line="91" pos:column="27">curl<pos:position pos:line="91" pos:column="31"/></name><index pos:line="91" pos:column="31">[<expr><name pos:line="91" pos:column="32">current<pos:position pos:line="91" pos:column="39"/></name></expr>]<pos:position pos:line="91" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="91" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">endif<pos:position pos:line="92" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="93" pos:column="9">if<condition pos:line="93" pos:column="11">(<expr><operator pos:line="93" pos:column="12">++<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="14">current<pos:position pos:line="93" pos:column="21"/></name> <operator pos:line="93" pos:column="22">&lt;<pos:position pos:line="93" pos:column="26"/></operator> <name pos:line="93" pos:column="24">NUM_HANDLES<pos:position pos:line="93" pos:column="35"/></name></expr>)<pos:position pos:line="93" pos:column="36"/></condition><then pos:line="93" pos:column="36"> <block pos:line="93" pos:column="37">{
          <expr_stmt><expr><call><name pos:line="94" pos:column="11">fprintf<pos:position pos:line="94" pos:column="18"/></name><argument_list pos:line="94" pos:column="18">(<argument><expr><name pos:line="94" pos:column="19">stderr<pos:position pos:line="94" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="27">"Advancing to URL %d\n"<pos:position pos:line="94" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="52">current<pos:position pos:line="94" pos:column="59"/></name></expr></argument>)<pos:position pos:line="94" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="61"/></expr_stmt>
<cpp:ifdef pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">ifdef<pos:position pos:line="95" pos:column="7"/></cpp:directive> <name pos:line="95" pos:column="8">LIB532<pos:position pos:line="95" pos:column="14"/></name></cpp:ifdef>
          <comment type="block" pos:line="96" pos:column="11">/* first remove the only handle we use */</comment>
          <expr_stmt><expr><call><name pos:line="97" pos:column="11">curl_multi_remove_handle<pos:position pos:line="97" pos:column="35"/></name><argument_list pos:line="97" pos:column="35">(<argument><expr><name pos:line="97" pos:column="36">m<pos:position pos:line="97" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="39">curl<pos:position pos:line="97" pos:column="43"/></name><index pos:line="97" pos:column="43">[<expr><literal type="number" pos:line="97" pos:column="44">0<pos:position pos:line="97" pos:column="45"/></literal></expr>]<pos:position pos:line="97" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="97" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="48"/></expr_stmt>

          <comment type="block" pos:line="99" pos:column="11">/* make us re-use the same handle all the time, and try resetting
             the handle first too */</comment>
          <expr_stmt><expr><call><name pos:line="101" pos:column="11">curl_easy_reset<pos:position pos:line="101" pos:column="26"/></name><argument_list pos:line="101" pos:column="26">(<argument><expr><name><name pos:line="101" pos:column="27">curl<pos:position pos:line="101" pos:column="31"/></name><index pos:line="101" pos:column="31">[<expr><literal type="number" pos:line="101" pos:column="32">0<pos:position pos:line="101" pos:column="33"/></literal></expr>]<pos:position pos:line="101" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="101" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="36"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="102" pos:column="11">curl_easy_setopt<pos:position pos:line="102" pos:column="27"/></name><argument_list pos:line="102" pos:column="27">(<argument><expr><name><name pos:line="102" pos:column="28">curl<pos:position pos:line="102" pos:column="32"/></name><index pos:line="102" pos:column="32">[<expr><literal type="number" pos:line="102" pos:column="33">0<pos:position pos:line="102" pos:column="34"/></literal></expr>]<pos:position pos:line="102" pos:column="35"/></index></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="37">CURLOPT_URL<pos:position pos:line="102" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="50">URL<pos:position pos:line="102" pos:column="53"/></name></expr></argument>)<pos:position pos:line="102" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="55"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="103" pos:column="11">curl_easy_setopt<pos:position pos:line="103" pos:column="27"/></name><argument_list pos:line="103" pos:column="27">(<argument><expr><name><name pos:line="103" pos:column="28">curl<pos:position pos:line="103" pos:column="32"/></name><index pos:line="103" pos:column="32">[<expr><literal type="number" pos:line="103" pos:column="33">0<pos:position pos:line="103" pos:column="34"/></literal></expr>]<pos:position pos:line="103" pos:column="35"/></index></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="37">CURLOPT_VERBOSE<pos:position pos:line="103" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="54">1<pos:position pos:line="103" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="57"/></expr_stmt>

          <comment type="block" pos:line="105" pos:column="11">/* re-add it */</comment>
          <expr_stmt><expr><name pos:line="106" pos:column="11">res<pos:position pos:line="106" pos:column="14"/></name> <operator pos:line="106" pos:column="15">=<pos:position pos:line="106" pos:column="16"/></operator> <operator pos:line="106" pos:column="17">(<pos:position pos:line="106" pos:column="18"/></operator><name pos:line="106" pos:column="18">int<pos:position pos:line="106" pos:column="21"/></name><operator pos:line="106" pos:column="21">)<pos:position pos:line="106" pos:column="22"/></operator><call><name pos:line="106" pos:column="22">curl_multi_add_handle<pos:position pos:line="106" pos:column="43"/></name><argument_list pos:line="106" pos:column="43">(<argument><expr><name pos:line="106" pos:column="44">m<pos:position pos:line="106" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="47">curl<pos:position pos:line="106" pos:column="51"/></name><index pos:line="106" pos:column="51">[<expr><literal type="number" pos:line="106" pos:column="52">0<pos:position pos:line="106" pos:column="53"/></literal></expr>]<pos:position pos:line="106" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="106" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="56"/></expr_stmt>
<cpp:else pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">else<pos:position pos:line="107" pos:column="6"/></cpp:directive></cpp:else>
          <expr_stmt><expr><name pos:line="108" pos:column="11">res<pos:position pos:line="108" pos:column="14"/></name> <operator pos:line="108" pos:column="15">=<pos:position pos:line="108" pos:column="16"/></operator> <operator pos:line="108" pos:column="17">(<pos:position pos:line="108" pos:column="18"/></operator><name pos:line="108" pos:column="18">int<pos:position pos:line="108" pos:column="21"/></name><operator pos:line="108" pos:column="21">)<pos:position pos:line="108" pos:column="22"/></operator><call><name pos:line="108" pos:column="22">curl_multi_add_handle<pos:position pos:line="108" pos:column="43"/></name><argument_list pos:line="108" pos:column="43">(<argument><expr><name pos:line="108" pos:column="44">m<pos:position pos:line="108" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="47">curl<pos:position pos:line="108" pos:column="51"/></name><index pos:line="108" pos:column="51">[<expr><name pos:line="108" pos:column="52">current<pos:position pos:line="108" pos:column="59"/></name></expr>]<pos:position pos:line="108" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="108" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="62"/></expr_stmt>
<cpp:endif pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">endif<pos:position pos:line="109" pos:column="7"/></cpp:directive></cpp:endif>
          <if pos:line="110" pos:column="11">if<condition pos:line="110" pos:column="13">(<expr><name pos:line="110" pos:column="14">res<pos:position pos:line="110" pos:column="17"/></name></expr>)<pos:position pos:line="110" pos:column="18"/></condition><then pos:line="110" pos:column="18"> <block pos:line="110" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="111" pos:column="13">fprintf<pos:position pos:line="111" pos:column="20"/></name><argument_list pos:line="111" pos:column="20">(<argument><expr><name pos:line="111" pos:column="21">stderr<pos:position pos:line="111" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="29">"add handle failed: %d.\n"<pos:position pos:line="111" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="57">res<pos:position pos:line="111" pos:column="60"/></name></expr></argument>)<pos:position pos:line="111" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><name pos:line="112" pos:column="13">res<pos:position pos:line="112" pos:column="16"/></name> <operator pos:line="112" pos:column="17">=<pos:position pos:line="112" pos:column="18"/></operator> <literal type="number" pos:line="112" pos:column="19">243<pos:position pos:line="112" pos:column="22"/></literal></expr>;<pos:position pos:line="112" pos:column="23"/></expr_stmt>
            <break pos:line="113" pos:column="13">break;<pos:position pos:line="113" pos:column="19"/></break>
          }<pos:position pos:line="114" pos:column="12"/></block></then></if>
        }<pos:position pos:line="115" pos:column="10"/></block></then>
        <else pos:line="116" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="117" pos:column="11">done<pos:position pos:line="117" pos:column="15"/></name> <operator pos:line="117" pos:column="16">=<pos:position pos:line="117" pos:column="17"/></operator> <name pos:line="117" pos:column="18">TRUE<pos:position pos:line="117" pos:column="22"/></name></expr>;<pos:position pos:line="117" pos:column="23"/></expr_stmt></block></else></if> <comment type="block" pos:line="117" pos:column="24">/* bail out */</comment>
        <break pos:line="118" pos:column="9">break;<pos:position pos:line="118" pos:column="15"/></break>
      }<pos:position pos:line="119" pos:column="8"/></block></then></if>
    }<pos:position pos:line="120" pos:column="6"/></block></while>
    <if pos:line="121" pos:column="5">if <condition pos:line="121" pos:column="8">(<expr><name pos:line="121" pos:column="9">mp_timedout<pos:position pos:line="121" pos:column="20"/></name> <operator pos:line="121" pos:column="21">||<pos:position pos:line="121" pos:column="23"/></operator> <name pos:line="121" pos:column="24">done<pos:position pos:line="121" pos:column="28"/></name></expr>)<pos:position pos:line="121" pos:column="29"/></condition><then pos:line="121" pos:column="29">
      <block type="pseudo"><break pos:line="122" pos:column="7">break;<pos:position pos:line="122" pos:column="13"/></break></block></then></if>

    <if pos:line="124" pos:column="5">if <condition pos:line="124" pos:column="8">(<expr><name pos:line="124" pos:column="9">res<pos:position pos:line="124" pos:column="12"/></name> <operator pos:line="124" pos:column="13">!=<pos:position pos:line="124" pos:column="15"/></operator> <name pos:line="124" pos:column="16">CURLM_OK<pos:position pos:line="124" pos:column="24"/></name></expr>)<pos:position pos:line="124" pos:column="25"/></condition><then pos:line="124" pos:column="25"> <block pos:line="124" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="125" pos:column="7">fprintf<pos:position pos:line="125" pos:column="14"/></name><argument_list pos:line="125" pos:column="14">(<argument><expr><name pos:line="125" pos:column="15">stderr<pos:position pos:line="125" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="23">"not okay???\n"<pos:position pos:line="125" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="40"/></expr_stmt>
      <break pos:line="126" pos:column="7">break;<pos:position pos:line="126" pos:column="13"/></break>
    }<pos:position pos:line="127" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="129" pos:column="5">FD_ZERO<pos:position pos:line="129" pos:column="12"/></name><argument_list pos:line="129" pos:column="12">(<argument><expr><operator pos:line="129" pos:column="13">&amp;<pos:position pos:line="129" pos:column="18"/></operator><name pos:line="129" pos:column="14">rd<pos:position pos:line="129" pos:column="16"/></name></expr></argument>)<pos:position pos:line="129" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="130" pos:column="5">FD_ZERO<pos:position pos:line="130" pos:column="12"/></name><argument_list pos:line="130" pos:column="12">(<argument><expr><operator pos:line="130" pos:column="13">&amp;<pos:position pos:line="130" pos:column="18"/></operator><name pos:line="130" pos:column="14">wr<pos:position pos:line="130" pos:column="16"/></name></expr></argument>)<pos:position pos:line="130" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="131" pos:column="5">FD_ZERO<pos:position pos:line="131" pos:column="12"/></name><argument_list pos:line="131" pos:column="12">(<argument><expr><operator pos:line="131" pos:column="13">&amp;<pos:position pos:line="131" pos:column="18"/></operator><name pos:line="131" pos:column="14">exc<pos:position pos:line="131" pos:column="17"/></name></expr></argument>)<pos:position pos:line="131" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="132" pos:column="5">max_fd<pos:position pos:line="132" pos:column="11"/></name> <operator pos:line="132" pos:column="12">=<pos:position pos:line="132" pos:column="13"/></operator> <literal type="number" pos:line="132" pos:column="14">0<pos:position pos:line="132" pos:column="15"/></literal></expr>;<pos:position pos:line="132" pos:column="16"/></expr_stmt>

    <if pos:line="134" pos:column="5">if <condition pos:line="134" pos:column="8">(<expr><call><name pos:line="134" pos:column="9">curl_multi_fdset<pos:position pos:line="134" pos:column="25"/></name><argument_list pos:line="134" pos:column="25">(<argument><expr><name pos:line="134" pos:column="26">m<pos:position pos:line="134" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="134" pos:column="29">&amp;<pos:position pos:line="134" pos:column="34"/></operator><name pos:line="134" pos:column="30">rd<pos:position pos:line="134" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="134" pos:column="34">&amp;<pos:position pos:line="134" pos:column="39"/></operator><name pos:line="134" pos:column="35">wr<pos:position pos:line="134" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="134" pos:column="39">&amp;<pos:position pos:line="134" pos:column="44"/></operator><name pos:line="134" pos:column="40">exc<pos:position pos:line="134" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="134" pos:column="45">&amp;<pos:position pos:line="134" pos:column="50"/></operator><name pos:line="134" pos:column="46">max_fd<pos:position pos:line="134" pos:column="52"/></name></expr></argument>)<pos:position pos:line="134" pos:column="53"/></argument_list></call> <operator pos:line="134" pos:column="54">!=<pos:position pos:line="134" pos:column="56"/></operator> <name pos:line="134" pos:column="57">CURLM_OK<pos:position pos:line="134" pos:column="65"/></name></expr>)<pos:position pos:line="134" pos:column="66"/></condition><then pos:line="134" pos:column="66"> <block pos:line="134" pos:column="67">{
      <expr_stmt><expr><call><name pos:line="135" pos:column="7">fprintf<pos:position pos:line="135" pos:column="14"/></name><argument_list pos:line="135" pos:column="14">(<argument><expr><name pos:line="135" pos:column="15">stderr<pos:position pos:line="135" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="23">"unexpected failured of fdset.\n"<pos:position pos:line="135" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><name pos:line="136" pos:column="7">res<pos:position pos:line="136" pos:column="10"/></name> <operator pos:line="136" pos:column="11">=<pos:position pos:line="136" pos:column="12"/></operator> <literal type="number" pos:line="136" pos:column="13">189<pos:position pos:line="136" pos:column="16"/></literal></expr>;<pos:position pos:line="136" pos:column="17"/></expr_stmt>
      <break pos:line="137" pos:column="7">break;<pos:position pos:line="137" pos:column="13"/></break>
    }<pos:position pos:line="138" pos:column="6"/></block></then></if>

    <if pos:line="140" pos:column="5">if <condition pos:line="140" pos:column="8">(<expr><call><name pos:line="140" pos:column="9">select_test<pos:position pos:line="140" pos:column="20"/></name><argument_list pos:line="140" pos:column="20">(<argument><expr><name pos:line="140" pos:column="21">max_fd<pos:position pos:line="140" pos:column="27"/></name><operator pos:line="140" pos:column="27">+<pos:position pos:line="140" pos:column="28"/></operator><literal type="number" pos:line="140" pos:column="28">1<pos:position pos:line="140" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="140" pos:column="31">&amp;<pos:position pos:line="140" pos:column="36"/></operator><name pos:line="140" pos:column="32">rd<pos:position pos:line="140" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="140" pos:column="36">&amp;<pos:position pos:line="140" pos:column="41"/></operator><name pos:line="140" pos:column="37">wr<pos:position pos:line="140" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="140" pos:column="41">&amp;<pos:position pos:line="140" pos:column="46"/></operator><name pos:line="140" pos:column="42">exc<pos:position pos:line="140" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="140" pos:column="47">&amp;<pos:position pos:line="140" pos:column="52"/></operator><name pos:line="140" pos:column="48">interval<pos:position pos:line="140" pos:column="56"/></name></expr></argument>)<pos:position pos:line="140" pos:column="57"/></argument_list></call> <operator pos:line="140" pos:column="58">==<pos:position pos:line="140" pos:column="60"/></operator> <operator pos:line="140" pos:column="61">-<pos:position pos:line="140" pos:column="62"/></operator><literal type="number" pos:line="140" pos:column="62">1<pos:position pos:line="140" pos:column="63"/></literal></expr>)<pos:position pos:line="140" pos:column="64"/></condition><then pos:line="140" pos:column="64"> <block pos:line="140" pos:column="65">{
      <expr_stmt><expr><call><name pos:line="141" pos:column="7">fprintf<pos:position pos:line="141" pos:column="14"/></name><argument_list pos:line="141" pos:column="14">(<argument><expr><name pos:line="141" pos:column="15">stderr<pos:position pos:line="141" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="23">"bad select??\n"<pos:position pos:line="141" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name pos:line="142" pos:column="7">res<pos:position pos:line="142" pos:column="10"/></name> <operator pos:line="142" pos:column="11">=<pos:position pos:line="142" pos:column="12"/></operator> <literal type="number" pos:line="142" pos:column="13">195<pos:position pos:line="142" pos:column="16"/></literal></expr>;<pos:position pos:line="142" pos:column="17"/></expr_stmt>
      <break pos:line="143" pos:column="7">break;<pos:position pos:line="143" pos:column="13"/></break>
    }<pos:position pos:line="144" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="146" pos:column="5">res<pos:position pos:line="146" pos:column="8"/></name> <operator pos:line="146" pos:column="9">=<pos:position pos:line="146" pos:column="10"/></operator> <name pos:line="146" pos:column="11">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="146" pos:column="35"/></name></expr>;<pos:position pos:line="146" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="147" pos:column="4"/></block></while>

  <if pos:line="149" pos:column="3">if <condition pos:line="149" pos:column="6">(<expr><name pos:line="149" pos:column="7">ml_timedout<pos:position pos:line="149" pos:column="18"/></name> <operator pos:line="149" pos:column="19">||<pos:position pos:line="149" pos:column="21"/></operator> <name pos:line="149" pos:column="22">mp_timedout<pos:position pos:line="149" pos:column="33"/></name></expr>)<pos:position pos:line="149" pos:column="34"/></condition><then pos:line="149" pos:column="34"> <block pos:line="149" pos:column="35">{
    <if pos:line="150" pos:column="5">if <condition pos:line="150" pos:column="8">(<expr><name pos:line="150" pos:column="9">ml_timedout<pos:position pos:line="150" pos:column="20"/></name></expr>)<pos:position pos:line="150" pos:column="21"/></condition><then pos:line="150" pos:column="21"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="150" pos:column="22">fprintf<pos:position pos:line="150" pos:column="29"/></name><argument_list pos:line="150" pos:column="29">(<argument><expr><name pos:line="150" pos:column="30">stderr<pos:position pos:line="150" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="38">"ml_timedout\n"<pos:position pos:line="150" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="55"/></expr_stmt></block></then></if>
    <if pos:line="151" pos:column="5">if <condition pos:line="151" pos:column="8">(<expr><name pos:line="151" pos:column="9">mp_timedout<pos:position pos:line="151" pos:column="20"/></name></expr>)<pos:position pos:line="151" pos:column="21"/></condition><then pos:line="151" pos:column="21"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="151" pos:column="22">fprintf<pos:position pos:line="151" pos:column="29"/></name><argument_list pos:line="151" pos:column="29">(<argument><expr><name pos:line="151" pos:column="30">stderr<pos:position pos:line="151" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="151" pos:column="38">"mp_timedout\n"<pos:position pos:line="151" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="55"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="152" pos:column="5">fprintf<pos:position pos:line="152" pos:column="12"/></name><argument_list pos:line="152" pos:column="12">(<argument><expr><name pos:line="152" pos:column="13">stderr<pos:position pos:line="152" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="152" pos:column="21">"ABORTING TEST, since it seems "<pos:position pos:line="152" pos:column="53"/></literal>
            <literal type="string" pos:line="153" pos:column="13">"that it would have run forever.\n"<pos:position pos:line="153" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="154" pos:column="5">res<pos:position pos:line="154" pos:column="8"/></name> <operator pos:line="154" pos:column="9">=<pos:position pos:line="154" pos:column="10"/></operator> <name pos:line="154" pos:column="11">TEST_ERR_RUNS_FOREVER<pos:position pos:line="154" pos:column="32"/></name></expr>;<pos:position pos:line="154" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="155" pos:column="4"/></block></then></if>

<cpp:ifndef pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">ifndef<pos:position pos:line="157" pos:column="8"/></cpp:directive> <name pos:line="157" pos:column="9">LIB527<pos:position pos:line="157" pos:column="15"/></name></cpp:ifndef>
  <comment type="block" pos:line="158" pos:column="3">/* get NUM_HANDLES easy handles */</comment>
  <for pos:line="159" pos:column="3">for<control pos:line="159" pos:column="6">(<init><expr><name pos:line="159" pos:column="7">i<pos:position pos:line="159" pos:column="8"/></name><operator pos:line="159" pos:column="8">=<pos:position pos:line="159" pos:column="9"/></operator><literal type="number" pos:line="159" pos:column="9">0<pos:position pos:line="159" pos:column="10"/></literal></expr>;<pos:position pos:line="159" pos:column="11"/></init> <condition><expr><name pos:line="159" pos:column="12">i<pos:position pos:line="159" pos:column="13"/></name> <operator pos:line="159" pos:column="14">&lt;<pos:position pos:line="159" pos:column="18"/></operator> <name pos:line="159" pos:column="16">NUM_HANDLES<pos:position pos:line="159" pos:column="27"/></name></expr>;<pos:position pos:line="159" pos:column="28"/></condition> <incr><expr><name pos:line="159" pos:column="29">i<pos:position pos:line="159" pos:column="30"/></name><operator pos:line="159" pos:column="30">++<pos:position pos:line="159" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="159" pos:column="33"/></control> <block pos:line="159" pos:column="34">{
<cpp:ifdef pos:line="160" pos:column="1">#<cpp:directive pos:line="160" pos:column="2">ifdef<pos:position pos:line="160" pos:column="7"/></cpp:directive> <name pos:line="160" pos:column="8">LIB526<pos:position pos:line="160" pos:column="14"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="161" pos:column="5">curl_multi_remove_handle<pos:position pos:line="161" pos:column="29"/></name><argument_list pos:line="161" pos:column="29">(<argument><expr><name pos:line="161" pos:column="30">m<pos:position pos:line="161" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="33">curl<pos:position pos:line="161" pos:column="37"/></name><index pos:line="161" pos:column="37">[<expr><name pos:line="161" pos:column="38">i<pos:position pos:line="161" pos:column="39"/></name></expr>]<pos:position pos:line="161" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="161" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">endif<pos:position pos:line="162" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="163" pos:column="5">curl_easy_cleanup<pos:position pos:line="163" pos:column="22"/></name><argument_list pos:line="163" pos:column="22">(<argument><expr><name><name pos:line="163" pos:column="23">curl<pos:position pos:line="163" pos:column="27"/></name><index pos:line="163" pos:column="27">[<expr><name pos:line="163" pos:column="28">i<pos:position pos:line="163" pos:column="29"/></name></expr>]<pos:position pos:line="163" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="163" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="164" pos:column="4"/></block></for>
<cpp:endif pos:line="165" pos:column="1">#<cpp:directive pos:line="165" pos:column="2">endif<pos:position pos:line="165" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="166" pos:column="3">curl_multi_cleanup<pos:position pos:line="166" pos:column="21"/></name><argument_list pos:line="166" pos:column="21">(<argument><expr><name pos:line="166" pos:column="22">m<pos:position pos:line="166" pos:column="23"/></name></expr></argument>)<pos:position pos:line="166" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="168" pos:column="3">curl_global_cleanup<pos:position pos:line="168" pos:column="22"/></name><argument_list pos:line="168" pos:column="22">()<pos:position pos:line="168" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="25"/></expr_stmt>
  <return pos:line="169" pos:column="3">return <expr><name pos:line="169" pos:column="10">res<pos:position pos:line="169" pos:column="13"/></name></expr>;<pos:position pos:line="169" pos:column="14"/></return>
}<pos:position pos:line="170" pos:column="2"/></block></function></unit>
