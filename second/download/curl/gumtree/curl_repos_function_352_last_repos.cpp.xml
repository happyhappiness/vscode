<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_352_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">iconv_t<pos:position pos:line="1" pos:column="15"/></name></type>
<name pos:line="2" pos:column="1">iconv_open_CCSID<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">unsigned<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">ccsidout<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">unsigned<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">ccsidin<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
                                                        <parameter><decl><type><name pos:line="3" pos:column="57">unsigned<pos:position pos:line="3" pos:column="65"/></name> <name pos:line="3" pos:column="66">int<pos:position pos:line="3" pos:column="69"/></name></type> <name pos:line="3" pos:column="70">cstr<pos:position pos:line="3" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="75"/></parameter_list>

<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">fromcode<pos:position pos:line="6" pos:column="16"/></name><index pos:line="6" pos:column="16">[<expr><name pos:line="6" pos:column="17">ICONV_ID_SIZE<pos:position pos:line="6" pos:column="30"/></name></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">tocode<pos:position pos:line="7" pos:column="14"/></name><index pos:line="7" pos:column="14">[<expr><name pos:line="7" pos:column="15">ICONV_ID_SIZE<pos:position pos:line="7" pos:column="28"/></name></expr>]<pos:position pos:line="7" pos:column="29"/></index></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="9" pos:column="3">/**
  ***  Like iconv_open(), but character codes are given as CCSIDs.
  ***  If `cstr' is non-zero, conversion is set up to stop whenever a
  ***   null character is encountered.
  ***  See iconv_open() IBM description in "National Language Support API".
  **/</comment>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">makeOS400IconvCode<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">fromcode<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">ccsidin<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">makeOS400IconvCode<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">tocode<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="30">ccsidout<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">memset<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><name pos:line="18" pos:column="10">tocode<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">+<pos:position pos:line="18" pos:column="18"/></operator> <literal type="number" pos:line="18" pos:column="19">13<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="23">0<pos:position pos:line="18" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="26">sizeof <name pos:line="18" pos:column="33">tocode<pos:position pos:line="18" pos:column="39"/></name></sizeof> <operator pos:line="18" pos:column="40">-<pos:position pos:line="18" pos:column="41"/></operator> <literal type="number" pos:line="18" pos:column="42">13<pos:position pos:line="18" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>   <comment type="block" pos:line="18" pos:column="49">/* Dest. code id format. */</comment>

  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">cstr<pos:position pos:line="20" pos:column="10"/></name></expr>)<pos:position pos:line="20" pos:column="11"/></condition><then pos:line="20" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="5">fromcode<pos:position pos:line="21" pos:column="13"/></name><index pos:line="21" pos:column="13">[<expr><literal type="number" pos:line="21" pos:column="14">18<pos:position pos:line="21" pos:column="16"/></literal></expr>]<pos:position pos:line="21" pos:column="17"/></index></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <literal type="char" pos:line="21" pos:column="20">'1'<pos:position pos:line="21" pos:column="23"/></literal></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt></block></then></if>                         <comment type="block" pos:line="21" pos:column="49">/* Set null-terminator flag. */</comment>

  <return pos:line="23" pos:column="3">return <expr><call><name pos:line="23" pos:column="10">iconv_open<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">tocode<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="29">fromcode<pos:position pos:line="23" pos:column="37"/></name></expr></argument>)<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="39"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
