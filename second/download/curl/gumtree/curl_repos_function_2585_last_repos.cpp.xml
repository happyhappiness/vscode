<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2585_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">pubkey_pem_to_der<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">pem<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="2" pos:column="35">unsigned<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier><modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">der<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">size_t<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">der_len<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">stripped_pem<pos:position pos:line="4" pos:column="21"/></name></decl>, <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="24">begin_pos<pos:position pos:line="4" pos:column="33"/></name></decl>, <modifier pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="36">end_pos<pos:position pos:line="4" pos:column="43"/></name></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">pem_count<pos:position pos:line="5" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="21">stripped_pem_count<pos:position pos:line="5" pos:column="39"/></name> <init pos:line="5" pos:column="40">= <expr><literal type="number" pos:line="5" pos:column="42">0<pos:position pos:line="5" pos:column="43"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="45">pem_len<pos:position pos:line="5" pos:column="52"/></name></decl>;<pos:position pos:line="5" pos:column="53"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* if no pem, exit. */</comment>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><operator pos:line="9" pos:column="6">!<pos:position pos:line="9" pos:column="7"/></operator><name pos:line="9" pos:column="7">pem<pos:position pos:line="9" pos:column="10"/></name></expr>)<pos:position pos:line="9" pos:column="11"/></condition><then pos:line="9" pos:column="11">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="10" pos:column="38"/></name></expr>;<pos:position pos:line="10" pos:column="39"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">begin_pos<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">strstr<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">pem<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="27">"-----BEGIN PUBLIC KEY-----"<pos:position pos:line="12" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><operator pos:line="13" pos:column="6">!<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">begin_pos<pos:position pos:line="13" pos:column="16"/></name></expr>)<pos:position pos:line="13" pos:column="17"/></condition><then pos:line="13" pos:column="17">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="14" pos:column="38"/></name></expr>;<pos:position pos:line="14" pos:column="39"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">pem_count<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">begin_pos<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">-<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">pem<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
  <comment type="block" pos:line="17" pos:column="3">/* Invalid if not at beginning AND not directly following \n */</comment>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><literal type="number" pos:line="18" pos:column="6">0<pos:position pos:line="18" pos:column="7"/></literal> <operator pos:line="18" pos:column="8">!=<pos:position pos:line="18" pos:column="10"/></operator> <name pos:line="18" pos:column="11">pem_count<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">&amp;&amp;<pos:position pos:line="18" pos:column="31"/></operator> <literal type="char" pos:line="18" pos:column="24">'\n'<pos:position pos:line="18" pos:column="28"/></literal> <operator pos:line="18" pos:column="29">!=<pos:position pos:line="18" pos:column="31"/></operator> <name><name pos:line="18" pos:column="32">pem<pos:position pos:line="18" pos:column="35"/></name><index pos:line="18" pos:column="35">[<expr><name pos:line="18" pos:column="36">pem_count<pos:position pos:line="18" pos:column="45"/></name> <operator pos:line="18" pos:column="46">-<pos:position pos:line="18" pos:column="47"/></operator> <literal type="number" pos:line="18" pos:column="48">1<pos:position pos:line="18" pos:column="49"/></literal></expr>]<pos:position pos:line="18" pos:column="50"/></index></name></expr>)<pos:position pos:line="18" pos:column="51"/></condition><then pos:line="18" pos:column="51">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="19" pos:column="38"/></name></expr>;<pos:position pos:line="19" pos:column="39"/></return></block></then></if>

  <comment type="block" pos:line="21" pos:column="3">/* 26 is length of "-----BEGIN PUBLIC KEY-----" */</comment>
  <expr_stmt><expr><name pos:line="22" pos:column="3">pem_count<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">+=<pos:position pos:line="22" pos:column="15"/></operator> <literal type="number" pos:line="22" pos:column="16">26<pos:position pos:line="22" pos:column="18"/></literal></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>

  <comment type="block" pos:line="24" pos:column="3">/* Invalid if not directly following \n */</comment>
  <expr_stmt><expr><name pos:line="25" pos:column="3">end_pos<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">strstr<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">pem<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">+<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">pem_count<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="37">"\n-----END PUBLIC KEY-----"<pos:position pos:line="25" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><operator pos:line="26" pos:column="6">!<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">end_pos<pos:position pos:line="26" pos:column="14"/></name></expr>)<pos:position pos:line="26" pos:column="15"/></condition><then pos:line="26" pos:column="15">
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="27" pos:column="38"/></name></expr>;<pos:position pos:line="27" pos:column="39"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="29" pos:column="3">pem_len<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <name pos:line="29" pos:column="13">end_pos<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">-<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="23">pem<pos:position pos:line="29" pos:column="26"/></name></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><name pos:line="31" pos:column="3">stripped_pem<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <call><name pos:line="31" pos:column="18">malloc<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">pem_len<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">-<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="35">pem_count<pos:position pos:line="31" pos:column="44"/></name> <operator pos:line="31" pos:column="45">+<pos:position pos:line="31" pos:column="46"/></operator> <literal type="number" pos:line="31" pos:column="47">1<pos:position pos:line="31" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt>
  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><operator pos:line="32" pos:column="6">!<pos:position pos:line="32" pos:column="7"/></operator><name pos:line="32" pos:column="7">stripped_pem<pos:position pos:line="32" pos:column="19"/></name></expr>)<pos:position pos:line="32" pos:column="20"/></condition><then pos:line="32" pos:column="20">
    <block type="pseudo"><return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="33" pos:column="31"/></name></expr>;<pos:position pos:line="33" pos:column="32"/></return></block></then></if>

  <comment type="block" pos:line="35" pos:column="3">/*
   * Here we loop through the pem array one character at a time between the
   * correct indices, and place each character that is not '\n' or '\r'
   * into the stripped_pem array, which should represent the raw base64 string
   */</comment>
  <while pos:line="40" pos:column="3">while<condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">pem_count<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">&lt;<pos:position pos:line="40" pos:column="23"/></operator> <name pos:line="40" pos:column="21">pem_len<pos:position pos:line="40" pos:column="28"/></name></expr>)<pos:position pos:line="40" pos:column="29"/></condition> <block pos:line="40" pos:column="30">{
    <if pos:line="41" pos:column="5">if<condition pos:line="41" pos:column="7">(<expr><literal type="char" pos:line="41" pos:column="8">'\n'<pos:position pos:line="41" pos:column="12"/></literal> <operator pos:line="41" pos:column="13">!=<pos:position pos:line="41" pos:column="15"/></operator> <name><name pos:line="41" pos:column="16">pem<pos:position pos:line="41" pos:column="19"/></name><index pos:line="41" pos:column="19">[<expr><name pos:line="41" pos:column="20">pem_count<pos:position pos:line="41" pos:column="29"/></name></expr>]<pos:position pos:line="41" pos:column="30"/></index></name> <operator pos:line="41" pos:column="31">&amp;&amp;<pos:position pos:line="41" pos:column="41"/></operator> <literal type="char" pos:line="41" pos:column="34">'\r'<pos:position pos:line="41" pos:column="38"/></literal> <operator pos:line="41" pos:column="39">!=<pos:position pos:line="41" pos:column="41"/></operator> <name><name pos:line="41" pos:column="42">pem<pos:position pos:line="41" pos:column="45"/></name><index pos:line="41" pos:column="45">[<expr><name pos:line="41" pos:column="46">pem_count<pos:position pos:line="41" pos:column="55"/></name></expr>]<pos:position pos:line="41" pos:column="56"/></index></name></expr>)<pos:position pos:line="41" pos:column="57"/></condition><then pos:line="41" pos:column="57">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="42" pos:column="7">stripped_pem<pos:position pos:line="42" pos:column="19"/></name><index pos:line="42" pos:column="19">[<expr><name pos:line="42" pos:column="20">stripped_pem_count<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">++<pos:position pos:line="42" pos:column="40"/></operator></expr>]<pos:position pos:line="42" pos:column="41"/></index></name> <operator pos:line="42" pos:column="42">=<pos:position pos:line="42" pos:column="43"/></operator> <name><name pos:line="42" pos:column="44">pem<pos:position pos:line="42" pos:column="47"/></name><index pos:line="42" pos:column="47">[<expr><name pos:line="42" pos:column="48">pem_count<pos:position pos:line="42" pos:column="57"/></name></expr>]<pos:position pos:line="42" pos:column="58"/></index></name></expr>;<pos:position pos:line="42" pos:column="59"/></expr_stmt></block></then></if>
    <expr_stmt><expr><operator pos:line="43" pos:column="5">++<pos:position pos:line="43" pos:column="7"/></operator><name pos:line="43" pos:column="7">pem_count<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></while>
  <comment type="block" pos:line="45" pos:column="3">/* Place the null terminator in the correct place */</comment>
  <expr_stmt><expr><name><name pos:line="46" pos:column="3">stripped_pem<pos:position pos:line="46" pos:column="15"/></name><index pos:line="46" pos:column="15">[<expr><name pos:line="46" pos:column="16">stripped_pem_count<pos:position pos:line="46" pos:column="34"/></name></expr>]<pos:position pos:line="46" pos:column="35"/></index></name> <operator pos:line="46" pos:column="36">=<pos:position pos:line="46" pos:column="37"/></operator> <literal type="char" pos:line="46" pos:column="38">'\0'<pos:position pos:line="46" pos:column="42"/></literal></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><name pos:line="48" pos:column="3">result<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator> <call><name pos:line="48" pos:column="12">Curl_base64_decode<pos:position pos:line="48" pos:column="30"/></name><argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">stripped_pem<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="45">der<pos:position pos:line="48" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="50">der_len<pos:position pos:line="48" pos:column="57"/></name></expr></argument>)<pos:position pos:line="48" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="59"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="50" pos:column="3">Curl_safefree<pos:position pos:line="50" pos:column="16"/></name><argument_list pos:line="50" pos:column="16">(<argument><expr><name pos:line="50" pos:column="17">stripped_pem<pos:position pos:line="50" pos:column="29"/></name></expr></argument>)<pos:position pos:line="50" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>

  <return pos:line="52" pos:column="3">return <expr><name pos:line="52" pos:column="10">result<pos:position pos:line="52" pos:column="16"/></name></expr>;<pos:position pos:line="52" pos:column="17"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
