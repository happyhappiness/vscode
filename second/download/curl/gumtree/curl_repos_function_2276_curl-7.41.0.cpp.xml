<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2276_curl-7.41.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name><modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type> <name pos:line="1" pos:column="14">dup_nickname<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">SessionHandle<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">data<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="55">enum<pos:position pos:line="1" pos:column="59"/></name> <name pos:line="1" pos:column="60">dupstring<pos:position pos:line="1" pos:column="69"/></name></name></type> <name pos:line="1" pos:column="70">cert_kind<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">str<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name><operator pos:line="3" pos:column="25">-&gt;<pos:position pos:line="3" pos:column="30"/></operator><name pos:line="3" pos:column="27">set<pos:position pos:line="3" pos:column="30"/></name><operator pos:line="3" pos:column="30">.<pos:position pos:line="3" pos:column="31"/></operator><name pos:line="3" pos:column="31">str<pos:position pos:line="3" pos:column="34"/></name><index pos:line="3" pos:column="34">[<expr><name pos:line="3" pos:column="35">cert_kind<pos:position pos:line="3" pos:column="44"/></name></expr>]<pos:position pos:line="3" pos:column="45"/></index></name></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">n<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><operator pos:line="6" pos:column="6">!<pos:position pos:line="6" pos:column="7"/></operator><call><name pos:line="6" pos:column="7">is_file<pos:position pos:line="6" pos:column="14"/></name><argument_list pos:line="6" pos:column="14">(<argument><expr><name pos:line="6" pos:column="15">str<pos:position pos:line="6" pos:column="18"/></name></expr></argument>)<pos:position pos:line="6" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20">
    <comment type="block" pos:line="7" pos:column="5">/* no such file exists, use the string as nickname */</comment>
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><call><name pos:line="8" pos:column="12">strdup<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">str<pos:position pos:line="8" pos:column="22"/></name></expr></argument>)<pos:position pos:line="8" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="24"/></return></block></then></if>

  <comment type="block" pos:line="10" pos:column="3">/* search the last slash; we require at least one slash in a file name */</comment>
  <expr_stmt><expr><name pos:line="11" pos:column="3">n<pos:position pos:line="11" pos:column="4"/></name> <operator pos:line="11" pos:column="5">=<pos:position pos:line="11" pos:column="6"/></operator> <call><name pos:line="11" pos:column="7">strrchr<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">str<pos:position pos:line="11" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="20">'/'<pos:position pos:line="11" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">n<pos:position pos:line="12" pos:column="8"/></name></expr>)<pos:position pos:line="12" pos:column="9"/></condition><then pos:line="12" pos:column="9"> <block pos:line="12" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">infof<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">data<pos:position pos:line="13" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="17">"warning: certificate file name \"%s\" handled as nickname; "<pos:position pos:line="13" pos:column="78"/></literal>
          <literal type="string" pos:line="14" pos:column="11">"please use \"./%s\" to force file name\n"<pos:position pos:line="14" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="55">str<pos:position pos:line="14" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="60">str<pos:position pos:line="14" pos:column="63"/></name></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="65"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><call><name pos:line="15" pos:column="12">strdup<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">str<pos:position pos:line="15" pos:column="22"/></name></expr></argument>)<pos:position pos:line="15" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="24"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="18" pos:column="3">/* we'll use the PEM reader to read the certificate from file */</comment>
  <return pos:line="19" pos:column="3">return <expr><name pos:line="19" pos:column="10">NULL<pos:position pos:line="19" pos:column="14"/></name></expr>;<pos:position pos:line="19" pos:column="15"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
