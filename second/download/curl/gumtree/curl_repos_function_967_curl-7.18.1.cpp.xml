<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_967_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">NETDB_DEFINE_CONTEXT<pos:position pos:line="1" pos:column="21"/></name>
<comment type="block" pos:line="2" pos:column="1">/* Make the CLIB Inet stuff link */</comment>
<cpp:include pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">include<pos:position pos:line="3" pos:column="9"/></cpp:directive> <cpp:file pos:line="3" pos:column="10">&lt;netinet/in.h&gt;<pos:position pos:line="3" pos:column="27"/></cpp:file></cpp:include>
<cpp:include pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">include<pos:position pos:line="4" pos:column="9"/></cpp:directive> <cpp:file pos:line="4" pos:column="10">&lt;arpa/inet.h&gt;<pos:position pos:line="4" pos:column="26"/></cpp:file></cpp:include>
<name pos:line="5" pos:column="1">NETINET_DEFINE_CONTEXT<pos:position pos:line="5" pos:column="23"/></name>

<name pos:line="7" pos:column="1">int<pos:position pos:line="7" pos:column="4"/></name></type> <name pos:line="7" pos:column="5">netware_init<pos:position pos:line="7" pos:column="17"/></name> <parameter_list pos:line="7" pos:column="18">( <parameter><decl><type><name pos:line="7" pos:column="20">void<pos:position pos:line="7" pos:column="24"/></name></type></decl></parameter> )<pos:position pos:line="7" pos:column="26"/></parameter_list>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">rc<pos:position pos:line="9" pos:column="11"/></name> <init pos:line="9" pos:column="12">= <expr><literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">unsigned<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">int<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">myHandle<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><call><name pos:line="10" pos:column="29">GetNLMHandle<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">()<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>
    <comment type="block" pos:line="11" pos:column="5">/* import UnAugmentAsterisk dynamically for NW4.x compatibility */</comment>
    <function_decl><type><name pos:line="12" pos:column="5">void<pos:position pos:line="12" pos:column="9"/></name></type> (<modifier pos:line="12" pos:column="11">*<pos:position pos:line="12" pos:column="12"/></modifier><name pos:line="12" pos:column="12">pUnAugmentAsterisk<pos:position pos:line="12" pos:column="30"/></name>)<parameter_list pos:line="12" pos:column="31">(<parameter><decl><type><name pos:line="12" pos:column="32">int<pos:position pos:line="12" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="12" pos:column="36"/></parameter_list> <init pos:line="12" pos:column="37">= <expr><operator pos:line="12" pos:column="39">(<pos:position pos:line="12" pos:column="40"/></operator><call><call><name pos:line="12" pos:column="40">void<pos:position pos:line="12" pos:column="44"/></name><argument_list pos:line="12" pos:column="44">(<argument><expr><operator pos:line="12" pos:column="45">*<pos:position pos:line="12" pos:column="46"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call><operator pos:line="12" pos:column="47">(<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="48">int<pos:position pos:line="12" pos:column="51"/></name><operator pos:line="12" pos:column="51">)<pos:position pos:line="12" pos:column="52"/></operator></call><operator pos:line="12" pos:column="52">)<pos:position pos:line="12" pos:column="53"/></operator>
            <call><name pos:line="13" pos:column="13">ImportSymbol<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">myHandle<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <literal type="string" pos:line="13" pos:column="36">"UnAugmentAsterisk"<pos:position pos:line="13" pos:column="55"/></literal>)<pos:position pos:line="13" pos:column="56"/></argument_list></call></expr></init>;<pos:position pos:line="13" pos:column="57"/></function_decl>
    <comment type="block" pos:line="14" pos:column="5">/* import UseAccurateCaseForPaths dynamically for NW3.x compatibility */</comment>
    <function_decl><type><name pos:line="15" pos:column="5">void<pos:position pos:line="15" pos:column="9"/></name></type> (<modifier pos:line="15" pos:column="11">*<pos:position pos:line="15" pos:column="12"/></modifier><name pos:line="15" pos:column="12">pUseAccurateCaseForPaths<pos:position pos:line="15" pos:column="36"/></name>)<parameter_list pos:line="15" pos:column="37">(<parameter><decl><type><name pos:line="15" pos:column="38">int<pos:position pos:line="15" pos:column="41"/></name></type></decl></parameter>)<pos:position pos:line="15" pos:column="42"/></parameter_list> <init pos:line="15" pos:column="43">= <expr><operator pos:line="15" pos:column="45">(<pos:position pos:line="15" pos:column="46"/></operator><call><call><name pos:line="15" pos:column="46">void<pos:position pos:line="15" pos:column="50"/></name><argument_list pos:line="15" pos:column="50">(<argument><expr><operator pos:line="15" pos:column="51">*<pos:position pos:line="15" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call><operator pos:line="15" pos:column="53">(<pos:position pos:line="15" pos:column="54"/></operator><name pos:line="15" pos:column="54">int<pos:position pos:line="15" pos:column="57"/></name><operator pos:line="15" pos:column="57">)<pos:position pos:line="15" pos:column="58"/></operator></call><operator pos:line="15" pos:column="58">)<pos:position pos:line="15" pos:column="59"/></operator>
            <call><name pos:line="16" pos:column="13">ImportSymbol<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">myHandle<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <literal type="string" pos:line="16" pos:column="36">"UseAccurateCaseForPaths"<pos:position pos:line="16" pos:column="61"/></literal>)<pos:position pos:line="16" pos:column="62"/></argument_list></call></expr></init>;<pos:position pos:line="16" pos:column="63"/></function_decl>
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><name pos:line="17" pos:column="8">pUnAugmentAsterisk<pos:position pos:line="17" pos:column="26"/></name></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="9">pUnAugmentAsterisk<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><literal type="number" pos:line="18" pos:column="28">1<pos:position pos:line="18" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt></block></then></if>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><name pos:line="19" pos:column="8">pUseAccurateCaseForPaths<pos:position pos:line="19" pos:column="32"/></name></expr>)<pos:position pos:line="19" pos:column="33"/></condition><then pos:line="19" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="9">pUseAccurateCaseForPaths<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><literal type="number" pos:line="20" pos:column="34">1<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">UnimportSymbol<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">myHandle<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="30">"UnAugmentAsterisk"<pos:position pos:line="21" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">UnimportSymbol<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">myHandle<pos:position pos:line="22" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="30">"UseAccurateCaseForPaths"<pos:position pos:line="22" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="57"/></expr_stmt>
    <comment type="block" pos:line="23" pos:column="5">/* set long name space */</comment>
    <if pos:line="24" pos:column="5">if<condition pos:line="24" pos:column="7">(<expr><operator pos:line="24" pos:column="8">(<pos:position pos:line="24" pos:column="9"/></operator><call><name pos:line="24" pos:column="9">SetCurrentNameSpace<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><literal type="number" pos:line="24" pos:column="29">4<pos:position pos:line="24" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call> <operator pos:line="24" pos:column="32">==<pos:position pos:line="24" pos:column="34"/></operator> <literal type="number" pos:line="24" pos:column="35">255<pos:position pos:line="24" pos:column="38"/></literal><operator pos:line="24" pos:column="38">)<pos:position pos:line="24" pos:column="39"/></operator></expr>)<pos:position pos:line="24" pos:column="40"/></condition><then pos:line="24" pos:column="40"> <block pos:line="24" pos:column="41">{
        <expr_stmt><expr><name pos:line="25" pos:column="9">rc<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal></expr>;<pos:position pos:line="25" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><operator pos:line="27" pos:column="8">(<pos:position pos:line="27" pos:column="9"/></operator><call><name pos:line="27" pos:column="9">SetTargetNameSpace<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><literal type="number" pos:line="27" pos:column="28">4<pos:position pos:line="27" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call> <operator pos:line="27" pos:column="31">==<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="34">255<pos:position pos:line="27" pos:column="37"/></literal><operator pos:line="27" pos:column="37">)<pos:position pos:line="27" pos:column="38"/></operator></expr>)<pos:position pos:line="27" pos:column="39"/></condition><then pos:line="27" pos:column="39"> <block pos:line="27" pos:column="40">{
        <expr_stmt><expr><name pos:line="28" pos:column="9">rc<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name pos:line="28" pos:column="14">rc<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">+<pos:position pos:line="28" pos:column="18"/></operator> <literal type="number" pos:line="28" pos:column="19">2<pos:position pos:line="28" pos:column="20"/></literal></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <return pos:line="30" pos:column="5">return <expr><name pos:line="30" pos:column="12">rc<pos:position pos:line="30" pos:column="14"/></name></expr>;<pos:position pos:line="30" pos:column="15"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
