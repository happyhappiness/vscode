<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_146_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type>
<name pos:line="2" pos:column="1">Curl_unencode_deflate_write<pos:position pos:line="2" pos:column="28"/></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name><name pos:line="2" pos:column="29">struct<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">SessionHandle<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">data<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, 
                            <parameter><decl><type><name><name pos:line="3" pos:column="29">struct<pos:position pos:line="3" pos:column="35"/></name> <name pos:line="3" pos:column="36">Curl_transfer_keeper<pos:position pos:line="3" pos:column="56"/></name></name> <modifier pos:line="3" pos:column="57">*<pos:position pos:line="3" pos:column="58"/></modifier></type><name pos:line="3" pos:column="58">k<pos:position pos:line="3" pos:column="59"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="4" pos:column="29">ssize_t<pos:position pos:line="4" pos:column="36"/></name></type> <name pos:line="4" pos:column="37">nread<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="43"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>                   <comment type="block" pos:line="6" pos:column="33">/* zlib status */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">result<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>                   <comment type="block" pos:line="7" pos:column="33">/* Curl_client_write status */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">decomp<pos:position pos:line="8" pos:column="14"/></name><index pos:line="8" pos:column="14">[<expr><name pos:line="8" pos:column="15">DSIZ<pos:position pos:line="8" pos:column="19"/></name></expr>]<pos:position pos:line="8" pos:column="20"/></index></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>            <comment type="block" pos:line="8" pos:column="33">/* Put the decompressed data here. */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">z_stream<pos:position pos:line="9" pos:column="11"/></name> <modifier pos:line="9" pos:column="12">*<pos:position pos:line="9" pos:column="13"/></modifier></type><name pos:line="9" pos:column="13">z<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><operator pos:line="9" pos:column="17">&amp;<pos:position pos:line="9" pos:column="22"/></operator><name><name pos:line="9" pos:column="18">k<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">-&gt;<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="21">z<pos:position pos:line="9" pos:column="22"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>          <comment type="block" pos:line="9" pos:column="33">/* zlib state structure */</comment>
              
  <comment type="block" pos:line="11" pos:column="3">/* Initialize zlib? */</comment>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><name><name pos:line="12" pos:column="8">k<pos:position pos:line="12" pos:column="9"/></name><operator pos:line="12" pos:column="9">-&gt;<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="11">zlib_init<pos:position pos:line="12" pos:column="20"/></name></name></expr>)<pos:position pos:line="12" pos:column="21"/></condition><then pos:line="12" pos:column="21"> <block pos:line="12" pos:column="22">{
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">z<pos:position pos:line="13" pos:column="6"/></name><operator pos:line="13" pos:column="6">-&gt;<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="8">zalloc<pos:position pos:line="13" pos:column="14"/></name></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <operator pos:line="13" pos:column="17">(<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">alloc_func<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">)<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="29">Z_NULL<pos:position pos:line="13" pos:column="35"/></name></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">z<pos:position pos:line="14" pos:column="6"/></name><operator pos:line="14" pos:column="6">-&gt;<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="8">zfree<pos:position pos:line="14" pos:column="13"/></name></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <operator pos:line="14" pos:column="16">(<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">free_func<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">)<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">Z_NULL<pos:position pos:line="14" pos:column="33"/></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">z<pos:position pos:line="15" pos:column="6"/></name><operator pos:line="15" pos:column="6">-&gt;<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="8">opaque<pos:position pos:line="15" pos:column="14"/></name></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>              <comment type="block" pos:line="15" pos:column="33">/* of dubious use 08/27/02 jhrg */</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">inflateInit<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">z<pos:position pos:line="16" pos:column="22"/></name></expr></argument>)<pos:position pos:line="16" pos:column="23"/></argument_list></call> <operator pos:line="16" pos:column="24">!=<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">Z_OK<pos:position pos:line="16" pos:column="31"/></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
      <block type="pseudo"><return pos:line="17" pos:column="7">return <expr><call><name pos:line="17" pos:column="14">process_zlib_error<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">data<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">z<pos:position pos:line="17" pos:column="40"/></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">k<pos:position pos:line="18" pos:column="6"/></name><operator pos:line="18" pos:column="6">-&gt;<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="8">zlib_init<pos:position pos:line="18" pos:column="17"/></name></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <literal type="number" pos:line="18" pos:column="20">1<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="21" pos:column="3">/* Set the compressed input when this fucntion is called */</comment>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">z<pos:position pos:line="22" pos:column="4"/></name><operator pos:line="22" pos:column="4">-&gt;<pos:position pos:line="22" pos:column="9"/></operator><name pos:line="22" pos:column="6">next_in<pos:position pos:line="22" pos:column="13"/></name></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">Bytef<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">*<pos:position pos:line="22" pos:column="24"/></operator><operator pos:line="22" pos:column="24">)<pos:position pos:line="22" pos:column="25"/></operator><name><name pos:line="22" pos:column="25">k<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">-&gt;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="28">str<pos:position pos:line="22" pos:column="31"/></name></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">z<pos:position pos:line="23" pos:column="4"/></name><operator pos:line="23" pos:column="4">-&gt;<pos:position pos:line="23" pos:column="9"/></operator><name pos:line="23" pos:column="6">avail_in<pos:position pos:line="23" pos:column="14"/></name></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <name pos:line="23" pos:column="17">nread<pos:position pos:line="23" pos:column="22"/></name></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="25" pos:column="3">/* because the buffer size is fixed, iteratively decompress
     and transfer to the client via client_write. */</comment>
  <for pos:line="27" pos:column="3">for <control pos:line="27" pos:column="7">(<init pos:line="27" pos:column="8">;<pos:position pos:line="27" pos:column="9"/></init><condition pos:line="27" pos:column="9">;<pos:position pos:line="27" pos:column="10"/></condition><incr/>)<pos:position pos:line="27" pos:column="11"/></control> <block pos:line="27" pos:column="12">{
    <comment type="block" pos:line="28" pos:column="5">/* (re)set buffer for decompressed output for every iteration */</comment>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">z<pos:position pos:line="29" pos:column="6"/></name><operator pos:line="29" pos:column="6">-&gt;<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="8">next_out<pos:position pos:line="29" pos:column="16"/></name></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <operator pos:line="29" pos:column="19">(<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">Bytef<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">*<pos:position pos:line="29" pos:column="27"/></operator><operator pos:line="29" pos:column="27">)<pos:position pos:line="29" pos:column="28"/></operator><operator pos:line="29" pos:column="28">&amp;<pos:position pos:line="29" pos:column="33"/></operator><name><name pos:line="29" pos:column="29">decomp<pos:position pos:line="29" pos:column="35"/></name><index pos:line="29" pos:column="35">[<expr><literal type="number" pos:line="29" pos:column="36">0<pos:position pos:line="29" pos:column="37"/></literal></expr>]<pos:position pos:line="29" pos:column="38"/></index></name></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">z<pos:position pos:line="30" pos:column="6"/></name><operator pos:line="30" pos:column="6">-&gt;<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="8">avail_out<pos:position pos:line="30" pos:column="17"/></name></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <name pos:line="30" pos:column="20">DSIZ<pos:position pos:line="30" pos:column="24"/></name></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name pos:line="32" pos:column="5">status<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">inflate<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">z<pos:position pos:line="32" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="25">Z_SYNC_FLUSH<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">status<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">==<pos:position pos:line="33" pos:column="18"/></operator> <name pos:line="33" pos:column="19">Z_OK<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">||<pos:position pos:line="33" pos:column="26"/></operator> <name pos:line="33" pos:column="27">status<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">==<pos:position pos:line="33" pos:column="36"/></operator> <name pos:line="33" pos:column="37">Z_STREAM_END<pos:position pos:line="33" pos:column="49"/></name></expr>)<pos:position pos:line="33" pos:column="50"/></condition><then pos:line="33" pos:column="50"> <block pos:line="33" pos:column="51">{
      <expr_stmt><expr><name pos:line="34" pos:column="7">result<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <call><name pos:line="34" pos:column="16">Curl_client_write<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">data<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">CLIENTWRITE_BODY<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="58">decomp<pos:position pos:line="34" pos:column="64"/></name></expr></argument>, 
                                 <argument><expr><name pos:line="35" pos:column="34">DSIZ<pos:position pos:line="35" pos:column="38"/></name> <operator pos:line="35" pos:column="39">-<pos:position pos:line="35" pos:column="40"/></operator> <name><name pos:line="35" pos:column="41">z<pos:position pos:line="35" pos:column="42"/></name><operator pos:line="35" pos:column="42">-&gt;<pos:position pos:line="35" pos:column="47"/></operator><name pos:line="35" pos:column="44">avail_out<pos:position pos:line="35" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt>
      <comment type="block" pos:line="36" pos:column="7">/* if !CURLE_OK, clean up, return */</comment>
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><name pos:line="37" pos:column="11">result<pos:position pos:line="37" pos:column="17"/></name></expr>)<pos:position pos:line="37" pos:column="18"/></condition><then pos:line="37" pos:column="18"> <block pos:line="37" pos:column="19">{              
        <return pos:line="38" pos:column="9">return <expr><call><name pos:line="38" pos:column="16">exit_zlib<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">z<pos:position pos:line="38" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="29">&amp;<pos:position pos:line="38" pos:column="34"/></operator><name><name pos:line="38" pos:column="30">k<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">-&gt;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="33">zlib_init<pos:position pos:line="38" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="44">result<pos:position pos:line="38" pos:column="50"/></name></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="52"/></return>
      }<pos:position pos:line="39" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="41" pos:column="7">/* Done?; clean up, return */</comment>
      <if pos:line="42" pos:column="7">if <condition pos:line="42" pos:column="10">(<expr><name pos:line="42" pos:column="11">status<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">==<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="21">Z_STREAM_END<pos:position pos:line="42" pos:column="33"/></name></expr>)<pos:position pos:line="42" pos:column="34"/></condition><then pos:line="42" pos:column="34"> <block pos:line="42" pos:column="35">{
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><call><name pos:line="43" pos:column="13">inflateEnd<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">z<pos:position pos:line="43" pos:column="25"/></name></expr></argument>)<pos:position pos:line="43" pos:column="26"/></argument_list></call> <operator pos:line="43" pos:column="27">==<pos:position pos:line="43" pos:column="29"/></operator> <name pos:line="43" pos:column="30">Z_OK<pos:position pos:line="43" pos:column="34"/></name></expr>)<pos:position pos:line="43" pos:column="35"/></condition><then pos:line="43" pos:column="35">
          <block type="pseudo"><return pos:line="44" pos:column="11">return <expr><call><name pos:line="44" pos:column="18">exit_zlib<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">z<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="31">&amp;<pos:position pos:line="44" pos:column="36"/></operator><name><name pos:line="44" pos:column="32">k<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">zlib_init<pos:position pos:line="44" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="46">result<pos:position pos:line="44" pos:column="52"/></name></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="54"/></return></block></then>
        <else pos:line="45" pos:column="9">else
          <block type="pseudo"><return pos:line="46" pos:column="11">return <expr><call><name pos:line="46" pos:column="18">exit_zlib<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">z<pos:position pos:line="46" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="31">&amp;<pos:position pos:line="46" pos:column="36"/></operator><name><name pos:line="46" pos:column="32">k<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">zlib_init<pos:position pos:line="46" pos:column="44"/></name></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="46">process_zlib_error<pos:position pos:line="46" pos:column="64"/></name><argument_list pos:line="46" pos:column="64">(<argument><expr><name pos:line="46" pos:column="65">data<pos:position pos:line="46" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="71">z<pos:position pos:line="46" pos:column="72"/></name></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="75"/></return></block></else></if>
      }<pos:position pos:line="47" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="49" pos:column="7">/* Done with these bytes, exit */</comment>
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><name pos:line="50" pos:column="11">status<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">==<pos:position pos:line="50" pos:column="20"/></operator> <name pos:line="50" pos:column="21">Z_OK<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">&amp;&amp;<pos:position pos:line="50" pos:column="36"/></operator> <name><name pos:line="50" pos:column="29">z<pos:position pos:line="50" pos:column="30"/></name><operator pos:line="50" pos:column="30">-&gt;<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="32">avail_in<pos:position pos:line="50" pos:column="40"/></name></name> <operator pos:line="50" pos:column="41">==<pos:position pos:line="50" pos:column="43"/></operator> <literal type="number" pos:line="50" pos:column="44">0<pos:position pos:line="50" pos:column="45"/></literal> <operator pos:line="50" pos:column="46">&amp;&amp;<pos:position pos:line="50" pos:column="56"/></operator> <name><name pos:line="50" pos:column="49">z<pos:position pos:line="50" pos:column="50"/></name><operator pos:line="50" pos:column="50">-&gt;<pos:position pos:line="50" pos:column="55"/></operator><name pos:line="50" pos:column="52">avail_out<pos:position pos:line="50" pos:column="61"/></name></name> <operator pos:line="50" pos:column="62">&gt;<pos:position pos:line="50" pos:column="66"/></operator> <literal type="number" pos:line="50" pos:column="64">0<pos:position pos:line="50" pos:column="65"/></literal></expr>)<pos:position pos:line="50" pos:column="66"/></condition><then pos:line="50" pos:column="66"> 
        <block type="pseudo"><return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">result<pos:position pos:line="51" pos:column="22"/></name></expr>;<pos:position pos:line="51" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="52" pos:column="6"/></block></then>
    <else pos:line="53" pos:column="5">else <block pos:line="53" pos:column="10">{                      <comment type="block" pos:line="53" pos:column="33">/* Error; exit loop, handle below */</comment>
      <return pos:line="54" pos:column="7">return <expr><call><name pos:line="54" pos:column="14">exit_zlib<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">(<argument><expr><name pos:line="54" pos:column="24">z<pos:position pos:line="54" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="27">&amp;<pos:position pos:line="54" pos:column="32"/></operator><name><name pos:line="54" pos:column="28">k<pos:position pos:line="54" pos:column="29"/></name><operator pos:line="54" pos:column="29">-&gt;<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="31">zlib_init<pos:position pos:line="54" pos:column="40"/></name></name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="42">process_zlib_error<pos:position pos:line="54" pos:column="60"/></name><argument_list pos:line="54" pos:column="60">(<argument><expr><name pos:line="54" pos:column="61">data<pos:position pos:line="54" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="67">z<pos:position pos:line="54" pos:column="68"/></name></expr></argument>)<pos:position pos:line="54" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="71"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>
  }<pos:position pos:line="56" pos:column="4"/></block></for>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
