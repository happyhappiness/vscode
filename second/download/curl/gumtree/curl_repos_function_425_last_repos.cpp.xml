<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_425_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">rtp_write<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">ptr<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">size_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">size<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">nmemb<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">void<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">stream<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">data<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><operator pos:line="3" pos:column="16">(<pos:position pos:line="3" pos:column="17"/></operator><name pos:line="3" pos:column="17">char<pos:position pos:line="3" pos:column="21"/></name> <operator pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></operator><operator pos:line="3" pos:column="23">)<pos:position pos:line="3" pos:column="24"/></operator><name pos:line="3" pos:column="24">ptr<pos:position pos:line="3" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">channel<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><call><name pos:line="4" pos:column="17">RTP_PKT_CHANNEL<pos:position pos:line="4" pos:column="32"/></name><argument_list pos:line="4" pos:column="32">(<argument><expr><name pos:line="4" pos:column="33">data<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">message_size<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">coded_size<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><call><name pos:line="6" pos:column="20">RTP_PKT_LENGTH<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">data<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">failure<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><ternary><condition><expr><operator pos:line="7" pos:column="20">(<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="21">size<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">&amp;&amp;<pos:position pos:line="7" pos:column="36"/></operator> <name pos:line="7" pos:column="29">nmemb<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">)<pos:position pos:line="7" pos:column="35"/></operator></expr> ?<pos:position pos:line="7" pos:column="37"/></condition><then pos:line="7" pos:column="37"> <expr><literal type="number" pos:line="7" pos:column="38">0<pos:position pos:line="7" pos:column="39"/></literal></expr> <pos:position pos:line="7" pos:column="40"/></then><else pos:line="7" pos:column="40">: <expr><literal type="number" pos:line="7" pos:column="42">1<pos:position pos:line="7" pos:column="43"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name></decl>;<pos:position pos:line="8" pos:column="9"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="9" pos:column="3">(<pos:position pos:line="9" pos:column="4"/></operator><name pos:line="9" pos:column="4">void<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">)<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">stream<pos:position pos:line="9" pos:column="15"/></name></expr>;<pos:position pos:line="9" pos:column="16"/></expr_stmt>

  <expr_stmt><expr><name pos:line="11" pos:column="3">message_size<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <call><name pos:line="11" pos:column="18">curlx_uztosi<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">size<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">*<pos:position pos:line="11" pos:column="37"/></operator> <name pos:line="11" pos:column="38">nmemb<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call> <operator pos:line="11" pos:column="45">-<pos:position pos:line="11" pos:column="46"/></operator> <literal type="number" pos:line="11" pos:column="47">4<pos:position pos:line="11" pos:column="48"/></literal></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">printf<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><literal type="string" pos:line="13" pos:column="10">"RTP: message size %d, channel %d\n"<pos:position pos:line="13" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">message_size<pos:position pos:line="13" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="62">channel<pos:position pos:line="13" pos:column="69"/></name></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="71"/></expr_stmt>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">message_size<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">!=<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">coded_size<pos:position pos:line="14" pos:column="32"/></name></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33"> <block pos:line="14" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">printf<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="string" pos:line="15" pos:column="12">"RTP embedded size (%d) does not match the write size (%d).\n"<pos:position pos:line="15" pos:column="74"/></literal></expr></argument>,
           <argument><expr><name pos:line="16" pos:column="12">coded_size<pos:position pos:line="16" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="24">message_size<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">failure<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">data<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">+=<pos:position pos:line="20" pos:column="10"/></operator> <literal type="number" pos:line="20" pos:column="11">4<pos:position pos:line="20" pos:column="12"/></literal></expr>;<pos:position pos:line="20" pos:column="13"/></expr_stmt>
  <for pos:line="21" pos:column="3">for<control pos:line="21" pos:column="6">(<init><expr><name pos:line="21" pos:column="7">i<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <literal type="number" pos:line="21" pos:column="11">0<pos:position pos:line="21" pos:column="12"/></literal></expr>;<pos:position pos:line="21" pos:column="13"/></init> <condition><expr><name pos:line="21" pos:column="14">i<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">&lt;<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="18">message_size<pos:position pos:line="21" pos:column="30"/></name></expr>;<pos:position pos:line="21" pos:column="31"/></condition> <incr><expr><name pos:line="21" pos:column="32">i<pos:position pos:line="21" pos:column="33"/></name> <operator pos:line="21" pos:column="34">+=<pos:position pos:line="21" pos:column="36"/></operator> <name pos:line="21" pos:column="37">RTP_DATA_SIZE<pos:position pos:line="21" pos:column="50"/></name></expr></incr>)<pos:position pos:line="21" pos:column="51"/></control> <block pos:line="21" pos:column="52">{
    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><name pos:line="22" pos:column="8">message_size<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">-<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="23">i<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">&gt;<pos:position pos:line="22" pos:column="29"/></operator> <name pos:line="22" pos:column="27">RTP_DATA_SIZE<pos:position pos:line="22" pos:column="40"/></name></expr>)<pos:position pos:line="22" pos:column="41"/></condition><then pos:line="22" pos:column="41"> <block pos:line="22" pos:column="42">{
      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><call><name pos:line="23" pos:column="10">memcmp<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">RTP_DATA<pos:position pos:line="23" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="27">data<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">+<pos:position pos:line="23" pos:column="33"/></operator> <name pos:line="23" pos:column="34">i<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="37">RTP_DATA_SIZE<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call> <operator pos:line="23" pos:column="52">!=<pos:position pos:line="23" pos:column="54"/></operator> <literal type="number" pos:line="23" pos:column="55">0<pos:position pos:line="23" pos:column="56"/></literal></expr>)<pos:position pos:line="23" pos:column="57"/></condition><then pos:line="23" pos:column="57"> <block pos:line="23" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">printf<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="string" pos:line="24" pos:column="16">"RTP PAYLOAD CORRUPTED [%s]\n"<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">data<pos:position pos:line="24" pos:column="52"/></name> <operator pos:line="24" pos:column="53">+<pos:position pos:line="24" pos:column="54"/></operator> <name pos:line="24" pos:column="55">i<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
        <return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">failure<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></return>
      }<pos:position pos:line="26" pos:column="8"/></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then>
    <else pos:line="28" pos:column="5">else <block pos:line="28" pos:column="10">{
      <if pos:line="29" pos:column="7">if<condition pos:line="29" pos:column="9">(<expr><call><name pos:line="29" pos:column="10">memcmp<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">RTP_DATA<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="27">data<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">+<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="34">i<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="37">message_size<pos:position pos:line="29" pos:column="49"/></name> <operator pos:line="29" pos:column="50">-<pos:position pos:line="29" pos:column="51"/></operator> <name pos:line="29" pos:column="52">i<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call> <operator pos:line="29" pos:column="55">!=<pos:position pos:line="29" pos:column="57"/></operator> <literal type="number" pos:line="29" pos:column="58">0<pos:position pos:line="29" pos:column="59"/></literal></expr>)<pos:position pos:line="29" pos:column="60"/></condition><then pos:line="29" pos:column="60"> <block pos:line="29" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">printf<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="string" pos:line="30" pos:column="16">"RTP PAYLOAD END CORRUPTED (%d), [%s]\n"<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>,
               <argument><expr><name pos:line="31" pos:column="16">message_size<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">-<pos:position pos:line="31" pos:column="30"/></operator> <name pos:line="31" pos:column="31">i<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">data<pos:position pos:line="31" pos:column="38"/></name> <operator pos:line="31" pos:column="39">+<pos:position pos:line="31" pos:column="40"/></operator> <name pos:line="31" pos:column="41">i<pos:position pos:line="31" pos:column="42"/></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
        <return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">failure<pos:position pos:line="32" pos:column="23"/></name></expr>;<pos:position pos:line="32" pos:column="24"/></return>
      }<pos:position pos:line="33" pos:column="8"/></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>
  }<pos:position pos:line="35" pos:column="4"/></block></for>

  <expr_stmt><expr><name pos:line="37" pos:column="3">rtp_packet_count<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">++<pos:position pos:line="37" pos:column="21"/></operator></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">fprintf<pos:position pos:line="38" pos:column="10"/></name><argument_list pos:line="38" pos:column="10">(<argument><expr><name pos:line="38" pos:column="11">stderr<pos:position pos:line="38" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="19">"packet count is %d\n"<pos:position pos:line="38" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="43">rtp_packet_count<pos:position pos:line="38" pos:column="59"/></name></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="61"/></expr_stmt>

  <return pos:line="40" pos:column="3">return <expr><name pos:line="40" pos:column="10">size<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">*<pos:position pos:line="40" pos:column="16"/></operator> <name pos:line="40" pos:column="17">nmemb<pos:position pos:line="40" pos:column="22"/></name></expr>;<pos:position pos:line="40" pos:column="23"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
