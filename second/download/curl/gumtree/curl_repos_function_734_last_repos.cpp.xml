<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_734_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">win32_init<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">void<pos:position pos:line="1" pos:column="21"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="22"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">WORD<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">wVersionRequested<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">WSADATA<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">wsaData<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">err<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <expr_stmt><expr><name pos:line="6" pos:column="3">wVersionRequested<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <call><name pos:line="6" pos:column="23">MAKEWORD<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">USE_WINSOCK<pos:position pos:line="6" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="45">USE_WINSOCK<pos:position pos:line="6" pos:column="56"/></name></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="58"/></expr_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">err<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <call><name pos:line="8" pos:column="9">WSAStartup<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">wVersionRequested<pos:position pos:line="8" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="39">&amp;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="40">wsaData<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="49"/></expr_stmt>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name pos:line="10" pos:column="6">err<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">!=<pos:position pos:line="10" pos:column="12"/></operator> <literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal></expr>)<pos:position pos:line="10" pos:column="15"/></condition><then pos:line="10" pos:column="15"> <block pos:line="10" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">perror<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="string" pos:line="11" pos:column="12">"Winsock init failed"<pos:position pos:line="11" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">logmsg<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="string" pos:line="12" pos:column="12">"Error initialising winsock -- aborting"<pos:position pos:line="12" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">exit<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><literal type="number" pos:line="13" pos:column="10">1<pos:position pos:line="13" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><call><name pos:line="16" pos:column="6">LOBYTE<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name><name pos:line="16" pos:column="13">wsaData<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">.<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">wVersion<pos:position pos:line="16" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call> <operator pos:line="16" pos:column="31">!=<pos:position pos:line="16" pos:column="33"/></operator> <name pos:line="16" pos:column="34">USE_WINSOCK<pos:position pos:line="16" pos:column="45"/></name> <operator pos:line="16" pos:column="46">||<pos:position pos:line="16" pos:column="48"/></operator>
     <call><name pos:line="17" pos:column="6">HIBYTE<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name><name pos:line="17" pos:column="13">wsaData<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">.<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">wVersion<pos:position pos:line="17" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call> <operator pos:line="17" pos:column="31">!=<pos:position pos:line="17" pos:column="33"/></operator> <name pos:line="17" pos:column="34">USE_WINSOCK<pos:position pos:line="17" pos:column="45"/></name></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46"> <block pos:line="17" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">WSACleanup<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">()<pos:position pos:line="18" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">perror<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="string" pos:line="19" pos:column="12">"Winsock init failed"<pos:position pos:line="19" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">logmsg<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="string" pos:line="20" pos:column="12">"No suitable winsock.dll found -- aborting"<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">exit<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><literal type="number" pos:line="21" pos:column="10">1<pos:position pos:line="21" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
