<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_85.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ssl_app_verify_callback<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">X509_STORE_CTX<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">ctx<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">void<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">arg<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">sslctxparm<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type> <name pos:line="3" pos:column="16">p<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><operator pos:line="3" pos:column="20">(<pos:position pos:line="3" pos:column="21"/></operator><name pos:line="3" pos:column="21">sslctxparm<pos:position pos:line="3" pos:column="31"/></name> <operator pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></operator><operator pos:line="3" pos:column="33">)<pos:position pos:line="3" pos:column="34"/></operator> <name pos:line="3" pos:column="35">arg<pos:position pos:line="3" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">ok<pos:position pos:line="4" pos:column="9"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="11">err<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">fprintf<pos:position pos:line="6" pos:column="10"/></name><argument_list pos:line="6" pos:column="10">(<argument><expr><name pos:line="6" pos:column="11">stderr<pos:position pos:line="6" pos:column="17"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="6" pos:column="18">"ssl_app_verify_callback sslctxparm=%p ctx=%p\n"<pos:position pos:line="6" pos:column="66"/></literal></expr></argument>,
          <argument><expr><operator pos:line="7" pos:column="11">(<pos:position pos:line="7" pos:column="12"/></operator><name pos:line="7" pos:column="12">void<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></operator><operator pos:line="7" pos:column="18">)<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="19">p<pos:position pos:line="7" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="22">(<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">void<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></operator><operator pos:line="7" pos:column="28">)<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="29">ctx<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>

<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">OPENSSL_VERSION_NUMBER<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">&lt;<pos:position pos:line="9" pos:column="31"/></operator><literal type="number" pos:line="9" pos:column="28">0x00907000L<pos:position pos:line="9" pos:column="39"/></literal></expr></cpp:if>
<comment type="block" pos:line="10" pos:column="1">/* not necessary in openssl 0.9.7 or later */</comment>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">fprintf<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><name pos:line="12" pos:column="11">stderr<pos:position pos:line="12" pos:column="17"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="12" pos:column="18">"This version %s of openssl does not support a parm (%p)"<pos:position pos:line="12" pos:column="75"/></literal>
          <literal type="string" pos:line="13" pos:column="11">", getting a global static %p \n"<pos:position pos:line="13" pos:column="44"/></literal></expr></argument>,
          <argument><expr><name pos:line="14" pos:column="11">OPENSSL_VERSION_TEXT<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="33">(<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="34">void<pos:position pos:line="14" pos:column="38"/></name> <operator pos:line="14" pos:column="39">*<pos:position pos:line="14" pos:column="40"/></operator><operator pos:line="14" pos:column="40">)<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="41">p<pos:position pos:line="14" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="44">(<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="45">void<pos:position pos:line="14" pos:column="49"/></name> <operator pos:line="14" pos:column="50">*<pos:position pos:line="14" pos:column="51"/></operator><operator pos:line="14" pos:column="51">)<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="52">globalparm<pos:position pos:line="14" pos:column="62"/></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>

  <expr_stmt><expr><name pos:line="16" pos:column="3">p<pos:position pos:line="16" pos:column="4"/></name> <operator pos:line="16" pos:column="5">=<pos:position pos:line="16" pos:column="6"/></operator> <name pos:line="16" pos:column="7">globalparm<pos:position pos:line="16" pos:column="17"/></name></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="19" pos:column="1">/* The following error should not occur. We test this to avoid segfault. */</comment>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><operator pos:line="20" pos:column="7">!<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">p<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">||<pos:position pos:line="20" pos:column="12"/></operator> <operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">ctx<pos:position pos:line="20" pos:column="17"/></name></expr>)<pos:position pos:line="20" pos:column="18"/></condition><then pos:line="20" pos:column="18"> <block pos:line="20" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">fprintf<pos:position pos:line="21" pos:column="12"/></name><argument_list pos:line="21" pos:column="12">(<argument><expr><name pos:line="21" pos:column="13">stderr<pos:position pos:line="21" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="21" pos:column="20">"Internal error in ssl_app_verify_callback "<pos:position pos:line="21" pos:column="64"/></literal>
            <literal type="string" pos:line="22" pos:column="13">"sslctxparm=%p ctx=%p\n"<pos:position pos:line="22" pos:column="37"/></literal></expr></argument>,<argument><expr><operator pos:line="22" pos:column="38">(<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="39">void<pos:position pos:line="22" pos:column="43"/></name> <operator pos:line="22" pos:column="44">*<pos:position pos:line="22" pos:column="45"/></operator><operator pos:line="22" pos:column="45">)<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="46">p<pos:position pos:line="22" pos:column="47"/></name></expr></argument>,<argument><expr><operator pos:line="22" pos:column="48">(<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="49">void<pos:position pos:line="22" pos:column="53"/></name><operator pos:line="22" pos:column="53">*<pos:position pos:line="22" pos:column="54"/></operator><operator pos:line="22" pos:column="54">)<pos:position pos:line="22" pos:column="55"/></operator><name pos:line="22" pos:column="55">ctx<pos:position pos:line="22" pos:column="58"/></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><literal type="number" pos:line="23" pos:column="12">0<pos:position pos:line="23" pos:column="13"/></literal></expr>;<pos:position pos:line="23" pos:column="14"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">ok<pos:position pos:line="26" pos:column="5"/></name><operator pos:line="26" pos:column="5">=<pos:position pos:line="26" pos:column="6"/></operator> <call><name pos:line="26" pos:column="7">X509_verify_cert<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">ctx<pos:position pos:line="26" pos:column="27"/></name></expr></argument>)<pos:position pos:line="26" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="27" pos:column="3">err<pos:position pos:line="27" pos:column="6"/></name><operator pos:line="27" pos:column="6">=<pos:position pos:line="27" pos:column="7"/></operator><call><name pos:line="27" pos:column="7">X509_STORE_CTX_get_error<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">ctx<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>

<comment type="block" pos:line="29" pos:column="1">/* The following seems to be a problem in 0.9.7/8 openssl versions */</comment>

<cpp:if pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">if<pos:position pos:line="31" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="31" pos:column="5">1<pos:position pos:line="31" pos:column="6"/></literal></expr></cpp:if>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name pos:line="32" pos:column="7">err<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">==<pos:position pos:line="32" pos:column="13"/></operator> <name pos:line="32" pos:column="14">X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT<pos:position pos:line="32" pos:column="52"/></name> <operator pos:line="32" pos:column="53">||<pos:position pos:line="32" pos:column="55"/></operator>
      <name pos:line="33" pos:column="7">err<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">==<pos:position pos:line="33" pos:column="13"/></operator> <name pos:line="33" pos:column="14">X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY<pos:position pos:line="33" pos:column="58"/></name></expr>)<pos:position pos:line="33" pos:column="59"/></condition><then pos:line="33" pos:column="59"> <block pos:line="33" pos:column="60">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">fprintf<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">stderr<pos:position pos:line="34" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="34" pos:column="20">"X509_verify_cert: repairing self signed\n"<pos:position pos:line="34" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="64"/></argument_list></call></expr> ;<pos:position pos:line="34" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">X509_STORE_CTX_set_error<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">ctx<pos:position pos:line="35" pos:column="33"/></name></expr></argument>,<argument><expr><name pos:line="35" pos:column="34">X509_V_OK<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">ok<pos:position pos:line="36" pos:column="7"/></name> <operator pos:line="36" pos:column="8">=<pos:position pos:line="36" pos:column="9"/></operator> <literal type="number" pos:line="36" pos:column="10">1<pos:position pos:line="36" pos:column="11"/></literal></expr>;<pos:position pos:line="36" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name pos:line="40" pos:column="7">ok<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">&amp;&amp;<pos:position pos:line="40" pos:column="20"/></operator> <name><name pos:line="40" pos:column="13">ctx<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">-&gt;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="18">cert<pos:position pos:line="40" pos:column="22"/></name></name></expr>)<pos:position pos:line="40" pos:column="23"/></condition><then pos:line="40" pos:column="23"> <block pos:line="40" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">unsigned<pos:position pos:line="41" pos:column="13"/></name> <name pos:line="41" pos:column="14">char<pos:position pos:line="41" pos:column="18"/></name> <modifier pos:line="41" pos:column="19">*<pos:position pos:line="41" pos:column="20"/></modifier></type> <name pos:line="41" pos:column="21">accessinfoURL<pos:position pos:line="41" pos:column="34"/></name></decl> ;<pos:position pos:line="41" pos:column="36"/></decl_stmt>

    <expr_stmt><expr><name pos:line="43" pos:column="5">accessinfoURL<pos:position pos:line="43" pos:column="18"/></name> <operator pos:line="43" pos:column="19">=<pos:position pos:line="43" pos:column="20"/></operator> <call><name pos:line="43" pos:column="21">my_get_ext<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name><name pos:line="43" pos:column="32">ctx<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">-&gt;<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="37">cert<pos:position pos:line="43" pos:column="41"/></name></name></expr></argument>,<argument><expr><name><name pos:line="43" pos:column="42">p<pos:position pos:line="43" pos:column="43"/></name><operator pos:line="43" pos:column="43">-&gt;<pos:position pos:line="43" pos:column="48"/></operator><name pos:line="43" pos:column="45">accesstype<pos:position pos:line="43" pos:column="55"/></name></name></expr></argument> ,<argument><expr><name pos:line="43" pos:column="57">NID_info_access<pos:position pos:line="43" pos:column="72"/></name></expr></argument>)<pos:position pos:line="43" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="74"/></expr_stmt>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">accessinfoURL<pos:position pos:line="44" pos:column="22"/></name></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23"> <block pos:line="44" pos:column="24">{

      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><call><name pos:line="46" pos:column="11">strcmp<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">(<argument><expr><operator pos:line="46" pos:column="18">(<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="19">char<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">*<pos:position pos:line="46" pos:column="25"/></operator><operator pos:line="46" pos:column="25">)<pos:position pos:line="46" pos:column="26"/></operator><name><name pos:line="46" pos:column="26">p<pos:position pos:line="46" pos:column="27"/></name><operator pos:line="46" pos:column="27">-&gt;<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="29">accessinfoURL<pos:position pos:line="46" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="44">(<pos:position pos:line="46" pos:column="45"/></operator><name pos:line="46" pos:column="45">char<pos:position pos:line="46" pos:column="49"/></name> <operator pos:line="46" pos:column="50">*<pos:position pos:line="46" pos:column="51"/></operator><operator pos:line="46" pos:column="51">)<pos:position pos:line="46" pos:column="52"/></operator><name pos:line="46" pos:column="52">accessinfoURL<pos:position pos:line="46" pos:column="65"/></name></expr></argument>)<pos:position pos:line="46" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="67"/></condition><then pos:line="46" pos:column="67"> <block pos:line="46" pos:column="68">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">fprintf<pos:position pos:line="47" pos:column="16"/></name><argument_list pos:line="47" pos:column="16">(<argument><expr><name pos:line="47" pos:column="17">stderr<pos:position pos:line="47" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="25">"Setting URL &lt;%s&gt;, was &lt;%s&gt;\n"<pos:position pos:line="47" pos:column="67"/></literal></expr></argument>,
                <argument><expr><operator pos:line="48" pos:column="17">(<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="18">char<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">*<pos:position pos:line="48" pos:column="24"/></operator><operator pos:line="48" pos:column="24">)<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">accessinfoURL<pos:position pos:line="48" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="40">(<pos:position pos:line="48" pos:column="41"/></operator><name pos:line="48" pos:column="41">char<pos:position pos:line="48" pos:column="45"/></name> <operator pos:line="48" pos:column="46">*<pos:position pos:line="48" pos:column="47"/></operator><operator pos:line="48" pos:column="47">)<pos:position pos:line="48" pos:column="48"/></operator><name><name pos:line="48" pos:column="48">p<pos:position pos:line="48" pos:column="49"/></name><operator pos:line="48" pos:column="49">-&gt;<pos:position pos:line="48" pos:column="54"/></operator><name pos:line="48" pos:column="51">accessinfoURL<pos:position pos:line="48" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">OPENSSL_free<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name><name pos:line="49" pos:column="22">p<pos:position pos:line="49" pos:column="23"/></name><operator pos:line="49" pos:column="23">-&gt;<pos:position pos:line="49" pos:column="28"/></operator><name pos:line="49" pos:column="25">accessinfoURL<pos:position pos:line="49" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">p<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">-&gt;<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="12">accessinfoURL<pos:position pos:line="50" pos:column="25"/></name></name> <operator pos:line="50" pos:column="26">=<pos:position pos:line="50" pos:column="27"/></operator> <name pos:line="50" pos:column="28">accessinfoURL<pos:position pos:line="50" pos:column="41"/></name></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt>

        <comment type="block" pos:line="52" pos:column="9">/* We need to be able to deal with a custom port number, but the
           URL in the cert uses a static one. We thus need to create a new
           URL that uses the currently requested port number which may not
           be the one this URL uses! */</comment>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">sprintf<pos:position pos:line="56" pos:column="16"/></name><argument_list pos:line="56" pos:column="16">(<argument><expr><name pos:line="56" pos:column="17">newurl<pos:position pos:line="56" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="25">"https://127.0.0.1:%d/509"<pos:position pos:line="56" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="53">portnum<pos:position pos:line="56" pos:column="60"/></name></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">fprintf<pos:position pos:line="57" pos:column="16"/></name><argument_list pos:line="57" pos:column="16">(<argument><expr><name pos:line="57" pos:column="17">stderr<pos:position pos:line="57" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="25">"But *really* Setting URL &lt;%s&gt;\n"<pos:position pos:line="57" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="60">newurl<pos:position pos:line="57" pos:column="66"/></name></expr></argument>)<pos:position pos:line="57" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="68"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="59" pos:column="9">curl_easy_setopt<pos:position pos:line="59" pos:column="25"/></name><argument_list pos:line="59" pos:column="25">(<argument><expr><name><name pos:line="59" pos:column="26">p<pos:position pos:line="59" pos:column="27"/></name><operator pos:line="59" pos:column="27">-&gt;<pos:position pos:line="59" pos:column="32"/></operator><name pos:line="59" pos:column="29">curl<pos:position pos:line="59" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="35">CURLOPT_URL<pos:position pos:line="59" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="48">newurl<pos:position pos:line="59" pos:column="54"/></name></expr></argument>)<pos:position pos:line="59" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="60" pos:column="8"/></block></then>
      <else pos:line="61" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="9">OPENSSL_free<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">accessinfoURL<pos:position pos:line="62" pos:column="35"/></name></expr></argument>)<pos:position pos:line="62" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt></block></else></if>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>
  <return pos:line="65" pos:column="3">return<expr><operator pos:line="65" pos:column="9">(<pos:position pos:line="65" pos:column="10"/></operator><name pos:line="65" pos:column="10">ok<pos:position pos:line="65" pos:column="12"/></name><operator pos:line="65" pos:column="12">)<pos:position pos:line="65" pos:column="13"/></operator></expr>;<pos:position pos:line="65" pos:column="14"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
