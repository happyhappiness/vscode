<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_657_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_ssl_recv<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">connectdata<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">conn<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="45">/* connection data */</comment>
                  <parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">sockindex<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>,            <comment type="block" pos:line="2" pos:column="45">/* socketindex */</comment>
                  <parameter><decl><type><name pos:line="3" pos:column="19">char<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">mem<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>,                <comment type="block" pos:line="3" pos:column="45">/* store read data here */</comment>
                  <parameter><decl><type><name pos:line="4" pos:column="19">size_t<pos:position pos:line="4" pos:column="25"/></name></type> <name pos:line="4" pos:column="26">len<pos:position pos:line="4" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="30"/></parameter_list>               <comment type="block" pos:line="4" pos:column="45">/* max amount to read */</comment>
<block pos:line="5" pos:column="1">{
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">USE_SSL<pos:position pos:line="6" pos:column="15"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">ssize_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">nread<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">block<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><name pos:line="8" pos:column="16">FALSE<pos:position pos:line="8" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">USE_SSLEAY<pos:position pos:line="10" pos:column="18"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="11" pos:column="3">nread<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <call><name pos:line="11" pos:column="11">Curl_ossl_recv<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">conn<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="32">sockindex<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">mem<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="48">len<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="53">&amp;<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="54">block<pos:position pos:line="11" pos:column="59"/></name></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">USE_GNUTLS<pos:position pos:line="13" pos:column="18"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="14" pos:column="3">nread<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">Curl_gtls_recv<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">conn<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="32">sockindex<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="43">mem<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">len<pos:position pos:line="14" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="53">&amp;<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="54">block<pos:position pos:line="14" pos:column="59"/></name></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="61"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="15" pos:column="8">/* USE_GNUTLS */</comment>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="16" pos:column="8">/* USE_SSLEAY */</comment>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name pos:line="17" pos:column="6">nread<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">==<pos:position pos:line="17" pos:column="14"/></operator> <operator pos:line="17" pos:column="15">-<pos:position pos:line="17" pos:column="16"/></operator><literal type="number" pos:line="17" pos:column="16">1<pos:position pos:line="17" pos:column="17"/></literal></expr>)<pos:position pos:line="17" pos:column="18"/></condition><then pos:line="17" pos:column="18"> <block pos:line="17" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">infof<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><name><name pos:line="18" pos:column="11">conn<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">data<pos:position pos:line="18" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="23">"Curl_xxx_rcvs returned -1, block = %s\n"<pos:position pos:line="18" pos:column="64"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><name pos:line="19" pos:column="11">block<pos:position pos:line="19" pos:column="16"/></name></expr>?<pos:position pos:line="19" pos:column="17"/></condition><then><expr><literal type="string" pos:line="19" pos:column="17">"TRUE"<pos:position pos:line="19" pos:column="23"/></literal></expr></then><else pos:line="19" pos:column="23">:<expr><literal type="string" pos:line="19" pos:column="24">"FALSE"<pos:position pos:line="19" pos:column="31"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><operator pos:line="20" pos:column="8">!<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="9">block<pos:position pos:line="20" pos:column="14"/></name></expr>)<pos:position pos:line="20" pos:column="15"/></condition><then pos:line="20" pos:column="15">
      <block type="pseudo"><return pos:line="21" pos:column="7">return <expr><literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>;<pos:position pos:line="21" pos:column="16"/></return></block></then> <comment type="block" pos:line="21" pos:column="17">/* this is a true error, not EWOULDBLOCK */</comment>
    <else pos:line="22" pos:column="5">else
      <block type="pseudo"><return pos:line="23" pos:column="7">return <expr><operator pos:line="23" pos:column="14">-<pos:position pos:line="23" pos:column="15"/></operator><literal type="number" pos:line="23" pos:column="15">1<pos:position pos:line="23" pos:column="16"/></literal></expr>;<pos:position pos:line="23" pos:column="17"/></return></block></else></if>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <return pos:line="26" pos:column="3">return <expr><operator pos:line="26" pos:column="10">(<pos:position pos:line="26" pos:column="11"/></operator><name pos:line="26" pos:column="11">int<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">)<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">nread<pos:position pos:line="26" pos:column="20"/></name></expr>;<pos:position pos:line="26" pos:column="21"/></return>

<cpp:else pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">else<pos:position pos:line="28" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="28" pos:column="7">/* USE_SSL */</comment>
  <expr_stmt><expr><operator pos:line="29" pos:column="3">(<pos:position pos:line="29" pos:column="4"/></operator><name pos:line="29" pos:column="4">void<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">)<pos:position pos:line="29" pos:column="9"/></operator><name pos:line="29" pos:column="9">conn<pos:position pos:line="29" pos:column="13"/></name></expr>;<pos:position pos:line="29" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="30" pos:column="3">(<pos:position pos:line="30" pos:column="4"/></operator><name pos:line="30" pos:column="4">void<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">)<pos:position pos:line="30" pos:column="9"/></operator><name pos:line="30" pos:column="9">sockindex<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="31" pos:column="3">(<pos:position pos:line="31" pos:column="4"/></operator><name pos:line="31" pos:column="4">void<pos:position pos:line="31" pos:column="8"/></name><operator pos:line="31" pos:column="8">)<pos:position pos:line="31" pos:column="9"/></operator><name pos:line="31" pos:column="9">mem<pos:position pos:line="31" pos:column="12"/></name></expr>;<pos:position pos:line="31" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="32" pos:column="3">(<pos:position pos:line="32" pos:column="4"/></operator><name pos:line="32" pos:column="4">void<pos:position pos:line="32" pos:column="8"/></name><operator pos:line="32" pos:column="8">)<pos:position pos:line="32" pos:column="9"/></operator><name pos:line="32" pos:column="9">len<pos:position pos:line="32" pos:column="12"/></name></expr>;<pos:position pos:line="32" pos:column="13"/></expr_stmt>
  <return pos:line="33" pos:column="3">return <expr><literal type="number" pos:line="33" pos:column="10">0<pos:position pos:line="33" pos:column="11"/></literal></expr>;<pos:position pos:line="33" pos:column="12"/></return>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="34" pos:column="8">/* USE_SSL */</comment>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
