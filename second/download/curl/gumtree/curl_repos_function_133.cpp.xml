<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_133.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">juggle<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">curl_socket_t<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">sockfdp<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>,
                  <parameter><decl><type><name pos:line="2" pos:column="19">curl_socket_t<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">listenfd<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>,
                  <parameter><decl><type><name><name pos:line="3" pos:column="19">enum<pos:position pos:line="3" pos:column="23"/></name> <name pos:line="3" pos:column="24">sockmode<pos:position pos:line="3" pos:column="32"/></name></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">mode<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="39"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">timeval<pos:position pos:line="5" pos:column="17"/></name></name></type> <name pos:line="5" pos:column="18">timeout<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">fd_set<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">fds_read<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">fd_set<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">fds_write<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">fd_set<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">fds_err<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">curl_socket_t<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">maxfd<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">r<pos:position pos:line="10" pos:column="8"/></name></decl>;<pos:position pos:line="10" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name></type> <name><name pos:line="11" pos:column="17">buffer<pos:position pos:line="11" pos:column="23"/></name><index pos:line="11" pos:column="23">[<expr><literal type="number" pos:line="11" pos:column="24">256<pos:position pos:line="11" pos:column="27"/></literal></expr>]<pos:position pos:line="11" pos:column="28"/></index></name></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt> <comment type="block" pos:line="11" pos:column="30">/* FIX: bigger buffer */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name><name pos:line="12" pos:column="8">data<pos:position pos:line="12" pos:column="12"/></name><index pos:line="12" pos:column="12">[<expr><literal type="number" pos:line="12" pos:column="13">256<pos:position pos:line="12" pos:column="16"/></literal></expr>]<pos:position pos:line="12" pos:column="17"/></index></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">sockfd<pos:position pos:line="13" pos:column="13"/></name></decl>;<pos:position pos:line="13" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="15" pos:column="3">timeout<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">.<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">tv_sec<pos:position pos:line="15" pos:column="17"/></name></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <literal type="number" pos:line="15" pos:column="20">120<pos:position pos:line="15" pos:column="23"/></literal></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">timeout<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">.<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">tv_usec<pos:position pos:line="16" pos:column="18"/></name></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <literal type="number" pos:line="16" pos:column="21">0<pos:position pos:line="16" pos:column="22"/></literal></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">FD_ZERO<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><operator pos:line="18" pos:column="11">&amp;<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="12">fds_read<pos:position pos:line="18" pos:column="20"/></name></expr></argument>)<pos:position pos:line="18" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">FD_ZERO<pos:position pos:line="19" pos:column="10"/></name><argument_list pos:line="19" pos:column="10">(<argument><expr><operator pos:line="19" pos:column="11">&amp;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="12">fds_write<pos:position pos:line="19" pos:column="21"/></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">FD_ZERO<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><operator pos:line="20" pos:column="11">&amp;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="12">fds_err<pos:position pos:line="20" pos:column="19"/></name></expr></argument>)<pos:position pos:line="20" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">FD_SET<pos:position pos:line="22" pos:column="9"/></name><argument_list pos:line="22" pos:column="9">(<argument><expr><call><name pos:line="22" pos:column="10">fileno<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">stdin<pos:position pos:line="22" pos:column="22"/></name></expr></argument>)<pos:position pos:line="22" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="22" pos:column="25">&amp;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="26">fds_read<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>

  <switch pos:line="24" pos:column="3">switch<condition pos:line="24" pos:column="9">(<expr><operator pos:line="24" pos:column="10">*<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="11">mode<pos:position pos:line="24" pos:column="15"/></name></expr>)<pos:position pos:line="24" pos:column="16"/></condition> <block pos:line="24" pos:column="17">{
  <case pos:line="25" pos:column="3">case <expr><name pos:line="25" pos:column="8">PASSIVE_LISTEN<pos:position pos:line="25" pos:column="22"/></name></expr>:<pos:position pos:line="25" pos:column="23"/></case>
    <comment type="block" pos:line="26" pos:column="5">/* server mode */</comment>
    <expr_stmt><expr><name pos:line="27" pos:column="5">sockfd<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <name pos:line="27" pos:column="14">listenfd<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
    <comment type="block" pos:line="28" pos:column="5">/* there's always a socket to wait for */</comment>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">FD_SET<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">sockfd<pos:position pos:line="29" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="20">&amp;<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="21">fds_read<pos:position pos:line="29" pos:column="29"/></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="30" pos:column="5">maxfd<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <name pos:line="30" pos:column="13">sockfd<pos:position pos:line="30" pos:column="19"/></name></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>
    <break pos:line="31" pos:column="5">break;<pos:position pos:line="31" pos:column="11"/></break>

  <case pos:line="33" pos:column="3">case <expr><name pos:line="33" pos:column="8">PASSIVE_CONNECT<pos:position pos:line="33" pos:column="23"/></name></expr>:<pos:position pos:line="33" pos:column="24"/></case>
    <expr_stmt><expr><name pos:line="34" pos:column="5">sockfd<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <operator pos:line="34" pos:column="14">*<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">sockfdp<pos:position pos:line="34" pos:column="22"/></name></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><operator pos:line="35" pos:column="8">-<pos:position pos:line="35" pos:column="9"/></operator><literal type="number" pos:line="35" pos:column="9">1<pos:position pos:line="35" pos:column="10"/></literal> <operator pos:line="35" pos:column="11">==<pos:position pos:line="35" pos:column="13"/></operator> <name pos:line="35" pos:column="14">sockfd<pos:position pos:line="35" pos:column="20"/></name></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21"> <block pos:line="35" pos:column="22">{
      <comment type="block" pos:line="36" pos:column="7">/* eeek, we are supposedly connected and then this cannot be -1 ! */</comment>
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">logmsg<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><literal type="string" pos:line="37" pos:column="14">"socket is -1! on %s:%d"<pos:position pos:line="37" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="40">__FILE__<pos:position pos:line="37" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="50">__LINE__<pos:position pos:line="37" pos:column="58"/></name></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><name pos:line="38" pos:column="7">maxfd<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <literal type="number" pos:line="38" pos:column="15">0<pos:position pos:line="38" pos:column="16"/></literal></expr>;<pos:position pos:line="38" pos:column="17"/></expr_stmt> <comment type="block" pos:line="38" pos:column="18">/* stdin */</comment>
    }<pos:position pos:line="39" pos:column="6"/></block></then>
    <else pos:line="40" pos:column="5">else <block pos:line="40" pos:column="10">{
      <comment type="block" pos:line="41" pos:column="7">/* there's always a socket to wait for */</comment>
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">FD_SET<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><name pos:line="42" pos:column="14">sockfd<pos:position pos:line="42" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="22">&amp;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="23">fds_read<pos:position pos:line="42" pos:column="31"/></name></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">maxfd<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <name pos:line="43" pos:column="15">sockfd<pos:position pos:line="43" pos:column="21"/></name></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>
    <break pos:line="45" pos:column="5">break;<pos:position pos:line="45" pos:column="11"/></break>

  <case pos:line="47" pos:column="3">case <expr><name pos:line="47" pos:column="8">ACTIVE<pos:position pos:line="47" pos:column="14"/></name></expr>:<pos:position pos:line="47" pos:column="15"/></case>
    <expr_stmt><expr><name pos:line="48" pos:column="5">sockfd<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">=<pos:position pos:line="48" pos:column="13"/></operator> <operator pos:line="48" pos:column="14">*<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="15">sockfdp<pos:position pos:line="48" pos:column="22"/></name></expr>;<pos:position pos:line="48" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="50" pos:column="5">/* sockfd turns CURL_SOCKET_BAD when our connection has been closed */</comment>
    <if pos:line="51" pos:column="5">if<condition pos:line="51" pos:column="7">(<expr><name pos:line="51" pos:column="8">sockfd<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">!=<pos:position pos:line="51" pos:column="17"/></operator> <name pos:line="51" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="51" pos:column="33"/></name></expr>)<pos:position pos:line="51" pos:column="34"/></condition><then pos:line="51" pos:column="34"> <block pos:line="51" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">FD_SET<pos:position pos:line="52" pos:column="13"/></name><argument_list pos:line="52" pos:column="13">(<argument><expr><name pos:line="52" pos:column="14">sockfd<pos:position pos:line="52" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="22">&amp;<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="23">fds_read<pos:position pos:line="52" pos:column="31"/></name></expr></argument>)<pos:position pos:line="52" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="53" pos:column="7">maxfd<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <name pos:line="53" pos:column="15">sockfd<pos:position pos:line="53" pos:column="21"/></name></expr>;<pos:position pos:line="53" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then>
    <else pos:line="55" pos:column="5">else <block pos:line="55" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">logmsg<pos:position pos:line="56" pos:column="13"/></name><argument_list pos:line="56" pos:column="13">(<argument><expr><literal type="string" pos:line="56" pos:column="14">"No socket to read on"<pos:position pos:line="56" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="57" pos:column="7">maxfd<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">=<pos:position pos:line="57" pos:column="14"/></operator> <literal type="number" pos:line="57" pos:column="15">0<pos:position pos:line="57" pos:column="16"/></literal></expr>;<pos:position pos:line="57" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></else></if>
    <break pos:line="59" pos:column="5">break;<pos:position pos:line="59" pos:column="11"/></break>

  <case pos:line="61" pos:column="3">case <expr><name pos:line="61" pos:column="8">ACTIVE_DISCONNECT<pos:position pos:line="61" pos:column="25"/></name></expr>:<pos:position pos:line="61" pos:column="26"/></case>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">logmsg<pos:position pos:line="62" pos:column="11"/></name><argument_list pos:line="62" pos:column="11">(<argument><expr><literal type="string" pos:line="62" pos:column="12">"disconnected, no socket to read on"<pos:position pos:line="62" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="63" pos:column="5">maxfd<pos:position pos:line="63" pos:column="10"/></name> <operator pos:line="63" pos:column="11">=<pos:position pos:line="63" pos:column="12"/></operator> <literal type="number" pos:line="63" pos:column="13">0<pos:position pos:line="63" pos:column="14"/></literal></expr>;<pos:position pos:line="63" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="64" pos:column="5">sockfd<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <name pos:line="64" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="64" pos:column="29"/></name></expr>;<pos:position pos:line="64" pos:column="30"/></expr_stmt>
    <break pos:line="65" pos:column="5">break;<pos:position pos:line="65" pos:column="11"/></break>
  }<pos:position pos:line="66" pos:column="4"/></block></switch>

  <do pos:line="68" pos:column="3">do <block pos:line="68" pos:column="6">{
    <expr_stmt><expr><name pos:line="69" pos:column="5">r<pos:position pos:line="69" pos:column="6"/></name> <operator pos:line="69" pos:column="7">=<pos:position pos:line="69" pos:column="8"/></operator> <call><name pos:line="69" pos:column="9">select<pos:position pos:line="69" pos:column="15"/></name><argument_list pos:line="69" pos:column="15">(<argument><expr><name pos:line="69" pos:column="16">maxfd<pos:position pos:line="69" pos:column="21"/></name> <operator pos:line="69" pos:column="22">+<pos:position pos:line="69" pos:column="23"/></operator> <literal type="number" pos:line="69" pos:column="24">1<pos:position pos:line="69" pos:column="25"/></literal></expr></argument>, <argument><expr><operator pos:line="69" pos:column="27">&amp;<pos:position pos:line="69" pos:column="32"/></operator><name pos:line="69" pos:column="28">fds_read<pos:position pos:line="69" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="38">&amp;<pos:position pos:line="69" pos:column="43"/></operator><name pos:line="69" pos:column="39">fds_write<pos:position pos:line="69" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="50">&amp;<pos:position pos:line="69" pos:column="55"/></operator><name pos:line="69" pos:column="51">fds_err<pos:position pos:line="69" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="60">&amp;<pos:position pos:line="69" pos:column="65"/></operator><name pos:line="69" pos:column="61">timeout<pos:position pos:line="69" pos:column="68"/></name></expr></argument>)<pos:position pos:line="69" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="70"/></expr_stmt>
  }<pos:position pos:line="70" pos:column="4"/></block> while<condition pos:line="70" pos:column="10">(<expr><operator pos:line="70" pos:column="11">(<pos:position pos:line="70" pos:column="12"/></operator><name pos:line="70" pos:column="12">r<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">==<pos:position pos:line="70" pos:column="16"/></operator> <operator pos:line="70" pos:column="17">-<pos:position pos:line="70" pos:column="18"/></operator><literal type="number" pos:line="70" pos:column="18">1<pos:position pos:line="70" pos:column="19"/></literal><operator pos:line="70" pos:column="19">)<pos:position pos:line="70" pos:column="20"/></operator> <operator pos:line="70" pos:column="21">&amp;&amp;<pos:position pos:line="70" pos:column="31"/></operator> <operator pos:line="70" pos:column="24">(<pos:position pos:line="70" pos:column="25"/></operator><call><name pos:line="70" pos:column="25">ourerrno<pos:position pos:line="70" pos:column="33"/></name><argument_list pos:line="70" pos:column="33">()<pos:position pos:line="70" pos:column="35"/></argument_list></call> <operator pos:line="70" pos:column="36">==<pos:position pos:line="70" pos:column="38"/></operator> <name pos:line="70" pos:column="39">EINTR<pos:position pos:line="70" pos:column="44"/></name><operator pos:line="70" pos:column="44">)<pos:position pos:line="70" pos:column="45"/></operator></expr>)<pos:position pos:line="70" pos:column="46"/></condition>;<pos:position pos:line="70" pos:column="47"/></do>

  <switch pos:line="72" pos:column="3">switch<condition pos:line="72" pos:column="9">(<expr><name pos:line="72" pos:column="10">r<pos:position pos:line="72" pos:column="11"/></name></expr>)<pos:position pos:line="72" pos:column="12"/></condition> <block pos:line="72" pos:column="13">{
  <case pos:line="73" pos:column="3">case <expr><operator pos:line="73" pos:column="8">-<pos:position pos:line="73" pos:column="9"/></operator><literal type="number" pos:line="73" pos:column="9">1<pos:position pos:line="73" pos:column="10"/></literal></expr>:<pos:position pos:line="73" pos:column="11"/></case>
    <return pos:line="74" pos:column="5">return <expr><name pos:line="74" pos:column="12">FALSE<pos:position pos:line="74" pos:column="17"/></name></expr>;<pos:position pos:line="74" pos:column="18"/></return>

  <case pos:line="76" pos:column="3">case <expr><literal type="number" pos:line="76" pos:column="8">0<pos:position pos:line="76" pos:column="9"/></literal></expr>:<pos:position pos:line="76" pos:column="10"/></case> <comment type="block" pos:line="76" pos:column="11">/* timeout! */</comment>
    <return pos:line="77" pos:column="5">return <expr><name pos:line="77" pos:column="12">TRUE<pos:position pos:line="77" pos:column="16"/></name></expr>;<pos:position pos:line="77" pos:column="17"/></return>
  }<pos:position pos:line="78" pos:column="4"/></block></switch>


  <if pos:line="81" pos:column="3">if<condition pos:line="81" pos:column="5">(<expr><call><name pos:line="81" pos:column="6">FD_ISSET<pos:position pos:line="81" pos:column="14"/></name><argument_list pos:line="81" pos:column="14">(<argument><expr><call><name pos:line="81" pos:column="15">fileno<pos:position pos:line="81" pos:column="21"/></name><argument_list pos:line="81" pos:column="21">(<argument><expr><name pos:line="81" pos:column="22">stdin<pos:position pos:line="81" pos:column="27"/></name></expr></argument>)<pos:position pos:line="81" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="81" pos:column="30">&amp;<pos:position pos:line="81" pos:column="35"/></operator><name pos:line="81" pos:column="31">fds_read<pos:position pos:line="81" pos:column="39"/></name></expr></argument>)<pos:position pos:line="81" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="41"/></condition><then pos:line="81" pos:column="41"> <block pos:line="81" pos:column="42">{
    <decl_stmt><decl><type><name pos:line="82" pos:column="5">size_t<pos:position pos:line="82" pos:column="11"/></name></type> <name pos:line="82" pos:column="12">nread<pos:position pos:line="82" pos:column="17"/></name></decl>;<pos:position pos:line="82" pos:column="18"/></decl_stmt>
    <comment type="block" pos:line="83" pos:column="5">/* read from stdin, commands/data to be dealt with and possibly passed on
       to the socket

       protocol:

       4 letter command + LF [mandatory]

       4-digit hexadecimal data length + LF [if the command takes data]
       data                       [the data being as long as set above]

       Commands:

       DATA - plain pass-thru data
    */</comment>
    <expr_stmt><expr><name pos:line="97" pos:column="5">nread<pos:position pos:line="97" pos:column="10"/></name> <operator pos:line="97" pos:column="11">=<pos:position pos:line="97" pos:column="12"/></operator> <call><name pos:line="97" pos:column="13">read<pos:position pos:line="97" pos:column="17"/></name><argument_list pos:line="97" pos:column="17">(<argument><expr><call><name pos:line="97" pos:column="18">fileno<pos:position pos:line="97" pos:column="24"/></name><argument_list pos:line="97" pos:column="24">(<argument><expr><name pos:line="97" pos:column="25">stdin<pos:position pos:line="97" pos:column="30"/></name></expr></argument>)<pos:position pos:line="97" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="97" pos:column="33">buffer<pos:position pos:line="97" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="41">5<pos:position pos:line="97" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="44"/></expr_stmt>
    <if pos:line="98" pos:column="5">if<condition pos:line="98" pos:column="7">(<expr><literal type="number" pos:line="98" pos:column="8">5<pos:position pos:line="98" pos:column="9"/></literal> <operator pos:line="98" pos:column="10">==<pos:position pos:line="98" pos:column="12"/></operator> <name pos:line="98" pos:column="13">nread<pos:position pos:line="98" pos:column="18"/></name></expr>)<pos:position pos:line="98" pos:column="19"/></condition><then pos:line="98" pos:column="19"> <block pos:line="98" pos:column="20">{

      <expr_stmt><expr><call><name pos:line="100" pos:column="7">logmsg<pos:position pos:line="100" pos:column="13"/></name><argument_list pos:line="100" pos:column="13">(<argument><expr><literal type="string" pos:line="100" pos:column="14">"Received %c%c%c%c (on stdin)"<pos:position pos:line="100" pos:column="44"/></literal></expr></argument>,
             <argument><expr><name><name pos:line="101" pos:column="14">buffer<pos:position pos:line="101" pos:column="20"/></name><index pos:line="101" pos:column="20">[<expr><literal type="number" pos:line="101" pos:column="21">0<pos:position pos:line="101" pos:column="22"/></literal></expr>]<pos:position pos:line="101" pos:column="23"/></index></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="25">buffer<pos:position pos:line="101" pos:column="31"/></name><index pos:line="101" pos:column="31">[<expr><literal type="number" pos:line="101" pos:column="32">1<pos:position pos:line="101" pos:column="33"/></literal></expr>]<pos:position pos:line="101" pos:column="34"/></index></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="36">buffer<pos:position pos:line="101" pos:column="42"/></name><index pos:line="101" pos:column="42">[<expr><literal type="number" pos:line="101" pos:column="43">2<pos:position pos:line="101" pos:column="44"/></literal></expr>]<pos:position pos:line="101" pos:column="45"/></index></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="47">buffer<pos:position pos:line="101" pos:column="53"/></name><index pos:line="101" pos:column="53">[<expr><literal type="number" pos:line="101" pos:column="54">3<pos:position pos:line="101" pos:column="55"/></literal></expr>]<pos:position pos:line="101" pos:column="56"/></index></name></expr></argument> )<pos:position pos:line="101" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="59"/></expr_stmt>

      <if pos:line="103" pos:column="7">if<condition pos:line="103" pos:column="9">(<expr><operator pos:line="103" pos:column="10">!<pos:position pos:line="103" pos:column="11"/></operator><call><name pos:line="103" pos:column="11">memcmp<pos:position pos:line="103" pos:column="17"/></name><argument_list pos:line="103" pos:column="17">(<argument><expr><literal type="string" pos:line="103" pos:column="18">"PING"<pos:position pos:line="103" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="26">buffer<pos:position pos:line="103" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="34">4<pos:position pos:line="103" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="103" pos:column="37"/></condition><then pos:line="103" pos:column="37"> <block pos:line="103" pos:column="38">{
        <comment type="block" pos:line="104" pos:column="9">/* send reply on stdout, just proving we are alive */</comment>
        <expr_stmt><expr><call><name pos:line="105" pos:column="9">write<pos:position pos:line="105" pos:column="14"/></name><argument_list pos:line="105" pos:column="14">(<argument><expr><call><name pos:line="105" pos:column="15">fileno<pos:position pos:line="105" pos:column="21"/></name><argument_list pos:line="105" pos:column="21">(<argument><expr><name pos:line="105" pos:column="22">stdout<pos:position pos:line="105" pos:column="28"/></name></expr></argument>)<pos:position pos:line="105" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="31">"PONG\n"<pos:position pos:line="105" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="105" pos:column="41">5<pos:position pos:line="105" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="106" pos:column="8"/></block></then>

      <elseif pos:line="108" pos:column="7">else <if pos:line="108" pos:column="12">if<condition pos:line="108" pos:column="14">(<expr><operator pos:line="108" pos:column="15">!<pos:position pos:line="108" pos:column="16"/></operator><call><name pos:line="108" pos:column="16">memcmp<pos:position pos:line="108" pos:column="22"/></name><argument_list pos:line="108" pos:column="22">(<argument><expr><literal type="string" pos:line="108" pos:column="23">"PORT"<pos:position pos:line="108" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="31">buffer<pos:position pos:line="108" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="39">4<pos:position pos:line="108" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="108" pos:column="42"/></condition><then pos:line="108" pos:column="42"> <block pos:line="108" pos:column="43">{
        <comment type="block" pos:line="109" pos:column="9">/* question asking us what PORT number we are listening to.
           Replies with PORT with "IPv[num]/[port]" */</comment>
        <expr_stmt><expr><call><name pos:line="111" pos:column="9">sprintf<pos:position pos:line="111" pos:column="16"/></name><argument_list pos:line="111" pos:column="16">(<argument><expr><operator pos:line="111" pos:column="17">(<pos:position pos:line="111" pos:column="18"/></operator><name pos:line="111" pos:column="18">char<pos:position pos:line="111" pos:column="22"/></name> <operator pos:line="111" pos:column="23">*<pos:position pos:line="111" pos:column="24"/></operator><operator pos:line="111" pos:column="24">)<pos:position pos:line="111" pos:column="25"/></operator><name pos:line="111" pos:column="25">buffer<pos:position pos:line="111" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="33">"IPv%d/%d\n"<pos:position pos:line="111" pos:column="45"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="111" pos:column="47">use_ipv6<pos:position pos:line="111" pos:column="55"/></name></expr>?<pos:position pos:line="111" pos:column="56"/></condition><then><expr><literal type="number" pos:line="111" pos:column="56">6<pos:position pos:line="111" pos:column="57"/></literal></expr></then><else pos:line="111" pos:column="57">:<expr><literal type="number" pos:line="111" pos:column="58">4<pos:position pos:line="111" pos:column="59"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="111" pos:column="61">port<pos:position pos:line="111" pos:column="65"/></name></expr></argument>)<pos:position pos:line="111" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name pos:line="112" pos:column="9">r<pos:position pos:line="112" pos:column="10"/></name> <operator pos:line="112" pos:column="11">=<pos:position pos:line="112" pos:column="12"/></operator> <operator pos:line="112" pos:column="13">(<pos:position pos:line="112" pos:column="14"/></operator><name pos:line="112" pos:column="14">int<pos:position pos:line="112" pos:column="17"/></name><operator pos:line="112" pos:column="17">)<pos:position pos:line="112" pos:column="18"/></operator><call><name pos:line="112" pos:column="18">strlen<pos:position pos:line="112" pos:column="24"/></name><argument_list pos:line="112" pos:column="24">(<argument><expr><operator pos:line="112" pos:column="25">(<pos:position pos:line="112" pos:column="26"/></operator><name pos:line="112" pos:column="26">char<pos:position pos:line="112" pos:column="30"/></name> <operator pos:line="112" pos:column="31">*<pos:position pos:line="112" pos:column="32"/></operator><operator pos:line="112" pos:column="32">)<pos:position pos:line="112" pos:column="33"/></operator><name pos:line="112" pos:column="33">buffer<pos:position pos:line="112" pos:column="39"/></name></expr></argument>)<pos:position pos:line="112" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="113" pos:column="9">sprintf<pos:position pos:line="113" pos:column="16"/></name><argument_list pos:line="113" pos:column="16">(<argument><expr><name pos:line="113" pos:column="17">data<pos:position pos:line="113" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="23">"PORT\n%04x\n"<pos:position pos:line="113" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="39">r<pos:position pos:line="113" pos:column="40"/></name></expr></argument>)<pos:position pos:line="113" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="114" pos:column="9">write<pos:position pos:line="114" pos:column="14"/></name><argument_list pos:line="114" pos:column="14">(<argument><expr><call><name pos:line="114" pos:column="15">fileno<pos:position pos:line="114" pos:column="21"/></name><argument_list pos:line="114" pos:column="21">(<argument><expr><name pos:line="114" pos:column="22">stdout<pos:position pos:line="114" pos:column="28"/></name></expr></argument>)<pos:position pos:line="114" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="114" pos:column="31">data<pos:position pos:line="114" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="114" pos:column="37">10<pos:position pos:line="114" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="115" pos:column="9">write<pos:position pos:line="115" pos:column="14"/></name><argument_list pos:line="115" pos:column="14">(<argument><expr><call><name pos:line="115" pos:column="15">fileno<pos:position pos:line="115" pos:column="21"/></name><argument_list pos:line="115" pos:column="21">(<argument><expr><name pos:line="115" pos:column="22">stdout<pos:position pos:line="115" pos:column="28"/></name></expr></argument>)<pos:position pos:line="115" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="115" pos:column="31">buffer<pos:position pos:line="115" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="39">r<pos:position pos:line="115" pos:column="40"/></name></expr></argument>)<pos:position pos:line="115" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="116" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="117" pos:column="7">else <if pos:line="117" pos:column="12">if<condition pos:line="117" pos:column="14">(<expr><operator pos:line="117" pos:column="15">!<pos:position pos:line="117" pos:column="16"/></operator><call><name pos:line="117" pos:column="16">memcmp<pos:position pos:line="117" pos:column="22"/></name><argument_list pos:line="117" pos:column="22">(<argument><expr><literal type="string" pos:line="117" pos:column="23">"QUIT"<pos:position pos:line="117" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="31">buffer<pos:position pos:line="117" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="39">4<pos:position pos:line="117" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="42"/></condition><then pos:line="117" pos:column="42"> <block pos:line="117" pos:column="43">{
        <comment type="block" pos:line="118" pos:column="9">/* just die */</comment>
        <expr_stmt><expr><call><name pos:line="119" pos:column="9">logmsg<pos:position pos:line="119" pos:column="15"/></name><argument_list pos:line="119" pos:column="15">(<argument><expr><literal type="string" pos:line="119" pos:column="16">"quits"<pos:position pos:line="119" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="25"/></expr_stmt>
        <return pos:line="120" pos:column="9">return <expr><name pos:line="120" pos:column="16">FALSE<pos:position pos:line="120" pos:column="21"/></name></expr>;<pos:position pos:line="120" pos:column="22"/></return>
      }<pos:position pos:line="121" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="122" pos:column="7">else <if pos:line="122" pos:column="12">if<condition pos:line="122" pos:column="14">(<expr><operator pos:line="122" pos:column="15">!<pos:position pos:line="122" pos:column="16"/></operator><call><name pos:line="122" pos:column="16">memcmp<pos:position pos:line="122" pos:column="22"/></name><argument_list pos:line="122" pos:column="22">(<argument><expr><literal type="string" pos:line="122" pos:column="23">"DATA"<pos:position pos:line="122" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="31">buffer<pos:position pos:line="122" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="39">4<pos:position pos:line="122" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="42"/></condition><then pos:line="122" pos:column="42"> <block pos:line="122" pos:column="43">{
        <comment type="block" pos:line="123" pos:column="9">/* data IN =&gt; data OUT */</comment>
        <decl_stmt><decl><type><name pos:line="124" pos:column="9">long<pos:position pos:line="124" pos:column="13"/></name></type> <name pos:line="124" pos:column="14">len<pos:position pos:line="124" pos:column="17"/></name></decl>;<pos:position pos:line="124" pos:column="18"/></decl_stmt>

        <if pos:line="126" pos:column="9">if<condition pos:line="126" pos:column="11">(<expr><literal type="number" pos:line="126" pos:column="12">5<pos:position pos:line="126" pos:column="13"/></literal> <operator pos:line="126" pos:column="14">!=<pos:position pos:line="126" pos:column="16"/></operator> <call><name pos:line="126" pos:column="17">read<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><call><name pos:line="126" pos:column="22">fileno<pos:position pos:line="126" pos:column="28"/></name><argument_list pos:line="126" pos:column="28">(<argument><expr><name pos:line="126" pos:column="29">stdin<pos:position pos:line="126" pos:column="34"/></name></expr></argument>)<pos:position pos:line="126" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="126" pos:column="37">buffer<pos:position pos:line="126" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="126" pos:column="45">5<pos:position pos:line="126" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="48"/></condition><then pos:line="126" pos:column="48">
          <block type="pseudo"><return pos:line="127" pos:column="11">return <expr><name pos:line="127" pos:column="18">FALSE<pos:position pos:line="127" pos:column="23"/></name></expr>;<pos:position pos:line="127" pos:column="24"/></return></block></then></if>

        <expr_stmt><expr><name pos:line="129" pos:column="9">len<pos:position pos:line="129" pos:column="12"/></name> <operator pos:line="129" pos:column="13">=<pos:position pos:line="129" pos:column="14"/></operator> <call><name pos:line="129" pos:column="15">strtol<pos:position pos:line="129" pos:column="21"/></name><argument_list pos:line="129" pos:column="21">(<argument><expr><operator pos:line="129" pos:column="22">(<pos:position pos:line="129" pos:column="23"/></operator><name pos:line="129" pos:column="23">char<pos:position pos:line="129" pos:column="27"/></name> <operator pos:line="129" pos:column="28">*<pos:position pos:line="129" pos:column="29"/></operator><operator pos:line="129" pos:column="29">)<pos:position pos:line="129" pos:column="30"/></operator><name pos:line="129" pos:column="30">buffer<pos:position pos:line="129" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="38">NULL<pos:position pos:line="129" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="129" pos:column="44">16<pos:position pos:line="129" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="48"/></expr_stmt>
        <if pos:line="130" pos:column="9">if<condition pos:line="130" pos:column="11">(<expr><name pos:line="130" pos:column="12">len<pos:position pos:line="130" pos:column="15"/></name> <operator pos:line="130" pos:column="16">!=<pos:position pos:line="130" pos:column="18"/></operator> <call><name pos:line="130" pos:column="19">read<pos:position pos:line="130" pos:column="23"/></name><argument_list pos:line="130" pos:column="23">(<argument><expr><call><name pos:line="130" pos:column="24">fileno<pos:position pos:line="130" pos:column="30"/></name><argument_list pos:line="130" pos:column="30">(<argument><expr><name pos:line="130" pos:column="31">stdin<pos:position pos:line="130" pos:column="36"/></name></expr></argument>)<pos:position pos:line="130" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="130" pos:column="39">buffer<pos:position pos:line="130" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="47">len<pos:position pos:line="130" pos:column="50"/></name></expr></argument>)<pos:position pos:line="130" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="52"/></condition><then pos:line="130" pos:column="52">
          <block type="pseudo"><return pos:line="131" pos:column="11">return <expr><name pos:line="131" pos:column="18">FALSE<pos:position pos:line="131" pos:column="23"/></name></expr>;<pos:position pos:line="131" pos:column="24"/></return></block></then></if>

        <expr_stmt><expr><call><name pos:line="133" pos:column="9">logmsg<pos:position pos:line="133" pos:column="15"/></name><argument_list pos:line="133" pos:column="15">(<argument><expr><literal type="string" pos:line="133" pos:column="16">"&gt; %d bytes data, server =&gt; client"<pos:position pos:line="133" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="53">len<pos:position pos:line="133" pos:column="56"/></name></expr></argument>)<pos:position pos:line="133" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="134" pos:column="9">lograw<pos:position pos:line="134" pos:column="15"/></name><argument_list pos:line="134" pos:column="15">(<argument><expr><name pos:line="134" pos:column="16">buffer<pos:position pos:line="134" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="134" pos:column="24">(<pos:position pos:line="134" pos:column="25"/></operator><name pos:line="134" pos:column="25">int<pos:position pos:line="134" pos:column="28"/></name><operator pos:line="134" pos:column="28">)<pos:position pos:line="134" pos:column="29"/></operator><name pos:line="134" pos:column="29">len<pos:position pos:line="134" pos:column="32"/></name></expr></argument>)<pos:position pos:line="134" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="34"/></expr_stmt>

        <if pos:line="136" pos:column="9">if<condition pos:line="136" pos:column="11">(<expr><operator pos:line="136" pos:column="12">*<pos:position pos:line="136" pos:column="13"/></operator><name pos:line="136" pos:column="13">mode<pos:position pos:line="136" pos:column="17"/></name> <operator pos:line="136" pos:column="18">==<pos:position pos:line="136" pos:column="20"/></operator> <name pos:line="136" pos:column="21">PASSIVE_LISTEN<pos:position pos:line="136" pos:column="35"/></name></expr>)<pos:position pos:line="136" pos:column="36"/></condition><then pos:line="136" pos:column="36"> <block pos:line="136" pos:column="37">{
          <expr_stmt><expr><call><name pos:line="137" pos:column="11">logmsg<pos:position pos:line="137" pos:column="17"/></name><argument_list pos:line="137" pos:column="17">(<argument><expr><literal type="string" pos:line="137" pos:column="18">"*** We are disconnected!"<pos:position pos:line="137" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="46"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="138" pos:column="11">write<pos:position pos:line="138" pos:column="16"/></name><argument_list pos:line="138" pos:column="16">(<argument><expr><call><name pos:line="138" pos:column="17">fileno<pos:position pos:line="138" pos:column="23"/></name><argument_list pos:line="138" pos:column="23">(<argument><expr><name pos:line="138" pos:column="24">stdout<pos:position pos:line="138" pos:column="30"/></name></expr></argument>)<pos:position pos:line="138" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="138" pos:column="33">"DISC\n"<pos:position pos:line="138" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="138" pos:column="43">5<pos:position pos:line="138" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="139" pos:column="10"/></block></then>
        <else pos:line="140" pos:column="9">else
          <comment type="block" pos:line="141" pos:column="11">/* send away on the socket */</comment>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="142" pos:column="11">swrite<pos:position pos:line="142" pos:column="17"/></name><argument_list pos:line="142" pos:column="17">(<argument><expr><name pos:line="142" pos:column="18">sockfd<pos:position pos:line="142" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="26">buffer<pos:position pos:line="142" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="34">len<pos:position pos:line="142" pos:column="37"/></name></expr></argument>)<pos:position pos:line="142" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="39"/></expr_stmt></block></else></if>
      }<pos:position pos:line="143" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="144" pos:column="7">else <if pos:line="144" pos:column="12">if<condition pos:line="144" pos:column="14">(<expr><operator pos:line="144" pos:column="15">!<pos:position pos:line="144" pos:column="16"/></operator><call><name pos:line="144" pos:column="16">memcmp<pos:position pos:line="144" pos:column="22"/></name><argument_list pos:line="144" pos:column="22">(<argument><expr><literal type="string" pos:line="144" pos:column="23">"DISC"<pos:position pos:line="144" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="144" pos:column="31">buffer<pos:position pos:line="144" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="144" pos:column="39">4<pos:position pos:line="144" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="144" pos:column="42"/></condition><then pos:line="144" pos:column="42"> <block pos:line="144" pos:column="43">{
        <comment type="block" pos:line="145" pos:column="9">/* disconnect! */</comment>
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">write<pos:position pos:line="146" pos:column="14"/></name><argument_list pos:line="146" pos:column="14">(<argument><expr><call><name pos:line="146" pos:column="15">fileno<pos:position pos:line="146" pos:column="21"/></name><argument_list pos:line="146" pos:column="21">(<argument><expr><name pos:line="146" pos:column="22">stdout<pos:position pos:line="146" pos:column="28"/></name></expr></argument>)<pos:position pos:line="146" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="31">"DISC\n"<pos:position pos:line="146" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="146" pos:column="41">5<pos:position pos:line="146" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="44"/></expr_stmt>
        <if pos:line="147" pos:column="9">if<condition pos:line="147" pos:column="11">(<expr><name pos:line="147" pos:column="12">sockfd<pos:position pos:line="147" pos:column="18"/></name> <operator pos:line="147" pos:column="19">!=<pos:position pos:line="147" pos:column="21"/></operator> <name pos:line="147" pos:column="22">CURL_SOCKET_BAD<pos:position pos:line="147" pos:column="37"/></name></expr>)<pos:position pos:line="147" pos:column="38"/></condition><then pos:line="147" pos:column="38"> <block pos:line="147" pos:column="39">{
          <expr_stmt><expr><call><name pos:line="148" pos:column="11">logmsg<pos:position pos:line="148" pos:column="17"/></name><argument_list pos:line="148" pos:column="17">(<argument><expr><literal type="string" pos:line="148" pos:column="18">"====&gt; Client forcibly disconnected"<pos:position pos:line="148" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="56"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="149" pos:column="11">sclose<pos:position pos:line="149" pos:column="17"/></name><argument_list pos:line="149" pos:column="17">(<argument><expr><name pos:line="149" pos:column="18">sockfd<pos:position pos:line="149" pos:column="24"/></name></expr></argument>)<pos:position pos:line="149" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="150" pos:column="11">*<pos:position pos:line="150" pos:column="12"/></operator><name pos:line="150" pos:column="12">sockfdp<pos:position pos:line="150" pos:column="19"/></name> <operator pos:line="150" pos:column="20">=<pos:position pos:line="150" pos:column="21"/></operator> <name pos:line="150" pos:column="22">CURL_SOCKET_BAD<pos:position pos:line="150" pos:column="37"/></name></expr>;<pos:position pos:line="150" pos:column="38"/></expr_stmt>
          <if pos:line="151" pos:column="11">if<condition pos:line="151" pos:column="13">(<expr><operator pos:line="151" pos:column="14">*<pos:position pos:line="151" pos:column="15"/></operator><name pos:line="151" pos:column="15">mode<pos:position pos:line="151" pos:column="19"/></name> <operator pos:line="151" pos:column="20">==<pos:position pos:line="151" pos:column="22"/></operator> <name pos:line="151" pos:column="23">PASSIVE_CONNECT<pos:position pos:line="151" pos:column="38"/></name></expr>)<pos:position pos:line="151" pos:column="39"/></condition><then pos:line="151" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="152" pos:column="13">*<pos:position pos:line="152" pos:column="14"/></operator><name pos:line="152" pos:column="14">mode<pos:position pos:line="152" pos:column="18"/></name> <operator pos:line="152" pos:column="19">=<pos:position pos:line="152" pos:column="20"/></operator> <name pos:line="152" pos:column="21">PASSIVE_LISTEN<pos:position pos:line="152" pos:column="35"/></name></expr>;<pos:position pos:line="152" pos:column="36"/></expr_stmt></block></then>
          <else pos:line="153" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><operator pos:line="154" pos:column="13">*<pos:position pos:line="154" pos:column="14"/></operator><name pos:line="154" pos:column="14">mode<pos:position pos:line="154" pos:column="18"/></name> <operator pos:line="154" pos:column="19">=<pos:position pos:line="154" pos:column="20"/></operator> <name pos:line="154" pos:column="21">ACTIVE_DISCONNECT<pos:position pos:line="154" pos:column="38"/></name></expr>;<pos:position pos:line="154" pos:column="39"/></expr_stmt></block></else></if>
        }<pos:position pos:line="155" pos:column="10"/></block></then>
        <else pos:line="156" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="157" pos:column="11">logmsg<pos:position pos:line="157" pos:column="17"/></name><argument_list pos:line="157" pos:column="17">(<argument><expr><literal type="string" pos:line="157" pos:column="18">"attempt to close already dead connection"<pos:position pos:line="157" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="157" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="62"/></expr_stmt></block></else></if>
        <return pos:line="158" pos:column="9">return <expr><name pos:line="158" pos:column="16">TRUE<pos:position pos:line="158" pos:column="20"/></name></expr>;<pos:position pos:line="158" pos:column="21"/></return>
      }<pos:position pos:line="159" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="160" pos:column="6"/></block></then>
    <else pos:line="161" pos:column="5">else <block pos:line="161" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="162" pos:column="7">logmsg<pos:position pos:line="162" pos:column="13"/></name><argument_list pos:line="162" pos:column="13">(<argument><expr><literal type="string" pos:line="162" pos:column="14">"read %d from stdin, exiting"<pos:position pos:line="162" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="162" pos:column="45">(<pos:position pos:line="162" pos:column="46"/></operator><name pos:line="162" pos:column="46">int<pos:position pos:line="162" pos:column="49"/></name><operator pos:line="162" pos:column="49">)<pos:position pos:line="162" pos:column="50"/></operator><name pos:line="162" pos:column="50">nread<pos:position pos:line="162" pos:column="55"/></name></expr></argument>)<pos:position pos:line="162" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="57"/></expr_stmt>
      <return pos:line="163" pos:column="7">return <expr><name pos:line="163" pos:column="14">FALSE<pos:position pos:line="163" pos:column="19"/></name></expr>;<pos:position pos:line="163" pos:column="20"/></return>
    }<pos:position pos:line="164" pos:column="6"/></block></else></if>
  }<pos:position pos:line="165" pos:column="4"/></block></then></if>

  <if pos:line="167" pos:column="3">if<condition pos:line="167" pos:column="5">(<expr><operator pos:line="167" pos:column="6">(<pos:position pos:line="167" pos:column="7"/></operator><name pos:line="167" pos:column="7">sockfd<pos:position pos:line="167" pos:column="13"/></name> <operator pos:line="167" pos:column="14">!=<pos:position pos:line="167" pos:column="16"/></operator> <name pos:line="167" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="167" pos:column="32"/></name><operator pos:line="167" pos:column="32">)<pos:position pos:line="167" pos:column="33"/></operator> <operator pos:line="167" pos:column="34">&amp;&amp;<pos:position pos:line="167" pos:column="44"/></operator> <operator pos:line="167" pos:column="37">(<pos:position pos:line="167" pos:column="38"/></operator><call><name pos:line="167" pos:column="38">FD_ISSET<pos:position pos:line="167" pos:column="46"/></name><argument_list pos:line="167" pos:column="46">(<argument><expr><name pos:line="167" pos:column="47">sockfd<pos:position pos:line="167" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="167" pos:column="55">&amp;<pos:position pos:line="167" pos:column="60"/></operator><name pos:line="167" pos:column="56">fds_read<pos:position pos:line="167" pos:column="64"/></name></expr></argument>)<pos:position pos:line="167" pos:column="65"/></argument_list></call><operator pos:line="167" pos:column="65">)<pos:position pos:line="167" pos:column="66"/></operator></expr> )<pos:position pos:line="167" pos:column="68"/></condition><then pos:line="167" pos:column="68"> <block pos:line="167" pos:column="69">{

    <if pos:line="169" pos:column="5">if<condition pos:line="169" pos:column="7">(<expr><operator pos:line="169" pos:column="8">*<pos:position pos:line="169" pos:column="9"/></operator><name pos:line="169" pos:column="9">mode<pos:position pos:line="169" pos:column="13"/></name> <operator pos:line="169" pos:column="14">==<pos:position pos:line="169" pos:column="16"/></operator> <name pos:line="169" pos:column="17">PASSIVE_LISTEN<pos:position pos:line="169" pos:column="31"/></name></expr>)<pos:position pos:line="169" pos:column="32"/></condition><then pos:line="169" pos:column="32"> <block pos:line="169" pos:column="33">{
      <comment type="block" pos:line="170" pos:column="7">/* there's no stream set up yet, this is an indication that there's a
         client connecting. */</comment>
      <expr_stmt><expr><name pos:line="172" pos:column="7">sockfd<pos:position pos:line="172" pos:column="13"/></name> <operator pos:line="172" pos:column="14">=<pos:position pos:line="172" pos:column="15"/></operator> <call><name pos:line="172" pos:column="16">accept<pos:position pos:line="172" pos:column="22"/></name><argument_list pos:line="172" pos:column="22">(<argument><expr><name pos:line="172" pos:column="23">sockfd<pos:position pos:line="172" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="31">NULL<pos:position pos:line="172" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="37">NULL<pos:position pos:line="172" pos:column="41"/></name></expr></argument>)<pos:position pos:line="172" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="43"/></expr_stmt>
      <if pos:line="173" pos:column="7">if<condition pos:line="173" pos:column="9">(<expr><operator pos:line="173" pos:column="10">-<pos:position pos:line="173" pos:column="11"/></operator><literal type="number" pos:line="173" pos:column="11">1<pos:position pos:line="173" pos:column="12"/></literal> <operator pos:line="173" pos:column="13">==<pos:position pos:line="173" pos:column="15"/></operator> <name pos:line="173" pos:column="16">sockfd<pos:position pos:line="173" pos:column="22"/></name></expr>)<pos:position pos:line="173" pos:column="23"/></condition><then pos:line="173" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="174" pos:column="9">logmsg<pos:position pos:line="174" pos:column="15"/></name><argument_list pos:line="174" pos:column="15">(<argument><expr><literal type="string" pos:line="174" pos:column="16">"accept() failed\n"<pos:position pos:line="174" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="37"/></expr_stmt></block></then>
      <else pos:line="175" pos:column="7">else <block pos:line="175" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="176" pos:column="9">logmsg<pos:position pos:line="176" pos:column="15"/></name><argument_list pos:line="176" pos:column="15">(<argument><expr><literal type="string" pos:line="176" pos:column="16">"====&gt; Client connect"<pos:position pos:line="176" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="176" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="177" pos:column="9">write<pos:position pos:line="177" pos:column="14"/></name><argument_list pos:line="177" pos:column="14">(<argument><expr><call><name pos:line="177" pos:column="15">fileno<pos:position pos:line="177" pos:column="21"/></name><argument_list pos:line="177" pos:column="21">(<argument><expr><name pos:line="177" pos:column="22">stdout<pos:position pos:line="177" pos:column="28"/></name></expr></argument>)<pos:position pos:line="177" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="177" pos:column="31">"CNCT\n"<pos:position pos:line="177" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="41">5<pos:position pos:line="177" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="178" pos:column="9">*<pos:position pos:line="178" pos:column="10"/></operator><name pos:line="178" pos:column="10">sockfdp<pos:position pos:line="178" pos:column="17"/></name> <operator pos:line="178" pos:column="18">=<pos:position pos:line="178" pos:column="19"/></operator> <name pos:line="178" pos:column="20">sockfd<pos:position pos:line="178" pos:column="26"/></name></expr>;<pos:position pos:line="178" pos:column="27"/></expr_stmt> <comment type="block" pos:line="178" pos:column="28">/* store the new socket */</comment>
        <expr_stmt><expr><operator pos:line="179" pos:column="9">*<pos:position pos:line="179" pos:column="10"/></operator><name pos:line="179" pos:column="10">mode<pos:position pos:line="179" pos:column="14"/></name> <operator pos:line="179" pos:column="15">=<pos:position pos:line="179" pos:column="16"/></operator> <name pos:line="179" pos:column="17">PASSIVE_CONNECT<pos:position pos:line="179" pos:column="32"/></name></expr>;<pos:position pos:line="179" pos:column="33"/></expr_stmt> <comment type="block" pos:line="179" pos:column="34">/* we have connected */</comment>
      }<pos:position pos:line="180" pos:column="8"/></block></else></if>
      <return pos:line="181" pos:column="7">return <expr><name pos:line="181" pos:column="14">TRUE<pos:position pos:line="181" pos:column="18"/></name></expr>;<pos:position pos:line="181" pos:column="19"/></return>
    }<pos:position pos:line="182" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="184" pos:column="5">/* read from socket, pass on data to stdout */</comment>
    <expr_stmt><expr><name pos:line="185" pos:column="5">r<pos:position pos:line="185" pos:column="6"/></name> <operator pos:line="185" pos:column="7">=<pos:position pos:line="185" pos:column="8"/></operator> <call><name pos:line="185" pos:column="9">sread<pos:position pos:line="185" pos:column="14"/></name><argument_list pos:line="185" pos:column="14">(<argument><expr><name pos:line="185" pos:column="15">sockfd<pos:position pos:line="185" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="23">buffer<pos:position pos:line="185" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="185" pos:column="31">sizeof<argument_list pos:line="185" pos:column="37">(<argument><expr><name pos:line="185" pos:column="38">buffer<pos:position pos:line="185" pos:column="44"/></name></expr></argument>)<pos:position pos:line="185" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="185" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="47"/></expr_stmt>

    <if pos:line="187" pos:column="5">if<condition pos:line="187" pos:column="7">(<expr><name pos:line="187" pos:column="8">r<pos:position pos:line="187" pos:column="9"/></name> <operator pos:line="187" pos:column="10">&lt;=<pos:position pos:line="187" pos:column="15"/></operator> <literal type="number" pos:line="187" pos:column="13">0<pos:position pos:line="187" pos:column="14"/></literal></expr>)<pos:position pos:line="187" pos:column="15"/></condition><then pos:line="187" pos:column="15"> <block pos:line="187" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="188" pos:column="7">logmsg<pos:position pos:line="188" pos:column="13"/></name><argument_list pos:line="188" pos:column="13">(<argument><expr><literal type="string" pos:line="188" pos:column="14">"====&gt; Client disconnect"<pos:position pos:line="188" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="188" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="189" pos:column="7">write<pos:position pos:line="189" pos:column="12"/></name><argument_list pos:line="189" pos:column="12">(<argument><expr><call><name pos:line="189" pos:column="13">fileno<pos:position pos:line="189" pos:column="19"/></name><argument_list pos:line="189" pos:column="19">(<argument><expr><name pos:line="189" pos:column="20">stdout<pos:position pos:line="189" pos:column="26"/></name></expr></argument>)<pos:position pos:line="189" pos:column="27"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="29">"DISC\n"<pos:position pos:line="189" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="189" pos:column="39">5<pos:position pos:line="189" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="190" pos:column="7">sclose<pos:position pos:line="190" pos:column="13"/></name><argument_list pos:line="190" pos:column="13">(<argument><expr><name pos:line="190" pos:column="14">sockfd<pos:position pos:line="190" pos:column="20"/></name></expr></argument>)<pos:position pos:line="190" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="191" pos:column="7">*<pos:position pos:line="191" pos:column="8"/></operator><name pos:line="191" pos:column="8">sockfdp<pos:position pos:line="191" pos:column="15"/></name> <operator pos:line="191" pos:column="16">=<pos:position pos:line="191" pos:column="17"/></operator> <name pos:line="191" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="191" pos:column="33"/></name></expr>;<pos:position pos:line="191" pos:column="34"/></expr_stmt>
      <if pos:line="192" pos:column="7">if<condition pos:line="192" pos:column="9">(<expr><operator pos:line="192" pos:column="10">*<pos:position pos:line="192" pos:column="11"/></operator><name pos:line="192" pos:column="11">mode<pos:position pos:line="192" pos:column="15"/></name> <operator pos:line="192" pos:column="16">==<pos:position pos:line="192" pos:column="18"/></operator> <name pos:line="192" pos:column="19">PASSIVE_CONNECT<pos:position pos:line="192" pos:column="34"/></name></expr>)<pos:position pos:line="192" pos:column="35"/></condition><then pos:line="192" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="193" pos:column="9">*<pos:position pos:line="193" pos:column="10"/></operator><name pos:line="193" pos:column="10">mode<pos:position pos:line="193" pos:column="14"/></name> <operator pos:line="193" pos:column="15">=<pos:position pos:line="193" pos:column="16"/></operator> <name pos:line="193" pos:column="17">PASSIVE_LISTEN<pos:position pos:line="193" pos:column="31"/></name></expr>;<pos:position pos:line="193" pos:column="32"/></expr_stmt></block></then>
      <else pos:line="194" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><operator pos:line="195" pos:column="9">*<pos:position pos:line="195" pos:column="10"/></operator><name pos:line="195" pos:column="10">mode<pos:position pos:line="195" pos:column="14"/></name> <operator pos:line="195" pos:column="15">=<pos:position pos:line="195" pos:column="16"/></operator> <name pos:line="195" pos:column="17">ACTIVE_DISCONNECT<pos:position pos:line="195" pos:column="34"/></name></expr>;<pos:position pos:line="195" pos:column="35"/></expr_stmt></block></else></if>
      <return pos:line="196" pos:column="7">return <expr><name pos:line="196" pos:column="14">TRUE<pos:position pos:line="196" pos:column="18"/></name></expr>;<pos:position pos:line="196" pos:column="19"/></return>
    }<pos:position pos:line="197" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="199" pos:column="5">sprintf<pos:position pos:line="199" pos:column="12"/></name><argument_list pos:line="199" pos:column="12">(<argument><expr><name pos:line="199" pos:column="13">data<pos:position pos:line="199" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="199" pos:column="19">"DATA\n%04x\n"<pos:position pos:line="199" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="199" pos:column="35">r<pos:position pos:line="199" pos:column="36"/></name></expr></argument>)<pos:position pos:line="199" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="200" pos:column="5">write<pos:position pos:line="200" pos:column="10"/></name><argument_list pos:line="200" pos:column="10">(<argument><expr><call><name pos:line="200" pos:column="11">fileno<pos:position pos:line="200" pos:column="17"/></name><argument_list pos:line="200" pos:column="17">(<argument><expr><name pos:line="200" pos:column="18">stdout<pos:position pos:line="200" pos:column="24"/></name></expr></argument>)<pos:position pos:line="200" pos:column="25"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="200" pos:column="27">data<pos:position pos:line="200" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="200" pos:column="33">10<pos:position pos:line="200" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="200" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="201" pos:column="5">write<pos:position pos:line="201" pos:column="10"/></name><argument_list pos:line="201" pos:column="10">(<argument><expr><call><name pos:line="201" pos:column="11">fileno<pos:position pos:line="201" pos:column="17"/></name><argument_list pos:line="201" pos:column="17">(<argument><expr><name pos:line="201" pos:column="18">stdout<pos:position pos:line="201" pos:column="24"/></name></expr></argument>)<pos:position pos:line="201" pos:column="25"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="201" pos:column="27">buffer<pos:position pos:line="201" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="35">r<pos:position pos:line="201" pos:column="36"/></name></expr></argument>)<pos:position pos:line="201" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="203" pos:column="5">logmsg<pos:position pos:line="203" pos:column="11"/></name><argument_list pos:line="203" pos:column="11">(<argument><expr><literal type="string" pos:line="203" pos:column="12">"&lt; %d bytes data, client =&gt; server"<pos:position pos:line="203" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="203" pos:column="49">r<pos:position pos:line="203" pos:column="50"/></name></expr></argument>)<pos:position pos:line="203" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="204" pos:column="5">lograw<pos:position pos:line="204" pos:column="11"/></name><argument_list pos:line="204" pos:column="11">(<argument><expr><name pos:line="204" pos:column="12">buffer<pos:position pos:line="204" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="20">r<pos:position pos:line="204" pos:column="21"/></name></expr></argument>)<pos:position pos:line="204" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="205" pos:column="4"/></block></then></if>

  <return pos:line="207" pos:column="3">return <expr><name pos:line="207" pos:column="10">TRUE<pos:position pos:line="207" pos:column="14"/></name></expr>;<pos:position pos:line="207" pos:column="15"/></return>
}<pos:position pos:line="208" pos:column="2"/></block></function></unit>
