<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1061_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_output_digest<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">connectdata<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">conn<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="2" pos:column="29">bool<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">proxy<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>,
                            <parameter><decl><type><specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <name pos:line="3" pos:column="35">unsigned<pos:position pos:line="3" pos:column="43"/></name> <name pos:line="3" pos:column="44">char<pos:position pos:line="3" pos:column="48"/></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type><name pos:line="3" pos:column="50">request<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>,
                            <parameter><decl><type><specifier pos:line="4" pos:column="29">const<pos:position pos:line="4" pos:column="34"/></specifier> <name pos:line="4" pos:column="35">unsigned<pos:position pos:line="4" pos:column="43"/></name> <name pos:line="4" pos:column="44">char<pos:position pos:line="4" pos:column="48"/></name> <modifier pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></modifier></type><name pos:line="4" pos:column="50">uripath<pos:position pos:line="4" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="58"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <comment type="block" pos:line="6" pos:column="3">/* We have a Digest setup for this, use it!  Now, to get all the details for
     this sorted out, I must urge you dear friend to read up on the RFC2617
     section 3.2.2, */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">unsigned<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">char<pos:position pos:line="9" pos:column="16"/></name></type> <name><name pos:line="9" pos:column="17">md5buf<pos:position pos:line="9" pos:column="23"/></name><index pos:line="9" pos:column="23">[<expr><literal type="number" pos:line="9" pos:column="24">16<pos:position pos:line="9" pos:column="26"/></literal></expr>]<pos:position pos:line="9" pos:column="27"/></index></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt> <comment type="block" pos:line="9" pos:column="29">/* 16 bytes/128 bits */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">unsigned<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">char<pos:position pos:line="10" pos:column="16"/></name></type> <name><name pos:line="10" pos:column="17">request_digest<pos:position pos:line="10" pos:column="31"/></name><index pos:line="10" pos:column="31">[<expr><literal type="number" pos:line="10" pos:column="32">33<pos:position pos:line="10" pos:column="34"/></literal></expr>]<pos:position pos:line="10" pos:column="35"/></index></name></decl>;<pos:position pos:line="10" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier></type><name pos:line="11" pos:column="18">md5this<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">unsigned<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">char<pos:position pos:line="12" pos:column="16"/></name> <modifier pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></modifier></type><name pos:line="12" pos:column="18">ha1<pos:position pos:line="12" pos:column="21"/></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">unsigned<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">char<pos:position pos:line="13" pos:column="16"/></name></type> <name><name pos:line="13" pos:column="17">ha2<pos:position pos:line="13" pos:column="20"/></name><index pos:line="13" pos:column="20">[<expr><literal type="number" pos:line="13" pos:column="21">33<pos:position pos:line="13" pos:column="23"/></literal></expr>]<pos:position pos:line="13" pos:column="24"/></index></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt><comment type="block" pos:line="13" pos:column="25">/* 32 digits and 1 zero byte */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">char<pos:position pos:line="14" pos:column="7"/></name></type> <name><name pos:line="14" pos:column="8">cnoncebuf<pos:position pos:line="14" pos:column="17"/></name><index pos:line="14" pos:column="17">[<expr><literal type="number" pos:line="14" pos:column="18">7<pos:position pos:line="14" pos:column="19"/></literal></expr>]<pos:position pos:line="14" pos:column="20"/></index></name></decl>;<pos:position pos:line="14" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">cnonce<pos:position pos:line="15" pos:column="15"/></name></decl>;<pos:position pos:line="15" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">char<pos:position pos:line="16" pos:column="7"/></name> <modifier pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></modifier></type><name pos:line="16" pos:column="9">tmp<pos:position pos:line="16" pos:column="12"/></name> <init pos:line="16" pos:column="13">= <expr><name pos:line="16" pos:column="15">NULL<pos:position pos:line="16" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">timeval<pos:position pos:line="17" pos:column="17"/></name></name></type> <name pos:line="17" pos:column="18">now<pos:position pos:line="17" pos:column="21"/></name></decl>;<pos:position pos:line="17" pos:column="22"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="19" pos:column="3">char<pos:position pos:line="19" pos:column="7"/></name> <modifier pos:line="19" pos:column="8">*<pos:position pos:line="19" pos:column="9"/></modifier><modifier pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></modifier></type><name pos:line="19" pos:column="10">allocuserpwd<pos:position pos:line="19" pos:column="22"/></name></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name> <modifier pos:line="20" pos:column="8">*<pos:position pos:line="20" pos:column="9"/></modifier></type><name pos:line="20" pos:column="9">userp<pos:position pos:line="20" pos:column="14"/></name></decl>;<pos:position pos:line="20" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">char<pos:position pos:line="21" pos:column="7"/></name> <modifier pos:line="21" pos:column="8">*<pos:position pos:line="21" pos:column="9"/></modifier></type><name pos:line="21" pos:column="9">passwdp<pos:position pos:line="21" pos:column="16"/></name></decl>;<pos:position pos:line="21" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="22" pos:column="3">struct<pos:position pos:line="22" pos:column="9"/></name> <name pos:line="22" pos:column="10">auth<pos:position pos:line="22" pos:column="14"/></name></name> <modifier pos:line="22" pos:column="15">*<pos:position pos:line="22" pos:column="16"/></modifier></type><name pos:line="22" pos:column="16">authp<pos:position pos:line="22" pos:column="21"/></name></decl>;<pos:position pos:line="22" pos:column="22"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="24" pos:column="3">struct<pos:position pos:line="24" pos:column="9"/></name> <name pos:line="24" pos:column="10">SessionHandle<pos:position pos:line="24" pos:column="23"/></name></name> <modifier pos:line="24" pos:column="24">*<pos:position pos:line="24" pos:column="25"/></modifier></type><name pos:line="24" pos:column="25">data<pos:position pos:line="24" pos:column="29"/></name> <init pos:line="24" pos:column="30">= <expr><name><name pos:line="24" pos:column="32">conn<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">-&gt;<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="38">data<pos:position pos:line="24" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="24" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="25" pos:column="3">struct<pos:position pos:line="25" pos:column="9"/></name> <name pos:line="25" pos:column="10">digestdata<pos:position pos:line="25" pos:column="20"/></name></name> <modifier pos:line="25" pos:column="21">*<pos:position pos:line="25" pos:column="22"/></modifier></type><name pos:line="25" pos:column="22">d<pos:position pos:line="25" pos:column="23"/></name></decl>;<pos:position pos:line="25" pos:column="24"/></decl_stmt>
<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive> <name pos:line="26" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="26" pos:column="29"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">CURLcode<pos:position pos:line="27" pos:column="11"/></name></type> <name pos:line="27" pos:column="12">rc<pos:position pos:line="27" pos:column="14"/></name></decl>;<pos:position pos:line="27" pos:column="15"/></decl_stmt>
<comment type="block" pos:line="28" pos:column="1">/* The CURL_OUTPUT_DIGEST_CONV macro below is for non-ASCII machines.
   It converts digest text to ASCII so the MD5 will be correct for 
   what ultimately goes over the network.
*/</comment>
<cpp:define pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">define<pos:position pos:line="32" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="32" pos:column="9">CURL_OUTPUT_DIGEST_CONV<pos:position pos:line="32" pos:column="32"/></name><parameter_list pos:line="32" pos:column="32">(<parameter><type><name pos:line="32" pos:column="33">a<pos:position pos:line="32" pos:column="34"/></name></type></parameter>, <parameter><type><name pos:line="32" pos:column="36">b<pos:position pos:line="32" pos:column="37"/></name></type></parameter>)<pos:position pos:line="32" pos:column="38"/></parameter_list></cpp:macro> \
  <cpp:value pos:line="33" pos:column="3">rc = Curl_convert_to_network(a, (char *)b, strlen((const char*)b)); \
  if(rc != CURLE_OK) { \
    free(b); \
    return rc; \
  }<pos:position pos:line="37" pos:column="4"/></cpp:value></cpp:define>
<cpp:else pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">else<pos:position pos:line="38" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">define<pos:position pos:line="39" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="39" pos:column="9">CURL_OUTPUT_DIGEST_CONV<pos:position pos:line="39" pos:column="32"/></name><parameter_list pos:line="39" pos:column="32">(<parameter><type><name pos:line="39" pos:column="33">a<pos:position pos:line="39" pos:column="34"/></name></type></parameter>, <parameter><type><name pos:line="39" pos:column="36">b<pos:position pos:line="39" pos:column="37"/></name></type></parameter>)<pos:position pos:line="39" pos:column="38"/></parameter_list></cpp:macro></cpp:define>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="40" pos:column="8">/* CURL_DOES_CONVERSIONS */</comment>

  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">(<expr><name pos:line="42" pos:column="6">proxy<pos:position pos:line="42" pos:column="11"/></name></expr>)<pos:position pos:line="42" pos:column="12"/></condition><then pos:line="42" pos:column="12"> <block pos:line="42" pos:column="13">{
    <expr_stmt><expr><name pos:line="43" pos:column="5">d<pos:position pos:line="43" pos:column="6"/></name> <operator pos:line="43" pos:column="7">=<pos:position pos:line="43" pos:column="8"/></operator> <operator pos:line="43" pos:column="9">&amp;<pos:position pos:line="43" pos:column="14"/></operator><name><name pos:line="43" pos:column="10">data<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">-&gt;<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="16">state<pos:position pos:line="43" pos:column="21"/></name><operator pos:line="43" pos:column="21">.<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">proxydigest<pos:position pos:line="43" pos:column="33"/></name></name></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="44" pos:column="5">allocuserpwd<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <operator pos:line="44" pos:column="20">&amp;<pos:position pos:line="44" pos:column="25"/></operator><name><name pos:line="44" pos:column="21">conn<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">-&gt;<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="27">allocptr<pos:position pos:line="44" pos:column="35"/></name><operator pos:line="44" pos:column="35">.<pos:position pos:line="44" pos:column="36"/></operator><name pos:line="44" pos:column="36">proxyuserpwd<pos:position pos:line="44" pos:column="48"/></name></name></expr>;<pos:position pos:line="44" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="45" pos:column="5">userp<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <name><name pos:line="45" pos:column="13">conn<pos:position pos:line="45" pos:column="17"/></name><operator pos:line="45" pos:column="17">-&gt;<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="19">proxyuser<pos:position pos:line="45" pos:column="28"/></name></name></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="46" pos:column="5">passwdp<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <name><name pos:line="46" pos:column="15">conn<pos:position pos:line="46" pos:column="19"/></name><operator pos:line="46" pos:column="19">-&gt;<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="21">proxypasswd<pos:position pos:line="46" pos:column="32"/></name></name></expr>;<pos:position pos:line="46" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="47" pos:column="5">authp<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">=<pos:position pos:line="47" pos:column="12"/></operator> <operator pos:line="47" pos:column="13">&amp;<pos:position pos:line="47" pos:column="18"/></operator><name><name pos:line="47" pos:column="14">data<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">-&gt;<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="20">state<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">.<pos:position pos:line="47" pos:column="26"/></operator><name pos:line="47" pos:column="26">authproxy<pos:position pos:line="47" pos:column="35"/></name></name></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="48" pos:column="4"/></block></then>
  <else pos:line="49" pos:column="3">else <block pos:line="49" pos:column="8">{
    <expr_stmt><expr><name pos:line="50" pos:column="5">d<pos:position pos:line="50" pos:column="6"/></name> <operator pos:line="50" pos:column="7">=<pos:position pos:line="50" pos:column="8"/></operator> <operator pos:line="50" pos:column="9">&amp;<pos:position pos:line="50" pos:column="14"/></operator><name><name pos:line="50" pos:column="10">data<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">-&gt;<pos:position pos:line="50" pos:column="19"/></operator><name pos:line="50" pos:column="16">state<pos:position pos:line="50" pos:column="21"/></name><operator pos:line="50" pos:column="21">.<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">digest<pos:position pos:line="50" pos:column="28"/></name></name></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="51" pos:column="5">allocuserpwd<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator> <operator pos:line="51" pos:column="20">&amp;<pos:position pos:line="51" pos:column="25"/></operator><name><name pos:line="51" pos:column="21">conn<pos:position pos:line="51" pos:column="25"/></name><operator pos:line="51" pos:column="25">-&gt;<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="27">allocptr<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">.<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="36">userpwd<pos:position pos:line="51" pos:column="43"/></name></name></expr>;<pos:position pos:line="51" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="52" pos:column="5">userp<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <name><name pos:line="52" pos:column="13">conn<pos:position pos:line="52" pos:column="17"/></name><operator pos:line="52" pos:column="17">-&gt;<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="19">user<pos:position pos:line="52" pos:column="23"/></name></name></expr>;<pos:position pos:line="52" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="53" pos:column="5">passwdp<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <name><name pos:line="53" pos:column="15">conn<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">passwd<pos:position pos:line="53" pos:column="27"/></name></name></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="54" pos:column="5">authp<pos:position pos:line="54" pos:column="10"/></name> <operator pos:line="54" pos:column="11">=<pos:position pos:line="54" pos:column="12"/></operator> <operator pos:line="54" pos:column="13">&amp;<pos:position pos:line="54" pos:column="18"/></operator><name><name pos:line="54" pos:column="14">data<pos:position pos:line="54" pos:column="18"/></name><operator pos:line="54" pos:column="18">-&gt;<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="20">state<pos:position pos:line="54" pos:column="25"/></name><operator pos:line="54" pos:column="25">.<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="26">authhost<pos:position pos:line="54" pos:column="34"/></name></name></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="55" pos:column="4"/></block></else></if>

  <if pos:line="57" pos:column="3">if<condition pos:line="57" pos:column="5">(<expr><operator pos:line="57" pos:column="6">*<pos:position pos:line="57" pos:column="7"/></operator><name pos:line="57" pos:column="7">allocuserpwd<pos:position pos:line="57" pos:column="19"/></name></expr>)<pos:position pos:line="57" pos:column="20"/></condition><then pos:line="57" pos:column="20"> <block pos:line="57" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">Curl_safefree<pos:position pos:line="58" pos:column="18"/></name><argument_list pos:line="58" pos:column="18">(<argument><expr><operator pos:line="58" pos:column="19">*<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">allocuserpwd<pos:position pos:line="58" pos:column="32"/></name></expr></argument>)<pos:position pos:line="58" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="59" pos:column="5">*<pos:position pos:line="59" pos:column="6"/></operator><name pos:line="59" pos:column="6">allocuserpwd<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">NULL<pos:position pos:line="59" pos:column="25"/></name></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="62" pos:column="3">/* not set means empty */</comment>
  <if pos:line="63" pos:column="3">if<condition pos:line="63" pos:column="5">(<expr><operator pos:line="63" pos:column="6">!<pos:position pos:line="63" pos:column="7"/></operator><name pos:line="63" pos:column="7">userp<pos:position pos:line="63" pos:column="12"/></name></expr>)<pos:position pos:line="63" pos:column="13"/></condition><then pos:line="63" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="5">userp<pos:position pos:line="64" pos:column="10"/></name><operator pos:line="64" pos:column="10">=<pos:position pos:line="64" pos:column="11"/></operator><operator pos:line="64" pos:column="11">(<pos:position pos:line="64" pos:column="12"/></operator><name pos:line="64" pos:column="12">char<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">*<pos:position pos:line="64" pos:column="18"/></operator><operator pos:line="64" pos:column="18">)<pos:position pos:line="64" pos:column="19"/></operator><literal type="string" pos:line="64" pos:column="19">""<pos:position pos:line="64" pos:column="21"/></literal></expr>;<pos:position pos:line="64" pos:column="22"/></expr_stmt></block></then></if>

  <if pos:line="66" pos:column="3">if<condition pos:line="66" pos:column="5">(<expr><operator pos:line="66" pos:column="6">!<pos:position pos:line="66" pos:column="7"/></operator><name pos:line="66" pos:column="7">passwdp<pos:position pos:line="66" pos:column="14"/></name></expr>)<pos:position pos:line="66" pos:column="15"/></condition><then pos:line="66" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="5">passwdp<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">=<pos:position pos:line="67" pos:column="13"/></operator><operator pos:line="67" pos:column="13">(<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">char<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">*<pos:position pos:line="67" pos:column="20"/></operator><operator pos:line="67" pos:column="20">)<pos:position pos:line="67" pos:column="21"/></operator><literal type="string" pos:line="67" pos:column="21">""<pos:position pos:line="67" pos:column="23"/></literal></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt></block></then></if>

  <if pos:line="69" pos:column="3">if<condition pos:line="69" pos:column="5">(<expr><operator pos:line="69" pos:column="6">!<pos:position pos:line="69" pos:column="7"/></operator><name><name pos:line="69" pos:column="7">d<pos:position pos:line="69" pos:column="8"/></name><operator pos:line="69" pos:column="8">-&gt;<pos:position pos:line="69" pos:column="13"/></operator><name pos:line="69" pos:column="10">nonce<pos:position pos:line="69" pos:column="15"/></name></name></expr>)<pos:position pos:line="69" pos:column="16"/></condition><then pos:line="69" pos:column="16"> <block pos:line="69" pos:column="17">{
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">authp<pos:position pos:line="70" pos:column="10"/></name><operator pos:line="70" pos:column="10">-&gt;<pos:position pos:line="70" pos:column="15"/></operator><name pos:line="70" pos:column="12">done<pos:position pos:line="70" pos:column="16"/></name></name> <operator pos:line="70" pos:column="17">=<pos:position pos:line="70" pos:column="18"/></operator> <name pos:line="70" pos:column="19">FALSE<pos:position pos:line="70" pos:column="24"/></name></expr>;<pos:position pos:line="70" pos:column="25"/></expr_stmt>
    <return pos:line="71" pos:column="5">return <expr><name pos:line="71" pos:column="12">CURLE_OK<pos:position pos:line="71" pos:column="20"/></name></expr>;<pos:position pos:line="71" pos:column="21"/></return>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="73" pos:column="3">authp<pos:position pos:line="73" pos:column="8"/></name><operator pos:line="73" pos:column="8">-&gt;<pos:position pos:line="73" pos:column="13"/></operator><name pos:line="73" pos:column="10">done<pos:position pos:line="73" pos:column="14"/></name></name> <operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator> <name pos:line="73" pos:column="17">TRUE<pos:position pos:line="73" pos:column="21"/></name></expr>;<pos:position pos:line="73" pos:column="22"/></expr_stmt>

  <if pos:line="75" pos:column="3">if<condition pos:line="75" pos:column="5">(<expr><operator pos:line="75" pos:column="6">!<pos:position pos:line="75" pos:column="7"/></operator><name><name pos:line="75" pos:column="7">d<pos:position pos:line="75" pos:column="8"/></name><operator pos:line="75" pos:column="8">-&gt;<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="10">nc<pos:position pos:line="75" pos:column="12"/></name></name></expr>)<pos:position pos:line="75" pos:column="13"/></condition><then pos:line="75" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="76" pos:column="5">d<pos:position pos:line="76" pos:column="6"/></name><operator pos:line="76" pos:column="6">-&gt;<pos:position pos:line="76" pos:column="11"/></operator><name pos:line="76" pos:column="8">nc<pos:position pos:line="76" pos:column="10"/></name></name> <operator pos:line="76" pos:column="11">=<pos:position pos:line="76" pos:column="12"/></operator> <literal type="number" pos:line="76" pos:column="13">1<pos:position pos:line="76" pos:column="14"/></literal></expr>;<pos:position pos:line="76" pos:column="15"/></expr_stmt></block></then></if>

  <if pos:line="78" pos:column="3">if<condition pos:line="78" pos:column="5">(<expr><operator pos:line="78" pos:column="6">!<pos:position pos:line="78" pos:column="7"/></operator><name><name pos:line="78" pos:column="7">d<pos:position pos:line="78" pos:column="8"/></name><operator pos:line="78" pos:column="8">-&gt;<pos:position pos:line="78" pos:column="13"/></operator><name pos:line="78" pos:column="10">cnonce<pos:position pos:line="78" pos:column="16"/></name></name></expr>)<pos:position pos:line="78" pos:column="17"/></condition><then pos:line="78" pos:column="17"> <block pos:line="78" pos:column="18">{
    <comment type="block" pos:line="79" pos:column="5">/* Generate a cnonce */</comment>
    <expr_stmt><expr><name pos:line="80" pos:column="5">now<pos:position pos:line="80" pos:column="8"/></name> <operator pos:line="80" pos:column="9">=<pos:position pos:line="80" pos:column="10"/></operator> <call><name pos:line="80" pos:column="11">Curl_tvnow<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">()<pos:position pos:line="80" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">snprintf<pos:position pos:line="81" pos:column="13"/></name><argument_list pos:line="81" pos:column="13">(<argument><expr><name pos:line="81" pos:column="14">cnoncebuf<pos:position pos:line="81" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="81" pos:column="25">sizeof<argument_list pos:line="81" pos:column="31">(<argument><expr><name pos:line="81" pos:column="32">cnoncebuf<pos:position pos:line="81" pos:column="41"/></name></expr></argument>)<pos:position pos:line="81" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="44">"%06ld"<pos:position pos:line="81" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="53">now<pos:position pos:line="81" pos:column="56"/></name><operator pos:line="81" pos:column="56">.<pos:position pos:line="81" pos:column="57"/></operator><name pos:line="81" pos:column="57">tv_sec<pos:position pos:line="81" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="65"/></expr_stmt>
    <if pos:line="82" pos:column="5">if<condition pos:line="82" pos:column="7">(<expr><call><name pos:line="82" pos:column="8">Curl_base64_encode<pos:position pos:line="82" pos:column="26"/></name><argument_list pos:line="82" pos:column="26">(<argument><expr><name pos:line="82" pos:column="27">data<pos:position pos:line="82" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="33">cnoncebuf<pos:position pos:line="82" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="44">strlen<pos:position pos:line="82" pos:column="50"/></name><argument_list pos:line="82" pos:column="50">(<argument><expr><name pos:line="82" pos:column="51">cnoncebuf<pos:position pos:line="82" pos:column="60"/></name></expr></argument>)<pos:position pos:line="82" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="82" pos:column="63">&amp;<pos:position pos:line="82" pos:column="68"/></operator><name pos:line="82" pos:column="64">cnonce<pos:position pos:line="82" pos:column="70"/></name></expr></argument>)<pos:position pos:line="82" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="72"/></condition><then pos:line="82" pos:column="72">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="83" pos:column="7">d<pos:position pos:line="83" pos:column="8"/></name><operator pos:line="83" pos:column="8">-&gt;<pos:position pos:line="83" pos:column="13"/></operator><name pos:line="83" pos:column="10">cnonce<pos:position pos:line="83" pos:column="16"/></name></name> <operator pos:line="83" pos:column="17">=<pos:position pos:line="83" pos:column="18"/></operator> <name pos:line="83" pos:column="19">cnonce<pos:position pos:line="83" pos:column="25"/></name></expr>;<pos:position pos:line="83" pos:column="26"/></expr_stmt></block></then>
    <else pos:line="84" pos:column="5">else
      <block type="pseudo"><return pos:line="85" pos:column="7">return <expr><name pos:line="85" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="85" pos:column="33"/></name></expr>;<pos:position pos:line="85" pos:column="34"/></return></block></else></if>
  }<pos:position pos:line="86" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="88" pos:column="3">/*
    if the algorithm is "MD5" or unspecified (which then defaults to MD5):

    A1 = unq(username-value) ":" unq(realm-value) ":" passwd

    if the algorithm is "MD5-sess" then:

    A1 = H( unq(username-value) ":" unq(realm-value) ":" passwd )
         ":" unq(nonce-value) ":" unq(cnonce-value)
  */</comment>

  <expr_stmt><expr><name pos:line="99" pos:column="3">md5this<pos:position pos:line="99" pos:column="10"/></name> <operator pos:line="99" pos:column="11">=<pos:position pos:line="99" pos:column="12"/></operator> <operator pos:line="99" pos:column="13">(<pos:position pos:line="99" pos:column="14"/></operator><name pos:line="99" pos:column="14">unsigned<pos:position pos:line="99" pos:column="22"/></name> <name pos:line="99" pos:column="23">char<pos:position pos:line="99" pos:column="27"/></name> <operator pos:line="99" pos:column="28">*<pos:position pos:line="99" pos:column="29"/></operator><operator pos:line="99" pos:column="29">)<pos:position pos:line="99" pos:column="30"/></operator>
    <call><name pos:line="100" pos:column="5">aprintf<pos:position pos:line="100" pos:column="12"/></name><argument_list pos:line="100" pos:column="12">(<argument><expr><literal type="string" pos:line="100" pos:column="13">"%s:%s:%s"<pos:position pos:line="100" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="25">userp<pos:position pos:line="100" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="32">d<pos:position pos:line="100" pos:column="33"/></name><operator pos:line="100" pos:column="33">-&gt;<pos:position pos:line="100" pos:column="38"/></operator><name pos:line="100" pos:column="35">realm<pos:position pos:line="100" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="42">passwdp<pos:position pos:line="100" pos:column="49"/></name></expr></argument>)<pos:position pos:line="100" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="51"/></expr_stmt>
  <if pos:line="101" pos:column="3">if<condition pos:line="101" pos:column="5">(<expr><operator pos:line="101" pos:column="6">!<pos:position pos:line="101" pos:column="7"/></operator><name pos:line="101" pos:column="7">md5this<pos:position pos:line="101" pos:column="14"/></name></expr>)<pos:position pos:line="101" pos:column="15"/></condition><then pos:line="101" pos:column="15">
    <block type="pseudo"><return pos:line="102" pos:column="5">return <expr><name pos:line="102" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="102" pos:column="31"/></name></expr>;<pos:position pos:line="102" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="104" pos:column="3">CURL_OUTPUT_DIGEST_CONV<pos:position pos:line="104" pos:column="26"/></name><argument_list pos:line="104" pos:column="26">(<argument><expr><name pos:line="104" pos:column="27">data<pos:position pos:line="104" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="33">md5this<pos:position pos:line="104" pos:column="40"/></name></expr></argument>)<pos:position pos:line="104" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="42"/></expr_stmt> <comment type="block" pos:line="104" pos:column="43">/* convert on non-ASCII machines */</comment>
  <expr_stmt><expr><call><name pos:line="105" pos:column="3">Curl_md5it<pos:position pos:line="105" pos:column="13"/></name><argument_list pos:line="105" pos:column="13">(<argument><expr><name pos:line="105" pos:column="14">md5buf<pos:position pos:line="105" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="22">md5this<pos:position pos:line="105" pos:column="29"/></name></expr></argument>)<pos:position pos:line="105" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="106" pos:column="3">free<pos:position pos:line="106" pos:column="7"/></name><argument_list pos:line="106" pos:column="7">(<argument><expr><name pos:line="106" pos:column="8">md5this<pos:position pos:line="106" pos:column="15"/></name></expr></argument>)<pos:position pos:line="106" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="17"/></expr_stmt> <comment type="block" pos:line="106" pos:column="18">/* free this again */</comment>

  <expr_stmt><expr><name pos:line="108" pos:column="3">ha1<pos:position pos:line="108" pos:column="6"/></name> <operator pos:line="108" pos:column="7">=<pos:position pos:line="108" pos:column="8"/></operator> <operator pos:line="108" pos:column="9">(<pos:position pos:line="108" pos:column="10"/></operator><name pos:line="108" pos:column="10">unsigned<pos:position pos:line="108" pos:column="18"/></name> <name pos:line="108" pos:column="19">char<pos:position pos:line="108" pos:column="23"/></name> <operator pos:line="108" pos:column="24">*<pos:position pos:line="108" pos:column="25"/></operator><operator pos:line="108" pos:column="25">)<pos:position pos:line="108" pos:column="26"/></operator><call><name pos:line="108" pos:column="26">malloc<pos:position pos:line="108" pos:column="32"/></name><argument_list pos:line="108" pos:column="32">(<argument><expr><literal type="number" pos:line="108" pos:column="33">33<pos:position pos:line="108" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="37"/></expr_stmt> <comment type="block" pos:line="108" pos:column="38">/* 32 digits and 1 zero byte */</comment>
  <if pos:line="109" pos:column="3">if<condition pos:line="109" pos:column="5">(<expr><operator pos:line="109" pos:column="6">!<pos:position pos:line="109" pos:column="7"/></operator><name pos:line="109" pos:column="7">ha1<pos:position pos:line="109" pos:column="10"/></name></expr>)<pos:position pos:line="109" pos:column="11"/></condition><then pos:line="109" pos:column="11">
    <block type="pseudo"><return pos:line="110" pos:column="5">return <expr><name pos:line="110" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="110" pos:column="31"/></name></expr>;<pos:position pos:line="110" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="112" pos:column="3">md5_to_ascii<pos:position pos:line="112" pos:column="15"/></name><argument_list pos:line="112" pos:column="15">(<argument><expr><name pos:line="112" pos:column="16">md5buf<pos:position pos:line="112" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="24">ha1<pos:position pos:line="112" pos:column="27"/></name></expr></argument>)<pos:position pos:line="112" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="29"/></expr_stmt>

  <if pos:line="114" pos:column="3">if<condition pos:line="114" pos:column="5">(<expr><name><name pos:line="114" pos:column="6">d<pos:position pos:line="114" pos:column="7"/></name><operator pos:line="114" pos:column="7">-&gt;<pos:position pos:line="114" pos:column="12"/></operator><name pos:line="114" pos:column="9">algo<pos:position pos:line="114" pos:column="13"/></name></name> <operator pos:line="114" pos:column="14">==<pos:position pos:line="114" pos:column="16"/></operator> <name pos:line="114" pos:column="17">CURLDIGESTALGO_MD5SESS<pos:position pos:line="114" pos:column="39"/></name></expr>)<pos:position pos:line="114" pos:column="40"/></condition><then pos:line="114" pos:column="40"> <block pos:line="114" pos:column="41">{
    <comment type="block" pos:line="115" pos:column="5">/* nonce and cnonce are OUTSIDE the hash */</comment>
    <expr_stmt><expr><name pos:line="116" pos:column="5">tmp<pos:position pos:line="116" pos:column="8"/></name> <operator pos:line="116" pos:column="9">=<pos:position pos:line="116" pos:column="10"/></operator> <call><name pos:line="116" pos:column="11">aprintf<pos:position pos:line="116" pos:column="18"/></name><argument_list pos:line="116" pos:column="18">(<argument><expr><literal type="string" pos:line="116" pos:column="19">"%s:%s:%s"<pos:position pos:line="116" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="31">ha1<pos:position pos:line="116" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="36">d<pos:position pos:line="116" pos:column="37"/></name><operator pos:line="116" pos:column="37">-&gt;<pos:position pos:line="116" pos:column="42"/></operator><name pos:line="116" pos:column="39">nonce<pos:position pos:line="116" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="46">d<pos:position pos:line="116" pos:column="47"/></name><operator pos:line="116" pos:column="47">-&gt;<pos:position pos:line="116" pos:column="52"/></operator><name pos:line="116" pos:column="49">cnonce<pos:position pos:line="116" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="116" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="57"/></expr_stmt>
    <if pos:line="117" pos:column="5">if<condition pos:line="117" pos:column="7">(<expr><operator pos:line="117" pos:column="8">!<pos:position pos:line="117" pos:column="9"/></operator><name pos:line="117" pos:column="9">tmp<pos:position pos:line="117" pos:column="12"/></name></expr>)<pos:position pos:line="117" pos:column="13"/></condition><then pos:line="117" pos:column="13">
      <block type="pseudo"><return pos:line="118" pos:column="7">return <expr><name pos:line="118" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="118" pos:column="33"/></name></expr>;<pos:position pos:line="118" pos:column="34"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">CURL_OUTPUT_DIGEST_CONV<pos:position pos:line="119" pos:column="28"/></name><argument_list pos:line="119" pos:column="28">(<argument><expr><name pos:line="119" pos:column="29">data<pos:position pos:line="119" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="35">tmp<pos:position pos:line="119" pos:column="38"/></name></expr></argument>)<pos:position pos:line="119" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="40"/></expr_stmt> <comment type="block" pos:line="119" pos:column="41">/* convert on non-ASCII machines */</comment>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">Curl_md5it<pos:position pos:line="120" pos:column="15"/></name><argument_list pos:line="120" pos:column="15">(<argument><expr><name pos:line="120" pos:column="16">md5buf<pos:position pos:line="120" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="24">(<pos:position pos:line="120" pos:column="25"/></operator><name pos:line="120" pos:column="25">unsigned<pos:position pos:line="120" pos:column="33"/></name> <name pos:line="120" pos:column="34">char<pos:position pos:line="120" pos:column="38"/></name> <operator pos:line="120" pos:column="39">*<pos:position pos:line="120" pos:column="40"/></operator><operator pos:line="120" pos:column="40">)<pos:position pos:line="120" pos:column="41"/></operator><name pos:line="120" pos:column="41">tmp<pos:position pos:line="120" pos:column="44"/></name></expr></argument>)<pos:position pos:line="120" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="121" pos:column="5">free<pos:position pos:line="121" pos:column="9"/></name><argument_list pos:line="121" pos:column="9">(<argument><expr><name pos:line="121" pos:column="10">tmp<pos:position pos:line="121" pos:column="13"/></name></expr></argument>)<pos:position pos:line="121" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="15"/></expr_stmt> <comment type="block" pos:line="121" pos:column="16">/* free this again */</comment>
    <expr_stmt><expr><call><name pos:line="122" pos:column="5">md5_to_ascii<pos:position pos:line="122" pos:column="17"/></name><argument_list pos:line="122" pos:column="17">(<argument><expr><name pos:line="122" pos:column="18">md5buf<pos:position pos:line="122" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="26">ha1<pos:position pos:line="122" pos:column="29"/></name></expr></argument>)<pos:position pos:line="122" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="123" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="125" pos:column="3">/*
    If the "qop" directive's value is "auth" or is unspecified, then A2 is:

      A2       = Method ":" digest-uri-value

          If the "qop" value is "auth-int", then A2 is:

      A2       = Method ":" digest-uri-value ":" H(entity-body)

    (The "Method" value is the HTTP request method as specified in section
    5.1.1 of RFC 2616)
  */</comment>

  <expr_stmt><expr><name pos:line="138" pos:column="3">md5this<pos:position pos:line="138" pos:column="10"/></name> <operator pos:line="138" pos:column="11">=<pos:position pos:line="138" pos:column="12"/></operator> <operator pos:line="138" pos:column="13">(<pos:position pos:line="138" pos:column="14"/></operator><name pos:line="138" pos:column="14">unsigned<pos:position pos:line="138" pos:column="22"/></name> <name pos:line="138" pos:column="23">char<pos:position pos:line="138" pos:column="27"/></name> <operator pos:line="138" pos:column="28">*<pos:position pos:line="138" pos:column="29"/></operator><operator pos:line="138" pos:column="29">)<pos:position pos:line="138" pos:column="30"/></operator><call><name pos:line="138" pos:column="30">aprintf<pos:position pos:line="138" pos:column="37"/></name><argument_list pos:line="138" pos:column="37">(<argument><expr><literal type="string" pos:line="138" pos:column="38">"%s:%s"<pos:position pos:line="138" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="138" pos:column="47">request<pos:position pos:line="138" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="56">uripath<pos:position pos:line="138" pos:column="63"/></name></expr></argument>)<pos:position pos:line="138" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="65"/></expr_stmt>
  <if pos:line="139" pos:column="3">if<condition pos:line="139" pos:column="5">(<expr><operator pos:line="139" pos:column="6">!<pos:position pos:line="139" pos:column="7"/></operator><name pos:line="139" pos:column="7">md5this<pos:position pos:line="139" pos:column="14"/></name></expr>)<pos:position pos:line="139" pos:column="15"/></condition><then pos:line="139" pos:column="15"> <block pos:line="139" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="140" pos:column="5">free<pos:position pos:line="140" pos:column="9"/></name><argument_list pos:line="140" pos:column="9">(<argument><expr><name pos:line="140" pos:column="10">ha1<pos:position pos:line="140" pos:column="13"/></name></expr></argument>)<pos:position pos:line="140" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="15"/></expr_stmt>
    <return pos:line="141" pos:column="5">return <expr><name pos:line="141" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="141" pos:column="31"/></name></expr>;<pos:position pos:line="141" pos:column="32"/></return>
  }<pos:position pos:line="142" pos:column="4"/></block></then></if>

  <if pos:line="144" pos:column="3">if<condition pos:line="144" pos:column="5">(<expr><name><name pos:line="144" pos:column="6">d<pos:position pos:line="144" pos:column="7"/></name><operator pos:line="144" pos:column="7">-&gt;<pos:position pos:line="144" pos:column="12"/></operator><name pos:line="144" pos:column="9">qop<pos:position pos:line="144" pos:column="12"/></name></name> <operator pos:line="144" pos:column="13">&amp;&amp;<pos:position pos:line="144" pos:column="23"/></operator> <call><name pos:line="144" pos:column="16">strequal<pos:position pos:line="144" pos:column="24"/></name><argument_list pos:line="144" pos:column="24">(<argument><expr><name><name pos:line="144" pos:column="25">d<pos:position pos:line="144" pos:column="26"/></name><operator pos:line="144" pos:column="26">-&gt;<pos:position pos:line="144" pos:column="31"/></operator><name pos:line="144" pos:column="28">qop<pos:position pos:line="144" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="144" pos:column="33">"auth-int"<pos:position pos:line="144" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="144" pos:column="45"/></condition><then pos:line="144" pos:column="45"> <block pos:line="144" pos:column="46">{
    <comment type="block" pos:line="145" pos:column="5">/* We don't support auth-int at the moment. I can't see a easy way to get
       entity-body here */</comment>
    <comment type="block" pos:line="147" pos:column="5">/* TODO: Append H(entity-body)*/</comment>
  }<pos:position pos:line="148" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="149" pos:column="3">CURL_OUTPUT_DIGEST_CONV<pos:position pos:line="149" pos:column="26"/></name><argument_list pos:line="149" pos:column="26">(<argument><expr><name pos:line="149" pos:column="27">data<pos:position pos:line="149" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="33">md5this<pos:position pos:line="149" pos:column="40"/></name></expr></argument>)<pos:position pos:line="149" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="42"/></expr_stmt> <comment type="block" pos:line="149" pos:column="43">/* convert on non-ASCII machines */</comment>
  <expr_stmt><expr><call><name pos:line="150" pos:column="3">Curl_md5it<pos:position pos:line="150" pos:column="13"/></name><argument_list pos:line="150" pos:column="13">(<argument><expr><name pos:line="150" pos:column="14">md5buf<pos:position pos:line="150" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="22">md5this<pos:position pos:line="150" pos:column="29"/></name></expr></argument>)<pos:position pos:line="150" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="151" pos:column="3">free<pos:position pos:line="151" pos:column="7"/></name><argument_list pos:line="151" pos:column="7">(<argument><expr><name pos:line="151" pos:column="8">md5this<pos:position pos:line="151" pos:column="15"/></name></expr></argument>)<pos:position pos:line="151" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="17"/></expr_stmt> <comment type="block" pos:line="151" pos:column="18">/* free this again */</comment>
  <expr_stmt><expr><call><name pos:line="152" pos:column="3">md5_to_ascii<pos:position pos:line="152" pos:column="15"/></name><argument_list pos:line="152" pos:column="15">(<argument><expr><name pos:line="152" pos:column="16">md5buf<pos:position pos:line="152" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="24">ha2<pos:position pos:line="152" pos:column="27"/></name></expr></argument>)<pos:position pos:line="152" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="29"/></expr_stmt>

  <if pos:line="154" pos:column="3">if<condition pos:line="154" pos:column="5">(<expr><name><name pos:line="154" pos:column="6">d<pos:position pos:line="154" pos:column="7"/></name><operator pos:line="154" pos:column="7">-&gt;<pos:position pos:line="154" pos:column="12"/></operator><name pos:line="154" pos:column="9">qop<pos:position pos:line="154" pos:column="12"/></name></name></expr>)<pos:position pos:line="154" pos:column="13"/></condition><then pos:line="154" pos:column="13"> <block pos:line="154" pos:column="14">{
    <expr_stmt><expr><name pos:line="155" pos:column="5">md5this<pos:position pos:line="155" pos:column="12"/></name> <operator pos:line="155" pos:column="13">=<pos:position pos:line="155" pos:column="14"/></operator> <operator pos:line="155" pos:column="15">(<pos:position pos:line="155" pos:column="16"/></operator><name pos:line="155" pos:column="16">unsigned<pos:position pos:line="155" pos:column="24"/></name> <name pos:line="155" pos:column="25">char<pos:position pos:line="155" pos:column="29"/></name> <operator pos:line="155" pos:column="30">*<pos:position pos:line="155" pos:column="31"/></operator><operator pos:line="155" pos:column="31">)<pos:position pos:line="155" pos:column="32"/></operator><call><name pos:line="155" pos:column="32">aprintf<pos:position pos:line="155" pos:column="39"/></name><argument_list pos:line="155" pos:column="39">(<argument><expr><literal type="string" pos:line="155" pos:column="40">"%s:%s:%08x:%s:%s:%s"<pos:position pos:line="155" pos:column="61"/></literal></expr></argument>,
                                       <argument><expr><name pos:line="156" pos:column="40">ha1<pos:position pos:line="156" pos:column="43"/></name></expr></argument>,
                                       <argument><expr><name><name pos:line="157" pos:column="40">d<pos:position pos:line="157" pos:column="41"/></name><operator pos:line="157" pos:column="41">-&gt;<pos:position pos:line="157" pos:column="46"/></operator><name pos:line="157" pos:column="43">nonce<pos:position pos:line="157" pos:column="48"/></name></name></expr></argument>,
                                       <argument><expr><name><name pos:line="158" pos:column="40">d<pos:position pos:line="158" pos:column="41"/></name><operator pos:line="158" pos:column="41">-&gt;<pos:position pos:line="158" pos:column="46"/></operator><name pos:line="158" pos:column="43">nc<pos:position pos:line="158" pos:column="45"/></name></name></expr></argument>,
                                       <argument><expr><name><name pos:line="159" pos:column="40">d<pos:position pos:line="159" pos:column="41"/></name><operator pos:line="159" pos:column="41">-&gt;<pos:position pos:line="159" pos:column="46"/></operator><name pos:line="159" pos:column="43">cnonce<pos:position pos:line="159" pos:column="49"/></name></name></expr></argument>,
                                       <argument><expr><name><name pos:line="160" pos:column="40">d<pos:position pos:line="160" pos:column="41"/></name><operator pos:line="160" pos:column="41">-&gt;<pos:position pos:line="160" pos:column="46"/></operator><name pos:line="160" pos:column="43">qop<pos:position pos:line="160" pos:column="46"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="161" pos:column="40">ha2<pos:position pos:line="161" pos:column="43"/></name></expr></argument>)<pos:position pos:line="161" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="162" pos:column="4"/></block></then>
  <else pos:line="163" pos:column="3">else <block pos:line="163" pos:column="8">{
    <expr_stmt><expr><name pos:line="164" pos:column="5">md5this<pos:position pos:line="164" pos:column="12"/></name> <operator pos:line="164" pos:column="13">=<pos:position pos:line="164" pos:column="14"/></operator> <operator pos:line="164" pos:column="15">(<pos:position pos:line="164" pos:column="16"/></operator><name pos:line="164" pos:column="16">unsigned<pos:position pos:line="164" pos:column="24"/></name> <name pos:line="164" pos:column="25">char<pos:position pos:line="164" pos:column="29"/></name> <operator pos:line="164" pos:column="30">*<pos:position pos:line="164" pos:column="31"/></operator><operator pos:line="164" pos:column="31">)<pos:position pos:line="164" pos:column="32"/></operator><call><name pos:line="164" pos:column="32">aprintf<pos:position pos:line="164" pos:column="39"/></name><argument_list pos:line="164" pos:column="39">(<argument><expr><literal type="string" pos:line="164" pos:column="40">"%s:%s:%s"<pos:position pos:line="164" pos:column="50"/></literal></expr></argument>,
                                       <argument><expr><name pos:line="165" pos:column="40">ha1<pos:position pos:line="165" pos:column="43"/></name></expr></argument>,
                                       <argument><expr><name><name pos:line="166" pos:column="40">d<pos:position pos:line="166" pos:column="41"/></name><operator pos:line="166" pos:column="41">-&gt;<pos:position pos:line="166" pos:column="46"/></operator><name pos:line="166" pos:column="43">nonce<pos:position pos:line="166" pos:column="48"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="167" pos:column="40">ha2<pos:position pos:line="167" pos:column="43"/></name></expr></argument>)<pos:position pos:line="167" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="168" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="169" pos:column="3">free<pos:position pos:line="169" pos:column="7"/></name><argument_list pos:line="169" pos:column="7">(<argument><expr><name pos:line="169" pos:column="8">ha1<pos:position pos:line="169" pos:column="11"/></name></expr></argument>)<pos:position pos:line="169" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="13"/></expr_stmt>
  <if pos:line="170" pos:column="3">if<condition pos:line="170" pos:column="5">(<expr><operator pos:line="170" pos:column="6">!<pos:position pos:line="170" pos:column="7"/></operator><name pos:line="170" pos:column="7">md5this<pos:position pos:line="170" pos:column="14"/></name></expr>)<pos:position pos:line="170" pos:column="15"/></condition><then pos:line="170" pos:column="15">
    <block type="pseudo"><return pos:line="171" pos:column="5">return <expr><name pos:line="171" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="171" pos:column="31"/></name></expr>;<pos:position pos:line="171" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="173" pos:column="3">CURL_OUTPUT_DIGEST_CONV<pos:position pos:line="173" pos:column="26"/></name><argument_list pos:line="173" pos:column="26">(<argument><expr><name pos:line="173" pos:column="27">data<pos:position pos:line="173" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="33">md5this<pos:position pos:line="173" pos:column="40"/></name></expr></argument>)<pos:position pos:line="173" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="42"/></expr_stmt> <comment type="block" pos:line="173" pos:column="43">/* convert on non-ASCII machines */</comment>
  <expr_stmt><expr><call><name pos:line="174" pos:column="3">Curl_md5it<pos:position pos:line="174" pos:column="13"/></name><argument_list pos:line="174" pos:column="13">(<argument><expr><name pos:line="174" pos:column="14">md5buf<pos:position pos:line="174" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="174" pos:column="22">md5this<pos:position pos:line="174" pos:column="29"/></name></expr></argument>)<pos:position pos:line="174" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="175" pos:column="3">free<pos:position pos:line="175" pos:column="7"/></name><argument_list pos:line="175" pos:column="7">(<argument><expr><name pos:line="175" pos:column="8">md5this<pos:position pos:line="175" pos:column="15"/></name></expr></argument>)<pos:position pos:line="175" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="17"/></expr_stmt> <comment type="block" pos:line="175" pos:column="18">/* free this again */</comment>
  <expr_stmt><expr><call><name pos:line="176" pos:column="3">md5_to_ascii<pos:position pos:line="176" pos:column="15"/></name><argument_list pos:line="176" pos:column="15">(<argument><expr><name pos:line="176" pos:column="16">md5buf<pos:position pos:line="176" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="24">request_digest<pos:position pos:line="176" pos:column="38"/></name></expr></argument>)<pos:position pos:line="176" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="178" pos:column="3">/* for test case 64 (snooped from a Mozilla 1.3a request)

    Authorization: Digest username="testuser", realm="testrealm", \
    nonce="1053604145", uri="/64", response="c55f7f30d83d774a3d2dcacf725abaca"
  */</comment>

  <if pos:line="184" pos:column="3">if<condition pos:line="184" pos:column="5">(<expr><name><name pos:line="184" pos:column="6">d<pos:position pos:line="184" pos:column="7"/></name><operator pos:line="184" pos:column="7">-&gt;<pos:position pos:line="184" pos:column="12"/></operator><name pos:line="184" pos:column="9">qop<pos:position pos:line="184" pos:column="12"/></name></name></expr>)<pos:position pos:line="184" pos:column="13"/></condition><then pos:line="184" pos:column="13"> <block pos:line="184" pos:column="14">{
    <expr_stmt><expr><operator pos:line="185" pos:column="5">*<pos:position pos:line="185" pos:column="6"/></operator><name pos:line="185" pos:column="6">allocuserpwd<pos:position pos:line="185" pos:column="18"/></name> <operator pos:line="185" pos:column="19">=<pos:position pos:line="185" pos:column="20"/></operator>
      <call><name pos:line="186" pos:column="7">aprintf<pos:position pos:line="186" pos:column="14"/></name><argument_list pos:line="186" pos:column="14">( <argument><expr><literal type="string" pos:line="186" pos:column="16">"%sAuthorization: Digest "<pos:position pos:line="186" pos:column="42"/></literal>
               <literal type="string" pos:line="187" pos:column="16">"username=\"%s\", "<pos:position pos:line="187" pos:column="35"/></literal>
               <literal type="string" pos:line="188" pos:column="16">"realm=\"%s\", "<pos:position pos:line="188" pos:column="32"/></literal>
               <literal type="string" pos:line="189" pos:column="16">"nonce=\"%s\", "<pos:position pos:line="189" pos:column="32"/></literal>
               <literal type="string" pos:line="190" pos:column="16">"uri=\"%s\", "<pos:position pos:line="190" pos:column="30"/></literal>
               <literal type="string" pos:line="191" pos:column="16">"cnonce=\"%s\", "<pos:position pos:line="191" pos:column="33"/></literal>
               <literal type="string" pos:line="192" pos:column="16">"nc=%08x, "<pos:position pos:line="192" pos:column="27"/></literal>
               <literal type="string" pos:line="193" pos:column="16">"qop=\"%s\", "<pos:position pos:line="193" pos:column="30"/></literal>
               <literal type="string" pos:line="194" pos:column="16">"response=\"%s\""<pos:position pos:line="194" pos:column="33"/></literal></expr></argument>,
               <argument><expr><ternary><condition><expr><name pos:line="195" pos:column="16">proxy<pos:position pos:line="195" pos:column="21"/></name></expr>?<pos:position pos:line="195" pos:column="22"/></condition><then><expr><literal type="string" pos:line="195" pos:column="22">"Proxy-"<pos:position pos:line="195" pos:column="30"/></literal></expr></then><else pos:line="195" pos:column="30">:<expr><literal type="string" pos:line="195" pos:column="31">""<pos:position pos:line="195" pos:column="33"/></literal></expr></else></ternary></expr></argument>,
               <argument><expr><name pos:line="196" pos:column="16">userp<pos:position pos:line="196" pos:column="21"/></name></expr></argument>,
               <argument><expr><name><name pos:line="197" pos:column="16">d<pos:position pos:line="197" pos:column="17"/></name><operator pos:line="197" pos:column="17">-&gt;<pos:position pos:line="197" pos:column="22"/></operator><name pos:line="197" pos:column="19">realm<pos:position pos:line="197" pos:column="24"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="198" pos:column="16">d<pos:position pos:line="198" pos:column="17"/></name><operator pos:line="198" pos:column="17">-&gt;<pos:position pos:line="198" pos:column="22"/></operator><name pos:line="198" pos:column="19">nonce<pos:position pos:line="198" pos:column="24"/></name></name></expr></argument>,
               <argument><expr><name pos:line="199" pos:column="16">uripath<pos:position pos:line="199" pos:column="23"/></name></expr></argument>, <comment type="block" pos:line="199" pos:column="25">/* this is the PATH part of the URL */</comment>
               <argument><expr><name><name pos:line="200" pos:column="16">d<pos:position pos:line="200" pos:column="17"/></name><operator pos:line="200" pos:column="17">-&gt;<pos:position pos:line="200" pos:column="22"/></operator><name pos:line="200" pos:column="19">cnonce<pos:position pos:line="200" pos:column="25"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="201" pos:column="16">d<pos:position pos:line="201" pos:column="17"/></name><operator pos:line="201" pos:column="17">-&gt;<pos:position pos:line="201" pos:column="22"/></operator><name pos:line="201" pos:column="19">nc<pos:position pos:line="201" pos:column="21"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="202" pos:column="16">d<pos:position pos:line="202" pos:column="17"/></name><operator pos:line="202" pos:column="17">-&gt;<pos:position pos:line="202" pos:column="22"/></operator><name pos:line="202" pos:column="19">qop<pos:position pos:line="202" pos:column="22"/></name></name></expr></argument>,
               <argument><expr><name pos:line="203" pos:column="16">request_digest<pos:position pos:line="203" pos:column="30"/></name></expr></argument>)<pos:position pos:line="203" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="32"/></expr_stmt>

    <if pos:line="205" pos:column="5">if<condition pos:line="205" pos:column="7">(<expr><call><name pos:line="205" pos:column="8">strequal<pos:position pos:line="205" pos:column="16"/></name><argument_list pos:line="205" pos:column="16">(<argument><expr><name><name pos:line="205" pos:column="17">d<pos:position pos:line="205" pos:column="18"/></name><operator pos:line="205" pos:column="18">-&gt;<pos:position pos:line="205" pos:column="23"/></operator><name pos:line="205" pos:column="20">qop<pos:position pos:line="205" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="205" pos:column="25">"auth"<pos:position pos:line="205" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="205" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="205" pos:column="33"/></condition><then pos:line="205" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="206" pos:column="7">d<pos:position pos:line="206" pos:column="8"/></name><operator pos:line="206" pos:column="8">-&gt;<pos:position pos:line="206" pos:column="13"/></operator><name pos:line="206" pos:column="10">nc<pos:position pos:line="206" pos:column="12"/></name></name><operator pos:line="206" pos:column="12">++<pos:position pos:line="206" pos:column="14"/></operator></expr>;<pos:position pos:line="206" pos:column="15"/></expr_stmt></block></then></if> <comment type="block" pos:line="206" pos:column="16">/* The nc (from RFC) has to be a 8 hex digit number 0 padded
                  which tells to the server how many times you are using the
                  same nonce in the qop=auth mode. */</comment>
  }<pos:position pos:line="209" pos:column="4"/></block></then>
  <else pos:line="210" pos:column="3">else <block pos:line="210" pos:column="8">{
    <expr_stmt><expr><operator pos:line="211" pos:column="5">*<pos:position pos:line="211" pos:column="6"/></operator><name pos:line="211" pos:column="6">allocuserpwd<pos:position pos:line="211" pos:column="18"/></name> <operator pos:line="211" pos:column="19">=<pos:position pos:line="211" pos:column="20"/></operator>
      <call><name pos:line="212" pos:column="7">aprintf<pos:position pos:line="212" pos:column="14"/></name><argument_list pos:line="212" pos:column="14">( <argument><expr><literal type="string" pos:line="212" pos:column="16">"%sAuthorization: Digest "<pos:position pos:line="212" pos:column="42"/></literal>
               <literal type="string" pos:line="213" pos:column="16">"username=\"%s\", "<pos:position pos:line="213" pos:column="35"/></literal>
               <literal type="string" pos:line="214" pos:column="16">"realm=\"%s\", "<pos:position pos:line="214" pos:column="32"/></literal>
               <literal type="string" pos:line="215" pos:column="16">"nonce=\"%s\", "<pos:position pos:line="215" pos:column="32"/></literal>
               <literal type="string" pos:line="216" pos:column="16">"uri=\"%s\", "<pos:position pos:line="216" pos:column="30"/></literal>
               <literal type="string" pos:line="217" pos:column="16">"response=\"%s\""<pos:position pos:line="217" pos:column="33"/></literal></expr></argument>,
               <argument><expr><ternary><condition><expr><name pos:line="218" pos:column="16">proxy<pos:position pos:line="218" pos:column="21"/></name></expr>?<pos:position pos:line="218" pos:column="22"/></condition><then><expr><literal type="string" pos:line="218" pos:column="22">"Proxy-"<pos:position pos:line="218" pos:column="30"/></literal></expr></then><else pos:line="218" pos:column="30">:<expr><literal type="string" pos:line="218" pos:column="31">""<pos:position pos:line="218" pos:column="33"/></literal></expr></else></ternary></expr></argument>,
               <argument><expr><name pos:line="219" pos:column="16">userp<pos:position pos:line="219" pos:column="21"/></name></expr></argument>,
               <argument><expr><name><name pos:line="220" pos:column="16">d<pos:position pos:line="220" pos:column="17"/></name><operator pos:line="220" pos:column="17">-&gt;<pos:position pos:line="220" pos:column="22"/></operator><name pos:line="220" pos:column="19">realm<pos:position pos:line="220" pos:column="24"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="221" pos:column="16">d<pos:position pos:line="221" pos:column="17"/></name><operator pos:line="221" pos:column="17">-&gt;<pos:position pos:line="221" pos:column="22"/></operator><name pos:line="221" pos:column="19">nonce<pos:position pos:line="221" pos:column="24"/></name></name></expr></argument>,
               <argument><expr><name pos:line="222" pos:column="16">uripath<pos:position pos:line="222" pos:column="23"/></name></expr></argument>, <comment type="block" pos:line="222" pos:column="25">/* this is the PATH part of the URL */</comment>
               <argument><expr><name pos:line="223" pos:column="16">request_digest<pos:position pos:line="223" pos:column="30"/></name></expr></argument>)<pos:position pos:line="223" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="224" pos:column="4"/></block></else></if>
  <if pos:line="225" pos:column="3">if<condition pos:line="225" pos:column="5">(<expr><operator pos:line="225" pos:column="6">!<pos:position pos:line="225" pos:column="7"/></operator><operator pos:line="225" pos:column="7">*<pos:position pos:line="225" pos:column="8"/></operator><name pos:line="225" pos:column="8">allocuserpwd<pos:position pos:line="225" pos:column="20"/></name></expr>)<pos:position pos:line="225" pos:column="21"/></condition><then pos:line="225" pos:column="21">
    <block type="pseudo"><return pos:line="226" pos:column="5">return <expr><name pos:line="226" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="226" pos:column="31"/></name></expr>;<pos:position pos:line="226" pos:column="32"/></return></block></then></if>

  <comment type="block" pos:line="228" pos:column="3">/* Add optional fields */</comment>
  <if pos:line="229" pos:column="3">if<condition pos:line="229" pos:column="5">(<expr><name><name pos:line="229" pos:column="6">d<pos:position pos:line="229" pos:column="7"/></name><operator pos:line="229" pos:column="7">-&gt;<pos:position pos:line="229" pos:column="12"/></operator><name pos:line="229" pos:column="9">opaque<pos:position pos:line="229" pos:column="15"/></name></name></expr>)<pos:position pos:line="229" pos:column="16"/></condition><then pos:line="229" pos:column="16"> <block pos:line="229" pos:column="17">{
    <comment type="block" pos:line="230" pos:column="5">/* append opaque */</comment>
    <expr_stmt><expr><name pos:line="231" pos:column="5">tmp<pos:position pos:line="231" pos:column="8"/></name> <operator pos:line="231" pos:column="9">=<pos:position pos:line="231" pos:column="10"/></operator> <call><name pos:line="231" pos:column="11">aprintf<pos:position pos:line="231" pos:column="18"/></name><argument_list pos:line="231" pos:column="18">(<argument><expr><literal type="string" pos:line="231" pos:column="19">"%s, opaque=\"%s\""<pos:position pos:line="231" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="231" pos:column="40">*<pos:position pos:line="231" pos:column="41"/></operator><name pos:line="231" pos:column="41">allocuserpwd<pos:position pos:line="231" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="231" pos:column="55">d<pos:position pos:line="231" pos:column="56"/></name><operator pos:line="231" pos:column="56">-&gt;<pos:position pos:line="231" pos:column="61"/></operator><name pos:line="231" pos:column="58">opaque<pos:position pos:line="231" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="231" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="66"/></expr_stmt>
    <if pos:line="232" pos:column="5">if<condition pos:line="232" pos:column="7">(<expr><operator pos:line="232" pos:column="8">!<pos:position pos:line="232" pos:column="9"/></operator><name pos:line="232" pos:column="9">tmp<pos:position pos:line="232" pos:column="12"/></name></expr>)<pos:position pos:line="232" pos:column="13"/></condition><then pos:line="232" pos:column="13">
      <block type="pseudo"><return pos:line="233" pos:column="7">return <expr><name pos:line="233" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="233" pos:column="33"/></name></expr>;<pos:position pos:line="233" pos:column="34"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="234" pos:column="5">free<pos:position pos:line="234" pos:column="9"/></name><argument_list pos:line="234" pos:column="9">(<argument><expr><operator pos:line="234" pos:column="10">*<pos:position pos:line="234" pos:column="11"/></operator><name pos:line="234" pos:column="11">allocuserpwd<pos:position pos:line="234" pos:column="23"/></name></expr></argument>)<pos:position pos:line="234" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="235" pos:column="5">*<pos:position pos:line="235" pos:column="6"/></operator><name pos:line="235" pos:column="6">allocuserpwd<pos:position pos:line="235" pos:column="18"/></name> <operator pos:line="235" pos:column="19">=<pos:position pos:line="235" pos:column="20"/></operator> <name pos:line="235" pos:column="21">tmp<pos:position pos:line="235" pos:column="24"/></name></expr>;<pos:position pos:line="235" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="236" pos:column="4"/></block></then></if>

  <if pos:line="238" pos:column="3">if<condition pos:line="238" pos:column="5">(<expr><name><name pos:line="238" pos:column="6">d<pos:position pos:line="238" pos:column="7"/></name><operator pos:line="238" pos:column="7">-&gt;<pos:position pos:line="238" pos:column="12"/></operator><name pos:line="238" pos:column="9">algorithm<pos:position pos:line="238" pos:column="18"/></name></name></expr>)<pos:position pos:line="238" pos:column="19"/></condition><then pos:line="238" pos:column="19"> <block pos:line="238" pos:column="20">{
    <comment type="block" pos:line="239" pos:column="5">/* append algorithm */</comment>
    <expr_stmt><expr><name pos:line="240" pos:column="5">tmp<pos:position pos:line="240" pos:column="8"/></name> <operator pos:line="240" pos:column="9">=<pos:position pos:line="240" pos:column="10"/></operator> <call><name pos:line="240" pos:column="11">aprintf<pos:position pos:line="240" pos:column="18"/></name><argument_list pos:line="240" pos:column="18">(<argument><expr><literal type="string" pos:line="240" pos:column="19">"%s, algorithm=\"%s\""<pos:position pos:line="240" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="240" pos:column="43">*<pos:position pos:line="240" pos:column="44"/></operator><name pos:line="240" pos:column="44">allocuserpwd<pos:position pos:line="240" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="240" pos:column="58">d<pos:position pos:line="240" pos:column="59"/></name><operator pos:line="240" pos:column="59">-&gt;<pos:position pos:line="240" pos:column="64"/></operator><name pos:line="240" pos:column="61">algorithm<pos:position pos:line="240" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="240" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="72"/></expr_stmt>
    <if pos:line="241" pos:column="5">if<condition pos:line="241" pos:column="7">(<expr><operator pos:line="241" pos:column="8">!<pos:position pos:line="241" pos:column="9"/></operator><name pos:line="241" pos:column="9">tmp<pos:position pos:line="241" pos:column="12"/></name></expr>)<pos:position pos:line="241" pos:column="13"/></condition><then pos:line="241" pos:column="13">
      <block type="pseudo"><return pos:line="242" pos:column="7">return <expr><name pos:line="242" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="242" pos:column="33"/></name></expr>;<pos:position pos:line="242" pos:column="34"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="243" pos:column="5">free<pos:position pos:line="243" pos:column="9"/></name><argument_list pos:line="243" pos:column="9">(<argument><expr><operator pos:line="243" pos:column="10">*<pos:position pos:line="243" pos:column="11"/></operator><name pos:line="243" pos:column="11">allocuserpwd<pos:position pos:line="243" pos:column="23"/></name></expr></argument>)<pos:position pos:line="243" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="244" pos:column="5">*<pos:position pos:line="244" pos:column="6"/></operator><name pos:line="244" pos:column="6">allocuserpwd<pos:position pos:line="244" pos:column="18"/></name> <operator pos:line="244" pos:column="19">=<pos:position pos:line="244" pos:column="20"/></operator> <name pos:line="244" pos:column="21">tmp<pos:position pos:line="244" pos:column="24"/></name></expr>;<pos:position pos:line="244" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="245" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="247" pos:column="3">/* append CRLF to the userpwd header */</comment>
  <expr_stmt><expr><name pos:line="248" pos:column="3">tmp<pos:position pos:line="248" pos:column="6"/></name> <operator pos:line="248" pos:column="7">=<pos:position pos:line="248" pos:column="8"/></operator> <operator pos:line="248" pos:column="9">(<pos:position pos:line="248" pos:column="10"/></operator><name pos:line="248" pos:column="10">char<pos:position pos:line="248" pos:column="14"/></name><operator pos:line="248" pos:column="14">*<pos:position pos:line="248" pos:column="15"/></operator><operator pos:line="248" pos:column="15">)<pos:position pos:line="248" pos:column="16"/></operator> <call><name pos:line="248" pos:column="17">realloc<pos:position pos:line="248" pos:column="24"/></name><argument_list pos:line="248" pos:column="24">(<argument><expr><operator pos:line="248" pos:column="25">*<pos:position pos:line="248" pos:column="26"/></operator><name pos:line="248" pos:column="26">allocuserpwd<pos:position pos:line="248" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="248" pos:column="40">strlen<pos:position pos:line="248" pos:column="46"/></name><argument_list pos:line="248" pos:column="46">(<argument><expr><operator pos:line="248" pos:column="47">*<pos:position pos:line="248" pos:column="48"/></operator><name pos:line="248" pos:column="48">allocuserpwd<pos:position pos:line="248" pos:column="60"/></name></expr></argument>)<pos:position pos:line="248" pos:column="61"/></argument_list></call> <operator pos:line="248" pos:column="62">+<pos:position pos:line="248" pos:column="63"/></operator> <literal type="number" pos:line="248" pos:column="64">3<pos:position pos:line="248" pos:column="65"/></literal> <operator pos:line="248" pos:column="66">+<pos:position pos:line="248" pos:column="67"/></operator> <literal type="number" pos:line="248" pos:column="68">1<pos:position pos:line="248" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="71"/></expr_stmt>
  <if pos:line="249" pos:column="3">if<condition pos:line="249" pos:column="5">(<expr><operator pos:line="249" pos:column="6">!<pos:position pos:line="249" pos:column="7"/></operator><name pos:line="249" pos:column="7">tmp<pos:position pos:line="249" pos:column="10"/></name></expr>)<pos:position pos:line="249" pos:column="11"/></condition><then pos:line="249" pos:column="11">
    <block type="pseudo"><return pos:line="250" pos:column="5">return <expr><name pos:line="250" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="250" pos:column="31"/></name></expr>;<pos:position pos:line="250" pos:column="32"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="251" pos:column="3">strcat<pos:position pos:line="251" pos:column="9"/></name><argument_list pos:line="251" pos:column="9">(<argument><expr><name pos:line="251" pos:column="10">tmp<pos:position pos:line="251" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="251" pos:column="15">"\r\n"<pos:position pos:line="251" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="251" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="252" pos:column="3">*<pos:position pos:line="252" pos:column="4"/></operator><name pos:line="252" pos:column="4">allocuserpwd<pos:position pos:line="252" pos:column="16"/></name> <operator pos:line="252" pos:column="17">=<pos:position pos:line="252" pos:column="18"/></operator> <name pos:line="252" pos:column="19">tmp<pos:position pos:line="252" pos:column="22"/></name></expr>;<pos:position pos:line="252" pos:column="23"/></expr_stmt>

  <return pos:line="254" pos:column="3">return <expr><name pos:line="254" pos:column="10">CURLE_OK<pos:position pos:line="254" pos:column="18"/></name></expr>;<pos:position pos:line="254" pos:column="19"/></return>
}<pos:position pos:line="255" pos:column="2"/></block></function></unit>
