<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1959_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">do_sec_send<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">connectdata<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conn<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">curl_socket_t<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">fd<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                        <parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">from<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">int<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">length<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">bytes<pos:position pos:line="4" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="14">htonl_bytes<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt> <comment type="block" pos:line="4" pos:column="27">/* 32-bit integers for htonl */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">buffer<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><name pos:line="5" pos:column="18">NULL<pos:position pos:line="5" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">cmd_buffer<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">cmd_size<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CURLcode<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">error<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">enum<pos:position pos:line="9" pos:column="7"/></name> <name pos:line="9" pos:column="8">protection_level<pos:position pos:line="9" pos:column="24"/></name></name></type> <name pos:line="9" pos:column="25">prot_level<pos:position pos:line="9" pos:column="35"/></name> <init pos:line="9" pos:column="36">= <expr><name><name pos:line="9" pos:column="38">conn<pos:position pos:line="9" pos:column="42"/></name><operator pos:line="9" pos:column="42">-&gt;<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="44">data_prot<pos:position pos:line="9" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">bool<pos:position pos:line="10" pos:column="7"/></name></type> <name pos:line="10" pos:column="8">iscmd<pos:position pos:line="10" pos:column="13"/></name> <init pos:line="10" pos:column="14">= <expr><ternary><condition><expr><operator pos:line="10" pos:column="16">(<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">prot_level<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">==<pos:position pos:line="10" pos:column="30"/></operator> <name pos:line="10" pos:column="31">PROT_CMD<pos:position pos:line="10" pos:column="39"/></name><operator pos:line="10" pos:column="39">)<pos:position pos:line="10" pos:column="40"/></operator></expr>?<pos:position pos:line="10" pos:column="41"/></condition><then><expr><name pos:line="10" pos:column="41">TRUE<pos:position pos:line="10" pos:column="45"/></name></expr></then><else pos:line="10" pos:column="45">:<expr><name pos:line="10" pos:column="46">FALSE<pos:position pos:line="10" pos:column="51"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="10" pos:column="52"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">DEBUGASSERT<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">prot_level<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">&gt;<pos:position pos:line="12" pos:column="30"/></operator> <name pos:line="12" pos:column="28">PROT_NONE<pos:position pos:line="12" pos:column="37"/></name> <operator pos:line="12" pos:column="38">&amp;&amp;<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="41">prot_level<pos:position pos:line="12" pos:column="51"/></name> <operator pos:line="12" pos:column="52">&lt;<pos:position pos:line="12" pos:column="56"/></operator> <name pos:line="12" pos:column="54">PROT_LAST<pos:position pos:line="12" pos:column="63"/></name></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="65"/></expr_stmt>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">iscmd<pos:position pos:line="14" pos:column="11"/></name></expr>)<pos:position pos:line="14" pos:column="12"/></condition><then pos:line="14" pos:column="12"> <block pos:line="14" pos:column="13">{
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><operator pos:line="15" pos:column="8">!<pos:position pos:line="15" pos:column="9"/></operator><call><name pos:line="15" pos:column="9">strncmp<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">(<argument><expr><name pos:line="15" pos:column="17">from<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="23">"PASS "<pos:position pos:line="15" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="32">5<pos:position pos:line="15" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call> <operator pos:line="15" pos:column="35">||<pos:position pos:line="15" pos:column="37"/></operator> <operator pos:line="15" pos:column="38">!<pos:position pos:line="15" pos:column="39"/></operator><call><name pos:line="15" pos:column="39">strncmp<pos:position pos:line="15" pos:column="46"/></name><argument_list pos:line="15" pos:column="46">(<argument><expr><name pos:line="15" pos:column="47">from<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="53">"ACCT "<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="62">5<pos:position pos:line="15" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="65"/></condition><then pos:line="15" pos:column="65">
      <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="7">prot_level<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">PROT_PRIVATE<pos:position pos:line="16" pos:column="32"/></name></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt></block></then>
    <else pos:line="17" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="7">prot_level<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <name><name pos:line="18" pos:column="20">conn<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">command_prot<pos:position pos:line="18" pos:column="38"/></name></name></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt></block></else></if>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="20" pos:column="3">bytes<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <call><name><name pos:line="20" pos:column="11">conn<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">mech<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">-&gt;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="23">encode<pos:position pos:line="20" pos:column="29"/></name></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name><name pos:line="20" pos:column="30">conn<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">app_data<pos:position pos:line="20" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="46">from<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="52">length<pos:position pos:line="20" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="60">prot_level<pos:position pos:line="20" pos:column="70"/></name></expr></argument>,
                             <argument><expr><operator pos:line="21" pos:column="30">(<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">void<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">*<pos:position pos:line="21" pos:column="37"/></operator><operator pos:line="21" pos:column="37">*<pos:position pos:line="21" pos:column="38"/></operator><operator pos:line="21" pos:column="38">)<pos:position pos:line="21" pos:column="39"/></operator><operator pos:line="21" pos:column="39">&amp;<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="40">buffer<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><operator pos:line="22" pos:column="6">!<pos:position pos:line="22" pos:column="7"/></operator><name pos:line="22" pos:column="7">buffer<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">||<pos:position pos:line="22" pos:column="16"/></operator> <name pos:line="22" pos:column="17">bytes<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">&lt;=<pos:position pos:line="22" pos:column="28"/></operator> <literal type="number" pos:line="22" pos:column="26">0<pos:position pos:line="22" pos:column="27"/></literal></expr>)<pos:position pos:line="22" pos:column="28"/></condition><then pos:line="22" pos:column="28">
    <block type="pseudo"><return pos:line="23" pos:column="5">return;<pos:position pos:line="23" pos:column="12"/></return></block></then></if> <comment type="block" pos:line="23" pos:column="13">/* error */</comment>

  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">iscmd<pos:position pos:line="25" pos:column="11"/></name></expr>)<pos:position pos:line="25" pos:column="12"/></condition><then pos:line="25" pos:column="12"> <block pos:line="25" pos:column="13">{
    <expr_stmt><expr><name pos:line="26" pos:column="5">error<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <call><name pos:line="26" pos:column="13">Curl_base64_encode<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name><name pos:line="26" pos:column="32">conn<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">data<pos:position pos:line="26" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="44">buffer<pos:position pos:line="26" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="52">curlx_sitouz<pos:position pos:line="26" pos:column="64"/></name><argument_list pos:line="26" pos:column="64">(<argument><expr><name pos:line="26" pos:column="65">bytes<pos:position pos:line="26" pos:column="70"/></name></expr></argument>)<pos:position pos:line="26" pos:column="71"/></argument_list></call></expr></argument>,
                               <argument><expr><operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="33">cmd_buffer<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="45">&amp;<pos:position pos:line="27" pos:column="50"/></operator><name pos:line="27" pos:column="46">cmd_size<pos:position pos:line="27" pos:column="54"/></name></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="56"/></expr_stmt>
    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><name pos:line="28" pos:column="8">error<pos:position pos:line="28" pos:column="13"/></name></expr>)<pos:position pos:line="28" pos:column="14"/></condition><then pos:line="28" pos:column="14"> <block pos:line="28" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">free<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">buffer<pos:position pos:line="29" pos:column="18"/></name></expr></argument>)<pos:position pos:line="29" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="20"/></expr_stmt>
      <return pos:line="30" pos:column="7">return;<pos:position pos:line="30" pos:column="14"/></return> <comment type="block" pos:line="30" pos:column="15">/* error */</comment>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <if pos:line="32" pos:column="5">if<condition pos:line="32" pos:column="7">(<expr><name pos:line="32" pos:column="8">cmd_size<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">&gt;<pos:position pos:line="32" pos:column="21"/></operator> <literal type="number" pos:line="32" pos:column="19">0<pos:position pos:line="32" pos:column="20"/></literal></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21"> <block pos:line="32" pos:column="22">{
      <decl_stmt><decl><specifier pos:line="33" pos:column="7">static<pos:position pos:line="33" pos:column="13"/></specifier> <type><specifier pos:line="33" pos:column="14">const<pos:position pos:line="33" pos:column="19"/></specifier> <name pos:line="33" pos:column="20">char<pos:position pos:line="33" pos:column="24"/></name> <modifier pos:line="33" pos:column="25">*<pos:position pos:line="33" pos:column="26"/></modifier></type><name pos:line="33" pos:column="26">enc<pos:position pos:line="33" pos:column="29"/></name> <init pos:line="33" pos:column="30">= <expr><literal type="string" pos:line="33" pos:column="32">"ENC "<pos:position pos:line="33" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="33" pos:column="39"/></decl_stmt>
      <decl_stmt><decl><specifier pos:line="34" pos:column="7">static<pos:position pos:line="34" pos:column="13"/></specifier> <type><specifier pos:line="34" pos:column="14">const<pos:position pos:line="34" pos:column="19"/></specifier> <name pos:line="34" pos:column="20">char<pos:position pos:line="34" pos:column="24"/></name> <modifier pos:line="34" pos:column="25">*<pos:position pos:line="34" pos:column="26"/></modifier></type><name pos:line="34" pos:column="26">mic<pos:position pos:line="34" pos:column="29"/></name> <init pos:line="34" pos:column="30">= <expr><literal type="string" pos:line="34" pos:column="32">"MIC "<pos:position pos:line="34" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="34" pos:column="39"/></decl_stmt>
      <if pos:line="35" pos:column="7">if<condition pos:line="35" pos:column="9">(<expr><name pos:line="35" pos:column="10">prot_level<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">==<pos:position pos:line="35" pos:column="23"/></operator> <name pos:line="35" pos:column="24">PROT_PRIVATE<pos:position pos:line="35" pos:column="36"/></name></expr>)<pos:position pos:line="35" pos:column="37"/></condition><then pos:line="35" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="9">socket_write<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">conn<pos:position pos:line="36" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="28">fd<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="32">enc<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="37">4<pos:position pos:line="36" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt></block></then>
      <else pos:line="37" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="9">socket_write<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">conn<pos:position pos:line="38" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="28">fd<pos:position pos:line="38" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="32">mic<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="37">4<pos:position pos:line="38" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt></block></else></if>

      <expr_stmt><expr><call><name pos:line="40" pos:column="7">socket_write<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">conn<pos:position pos:line="40" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="26">fd<pos:position pos:line="40" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="30">cmd_buffer<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="42">cmd_size<pos:position pos:line="40" pos:column="50"/></name></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">socket_write<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><name pos:line="41" pos:column="20">conn<pos:position pos:line="41" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="26">fd<pos:position pos:line="41" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="30">"\r\n"<pos:position pos:line="41" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="38">2<pos:position pos:line="41" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">infof<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name><name pos:line="42" pos:column="13">conn<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">-&gt;<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="19">data<pos:position pos:line="42" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="25">"Send: %s%s\n"<pos:position pos:line="42" pos:column="39"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="42" pos:column="41">prot_level<pos:position pos:line="42" pos:column="51"/></name> <operator pos:line="42" pos:column="52">==<pos:position pos:line="42" pos:column="54"/></operator> <name pos:line="42" pos:column="55">PROT_PRIVATE<pos:position pos:line="42" pos:column="67"/></name></expr>?<pos:position pos:line="42" pos:column="68"/></condition><then><expr><name pos:line="42" pos:column="68">enc<pos:position pos:line="42" pos:column="71"/></name></expr></then><else pos:line="42" pos:column="71">:<expr><name pos:line="42" pos:column="72">mic<pos:position pos:line="42" pos:column="75"/></name></expr></else></ternary></expr></argument>,
            <argument><expr><name pos:line="43" pos:column="13">cmd_buffer<pos:position pos:line="43" pos:column="23"/></name></expr></argument>)<pos:position pos:line="43" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">free<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><name pos:line="44" pos:column="12">cmd_buffer<pos:position pos:line="44" pos:column="22"/></name></expr></argument>)<pos:position pos:line="44" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
  }<pos:position pos:line="46" pos:column="4"/></block></then>
  <else pos:line="47" pos:column="3">else <block pos:line="47" pos:column="8">{
    <expr_stmt><expr><name pos:line="48" pos:column="5">htonl_bytes<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">=<pos:position pos:line="48" pos:column="18"/></operator> <call><name pos:line="48" pos:column="19">htonl<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">bytes<pos:position pos:line="48" pos:column="30"/></name></expr></argument>)<pos:position pos:line="48" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">socket_write<pos:position pos:line="49" pos:column="17"/></name><argument_list pos:line="49" pos:column="17">(<argument><expr><name pos:line="49" pos:column="18">conn<pos:position pos:line="49" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="24">fd<pos:position pos:line="49" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="28">&amp;<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="29">htonl_bytes<pos:position pos:line="49" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="42">sizeof<argument_list pos:line="49" pos:column="48">(<argument><expr><name pos:line="49" pos:column="49">htonl_bytes<pos:position pos:line="49" pos:column="60"/></name></expr></argument>)<pos:position pos:line="49" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">socket_write<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><name pos:line="50" pos:column="18">conn<pos:position pos:line="50" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="24">fd<pos:position pos:line="50" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="28">buffer<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="36">curlx_sitouz<pos:position pos:line="50" pos:column="48"/></name><argument_list pos:line="50" pos:column="48">(<argument><expr><name pos:line="50" pos:column="49">bytes<pos:position pos:line="50" pos:column="54"/></name></expr></argument>)<pos:position pos:line="50" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="57"/></expr_stmt>
  }<pos:position pos:line="51" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">free<pos:position pos:line="52" pos:column="7"/></name><argument_list pos:line="52" pos:column="7">(<argument><expr><name pos:line="52" pos:column="8">buffer<pos:position pos:line="52" pos:column="14"/></name></expr></argument>)<pos:position pos:line="52" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="16"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
