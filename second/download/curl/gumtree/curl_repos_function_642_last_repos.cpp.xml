<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_642_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">Curl_addrinfo<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">fake_ai<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><name pos:line="3" pos:column="10">Curl_addrinfo<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">ai<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">ai<pos:position pos:line="5" pos:column="5"/></name> <operator pos:line="5" pos:column="6">=<pos:position pos:line="5" pos:column="7"/></operator> <call><name pos:line="5" pos:column="8">calloc<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><expr><literal type="number" pos:line="5" pos:column="15">1<pos:position pos:line="5" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="18">sizeof<argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">Curl_addrinfo<pos:position pos:line="5" pos:column="38"/></name></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="41"/></expr_stmt>
  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><operator pos:line="6" pos:column="6">!<pos:position pos:line="6" pos:column="7"/></operator><name pos:line="6" pos:column="7">ai<pos:position pos:line="6" pos:column="9"/></name></expr>)<pos:position pos:line="6" pos:column="10"/></condition><then pos:line="6" pos:column="10">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">NULL<pos:position pos:line="7" pos:column="16"/></name></expr>;<pos:position pos:line="7" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="9" pos:column="3">ai<pos:position pos:line="9" pos:column="5"/></name><operator pos:line="9" pos:column="5">-&gt;<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="7">ai_canonname<pos:position pos:line="9" pos:column="19"/></name></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <call><name pos:line="9" pos:column="22">strdup<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><literal type="string" pos:line="9" pos:column="29">"dummy"<pos:position pos:line="9" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><name><name pos:line="10" pos:column="7">ai<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">-&gt;<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="11">ai_canonname<pos:position pos:line="10" pos:column="23"/></name></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24"> <block pos:line="10" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">free<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><name pos:line="11" pos:column="10">ai<pos:position pos:line="11" pos:column="12"/></name></expr></argument>)<pos:position pos:line="11" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="14"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="15" pos:column="3">ai<pos:position pos:line="15" pos:column="5"/></name><operator pos:line="15" pos:column="5">-&gt;<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="7">ai_addr<pos:position pos:line="15" pos:column="14"/></name></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">calloc<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><literal type="number" pos:line="15" pos:column="24">1<pos:position pos:line="15" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="27">sizeof<argument_list pos:line="15" pos:column="33">(<argument><expr pos:line="15" pos:column="34">struct <name pos:line="15" pos:column="41">sockaddr_in<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">!<pos:position pos:line="16" pos:column="7"/></operator><name><name pos:line="16" pos:column="7">ai<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">-&gt;<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="11">ai_addr<pos:position pos:line="16" pos:column="18"/></name></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19"> <block pos:line="16" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">free<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name><name pos:line="17" pos:column="10">ai<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">ai_canonname<pos:position pos:line="17" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">free<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><name pos:line="18" pos:column="10">ai<pos:position pos:line="18" pos:column="12"/></name></expr></argument>)<pos:position pos:line="18" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="14"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">NULL<pos:position pos:line="19" pos:column="16"/></name></expr>;<pos:position pos:line="19" pos:column="17"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="22" pos:column="3">ai<pos:position pos:line="22" pos:column="5"/></name><operator pos:line="22" pos:column="5">-&gt;<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="7">ai_family<pos:position pos:line="22" pos:column="16"/></name></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="19">AF_INET<pos:position pos:line="22" pos:column="26"/></name></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">ai<pos:position pos:line="23" pos:column="5"/></name><operator pos:line="23" pos:column="5">-&gt;<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="7">ai_addrlen<pos:position pos:line="23" pos:column="17"/></name></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <sizeof pos:line="23" pos:column="20">sizeof<argument_list pos:line="23" pos:column="26">(<argument><expr pos:line="23" pos:column="27">struct <name pos:line="23" pos:column="34">sockaddr_in<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></sizeof></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>

  <return pos:line="25" pos:column="3">return <expr><name pos:line="25" pos:column="10">ai<pos:position pos:line="25" pos:column="12"/></name></expr>;<pos:position pos:line="25" pos:column="13"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
