<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2539_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">connect_prep<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">connectdata<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">conn<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">sockindex<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">ssl_connect_data<pos:position pos:line="3" pos:column="26"/></name></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">connssl<pos:position pos:line="3" pos:column="35"/></name> <init pos:line="3" pos:column="36">= <expr><operator pos:line="3" pos:column="38">&amp;<pos:position pos:line="3" pos:column="43"/></operator><name><name pos:line="3" pos:column="39">conn<pos:position pos:line="3" pos:column="43"/></name><operator pos:line="3" pos:column="43">-&gt;<pos:position pos:line="3" pos:column="48"/></operator><name pos:line="3" pos:column="45">ssl<pos:position pos:line="3" pos:column="48"/></name><index pos:line="3" pos:column="48">[<expr><name pos:line="3" pos:column="49">sockindex<pos:position pos:line="3" pos:column="58"/></name></expr>]<pos:position pos:line="3" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="3" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">SSL_CTX<pos:position pos:line="5" pos:column="10"/></name> <modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">ssl_ctx<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">SSL<pos:position pos:line="6" pos:column="6"/></name> <modifier pos:line="6" pos:column="7">*<pos:position pos:line="6" pos:column="8"/></modifier></type><name pos:line="6" pos:column="8">ssl<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name><name pos:line="7" pos:column="7">cert_types<pos:position pos:line="7" pos:column="17"/></name><index pos:line="7" pos:column="17">[]<pos:position pos:line="7" pos:column="19"/></index></name> <init pos:line="7" pos:column="20">= <expr><block pos:line="7" pos:column="22">{<expr><name pos:line="7" pos:column="23">SSL_OBJ_X509_CERT<pos:position pos:line="7" pos:column="40"/></name></expr>, <expr><name pos:line="7" pos:column="42">SSL_OBJ_PKCS12<pos:position pos:line="7" pos:column="56"/></name></expr>, <expr><literal type="number" pos:line="7" pos:column="58">0<pos:position pos:line="7" pos:column="59"/></literal></expr>}<pos:position pos:line="7" pos:column="60"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name><name pos:line="8" pos:column="7">key_types<pos:position pos:line="8" pos:column="16"/></name><index pos:line="8" pos:column="16">[]<pos:position pos:line="8" pos:column="18"/></index></name> <init pos:line="8" pos:column="19">= <expr><block pos:line="8" pos:column="21">{<expr><name pos:line="8" pos:column="22">SSL_OBJ_RSA_KEY<pos:position pos:line="8" pos:column="37"/></name></expr>, <expr><name pos:line="8" pos:column="39">SSL_OBJ_PKCS8<pos:position pos:line="8" pos:column="52"/></name></expr>, <expr><name pos:line="8" pos:column="54">SSL_OBJ_PKCS12<pos:position pos:line="8" pos:column="68"/></name></expr>, <expr><literal type="number" pos:line="8" pos:column="70">0<pos:position pos:line="8" pos:column="71"/></literal></expr>}<pos:position pos:line="8" pos:column="72"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="73"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">i<pos:position pos:line="9" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="10">ssl_fcn_return<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Assuming users will not compile in custom key/cert to axTLS.
  *  Also, even for blocking connects, use axTLS non-blocking feature.
  */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">uint32_t<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">client_option<pos:position pos:line="14" pos:column="25"/></name> <init pos:line="14" pos:column="26">= <expr><name pos:line="14" pos:column="28">SSL_NO_DEFAULT_KEY<pos:position pos:line="14" pos:column="46"/></name> <operator pos:line="14" pos:column="47">|<pos:position pos:line="14" pos:column="48"/></operator>
    <name pos:line="15" pos:column="5">SSL_SERVER_VERIFY_LATER<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">|<pos:position pos:line="15" pos:column="30"/></operator>
    <name pos:line="16" pos:column="5">SSL_CONNECT_IN_PARTS<pos:position pos:line="16" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="26"/></decl_stmt>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name><name pos:line="18" pos:column="6">connssl<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">-&gt;<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="15">state<pos:position pos:line="18" pos:column="20"/></name></name> <operator pos:line="18" pos:column="21">==<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">ssl_connection_complete<pos:position pos:line="18" pos:column="47"/></name></expr>)<pos:position pos:line="18" pos:column="48"/></condition><then pos:line="18" pos:column="48">
    <comment type="block" pos:line="19" pos:column="5">/* to make us tolerant against being called more than once for the
       same connection */</comment>
    <block type="pseudo"><return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">CURLE_OK<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></return></block></then></if>

  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><call><name pos:line="23" pos:column="6">SSL_CONN_CONFIG<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">version_max<pos:position pos:line="23" pos:column="33"/></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call> <operator pos:line="23" pos:column="35">!=<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="38">CURL_SSLVERSION_MAX_NONE<pos:position pos:line="23" pos:column="62"/></name></expr>)<pos:position pos:line="23" pos:column="63"/></condition><then pos:line="23" pos:column="63"> <block pos:line="23" pos:column="64">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">failf<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><name pos:line="24" pos:column="11">data<pos:position pos:line="24" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="17">"axtls does not support CURL_SSLVERSION_MAX"<pos:position pos:line="24" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="25" pos:column="35"/></name></expr>;<pos:position pos:line="25" pos:column="36"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>


  <comment type="block" pos:line="29" pos:column="3">/* axTLS only supports TLSv1 */</comment>
  <comment type="block" pos:line="30" pos:column="3">/* check to see if we've been told to use an explicit SSL/TLS version */</comment>
  <switch pos:line="31" pos:column="3">switch<condition pos:line="31" pos:column="9">(<expr><call><name pos:line="31" pos:column="10">SSL_CONN_CONFIG<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">version<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition> <block pos:line="31" pos:column="36">{
  <case pos:line="32" pos:column="3">case <expr><name pos:line="32" pos:column="8">CURL_SSLVERSION_DEFAULT<pos:position pos:line="32" pos:column="31"/></name></expr>:<pos:position pos:line="32" pos:column="32"/></case>
  <case pos:line="33" pos:column="3">case <expr><name pos:line="33" pos:column="8">CURL_SSLVERSION_TLSv1<pos:position pos:line="33" pos:column="29"/></name></expr>:<pos:position pos:line="33" pos:column="30"/></case>
    <break pos:line="34" pos:column="5">break;<pos:position pos:line="34" pos:column="11"/></break>
  <default pos:line="35" pos:column="3">default:<pos:position pos:line="35" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">failf<pos:position pos:line="36" pos:column="10"/></name><argument_list pos:line="36" pos:column="10">(<argument><expr><name pos:line="36" pos:column="11">data<pos:position pos:line="36" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="17">"axTLS only supports TLS 1.0 and 1.1, "<pos:position pos:line="36" pos:column="56"/></literal>
          <literal type="string" pos:line="37" pos:column="11">"and it cannot be specified which one to use"<pos:position pos:line="37" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt>
    <return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="38" pos:column="35"/></name></expr>;<pos:position pos:line="38" pos:column="36"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></switch>

<cpp:ifdef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifdef<pos:position pos:line="41" pos:column="7"/></cpp:directive>  <name pos:line="41" pos:column="9">AXTLSDEBUG<pos:position pos:line="41" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="42" pos:column="3">client_option<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">|=<pos:position pos:line="42" pos:column="19"/></operator> <name pos:line="42" pos:column="20">SSL_DISPLAY_STATES<pos:position pos:line="42" pos:column="38"/></name> <operator pos:line="42" pos:column="39">|<pos:position pos:line="42" pos:column="40"/></operator> <name pos:line="42" pos:column="41">SSL_DISPLAY_RSA<pos:position pos:line="42" pos:column="56"/></name> <operator pos:line="42" pos:column="57">|<pos:position pos:line="42" pos:column="58"/></operator> <name pos:line="42" pos:column="59">SSL_DISPLAY_CERTS<pos:position pos:line="42" pos:column="76"/></name></expr>;<pos:position pos:line="42" pos:column="77"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="43" pos:column="8">/* AXTLSDEBUG */</comment>

  <comment type="block" pos:line="45" pos:column="3">/* Allocate an SSL_CTX struct */</comment>
  <expr_stmt><expr><name pos:line="46" pos:column="3">ssl_ctx<pos:position pos:line="46" pos:column="10"/></name> <operator pos:line="46" pos:column="11">=<pos:position pos:line="46" pos:column="12"/></operator> <call><name pos:line="46" pos:column="13">ssl_ctx_new<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">client_option<pos:position pos:line="46" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="40">SSL_DEFAULT_CLNT_SESS<pos:position pos:line="46" pos:column="61"/></name></expr></argument>)<pos:position pos:line="46" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="63"/></expr_stmt>
  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><name pos:line="47" pos:column="6">ssl_ctx<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">==<pos:position pos:line="47" pos:column="16"/></operator> <name pos:line="47" pos:column="17">NULL<pos:position pos:line="47" pos:column="21"/></name></expr>)<pos:position pos:line="47" pos:column="22"/></condition><then pos:line="47" pos:column="22"> <block pos:line="47" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">failf<pos:position pos:line="48" pos:column="10"/></name><argument_list pos:line="48" pos:column="10">(<argument><expr><name pos:line="48" pos:column="11">data<pos:position pos:line="48" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="17">"unable to create client SSL context"<pos:position pos:line="48" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="56"/></expr_stmt>
    <return pos:line="49" pos:column="5">return <expr><name pos:line="49" pos:column="12">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="49" pos:column="35"/></name></expr>;<pos:position pos:line="49" pos:column="36"/></return>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="52" pos:column="3">BACKEND<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">ssl_ctx<pos:position pos:line="52" pos:column="19"/></name></name> <operator pos:line="52" pos:column="20">=<pos:position pos:line="52" pos:column="21"/></operator> <name pos:line="52" pos:column="22">ssl_ctx<pos:position pos:line="52" pos:column="29"/></name></expr>;<pos:position pos:line="52" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="53" pos:column="3">BACKEND<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">-&gt;<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="12">ssl<pos:position pos:line="53" pos:column="15"/></name></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">NULL<pos:position pos:line="53" pos:column="22"/></name></expr>;<pos:position pos:line="53" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="55" pos:column="3">/* Load the trusted CA cert bundle file */</comment>
  <if pos:line="56" pos:column="3">if<condition pos:line="56" pos:column="5">(<expr><call><name pos:line="56" pos:column="6">SSL_CONN_CONFIG<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">CAfile<pos:position pos:line="56" pos:column="28"/></name></expr></argument>)<pos:position pos:line="56" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="30"/></condition><then pos:line="56" pos:column="30"> <block pos:line="56" pos:column="31">{
    <if pos:line="57" pos:column="5">if<condition pos:line="57" pos:column="7">(<expr><call><name pos:line="57" pos:column="8">ssl_obj_load<pos:position pos:line="57" pos:column="20"/></name><argument_list pos:line="57" pos:column="20">(<argument><expr><name pos:line="57" pos:column="21">ssl_ctx<pos:position pos:line="57" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="30">SSL_OBJ_X509_CACERT<pos:position pos:line="57" pos:column="49"/></name></expr></argument>,
                    <argument><expr><call><name pos:line="58" pos:column="21">SSL_CONN_CONFIG<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">(<argument><expr><name pos:line="58" pos:column="37">CAfile<pos:position pos:line="58" pos:column="43"/></name></expr></argument>)<pos:position pos:line="58" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="58" pos:column="46">NULL<pos:position pos:line="58" pos:column="50"/></name></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call> <operator pos:line="58" pos:column="52">!=<pos:position pos:line="58" pos:column="54"/></operator> <name pos:line="58" pos:column="55">SSL_OK<pos:position pos:line="58" pos:column="61"/></name></expr>)<pos:position pos:line="58" pos:column="62"/></condition><then pos:line="58" pos:column="62"> <block pos:line="58" pos:column="63">{
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">infof<pos:position pos:line="59" pos:column="12"/></name><argument_list pos:line="59" pos:column="12">(<argument><expr><name pos:line="59" pos:column="13">data<pos:position pos:line="59" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="19">"error reading ca cert file %s \n"<pos:position pos:line="59" pos:column="53"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="60" pos:column="13">SSL_CONN_CONFIG<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">CAfile<pos:position pos:line="60" pos:column="35"/></name></expr></argument>)<pos:position pos:line="60" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="38"/></expr_stmt>
      <if pos:line="61" pos:column="7">if<condition pos:line="61" pos:column="9">(<expr><call><name pos:line="61" pos:column="10">SSL_CONN_CONFIG<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">verifypeer<pos:position pos:line="61" pos:column="36"/></name></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="38"/></condition><then pos:line="61" pos:column="38"> <block pos:line="61" pos:column="39">{
        <return pos:line="62" pos:column="9">return <expr><name pos:line="62" pos:column="16">CURLE_SSL_CACERT_BADFILE<pos:position pos:line="62" pos:column="40"/></name></expr>;<pos:position pos:line="62" pos:column="41"/></return>
      }<pos:position pos:line="63" pos:column="8"/></block></then></if>
    }<pos:position pos:line="64" pos:column="6"/></block></then>
    <else pos:line="65" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="7">infof<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><name pos:line="66" pos:column="13">data<pos:position pos:line="66" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="19">"found certificates in %s\n"<pos:position pos:line="66" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="49">SSL_CONN_CONFIG<pos:position pos:line="66" pos:column="64"/></name><argument_list pos:line="66" pos:column="64">(<argument><expr><name pos:line="66" pos:column="65">CAfile<pos:position pos:line="66" pos:column="71"/></name></expr></argument>)<pos:position pos:line="66" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="74"/></expr_stmt></block></else></if>
  }<pos:position pos:line="67" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="69" pos:column="3">/* gtls.c tasks we're skipping for now:
   * 1) certificate revocation list checking
   * 2) dns name assignment to host
   * 3) set protocol priority.  axTLS is TLSv1 only, so can probably ignore
   * 4) set certificate priority.  axTLS ignores type and sends certs in
   *  order added.  can probably ignore this.
   */</comment>

  <comment type="block" pos:line="77" pos:column="3">/* Load client certificate */</comment>
  <if pos:line="78" pos:column="3">if<condition pos:line="78" pos:column="5">(<expr><call><name pos:line="78" pos:column="6">SSL_SET_OPTION<pos:position pos:line="78" pos:column="20"/></name><argument_list pos:line="78" pos:column="20">(<argument><expr><name pos:line="78" pos:column="21">cert<pos:position pos:line="78" pos:column="25"/></name></expr></argument>)<pos:position pos:line="78" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="27"/></condition><then pos:line="78" pos:column="27"> <block pos:line="78" pos:column="28">{
    <expr_stmt><expr><name pos:line="79" pos:column="5">i<pos:position pos:line="79" pos:column="6"/></name> <operator pos:line="79" pos:column="7">=<pos:position pos:line="79" pos:column="8"/></operator> <literal type="number" pos:line="79" pos:column="9">0<pos:position pos:line="79" pos:column="10"/></literal></expr>;<pos:position pos:line="79" pos:column="11"/></expr_stmt>
    <comment type="block" pos:line="80" pos:column="5">/* Instead of trying to analyze cert type here, let axTLS try them all. */</comment>
    <while pos:line="81" pos:column="5">while<condition pos:line="81" pos:column="10">(<expr><name><name pos:line="81" pos:column="11">cert_types<pos:position pos:line="81" pos:column="21"/></name><index pos:line="81" pos:column="21">[<expr><name pos:line="81" pos:column="22">i<pos:position pos:line="81" pos:column="23"/></name></expr>]<pos:position pos:line="81" pos:column="24"/></index></name> <operator pos:line="81" pos:column="25">!=<pos:position pos:line="81" pos:column="27"/></operator> <literal type="number" pos:line="81" pos:column="28">0<pos:position pos:line="81" pos:column="29"/></literal></expr>)<pos:position pos:line="81" pos:column="30"/></condition> <block pos:line="81" pos:column="31">{
      <expr_stmt><expr><name pos:line="82" pos:column="7">ssl_fcn_return<pos:position pos:line="82" pos:column="21"/></name> <operator pos:line="82" pos:column="22">=<pos:position pos:line="82" pos:column="23"/></operator> <call><name pos:line="82" pos:column="24">ssl_obj_load<pos:position pos:line="82" pos:column="36"/></name><argument_list pos:line="82" pos:column="36">(<argument><expr><name pos:line="82" pos:column="37">ssl_ctx<pos:position pos:line="82" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="46">cert_types<pos:position pos:line="82" pos:column="56"/></name><index pos:line="82" pos:column="56">[<expr><name pos:line="82" pos:column="57">i<pos:position pos:line="82" pos:column="58"/></name></expr>]<pos:position pos:line="82" pos:column="59"/></index></name></expr></argument>,
                                    <argument><expr><call><name pos:line="83" pos:column="37">SSL_SET_OPTION<pos:position pos:line="83" pos:column="51"/></name><argument_list pos:line="83" pos:column="51">(<argument><expr><name pos:line="83" pos:column="52">cert<pos:position pos:line="83" pos:column="56"/></name></expr></argument>)<pos:position pos:line="83" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="83" pos:column="59">NULL<pos:position pos:line="83" pos:column="63"/></name></expr></argument>)<pos:position pos:line="83" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="65"/></expr_stmt>
      <if pos:line="84" pos:column="7">if<condition pos:line="84" pos:column="9">(<expr><name pos:line="84" pos:column="10">ssl_fcn_return<pos:position pos:line="84" pos:column="24"/></name> <operator pos:line="84" pos:column="25">==<pos:position pos:line="84" pos:column="27"/></operator> <name pos:line="84" pos:column="28">SSL_OK<pos:position pos:line="84" pos:column="34"/></name></expr>)<pos:position pos:line="84" pos:column="35"/></condition><then pos:line="84" pos:column="35"> <block pos:line="84" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">infof<pos:position pos:line="85" pos:column="14"/></name><argument_list pos:line="85" pos:column="14">(<argument><expr><name pos:line="85" pos:column="15">data<pos:position pos:line="85" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="21">"successfully read cert file %s \n"<pos:position pos:line="85" pos:column="56"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="86" pos:column="15">SSL_SET_OPTION<pos:position pos:line="86" pos:column="29"/></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">cert<pos:position pos:line="86" pos:column="34"/></name></expr></argument>)<pos:position pos:line="86" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="86" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="37"/></expr_stmt>
        <break pos:line="87" pos:column="9">break;<pos:position pos:line="87" pos:column="15"/></break>
      }<pos:position pos:line="88" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="89" pos:column="7">i<pos:position pos:line="89" pos:column="8"/></name><operator pos:line="89" pos:column="8">++<pos:position pos:line="89" pos:column="10"/></operator></expr>;<pos:position pos:line="89" pos:column="11"/></expr_stmt>
    }<pos:position pos:line="90" pos:column="6"/></block></while>
    <comment type="block" pos:line="91" pos:column="5">/* Tried all cert types, none worked. */</comment>
    <if pos:line="92" pos:column="5">if<condition pos:line="92" pos:column="7">(<expr><name><name pos:line="92" pos:column="8">cert_types<pos:position pos:line="92" pos:column="18"/></name><index pos:line="92" pos:column="18">[<expr><name pos:line="92" pos:column="19">i<pos:position pos:line="92" pos:column="20"/></name></expr>]<pos:position pos:line="92" pos:column="21"/></index></name> <operator pos:line="92" pos:column="22">==<pos:position pos:line="92" pos:column="24"/></operator> <literal type="number" pos:line="92" pos:column="25">0<pos:position pos:line="92" pos:column="26"/></literal></expr>)<pos:position pos:line="92" pos:column="27"/></condition><then pos:line="92" pos:column="27"> <block pos:line="92" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="93" pos:column="7">failf<pos:position pos:line="93" pos:column="12"/></name><argument_list pos:line="93" pos:column="12">(<argument><expr><name pos:line="93" pos:column="13">data<pos:position pos:line="93" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="19">"%s is not x509 or pkcs12 format"<pos:position pos:line="93" pos:column="52"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="94" pos:column="13">SSL_SET_OPTION<pos:position pos:line="94" pos:column="27"/></name><argument_list pos:line="94" pos:column="27">(<argument><expr><name pos:line="94" pos:column="28">cert<pos:position pos:line="94" pos:column="32"/></name></expr></argument>)<pos:position pos:line="94" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="94" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="35"/></expr_stmt>
      <return pos:line="95" pos:column="7">return <expr><name pos:line="95" pos:column="14">CURLE_SSL_CERTPROBLEM<pos:position pos:line="95" pos:column="35"/></name></expr>;<pos:position pos:line="95" pos:column="36"/></return>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>
  }<pos:position pos:line="97" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="99" pos:column="3">/* Load client key.
     If a pkcs12 file successfully loaded a cert, then there's nothing to do
     because the key has already been loaded. */</comment>
  <if pos:line="102" pos:column="3">if<condition pos:line="102" pos:column="5">(<expr><call><name pos:line="102" pos:column="6">SSL_SET_OPTION<pos:position pos:line="102" pos:column="20"/></name><argument_list pos:line="102" pos:column="20">(<argument><expr><name pos:line="102" pos:column="21">key<pos:position pos:line="102" pos:column="24"/></name></expr></argument>)<pos:position pos:line="102" pos:column="25"/></argument_list></call> <operator pos:line="102" pos:column="26">&amp;&amp;<pos:position pos:line="102" pos:column="36"/></operator> <name><name pos:line="102" pos:column="29">cert_types<pos:position pos:line="102" pos:column="39"/></name><index pos:line="102" pos:column="39">[<expr><name pos:line="102" pos:column="40">i<pos:position pos:line="102" pos:column="41"/></name></expr>]<pos:position pos:line="102" pos:column="42"/></index></name> <operator pos:line="102" pos:column="43">!=<pos:position pos:line="102" pos:column="45"/></operator> <name pos:line="102" pos:column="46">SSL_OBJ_PKCS12<pos:position pos:line="102" pos:column="60"/></name></expr>)<pos:position pos:line="102" pos:column="61"/></condition><then pos:line="102" pos:column="61"> <block pos:line="102" pos:column="62">{
    <expr_stmt><expr><name pos:line="103" pos:column="5">i<pos:position pos:line="103" pos:column="6"/></name> <operator pos:line="103" pos:column="7">=<pos:position pos:line="103" pos:column="8"/></operator> <literal type="number" pos:line="103" pos:column="9">0<pos:position pos:line="103" pos:column="10"/></literal></expr>;<pos:position pos:line="103" pos:column="11"/></expr_stmt>
    <comment type="block" pos:line="104" pos:column="5">/* Instead of trying to analyze key type here, let axTLS try them all. */</comment>
    <while pos:line="105" pos:column="5">while<condition pos:line="105" pos:column="10">(<expr><name><name pos:line="105" pos:column="11">key_types<pos:position pos:line="105" pos:column="20"/></name><index pos:line="105" pos:column="20">[<expr><name pos:line="105" pos:column="21">i<pos:position pos:line="105" pos:column="22"/></name></expr>]<pos:position pos:line="105" pos:column="23"/></index></name> <operator pos:line="105" pos:column="24">!=<pos:position pos:line="105" pos:column="26"/></operator> <literal type="number" pos:line="105" pos:column="27">0<pos:position pos:line="105" pos:column="28"/></literal></expr>)<pos:position pos:line="105" pos:column="29"/></condition> <block pos:line="105" pos:column="30">{
      <expr_stmt><expr><name pos:line="106" pos:column="7">ssl_fcn_return<pos:position pos:line="106" pos:column="21"/></name> <operator pos:line="106" pos:column="22">=<pos:position pos:line="106" pos:column="23"/></operator> <call><name pos:line="106" pos:column="24">ssl_obj_load<pos:position pos:line="106" pos:column="36"/></name><argument_list pos:line="106" pos:column="36">(<argument><expr><name pos:line="106" pos:column="37">ssl_ctx<pos:position pos:line="106" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="46">key_types<pos:position pos:line="106" pos:column="55"/></name><index pos:line="106" pos:column="55">[<expr><name pos:line="106" pos:column="56">i<pos:position pos:line="106" pos:column="57"/></name></expr>]<pos:position pos:line="106" pos:column="58"/></index></name></expr></argument>,
                                    <argument><expr><call><name pos:line="107" pos:column="37">SSL_SET_OPTION<pos:position pos:line="107" pos:column="51"/></name><argument_list pos:line="107" pos:column="51">(<argument><expr><name pos:line="107" pos:column="52">key<pos:position pos:line="107" pos:column="55"/></name></expr></argument>)<pos:position pos:line="107" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="107" pos:column="58">NULL<pos:position pos:line="107" pos:column="62"/></name></expr></argument>)<pos:position pos:line="107" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="64"/></expr_stmt>
      <if pos:line="108" pos:column="7">if<condition pos:line="108" pos:column="9">(<expr><name pos:line="108" pos:column="10">ssl_fcn_return<pos:position pos:line="108" pos:column="24"/></name> <operator pos:line="108" pos:column="25">==<pos:position pos:line="108" pos:column="27"/></operator> <name pos:line="108" pos:column="28">SSL_OK<pos:position pos:line="108" pos:column="34"/></name></expr>)<pos:position pos:line="108" pos:column="35"/></condition><then pos:line="108" pos:column="35"> <block pos:line="108" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">infof<pos:position pos:line="109" pos:column="14"/></name><argument_list pos:line="109" pos:column="14">(<argument><expr><name pos:line="109" pos:column="15">data<pos:position pos:line="109" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="21">"successfully read key file %s \n"<pos:position pos:line="109" pos:column="55"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="110" pos:column="15">SSL_SET_OPTION<pos:position pos:line="110" pos:column="29"/></name><argument_list pos:line="110" pos:column="29">(<argument><expr><name pos:line="110" pos:column="30">key<pos:position pos:line="110" pos:column="33"/></name></expr></argument>)<pos:position pos:line="110" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="110" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="36"/></expr_stmt>
        <break pos:line="111" pos:column="9">break;<pos:position pos:line="111" pos:column="15"/></break>
      }<pos:position pos:line="112" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="113" pos:column="7">i<pos:position pos:line="113" pos:column="8"/></name><operator pos:line="113" pos:column="8">++<pos:position pos:line="113" pos:column="10"/></operator></expr>;<pos:position pos:line="113" pos:column="11"/></expr_stmt>
    }<pos:position pos:line="114" pos:column="6"/></block></while>
    <comment type="block" pos:line="115" pos:column="5">/* Tried all key types, none worked. */</comment>
    <if pos:line="116" pos:column="5">if<condition pos:line="116" pos:column="7">(<expr><name><name pos:line="116" pos:column="8">key_types<pos:position pos:line="116" pos:column="17"/></name><index pos:line="116" pos:column="17">[<expr><name pos:line="116" pos:column="18">i<pos:position pos:line="116" pos:column="19"/></name></expr>]<pos:position pos:line="116" pos:column="20"/></index></name> <operator pos:line="116" pos:column="21">==<pos:position pos:line="116" pos:column="23"/></operator> <literal type="number" pos:line="116" pos:column="24">0<pos:position pos:line="116" pos:column="25"/></literal></expr>)<pos:position pos:line="116" pos:column="26"/></condition><then pos:line="116" pos:column="26"> <block pos:line="116" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="117" pos:column="7">failf<pos:position pos:line="117" pos:column="12"/></name><argument_list pos:line="117" pos:column="12">(<argument><expr><name pos:line="117" pos:column="13">data<pos:position pos:line="117" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="19">"Failure: %s is not a supported key file"<pos:position pos:line="117" pos:column="60"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="118" pos:column="13">SSL_SET_OPTION<pos:position pos:line="118" pos:column="27"/></name><argument_list pos:line="118" pos:column="27">(<argument><expr><name pos:line="118" pos:column="28">key<pos:position pos:line="118" pos:column="31"/></name></expr></argument>)<pos:position pos:line="118" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="118" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="34"/></expr_stmt>
      <return pos:line="119" pos:column="7">return <expr><name pos:line="119" pos:column="14">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="119" pos:column="37"/></name></expr>;<pos:position pos:line="119" pos:column="38"/></return>
    }<pos:position pos:line="120" pos:column="6"/></block></then></if>
  }<pos:position pos:line="121" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="123" pos:column="3">/* gtls.c does more here that is being left out for now
   * 1) set session credentials.  can probably ignore since axtls puts this
   *    info in the ssl_ctx struct
   * 2) setting up callbacks.  these seem gnutls specific
   */</comment>

  <if pos:line="129" pos:column="3">if<condition pos:line="129" pos:column="5">(<expr><call><name pos:line="129" pos:column="6">SSL_SET_OPTION<pos:position pos:line="129" pos:column="20"/></name><argument_list pos:line="129" pos:column="20">(<argument><expr><name><name pos:line="129" pos:column="21">primary<pos:position pos:line="129" pos:column="28"/></name><operator pos:line="129" pos:column="28">.<pos:position pos:line="129" pos:column="29"/></operator><name pos:line="129" pos:column="29">sessionid<pos:position pos:line="129" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="129" pos:column="40"/></condition><then pos:line="129" pos:column="40"> <block pos:line="129" pos:column="41">{
    <decl_stmt><decl><type><specifier pos:line="130" pos:column="5">const<pos:position pos:line="130" pos:column="10"/></specifier> <name pos:line="130" pos:column="11">uint8_t<pos:position pos:line="130" pos:column="18"/></name> <modifier pos:line="130" pos:column="19">*<pos:position pos:line="130" pos:column="20"/></modifier></type><name pos:line="130" pos:column="20">ssl_sessionid<pos:position pos:line="130" pos:column="33"/></name></decl>;<pos:position pos:line="130" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="131" pos:column="5">size_t<pos:position pos:line="131" pos:column="11"/></name></type> <name pos:line="131" pos:column="12">ssl_idsize<pos:position pos:line="131" pos:column="22"/></name></decl>;<pos:position pos:line="131" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="133" pos:column="5">/* In axTLS, handshaking happens inside ssl_client_new. */</comment>
    <expr_stmt><expr><call><name pos:line="134" pos:column="5">Curl_ssl_sessionid_lock<pos:position pos:line="134" pos:column="28"/></name><argument_list pos:line="134" pos:column="28">(<argument><expr><name pos:line="134" pos:column="29">conn<pos:position pos:line="134" pos:column="33"/></name></expr></argument>)<pos:position pos:line="134" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="35"/></expr_stmt>
    <if pos:line="135" pos:column="5">if<condition pos:line="135" pos:column="7">(<expr><operator pos:line="135" pos:column="8">!<pos:position pos:line="135" pos:column="9"/></operator><call><name pos:line="135" pos:column="9">Curl_ssl_getsessionid<pos:position pos:line="135" pos:column="30"/></name><argument_list pos:line="135" pos:column="30">(<argument><expr><name pos:line="135" pos:column="31">conn<pos:position pos:line="135" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="135" pos:column="37">(<pos:position pos:line="135" pos:column="38"/></operator><name pos:line="135" pos:column="38">void<pos:position pos:line="135" pos:column="42"/></name> <operator pos:line="135" pos:column="43">*<pos:position pos:line="135" pos:column="44"/></operator><operator pos:line="135" pos:column="44">*<pos:position pos:line="135" pos:column="45"/></operator><operator pos:line="135" pos:column="45">)<pos:position pos:line="135" pos:column="46"/></operator> <operator pos:line="135" pos:column="47">&amp;<pos:position pos:line="135" pos:column="52"/></operator><name pos:line="135" pos:column="48">ssl_sessionid<pos:position pos:line="135" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="135" pos:column="63">&amp;<pos:position pos:line="135" pos:column="68"/></operator><name pos:line="135" pos:column="64">ssl_idsize<pos:position pos:line="135" pos:column="74"/></name></expr></argument>,
                              <argument><expr><name pos:line="136" pos:column="31">sockindex<pos:position pos:line="136" pos:column="40"/></name></expr></argument>)<pos:position pos:line="136" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="136" pos:column="42"/></condition><then pos:line="136" pos:column="42"> <block pos:line="136" pos:column="43">{
      <comment type="block" pos:line="137" pos:column="7">/* we got a session id, use it! */</comment>
      <expr_stmt><expr><call><name pos:line="138" pos:column="7">infof<pos:position pos:line="138" pos:column="12"/></name><argument_list pos:line="138" pos:column="12">(<argument><expr><name pos:line="138" pos:column="13">data<pos:position pos:line="138" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="138" pos:column="19">"SSL re-using session ID\n"<pos:position pos:line="138" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name pos:line="139" pos:column="7">ssl<pos:position pos:line="139" pos:column="10"/></name> <operator pos:line="139" pos:column="11">=<pos:position pos:line="139" pos:column="12"/></operator> <call><name pos:line="139" pos:column="13">ssl_client_new<pos:position pos:line="139" pos:column="27"/></name><argument_list pos:line="139" pos:column="27">(<argument><expr><name pos:line="139" pos:column="28">ssl_ctx<pos:position pos:line="139" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="37">conn<pos:position pos:line="139" pos:column="41"/></name><operator pos:line="139" pos:column="41">-&gt;<pos:position pos:line="139" pos:column="46"/></operator><name pos:line="139" pos:column="43">sock<pos:position pos:line="139" pos:column="47"/></name><index pos:line="139" pos:column="47">[<expr><name pos:line="139" pos:column="48">sockindex<pos:position pos:line="139" pos:column="57"/></name></expr>]<pos:position pos:line="139" pos:column="58"/></index></name></expr></argument>,
                           <argument><expr><name pos:line="140" pos:column="28">ssl_sessionid<pos:position pos:line="140" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="140" pos:column="43">(<pos:position pos:line="140" pos:column="44"/></operator><name pos:line="140" pos:column="44">uint8_t<pos:position pos:line="140" pos:column="51"/></name><operator pos:line="140" pos:column="51">)<pos:position pos:line="140" pos:column="52"/></operator><name pos:line="140" pos:column="52">ssl_idsize<pos:position pos:line="140" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="64">NULL<pos:position pos:line="140" pos:column="68"/></name></expr></argument>)<pos:position pos:line="140" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="141" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="142" pos:column="5">Curl_ssl_sessionid_unlock<pos:position pos:line="142" pos:column="30"/></name><argument_list pos:line="142" pos:column="30">(<argument><expr><name pos:line="142" pos:column="31">conn<pos:position pos:line="142" pos:column="35"/></name></expr></argument>)<pos:position pos:line="142" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="143" pos:column="4"/></block></then></if>

  <if pos:line="145" pos:column="3">if<condition pos:line="145" pos:column="5">(<expr><operator pos:line="145" pos:column="6">!<pos:position pos:line="145" pos:column="7"/></operator><name pos:line="145" pos:column="7">ssl<pos:position pos:line="145" pos:column="10"/></name></expr>)<pos:position pos:line="145" pos:column="11"/></condition><then pos:line="145" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><name pos:line="146" pos:column="5">ssl<pos:position pos:line="146" pos:column="8"/></name> <operator pos:line="146" pos:column="9">=<pos:position pos:line="146" pos:column="10"/></operator> <call><name pos:line="146" pos:column="11">ssl_client_new<pos:position pos:line="146" pos:column="25"/></name><argument_list pos:line="146" pos:column="25">(<argument><expr><name pos:line="146" pos:column="26">ssl_ctx<pos:position pos:line="146" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="35">conn<pos:position pos:line="146" pos:column="39"/></name><operator pos:line="146" pos:column="39">-&gt;<pos:position pos:line="146" pos:column="44"/></operator><name pos:line="146" pos:column="41">sock<pos:position pos:line="146" pos:column="45"/></name><index pos:line="146" pos:column="45">[<expr><name pos:line="146" pos:column="46">sockindex<pos:position pos:line="146" pos:column="55"/></name></expr>]<pos:position pos:line="146" pos:column="56"/></index></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="58">NULL<pos:position pos:line="146" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="146" pos:column="64">0<pos:position pos:line="146" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="67">NULL<pos:position pos:line="146" pos:column="71"/></name></expr></argument>)<pos:position pos:line="146" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="73"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name><name pos:line="148" pos:column="3">BACKEND<pos:position pos:line="148" pos:column="10"/></name><operator pos:line="148" pos:column="10">-&gt;<pos:position pos:line="148" pos:column="15"/></operator><name pos:line="148" pos:column="12">ssl<pos:position pos:line="148" pos:column="15"/></name></name> <operator pos:line="148" pos:column="16">=<pos:position pos:line="148" pos:column="17"/></operator> <name pos:line="148" pos:column="18">ssl<pos:position pos:line="148" pos:column="21"/></name></expr>;<pos:position pos:line="148" pos:column="22"/></expr_stmt>
  <return pos:line="149" pos:column="3">return <expr><name pos:line="149" pos:column="10">CURLE_OK<pos:position pos:line="149" pos:column="18"/></name></expr>;<pos:position pos:line="149" pos:column="19"/></return>
}<pos:position pos:line="150" pos:column="2"/></block></function></unit>
