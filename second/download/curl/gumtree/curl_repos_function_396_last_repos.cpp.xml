<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_396_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">test<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">char<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">URL<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">res<pos:position pos:line="3" pos:column="10"/></name> <init pos:line="3" pos:column="11">= <expr><literal type="number" pos:line="3" pos:column="13">0<pos:position pos:line="3" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURL<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name><name pos:line="4" pos:column="9">curl<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">NUM_HANDLES<pos:position pos:line="4" pos:column="25"/></name></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">running<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLM<pos:position pos:line="6" pos:column="8"/></name> <modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type><name pos:line="6" pos:column="10">m<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">current<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">i<pos:position pos:line="8" pos:column="8"/></name></decl>;<pos:position pos:line="8" pos:column="9"/></decl_stmt>

  <for pos:line="10" pos:column="3">for<control pos:line="10" pos:column="6">(<init><expr><name pos:line="10" pos:column="7">i<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <literal type="number" pos:line="10" pos:column="11">0<pos:position pos:line="10" pos:column="12"/></literal></expr>;<pos:position pos:line="10" pos:column="13"/></init> <condition><expr><name pos:line="10" pos:column="14">i<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">&lt;<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="18">NUM_HANDLES<pos:position pos:line="10" pos:column="29"/></name></expr>;<pos:position pos:line="10" pos:column="30"/></condition> <incr><expr><name pos:line="10" pos:column="31">i<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">++<pos:position pos:line="10" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="35"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="5">curl<pos:position pos:line="11" pos:column="9"/></name><index pos:line="11" pos:column="9">[<expr><name pos:line="11" pos:column="10">i<pos:position pos:line="11" pos:column="11"/></name></expr>]<pos:position pos:line="11" pos:column="12"/></index></name> <operator pos:line="11" pos:column="13">=<pos:position pos:line="11" pos:column="14"/></operator> <name pos:line="11" pos:column="15">NULL<pos:position pos:line="11" pos:column="19"/></name></expr>;<pos:position pos:line="11" pos:column="20"/></expr_stmt></block></for>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">start_test_timing<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">()<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">global_init<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">CURL_GLOBAL_ALL<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>

  <comment type="block" pos:line="17" pos:column="3">/* get NUM_HANDLES easy handles */</comment>
  <for pos:line="18" pos:column="3">for<control pos:line="18" pos:column="6">(<init><expr><name pos:line="18" pos:column="7">i<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <literal type="number" pos:line="18" pos:column="11">0<pos:position pos:line="18" pos:column="12"/></literal></expr>;<pos:position pos:line="18" pos:column="13"/></init> <condition><expr><name pos:line="18" pos:column="14">i<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">&lt;<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="18">NUM_HANDLES<pos:position pos:line="18" pos:column="29"/></name></expr>;<pos:position pos:line="18" pos:column="30"/></condition> <incr><expr><name pos:line="18" pos:column="31">i<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">++<pos:position pos:line="18" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="35"/></control> <block pos:line="18" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">easy_init<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name><name pos:line="19" pos:column="15">curl<pos:position pos:line="19" pos:column="19"/></name><index pos:line="19" pos:column="19">[<expr><name pos:line="19" pos:column="20">i<pos:position pos:line="19" pos:column="21"/></name></expr>]<pos:position pos:line="19" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
    <comment type="block" pos:line="20" pos:column="5">/* specify target */</comment>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">easy_setopt<pos:position pos:line="21" pos:column="16"/></name><argument_list pos:line="21" pos:column="16">(<argument><expr><name><name pos:line="21" pos:column="17">curl<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><name pos:line="21" pos:column="22">i<pos:position pos:line="21" pos:column="23"/></name></expr>]<pos:position pos:line="21" pos:column="24"/></index></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="26">CURLOPT_URL<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">URL<pos:position pos:line="21" pos:column="42"/></name></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt>
    <comment type="block" pos:line="22" pos:column="5">/* go verbose */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">easy_setopt<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name><name pos:line="23" pos:column="17">curl<pos:position pos:line="23" pos:column="21"/></name><index pos:line="23" pos:column="21">[<expr><name pos:line="23" pos:column="22">i<pos:position pos:line="23" pos:column="23"/></name></expr>]<pos:position pos:line="23" pos:column="24"/></index></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="26">CURLOPT_VERBOSE<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="43">1L<pos:position pos:line="23" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">multi_init<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">m<pos:position pos:line="26" pos:column="15"/></name></expr></argument>)<pos:position pos:line="26" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">multi_add_handle<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">m<pos:position pos:line="28" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="23">curl<pos:position pos:line="28" pos:column="27"/></name><index pos:line="28" pos:column="27">[<expr><name pos:line="28" pos:column="28">current<pos:position pos:line="28" pos:column="35"/></name></expr>]<pos:position pos:line="28" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="30" pos:column="3">fprintf<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><name pos:line="30" pos:column="11">stderr<pos:position pos:line="30" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="19">"Start at URL 0\n"<pos:position pos:line="30" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>

  <for pos:line="32" pos:column="3">for<control pos:line="32" pos:column="6">(<init pos:line="32" pos:column="7">;<pos:position pos:line="32" pos:column="8"/></init><condition pos:line="32" pos:column="8">;<pos:position pos:line="32" pos:column="9"/></condition><incr/>)<pos:position pos:line="32" pos:column="10"/></control> <block pos:line="32" pos:column="11">{
    <decl_stmt><decl><type><name><name pos:line="33" pos:column="5">struct<pos:position pos:line="33" pos:column="11"/></name> <name pos:line="33" pos:column="12">timeval<pos:position pos:line="33" pos:column="19"/></name></name></type> <name pos:line="33" pos:column="20">interval<pos:position pos:line="33" pos:column="28"/></name></decl>;<pos:position pos:line="33" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">fd_set<pos:position pos:line="34" pos:column="11"/></name></type> <name pos:line="34" pos:column="12">rd<pos:position pos:line="34" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="34" pos:column="16">wr<pos:position pos:line="34" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="34" pos:column="20">exc<pos:position pos:line="34" pos:column="23"/></name></decl>;<pos:position pos:line="34" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">int<pos:position pos:line="35" pos:column="8"/></name></type> <name pos:line="35" pos:column="9">maxfd<pos:position pos:line="35" pos:column="14"/></name> <init pos:line="35" pos:column="15">= <expr><operator pos:line="35" pos:column="17">-<pos:position pos:line="35" pos:column="18"/></operator><literal type="number" pos:line="35" pos:column="18">99<pos:position pos:line="35" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="35" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="37" pos:column="5">interval<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">.<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">tv_sec<pos:position pos:line="37" pos:column="20"/></name></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <literal type="number" pos:line="37" pos:column="23">1<pos:position pos:line="37" pos:column="24"/></literal></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">interval<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">.<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">tv_usec<pos:position pos:line="38" pos:column="21"/></name></name> <operator pos:line="38" pos:column="22">=<pos:position pos:line="38" pos:column="23"/></operator> <literal type="number" pos:line="38" pos:column="24">0<pos:position pos:line="38" pos:column="25"/></literal></expr>;<pos:position pos:line="38" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">multi_perform<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><name pos:line="40" pos:column="19">m<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="22">&amp;<pos:position pos:line="40" pos:column="27"/></operator><name pos:line="40" pos:column="23">running<pos:position pos:line="40" pos:column="30"/></name></expr></argument>)<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">abort_on_test_timeout<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">()<pos:position pos:line="42" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>

    <if pos:line="44" pos:column="5">if<condition pos:line="44" pos:column="7">(<expr><operator pos:line="44" pos:column="8">!<pos:position pos:line="44" pos:column="9"/></operator><name pos:line="44" pos:column="9">running<pos:position pos:line="44" pos:column="16"/></name></expr>)<pos:position pos:line="44" pos:column="17"/></condition><then pos:line="44" pos:column="17"> <block pos:line="44" pos:column="18">{
<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">LIB527<pos:position pos:line="45" pos:column="14"/></name></cpp:ifdef>
      <comment type="block" pos:line="46" pos:column="7">/* NOTE: this code does not remove the handle from the multi handle
         here, which would be the nice, sane and documented way of working.
         This however tests that the API survives this abuse gracefully. */</comment>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">curl_easy_cleanup<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name><name pos:line="49" pos:column="25">curl<pos:position pos:line="49" pos:column="29"/></name><index pos:line="49" pos:column="29">[<expr><name pos:line="49" pos:column="30">current<pos:position pos:line="49" pos:column="37"/></name></expr>]<pos:position pos:line="49" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="49" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="50" pos:column="7">curl<pos:position pos:line="50" pos:column="11"/></name><index pos:line="50" pos:column="11">[<expr><name pos:line="50" pos:column="12">current<pos:position pos:line="50" pos:column="19"/></name></expr>]<pos:position pos:line="50" pos:column="20"/></index></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <name pos:line="50" pos:column="23">NULL<pos:position pos:line="50" pos:column="27"/></name></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>
      <if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><operator pos:line="52" pos:column="10">++<pos:position pos:line="52" pos:column="12"/></operator><name pos:line="52" pos:column="12">current<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">&lt;<pos:position pos:line="52" pos:column="24"/></operator> <name pos:line="52" pos:column="22">NUM_HANDLES<pos:position pos:line="52" pos:column="33"/></name></expr>)<pos:position pos:line="52" pos:column="34"/></condition><then pos:line="52" pos:column="34"> <block pos:line="52" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">fprintf<pos:position pos:line="53" pos:column="16"/></name><argument_list pos:line="53" pos:column="16">(<argument><expr><name pos:line="53" pos:column="17">stderr<pos:position pos:line="53" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="25">"Advancing to URL %d\n"<pos:position pos:line="53" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="50">current<pos:position pos:line="53" pos:column="57"/></name></expr></argument>)<pos:position pos:line="53" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="59"/></expr_stmt>
<cpp:ifdef pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">ifdef<pos:position pos:line="54" pos:column="7"/></cpp:directive> <name pos:line="54" pos:column="8">LIB532<pos:position pos:line="54" pos:column="14"/></name></cpp:ifdef>
        <comment type="block" pos:line="55" pos:column="9">/* first remove the only handle we use */</comment>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">curl_multi_remove_handle<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">m<pos:position pos:line="56" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="37">curl<pos:position pos:line="56" pos:column="41"/></name><index pos:line="56" pos:column="41">[<expr><literal type="number" pos:line="56" pos:column="42">0<pos:position pos:line="56" pos:column="43"/></literal></expr>]<pos:position pos:line="56" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="56" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="46"/></expr_stmt>

        <comment type="block" pos:line="58" pos:column="9">/* make us re-use the same handle all the time, and try resetting
           the handle first too */</comment>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">curl_easy_reset<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name><name pos:line="60" pos:column="25">curl<pos:position pos:line="60" pos:column="29"/></name><index pos:line="60" pos:column="29">[<expr><literal type="number" pos:line="60" pos:column="30">0<pos:position pos:line="60" pos:column="31"/></literal></expr>]<pos:position pos:line="60" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="60" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">easy_setopt<pos:position pos:line="61" pos:column="20"/></name><argument_list pos:line="61" pos:column="20">(<argument><expr><name><name pos:line="61" pos:column="21">curl<pos:position pos:line="61" pos:column="25"/></name><index pos:line="61" pos:column="25">[<expr><literal type="number" pos:line="61" pos:column="26">0<pos:position pos:line="61" pos:column="27"/></literal></expr>]<pos:position pos:line="61" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="30">CURLOPT_URL<pos:position pos:line="61" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="43">URL<pos:position pos:line="61" pos:column="46"/></name></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="48"/></expr_stmt>
        <comment type="block" pos:line="62" pos:column="9">/* go verbose */</comment>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">easy_setopt<pos:position pos:line="63" pos:column="20"/></name><argument_list pos:line="63" pos:column="20">(<argument><expr><name><name pos:line="63" pos:column="21">curl<pos:position pos:line="63" pos:column="25"/></name><index pos:line="63" pos:column="25">[<expr><literal type="number" pos:line="63" pos:column="26">0<pos:position pos:line="63" pos:column="27"/></literal></expr>]<pos:position pos:line="63" pos:column="28"/></index></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="30">CURLOPT_VERBOSE<pos:position pos:line="63" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="47">1L<pos:position pos:line="63" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="51"/></expr_stmt>

        <comment type="block" pos:line="65" pos:column="9">/* re-add it */</comment>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">multi_add_handle<pos:position pos:line="66" pos:column="25"/></name><argument_list pos:line="66" pos:column="25">(<argument><expr><name pos:line="66" pos:column="26">m<pos:position pos:line="66" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="29">curl<pos:position pos:line="66" pos:column="33"/></name><index pos:line="66" pos:column="33">[<expr><literal type="number" pos:line="66" pos:column="34">0<pos:position pos:line="66" pos:column="35"/></literal></expr>]<pos:position pos:line="66" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="66" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="38"/></expr_stmt>
<cpp:else pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">else<pos:position pos:line="67" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">multi_add_handle<pos:position pos:line="68" pos:column="25"/></name><argument_list pos:line="68" pos:column="25">(<argument><expr><name pos:line="68" pos:column="26">m<pos:position pos:line="68" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="29">curl<pos:position pos:line="68" pos:column="33"/></name><index pos:line="68" pos:column="33">[<expr><name pos:line="68" pos:column="34">current<pos:position pos:line="68" pos:column="41"/></name></expr>]<pos:position pos:line="68" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="68" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>
      }<pos:position pos:line="70" pos:column="8"/></block></then>
      <else pos:line="71" pos:column="7">else <block pos:line="71" pos:column="12">{
        <break pos:line="72" pos:column="9">break;<pos:position pos:line="72" pos:column="15"/></break> <comment type="block" pos:line="72" pos:column="16">/* done */</comment>
      }<pos:position pos:line="73" pos:column="8"/></block></else></if>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="76" pos:column="5">FD_ZERO<pos:position pos:line="76" pos:column="12"/></name><argument_list pos:line="76" pos:column="12">(<argument><expr><operator pos:line="76" pos:column="13">&amp;<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="14">rd<pos:position pos:line="76" pos:column="16"/></name></expr></argument>)<pos:position pos:line="76" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">FD_ZERO<pos:position pos:line="77" pos:column="12"/></name><argument_list pos:line="77" pos:column="12">(<argument><expr><operator pos:line="77" pos:column="13">&amp;<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="14">wr<pos:position pos:line="77" pos:column="16"/></name></expr></argument>)<pos:position pos:line="77" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">FD_ZERO<pos:position pos:line="78" pos:column="12"/></name><argument_list pos:line="78" pos:column="12">(<argument><expr><operator pos:line="78" pos:column="13">&amp;<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="14">exc<pos:position pos:line="78" pos:column="17"/></name></expr></argument>)<pos:position pos:line="78" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="80" pos:column="5">multi_fdset<pos:position pos:line="80" pos:column="16"/></name><argument_list pos:line="80" pos:column="16">(<argument><expr><name pos:line="80" pos:column="17">m<pos:position pos:line="80" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="20">&amp;<pos:position pos:line="80" pos:column="25"/></operator><name pos:line="80" pos:column="21">rd<pos:position pos:line="80" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="25">&amp;<pos:position pos:line="80" pos:column="30"/></operator><name pos:line="80" pos:column="26">wr<pos:position pos:line="80" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="30">&amp;<pos:position pos:line="80" pos:column="35"/></operator><name pos:line="80" pos:column="31">exc<pos:position pos:line="80" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="36">&amp;<pos:position pos:line="80" pos:column="41"/></operator><name pos:line="80" pos:column="37">maxfd<pos:position pos:line="80" pos:column="42"/></name></expr></argument>)<pos:position pos:line="80" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="44"/></expr_stmt>

    <comment type="block" pos:line="82" pos:column="5">/* At this point, maxfd is guaranteed to be greater or equal than -1. */</comment>

    <expr_stmt><expr><call><name pos:line="84" pos:column="5">select_test<pos:position pos:line="84" pos:column="16"/></name><argument_list pos:line="84" pos:column="16">(<argument><expr><name pos:line="84" pos:column="17">maxfd<pos:position pos:line="84" pos:column="22"/></name> <operator pos:line="84" pos:column="23">+<pos:position pos:line="84" pos:column="24"/></operator> <literal type="number" pos:line="84" pos:column="25">1<pos:position pos:line="84" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="84" pos:column="28">&amp;<pos:position pos:line="84" pos:column="33"/></operator><name pos:line="84" pos:column="29">rd<pos:position pos:line="84" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="33">&amp;<pos:position pos:line="84" pos:column="38"/></operator><name pos:line="84" pos:column="34">wr<pos:position pos:line="84" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="38">&amp;<pos:position pos:line="84" pos:column="43"/></operator><name pos:line="84" pos:column="39">exc<pos:position pos:line="84" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="44">&amp;<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="45">interval<pos:position pos:line="84" pos:column="53"/></name></expr></argument>)<pos:position pos:line="84" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="55"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">abort_on_test_timeout<pos:position pos:line="86" pos:column="26"/></name><argument_list pos:line="86" pos:column="26">()<pos:position pos:line="86" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="87" pos:column="4"/></block></for>

<label><name pos:line="89" pos:column="1">test_cleanup<pos:position pos:line="89" pos:column="13"/></name>:<pos:position pos:line="89" pos:column="14"/></label>

<cpp:if pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">if<pos:position pos:line="91" pos:column="4"/></cpp:directive> <expr><call><name pos:line="91" pos:column="5">defined<pos:position pos:line="91" pos:column="12"/></name><argument_list pos:line="91" pos:column="12">(<argument><expr><name pos:line="91" pos:column="13">LIB526<pos:position pos:line="91" pos:column="19"/></name></expr></argument>)<pos:position pos:line="91" pos:column="20"/></argument_list></call></expr></cpp:if>

  <comment type="block" pos:line="93" pos:column="3">/* test 526 and 528 */</comment>
  <comment type="block" pos:line="94" pos:column="3">/* proper cleanup sequence - type PB */</comment>

  <for pos:line="96" pos:column="3">for<control pos:line="96" pos:column="6">(<init><expr><name pos:line="96" pos:column="7">i<pos:position pos:line="96" pos:column="8"/></name> <operator pos:line="96" pos:column="9">=<pos:position pos:line="96" pos:column="10"/></operator> <literal type="number" pos:line="96" pos:column="11">0<pos:position pos:line="96" pos:column="12"/></literal></expr>;<pos:position pos:line="96" pos:column="13"/></init> <condition><expr><name pos:line="96" pos:column="14">i<pos:position pos:line="96" pos:column="15"/></name> <operator pos:line="96" pos:column="16">&lt;<pos:position pos:line="96" pos:column="20"/></operator> <name pos:line="96" pos:column="18">NUM_HANDLES<pos:position pos:line="96" pos:column="29"/></name></expr>;<pos:position pos:line="96" pos:column="30"/></condition> <incr><expr><name pos:line="96" pos:column="31">i<pos:position pos:line="96" pos:column="32"/></name><operator pos:line="96" pos:column="32">++<pos:position pos:line="96" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="96" pos:column="35"/></control> <block pos:line="96" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">curl_multi_remove_handle<pos:position pos:line="97" pos:column="29"/></name><argument_list pos:line="97" pos:column="29">(<argument><expr><name pos:line="97" pos:column="30">m<pos:position pos:line="97" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="33">curl<pos:position pos:line="97" pos:column="37"/></name><index pos:line="97" pos:column="37">[<expr><name pos:line="97" pos:column="38">i<pos:position pos:line="97" pos:column="39"/></name></expr>]<pos:position pos:line="97" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="97" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">curl_easy_cleanup<pos:position pos:line="98" pos:column="22"/></name><argument_list pos:line="98" pos:column="22">(<argument><expr><name><name pos:line="98" pos:column="23">curl<pos:position pos:line="98" pos:column="27"/></name><index pos:line="98" pos:column="27">[<expr><name pos:line="98" pos:column="28">i<pos:position pos:line="98" pos:column="29"/></name></expr>]<pos:position pos:line="98" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="98" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="99" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="100" pos:column="3">curl_multi_cleanup<pos:position pos:line="100" pos:column="21"/></name><argument_list pos:line="100" pos:column="21">(<argument><expr><name pos:line="100" pos:column="22">m<pos:position pos:line="100" pos:column="23"/></name></expr></argument>)<pos:position pos:line="100" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="101" pos:column="3">curl_global_cleanup<pos:position pos:line="101" pos:column="22"/></name><argument_list pos:line="101" pos:column="22">()<pos:position pos:line="101" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="25"/></expr_stmt>

<cpp:elif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">elif<pos:position pos:line="103" pos:column="6"/></cpp:directive> <expr><call><name pos:line="103" pos:column="7">defined<pos:position pos:line="103" pos:column="14"/></name><argument_list pos:line="103" pos:column="14">(<argument><expr><name pos:line="103" pos:column="15">LIB527<pos:position pos:line="103" pos:column="21"/></name></expr></argument>)<pos:position pos:line="103" pos:column="22"/></argument_list></call></expr></cpp:elif>

  <comment type="block" pos:line="105" pos:column="3">/* test 527 */</comment>

  <comment type="block" pos:line="107" pos:column="3">/* Upon non-failure test flow the easy's have already been cleanup'ed. In
     case there is a failure we arrive here with easy's that have not been
     cleanup'ed yet, in this case we have to cleanup them or otherwise these
     will be leaked, let's use undocumented cleanup sequence - type UB */</comment>

  <if pos:line="112" pos:column="3">if<condition pos:line="112" pos:column="5">(<expr><name pos:line="112" pos:column="6">res<pos:position pos:line="112" pos:column="9"/></name></expr>)<pos:position pos:line="112" pos:column="10"/></condition><then pos:line="112" pos:column="10">
    <block type="pseudo"><for pos:line="113" pos:column="5">for<control pos:line="113" pos:column="8">(<init><expr><name pos:line="113" pos:column="9">i<pos:position pos:line="113" pos:column="10"/></name> <operator pos:line="113" pos:column="11">=<pos:position pos:line="113" pos:column="12"/></operator> <literal type="number" pos:line="113" pos:column="13">0<pos:position pos:line="113" pos:column="14"/></literal></expr>;<pos:position pos:line="113" pos:column="15"/></init> <condition><expr><name pos:line="113" pos:column="16">i<pos:position pos:line="113" pos:column="17"/></name> <operator pos:line="113" pos:column="18">&lt;<pos:position pos:line="113" pos:column="22"/></operator> <name pos:line="113" pos:column="20">NUM_HANDLES<pos:position pos:line="113" pos:column="31"/></name></expr>;<pos:position pos:line="113" pos:column="32"/></condition> <incr><expr><name pos:line="113" pos:column="33">i<pos:position pos:line="113" pos:column="34"/></name><operator pos:line="113" pos:column="34">++<pos:position pos:line="113" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="113" pos:column="37"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="114" pos:column="7">curl_easy_cleanup<pos:position pos:line="114" pos:column="24"/></name><argument_list pos:line="114" pos:column="24">(<argument><expr><name><name pos:line="114" pos:column="25">curl<pos:position pos:line="114" pos:column="29"/></name><index pos:line="114" pos:column="29">[<expr><name pos:line="114" pos:column="30">i<pos:position pos:line="114" pos:column="31"/></name></expr>]<pos:position pos:line="114" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="114" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="34"/></expr_stmt></block></for></block></then></if>

  <expr_stmt><expr><call><name pos:line="116" pos:column="3">curl_multi_cleanup<pos:position pos:line="116" pos:column="21"/></name><argument_list pos:line="116" pos:column="21">(<argument><expr><name pos:line="116" pos:column="22">m<pos:position pos:line="116" pos:column="23"/></name></expr></argument>)<pos:position pos:line="116" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="117" pos:column="3">curl_global_cleanup<pos:position pos:line="117" pos:column="22"/></name><argument_list pos:line="117" pos:column="22">()<pos:position pos:line="117" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="25"/></expr_stmt>

<cpp:elif pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">elif<pos:position pos:line="119" pos:column="6"/></cpp:directive> <expr><call><name pos:line="119" pos:column="7">defined<pos:position pos:line="119" pos:column="14"/></name><argument_list pos:line="119" pos:column="14">(<argument><expr><name pos:line="119" pos:column="15">LIB532<pos:position pos:line="119" pos:column="21"/></name></expr></argument>)<pos:position pos:line="119" pos:column="22"/></argument_list></call></expr></cpp:elif>

  <comment type="block" pos:line="121" pos:column="3">/* test 532 */</comment>
  <comment type="block" pos:line="122" pos:column="3">/* undocumented cleanup sequence - type UB */</comment>

  <for pos:line="124" pos:column="3">for<control pos:line="124" pos:column="6">(<init><expr><name pos:line="124" pos:column="7">i<pos:position pos:line="124" pos:column="8"/></name> <operator pos:line="124" pos:column="9">=<pos:position pos:line="124" pos:column="10"/></operator> <literal type="number" pos:line="124" pos:column="11">0<pos:position pos:line="124" pos:column="12"/></literal></expr>;<pos:position pos:line="124" pos:column="13"/></init> <condition><expr><name pos:line="124" pos:column="14">i<pos:position pos:line="124" pos:column="15"/></name> <operator pos:line="124" pos:column="16">&lt;<pos:position pos:line="124" pos:column="20"/></operator> <name pos:line="124" pos:column="18">NUM_HANDLES<pos:position pos:line="124" pos:column="29"/></name></expr>;<pos:position pos:line="124" pos:column="30"/></condition> <incr><expr><name pos:line="124" pos:column="31">i<pos:position pos:line="124" pos:column="32"/></name><operator pos:line="124" pos:column="32">++<pos:position pos:line="124" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="124" pos:column="35"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="125" pos:column="5">curl_easy_cleanup<pos:position pos:line="125" pos:column="22"/></name><argument_list pos:line="125" pos:column="22">(<argument><expr><name><name pos:line="125" pos:column="23">curl<pos:position pos:line="125" pos:column="27"/></name><index pos:line="125" pos:column="27">[<expr><name pos:line="125" pos:column="28">i<pos:position pos:line="125" pos:column="29"/></name></expr>]<pos:position pos:line="125" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="125" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="32"/></expr_stmt></block></for>
  <expr_stmt><expr><call><name pos:line="126" pos:column="3">curl_multi_cleanup<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><name pos:line="126" pos:column="22">m<pos:position pos:line="126" pos:column="23"/></name></expr></argument>)<pos:position pos:line="126" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="127" pos:column="3">curl_global_cleanup<pos:position pos:line="127" pos:column="22"/></name><argument_list pos:line="127" pos:column="22">()<pos:position pos:line="127" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="25"/></expr_stmt>

<cpp:endif pos:line="129" pos:column="1">#<cpp:directive pos:line="129" pos:column="2">endif<pos:position pos:line="129" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="131" pos:column="3">return <expr><name pos:line="131" pos:column="10">res<pos:position pos:line="131" pos:column="13"/></name></expr>;<pos:position pos:line="131" pos:column="14"/></return>
}<pos:position pos:line="132" pos:column="2"/></block></function></unit>
