<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_454.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rlimit<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">int<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">keep_open<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name> <modifier pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></modifier></type><name pos:line="3" pos:column="8">tmpfd<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">nitems<pos:position pos:line="4" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="15">i<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name> <modifier pos:line="5" pos:column="7">*<pos:position pos:line="5" pos:column="8"/></modifier></type><name pos:line="5" pos:column="8">memchunk<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">fmt<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">rlimit<pos:position pos:line="7" pos:column="16"/></name></name></type> <name pos:line="7" pos:column="17">rl<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">strbuff<pos:position pos:line="8" pos:column="15"/></name><index pos:line="8" pos:column="15">[<expr><literal type="number" pos:line="8" pos:column="16">256<pos:position pos:line="8" pos:column="19"/></literal></expr>]<pos:position pos:line="8" pos:column="20"/></index></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">strbuff1<pos:position pos:line="9" pos:column="16"/></name><index pos:line="9" pos:column="16">[<expr><literal type="number" pos:line="9" pos:column="17">81<pos:position pos:line="9" pos:column="19"/></literal></expr>]<pos:position pos:line="9" pos:column="20"/></index></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">fmt_u<pos:position pos:line="10" pos:column="13"/></name><index pos:line="10" pos:column="13">[]<pos:position pos:line="10" pos:column="15"/></index></name> <init pos:line="10" pos:column="16">= <expr><literal type="string" pos:line="10" pos:column="18">"%u"<pos:position pos:line="10" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name></type> <name><name pos:line="11" pos:column="8">fmt_lu<pos:position pos:line="11" pos:column="14"/></name><index pos:line="11" pos:column="14">[]<pos:position pos:line="11" pos:column="16"/></index></name> <init pos:line="11" pos:column="17">= <expr><literal type="string" pos:line="11" pos:column="19">"%lu"<pos:position pos:line="11" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
<cpp:ifdef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifdef<pos:position pos:line="12" pos:column="7"/></cpp:directive> <name pos:line="12" pos:column="8">HAVE_LONGLONG<pos:position pos:line="12" pos:column="21"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name></type> <name><name pos:line="13" pos:column="8">fmt_llu<pos:position pos:line="13" pos:column="15"/></name><index pos:line="13" pos:column="15">[]<pos:position pos:line="13" pos:column="17"/></index></name> <init pos:line="13" pos:column="18">= <expr><literal type="string" pos:line="13" pos:column="20">"%llu"<pos:position pos:line="13" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><sizeof pos:line="15" pos:column="7">sizeof<argument_list pos:line="15" pos:column="13">(<argument><expr><name><name pos:line="15" pos:column="14">rl<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">.<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">rlim_max<pos:position pos:line="15" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></sizeof> <operator pos:line="15" pos:column="27">&gt;<pos:position pos:line="15" pos:column="31"/></operator> <sizeof pos:line="15" pos:column="29">sizeof<argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">long<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></sizeof></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42">
    <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="5">fmt<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <name pos:line="16" pos:column="11">fmt_llu<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt></block></then>
  <else pos:line="17" pos:column="3">else
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="5">fmt<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <ternary><condition><expr><operator pos:line="19" pos:column="11">(<pos:position pos:line="19" pos:column="12"/></operator><sizeof pos:line="19" pos:column="12">sizeof<argument_list pos:line="19" pos:column="18">(<argument><expr><name><name pos:line="19" pos:column="19">rl<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">rlim_max<pos:position pos:line="19" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></sizeof> <operator pos:line="19" pos:column="32">&lt;<pos:position pos:line="19" pos:column="36"/></operator> <sizeof pos:line="19" pos:column="34">sizeof<argument_list pos:line="19" pos:column="40">(<argument><expr><name pos:line="19" pos:column="41">long<pos:position pos:line="19" pos:column="45"/></name></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></sizeof><operator pos:line="19" pos:column="46">)<pos:position pos:line="19" pos:column="47"/></operator></expr>?<pos:position pos:line="19" pos:column="48"/></condition><then><expr><name pos:line="19" pos:column="48">fmt_u<pos:position pos:line="19" pos:column="53"/></name></expr></then><else pos:line="19" pos:column="53">:<expr><name pos:line="19" pos:column="54">fmt_lu<pos:position pos:line="19" pos:column="60"/></name></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="21" pos:column="3">/* get initial open file limits */</comment>

  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><call><name pos:line="23" pos:column="7">getrlimit<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">RLIMIT_NOFILE<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="32">&amp;<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="33">rl<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call> <operator pos:line="23" pos:column="37">!=<pos:position pos:line="23" pos:column="39"/></operator> <literal type="number" pos:line="23" pos:column="40">0<pos:position pos:line="23" pos:column="41"/></literal></expr>)<pos:position pos:line="23" pos:column="42"/></condition><then pos:line="23" pos:column="42"> <block pos:line="23" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">store_errmsg<pos:position pos:line="24" pos:column="17"/></name><argument_list pos:line="24" pos:column="17">(<argument><expr><literal type="string" pos:line="24" pos:column="18">"getrlimit() failed"<pos:position pos:line="24" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">ERRNO<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">fprintf<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name pos:line="25" pos:column="13">stderr<pos:position pos:line="25" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="21">"%s\n"<pos:position pos:line="25" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="29">msgbuff<pos:position pos:line="25" pos:column="36"/></name></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><operator pos:line="26" pos:column="12">-<pos:position pos:line="26" pos:column="13"/></operator><literal type="number" pos:line="26" pos:column="13">1<pos:position pos:line="26" pos:column="14"/></literal></expr>;<pos:position pos:line="26" pos:column="15"/></return>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="29" pos:column="3">/* show initial open file limits */</comment>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">RLIM_INFINITY<pos:position pos:line="31" pos:column="21"/></name></cpp:ifdef>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name><name pos:line="32" pos:column="7">rl<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">.<pos:position pos:line="32" pos:column="10"/></operator><name pos:line="32" pos:column="10">rlim_cur<pos:position pos:line="32" pos:column="18"/></name></name> <operator pos:line="32" pos:column="19">==<pos:position pos:line="32" pos:column="21"/></operator> <name pos:line="32" pos:column="22">RLIM_INFINITY<pos:position pos:line="32" pos:column="35"/></name></expr>)<pos:position pos:line="32" pos:column="36"/></condition><then pos:line="32" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="5">strcpy<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><name pos:line="33" pos:column="12">strbuff<pos:position pos:line="33" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="21">"INFINITY"<pos:position pos:line="33" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt></block></then>
  <else pos:line="34" pos:column="3">else
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="5">sprintf<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">strbuff<pos:position pos:line="36" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="22">fmt<pos:position pos:line="36" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="27">rl<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">.<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="30">rlim_cur<pos:position pos:line="36" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt></block></else></if>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">fprintf<pos:position pos:line="37" pos:column="10"/></name><argument_list pos:line="37" pos:column="10">(<argument><expr><name pos:line="37" pos:column="11">stderr<pos:position pos:line="37" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="19">"initial soft limit: %s\n"<pos:position pos:line="37" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">strbuff<pos:position pos:line="37" pos:column="54"/></name></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt>

<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef<pos:position pos:line="39" pos:column="7"/></cpp:directive> <name pos:line="39" pos:column="8">RLIM_INFINITY<pos:position pos:line="39" pos:column="21"/></name></cpp:ifdef>
  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name><name pos:line="40" pos:column="7">rl<pos:position pos:line="40" pos:column="9"/></name><operator pos:line="40" pos:column="9">.<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="10">rlim_max<pos:position pos:line="40" pos:column="18"/></name></name> <operator pos:line="40" pos:column="19">==<pos:position pos:line="40" pos:column="21"/></operator> <name pos:line="40" pos:column="22">RLIM_INFINITY<pos:position pos:line="40" pos:column="35"/></name></expr>)<pos:position pos:line="40" pos:column="36"/></condition><then pos:line="40" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="5">strcpy<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><name pos:line="41" pos:column="12">strbuff<pos:position pos:line="41" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="21">"INFINITY"<pos:position pos:line="41" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt></block></then>
  <else pos:line="42" pos:column="3">else
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="5">sprintf<pos:position pos:line="44" pos:column="12"/></name><argument_list pos:line="44" pos:column="12">(<argument><expr><name pos:line="44" pos:column="13">strbuff<pos:position pos:line="44" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="22">fmt<pos:position pos:line="44" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="27">rl<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">.<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">rlim_max<pos:position pos:line="44" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt></block></else></if>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">fprintf<pos:position pos:line="45" pos:column="10"/></name><argument_list pos:line="45" pos:column="10">(<argument><expr><name pos:line="45" pos:column="11">stderr<pos:position pos:line="45" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="19">"initial hard limit: %s\n"<pos:position pos:line="45" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="47">strbuff<pos:position pos:line="45" pos:column="54"/></name></expr></argument>)<pos:position pos:line="45" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="56"/></expr_stmt>

  <comment type="block" pos:line="47" pos:column="3">/*
   * if soft limit and hard limit are different we ask the
   * system to raise soft limit all the way up to the hard
   * limit. Due to some other system limit the soft limit
   * might not be raised up to the hard limit. So from this
   * point the resulting soft limit is our limit. Trying to
   * open more than soft limit file descriptors will fail.
   */</comment>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name><name pos:line="56" pos:column="7">rl<pos:position pos:line="56" pos:column="9"/></name><operator pos:line="56" pos:column="9">.<pos:position pos:line="56" pos:column="10"/></operator><name pos:line="56" pos:column="10">rlim_cur<pos:position pos:line="56" pos:column="18"/></name></name> <operator pos:line="56" pos:column="19">!=<pos:position pos:line="56" pos:column="21"/></operator> <name><name pos:line="56" pos:column="22">rl<pos:position pos:line="56" pos:column="24"/></name><operator pos:line="56" pos:column="24">.<pos:position pos:line="56" pos:column="25"/></operator><name pos:line="56" pos:column="25">rlim_max<pos:position pos:line="56" pos:column="33"/></name></name></expr>)<pos:position pos:line="56" pos:column="34"/></condition><then pos:line="56" pos:column="34"> <block pos:line="56" pos:column="35">{

<cpp:ifdef pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">ifdef<pos:position pos:line="58" pos:column="7"/></cpp:directive> <name pos:line="58" pos:column="8">OPEN_MAX<pos:position pos:line="58" pos:column="16"/></name></cpp:ifdef>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><operator pos:line="59" pos:column="9">(<pos:position pos:line="59" pos:column="10"/></operator><name><name pos:line="59" pos:column="10">rl<pos:position pos:line="59" pos:column="12"/></name><operator pos:line="59" pos:column="12">.<pos:position pos:line="59" pos:column="13"/></operator><name pos:line="59" pos:column="13">rlim_cur<pos:position pos:line="59" pos:column="21"/></name></name> <operator pos:line="59" pos:column="22">&gt;<pos:position pos:line="59" pos:column="26"/></operator> <literal type="number" pos:line="59" pos:column="24">0<pos:position pos:line="59" pos:column="25"/></literal><operator pos:line="59" pos:column="25">)<pos:position pos:line="59" pos:column="26"/></operator> <operator pos:line="59" pos:column="27">&amp;&amp;<pos:position pos:line="59" pos:column="37"/></operator>
        <operator pos:line="60" pos:column="9">(<pos:position pos:line="60" pos:column="10"/></operator><name><name pos:line="60" pos:column="10">rl<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">.<pos:position pos:line="60" pos:column="13"/></operator><name pos:line="60" pos:column="13">rlim_cur<pos:position pos:line="60" pos:column="21"/></name></name> <operator pos:line="60" pos:column="22">&lt;<pos:position pos:line="60" pos:column="26"/></operator> <name pos:line="60" pos:column="24">OPEN_MAX<pos:position pos:line="60" pos:column="32"/></name><operator pos:line="60" pos:column="32">)<pos:position pos:line="60" pos:column="33"/></operator></expr>)<pos:position pos:line="60" pos:column="34"/></condition><then pos:line="60" pos:column="34"> <block pos:line="60" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">fprintf<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><name pos:line="61" pos:column="15">stderr<pos:position pos:line="61" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="23">"raising soft limit up to OPEN_MAX\n"<pos:position pos:line="61" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="62"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="62" pos:column="7">rl<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">.<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">rlim_cur<pos:position pos:line="62" pos:column="18"/></name></name> <operator pos:line="62" pos:column="19">=<pos:position pos:line="62" pos:column="20"/></operator> <name pos:line="62" pos:column="21">OPEN_MAX<pos:position pos:line="62" pos:column="29"/></name></expr>;<pos:position pos:line="62" pos:column="30"/></expr_stmt>
      <if pos:line="63" pos:column="7">if <condition pos:line="63" pos:column="10">(<expr><call><name pos:line="63" pos:column="11">setrlimit<pos:position pos:line="63" pos:column="20"/></name><argument_list pos:line="63" pos:column="20">(<argument><expr><name pos:line="63" pos:column="21">RLIMIT_NOFILE<pos:position pos:line="63" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="36">&amp;<pos:position pos:line="63" pos:column="41"/></operator><name pos:line="63" pos:column="37">rl<pos:position pos:line="63" pos:column="39"/></name></expr></argument>)<pos:position pos:line="63" pos:column="40"/></argument_list></call> <operator pos:line="63" pos:column="41">!=<pos:position pos:line="63" pos:column="43"/></operator> <literal type="number" pos:line="63" pos:column="44">0<pos:position pos:line="63" pos:column="45"/></literal></expr>)<pos:position pos:line="63" pos:column="46"/></condition><then pos:line="63" pos:column="46"> <block pos:line="63" pos:column="47">{
        <comment type="block" pos:line="64" pos:column="9">/* on failure don't abort just issue a warning */</comment>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">store_errmsg<pos:position pos:line="65" pos:column="21"/></name><argument_list pos:line="65" pos:column="21">(<argument><expr><literal type="string" pos:line="65" pos:column="22">"setrlimit() failed"<pos:position pos:line="65" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="44">ERRNO<pos:position pos:line="65" pos:column="49"/></name></expr></argument>)<pos:position pos:line="65" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">fprintf<pos:position pos:line="66" pos:column="16"/></name><argument_list pos:line="66" pos:column="16">(<argument><expr><name pos:line="66" pos:column="17">stderr<pos:position pos:line="66" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="25">"%s\n"<pos:position pos:line="66" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="33">msgbuff<pos:position pos:line="66" pos:column="40"/></name></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="67" pos:column="9">msgbuff<pos:position pos:line="67" pos:column="16"/></name><index pos:line="67" pos:column="16">[<expr><literal type="number" pos:line="67" pos:column="17">0<pos:position pos:line="67" pos:column="18"/></literal></expr>]<pos:position pos:line="67" pos:column="19"/></index></name> <operator pos:line="67" pos:column="20">=<pos:position pos:line="67" pos:column="21"/></operator> <literal type="char" pos:line="67" pos:column="22">'\0'<pos:position pos:line="67" pos:column="26"/></literal></expr>;<pos:position pos:line="67" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="68" pos:column="8"/></block></then></if>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="72" pos:column="5">fprintf<pos:position pos:line="72" pos:column="12"/></name><argument_list pos:line="72" pos:column="12">(<argument><expr><name pos:line="72" pos:column="13">stderr<pos:position pos:line="72" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="21">"raising soft limit up to hard limit\n"<pos:position pos:line="72" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">rl<pos:position pos:line="73" pos:column="7"/></name><operator pos:line="73" pos:column="7">.<pos:position pos:line="73" pos:column="8"/></operator><name pos:line="73" pos:column="8">rlim_cur<pos:position pos:line="73" pos:column="16"/></name></name> <operator pos:line="73" pos:column="17">=<pos:position pos:line="73" pos:column="18"/></operator> <name><name pos:line="73" pos:column="19">rl<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">.<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="22">rlim_max<pos:position pos:line="73" pos:column="30"/></name></name></expr>;<pos:position pos:line="73" pos:column="31"/></expr_stmt>
    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><call><name pos:line="74" pos:column="9">setrlimit<pos:position pos:line="74" pos:column="18"/></name><argument_list pos:line="74" pos:column="18">(<argument><expr><name pos:line="74" pos:column="19">RLIMIT_NOFILE<pos:position pos:line="74" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="34">&amp;<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="35">rl<pos:position pos:line="74" pos:column="37"/></name></expr></argument>)<pos:position pos:line="74" pos:column="38"/></argument_list></call> <operator pos:line="74" pos:column="39">!=<pos:position pos:line="74" pos:column="41"/></operator> <literal type="number" pos:line="74" pos:column="42">0<pos:position pos:line="74" pos:column="43"/></literal></expr>)<pos:position pos:line="74" pos:column="44"/></condition><then pos:line="74" pos:column="44"> <block pos:line="74" pos:column="45">{
      <comment type="block" pos:line="75" pos:column="7">/* on failure don't abort just issue a warning */</comment>
      <expr_stmt><expr><call><name pos:line="76" pos:column="7">store_errmsg<pos:position pos:line="76" pos:column="19"/></name><argument_list pos:line="76" pos:column="19">(<argument><expr><literal type="string" pos:line="76" pos:column="20">"setrlimit() failed"<pos:position pos:line="76" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="42">ERRNO<pos:position pos:line="76" pos:column="47"/></name></expr></argument>)<pos:position pos:line="76" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="77" pos:column="7">fprintf<pos:position pos:line="77" pos:column="14"/></name><argument_list pos:line="77" pos:column="14">(<argument><expr><name pos:line="77" pos:column="15">stderr<pos:position pos:line="77" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="23">"%s\n"<pos:position pos:line="77" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="31">msgbuff<pos:position pos:line="77" pos:column="38"/></name></expr></argument>)<pos:position pos:line="77" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="78" pos:column="7">msgbuff<pos:position pos:line="78" pos:column="14"/></name><index pos:line="78" pos:column="14">[<expr><literal type="number" pos:line="78" pos:column="15">0<pos:position pos:line="78" pos:column="16"/></literal></expr>]<pos:position pos:line="78" pos:column="17"/></index></name> <operator pos:line="78" pos:column="18">=<pos:position pos:line="78" pos:column="19"/></operator> <literal type="char" pos:line="78" pos:column="20">'\0'<pos:position pos:line="78" pos:column="24"/></literal></expr>;<pos:position pos:line="78" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="81" pos:column="5">/* get current open file limits */</comment>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><call><name pos:line="83" pos:column="9">getrlimit<pos:position pos:line="83" pos:column="18"/></name><argument_list pos:line="83" pos:column="18">(<argument><expr><name pos:line="83" pos:column="19">RLIMIT_NOFILE<pos:position pos:line="83" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="34">&amp;<pos:position pos:line="83" pos:column="39"/></operator><name pos:line="83" pos:column="35">rl<pos:position pos:line="83" pos:column="37"/></name></expr></argument>)<pos:position pos:line="83" pos:column="38"/></argument_list></call> <operator pos:line="83" pos:column="39">!=<pos:position pos:line="83" pos:column="41"/></operator> <literal type="number" pos:line="83" pos:column="42">0<pos:position pos:line="83" pos:column="43"/></literal></expr>)<pos:position pos:line="83" pos:column="44"/></condition><then pos:line="83" pos:column="44"> <block pos:line="83" pos:column="45">{
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">store_errmsg<pos:position pos:line="84" pos:column="19"/></name><argument_list pos:line="84" pos:column="19">(<argument><expr><literal type="string" pos:line="84" pos:column="20">"getrlimit() failed"<pos:position pos:line="84" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="42">ERRNO<pos:position pos:line="84" pos:column="47"/></name></expr></argument>)<pos:position pos:line="84" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="85" pos:column="7">fprintf<pos:position pos:line="85" pos:column="14"/></name><argument_list pos:line="85" pos:column="14">(<argument><expr><name pos:line="85" pos:column="15">stderr<pos:position pos:line="85" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="23">"%s\n"<pos:position pos:line="85" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="31">msgbuff<pos:position pos:line="85" pos:column="38"/></name></expr></argument>)<pos:position pos:line="85" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="40"/></expr_stmt>
      <return pos:line="86" pos:column="7">return <expr><operator pos:line="86" pos:column="14">-<pos:position pos:line="86" pos:column="15"/></operator><literal type="number" pos:line="86" pos:column="15">3<pos:position pos:line="86" pos:column="16"/></literal></expr>;<pos:position pos:line="86" pos:column="17"/></return>
    }<pos:position pos:line="87" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="89" pos:column="5">/* show current open file limits */</comment>

<cpp:ifdef pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">ifdef<pos:position pos:line="91" pos:column="7"/></cpp:directive> <name pos:line="91" pos:column="8">RLIM_INFINITY<pos:position pos:line="91" pos:column="21"/></name></cpp:ifdef>
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name><name pos:line="92" pos:column="9">rl<pos:position pos:line="92" pos:column="11"/></name><operator pos:line="92" pos:column="11">.<pos:position pos:line="92" pos:column="12"/></operator><name pos:line="92" pos:column="12">rlim_cur<pos:position pos:line="92" pos:column="20"/></name></name> <operator pos:line="92" pos:column="21">==<pos:position pos:line="92" pos:column="23"/></operator> <name pos:line="92" pos:column="24">RLIM_INFINITY<pos:position pos:line="92" pos:column="37"/></name></expr>)<pos:position pos:line="92" pos:column="38"/></condition><then pos:line="92" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="7">strcpy<pos:position pos:line="93" pos:column="13"/></name><argument_list pos:line="93" pos:column="13">(<argument><expr><name pos:line="93" pos:column="14">strbuff<pos:position pos:line="93" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="23">"INFINITY"<pos:position pos:line="93" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="35"/></expr_stmt></block></then>
    <else pos:line="94" pos:column="5">else
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="96" pos:column="7">sprintf<pos:position pos:line="96" pos:column="14"/></name><argument_list pos:line="96" pos:column="14">(<argument><expr><name pos:line="96" pos:column="15">strbuff<pos:position pos:line="96" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="24">fmt<pos:position pos:line="96" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="29">rl<pos:position pos:line="96" pos:column="31"/></name><operator pos:line="96" pos:column="31">.<pos:position pos:line="96" pos:column="32"/></operator><name pos:line="96" pos:column="32">rlim_cur<pos:position pos:line="96" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="42"/></expr_stmt></block></else></if>
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">fprintf<pos:position pos:line="97" pos:column="12"/></name><argument_list pos:line="97" pos:column="12">(<argument><expr><name pos:line="97" pos:column="13">stderr<pos:position pos:line="97" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="21">"current soft limit: %s\n"<pos:position pos:line="97" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="49">strbuff<pos:position pos:line="97" pos:column="56"/></name></expr></argument>)<pos:position pos:line="97" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="58"/></expr_stmt>

<cpp:ifdef pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">ifdef<pos:position pos:line="99" pos:column="7"/></cpp:directive> <name pos:line="99" pos:column="8">RLIM_INFINITY<pos:position pos:line="99" pos:column="21"/></name></cpp:ifdef>
    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><name><name pos:line="100" pos:column="9">rl<pos:position pos:line="100" pos:column="11"/></name><operator pos:line="100" pos:column="11">.<pos:position pos:line="100" pos:column="12"/></operator><name pos:line="100" pos:column="12">rlim_max<pos:position pos:line="100" pos:column="20"/></name></name> <operator pos:line="100" pos:column="21">==<pos:position pos:line="100" pos:column="23"/></operator> <name pos:line="100" pos:column="24">RLIM_INFINITY<pos:position pos:line="100" pos:column="37"/></name></expr>)<pos:position pos:line="100" pos:column="38"/></condition><then pos:line="100" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="101" pos:column="7">strcpy<pos:position pos:line="101" pos:column="13"/></name><argument_list pos:line="101" pos:column="13">(<argument><expr><name pos:line="101" pos:column="14">strbuff<pos:position pos:line="101" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="23">"INFINITY"<pos:position pos:line="101" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="35"/></expr_stmt></block></then>
    <else pos:line="102" pos:column="5">else
<cpp:endif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">endif<pos:position pos:line="103" pos:column="7"/></cpp:directive></cpp:endif>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="104" pos:column="7">sprintf<pos:position pos:line="104" pos:column="14"/></name><argument_list pos:line="104" pos:column="14">(<argument><expr><name pos:line="104" pos:column="15">strbuff<pos:position pos:line="104" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="24">fmt<pos:position pos:line="104" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="29">rl<pos:position pos:line="104" pos:column="31"/></name><operator pos:line="104" pos:column="31">.<pos:position pos:line="104" pos:column="32"/></operator><name pos:line="104" pos:column="32">rlim_max<pos:position pos:line="104" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="42"/></expr_stmt></block></else></if>
    <expr_stmt><expr><call><name pos:line="105" pos:column="5">fprintf<pos:position pos:line="105" pos:column="12"/></name><argument_list pos:line="105" pos:column="12">(<argument><expr><name pos:line="105" pos:column="13">stderr<pos:position pos:line="105" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="21">"current hard limit: %s\n"<pos:position pos:line="105" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="49">strbuff<pos:position pos:line="105" pos:column="56"/></name></expr></argument>)<pos:position pos:line="105" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="58"/></expr_stmt>

  }<pos:position pos:line="107" pos:column="4"/></block></then></if> <comment type="block" pos:line="107" pos:column="5">/* (rl.rlim_cur != rl.rlim_max) */</comment>

  <comment type="block" pos:line="109" pos:column="3">/*
   * test 537 is all about testing libcurl functionality
   * when the system has nearly exhausted the number of
   * available file descriptors. Test 537 will try to run
   * with a very small number of file descriptors available.
   * This implies that any file descriptor which is open
   * when the test runs will have a number in the high range
   * of whatever the system supports.
   */</comment>

  <comment type="block" pos:line="119" pos:column="3">/*
   * reserve a chunk of memory before opening file descriptors to
   * avoid a low memory condition once the file descriptors are
   * open. System conditions that could make the test fail should
   * be addressed in the precheck phase. This chunk of memory shall
   * be always free()ed before exiting the rlimit() function so
   * that it becomes available to the test.
   */</comment>

  <for pos:line="128" pos:column="3">for <control pos:line="128" pos:column="7">(<init><expr><name pos:line="128" pos:column="8">nitems<pos:position pos:line="128" pos:column="14"/></name> <operator pos:line="128" pos:column="15">=<pos:position pos:line="128" pos:column="16"/></operator> <name pos:line="128" pos:column="17">i<pos:position pos:line="128" pos:column="18"/></name> <operator pos:line="128" pos:column="19">=<pos:position pos:line="128" pos:column="20"/></operator> <literal type="number" pos:line="128" pos:column="21">1<pos:position pos:line="128" pos:column="22"/></literal></expr>;<pos:position pos:line="128" pos:column="23"/></init> <condition><expr><name pos:line="128" pos:column="24">nitems<pos:position pos:line="128" pos:column="30"/></name> <operator pos:line="128" pos:column="31">&lt;=<pos:position pos:line="128" pos:column="36"/></operator> <name pos:line="128" pos:column="34">i<pos:position pos:line="128" pos:column="35"/></name></expr>;<pos:position pos:line="128" pos:column="36"/></condition> <incr><expr><name pos:line="128" pos:column="37">i<pos:position pos:line="128" pos:column="38"/></name> <operator pos:line="128" pos:column="39">*=<pos:position pos:line="128" pos:column="41"/></operator> <literal type="number" pos:line="128" pos:column="42">2<pos:position pos:line="128" pos:column="43"/></literal></expr></incr>)<pos:position pos:line="128" pos:column="44"/></control>
    <block type="pseudo"><expr_stmt><expr><name pos:line="129" pos:column="5">nitems<pos:position pos:line="129" pos:column="11"/></name> <operator pos:line="129" pos:column="12">=<pos:position pos:line="129" pos:column="13"/></operator> <name pos:line="129" pos:column="14">i<pos:position pos:line="129" pos:column="15"/></name></expr>;<pos:position pos:line="129" pos:column="16"/></expr_stmt></block></for>
  <if pos:line="130" pos:column="3">if <condition pos:line="130" pos:column="6">(<expr><name pos:line="130" pos:column="7">nitems<pos:position pos:line="130" pos:column="13"/></name> <operator pos:line="130" pos:column="14">&gt;<pos:position pos:line="130" pos:column="18"/></operator> <literal type="number" pos:line="130" pos:column="16">0x7fff<pos:position pos:line="130" pos:column="22"/></literal></expr>)<pos:position pos:line="130" pos:column="23"/></condition><then pos:line="130" pos:column="23">
    <block type="pseudo"><expr_stmt><expr><name pos:line="131" pos:column="5">nitems<pos:position pos:line="131" pos:column="11"/></name> <operator pos:line="131" pos:column="12">=<pos:position pos:line="131" pos:column="13"/></operator> <literal type="number" pos:line="131" pos:column="14">0x40000<pos:position pos:line="131" pos:column="21"/></literal></expr>;<pos:position pos:line="131" pos:column="22"/></expr_stmt></block></then></if>
  <do pos:line="132" pos:column="3">do <block pos:line="132" pos:column="6">{
    <expr_stmt><expr><name><name pos:line="133" pos:column="5">num_open<pos:position pos:line="133" pos:column="13"/></name><operator pos:line="133" pos:column="13">.<pos:position pos:line="133" pos:column="14"/></operator><name pos:line="133" pos:column="14">rlim_max<pos:position pos:line="133" pos:column="22"/></name></name> <operator pos:line="133" pos:column="23">=<pos:position pos:line="133" pos:column="24"/></operator> <sizeof pos:line="133" pos:column="25">sizeof<argument_list pos:line="133" pos:column="31">(<argument><expr><operator pos:line="133" pos:column="32">*<pos:position pos:line="133" pos:column="33"/></operator><name pos:line="133" pos:column="33">memchunk<pos:position pos:line="133" pos:column="41"/></name></expr></argument>)<pos:position pos:line="133" pos:column="42"/></argument_list></sizeof> <operator pos:line="133" pos:column="43">*<pos:position pos:line="133" pos:column="44"/></operator> <operator pos:line="133" pos:column="45">(<pos:position pos:line="133" pos:column="46"/></operator><name pos:line="133" pos:column="46">size_t<pos:position pos:line="133" pos:column="52"/></name><operator pos:line="133" pos:column="52">)<pos:position pos:line="133" pos:column="53"/></operator><name pos:line="133" pos:column="53">nitems<pos:position pos:line="133" pos:column="59"/></name></expr>;<pos:position pos:line="133" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="134" pos:column="5">sprintf<pos:position pos:line="134" pos:column="12"/></name><argument_list pos:line="134" pos:column="12">(<argument><expr><name pos:line="134" pos:column="13">strbuff<pos:position pos:line="134" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="22">fmt<pos:position pos:line="134" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="27">num_open<pos:position pos:line="134" pos:column="35"/></name><operator pos:line="134" pos:column="35">.<pos:position pos:line="134" pos:column="36"/></operator><name pos:line="134" pos:column="36">rlim_max<pos:position pos:line="134" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="134" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">fprintf<pos:position pos:line="135" pos:column="12"/></name><argument_list pos:line="135" pos:column="12">(<argument><expr><name pos:line="135" pos:column="13">stderr<pos:position pos:line="135" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="21">"allocating memchunk %s byte array\n"<pos:position pos:line="135" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="60">strbuff<pos:position pos:line="135" pos:column="67"/></name></expr></argument>)<pos:position pos:line="135" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><name pos:line="136" pos:column="5">memchunk<pos:position pos:line="136" pos:column="13"/></name> <operator pos:line="136" pos:column="14">=<pos:position pos:line="136" pos:column="15"/></operator> <call><name pos:line="136" pos:column="16">malloc<pos:position pos:line="136" pos:column="22"/></name><argument_list pos:line="136" pos:column="22">(<argument><expr><sizeof pos:line="136" pos:column="23">sizeof<argument_list pos:line="136" pos:column="29">(<argument><expr><operator pos:line="136" pos:column="30">*<pos:position pos:line="136" pos:column="31"/></operator><name pos:line="136" pos:column="31">memchunk<pos:position pos:line="136" pos:column="39"/></name></expr></argument>)<pos:position pos:line="136" pos:column="40"/></argument_list></sizeof> <operator pos:line="136" pos:column="41">*<pos:position pos:line="136" pos:column="42"/></operator> <operator pos:line="136" pos:column="43">(<pos:position pos:line="136" pos:column="44"/></operator><name pos:line="136" pos:column="44">size_t<pos:position pos:line="136" pos:column="50"/></name><operator pos:line="136" pos:column="50">)<pos:position pos:line="136" pos:column="51"/></operator><name pos:line="136" pos:column="51">nitems<pos:position pos:line="136" pos:column="57"/></name></expr></argument>)<pos:position pos:line="136" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="59"/></expr_stmt>
    <if pos:line="137" pos:column="5">if <condition pos:line="137" pos:column="8">(<expr><operator pos:line="137" pos:column="9">!<pos:position pos:line="137" pos:column="10"/></operator><name pos:line="137" pos:column="10">memchunk<pos:position pos:line="137" pos:column="18"/></name></expr>)<pos:position pos:line="137" pos:column="19"/></condition><then pos:line="137" pos:column="19"> <block pos:line="137" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="138" pos:column="7">fprintf<pos:position pos:line="138" pos:column="14"/></name><argument_list pos:line="138" pos:column="14">(<argument><expr><name pos:line="138" pos:column="15">stderr<pos:position pos:line="138" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="138" pos:column="23">"memchunk, malloc() failed\n"<pos:position pos:line="138" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="54"/></expr_stmt>
      <expr_stmt><expr><name pos:line="139" pos:column="7">nitems<pos:position pos:line="139" pos:column="13"/></name> <operator pos:line="139" pos:column="14">/=<pos:position pos:line="139" pos:column="16"/></operator> <literal type="number" pos:line="139" pos:column="17">2<pos:position pos:line="139" pos:column="18"/></literal></expr>;<pos:position pos:line="139" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="140" pos:column="6"/></block></then></if>
  }<pos:position pos:line="141" pos:column="4"/></block> while <condition pos:line="141" pos:column="11">(<expr><name pos:line="141" pos:column="12">nitems<pos:position pos:line="141" pos:column="18"/></name> <operator pos:line="141" pos:column="19">&amp;&amp;<pos:position pos:line="141" pos:column="29"/></operator> <operator pos:line="141" pos:column="22">!<pos:position pos:line="141" pos:column="23"/></operator><name pos:line="141" pos:column="23">memchunk<pos:position pos:line="141" pos:column="31"/></name></expr>)<pos:position pos:line="141" pos:column="32"/></condition>;<pos:position pos:line="141" pos:column="33"/></do>
  <if pos:line="142" pos:column="3">if <condition pos:line="142" pos:column="6">(<expr><operator pos:line="142" pos:column="7">!<pos:position pos:line="142" pos:column="8"/></operator><name pos:line="142" pos:column="8">memchunk<pos:position pos:line="142" pos:column="16"/></name></expr>)<pos:position pos:line="142" pos:column="17"/></condition><then pos:line="142" pos:column="17"> <block pos:line="142" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="143" pos:column="5">store_errmsg<pos:position pos:line="143" pos:column="17"/></name><argument_list pos:line="143" pos:column="17">(<argument><expr><literal type="string" pos:line="143" pos:column="18">"memchunk, malloc() failed"<pos:position pos:line="143" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="143" pos:column="47">ERRNO<pos:position pos:line="143" pos:column="52"/></name></expr></argument>)<pos:position pos:line="143" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="144" pos:column="5">fprintf<pos:position pos:line="144" pos:column="12"/></name><argument_list pos:line="144" pos:column="12">(<argument><expr><name pos:line="144" pos:column="13">stderr<pos:position pos:line="144" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="144" pos:column="21">"%s\n"<pos:position pos:line="144" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="144" pos:column="29">msgbuff<pos:position pos:line="144" pos:column="36"/></name></expr></argument>)<pos:position pos:line="144" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="38"/></expr_stmt>
    <return pos:line="145" pos:column="5">return <expr><operator pos:line="145" pos:column="12">-<pos:position pos:line="145" pos:column="13"/></operator><literal type="number" pos:line="145" pos:column="13">4<pos:position pos:line="145" pos:column="14"/></literal></expr>;<pos:position pos:line="145" pos:column="15"/></return>
  }<pos:position pos:line="146" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="148" pos:column="3">/* initialize it to fight lazy allocation */</comment>

  <expr_stmt><expr><call><name pos:line="150" pos:column="3">fprintf<pos:position pos:line="150" pos:column="10"/></name><argument_list pos:line="150" pos:column="10">(<argument><expr><name pos:line="150" pos:column="11">stderr<pos:position pos:line="150" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="19">"initializing memchunk array\n"<pos:position pos:line="150" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="52"/></expr_stmt>

  <for pos:line="152" pos:column="3">for <control pos:line="152" pos:column="7">(<init><expr><name pos:line="152" pos:column="8">i<pos:position pos:line="152" pos:column="9"/></name> <operator pos:line="152" pos:column="10">=<pos:position pos:line="152" pos:column="11"/></operator> <literal type="number" pos:line="152" pos:column="12">0<pos:position pos:line="152" pos:column="13"/></literal></expr>;<pos:position pos:line="152" pos:column="14"/></init> <condition><expr><name pos:line="152" pos:column="15">i<pos:position pos:line="152" pos:column="16"/></name> <operator pos:line="152" pos:column="17">&lt;<pos:position pos:line="152" pos:column="21"/></operator> <name pos:line="152" pos:column="19">nitems<pos:position pos:line="152" pos:column="25"/></name></expr>;<pos:position pos:line="152" pos:column="26"/></condition> <incr><expr><name pos:line="152" pos:column="27">i<pos:position pos:line="152" pos:column="28"/></name><operator pos:line="152" pos:column="28">++<pos:position pos:line="152" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="152" pos:column="31"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="153" pos:column="5">memchunk<pos:position pos:line="153" pos:column="13"/></name><index pos:line="153" pos:column="13">[<expr><name pos:line="153" pos:column="14">i<pos:position pos:line="153" pos:column="15"/></name></expr>]<pos:position pos:line="153" pos:column="16"/></index></name> <operator pos:line="153" pos:column="17">=<pos:position pos:line="153" pos:column="18"/></operator> <operator pos:line="153" pos:column="19">-<pos:position pos:line="153" pos:column="20"/></operator><literal type="number" pos:line="153" pos:column="20">1<pos:position pos:line="153" pos:column="21"/></literal></expr>;<pos:position pos:line="153" pos:column="22"/></expr_stmt></block></for>

  <comment type="block" pos:line="155" pos:column="3">/* set the number of file descriptors we will try to open */</comment>

<cpp:ifdef pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">ifdef<pos:position pos:line="157" pos:column="7"/></cpp:directive> <name pos:line="157" pos:column="8">RLIM_INFINITY<pos:position pos:line="157" pos:column="21"/></name></cpp:ifdef>
  <if pos:line="158" pos:column="3">if <condition pos:line="158" pos:column="6">(<expr><operator pos:line="158" pos:column="7">(<pos:position pos:line="158" pos:column="8"/></operator><name><name pos:line="158" pos:column="8">rl<pos:position pos:line="158" pos:column="10"/></name><operator pos:line="158" pos:column="10">.<pos:position pos:line="158" pos:column="11"/></operator><name pos:line="158" pos:column="11">rlim_cur<pos:position pos:line="158" pos:column="19"/></name></name> <operator pos:line="158" pos:column="20">&gt;<pos:position pos:line="158" pos:column="24"/></operator> <literal type="number" pos:line="158" pos:column="22">0<pos:position pos:line="158" pos:column="23"/></literal><operator pos:line="158" pos:column="23">)<pos:position pos:line="158" pos:column="24"/></operator> <operator pos:line="158" pos:column="25">&amp;&amp;<pos:position pos:line="158" pos:column="35"/></operator> <operator pos:line="158" pos:column="28">(<pos:position pos:line="158" pos:column="29"/></operator><name><name pos:line="158" pos:column="29">rl<pos:position pos:line="158" pos:column="31"/></name><operator pos:line="158" pos:column="31">.<pos:position pos:line="158" pos:column="32"/></operator><name pos:line="158" pos:column="32">rlim_cur<pos:position pos:line="158" pos:column="40"/></name></name> <operator pos:line="158" pos:column="41">!=<pos:position pos:line="158" pos:column="43"/></operator> <name pos:line="158" pos:column="44">RLIM_INFINITY<pos:position pos:line="158" pos:column="57"/></name><operator pos:line="158" pos:column="57">)<pos:position pos:line="158" pos:column="58"/></operator></expr>)<pos:position pos:line="158" pos:column="59"/></condition><then pos:line="158" pos:column="59"> <block pos:line="158" pos:column="60">{
<cpp:else pos:line="159" pos:column="1">#<cpp:directive pos:line="159" pos:column="2">else<pos:position pos:line="159" pos:column="6"/></cpp:directive></cpp:else>
  <if pos:line="160" pos:column="3">if <condition pos:line="160" pos:column="6">(<expr><name><name pos:line="160" pos:column="7">rl<pos:position pos:line="160" pos:column="9"/></name><operator pos:line="160" pos:column="9">.<pos:position pos:line="160" pos:column="10"/></operator><name pos:line="160" pos:column="10">rlim_cur<pos:position pos:line="160" pos:column="18"/></name></name> <operator pos:line="160" pos:column="19">&gt;<pos:position pos:line="160" pos:column="23"/></operator> <literal type="number" pos:line="160" pos:column="21">0<pos:position pos:line="160" pos:column="22"/></literal></expr>)<pos:position pos:line="160" pos:column="23"/></condition><then pos:line="160" pos:column="23"> <block pos:line="160" pos:column="24">{
<cpp:endif pos:line="161" pos:column="1">#<cpp:directive pos:line="161" pos:column="2">endif<pos:position pos:line="161" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="162" pos:column="5">/* soft limit minus SAFETY_MARGIN */</comment>
    <expr_stmt><expr><name><name pos:line="163" pos:column="5">num_open<pos:position pos:line="163" pos:column="13"/></name><operator pos:line="163" pos:column="13">.<pos:position pos:line="163" pos:column="14"/></operator><name pos:line="163" pos:column="14">rlim_max<pos:position pos:line="163" pos:column="22"/></name></name> <operator pos:line="163" pos:column="23">=<pos:position pos:line="163" pos:column="24"/></operator> <name><name pos:line="163" pos:column="25">rl<pos:position pos:line="163" pos:column="27"/></name><operator pos:line="163" pos:column="27">.<pos:position pos:line="163" pos:column="28"/></operator><name pos:line="163" pos:column="28">rlim_cur<pos:position pos:line="163" pos:column="36"/></name></name> <operator pos:line="163" pos:column="37">-<pos:position pos:line="163" pos:column="38"/></operator> <name pos:line="163" pos:column="39">SAFETY_MARGIN<pos:position pos:line="163" pos:column="52"/></name></expr>;<pos:position pos:line="163" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="164" pos:column="4"/></block></then>
  <else pos:line="165" pos:column="3">else <block pos:line="165" pos:column="8">{
    <comment type="block" pos:line="166" pos:column="5">/* a huge number of file descriptors */</comment>
    <for pos:line="167" pos:column="5">for <control pos:line="167" pos:column="9">(<init><expr><name pos:line="167" pos:column="10">nitems<pos:position pos:line="167" pos:column="16"/></name> <operator pos:line="167" pos:column="17">=<pos:position pos:line="167" pos:column="18"/></operator> <name pos:line="167" pos:column="19">i<pos:position pos:line="167" pos:column="20"/></name> <operator pos:line="167" pos:column="21">=<pos:position pos:line="167" pos:column="22"/></operator> <literal type="number" pos:line="167" pos:column="23">1<pos:position pos:line="167" pos:column="24"/></literal></expr>;<pos:position pos:line="167" pos:column="25"/></init> <condition><expr><name pos:line="167" pos:column="26">nitems<pos:position pos:line="167" pos:column="32"/></name> <operator pos:line="167" pos:column="33">&lt;=<pos:position pos:line="167" pos:column="38"/></operator> <name pos:line="167" pos:column="36">i<pos:position pos:line="167" pos:column="37"/></name></expr>;<pos:position pos:line="167" pos:column="38"/></condition> <incr><expr><name pos:line="167" pos:column="39">i<pos:position pos:line="167" pos:column="40"/></name> <operator pos:line="167" pos:column="41">*=<pos:position pos:line="167" pos:column="43"/></operator> <literal type="number" pos:line="167" pos:column="44">2<pos:position pos:line="167" pos:column="45"/></literal></expr></incr>)<pos:position pos:line="167" pos:column="46"/></control>
      <block type="pseudo"><expr_stmt><expr><name pos:line="168" pos:column="7">nitems<pos:position pos:line="168" pos:column="13"/></name> <operator pos:line="168" pos:column="14">=<pos:position pos:line="168" pos:column="15"/></operator> <name pos:line="168" pos:column="16">i<pos:position pos:line="168" pos:column="17"/></name></expr>;<pos:position pos:line="168" pos:column="18"/></expr_stmt></block></for>
    <if pos:line="169" pos:column="5">if <condition pos:line="169" pos:column="8">(<expr><name pos:line="169" pos:column="9">nitems<pos:position pos:line="169" pos:column="15"/></name> <operator pos:line="169" pos:column="16">&gt;<pos:position pos:line="169" pos:column="20"/></operator> <literal type="number" pos:line="169" pos:column="18">0x7fff<pos:position pos:line="169" pos:column="24"/></literal></expr>)<pos:position pos:line="169" pos:column="25"/></condition><then pos:line="169" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><name pos:line="170" pos:column="7">nitems<pos:position pos:line="170" pos:column="13"/></name> <operator pos:line="170" pos:column="14">=<pos:position pos:line="170" pos:column="15"/></operator> <literal type="number" pos:line="170" pos:column="16">0x40000<pos:position pos:line="170" pos:column="23"/></literal></expr>;<pos:position pos:line="170" pos:column="24"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="171" pos:column="5">num_open<pos:position pos:line="171" pos:column="13"/></name><operator pos:line="171" pos:column="13">.<pos:position pos:line="171" pos:column="14"/></operator><name pos:line="171" pos:column="14">rlim_max<pos:position pos:line="171" pos:column="22"/></name></name> <operator pos:line="171" pos:column="23">=<pos:position pos:line="171" pos:column="24"/></operator> <name pos:line="171" pos:column="25">nitems<pos:position pos:line="171" pos:column="31"/></name></expr>;<pos:position pos:line="171" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="172" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="174" pos:column="3">/* verify that we won't overflow size_t in malloc() */</comment>

  <if pos:line="176" pos:column="3">if <condition pos:line="176" pos:column="6">(<expr><call pos:line="176" pos:column="7">(<name pos:line="176" pos:column="8">size_t<pos:position pos:line="176" pos:column="14"/></name>)<argument_list pos:line="176" pos:column="15">(<argument><expr><name><name pos:line="176" pos:column="16">num_open<pos:position pos:line="176" pos:column="24"/></name><operator pos:line="176" pos:column="24">.<pos:position pos:line="176" pos:column="25"/></operator><name pos:line="176" pos:column="25">rlim_max<pos:position pos:line="176" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="34"/></argument_list></call> <operator pos:line="176" pos:column="35">&gt;<pos:position pos:line="176" pos:column="39"/></operator> <operator pos:line="176" pos:column="37">(<pos:position pos:line="176" pos:column="38"/></operator><operator pos:line="176" pos:column="38">(<pos:position pos:line="176" pos:column="39"/></operator><name pos:line="176" pos:column="39">size_t<pos:position pos:line="176" pos:column="45"/></name><operator pos:line="176" pos:column="45">)<pos:position pos:line="176" pos:column="46"/></operator><operator pos:line="176" pos:column="46">-<pos:position pos:line="176" pos:column="47"/></operator><literal type="number" pos:line="176" pos:column="47">1<pos:position pos:line="176" pos:column="48"/></literal><operator pos:line="176" pos:column="48">)<pos:position pos:line="176" pos:column="49"/></operator> <operator pos:line="176" pos:column="50">/<pos:position pos:line="176" pos:column="51"/></operator> <sizeof pos:line="176" pos:column="52">sizeof<argument_list pos:line="176" pos:column="58">(<argument><expr><operator pos:line="176" pos:column="59">*<pos:position pos:line="176" pos:column="60"/></operator><name pos:line="176" pos:column="60">fd<pos:position pos:line="176" pos:column="62"/></name></expr></argument>)<pos:position pos:line="176" pos:column="63"/></argument_list></sizeof></expr>)<pos:position pos:line="176" pos:column="64"/></condition><then pos:line="176" pos:column="64"> <block pos:line="176" pos:column="65">{
    <expr_stmt><expr><call><name pos:line="177" pos:column="5">sprintf<pos:position pos:line="177" pos:column="12"/></name><argument_list pos:line="177" pos:column="12">(<argument><expr><name pos:line="177" pos:column="13">strbuff1<pos:position pos:line="177" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="23">fmt<pos:position pos:line="177" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="177" pos:column="28">num_open<pos:position pos:line="177" pos:column="36"/></name><operator pos:line="177" pos:column="36">.<pos:position pos:line="177" pos:column="37"/></operator><name pos:line="177" pos:column="37">rlim_max<pos:position pos:line="177" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="177" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="178" pos:column="5">sprintf<pos:position pos:line="178" pos:column="12"/></name><argument_list pos:line="178" pos:column="12">(<argument><expr><name pos:line="178" pos:column="13">strbuff<pos:position pos:line="178" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="178" pos:column="22">"unable to allocate an array for %s "<pos:position pos:line="178" pos:column="59"/></literal>
            <literal type="string" pos:line="179" pos:column="13">"file descriptors, would overflow size_t"<pos:position pos:line="179" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="179" pos:column="56">strbuff1<pos:position pos:line="179" pos:column="64"/></name></expr></argument>)<pos:position pos:line="179" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="180" pos:column="5">store_errmsg<pos:position pos:line="180" pos:column="17"/></name><argument_list pos:line="180" pos:column="17">(<argument><expr><name pos:line="180" pos:column="18">strbuff<pos:position pos:line="180" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="180" pos:column="27">0<pos:position pos:line="180" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="181" pos:column="5">fprintf<pos:position pos:line="181" pos:column="12"/></name><argument_list pos:line="181" pos:column="12">(<argument><expr><name pos:line="181" pos:column="13">stderr<pos:position pos:line="181" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="181" pos:column="21">"%s\n"<pos:position pos:line="181" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="181" pos:column="29">msgbuff<pos:position pos:line="181" pos:column="36"/></name></expr></argument>)<pos:position pos:line="181" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="182" pos:column="5">free<pos:position pos:line="182" pos:column="9"/></name><argument_list pos:line="182" pos:column="9">(<argument><expr><name pos:line="182" pos:column="10">memchunk<pos:position pos:line="182" pos:column="18"/></name></expr></argument>)<pos:position pos:line="182" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="20"/></expr_stmt>
    <return pos:line="183" pos:column="5">return <expr><operator pos:line="183" pos:column="12">-<pos:position pos:line="183" pos:column="13"/></operator><literal type="number" pos:line="183" pos:column="13">5<pos:position pos:line="183" pos:column="14"/></literal></expr>;<pos:position pos:line="183" pos:column="15"/></return>
  }<pos:position pos:line="184" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="186" pos:column="3">/* allocate array for file descriptors */</comment>

  <do pos:line="188" pos:column="3">do <block pos:line="188" pos:column="6">{
    <expr_stmt><expr><call><name pos:line="189" pos:column="5">sprintf<pos:position pos:line="189" pos:column="12"/></name><argument_list pos:line="189" pos:column="12">(<argument><expr><name pos:line="189" pos:column="13">strbuff<pos:position pos:line="189" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="22">fmt<pos:position pos:line="189" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="27">num_open<pos:position pos:line="189" pos:column="35"/></name><operator pos:line="189" pos:column="35">.<pos:position pos:line="189" pos:column="36"/></operator><name pos:line="189" pos:column="36">rlim_max<pos:position pos:line="189" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="189" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="190" pos:column="5">fprintf<pos:position pos:line="190" pos:column="12"/></name><argument_list pos:line="190" pos:column="12">(<argument><expr><name pos:line="190" pos:column="13">stderr<pos:position pos:line="190" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="190" pos:column="21">"allocating array for %s file descriptors\n"<pos:position pos:line="190" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="67">strbuff<pos:position pos:line="190" pos:column="74"/></name></expr></argument>)<pos:position pos:line="190" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><name pos:line="191" pos:column="5">fd<pos:position pos:line="191" pos:column="7"/></name> <operator pos:line="191" pos:column="8">=<pos:position pos:line="191" pos:column="9"/></operator> <call><name pos:line="191" pos:column="10">malloc<pos:position pos:line="191" pos:column="16"/></name><argument_list pos:line="191" pos:column="16">(<argument><expr><sizeof pos:line="191" pos:column="17">sizeof<argument_list pos:line="191" pos:column="23">(<argument><expr><operator pos:line="191" pos:column="24">*<pos:position pos:line="191" pos:column="25"/></operator><name pos:line="191" pos:column="25">fd<pos:position pos:line="191" pos:column="27"/></name></expr></argument>)<pos:position pos:line="191" pos:column="28"/></argument_list></sizeof> <operator pos:line="191" pos:column="29">*<pos:position pos:line="191" pos:column="30"/></operator> <call pos:line="191" pos:column="31">(<name pos:line="191" pos:column="32">size_t<pos:position pos:line="191" pos:column="38"/></name>)<argument_list pos:line="191" pos:column="39">(<argument><expr><name><name pos:line="191" pos:column="40">num_open<pos:position pos:line="191" pos:column="48"/></name><operator pos:line="191" pos:column="48">.<pos:position pos:line="191" pos:column="49"/></operator><name pos:line="191" pos:column="49">rlim_max<pos:position pos:line="191" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="191" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="191" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="60"/></expr_stmt>
    <if pos:line="192" pos:column="5">if <condition pos:line="192" pos:column="8">(<expr><operator pos:line="192" pos:column="9">!<pos:position pos:line="192" pos:column="10"/></operator><name pos:line="192" pos:column="10">fd<pos:position pos:line="192" pos:column="12"/></name></expr>)<pos:position pos:line="192" pos:column="13"/></condition><then pos:line="192" pos:column="13"> <block pos:line="192" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="193" pos:column="7">fprintf<pos:position pos:line="193" pos:column="14"/></name><argument_list pos:line="193" pos:column="14">(<argument><expr><name pos:line="193" pos:column="15">stderr<pos:position pos:line="193" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="193" pos:column="23">"fd, malloc() failed\n"<pos:position pos:line="193" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="194" pos:column="7">num_open<pos:position pos:line="194" pos:column="15"/></name><operator pos:line="194" pos:column="15">.<pos:position pos:line="194" pos:column="16"/></operator><name pos:line="194" pos:column="16">rlim_max<pos:position pos:line="194" pos:column="24"/></name></name> <operator pos:line="194" pos:column="25">/=<pos:position pos:line="194" pos:column="27"/></operator> <literal type="number" pos:line="194" pos:column="28">2<pos:position pos:line="194" pos:column="29"/></literal></expr>;<pos:position pos:line="194" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="195" pos:column="6"/></block></then></if>
  }<pos:position pos:line="196" pos:column="4"/></block> while <condition pos:line="196" pos:column="11">(<expr><name><name pos:line="196" pos:column="12">num_open<pos:position pos:line="196" pos:column="20"/></name><operator pos:line="196" pos:column="20">.<pos:position pos:line="196" pos:column="21"/></operator><name pos:line="196" pos:column="21">rlim_max<pos:position pos:line="196" pos:column="29"/></name></name> <operator pos:line="196" pos:column="30">&amp;&amp;<pos:position pos:line="196" pos:column="40"/></operator> <operator pos:line="196" pos:column="33">!<pos:position pos:line="196" pos:column="34"/></operator><name pos:line="196" pos:column="34">fd<pos:position pos:line="196" pos:column="36"/></name></expr>)<pos:position pos:line="196" pos:column="37"/></condition>;<pos:position pos:line="196" pos:column="38"/></do>
  <if pos:line="197" pos:column="3">if <condition pos:line="197" pos:column="6">(<expr><operator pos:line="197" pos:column="7">!<pos:position pos:line="197" pos:column="8"/></operator><name pos:line="197" pos:column="8">fd<pos:position pos:line="197" pos:column="10"/></name></expr>)<pos:position pos:line="197" pos:column="11"/></condition><then pos:line="197" pos:column="11"> <block pos:line="197" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="198" pos:column="5">store_errmsg<pos:position pos:line="198" pos:column="17"/></name><argument_list pos:line="198" pos:column="17">(<argument><expr><literal type="string" pos:line="198" pos:column="18">"fd, malloc() failed"<pos:position pos:line="198" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="41">ERRNO<pos:position pos:line="198" pos:column="46"/></name></expr></argument>)<pos:position pos:line="198" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="199" pos:column="5">fprintf<pos:position pos:line="199" pos:column="12"/></name><argument_list pos:line="199" pos:column="12">(<argument><expr><name pos:line="199" pos:column="13">stderr<pos:position pos:line="199" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="199" pos:column="21">"%s\n"<pos:position pos:line="199" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="199" pos:column="29">msgbuff<pos:position pos:line="199" pos:column="36"/></name></expr></argument>)<pos:position pos:line="199" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="200" pos:column="5">free<pos:position pos:line="200" pos:column="9"/></name><argument_list pos:line="200" pos:column="9">(<argument><expr><name pos:line="200" pos:column="10">memchunk<pos:position pos:line="200" pos:column="18"/></name></expr></argument>)<pos:position pos:line="200" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="20"/></expr_stmt>
    <return pos:line="201" pos:column="5">return <expr><operator pos:line="201" pos:column="12">-<pos:position pos:line="201" pos:column="13"/></operator><literal type="number" pos:line="201" pos:column="13">6<pos:position pos:line="201" pos:column="14"/></literal></expr>;<pos:position pos:line="201" pos:column="15"/></return>
  }<pos:position pos:line="202" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="204" pos:column="3">/* initialize it to fight lazy allocation */</comment>

  <expr_stmt><expr><call><name pos:line="206" pos:column="3">fprintf<pos:position pos:line="206" pos:column="10"/></name><argument_list pos:line="206" pos:column="10">(<argument><expr><name pos:line="206" pos:column="11">stderr<pos:position pos:line="206" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="206" pos:column="19">"initializing fd array\n"<pos:position pos:line="206" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="206" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="46"/></expr_stmt>

  <for pos:line="208" pos:column="3">for <control pos:line="208" pos:column="7">(<init><expr><name><name pos:line="208" pos:column="8">num_open<pos:position pos:line="208" pos:column="16"/></name><operator pos:line="208" pos:column="16">.<pos:position pos:line="208" pos:column="17"/></operator><name pos:line="208" pos:column="17">rlim_cur<pos:position pos:line="208" pos:column="25"/></name></name> <operator pos:line="208" pos:column="26">=<pos:position pos:line="208" pos:column="27"/></operator> <literal type="number" pos:line="208" pos:column="28">0<pos:position pos:line="208" pos:column="29"/></literal></expr>;<pos:position pos:line="208" pos:column="30"/></init>
       <condition><expr><name><name pos:line="209" pos:column="8">num_open<pos:position pos:line="209" pos:column="16"/></name><operator pos:line="209" pos:column="16">.<pos:position pos:line="209" pos:column="17"/></operator><name pos:line="209" pos:column="17">rlim_cur<pos:position pos:line="209" pos:column="25"/></name></name> <operator pos:line="209" pos:column="26">&lt;<pos:position pos:line="209" pos:column="30"/></operator> <name><name pos:line="209" pos:column="28">num_open<pos:position pos:line="209" pos:column="36"/></name><operator pos:line="209" pos:column="36">.<pos:position pos:line="209" pos:column="37"/></operator><name pos:line="209" pos:column="37">rlim_max<pos:position pos:line="209" pos:column="45"/></name></name></expr>;<pos:position pos:line="209" pos:column="46"/></condition>
       <incr><expr><name><name pos:line="210" pos:column="8">num_open<pos:position pos:line="210" pos:column="16"/></name><operator pos:line="210" pos:column="16">.<pos:position pos:line="210" pos:column="17"/></operator><name pos:line="210" pos:column="17">rlim_cur<pos:position pos:line="210" pos:column="25"/></name></name><operator pos:line="210" pos:column="25">++<pos:position pos:line="210" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="210" pos:column="28"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="211" pos:column="5">fd<pos:position pos:line="211" pos:column="7"/></name><index pos:line="211" pos:column="7">[<expr><name><name pos:line="211" pos:column="8">num_open<pos:position pos:line="211" pos:column="16"/></name><operator pos:line="211" pos:column="16">.<pos:position pos:line="211" pos:column="17"/></operator><name pos:line="211" pos:column="17">rlim_cur<pos:position pos:line="211" pos:column="25"/></name></name></expr>]<pos:position pos:line="211" pos:column="26"/></index></name> <operator pos:line="211" pos:column="27">=<pos:position pos:line="211" pos:column="28"/></operator> <operator pos:line="211" pos:column="29">-<pos:position pos:line="211" pos:column="30"/></operator><literal type="number" pos:line="211" pos:column="30">1<pos:position pos:line="211" pos:column="31"/></literal></expr>;<pos:position pos:line="211" pos:column="32"/></expr_stmt></block></for>

  <expr_stmt><expr><call><name pos:line="213" pos:column="3">sprintf<pos:position pos:line="213" pos:column="10"/></name><argument_list pos:line="213" pos:column="10">(<argument><expr><name pos:line="213" pos:column="11">strbuff<pos:position pos:line="213" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="213" pos:column="20">fmt<pos:position pos:line="213" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="213" pos:column="25">num_open<pos:position pos:line="213" pos:column="33"/></name><operator pos:line="213" pos:column="33">.<pos:position pos:line="213" pos:column="34"/></operator><name pos:line="213" pos:column="34">rlim_max<pos:position pos:line="213" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="213" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="214" pos:column="3">fprintf<pos:position pos:line="214" pos:column="10"/></name><argument_list pos:line="214" pos:column="10">(<argument><expr><name pos:line="214" pos:column="11">stderr<pos:position pos:line="214" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="214" pos:column="19">"trying to open %s file descriptors\n"<pos:position pos:line="214" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="214" pos:column="59">strbuff<pos:position pos:line="214" pos:column="66"/></name></expr></argument>)<pos:position pos:line="214" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="68"/></expr_stmt>

  <comment type="block" pos:line="216" pos:column="3">/* open a dummy descriptor */</comment>

  <expr_stmt><expr><name><name pos:line="218" pos:column="3">fd<pos:position pos:line="218" pos:column="5"/></name><index pos:line="218" pos:column="5">[<expr><literal type="number" pos:line="218" pos:column="6">0<pos:position pos:line="218" pos:column="7"/></literal></expr>]<pos:position pos:line="218" pos:column="8"/></index></name> <operator pos:line="218" pos:column="9">=<pos:position pos:line="218" pos:column="10"/></operator> <call><name pos:line="218" pos:column="11">open<pos:position pos:line="218" pos:column="15"/></name><argument_list pos:line="218" pos:column="15">(<argument><expr><name pos:line="218" pos:column="16">DEV_NULL<pos:position pos:line="218" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="26">O_RDONLY<pos:position pos:line="218" pos:column="34"/></name></expr></argument>)<pos:position pos:line="218" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="36"/></expr_stmt>
  <if pos:line="219" pos:column="3">if <condition pos:line="219" pos:column="6">(<expr><name><name pos:line="219" pos:column="7">fd<pos:position pos:line="219" pos:column="9"/></name><index pos:line="219" pos:column="9">[<expr><literal type="number" pos:line="219" pos:column="10">0<pos:position pos:line="219" pos:column="11"/></literal></expr>]<pos:position pos:line="219" pos:column="12"/></index></name> <operator pos:line="219" pos:column="13">&lt;<pos:position pos:line="219" pos:column="17"/></operator> <literal type="number" pos:line="219" pos:column="15">0<pos:position pos:line="219" pos:column="16"/></literal></expr>)<pos:position pos:line="219" pos:column="17"/></condition><then pos:line="219" pos:column="17"> <block pos:line="219" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="220" pos:column="5">sprintf<pos:position pos:line="220" pos:column="12"/></name><argument_list pos:line="220" pos:column="12">(<argument><expr><name pos:line="220" pos:column="13">strbuff<pos:position pos:line="220" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="220" pos:column="22">"opening of %s failed"<pos:position pos:line="220" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="220" pos:column="46">DEV_NULL<pos:position pos:line="220" pos:column="54"/></name></expr></argument>)<pos:position pos:line="220" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="221" pos:column="5">store_errmsg<pos:position pos:line="221" pos:column="17"/></name><argument_list pos:line="221" pos:column="17">(<argument><expr><name pos:line="221" pos:column="18">strbuff<pos:position pos:line="221" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="27">ERRNO<pos:position pos:line="221" pos:column="32"/></name></expr></argument>)<pos:position pos:line="221" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="222" pos:column="5">fprintf<pos:position pos:line="222" pos:column="12"/></name><argument_list pos:line="222" pos:column="12">(<argument><expr><name pos:line="222" pos:column="13">stderr<pos:position pos:line="222" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="222" pos:column="21">"%s\n"<pos:position pos:line="222" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="29">msgbuff<pos:position pos:line="222" pos:column="36"/></name></expr></argument>)<pos:position pos:line="222" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="223" pos:column="5">free<pos:position pos:line="223" pos:column="9"/></name><argument_list pos:line="223" pos:column="9">(<argument><expr><name pos:line="223" pos:column="10">fd<pos:position pos:line="223" pos:column="12"/></name></expr></argument>)<pos:position pos:line="223" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="224" pos:column="5">fd<pos:position pos:line="224" pos:column="7"/></name> <operator pos:line="224" pos:column="8">=<pos:position pos:line="224" pos:column="9"/></operator> <name pos:line="224" pos:column="10">NULL<pos:position pos:line="224" pos:column="14"/></name></expr>;<pos:position pos:line="224" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="225" pos:column="5">free<pos:position pos:line="225" pos:column="9"/></name><argument_list pos:line="225" pos:column="9">(<argument><expr><name pos:line="225" pos:column="10">memchunk<pos:position pos:line="225" pos:column="18"/></name></expr></argument>)<pos:position pos:line="225" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="20"/></expr_stmt>
    <return pos:line="226" pos:column="5">return <expr><operator pos:line="226" pos:column="12">-<pos:position pos:line="226" pos:column="13"/></operator><literal type="number" pos:line="226" pos:column="13">7<pos:position pos:line="226" pos:column="14"/></literal></expr>;<pos:position pos:line="226" pos:column="15"/></return>
  }<pos:position pos:line="227" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="229" pos:column="3">/* create a bunch of file descriptors */</comment>

  <for pos:line="231" pos:column="3">for <control pos:line="231" pos:column="7">(<init><expr><name><name pos:line="231" pos:column="8">num_open<pos:position pos:line="231" pos:column="16"/></name><operator pos:line="231" pos:column="16">.<pos:position pos:line="231" pos:column="17"/></operator><name pos:line="231" pos:column="17">rlim_cur<pos:position pos:line="231" pos:column="25"/></name></name> <operator pos:line="231" pos:column="26">=<pos:position pos:line="231" pos:column="27"/></operator> <literal type="number" pos:line="231" pos:column="28">1<pos:position pos:line="231" pos:column="29"/></literal></expr>;<pos:position pos:line="231" pos:column="30"/></init>
       <condition><expr><name><name pos:line="232" pos:column="8">num_open<pos:position pos:line="232" pos:column="16"/></name><operator pos:line="232" pos:column="16">.<pos:position pos:line="232" pos:column="17"/></operator><name pos:line="232" pos:column="17">rlim_cur<pos:position pos:line="232" pos:column="25"/></name></name> <operator pos:line="232" pos:column="26">&lt;<pos:position pos:line="232" pos:column="30"/></operator> <name><name pos:line="232" pos:column="28">num_open<pos:position pos:line="232" pos:column="36"/></name><operator pos:line="232" pos:column="36">.<pos:position pos:line="232" pos:column="37"/></operator><name pos:line="232" pos:column="37">rlim_max<pos:position pos:line="232" pos:column="45"/></name></name></expr>;<pos:position pos:line="232" pos:column="46"/></condition>
       <incr><expr><name><name pos:line="233" pos:column="8">num_open<pos:position pos:line="233" pos:column="16"/></name><operator pos:line="233" pos:column="16">.<pos:position pos:line="233" pos:column="17"/></operator><name pos:line="233" pos:column="17">rlim_cur<pos:position pos:line="233" pos:column="25"/></name></name><operator pos:line="233" pos:column="25">++<pos:position pos:line="233" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="233" pos:column="28"/></control> <block pos:line="233" pos:column="29">{

    <expr_stmt><expr><name><name pos:line="235" pos:column="5">fd<pos:position pos:line="235" pos:column="7"/></name><index pos:line="235" pos:column="7">[<expr><name><name pos:line="235" pos:column="8">num_open<pos:position pos:line="235" pos:column="16"/></name><operator pos:line="235" pos:column="16">.<pos:position pos:line="235" pos:column="17"/></operator><name pos:line="235" pos:column="17">rlim_cur<pos:position pos:line="235" pos:column="25"/></name></name></expr>]<pos:position pos:line="235" pos:column="26"/></index></name> <operator pos:line="235" pos:column="27">=<pos:position pos:line="235" pos:column="28"/></operator> <call><name pos:line="235" pos:column="29">dup<pos:position pos:line="235" pos:column="32"/></name><argument_list pos:line="235" pos:column="32">(<argument><expr><name><name pos:line="235" pos:column="33">fd<pos:position pos:line="235" pos:column="35"/></name><index pos:line="235" pos:column="35">[<expr><literal type="number" pos:line="235" pos:column="36">0<pos:position pos:line="235" pos:column="37"/></literal></expr>]<pos:position pos:line="235" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="235" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="40"/></expr_stmt>

    <if pos:line="237" pos:column="5">if <condition pos:line="237" pos:column="8">(<expr><name><name pos:line="237" pos:column="9">fd<pos:position pos:line="237" pos:column="11"/></name><index pos:line="237" pos:column="11">[<expr><name><name pos:line="237" pos:column="12">num_open<pos:position pos:line="237" pos:column="20"/></name><operator pos:line="237" pos:column="20">.<pos:position pos:line="237" pos:column="21"/></operator><name pos:line="237" pos:column="21">rlim_cur<pos:position pos:line="237" pos:column="29"/></name></name></expr>]<pos:position pos:line="237" pos:column="30"/></index></name> <operator pos:line="237" pos:column="31">&lt;<pos:position pos:line="237" pos:column="35"/></operator> <literal type="number" pos:line="237" pos:column="33">0<pos:position pos:line="237" pos:column="34"/></literal></expr>)<pos:position pos:line="237" pos:column="35"/></condition><then pos:line="237" pos:column="35"> <block pos:line="237" pos:column="36">{

      <expr_stmt><expr><name><name pos:line="239" pos:column="7">fd<pos:position pos:line="239" pos:column="9"/></name><index pos:line="239" pos:column="9">[<expr><name><name pos:line="239" pos:column="10">num_open<pos:position pos:line="239" pos:column="18"/></name><operator pos:line="239" pos:column="18">.<pos:position pos:line="239" pos:column="19"/></operator><name pos:line="239" pos:column="19">rlim_cur<pos:position pos:line="239" pos:column="27"/></name></name></expr>]<pos:position pos:line="239" pos:column="28"/></index></name> <operator pos:line="239" pos:column="29">=<pos:position pos:line="239" pos:column="30"/></operator> <operator pos:line="239" pos:column="31">-<pos:position pos:line="239" pos:column="32"/></operator><literal type="number" pos:line="239" pos:column="32">1<pos:position pos:line="239" pos:column="33"/></literal></expr>;<pos:position pos:line="239" pos:column="34"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="241" pos:column="7">sprintf<pos:position pos:line="241" pos:column="14"/></name><argument_list pos:line="241" pos:column="14">(<argument><expr><name pos:line="241" pos:column="15">strbuff1<pos:position pos:line="241" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="241" pos:column="25">fmt<pos:position pos:line="241" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="241" pos:column="30">num_open<pos:position pos:line="241" pos:column="38"/></name><operator pos:line="241" pos:column="38">.<pos:position pos:line="241" pos:column="39"/></operator><name pos:line="241" pos:column="39">rlim_cur<pos:position pos:line="241" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="241" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="242" pos:column="7">sprintf<pos:position pos:line="242" pos:column="14"/></name><argument_list pos:line="242" pos:column="14">(<argument><expr><name pos:line="242" pos:column="15">strbuff<pos:position pos:line="242" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="242" pos:column="24">"dup() attempt %s failed"<pos:position pos:line="242" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="242" pos:column="51">strbuff1<pos:position pos:line="242" pos:column="59"/></name></expr></argument>)<pos:position pos:line="242" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="243" pos:column="7">fprintf<pos:position pos:line="243" pos:column="14"/></name><argument_list pos:line="243" pos:column="14">(<argument><expr><name pos:line="243" pos:column="15">stderr<pos:position pos:line="243" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="243" pos:column="23">"%s\n"<pos:position pos:line="243" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="243" pos:column="31">strbuff<pos:position pos:line="243" pos:column="38"/></name></expr></argument>)<pos:position pos:line="243" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="40"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="245" pos:column="7">sprintf<pos:position pos:line="245" pos:column="14"/></name><argument_list pos:line="245" pos:column="14">(<argument><expr><name pos:line="245" pos:column="15">strbuff1<pos:position pos:line="245" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="245" pos:column="25">fmt<pos:position pos:line="245" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="245" pos:column="30">num_open<pos:position pos:line="245" pos:column="38"/></name><operator pos:line="245" pos:column="38">.<pos:position pos:line="245" pos:column="39"/></operator><name pos:line="245" pos:column="39">rlim_cur<pos:position pos:line="245" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="245" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="246" pos:column="7">sprintf<pos:position pos:line="246" pos:column="14"/></name><argument_list pos:line="246" pos:column="14">(<argument><expr><name pos:line="246" pos:column="15">strbuff<pos:position pos:line="246" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="246" pos:column="24">"fds system limit seems close to %s"<pos:position pos:line="246" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="246" pos:column="62">strbuff1<pos:position pos:line="246" pos:column="70"/></name></expr></argument>)<pos:position pos:line="246" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="72"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="247" pos:column="7">fprintf<pos:position pos:line="247" pos:column="14"/></name><argument_list pos:line="247" pos:column="14">(<argument><expr><name pos:line="247" pos:column="15">stderr<pos:position pos:line="247" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="247" pos:column="23">"%s\n"<pos:position pos:line="247" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="247" pos:column="31">strbuff<pos:position pos:line="247" pos:column="38"/></name></expr></argument>)<pos:position pos:line="247" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="40"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="249" pos:column="7">num_open<pos:position pos:line="249" pos:column="15"/></name><operator pos:line="249" pos:column="15">.<pos:position pos:line="249" pos:column="16"/></operator><name pos:line="249" pos:column="16">rlim_max<pos:position pos:line="249" pos:column="24"/></name></name> <operator pos:line="249" pos:column="25">=<pos:position pos:line="249" pos:column="26"/></operator> <name><name pos:line="249" pos:column="27">num_open<pos:position pos:line="249" pos:column="35"/></name><operator pos:line="249" pos:column="35">.<pos:position pos:line="249" pos:column="36"/></operator><name pos:line="249" pos:column="36">rlim_cur<pos:position pos:line="249" pos:column="44"/></name></name> <operator pos:line="249" pos:column="45">-<pos:position pos:line="249" pos:column="46"/></operator> <name pos:line="249" pos:column="47">SAFETY_MARGIN<pos:position pos:line="249" pos:column="60"/></name></expr>;<pos:position pos:line="249" pos:column="61"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="251" pos:column="7">num_open<pos:position pos:line="251" pos:column="15"/></name><operator pos:line="251" pos:column="15">.<pos:position pos:line="251" pos:column="16"/></operator><name pos:line="251" pos:column="16">rlim_cur<pos:position pos:line="251" pos:column="24"/></name></name> <operator pos:line="251" pos:column="25">-=<pos:position pos:line="251" pos:column="27"/></operator> <name><name pos:line="251" pos:column="28">num_open<pos:position pos:line="251" pos:column="36"/></name><operator pos:line="251" pos:column="36">.<pos:position pos:line="251" pos:column="37"/></operator><name pos:line="251" pos:column="37">rlim_max<pos:position pos:line="251" pos:column="45"/></name></name></expr>;<pos:position pos:line="251" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="252" pos:column="7">sprintf<pos:position pos:line="252" pos:column="14"/></name><argument_list pos:line="252" pos:column="14">(<argument><expr><name pos:line="252" pos:column="15">strbuff1<pos:position pos:line="252" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="252" pos:column="25">fmt<pos:position pos:line="252" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="252" pos:column="30">num_open<pos:position pos:line="252" pos:column="38"/></name><operator pos:line="252" pos:column="38">.<pos:position pos:line="252" pos:column="39"/></operator><name pos:line="252" pos:column="39">rlim_cur<pos:position pos:line="252" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="252" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="253" pos:column="7">sprintf<pos:position pos:line="253" pos:column="14"/></name><argument_list pos:line="253" pos:column="14">(<argument><expr><name pos:line="253" pos:column="15">strbuff<pos:position pos:line="253" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="253" pos:column="24">"closing %s file descriptors"<pos:position pos:line="253" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="253" pos:column="55">strbuff1<pos:position pos:line="253" pos:column="63"/></name></expr></argument>)<pos:position pos:line="253" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="65"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="254" pos:column="7">fprintf<pos:position pos:line="254" pos:column="14"/></name><argument_list pos:line="254" pos:column="14">(<argument><expr><name pos:line="254" pos:column="15">stderr<pos:position pos:line="254" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="254" pos:column="23">"%s\n"<pos:position pos:line="254" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="254" pos:column="31">strbuff<pos:position pos:line="254" pos:column="38"/></name></expr></argument>)<pos:position pos:line="254" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="40"/></expr_stmt>

      <for pos:line="256" pos:column="7">for <control pos:line="256" pos:column="11">(<init><expr><name><name pos:line="256" pos:column="12">num_open<pos:position pos:line="256" pos:column="20"/></name><operator pos:line="256" pos:column="20">.<pos:position pos:line="256" pos:column="21"/></operator><name pos:line="256" pos:column="21">rlim_cur<pos:position pos:line="256" pos:column="29"/></name></name> <operator pos:line="256" pos:column="30">=<pos:position pos:line="256" pos:column="31"/></operator> <name><name pos:line="256" pos:column="32">num_open<pos:position pos:line="256" pos:column="40"/></name><operator pos:line="256" pos:column="40">.<pos:position pos:line="256" pos:column="41"/></operator><name pos:line="256" pos:column="41">rlim_max<pos:position pos:line="256" pos:column="49"/></name></name></expr>;<pos:position pos:line="256" pos:column="50"/></init>
           <condition><expr><name><name pos:line="257" pos:column="12">fd<pos:position pos:line="257" pos:column="14"/></name><index pos:line="257" pos:column="14">[<expr><name><name pos:line="257" pos:column="15">num_open<pos:position pos:line="257" pos:column="23"/></name><operator pos:line="257" pos:column="23">.<pos:position pos:line="257" pos:column="24"/></operator><name pos:line="257" pos:column="24">rlim_cur<pos:position pos:line="257" pos:column="32"/></name></name></expr>]<pos:position pos:line="257" pos:column="33"/></index></name> <operator pos:line="257" pos:column="34">&gt;=<pos:position pos:line="257" pos:column="39"/></operator> <literal type="number" pos:line="257" pos:column="37">0<pos:position pos:line="257" pos:column="38"/></literal></expr>;<pos:position pos:line="257" pos:column="39"/></condition>
           <incr><expr><name><name pos:line="258" pos:column="12">num_open<pos:position pos:line="258" pos:column="20"/></name><operator pos:line="258" pos:column="20">.<pos:position pos:line="258" pos:column="21"/></operator><name pos:line="258" pos:column="21">rlim_cur<pos:position pos:line="258" pos:column="29"/></name></name><operator pos:line="258" pos:column="29">++<pos:position pos:line="258" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="258" pos:column="32"/></control> <block pos:line="258" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="259" pos:column="9">close<pos:position pos:line="259" pos:column="14"/></name><argument_list pos:line="259" pos:column="14">(<argument><expr><name><name pos:line="259" pos:column="15">fd<pos:position pos:line="259" pos:column="17"/></name><index pos:line="259" pos:column="17">[<expr><name><name pos:line="259" pos:column="18">num_open<pos:position pos:line="259" pos:column="26"/></name><operator pos:line="259" pos:column="26">.<pos:position pos:line="259" pos:column="27"/></operator><name pos:line="259" pos:column="27">rlim_cur<pos:position pos:line="259" pos:column="35"/></name></name></expr>]<pos:position pos:line="259" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="259" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="260" pos:column="9">fd<pos:position pos:line="260" pos:column="11"/></name><index pos:line="260" pos:column="11">[<expr><name><name pos:line="260" pos:column="12">num_open<pos:position pos:line="260" pos:column="20"/></name><operator pos:line="260" pos:column="20">.<pos:position pos:line="260" pos:column="21"/></operator><name pos:line="260" pos:column="21">rlim_cur<pos:position pos:line="260" pos:column="29"/></name></name></expr>]<pos:position pos:line="260" pos:column="30"/></index></name> <operator pos:line="260" pos:column="31">=<pos:position pos:line="260" pos:column="32"/></operator> <operator pos:line="260" pos:column="33">-<pos:position pos:line="260" pos:column="34"/></operator><literal type="number" pos:line="260" pos:column="34">1<pos:position pos:line="260" pos:column="35"/></literal></expr>;<pos:position pos:line="260" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="261" pos:column="8"/></block></for>

      <expr_stmt><expr><call><name pos:line="263" pos:column="7">sprintf<pos:position pos:line="263" pos:column="14"/></name><argument_list pos:line="263" pos:column="14">(<argument><expr><name pos:line="263" pos:column="15">strbuff<pos:position pos:line="263" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="263" pos:column="24">fmt<pos:position pos:line="263" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="263" pos:column="29">num_open<pos:position pos:line="263" pos:column="37"/></name><operator pos:line="263" pos:column="37">.<pos:position pos:line="263" pos:column="38"/></operator><name pos:line="263" pos:column="38">rlim_max<pos:position pos:line="263" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="263" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="264" pos:column="7">fprintf<pos:position pos:line="264" pos:column="14"/></name><argument_list pos:line="264" pos:column="14">(<argument><expr><name pos:line="264" pos:column="15">stderr<pos:position pos:line="264" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="264" pos:column="23">"shrinking array for %s file descriptors\n"<pos:position pos:line="264" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="264" pos:column="68">strbuff<pos:position pos:line="264" pos:column="75"/></name></expr></argument>)<pos:position pos:line="264" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="77"/></expr_stmt>

      <comment type="block" pos:line="266" pos:column="7">/* we don't care if we can't shrink it */</comment>

      <expr_stmt><expr><name pos:line="268" pos:column="7">tmpfd<pos:position pos:line="268" pos:column="12"/></name> <operator pos:line="268" pos:column="13">=<pos:position pos:line="268" pos:column="14"/></operator> <call><name pos:line="268" pos:column="15">realloc<pos:position pos:line="268" pos:column="22"/></name><argument_list pos:line="268" pos:column="22">(<argument><expr><name pos:line="268" pos:column="23">fd<pos:position pos:line="268" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="268" pos:column="27">sizeof<argument_list pos:line="268" pos:column="33">(<argument><expr><operator pos:line="268" pos:column="34">*<pos:position pos:line="268" pos:column="35"/></operator><name pos:line="268" pos:column="35">fd<pos:position pos:line="268" pos:column="37"/></name></expr></argument>)<pos:position pos:line="268" pos:column="38"/></argument_list></sizeof> <operator pos:line="268" pos:column="39">*<pos:position pos:line="268" pos:column="40"/></operator> <call pos:line="268" pos:column="41">(<name pos:line="268" pos:column="42">size_t<pos:position pos:line="268" pos:column="48"/></name>)<argument_list pos:line="268" pos:column="49">(<argument><expr><name><name pos:line="268" pos:column="50">num_open<pos:position pos:line="268" pos:column="58"/></name><operator pos:line="268" pos:column="58">.<pos:position pos:line="268" pos:column="59"/></operator><name pos:line="268" pos:column="59">rlim_max<pos:position pos:line="268" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="268" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="268" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="70"/></expr_stmt>
      <if pos:line="269" pos:column="7">if <condition pos:line="269" pos:column="10">(<expr><name pos:line="269" pos:column="11">tmpfd<pos:position pos:line="269" pos:column="16"/></name></expr>)<pos:position pos:line="269" pos:column="17"/></condition><then pos:line="269" pos:column="17"> <block pos:line="269" pos:column="18">{
        <expr_stmt><expr><name pos:line="270" pos:column="9">fd<pos:position pos:line="270" pos:column="11"/></name> <operator pos:line="270" pos:column="12">=<pos:position pos:line="270" pos:column="13"/></operator> <name pos:line="270" pos:column="14">tmpfd<pos:position pos:line="270" pos:column="19"/></name></expr>;<pos:position pos:line="270" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="271" pos:column="9">tmpfd<pos:position pos:line="271" pos:column="14"/></name> <operator pos:line="271" pos:column="15">=<pos:position pos:line="271" pos:column="16"/></operator> <name pos:line="271" pos:column="17">NULL<pos:position pos:line="271" pos:column="21"/></name></expr>;<pos:position pos:line="271" pos:column="22"/></expr_stmt>
      }<pos:position pos:line="272" pos:column="8"/></block></then></if>

      <break pos:line="274" pos:column="7">break;<pos:position pos:line="274" pos:column="13"/></break>

    }<pos:position pos:line="276" pos:column="6"/></block></then></if>

  }<pos:position pos:line="278" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="280" pos:column="3">sprintf<pos:position pos:line="280" pos:column="10"/></name><argument_list pos:line="280" pos:column="10">(<argument><expr><name pos:line="280" pos:column="11">strbuff<pos:position pos:line="280" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="280" pos:column="20">fmt<pos:position pos:line="280" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="280" pos:column="25">num_open<pos:position pos:line="280" pos:column="33"/></name><operator pos:line="280" pos:column="33">.<pos:position pos:line="280" pos:column="34"/></operator><name pos:line="280" pos:column="34">rlim_max<pos:position pos:line="280" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="280" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="281" pos:column="3">fprintf<pos:position pos:line="281" pos:column="10"/></name><argument_list pos:line="281" pos:column="10">(<argument><expr><name pos:line="281" pos:column="11">stderr<pos:position pos:line="281" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="281" pos:column="19">"%s file descriptors open\n"<pos:position pos:line="281" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="281" pos:column="49">strbuff<pos:position pos:line="281" pos:column="56"/></name></expr></argument>)<pos:position pos:line="281" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="281" pos:column="58"/></expr_stmt>

<cpp:if pos:line="283" pos:column="1">#<cpp:directive pos:line="283" pos:column="2">if<pos:position pos:line="283" pos:column="4"/></cpp:directive> <expr><operator pos:line="283" pos:column="5">!<pos:position pos:line="283" pos:column="6"/></operator><call><name pos:line="283" pos:column="6">defined<pos:position pos:line="283" pos:column="13"/></name><argument_list pos:line="283" pos:column="13">(<argument><expr><name pos:line="283" pos:column="14">HAVE_POLL_FINE<pos:position pos:line="283" pos:column="28"/></name></expr></argument>)<pos:position pos:line="283" pos:column="29"/></argument_list></call>    <operator pos:line="283" pos:column="33">&amp;&amp;<pos:position pos:line="283" pos:column="43"/></operator> \
    <operator pos:line="284" pos:column="5">!<pos:position pos:line="284" pos:column="6"/></operator><call><name pos:line="284" pos:column="6">defined<pos:position pos:line="284" pos:column="13"/></name><argument_list pos:line="284" pos:column="13">(<argument><expr><name pos:line="284" pos:column="14">USE_WINSOCK<pos:position pos:line="284" pos:column="25"/></name></expr></argument>)<pos:position pos:line="284" pos:column="26"/></argument_list></call>       <operator pos:line="284" pos:column="33">&amp;&amp;<pos:position pos:line="284" pos:column="43"/></operator> \
    <operator pos:line="285" pos:column="5">!<pos:position pos:line="285" pos:column="6"/></operator><call><name pos:line="285" pos:column="6">defined<pos:position pos:line="285" pos:column="13"/></name><argument_list pos:line="285" pos:column="13">(<argument><expr><name pos:line="285" pos:column="14">TPF<pos:position pos:line="285" pos:column="17"/></name></expr></argument>)<pos:position pos:line="285" pos:column="18"/></argument_list></call></expr></cpp:if>

  <comment type="block" pos:line="287" pos:column="3">/*
   * when using select() instead of poll() we cannot test
   * libcurl functionality with a socket number equal or
   * greater than FD_SETSIZE. In any case, macro VERIFY_SOCK
   * in lib/select.c enforces this check and protects libcurl
   * from a possible crash. The effect of this protection
   * is that test 537 will always fail, since the actual
   * call to select() never takes place. We skip test 537
   * with an indication that select limit would be exceeded.
   */</comment>

  <expr_stmt><expr><name><name pos:line="298" pos:column="3">num_open<pos:position pos:line="298" pos:column="11"/></name><operator pos:line="298" pos:column="11">.<pos:position pos:line="298" pos:column="12"/></operator><name pos:line="298" pos:column="12">rlim_cur<pos:position pos:line="298" pos:column="20"/></name></name> <operator pos:line="298" pos:column="21">=<pos:position pos:line="298" pos:column="22"/></operator> <name pos:line="298" pos:column="23">FD_SETSIZE<pos:position pos:line="298" pos:column="33"/></name> <operator pos:line="298" pos:column="34">-<pos:position pos:line="298" pos:column="35"/></operator> <name pos:line="298" pos:column="36">SAFETY_MARGIN<pos:position pos:line="298" pos:column="49"/></name></expr>;<pos:position pos:line="298" pos:column="50"/></expr_stmt>
  <if pos:line="299" pos:column="3">if <condition pos:line="299" pos:column="6">(<expr><name><name pos:line="299" pos:column="7">num_open<pos:position pos:line="299" pos:column="15"/></name><operator pos:line="299" pos:column="15">.<pos:position pos:line="299" pos:column="16"/></operator><name pos:line="299" pos:column="16">rlim_max<pos:position pos:line="299" pos:column="24"/></name></name> <operator pos:line="299" pos:column="25">&gt;<pos:position pos:line="299" pos:column="29"/></operator> <name><name pos:line="299" pos:column="27">num_open<pos:position pos:line="299" pos:column="35"/></name><operator pos:line="299" pos:column="35">.<pos:position pos:line="299" pos:column="36"/></operator><name pos:line="299" pos:column="36">rlim_cur<pos:position pos:line="299" pos:column="44"/></name></name></expr>)<pos:position pos:line="299" pos:column="45"/></condition><then pos:line="299" pos:column="45"> <block pos:line="299" pos:column="46">{
    <expr_stmt><expr><call><name pos:line="300" pos:column="5">sprintf<pos:position pos:line="300" pos:column="12"/></name><argument_list pos:line="300" pos:column="12">(<argument><expr><name pos:line="300" pos:column="13">strbuff<pos:position pos:line="300" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="300" pos:column="22">"select limit is FD_SETSIZE %d"<pos:position pos:line="300" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="300" pos:column="55">FD_SETSIZE<pos:position pos:line="300" pos:column="65"/></name></expr></argument>)<pos:position pos:line="300" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="301" pos:column="5">store_errmsg<pos:position pos:line="301" pos:column="17"/></name><argument_list pos:line="301" pos:column="17">(<argument><expr><name pos:line="301" pos:column="18">strbuff<pos:position pos:line="301" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="301" pos:column="27">0<pos:position pos:line="301" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="301" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="301" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="302" pos:column="5">fprintf<pos:position pos:line="302" pos:column="12"/></name><argument_list pos:line="302" pos:column="12">(<argument><expr><name pos:line="302" pos:column="13">stderr<pos:position pos:line="302" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="302" pos:column="21">"%s\n"<pos:position pos:line="302" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="302" pos:column="29">msgbuff<pos:position pos:line="302" pos:column="36"/></name></expr></argument>)<pos:position pos:line="302" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="303" pos:column="5">close_file_descriptors<pos:position pos:line="303" pos:column="27"/></name><argument_list pos:line="303" pos:column="27">()<pos:position pos:line="303" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="303" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="304" pos:column="5">free<pos:position pos:line="304" pos:column="9"/></name><argument_list pos:line="304" pos:column="9">(<argument><expr><name pos:line="304" pos:column="10">memchunk<pos:position pos:line="304" pos:column="18"/></name></expr></argument>)<pos:position pos:line="304" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="304" pos:column="20"/></expr_stmt>
    <return pos:line="305" pos:column="5">return <expr><operator pos:line="305" pos:column="12">-<pos:position pos:line="305" pos:column="13"/></operator><literal type="number" pos:line="305" pos:column="13">8<pos:position pos:line="305" pos:column="14"/></literal></expr>;<pos:position pos:line="305" pos:column="15"/></return>
  }<pos:position pos:line="306" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="308" pos:column="3">num_open<pos:position pos:line="308" pos:column="11"/></name><operator pos:line="308" pos:column="11">.<pos:position pos:line="308" pos:column="12"/></operator><name pos:line="308" pos:column="12">rlim_cur<pos:position pos:line="308" pos:column="20"/></name></name> <operator pos:line="308" pos:column="21">=<pos:position pos:line="308" pos:column="22"/></operator> <name pos:line="308" pos:column="23">FD_SETSIZE<pos:position pos:line="308" pos:column="33"/></name> <operator pos:line="308" pos:column="34">-<pos:position pos:line="308" pos:column="35"/></operator> <name pos:line="308" pos:column="36">SAFETY_MARGIN<pos:position pos:line="308" pos:column="49"/></name></expr>;<pos:position pos:line="308" pos:column="50"/></expr_stmt>
  <for pos:line="309" pos:column="3">for <control pos:line="309" pos:column="7">(<init><expr><name><name pos:line="309" pos:column="8">rl<pos:position pos:line="309" pos:column="10"/></name><operator pos:line="309" pos:column="10">.<pos:position pos:line="309" pos:column="11"/></operator><name pos:line="309" pos:column="11">rlim_cur<pos:position pos:line="309" pos:column="19"/></name></name> <operator pos:line="309" pos:column="20">=<pos:position pos:line="309" pos:column="21"/></operator> <literal type="number" pos:line="309" pos:column="22">0<pos:position pos:line="309" pos:column="23"/></literal></expr>;<pos:position pos:line="309" pos:column="24"/></init>
       <condition><expr><name><name pos:line="310" pos:column="8">rl<pos:position pos:line="310" pos:column="10"/></name><operator pos:line="310" pos:column="10">.<pos:position pos:line="310" pos:column="11"/></operator><name pos:line="310" pos:column="11">rlim_cur<pos:position pos:line="310" pos:column="19"/></name></name> <operator pos:line="310" pos:column="20">&lt;<pos:position pos:line="310" pos:column="24"/></operator> <name><name pos:line="310" pos:column="22">num_open<pos:position pos:line="310" pos:column="30"/></name><operator pos:line="310" pos:column="30">.<pos:position pos:line="310" pos:column="31"/></operator><name pos:line="310" pos:column="31">rlim_max<pos:position pos:line="310" pos:column="39"/></name></name></expr>;<pos:position pos:line="310" pos:column="40"/></condition>
       <incr><expr><name><name pos:line="311" pos:column="8">rl<pos:position pos:line="311" pos:column="10"/></name><operator pos:line="311" pos:column="10">.<pos:position pos:line="311" pos:column="11"/></operator><name pos:line="311" pos:column="11">rlim_cur<pos:position pos:line="311" pos:column="19"/></name></name><operator pos:line="311" pos:column="19">++<pos:position pos:line="311" pos:column="21"/></operator></expr></incr>)<pos:position pos:line="311" pos:column="22"/></control> <block pos:line="311" pos:column="23">{
    <if pos:line="312" pos:column="5">if <condition pos:line="312" pos:column="8">(<expr><operator pos:line="312" pos:column="9">(<pos:position pos:line="312" pos:column="10"/></operator><name><name pos:line="312" pos:column="10">fd<pos:position pos:line="312" pos:column="12"/></name><index pos:line="312" pos:column="12">[<expr><name><name pos:line="312" pos:column="13">rl<pos:position pos:line="312" pos:column="15"/></name><operator pos:line="312" pos:column="15">.<pos:position pos:line="312" pos:column="16"/></operator><name pos:line="312" pos:column="16">rlim_cur<pos:position pos:line="312" pos:column="24"/></name></name></expr>]<pos:position pos:line="312" pos:column="25"/></index></name> <operator pos:line="312" pos:column="26">&gt;<pos:position pos:line="312" pos:column="30"/></operator> <literal type="number" pos:line="312" pos:column="28">0<pos:position pos:line="312" pos:column="29"/></literal><operator pos:line="312" pos:column="29">)<pos:position pos:line="312" pos:column="30"/></operator> <operator pos:line="312" pos:column="31">&amp;&amp;<pos:position pos:line="312" pos:column="41"/></operator>
       <operator pos:line="313" pos:column="8">(<pos:position pos:line="313" pos:column="9"/></operator><operator pos:line="313" pos:column="9">(<pos:position pos:line="313" pos:column="10"/></operator><name pos:line="313" pos:column="10">unsigned<pos:position pos:line="313" pos:column="18"/></name> <name pos:line="313" pos:column="19">int<pos:position pos:line="313" pos:column="22"/></name><operator pos:line="313" pos:column="22">)<pos:position pos:line="313" pos:column="23"/></operator><name><name pos:line="313" pos:column="23">fd<pos:position pos:line="313" pos:column="25"/></name><index pos:line="313" pos:column="25">[<expr><name><name pos:line="313" pos:column="26">rl<pos:position pos:line="313" pos:column="28"/></name><operator pos:line="313" pos:column="28">.<pos:position pos:line="313" pos:column="29"/></operator><name pos:line="313" pos:column="29">rlim_cur<pos:position pos:line="313" pos:column="37"/></name></name></expr>]<pos:position pos:line="313" pos:column="38"/></index></name> <operator pos:line="313" pos:column="39">&gt;<pos:position pos:line="313" pos:column="43"/></operator> <name><name pos:line="313" pos:column="41">num_open<pos:position pos:line="313" pos:column="49"/></name><operator pos:line="313" pos:column="49">.<pos:position pos:line="313" pos:column="50"/></operator><name pos:line="313" pos:column="50">rlim_cur<pos:position pos:line="313" pos:column="58"/></name></name><operator pos:line="313" pos:column="58">)<pos:position pos:line="313" pos:column="59"/></operator></expr>)<pos:position pos:line="313" pos:column="60"/></condition><then pos:line="313" pos:column="60"> <block pos:line="313" pos:column="61">{
      <expr_stmt><expr><call><name pos:line="314" pos:column="7">sprintf<pos:position pos:line="314" pos:column="14"/></name><argument_list pos:line="314" pos:column="14">(<argument><expr><name pos:line="314" pos:column="15">strbuff<pos:position pos:line="314" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="314" pos:column="24">"select limit is FD_SETSIZE %d"<pos:position pos:line="314" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="314" pos:column="57">FD_SETSIZE<pos:position pos:line="314" pos:column="67"/></name></expr></argument>)<pos:position pos:line="314" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="314" pos:column="69"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="315" pos:column="7">store_errmsg<pos:position pos:line="315" pos:column="19"/></name><argument_list pos:line="315" pos:column="19">(<argument><expr><name pos:line="315" pos:column="20">strbuff<pos:position pos:line="315" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="315" pos:column="29">0<pos:position pos:line="315" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="315" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="316" pos:column="7">fprintf<pos:position pos:line="316" pos:column="14"/></name><argument_list pos:line="316" pos:column="14">(<argument><expr><name pos:line="316" pos:column="15">stderr<pos:position pos:line="316" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="316" pos:column="23">"%s\n"<pos:position pos:line="316" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="316" pos:column="31">msgbuff<pos:position pos:line="316" pos:column="38"/></name></expr></argument>)<pos:position pos:line="316" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="316" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="317" pos:column="7">close_file_descriptors<pos:position pos:line="317" pos:column="29"/></name><argument_list pos:line="317" pos:column="29">()<pos:position pos:line="317" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="317" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="318" pos:column="7">free<pos:position pos:line="318" pos:column="11"/></name><argument_list pos:line="318" pos:column="11">(<argument><expr><name pos:line="318" pos:column="12">memchunk<pos:position pos:line="318" pos:column="20"/></name></expr></argument>)<pos:position pos:line="318" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="318" pos:column="22"/></expr_stmt>
      <return pos:line="319" pos:column="7">return <expr><operator pos:line="319" pos:column="14">-<pos:position pos:line="319" pos:column="15"/></operator><literal type="number" pos:line="319" pos:column="15">9<pos:position pos:line="319" pos:column="16"/></literal></expr>;<pos:position pos:line="319" pos:column="17"/></return>
    }<pos:position pos:line="320" pos:column="6"/></block></then></if>
  }<pos:position pos:line="321" pos:column="4"/></block></for>

<cpp:endif pos:line="323" pos:column="1">#<cpp:directive pos:line="323" pos:column="2">endif<pos:position pos:line="323" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="323" pos:column="8">/* using a FD_SETSIZE bound select() */</comment>

  <comment type="block" pos:line="325" pos:column="3">/*
   * Old or 'backwards compatible' implementations of stdio do not allow
   * handling of streams with an underlying file descriptor number greater
   * than 255, even when allowing high numbered file descriptors for sockets.
   * At this point we have a big number of file descriptors which have been
   * opened using dup(), so lets test the stdio implementation and discover
   * if it is capable of fopen()ing some additional files.
   */</comment>

  <if pos:line="334" pos:column="3">if <condition pos:line="334" pos:column="6">(<expr><operator pos:line="334" pos:column="7">!<pos:position pos:line="334" pos:column="8"/></operator><call><name pos:line="334" pos:column="8">fopen_works<pos:position pos:line="334" pos:column="19"/></name><argument_list pos:line="334" pos:column="19">()<pos:position pos:line="334" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="334" pos:column="22"/></condition><then pos:line="334" pos:column="22"> <block pos:line="334" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="335" pos:column="5">sprintf<pos:position pos:line="335" pos:column="12"/></name><argument_list pos:line="335" pos:column="12">(<argument><expr><name pos:line="335" pos:column="13">strbuff1<pos:position pos:line="335" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="335" pos:column="23">fmt<pos:position pos:line="335" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="335" pos:column="28">num_open<pos:position pos:line="335" pos:column="36"/></name><operator pos:line="335" pos:column="36">.<pos:position pos:line="335" pos:column="37"/></operator><name pos:line="335" pos:column="37">rlim_max<pos:position pos:line="335" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="335" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="336" pos:column="5">sprintf<pos:position pos:line="336" pos:column="12"/></name><argument_list pos:line="336" pos:column="12">(<argument><expr><name pos:line="336" pos:column="13">strbuff<pos:position pos:line="336" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="336" pos:column="22">"stdio fopen() fails with %s fds open()"<pos:position pos:line="336" pos:column="62"/></literal></expr></argument>,
            <argument><expr><name pos:line="337" pos:column="13">strbuff1<pos:position pos:line="337" pos:column="21"/></name></expr></argument>)<pos:position pos:line="337" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="338" pos:column="5">fprintf<pos:position pos:line="338" pos:column="12"/></name><argument_list pos:line="338" pos:column="12">(<argument><expr><name pos:line="338" pos:column="13">stderr<pos:position pos:line="338" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="338" pos:column="21">"%s\n"<pos:position pos:line="338" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="338" pos:column="29">msgbuff<pos:position pos:line="338" pos:column="36"/></name></expr></argument>)<pos:position pos:line="338" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="338" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="339" pos:column="5">sprintf<pos:position pos:line="339" pos:column="12"/></name><argument_list pos:line="339" pos:column="12">(<argument><expr><name pos:line="339" pos:column="13">strbuff<pos:position pos:line="339" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="339" pos:column="22">"stdio fopen() fails with lots of fds open()"<pos:position pos:line="339" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="339" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="339" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="340" pos:column="5">store_errmsg<pos:position pos:line="340" pos:column="17"/></name><argument_list pos:line="340" pos:column="17">(<argument><expr><name pos:line="340" pos:column="18">strbuff<pos:position pos:line="340" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="340" pos:column="27">0<pos:position pos:line="340" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="340" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="340" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="341" pos:column="5">close_file_descriptors<pos:position pos:line="341" pos:column="27"/></name><argument_list pos:line="341" pos:column="27">()<pos:position pos:line="341" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="341" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="342" pos:column="5">free<pos:position pos:line="342" pos:column="9"/></name><argument_list pos:line="342" pos:column="9">(<argument><expr><name pos:line="342" pos:column="10">memchunk<pos:position pos:line="342" pos:column="18"/></name></expr></argument>)<pos:position pos:line="342" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="342" pos:column="20"/></expr_stmt>
    <return pos:line="343" pos:column="5">return <expr><operator pos:line="343" pos:column="12">-<pos:position pos:line="343" pos:column="13"/></operator><literal type="number" pos:line="343" pos:column="13">10<pos:position pos:line="343" pos:column="15"/></literal></expr>;<pos:position pos:line="343" pos:column="16"/></return>
  }<pos:position pos:line="344" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="346" pos:column="3">/* free the chunk of memory we were reserving so that it
     becomes becomes available to the test */</comment>

  <expr_stmt><expr><call><name pos:line="349" pos:column="3">free<pos:position pos:line="349" pos:column="7"/></name><argument_list pos:line="349" pos:column="7">(<argument><expr><name pos:line="349" pos:column="8">memchunk<pos:position pos:line="349" pos:column="16"/></name></expr></argument>)<pos:position pos:line="349" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="349" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="351" pos:column="3">/* close file descriptors unless instructed to keep them */</comment>

  <if pos:line="353" pos:column="3">if <condition pos:line="353" pos:column="6">(<expr><operator pos:line="353" pos:column="7">!<pos:position pos:line="353" pos:column="8"/></operator><name pos:line="353" pos:column="8">keep_open<pos:position pos:line="353" pos:column="17"/></name></expr>)<pos:position pos:line="353" pos:column="18"/></condition><then pos:line="353" pos:column="18"> <block pos:line="353" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="354" pos:column="5">close_file_descriptors<pos:position pos:line="354" pos:column="27"/></name><argument_list pos:line="354" pos:column="27">()<pos:position pos:line="354" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="354" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="355" pos:column="4"/></block></then></if>

  <return pos:line="357" pos:column="3">return <expr><literal type="number" pos:line="357" pos:column="10">0<pos:position pos:line="357" pos:column="11"/></literal></expr>;<pos:position pos:line="357" pos:column="12"/></return>
}<pos:position pos:line="358" pos:column="2"/></block></then></if>

<function><type><name pos:line="360" pos:column="1">int<pos:position pos:line="360" pos:column="4"/></name></type> <name pos:line="360" pos:column="5">test<pos:position pos:line="360" pos:column="9"/></name><parameter_list pos:line="360" pos:column="9">(<parameter><decl><type><name pos:line="360" pos:column="10">char<pos:position pos:line="360" pos:column="14"/></name> <modifier pos:line="360" pos:column="15">*<pos:position pos:line="360" pos:column="16"/></modifier></type><name pos:line="360" pos:column="16">URL<pos:position pos:line="360" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="360" pos:column="20"/></parameter_list>
<block pos:line="361" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="362" pos:column="3">CURLcode<pos:position pos:line="362" pos:column="11"/></name></type> <name pos:line="362" pos:column="12">res<pos:position pos:line="362" pos:column="15"/></name></decl>;<pos:position pos:line="362" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="363" pos:column="3">CURL<pos:position pos:line="363" pos:column="7"/></name> <modifier pos:line="363" pos:column="8">*<pos:position pos:line="363" pos:column="9"/></modifier></type><name pos:line="363" pos:column="9">curl<pos:position pos:line="363" pos:column="13"/></name></decl>;<pos:position pos:line="363" pos:column="14"/></decl_stmt>

  <if pos:line="365" pos:column="3">if<condition pos:line="365" pos:column="5">(<expr><operator pos:line="365" pos:column="6">!<pos:position pos:line="365" pos:column="7"/></operator><call><name pos:line="365" pos:column="7">strcmp<pos:position pos:line="365" pos:column="13"/></name><argument_list pos:line="365" pos:column="13">(<argument><expr><name pos:line="365" pos:column="14">URL<pos:position pos:line="365" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="365" pos:column="19">"check"<pos:position pos:line="365" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="365" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="365" pos:column="28"/></condition><then pos:line="365" pos:column="28"> <block pos:line="365" pos:column="29">{
    <comment type="block" pos:line="366" pos:column="5">/* used by the test script to ask if we can run this test or not */</comment>
    <if pos:line="367" pos:column="5">if<condition pos:line="367" pos:column="7">(<expr><call><name pos:line="367" pos:column="8">rlimit<pos:position pos:line="367" pos:column="14"/></name><argument_list pos:line="367" pos:column="14">(<argument><expr><name pos:line="367" pos:column="15">FALSE<pos:position pos:line="367" pos:column="20"/></name></expr></argument>)<pos:position pos:line="367" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="367" pos:column="22"/></condition><then pos:line="367" pos:column="22"> <block pos:line="367" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="368" pos:column="7">fprintf<pos:position pos:line="368" pos:column="14"/></name><argument_list pos:line="368" pos:column="14">(<argument><expr><name pos:line="368" pos:column="15">stdout<pos:position pos:line="368" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="368" pos:column="23">"rlimit problem: %s\n"<pos:position pos:line="368" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="368" pos:column="47">msgbuff<pos:position pos:line="368" pos:column="54"/></name></expr></argument>)<pos:position pos:line="368" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="368" pos:column="56"/></expr_stmt>
      <return pos:line="369" pos:column="7">return <expr><literal type="number" pos:line="369" pos:column="14">1<pos:position pos:line="369" pos:column="15"/></literal></expr>;<pos:position pos:line="369" pos:column="16"/></return>
    }<pos:position pos:line="370" pos:column="6"/></block></then></if>
    <return pos:line="371" pos:column="5">return <expr><literal type="number" pos:line="371" pos:column="12">0<pos:position pos:line="371" pos:column="13"/></literal></expr>;<pos:position pos:line="371" pos:column="14"/></return> <comment type="block" pos:line="371" pos:column="15">/* sure, run this! */</comment>
  }<pos:position pos:line="372" pos:column="4"/></block></then></if>

  <if pos:line="374" pos:column="3">if <condition pos:line="374" pos:column="6">(<expr><call><name pos:line="374" pos:column="7">rlimit<pos:position pos:line="374" pos:column="13"/></name><argument_list pos:line="374" pos:column="13">(<argument><expr><name pos:line="374" pos:column="14">TRUE<pos:position pos:line="374" pos:column="18"/></name></expr></argument>)<pos:position pos:line="374" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="374" pos:column="20"/></condition><then pos:line="374" pos:column="20"> <block pos:line="374" pos:column="21">{
    <comment type="block" pos:line="375" pos:column="5">/* failure */</comment>
    <return pos:line="376" pos:column="5">return <expr><name pos:line="376" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="376" pos:column="30"/></name></expr>;<pos:position pos:line="376" pos:column="31"/></return>
  }<pos:position pos:line="377" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="379" pos:column="3">/* run the test with the bunch of open file descriptors
     and close them all once the test is over */</comment>

  <if pos:line="382" pos:column="3">if <condition pos:line="382" pos:column="6">(<expr><call><name pos:line="382" pos:column="7">curl_global_init<pos:position pos:line="382" pos:column="23"/></name><argument_list pos:line="382" pos:column="23">(<argument><expr><name pos:line="382" pos:column="24">CURL_GLOBAL_ALL<pos:position pos:line="382" pos:column="39"/></name></expr></argument>)<pos:position pos:line="382" pos:column="40"/></argument_list></call> <operator pos:line="382" pos:column="41">!=<pos:position pos:line="382" pos:column="43"/></operator> <name pos:line="382" pos:column="44">CURLE_OK<pos:position pos:line="382" pos:column="52"/></name></expr>)<pos:position pos:line="382" pos:column="53"/></condition><then pos:line="382" pos:column="53"> <block pos:line="382" pos:column="54">{
    <expr_stmt><expr><call><name pos:line="383" pos:column="5">fprintf<pos:position pos:line="383" pos:column="12"/></name><argument_list pos:line="383" pos:column="12">(<argument><expr><name pos:line="383" pos:column="13">stderr<pos:position pos:line="383" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="383" pos:column="21">"curl_global_init() failed\n"<pos:position pos:line="383" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="383" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="383" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="384" pos:column="5">close_file_descriptors<pos:position pos:line="384" pos:column="27"/></name><argument_list pos:line="384" pos:column="27">()<pos:position pos:line="384" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="384" pos:column="30"/></expr_stmt>
    <return pos:line="385" pos:column="5">return <expr><name pos:line="385" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="385" pos:column="30"/></name></expr>;<pos:position pos:line="385" pos:column="31"/></return>
  }<pos:position pos:line="386" pos:column="4"/></block></then></if>

  <if pos:line="388" pos:column="3">if <condition pos:line="388" pos:column="6">(<expr><operator pos:line="388" pos:column="7">(<pos:position pos:line="388" pos:column="8"/></operator><name pos:line="388" pos:column="8">curl<pos:position pos:line="388" pos:column="12"/></name> <operator pos:line="388" pos:column="13">=<pos:position pos:line="388" pos:column="14"/></operator> <call><name pos:line="388" pos:column="15">curl_easy_init<pos:position pos:line="388" pos:column="29"/></name><argument_list pos:line="388" pos:column="29">()<pos:position pos:line="388" pos:column="31"/></argument_list></call><operator pos:line="388" pos:column="31">)<pos:position pos:line="388" pos:column="32"/></operator> <operator pos:line="388" pos:column="33">==<pos:position pos:line="388" pos:column="35"/></operator> <name pos:line="388" pos:column="36">NULL<pos:position pos:line="388" pos:column="40"/></name></expr>)<pos:position pos:line="388" pos:column="41"/></condition><then pos:line="388" pos:column="41"> <block pos:line="388" pos:column="42">{
    <expr_stmt><expr><call><name pos:line="389" pos:column="5">fprintf<pos:position pos:line="389" pos:column="12"/></name><argument_list pos:line="389" pos:column="12">(<argument><expr><name pos:line="389" pos:column="13">stderr<pos:position pos:line="389" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="389" pos:column="21">"curl_easy_init() failed\n"<pos:position pos:line="389" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="389" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="390" pos:column="5">close_file_descriptors<pos:position pos:line="390" pos:column="27"/></name><argument_list pos:line="390" pos:column="27">()<pos:position pos:line="390" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="390" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="391" pos:column="5">curl_global_cleanup<pos:position pos:line="391" pos:column="24"/></name><argument_list pos:line="391" pos:column="24">()<pos:position pos:line="391" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="391" pos:column="27"/></expr_stmt>
    <return pos:line="392" pos:column="5">return <expr><name pos:line="392" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="392" pos:column="30"/></name></expr>;<pos:position pos:line="392" pos:column="31"/></return>
  }<pos:position pos:line="393" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="395" pos:column="3">test_setopt<pos:position pos:line="395" pos:column="14"/></name><argument_list pos:line="395" pos:column="14">(<argument><expr><name pos:line="395" pos:column="15">curl<pos:position pos:line="395" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="395" pos:column="21">CURLOPT_URL<pos:position pos:line="395" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="395" pos:column="34">URL<pos:position pos:line="395" pos:column="37"/></name></expr></argument>)<pos:position pos:line="395" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="395" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="396" pos:column="3">test_setopt<pos:position pos:line="396" pos:column="14"/></name><argument_list pos:line="396" pos:column="14">(<argument><expr><name pos:line="396" pos:column="15">curl<pos:position pos:line="396" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="396" pos:column="21">CURLOPT_HEADER<pos:position pos:line="396" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="396" pos:column="37">1L<pos:position pos:line="396" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="396" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="396" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><name pos:line="398" pos:column="3">res<pos:position pos:line="398" pos:column="6"/></name> <operator pos:line="398" pos:column="7">=<pos:position pos:line="398" pos:column="8"/></operator> <call><name pos:line="398" pos:column="9">curl_easy_perform<pos:position pos:line="398" pos:column="26"/></name><argument_list pos:line="398" pos:column="26">(<argument><expr><name pos:line="398" pos:column="27">curl<pos:position pos:line="398" pos:column="31"/></name></expr></argument>)<pos:position pos:line="398" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="398" pos:column="33"/></expr_stmt>

<label><name pos:line="400" pos:column="1">test_cleanup<pos:position pos:line="400" pos:column="13"/></name>:<pos:position pos:line="400" pos:column="14"/></label>

  <expr_stmt><expr><call><name pos:line="402" pos:column="3">close_file_descriptors<pos:position pos:line="402" pos:column="25"/></name><argument_list pos:line="402" pos:column="25">()<pos:position pos:line="402" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="402" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="403" pos:column="3">curl_easy_cleanup<pos:position pos:line="403" pos:column="20"/></name><argument_list pos:line="403" pos:column="20">(<argument><expr><name pos:line="403" pos:column="21">curl<pos:position pos:line="403" pos:column="25"/></name></expr></argument>)<pos:position pos:line="403" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="403" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="404" pos:column="3">curl_global_cleanup<pos:position pos:line="404" pos:column="22"/></name><argument_list pos:line="404" pos:column="22">()<pos:position pos:line="404" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="404" pos:column="25"/></expr_stmt>

  <return pos:line="406" pos:column="3">return <expr><operator pos:line="406" pos:column="10">(<pos:position pos:line="406" pos:column="11"/></operator><name pos:line="406" pos:column="11">int<pos:position pos:line="406" pos:column="14"/></name><operator pos:line="406" pos:column="14">)<pos:position pos:line="406" pos:column="15"/></operator><name pos:line="406" pos:column="15">res<pos:position pos:line="406" pos:column="18"/></name></expr>;<pos:position pos:line="406" pos:column="19"/></return>
}<pos:position pos:line="407" pos:column="2"/></block></function>

<cpp:else pos:line="409" pos:column="1">#<cpp:directive pos:line="409" pos:column="2">else<pos:position pos:line="409" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="409" pos:column="7">/* defined(HAVE_GETRLIMIT) &amp;&amp; defined(HAVE_SETRLIMIT) */</comment>

<function><type><name pos:line="411" pos:column="1">int<pos:position pos:line="411" pos:column="4"/></name></type> <name pos:line="411" pos:column="5">test<pos:position pos:line="411" pos:column="9"/></name><parameter_list pos:line="411" pos:column="9">(<parameter><decl><type><name pos:line="411" pos:column="10">char<pos:position pos:line="411" pos:column="14"/></name> <modifier pos:line="411" pos:column="15">*<pos:position pos:line="411" pos:column="16"/></modifier></type><name pos:line="411" pos:column="16">URL<pos:position pos:line="411" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="411" pos:column="20"/></parameter_list>
<block pos:line="412" pos:column="1">{
  <expr_stmt><expr><operator pos:line="413" pos:column="3">(<pos:position pos:line="413" pos:column="4"/></operator><name pos:line="413" pos:column="4">void<pos:position pos:line="413" pos:column="8"/></name><operator pos:line="413" pos:column="8">)<pos:position pos:line="413" pos:column="9"/></operator><name pos:line="413" pos:column="9">URL<pos:position pos:line="413" pos:column="12"/></name></expr>;<pos:position pos:line="413" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="414" pos:column="3">printf<pos:position pos:line="414" pos:column="9"/></name><argument_list pos:line="414" pos:column="9">(<argument><expr><literal type="string" pos:line="414" pos:column="10">"system lacks necessary system function(s)"<pos:position pos:line="414" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="414" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="414" pos:column="55"/></expr_stmt>
  <return pos:line="415" pos:column="3">return <expr><literal type="number" pos:line="415" pos:column="10">1<pos:position pos:line="415" pos:column="11"/></literal></expr>;<pos:position pos:line="415" pos:column="12"/></return> <comment type="block" pos:line="415" pos:column="13">/* skip test */</comment>
}<pos:position pos:line="416" pos:column="2"/></block></function></block></function></unit>
