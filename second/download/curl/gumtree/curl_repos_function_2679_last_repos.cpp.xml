<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2679_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_polarsslthreadlock_unlock_function<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">n<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">ret<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">HAVE_PTHREAD_H<pos:position pos:line="4" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><name pos:line="5" pos:column="6">n<pos:position pos:line="5" pos:column="7"/></name> <operator pos:line="5" pos:column="8">&lt;<pos:position pos:line="5" pos:column="12"/></operator> <name pos:line="5" pos:column="10">NUMT<pos:position pos:line="5" pos:column="14"/></name></expr>)<pos:position pos:line="5" pos:column="15"/></condition><then pos:line="5" pos:column="15"> <block pos:line="5" pos:column="16">{
    <expr_stmt><expr><name pos:line="6" pos:column="5">ret<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">=<pos:position pos:line="6" pos:column="10"/></operator> <call><name pos:line="6" pos:column="11">pthread_mutex_unlock<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><operator pos:line="6" pos:column="32">&amp;<pos:position pos:line="6" pos:column="37"/></operator><name><name pos:line="6" pos:column="33">mutex_buf<pos:position pos:line="6" pos:column="42"/></name><index pos:line="6" pos:column="42">[<expr><name pos:line="6" pos:column="43">n<pos:position pos:line="6" pos:column="44"/></name></expr>]<pos:position pos:line="6" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="47"/></expr_stmt>
    <if pos:line="7" pos:column="5">if<condition pos:line="7" pos:column="7">(<expr><name pos:line="7" pos:column="8">ret<pos:position pos:line="7" pos:column="11"/></name></expr>)<pos:position pos:line="7" pos:column="12"/></condition><then pos:line="7" pos:column="12"> <block pos:line="7" pos:column="13">{
      <expr_stmt><expr><call><name pos:line="8" pos:column="7">DEBUGF<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><call><name pos:line="8" pos:column="14">fprintf<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">stderr<pos:position pos:line="8" pos:column="28"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="9" pos:column="22">"Error: polarsslthreadlock_unlock_function failed\n"<pos:position pos:line="9" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="77"/></expr_stmt>
      <return pos:line="10" pos:column="7">return <expr><literal type="number" pos:line="10" pos:column="14">0<pos:position pos:line="10" pos:column="15"/></literal></expr>;<pos:position pos:line="10" pos:column="16"/></return> <comment type="block" pos:line="10" pos:column="17">/* pthread_mutex_unlock failed */</comment>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
<cpp:elif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">elif<pos:position pos:line="13" pos:column="6"/></cpp:directive> <expr><call><name pos:line="13" pos:column="7">defined<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">HAVE_PROCESS_H<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr></cpp:elif>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">n<pos:position pos:line="14" pos:column="7"/></name> <operator pos:line="14" pos:column="8">&lt;<pos:position pos:line="14" pos:column="12"/></operator> <name pos:line="14" pos:column="10">NUMT<pos:position pos:line="14" pos:column="14"/></name></expr>)<pos:position pos:line="14" pos:column="15"/></condition><then pos:line="14" pos:column="15"> <block pos:line="14" pos:column="16">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">ret<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">ReleaseMutex<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name><name pos:line="15" pos:column="24">mutex_buf<pos:position pos:line="15" pos:column="33"/></name><index pos:line="15" pos:column="33">[<expr><name pos:line="15" pos:column="34">n<pos:position pos:line="15" pos:column="35"/></name></expr>]<pos:position pos:line="15" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><operator pos:line="16" pos:column="8">!<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">ret<pos:position pos:line="16" pos:column="12"/></name></expr>)<pos:position pos:line="16" pos:column="13"/></condition><then pos:line="16" pos:column="13"> <block pos:line="16" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">DEBUGF<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><call><name pos:line="17" pos:column="14">fprintf<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">stderr<pos:position pos:line="17" pos:column="28"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="18" pos:column="22">"Error: polarsslthreadlock_unlock_function failed\n"<pos:position pos:line="18" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="77"/></expr_stmt>
      <return pos:line="19" pos:column="7">return <expr><literal type="number" pos:line="19" pos:column="14">0<pos:position pos:line="19" pos:column="15"/></literal></expr>;<pos:position pos:line="19" pos:column="16"/></return> <comment type="block" pos:line="19" pos:column="17">/* pthread_mutex_lock failed */</comment>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="22" pos:column="8">/* HAVE_PTHREAD_H */</comment>
  <return pos:line="23" pos:column="3">return <expr><literal type="number" pos:line="23" pos:column="10">1<pos:position pos:line="23" pos:column="11"/></literal></expr>;<pos:position pos:line="23" pos:column="12"/></return> <comment type="block" pos:line="23" pos:column="13">/* OK */</comment>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
