<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1018_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_socket<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">connectdata<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">conn<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">Curl_addrinfo<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">ai<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>,
                     <parameter><decl><type><name><name pos:line="3" pos:column="22">struct<pos:position pos:line="3" pos:column="28"/></name> <name pos:line="3" pos:column="29">Curl_sockaddr_ex<pos:position pos:line="3" pos:column="45"/></name></name> <modifier pos:line="3" pos:column="46">*<pos:position pos:line="3" pos:column="47"/></modifier></type><name pos:line="3" pos:column="47">addr<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="4" pos:column="22">curl_socket_t<pos:position pos:line="4" pos:column="35"/></name> <modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier></type><name pos:line="4" pos:column="37">sockfd<pos:position pos:line="4" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="44"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_easy<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">data<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">data<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_sockaddr_ex<pos:position pos:line="7" pos:column="26"/></name></name></type> <name pos:line="7" pos:column="27">dummy<pos:position pos:line="7" pos:column="32"/></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><operator pos:line="9" pos:column="6">!<pos:position pos:line="9" pos:column="7"/></operator><name pos:line="9" pos:column="7">addr<pos:position pos:line="9" pos:column="11"/></name></expr>)<pos:position pos:line="9" pos:column="12"/></condition><then pos:line="9" pos:column="12">
    <comment type="block" pos:line="10" pos:column="5">/* if the caller doesn't want info back, use a local temp copy */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="5">addr<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <operator pos:line="11" pos:column="12">&amp;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="13">dummy<pos:position pos:line="11" pos:column="18"/></name></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/*
   * The Curl_sockaddr_ex structure is basically libcurl's external API
   * curl_sockaddr structure with enough space available to directly hold
   * any protocol-specific address structures. The variable declared here
   * will be used to pass / receive data to/from the fopensocket callback
   * if this has been set, before that, it is initialized from parameters.
   */</comment>

  <expr_stmt><expr><name><name pos:line="21" pos:column="3">addr<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">-&gt;<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="9">family<pos:position pos:line="21" pos:column="15"/></name></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <name><name pos:line="21" pos:column="18">ai<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">-&gt;<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="22">ai_family<pos:position pos:line="21" pos:column="31"/></name></name></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">addr<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">-&gt;<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="9">socktype<pos:position pos:line="22" pos:column="17"/></name></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <name><name pos:line="22" pos:column="20">conn<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">-&gt;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="26">socktype<pos:position pos:line="22" pos:column="34"/></name></name></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">addr<pos:position pos:line="23" pos:column="7"/></name><operator pos:line="23" pos:column="7">-&gt;<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="9">protocol<pos:position pos:line="23" pos:column="17"/></name></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <ternary><condition><expr><name><name pos:line="23" pos:column="20">conn<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">socktype<pos:position pos:line="23" pos:column="34"/></name></name> <operator pos:line="23" pos:column="35">==<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="38">SOCK_DGRAM<pos:position pos:line="23" pos:column="48"/></name></expr>?<pos:position pos:line="23" pos:column="49"/></condition><then><expr><name pos:line="23" pos:column="49">IPPROTO_UDP<pos:position pos:line="23" pos:column="60"/></name></expr></then><else pos:line="23" pos:column="60">:<expr><name><name pos:line="23" pos:column="61">ai<pos:position pos:line="23" pos:column="63"/></name><operator pos:line="23" pos:column="63">-&gt;<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="65">ai_protocol<pos:position pos:line="23" pos:column="76"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">addr<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">-&gt;<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="9">addrlen<pos:position pos:line="24" pos:column="16"/></name></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name><name pos:line="24" pos:column="19">ai<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">-&gt;<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="23">ai_addrlen<pos:position pos:line="24" pos:column="33"/></name></name></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>

  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name><name pos:line="26" pos:column="6">addr<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">-&gt;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="12">addrlen<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">&gt;<pos:position pos:line="26" pos:column="24"/></operator> <sizeof pos:line="26" pos:column="22">sizeof<argument_list pos:line="26" pos:column="28">(<argument><expr pos:line="26" pos:column="29">struct <name pos:line="26" pos:column="36">Curl_sockaddr_storage<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></sizeof></expr>)<pos:position pos:line="26" pos:column="59"/></condition><then pos:line="26" pos:column="59">
     <block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="6">addr<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">addrlen<pos:position pos:line="27" pos:column="19"/></name></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <sizeof pos:line="27" pos:column="22">sizeof<argument_list pos:line="27" pos:column="28">(<argument><expr pos:line="27" pos:column="29">struct <name pos:line="27" pos:column="36">Curl_sockaddr_storage<pos:position pos:line="27" pos:column="57"/></name></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></sizeof></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">memcpy<pos:position pos:line="28" pos:column="9"/></name><argument_list pos:line="28" pos:column="9">(<argument><expr><operator pos:line="28" pos:column="10">&amp;<pos:position pos:line="28" pos:column="15"/></operator><name><name pos:line="28" pos:column="11">addr<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">sa_addr<pos:position pos:line="28" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="26">ai<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">-&gt;<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="30">ai_addr<pos:position pos:line="28" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="39">addr<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">-&gt;<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="45">addrlen<pos:position pos:line="28" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>

  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name><name pos:line="30" pos:column="6">data<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">set<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">.<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">fopensocket<pos:position pos:line="30" pos:column="27"/></name></name></expr>)<pos:position pos:line="30" pos:column="28"/></condition><then pos:line="30" pos:column="28">
   <comment type="block" pos:line="31" pos:column="4">/*
    * If the opensocket callback is set, all the destination address
    * information is passed to the callback. Depending on this information the
    * callback may opt to abort the connection, this is indicated returning
    * CURL_SOCKET_BAD; otherwise it will return a not-connected socket. When
    * the callback returns a valid socket the destination address information
    * might have been changed and this 'new' address will actually be used
    * here to connect.
    */</comment>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="40" pos:column="5">*<pos:position pos:line="40" pos:column="6"/></operator><name pos:line="40" pos:column="6">sockfd<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">=<pos:position pos:line="40" pos:column="14"/></operator> <call><name><name pos:line="40" pos:column="15">data<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">-&gt;<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="21">set<pos:position pos:line="40" pos:column="24"/></name><operator pos:line="40" pos:column="24">.<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="25">fopensocket<pos:position pos:line="40" pos:column="36"/></name></name><argument_list pos:line="40" pos:column="36">(<argument><expr><name><name pos:line="40" pos:column="37">data<pos:position pos:line="40" pos:column="41"/></name><operator pos:line="40" pos:column="41">-&gt;<pos:position pos:line="40" pos:column="46"/></operator><name pos:line="40" pos:column="43">set<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">.<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="47">opensocket_client<pos:position pos:line="40" pos:column="64"/></name></name></expr></argument>,
                                    <argument><expr><name pos:line="41" pos:column="37">CURLSOCKTYPE_IPCXN<pos:position pos:line="41" pos:column="55"/></name></expr></argument>,
                                    <argument><expr><operator pos:line="42" pos:column="37">(<pos:position pos:line="42" pos:column="38"/></operator>struct <name pos:line="42" pos:column="45">curl_sockaddr<pos:position pos:line="42" pos:column="58"/></name> <operator pos:line="42" pos:column="59">*<pos:position pos:line="42" pos:column="60"/></operator><operator pos:line="42" pos:column="60">)<pos:position pos:line="42" pos:column="61"/></operator><name pos:line="42" pos:column="61">addr<pos:position pos:line="42" pos:column="65"/></name></expr></argument>)<pos:position pos:line="42" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="67"/></expr_stmt></block></then>
  <else pos:line="43" pos:column="3">else
    <comment type="block" pos:line="44" pos:column="5">/* opensocket callback not set, so simply create the socket now */</comment>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="45" pos:column="5">*<pos:position pos:line="45" pos:column="6"/></operator><name pos:line="45" pos:column="6">sockfd<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">socket<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name><name pos:line="45" pos:column="22">addr<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">-&gt;<pos:position pos:line="45" pos:column="31"/></operator><name pos:line="45" pos:column="28">family<pos:position pos:line="45" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="36">addr<pos:position pos:line="45" pos:column="40"/></name><operator pos:line="45" pos:column="40">-&gt;<pos:position pos:line="45" pos:column="45"/></operator><name pos:line="45" pos:column="42">socktype<pos:position pos:line="45" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="52">addr<pos:position pos:line="45" pos:column="56"/></name><operator pos:line="45" pos:column="56">-&gt;<pos:position pos:line="45" pos:column="61"/></operator><name pos:line="45" pos:column="58">protocol<pos:position pos:line="45" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="68"/></expr_stmt></block></else></if>

  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><operator pos:line="47" pos:column="6">*<pos:position pos:line="47" pos:column="7"/></operator><name pos:line="47" pos:column="7">sockfd<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">==<pos:position pos:line="47" pos:column="16"/></operator> <name pos:line="47" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="47" pos:column="32"/></name></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33">
    <comment type="block" pos:line="48" pos:column="5">/* no socket, no connection */</comment>
    <block type="pseudo"><return pos:line="49" pos:column="5">return <expr><name pos:line="49" pos:column="12">CURLE_COULDNT_CONNECT<pos:position pos:line="49" pos:column="33"/></name></expr>;<pos:position pos:line="49" pos:column="34"/></return></block></then></if>

<cpp:if pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">if<pos:position pos:line="51" pos:column="4"/></cpp:directive> <expr><call><name pos:line="51" pos:column="5">defined<pos:position pos:line="51" pos:column="12"/></name><argument_list pos:line="51" pos:column="12">(<argument><expr><name pos:line="51" pos:column="13">ENABLE_IPV6<pos:position pos:line="51" pos:column="24"/></name></expr></argument>)<pos:position pos:line="51" pos:column="25"/></argument_list></call> <operator pos:line="51" pos:column="26">&amp;&amp;<pos:position pos:line="51" pos:column="36"/></operator> <call><name pos:line="51" pos:column="29">defined<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><name pos:line="51" pos:column="37">HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID<pos:position pos:line="51" pos:column="68"/></name></expr></argument>)<pos:position pos:line="51" pos:column="69"/></argument_list></call></expr></cpp:if>
  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">(<expr><name><name pos:line="52" pos:column="6">conn<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">scope_id<pos:position pos:line="52" pos:column="20"/></name></name> <operator pos:line="52" pos:column="21">&amp;&amp;<pos:position pos:line="52" pos:column="31"/></operator> <operator pos:line="52" pos:column="24">(<pos:position pos:line="52" pos:column="25"/></operator><name><name pos:line="52" pos:column="25">addr<pos:position pos:line="52" pos:column="29"/></name><operator pos:line="52" pos:column="29">-&gt;<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="31">family<pos:position pos:line="52" pos:column="37"/></name></name> <operator pos:line="52" pos:column="38">==<pos:position pos:line="52" pos:column="40"/></operator> <name pos:line="52" pos:column="41">AF_INET6<pos:position pos:line="52" pos:column="49"/></name><operator pos:line="52" pos:column="49">)<pos:position pos:line="52" pos:column="50"/></operator></expr>)<pos:position pos:line="52" pos:column="51"/></condition><then pos:line="52" pos:column="51"> <block pos:line="52" pos:column="52">{
    <decl_stmt><decl><type><name><name pos:line="53" pos:column="5">struct<pos:position pos:line="53" pos:column="11"/></name> <name pos:line="53" pos:column="12">sockaddr_in6<pos:position pos:line="53" pos:column="24"/></name></name> <modifier pos:line="53" pos:column="25">*<pos:position pos:line="53" pos:column="26"/></modifier> <specifier pos:line="53" pos:column="27">const<pos:position pos:line="53" pos:column="32"/></specifier></type> <name pos:line="53" pos:column="33">sa6<pos:position pos:line="53" pos:column="36"/></name> <init pos:line="53" pos:column="37">= <expr><operator pos:line="53" pos:column="39">(<pos:position pos:line="53" pos:column="40"/></operator><name pos:line="53" pos:column="40">void<pos:position pos:line="53" pos:column="44"/></name> <operator pos:line="53" pos:column="45">*<pos:position pos:line="53" pos:column="46"/></operator><operator pos:line="53" pos:column="46">)<pos:position pos:line="53" pos:column="47"/></operator><operator pos:line="53" pos:column="47">&amp;<pos:position pos:line="53" pos:column="52"/></operator><name><name pos:line="53" pos:column="48">addr<pos:position pos:line="53" pos:column="52"/></name><operator pos:line="53" pos:column="52">-&gt;<pos:position pos:line="53" pos:column="57"/></operator><name pos:line="53" pos:column="54">sa_addr<pos:position pos:line="53" pos:column="61"/></name></name></expr></init></decl>;<pos:position pos:line="53" pos:column="62"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">sa6<pos:position pos:line="54" pos:column="8"/></name><operator pos:line="54" pos:column="8">-&gt;<pos:position pos:line="54" pos:column="13"/></operator><name pos:line="54" pos:column="10">sin6_scope_id<pos:position pos:line="54" pos:column="23"/></name></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <name><name pos:line="54" pos:column="26">conn<pos:position pos:line="54" pos:column="30"/></name><operator pos:line="54" pos:column="30">-&gt;<pos:position pos:line="54" pos:column="35"/></operator><name pos:line="54" pos:column="32">scope_id<pos:position pos:line="54" pos:column="40"/></name></name></expr>;<pos:position pos:line="54" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="58" pos:column="3">return <expr><name pos:line="58" pos:column="10">CURLE_OK<pos:position pos:line="58" pos:column="18"/></name></expr>;<pos:position pos:line="58" pos:column="19"/></return>

}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
