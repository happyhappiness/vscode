<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1049_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">Curl_strtok_r<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">char<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">ptr<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">sep<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier><modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">end<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">(<expr><operator pos:line="4" pos:column="6">!<pos:position pos:line="4" pos:column="7"/></operator><name pos:line="4" pos:column="7">ptr<pos:position pos:line="4" pos:column="10"/></name></expr>)<pos:position pos:line="4" pos:column="11"/></condition><then pos:line="4" pos:column="11">
    <comment type="block" pos:line="5" pos:column="5">/* we got NULL input so then we get our last position instead */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="5">ptr<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">=<pos:position pos:line="6" pos:column="10"/></operator> <operator pos:line="6" pos:column="11">*<pos:position pos:line="6" pos:column="12"/></operator><name pos:line="6" pos:column="12">end<pos:position pos:line="6" pos:column="15"/></name></expr>;<pos:position pos:line="6" pos:column="16"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="8" pos:column="3">/* pass all letters that are including in the separator string */</comment>
  <while pos:line="9" pos:column="3">while<condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">ptr<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">&amp;&amp;<pos:position pos:line="9" pos:column="24"/></operator> <call><name pos:line="9" pos:column="17">strchr<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">sep<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">ptr<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="35"/></condition>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="10" pos:column="5">++<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">ptr<pos:position pos:line="10" pos:column="10"/></name></expr>;<pos:position pos:line="10" pos:column="11"/></expr_stmt></block></while>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">*<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">ptr<pos:position pos:line="12" pos:column="10"/></name></expr>)<pos:position pos:line="12" pos:column="11"/></condition><then pos:line="12" pos:column="11"> <block pos:line="12" pos:column="12">{
    <comment type="block" pos:line="13" pos:column="5">/* so this is where the next piece of string starts */</comment>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name> <modifier pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></modifier></type><name pos:line="14" pos:column="11">start<pos:position pos:line="14" pos:column="16"/></name> <init pos:line="14" pos:column="17">= <expr><name pos:line="14" pos:column="19">ptr<pos:position pos:line="14" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* set the end pointer to the first byte after the start */</comment>
    <expr_stmt><expr><operator pos:line="17" pos:column="5">*<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">end<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <name pos:line="17" pos:column="12">start<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">+<pos:position pos:line="17" pos:column="19"/></operator> <literal type="number" pos:line="17" pos:column="20">1<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="19" pos:column="5">/* scan through the string to find where it ends, it ends on a
       null byte or a character that exists in the separator string */</comment>
    <while pos:line="21" pos:column="5">while<condition pos:line="21" pos:column="10">(<expr><operator pos:line="21" pos:column="11">*<pos:position pos:line="21" pos:column="12"/></operator><operator pos:line="21" pos:column="12">*<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="13">end<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">&amp;&amp;<pos:position pos:line="21" pos:column="27"/></operator> <operator pos:line="21" pos:column="20">!<pos:position pos:line="21" pos:column="21"/></operator><call><name pos:line="21" pos:column="21">strchr<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">sep<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="33">*<pos:position pos:line="21" pos:column="34"/></operator><operator pos:line="21" pos:column="34">*<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="35">end<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="40"/></condition>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="22" pos:column="7">++<pos:position pos:line="22" pos:column="9"/></operator><operator pos:line="22" pos:column="9">*<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">end<pos:position pos:line="22" pos:column="13"/></name></expr>;<pos:position pos:line="22" pos:column="14"/></expr_stmt></block></while>

    <if pos:line="24" pos:column="5">if<condition pos:line="24" pos:column="7">(<expr><operator pos:line="24" pos:column="8">*<pos:position pos:line="24" pos:column="9"/></operator><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">end<pos:position pos:line="24" pos:column="13"/></name></expr>)<pos:position pos:line="24" pos:column="14"/></condition><then pos:line="24" pos:column="14"> <block pos:line="24" pos:column="15">{
      <comment type="block" pos:line="25" pos:column="7">/* the end is not a null byte */</comment>
      <expr_stmt><expr><operator pos:line="26" pos:column="7">*<pos:position pos:line="26" pos:column="8"/></operator><operator pos:line="26" pos:column="8">*<pos:position pos:line="26" pos:column="9"/></operator><name pos:line="26" pos:column="9">end<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <literal type="char" pos:line="26" pos:column="15">'\0'<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>  <comment type="block" pos:line="26" pos:column="22">/* zero terminate it! */</comment>
      <expr_stmt><expr><operator pos:line="27" pos:column="7">++<pos:position pos:line="27" pos:column="9"/></operator><operator pos:line="27" pos:column="9">*<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">end<pos:position pos:line="27" pos:column="13"/></name></expr>;<pos:position pos:line="27" pos:column="14"/></expr_stmt>        <comment type="block" pos:line="27" pos:column="22">/* advance the last pointer to beyond the null byte */</comment>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <return pos:line="30" pos:column="5">return <expr><name pos:line="30" pos:column="12">start<pos:position pos:line="30" pos:column="17"/></name></expr>;<pos:position pos:line="30" pos:column="18"/></return> <comment type="block" pos:line="30" pos:column="19">/* return the position where the string starts */</comment>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* we ended up on a null byte, there are no more strings to find! */</comment>
  <return pos:line="34" pos:column="3">return <expr><name pos:line="34" pos:column="10">NULL<pos:position pos:line="34" pos:column="14"/></name></expr>;<pos:position pos:line="34" pos:column="15"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
