<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_515_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">AllowServerConnect<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">timeout_ms<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SessionHandle<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name><name pos:line="4" pos:column="32">conn<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">data<pos:position pos:line="4" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_socket_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">sock<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name><name pos:line="5" pos:column="24">conn<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">-&gt;<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="30">sock<pos:position pos:line="5" pos:column="34"/></name><index pos:line="5" pos:column="34">[<expr><name pos:line="5" pos:column="35">SECONDARYSOCKET<pos:position pos:line="5" pos:column="50"/></name></expr>]<pos:position pos:line="5" pos:column="51"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">timeval<pos:position pos:line="6" pos:column="17"/></name></name></type> <name pos:line="6" pos:column="18">now<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><call><name pos:line="6" pos:column="24">Curl_tvnow<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">()<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">long<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">timespent<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><call><name pos:line="7" pos:column="20">Curl_tvdiff<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><call><name pos:line="7" pos:column="32">Curl_tvnow<pos:position pos:line="7" pos:column="42"/></name><argument_list pos:line="7" pos:column="42">()<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="7" pos:column="46">now<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call><operator pos:line="7" pos:column="50">/<pos:position pos:line="7" pos:column="51"/></operator><literal type="number" pos:line="7" pos:column="51">1000<pos:position pos:line="7" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="56"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">long<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">timeout<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><ternary><condition><expr><name><name pos:line="8" pos:column="18">data<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">-&gt;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="24">set<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">.<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">connecttimeout<pos:position pos:line="8" pos:column="42"/></name></name></expr>?<pos:position pos:line="8" pos:column="43"/></condition><then><expr><name><name pos:line="8" pos:column="43">data<pos:position pos:line="8" pos:column="47"/></name><operator pos:line="8" pos:column="47">-&gt;<pos:position pos:line="8" pos:column="52"/></operator><name pos:line="8" pos:column="49">set<pos:position pos:line="8" pos:column="52"/></name><operator pos:line="8" pos:column="52">.<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="53">connecttimeout<pos:position pos:line="8" pos:column="67"/></name></name></expr></then><else pos:line="8" pos:column="67">:
    <expr><operator pos:line="9" pos:column="5">(<pos:position pos:line="9" pos:column="6"/></operator><ternary><condition><expr><name><name pos:line="9" pos:column="6">data<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">set<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">.<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">timeout<pos:position pos:line="9" pos:column="23"/></name></name></expr>?<pos:position pos:line="9" pos:column="24"/></condition><then><expr><name><name pos:line="9" pos:column="24">data<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">set<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">.<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">timeout<pos:position pos:line="9" pos:column="41"/></name></name></expr></then><else pos:line="9" pos:column="41">: <expr><literal type="number" pos:line="9" pos:column="43">0<pos:position pos:line="9" pos:column="44"/></literal></expr></else></ternary><operator pos:line="9" pos:column="44">)<pos:position pos:line="9" pos:column="45"/></operator></expr></else></ternary></expr></init></decl>;<pos:position pos:line="9" pos:column="46"/></decl_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">timeout<pos:position pos:line="11" pos:column="13"/></name></expr>)<pos:position pos:line="11" pos:column="14"/></condition><then pos:line="11" pos:column="14"> <block pos:line="11" pos:column="15">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">timeout<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">-=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">timespent<pos:position pos:line="12" pos:column="25"/></name></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
    <if pos:line="13" pos:column="5">if<condition pos:line="13" pos:column="7">(<expr><name pos:line="13" pos:column="8">timeout<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">&lt;=<pos:position pos:line="13" pos:column="20"/></operator><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19"> <block pos:line="13" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">failf<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">data<pos:position pos:line="14" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="19">"Timed out before server could connect to us"<pos:position pos:line="14" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
      <return pos:line="15" pos:column="7">return <expr><name pos:line="15" pos:column="14">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="15" pos:column="38"/></name></expr>;<pos:position pos:line="15" pos:column="39"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="19" pos:column="3">/* We allow the server 60 seconds to connect to us, or a custom timeout.
     Note the typecast here. */</comment>
  <expr_stmt><expr><name pos:line="21" pos:column="3">timeout_ms<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <operator pos:line="21" pos:column="16">(<pos:position pos:line="21" pos:column="17"/></operator><ternary><condition><expr><name pos:line="21" pos:column="17">timeout<pos:position pos:line="21" pos:column="24"/></name></expr>?<pos:position pos:line="21" pos:column="25"/></condition><then><expr><operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">int<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">)<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">timeout<pos:position pos:line="21" pos:column="37"/></name></expr></then><else pos:line="21" pos:column="37">:<expr><literal type="number" pos:line="21" pos:column="38">60<pos:position pos:line="21" pos:column="40"/></literal></expr></else></ternary><operator pos:line="21" pos:column="40">)<pos:position pos:line="21" pos:column="41"/></operator> <operator pos:line="21" pos:column="42">*<pos:position pos:line="21" pos:column="43"/></operator> <literal type="number" pos:line="21" pos:column="44">1000<pos:position pos:line="21" pos:column="48"/></literal></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>

  <switch pos:line="23" pos:column="3">switch <condition pos:line="23" pos:column="10">(<expr><call><name pos:line="23" pos:column="11">Curl_select<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">sock<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="29">CURL_SOCKET_BAD<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="46">timeout_ms<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="58"/></condition> <block pos:line="23" pos:column="59">{
  <case pos:line="24" pos:column="3">case <expr><operator pos:line="24" pos:column="8">-<pos:position pos:line="24" pos:column="9"/></operator><literal type="number" pos:line="24" pos:column="9">1<pos:position pos:line="24" pos:column="10"/></literal></expr>:<pos:position pos:line="24" pos:column="11"/></case> <comment type="block" pos:line="24" pos:column="12">/* error */</comment>
    <comment type="block" pos:line="25" pos:column="5">/* let's die here */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">failf<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><name pos:line="26" pos:column="11">data<pos:position pos:line="26" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="17">"Error while waiting for server connect"<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="27" pos:column="33"/></name></expr>;<pos:position pos:line="27" pos:column="34"/></return>
  <case pos:line="28" pos:column="3">case <expr><literal type="number" pos:line="28" pos:column="8">0<pos:position pos:line="28" pos:column="9"/></literal></expr>:<pos:position pos:line="28" pos:column="10"/></case>  <comment type="block" pos:line="28" pos:column="12">/* timeout */</comment>
    <comment type="block" pos:line="29" pos:column="5">/* let's die here */</comment>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">failf<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><name pos:line="30" pos:column="11">data<pos:position pos:line="30" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="17">"Timeout while waiting for server connect"<pos:position pos:line="30" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="61"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="31" pos:column="33"/></name></expr>;<pos:position pos:line="31" pos:column="34"/></return>
  <default pos:line="32" pos:column="3">default:<pos:position pos:line="32" pos:column="11"/></default>
    <comment type="block" pos:line="33" pos:column="5">/* we have received data here */</comment>
    <block pos:line="34" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="35" pos:column="7">curl_socket_t<pos:position pos:line="35" pos:column="20"/></name></type> <name pos:line="35" pos:column="21">s<pos:position pos:line="35" pos:column="22"/></name></decl>;<pos:position pos:line="35" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="36" pos:column="7">size_t<pos:position pos:line="36" pos:column="13"/></name></type> <name pos:line="36" pos:column="14">size<pos:position pos:line="36" pos:column="18"/></name> <init pos:line="36" pos:column="19">= <expr><sizeof pos:line="36" pos:column="21">sizeof<argument_list pos:line="36" pos:column="27">(<argument><expr pos:line="36" pos:column="28">struct <name pos:line="36" pos:column="35">sockaddr_in<pos:position pos:line="36" pos:column="46"/></name></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="36" pos:column="48"/></decl_stmt>
      <decl_stmt><decl><type><name><name pos:line="37" pos:column="7">struct<pos:position pos:line="37" pos:column="13"/></name> <name pos:line="37" pos:column="14">sockaddr_in<pos:position pos:line="37" pos:column="25"/></name></name></type> <name pos:line="37" pos:column="26">add<pos:position pos:line="37" pos:column="29"/></name></decl>;<pos:position pos:line="37" pos:column="30"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="39" pos:column="7">getsockname<pos:position pos:line="39" pos:column="18"/></name><argument_list pos:line="39" pos:column="18">(<argument><expr><name pos:line="39" pos:column="19">sock<pos:position pos:line="39" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="25">(<pos:position pos:line="39" pos:column="26"/></operator>struct <name pos:line="39" pos:column="33">sockaddr<pos:position pos:line="39" pos:column="41"/></name> <operator pos:line="39" pos:column="42">*<pos:position pos:line="39" pos:column="43"/></operator><operator pos:line="39" pos:column="43">)<pos:position pos:line="39" pos:column="44"/></operator> <operator pos:line="39" pos:column="45">&amp;<pos:position pos:line="39" pos:column="50"/></operator><name pos:line="39" pos:column="46">add<pos:position pos:line="39" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="51">(<pos:position pos:line="39" pos:column="52"/></operator><name pos:line="39" pos:column="52">socklen_t<pos:position pos:line="39" pos:column="61"/></name> <operator pos:line="39" pos:column="62">*<pos:position pos:line="39" pos:column="63"/></operator><operator pos:line="39" pos:column="63">)<pos:position pos:line="39" pos:column="64"/></operator><operator pos:line="39" pos:column="64">&amp;<pos:position pos:line="39" pos:column="69"/></operator><name pos:line="39" pos:column="65">size<pos:position pos:line="39" pos:column="69"/></name></expr></argument>)<pos:position pos:line="39" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="71"/></expr_stmt>
      <expr_stmt><expr><name pos:line="40" pos:column="7">s<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator><call><name pos:line="40" pos:column="9">accept<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">sock<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="22">(<pos:position pos:line="40" pos:column="23"/></operator>struct <name pos:line="40" pos:column="30">sockaddr<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">*<pos:position pos:line="40" pos:column="40"/></operator><operator pos:line="40" pos:column="40">)<pos:position pos:line="40" pos:column="41"/></operator> <operator pos:line="40" pos:column="42">&amp;<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="43">add<pos:position pos:line="40" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="48">(<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="49">socklen_t<pos:position pos:line="40" pos:column="58"/></name> <operator pos:line="40" pos:column="59">*<pos:position pos:line="40" pos:column="60"/></operator><operator pos:line="40" pos:column="60">)<pos:position pos:line="40" pos:column="61"/></operator><operator pos:line="40" pos:column="61">&amp;<pos:position pos:line="40" pos:column="66"/></operator><name pos:line="40" pos:column="62">size<pos:position pos:line="40" pos:column="66"/></name></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="68"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="42" pos:column="7">sclose<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><name pos:line="42" pos:column="14">sock<pos:position pos:line="42" pos:column="18"/></name></expr></argument>)<pos:position pos:line="42" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="20"/></expr_stmt> <comment type="block" pos:line="42" pos:column="21">/* close the first socket */</comment>

      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><name pos:line="44" pos:column="11">CURL_SOCKET_BAD<pos:position pos:line="44" pos:column="26"/></name> <operator pos:line="44" pos:column="27">==<pos:position pos:line="44" pos:column="29"/></operator> <name pos:line="44" pos:column="30">s<pos:position pos:line="44" pos:column="31"/></name></expr>)<pos:position pos:line="44" pos:column="32"/></condition><then pos:line="44" pos:column="32"> <block pos:line="44" pos:column="33">{
        <comment type="block" pos:line="45" pos:column="9">/* DIE! */</comment>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">failf<pos:position pos:line="46" pos:column="14"/></name><argument_list pos:line="46" pos:column="14">(<argument><expr><name pos:line="46" pos:column="15">data<pos:position pos:line="46" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="21">"Error accept()ing server connect"<pos:position pos:line="46" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="57"/></expr_stmt>
        <return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">CURLE_FTP_PORT_FAILED<pos:position pos:line="47" pos:column="37"/></name></expr>;<pos:position pos:line="47" pos:column="38"/></return>
      }<pos:position pos:line="48" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">infof<pos:position pos:line="49" pos:column="12"/></name><argument_list pos:line="49" pos:column="12">(<argument><expr><name pos:line="49" pos:column="13">data<pos:position pos:line="49" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="19">"Connection accepted from server\n"<pos:position pos:line="49" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="56"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="51" pos:column="7">conn<pos:position pos:line="51" pos:column="11"/></name><operator pos:line="51" pos:column="11">-&gt;<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="13">sock<pos:position pos:line="51" pos:column="17"/></name><index pos:line="51" pos:column="17">[<expr><name pos:line="51" pos:column="18">SECONDARYSOCKET<pos:position pos:line="51" pos:column="33"/></name></expr>]<pos:position pos:line="51" pos:column="34"/></index></name> <operator pos:line="51" pos:column="35">=<pos:position pos:line="51" pos:column="36"/></operator> <name pos:line="51" pos:column="37">s<pos:position pos:line="51" pos:column="38"/></name></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">Curl_nonblock<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name pos:line="52" pos:column="21">s<pos:position pos:line="52" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="24">TRUE<pos:position pos:line="52" pos:column="28"/></name></expr></argument>)<pos:position pos:line="52" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="30"/></expr_stmt> <comment type="block" pos:line="52" pos:column="31">/* enable non-blocking */</comment>
    }<pos:position pos:line="53" pos:column="6"/></block>
    <break pos:line="54" pos:column="5">break;<pos:position pos:line="54" pos:column="11"/></break>
  }<pos:position pos:line="55" pos:column="4"/></block></switch>

  <return pos:line="57" pos:column="3">return <expr><name pos:line="57" pos:column="10">CURLE_OK<pos:position pos:line="57" pos:column="18"/></name></expr>;<pos:position pos:line="57" pos:column="19"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
