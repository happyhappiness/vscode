<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2541_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">connect_finish<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">connectdata<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">conn<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">int<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">sockindex<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_easy<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name><name pos:line="3" pos:column="28">conn<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">data<pos:position pos:line="3" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">ssl_connect_data<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">connssl<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><operator pos:line="4" pos:column="38">&amp;<pos:position pos:line="4" pos:column="43"/></operator><name><name pos:line="4" pos:column="39">conn<pos:position pos:line="4" pos:column="43"/></name><operator pos:line="4" pos:column="43">-&gt;<pos:position pos:line="4" pos:column="48"/></operator><name pos:line="4" pos:column="45">ssl<pos:position pos:line="4" pos:column="48"/></name><index pos:line="4" pos:column="48">[<expr><name pos:line="4" pos:column="49">sockindex<pos:position pos:line="4" pos:column="58"/></name></expr>]<pos:position pos:line="4" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">SSL<pos:position pos:line="5" pos:column="6"/></name> <modifier pos:line="5" pos:column="7">*<pos:position pos:line="5" pos:column="8"/></modifier></type><name pos:line="5" pos:column="8">ssl<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><name><name pos:line="5" pos:column="14">BACKEND<pos:position pos:line="5" pos:column="21"/></name><operator pos:line="5" pos:column="21">-&gt;<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="23">ssl<pos:position pos:line="5" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">peer_CN<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">uint32_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">dns_altname_index<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">dns_altname<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int8_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">found_subject_alt_names<pos:position pos:line="9" pos:column="33"/></name> <init pos:line="9" pos:column="34">= <expr><literal type="number" pos:line="9" pos:column="36">0<pos:position pos:line="9" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int8_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">found_subject_alt_name_matching_conn<pos:position pos:line="10" pos:column="46"/></name> <init pos:line="10" pos:column="47">= <expr><literal type="number" pos:line="10" pos:column="49">0<pos:position pos:line="10" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="51"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier> <specifier pos:line="11" pos:column="16">const<pos:position pos:line="11" pos:column="21"/></specifier></type> <name pos:line="11" pos:column="22">hostname<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="11" pos:column="33">SSL_IS_PROXY<pos:position pos:line="11" pos:column="45"/></name><argument_list pos:line="11" pos:column="45">()<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49"> <expr><name><name pos:line="11" pos:column="50">conn<pos:position pos:line="11" pos:column="54"/></name><operator pos:line="11" pos:column="54">-&gt;<pos:position pos:line="11" pos:column="59"/></operator><name pos:line="11" pos:column="56">http_proxy<pos:position pos:line="11" pos:column="66"/></name><operator pos:line="11" pos:column="66">.<pos:position pos:line="11" pos:column="67"/></operator><name pos:line="11" pos:column="67">host<pos:position pos:line="11" pos:column="71"/></name><operator pos:line="11" pos:column="71">.<pos:position pos:line="11" pos:column="72"/></operator><name pos:line="11" pos:column="72">name<pos:position pos:line="11" pos:column="76"/></name></name></expr> <pos:position pos:line="11" pos:column="77"/></then><else pos:line="11" pos:column="77">:
    <expr><name><name pos:line="12" pos:column="5">conn<pos:position pos:line="12" pos:column="9"/></name><operator pos:line="12" pos:column="9">-&gt;<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="11">host<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">name<pos:position pos:line="12" pos:column="20"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="13" pos:column="3">const<pos:position pos:line="13" pos:column="8"/></specifier> <name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name> <modifier pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></modifier> <specifier pos:line="13" pos:column="16">const<pos:position pos:line="13" pos:column="21"/></specifier></type> <name pos:line="13" pos:column="22">dispname<pos:position pos:line="13" pos:column="30"/></name> <init pos:line="13" pos:column="31">= <expr><ternary><condition><expr><call><name pos:line="13" pos:column="33">SSL_IS_PROXY<pos:position pos:line="13" pos:column="45"/></name><argument_list pos:line="13" pos:column="45">()<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="13" pos:column="49"/></condition><then pos:line="13" pos:column="49">
    <expr><name><name pos:line="14" pos:column="5">conn<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">-&gt;<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="11">http_proxy<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">.<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">host<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">.<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">dispname<pos:position pos:line="14" pos:column="35"/></name></name></expr> <pos:position pos:line="14" pos:column="36"/></then><else pos:line="14" pos:column="36">: <expr><name><name pos:line="14" pos:column="38">conn<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">-&gt;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="44">host<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">.<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="49">dispname<pos:position pos:line="14" pos:column="57"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="14" pos:column="58"/></decl_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* Here, gtls.c gets the peer certificates and fails out depending on
   * settings in "data."  axTLS api doesn't have get cert chain fcn, so omit?
   */</comment>

  <comment type="block" pos:line="20" pos:column="3">/* Verify server's certificate */</comment>
  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><call><name pos:line="21" pos:column="6">SSL_CONN_CONFIG<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">verifypeer<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><call><name pos:line="22" pos:column="8">ssl_verify_cert<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><name pos:line="22" pos:column="24">ssl<pos:position pos:line="22" pos:column="27"/></name></expr></argument>)<pos:position pos:line="22" pos:column="28"/></argument_list></call> <operator pos:line="22" pos:column="29">!=<pos:position pos:line="22" pos:column="31"/></operator> <name pos:line="22" pos:column="32">SSL_OK<pos:position pos:line="22" pos:column="38"/></name></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39"> <block pos:line="22" pos:column="40">{
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">Curl_axtls_close<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">conn<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="30">sockindex<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">failf<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">data<pos:position pos:line="24" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="19">"server cert verify failed"<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
      <return pos:line="25" pos:column="7">return <expr><name pos:line="25" pos:column="14">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="25" pos:column="44"/></name></expr>;<pos:position pos:line="25" pos:column="45"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
  }<pos:position pos:line="27" pos:column="4"/></block></then>
  <else pos:line="28" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="5">infof<pos:position pos:line="29" pos:column="10"/></name><argument_list pos:line="29" pos:column="10">(<argument><expr><name pos:line="29" pos:column="11">data<pos:position pos:line="29" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="17">"\t server certificate verification SKIPPED\n"<pos:position pos:line="29" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="65"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="31" pos:column="3">/* Here, gtls.c does issuer verification. axTLS has no straightforward
   * equivalent, so omitting for now.*/</comment>

  <comment type="block" pos:line="34" pos:column="3">/* Here, gtls.c does the following
   * 1) x509 hostname checking per RFC2818.  axTLS doesn't support this, but
   *    it seems useful. This is now implemented, by Oscar Koeroo
   * 2) checks cert validity based on time.  axTLS does this in ssl_verify_cert
   * 3) displays a bunch of cert information.  axTLS doesn't support most of
   *    this, but a couple fields are available.
   */</comment>

  <comment type="block" pos:line="42" pos:column="3">/* There is no (DNS) Altnames count in the version 1.4.8 API. There is a
     risk of an inifite loop */</comment>
  <for pos:line="44" pos:column="3">for<control pos:line="44" pos:column="6">(<init><expr><name pos:line="44" pos:column="7">dns_altname_index<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">=<pos:position pos:line="44" pos:column="26"/></operator> <literal type="number" pos:line="44" pos:column="27">0<pos:position pos:line="44" pos:column="28"/></literal></expr>;<pos:position pos:line="44" pos:column="29"/></init> <condition pos:line="44" pos:column="30">;<pos:position pos:line="44" pos:column="31"/></condition> <incr><expr><name pos:line="44" pos:column="32">dns_altname_index<pos:position pos:line="44" pos:column="49"/></name><operator pos:line="44" pos:column="49">++<pos:position pos:line="44" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="52"/></control> <block pos:line="44" pos:column="53">{
    <expr_stmt><expr><name pos:line="45" pos:column="5">dns_altname<pos:position pos:line="45" pos:column="16"/></name> <operator pos:line="45" pos:column="17">=<pos:position pos:line="45" pos:column="18"/></operator> <call><name pos:line="45" pos:column="19">ssl_get_cert_subject_alt_dnsname<pos:position pos:line="45" pos:column="51"/></name><argument_list pos:line="45" pos:column="51">(<argument><expr><name pos:line="45" pos:column="52">ssl<pos:position pos:line="45" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="57">dns_altname_index<pos:position pos:line="45" pos:column="74"/></name></expr></argument>)<pos:position pos:line="45" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="76"/></expr_stmt>
    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><name pos:line="46" pos:column="8">dns_altname<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">==<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">NULL<pos:position pos:line="46" pos:column="27"/></name></expr>)<pos:position pos:line="46" pos:column="28"/></condition><then pos:line="46" pos:column="28"> <block pos:line="46" pos:column="29">{
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="49" pos:column="5">found_subject_alt_names<pos:position pos:line="49" pos:column="28"/></name> <operator pos:line="49" pos:column="29">=<pos:position pos:line="49" pos:column="30"/></operator> <literal type="number" pos:line="49" pos:column="31">1<pos:position pos:line="49" pos:column="32"/></literal></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">infof<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name pos:line="51" pos:column="11">data<pos:position pos:line="51" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="17">"\tComparing subject alt name DNS with hostname: %s &lt;-&gt; %s\n"<pos:position pos:line="51" pos:column="84"/></literal></expr></argument>,
          <argument><expr><name pos:line="52" pos:column="11">dns_altname<pos:position pos:line="52" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="24">hostname<pos:position pos:line="52" pos:column="32"/></name></expr></argument>)<pos:position pos:line="52" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt>
    <if pos:line="53" pos:column="5">if<condition pos:line="53" pos:column="7">(<expr><call><name pos:line="53" pos:column="8">Curl_cert_hostcheck<pos:position pos:line="53" pos:column="27"/></name><argument_list pos:line="53" pos:column="27">(<argument><expr><name pos:line="53" pos:column="28">dns_altname<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="41">hostname<pos:position pos:line="53" pos:column="49"/></name></expr></argument>)<pos:position pos:line="53" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="51"/></condition><then pos:line="53" pos:column="51"> <block pos:line="53" pos:column="52">{
      <expr_stmt><expr><name pos:line="54" pos:column="7">found_subject_alt_name_matching_conn<pos:position pos:line="54" pos:column="43"/></name> <operator pos:line="54" pos:column="44">=<pos:position pos:line="54" pos:column="45"/></operator> <literal type="number" pos:line="54" pos:column="46">1<pos:position pos:line="54" pos:column="47"/></literal></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt>
      <break pos:line="55" pos:column="7">break;<pos:position pos:line="55" pos:column="13"/></break>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>
  }<pos:position pos:line="57" pos:column="4"/></block></for>

  <comment type="block" pos:line="59" pos:column="3">/* RFC2818 checks */</comment>
  <if pos:line="60" pos:column="3">if<condition pos:line="60" pos:column="5">(<expr><name pos:line="60" pos:column="6">found_subject_alt_names<pos:position pos:line="60" pos:column="29"/></name> <operator pos:line="60" pos:column="30">&amp;&amp;<pos:position pos:line="60" pos:column="40"/></operator> <operator pos:line="60" pos:column="33">!<pos:position pos:line="60" pos:column="34"/></operator><name pos:line="60" pos:column="34">found_subject_alt_name_matching_conn<pos:position pos:line="60" pos:column="70"/></name></expr>)<pos:position pos:line="60" pos:column="71"/></condition><then pos:line="60" pos:column="71"> <block pos:line="60" pos:column="72">{
    <if pos:line="61" pos:column="5">if<condition pos:line="61" pos:column="7">(<expr><call><name pos:line="61" pos:column="8">SSL_CONN_CONFIG<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">verifyhost<pos:position pos:line="61" pos:column="34"/></name></expr></argument>)<pos:position pos:line="61" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="36"/></condition><then pos:line="61" pos:column="36"> <block pos:line="61" pos:column="37">{
      <comment type="block" pos:line="62" pos:column="7">/* Break connection ! */</comment>
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">Curl_axtls_close<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><name pos:line="63" pos:column="24">conn<pos:position pos:line="63" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="30">sockindex<pos:position pos:line="63" pos:column="39"/></name></expr></argument>)<pos:position pos:line="63" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">failf<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name pos:line="64" pos:column="13">data<pos:position pos:line="64" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="19">"\tsubjectAltName(s) do not match %s\n"<pos:position pos:line="64" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="60">dispname<pos:position pos:line="64" pos:column="68"/></name></expr></argument>)<pos:position pos:line="64" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="70"/></expr_stmt>
      <return pos:line="65" pos:column="7">return <expr><name pos:line="65" pos:column="14">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="65" pos:column="44"/></name></expr>;<pos:position pos:line="65" pos:column="45"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then>
    <else pos:line="67" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="7">infof<pos:position pos:line="68" pos:column="12"/></name><argument_list pos:line="68" pos:column="12">(<argument><expr><name pos:line="68" pos:column="13">data<pos:position pos:line="68" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="19">"\tsubjectAltName(s) do not match %s\n"<pos:position pos:line="68" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="60">dispname<pos:position pos:line="68" pos:column="68"/></name></expr></argument>)<pos:position pos:line="68" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="70"/></expr_stmt></block></else></if>
  }<pos:position pos:line="69" pos:column="4"/></block></then>
  <elseif pos:line="70" pos:column="3">else <if pos:line="70" pos:column="8">if<condition pos:line="70" pos:column="10">(<expr><name pos:line="70" pos:column="11">found_subject_alt_names<pos:position pos:line="70" pos:column="34"/></name> <operator pos:line="70" pos:column="35">==<pos:position pos:line="70" pos:column="37"/></operator> <literal type="number" pos:line="70" pos:column="38">0<pos:position pos:line="70" pos:column="39"/></literal></expr>)<pos:position pos:line="70" pos:column="40"/></condition><then pos:line="70" pos:column="40"> <block pos:line="70" pos:column="41">{
    <comment type="block" pos:line="71" pos:column="5">/* Per RFC2818, when no Subject Alt Names were available, examine the peer
       CN as a legacy fallback */</comment>
    <expr_stmt><expr><name pos:line="73" pos:column="5">peer_CN<pos:position pos:line="73" pos:column="12"/></name> <operator pos:line="73" pos:column="13">=<pos:position pos:line="73" pos:column="14"/></operator> <call><name pos:line="73" pos:column="15">ssl_get_cert_dn<pos:position pos:line="73" pos:column="30"/></name><argument_list pos:line="73" pos:column="30">(<argument><expr><name pos:line="73" pos:column="31">ssl<pos:position pos:line="73" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="36">SSL_X509_CERT_COMMON_NAME<pos:position pos:line="73" pos:column="61"/></name></expr></argument>)<pos:position pos:line="73" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="63"/></expr_stmt>
    <if pos:line="74" pos:column="5">if<condition pos:line="74" pos:column="7">(<expr><name pos:line="74" pos:column="8">peer_CN<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">==<pos:position pos:line="74" pos:column="18"/></operator> <name pos:line="74" pos:column="19">NULL<pos:position pos:line="74" pos:column="23"/></name></expr>)<pos:position pos:line="74" pos:column="24"/></condition><then pos:line="74" pos:column="24"> <block pos:line="74" pos:column="25">{
      <if pos:line="75" pos:column="7">if<condition pos:line="75" pos:column="9">(<expr><call><name pos:line="75" pos:column="10">SSL_CONN_CONFIG<pos:position pos:line="75" pos:column="25"/></name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">verifyhost<pos:position pos:line="75" pos:column="36"/></name></expr></argument>)<pos:position pos:line="75" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="38"/></condition><then pos:line="75" pos:column="38"> <block pos:line="75" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">Curl_axtls_close<pos:position pos:line="76" pos:column="25"/></name><argument_list pos:line="76" pos:column="25">(<argument><expr><name pos:line="76" pos:column="26">conn<pos:position pos:line="76" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="32">sockindex<pos:position pos:line="76" pos:column="41"/></name></expr></argument>)<pos:position pos:line="76" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">failf<pos:position pos:line="77" pos:column="14"/></name><argument_list pos:line="77" pos:column="14">(<argument><expr><name pos:line="77" pos:column="15">data<pos:position pos:line="77" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="21">"unable to obtain common name from peer certificate"<pos:position pos:line="77" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="75"/></expr_stmt>
        <return pos:line="78" pos:column="9">return <expr><name pos:line="78" pos:column="16">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="78" pos:column="46"/></name></expr>;<pos:position pos:line="78" pos:column="47"/></return>
      }<pos:position pos:line="79" pos:column="8"/></block></then>
      <else pos:line="80" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="9">infof<pos:position pos:line="81" pos:column="14"/></name><argument_list pos:line="81" pos:column="14">(<argument><expr><name pos:line="81" pos:column="15">data<pos:position pos:line="81" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="21">"unable to obtain common name from peer certificate"<pos:position pos:line="81" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="75"/></expr_stmt></block></else></if>
    }<pos:position pos:line="82" pos:column="6"/></block></then>
    <else pos:line="83" pos:column="5">else <block pos:line="83" pos:column="10">{
      <if pos:line="84" pos:column="7">if<condition pos:line="84" pos:column="9">(<expr><operator pos:line="84" pos:column="10">!<pos:position pos:line="84" pos:column="11"/></operator><call><name pos:line="84" pos:column="11">Curl_cert_hostcheck<pos:position pos:line="84" pos:column="30"/></name><argument_list pos:line="84" pos:column="30">(<argument><expr><operator pos:line="84" pos:column="31">(<pos:position pos:line="84" pos:column="32"/></operator><specifier pos:line="84" pos:column="32">const<pos:position pos:line="84" pos:column="37"/></specifier> <name pos:line="84" pos:column="38">char<pos:position pos:line="84" pos:column="42"/></name> <operator pos:line="84" pos:column="43">*<pos:position pos:line="84" pos:column="44"/></operator><operator pos:line="84" pos:column="44">)<pos:position pos:line="84" pos:column="45"/></operator><name pos:line="84" pos:column="45">peer_CN<pos:position pos:line="84" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="54">hostname<pos:position pos:line="84" pos:column="62"/></name></expr></argument>)<pos:position pos:line="84" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="64"/></condition><then pos:line="84" pos:column="64"> <block pos:line="84" pos:column="65">{
        <if pos:line="85" pos:column="9">if<condition pos:line="85" pos:column="11">(<expr><call><name pos:line="85" pos:column="12">SSL_CONN_CONFIG<pos:position pos:line="85" pos:column="27"/></name><argument_list pos:line="85" pos:column="27">(<argument><expr><name pos:line="85" pos:column="28">verifyhost<pos:position pos:line="85" pos:column="38"/></name></expr></argument>)<pos:position pos:line="85" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="40"/></condition><then pos:line="85" pos:column="40"> <block pos:line="85" pos:column="41">{
          <comment type="block" pos:line="86" pos:column="11">/* Break connection ! */</comment>
          <expr_stmt><expr><call><name pos:line="87" pos:column="11">Curl_axtls_close<pos:position pos:line="87" pos:column="27"/></name><argument_list pos:line="87" pos:column="27">(<argument><expr><name pos:line="87" pos:column="28">conn<pos:position pos:line="87" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="34">sockindex<pos:position pos:line="87" pos:column="43"/></name></expr></argument>)<pos:position pos:line="87" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="45"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="88" pos:column="11">failf<pos:position pos:line="88" pos:column="16"/></name><argument_list pos:line="88" pos:column="16">(<argument><expr><name pos:line="88" pos:column="17">data<pos:position pos:line="88" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="23">"\tcommon name \"%s\" does not match \"%s\"\n"<pos:position pos:line="88" pos:column="69"/></literal></expr></argument>,
                <argument><expr><name pos:line="89" pos:column="17">peer_CN<pos:position pos:line="89" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="26">dispname<pos:position pos:line="89" pos:column="34"/></name></expr></argument>)<pos:position pos:line="89" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="36"/></expr_stmt>
          <return pos:line="90" pos:column="11">return <expr><name pos:line="90" pos:column="18">CURLE_PEER_FAILED_VERIFICATION<pos:position pos:line="90" pos:column="48"/></name></expr>;<pos:position pos:line="90" pos:column="49"/></return>
        }<pos:position pos:line="91" pos:column="10"/></block></then>
        <else pos:line="92" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="11">infof<pos:position pos:line="93" pos:column="16"/></name><argument_list pos:line="93" pos:column="16">(<argument><expr><name pos:line="93" pos:column="17">data<pos:position pos:line="93" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="23">"\tcommon name \"%s\" does not match \"%s\"\n"<pos:position pos:line="93" pos:column="69"/></literal></expr></argument>,
                <argument><expr><name pos:line="94" pos:column="17">peer_CN<pos:position pos:line="94" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="26">dispname<pos:position pos:line="94" pos:column="34"/></name></expr></argument>)<pos:position pos:line="94" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="36"/></expr_stmt></block></else></if>
      }<pos:position pos:line="95" pos:column="8"/></block></then></if>
    }<pos:position pos:line="96" pos:column="6"/></block></else></if>
  }<pos:position pos:line="97" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="99" pos:column="3">/* General housekeeping */</comment>
  <expr_stmt><expr><name><name pos:line="100" pos:column="3">connssl<pos:position pos:line="100" pos:column="10"/></name><operator pos:line="100" pos:column="10">-&gt;<pos:position pos:line="100" pos:column="15"/></operator><name pos:line="100" pos:column="12">state<pos:position pos:line="100" pos:column="17"/></name></name> <operator pos:line="100" pos:column="18">=<pos:position pos:line="100" pos:column="19"/></operator> <name pos:line="100" pos:column="20">ssl_connection_complete<pos:position pos:line="100" pos:column="43"/></name></expr>;<pos:position pos:line="100" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="101" pos:column="3">conn<pos:position pos:line="101" pos:column="7"/></name><operator pos:line="101" pos:column="7">-&gt;<pos:position pos:line="101" pos:column="12"/></operator><name pos:line="101" pos:column="9">recv<pos:position pos:line="101" pos:column="13"/></name><index pos:line="101" pos:column="13">[<expr><name pos:line="101" pos:column="14">sockindex<pos:position pos:line="101" pos:column="23"/></name></expr>]<pos:position pos:line="101" pos:column="24"/></index></name> <operator pos:line="101" pos:column="25">=<pos:position pos:line="101" pos:column="26"/></operator> <name pos:line="101" pos:column="27">axtls_recv<pos:position pos:line="101" pos:column="37"/></name></expr>;<pos:position pos:line="101" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="102" pos:column="3">conn<pos:position pos:line="102" pos:column="7"/></name><operator pos:line="102" pos:column="7">-&gt;<pos:position pos:line="102" pos:column="12"/></operator><name pos:line="102" pos:column="9">send<pos:position pos:line="102" pos:column="13"/></name><index pos:line="102" pos:column="13">[<expr><name pos:line="102" pos:column="14">sockindex<pos:position pos:line="102" pos:column="23"/></name></expr>]<pos:position pos:line="102" pos:column="24"/></index></name> <operator pos:line="102" pos:column="25">=<pos:position pos:line="102" pos:column="26"/></operator> <name pos:line="102" pos:column="27">axtls_send<pos:position pos:line="102" pos:column="37"/></name></expr>;<pos:position pos:line="102" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="104" pos:column="3">/* Put our freshly minted SSL session in cache */</comment>
  <if pos:line="105" pos:column="3">if<condition pos:line="105" pos:column="5">(<expr><call><name pos:line="105" pos:column="6">SSL_SET_OPTION<pos:position pos:line="105" pos:column="20"/></name><argument_list pos:line="105" pos:column="20">(<argument><expr><name><name pos:line="105" pos:column="21">primary<pos:position pos:line="105" pos:column="28"/></name><operator pos:line="105" pos:column="28">.<pos:position pos:line="105" pos:column="29"/></operator><name pos:line="105" pos:column="29">sessionid<pos:position pos:line="105" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="105" pos:column="40"/></condition><then pos:line="105" pos:column="40"> <block pos:line="105" pos:column="41">{
    <decl_stmt><decl><type><specifier pos:line="106" pos:column="5">const<pos:position pos:line="106" pos:column="10"/></specifier> <name pos:line="106" pos:column="11">uint8_t<pos:position pos:line="106" pos:column="18"/></name> <modifier pos:line="106" pos:column="19">*<pos:position pos:line="106" pos:column="20"/></modifier></type><name pos:line="106" pos:column="20">ssl_sessionid<pos:position pos:line="106" pos:column="33"/></name> <init pos:line="106" pos:column="34">= <expr><call><name pos:line="106" pos:column="36">ssl_get_session_id<pos:position pos:line="106" pos:column="54"/></name><argument_list pos:line="106" pos:column="54">(<argument><expr><name pos:line="106" pos:column="55">ssl<pos:position pos:line="106" pos:column="58"/></name></expr></argument>)<pos:position pos:line="106" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="106" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="107" pos:column="5">size_t<pos:position pos:line="107" pos:column="11"/></name></type> <name pos:line="107" pos:column="12">ssl_idsize<pos:position pos:line="107" pos:column="22"/></name> <init pos:line="107" pos:column="23">= <expr><call><name pos:line="107" pos:column="25">ssl_get_session_id_size<pos:position pos:line="107" pos:column="48"/></name><argument_list pos:line="107" pos:column="48">(<argument><expr><name pos:line="107" pos:column="49">ssl<pos:position pos:line="107" pos:column="52"/></name></expr></argument>)<pos:position pos:line="107" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="107" pos:column="54"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="108" pos:column="5">Curl_ssl_sessionid_lock<pos:position pos:line="108" pos:column="28"/></name><argument_list pos:line="108" pos:column="28">(<argument><expr><name pos:line="108" pos:column="29">conn<pos:position pos:line="108" pos:column="33"/></name></expr></argument>)<pos:position pos:line="108" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="35"/></expr_stmt>
    <if pos:line="109" pos:column="5">if<condition pos:line="109" pos:column="7">(<expr><call><name pos:line="109" pos:column="8">Curl_ssl_addsessionid<pos:position pos:line="109" pos:column="29"/></name><argument_list pos:line="109" pos:column="29">(<argument><expr><name pos:line="109" pos:column="30">conn<pos:position pos:line="109" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="36">(<pos:position pos:line="109" pos:column="37"/></operator><name pos:line="109" pos:column="37">void<pos:position pos:line="109" pos:column="41"/></name> <operator pos:line="109" pos:column="42">*<pos:position pos:line="109" pos:column="43"/></operator><operator pos:line="109" pos:column="43">)<pos:position pos:line="109" pos:column="44"/></operator> <name pos:line="109" pos:column="45">ssl_sessionid<pos:position pos:line="109" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="60">ssl_idsize<pos:position pos:line="109" pos:column="70"/></name></expr></argument>,
                             <argument><expr><name pos:line="110" pos:column="30">sockindex<pos:position pos:line="110" pos:column="39"/></name></expr></argument>)<pos:position pos:line="110" pos:column="40"/></argument_list></call> <operator pos:line="110" pos:column="41">!=<pos:position pos:line="110" pos:column="43"/></operator> <name pos:line="110" pos:column="44">CURLE_OK<pos:position pos:line="110" pos:column="52"/></name></expr>)<pos:position pos:line="110" pos:column="53"/></condition><then pos:line="110" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="7">infof<pos:position pos:line="111" pos:column="12"/></name><argument_list pos:line="111" pos:column="12">(<argument><expr><name pos:line="111" pos:column="13">data<pos:position pos:line="111" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="19">"failed to add session to cache\n"<pos:position pos:line="111" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="55"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">Curl_ssl_sessionid_unlock<pos:position pos:line="112" pos:column="30"/></name><argument_list pos:line="112" pos:column="30">(<argument><expr><name pos:line="112" pos:column="31">conn<pos:position pos:line="112" pos:column="35"/></name></expr></argument>)<pos:position pos:line="112" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="113" pos:column="4"/></block></then></if>

  <return pos:line="115" pos:column="3">return <expr><name pos:line="115" pos:column="10">CURLE_OK<pos:position pos:line="115" pos:column="18"/></name></expr>;<pos:position pos:line="115" pos:column="19"/></return>
}<pos:position pos:line="116" pos:column="2"/></block></function></unit>
