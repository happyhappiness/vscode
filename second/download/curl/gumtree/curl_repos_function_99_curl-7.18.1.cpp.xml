<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_99_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">init_fifo<pos:position pos:line="1" pos:column="14"/></name> <parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">GlobalInfo<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">g<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list> <block pos:line="1" pos:column="31">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">stat<pos:position pos:line="2" pos:column="14"/></name></name></type> <name pos:line="2" pos:column="15">st<pos:position pos:line="2" pos:column="17"/></name></decl>;<pos:position pos:line="2" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="3" pos:column="3">static<pos:position pos:line="3" pos:column="9"/></specifier> <type><specifier pos:line="3" pos:column="10">const<pos:position pos:line="3" pos:column="15"/></specifier> <name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">fifo<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><literal type="string" pos:line="3" pos:column="29">"hiper.fifo"<pos:position pos:line="3" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">socket<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">fprintf<pos:position pos:line="6" pos:column="10"/></name><argument_list pos:line="6" pos:column="10">(<argument><expr><name pos:line="6" pos:column="11">MSG_OUT<pos:position pos:line="6" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="20">"Creating named pipe \"%s\"\n"<pos:position pos:line="6" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="52">fifo<pos:position pos:line="6" pos:column="56"/></name></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="58"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><call><name pos:line="7" pos:column="7">lstat<pos:position pos:line="7" pos:column="12"/></name> <argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">fifo<pos:position pos:line="7" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="20">&amp;<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="21">st<pos:position pos:line="7" pos:column="23"/></name></expr></argument>)<pos:position pos:line="7" pos:column="24"/></argument_list></call> <operator pos:line="7" pos:column="25">==<pos:position pos:line="7" pos:column="27"/></operator> <literal type="number" pos:line="7" pos:column="28">0<pos:position pos:line="7" pos:column="29"/></literal></expr>)<pos:position pos:line="7" pos:column="30"/></condition><then pos:line="7" pos:column="30"> <block pos:line="7" pos:column="31">{
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">(<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">st<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">.<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">st_mode<pos:position pos:line="8" pos:column="20"/></name></name> <operator pos:line="8" pos:column="21">&amp;<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="23">S_IFMT<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">)<pos:position pos:line="8" pos:column="30"/></operator> <operator pos:line="8" pos:column="31">==<pos:position pos:line="8" pos:column="33"/></operator> <name pos:line="8" pos:column="34">S_IFREG<pos:position pos:line="8" pos:column="41"/></name></expr>)<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42"> <block pos:line="8" pos:column="43">{
      <expr_stmt><expr><name pos:line="9" pos:column="7">errno<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <name pos:line="9" pos:column="15">EEXIST<pos:position pos:line="9" pos:column="21"/></name></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">perror<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><literal type="string" pos:line="10" pos:column="14">"lstat"<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="11" pos:column="7">exit<pos:position pos:line="11" pos:column="11"/></name> <argument_list pos:line="11" pos:column="12">(<argument><expr><literal type="number" pos:line="11" pos:column="13">1<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">unlink<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">fifo<pos:position pos:line="14" pos:column="14"/></name></expr></argument>)<pos:position pos:line="14" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="16"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><call><name pos:line="15" pos:column="7">mkfifo<pos:position pos:line="15" pos:column="13"/></name> <argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">fifo<pos:position pos:line="15" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="21">0600<pos:position pos:line="15" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call> <operator pos:line="15" pos:column="27">==<pos:position pos:line="15" pos:column="29"/></operator> <operator pos:line="15" pos:column="30">-<pos:position pos:line="15" pos:column="31"/></operator><literal type="number" pos:line="15" pos:column="31">1<pos:position pos:line="15" pos:column="32"/></literal></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33"> <block pos:line="15" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">perror<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="string" pos:line="16" pos:column="12">"mkfifo"<pos:position pos:line="16" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">exit<pos:position pos:line="17" pos:column="9"/></name> <argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="number" pos:line="17" pos:column="11">1<pos:position pos:line="17" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="19" pos:column="3">socket<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">=<pos:position pos:line="19" pos:column="11"/></operator> <call><name pos:line="19" pos:column="12">open<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">fifo<pos:position pos:line="19" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="23">O_RDWR<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">|<pos:position pos:line="19" pos:column="31"/></operator> <name pos:line="19" pos:column="32">O_NONBLOCK<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="44">0<pos:position pos:line="19" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">socket<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">==<pos:position pos:line="20" pos:column="16"/></operator> <operator pos:line="20" pos:column="17">-<pos:position pos:line="20" pos:column="18"/></operator><literal type="number" pos:line="20" pos:column="18">1<pos:position pos:line="20" pos:column="19"/></literal></expr>)<pos:position pos:line="20" pos:column="20"/></condition><then pos:line="20" pos:column="20"> <block pos:line="20" pos:column="21">{
     <expr_stmt><expr><call><name pos:line="21" pos:column="6">perror<pos:position pos:line="21" pos:column="12"/></name><argument_list pos:line="21" pos:column="12">(<argument><expr><literal type="string" pos:line="21" pos:column="13">"open"<pos:position pos:line="21" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>
     <expr_stmt><expr><call><name pos:line="22" pos:column="6">exit<pos:position pos:line="22" pos:column="10"/></name> <argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="number" pos:line="22" pos:column="12">1<pos:position pos:line="22" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">g<pos:position pos:line="24" pos:column="4"/></name><operator pos:line="24" pos:column="4">-&gt;<pos:position pos:line="24" pos:column="9"/></operator><name pos:line="24" pos:column="6">input<pos:position pos:line="24" pos:column="11"/></name></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">fdopen<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">socket<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="29">"r"<pos:position pos:line="24" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">fprintf<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><name pos:line="26" pos:column="11">MSG_OUT<pos:position pos:line="26" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="20">"Now, pipe some URL's into &gt; %s\n"<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="56">fifo<pos:position pos:line="26" pos:column="60"/></name></expr></argument>)<pos:position pos:line="26" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">event_set<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><operator pos:line="27" pos:column="13">&amp;<pos:position pos:line="27" pos:column="18"/></operator><name><name pos:line="27" pos:column="14">g<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">fifo_event<pos:position pos:line="27" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="29">socket<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">EV_READ<pos:position pos:line="27" pos:column="44"/></name> <operator pos:line="27" pos:column="45">|<pos:position pos:line="27" pos:column="46"/></operator> <name pos:line="27" pos:column="47">EV_PERSIST<pos:position pos:line="27" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="59">fifo_cb<pos:position pos:line="27" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="68">g<pos:position pos:line="27" pos:column="69"/></name></expr></argument>)<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="71"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">event_add<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><operator pos:line="28" pos:column="13">&amp;<pos:position pos:line="28" pos:column="18"/></operator><name><name pos:line="28" pos:column="14">g<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">fifo_event<pos:position pos:line="28" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">NULL<pos:position pos:line="28" pos:column="33"/></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
  <return pos:line="29" pos:column="3">return <expr><operator pos:line="29" pos:column="10">(<pos:position pos:line="29" pos:column="11"/></operator><literal type="number" pos:line="29" pos:column="11">0<pos:position pos:line="29" pos:column="12"/></literal><operator pos:line="29" pos:column="12">)<pos:position pos:line="29" pos:column="13"/></operator></expr>;<pos:position pos:line="29" pos:column="14"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
