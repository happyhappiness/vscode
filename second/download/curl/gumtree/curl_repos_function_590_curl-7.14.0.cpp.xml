<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_590_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">Curl_sec_read_msg<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name><name pos:line="2" pos:column="19">struct<pos:position pos:line="2" pos:column="25"/></name> <name pos:line="2" pos:column="26">connectdata<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">conn<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">s<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">level<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">len<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">buf<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">code<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">len<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <call><name pos:line="8" pos:column="9">Curl_base64_decode<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">s<pos:position pos:line="8" pos:column="29"/></name> <operator pos:line="8" pos:column="30">+<pos:position pos:line="8" pos:column="31"/></operator> <literal type="number" pos:line="8" pos:column="32">4<pos:position pos:line="8" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="35">&amp;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="36">buf<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt> <comment type="block" pos:line="8" pos:column="42">/* XXX */</comment>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name pos:line="9" pos:column="6">len<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">&gt;<pos:position pos:line="9" pos:column="14"/></operator> <literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="5">len<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <call pos:line="10" pos:column="11">(<name><name pos:line="10" pos:column="12">conn<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">mech<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">-&gt;<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="24">decode<pos:position pos:line="10" pos:column="30"/></name></name>)<argument_list pos:line="10" pos:column="31">(<argument><expr><name><name pos:line="10" pos:column="32">conn<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="38">app_data<pos:position pos:line="10" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="48">buf<pos:position pos:line="10" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="53">len<pos:position pos:line="10" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="58">level<pos:position pos:line="10" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="65">conn<pos:position pos:line="10" pos:column="69"/></name></expr></argument>)<pos:position pos:line="10" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="71"/></expr_stmt></block></then>
  <else pos:line="11" pos:column="3">else
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">-<pos:position pos:line="12" pos:column="13"/></operator><literal type="number" pos:line="12" pos:column="13">1<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></return></block></else></if>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">len<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">&lt;<pos:position pos:line="14" pos:column="14"/></operator> <literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>)<pos:position pos:line="14" pos:column="14"/></condition><then pos:line="14" pos:column="14"> <block pos:line="14" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">free<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name pos:line="15" pos:column="10">buf<pos:position pos:line="15" pos:column="13"/></name></expr></argument>)<pos:position pos:line="15" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="15"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">-<pos:position pos:line="16" pos:column="13"/></operator><literal type="number" pos:line="16" pos:column="13">1<pos:position pos:line="16" pos:column="14"/></literal></expr>;<pos:position pos:line="16" pos:column="15"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="19" pos:column="3">buf<pos:position pos:line="19" pos:column="6"/></name><index pos:line="19" pos:column="6">[<expr><name pos:line="19" pos:column="7">len<pos:position pos:line="19" pos:column="10"/></name></expr>]<pos:position pos:line="19" pos:column="11"/></index></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <literal type="char" pos:line="19" pos:column="14">'\0'<pos:position pos:line="19" pos:column="18"/></literal></expr>;<pos:position pos:line="19" pos:column="19"/></expr_stmt>

  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><name><name pos:line="21" pos:column="6">buf<pos:position pos:line="21" pos:column="9"/></name><index pos:line="21" pos:column="9">[<expr><literal type="number" pos:line="21" pos:column="10">3<pos:position pos:line="21" pos:column="11"/></literal></expr>]<pos:position pos:line="21" pos:column="12"/></index></name> <operator pos:line="21" pos:column="13">==<pos:position pos:line="21" pos:column="15"/></operator> <literal type="char" pos:line="21" pos:column="16">'-'<pos:position pos:line="21" pos:column="19"/></literal></expr>)<pos:position pos:line="21" pos:column="20"/></condition><then pos:line="21" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="5">code<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <literal type="number" pos:line="22" pos:column="12">0<pos:position pos:line="22" pos:column="13"/></literal></expr>;<pos:position pos:line="22" pos:column="14"/></expr_stmt></block></then>
  <else pos:line="23" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="5">sscanf<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">char<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">*<pos:position pos:line="24" pos:column="19"/></operator><operator pos:line="24" pos:column="19">)<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">buf<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="25">"%d"<pos:position pos:line="24" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="31">&amp;<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="32">code<pos:position pos:line="24" pos:column="36"/></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt></block></else></if>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name><name pos:line="25" pos:column="6">buf<pos:position pos:line="25" pos:column="9"/></name><index pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">len<pos:position pos:line="25" pos:column="13"/></name><operator pos:line="25" pos:column="13">-<pos:position pos:line="25" pos:column="14"/></operator><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal></expr>]<pos:position pos:line="25" pos:column="16"/></index></name> <operator pos:line="25" pos:column="17">==<pos:position pos:line="25" pos:column="19"/></operator> <literal type="char" pos:line="25" pos:column="20">'\n'<pos:position pos:line="25" pos:column="24"/></literal></expr>)<pos:position pos:line="25" pos:column="25"/></condition><then pos:line="25" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="5">buf<pos:position pos:line="26" pos:column="8"/></name><index pos:line="26" pos:column="8">[<expr><name pos:line="26" pos:column="9">len<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-<pos:position pos:line="26" pos:column="13"/></operator><literal type="number" pos:line="26" pos:column="13">1<pos:position pos:line="26" pos:column="14"/></literal></expr>]<pos:position pos:line="26" pos:column="15"/></index></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="char" pos:line="26" pos:column="18">'\0'<pos:position pos:line="26" pos:column="22"/></literal></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">strcpy<pos:position pos:line="27" pos:column="9"/></name><argument_list pos:line="27" pos:column="9">(<argument><expr><name pos:line="27" pos:column="10">s<pos:position pos:line="27" pos:column="11"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">char<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">*<pos:position pos:line="27" pos:column="20"/></operator><operator pos:line="27" pos:column="20">)<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">buf<pos:position pos:line="27" pos:column="24"/></name></expr></argument>)<pos:position pos:line="27" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">free<pos:position pos:line="28" pos:column="7"/></name><argument_list pos:line="28" pos:column="7">(<argument><expr><name pos:line="28" pos:column="8">buf<pos:position pos:line="28" pos:column="11"/></name></expr></argument>)<pos:position pos:line="28" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="13"/></expr_stmt>
  <return pos:line="29" pos:column="3">return <expr><name pos:line="29" pos:column="10">code<pos:position pos:line="29" pos:column="14"/></name></expr>;<pos:position pos:line="29" pos:column="15"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
