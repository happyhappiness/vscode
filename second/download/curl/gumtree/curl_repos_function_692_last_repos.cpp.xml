<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_692_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">decodedata<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name>  <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier><modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">buf<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>,   <comment type="block" pos:line="1" pos:column="38">/* dest buffer */</comment>
                      <parameter><decl><type><name pos:line="2" pos:column="23">size_t<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">len<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>   <comment type="block" pos:line="2" pos:column="38">/* dest buffer data length */</comment>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">error<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name pos:line="4" pos:column="20">CURLE_OK<pos:position pos:line="4" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">buf64<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name pos:line="5" pos:column="26">NULL<pos:position pos:line="5" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">src_len<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><operator pos:line="8" pos:column="7">*<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">len<pos:position pos:line="8" pos:column="11"/></name></expr>)<pos:position pos:line="8" pos:column="12"/></condition><then pos:line="8" pos:column="12">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">GPE_OK<pos:position pos:line="9" pos:column="18"/></name></expr>;<pos:position pos:line="9" pos:column="19"/></return></block></then></if>

  <comment type="block" pos:line="11" pos:column="3">/* base64 decode the given buffer */</comment>
  <expr_stmt><expr><name pos:line="12" pos:column="3">error<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <call><name pos:line="12" pos:column="11">Curl_base64_decode<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><operator pos:line="12" pos:column="30">*<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">buf<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="36">&amp;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="37">buf64<pos:position pos:line="12" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="44">&amp;<pos:position pos:line="12" pos:column="49"/></operator><name pos:line="12" pos:column="45">src_len<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">error<pos:position pos:line="13" pos:column="11"/></name></expr>)<pos:position pos:line="13" pos:column="12"/></condition><then pos:line="13" pos:column="12">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">GPE_OUT_OF_MEMORY<pos:position pos:line="14" pos:column="29"/></name></expr>;<pos:position pos:line="14" pos:column="30"/></return></block></then></if>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">!<pos:position pos:line="16" pos:column="7"/></operator><name pos:line="16" pos:column="7">src_len<pos:position pos:line="16" pos:column="14"/></name></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15"> <block pos:line="16" pos:column="16">{
    <comment type="block" pos:line="17" pos:column="5">/*
    ** currently there is no way to tell apart an OOM condition in
    ** Curl_base64_decode() from zero length decoded data. For now,
    ** let's just assume it is an OOM condition, currently we have
    ** no input for this function that decodes to zero length data.
    */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">free<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">buf64<pos:position pos:line="23" pos:column="15"/></name></expr></argument>)<pos:position pos:line="23" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="17"/></expr_stmt>

    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">GPE_OUT_OF_MEMORY<pos:position pos:line="25" pos:column="29"/></name></expr>;<pos:position pos:line="25" pos:column="30"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="28" pos:column="3">/* memcpy to support binary blobs */</comment>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">memcpy<pos:position pos:line="29" pos:column="9"/></name><argument_list pos:line="29" pos:column="9">(<argument><expr><operator pos:line="29" pos:column="10">*<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">buf<pos:position pos:line="29" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="16">buf64<pos:position pos:line="29" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="23">src_len<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="30" pos:column="3">*<pos:position pos:line="30" pos:column="4"/></operator><name pos:line="30" pos:column="4">len<pos:position pos:line="30" pos:column="7"/></name> <operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator> <name pos:line="30" pos:column="10">src_len<pos:position pos:line="30" pos:column="17"/></name></expr>;<pos:position pos:line="30" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="31" pos:column="3">*<pos:position pos:line="31" pos:column="4"/></operator><operator pos:line="31" pos:column="4">(<pos:position pos:line="31" pos:column="5"/></operator><operator pos:line="31" pos:column="5">*<pos:position pos:line="31" pos:column="6"/></operator><name pos:line="31" pos:column="6">buf<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">+<pos:position pos:line="31" pos:column="11"/></operator> <name pos:line="31" pos:column="12">src_len<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">)<pos:position pos:line="31" pos:column="20"/></operator> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <literal type="char" pos:line="31" pos:column="23">'\0'<pos:position pos:line="31" pos:column="27"/></literal></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">free<pos:position pos:line="33" pos:column="7"/></name><argument_list pos:line="33" pos:column="7">(<argument><expr><name pos:line="33" pos:column="8">buf64<pos:position pos:line="33" pos:column="13"/></name></expr></argument>)<pos:position pos:line="33" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="15"/></expr_stmt>

  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">GPE_OK<pos:position pos:line="35" pos:column="16"/></name></expr>;<pos:position pos:line="35" pos:column="17"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
