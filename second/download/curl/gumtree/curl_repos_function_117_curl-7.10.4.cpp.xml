<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_117_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_readwrite_init<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">connectdata<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">conn<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">SessionHandle<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">data<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name><name pos:line="3" pos:column="32">conn<pos:position pos:line="3" pos:column="36"/></name><operator pos:line="3" pos:column="36">-&gt;<pos:position pos:line="3" pos:column="41"/></operator><name pos:line="3" pos:column="38">data<pos:position pos:line="3" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_transfer_keeper<pos:position pos:line="4" pos:column="30"/></name></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">k<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><operator pos:line="4" pos:column="36">&amp;<pos:position pos:line="4" pos:column="41"/></operator><name><name pos:line="4" pos:column="37">conn<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">keep<pos:position pos:line="4" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* NB: the content encoding software depends on this initialization of
     Curl_transfer_keeper. 08/28/02 jhrg */</comment>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">memset<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><name pos:line="8" pos:column="10">k<pos:position pos:line="8" pos:column="11"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="13">0<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="16">sizeof<argument_list pos:line="8" pos:column="22">(<argument><expr pos:line="8" pos:column="23">struct <name pos:line="8" pos:column="30">Curl_transfer_keeper<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="53"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="10" pos:column="3">k<pos:position pos:line="10" pos:column="4"/></name><operator pos:line="10" pos:column="4">-&gt;<pos:position pos:line="10" pos:column="9"/></operator><name pos:line="10" pos:column="6">start<pos:position pos:line="10" pos:column="11"/></name></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">Curl_tvnow<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">()<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt> <comment type="block" pos:line="10" pos:column="28">/* start time */</comment>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">k<pos:position pos:line="11" pos:column="4"/></name><operator pos:line="11" pos:column="4">-&gt;<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="6">now<pos:position pos:line="11" pos:column="9"/></name></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <name><name pos:line="11" pos:column="12">k<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">start<pos:position pos:line="11" pos:column="20"/></name></name></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>   <comment type="block" pos:line="11" pos:column="24">/* current time is now */</comment>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">k<pos:position pos:line="12" pos:column="4"/></name><operator pos:line="12" pos:column="4">-&gt;<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="6">header<pos:position pos:line="12" pos:column="12"/></name></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="15">TRUE<pos:position pos:line="12" pos:column="19"/></name></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt> <comment type="block" pos:line="12" pos:column="21">/* assume header */</comment>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">k<pos:position pos:line="13" pos:column="4"/></name><operator pos:line="13" pos:column="4">-&gt;<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="6">httpversion<pos:position pos:line="13" pos:column="17"/></name></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <operator pos:line="13" pos:column="20">-<pos:position pos:line="13" pos:column="21"/></operator><literal type="number" pos:line="13" pos:column="21">1<pos:position pos:line="13" pos:column="22"/></literal></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt> <comment type="block" pos:line="13" pos:column="24">/* unknown at this point */</comment>

  <expr_stmt><expr><name pos:line="15" pos:column="3">data<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <name><name pos:line="15" pos:column="10">conn<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">data<pos:position pos:line="15" pos:column="20"/></name></name></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt> <comment type="block" pos:line="15" pos:column="22">/* there's the root struct */</comment>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">k<pos:position pos:line="16" pos:column="4"/></name><operator pos:line="16" pos:column="4">-&gt;<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="6">buf<pos:position pos:line="16" pos:column="9"/></name></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <name><name pos:line="16" pos:column="12">data<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">state<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">buffer<pos:position pos:line="16" pos:column="30"/></name></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">k<pos:position pos:line="17" pos:column="4"/></name><operator pos:line="17" pos:column="4">-&gt;<pos:position pos:line="17" pos:column="9"/></operator><name pos:line="17" pos:column="6">uploadbuf<pos:position pos:line="17" pos:column="15"/></name></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <name><name pos:line="17" pos:column="18">data<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">-&gt;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="24">state<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">.<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">uploadbuffer<pos:position pos:line="17" pos:column="42"/></name></name></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">k<pos:position pos:line="18" pos:column="4"/></name><operator pos:line="18" pos:column="4">-&gt;<pos:position pos:line="18" pos:column="9"/></operator><name pos:line="18" pos:column="6">maxfd<pos:position pos:line="18" pos:column="11"/></name></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><ternary><condition><expr><name><name pos:line="18" pos:column="15">conn<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">-&gt;<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="21">sockfd<pos:position pos:line="18" pos:column="27"/></name></name><operator pos:line="18" pos:column="27">&gt;<pos:position pos:line="18" pos:column="31"/></operator><name><name pos:line="18" pos:column="28">conn<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">-&gt;<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="34">writesockfd<pos:position pos:line="18" pos:column="45"/></name></name></expr>?<pos:position pos:line="18" pos:column="46"/></condition><then pos:line="18" pos:column="46">
              <expr><name><name pos:line="19" pos:column="15">conn<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">sockfd<pos:position pos:line="19" pos:column="27"/></name></name></expr></then><else pos:line="19" pos:column="27">:<expr><name><name pos:line="19" pos:column="28">conn<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">-&gt;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="34">writesockfd<pos:position pos:line="19" pos:column="45"/></name></name></expr></else></ternary><operator pos:line="19" pos:column="45">)<pos:position pos:line="19" pos:column="46"/></operator><operator pos:line="19" pos:column="46">+<pos:position pos:line="19" pos:column="47"/></operator><literal type="number" pos:line="19" pos:column="47">1<pos:position pos:line="19" pos:column="48"/></literal></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">k<pos:position pos:line="20" pos:column="4"/></name><operator pos:line="20" pos:column="4">-&gt;<pos:position pos:line="20" pos:column="9"/></operator><name pos:line="20" pos:column="6">hbufp<pos:position pos:line="20" pos:column="11"/></name></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name><name pos:line="20" pos:column="14">data<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">-&gt;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="20">state<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">.<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">headerbuff<pos:position pos:line="20" pos:column="36"/></name></name></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">Curl_pgrsTime<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">data<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="23">TIMER_PRETRANSFER<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">Curl_speedinit<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><name pos:line="23" pos:column="18">data<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="25" pos:column="3">Curl_pgrsSetUploadCounter<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">data<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="35">0<pos:position pos:line="25" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">Curl_pgrsSetDownloadCounter<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">data<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="37">0<pos:position pos:line="26" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>

  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><operator pos:line="28" pos:column="7">!<pos:position pos:line="28" pos:column="8"/></operator><name><name pos:line="28" pos:column="8">conn<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">bits<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">.<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="19">getheader<pos:position pos:line="28" pos:column="28"/></name></name></expr>)<pos:position pos:line="28" pos:column="29"/></condition><then pos:line="28" pos:column="29"> <block pos:line="28" pos:column="30">{
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">k<pos:position pos:line="29" pos:column="6"/></name><operator pos:line="29" pos:column="6">-&gt;<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="8">header<pos:position pos:line="29" pos:column="14"/></name></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="17">FALSE<pos:position pos:line="29" pos:column="22"/></name></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
    <if pos:line="30" pos:column="5">if<condition pos:line="30" pos:column="7">(<expr><name><name pos:line="30" pos:column="8">conn<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">size<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">&gt;<pos:position pos:line="30" pos:column="23"/></operator> <literal type="number" pos:line="30" pos:column="21">0<pos:position pos:line="30" pos:column="22"/></literal></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="7">Curl_pgrsSetDownloadSize<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><name pos:line="31" pos:column="32">data<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="38">conn<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">-&gt;<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="44">size<pos:position pos:line="31" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="33" pos:column="3">/* we want header and/or body, if neither then don't do this! */</comment>
  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name><name pos:line="34" pos:column="6">conn<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">bits<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">.<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">getheader<pos:position pos:line="34" pos:column="26"/></name></name> <operator pos:line="34" pos:column="27">||<pos:position pos:line="34" pos:column="29"/></operator> <operator pos:line="34" pos:column="30">!<pos:position pos:line="34" pos:column="31"/></operator><name><name pos:line="34" pos:column="31">data<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">-&gt;<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="37">set<pos:position pos:line="34" pos:column="40"/></name><operator pos:line="34" pos:column="40">.<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="41">no_body<pos:position pos:line="34" pos:column="48"/></name></name></expr>)<pos:position pos:line="34" pos:column="49"/></condition><then pos:line="34" pos:column="49"> <block pos:line="34" pos:column="50">{

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">FD_ZERO<pos:position pos:line="36" pos:column="12"/></name> <argument_list pos:line="36" pos:column="13">(<argument><expr><operator pos:line="36" pos:column="14">&amp;<pos:position pos:line="36" pos:column="19"/></operator><name><name pos:line="36" pos:column="15">k<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">-&gt;<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="18">readfd<pos:position pos:line="36" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt>               <comment type="block" pos:line="36" pos:column="41">/* clear it */</comment>
    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">(<expr><name><name pos:line="37" pos:column="8">conn<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">-&gt;<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="14">sockfd<pos:position pos:line="37" pos:column="20"/></name></name> <operator pos:line="37" pos:column="21">!=<pos:position pos:line="37" pos:column="23"/></operator> <operator pos:line="37" pos:column="24">-<pos:position pos:line="37" pos:column="25"/></operator><literal type="number" pos:line="37" pos:column="25">1<pos:position pos:line="37" pos:column="26"/></literal></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27"> <block pos:line="37" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="38" pos:column="7">FD_SET<pos:position pos:line="38" pos:column="13"/></name> <argument_list pos:line="38" pos:column="14">(<argument><expr><name><name pos:line="38" pos:column="15">conn<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">-&gt;<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="21">sockfd<pos:position pos:line="38" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="29">&amp;<pos:position pos:line="38" pos:column="34"/></operator><name><name pos:line="38" pos:column="30">k<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">-&gt;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="33">readfd<pos:position pos:line="38" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt> <comment type="block" pos:line="38" pos:column="42">/* read socket */</comment>
      <expr_stmt><expr><name><name pos:line="39" pos:column="7">k<pos:position pos:line="39" pos:column="8"/></name><operator pos:line="39" pos:column="8">-&gt;<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="10">keepon<pos:position pos:line="39" pos:column="16"/></name></name> <operator pos:line="39" pos:column="17">|=<pos:position pos:line="39" pos:column="19"/></operator> <name pos:line="39" pos:column="20">KEEP_READ<pos:position pos:line="39" pos:column="29"/></name></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">FD_ZERO<pos:position pos:line="42" pos:column="12"/></name> <argument_list pos:line="42" pos:column="13">(<argument><expr><operator pos:line="42" pos:column="14">&amp;<pos:position pos:line="42" pos:column="19"/></operator><name><name pos:line="42" pos:column="15">k<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">writefd<pos:position pos:line="42" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>              <comment type="block" pos:line="42" pos:column="41">/* clear it */</comment>
    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><name><name pos:line="43" pos:column="8">conn<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">writesockfd<pos:position pos:line="43" pos:column="25"/></name></name> <operator pos:line="43" pos:column="26">!=<pos:position pos:line="43" pos:column="28"/></operator> <operator pos:line="43" pos:column="29">-<pos:position pos:line="43" pos:column="30"/></operator><literal type="number" pos:line="43" pos:column="30">1<pos:position pos:line="43" pos:column="31"/></literal></expr>)<pos:position pos:line="43" pos:column="32"/></condition><then pos:line="43" pos:column="32"> <block pos:line="43" pos:column="33">{
      <comment type="block" pos:line="44" pos:column="7">/* HTTP 1.1 magic:

         Even if we require a 100-return code before uploading data, we might
         need to write data before that since the REQUEST may not have been
         finished sent off just yet.

         Thus, we must check if the request has been sent before we set the
         state info where we wait for the 100-return code
      */</comment>
      <if pos:line="53" pos:column="7">if <condition pos:line="53" pos:column="10">(<expr><name><name pos:line="53" pos:column="11">data<pos:position pos:line="53" pos:column="15"/></name><operator pos:line="53" pos:column="15">-&gt;<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="17">set<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">.<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="21">expect100header<pos:position pos:line="53" pos:column="36"/></name></name> <operator pos:line="53" pos:column="37">&amp;&amp;<pos:position pos:line="53" pos:column="47"/></operator>
          <operator pos:line="54" pos:column="11">(<pos:position pos:line="54" pos:column="12"/></operator><name><name pos:line="54" pos:column="12">conn<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">-&gt;<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="18">proto<pos:position pos:line="54" pos:column="23"/></name><operator pos:line="54" pos:column="23">.<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="24">http<pos:position pos:line="54" pos:column="28"/></name><operator pos:line="54" pos:column="28">-&gt;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="30">sending<pos:position pos:line="54" pos:column="37"/></name></name> <operator pos:line="54" pos:column="38">==<pos:position pos:line="54" pos:column="40"/></operator> <name pos:line="54" pos:column="41">HTTPSEND_BODY<pos:position pos:line="54" pos:column="54"/></name><operator pos:line="54" pos:column="54">)<pos:position pos:line="54" pos:column="55"/></operator></expr>)<pos:position pos:line="54" pos:column="56"/></condition><then pos:line="54" pos:column="56"> <block pos:line="54" pos:column="57">{
        <comment type="block" pos:line="55" pos:column="9">/* wait with write until we either got 100-continue or a timeout */</comment>
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">k<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">write_after_100_header<pos:position pos:line="56" pos:column="34"/></name></name> <operator pos:line="56" pos:column="35">=<pos:position pos:line="56" pos:column="36"/></operator> <name pos:line="56" pos:column="37">TRUE<pos:position pos:line="56" pos:column="41"/></name></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="57" pos:column="9">k<pos:position pos:line="57" pos:column="10"/></name><operator pos:line="57" pos:column="10">-&gt;<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="12">start100<pos:position pos:line="57" pos:column="20"/></name></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <name><name pos:line="57" pos:column="23">k<pos:position pos:line="57" pos:column="24"/></name><operator pos:line="57" pos:column="24">-&gt;<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="26">start<pos:position pos:line="57" pos:column="31"/></name></name></expr>;<pos:position pos:line="57" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="58" pos:column="8"/></block></then>
      <else pos:line="59" pos:column="7">else <block pos:line="59" pos:column="12">{
        <if pos:line="60" pos:column="9">if<condition pos:line="60" pos:column="11">(<expr><name><name pos:line="60" pos:column="12">data<pos:position pos:line="60" pos:column="16"/></name><operator pos:line="60" pos:column="16">-&gt;<pos:position pos:line="60" pos:column="21"/></operator><name pos:line="60" pos:column="18">set<pos:position pos:line="60" pos:column="21"/></name><operator pos:line="60" pos:column="21">.<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="22">expect100header<pos:position pos:line="60" pos:column="37"/></name></name></expr>)<pos:position pos:line="60" pos:column="38"/></condition><then pos:line="60" pos:column="38">
          <comment type="block" pos:line="61" pos:column="11">/* when we've sent off the rest of the headers, we must await a
             100-continue */</comment>
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="63" pos:column="11">k<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">-&gt;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="14">wait100_after_headers<pos:position pos:line="63" pos:column="35"/></name></name> <operator pos:line="63" pos:column="36">=<pos:position pos:line="63" pos:column="37"/></operator> <name pos:line="63" pos:column="38">TRUE<pos:position pos:line="63" pos:column="42"/></name></expr>;<pos:position pos:line="63" pos:column="43"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">FD_SET<pos:position pos:line="64" pos:column="15"/></name> <argument_list pos:line="64" pos:column="16">(<argument><expr><name><name pos:line="64" pos:column="17">conn<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">-&gt;<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="23">writesockfd<pos:position pos:line="64" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="36">&amp;<pos:position pos:line="64" pos:column="41"/></operator><name><name pos:line="64" pos:column="37">k<pos:position pos:line="64" pos:column="38"/></name><operator pos:line="64" pos:column="38">-&gt;<pos:position pos:line="64" pos:column="43"/></operator><name pos:line="64" pos:column="40">writefd<pos:position pos:line="64" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="49"/></expr_stmt> <comment type="block" pos:line="64" pos:column="50">/* write socket */</comment>
        <expr_stmt><expr><name><name pos:line="65" pos:column="9">k<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">keepon<pos:position pos:line="65" pos:column="18"/></name></name> <operator pos:line="65" pos:column="19">|=<pos:position pos:line="65" pos:column="21"/></operator> <name pos:line="65" pos:column="22">KEEP_WRITE<pos:position pos:line="65" pos:column="32"/></name></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="66" pos:column="8"/></block></else></if>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="69" pos:column="5">/* get these in backup variables to be able to restore them on each lap in
       the select() loop */</comment>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">k<pos:position pos:line="71" pos:column="6"/></name><operator pos:line="71" pos:column="6">-&gt;<pos:position pos:line="71" pos:column="11"/></operator><name pos:line="71" pos:column="8">rkeepfd<pos:position pos:line="71" pos:column="15"/></name></name> <operator pos:line="71" pos:column="16">=<pos:position pos:line="71" pos:column="17"/></operator> <name><name pos:line="71" pos:column="18">k<pos:position pos:line="71" pos:column="19"/></name><operator pos:line="71" pos:column="19">-&gt;<pos:position pos:line="71" pos:column="24"/></operator><name pos:line="71" pos:column="21">readfd<pos:position pos:line="71" pos:column="27"/></name></name></expr>;<pos:position pos:line="71" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="72" pos:column="5">k<pos:position pos:line="72" pos:column="6"/></name><operator pos:line="72" pos:column="6">-&gt;<pos:position pos:line="72" pos:column="11"/></operator><name pos:line="72" pos:column="8">wkeepfd<pos:position pos:line="72" pos:column="15"/></name></name> <operator pos:line="72" pos:column="16">=<pos:position pos:line="72" pos:column="17"/></operator> <name><name pos:line="72" pos:column="18">k<pos:position pos:line="72" pos:column="19"/></name><operator pos:line="72" pos:column="19">-&gt;<pos:position pos:line="72" pos:column="24"/></operator><name pos:line="72" pos:column="21">writefd<pos:position pos:line="72" pos:column="28"/></name></name></expr>;<pos:position pos:line="72" pos:column="29"/></expr_stmt>

  }<pos:position pos:line="74" pos:column="4"/></block></then></if>

  <return pos:line="76" pos:column="3">return <expr><name pos:line="76" pos:column="10">CURLE_OK<pos:position pos:line="76" pos:column="18"/></name></expr>;<pos:position pos:line="76" pos:column="19"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
