<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_221_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_ConnectHTTPProxyTunnel<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">connectdata<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">conn<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="2" pos:column="38">int<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">tunnelsocket<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="3" pos:column="38">char<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">hostname<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="54">int<pos:position pos:line="3" pos:column="57"/></name></type> <name pos:line="3" pos:column="58">remote_port<pos:position pos:line="3" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="70"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">httperror<pos:position pos:line="5" pos:column="16"/></name><init pos:line="5" pos:column="16">=<expr><literal type="number" pos:line="5" pos:column="17">0<pos:position pos:line="5" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">subversion<pos:position pos:line="6" pos:column="17"/></name><init pos:line="6" pos:column="17">=<expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SessionHandle<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name><init pos:line="7" pos:column="29">=<expr><name><name pos:line="7" pos:column="30">conn<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">data<pos:position pos:line="7" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CURLcode<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">result<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">res<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">nread<pos:position pos:line="11" pos:column="12"/></name></decl>;<pos:position pos:line="11" pos:column="13"/></decl_stmt>   <comment type="block" pos:line="11" pos:column="16">/* total size read */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">perline<pos:position pos:line="12" pos:column="14"/></name></decl>;<pos:position pos:line="12" pos:column="15"/></decl_stmt> <comment type="block" pos:line="12" pos:column="16">/* count bytes per line */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">bool<pos:position pos:line="13" pos:column="7"/></name></type> <name pos:line="13" pos:column="8">keepon<pos:position pos:line="13" pos:column="14"/></name><init pos:line="13" pos:column="14">=<expr><name pos:line="13" pos:column="15">TRUE<pos:position pos:line="13" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">ssize_t<pos:position pos:line="14" pos:column="10"/></name></type> <name pos:line="14" pos:column="11">gotbytes<pos:position pos:line="14" pos:column="19"/></name></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">ptr<pos:position pos:line="15" pos:column="12"/></name></decl>;<pos:position pos:line="15" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">timeout<pos:position pos:line="16" pos:column="14"/></name> <init pos:line="16" pos:column="15">= <expr><literal type="number" pos:line="16" pos:column="17">3600<pos:position pos:line="16" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="22"/></decl_stmt> <comment type="block" pos:line="16" pos:column="23">/* default timeout in seconds */</comment>
  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">timeval<pos:position pos:line="17" pos:column="17"/></name></name></type> <name pos:line="17" pos:column="18">interval<pos:position pos:line="17" pos:column="26"/></name></decl>;<pos:position pos:line="17" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">fd_set<pos:position pos:line="18" pos:column="9"/></name></type> <name pos:line="18" pos:column="10">rkeepfd<pos:position pos:line="18" pos:column="17"/></name></decl>;<pos:position pos:line="18" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">fd_set<pos:position pos:line="19" pos:column="9"/></name></type> <name pos:line="19" pos:column="10">readfd<pos:position pos:line="19" pos:column="16"/></name></decl>;<pos:position pos:line="19" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name> <modifier pos:line="20" pos:column="8">*<pos:position pos:line="20" pos:column="9"/></modifier></type><name pos:line="20" pos:column="9">line_start<pos:position pos:line="20" pos:column="19"/></name></decl>;<pos:position pos:line="20" pos:column="20"/></decl_stmt>

<cpp:define pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">define<pos:position pos:line="22" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="22" pos:column="9">SELECT_OK<pos:position pos:line="22" pos:column="18"/></name></cpp:macro>      <cpp:value pos:line="22" pos:column="24">0<pos:position pos:line="22" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">define<pos:position pos:line="23" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="23" pos:column="9">SELECT_ERROR<pos:position pos:line="23" pos:column="21"/></name></cpp:macro>   <cpp:value pos:line="23" pos:column="24">1<pos:position pos:line="23" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">define<pos:position pos:line="24" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="24" pos:column="9">SELECT_TIMEOUT<pos:position pos:line="24" pos:column="23"/></name></cpp:macro> <cpp:value pos:line="24" pos:column="24">2<pos:position pos:line="24" pos:column="25"/></cpp:value></cpp:define>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">int<pos:position pos:line="25" pos:column="6"/></name></type> <name pos:line="25" pos:column="7">error<pos:position pos:line="25" pos:column="12"/></name> <init pos:line="25" pos:column="13">= <expr><name pos:line="25" pos:column="15">SELECT_OK<pos:position pos:line="25" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="27" pos:column="3">infof<pos:position pos:line="27" pos:column="8"/></name><argument_list pos:line="27" pos:column="8">(<argument><expr><name pos:line="27" pos:column="9">data<pos:position pos:line="27" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="15">"Establish HTTP proxy tunnel to %s:%d\n"<pos:position pos:line="27" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="57">hostname<pos:position pos:line="27" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="67">remote_port<pos:position pos:line="27" pos:column="78"/></name></expr></argument>)<pos:position pos:line="27" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="80"/></expr_stmt>

  <comment type="block" pos:line="29" pos:column="3">/* OK, now send the connect request to the proxy */</comment>
  <expr_stmt><expr><name pos:line="30" pos:column="3">result<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator>
    <call><name pos:line="31" pos:column="5">Curl_sendf<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">tunnelsocket<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">conn<pos:position pos:line="31" pos:column="34"/></name></expr></argument>,
               <argument><expr><literal type="string" pos:line="32" pos:column="16">"CONNECT %s:%d HTTP/1.0\015\012"<pos:position pos:line="32" pos:column="48"/></literal>
               <literal type="string" pos:line="33" pos:column="16">"%s"<pos:position pos:line="33" pos:column="20"/></literal>
               <literal type="string" pos:line="34" pos:column="16">"%s"<pos:position pos:line="34" pos:column="20"/></literal>
               <literal type="string" pos:line="35" pos:column="16">"\r\n"<pos:position pos:line="35" pos:column="22"/></literal></expr></argument>,
               <argument><expr><name pos:line="36" pos:column="16">hostname<pos:position pos:line="36" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="26">remote_port<pos:position pos:line="36" pos:column="37"/></name></expr></argument>,
               <argument><expr><ternary><condition><expr><operator pos:line="37" pos:column="16">(<pos:position pos:line="37" pos:column="17"/></operator><name><name pos:line="37" pos:column="17">conn<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">-&gt;<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="23">bits<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">.<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="28">proxy_user_passwd<pos:position pos:line="37" pos:column="45"/></name></name><operator pos:line="37" pos:column="45">)<pos:position pos:line="37" pos:column="46"/></operator></expr>?<pos:position pos:line="37" pos:column="47"/></condition><then><expr><name><name pos:line="37" pos:column="47">conn<pos:position pos:line="37" pos:column="51"/></name><operator pos:line="37" pos:column="51">-&gt;<pos:position pos:line="37" pos:column="56"/></operator><name pos:line="37" pos:column="53">allocptr<pos:position pos:line="37" pos:column="61"/></name><operator pos:line="37" pos:column="61">.<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="62">proxyuserpwd<pos:position pos:line="37" pos:column="74"/></name></name></expr></then><else pos:line="37" pos:column="74">:<expr><literal type="string" pos:line="37" pos:column="75">""<pos:position pos:line="37" pos:column="77"/></literal></expr></else></ternary></expr></argument>,
               <argument><expr><operator pos:line="38" pos:column="16">(<pos:position pos:line="38" pos:column="17"/></operator><ternary><condition><expr><name><name pos:line="38" pos:column="17">data<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">-&gt;<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="23">set<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">.<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">useragent<pos:position pos:line="38" pos:column="36"/></name></name></expr>?<pos:position pos:line="38" pos:column="37"/></condition><then><expr><name><name pos:line="38" pos:column="37">conn<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">-&gt;<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="43">allocptr<pos:position pos:line="38" pos:column="51"/></name><operator pos:line="38" pos:column="51">.<pos:position pos:line="38" pos:column="52"/></operator><name pos:line="38" pos:column="52">uagent<pos:position pos:line="38" pos:column="58"/></name></name></expr></then><else pos:line="38" pos:column="58">:<expr><literal type="string" pos:line="38" pos:column="59">""<pos:position pos:line="38" pos:column="61"/></literal></expr></else></ternary><operator pos:line="38" pos:column="61">)<pos:position pos:line="38" pos:column="62"/></operator></expr></argument>
               )<pos:position pos:line="39" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="18"/></expr_stmt>
  <if pos:line="40" pos:column="3">if<condition pos:line="40" pos:column="5">(<expr><name pos:line="40" pos:column="6">result<pos:position pos:line="40" pos:column="12"/></name></expr>)<pos:position pos:line="40" pos:column="13"/></condition><then pos:line="40" pos:column="13"> <block pos:line="40" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">failf<pos:position pos:line="41" pos:column="10"/></name><argument_list pos:line="41" pos:column="10">(<argument><expr><name pos:line="41" pos:column="11">data<pos:position pos:line="41" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="17">"Failed sending CONNECT to proxy"<pos:position pos:line="41" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="52"/></expr_stmt>
    <return pos:line="42" pos:column="5">return <expr><name pos:line="42" pos:column="12">result<pos:position pos:line="42" pos:column="18"/></name></expr>;<pos:position pos:line="42" pos:column="19"/></return>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="45" pos:column="3">/* Now, read the full reply we get from the proxy */</comment>


  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><name><name pos:line="48" pos:column="6">data<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">-&gt;<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="12">set<pos:position pos:line="48" pos:column="15"/></name><operator pos:line="48" pos:column="15">.<pos:position pos:line="48" pos:column="16"/></operator><name pos:line="48" pos:column="16">timeout<pos:position pos:line="48" pos:column="23"/></name></name></expr>)<pos:position pos:line="48" pos:column="24"/></condition><then pos:line="48" pos:column="24"> <block pos:line="48" pos:column="25">{
    <comment type="block" pos:line="49" pos:column="5">/* if timeout is requested, find out how much remaining time we have */</comment>
    <expr_stmt><expr><name pos:line="50" pos:column="5">timeout<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <name><name pos:line="50" pos:column="15">data<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">-&gt;<pos:position pos:line="50" pos:column="24"/></operator><name pos:line="50" pos:column="21">set<pos:position pos:line="50" pos:column="24"/></name><operator pos:line="50" pos:column="24">.<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">timeout<pos:position pos:line="50" pos:column="32"/></name></name> <operator pos:line="50" pos:column="33">-<pos:position pos:line="50" pos:column="34"/></operator> <comment type="block" pos:line="50" pos:column="35">/* timeout time */</comment>
      <call><name pos:line="51" pos:column="7">Curl_tvdiff<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><call><name pos:line="51" pos:column="19">Curl_tvnow<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">()<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="33">conn<pos:position pos:line="51" pos:column="37"/></name><operator pos:line="51" pos:column="37">-&gt;<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="39">now<pos:position pos:line="51" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="43"/></argument_list></call><operator pos:line="51" pos:column="43">/<pos:position pos:line="51" pos:column="44"/></operator><literal type="number" pos:line="51" pos:column="44">1000<pos:position pos:line="51" pos:column="48"/></literal></expr>;<pos:position pos:line="51" pos:column="49"/></expr_stmt> <comment type="block" pos:line="51" pos:column="50">/* spent time */</comment>
    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">(<expr><name pos:line="52" pos:column="8">timeout<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">&lt;=<pos:position pos:line="52" pos:column="21"/></operator><literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal></expr> )<pos:position pos:line="52" pos:column="21"/></condition><then pos:line="52" pos:column="21"> <block pos:line="52" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">failf<pos:position pos:line="53" pos:column="12"/></name><argument_list pos:line="53" pos:column="12">(<argument><expr><name pos:line="53" pos:column="13">data<pos:position pos:line="53" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="19">"Transfer aborted due to timeout"<pos:position pos:line="53" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="54"/></expr_stmt>
      <return pos:line="54" pos:column="7">return <expr><operator pos:line="54" pos:column="14">-<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="15">SELECT_TIMEOUT<pos:position pos:line="54" pos:column="29"/></name></expr>;<pos:position pos:line="54" pos:column="30"/></return> <comment type="block" pos:line="54" pos:column="31">/* already too little time */</comment>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="58" pos:column="3">FD_ZERO<pos:position pos:line="58" pos:column="10"/></name> <argument_list pos:line="58" pos:column="11">(<argument><expr><operator pos:line="58" pos:column="12">&amp;<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="13">readfd<pos:position pos:line="58" pos:column="19"/></name></expr></argument>)<pos:position pos:line="58" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="21"/></expr_stmt>		<comment type="block" pos:line="58" pos:column="33">/* clear it */</comment>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">FD_SET<pos:position pos:line="59" pos:column="9"/></name> <argument_list pos:line="59" pos:column="10">(<argument><expr><name pos:line="59" pos:column="11">tunnelsocket<pos:position pos:line="59" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="25">&amp;<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="26">readfd<pos:position pos:line="59" pos:column="32"/></name></expr></argument>)<pos:position pos:line="59" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="34"/></expr_stmt>     <comment type="block" pos:line="59" pos:column="39">/* read socket */</comment>

  <comment type="block" pos:line="61" pos:column="3">/* get this in a backup variable to be able to restore it on each lap in the
     select() loop */</comment>
  <expr_stmt><expr><name pos:line="63" pos:column="3">rkeepfd<pos:position pos:line="63" pos:column="10"/></name> <operator pos:line="63" pos:column="11">=<pos:position pos:line="63" pos:column="12"/></operator> <name pos:line="63" pos:column="13">readfd<pos:position pos:line="63" pos:column="19"/></name></expr>;<pos:position pos:line="63" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="65" pos:column="3">ptr<pos:position pos:line="65" pos:column="6"/></name><operator pos:line="65" pos:column="6">=<pos:position pos:line="65" pos:column="7"/></operator><name><name pos:line="65" pos:column="7">data<pos:position pos:line="65" pos:column="11"/></name><operator pos:line="65" pos:column="11">-&gt;<pos:position pos:line="65" pos:column="16"/></operator><name pos:line="65" pos:column="13">state<pos:position pos:line="65" pos:column="18"/></name><operator pos:line="65" pos:column="18">.<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="19">buffer<pos:position pos:line="65" pos:column="25"/></name></name></expr>;<pos:position pos:line="65" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="66" pos:column="3">line_start<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <name pos:line="66" pos:column="16">ptr<pos:position pos:line="66" pos:column="19"/></name></expr>;<pos:position pos:line="66" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="68" pos:column="3">nread<pos:position pos:line="68" pos:column="8"/></name><operator pos:line="68" pos:column="8">=<pos:position pos:line="68" pos:column="9"/></operator><literal type="number" pos:line="68" pos:column="9">0<pos:position pos:line="68" pos:column="10"/></literal></expr>;<pos:position pos:line="68" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="69" pos:column="3">perline<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">=<pos:position pos:line="69" pos:column="11"/></operator><literal type="number" pos:line="69" pos:column="11">0<pos:position pos:line="69" pos:column="12"/></literal></expr>;<pos:position pos:line="69" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="70" pos:column="3">keepon<pos:position pos:line="70" pos:column="9"/></name><operator pos:line="70" pos:column="9">=<pos:position pos:line="70" pos:column="10"/></operator><name pos:line="70" pos:column="10">TRUE<pos:position pos:line="70" pos:column="14"/></name></expr>;<pos:position pos:line="70" pos:column="15"/></expr_stmt>

  <while pos:line="72" pos:column="3">while<condition pos:line="72" pos:column="8">(<expr><operator pos:line="72" pos:column="9">(<pos:position pos:line="72" pos:column="10"/></operator><name pos:line="72" pos:column="10">nread<pos:position pos:line="72" pos:column="15"/></name><operator pos:line="72" pos:column="15">&lt;<pos:position pos:line="72" pos:column="19"/></operator><name pos:line="72" pos:column="16">BUFSIZE<pos:position pos:line="72" pos:column="23"/></name><operator pos:line="72" pos:column="23">)<pos:position pos:line="72" pos:column="24"/></operator> <operator pos:line="72" pos:column="25">&amp;&amp;<pos:position pos:line="72" pos:column="35"/></operator> <operator pos:line="72" pos:column="28">(<pos:position pos:line="72" pos:column="29"/></operator><name pos:line="72" pos:column="29">keepon<pos:position pos:line="72" pos:column="35"/></name> <operator pos:line="72" pos:column="36">&amp;&amp;<pos:position pos:line="72" pos:column="46"/></operator> <operator pos:line="72" pos:column="39">!<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="40">error<pos:position pos:line="72" pos:column="45"/></name><operator pos:line="72" pos:column="45">)<pos:position pos:line="72" pos:column="46"/></operator></expr>)<pos:position pos:line="72" pos:column="47"/></condition> <block pos:line="72" pos:column="48">{
    <expr_stmt><expr><name pos:line="73" pos:column="5">readfd<pos:position pos:line="73" pos:column="11"/></name> <operator pos:line="73" pos:column="12">=<pos:position pos:line="73" pos:column="13"/></operator> <name pos:line="73" pos:column="14">rkeepfd<pos:position pos:line="73" pos:column="21"/></name></expr>;<pos:position pos:line="73" pos:column="22"/></expr_stmt>		   <comment type="block" pos:line="73" pos:column="36">/* set every lap */</comment>
    <expr_stmt><expr><name><name pos:line="74" pos:column="5">interval<pos:position pos:line="74" pos:column="13"/></name><operator pos:line="74" pos:column="13">.<pos:position pos:line="74" pos:column="14"/></operator><name pos:line="74" pos:column="14">tv_sec<pos:position pos:line="74" pos:column="20"/></name></name> <operator pos:line="74" pos:column="21">=<pos:position pos:line="74" pos:column="22"/></operator> <name pos:line="74" pos:column="23">timeout<pos:position pos:line="74" pos:column="30"/></name></expr>;<pos:position pos:line="74" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="75" pos:column="5">interval<pos:position pos:line="75" pos:column="13"/></name><operator pos:line="75" pos:column="13">.<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="14">tv_usec<pos:position pos:line="75" pos:column="21"/></name></name> <operator pos:line="75" pos:column="22">=<pos:position pos:line="75" pos:column="23"/></operator> <literal type="number" pos:line="75" pos:column="24">0<pos:position pos:line="75" pos:column="25"/></literal></expr>;<pos:position pos:line="75" pos:column="26"/></expr_stmt>

    <switch pos:line="77" pos:column="5">switch <condition pos:line="77" pos:column="12">(<expr><call><name pos:line="77" pos:column="13">select<pos:position pos:line="77" pos:column="19"/></name> <argument_list pos:line="77" pos:column="20">(<argument><expr><name pos:line="77" pos:column="21">tunnelsocket<pos:position pos:line="77" pos:column="33"/></name><operator pos:line="77" pos:column="33">+<pos:position pos:line="77" pos:column="34"/></operator><literal type="number" pos:line="77" pos:column="34">1<pos:position pos:line="77" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="77" pos:column="37">&amp;<pos:position pos:line="77" pos:column="42"/></operator><name pos:line="77" pos:column="38">readfd<pos:position pos:line="77" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="46">NULL<pos:position pos:line="77" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="52">NULL<pos:position pos:line="77" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="58">&amp;<pos:position pos:line="77" pos:column="63"/></operator><name pos:line="77" pos:column="59">interval<pos:position pos:line="77" pos:column="67"/></name></expr></argument>)<pos:position pos:line="77" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="69"/></condition> <block pos:line="77" pos:column="70">{
    <case pos:line="78" pos:column="5">case <expr><operator pos:line="78" pos:column="10">-<pos:position pos:line="78" pos:column="11"/></operator><literal type="number" pos:line="78" pos:column="11">1<pos:position pos:line="78" pos:column="12"/></literal></expr>:<pos:position pos:line="78" pos:column="13"/></case> <comment type="block" pos:line="78" pos:column="14">/* select() error, stop reading */</comment>
      <expr_stmt><expr><name pos:line="79" pos:column="7">error<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">=<pos:position pos:line="79" pos:column="14"/></operator> <name pos:line="79" pos:column="15">SELECT_ERROR<pos:position pos:line="79" pos:column="27"/></name></expr>;<pos:position pos:line="79" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="80" pos:column="7">failf<pos:position pos:line="80" pos:column="12"/></name><argument_list pos:line="80" pos:column="12">(<argument><expr><name pos:line="80" pos:column="13">data<pos:position pos:line="80" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="19">"Transfer aborted due to select() error"<pos:position pos:line="80" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="61"/></expr_stmt>
      <break pos:line="81" pos:column="7">break;<pos:position pos:line="81" pos:column="13"/></break>
    <case pos:line="82" pos:column="5">case <expr><literal type="number" pos:line="82" pos:column="10">0<pos:position pos:line="82" pos:column="11"/></literal></expr>:<pos:position pos:line="82" pos:column="12"/></case> <comment type="block" pos:line="82" pos:column="13">/* timeout */</comment>
      <expr_stmt><expr><name pos:line="83" pos:column="7">error<pos:position pos:line="83" pos:column="12"/></name> <operator pos:line="83" pos:column="13">=<pos:position pos:line="83" pos:column="14"/></operator> <name pos:line="83" pos:column="15">SELECT_TIMEOUT<pos:position pos:line="83" pos:column="29"/></name></expr>;<pos:position pos:line="83" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">failf<pos:position pos:line="84" pos:column="12"/></name><argument_list pos:line="84" pos:column="12">(<argument><expr><name pos:line="84" pos:column="13">data<pos:position pos:line="84" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="19">"Transfer aborted due to timeout"<pos:position pos:line="84" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="54"/></expr_stmt>
      <break pos:line="85" pos:column="7">break;<pos:position pos:line="85" pos:column="13"/></break>
    <default pos:line="86" pos:column="5">default:<pos:position pos:line="86" pos:column="13"/></default>
      <comment type="block" pos:line="87" pos:column="7">/*
       * This code previously didn't use the kerberos sec_read() code
       * to read, but when we use Curl_read() it may do so. Do confirm
       * that this is still ok and then remove this comment!
       */</comment>
      <expr_stmt><expr><name pos:line="92" pos:column="7">res<pos:position pos:line="92" pos:column="10"/></name><operator pos:line="92" pos:column="10">=<pos:position pos:line="92" pos:column="11"/></operator> <call><name pos:line="92" pos:column="12">Curl_read<pos:position pos:line="92" pos:column="21"/></name><argument_list pos:line="92" pos:column="21">(<argument><expr><name pos:line="92" pos:column="22">conn<pos:position pos:line="92" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="28">tunnelsocket<pos:position pos:line="92" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="42">ptr<pos:position pos:line="92" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="47">BUFSIZE<pos:position pos:line="92" pos:column="54"/></name><operator pos:line="92" pos:column="54">-<pos:position pos:line="92" pos:column="55"/></operator><name pos:line="92" pos:column="55">nread<pos:position pos:line="92" pos:column="60"/></name></expr></argument>,
                     <argument><expr><operator pos:line="93" pos:column="22">&amp;<pos:position pos:line="93" pos:column="27"/></operator><name pos:line="93" pos:column="23">gotbytes<pos:position pos:line="93" pos:column="31"/></name></expr></argument>)<pos:position pos:line="93" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="33"/></expr_stmt>
      <if pos:line="94" pos:column="7">if<condition pos:line="94" pos:column="9">(<expr><name pos:line="94" pos:column="10">res<pos:position pos:line="94" pos:column="13"/></name><operator pos:line="94" pos:column="13">&lt;<pos:position pos:line="94" pos:column="17"/></operator> <literal type="number" pos:line="94" pos:column="15">0<pos:position pos:line="94" pos:column="16"/></literal></expr>)<pos:position pos:line="94" pos:column="17"/></condition><then pos:line="94" pos:column="17">
        <comment type="block" pos:line="95" pos:column="9">/* EWOULDBLOCK */</comment>
        <block type="pseudo"><continue pos:line="96" pos:column="9">continue;<pos:position pos:line="96" pos:column="18"/></continue></block></then> <comment type="block" pos:line="96" pos:column="19">/* go loop yourself */</comment>
      <elseif pos:line="97" pos:column="7">else <if pos:line="97" pos:column="12">if<condition pos:line="97" pos:column="14">(<expr><name pos:line="97" pos:column="15">res<pos:position pos:line="97" pos:column="18"/></name></expr>)<pos:position pos:line="97" pos:column="19"/></condition><then pos:line="97" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="98" pos:column="9">keepon<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">=<pos:position pos:line="98" pos:column="17"/></operator> <name pos:line="98" pos:column="18">FALSE<pos:position pos:line="98" pos:column="23"/></name></expr>;<pos:position pos:line="98" pos:column="24"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="99" pos:column="7">else <if pos:line="99" pos:column="12">if<condition pos:line="99" pos:column="14">(<expr><name pos:line="99" pos:column="15">gotbytes<pos:position pos:line="99" pos:column="23"/></name> <operator pos:line="99" pos:column="24">&lt;=<pos:position pos:line="99" pos:column="29"/></operator> <literal type="number" pos:line="99" pos:column="27">0<pos:position pos:line="99" pos:column="28"/></literal></expr>)<pos:position pos:line="99" pos:column="29"/></condition><then pos:line="99" pos:column="29"> <block pos:line="99" pos:column="30">{
        <expr_stmt><expr><name pos:line="100" pos:column="9">keepon<pos:position pos:line="100" pos:column="15"/></name> <operator pos:line="100" pos:column="16">=<pos:position pos:line="100" pos:column="17"/></operator> <name pos:line="100" pos:column="18">FALSE<pos:position pos:line="100" pos:column="23"/></name></expr>;<pos:position pos:line="100" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="101" pos:column="9">error<pos:position pos:line="101" pos:column="14"/></name> <operator pos:line="101" pos:column="15">=<pos:position pos:line="101" pos:column="16"/></operator> <name pos:line="101" pos:column="17">SELECT_ERROR<pos:position pos:line="101" pos:column="29"/></name></expr>;<pos:position pos:line="101" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">failf<pos:position pos:line="102" pos:column="14"/></name><argument_list pos:line="102" pos:column="14">(<argument><expr><name pos:line="102" pos:column="15">data<pos:position pos:line="102" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="21">"Connection aborted"<pos:position pos:line="102" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="43"/></expr_stmt>
      }<pos:position pos:line="103" pos:column="8"/></block></then></if></elseif>
      <else pos:line="104" pos:column="7">else <block pos:line="104" pos:column="12">{
        <comment type="block" pos:line="105" pos:column="9">/* we got a whole chunk of data, which can be anything from one
         * byte to a set of lines and possibly just a piece of the last
         * line */</comment>
        <decl_stmt><decl><type><name pos:line="108" pos:column="9">int<pos:position pos:line="108" pos:column="12"/></name></type> <name pos:line="108" pos:column="13">i<pos:position pos:line="108" pos:column="14"/></name></decl>;<pos:position pos:line="108" pos:column="15"/></decl_stmt>

        <expr_stmt><expr><name pos:line="110" pos:column="9">nread<pos:position pos:line="110" pos:column="14"/></name> <operator pos:line="110" pos:column="15">+=<pos:position pos:line="110" pos:column="17"/></operator> <name pos:line="110" pos:column="18">gotbytes<pos:position pos:line="110" pos:column="26"/></name></expr>;<pos:position pos:line="110" pos:column="27"/></expr_stmt>
        <for pos:line="111" pos:column="9">for<control pos:line="111" pos:column="12">(<init><expr><name pos:line="111" pos:column="13">i<pos:position pos:line="111" pos:column="14"/></name> <operator pos:line="111" pos:column="15">=<pos:position pos:line="111" pos:column="16"/></operator> <literal type="number" pos:line="111" pos:column="17">0<pos:position pos:line="111" pos:column="18"/></literal></expr>;<pos:position pos:line="111" pos:column="19"/></init> <condition><expr><name pos:line="111" pos:column="20">i<pos:position pos:line="111" pos:column="21"/></name> <operator pos:line="111" pos:column="22">&lt;<pos:position pos:line="111" pos:column="26"/></operator> <name pos:line="111" pos:column="24">gotbytes<pos:position pos:line="111" pos:column="32"/></name></expr>;<pos:position pos:line="111" pos:column="33"/></condition> <incr><expr><name pos:line="111" pos:column="34">ptr<pos:position pos:line="111" pos:column="37"/></name><operator pos:line="111" pos:column="37">++<pos:position pos:line="111" pos:column="39"/></operator></expr><operator pos:line="111" pos:column="39">,<pos:position pos:line="111" pos:column="40"/></operator> <expr><name pos:line="111" pos:column="41">i<pos:position pos:line="111" pos:column="42"/></name><operator pos:line="111" pos:column="42">++<pos:position pos:line="111" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="111" pos:column="45"/></control> <block pos:line="111" pos:column="46">{
          <expr_stmt><expr><name pos:line="112" pos:column="11">perline<pos:position pos:line="112" pos:column="18"/></name><operator pos:line="112" pos:column="18">++<pos:position pos:line="112" pos:column="20"/></operator></expr>;<pos:position pos:line="112" pos:column="21"/></expr_stmt> <comment type="block" pos:line="112" pos:column="22">/* amount of bytes in this line so far */</comment>
          <if pos:line="113" pos:column="11">if<condition pos:line="113" pos:column="13">(<expr><operator pos:line="113" pos:column="14">*<pos:position pos:line="113" pos:column="15"/></operator><name pos:line="113" pos:column="15">ptr<pos:position pos:line="113" pos:column="18"/></name><operator pos:line="113" pos:column="18">==<pos:position pos:line="113" pos:column="20"/></operator><literal type="char" pos:line="113" pos:column="20">'\n'<pos:position pos:line="113" pos:column="24"/></literal></expr>)<pos:position pos:line="113" pos:column="25"/></condition><then pos:line="113" pos:column="25"> <block pos:line="113" pos:column="26">{
            <comment type="block" pos:line="114" pos:column="13">/* a newline is CRLF in ftp-talk, so the CR is ignored as
               the line isn't really terminated until the LF comes */</comment>

            <comment type="block" pos:line="117" pos:column="13">/* output debug output if that is requested */</comment>
            <if pos:line="118" pos:column="13">if<condition pos:line="118" pos:column="15">(<expr><name><name pos:line="118" pos:column="16">data<pos:position pos:line="118" pos:column="20"/></name><operator pos:line="118" pos:column="20">-&gt;<pos:position pos:line="118" pos:column="25"/></operator><name pos:line="118" pos:column="22">set<pos:position pos:line="118" pos:column="25"/></name><operator pos:line="118" pos:column="25">.<pos:position pos:line="118" pos:column="26"/></operator><name pos:line="118" pos:column="26">verbose<pos:position pos:line="118" pos:column="33"/></name></name></expr>)<pos:position pos:line="118" pos:column="34"/></condition><then pos:line="118" pos:column="34">
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="119" pos:column="15">Curl_debug<pos:position pos:line="119" pos:column="25"/></name><argument_list pos:line="119" pos:column="25">(<argument><expr><name pos:line="119" pos:column="26">data<pos:position pos:line="119" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="32">CURLINFO_DATA_IN<pos:position pos:line="119" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="50">line_start<pos:position pos:line="119" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="62">perline<pos:position pos:line="119" pos:column="69"/></name></expr></argument>)<pos:position pos:line="119" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="71"/></expr_stmt></block></then></if>
            
            <if pos:line="121" pos:column="13">if<condition pos:line="121" pos:column="15">(<expr><literal type="char" pos:line="121" pos:column="16">'\r'<pos:position pos:line="121" pos:column="20"/></literal> <operator pos:line="121" pos:column="21">==<pos:position pos:line="121" pos:column="23"/></operator> <name><name pos:line="121" pos:column="24">line_start<pos:position pos:line="121" pos:column="34"/></name><index pos:line="121" pos:column="34">[<expr><literal type="number" pos:line="121" pos:column="35">0<pos:position pos:line="121" pos:column="36"/></literal></expr>]<pos:position pos:line="121" pos:column="37"/></index></name></expr>)<pos:position pos:line="121" pos:column="38"/></condition><then pos:line="121" pos:column="38"> <block pos:line="121" pos:column="39">{
              <comment type="block" pos:line="122" pos:column="15">/* end of headers */</comment>
              <expr_stmt><expr><name pos:line="123" pos:column="15">keepon<pos:position pos:line="123" pos:column="21"/></name><operator pos:line="123" pos:column="21">=<pos:position pos:line="123" pos:column="22"/></operator><name pos:line="123" pos:column="22">FALSE<pos:position pos:line="123" pos:column="27"/></name></expr>;<pos:position pos:line="123" pos:column="28"/></expr_stmt>
              <break pos:line="124" pos:column="15">break;<pos:position pos:line="124" pos:column="21"/></break> <comment type="block" pos:line="124" pos:column="22">/* breaks out of loop, not switch */</comment>
            }<pos:position pos:line="125" pos:column="14"/></block></then></if>

            <if pos:line="127" pos:column="13">if<condition pos:line="127" pos:column="15">(<expr><literal type="number" pos:line="127" pos:column="16">2<pos:position pos:line="127" pos:column="17"/></literal> <operator pos:line="127" pos:column="18">==<pos:position pos:line="127" pos:column="20"/></operator> <call><name pos:line="127" pos:column="21">sscanf<pos:position pos:line="127" pos:column="27"/></name><argument_list pos:line="127" pos:column="27">(<argument><expr><name pos:line="127" pos:column="28">line_start<pos:position pos:line="127" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="40">"HTTP/1.%d %d"<pos:position pos:line="127" pos:column="54"/></literal></expr></argument>,
                           <argument><expr><operator pos:line="128" pos:column="28">&amp;<pos:position pos:line="128" pos:column="33"/></operator><name pos:line="128" pos:column="29">subversion<pos:position pos:line="128" pos:column="39"/></name></expr></argument>,
                           <argument><expr><operator pos:line="129" pos:column="28">&amp;<pos:position pos:line="129" pos:column="33"/></operator><name pos:line="129" pos:column="29">httperror<pos:position pos:line="129" pos:column="38"/></name></expr></argument>)<pos:position pos:line="129" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="129" pos:column="40"/></condition><then pos:line="129" pos:column="40"> <block pos:line="129" pos:column="41">{
              <empty_stmt pos:line="130" pos:column="15">;<pos:position pos:line="130" pos:column="16"/></empty_stmt>
            }<pos:position pos:line="131" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="133" pos:column="13">perline<pos:position pos:line="133" pos:column="20"/></name><operator pos:line="133" pos:column="20">=<pos:position pos:line="133" pos:column="21"/></operator><literal type="number" pos:line="133" pos:column="21">0<pos:position pos:line="133" pos:column="22"/></literal></expr>;<pos:position pos:line="133" pos:column="23"/></expr_stmt> <comment type="block" pos:line="133" pos:column="24">/* line starts over here */</comment>
            <expr_stmt><expr><name pos:line="134" pos:column="13">line_start<pos:position pos:line="134" pos:column="23"/></name> <operator pos:line="134" pos:column="24">=<pos:position pos:line="134" pos:column="25"/></operator> <name pos:line="134" pos:column="26">ptr<pos:position pos:line="134" pos:column="29"/></name><operator pos:line="134" pos:column="29">+<pos:position pos:line="134" pos:column="30"/></operator><literal type="number" pos:line="134" pos:column="30">1<pos:position pos:line="134" pos:column="31"/></literal></expr>;<pos:position pos:line="134" pos:column="32"/></expr_stmt>
          }<pos:position pos:line="135" pos:column="12"/></block></then></if>
        }<pos:position pos:line="136" pos:column="10"/></block></for>
      }<pos:position pos:line="137" pos:column="8"/></block></else></if>
      <break pos:line="138" pos:column="7">break;<pos:position pos:line="138" pos:column="13"/></break>
    }<pos:position pos:line="139" pos:column="6"/></block></switch> <comment type="block" pos:line="139" pos:column="7">/* switch */</comment>
  }<pos:position pos:line="140" pos:column="4"/></block></while> <comment type="block" pos:line="140" pos:column="5">/* while there's buffer left and loop is requested */</comment>

  <if pos:line="142" pos:column="3">if<condition pos:line="142" pos:column="5">(<expr><name pos:line="142" pos:column="6">error<pos:position pos:line="142" pos:column="11"/></name></expr>)<pos:position pos:line="142" pos:column="12"/></condition><then pos:line="142" pos:column="12">
    <block type="pseudo"><return pos:line="143" pos:column="5">return <expr><name pos:line="143" pos:column="12">CURLE_RECV_ERROR<pos:position pos:line="143" pos:column="28"/></name></expr>;<pos:position pos:line="143" pos:column="29"/></return></block></then></if>

  <if pos:line="145" pos:column="3">if<condition pos:line="145" pos:column="5">(<expr><literal type="number" pos:line="145" pos:column="6">200<pos:position pos:line="145" pos:column="9"/></literal> <operator pos:line="145" pos:column="10">!=<pos:position pos:line="145" pos:column="12"/></operator> <name pos:line="145" pos:column="13">httperror<pos:position pos:line="145" pos:column="22"/></name></expr>)<pos:position pos:line="145" pos:column="23"/></condition><then pos:line="145" pos:column="23"> <block pos:line="145" pos:column="24">{
    <if pos:line="146" pos:column="5">if<condition pos:line="146" pos:column="7">(<expr><literal type="number" pos:line="146" pos:column="8">407<pos:position pos:line="146" pos:column="11"/></literal> <operator pos:line="146" pos:column="12">==<pos:position pos:line="146" pos:column="14"/></operator> <name pos:line="146" pos:column="15">httperror<pos:position pos:line="146" pos:column="24"/></name></expr>)<pos:position pos:line="146" pos:column="25"/></condition><then pos:line="146" pos:column="25">
      <comment type="block" pos:line="147" pos:column="7">/* Added Nov 6 1998 */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="148" pos:column="7">failf<pos:position pos:line="148" pos:column="12"/></name><argument_list pos:line="148" pos:column="12">(<argument><expr><name pos:line="148" pos:column="13">data<pos:position pos:line="148" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="148" pos:column="19">"Proxy requires authorization!"<pos:position pos:line="148" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="52"/></expr_stmt></block></then>
    <else pos:line="149" pos:column="5">else 
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="150" pos:column="7">failf<pos:position pos:line="150" pos:column="12"/></name><argument_list pos:line="150" pos:column="12">(<argument><expr><name pos:line="150" pos:column="13">data<pos:position pos:line="150" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="150" pos:column="19">"Received error code %d from proxy"<pos:position pos:line="150" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="56">httperror<pos:position pos:line="150" pos:column="65"/></name></expr></argument>)<pos:position pos:line="150" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="67"/></expr_stmt></block></else></if>
    <return pos:line="151" pos:column="5">return <expr><name pos:line="151" pos:column="12">CURLE_RECV_ERROR<pos:position pos:line="151" pos:column="28"/></name></expr>;<pos:position pos:line="151" pos:column="29"/></return>
  }<pos:position pos:line="152" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="154" pos:column="3">infof<pos:position pos:line="154" pos:column="8"/></name> <argument_list pos:line="154" pos:column="9">(<argument><expr><name pos:line="154" pos:column="10">data<pos:position pos:line="154" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="154" pos:column="16">"Proxy replied to CONNECT request\n"<pos:position pos:line="154" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="54"/></expr_stmt>
  <return pos:line="155" pos:column="3">return <expr><name pos:line="155" pos:column="10">CURLE_OK<pos:position pos:line="155" pos:column="18"/></name></expr>;<pos:position pos:line="155" pos:column="19"/></return>
}<pos:position pos:line="156" pos:column="2"/></block></function></unit>
