<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_201_curl-7.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">CURLcode<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">_ftp<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name><name pos:line="2" pos:column="15">struct<pos:position pos:line="2" pos:column="21"/></name> <name pos:line="2" pos:column="22">connectdata<pos:position pos:line="2" pos:column="33"/></name></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">conn<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <comment type="block" pos:line="4" pos:column="3">/* this is FTP and no proxy */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ssize_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">nread<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">result<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SessionHandle<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name><init pos:line="7" pos:column="29">=<expr><name><name pos:line="7" pos:column="30">conn<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">data<pos:position pos:line="7" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">buf<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name><name pos:line="8" pos:column="15">data<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">state<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">.<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">buffer<pos:position pos:line="8" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt> <comment type="block" pos:line="8" pos:column="35">/* this is our buffer */</comment>
  <comment type="block" pos:line="9" pos:column="3">/* for the ftp PORT mode */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">portsock<pos:position pos:line="10" pos:column="15"/></name><init pos:line="10" pos:column="15">=<expr><operator pos:line="10" pos:column="16">-<pos:position pos:line="10" pos:column="17"/></operator><literal type="number" pos:line="10" pos:column="17">1<pos:position pos:line="10" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><call><name pos:line="11" pos:column="5">defined<pos:position pos:line="11" pos:column="12"/></name> <argument_list pos:line="11" pos:column="13">(<argument><expr><name pos:line="11" pos:column="14">HAVE_INET_NTOA_R<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name><name pos:line="12" pos:column="8">ntoa_buf<pos:position pos:line="12" pos:column="16"/></name><index pos:line="12" pos:column="16">[<expr><literal type="number" pos:line="12" pos:column="17">64<pos:position pos:line="12" pos:column="19"/></literal></expr>]<pos:position pos:line="12" pos:column="20"/></index></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">ENABLE_IPV6<pos:position pos:line="14" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">addrinfo<pos:position pos:line="15" pos:column="18"/></name></name> <modifier pos:line="15" pos:column="19">*<pos:position pos:line="15" pos:column="20"/></modifier></type><name pos:line="15" pos:column="20">ai<pos:position pos:line="15" pos:column="22"/></name></decl>;<pos:position pos:line="15" pos:column="23"/></decl_stmt>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">sockaddr_in<pos:position pos:line="17" pos:column="21"/></name></name></type> <name pos:line="17" pos:column="22">serv_addr<pos:position pos:line="17" pos:column="31"/></name></decl>;<pos:position pos:line="17" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name></type> <name><name pos:line="18" pos:column="8">hostent_buf<pos:position pos:line="18" pos:column="19"/></name><index pos:line="18" pos:column="19">[<expr><literal type="number" pos:line="18" pos:column="20">8192<pos:position pos:line="18" pos:column="24"/></literal></expr>]<pos:position pos:line="18" pos:column="25"/></index></name></decl>;<pos:position pos:line="18" pos:column="26"/></decl_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="21" pos:column="3">/* the ftp struct is already inited in ftp_connect() */</comment>
  <decl_stmt><decl><type><name><name pos:line="22" pos:column="3">struct<pos:position pos:line="22" pos:column="9"/></name> <name pos:line="22" pos:column="10">FTP<pos:position pos:line="22" pos:column="13"/></name></name> <modifier pos:line="22" pos:column="14">*<pos:position pos:line="22" pos:column="15"/></modifier></type><name pos:line="22" pos:column="15">ftp<pos:position pos:line="22" pos:column="18"/></name> <init pos:line="22" pos:column="19">= <expr><name><name pos:line="22" pos:column="21">conn<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">-&gt;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="27">proto<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">.<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="33">ftp<pos:position pos:line="22" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="22" pos:column="37"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="24" pos:column="3">long<pos:position pos:line="24" pos:column="7"/></name> <modifier pos:line="24" pos:column="8">*<pos:position pos:line="24" pos:column="9"/></modifier></type><name pos:line="24" pos:column="9">bytecountp<pos:position pos:line="24" pos:column="19"/></name> <init pos:line="24" pos:column="20">= <expr><name><name pos:line="24" pos:column="22">ftp<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">-&gt;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="27">bytecountp<pos:position pos:line="24" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="24" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">int<pos:position pos:line="25" pos:column="6"/></name></type> <name pos:line="25" pos:column="7">ftpcode<pos:position pos:line="25" pos:column="14"/></name></decl>;<pos:position pos:line="25" pos:column="15"/></decl_stmt> <comment type="block" pos:line="25" pos:column="16">/* for ftp status */</comment>

  <comment type="block" pos:line="27" pos:column="3">/* Send any QUOTE strings? */</comment>
  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">(<expr><name><name pos:line="28" pos:column="6">data<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">set<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">.<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">quote<pos:position pos:line="28" pos:column="21"/></name></name></expr>)<pos:position pos:line="28" pos:column="22"/></condition><then pos:line="28" pos:column="22"> <block pos:line="28" pos:column="23">{
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">result<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <call><name pos:line="29" pos:column="19">_ftp_sendquote<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><name pos:line="29" pos:column="34">conn<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="40">data<pos:position pos:line="29" pos:column="44"/></name><operator pos:line="29" pos:column="44">-&gt;<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="46">set<pos:position pos:line="29" pos:column="49"/></name><operator pos:line="29" pos:column="49">.<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="50">quote<pos:position pos:line="29" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="56"/></argument_list></call><operator pos:line="29" pos:column="56">)<pos:position pos:line="29" pos:column="57"/></operator> <operator pos:line="29" pos:column="58">!=<pos:position pos:line="29" pos:column="60"/></operator> <name pos:line="29" pos:column="61">CURLE_OK<pos:position pos:line="29" pos:column="69"/></name></expr>)<pos:position pos:line="29" pos:column="70"/></condition><then pos:line="29" pos:column="70">
      <block type="pseudo"><return pos:line="30" pos:column="7">return <expr><name pos:line="30" pos:column="14">result<pos:position pos:line="30" pos:column="20"/></name></expr>;<pos:position pos:line="30" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>
    
  <comment type="block" pos:line="33" pos:column="3">/* This is a re-used connection. Since we change directory to where the
     transfer is taking place, we must now get back to the original dir
     where we ended up after login: */</comment>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name><name pos:line="36" pos:column="7">conn<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">-&gt;<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="13">bits<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">.<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="18">reuse<pos:position pos:line="36" pos:column="23"/></name></name></expr>)<pos:position pos:line="36" pos:column="24"/></condition><then pos:line="36" pos:column="24"> <block pos:line="36" pos:column="25">{
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><operator pos:line="37" pos:column="9">(<pos:position pos:line="37" pos:column="10"/></operator><name pos:line="37" pos:column="10">result<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">=<pos:position pos:line="37" pos:column="18"/></operator> <call><name pos:line="37" pos:column="19">_ftp_cwd<pos:position pos:line="37" pos:column="27"/></name><argument_list pos:line="37" pos:column="27">(<argument><expr><name pos:line="37" pos:column="28">conn<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="34">ftp<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">-&gt;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="39">entrypath<pos:position pos:line="37" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call><operator pos:line="37" pos:column="49">)<pos:position pos:line="37" pos:column="50"/></operator> <operator pos:line="37" pos:column="51">!=<pos:position pos:line="37" pos:column="53"/></operator> <name pos:line="37" pos:column="54">CURLE_OK<pos:position pos:line="37" pos:column="62"/></name></expr>)<pos:position pos:line="37" pos:column="63"/></condition><then pos:line="37" pos:column="63">
      <block type="pseudo"><return pos:line="38" pos:column="7">return <expr><name pos:line="38" pos:column="14">result<pos:position pos:line="38" pos:column="20"/></name></expr>;<pos:position pos:line="38" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="41" pos:column="3">/* change directory first! */</comment>
  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">(<expr><name><name pos:line="42" pos:column="6">ftp<pos:position pos:line="42" pos:column="9"/></name><operator pos:line="42" pos:column="9">-&gt;<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="11">dir<pos:position pos:line="42" pos:column="14"/></name></name> <operator pos:line="42" pos:column="15">&amp;&amp;<pos:position pos:line="42" pos:column="25"/></operator> <name><name pos:line="42" pos:column="18">ftp<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">-&gt;<pos:position pos:line="42" pos:column="26"/></operator><name pos:line="42" pos:column="23">dir<pos:position pos:line="42" pos:column="26"/></name><index pos:line="42" pos:column="26">[<expr><literal type="number" pos:line="42" pos:column="27">0<pos:position pos:line="42" pos:column="28"/></literal></expr>]<pos:position pos:line="42" pos:column="29"/></index></name></expr>)<pos:position pos:line="42" pos:column="30"/></condition><then pos:line="42" pos:column="30"> <block pos:line="42" pos:column="31">{
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">(<pos:position pos:line="43" pos:column="10"/></operator><name pos:line="43" pos:column="10">result<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <call><name pos:line="43" pos:column="19">_ftp_cwd<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">conn<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="34">ftp<pos:position pos:line="43" pos:column="37"/></name><operator pos:line="43" pos:column="37">-&gt;<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="39">dir<pos:position pos:line="43" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call><operator pos:line="43" pos:column="43">)<pos:position pos:line="43" pos:column="44"/></operator> <operator pos:line="43" pos:column="45">!=<pos:position pos:line="43" pos:column="47"/></operator> <name pos:line="43" pos:column="48">CURLE_OK<pos:position pos:line="43" pos:column="56"/></name></expr>)<pos:position pos:line="43" pos:column="57"/></condition><then pos:line="43" pos:column="57">
        <block type="pseudo"><return pos:line="44" pos:column="9">return <expr><name pos:line="44" pos:column="16">result<pos:position pos:line="44" pos:column="22"/></name></expr>;<pos:position pos:line="44" pos:column="23"/></return></block></then></if>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="47" pos:column="3">/* Requested time of file? */</comment>
  <if pos:line="48" pos:column="3">if<condition pos:line="48" pos:column="5">(<expr><name><name pos:line="48" pos:column="6">data<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">-&gt;<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="12">set<pos:position pos:line="48" pos:column="15"/></name><operator pos:line="48" pos:column="15">.<pos:position pos:line="48" pos:column="16"/></operator><name pos:line="48" pos:column="16">get_filetime<pos:position pos:line="48" pos:column="28"/></name></name> <operator pos:line="48" pos:column="29">&amp;&amp;<pos:position pos:line="48" pos:column="39"/></operator> <name><name pos:line="48" pos:column="32">ftp<pos:position pos:line="48" pos:column="35"/></name><operator pos:line="48" pos:column="35">-&gt;<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="37">file<pos:position pos:line="48" pos:column="41"/></name></name></expr>)<pos:position pos:line="48" pos:column="42"/></condition><then pos:line="48" pos:column="42"> <block pos:line="48" pos:column="43">{
    <expr_stmt><expr><name pos:line="49" pos:column="5">result<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator> <call><name pos:line="49" pos:column="14">_ftp_getfiletime<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">(<argument><expr><name pos:line="49" pos:column="31">conn<pos:position pos:line="49" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="37">ftp<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">-&gt;<pos:position pos:line="49" pos:column="45"/></operator><name pos:line="49" pos:column="42">file<pos:position pos:line="49" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="48"/></expr_stmt>
    <if pos:line="50" pos:column="5">if<condition pos:line="50" pos:column="7">(<expr><name pos:line="50" pos:column="8">result<pos:position pos:line="50" pos:column="14"/></name></expr>)<pos:position pos:line="50" pos:column="15"/></condition><then pos:line="50" pos:column="15">
      <block type="pseudo"><return pos:line="51" pos:column="7">return <expr><name pos:line="51" pos:column="14">result<pos:position pos:line="51" pos:column="20"/></name></expr>;<pos:position pos:line="51" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="52" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="54" pos:column="3">/* If we have selected NOBODY, it means that we only want file information.
     Which in FTP can't be much more than the file size! */</comment>
  <if pos:line="56" pos:column="3">if<condition pos:line="56" pos:column="5">(<expr><name><name pos:line="56" pos:column="6">data<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">set<pos:position pos:line="56" pos:column="15"/></name><operator pos:line="56" pos:column="15">.<pos:position pos:line="56" pos:column="16"/></operator><name pos:line="56" pos:column="16">no_body<pos:position pos:line="56" pos:column="23"/></name></name></expr>)<pos:position pos:line="56" pos:column="24"/></condition><then pos:line="56" pos:column="24"> <block pos:line="56" pos:column="25">{
    <comment type="block" pos:line="57" pos:column="5">/* The SIZE command is _not_ RFC 959 specified, and therefor many servers
       may not support it! It is however the only way we have to get a file's
       size! */</comment>
    <decl_stmt><decl><type><name pos:line="60" pos:column="5">ssize_t<pos:position pos:line="60" pos:column="12"/></name></type> <name pos:line="60" pos:column="13">filesize<pos:position pos:line="60" pos:column="21"/></name></decl>;<pos:position pos:line="60" pos:column="22"/></decl_stmt>

    <comment type="block" pos:line="62" pos:column="5">/* Some servers return different sizes for different modes, and thus we
       must set the proper type before we check the size */</comment>
    <expr_stmt><expr><name pos:line="64" pos:column="5">result<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <call><name pos:line="64" pos:column="14">_ftp_transfertype<pos:position pos:line="64" pos:column="31"/></name><argument_list pos:line="64" pos:column="31">(<argument><expr><name pos:line="64" pos:column="32">conn<pos:position pos:line="64" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="38">data<pos:position pos:line="64" pos:column="42"/></name><operator pos:line="64" pos:column="42">-&gt;<pos:position pos:line="64" pos:column="47"/></operator><name pos:line="64" pos:column="44">set<pos:position pos:line="64" pos:column="47"/></name><operator pos:line="64" pos:column="47">.<pos:position pos:line="64" pos:column="48"/></operator><name pos:line="64" pos:column="48">ftp_ascii<pos:position pos:line="64" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt>
    <if pos:line="65" pos:column="5">if<condition pos:line="65" pos:column="7">(<expr><name pos:line="65" pos:column="8">result<pos:position pos:line="65" pos:column="14"/></name></expr>)<pos:position pos:line="65" pos:column="15"/></condition><then pos:line="65" pos:column="15">
      <block type="pseudo"><return pos:line="66" pos:column="7">return <expr><name pos:line="66" pos:column="14">result<pos:position pos:line="66" pos:column="20"/></name></expr>;<pos:position pos:line="66" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="68" pos:column="5">/* failing to get size is not a serious error */</comment>
    <expr_stmt><expr><name pos:line="69" pos:column="5">result<pos:position pos:line="69" pos:column="11"/></name> <operator pos:line="69" pos:column="12">=<pos:position pos:line="69" pos:column="13"/></operator> <call><name pos:line="69" pos:column="14">_ftp_getsize<pos:position pos:line="69" pos:column="26"/></name><argument_list pos:line="69" pos:column="26">(<argument><expr><name pos:line="69" pos:column="27">conn<pos:position pos:line="69" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="33">ftp<pos:position pos:line="69" pos:column="36"/></name><operator pos:line="69" pos:column="36">-&gt;<pos:position pos:line="69" pos:column="41"/></operator><name pos:line="69" pos:column="38">file<pos:position pos:line="69" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="44">&amp;<pos:position pos:line="69" pos:column="49"/></operator><name pos:line="69" pos:column="45">filesize<pos:position pos:line="69" pos:column="53"/></name></expr></argument>)<pos:position pos:line="69" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="55"/></expr_stmt>

    <if pos:line="71" pos:column="5">if<condition pos:line="71" pos:column="7">(<expr><name pos:line="71" pos:column="8">CURLE_OK<pos:position pos:line="71" pos:column="16"/></name> <operator pos:line="71" pos:column="17">==<pos:position pos:line="71" pos:column="19"/></operator> <name pos:line="71" pos:column="20">result<pos:position pos:line="71" pos:column="26"/></name></expr>)<pos:position pos:line="71" pos:column="27"/></condition><then pos:line="71" pos:column="27"> <block pos:line="71" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">sprintf<pos:position pos:line="72" pos:column="14"/></name><argument_list pos:line="72" pos:column="14">(<argument><expr><name pos:line="72" pos:column="15">buf<pos:position pos:line="72" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="20">"Content-Length: %d\r\n"<pos:position pos:line="72" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="46">filesize<pos:position pos:line="72" pos:column="54"/></name></expr></argument>)<pos:position pos:line="72" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><name pos:line="73" pos:column="7">result<pos:position pos:line="73" pos:column="13"/></name> <operator pos:line="73" pos:column="14">=<pos:position pos:line="73" pos:column="15"/></operator> <call><name pos:line="73" pos:column="16">Curl_client_write<pos:position pos:line="73" pos:column="33"/></name><argument_list pos:line="73" pos:column="33">(<argument><expr><name pos:line="73" pos:column="34">data<pos:position pos:line="73" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="40">CLIENTWRITE_BOTH<pos:position pos:line="73" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="58">buf<pos:position pos:line="73" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="63">0<pos:position pos:line="73" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="66"/></expr_stmt>
      <if pos:line="74" pos:column="7">if<condition pos:line="74" pos:column="9">(<expr><name pos:line="74" pos:column="10">result<pos:position pos:line="74" pos:column="16"/></name></expr>)<pos:position pos:line="74" pos:column="17"/></condition><then pos:line="74" pos:column="17">
        <block type="pseudo"><return pos:line="75" pos:column="9">return <expr><name pos:line="75" pos:column="16">result<pos:position pos:line="75" pos:column="22"/></name></expr>;<pos:position pos:line="75" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="78" pos:column="5">/* If we asked for a time of the file and we actually got one as
       well, we "emulate" a HTTP-style header in our output. */</comment>

<cpp:ifdef pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">ifdef<pos:position pos:line="81" pos:column="7"/></cpp:directive> <name pos:line="81" pos:column="8">HAVE_STRFTIME<pos:position pos:line="81" pos:column="21"/></name></cpp:ifdef>
    <if pos:line="82" pos:column="5">if<condition pos:line="82" pos:column="7">(<expr><name><name pos:line="82" pos:column="8">data<pos:position pos:line="82" pos:column="12"/></name><operator pos:line="82" pos:column="12">-&gt;<pos:position pos:line="82" pos:column="17"/></operator><name pos:line="82" pos:column="14">set<pos:position pos:line="82" pos:column="17"/></name><operator pos:line="82" pos:column="17">.<pos:position pos:line="82" pos:column="18"/></operator><name pos:line="82" pos:column="18">get_filetime<pos:position pos:line="82" pos:column="30"/></name></name> <operator pos:line="82" pos:column="31">&amp;&amp;<pos:position pos:line="82" pos:column="41"/></operator> <name><name pos:line="82" pos:column="34">data<pos:position pos:line="82" pos:column="38"/></name><operator pos:line="82" pos:column="38">-&gt;<pos:position pos:line="82" pos:column="43"/></operator><name pos:line="82" pos:column="40">info<pos:position pos:line="82" pos:column="44"/></name><operator pos:line="82" pos:column="44">.<pos:position pos:line="82" pos:column="45"/></operator><name pos:line="82" pos:column="45">filetime<pos:position pos:line="82" pos:column="53"/></name></name></expr>)<pos:position pos:line="82" pos:column="54"/></condition><then pos:line="82" pos:column="54"> <block pos:line="82" pos:column="55">{
      <decl_stmt><decl><type><name><name pos:line="83" pos:column="7">struct<pos:position pos:line="83" pos:column="13"/></name> <name pos:line="83" pos:column="14">tm<pos:position pos:line="83" pos:column="16"/></name></name> <modifier pos:line="83" pos:column="17">*<pos:position pos:line="83" pos:column="18"/></modifier></type><name pos:line="83" pos:column="18">tm<pos:position pos:line="83" pos:column="20"/></name></decl>;<pos:position pos:line="83" pos:column="21"/></decl_stmt>
<cpp:ifdef pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">ifdef<pos:position pos:line="84" pos:column="7"/></cpp:directive> <name pos:line="84" pos:column="8">HAVE_LOCALTIME_R<pos:position pos:line="84" pos:column="24"/></name></cpp:ifdef>
      <decl_stmt><decl><type><name><name pos:line="85" pos:column="7">struct<pos:position pos:line="85" pos:column="13"/></name> <name pos:line="85" pos:column="14">tm<pos:position pos:line="85" pos:column="16"/></name></name></type> <name pos:line="85" pos:column="17">buffer<pos:position pos:line="85" pos:column="23"/></name></decl>;<pos:position pos:line="85" pos:column="24"/></decl_stmt>
      <expr_stmt><expr><name pos:line="86" pos:column="7">tm<pos:position pos:line="86" pos:column="9"/></name> <operator pos:line="86" pos:column="10">=<pos:position pos:line="86" pos:column="11"/></operator> <operator pos:line="86" pos:column="12">(<pos:position pos:line="86" pos:column="13"/></operator>struct <name pos:line="86" pos:column="20">tm<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">*<pos:position pos:line="86" pos:column="24"/></operator><operator pos:line="86" pos:column="24">)<pos:position pos:line="86" pos:column="25"/></operator><call><name pos:line="86" pos:column="25">localtime_r<pos:position pos:line="86" pos:column="36"/></name><argument_list pos:line="86" pos:column="36">(<argument><expr><operator pos:line="86" pos:column="37">&amp;<pos:position pos:line="86" pos:column="42"/></operator><name><name pos:line="86" pos:column="38">data<pos:position pos:line="86" pos:column="42"/></name><operator pos:line="86" pos:column="42">-&gt;<pos:position pos:line="86" pos:column="47"/></operator><name pos:line="86" pos:column="44">info<pos:position pos:line="86" pos:column="48"/></name><operator pos:line="86" pos:column="48">.<pos:position pos:line="86" pos:column="49"/></operator><name pos:line="86" pos:column="49">filetime<pos:position pos:line="86" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="59">&amp;<pos:position pos:line="86" pos:column="64"/></operator><name pos:line="86" pos:column="60">buffer<pos:position pos:line="86" pos:column="66"/></name></expr></argument>)<pos:position pos:line="86" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="68"/></expr_stmt>
<cpp:else pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">else<pos:position pos:line="87" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><name pos:line="88" pos:column="7">tm<pos:position pos:line="88" pos:column="9"/></name> <operator pos:line="88" pos:column="10">=<pos:position pos:line="88" pos:column="11"/></operator> <call><name pos:line="88" pos:column="12">localtime<pos:position pos:line="88" pos:column="21"/></name><argument_list pos:line="88" pos:column="21">(<argument><expr><operator pos:line="88" pos:column="22">&amp;<pos:position pos:line="88" pos:column="27"/></operator><name><name pos:line="88" pos:column="23">data<pos:position pos:line="88" pos:column="27"/></name><operator pos:line="88" pos:column="27">-&gt;<pos:position pos:line="88" pos:column="32"/></operator><name pos:line="88" pos:column="29">info<pos:position pos:line="88" pos:column="33"/></name><operator pos:line="88" pos:column="33">.<pos:position pos:line="88" pos:column="34"/></operator><name pos:line="88" pos:column="34">filetime<pos:position pos:line="88" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>
      <comment type="block" pos:line="90" pos:column="7">/* format: "Tue, 15 Nov 1994 12:45:26 GMT" */</comment>
      <expr_stmt><expr><call><name pos:line="91" pos:column="7">strftime<pos:position pos:line="91" pos:column="15"/></name><argument_list pos:line="91" pos:column="15">(<argument><expr><name pos:line="91" pos:column="16">buf<pos:position pos:line="91" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="21">BUFSIZE<pos:position pos:line="91" pos:column="28"/></name><operator pos:line="91" pos:column="28">-<pos:position pos:line="91" pos:column="29"/></operator><literal type="number" pos:line="91" pos:column="29">1<pos:position pos:line="91" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="32">"Last-Modified: %a, %d %b %Y %H:%M:%S %Z\r\n"<pos:position pos:line="91" pos:column="77"/></literal></expr></argument>,
               <argument><expr><name pos:line="92" pos:column="16">tm<pos:position pos:line="92" pos:column="18"/></name></expr></argument>)<pos:position pos:line="92" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="93" pos:column="7">result<pos:position pos:line="93" pos:column="13"/></name> <operator pos:line="93" pos:column="14">=<pos:position pos:line="93" pos:column="15"/></operator> <call><name pos:line="93" pos:column="16">Curl_client_write<pos:position pos:line="93" pos:column="33"/></name><argument_list pos:line="93" pos:column="33">(<argument><expr><name pos:line="93" pos:column="34">data<pos:position pos:line="93" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="40">CLIENTWRITE_BOTH<pos:position pos:line="93" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="58">buf<pos:position pos:line="93" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="63">0<pos:position pos:line="93" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="66"/></expr_stmt>
      <if pos:line="94" pos:column="7">if<condition pos:line="94" pos:column="9">(<expr><name pos:line="94" pos:column="10">result<pos:position pos:line="94" pos:column="16"/></name></expr>)<pos:position pos:line="94" pos:column="17"/></condition><then pos:line="94" pos:column="17">
        <block type="pseudo"><return pos:line="95" pos:column="9">return <expr><name pos:line="95" pos:column="16">result<pos:position pos:line="95" pos:column="22"/></name></expr>;<pos:position pos:line="95" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>
<cpp:endif pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">endif<pos:position pos:line="97" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="99" pos:column="5">return <expr><name pos:line="99" pos:column="12">CURLE_OK<pos:position pos:line="99" pos:column="20"/></name></expr>;<pos:position pos:line="99" pos:column="21"/></return>
  }<pos:position pos:line="100" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="102" pos:column="3">/* We have chosen to use the PORT command */</comment>
  <if pos:line="103" pos:column="3">if<condition pos:line="103" pos:column="5">(<expr><name><name pos:line="103" pos:column="6">data<pos:position pos:line="103" pos:column="10"/></name><operator pos:line="103" pos:column="10">-&gt;<pos:position pos:line="103" pos:column="15"/></operator><name pos:line="103" pos:column="12">set<pos:position pos:line="103" pos:column="15"/></name><operator pos:line="103" pos:column="15">.<pos:position pos:line="103" pos:column="16"/></operator><name pos:line="103" pos:column="16">ftp_use_port<pos:position pos:line="103" pos:column="28"/></name></name></expr>)<pos:position pos:line="103" pos:column="29"/></condition><then pos:line="103" pos:column="29"> <block pos:line="103" pos:column="30">{
<cpp:ifdef pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">ifdef<pos:position pos:line="104" pos:column="7"/></cpp:directive> <name pos:line="104" pos:column="8">ENABLE_IPV6<pos:position pos:line="104" pos:column="19"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name><name pos:line="105" pos:column="5">struct<pos:position pos:line="105" pos:column="11"/></name> <name pos:line="105" pos:column="12">addrinfo<pos:position pos:line="105" pos:column="20"/></name></name></type> <name pos:line="105" pos:column="21">hints<pos:position pos:line="105" pos:column="26"/></name></decl>, <modifier pos:line="105" pos:column="28">*<pos:position pos:line="105" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="105" pos:column="29">res<pos:position pos:line="105" pos:column="32"/></name></decl>, <modifier pos:line="105" pos:column="34">*<pos:position pos:line="105" pos:column="35"/></modifier><decl><type ref="prev"/><name pos:line="105" pos:column="35">ai<pos:position pos:line="105" pos:column="37"/></name></decl>;<pos:position pos:line="105" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="106" pos:column="5">struct<pos:position pos:line="106" pos:column="11"/></name> <name pos:line="106" pos:column="12">sockaddr_storage<pos:position pos:line="106" pos:column="28"/></name></name></type> <name pos:line="106" pos:column="29">ss<pos:position pos:line="106" pos:column="31"/></name></decl>;<pos:position pos:line="106" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="107" pos:column="5">socklen_t<pos:position pos:line="107" pos:column="14"/></name></type> <name pos:line="107" pos:column="15">sslen<pos:position pos:line="107" pos:column="20"/></name></decl>;<pos:position pos:line="107" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="108" pos:column="5">char<pos:position pos:line="108" pos:column="9"/></name></type> <name><name pos:line="108" pos:column="10">hbuf<pos:position pos:line="108" pos:column="14"/></name><index pos:line="108" pos:column="14">[<expr><name pos:line="108" pos:column="15">NI_MAXHOST<pos:position pos:line="108" pos:column="25"/></name></expr>]<pos:position pos:line="108" pos:column="26"/></index></name></decl>;<pos:position pos:line="108" pos:column="27"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="110" pos:column="5">struct<pos:position pos:line="110" pos:column="11"/></name> <name pos:line="110" pos:column="12">sockaddr<pos:position pos:line="110" pos:column="20"/></name></name> <modifier pos:line="110" pos:column="21">*<pos:position pos:line="110" pos:column="22"/></modifier></type><name pos:line="110" pos:column="22">sa<pos:position pos:line="110" pos:column="24"/></name><init pos:line="110" pos:column="24">=<expr><operator pos:line="110" pos:column="25">(<pos:position pos:line="110" pos:column="26"/></operator>struct <name pos:line="110" pos:column="33">sockaddr<pos:position pos:line="110" pos:column="41"/></name> <operator pos:line="110" pos:column="42">*<pos:position pos:line="110" pos:column="43"/></operator><operator pos:line="110" pos:column="43">)<pos:position pos:line="110" pos:column="44"/></operator><operator pos:line="110" pos:column="44">&amp;<pos:position pos:line="110" pos:column="49"/></operator><name pos:line="110" pos:column="45">ss<pos:position pos:line="110" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="110" pos:column="48"/></decl_stmt>
<cpp:ifdef pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">ifdef<pos:position pos:line="111" pos:column="7"/></cpp:directive> <name pos:line="111" pos:column="8">NI_WITHSCOPEID<pos:position pos:line="111" pos:column="22"/></name></cpp:ifdef>
    <decl_stmt><decl><type><specifier pos:line="112" pos:column="5">const<pos:position pos:line="112" pos:column="10"/></specifier> <name pos:line="112" pos:column="11">int<pos:position pos:line="112" pos:column="14"/></name></type> <name pos:line="112" pos:column="15">niflags<pos:position pos:line="112" pos:column="22"/></name> <init pos:line="112" pos:column="23">= <expr><name pos:line="112" pos:column="25">NI_NUMERICHOST<pos:position pos:line="112" pos:column="39"/></name> <operator pos:line="112" pos:column="40">|<pos:position pos:line="112" pos:column="41"/></operator> <name pos:line="112" pos:column="42">NI_NUMERICSERV<pos:position pos:line="112" pos:column="56"/></name> <operator pos:line="112" pos:column="57">|<pos:position pos:line="112" pos:column="58"/></operator> <name pos:line="112" pos:column="59">NI_WITHSCOPEID<pos:position pos:line="112" pos:column="73"/></name></expr></init></decl>;<pos:position pos:line="112" pos:column="74"/></decl_stmt>
<cpp:else pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">else<pos:position pos:line="113" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="114" pos:column="5">const<pos:position pos:line="114" pos:column="10"/></specifier> <name pos:line="114" pos:column="11">int<pos:position pos:line="114" pos:column="14"/></name></type> <name pos:line="114" pos:column="15">niflags<pos:position pos:line="114" pos:column="22"/></name> <init pos:line="114" pos:column="23">= <expr><name pos:line="114" pos:column="25">NI_NUMERICHOST<pos:position pos:line="114" pos:column="39"/></name> <operator pos:line="114" pos:column="40">|<pos:position pos:line="114" pos:column="41"/></operator> <name pos:line="114" pos:column="42">NI_NUMERICSERV<pos:position pos:line="114" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="114" pos:column="57"/></decl_stmt>
<cpp:endif pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">endif<pos:position pos:line="115" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="116" pos:column="5">unsigned<pos:position pos:line="116" pos:column="13"/></name> <name pos:line="116" pos:column="14">char<pos:position pos:line="116" pos:column="18"/></name> <modifier pos:line="116" pos:column="19">*<pos:position pos:line="116" pos:column="20"/></modifier></type><name pos:line="116" pos:column="20">ap<pos:position pos:line="116" pos:column="22"/></name></decl>;<pos:position pos:line="116" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="117" pos:column="5">unsigned<pos:position pos:line="117" pos:column="13"/></name> <name pos:line="117" pos:column="14">char<pos:position pos:line="117" pos:column="18"/></name> <modifier pos:line="117" pos:column="19">*<pos:position pos:line="117" pos:column="20"/></modifier></type><name pos:line="117" pos:column="20">pp<pos:position pos:line="117" pos:column="22"/></name></decl>;<pos:position pos:line="117" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="118" pos:column="5">int<pos:position pos:line="118" pos:column="8"/></name></type> <name pos:line="118" pos:column="9">alen<pos:position pos:line="118" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="118" pos:column="15">plen<pos:position pos:line="118" pos:column="19"/></name></decl>;<pos:position pos:line="118" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="119" pos:column="5">char<pos:position pos:line="119" pos:column="9"/></name></type> <name><name pos:line="119" pos:column="10">portmsgbuf<pos:position pos:line="119" pos:column="20"/></name><index pos:line="119" pos:column="20">[<expr><literal type="number" pos:line="119" pos:column="21">4096<pos:position pos:line="119" pos:column="25"/></literal></expr>]<pos:position pos:line="119" pos:column="26"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="119" pos:column="28">tmp<pos:position pos:line="119" pos:column="31"/></name><index pos:line="119" pos:column="31">[<expr><literal type="number" pos:line="119" pos:column="32">4096<pos:position pos:line="119" pos:column="36"/></literal></expr>]<pos:position pos:line="119" pos:column="37"/></index></name></decl>;<pos:position pos:line="119" pos:column="38"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="121" pos:column="5">const<pos:position pos:line="121" pos:column="10"/></specifier> <name pos:line="121" pos:column="11">char<pos:position pos:line="121" pos:column="15"/></name> <modifier pos:line="121" pos:column="16">*<pos:position pos:line="121" pos:column="17"/></modifier></type><name><name pos:line="121" pos:column="17">mode<pos:position pos:line="121" pos:column="21"/></name><index pos:line="121" pos:column="21">[]<pos:position pos:line="121" pos:column="23"/></index></name> <init pos:line="121" pos:column="24">= <expr><block pos:line="121" pos:column="26">{ <expr><literal type="string" pos:line="121" pos:column="28">"EPRT"<pos:position pos:line="121" pos:column="34"/></literal></expr>, <expr><literal type="string" pos:line="121" pos:column="36">"LPRT"<pos:position pos:line="121" pos:column="42"/></literal></expr>, <expr><literal type="string" pos:line="121" pos:column="44">"PORT"<pos:position pos:line="121" pos:column="50"/></literal></expr>, <expr><name pos:line="121" pos:column="52">NULL<pos:position pos:line="121" pos:column="56"/></name></expr> }<pos:position pos:line="121" pos:column="58"/></block></expr></init></decl>;<pos:position pos:line="121" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="122" pos:column="5">char<pos:position pos:line="122" pos:column="9"/></name> <modifier pos:line="122" pos:column="10">*<pos:position pos:line="122" pos:column="11"/></modifier><modifier pos:line="122" pos:column="11">*<pos:position pos:line="122" pos:column="12"/></modifier></type><name pos:line="122" pos:column="12">modep<pos:position pos:line="122" pos:column="17"/></name></decl>;<pos:position pos:line="122" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="124" pos:column="5">/*
     * we should use Curl_if2ip?  given pickiness of recent ftpd,
     * I believe we should use the same address as the control connection.
     */</comment>
    <expr_stmt><expr><name pos:line="128" pos:column="5">sslen<pos:position pos:line="128" pos:column="10"/></name> <operator pos:line="128" pos:column="11">=<pos:position pos:line="128" pos:column="12"/></operator> <sizeof pos:line="128" pos:column="13">sizeof<argument_list pos:line="128" pos:column="19">(<argument><expr><name pos:line="128" pos:column="20">ss<pos:position pos:line="128" pos:column="22"/></name></expr></argument>)<pos:position pos:line="128" pos:column="23"/></argument_list></sizeof></expr>;<pos:position pos:line="128" pos:column="24"/></expr_stmt>
    <if pos:line="129" pos:column="5">if <condition pos:line="129" pos:column="8">(<expr><call><name pos:line="129" pos:column="9">getsockname<pos:position pos:line="129" pos:column="20"/></name><argument_list pos:line="129" pos:column="20">(<argument><expr><name><name pos:line="129" pos:column="21">conn<pos:position pos:line="129" pos:column="25"/></name><operator pos:line="129" pos:column="25">-&gt;<pos:position pos:line="129" pos:column="30"/></operator><name pos:line="129" pos:column="27">firstsocket<pos:position pos:line="129" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="129" pos:column="40">(<pos:position pos:line="129" pos:column="41"/></operator>struct <name pos:line="129" pos:column="48">sockaddr<pos:position pos:line="129" pos:column="56"/></name> <operator pos:line="129" pos:column="57">*<pos:position pos:line="129" pos:column="58"/></operator><operator pos:line="129" pos:column="58">)<pos:position pos:line="129" pos:column="59"/></operator><operator pos:line="129" pos:column="59">&amp;<pos:position pos:line="129" pos:column="64"/></operator><name pos:line="129" pos:column="60">ss<pos:position pos:line="129" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="129" pos:column="64">&amp;<pos:position pos:line="129" pos:column="69"/></operator><name pos:line="129" pos:column="65">sslen<pos:position pos:line="129" pos:column="70"/></name></expr></argument>)<pos:position pos:line="129" pos:column="71"/></argument_list></call> <operator pos:line="129" pos:column="72">&lt;<pos:position pos:line="129" pos:column="76"/></operator> <literal type="number" pos:line="129" pos:column="74">0<pos:position pos:line="129" pos:column="75"/></literal></expr>)<pos:position pos:line="129" pos:column="76"/></condition><then pos:line="129" pos:column="76">
      <block type="pseudo"><return pos:line="130" pos:column="7">return <expr><name pos:line="130" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="130" pos:column="35"/></name></expr>;<pos:position pos:line="130" pos:column="36"/></return></block></then></if>

    <if pos:line="132" pos:column="5">if <condition pos:line="132" pos:column="8">(<expr><call><name pos:line="132" pos:column="9">getnameinfo<pos:position pos:line="132" pos:column="20"/></name><argument_list pos:line="132" pos:column="20">(<argument><expr><operator pos:line="132" pos:column="21">(<pos:position pos:line="132" pos:column="22"/></operator>struct <name pos:line="132" pos:column="29">sockaddr<pos:position pos:line="132" pos:column="37"/></name> <operator pos:line="132" pos:column="38">*<pos:position pos:line="132" pos:column="39"/></operator><operator pos:line="132" pos:column="39">)<pos:position pos:line="132" pos:column="40"/></operator><operator pos:line="132" pos:column="40">&amp;<pos:position pos:line="132" pos:column="45"/></operator><name pos:line="132" pos:column="41">ss<pos:position pos:line="132" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="45">sslen<pos:position pos:line="132" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="52">hbuf<pos:position pos:line="132" pos:column="56"/></name></expr></argument>, <argument><expr><sizeof pos:line="132" pos:column="58">sizeof<argument_list pos:line="132" pos:column="64">(<argument><expr><name pos:line="132" pos:column="65">hbuf<pos:position pos:line="132" pos:column="69"/></name></expr></argument>)<pos:position pos:line="132" pos:column="70"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="132" pos:column="72">NULL<pos:position pos:line="132" pos:column="76"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="132" pos:column="78">0<pos:position pos:line="132" pos:column="79"/></literal></expr></argument>,
                    <argument><expr><name pos:line="133" pos:column="21">niflags<pos:position pos:line="133" pos:column="28"/></name></expr></argument>)<pos:position pos:line="133" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="30"/></condition><then pos:line="133" pos:column="30">
      <block type="pseudo"><return pos:line="134" pos:column="7">return <expr><name pos:line="134" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="134" pos:column="35"/></name></expr>;<pos:position pos:line="134" pos:column="36"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="136" pos:column="5">memset<pos:position pos:line="136" pos:column="11"/></name><argument_list pos:line="136" pos:column="11">(<argument><expr><operator pos:line="136" pos:column="12">&amp;<pos:position pos:line="136" pos:column="17"/></operator><name pos:line="136" pos:column="13">hints<pos:position pos:line="136" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="136" pos:column="20">0<pos:position pos:line="136" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="136" pos:column="23">sizeof<argument_list pos:line="136" pos:column="29">(<argument><expr><name pos:line="136" pos:column="30">hints<pos:position pos:line="136" pos:column="35"/></name></expr></argument>)<pos:position pos:line="136" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="136" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="137" pos:column="5">hints<pos:position pos:line="137" pos:column="10"/></name><operator pos:line="137" pos:column="10">.<pos:position pos:line="137" pos:column="11"/></operator><name pos:line="137" pos:column="11">ai_family<pos:position pos:line="137" pos:column="20"/></name></name> <operator pos:line="137" pos:column="21">=<pos:position pos:line="137" pos:column="22"/></operator> <name><name pos:line="137" pos:column="23">sa<pos:position pos:line="137" pos:column="25"/></name><operator pos:line="137" pos:column="25">-&gt;<pos:position pos:line="137" pos:column="30"/></operator><name pos:line="137" pos:column="27">sa_family<pos:position pos:line="137" pos:column="36"/></name></name></expr>;<pos:position pos:line="137" pos:column="37"/></expr_stmt>
    <comment type="block" pos:line="138" pos:column="5">/*hints.ai_family = ss.ss_family;
      this way can be used if sockaddr_storage is properly defined, as glibc 
      2.1.X doesn't do*/</comment>
    <expr_stmt><expr><name><name pos:line="141" pos:column="5">hints<pos:position pos:line="141" pos:column="10"/></name><operator pos:line="141" pos:column="10">.<pos:position pos:line="141" pos:column="11"/></operator><name pos:line="141" pos:column="11">ai_socktype<pos:position pos:line="141" pos:column="22"/></name></name> <operator pos:line="141" pos:column="23">=<pos:position pos:line="141" pos:column="24"/></operator> <name pos:line="141" pos:column="25">SOCK_STREAM<pos:position pos:line="141" pos:column="36"/></name></expr>;<pos:position pos:line="141" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="142" pos:column="5">hints<pos:position pos:line="142" pos:column="10"/></name><operator pos:line="142" pos:column="10">.<pos:position pos:line="142" pos:column="11"/></operator><name pos:line="142" pos:column="11">ai_flags<pos:position pos:line="142" pos:column="19"/></name></name> <operator pos:line="142" pos:column="20">=<pos:position pos:line="142" pos:column="21"/></operator> <name pos:line="142" pos:column="22">AI_PASSIVE<pos:position pos:line="142" pos:column="32"/></name></expr>;<pos:position pos:line="142" pos:column="33"/></expr_stmt>
    <if pos:line="143" pos:column="5">if <condition pos:line="143" pos:column="8">(<expr><call><name pos:line="143" pos:column="9">getaddrinfo<pos:position pos:line="143" pos:column="20"/></name><argument_list pos:line="143" pos:column="20">(<argument><expr><name pos:line="143" pos:column="21">hbuf<pos:position pos:line="143" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="27">"0"<pos:position pos:line="143" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="143" pos:column="32">&amp;<pos:position pos:line="143" pos:column="37"/></operator><name pos:line="143" pos:column="33">hints<pos:position pos:line="143" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="143" pos:column="40">&amp;<pos:position pos:line="143" pos:column="45"/></operator><name pos:line="143" pos:column="41">res<pos:position pos:line="143" pos:column="44"/></name></expr></argument>)<pos:position pos:line="143" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="143" pos:column="46"/></condition><then pos:line="143" pos:column="46">
      <block type="pseudo"><return pos:line="144" pos:column="7">return <expr><name pos:line="144" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="144" pos:column="35"/></name></expr>;<pos:position pos:line="144" pos:column="36"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="146" pos:column="5">portsock<pos:position pos:line="146" pos:column="13"/></name> <operator pos:line="146" pos:column="14">=<pos:position pos:line="146" pos:column="15"/></operator> <operator pos:line="146" pos:column="16">-<pos:position pos:line="146" pos:column="17"/></operator><literal type="number" pos:line="146" pos:column="17">1<pos:position pos:line="146" pos:column="18"/></literal></expr>;<pos:position pos:line="146" pos:column="19"/></expr_stmt>
    <for pos:line="147" pos:column="5">for <control pos:line="147" pos:column="9">(<init><expr><name pos:line="147" pos:column="10">ai<pos:position pos:line="147" pos:column="12"/></name> <operator pos:line="147" pos:column="13">=<pos:position pos:line="147" pos:column="14"/></operator> <name pos:line="147" pos:column="15">res<pos:position pos:line="147" pos:column="18"/></name></expr>;<pos:position pos:line="147" pos:column="19"/></init> <condition><expr><name pos:line="147" pos:column="20">ai<pos:position pos:line="147" pos:column="22"/></name></expr>;<pos:position pos:line="147" pos:column="23"/></condition> <incr><expr><name pos:line="147" pos:column="24">ai<pos:position pos:line="147" pos:column="26"/></name> <operator pos:line="147" pos:column="27">=<pos:position pos:line="147" pos:column="28"/></operator> <name><name pos:line="147" pos:column="29">ai<pos:position pos:line="147" pos:column="31"/></name><operator pos:line="147" pos:column="31">-&gt;<pos:position pos:line="147" pos:column="36"/></operator><name pos:line="147" pos:column="33">ai_next<pos:position pos:line="147" pos:column="40"/></name></name></expr></incr>)<pos:position pos:line="147" pos:column="41"/></control> <block pos:line="147" pos:column="42">{
      <expr_stmt><expr><name pos:line="148" pos:column="7">portsock<pos:position pos:line="148" pos:column="15"/></name> <operator pos:line="148" pos:column="16">=<pos:position pos:line="148" pos:column="17"/></operator> <call><name pos:line="148" pos:column="18">socket<pos:position pos:line="148" pos:column="24"/></name><argument_list pos:line="148" pos:column="24">(<argument><expr><name><name pos:line="148" pos:column="25">ai<pos:position pos:line="148" pos:column="27"/></name><operator pos:line="148" pos:column="27">-&gt;<pos:position pos:line="148" pos:column="32"/></operator><name pos:line="148" pos:column="29">ai_family<pos:position pos:line="148" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="40">ai<pos:position pos:line="148" pos:column="42"/></name><operator pos:line="148" pos:column="42">-&gt;<pos:position pos:line="148" pos:column="47"/></operator><name pos:line="148" pos:column="44">ai_socktype<pos:position pos:line="148" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="57">ai<pos:position pos:line="148" pos:column="59"/></name><operator pos:line="148" pos:column="59">-&gt;<pos:position pos:line="148" pos:column="64"/></operator><name pos:line="148" pos:column="61">ai_protocol<pos:position pos:line="148" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="74"/></expr_stmt>
      <if pos:line="149" pos:column="7">if <condition pos:line="149" pos:column="10">(<expr><name pos:line="149" pos:column="11">portsock<pos:position pos:line="149" pos:column="19"/></name> <operator pos:line="149" pos:column="20">&lt;<pos:position pos:line="149" pos:column="24"/></operator> <literal type="number" pos:line="149" pos:column="22">0<pos:position pos:line="149" pos:column="23"/></literal></expr>)<pos:position pos:line="149" pos:column="24"/></condition><then pos:line="149" pos:column="24">
        <block type="pseudo"><continue pos:line="150" pos:column="9">continue;<pos:position pos:line="150" pos:column="18"/></continue></block></then></if>

      <if pos:line="152" pos:column="7">if <condition pos:line="152" pos:column="10">(<expr><call><name pos:line="152" pos:column="11">bind<pos:position pos:line="152" pos:column="15"/></name><argument_list pos:line="152" pos:column="15">(<argument><expr><name pos:line="152" pos:column="16">portsock<pos:position pos:line="152" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="152" pos:column="26">ai<pos:position pos:line="152" pos:column="28"/></name><operator pos:line="152" pos:column="28">-&gt;<pos:position pos:line="152" pos:column="33"/></operator><name pos:line="152" pos:column="30">ai_addr<pos:position pos:line="152" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="152" pos:column="39">ai<pos:position pos:line="152" pos:column="41"/></name><operator pos:line="152" pos:column="41">-&gt;<pos:position pos:line="152" pos:column="46"/></operator><name pos:line="152" pos:column="43">ai_addrlen<pos:position pos:line="152" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="152" pos:column="54"/></argument_list></call> <operator pos:line="152" pos:column="55">&lt;<pos:position pos:line="152" pos:column="59"/></operator> <literal type="number" pos:line="152" pos:column="57">0<pos:position pos:line="152" pos:column="58"/></literal></expr>)<pos:position pos:line="152" pos:column="59"/></condition><then pos:line="152" pos:column="59"> <block pos:line="152" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="153" pos:column="9">sclose<pos:position pos:line="153" pos:column="15"/></name><argument_list pos:line="153" pos:column="15">(<argument><expr><name pos:line="153" pos:column="16">portsock<pos:position pos:line="153" pos:column="24"/></name></expr></argument>)<pos:position pos:line="153" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="154" pos:column="9">portsock<pos:position pos:line="154" pos:column="17"/></name> <operator pos:line="154" pos:column="18">=<pos:position pos:line="154" pos:column="19"/></operator> <operator pos:line="154" pos:column="20">-<pos:position pos:line="154" pos:column="21"/></operator><literal type="number" pos:line="154" pos:column="21">1<pos:position pos:line="154" pos:column="22"/></literal></expr>;<pos:position pos:line="154" pos:column="23"/></expr_stmt>
        <continue pos:line="155" pos:column="9">continue;<pos:position pos:line="155" pos:column="18"/></continue>
      }<pos:position pos:line="156" pos:column="8"/></block></then></if>

      <if pos:line="158" pos:column="7">if <condition pos:line="158" pos:column="10">(<expr><call><name pos:line="158" pos:column="11">listen<pos:position pos:line="158" pos:column="17"/></name><argument_list pos:line="158" pos:column="17">(<argument><expr><name pos:line="158" pos:column="18">portsock<pos:position pos:line="158" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="158" pos:column="28">1<pos:position pos:line="158" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="158" pos:column="30"/></argument_list></call> <operator pos:line="158" pos:column="31">&lt;<pos:position pos:line="158" pos:column="35"/></operator> <literal type="number" pos:line="158" pos:column="33">0<pos:position pos:line="158" pos:column="34"/></literal></expr>)<pos:position pos:line="158" pos:column="35"/></condition><then pos:line="158" pos:column="35"> <block pos:line="158" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="159" pos:column="9">sclose<pos:position pos:line="159" pos:column="15"/></name><argument_list pos:line="159" pos:column="15">(<argument><expr><name pos:line="159" pos:column="16">portsock<pos:position pos:line="159" pos:column="24"/></name></expr></argument>)<pos:position pos:line="159" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="160" pos:column="9">portsock<pos:position pos:line="160" pos:column="17"/></name> <operator pos:line="160" pos:column="18">=<pos:position pos:line="160" pos:column="19"/></operator> <operator pos:line="160" pos:column="20">-<pos:position pos:line="160" pos:column="21"/></operator><literal type="number" pos:line="160" pos:column="21">1<pos:position pos:line="160" pos:column="22"/></literal></expr>;<pos:position pos:line="160" pos:column="23"/></expr_stmt>
        <continue pos:line="161" pos:column="9">continue;<pos:position pos:line="161" pos:column="18"/></continue>
      }<pos:position pos:line="162" pos:column="8"/></block></then></if>

      <break pos:line="164" pos:column="7">break;<pos:position pos:line="164" pos:column="13"/></break>
    }<pos:position pos:line="165" pos:column="6"/></block></for>
    <if pos:line="166" pos:column="5">if <condition pos:line="166" pos:column="8">(<expr><name pos:line="166" pos:column="9">portsock<pos:position pos:line="166" pos:column="17"/></name> <operator pos:line="166" pos:column="18">&lt;<pos:position pos:line="166" pos:column="22"/></operator> <literal type="number" pos:line="166" pos:column="20">0<pos:position pos:line="166" pos:column="21"/></literal></expr>)<pos:position pos:line="166" pos:column="22"/></condition><then pos:line="166" pos:column="22"> <block pos:line="166" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="167" pos:column="7">failf<pos:position pos:line="167" pos:column="12"/></name><argument_list pos:line="167" pos:column="12">(<argument><expr><name pos:line="167" pos:column="13">data<pos:position pos:line="167" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="167" pos:column="19">strerror<pos:position pos:line="167" pos:column="27"/></name><argument_list pos:line="167" pos:column="27">(<argument><expr><name pos:line="167" pos:column="28">errno<pos:position pos:line="167" pos:column="33"/></name></expr></argument>)<pos:position pos:line="167" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="167" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="168" pos:column="7">freeaddrinfo<pos:position pos:line="168" pos:column="19"/></name><argument_list pos:line="168" pos:column="19">(<argument><expr><name pos:line="168" pos:column="20">res<pos:position pos:line="168" pos:column="23"/></name></expr></argument>)<pos:position pos:line="168" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="25"/></expr_stmt>
      <return pos:line="169" pos:column="7">return <expr><name pos:line="169" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="169" pos:column="35"/></name></expr>;<pos:position pos:line="169" pos:column="36"/></return>
    }<pos:position pos:line="170" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="172" pos:column="5">sslen<pos:position pos:line="172" pos:column="10"/></name> <operator pos:line="172" pos:column="11">=<pos:position pos:line="172" pos:column="12"/></operator> <sizeof pos:line="172" pos:column="13">sizeof<argument_list pos:line="172" pos:column="19">(<argument><expr><name pos:line="172" pos:column="20">ss<pos:position pos:line="172" pos:column="22"/></name></expr></argument>)<pos:position pos:line="172" pos:column="23"/></argument_list></sizeof></expr>;<pos:position pos:line="172" pos:column="24"/></expr_stmt>
    <if pos:line="173" pos:column="5">if <condition pos:line="173" pos:column="8">(<expr><call><name pos:line="173" pos:column="9">getsockname<pos:position pos:line="173" pos:column="20"/></name><argument_list pos:line="173" pos:column="20">(<argument><expr><name pos:line="173" pos:column="21">portsock<pos:position pos:line="173" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="31">sa<pos:position pos:line="173" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="173" pos:column="35">&amp;<pos:position pos:line="173" pos:column="40"/></operator><name pos:line="173" pos:column="36">sslen<pos:position pos:line="173" pos:column="41"/></name></expr></argument>)<pos:position pos:line="173" pos:column="42"/></argument_list></call> <operator pos:line="173" pos:column="43">&lt;<pos:position pos:line="173" pos:column="47"/></operator> <literal type="number" pos:line="173" pos:column="45">0<pos:position pos:line="173" pos:column="46"/></literal></expr>)<pos:position pos:line="173" pos:column="47"/></condition><then pos:line="173" pos:column="47"> <block pos:line="173" pos:column="48">{
      <expr_stmt><expr><call><name pos:line="174" pos:column="7">failf<pos:position pos:line="174" pos:column="12"/></name><argument_list pos:line="174" pos:column="12">(<argument><expr><name pos:line="174" pos:column="13">data<pos:position pos:line="174" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="174" pos:column="19">strerror<pos:position pos:line="174" pos:column="27"/></name><argument_list pos:line="174" pos:column="27">(<argument><expr><name pos:line="174" pos:column="28">errno<pos:position pos:line="174" pos:column="33"/></name></expr></argument>)<pos:position pos:line="174" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="174" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="175" pos:column="7">freeaddrinfo<pos:position pos:line="175" pos:column="19"/></name><argument_list pos:line="175" pos:column="19">(<argument><expr><name pos:line="175" pos:column="20">res<pos:position pos:line="175" pos:column="23"/></name></expr></argument>)<pos:position pos:line="175" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="25"/></expr_stmt>
      <return pos:line="176" pos:column="7">return <expr><name pos:line="176" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="176" pos:column="35"/></name></expr>;<pos:position pos:line="176" pos:column="36"/></return>
    }<pos:position pos:line="177" pos:column="6"/></block></then></if>

    <for pos:line="179" pos:column="5">for <control pos:line="179" pos:column="9">(<init><expr><name pos:line="179" pos:column="10">modep<pos:position pos:line="179" pos:column="15"/></name> <operator pos:line="179" pos:column="16">=<pos:position pos:line="179" pos:column="17"/></operator> <operator pos:line="179" pos:column="18">(<pos:position pos:line="179" pos:column="19"/></operator><name pos:line="179" pos:column="19">char<pos:position pos:line="179" pos:column="23"/></name> <operator pos:line="179" pos:column="24">*<pos:position pos:line="179" pos:column="25"/></operator><operator pos:line="179" pos:column="25">)<pos:position pos:line="179" pos:column="26"/></operator><name pos:line="179" pos:column="26">mode<pos:position pos:line="179" pos:column="30"/></name></expr>;<pos:position pos:line="179" pos:column="31"/></init> <condition><expr><name pos:line="179" pos:column="32">modep<pos:position pos:line="179" pos:column="37"/></name> <operator pos:line="179" pos:column="38">&amp;&amp;<pos:position pos:line="179" pos:column="48"/></operator> <operator pos:line="179" pos:column="41">*<pos:position pos:line="179" pos:column="42"/></operator><name pos:line="179" pos:column="42">modep<pos:position pos:line="179" pos:column="47"/></name></expr>;<pos:position pos:line="179" pos:column="48"/></condition> <incr><expr><name pos:line="179" pos:column="49">modep<pos:position pos:line="179" pos:column="54"/></name><operator pos:line="179" pos:column="54">++<pos:position pos:line="179" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="179" pos:column="57"/></control> <block pos:line="179" pos:column="58">{
      <decl_stmt><decl><type><name pos:line="180" pos:column="7">int<pos:position pos:line="180" pos:column="10"/></name></type> <name pos:line="180" pos:column="11">lprtaf<pos:position pos:line="180" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="180" pos:column="19">eprtaf<pos:position pos:line="180" pos:column="25"/></name></decl>;<pos:position pos:line="180" pos:column="26"/></decl_stmt>

      <switch pos:line="182" pos:column="7">switch <condition pos:line="182" pos:column="14">(<expr><name><name pos:line="182" pos:column="15">sa<pos:position pos:line="182" pos:column="17"/></name><operator pos:line="182" pos:column="17">-&gt;<pos:position pos:line="182" pos:column="22"/></operator><name pos:line="182" pos:column="19">sa_family<pos:position pos:line="182" pos:column="28"/></name></name></expr>)<pos:position pos:line="182" pos:column="29"/></condition> <block pos:line="182" pos:column="30">{
      <case pos:line="183" pos:column="7">case <expr><name pos:line="183" pos:column="12">AF_INET<pos:position pos:line="183" pos:column="19"/></name></expr>:<pos:position pos:line="183" pos:column="20"/></case>
        <expr_stmt><expr><name pos:line="184" pos:column="9">ap<pos:position pos:line="184" pos:column="11"/></name> <operator pos:line="184" pos:column="12">=<pos:position pos:line="184" pos:column="13"/></operator> <operator pos:line="184" pos:column="14">(<pos:position pos:line="184" pos:column="15"/></operator><name pos:line="184" pos:column="15">unsigned<pos:position pos:line="184" pos:column="23"/></name> <name pos:line="184" pos:column="24">char<pos:position pos:line="184" pos:column="28"/></name> <operator pos:line="184" pos:column="29">*<pos:position pos:line="184" pos:column="30"/></operator><operator pos:line="184" pos:column="30">)<pos:position pos:line="184" pos:column="31"/></operator><operator pos:line="184" pos:column="31">&amp;<pos:position pos:line="184" pos:column="36"/></operator><operator pos:line="184" pos:column="32">(<pos:position pos:line="184" pos:column="33"/></operator><operator pos:line="184" pos:column="33">(<pos:position pos:line="184" pos:column="34"/></operator>struct <name pos:line="184" pos:column="41">sockaddr_in<pos:position pos:line="184" pos:column="52"/></name> <operator pos:line="184" pos:column="53">*<pos:position pos:line="184" pos:column="54"/></operator><operator pos:line="184" pos:column="54">)<pos:position pos:line="184" pos:column="55"/></operator><operator pos:line="184" pos:column="55">&amp;<pos:position pos:line="184" pos:column="60"/></operator><name pos:line="184" pos:column="56">ss<pos:position pos:line="184" pos:column="58"/></name><operator pos:line="184" pos:column="58">)<pos:position pos:line="184" pos:column="59"/></operator><operator pos:line="184" pos:column="59">-&gt;<pos:position pos:line="184" pos:column="64"/></operator><name pos:line="184" pos:column="61">sin_addr<pos:position pos:line="184" pos:column="69"/></name></expr>;<pos:position pos:line="184" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><name pos:line="185" pos:column="9">alen<pos:position pos:line="185" pos:column="13"/></name> <operator pos:line="185" pos:column="14">=<pos:position pos:line="185" pos:column="15"/></operator> <sizeof pos:line="185" pos:column="16">sizeof<argument_list pos:line="185" pos:column="22">(<argument><expr><operator pos:line="185" pos:column="23">(<pos:position pos:line="185" pos:column="24"/></operator><operator pos:line="185" pos:column="24">(<pos:position pos:line="185" pos:column="25"/></operator>struct <name pos:line="185" pos:column="32">sockaddr_in<pos:position pos:line="185" pos:column="43"/></name> <operator pos:line="185" pos:column="44">*<pos:position pos:line="185" pos:column="45"/></operator><operator pos:line="185" pos:column="45">)<pos:position pos:line="185" pos:column="46"/></operator><operator pos:line="185" pos:column="46">&amp;<pos:position pos:line="185" pos:column="51"/></operator><name pos:line="185" pos:column="47">ss<pos:position pos:line="185" pos:column="49"/></name><operator pos:line="185" pos:column="49">)<pos:position pos:line="185" pos:column="50"/></operator><operator pos:line="185" pos:column="50">-&gt;<pos:position pos:line="185" pos:column="55"/></operator><name pos:line="185" pos:column="52">sin_addr<pos:position pos:line="185" pos:column="60"/></name></expr></argument>)<pos:position pos:line="185" pos:column="61"/></argument_list></sizeof></expr>;<pos:position pos:line="185" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name pos:line="186" pos:column="9">pp<pos:position pos:line="186" pos:column="11"/></name> <operator pos:line="186" pos:column="12">=<pos:position pos:line="186" pos:column="13"/></operator> <operator pos:line="186" pos:column="14">(<pos:position pos:line="186" pos:column="15"/></operator><name pos:line="186" pos:column="15">unsigned<pos:position pos:line="186" pos:column="23"/></name> <name pos:line="186" pos:column="24">char<pos:position pos:line="186" pos:column="28"/></name> <operator pos:line="186" pos:column="29">*<pos:position pos:line="186" pos:column="30"/></operator><operator pos:line="186" pos:column="30">)<pos:position pos:line="186" pos:column="31"/></operator><operator pos:line="186" pos:column="31">&amp;<pos:position pos:line="186" pos:column="36"/></operator><operator pos:line="186" pos:column="32">(<pos:position pos:line="186" pos:column="33"/></operator><operator pos:line="186" pos:column="33">(<pos:position pos:line="186" pos:column="34"/></operator>struct <name pos:line="186" pos:column="41">sockaddr_in<pos:position pos:line="186" pos:column="52"/></name> <operator pos:line="186" pos:column="53">*<pos:position pos:line="186" pos:column="54"/></operator><operator pos:line="186" pos:column="54">)<pos:position pos:line="186" pos:column="55"/></operator><operator pos:line="186" pos:column="55">&amp;<pos:position pos:line="186" pos:column="60"/></operator><name pos:line="186" pos:column="56">ss<pos:position pos:line="186" pos:column="58"/></name><operator pos:line="186" pos:column="58">)<pos:position pos:line="186" pos:column="59"/></operator><operator pos:line="186" pos:column="59">-&gt;<pos:position pos:line="186" pos:column="64"/></operator><name pos:line="186" pos:column="61">sin_port<pos:position pos:line="186" pos:column="69"/></name></expr>;<pos:position pos:line="186" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><name pos:line="187" pos:column="9">plen<pos:position pos:line="187" pos:column="13"/></name> <operator pos:line="187" pos:column="14">=<pos:position pos:line="187" pos:column="15"/></operator> <sizeof pos:line="187" pos:column="16">sizeof<argument_list pos:line="187" pos:column="22">(<argument><expr><operator pos:line="187" pos:column="23">(<pos:position pos:line="187" pos:column="24"/></operator><operator pos:line="187" pos:column="24">(<pos:position pos:line="187" pos:column="25"/></operator>struct <name pos:line="187" pos:column="32">sockaddr_in<pos:position pos:line="187" pos:column="43"/></name> <operator pos:line="187" pos:column="44">*<pos:position pos:line="187" pos:column="45"/></operator><operator pos:line="187" pos:column="45">)<pos:position pos:line="187" pos:column="46"/></operator><operator pos:line="187" pos:column="46">&amp;<pos:position pos:line="187" pos:column="51"/></operator><name pos:line="187" pos:column="47">ss<pos:position pos:line="187" pos:column="49"/></name><operator pos:line="187" pos:column="49">)<pos:position pos:line="187" pos:column="50"/></operator><operator pos:line="187" pos:column="50">-&gt;<pos:position pos:line="187" pos:column="55"/></operator><name pos:line="187" pos:column="52">sin_port<pos:position pos:line="187" pos:column="60"/></name></expr></argument>)<pos:position pos:line="187" pos:column="61"/></argument_list></sizeof></expr>;<pos:position pos:line="187" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name pos:line="188" pos:column="9">lprtaf<pos:position pos:line="188" pos:column="15"/></name> <operator pos:line="188" pos:column="16">=<pos:position pos:line="188" pos:column="17"/></operator> <literal type="number" pos:line="188" pos:column="18">4<pos:position pos:line="188" pos:column="19"/></literal></expr>;<pos:position pos:line="188" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="189" pos:column="9">eprtaf<pos:position pos:line="189" pos:column="15"/></name> <operator pos:line="189" pos:column="16">=<pos:position pos:line="189" pos:column="17"/></operator> <literal type="number" pos:line="189" pos:column="18">1<pos:position pos:line="189" pos:column="19"/></literal></expr>;<pos:position pos:line="189" pos:column="20"/></expr_stmt>
        <break pos:line="190" pos:column="9">break;<pos:position pos:line="190" pos:column="15"/></break>
      <case pos:line="191" pos:column="7">case <expr><name pos:line="191" pos:column="12">AF_INET6<pos:position pos:line="191" pos:column="20"/></name></expr>:<pos:position pos:line="191" pos:column="21"/></case>
        <expr_stmt><expr><name pos:line="192" pos:column="9">ap<pos:position pos:line="192" pos:column="11"/></name> <operator pos:line="192" pos:column="12">=<pos:position pos:line="192" pos:column="13"/></operator> <operator pos:line="192" pos:column="14">(<pos:position pos:line="192" pos:column="15"/></operator><name pos:line="192" pos:column="15">unsigned<pos:position pos:line="192" pos:column="23"/></name> <name pos:line="192" pos:column="24">char<pos:position pos:line="192" pos:column="28"/></name> <operator pos:line="192" pos:column="29">*<pos:position pos:line="192" pos:column="30"/></operator><operator pos:line="192" pos:column="30">)<pos:position pos:line="192" pos:column="31"/></operator><operator pos:line="192" pos:column="31">&amp;<pos:position pos:line="192" pos:column="36"/></operator><operator pos:line="192" pos:column="32">(<pos:position pos:line="192" pos:column="33"/></operator><operator pos:line="192" pos:column="33">(<pos:position pos:line="192" pos:column="34"/></operator>struct <name pos:line="192" pos:column="41">sockaddr_in6<pos:position pos:line="192" pos:column="53"/></name> <operator pos:line="192" pos:column="54">*<pos:position pos:line="192" pos:column="55"/></operator><operator pos:line="192" pos:column="55">)<pos:position pos:line="192" pos:column="56"/></operator><operator pos:line="192" pos:column="56">&amp;<pos:position pos:line="192" pos:column="61"/></operator><name pos:line="192" pos:column="57">ss<pos:position pos:line="192" pos:column="59"/></name><operator pos:line="192" pos:column="59">)<pos:position pos:line="192" pos:column="60"/></operator><operator pos:line="192" pos:column="60">-&gt;<pos:position pos:line="192" pos:column="65"/></operator><name pos:line="192" pos:column="62">sin6_addr<pos:position pos:line="192" pos:column="71"/></name></expr>;<pos:position pos:line="192" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name pos:line="193" pos:column="9">alen<pos:position pos:line="193" pos:column="13"/></name> <operator pos:line="193" pos:column="14">=<pos:position pos:line="193" pos:column="15"/></operator> <sizeof pos:line="193" pos:column="16">sizeof<argument_list pos:line="193" pos:column="22">(<argument><expr><operator pos:line="193" pos:column="23">(<pos:position pos:line="193" pos:column="24"/></operator><operator pos:line="193" pos:column="24">(<pos:position pos:line="193" pos:column="25"/></operator>struct <name pos:line="193" pos:column="32">sockaddr_in6<pos:position pos:line="193" pos:column="44"/></name> <operator pos:line="193" pos:column="45">*<pos:position pos:line="193" pos:column="46"/></operator><operator pos:line="193" pos:column="46">)<pos:position pos:line="193" pos:column="47"/></operator><operator pos:line="193" pos:column="47">&amp;<pos:position pos:line="193" pos:column="52"/></operator><name pos:line="193" pos:column="48">ss<pos:position pos:line="193" pos:column="50"/></name><operator pos:line="193" pos:column="50">)<pos:position pos:line="193" pos:column="51"/></operator><operator pos:line="193" pos:column="51">-&gt;<pos:position pos:line="193" pos:column="56"/></operator><name pos:line="193" pos:column="53">sin6_addr<pos:position pos:line="193" pos:column="62"/></name></expr></argument>)<pos:position pos:line="193" pos:column="63"/></argument_list></sizeof></expr>;<pos:position pos:line="193" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><name pos:line="194" pos:column="9">pp<pos:position pos:line="194" pos:column="11"/></name> <operator pos:line="194" pos:column="12">=<pos:position pos:line="194" pos:column="13"/></operator> <operator pos:line="194" pos:column="14">(<pos:position pos:line="194" pos:column="15"/></operator><name pos:line="194" pos:column="15">unsigned<pos:position pos:line="194" pos:column="23"/></name> <name pos:line="194" pos:column="24">char<pos:position pos:line="194" pos:column="28"/></name> <operator pos:line="194" pos:column="29">*<pos:position pos:line="194" pos:column="30"/></operator><operator pos:line="194" pos:column="30">)<pos:position pos:line="194" pos:column="31"/></operator><operator pos:line="194" pos:column="31">&amp;<pos:position pos:line="194" pos:column="36"/></operator><operator pos:line="194" pos:column="32">(<pos:position pos:line="194" pos:column="33"/></operator><operator pos:line="194" pos:column="33">(<pos:position pos:line="194" pos:column="34"/></operator>struct <name pos:line="194" pos:column="41">sockaddr_in6<pos:position pos:line="194" pos:column="53"/></name> <operator pos:line="194" pos:column="54">*<pos:position pos:line="194" pos:column="55"/></operator><operator pos:line="194" pos:column="55">)<pos:position pos:line="194" pos:column="56"/></operator><operator pos:line="194" pos:column="56">&amp;<pos:position pos:line="194" pos:column="61"/></operator><name pos:line="194" pos:column="57">ss<pos:position pos:line="194" pos:column="59"/></name><operator pos:line="194" pos:column="59">)<pos:position pos:line="194" pos:column="60"/></operator><operator pos:line="194" pos:column="60">-&gt;<pos:position pos:line="194" pos:column="65"/></operator><name pos:line="194" pos:column="62">sin6_port<pos:position pos:line="194" pos:column="71"/></name></expr>;<pos:position pos:line="194" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name pos:line="195" pos:column="9">plen<pos:position pos:line="195" pos:column="13"/></name> <operator pos:line="195" pos:column="14">=<pos:position pos:line="195" pos:column="15"/></operator> <sizeof pos:line="195" pos:column="16">sizeof<argument_list pos:line="195" pos:column="22">(<argument><expr><operator pos:line="195" pos:column="23">(<pos:position pos:line="195" pos:column="24"/></operator><operator pos:line="195" pos:column="24">(<pos:position pos:line="195" pos:column="25"/></operator>struct <name pos:line="195" pos:column="32">sockaddr_in6<pos:position pos:line="195" pos:column="44"/></name> <operator pos:line="195" pos:column="45">*<pos:position pos:line="195" pos:column="46"/></operator><operator pos:line="195" pos:column="46">)<pos:position pos:line="195" pos:column="47"/></operator><operator pos:line="195" pos:column="47">&amp;<pos:position pos:line="195" pos:column="52"/></operator><name pos:line="195" pos:column="48">ss<pos:position pos:line="195" pos:column="50"/></name><operator pos:line="195" pos:column="50">)<pos:position pos:line="195" pos:column="51"/></operator><operator pos:line="195" pos:column="51">-&gt;<pos:position pos:line="195" pos:column="56"/></operator><name pos:line="195" pos:column="53">sin6_port<pos:position pos:line="195" pos:column="62"/></name></expr></argument>)<pos:position pos:line="195" pos:column="63"/></argument_list></sizeof></expr>;<pos:position pos:line="195" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><name pos:line="196" pos:column="9">lprtaf<pos:position pos:line="196" pos:column="15"/></name> <operator pos:line="196" pos:column="16">=<pos:position pos:line="196" pos:column="17"/></operator> <literal type="number" pos:line="196" pos:column="18">6<pos:position pos:line="196" pos:column="19"/></literal></expr>;<pos:position pos:line="196" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="197" pos:column="9">eprtaf<pos:position pos:line="197" pos:column="15"/></name> <operator pos:line="197" pos:column="16">=<pos:position pos:line="197" pos:column="17"/></operator> <literal type="number" pos:line="197" pos:column="18">2<pos:position pos:line="197" pos:column="19"/></literal></expr>;<pos:position pos:line="197" pos:column="20"/></expr_stmt>
        <break pos:line="198" pos:column="9">break;<pos:position pos:line="198" pos:column="15"/></break>
      <default pos:line="199" pos:column="7">default:<pos:position pos:line="199" pos:column="15"/></default>
        <expr_stmt><expr><name pos:line="200" pos:column="9">ap<pos:position pos:line="200" pos:column="11"/></name> <operator pos:line="200" pos:column="12">=<pos:position pos:line="200" pos:column="13"/></operator> <name pos:line="200" pos:column="14">pp<pos:position pos:line="200" pos:column="16"/></name> <operator pos:line="200" pos:column="17">=<pos:position pos:line="200" pos:column="18"/></operator> <name pos:line="200" pos:column="19">NULL<pos:position pos:line="200" pos:column="23"/></name></expr>;<pos:position pos:line="200" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="201" pos:column="9">lprtaf<pos:position pos:line="201" pos:column="15"/></name> <operator pos:line="201" pos:column="16">=<pos:position pos:line="201" pos:column="17"/></operator> <name pos:line="201" pos:column="18">eprtaf<pos:position pos:line="201" pos:column="24"/></name> <operator pos:line="201" pos:column="25">=<pos:position pos:line="201" pos:column="26"/></operator> <operator pos:line="201" pos:column="27">-<pos:position pos:line="201" pos:column="28"/></operator><literal type="number" pos:line="201" pos:column="28">1<pos:position pos:line="201" pos:column="29"/></literal></expr>;<pos:position pos:line="201" pos:column="30"/></expr_stmt>
        <break pos:line="202" pos:column="9">break;<pos:position pos:line="202" pos:column="15"/></break>
      }<pos:position pos:line="203" pos:column="8"/></block></switch>

      <if pos:line="205" pos:column="7">if <condition pos:line="205" pos:column="10">(<expr><call><name pos:line="205" pos:column="11">strcmp<pos:position pos:line="205" pos:column="17"/></name><argument_list pos:line="205" pos:column="17">(<argument><expr><operator pos:line="205" pos:column="18">*<pos:position pos:line="205" pos:column="19"/></operator><name pos:line="205" pos:column="19">modep<pos:position pos:line="205" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="205" pos:column="26">"EPRT"<pos:position pos:line="205" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="205" pos:column="33"/></argument_list></call> <operator pos:line="205" pos:column="34">==<pos:position pos:line="205" pos:column="36"/></operator> <literal type="number" pos:line="205" pos:column="37">0<pos:position pos:line="205" pos:column="38"/></literal></expr>)<pos:position pos:line="205" pos:column="39"/></condition><then pos:line="205" pos:column="39"> <block pos:line="205" pos:column="40">{
        <if pos:line="206" pos:column="9">if <condition pos:line="206" pos:column="12">(<expr><name pos:line="206" pos:column="13">eprtaf<pos:position pos:line="206" pos:column="19"/></name> <operator pos:line="206" pos:column="20">&lt;<pos:position pos:line="206" pos:column="24"/></operator> <literal type="number" pos:line="206" pos:column="22">0<pos:position pos:line="206" pos:column="23"/></literal></expr>)<pos:position pos:line="206" pos:column="24"/></condition><then pos:line="206" pos:column="24">
          <block type="pseudo"><continue pos:line="207" pos:column="11">continue;<pos:position pos:line="207" pos:column="20"/></continue></block></then></if>
        <if pos:line="208" pos:column="9">if <condition pos:line="208" pos:column="12">(<expr><call><name pos:line="208" pos:column="13">getnameinfo<pos:position pos:line="208" pos:column="24"/></name><argument_list pos:line="208" pos:column="24">(<argument><expr><operator pos:line="208" pos:column="25">(<pos:position pos:line="208" pos:column="26"/></operator>struct <name pos:line="208" pos:column="33">sockaddr<pos:position pos:line="208" pos:column="41"/></name> <operator pos:line="208" pos:column="42">*<pos:position pos:line="208" pos:column="43"/></operator><operator pos:line="208" pos:column="43">)<pos:position pos:line="208" pos:column="44"/></operator><operator pos:line="208" pos:column="44">&amp;<pos:position pos:line="208" pos:column="49"/></operator><name pos:line="208" pos:column="45">ss<pos:position pos:line="208" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="208" pos:column="49">sslen<pos:position pos:line="208" pos:column="54"/></name></expr></argument>,
                         <argument><expr><name pos:line="209" pos:column="26">portmsgbuf<pos:position pos:line="209" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="209" pos:column="38">sizeof<argument_list pos:line="209" pos:column="44">(<argument><expr><name pos:line="209" pos:column="45">portmsgbuf<pos:position pos:line="209" pos:column="55"/></name></expr></argument>)<pos:position pos:line="209" pos:column="56"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="209" pos:column="58">tmp<pos:position pos:line="209" pos:column="61"/></name></expr></argument>, <argument><expr><sizeof pos:line="209" pos:column="63">sizeof<argument_list pos:line="209" pos:column="69">(<argument><expr><name pos:line="209" pos:column="70">tmp<pos:position pos:line="209" pos:column="73"/></name></expr></argument>)<pos:position pos:line="209" pos:column="74"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="209" pos:column="76">niflags<pos:position pos:line="209" pos:column="83"/></name></expr></argument>)<pos:position pos:line="209" pos:column="84"/></argument_list></call></expr>)<pos:position pos:line="209" pos:column="85"/></condition><then pos:line="209" pos:column="85">
          <block type="pseudo"><continue pos:line="210" pos:column="11">continue;<pos:position pos:line="210" pos:column="20"/></continue></block></then></if>

        <comment type="block" pos:line="212" pos:column="9">/* do not transmit IPv6 scope identifier to the wire */</comment>
      	<if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><name><name pos:line="213" pos:column="13">sa<pos:position pos:line="213" pos:column="15"/></name><operator pos:line="213" pos:column="15">-&gt;<pos:position pos:line="213" pos:column="20"/></operator><name pos:line="213" pos:column="17">sa_family<pos:position pos:line="213" pos:column="26"/></name></name> <operator pos:line="213" pos:column="27">==<pos:position pos:line="213" pos:column="29"/></operator> <name pos:line="213" pos:column="30">AF_INET6<pos:position pos:line="213" pos:column="38"/></name></expr>)<pos:position pos:line="213" pos:column="39"/></condition><then pos:line="213" pos:column="39"> <block pos:line="213" pos:column="40">{
          <decl_stmt><decl><type><name pos:line="214" pos:column="11">char<pos:position pos:line="214" pos:column="15"/></name> <modifier pos:line="214" pos:column="16">*<pos:position pos:line="214" pos:column="17"/></modifier></type><name pos:line="214" pos:column="17">q<pos:position pos:line="214" pos:column="18"/></name> <init pos:line="214" pos:column="19">= <expr><call><name pos:line="214" pos:column="21">strchr<pos:position pos:line="214" pos:column="27"/></name><argument_list pos:line="214" pos:column="27">(<argument><expr><name pos:line="214" pos:column="28">portmsgbuf<pos:position pos:line="214" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="214" pos:column="40">'%'<pos:position pos:line="214" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="214" pos:column="45"/></decl_stmt>
          <if pos:line="215" pos:column="11">if <condition pos:line="215" pos:column="14">(<expr><name pos:line="215" pos:column="15">q<pos:position pos:line="215" pos:column="16"/></name></expr>)<pos:position pos:line="215" pos:column="17"/></condition><then pos:line="215" pos:column="17">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="216" pos:column="13">*<pos:position pos:line="216" pos:column="14"/></operator><name pos:line="216" pos:column="14">q<pos:position pos:line="216" pos:column="15"/></name> <operator pos:line="216" pos:column="16">=<pos:position pos:line="216" pos:column="17"/></operator> <literal type="char" pos:line="216" pos:column="18">'\0'<pos:position pos:line="216" pos:column="22"/></literal></expr>;<pos:position pos:line="216" pos:column="23"/></expr_stmt></block></then></if>
        }<pos:position pos:line="217" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="219" pos:column="9">ftpsendf<pos:position pos:line="219" pos:column="17"/></name><argument_list pos:line="219" pos:column="17">(<argument><expr><name><name pos:line="219" pos:column="18">conn<pos:position pos:line="219" pos:column="22"/></name><operator pos:line="219" pos:column="22">-&gt;<pos:position pos:line="219" pos:column="27"/></operator><name pos:line="219" pos:column="24">firstsocket<pos:position pos:line="219" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="37">conn<pos:position pos:line="219" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="43">"%s |%d|%s|%s|"<pos:position pos:line="219" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="219" pos:column="60">*<pos:position pos:line="219" pos:column="61"/></operator><name pos:line="219" pos:column="61">modep<pos:position pos:line="219" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="68">eprtaf<pos:position pos:line="219" pos:column="74"/></name></expr></argument>,
                 <argument><expr><name pos:line="220" pos:column="18">portmsgbuf<pos:position pos:line="220" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="30">tmp<pos:position pos:line="220" pos:column="33"/></name></expr></argument>)<pos:position pos:line="220" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="35"/></expr_stmt>
      }<pos:position pos:line="221" pos:column="8"/></block></then> <elseif pos:line="221" pos:column="9">else <if pos:line="221" pos:column="14">if <condition pos:line="221" pos:column="17">(<expr><call><name pos:line="221" pos:column="18">strcmp<pos:position pos:line="221" pos:column="24"/></name><argument_list pos:line="221" pos:column="24">(<argument><expr><operator pos:line="221" pos:column="25">*<pos:position pos:line="221" pos:column="26"/></operator><name pos:line="221" pos:column="26">modep<pos:position pos:line="221" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="221" pos:column="33">"LPRT"<pos:position pos:line="221" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="221" pos:column="40"/></argument_list></call> <operator pos:line="221" pos:column="41">==<pos:position pos:line="221" pos:column="43"/></operator> <literal type="number" pos:line="221" pos:column="44">0<pos:position pos:line="221" pos:column="45"/></literal> <operator pos:line="221" pos:column="46">||<pos:position pos:line="221" pos:column="48"/></operator>
                 <call><name pos:line="222" pos:column="18">strcmp<pos:position pos:line="222" pos:column="24"/></name><argument_list pos:line="222" pos:column="24">(<argument><expr><operator pos:line="222" pos:column="25">*<pos:position pos:line="222" pos:column="26"/></operator><name pos:line="222" pos:column="26">modep<pos:position pos:line="222" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="222" pos:column="33">"PORT"<pos:position pos:line="222" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="222" pos:column="40"/></argument_list></call> <operator pos:line="222" pos:column="41">==<pos:position pos:line="222" pos:column="43"/></operator> <literal type="number" pos:line="222" pos:column="44">0<pos:position pos:line="222" pos:column="45"/></literal></expr>)<pos:position pos:line="222" pos:column="46"/></condition><then pos:line="222" pos:column="46"> <block pos:line="222" pos:column="47">{
        <decl_stmt><decl><type><name pos:line="223" pos:column="9">int<pos:position pos:line="223" pos:column="12"/></name></type> <name pos:line="223" pos:column="13">i<pos:position pos:line="223" pos:column="14"/></name></decl>;<pos:position pos:line="223" pos:column="15"/></decl_stmt>

        <if pos:line="225" pos:column="9">if <condition pos:line="225" pos:column="12">(<expr><call><name pos:line="225" pos:column="13">strcmp<pos:position pos:line="225" pos:column="19"/></name><argument_list pos:line="225" pos:column="19">(<argument><expr><operator pos:line="225" pos:column="20">*<pos:position pos:line="225" pos:column="21"/></operator><name pos:line="225" pos:column="21">modep<pos:position pos:line="225" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="225" pos:column="28">"LPRT"<pos:position pos:line="225" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="225" pos:column="35"/></argument_list></call> <operator pos:line="225" pos:column="36">==<pos:position pos:line="225" pos:column="38"/></operator> <literal type="number" pos:line="225" pos:column="39">0<pos:position pos:line="225" pos:column="40"/></literal> <operator pos:line="225" pos:column="41">&amp;&amp;<pos:position pos:line="225" pos:column="51"/></operator> <name pos:line="225" pos:column="44">lprtaf<pos:position pos:line="225" pos:column="50"/></name> <operator pos:line="225" pos:column="51">&lt;<pos:position pos:line="225" pos:column="55"/></operator> <literal type="number" pos:line="225" pos:column="53">0<pos:position pos:line="225" pos:column="54"/></literal></expr>)<pos:position pos:line="225" pos:column="55"/></condition><then pos:line="225" pos:column="55">
          <block type="pseudo"><continue pos:line="226" pos:column="11">continue;<pos:position pos:line="226" pos:column="20"/></continue></block></then></if>
        <if pos:line="227" pos:column="9">if <condition pos:line="227" pos:column="12">(<expr><call><name pos:line="227" pos:column="13">strcmp<pos:position pos:line="227" pos:column="19"/></name><argument_list pos:line="227" pos:column="19">(<argument><expr><operator pos:line="227" pos:column="20">*<pos:position pos:line="227" pos:column="21"/></operator><name pos:line="227" pos:column="21">modep<pos:position pos:line="227" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="227" pos:column="28">"PORT"<pos:position pos:line="227" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="227" pos:column="35"/></argument_list></call> <operator pos:line="227" pos:column="36">==<pos:position pos:line="227" pos:column="38"/></operator> <literal type="number" pos:line="227" pos:column="39">0<pos:position pos:line="227" pos:column="40"/></literal> <operator pos:line="227" pos:column="41">&amp;&amp;<pos:position pos:line="227" pos:column="51"/></operator> <name><name pos:line="227" pos:column="44">sa<pos:position pos:line="227" pos:column="46"/></name><operator pos:line="227" pos:column="46">-&gt;<pos:position pos:line="227" pos:column="51"/></operator><name pos:line="227" pos:column="48">sa_family<pos:position pos:line="227" pos:column="57"/></name></name> <operator pos:line="227" pos:column="58">!=<pos:position pos:line="227" pos:column="60"/></operator> <name pos:line="227" pos:column="61">AF_INET<pos:position pos:line="227" pos:column="68"/></name></expr>)<pos:position pos:line="227" pos:column="69"/></condition><then pos:line="227" pos:column="69">
          <block type="pseudo"><continue pos:line="228" pos:column="11">continue;<pos:position pos:line="228" pos:column="20"/></continue></block></then></if>

        <expr_stmt><expr><name><name pos:line="230" pos:column="9">portmsgbuf<pos:position pos:line="230" pos:column="19"/></name><index pos:line="230" pos:column="19">[<expr><literal type="number" pos:line="230" pos:column="20">0<pos:position pos:line="230" pos:column="21"/></literal></expr>]<pos:position pos:line="230" pos:column="22"/></index></name> <operator pos:line="230" pos:column="23">=<pos:position pos:line="230" pos:column="24"/></operator> <literal type="char" pos:line="230" pos:column="25">'\0'<pos:position pos:line="230" pos:column="29"/></literal></expr>;<pos:position pos:line="230" pos:column="30"/></expr_stmt>
        <if pos:line="231" pos:column="9">if <condition pos:line="231" pos:column="12">(<expr><call><name pos:line="231" pos:column="13">strcmp<pos:position pos:line="231" pos:column="19"/></name><argument_list pos:line="231" pos:column="19">(<argument><expr><operator pos:line="231" pos:column="20">*<pos:position pos:line="231" pos:column="21"/></operator><name pos:line="231" pos:column="21">modep<pos:position pos:line="231" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="231" pos:column="28">"LPRT"<pos:position pos:line="231" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="231" pos:column="35"/></argument_list></call> <operator pos:line="231" pos:column="36">==<pos:position pos:line="231" pos:column="38"/></operator> <literal type="number" pos:line="231" pos:column="39">0<pos:position pos:line="231" pos:column="40"/></literal></expr>)<pos:position pos:line="231" pos:column="41"/></condition><then pos:line="231" pos:column="41"> <block pos:line="231" pos:column="42">{
          <expr_stmt><expr><call><name pos:line="232" pos:column="11">snprintf<pos:position pos:line="232" pos:column="19"/></name><argument_list pos:line="232" pos:column="19">(<argument><expr><name pos:line="232" pos:column="20">tmp<pos:position pos:line="232" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="232" pos:column="25">sizeof<argument_list pos:line="232" pos:column="31">(<argument><expr><name pos:line="232" pos:column="32">tmp<pos:position pos:line="232" pos:column="35"/></name></expr></argument>)<pos:position pos:line="232" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="232" pos:column="38">"%d,%d"<pos:position pos:line="232" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="232" pos:column="47">lprtaf<pos:position pos:line="232" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="232" pos:column="55">alen<pos:position pos:line="232" pos:column="59"/></name></expr></argument>)<pos:position pos:line="232" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="61"/></expr_stmt>
          <if pos:line="233" pos:column="11">if <condition pos:line="233" pos:column="14">(<expr><call><name pos:line="233" pos:column="15">strlcat<pos:position pos:line="233" pos:column="22"/></name><argument_list pos:line="233" pos:column="22">(<argument><expr><name pos:line="233" pos:column="23">portmsgbuf<pos:position pos:line="233" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="233" pos:column="35">tmp<pos:position pos:line="233" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="233" pos:column="40">sizeof<argument_list pos:line="233" pos:column="46">(<argument><expr><name pos:line="233" pos:column="47">portmsgbuf<pos:position pos:line="233" pos:column="57"/></name></expr></argument>)<pos:position pos:line="233" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="233" pos:column="59"/></argument_list></call> <operator pos:line="233" pos:column="60">&gt;=<pos:position pos:line="233" pos:column="65"/></operator> <sizeof pos:line="233" pos:column="63">sizeof<argument_list pos:line="233" pos:column="69">(<argument><expr><name pos:line="233" pos:column="70">portmsgbuf<pos:position pos:line="233" pos:column="80"/></name></expr></argument>)<pos:position pos:line="233" pos:column="81"/></argument_list></sizeof></expr>)<pos:position pos:line="233" pos:column="82"/></condition><then pos:line="233" pos:column="82"> <block pos:line="233" pos:column="83">{
            <continue pos:line="234" pos:column="13">continue;<pos:position pos:line="234" pos:column="22"/></continue>
          }<pos:position pos:line="235" pos:column="12"/></block></then></if>
        }<pos:position pos:line="236" pos:column="10"/></block></then></if>

        <for pos:line="238" pos:column="9">for <control pos:line="238" pos:column="13">(<init><expr><name pos:line="238" pos:column="14">i<pos:position pos:line="238" pos:column="15"/></name> <operator pos:line="238" pos:column="16">=<pos:position pos:line="238" pos:column="17"/></operator> <literal type="number" pos:line="238" pos:column="18">0<pos:position pos:line="238" pos:column="19"/></literal></expr>;<pos:position pos:line="238" pos:column="20"/></init> <condition><expr><name pos:line="238" pos:column="21">i<pos:position pos:line="238" pos:column="22"/></name> <operator pos:line="238" pos:column="23">&lt;<pos:position pos:line="238" pos:column="27"/></operator> <name pos:line="238" pos:column="25">alen<pos:position pos:line="238" pos:column="29"/></name></expr>;<pos:position pos:line="238" pos:column="30"/></condition> <incr><expr><name pos:line="238" pos:column="31">i<pos:position pos:line="238" pos:column="32"/></name><operator pos:line="238" pos:column="32">++<pos:position pos:line="238" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="238" pos:column="35"/></control> <block pos:line="238" pos:column="36">{
          <if pos:line="239" pos:column="11">if <condition pos:line="239" pos:column="14">(<expr><name><name pos:line="239" pos:column="15">portmsgbuf<pos:position pos:line="239" pos:column="25"/></name><index pos:line="239" pos:column="25">[<expr><literal type="number" pos:line="239" pos:column="26">0<pos:position pos:line="239" pos:column="27"/></literal></expr>]<pos:position pos:line="239" pos:column="28"/></index></name></expr>)<pos:position pos:line="239" pos:column="29"/></condition><then pos:line="239" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="240" pos:column="13">snprintf<pos:position pos:line="240" pos:column="21"/></name><argument_list pos:line="240" pos:column="21">(<argument><expr><name pos:line="240" pos:column="22">tmp<pos:position pos:line="240" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="240" pos:column="27">sizeof<argument_list pos:line="240" pos:column="33">(<argument><expr><name pos:line="240" pos:column="34">tmp<pos:position pos:line="240" pos:column="37"/></name></expr></argument>)<pos:position pos:line="240" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="240" pos:column="40">",%u"<pos:position pos:line="240" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="240" pos:column="47">ap<pos:position pos:line="240" pos:column="49"/></name><index pos:line="240" pos:column="49">[<expr><name pos:line="240" pos:column="50">i<pos:position pos:line="240" pos:column="51"/></name></expr>]<pos:position pos:line="240" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="240" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="54"/></expr_stmt></block></then>
          <else pos:line="241" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="242" pos:column="13">snprintf<pos:position pos:line="242" pos:column="21"/></name><argument_list pos:line="242" pos:column="21">(<argument><expr><name pos:line="242" pos:column="22">tmp<pos:position pos:line="242" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="242" pos:column="27">sizeof<argument_list pos:line="242" pos:column="33">(<argument><expr><name pos:line="242" pos:column="34">tmp<pos:position pos:line="242" pos:column="37"/></name></expr></argument>)<pos:position pos:line="242" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="242" pos:column="40">"%u"<pos:position pos:line="242" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="242" pos:column="46">ap<pos:position pos:line="242" pos:column="48"/></name><index pos:line="242" pos:column="48">[<expr><name pos:line="242" pos:column="49">i<pos:position pos:line="242" pos:column="50"/></name></expr>]<pos:position pos:line="242" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="242" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="53"/></expr_stmt></block></else></if>

          <if pos:line="244" pos:column="11">if <condition pos:line="244" pos:column="14">(<expr><call><name pos:line="244" pos:column="15">strlcat<pos:position pos:line="244" pos:column="22"/></name><argument_list pos:line="244" pos:column="22">(<argument><expr><name pos:line="244" pos:column="23">portmsgbuf<pos:position pos:line="244" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="244" pos:column="35">tmp<pos:position pos:line="244" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="244" pos:column="40">sizeof<argument_list pos:line="244" pos:column="46">(<argument><expr><name pos:line="244" pos:column="47">portmsgbuf<pos:position pos:line="244" pos:column="57"/></name></expr></argument>)<pos:position pos:line="244" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="244" pos:column="59"/></argument_list></call> <operator pos:line="244" pos:column="60">&gt;=<pos:position pos:line="244" pos:column="65"/></operator> <sizeof pos:line="244" pos:column="63">sizeof<argument_list pos:line="244" pos:column="69">(<argument><expr><name pos:line="244" pos:column="70">portmsgbuf<pos:position pos:line="244" pos:column="80"/></name></expr></argument>)<pos:position pos:line="244" pos:column="81"/></argument_list></sizeof></expr>)<pos:position pos:line="244" pos:column="82"/></condition><then pos:line="244" pos:column="82"> <block pos:line="244" pos:column="83">{
            <continue pos:line="245" pos:column="13">continue;<pos:position pos:line="245" pos:column="22"/></continue>
          }<pos:position pos:line="246" pos:column="12"/></block></then></if>
        }<pos:position pos:line="247" pos:column="10"/></block></for>

        <if pos:line="249" pos:column="9">if <condition pos:line="249" pos:column="12">(<expr><call><name pos:line="249" pos:column="13">strcmp<pos:position pos:line="249" pos:column="19"/></name><argument_list pos:line="249" pos:column="19">(<argument><expr><operator pos:line="249" pos:column="20">*<pos:position pos:line="249" pos:column="21"/></operator><name pos:line="249" pos:column="21">modep<pos:position pos:line="249" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="249" pos:column="28">"LPRT"<pos:position pos:line="249" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="249" pos:column="35"/></argument_list></call> <operator pos:line="249" pos:column="36">==<pos:position pos:line="249" pos:column="38"/></operator> <literal type="number" pos:line="249" pos:column="39">0<pos:position pos:line="249" pos:column="40"/></literal></expr>)<pos:position pos:line="249" pos:column="41"/></condition><then pos:line="249" pos:column="41"> <block pos:line="249" pos:column="42">{
          <expr_stmt><expr><call><name pos:line="250" pos:column="11">snprintf<pos:position pos:line="250" pos:column="19"/></name><argument_list pos:line="250" pos:column="19">(<argument><expr><name pos:line="250" pos:column="20">tmp<pos:position pos:line="250" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="250" pos:column="25">sizeof<argument_list pos:line="250" pos:column="31">(<argument><expr><name pos:line="250" pos:column="32">tmp<pos:position pos:line="250" pos:column="35"/></name></expr></argument>)<pos:position pos:line="250" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="250" pos:column="38">",%d"<pos:position pos:line="250" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="250" pos:column="45">plen<pos:position pos:line="250" pos:column="49"/></name></expr></argument>)<pos:position pos:line="250" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="51"/></expr_stmt>

          <if pos:line="252" pos:column="11">if <condition pos:line="252" pos:column="14">(<expr><call><name pos:line="252" pos:column="15">strlcat<pos:position pos:line="252" pos:column="22"/></name><argument_list pos:line="252" pos:column="22">(<argument><expr><name pos:line="252" pos:column="23">portmsgbuf<pos:position pos:line="252" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="252" pos:column="35">tmp<pos:position pos:line="252" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="252" pos:column="40">sizeof<argument_list pos:line="252" pos:column="46">(<argument><expr><name pos:line="252" pos:column="47">portmsgbuf<pos:position pos:line="252" pos:column="57"/></name></expr></argument>)<pos:position pos:line="252" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="252" pos:column="59"/></argument_list></call> <operator pos:line="252" pos:column="60">&gt;=<pos:position pos:line="252" pos:column="65"/></operator> <sizeof pos:line="252" pos:column="63">sizeof<argument_list pos:line="252" pos:column="69">(<argument><expr><name pos:line="252" pos:column="70">portmsgbuf<pos:position pos:line="252" pos:column="80"/></name></expr></argument>)<pos:position pos:line="252" pos:column="81"/></argument_list></sizeof></expr>)<pos:position pos:line="252" pos:column="82"/></condition><then pos:line="252" pos:column="82">
            <block type="pseudo"><continue pos:line="253" pos:column="13">continue;<pos:position pos:line="253" pos:column="22"/></continue></block></then></if>
        }<pos:position pos:line="254" pos:column="10"/></block></then></if>

        <for pos:line="256" pos:column="9">for <control pos:line="256" pos:column="13">(<init><expr><name pos:line="256" pos:column="14">i<pos:position pos:line="256" pos:column="15"/></name> <operator pos:line="256" pos:column="16">=<pos:position pos:line="256" pos:column="17"/></operator> <literal type="number" pos:line="256" pos:column="18">0<pos:position pos:line="256" pos:column="19"/></literal></expr>;<pos:position pos:line="256" pos:column="20"/></init> <condition><expr><name pos:line="256" pos:column="21">i<pos:position pos:line="256" pos:column="22"/></name> <operator pos:line="256" pos:column="23">&lt;<pos:position pos:line="256" pos:column="27"/></operator> <name pos:line="256" pos:column="25">plen<pos:position pos:line="256" pos:column="29"/></name></expr>;<pos:position pos:line="256" pos:column="30"/></condition> <incr><expr><name pos:line="256" pos:column="31">i<pos:position pos:line="256" pos:column="32"/></name><operator pos:line="256" pos:column="32">++<pos:position pos:line="256" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="256" pos:column="35"/></control> <block pos:line="256" pos:column="36">{
          <expr_stmt><expr><call><name pos:line="257" pos:column="11">snprintf<pos:position pos:line="257" pos:column="19"/></name><argument_list pos:line="257" pos:column="19">(<argument><expr><name pos:line="257" pos:column="20">tmp<pos:position pos:line="257" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="257" pos:column="25">sizeof<argument_list pos:line="257" pos:column="31">(<argument><expr><name pos:line="257" pos:column="32">tmp<pos:position pos:line="257" pos:column="35"/></name></expr></argument>)<pos:position pos:line="257" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="257" pos:column="38">",%u"<pos:position pos:line="257" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="257" pos:column="45">pp<pos:position pos:line="257" pos:column="47"/></name><index pos:line="257" pos:column="47">[<expr><name pos:line="257" pos:column="48">i<pos:position pos:line="257" pos:column="49"/></name></expr>]<pos:position pos:line="257" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="257" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="52"/></expr_stmt>

          <if pos:line="259" pos:column="11">if <condition pos:line="259" pos:column="14">(<expr><call><name pos:line="259" pos:column="15">strlcat<pos:position pos:line="259" pos:column="22"/></name><argument_list pos:line="259" pos:column="22">(<argument><expr><name pos:line="259" pos:column="23">portmsgbuf<pos:position pos:line="259" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="259" pos:column="35">tmp<pos:position pos:line="259" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="259" pos:column="40">sizeof<argument_list pos:line="259" pos:column="46">(<argument><expr><name pos:line="259" pos:column="47">portmsgbuf<pos:position pos:line="259" pos:column="57"/></name></expr></argument>)<pos:position pos:line="259" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="259" pos:column="59"/></argument_list></call> <operator pos:line="259" pos:column="60">&gt;=<pos:position pos:line="259" pos:column="65"/></operator> <sizeof pos:line="259" pos:column="63">sizeof<argument_list pos:line="259" pos:column="69">(<argument><expr><name pos:line="259" pos:column="70">portmsgbuf<pos:position pos:line="259" pos:column="80"/></name></expr></argument>)<pos:position pos:line="259" pos:column="81"/></argument_list></sizeof></expr>)<pos:position pos:line="259" pos:column="82"/></condition><then pos:line="259" pos:column="82"> <block pos:line="259" pos:column="83">{
              <continue pos:line="260" pos:column="15">continue;<pos:position pos:line="260" pos:column="24"/></continue>
          }<pos:position pos:line="261" pos:column="12"/></block></then></if>
        }<pos:position pos:line="262" pos:column="10"/></block></for>

        <expr_stmt><expr><call><name pos:line="264" pos:column="9">ftpsendf<pos:position pos:line="264" pos:column="17"/></name><argument_list pos:line="264" pos:column="17">(<argument><expr><name><name pos:line="264" pos:column="18">conn<pos:position pos:line="264" pos:column="22"/></name><operator pos:line="264" pos:column="22">-&gt;<pos:position pos:line="264" pos:column="27"/></operator><name pos:line="264" pos:column="24">firstsocket<pos:position pos:line="264" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="264" pos:column="37">conn<pos:position pos:line="264" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="264" pos:column="43">"%s %s"<pos:position pos:line="264" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="264" pos:column="52">*<pos:position pos:line="264" pos:column="53"/></operator><name pos:line="264" pos:column="53">modep<pos:position pos:line="264" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="264" pos:column="60">portmsgbuf<pos:position pos:line="264" pos:column="70"/></name></expr></argument>)<pos:position pos:line="264" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="72"/></expr_stmt>
      }<pos:position pos:line="265" pos:column="8"/></block></then></if></elseif></if>

      <expr_stmt><expr><name pos:line="267" pos:column="7">nread<pos:position pos:line="267" pos:column="12"/></name> <operator pos:line="267" pos:column="13">=<pos:position pos:line="267" pos:column="14"/></operator> <call><name pos:line="267" pos:column="15">Curl_GetFTPResponse<pos:position pos:line="267" pos:column="34"/></name><argument_list pos:line="267" pos:column="34">(<argument><expr><name><name pos:line="267" pos:column="35">conn<pos:position pos:line="267" pos:column="39"/></name><operator pos:line="267" pos:column="39">-&gt;<pos:position pos:line="267" pos:column="44"/></operator><name pos:line="267" pos:column="41">firstsocket<pos:position pos:line="267" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="267" pos:column="54">buf<pos:position pos:line="267" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="267" pos:column="59">conn<pos:position pos:line="267" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="267" pos:column="65">&amp;<pos:position pos:line="267" pos:column="70"/></operator><name pos:line="267" pos:column="66">ftpcode<pos:position pos:line="267" pos:column="73"/></name></expr></argument>)<pos:position pos:line="267" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="75"/></expr_stmt>
      <if pos:line="268" pos:column="7">if<condition pos:line="268" pos:column="9">(<expr><name pos:line="268" pos:column="10">nread<pos:position pos:line="268" pos:column="15"/></name> <operator pos:line="268" pos:column="16">&lt;<pos:position pos:line="268" pos:column="20"/></operator> <literal type="number" pos:line="268" pos:column="18">0<pos:position pos:line="268" pos:column="19"/></literal></expr>)<pos:position pos:line="268" pos:column="20"/></condition><then pos:line="268" pos:column="20">
        <block type="pseudo"><return pos:line="269" pos:column="9">return <expr><name pos:line="269" pos:column="16">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="269" pos:column="41"/></name></expr>;<pos:position pos:line="269" pos:column="42"/></return></block></then></if>

      <if pos:line="271" pos:column="7">if <condition pos:line="271" pos:column="10">(<expr><name pos:line="271" pos:column="11">ftpcode<pos:position pos:line="271" pos:column="18"/></name> <operator pos:line="271" pos:column="19">!=<pos:position pos:line="271" pos:column="21"/></operator> <literal type="number" pos:line="271" pos:column="22">200<pos:position pos:line="271" pos:column="25"/></literal></expr>)<pos:position pos:line="271" pos:column="26"/></condition><then pos:line="271" pos:column="26"> <block pos:line="271" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="272" pos:column="9">failf<pos:position pos:line="272" pos:column="14"/></name><argument_list pos:line="272" pos:column="14">(<argument><expr><name pos:line="272" pos:column="15">data<pos:position pos:line="272" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="272" pos:column="21">"Server does not grok %s"<pos:position pos:line="272" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="272" pos:column="48">*<pos:position pos:line="272" pos:column="49"/></operator><name pos:line="272" pos:column="49">modep<pos:position pos:line="272" pos:column="54"/></name></expr></argument>)<pos:position pos:line="272" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="56"/></expr_stmt>
        <continue pos:line="273" pos:column="9">continue;<pos:position pos:line="273" pos:column="18"/></continue>
      }<pos:position pos:line="274" pos:column="8"/></block></then> <else pos:line="274" pos:column="9">else
        <block type="pseudo"><break pos:line="275" pos:column="9">break;<pos:position pos:line="275" pos:column="15"/></break></block></else></if>
    }<pos:position pos:line="276" pos:column="6"/></block></for>

    <if pos:line="278" pos:column="5">if <condition pos:line="278" pos:column="8">(<expr><operator pos:line="278" pos:column="9">!<pos:position pos:line="278" pos:column="10"/></operator><operator pos:line="278" pos:column="10">*<pos:position pos:line="278" pos:column="11"/></operator><name pos:line="278" pos:column="11">modep<pos:position pos:line="278" pos:column="16"/></name></expr>)<pos:position pos:line="278" pos:column="17"/></condition><then pos:line="278" pos:column="17"> <block pos:line="278" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="279" pos:column="7">sclose<pos:position pos:line="279" pos:column="13"/></name><argument_list pos:line="279" pos:column="13">(<argument><expr><name pos:line="279" pos:column="14">portsock<pos:position pos:line="279" pos:column="22"/></name></expr></argument>)<pos:position pos:line="279" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="280" pos:column="7">freeaddrinfo<pos:position pos:line="280" pos:column="19"/></name><argument_list pos:line="280" pos:column="19">(<argument><expr><name pos:line="280" pos:column="20">res<pos:position pos:line="280" pos:column="23"/></name></expr></argument>)<pos:position pos:line="280" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="25"/></expr_stmt>
      <return pos:line="281" pos:column="7">return <expr><name pos:line="281" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="281" pos:column="35"/></name></expr>;<pos:position pos:line="281" pos:column="36"/></return>
    }<pos:position pos:line="282" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="283" pos:column="5">/* we set the secondary socket variable to this for now, it
       is only so that the cleanup function will close it in case
       we fail before the true secondary stuff is made */</comment>
    <expr_stmt><expr><name><name pos:line="286" pos:column="5">conn<pos:position pos:line="286" pos:column="9"/></name><operator pos:line="286" pos:column="9">-&gt;<pos:position pos:line="286" pos:column="14"/></operator><name pos:line="286" pos:column="11">secondarysocket<pos:position pos:line="286" pos:column="26"/></name></name> <operator pos:line="286" pos:column="27">=<pos:position pos:line="286" pos:column="28"/></operator> <name pos:line="286" pos:column="29">portsock<pos:position pos:line="286" pos:column="37"/></name></expr>;<pos:position pos:line="286" pos:column="38"/></expr_stmt>

<cpp:else pos:line="288" pos:column="1">#<cpp:directive pos:line="288" pos:column="2">else<pos:position pos:line="288" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name pos:line="289" pos:column="5">struct<pos:position pos:line="289" pos:column="11"/></name> <name pos:line="289" pos:column="12">sockaddr_in<pos:position pos:line="289" pos:column="23"/></name></name></type> <name pos:line="289" pos:column="24">sa<pos:position pos:line="289" pos:column="26"/></name></decl>;<pos:position pos:line="289" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="290" pos:column="5">struct<pos:position pos:line="290" pos:column="11"/></name> <name pos:line="290" pos:column="12">hostent<pos:position pos:line="290" pos:column="19"/></name></name> <modifier pos:line="290" pos:column="20">*<pos:position pos:line="290" pos:column="21"/></modifier></type><name pos:line="290" pos:column="21">h<pos:position pos:line="290" pos:column="22"/></name><init pos:line="290" pos:column="22">=<expr><name pos:line="290" pos:column="23">NULL<pos:position pos:line="290" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="290" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="291" pos:column="5">char<pos:position pos:line="291" pos:column="9"/></name> <modifier pos:line="291" pos:column="10">*<pos:position pos:line="291" pos:column="11"/></modifier></type><name pos:line="291" pos:column="11">hostdataptr<pos:position pos:line="291" pos:column="22"/></name><init pos:line="291" pos:column="22">=<expr><name pos:line="291" pos:column="23">NULL<pos:position pos:line="291" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="291" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="292" pos:column="5">size_t<pos:position pos:line="292" pos:column="11"/></name></type> <name pos:line="292" pos:column="12">size<pos:position pos:line="292" pos:column="16"/></name></decl>;<pos:position pos:line="292" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="293" pos:column="5">unsigned<pos:position pos:line="293" pos:column="13"/></name> <name pos:line="293" pos:column="14">short<pos:position pos:line="293" pos:column="19"/></name></type> <name pos:line="293" pos:column="20">porttouse<pos:position pos:line="293" pos:column="29"/></name></decl>;<pos:position pos:line="293" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="294" pos:column="5">char<pos:position pos:line="294" pos:column="9"/></name></type> <name><name pos:line="294" pos:column="10">myhost<pos:position pos:line="294" pos:column="16"/></name><index pos:line="294" pos:column="16">[<expr><literal type="number" pos:line="294" pos:column="17">256<pos:position pos:line="294" pos:column="20"/></literal></expr>]<pos:position pos:line="294" pos:column="21"/></index></name> <init pos:line="294" pos:column="22">= <expr><literal type="string" pos:line="294" pos:column="24">""<pos:position pos:line="294" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="294" pos:column="27"/></decl_stmt>

    <if pos:line="296" pos:column="5">if<condition pos:line="296" pos:column="7">(<expr><name><name pos:line="296" pos:column="8">data<pos:position pos:line="296" pos:column="12"/></name><operator pos:line="296" pos:column="12">-&gt;<pos:position pos:line="296" pos:column="17"/></operator><name pos:line="296" pos:column="14">set<pos:position pos:line="296" pos:column="17"/></name><operator pos:line="296" pos:column="17">.<pos:position pos:line="296" pos:column="18"/></operator><name pos:line="296" pos:column="18">ftpport<pos:position pos:line="296" pos:column="25"/></name></name></expr>)<pos:position pos:line="296" pos:column="26"/></condition><then pos:line="296" pos:column="26"> <block pos:line="296" pos:column="27">{
      <if pos:line="297" pos:column="7">if<condition pos:line="297" pos:column="9">(<expr><call><name pos:line="297" pos:column="10">Curl_if2ip<pos:position pos:line="297" pos:column="20"/></name><argument_list pos:line="297" pos:column="20">(<argument><expr><name><name pos:line="297" pos:column="21">data<pos:position pos:line="297" pos:column="25"/></name><operator pos:line="297" pos:column="25">-&gt;<pos:position pos:line="297" pos:column="30"/></operator><name pos:line="297" pos:column="27">set<pos:position pos:line="297" pos:column="30"/></name><operator pos:line="297" pos:column="30">.<pos:position pos:line="297" pos:column="31"/></operator><name pos:line="297" pos:column="31">ftpport<pos:position pos:line="297" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="297" pos:column="40">myhost<pos:position pos:line="297" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="297" pos:column="48">sizeof<argument_list pos:line="297" pos:column="54">(<argument><expr><name pos:line="297" pos:column="55">myhost<pos:position pos:line="297" pos:column="61"/></name></expr></argument>)<pos:position pos:line="297" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="297" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="297" pos:column="64"/></condition><then pos:line="297" pos:column="64"> <block pos:line="297" pos:column="65">{
        <expr_stmt><expr><name pos:line="298" pos:column="9">h<pos:position pos:line="298" pos:column="10"/></name> <operator pos:line="298" pos:column="11">=<pos:position pos:line="298" pos:column="12"/></operator> <call><name pos:line="298" pos:column="13">Curl_gethost<pos:position pos:line="298" pos:column="25"/></name><argument_list pos:line="298" pos:column="25">(<argument><expr><name pos:line="298" pos:column="26">data<pos:position pos:line="298" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="298" pos:column="32">myhost<pos:position pos:line="298" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="298" pos:column="40">&amp;<pos:position pos:line="298" pos:column="45"/></operator><name pos:line="298" pos:column="41">hostdataptr<pos:position pos:line="298" pos:column="52"/></name></expr></argument>)<pos:position pos:line="298" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="298" pos:column="54"/></expr_stmt>
      }<pos:position pos:line="299" pos:column="8"/></block></then>
      <else pos:line="300" pos:column="7">else <block pos:line="300" pos:column="12">{
        <if pos:line="301" pos:column="9">if<condition pos:line="301" pos:column="11">(<expr><call><name pos:line="301" pos:column="12">strlen<pos:position pos:line="301" pos:column="18"/></name><argument_list pos:line="301" pos:column="18">(<argument><expr><name><name pos:line="301" pos:column="19">data<pos:position pos:line="301" pos:column="23"/></name><operator pos:line="301" pos:column="23">-&gt;<pos:position pos:line="301" pos:column="28"/></operator><name pos:line="301" pos:column="25">set<pos:position pos:line="301" pos:column="28"/></name><operator pos:line="301" pos:column="28">.<pos:position pos:line="301" pos:column="29"/></operator><name pos:line="301" pos:column="29">ftpport<pos:position pos:line="301" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="301" pos:column="37"/></argument_list></call><operator pos:line="301" pos:column="37">&gt;<pos:position pos:line="301" pos:column="41"/></operator><literal type="number" pos:line="301" pos:column="38">1<pos:position pos:line="301" pos:column="39"/></literal></expr>)<pos:position pos:line="301" pos:column="40"/></condition><then pos:line="301" pos:column="40">
          <block type="pseudo"><expr_stmt><expr><name pos:line="302" pos:column="11">h<pos:position pos:line="302" pos:column="12"/></name> <operator pos:line="302" pos:column="13">=<pos:position pos:line="302" pos:column="14"/></operator> <call><name pos:line="302" pos:column="15">Curl_gethost<pos:position pos:line="302" pos:column="27"/></name><argument_list pos:line="302" pos:column="27">(<argument><expr><name pos:line="302" pos:column="28">data<pos:position pos:line="302" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="302" pos:column="34">data<pos:position pos:line="302" pos:column="38"/></name><operator pos:line="302" pos:column="38">-&gt;<pos:position pos:line="302" pos:column="43"/></operator><name pos:line="302" pos:column="40">set<pos:position pos:line="302" pos:column="43"/></name><operator pos:line="302" pos:column="43">.<pos:position pos:line="302" pos:column="44"/></operator><name pos:line="302" pos:column="44">ftpport<pos:position pos:line="302" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="302" pos:column="53">&amp;<pos:position pos:line="302" pos:column="58"/></operator><name pos:line="302" pos:column="54">hostdataptr<pos:position pos:line="302" pos:column="65"/></name></expr></argument>)<pos:position pos:line="302" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="67"/></expr_stmt></block></then></if>
        <if pos:line="303" pos:column="9">if<condition pos:line="303" pos:column="11">(<expr><name pos:line="303" pos:column="12">h<pos:position pos:line="303" pos:column="13"/></name></expr>)<pos:position pos:line="303" pos:column="14"/></condition><then pos:line="303" pos:column="14">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="304" pos:column="11">strcpy<pos:position pos:line="304" pos:column="17"/></name><argument_list pos:line="304" pos:column="17">(<argument><expr><name pos:line="304" pos:column="18">myhost<pos:position pos:line="304" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="304" pos:column="26">data<pos:position pos:line="304" pos:column="30"/></name><operator pos:line="304" pos:column="30">-&gt;<pos:position pos:line="304" pos:column="35"/></operator><name pos:line="304" pos:column="32">set<pos:position pos:line="304" pos:column="35"/></name><operator pos:line="304" pos:column="35">.<pos:position pos:line="304" pos:column="36"/></operator><name pos:line="304" pos:column="36">ftpport<pos:position pos:line="304" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="304" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="304" pos:column="45"/></expr_stmt></block></then></if> <comment type="block" pos:line="304" pos:column="46">/* buffer overflow risk */</comment>
      }<pos:position pos:line="305" pos:column="8"/></block></else></if>
    }<pos:position pos:line="306" pos:column="6"/></block></then></if>
    <if pos:line="307" pos:column="5">if<condition pos:line="307" pos:column="7">(<expr><operator pos:line="307" pos:column="8">!<pos:position pos:line="307" pos:column="9"/></operator> <operator pos:line="307" pos:column="10">*<pos:position pos:line="307" pos:column="11"/></operator><name pos:line="307" pos:column="11">myhost<pos:position pos:line="307" pos:column="17"/></name></expr>)<pos:position pos:line="307" pos:column="18"/></condition><then pos:line="307" pos:column="18"> <block pos:line="307" pos:column="19">{
      <expr_stmt><expr><name pos:line="308" pos:column="7">h<pos:position pos:line="308" pos:column="8"/></name><operator pos:line="308" pos:column="8">=<pos:position pos:line="308" pos:column="9"/></operator><call><name pos:line="308" pos:column="9">Curl_gethost<pos:position pos:line="308" pos:column="21"/></name><argument_list pos:line="308" pos:column="21">(<argument><expr><name pos:line="308" pos:column="22">data<pos:position pos:line="308" pos:column="26"/></name></expr></argument>,
                     <argument><expr><call><name pos:line="309" pos:column="22">getmyhost<pos:position pos:line="309" pos:column="31"/></name><argument_list pos:line="309" pos:column="31">(<argument><expr><name pos:line="309" pos:column="32">myhost<pos:position pos:line="309" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="309" pos:column="40">sizeof<argument_list pos:line="309" pos:column="46">(<argument><expr><name pos:line="309" pos:column="47">myhost<pos:position pos:line="309" pos:column="53"/></name></expr></argument>)<pos:position pos:line="309" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="309" pos:column="55"/></argument_list></call></expr></argument>,
                     <argument><expr><operator pos:line="310" pos:column="22">&amp;<pos:position pos:line="310" pos:column="27"/></operator><name pos:line="310" pos:column="23">hostdataptr<pos:position pos:line="310" pos:column="34"/></name></expr></argument>)<pos:position pos:line="310" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="310" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="311" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="312" pos:column="5">infof<pos:position pos:line="312" pos:column="10"/></name><argument_list pos:line="312" pos:column="10">(<argument><expr><name pos:line="312" pos:column="11">data<pos:position pos:line="312" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="312" pos:column="17">"We connect from %s\n"<pos:position pos:line="312" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="312" pos:column="41">myhost<pos:position pos:line="312" pos:column="47"/></name></expr></argument>)<pos:position pos:line="312" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="312" pos:column="49"/></expr_stmt>

    <if pos:line="314" pos:column="5">if <condition pos:line="314" pos:column="8">( <expr><name pos:line="314" pos:column="10">h<pos:position pos:line="314" pos:column="11"/></name></expr> )<pos:position pos:line="314" pos:column="13"/></condition><then pos:line="314" pos:column="13"> <block pos:line="314" pos:column="14">{
      <if pos:line="315" pos:column="7">if<condition pos:line="315" pos:column="9">( <expr><operator pos:line="315" pos:column="11">(<pos:position pos:line="315" pos:column="12"/></operator><name pos:line="315" pos:column="12">portsock<pos:position pos:line="315" pos:column="20"/></name> <operator pos:line="315" pos:column="21">=<pos:position pos:line="315" pos:column="22"/></operator> <call><name pos:line="315" pos:column="23">socket<pos:position pos:line="315" pos:column="29"/></name><argument_list pos:line="315" pos:column="29">(<argument><expr><name pos:line="315" pos:column="30">AF_INET<pos:position pos:line="315" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="315" pos:column="39">SOCK_STREAM<pos:position pos:line="315" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="315" pos:column="52">0<pos:position pos:line="315" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="315" pos:column="54"/></argument_list></call><operator pos:line="315" pos:column="54">)<pos:position pos:line="315" pos:column="55"/></operator> <operator pos:line="315" pos:column="56">&gt;=<pos:position pos:line="315" pos:column="61"/></operator> <literal type="number" pos:line="315" pos:column="59">0<pos:position pos:line="315" pos:column="60"/></literal></expr> )<pos:position pos:line="315" pos:column="62"/></condition><then pos:line="315" pos:column="62"> <block pos:line="315" pos:column="63">{

        <comment type="block" pos:line="317" pos:column="9">/* we set the secondary socket variable to this for now, it
           is only so that the cleanup function will close it in case
           we fail before the true secondary stuff is made */</comment>
        <expr_stmt><expr><name><name pos:line="320" pos:column="9">conn<pos:position pos:line="320" pos:column="13"/></name><operator pos:line="320" pos:column="13">-&gt;<pos:position pos:line="320" pos:column="18"/></operator><name pos:line="320" pos:column="15">secondarysocket<pos:position pos:line="320" pos:column="30"/></name></name> <operator pos:line="320" pos:column="31">=<pos:position pos:line="320" pos:column="32"/></operator> <name pos:line="320" pos:column="33">portsock<pos:position pos:line="320" pos:column="41"/></name></expr>;<pos:position pos:line="320" pos:column="42"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="322" pos:column="9">memset<pos:position pos:line="322" pos:column="15"/></name><argument_list pos:line="322" pos:column="15">(<argument><expr><operator pos:line="322" pos:column="16">(<pos:position pos:line="322" pos:column="17"/></operator><name pos:line="322" pos:column="17">char<pos:position pos:line="322" pos:column="21"/></name> <operator pos:line="322" pos:column="22">*<pos:position pos:line="322" pos:column="23"/></operator><operator pos:line="322" pos:column="23">)<pos:position pos:line="322" pos:column="24"/></operator><operator pos:line="322" pos:column="24">&amp;<pos:position pos:line="322" pos:column="29"/></operator><name pos:line="322" pos:column="25">sa<pos:position pos:line="322" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="322" pos:column="29">0<pos:position pos:line="322" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="322" pos:column="32">sizeof<argument_list pos:line="322" pos:column="38">(<argument><expr><name pos:line="322" pos:column="39">sa<pos:position pos:line="322" pos:column="41"/></name></expr></argument>)<pos:position pos:line="322" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="322" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="322" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="323" pos:column="9">memcpy<pos:position pos:line="323" pos:column="15"/></name><argument_list pos:line="323" pos:column="15">(<argument><expr><operator pos:line="323" pos:column="16">(<pos:position pos:line="323" pos:column="17"/></operator><name pos:line="323" pos:column="17">char<pos:position pos:line="323" pos:column="21"/></name> <operator pos:line="323" pos:column="22">*<pos:position pos:line="323" pos:column="23"/></operator><operator pos:line="323" pos:column="23">)<pos:position pos:line="323" pos:column="24"/></operator><operator pos:line="323" pos:column="24">&amp;<pos:position pos:line="323" pos:column="29"/></operator><name><name pos:line="323" pos:column="25">sa<pos:position pos:line="323" pos:column="27"/></name><operator pos:line="323" pos:column="27">.<pos:position pos:line="323" pos:column="28"/></operator><name pos:line="323" pos:column="28">sin_addr<pos:position pos:line="323" pos:column="36"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="324" pos:column="16">h<pos:position pos:line="324" pos:column="17"/></name><operator pos:line="324" pos:column="17">-&gt;<pos:position pos:line="324" pos:column="22"/></operator><name pos:line="324" pos:column="19">h_addr<pos:position pos:line="324" pos:column="25"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="325" pos:column="16">h<pos:position pos:line="325" pos:column="17"/></name><operator pos:line="325" pos:column="17">-&gt;<pos:position pos:line="325" pos:column="22"/></operator><name pos:line="325" pos:column="19">h_length<pos:position pos:line="325" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="325" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="326" pos:column="9">sa<pos:position pos:line="326" pos:column="11"/></name><operator pos:line="326" pos:column="11">.<pos:position pos:line="326" pos:column="12"/></operator><name pos:line="326" pos:column="12">sin_family<pos:position pos:line="326" pos:column="22"/></name></name> <operator pos:line="326" pos:column="23">=<pos:position pos:line="326" pos:column="24"/></operator> <name pos:line="326" pos:column="25">AF_INET<pos:position pos:line="326" pos:column="32"/></name></expr>;<pos:position pos:line="326" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="327" pos:column="9">sa<pos:position pos:line="327" pos:column="11"/></name><operator pos:line="327" pos:column="11">.<pos:position pos:line="327" pos:column="12"/></operator><name pos:line="327" pos:column="12">sin_addr<pos:position pos:line="327" pos:column="20"/></name><operator pos:line="327" pos:column="20">.<pos:position pos:line="327" pos:column="21"/></operator><name pos:line="327" pos:column="21">s_addr<pos:position pos:line="327" pos:column="27"/></name></name> <operator pos:line="327" pos:column="28">=<pos:position pos:line="327" pos:column="29"/></operator> <name pos:line="327" pos:column="30">INADDR_ANY<pos:position pos:line="327" pos:column="40"/></name></expr>;<pos:position pos:line="327" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="328" pos:column="9">sa<pos:position pos:line="328" pos:column="11"/></name><operator pos:line="328" pos:column="11">.<pos:position pos:line="328" pos:column="12"/></operator><name pos:line="328" pos:column="12">sin_port<pos:position pos:line="328" pos:column="20"/></name></name> <operator pos:line="328" pos:column="21">=<pos:position pos:line="328" pos:column="22"/></operator> <literal type="number" pos:line="328" pos:column="23">0<pos:position pos:line="328" pos:column="24"/></literal></expr>;<pos:position pos:line="328" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="329" pos:column="9">size<pos:position pos:line="329" pos:column="13"/></name> <operator pos:line="329" pos:column="14">=<pos:position pos:line="329" pos:column="15"/></operator> <sizeof pos:line="329" pos:column="16">sizeof<argument_list pos:line="329" pos:column="22">(<argument><expr><name pos:line="329" pos:column="23">sa<pos:position pos:line="329" pos:column="25"/></name></expr></argument>)<pos:position pos:line="329" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="329" pos:column="27"/></expr_stmt>

        <if pos:line="331" pos:column="9">if<condition pos:line="331" pos:column="11">(<expr><call><name pos:line="331" pos:column="12">bind<pos:position pos:line="331" pos:column="16"/></name><argument_list pos:line="331" pos:column="16">(<argument><expr><name pos:line="331" pos:column="17">portsock<pos:position pos:line="331" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="331" pos:column="27">(<pos:position pos:line="331" pos:column="28"/></operator>struct <name pos:line="331" pos:column="35">sockaddr<pos:position pos:line="331" pos:column="43"/></name> <operator pos:line="331" pos:column="44">*<pos:position pos:line="331" pos:column="45"/></operator><operator pos:line="331" pos:column="45">)<pos:position pos:line="331" pos:column="46"/></operator><operator pos:line="331" pos:column="46">&amp;<pos:position pos:line="331" pos:column="51"/></operator><name pos:line="331" pos:column="47">sa<pos:position pos:line="331" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="331" pos:column="51">size<pos:position pos:line="331" pos:column="55"/></name></expr></argument>)<pos:position pos:line="331" pos:column="56"/></argument_list></call> <operator pos:line="331" pos:column="57">&gt;=<pos:position pos:line="331" pos:column="62"/></operator> <literal type="number" pos:line="331" pos:column="60">0<pos:position pos:line="331" pos:column="61"/></literal></expr>)<pos:position pos:line="331" pos:column="62"/></condition><then pos:line="331" pos:column="62"> <block pos:line="331" pos:column="63">{
          <comment type="block" pos:line="332" pos:column="11">/* we succeeded to bind */</comment>
          <decl_stmt><decl><type><name><name pos:line="333" pos:column="11">struct<pos:position pos:line="333" pos:column="17"/></name> <name pos:line="333" pos:column="18">sockaddr_in<pos:position pos:line="333" pos:column="29"/></name></name></type> <name pos:line="333" pos:column="30">add<pos:position pos:line="333" pos:column="33"/></name></decl>;<pos:position pos:line="333" pos:column="34"/></decl_stmt>
          <expr_stmt><expr><name pos:line="334" pos:column="11">size<pos:position pos:line="334" pos:column="15"/></name> <operator pos:line="334" pos:column="16">=<pos:position pos:line="334" pos:column="17"/></operator> <sizeof pos:line="334" pos:column="18">sizeof<argument_list pos:line="334" pos:column="24">(<argument><expr><name pos:line="334" pos:column="25">add<pos:position pos:line="334" pos:column="28"/></name></expr></argument>)<pos:position pos:line="334" pos:column="29"/></argument_list></sizeof></expr>;<pos:position pos:line="334" pos:column="30"/></expr_stmt>

          <if pos:line="336" pos:column="11">if<condition pos:line="336" pos:column="13">(<expr><call><name pos:line="336" pos:column="14">getsockname<pos:position pos:line="336" pos:column="25"/></name><argument_list pos:line="336" pos:column="25">(<argument><expr><name pos:line="336" pos:column="26">portsock<pos:position pos:line="336" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="336" pos:column="36">(<pos:position pos:line="336" pos:column="37"/></operator>struct <name pos:line="336" pos:column="44">sockaddr<pos:position pos:line="336" pos:column="52"/></name> <operator pos:line="336" pos:column="53">*<pos:position pos:line="336" pos:column="54"/></operator><operator pos:line="336" pos:column="54">)<pos:position pos:line="336" pos:column="55"/></operator> <operator pos:line="336" pos:column="56">&amp;<pos:position pos:line="336" pos:column="61"/></operator><name pos:line="336" pos:column="57">add<pos:position pos:line="336" pos:column="60"/></name></expr></argument>,
                         <argument><expr><operator pos:line="337" pos:column="26">(<pos:position pos:line="337" pos:column="27"/></operator><name pos:line="337" pos:column="27">socklen_t<pos:position pos:line="337" pos:column="36"/></name> <operator pos:line="337" pos:column="37">*<pos:position pos:line="337" pos:column="38"/></operator><operator pos:line="337" pos:column="38">)<pos:position pos:line="337" pos:column="39"/></operator><operator pos:line="337" pos:column="39">&amp;<pos:position pos:line="337" pos:column="44"/></operator><name pos:line="337" pos:column="40">size<pos:position pos:line="337" pos:column="44"/></name></expr></argument>)<pos:position pos:line="337" pos:column="45"/></argument_list></call><operator pos:line="337" pos:column="45">&lt;<pos:position pos:line="337" pos:column="49"/></operator><literal type="number" pos:line="337" pos:column="46">0<pos:position pos:line="337" pos:column="47"/></literal></expr>)<pos:position pos:line="337" pos:column="48"/></condition><then pos:line="337" pos:column="48"> <block pos:line="337" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="338" pos:column="13">failf<pos:position pos:line="338" pos:column="18"/></name><argument_list pos:line="338" pos:column="18">(<argument><expr><name pos:line="338" pos:column="19">data<pos:position pos:line="338" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="338" pos:column="25">"getsockname() failed"<pos:position pos:line="338" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="338" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="338" pos:column="49"/></expr_stmt>
            <return pos:line="339" pos:column="13">return <expr><name pos:line="339" pos:column="20">CURLE_FTP_PORT_FAILED<pos:position pos:line="339" pos:column="41"/></name></expr>;<pos:position pos:line="339" pos:column="42"/></return>
          }<pos:position pos:line="340" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name pos:line="341" pos:column="11">porttouse<pos:position pos:line="341" pos:column="20"/></name> <operator pos:line="341" pos:column="21">=<pos:position pos:line="341" pos:column="22"/></operator> <call><name pos:line="341" pos:column="23">ntohs<pos:position pos:line="341" pos:column="28"/></name><argument_list pos:line="341" pos:column="28">(<argument><expr><name><name pos:line="341" pos:column="29">add<pos:position pos:line="341" pos:column="32"/></name><operator pos:line="341" pos:column="32">.<pos:position pos:line="341" pos:column="33"/></operator><name pos:line="341" pos:column="33">sin_port<pos:position pos:line="341" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="341" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="341" pos:column="43"/></expr_stmt>

          <if pos:line="343" pos:column="11">if <condition pos:line="343" pos:column="14">( <expr><call><name pos:line="343" pos:column="16">listen<pos:position pos:line="343" pos:column="22"/></name><argument_list pos:line="343" pos:column="22">(<argument><expr><name pos:line="343" pos:column="23">portsock<pos:position pos:line="343" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="343" pos:column="33">1<pos:position pos:line="343" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="343" pos:column="35"/></argument_list></call> <operator pos:line="343" pos:column="36">&lt;<pos:position pos:line="343" pos:column="40"/></operator> <literal type="number" pos:line="343" pos:column="38">0<pos:position pos:line="343" pos:column="39"/></literal></expr> )<pos:position pos:line="343" pos:column="41"/></condition><then pos:line="343" pos:column="41"> <block pos:line="343" pos:column="42">{
            <expr_stmt><expr><call><name pos:line="344" pos:column="13">failf<pos:position pos:line="344" pos:column="18"/></name><argument_list pos:line="344" pos:column="18">(<argument><expr><name pos:line="344" pos:column="19">data<pos:position pos:line="344" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="344" pos:column="25">"listen(2) failed on socket"<pos:position pos:line="344" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="344" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="345" pos:column="13">free<pos:position pos:line="345" pos:column="17"/></name><argument_list pos:line="345" pos:column="17">(<argument><expr><name pos:line="345" pos:column="18">hostdataptr<pos:position pos:line="345" pos:column="29"/></name></expr></argument>)<pos:position pos:line="345" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="345" pos:column="31"/></expr_stmt>
            <return pos:line="346" pos:column="13">return <expr><name pos:line="346" pos:column="20">CURLE_FTP_PORT_FAILED<pos:position pos:line="346" pos:column="41"/></name></expr>;<pos:position pos:line="346" pos:column="42"/></return>
          }<pos:position pos:line="347" pos:column="12"/></block></then></if>
        }<pos:position pos:line="348" pos:column="10"/></block></then>
        <else pos:line="349" pos:column="9">else <block pos:line="349" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="350" pos:column="11">failf<pos:position pos:line="350" pos:column="16"/></name><argument_list pos:line="350" pos:column="16">(<argument><expr><name pos:line="350" pos:column="17">data<pos:position pos:line="350" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="350" pos:column="23">"bind(2) failed on socket"<pos:position pos:line="350" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="350" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="350" pos:column="51"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="351" pos:column="11">free<pos:position pos:line="351" pos:column="15"/></name><argument_list pos:line="351" pos:column="15">(<argument><expr><name pos:line="351" pos:column="16">hostdataptr<pos:position pos:line="351" pos:column="27"/></name></expr></argument>)<pos:position pos:line="351" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="351" pos:column="29"/></expr_stmt>
          <return pos:line="352" pos:column="11">return <expr><name pos:line="352" pos:column="18">CURLE_FTP_PORT_FAILED<pos:position pos:line="352" pos:column="39"/></name></expr>;<pos:position pos:line="352" pos:column="40"/></return>
        }<pos:position pos:line="353" pos:column="10"/></block></else></if>
      }<pos:position pos:line="354" pos:column="8"/></block></then>
      <else pos:line="355" pos:column="7">else <block pos:line="355" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="356" pos:column="9">failf<pos:position pos:line="356" pos:column="14"/></name><argument_list pos:line="356" pos:column="14">(<argument><expr><name pos:line="356" pos:column="15">data<pos:position pos:line="356" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="356" pos:column="21">"socket(2) failed (%s)"<pos:position pos:line="356" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="356" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="356" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="357" pos:column="9">free<pos:position pos:line="357" pos:column="13"/></name><argument_list pos:line="357" pos:column="13">(<argument><expr><name pos:line="357" pos:column="14">hostdataptr<pos:position pos:line="357" pos:column="25"/></name></expr></argument>)<pos:position pos:line="357" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="357" pos:column="27"/></expr_stmt>
        <return pos:line="358" pos:column="9">return <expr><name pos:line="358" pos:column="16">CURLE_FTP_PORT_FAILED<pos:position pos:line="358" pos:column="37"/></name></expr>;<pos:position pos:line="358" pos:column="38"/></return>
      }<pos:position pos:line="359" pos:column="8"/></block></else></if>
      <if pos:line="360" pos:column="7">if<condition pos:line="360" pos:column="9">(<expr><name pos:line="360" pos:column="10">hostdataptr<pos:position pos:line="360" pos:column="21"/></name></expr>)<pos:position pos:line="360" pos:column="22"/></condition><then pos:line="360" pos:column="22">
        <comment type="block" pos:line="361" pos:column="9">/* free the memory used for name lookup */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="362" pos:column="9">free<pos:position pos:line="362" pos:column="13"/></name><argument_list pos:line="362" pos:column="13">(<argument><expr><name pos:line="362" pos:column="14">hostdataptr<pos:position pos:line="362" pos:column="25"/></name></expr></argument>)<pos:position pos:line="362" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="362" pos:column="27"/></expr_stmt></block></then></if>
    }<pos:position pos:line="363" pos:column="6"/></block></then>
    <else pos:line="364" pos:column="5">else <block pos:line="364" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="365" pos:column="7">failf<pos:position pos:line="365" pos:column="12"/></name><argument_list pos:line="365" pos:column="12">(<argument><expr><name pos:line="365" pos:column="13">data<pos:position pos:line="365" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="365" pos:column="19">"could't find my own IP address (%s)"<pos:position pos:line="365" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="365" pos:column="58">myhost<pos:position pos:line="365" pos:column="64"/></name></expr></argument>)<pos:position pos:line="365" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="365" pos:column="66"/></expr_stmt>
      <return pos:line="366" pos:column="7">return <expr><name pos:line="366" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="366" pos:column="35"/></name></expr>;<pos:position pos:line="366" pos:column="36"/></return>
    }<pos:position pos:line="367" pos:column="6"/></block></else></if>
    <block pos:line="368" pos:column="5">{
      <decl_stmt><decl><type><name><name pos:line="369" pos:column="7">struct<pos:position pos:line="369" pos:column="13"/></name> <name pos:line="369" pos:column="14">in_addr<pos:position pos:line="369" pos:column="21"/></name></name></type> <name pos:line="369" pos:column="22">in<pos:position pos:line="369" pos:column="24"/></name></decl>;<pos:position pos:line="369" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="370" pos:column="7">unsigned<pos:position pos:line="370" pos:column="15"/></name> <name pos:line="370" pos:column="16">short<pos:position pos:line="370" pos:column="21"/></name></type> <name><name pos:line="370" pos:column="22">ip<pos:position pos:line="370" pos:column="24"/></name><index pos:line="370" pos:column="24">[<expr><literal type="number" pos:line="370" pos:column="25">5<pos:position pos:line="370" pos:column="26"/></literal></expr>]<pos:position pos:line="370" pos:column="27"/></index></name></decl>;<pos:position pos:line="370" pos:column="28"/></decl_stmt>
      <expr_stmt><expr><operator pos:line="371" pos:column="7">(<pos:position pos:line="371" pos:column="8"/></operator><name pos:line="371" pos:column="8">void<pos:position pos:line="371" pos:column="12"/></name><operator pos:line="371" pos:column="12">)<pos:position pos:line="371" pos:column="13"/></operator> <call><name pos:line="371" pos:column="14">memcpy<pos:position pos:line="371" pos:column="20"/></name><argument_list pos:line="371" pos:column="20">(<argument><expr><operator pos:line="371" pos:column="21">&amp;<pos:position pos:line="371" pos:column="26"/></operator><name><name pos:line="371" pos:column="22">in<pos:position pos:line="371" pos:column="24"/></name><operator pos:line="371" pos:column="24">.<pos:position pos:line="371" pos:column="25"/></operator><name pos:line="371" pos:column="25">s_addr<pos:position pos:line="371" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="371" pos:column="33">*<pos:position pos:line="371" pos:column="34"/></operator><name><name pos:line="371" pos:column="34">h<pos:position pos:line="371" pos:column="35"/></name><operator pos:line="371" pos:column="35">-&gt;<pos:position pos:line="371" pos:column="40"/></operator><name pos:line="371" pos:column="37">h_addr_list<pos:position pos:line="371" pos:column="48"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="371" pos:column="50">sizeof <argument_list pos:line="371" pos:column="57">(<argument><expr><name><name pos:line="371" pos:column="58">in<pos:position pos:line="371" pos:column="60"/></name><operator pos:line="371" pos:column="60">.<pos:position pos:line="371" pos:column="61"/></operator><name pos:line="371" pos:column="61">s_addr<pos:position pos:line="371" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="371" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="371" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="371" pos:column="70"/></expr_stmt>
<cpp:if pos:line="372" pos:column="1">#<cpp:directive pos:line="372" pos:column="2">if<pos:position pos:line="372" pos:column="4"/></cpp:directive> <expr><call><name pos:line="372" pos:column="5">defined<pos:position pos:line="372" pos:column="12"/></name> <argument_list pos:line="372" pos:column="13">(<argument><expr><name pos:line="372" pos:column="14">HAVE_INET_NTOA_R<pos:position pos:line="372" pos:column="30"/></name></expr></argument>)<pos:position pos:line="372" pos:column="31"/></argument_list></call></expr></cpp:if>
      <comment type="block" pos:line="373" pos:column="7">/* ignore the return code from inet_ntoa_r() as it is int or
         char * depending on system */</comment>
      <expr_stmt><expr><call><name pos:line="375" pos:column="7">inet_ntoa_r<pos:position pos:line="375" pos:column="18"/></name><argument_list pos:line="375" pos:column="18">(<argument><expr><name pos:line="375" pos:column="19">in<pos:position pos:line="375" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="375" pos:column="23">ntoa_buf<pos:position pos:line="375" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="375" pos:column="33">sizeof<argument_list pos:line="375" pos:column="39">(<argument><expr><name pos:line="375" pos:column="40">ntoa_buf<pos:position pos:line="375" pos:column="48"/></name></expr></argument>)<pos:position pos:line="375" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="375" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="375" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="376" pos:column="7">sscanf<pos:position pos:line="376" pos:column="13"/></name><argument_list pos:line="376" pos:column="13">( <argument><expr><name pos:line="376" pos:column="15">ntoa_buf<pos:position pos:line="376" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="376" pos:column="25">"%hu.%hu.%hu.%hu"<pos:position pos:line="376" pos:column="42"/></literal></expr></argument>,
              <argument><expr><operator pos:line="377" pos:column="15">&amp;<pos:position pos:line="377" pos:column="20"/></operator><name><name pos:line="377" pos:column="16">ip<pos:position pos:line="377" pos:column="18"/></name><index pos:line="377" pos:column="18">[<expr><literal type="number" pos:line="377" pos:column="19">0<pos:position pos:line="377" pos:column="20"/></literal></expr>]<pos:position pos:line="377" pos:column="21"/></index></name></expr></argument>, <argument><expr><operator pos:line="377" pos:column="23">&amp;<pos:position pos:line="377" pos:column="28"/></operator><name><name pos:line="377" pos:column="24">ip<pos:position pos:line="377" pos:column="26"/></name><index pos:line="377" pos:column="26">[<expr><literal type="number" pos:line="377" pos:column="27">1<pos:position pos:line="377" pos:column="28"/></literal></expr>]<pos:position pos:line="377" pos:column="29"/></index></name></expr></argument>, <argument><expr><operator pos:line="377" pos:column="31">&amp;<pos:position pos:line="377" pos:column="36"/></operator><name><name pos:line="377" pos:column="32">ip<pos:position pos:line="377" pos:column="34"/></name><index pos:line="377" pos:column="34">[<expr><literal type="number" pos:line="377" pos:column="35">2<pos:position pos:line="377" pos:column="36"/></literal></expr>]<pos:position pos:line="377" pos:column="37"/></index></name></expr></argument>, <argument><expr><operator pos:line="377" pos:column="39">&amp;<pos:position pos:line="377" pos:column="44"/></operator><name><name pos:line="377" pos:column="40">ip<pos:position pos:line="377" pos:column="42"/></name><index pos:line="377" pos:column="42">[<expr><literal type="number" pos:line="377" pos:column="43">3<pos:position pos:line="377" pos:column="44"/></literal></expr>]<pos:position pos:line="377" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="377" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="377" pos:column="47"/></expr_stmt>
<cpp:else pos:line="378" pos:column="1">#<cpp:directive pos:line="378" pos:column="2">else<pos:position pos:line="378" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><call><name pos:line="379" pos:column="7">sscanf<pos:position pos:line="379" pos:column="13"/></name><argument_list pos:line="379" pos:column="13">( <argument><expr><call><name pos:line="379" pos:column="15">inet_ntoa<pos:position pos:line="379" pos:column="24"/></name><argument_list pos:line="379" pos:column="24">(<argument><expr><name pos:line="379" pos:column="25">in<pos:position pos:line="379" pos:column="27"/></name></expr></argument>)<pos:position pos:line="379" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="379" pos:column="30">"%hu.%hu.%hu.%hu"<pos:position pos:line="379" pos:column="47"/></literal></expr></argument>,
              <argument><expr><operator pos:line="380" pos:column="15">&amp;<pos:position pos:line="380" pos:column="20"/></operator><name><name pos:line="380" pos:column="16">ip<pos:position pos:line="380" pos:column="18"/></name><index pos:line="380" pos:column="18">[<expr><literal type="number" pos:line="380" pos:column="19">0<pos:position pos:line="380" pos:column="20"/></literal></expr>]<pos:position pos:line="380" pos:column="21"/></index></name></expr></argument>, <argument><expr><operator pos:line="380" pos:column="23">&amp;<pos:position pos:line="380" pos:column="28"/></operator><name><name pos:line="380" pos:column="24">ip<pos:position pos:line="380" pos:column="26"/></name><index pos:line="380" pos:column="26">[<expr><literal type="number" pos:line="380" pos:column="27">1<pos:position pos:line="380" pos:column="28"/></literal></expr>]<pos:position pos:line="380" pos:column="29"/></index></name></expr></argument>, <argument><expr><operator pos:line="380" pos:column="31">&amp;<pos:position pos:line="380" pos:column="36"/></operator><name><name pos:line="380" pos:column="32">ip<pos:position pos:line="380" pos:column="34"/></name><index pos:line="380" pos:column="34">[<expr><literal type="number" pos:line="380" pos:column="35">2<pos:position pos:line="380" pos:column="36"/></literal></expr>]<pos:position pos:line="380" pos:column="37"/></index></name></expr></argument>, <argument><expr><operator pos:line="380" pos:column="39">&amp;<pos:position pos:line="380" pos:column="44"/></operator><name><name pos:line="380" pos:column="40">ip<pos:position pos:line="380" pos:column="42"/></name><index pos:line="380" pos:column="42">[<expr><literal type="number" pos:line="380" pos:column="43">3<pos:position pos:line="380" pos:column="44"/></literal></expr>]<pos:position pos:line="380" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="380" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="380" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="381" pos:column="1">#<cpp:directive pos:line="381" pos:column="2">endif<pos:position pos:line="381" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name pos:line="382" pos:column="7">ftpsendf<pos:position pos:line="382" pos:column="15"/></name><argument_list pos:line="382" pos:column="15">(<argument><expr><name><name pos:line="382" pos:column="16">conn<pos:position pos:line="382" pos:column="20"/></name><operator pos:line="382" pos:column="20">-&gt;<pos:position pos:line="382" pos:column="25"/></operator><name pos:line="382" pos:column="22">firstsocket<pos:position pos:line="382" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="382" pos:column="35">conn<pos:position pos:line="382" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="382" pos:column="41">"PORT %d,%d,%d,%d,%d,%d"<pos:position pos:line="382" pos:column="65"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="383" pos:column="13">ip<pos:position pos:line="383" pos:column="15"/></name><index pos:line="383" pos:column="15">[<expr><literal type="number" pos:line="383" pos:column="16">0<pos:position pos:line="383" pos:column="17"/></literal></expr>]<pos:position pos:line="383" pos:column="18"/></index></name></expr></argument>, <argument><expr><name><name pos:line="383" pos:column="20">ip<pos:position pos:line="383" pos:column="22"/></name><index pos:line="383" pos:column="22">[<expr><literal type="number" pos:line="383" pos:column="23">1<pos:position pos:line="383" pos:column="24"/></literal></expr>]<pos:position pos:line="383" pos:column="25"/></index></name></expr></argument>, <argument><expr><name><name pos:line="383" pos:column="27">ip<pos:position pos:line="383" pos:column="29"/></name><index pos:line="383" pos:column="29">[<expr><literal type="number" pos:line="383" pos:column="30">2<pos:position pos:line="383" pos:column="31"/></literal></expr>]<pos:position pos:line="383" pos:column="32"/></index></name></expr></argument>, <argument><expr><name><name pos:line="383" pos:column="34">ip<pos:position pos:line="383" pos:column="36"/></name><index pos:line="383" pos:column="36">[<expr><literal type="number" pos:line="383" pos:column="37">3<pos:position pos:line="383" pos:column="38"/></literal></expr>]<pos:position pos:line="383" pos:column="39"/></index></name></expr></argument>,
            <argument><expr><name pos:line="384" pos:column="13">porttouse<pos:position pos:line="384" pos:column="22"/></name> <operator pos:line="384" pos:column="23">&gt;&gt;<pos:position pos:line="384" pos:column="28"/></operator> <literal type="number" pos:line="384" pos:column="26">8<pos:position pos:line="384" pos:column="27"/></literal></expr></argument>,
            <argument><expr><name pos:line="385" pos:column="13">porttouse<pos:position pos:line="385" pos:column="22"/></name> <operator pos:line="385" pos:column="23">&amp;<pos:position pos:line="385" pos:column="28"/></operator> <literal type="number" pos:line="385" pos:column="25">255<pos:position pos:line="385" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="385" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="385" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="386" pos:column="6"/></block>

    <expr_stmt><expr><name pos:line="388" pos:column="5">nread<pos:position pos:line="388" pos:column="10"/></name> <operator pos:line="388" pos:column="11">=<pos:position pos:line="388" pos:column="12"/></operator> <call><name pos:line="388" pos:column="13">Curl_GetFTPResponse<pos:position pos:line="388" pos:column="32"/></name><argument_list pos:line="388" pos:column="32">(<argument><expr><name><name pos:line="388" pos:column="33">conn<pos:position pos:line="388" pos:column="37"/></name><operator pos:line="388" pos:column="37">-&gt;<pos:position pos:line="388" pos:column="42"/></operator><name pos:line="388" pos:column="39">firstsocket<pos:position pos:line="388" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="388" pos:column="52">buf<pos:position pos:line="388" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="388" pos:column="57">conn<pos:position pos:line="388" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="388" pos:column="63">&amp;<pos:position pos:line="388" pos:column="68"/></operator><name pos:line="388" pos:column="64">ftpcode<pos:position pos:line="388" pos:column="71"/></name></expr></argument>)<pos:position pos:line="388" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="388" pos:column="73"/></expr_stmt>
    <if pos:line="389" pos:column="5">if<condition pos:line="389" pos:column="7">(<expr><name pos:line="389" pos:column="8">nread<pos:position pos:line="389" pos:column="13"/></name> <operator pos:line="389" pos:column="14">&lt;<pos:position pos:line="389" pos:column="18"/></operator> <literal type="number" pos:line="389" pos:column="16">0<pos:position pos:line="389" pos:column="17"/></literal></expr>)<pos:position pos:line="389" pos:column="18"/></condition><then pos:line="389" pos:column="18">
      <block type="pseudo"><return pos:line="390" pos:column="7">return <expr><name pos:line="390" pos:column="14">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="390" pos:column="39"/></name></expr>;<pos:position pos:line="390" pos:column="40"/></return></block></then></if>

    <if pos:line="392" pos:column="5">if<condition pos:line="392" pos:column="7">(<expr><name pos:line="392" pos:column="8">ftpcode<pos:position pos:line="392" pos:column="15"/></name> <operator pos:line="392" pos:column="16">!=<pos:position pos:line="392" pos:column="18"/></operator> <literal type="number" pos:line="392" pos:column="19">200<pos:position pos:line="392" pos:column="22"/></literal></expr>)<pos:position pos:line="392" pos:column="23"/></condition><then pos:line="392" pos:column="23"> <block pos:line="392" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="393" pos:column="7">failf<pos:position pos:line="393" pos:column="12"/></name><argument_list pos:line="393" pos:column="12">(<argument><expr><name pos:line="393" pos:column="13">data<pos:position pos:line="393" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="393" pos:column="19">"Server does not grok PORT, try without it!"<pos:position pos:line="393" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="393" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="393" pos:column="65"/></expr_stmt>
      <return pos:line="394" pos:column="7">return <expr><name pos:line="394" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="394" pos:column="35"/></name></expr>;<pos:position pos:line="394" pos:column="36"/></return>
    }<pos:position pos:line="395" pos:column="6"/></block></then></if>     
<cpp:endif pos:line="396" pos:column="1">#<cpp:directive pos:line="396" pos:column="2">endif<pos:position pos:line="396" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="396" pos:column="8">/* ENABLE_IPV6 */</comment>
  }<pos:position pos:line="397" pos:column="4"/></block></then>
  <else pos:line="398" pos:column="3">else <block pos:line="398" pos:column="8">{ <comment type="block" pos:line="398" pos:column="10">/* we use the PASV command */</comment>
<cpp:if pos:line="399" pos:column="1">#<cpp:directive pos:line="399" pos:column="2">if<pos:position pos:line="399" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="399" pos:column="5">0<pos:position pos:line="399" pos:column="6"/></literal></expr></cpp:if>
    <comment type="block" pos:line="400" pos:column="5">/* no support for IPv6 passive mode yet */</comment>
    char *mode[] = { "EPSV", "LPSV", "PASV", NULL };
    int results[] = { 229, 228, 227, 0 };
<cpp:else pos:line="403" pos:column="1">#<cpp:directive pos:line="403" pos:column="2">else<pos:position pos:line="403" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="404" pos:column="5">const<pos:position pos:line="404" pos:column="10"/></specifier> <name pos:line="404" pos:column="11">char<pos:position pos:line="404" pos:column="15"/></name> <modifier pos:line="404" pos:column="16">*<pos:position pos:line="404" pos:column="17"/></modifier></type><name><name pos:line="404" pos:column="17">mode<pos:position pos:line="404" pos:column="21"/></name><index pos:line="404" pos:column="21">[]<pos:position pos:line="404" pos:column="23"/></index></name> <init pos:line="404" pos:column="24">= <expr><block pos:line="404" pos:column="26">{ <expr><literal type="string" pos:line="404" pos:column="28">"PASV"<pos:position pos:line="404" pos:column="34"/></literal></expr>, <expr><name pos:line="404" pos:column="36">NULL<pos:position pos:line="404" pos:column="40"/></name></expr> }<pos:position pos:line="404" pos:column="42"/></block></expr></init></decl>;<pos:position pos:line="404" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="405" pos:column="5">int<pos:position pos:line="405" pos:column="8"/></name></type> <name><name pos:line="405" pos:column="9">results<pos:position pos:line="405" pos:column="16"/></name><index pos:line="405" pos:column="16">[]<pos:position pos:line="405" pos:column="18"/></index></name> <init pos:line="405" pos:column="19">= <expr><block pos:line="405" pos:column="21">{ <expr><literal type="number" pos:line="405" pos:column="23">227<pos:position pos:line="405" pos:column="26"/></literal></expr>, <expr><literal type="number" pos:line="405" pos:column="28">0<pos:position pos:line="405" pos:column="29"/></literal></expr> }<pos:position pos:line="405" pos:column="31"/></block></expr></init></decl>;<pos:position pos:line="405" pos:column="32"/></decl_stmt>
<cpp:endif pos:line="406" pos:column="1">#<cpp:directive pos:line="406" pos:column="2">endif<pos:position pos:line="406" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="407" pos:column="5">int<pos:position pos:line="407" pos:column="8"/></name></type> <name pos:line="407" pos:column="9">modeoff<pos:position pos:line="407" pos:column="16"/></name></decl>;<pos:position pos:line="407" pos:column="17"/></decl_stmt>

    <for pos:line="409" pos:column="5">for <control pos:line="409" pos:column="9">(<init><expr><name pos:line="409" pos:column="10">modeoff<pos:position pos:line="409" pos:column="17"/></name> <operator pos:line="409" pos:column="18">=<pos:position pos:line="409" pos:column="19"/></operator> <literal type="number" pos:line="409" pos:column="20">0<pos:position pos:line="409" pos:column="21"/></literal></expr>;<pos:position pos:line="409" pos:column="22"/></init> <condition><expr><name><name pos:line="409" pos:column="23">mode<pos:position pos:line="409" pos:column="27"/></name><index pos:line="409" pos:column="27">[<expr><name pos:line="409" pos:column="28">modeoff<pos:position pos:line="409" pos:column="35"/></name></expr>]<pos:position pos:line="409" pos:column="36"/></index></name></expr>;<pos:position pos:line="409" pos:column="37"/></condition> <incr><expr><name pos:line="409" pos:column="38">modeoff<pos:position pos:line="409" pos:column="45"/></name><operator pos:line="409" pos:column="45">++<pos:position pos:line="409" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="409" pos:column="48"/></control> <block pos:line="409" pos:column="49">{
      <expr_stmt><expr><call><name pos:line="410" pos:column="7">ftpsendf<pos:position pos:line="410" pos:column="15"/></name><argument_list pos:line="410" pos:column="15">(<argument><expr><name><name pos:line="410" pos:column="16">conn<pos:position pos:line="410" pos:column="20"/></name><operator pos:line="410" pos:column="20">-&gt;<pos:position pos:line="410" pos:column="25"/></operator><name pos:line="410" pos:column="22">firstsocket<pos:position pos:line="410" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="410" pos:column="35">conn<pos:position pos:line="410" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="410" pos:column="41">mode<pos:position pos:line="410" pos:column="45"/></name><index pos:line="410" pos:column="45">[<expr><name pos:line="410" pos:column="46">modeoff<pos:position pos:line="410" pos:column="53"/></name></expr>]<pos:position pos:line="410" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="410" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="410" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><name pos:line="411" pos:column="7">nread<pos:position pos:line="411" pos:column="12"/></name> <operator pos:line="411" pos:column="13">=<pos:position pos:line="411" pos:column="14"/></operator> <call><name pos:line="411" pos:column="15">Curl_GetFTPResponse<pos:position pos:line="411" pos:column="34"/></name><argument_list pos:line="411" pos:column="34">(<argument><expr><name><name pos:line="411" pos:column="35">conn<pos:position pos:line="411" pos:column="39"/></name><operator pos:line="411" pos:column="39">-&gt;<pos:position pos:line="411" pos:column="44"/></operator><name pos:line="411" pos:column="41">firstsocket<pos:position pos:line="411" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="411" pos:column="54">buf<pos:position pos:line="411" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="411" pos:column="59">conn<pos:position pos:line="411" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="411" pos:column="65">&amp;<pos:position pos:line="411" pos:column="70"/></operator><name pos:line="411" pos:column="66">ftpcode<pos:position pos:line="411" pos:column="73"/></name></expr></argument>)<pos:position pos:line="411" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="411" pos:column="75"/></expr_stmt>
      <if pos:line="412" pos:column="7">if<condition pos:line="412" pos:column="9">(<expr><name pos:line="412" pos:column="10">nread<pos:position pos:line="412" pos:column="15"/></name> <operator pos:line="412" pos:column="16">&lt;<pos:position pos:line="412" pos:column="20"/></operator> <literal type="number" pos:line="412" pos:column="18">0<pos:position pos:line="412" pos:column="19"/></literal></expr>)<pos:position pos:line="412" pos:column="20"/></condition><then pos:line="412" pos:column="20">
        <block type="pseudo"><return pos:line="413" pos:column="9">return <expr><name pos:line="413" pos:column="16">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="413" pos:column="41"/></name></expr>;<pos:position pos:line="413" pos:column="42"/></return></block></then></if>

      <if pos:line="415" pos:column="7">if <condition pos:line="415" pos:column="10">(<expr><name pos:line="415" pos:column="11">ftpcode<pos:position pos:line="415" pos:column="18"/></name> <operator pos:line="415" pos:column="19">==<pos:position pos:line="415" pos:column="21"/></operator> <name><name pos:line="415" pos:column="22">results<pos:position pos:line="415" pos:column="29"/></name><index pos:line="415" pos:column="29">[<expr><name pos:line="415" pos:column="30">modeoff<pos:position pos:line="415" pos:column="37"/></name></expr>]<pos:position pos:line="415" pos:column="38"/></index></name></expr>)<pos:position pos:line="415" pos:column="39"/></condition><then pos:line="415" pos:column="39">
        <block type="pseudo"><break pos:line="416" pos:column="9">break;<pos:position pos:line="416" pos:column="15"/></break></block></then></if>
    }<pos:position pos:line="417" pos:column="6"/></block></for>

    <if pos:line="419" pos:column="5">if <condition pos:line="419" pos:column="8">(<expr><operator pos:line="419" pos:column="9">!<pos:position pos:line="419" pos:column="10"/></operator><name><name pos:line="419" pos:column="10">mode<pos:position pos:line="419" pos:column="14"/></name><index pos:line="419" pos:column="14">[<expr><name pos:line="419" pos:column="15">modeoff<pos:position pos:line="419" pos:column="22"/></name></expr>]<pos:position pos:line="419" pos:column="23"/></index></name></expr>)<pos:position pos:line="419" pos:column="24"/></condition><then pos:line="419" pos:column="24"> <block pos:line="419" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="420" pos:column="7">failf<pos:position pos:line="420" pos:column="12"/></name><argument_list pos:line="420" pos:column="12">(<argument><expr><name pos:line="420" pos:column="13">data<pos:position pos:line="420" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="420" pos:column="19">"Odd return code after PASV"<pos:position pos:line="420" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="420" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="420" pos:column="49"/></expr_stmt>
      <return pos:line="421" pos:column="7">return <expr><name pos:line="421" pos:column="14">CURLE_FTP_WEIRD_PASV_REPLY<pos:position pos:line="421" pos:column="40"/></name></expr>;<pos:position pos:line="421" pos:column="41"/></return>
    }<pos:position pos:line="422" pos:column="6"/></block></then>
    <elseif pos:line="423" pos:column="5">else <if pos:line="423" pos:column="10">if <condition pos:line="423" pos:column="13">(<expr><call><name pos:line="423" pos:column="14">strcmp<pos:position pos:line="423" pos:column="20"/></name><argument_list pos:line="423" pos:column="20">(<argument><expr><name><name pos:line="423" pos:column="21">mode<pos:position pos:line="423" pos:column="25"/></name><index pos:line="423" pos:column="25">[<expr><name pos:line="423" pos:column="26">modeoff<pos:position pos:line="423" pos:column="33"/></name></expr>]<pos:position pos:line="423" pos:column="34"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="423" pos:column="36">"PASV"<pos:position pos:line="423" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="423" pos:column="43"/></argument_list></call> <operator pos:line="423" pos:column="44">==<pos:position pos:line="423" pos:column="46"/></operator> <literal type="number" pos:line="423" pos:column="47">0<pos:position pos:line="423" pos:column="48"/></literal></expr>)<pos:position pos:line="423" pos:column="49"/></condition><then pos:line="423" pos:column="49"> <block pos:line="423" pos:column="50">{
      <decl_stmt><decl><type><name pos:line="424" pos:column="7">int<pos:position pos:line="424" pos:column="10"/></name></type> <name><name pos:line="424" pos:column="11">ip<pos:position pos:line="424" pos:column="13"/></name><index pos:line="424" pos:column="13">[<expr><literal type="number" pos:line="424" pos:column="14">4<pos:position pos:line="424" pos:column="15"/></literal></expr>]<pos:position pos:line="424" pos:column="16"/></index></name></decl>;<pos:position pos:line="424" pos:column="17"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="425" pos:column="7">int<pos:position pos:line="425" pos:column="10"/></name></type> <name><name pos:line="425" pos:column="11">port<pos:position pos:line="425" pos:column="15"/></name><index pos:line="425" pos:column="15">[<expr><literal type="number" pos:line="425" pos:column="16">2<pos:position pos:line="425" pos:column="17"/></literal></expr>]<pos:position pos:line="425" pos:column="18"/></index></name></decl>;<pos:position pos:line="425" pos:column="19"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="426" pos:column="7">unsigned<pos:position pos:line="426" pos:column="15"/></name> <name pos:line="426" pos:column="16">short<pos:position pos:line="426" pos:column="21"/></name></type> <name pos:line="426" pos:column="22">newport<pos:position pos:line="426" pos:column="29"/></name></decl>;<pos:position pos:line="426" pos:column="30"/></decl_stmt> <comment type="block" pos:line="426" pos:column="31">/* remote port, not necessary the local one */</comment>
      <decl_stmt><decl><type><name pos:line="427" pos:column="7">unsigned<pos:position pos:line="427" pos:column="15"/></name> <name pos:line="427" pos:column="16">short<pos:position pos:line="427" pos:column="21"/></name></type> <name pos:line="427" pos:column="22">connectport<pos:position pos:line="427" pos:column="33"/></name></decl>;<pos:position pos:line="427" pos:column="34"/></decl_stmt> <comment type="block" pos:line="427" pos:column="35">/* the local port connect() should use! */</comment>
      <decl_stmt><decl><type><name pos:line="428" pos:column="7">char<pos:position pos:line="428" pos:column="11"/></name></type> <name><name pos:line="428" pos:column="12">newhost<pos:position pos:line="428" pos:column="19"/></name><index pos:line="428" pos:column="19">[<expr><literal type="number" pos:line="428" pos:column="20">32<pos:position pos:line="428" pos:column="22"/></literal></expr>]<pos:position pos:line="428" pos:column="23"/></index></name></decl>;<pos:position pos:line="428" pos:column="24"/></decl_stmt>
<cpp:ifdef pos:line="429" pos:column="1">#<cpp:directive pos:line="429" pos:column="2">ifdef<pos:position pos:line="429" pos:column="7"/></cpp:directive> <name pos:line="429" pos:column="8">ENABLE_IPV6<pos:position pos:line="429" pos:column="19"/></name></cpp:ifdef>
      <decl_stmt><decl><type><name><name pos:line="430" pos:column="7">struct<pos:position pos:line="430" pos:column="13"/></name> <name pos:line="430" pos:column="14">addrinfo<pos:position pos:line="430" pos:column="22"/></name></name> <modifier pos:line="430" pos:column="23">*<pos:position pos:line="430" pos:column="24"/></modifier></type><name pos:line="430" pos:column="24">res<pos:position pos:line="430" pos:column="27"/></name></decl>;<pos:position pos:line="430" pos:column="28"/></decl_stmt>
<cpp:else pos:line="431" pos:column="1">#<cpp:directive pos:line="431" pos:column="2">else<pos:position pos:line="431" pos:column="6"/></cpp:directive></cpp:else>
      <decl_stmt><decl><type><name><name pos:line="432" pos:column="7">struct<pos:position pos:line="432" pos:column="13"/></name> <name pos:line="432" pos:column="14">hostent<pos:position pos:line="432" pos:column="21"/></name></name> <modifier pos:line="432" pos:column="22">*<pos:position pos:line="432" pos:column="23"/></modifier></type><name pos:line="432" pos:column="23">he<pos:position pos:line="432" pos:column="25"/></name></decl>;<pos:position pos:line="432" pos:column="26"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="433" pos:column="7">char<pos:position pos:line="433" pos:column="11"/></name> <modifier pos:line="433" pos:column="12">*<pos:position pos:line="433" pos:column="13"/></modifier></type><name pos:line="433" pos:column="13">hostdataptr<pos:position pos:line="433" pos:column="24"/></name><init pos:line="433" pos:column="24">=<expr><name pos:line="433" pos:column="25">NULL<pos:position pos:line="433" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="433" pos:column="30"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="434" pos:column="7">char<pos:position pos:line="434" pos:column="11"/></name> <modifier pos:line="434" pos:column="12">*<pos:position pos:line="434" pos:column="13"/></modifier></type><name pos:line="434" pos:column="13">ip_addr<pos:position pos:line="434" pos:column="20"/></name></decl>;<pos:position pos:line="434" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="435" pos:column="1">#<cpp:directive pos:line="435" pos:column="2">endif<pos:position pos:line="435" pos:column="7"/></cpp:directive></cpp:endif>
      <decl_stmt><decl><type><name pos:line="436" pos:column="7">char<pos:position pos:line="436" pos:column="11"/></name> <modifier pos:line="436" pos:column="12">*<pos:position pos:line="436" pos:column="13"/></modifier></type><name pos:line="436" pos:column="13">str<pos:position pos:line="436" pos:column="16"/></name><init pos:line="436" pos:column="16">=<expr><name pos:line="436" pos:column="17">buf<pos:position pos:line="436" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="436" pos:column="21"/></decl_stmt>

      <comment type="block" pos:line="438" pos:column="7">/*
       * New 227-parser June 3rd 1999.
       * It now scans for a sequence of six comma-separated numbers and
       * will take them as IP+port indicators.
       *
       * Found reply-strings include:
       * "227 Entering Passive Mode (127,0,0,1,4,51)"
       * "227 Data transfer will passively listen to 127,0,0,1,4,51"
       * "227 Entering passive mode. 127,0,0,1,4,51"
       */</comment>
      
      <while pos:line="449" pos:column="7">while<condition pos:line="449" pos:column="12">(<expr><operator pos:line="449" pos:column="13">*<pos:position pos:line="449" pos:column="14"/></operator><name pos:line="449" pos:column="14">str<pos:position pos:line="449" pos:column="17"/></name></expr>)<pos:position pos:line="449" pos:column="18"/></condition> <block pos:line="449" pos:column="19">{
	      <if pos:line="450" pos:column="15">if <condition pos:line="450" pos:column="18">(<expr><literal type="number" pos:line="450" pos:column="19">6<pos:position pos:line="450" pos:column="20"/></literal> <operator pos:line="450" pos:column="21">==<pos:position pos:line="450" pos:column="23"/></operator> <call><name pos:line="450" pos:column="24">sscanf<pos:position pos:line="450" pos:column="30"/></name><argument_list pos:line="450" pos:column="30">(<argument><expr><name pos:line="450" pos:column="31">str<pos:position pos:line="450" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="450" pos:column="36">"%d,%d,%d,%d,%d,%d"<pos:position pos:line="450" pos:column="55"/></literal></expr></argument>,
                        <argument><expr><operator pos:line="451" pos:column="25">&amp;<pos:position pos:line="451" pos:column="30"/></operator><name><name pos:line="451" pos:column="26">ip<pos:position pos:line="451" pos:column="28"/></name><index pos:line="451" pos:column="28">[<expr><literal type="number" pos:line="451" pos:column="29">0<pos:position pos:line="451" pos:column="30"/></literal></expr>]<pos:position pos:line="451" pos:column="31"/></index></name></expr></argument>, <argument><expr><operator pos:line="451" pos:column="33">&amp;<pos:position pos:line="451" pos:column="38"/></operator><name><name pos:line="451" pos:column="34">ip<pos:position pos:line="451" pos:column="36"/></name><index pos:line="451" pos:column="36">[<expr><literal type="number" pos:line="451" pos:column="37">1<pos:position pos:line="451" pos:column="38"/></literal></expr>]<pos:position pos:line="451" pos:column="39"/></index></name></expr></argument>, <argument><expr><operator pos:line="451" pos:column="41">&amp;<pos:position pos:line="451" pos:column="46"/></operator><name><name pos:line="451" pos:column="42">ip<pos:position pos:line="451" pos:column="44"/></name><index pos:line="451" pos:column="44">[<expr><literal type="number" pos:line="451" pos:column="45">2<pos:position pos:line="451" pos:column="46"/></literal></expr>]<pos:position pos:line="451" pos:column="47"/></index></name></expr></argument>, <argument><expr><operator pos:line="451" pos:column="49">&amp;<pos:position pos:line="451" pos:column="54"/></operator><name><name pos:line="451" pos:column="50">ip<pos:position pos:line="451" pos:column="52"/></name><index pos:line="451" pos:column="52">[<expr><literal type="number" pos:line="451" pos:column="53">3<pos:position pos:line="451" pos:column="54"/></literal></expr>]<pos:position pos:line="451" pos:column="55"/></index></name></expr></argument>,
                        <argument><expr><operator pos:line="452" pos:column="25">&amp;<pos:position pos:line="452" pos:column="30"/></operator><name><name pos:line="452" pos:column="26">port<pos:position pos:line="452" pos:column="30"/></name><index pos:line="452" pos:column="30">[<expr><literal type="number" pos:line="452" pos:column="31">0<pos:position pos:line="452" pos:column="32"/></literal></expr>]<pos:position pos:line="452" pos:column="33"/></index></name></expr></argument>, <argument><expr><operator pos:line="452" pos:column="35">&amp;<pos:position pos:line="452" pos:column="40"/></operator><name><name pos:line="452" pos:column="36">port<pos:position pos:line="452" pos:column="40"/></name><index pos:line="452" pos:column="40">[<expr><literal type="number" pos:line="452" pos:column="41">1<pos:position pos:line="452" pos:column="42"/></literal></expr>]<pos:position pos:line="452" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="452" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="452" pos:column="45"/></condition><then pos:line="452" pos:column="45">
    	    <block type="pseudo"><break pos:line="453" pos:column="13">break;<pos:position pos:line="453" pos:column="19"/></break></block></then></if>
        <expr_stmt><expr><name pos:line="454" pos:column="9">str<pos:position pos:line="454" pos:column="12"/></name><operator pos:line="454" pos:column="12">++<pos:position pos:line="454" pos:column="14"/></operator></expr>;<pos:position pos:line="454" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="455" pos:column="8"/></block></while>

      <if pos:line="457" pos:column="7">if<condition pos:line="457" pos:column="9">(<expr><operator pos:line="457" pos:column="10">!<pos:position pos:line="457" pos:column="11"/></operator><operator pos:line="457" pos:column="11">*<pos:position pos:line="457" pos:column="12"/></operator><name pos:line="457" pos:column="12">str<pos:position pos:line="457" pos:column="15"/></name></expr>)<pos:position pos:line="457" pos:column="16"/></condition><then pos:line="457" pos:column="16"> <block pos:line="457" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="458" pos:column="9">failf<pos:position pos:line="458" pos:column="14"/></name><argument_list pos:line="458" pos:column="14">(<argument><expr><name pos:line="458" pos:column="15">data<pos:position pos:line="458" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="458" pos:column="21">"Couldn't interpret this 227-reply: %s"<pos:position pos:line="458" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="458" pos:column="62">buf<pos:position pos:line="458" pos:column="65"/></name></expr></argument>)<pos:position pos:line="458" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="458" pos:column="67"/></expr_stmt>
        <return pos:line="459" pos:column="9">return <expr><name pos:line="459" pos:column="16">CURLE_FTP_WEIRD_227_FORMAT<pos:position pos:line="459" pos:column="42"/></name></expr>;<pos:position pos:line="459" pos:column="43"/></return>
      }<pos:position pos:line="460" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="462" pos:column="7">sprintf<pos:position pos:line="462" pos:column="14"/></name><argument_list pos:line="462" pos:column="14">(<argument><expr><name pos:line="462" pos:column="15">newhost<pos:position pos:line="462" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="462" pos:column="24">"%d.%d.%d.%d"<pos:position pos:line="462" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="462" pos:column="39">ip<pos:position pos:line="462" pos:column="41"/></name><index pos:line="462" pos:column="41">[<expr><literal type="number" pos:line="462" pos:column="42">0<pos:position pos:line="462" pos:column="43"/></literal></expr>]<pos:position pos:line="462" pos:column="44"/></index></name></expr></argument>, <argument><expr><name><name pos:line="462" pos:column="46">ip<pos:position pos:line="462" pos:column="48"/></name><index pos:line="462" pos:column="48">[<expr><literal type="number" pos:line="462" pos:column="49">1<pos:position pos:line="462" pos:column="50"/></literal></expr>]<pos:position pos:line="462" pos:column="51"/></index></name></expr></argument>, <argument><expr><name><name pos:line="462" pos:column="53">ip<pos:position pos:line="462" pos:column="55"/></name><index pos:line="462" pos:column="55">[<expr><literal type="number" pos:line="462" pos:column="56">2<pos:position pos:line="462" pos:column="57"/></literal></expr>]<pos:position pos:line="462" pos:column="58"/></index></name></expr></argument>, <argument><expr><name><name pos:line="462" pos:column="60">ip<pos:position pos:line="462" pos:column="62"/></name><index pos:line="462" pos:column="62">[<expr><literal type="number" pos:line="462" pos:column="63">3<pos:position pos:line="462" pos:column="64"/></literal></expr>]<pos:position pos:line="462" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="462" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="462" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><name pos:line="463" pos:column="7">newport<pos:position pos:line="463" pos:column="14"/></name> <operator pos:line="463" pos:column="15">=<pos:position pos:line="463" pos:column="16"/></operator> <operator pos:line="463" pos:column="17">(<pos:position pos:line="463" pos:column="18"/></operator><name><name pos:line="463" pos:column="18">port<pos:position pos:line="463" pos:column="22"/></name><index pos:line="463" pos:column="22">[<expr><literal type="number" pos:line="463" pos:column="23">0<pos:position pos:line="463" pos:column="24"/></literal></expr>]<pos:position pos:line="463" pos:column="25"/></index></name><operator pos:line="463" pos:column="25">&lt;&lt;<pos:position pos:line="463" pos:column="33"/></operator><literal type="number" pos:line="463" pos:column="27">8<pos:position pos:line="463" pos:column="28"/></literal><operator pos:line="463" pos:column="28">)<pos:position pos:line="463" pos:column="29"/></operator> <operator pos:line="463" pos:column="30">+<pos:position pos:line="463" pos:column="31"/></operator> <name><name pos:line="463" pos:column="32">port<pos:position pos:line="463" pos:column="36"/></name><index pos:line="463" pos:column="36">[<expr><literal type="number" pos:line="463" pos:column="37">1<pos:position pos:line="463" pos:column="38"/></literal></expr>]<pos:position pos:line="463" pos:column="39"/></index></name></expr>;<pos:position pos:line="463" pos:column="40"/></expr_stmt>
      <if pos:line="464" pos:column="7">if<condition pos:line="464" pos:column="9">(<expr><name><name pos:line="464" pos:column="10">data<pos:position pos:line="464" pos:column="14"/></name><operator pos:line="464" pos:column="14">-&gt;<pos:position pos:line="464" pos:column="19"/></operator><name pos:line="464" pos:column="16">change<pos:position pos:line="464" pos:column="22"/></name><operator pos:line="464" pos:column="22">.<pos:position pos:line="464" pos:column="23"/></operator><name pos:line="464" pos:column="23">proxy<pos:position pos:line="464" pos:column="28"/></name></name></expr>)<pos:position pos:line="464" pos:column="29"/></condition><then pos:line="464" pos:column="29"> <block pos:line="464" pos:column="30">{
        <comment type="block" pos:line="465" pos:column="9">/*
         * This is a tunnel through a http proxy and we need to connect to the
         * proxy again here. We already have the name info for it since the
         * previous lookup.
         */</comment>
<cpp:ifdef pos:line="470" pos:column="1">#<cpp:directive pos:line="470" pos:column="2">ifdef<pos:position pos:line="470" pos:column="7"/></cpp:directive> <name pos:line="470" pos:column="8">ENABLE_IPV6<pos:position pos:line="470" pos:column="19"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="471" pos:column="9">res<pos:position pos:line="471" pos:column="12"/></name> <operator pos:line="471" pos:column="13">=<pos:position pos:line="471" pos:column="14"/></operator> <name><name pos:line="471" pos:column="15">conn<pos:position pos:line="471" pos:column="19"/></name><operator pos:line="471" pos:column="19">-&gt;<pos:position pos:line="471" pos:column="24"/></operator><name pos:line="471" pos:column="21">hp<pos:position pos:line="471" pos:column="23"/></name></name></expr>;<pos:position pos:line="471" pos:column="24"/></expr_stmt>
<cpp:else pos:line="472" pos:column="1">#<cpp:directive pos:line="472" pos:column="2">else<pos:position pos:line="472" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name pos:line="473" pos:column="9">he<pos:position pos:line="473" pos:column="11"/></name> <operator pos:line="473" pos:column="12">=<pos:position pos:line="473" pos:column="13"/></operator> <name><name pos:line="473" pos:column="14">conn<pos:position pos:line="473" pos:column="18"/></name><operator pos:line="473" pos:column="18">-&gt;<pos:position pos:line="473" pos:column="23"/></operator><name pos:line="473" pos:column="20">hp<pos:position pos:line="473" pos:column="22"/></name></name></expr>;<pos:position pos:line="473" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="474" pos:column="1">#<cpp:directive pos:line="474" pos:column="2">endif<pos:position pos:line="474" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><name pos:line="475" pos:column="9">connectport<pos:position pos:line="475" pos:column="20"/></name> <operator pos:line="475" pos:column="21">=<pos:position pos:line="475" pos:column="22"/></operator>
          <operator pos:line="476" pos:column="11">(<pos:position pos:line="476" pos:column="12"/></operator><name pos:line="476" pos:column="12">unsigned<pos:position pos:line="476" pos:column="20"/></name> <name pos:line="476" pos:column="21">short<pos:position pos:line="476" pos:column="26"/></name><operator pos:line="476" pos:column="26">)<pos:position pos:line="476" pos:column="27"/></operator><name><name pos:line="476" pos:column="27">conn<pos:position pos:line="476" pos:column="31"/></name><operator pos:line="476" pos:column="31">-&gt;<pos:position pos:line="476" pos:column="36"/></operator><name pos:line="476" pos:column="33">port<pos:position pos:line="476" pos:column="37"/></name></name></expr>;<pos:position pos:line="476" pos:column="38"/></expr_stmt> <comment type="block" pos:line="476" pos:column="39">/* we connect to the proxy's port */</comment>
      }<pos:position pos:line="477" pos:column="8"/></block></then>
      <else pos:line="478" pos:column="7">else <block pos:line="478" pos:column="12">{
        <comment type="block" pos:line="479" pos:column="9">/* normal, direct, ftp connection */</comment>
<cpp:ifdef pos:line="480" pos:column="1">#<cpp:directive pos:line="480" pos:column="2">ifdef<pos:position pos:line="480" pos:column="7"/></cpp:directive> <name pos:line="480" pos:column="8">ENABLE_IPV6<pos:position pos:line="480" pos:column="19"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="481" pos:column="9">res<pos:position pos:line="481" pos:column="12"/></name> <operator pos:line="481" pos:column="13">=<pos:position pos:line="481" pos:column="14"/></operator> <call><name pos:line="481" pos:column="15">Curl_getaddrinfo<pos:position pos:line="481" pos:column="31"/></name><argument_list pos:line="481" pos:column="31">(<argument><expr><name pos:line="481" pos:column="32">data<pos:position pos:line="481" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="481" pos:column="38">newhost<pos:position pos:line="481" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="481" pos:column="47">newport<pos:position pos:line="481" pos:column="54"/></name></expr></argument>)<pos:position pos:line="481" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="481" pos:column="56"/></expr_stmt>
        <if pos:line="482" pos:column="9">if<condition pos:line="482" pos:column="11">(<expr><operator pos:line="482" pos:column="12">!<pos:position pos:line="482" pos:column="13"/></operator><name pos:line="482" pos:column="13">res<pos:position pos:line="482" pos:column="16"/></name></expr>)<pos:position pos:line="482" pos:column="17"/></condition><then pos:line="482" pos:column="17">
<cpp:else pos:line="483" pos:column="1">#<cpp:directive pos:line="483" pos:column="2">else<pos:position pos:line="483" pos:column="6"/></cpp:directive></cpp:else>
        <block type="pseudo"><expr_stmt><expr><name pos:line="484" pos:column="9">he<pos:position pos:line="484" pos:column="11"/></name> <operator pos:line="484" pos:column="12">=<pos:position pos:line="484" pos:column="13"/></operator> <call><name pos:line="484" pos:column="14">Curl_gethost<pos:position pos:line="484" pos:column="26"/></name><argument_list pos:line="484" pos:column="26">(<argument><expr><name pos:line="484" pos:column="27">data<pos:position pos:line="484" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="484" pos:column="33">newhost<pos:position pos:line="484" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="484" pos:column="42">&amp;<pos:position pos:line="484" pos:column="47"/></operator><name pos:line="484" pos:column="43">hostdataptr<pos:position pos:line="484" pos:column="54"/></name></expr></argument>)<pos:position pos:line="484" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="484" pos:column="56"/></expr_stmt></block></then></if>
        <if pos:line="485" pos:column="9">if<condition pos:line="485" pos:column="11">(<expr><operator pos:line="485" pos:column="12">!<pos:position pos:line="485" pos:column="13"/></operator><name pos:line="485" pos:column="13">he<pos:position pos:line="485" pos:column="15"/></name></expr>)<pos:position pos:line="485" pos:column="16"/></condition><then pos:line="485" pos:column="16">
<cpp:endif pos:line="486" pos:column="1">#<cpp:directive pos:line="486" pos:column="2">endif<pos:position pos:line="486" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="487" pos:column="9">{
          <expr_stmt><expr><call><name pos:line="488" pos:column="11">failf<pos:position pos:line="488" pos:column="16"/></name><argument_list pos:line="488" pos:column="16">(<argument><expr><name pos:line="488" pos:column="17">data<pos:position pos:line="488" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="488" pos:column="23">"Can't resolve new host %s"<pos:position pos:line="488" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="488" pos:column="52">newhost<pos:position pos:line="488" pos:column="59"/></name></expr></argument>)<pos:position pos:line="488" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="488" pos:column="61"/></expr_stmt>
          <return pos:line="489" pos:column="11">return <expr><name pos:line="489" pos:column="18">CURLE_FTP_CANT_GET_HOST<pos:position pos:line="489" pos:column="41"/></name></expr>;<pos:position pos:line="489" pos:column="42"/></return>
        }<pos:position pos:line="490" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="491" pos:column="9">connectport<pos:position pos:line="491" pos:column="20"/></name> <operator pos:line="491" pos:column="21">=<pos:position pos:line="491" pos:column="22"/></operator> <name pos:line="491" pos:column="23">newport<pos:position pos:line="491" pos:column="30"/></name></expr>;<pos:position pos:line="491" pos:column="31"/></expr_stmt> <comment type="block" pos:line="491" pos:column="32">/* we connect to the remote port */</comment>
      }<pos:position pos:line="492" pos:column="8"/></block></else></if>
	
<cpp:ifdef pos:line="494" pos:column="1">#<cpp:directive pos:line="494" pos:column="2">ifdef<pos:position pos:line="494" pos:column="7"/></cpp:directive> <name pos:line="494" pos:column="8">ENABLE_IPV6<pos:position pos:line="494" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name><name pos:line="495" pos:column="7">conn<pos:position pos:line="495" pos:column="11"/></name><operator pos:line="495" pos:column="11">-&gt;<pos:position pos:line="495" pos:column="16"/></operator><name pos:line="495" pos:column="13">secondarysocket<pos:position pos:line="495" pos:column="28"/></name></name> <operator pos:line="495" pos:column="29">=<pos:position pos:line="495" pos:column="30"/></operator> <operator pos:line="495" pos:column="31">-<pos:position pos:line="495" pos:column="32"/></operator><literal type="number" pos:line="495" pos:column="32">1<pos:position pos:line="495" pos:column="33"/></literal></expr>;<pos:position pos:line="495" pos:column="34"/></expr_stmt>
      <for pos:line="496" pos:column="7">for <control pos:line="496" pos:column="11">(<init><expr><name pos:line="496" pos:column="12">ai<pos:position pos:line="496" pos:column="14"/></name> <operator pos:line="496" pos:column="15">=<pos:position pos:line="496" pos:column="16"/></operator> <name pos:line="496" pos:column="17">res<pos:position pos:line="496" pos:column="20"/></name></expr>;<pos:position pos:line="496" pos:column="21"/></init> <condition><expr><name pos:line="496" pos:column="22">ai<pos:position pos:line="496" pos:column="24"/></name></expr>;<pos:position pos:line="496" pos:column="25"/></condition> <incr><expr><name pos:line="496" pos:column="26">ai<pos:position pos:line="496" pos:column="28"/></name> <operator pos:line="496" pos:column="29">=<pos:position pos:line="496" pos:column="30"/></operator> <name><name pos:line="496" pos:column="31">ai<pos:position pos:line="496" pos:column="33"/></name><operator pos:line="496" pos:column="33">-&gt;<pos:position pos:line="496" pos:column="38"/></operator><name pos:line="496" pos:column="35">ai_next<pos:position pos:line="496" pos:column="42"/></name></name></expr></incr>)<pos:position pos:line="496" pos:column="43"/></control> <block pos:line="496" pos:column="44">{
        <comment type="block" pos:line="497" pos:column="9">/* XXX for now, we can do IPv4 only */</comment>
        <if pos:line="498" pos:column="9">if <condition pos:line="498" pos:column="12">(<expr><name><name pos:line="498" pos:column="13">ai<pos:position pos:line="498" pos:column="15"/></name><operator pos:line="498" pos:column="15">-&gt;<pos:position pos:line="498" pos:column="20"/></operator><name pos:line="498" pos:column="17">ai_family<pos:position pos:line="498" pos:column="26"/></name></name> <operator pos:line="498" pos:column="27">!=<pos:position pos:line="498" pos:column="29"/></operator> <name pos:line="498" pos:column="30">AF_INET<pos:position pos:line="498" pos:column="37"/></name></expr>)<pos:position pos:line="498" pos:column="38"/></condition><then pos:line="498" pos:column="38">
          <block type="pseudo"><continue pos:line="499" pos:column="11">continue;<pos:position pos:line="499" pos:column="20"/></continue></block></then></if>

        <expr_stmt><expr><name><name pos:line="501" pos:column="9">conn<pos:position pos:line="501" pos:column="13"/></name><operator pos:line="501" pos:column="13">-&gt;<pos:position pos:line="501" pos:column="18"/></operator><name pos:line="501" pos:column="15">secondarysocket<pos:position pos:line="501" pos:column="30"/></name></name> <operator pos:line="501" pos:column="31">=<pos:position pos:line="501" pos:column="32"/></operator> <call><name pos:line="501" pos:column="33">socket<pos:position pos:line="501" pos:column="39"/></name><argument_list pos:line="501" pos:column="39">(<argument><expr><name><name pos:line="501" pos:column="40">ai<pos:position pos:line="501" pos:column="42"/></name><operator pos:line="501" pos:column="42">-&gt;<pos:position pos:line="501" pos:column="47"/></operator><name pos:line="501" pos:column="44">ai_family<pos:position pos:line="501" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="501" pos:column="55">ai<pos:position pos:line="501" pos:column="57"/></name><operator pos:line="501" pos:column="57">-&gt;<pos:position pos:line="501" pos:column="62"/></operator><name pos:line="501" pos:column="59">ai_socktype<pos:position pos:line="501" pos:column="70"/></name></name></expr></argument>,
                                       <argument><expr><name><name pos:line="502" pos:column="40">ai<pos:position pos:line="502" pos:column="42"/></name><operator pos:line="502" pos:column="42">-&gt;<pos:position pos:line="502" pos:column="47"/></operator><name pos:line="502" pos:column="44">ai_protocol<pos:position pos:line="502" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="502" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="502" pos:column="57"/></expr_stmt>
        <if pos:line="503" pos:column="9">if <condition pos:line="503" pos:column="12">(<expr><name><name pos:line="503" pos:column="13">conn<pos:position pos:line="503" pos:column="17"/></name><operator pos:line="503" pos:column="17">-&gt;<pos:position pos:line="503" pos:column="22"/></operator><name pos:line="503" pos:column="19">secondarysocket<pos:position pos:line="503" pos:column="34"/></name></name> <operator pos:line="503" pos:column="35">&lt;<pos:position pos:line="503" pos:column="39"/></operator> <literal type="number" pos:line="503" pos:column="37">0<pos:position pos:line="503" pos:column="38"/></literal></expr>)<pos:position pos:line="503" pos:column="39"/></condition><then pos:line="503" pos:column="39">
          <block type="pseudo"><continue pos:line="504" pos:column="11">continue;<pos:position pos:line="504" pos:column="20"/></continue></block></then></if>

      	<if pos:line="506" pos:column="9">if<condition pos:line="506" pos:column="11">(<expr><name><name pos:line="506" pos:column="12">data<pos:position pos:line="506" pos:column="16"/></name><operator pos:line="506" pos:column="16">-&gt;<pos:position pos:line="506" pos:column="21"/></operator><name pos:line="506" pos:column="18">set<pos:position pos:line="506" pos:column="21"/></name><operator pos:line="506" pos:column="21">.<pos:position pos:line="506" pos:column="22"/></operator><name pos:line="506" pos:column="22">verbose<pos:position pos:line="506" pos:column="29"/></name></name></expr>)<pos:position pos:line="506" pos:column="30"/></condition><then pos:line="506" pos:column="30"> <block pos:line="506" pos:column="31">{
          <decl_stmt><decl><type><name pos:line="507" pos:column="11">char<pos:position pos:line="507" pos:column="15"/></name></type> <name><name pos:line="507" pos:column="16">hbuf<pos:position pos:line="507" pos:column="20"/></name><index pos:line="507" pos:column="20">[<expr><name pos:line="507" pos:column="21">NI_MAXHOST<pos:position pos:line="507" pos:column="31"/></name></expr>]<pos:position pos:line="507" pos:column="32"/></index></name></decl>;<pos:position pos:line="507" pos:column="33"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="508" pos:column="11">char<pos:position pos:line="508" pos:column="15"/></name></type> <name><name pos:line="508" pos:column="16">nbuf<pos:position pos:line="508" pos:column="20"/></name><index pos:line="508" pos:column="20">[<expr><name pos:line="508" pos:column="21">NI_MAXHOST<pos:position pos:line="508" pos:column="31"/></name></expr>]<pos:position pos:line="508" pos:column="32"/></index></name></decl>;<pos:position pos:line="508" pos:column="33"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="509" pos:column="11">char<pos:position pos:line="509" pos:column="15"/></name></type> <name><name pos:line="509" pos:column="16">sbuf<pos:position pos:line="509" pos:column="20"/></name><index pos:line="509" pos:column="20">[<expr><name pos:line="509" pos:column="21">NI_MAXSERV<pos:position pos:line="509" pos:column="31"/></name></expr>]<pos:position pos:line="509" pos:column="32"/></index></name></decl>;<pos:position pos:line="509" pos:column="33"/></decl_stmt>
<cpp:ifdef pos:line="510" pos:column="1">#<cpp:directive pos:line="510" pos:column="2">ifdef<pos:position pos:line="510" pos:column="7"/></cpp:directive> <name pos:line="510" pos:column="8">NI_WITHSCOPEID<pos:position pos:line="510" pos:column="22"/></name></cpp:ifdef>
          <decl_stmt><decl><type><specifier pos:line="511" pos:column="11">const<pos:position pos:line="511" pos:column="16"/></specifier> <name pos:line="511" pos:column="17">int<pos:position pos:line="511" pos:column="20"/></name></type> <name pos:line="511" pos:column="21">niflags<pos:position pos:line="511" pos:column="28"/></name> <init pos:line="511" pos:column="29">= <expr><name pos:line="511" pos:column="31">NI_NUMERICHOST<pos:position pos:line="511" pos:column="45"/></name> <operator pos:line="511" pos:column="46">|<pos:position pos:line="511" pos:column="47"/></operator> <name pos:line="511" pos:column="48">NI_NUMERICSERV<pos:position pos:line="511" pos:column="62"/></name> <operator pos:line="511" pos:column="63">|<pos:position pos:line="511" pos:column="64"/></operator> <name pos:line="511" pos:column="65">NI_WITHSCOPEID<pos:position pos:line="511" pos:column="79"/></name></expr></init></decl>;<pos:position pos:line="511" pos:column="80"/></decl_stmt>
<cpp:else pos:line="512" pos:column="1">#<cpp:directive pos:line="512" pos:column="2">else<pos:position pos:line="512" pos:column="6"/></cpp:directive></cpp:else>
          <decl_stmt><decl><type><specifier pos:line="513" pos:column="11">const<pos:position pos:line="513" pos:column="16"/></specifier> <name pos:line="513" pos:column="17">int<pos:position pos:line="513" pos:column="20"/></name></type> <name pos:line="513" pos:column="21">niflags<pos:position pos:line="513" pos:column="28"/></name> <init pos:line="513" pos:column="29">= <expr><name pos:line="513" pos:column="31">NI_NUMERICHOST<pos:position pos:line="513" pos:column="45"/></name> <operator pos:line="513" pos:column="46">|<pos:position pos:line="513" pos:column="47"/></operator> <name pos:line="513" pos:column="48">NI_NUMERICSERV<pos:position pos:line="513" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="513" pos:column="63"/></decl_stmt>
<cpp:endif pos:line="514" pos:column="1">#<cpp:directive pos:line="514" pos:column="2">endif<pos:position pos:line="514" pos:column="7"/></cpp:directive></cpp:endif>
          <if pos:line="515" pos:column="11">if <condition pos:line="515" pos:column="14">(<expr><call><name pos:line="515" pos:column="15">getnameinfo<pos:position pos:line="515" pos:column="26"/></name><argument_list pos:line="515" pos:column="26">(<argument><expr><name><name pos:line="515" pos:column="27">res<pos:position pos:line="515" pos:column="30"/></name><operator pos:line="515" pos:column="30">-&gt;<pos:position pos:line="515" pos:column="35"/></operator><name pos:line="515" pos:column="32">ai_addr<pos:position pos:line="515" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="515" pos:column="41">res<pos:position pos:line="515" pos:column="44"/></name><operator pos:line="515" pos:column="44">-&gt;<pos:position pos:line="515" pos:column="49"/></operator><name pos:line="515" pos:column="46">ai_addrlen<pos:position pos:line="515" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="515" pos:column="58">nbuf<pos:position pos:line="515" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="515" pos:column="64">sizeof<argument_list pos:line="515" pos:column="70">(<argument><expr><name pos:line="515" pos:column="71">nbuf<pos:position pos:line="515" pos:column="75"/></name></expr></argument>)<pos:position pos:line="515" pos:column="76"/></argument_list></sizeof></expr></argument>,
                          <argument><expr><name pos:line="516" pos:column="27">sbuf<pos:position pos:line="516" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="516" pos:column="33">sizeof<argument_list pos:line="516" pos:column="39">(<argument><expr><name pos:line="516" pos:column="40">sbuf<pos:position pos:line="516" pos:column="44"/></name></expr></argument>)<pos:position pos:line="516" pos:column="45"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="516" pos:column="47">niflags<pos:position pos:line="516" pos:column="54"/></name></expr></argument>)<pos:position pos:line="516" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="516" pos:column="56"/></condition><then pos:line="516" pos:column="56"> <block pos:line="516" pos:column="57">{
            <expr_stmt><expr><call><name pos:line="517" pos:column="13">snprintf<pos:position pos:line="517" pos:column="21"/></name><argument_list pos:line="517" pos:column="21">(<argument><expr><name pos:line="517" pos:column="22">nbuf<pos:position pos:line="517" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="517" pos:column="28">sizeof<argument_list pos:line="517" pos:column="34">(<argument><expr><name pos:line="517" pos:column="35">nbuf<pos:position pos:line="517" pos:column="39"/></name></expr></argument>)<pos:position pos:line="517" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="517" pos:column="42">"?"<pos:position pos:line="517" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="517" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="517" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="518" pos:column="13">snprintf<pos:position pos:line="518" pos:column="21"/></name><argument_list pos:line="518" pos:column="21">(<argument><expr><name pos:line="518" pos:column="22">sbuf<pos:position pos:line="518" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="518" pos:column="28">sizeof<argument_list pos:line="518" pos:column="34">(<argument><expr><name pos:line="518" pos:column="35">sbuf<pos:position pos:line="518" pos:column="39"/></name></expr></argument>)<pos:position pos:line="518" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="518" pos:column="42">"?"<pos:position pos:line="518" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="518" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="518" pos:column="47"/></expr_stmt>
          }<pos:position pos:line="519" pos:column="12"/></block></then></if>
        
          <if pos:line="521" pos:column="11">if <condition pos:line="521" pos:column="14">(<expr><call><name pos:line="521" pos:column="15">getnameinfo<pos:position pos:line="521" pos:column="26"/></name><argument_list pos:line="521" pos:column="26">(<argument><expr><name><name pos:line="521" pos:column="27">res<pos:position pos:line="521" pos:column="30"/></name><operator pos:line="521" pos:column="30">-&gt;<pos:position pos:line="521" pos:column="35"/></operator><name pos:line="521" pos:column="32">ai_addr<pos:position pos:line="521" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="521" pos:column="41">res<pos:position pos:line="521" pos:column="44"/></name><operator pos:line="521" pos:column="44">-&gt;<pos:position pos:line="521" pos:column="49"/></operator><name pos:line="521" pos:column="46">ai_addrlen<pos:position pos:line="521" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="521" pos:column="58">hbuf<pos:position pos:line="521" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="521" pos:column="64">sizeof<argument_list pos:line="521" pos:column="70">(<argument><expr><name pos:line="521" pos:column="71">hbuf<pos:position pos:line="521" pos:column="75"/></name></expr></argument>)<pos:position pos:line="521" pos:column="76"/></argument_list></sizeof></expr></argument>,
                          <argument><expr><name pos:line="522" pos:column="27">NULL<pos:position pos:line="522" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="522" pos:column="33">0<pos:position pos:line="522" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="522" pos:column="36">0<pos:position pos:line="522" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="522" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="522" pos:column="39"/></condition><then pos:line="522" pos:column="39"> <block pos:line="522" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="523" pos:column="13">infof<pos:position pos:line="523" pos:column="18"/></name><argument_list pos:line="523" pos:column="18">(<argument><expr><name pos:line="523" pos:column="19">data<pos:position pos:line="523" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="523" pos:column="25">"Connecting to %s port %s\n"<pos:position pos:line="523" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="523" pos:column="55">nbuf<pos:position pos:line="523" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="523" pos:column="61">sbuf<pos:position pos:line="523" pos:column="65"/></name></expr></argument>)<pos:position pos:line="523" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="523" pos:column="67"/></expr_stmt>
          }<pos:position pos:line="524" pos:column="12"/></block></then> <else pos:line="524" pos:column="13">else <block pos:line="524" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="525" pos:column="13">infof<pos:position pos:line="525" pos:column="18"/></name><argument_list pos:line="525" pos:column="18">(<argument><expr><name pos:line="525" pos:column="19">data<pos:position pos:line="525" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="525" pos:column="25">"Connecting to %s (%s) port %s\n"<pos:position pos:line="525" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="525" pos:column="60">hbuf<pos:position pos:line="525" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="525" pos:column="66">nbuf<pos:position pos:line="525" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="525" pos:column="72">sbuf<pos:position pos:line="525" pos:column="76"/></name></expr></argument>)<pos:position pos:line="525" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="525" pos:column="78"/></expr_stmt>
          }<pos:position pos:line="526" pos:column="12"/></block></else></if>
        }<pos:position pos:line="527" pos:column="10"/></block></then></if>

        <if pos:line="529" pos:column="9">if <condition pos:line="529" pos:column="12">(<expr><call><name pos:line="529" pos:column="13">connect<pos:position pos:line="529" pos:column="20"/></name><argument_list pos:line="529" pos:column="20">(<argument><expr><name><name pos:line="529" pos:column="21">conn<pos:position pos:line="529" pos:column="25"/></name><operator pos:line="529" pos:column="25">-&gt;<pos:position pos:line="529" pos:column="30"/></operator><name pos:line="529" pos:column="27">secondarysocket<pos:position pos:line="529" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="529" pos:column="44">ai<pos:position pos:line="529" pos:column="46"/></name><operator pos:line="529" pos:column="46">-&gt;<pos:position pos:line="529" pos:column="51"/></operator><name pos:line="529" pos:column="48">ai_addr<pos:position pos:line="529" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="529" pos:column="57">ai<pos:position pos:line="529" pos:column="59"/></name><operator pos:line="529" pos:column="59">-&gt;<pos:position pos:line="529" pos:column="64"/></operator><name pos:line="529" pos:column="61">ai_addrlen<pos:position pos:line="529" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="529" pos:column="72"/></argument_list></call> <operator pos:line="529" pos:column="73">&lt;<pos:position pos:line="529" pos:column="77"/></operator> <literal type="number" pos:line="529" pos:column="75">0<pos:position pos:line="529" pos:column="76"/></literal></expr>)<pos:position pos:line="529" pos:column="77"/></condition><then pos:line="529" pos:column="77"> <block pos:line="529" pos:column="78">{
          <expr_stmt><expr><call><name pos:line="530" pos:column="11">close<pos:position pos:line="530" pos:column="16"/></name><argument_list pos:line="530" pos:column="16">(<argument><expr><name><name pos:line="530" pos:column="17">conn<pos:position pos:line="530" pos:column="21"/></name><operator pos:line="530" pos:column="21">-&gt;<pos:position pos:line="530" pos:column="26"/></operator><name pos:line="530" pos:column="23">secondarysocket<pos:position pos:line="530" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="530" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="530" pos:column="40"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="531" pos:column="11">conn<pos:position pos:line="531" pos:column="15"/></name><operator pos:line="531" pos:column="15">-&gt;<pos:position pos:line="531" pos:column="20"/></operator><name pos:line="531" pos:column="17">secondarysocket<pos:position pos:line="531" pos:column="32"/></name></name> <operator pos:line="531" pos:column="33">=<pos:position pos:line="531" pos:column="34"/></operator> <operator pos:line="531" pos:column="35">-<pos:position pos:line="531" pos:column="36"/></operator><literal type="number" pos:line="531" pos:column="36">1<pos:position pos:line="531" pos:column="37"/></literal></expr>;<pos:position pos:line="531" pos:column="38"/></expr_stmt>
          <continue pos:line="532" pos:column="11">continue;<pos:position pos:line="532" pos:column="20"/></continue>
        }<pos:position pos:line="533" pos:column="10"/></block></then></if>

      	<break pos:line="535" pos:column="9">break;<pos:position pos:line="535" pos:column="15"/></break>
      }<pos:position pos:line="536" pos:column="8"/></block></for>

      <if pos:line="538" pos:column="7">if <condition pos:line="538" pos:column="10">(<expr><name><name pos:line="538" pos:column="11">conn<pos:position pos:line="538" pos:column="15"/></name><operator pos:line="538" pos:column="15">-&gt;<pos:position pos:line="538" pos:column="20"/></operator><name pos:line="538" pos:column="17">secondarysocket<pos:position pos:line="538" pos:column="32"/></name></name> <operator pos:line="538" pos:column="33">&lt;<pos:position pos:line="538" pos:column="37"/></operator> <literal type="number" pos:line="538" pos:column="35">0<pos:position pos:line="538" pos:column="36"/></literal></expr>)<pos:position pos:line="538" pos:column="37"/></condition><then pos:line="538" pos:column="37"> <block pos:line="538" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="539" pos:column="9">failf<pos:position pos:line="539" pos:column="14"/></name><argument_list pos:line="539" pos:column="14">(<argument><expr><name pos:line="539" pos:column="15">data<pos:position pos:line="539" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="539" pos:column="21">strerror<pos:position pos:line="539" pos:column="29"/></name><argument_list pos:line="539" pos:column="29">(<argument><expr><name pos:line="539" pos:column="30">errno<pos:position pos:line="539" pos:column="35"/></name></expr></argument>)<pos:position pos:line="539" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="539" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="539" pos:column="38"/></expr_stmt>
        <return pos:line="540" pos:column="9">return <expr><name pos:line="540" pos:column="16">CURLE_FTP_CANT_RECONNECT<pos:position pos:line="540" pos:column="40"/></name></expr>;<pos:position pos:line="540" pos:column="41"/></return>
      }<pos:position pos:line="541" pos:column="8"/></block></then></if>
<cpp:else pos:line="542" pos:column="1">#<cpp:directive pos:line="542" pos:column="2">else<pos:position pos:line="542" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><name><name pos:line="543" pos:column="7">conn<pos:position pos:line="543" pos:column="11"/></name><operator pos:line="543" pos:column="11">-&gt;<pos:position pos:line="543" pos:column="16"/></operator><name pos:line="543" pos:column="13">secondarysocket<pos:position pos:line="543" pos:column="28"/></name></name> <operator pos:line="543" pos:column="29">=<pos:position pos:line="543" pos:column="30"/></operator> <call><name pos:line="543" pos:column="31">socket<pos:position pos:line="543" pos:column="37"/></name><argument_list pos:line="543" pos:column="37">(<argument><expr><name pos:line="543" pos:column="38">AF_INET<pos:position pos:line="543" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="543" pos:column="47">SOCK_STREAM<pos:position pos:line="543" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="543" pos:column="60">0<pos:position pos:line="543" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="543" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="543" pos:column="63"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="545" pos:column="7">memset<pos:position pos:line="545" pos:column="13"/></name><argument_list pos:line="545" pos:column="13">(<argument><expr><operator pos:line="545" pos:column="14">(<pos:position pos:line="545" pos:column="15"/></operator><name pos:line="545" pos:column="15">char<pos:position pos:line="545" pos:column="19"/></name> <operator pos:line="545" pos:column="20">*<pos:position pos:line="545" pos:column="21"/></operator><operator pos:line="545" pos:column="21">)<pos:position pos:line="545" pos:column="22"/></operator> <operator pos:line="545" pos:column="23">&amp;<pos:position pos:line="545" pos:column="28"/></operator><name pos:line="545" pos:column="24">serv_addr<pos:position pos:line="545" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="545" pos:column="35">'\0'<pos:position pos:line="545" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="545" pos:column="41">sizeof<argument_list pos:line="545" pos:column="47">(<argument><expr><name pos:line="545" pos:column="48">serv_addr<pos:position pos:line="545" pos:column="57"/></name></expr></argument>)<pos:position pos:line="545" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="545" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="545" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="546" pos:column="7">memcpy<pos:position pos:line="546" pos:column="13"/></name><argument_list pos:line="546" pos:column="13">(<argument><expr><operator pos:line="546" pos:column="14">(<pos:position pos:line="546" pos:column="15"/></operator><name pos:line="546" pos:column="15">char<pos:position pos:line="546" pos:column="19"/></name> <operator pos:line="546" pos:column="20">*<pos:position pos:line="546" pos:column="21"/></operator><operator pos:line="546" pos:column="21">)<pos:position pos:line="546" pos:column="22"/></operator><operator pos:line="546" pos:column="22">&amp;<pos:position pos:line="546" pos:column="27"/></operator><operator pos:line="546" pos:column="23">(<pos:position pos:line="546" pos:column="24"/></operator><name><name pos:line="546" pos:column="24">serv_addr<pos:position pos:line="546" pos:column="33"/></name><operator pos:line="546" pos:column="33">.<pos:position pos:line="546" pos:column="34"/></operator><name pos:line="546" pos:column="34">sin_addr<pos:position pos:line="546" pos:column="42"/></name></name><operator pos:line="546" pos:column="42">)<pos:position pos:line="546" pos:column="43"/></operator></expr></argument>, <argument><expr><name><name pos:line="546" pos:column="45">he<pos:position pos:line="546" pos:column="47"/></name><operator pos:line="546" pos:column="47">-&gt;<pos:position pos:line="546" pos:column="52"/></operator><name pos:line="546" pos:column="49">h_addr<pos:position pos:line="546" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="546" pos:column="57">he<pos:position pos:line="546" pos:column="59"/></name><operator pos:line="546" pos:column="59">-&gt;<pos:position pos:line="546" pos:column="64"/></operator><name pos:line="546" pos:column="61">h_length<pos:position pos:line="546" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="546" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="546" pos:column="71"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="547" pos:column="7">serv_addr<pos:position pos:line="547" pos:column="16"/></name><operator pos:line="547" pos:column="16">.<pos:position pos:line="547" pos:column="17"/></operator><name pos:line="547" pos:column="17">sin_family<pos:position pos:line="547" pos:column="27"/></name></name> <operator pos:line="547" pos:column="28">=<pos:position pos:line="547" pos:column="29"/></operator> <name><name pos:line="547" pos:column="30">he<pos:position pos:line="547" pos:column="32"/></name><operator pos:line="547" pos:column="32">-&gt;<pos:position pos:line="547" pos:column="37"/></operator><name pos:line="547" pos:column="34">h_addrtype<pos:position pos:line="547" pos:column="44"/></name></name></expr>;<pos:position pos:line="547" pos:column="45"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="549" pos:column="7">serv_addr<pos:position pos:line="549" pos:column="16"/></name><operator pos:line="549" pos:column="16">.<pos:position pos:line="549" pos:column="17"/></operator><name pos:line="549" pos:column="17">sin_port<pos:position pos:line="549" pos:column="25"/></name></name> <operator pos:line="549" pos:column="26">=<pos:position pos:line="549" pos:column="27"/></operator> <call><name pos:line="549" pos:column="28">htons<pos:position pos:line="549" pos:column="33"/></name><argument_list pos:line="549" pos:column="33">(<argument><expr><name pos:line="549" pos:column="34">connectport<pos:position pos:line="549" pos:column="45"/></name></expr></argument>)<pos:position pos:line="549" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="549" pos:column="47"/></expr_stmt>

      <if pos:line="551" pos:column="7">if<condition pos:line="551" pos:column="9">(<expr><name><name pos:line="551" pos:column="10">data<pos:position pos:line="551" pos:column="14"/></name><operator pos:line="551" pos:column="14">-&gt;<pos:position pos:line="551" pos:column="19"/></operator><name pos:line="551" pos:column="16">set<pos:position pos:line="551" pos:column="19"/></name><operator pos:line="551" pos:column="19">.<pos:position pos:line="551" pos:column="20"/></operator><name pos:line="551" pos:column="20">verbose<pos:position pos:line="551" pos:column="27"/></name></name></expr>)<pos:position pos:line="551" pos:column="28"/></condition><then pos:line="551" pos:column="28"> <block pos:line="551" pos:column="29">{
        <decl_stmt><decl><type><name><name pos:line="552" pos:column="9">struct<pos:position pos:line="552" pos:column="15"/></name> <name pos:line="552" pos:column="16">in_addr<pos:position pos:line="552" pos:column="23"/></name></name></type> <name pos:line="552" pos:column="24">in<pos:position pos:line="552" pos:column="26"/></name></decl>;<pos:position pos:line="552" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="553" pos:column="9">struct<pos:position pos:line="553" pos:column="15"/></name> <name pos:line="553" pos:column="16">hostent<pos:position pos:line="553" pos:column="23"/></name></name> <modifier pos:line="553" pos:column="24">*<pos:position pos:line="553" pos:column="25"/></modifier></type> <name pos:line="553" pos:column="26">answer<pos:position pos:line="553" pos:column="32"/></name></decl>;<pos:position pos:line="553" pos:column="33"/></decl_stmt>

<cpp:if pos:line="555" pos:column="1">#<cpp:directive pos:line="555" pos:column="2">if<pos:position pos:line="555" pos:column="4"/></cpp:directive> <expr><call><name pos:line="555" pos:column="5">defined<pos:position pos:line="555" pos:column="12"/></name><argument_list pos:line="555" pos:column="12">(<argument><expr><name pos:line="555" pos:column="13">HAVE_INET_ADDR<pos:position pos:line="555" pos:column="27"/></name></expr></argument>)<pos:position pos:line="555" pos:column="28"/></argument_list></call></expr></cpp:if>
        <decl_stmt><decl><type><name pos:line="556" pos:column="9">unsigned<pos:position pos:line="556" pos:column="17"/></name> <name pos:line="556" pos:column="18">long<pos:position pos:line="556" pos:column="22"/></name></type> <name pos:line="556" pos:column="23">address<pos:position pos:line="556" pos:column="30"/></name></decl>;<pos:position pos:line="556" pos:column="31"/></decl_stmt>
<cpp:if pos:line="557" pos:column="1"># <cpp:directive pos:line="557" pos:column="3">if<pos:position pos:line="557" pos:column="5"/></cpp:directive> <expr><call><name pos:line="557" pos:column="6">defined<pos:position pos:line="557" pos:column="13"/></name><argument_list pos:line="557" pos:column="13">(<argument><expr><name pos:line="557" pos:column="14">HAVE_GETHOSTBYADDR_R<pos:position pos:line="557" pos:column="34"/></name></expr></argument>)<pos:position pos:line="557" pos:column="35"/></argument_list></call></expr></cpp:if>
        <decl_stmt><decl><type><name pos:line="558" pos:column="9">int<pos:position pos:line="558" pos:column="12"/></name></type> <name pos:line="558" pos:column="13">h_errnop<pos:position pos:line="558" pos:column="21"/></name></decl>;<pos:position pos:line="558" pos:column="22"/></decl_stmt>
<cpp:endif pos:line="559" pos:column="1"># <cpp:directive pos:line="559" pos:column="3">endif<pos:position pos:line="559" pos:column="8"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><name pos:line="561" pos:column="9">address<pos:position pos:line="561" pos:column="16"/></name> <operator pos:line="561" pos:column="17">=<pos:position pos:line="561" pos:column="18"/></operator> <call><name pos:line="561" pos:column="19">inet_addr<pos:position pos:line="561" pos:column="28"/></name><argument_list pos:line="561" pos:column="28">(<argument><expr><name pos:line="561" pos:column="29">newhost<pos:position pos:line="561" pos:column="36"/></name></expr></argument>)<pos:position pos:line="561" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="561" pos:column="38"/></expr_stmt>
<cpp:ifdef pos:line="562" pos:column="1"># <cpp:directive pos:line="562" pos:column="3">ifdef<pos:position pos:line="562" pos:column="8"/></cpp:directive> <name pos:line="562" pos:column="9">HAVE_GETHOSTBYADDR_R<pos:position pos:line="562" pos:column="29"/></name></cpp:ifdef>

<cpp:ifdef pos:line="564" pos:column="1">#  <cpp:directive pos:line="564" pos:column="4">ifdef<pos:position pos:line="564" pos:column="9"/></cpp:directive> <name pos:line="564" pos:column="10">HAVE_GETHOSTBYADDR_R_5<pos:position pos:line="564" pos:column="32"/></name></cpp:ifdef>
        <comment type="block" pos:line="565" pos:column="9">/* AIX, Digital Unix style:
           extern int gethostbyaddr_r(char *addr, size_t len, int type,
           struct hostent *htent, struct hostent_data *ht_data); */</comment>

        <comment type="block" pos:line="569" pos:column="9">/* Fred Noz helped me try this out, now it at least compiles! */</comment>

        <if pos:line="571" pos:column="9">if<condition pos:line="571" pos:column="11">(<expr><call><name pos:line="571" pos:column="12">gethostbyaddr_r<pos:position pos:line="571" pos:column="27"/></name><argument_list pos:line="571" pos:column="27">(<argument><expr><operator pos:line="571" pos:column="28">(<pos:position pos:line="571" pos:column="29"/></operator><name pos:line="571" pos:column="29">char<pos:position pos:line="571" pos:column="33"/></name> <operator pos:line="571" pos:column="34">*<pos:position pos:line="571" pos:column="35"/></operator><operator pos:line="571" pos:column="35">)<pos:position pos:line="571" pos:column="36"/></operator> <operator pos:line="571" pos:column="37">&amp;<pos:position pos:line="571" pos:column="42"/></operator><name pos:line="571" pos:column="38">address<pos:position pos:line="571" pos:column="45"/></name></expr></argument>,
                           <argument><expr><sizeof pos:line="572" pos:column="28">sizeof<argument_list pos:line="572" pos:column="34">(<argument><expr><name pos:line="572" pos:column="35">address<pos:position pos:line="572" pos:column="42"/></name></expr></argument>)<pos:position pos:line="572" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="572" pos:column="45">AF_INET<pos:position pos:line="572" pos:column="52"/></name></expr></argument>,
                           <argument><expr><operator pos:line="573" pos:column="28">(<pos:position pos:line="573" pos:column="29"/></operator>struct <name pos:line="573" pos:column="36">hostent<pos:position pos:line="573" pos:column="43"/></name> <operator pos:line="573" pos:column="44">*<pos:position pos:line="573" pos:column="45"/></operator><operator pos:line="573" pos:column="45">)<pos:position pos:line="573" pos:column="46"/></operator><name pos:line="573" pos:column="46">hostent_buf<pos:position pos:line="573" pos:column="57"/></name></expr></argument>,
                           <argument><expr><name pos:line="574" pos:column="28">hostent_buf<pos:position pos:line="574" pos:column="39"/></name> <operator pos:line="574" pos:column="40">+<pos:position pos:line="574" pos:column="41"/></operator> <sizeof pos:line="574" pos:column="42">sizeof<argument_list pos:line="574" pos:column="48">(<argument><expr><operator pos:line="574" pos:column="49">*<pos:position pos:line="574" pos:column="50"/></operator><name pos:line="574" pos:column="50">answer<pos:position pos:line="574" pos:column="56"/></name></expr></argument>)<pos:position pos:line="574" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="574" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="574" pos:column="59"/></condition><then pos:line="574" pos:column="59">
           <block type="pseudo"><expr_stmt><expr><name pos:line="575" pos:column="12">answer<pos:position pos:line="575" pos:column="18"/></name><operator pos:line="575" pos:column="18">=<pos:position pos:line="575" pos:column="19"/></operator><name pos:line="575" pos:column="19">NULL<pos:position pos:line="575" pos:column="23"/></name></expr>;<pos:position pos:line="575" pos:column="24"/></expr_stmt></block></then></if>
                           
<cpp:endif pos:line="577" pos:column="1">#  <cpp:directive pos:line="577" pos:column="4">endif<pos:position pos:line="577" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="578" pos:column="1">#  <cpp:directive pos:line="578" pos:column="4">ifdef<pos:position pos:line="578" pos:column="9"/></cpp:directive> <name pos:line="578" pos:column="10">HAVE_GETHOSTBYADDR_R_7<pos:position pos:line="578" pos:column="32"/></name></cpp:ifdef>
        <comment type="block" pos:line="579" pos:column="9">/* Solaris and IRIX */</comment>
        <expr_stmt><expr><name pos:line="580" pos:column="9">answer<pos:position pos:line="580" pos:column="15"/></name> <operator pos:line="580" pos:column="16">=<pos:position pos:line="580" pos:column="17"/></operator> <call><name pos:line="580" pos:column="18">gethostbyaddr_r<pos:position pos:line="580" pos:column="33"/></name><argument_list pos:line="580" pos:column="33">(<argument><expr><operator pos:line="580" pos:column="34">(<pos:position pos:line="580" pos:column="35"/></operator><name pos:line="580" pos:column="35">char<pos:position pos:line="580" pos:column="39"/></name> <operator pos:line="580" pos:column="40">*<pos:position pos:line="580" pos:column="41"/></operator><operator pos:line="580" pos:column="41">)<pos:position pos:line="580" pos:column="42"/></operator> <operator pos:line="580" pos:column="43">&amp;<pos:position pos:line="580" pos:column="48"/></operator><name pos:line="580" pos:column="44">address<pos:position pos:line="580" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="580" pos:column="53">sizeof<argument_list pos:line="580" pos:column="59">(<argument><expr><name pos:line="580" pos:column="60">address<pos:position pos:line="580" pos:column="67"/></name></expr></argument>)<pos:position pos:line="580" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="580" pos:column="70">AF_INET<pos:position pos:line="580" pos:column="77"/></name></expr></argument>,
                                 <argument><expr><operator pos:line="581" pos:column="34">(<pos:position pos:line="581" pos:column="35"/></operator>struct <name pos:line="581" pos:column="42">hostent<pos:position pos:line="581" pos:column="49"/></name> <operator pos:line="581" pos:column="50">*<pos:position pos:line="581" pos:column="51"/></operator><operator pos:line="581" pos:column="51">)<pos:position pos:line="581" pos:column="52"/></operator><name pos:line="581" pos:column="52">hostent_buf<pos:position pos:line="581" pos:column="63"/></name></expr></argument>,
                                 <argument><expr><name pos:line="582" pos:column="34">hostent_buf<pos:position pos:line="582" pos:column="45"/></name> <operator pos:line="582" pos:column="46">+<pos:position pos:line="582" pos:column="47"/></operator> <sizeof pos:line="582" pos:column="48">sizeof<argument_list pos:line="582" pos:column="54">(<argument><expr><operator pos:line="582" pos:column="55">*<pos:position pos:line="582" pos:column="56"/></operator><name pos:line="582" pos:column="56">answer<pos:position pos:line="582" pos:column="62"/></name></expr></argument>)<pos:position pos:line="582" pos:column="63"/></argument_list></sizeof></expr></argument>,
                                 <argument><expr><sizeof pos:line="583" pos:column="34">sizeof<argument_list pos:line="583" pos:column="40">(<argument><expr><name pos:line="583" pos:column="41">hostent_buf<pos:position pos:line="583" pos:column="52"/></name></expr></argument>)<pos:position pos:line="583" pos:column="53"/></argument_list></sizeof> <operator pos:line="583" pos:column="54">-<pos:position pos:line="583" pos:column="55"/></operator> <sizeof pos:line="583" pos:column="56">sizeof<argument_list pos:line="583" pos:column="62">(<argument><expr><operator pos:line="583" pos:column="63">*<pos:position pos:line="583" pos:column="64"/></operator><name pos:line="583" pos:column="64">answer<pos:position pos:line="583" pos:column="70"/></name></expr></argument>)<pos:position pos:line="583" pos:column="71"/></argument_list></sizeof></expr></argument>,
                                 <argument><expr><operator pos:line="584" pos:column="34">&amp;<pos:position pos:line="584" pos:column="39"/></operator><name pos:line="584" pos:column="35">h_errnop<pos:position pos:line="584" pos:column="43"/></name></expr></argument>)<pos:position pos:line="584" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="584" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="585" pos:column="1">#  <cpp:directive pos:line="585" pos:column="4">endif<pos:position pos:line="585" pos:column="9"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="586" pos:column="1">#  <cpp:directive pos:line="586" pos:column="4">ifdef<pos:position pos:line="586" pos:column="9"/></cpp:directive> <name pos:line="586" pos:column="10">HAVE_GETHOSTBYADDR_R_8<pos:position pos:line="586" pos:column="32"/></name></cpp:ifdef>
        <comment type="block" pos:line="587" pos:column="9">/* Linux style */</comment>
        <if pos:line="588" pos:column="9">if<condition pos:line="588" pos:column="11">(<expr><call><name pos:line="588" pos:column="12">gethostbyaddr_r<pos:position pos:line="588" pos:column="27"/></name><argument_list pos:line="588" pos:column="27">(<argument><expr><operator pos:line="588" pos:column="28">(<pos:position pos:line="588" pos:column="29"/></operator><name pos:line="588" pos:column="29">char<pos:position pos:line="588" pos:column="33"/></name> <operator pos:line="588" pos:column="34">*<pos:position pos:line="588" pos:column="35"/></operator><operator pos:line="588" pos:column="35">)<pos:position pos:line="588" pos:column="36"/></operator> <operator pos:line="588" pos:column="37">&amp;<pos:position pos:line="588" pos:column="42"/></operator><name pos:line="588" pos:column="38">address<pos:position pos:line="588" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="588" pos:column="47">sizeof<argument_list pos:line="588" pos:column="53">(<argument><expr><name pos:line="588" pos:column="54">address<pos:position pos:line="588" pos:column="61"/></name></expr></argument>)<pos:position pos:line="588" pos:column="62"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="588" pos:column="64">AF_INET<pos:position pos:line="588" pos:column="71"/></name></expr></argument>,
                           <argument><expr><operator pos:line="589" pos:column="28">(<pos:position pos:line="589" pos:column="29"/></operator>struct <name pos:line="589" pos:column="36">hostent<pos:position pos:line="589" pos:column="43"/></name> <operator pos:line="589" pos:column="44">*<pos:position pos:line="589" pos:column="45"/></operator><operator pos:line="589" pos:column="45">)<pos:position pos:line="589" pos:column="46"/></operator><name pos:line="589" pos:column="46">hostent_buf<pos:position pos:line="589" pos:column="57"/></name></expr></argument>,
                           <argument><expr><name pos:line="590" pos:column="28">hostent_buf<pos:position pos:line="590" pos:column="39"/></name> <operator pos:line="590" pos:column="40">+<pos:position pos:line="590" pos:column="41"/></operator> <sizeof pos:line="590" pos:column="42">sizeof<argument_list pos:line="590" pos:column="48">(<argument><expr><operator pos:line="590" pos:column="49">*<pos:position pos:line="590" pos:column="50"/></operator><name pos:line="590" pos:column="50">answer<pos:position pos:line="590" pos:column="56"/></name></expr></argument>)<pos:position pos:line="590" pos:column="57"/></argument_list></sizeof></expr></argument>,
                           <argument><expr><sizeof pos:line="591" pos:column="28">sizeof<argument_list pos:line="591" pos:column="34">(<argument><expr><name pos:line="591" pos:column="35">hostent_buf<pos:position pos:line="591" pos:column="46"/></name></expr></argument>)<pos:position pos:line="591" pos:column="47"/></argument_list></sizeof> <operator pos:line="591" pos:column="48">-<pos:position pos:line="591" pos:column="49"/></operator> <sizeof pos:line="591" pos:column="50">sizeof<argument_list pos:line="591" pos:column="56">(<argument><expr><operator pos:line="591" pos:column="57">*<pos:position pos:line="591" pos:column="58"/></operator><name pos:line="591" pos:column="58">answer<pos:position pos:line="591" pos:column="64"/></name></expr></argument>)<pos:position pos:line="591" pos:column="65"/></argument_list></sizeof></expr></argument>,
                           <argument><expr><operator pos:line="592" pos:column="28">&amp;<pos:position pos:line="592" pos:column="33"/></operator><name pos:line="592" pos:column="29">answer<pos:position pos:line="592" pos:column="35"/></name></expr></argument>,
                           <argument><expr><operator pos:line="593" pos:column="28">&amp;<pos:position pos:line="593" pos:column="33"/></operator><name pos:line="593" pos:column="29">h_errnop<pos:position pos:line="593" pos:column="37"/></name></expr></argument>)<pos:position pos:line="593" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="593" pos:column="39"/></condition><then pos:line="593" pos:column="39">
           <block type="pseudo"><expr_stmt><expr><name pos:line="594" pos:column="12">answer<pos:position pos:line="594" pos:column="18"/></name><operator pos:line="594" pos:column="18">=<pos:position pos:line="594" pos:column="19"/></operator><name pos:line="594" pos:column="19">NULL<pos:position pos:line="594" pos:column="23"/></name></expr>;<pos:position pos:line="594" pos:column="24"/></expr_stmt></block></then></if> <comment type="block" pos:line="594" pos:column="25">/* error */</comment>
<cpp:endif pos:line="595" pos:column="1">#  <cpp:directive pos:line="595" pos:column="4">endif<pos:position pos:line="595" pos:column="9"/></cpp:directive></cpp:endif>
        
<cpp:else pos:line="597" pos:column="1"># <cpp:directive pos:line="597" pos:column="3">else<pos:position pos:line="597" pos:column="7"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name pos:line="598" pos:column="9">answer<pos:position pos:line="598" pos:column="15"/></name> <operator pos:line="598" pos:column="16">=<pos:position pos:line="598" pos:column="17"/></operator> <call><name pos:line="598" pos:column="18">gethostbyaddr<pos:position pos:line="598" pos:column="31"/></name><argument_list pos:line="598" pos:column="31">(<argument><expr><operator pos:line="598" pos:column="32">(<pos:position pos:line="598" pos:column="33"/></operator><name pos:line="598" pos:column="33">char<pos:position pos:line="598" pos:column="37"/></name> <operator pos:line="598" pos:column="38">*<pos:position pos:line="598" pos:column="39"/></operator><operator pos:line="598" pos:column="39">)<pos:position pos:line="598" pos:column="40"/></operator> <operator pos:line="598" pos:column="41">&amp;<pos:position pos:line="598" pos:column="46"/></operator><name pos:line="598" pos:column="42">address<pos:position pos:line="598" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="598" pos:column="51">sizeof<argument_list pos:line="598" pos:column="57">(<argument><expr><name pos:line="598" pos:column="58">address<pos:position pos:line="598" pos:column="65"/></name></expr></argument>)<pos:position pos:line="598" pos:column="66"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="598" pos:column="68">AF_INET<pos:position pos:line="598" pos:column="75"/></name></expr></argument>)<pos:position pos:line="598" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="598" pos:column="77"/></expr_stmt>
<cpp:endif pos:line="599" pos:column="1"># <cpp:directive pos:line="599" pos:column="3">endif<pos:position pos:line="599" pos:column="8"/></cpp:directive></cpp:endif>
<cpp:else pos:line="600" pos:column="1">#<cpp:directive pos:line="600" pos:column="2">else<pos:position pos:line="600" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name pos:line="601" pos:column="9">answer<pos:position pos:line="601" pos:column="15"/></name> <operator pos:line="601" pos:column="16">=<pos:position pos:line="601" pos:column="17"/></operator> <name pos:line="601" pos:column="18">NULL<pos:position pos:line="601" pos:column="22"/></name></expr>;<pos:position pos:line="601" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="602" pos:column="1">#<cpp:directive pos:line="602" pos:column="2">endif<pos:position pos:line="602" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><operator pos:line="603" pos:column="9">(<pos:position pos:line="603" pos:column="10"/></operator><name pos:line="603" pos:column="10">void<pos:position pos:line="603" pos:column="14"/></name><operator pos:line="603" pos:column="14">)<pos:position pos:line="603" pos:column="15"/></operator> <call><name pos:line="603" pos:column="16">memcpy<pos:position pos:line="603" pos:column="22"/></name><argument_list pos:line="603" pos:column="22">(<argument><expr><operator pos:line="603" pos:column="23">&amp;<pos:position pos:line="603" pos:column="28"/></operator><name><name pos:line="603" pos:column="24">in<pos:position pos:line="603" pos:column="26"/></name><operator pos:line="603" pos:column="26">.<pos:position pos:line="603" pos:column="27"/></operator><name pos:line="603" pos:column="27">s_addr<pos:position pos:line="603" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="603" pos:column="35">*<pos:position pos:line="603" pos:column="36"/></operator><name><name pos:line="603" pos:column="36">he<pos:position pos:line="603" pos:column="38"/></name><operator pos:line="603" pos:column="38">-&gt;<pos:position pos:line="603" pos:column="43"/></operator><name pos:line="603" pos:column="40">h_addr_list<pos:position pos:line="603" pos:column="51"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="603" pos:column="53">sizeof <argument_list pos:line="603" pos:column="60">(<argument><expr><name><name pos:line="603" pos:column="61">in<pos:position pos:line="603" pos:column="63"/></name><operator pos:line="603" pos:column="63">.<pos:position pos:line="603" pos:column="64"/></operator><name pos:line="603" pos:column="64">s_addr<pos:position pos:line="603" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="603" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="603" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="603" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="604" pos:column="9">infof<pos:position pos:line="604" pos:column="14"/></name><argument_list pos:line="604" pos:column="14">(<argument><expr><name pos:line="604" pos:column="15">data<pos:position pos:line="604" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="604" pos:column="21">"Connecting to %s (%s) port %u\n"<pos:position pos:line="604" pos:column="54"/></literal></expr></argument>,
              <argument><expr><ternary><condition><expr><name pos:line="605" pos:column="15">answer<pos:position pos:line="605" pos:column="21"/></name></expr>?<pos:position pos:line="605" pos:column="22"/></condition><then><expr><name><name pos:line="605" pos:column="22">answer<pos:position pos:line="605" pos:column="28"/></name><operator pos:line="605" pos:column="28">-&gt;<pos:position pos:line="605" pos:column="33"/></operator><name pos:line="605" pos:column="30">h_name<pos:position pos:line="605" pos:column="36"/></name></name></expr></then><else pos:line="605" pos:column="36">:<expr><name pos:line="605" pos:column="37">newhost<pos:position pos:line="605" pos:column="44"/></name></expr></else></ternary></expr></argument>,
<cpp:if pos:line="606" pos:column="1">#<cpp:directive pos:line="606" pos:column="2">if<pos:position pos:line="606" pos:column="4"/></cpp:directive> <expr><call><name pos:line="606" pos:column="5">defined<pos:position pos:line="606" pos:column="12"/></name><argument_list pos:line="606" pos:column="12">(<argument><expr><name pos:line="606" pos:column="13">HAVE_INET_NTOA_R<pos:position pos:line="606" pos:column="29"/></name></expr></argument>)<pos:position pos:line="606" pos:column="30"/></argument_list></call></expr></cpp:if>
              <argument><expr><call><name pos:line="607" pos:column="15">inet_ntoa_r<pos:position pos:line="607" pos:column="26"/></name><argument_list pos:line="607" pos:column="26">(<argument><expr><name pos:line="607" pos:column="27">in<pos:position pos:line="607" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="607" pos:column="31">ip_addr<pos:position pos:line="607" pos:column="38"/></name><operator pos:line="607" pos:column="38">=<pos:position pos:line="607" pos:column="39"/></operator><name pos:line="607" pos:column="39">ntoa_buf<pos:position pos:line="607" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="607" pos:column="49">sizeof<argument_list pos:line="607" pos:column="55">(<argument><expr><name pos:line="607" pos:column="56">ntoa_buf<pos:position pos:line="607" pos:column="64"/></name></expr></argument>)<pos:position pos:line="607" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="607" pos:column="66"/></argument_list></call></expr></argument>,
<cpp:else pos:line="608" pos:column="1">#<cpp:directive pos:line="608" pos:column="2">else<pos:position pos:line="608" pos:column="6"/></cpp:directive></cpp:else>
              <argument><expr><name pos:line="609" pos:column="15">ip_addr<pos:position pos:line="609" pos:column="22"/></name> <operator pos:line="609" pos:column="23">=<pos:position pos:line="609" pos:column="24"/></operator> <call><name pos:line="609" pos:column="25">inet_ntoa<pos:position pos:line="609" pos:column="34"/></name><argument_list pos:line="609" pos:column="34">(<argument><expr><name pos:line="609" pos:column="35">in<pos:position pos:line="609" pos:column="37"/></name></expr></argument>)<pos:position pos:line="609" pos:column="38"/></argument_list></call></expr></argument>,
<cpp:endif pos:line="610" pos:column="1">#<cpp:directive pos:line="610" pos:column="2">endif<pos:position pos:line="610" pos:column="7"/></cpp:directive></cpp:endif>
              <argument><expr><name pos:line="611" pos:column="15">connectport<pos:position pos:line="611" pos:column="26"/></name></expr></argument>)<pos:position pos:line="611" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="611" pos:column="28"/></expr_stmt>
      }<pos:position pos:line="612" pos:column="8"/></block></then></if>
	
      <if pos:line="614" pos:column="7">if<condition pos:line="614" pos:column="9">(<expr><name pos:line="614" pos:column="10">hostdataptr<pos:position pos:line="614" pos:column="21"/></name></expr>)<pos:position pos:line="614" pos:column="22"/></condition><then pos:line="614" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="615" pos:column="9">free<pos:position pos:line="615" pos:column="13"/></name><argument_list pos:line="615" pos:column="13">(<argument><expr><name pos:line="615" pos:column="14">hostdataptr<pos:position pos:line="615" pos:column="25"/></name></expr></argument>)<pos:position pos:line="615" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="615" pos:column="27"/></expr_stmt></block></then></if>

      <if pos:line="617" pos:column="7">if <condition pos:line="617" pos:column="10">(<expr><call><name pos:line="617" pos:column="11">connect<pos:position pos:line="617" pos:column="18"/></name><argument_list pos:line="617" pos:column="18">(<argument><expr><name><name pos:line="617" pos:column="19">conn<pos:position pos:line="617" pos:column="23"/></name><operator pos:line="617" pos:column="23">-&gt;<pos:position pos:line="617" pos:column="28"/></operator><name pos:line="617" pos:column="25">secondarysocket<pos:position pos:line="617" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="617" pos:column="42">(<pos:position pos:line="617" pos:column="43"/></operator>struct <name pos:line="617" pos:column="50">sockaddr<pos:position pos:line="617" pos:column="58"/></name> <operator pos:line="617" pos:column="59">*<pos:position pos:line="617" pos:column="60"/></operator><operator pos:line="617" pos:column="60">)<pos:position pos:line="617" pos:column="61"/></operator> <operator pos:line="617" pos:column="62">&amp;<pos:position pos:line="617" pos:column="67"/></operator><name pos:line="617" pos:column="63">serv_addr<pos:position pos:line="617" pos:column="72"/></name></expr></argument>,
                  <argument><expr><sizeof pos:line="618" pos:column="19">sizeof<argument_list pos:line="618" pos:column="25">(<argument><expr><name pos:line="618" pos:column="26">serv_addr<pos:position pos:line="618" pos:column="35"/></name></expr></argument>)<pos:position pos:line="618" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="618" pos:column="37"/></argument_list></call> <operator pos:line="618" pos:column="38">&lt;<pos:position pos:line="618" pos:column="42"/></operator> <literal type="number" pos:line="618" pos:column="40">0<pos:position pos:line="618" pos:column="41"/></literal></expr>)<pos:position pos:line="618" pos:column="42"/></condition><then pos:line="618" pos:column="42"> <block pos:line="618" pos:column="43">{
        <switch pos:line="619" pos:column="9">switch<condition pos:line="619" pos:column="15">(<expr><name pos:line="619" pos:column="16">errno<pos:position pos:line="619" pos:column="21"/></name></expr>)<pos:position pos:line="619" pos:column="22"/></condition> <block pos:line="619" pos:column="23">{
<cpp:ifdef pos:line="620" pos:column="1">#<cpp:directive pos:line="620" pos:column="2">ifdef<pos:position pos:line="620" pos:column="7"/></cpp:directive> <name pos:line="620" pos:column="8">ECONNREFUSED<pos:position pos:line="620" pos:column="20"/></name></cpp:ifdef>
          <comment type="block" pos:line="621" pos:column="11">/* this should be made nicer */</comment>
        <case pos:line="622" pos:column="9">case <expr><name pos:line="622" pos:column="14">ECONNREFUSED<pos:position pos:line="622" pos:column="26"/></name></expr>:<pos:position pos:line="622" pos:column="27"/></case>
          <expr_stmt><expr><call><name pos:line="623" pos:column="11">failf<pos:position pos:line="623" pos:column="16"/></name><argument_list pos:line="623" pos:column="16">(<argument><expr><name pos:line="623" pos:column="17">data<pos:position pos:line="623" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="623" pos:column="23">"Connection refused by ftp server"<pos:position pos:line="623" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="623" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="623" pos:column="59"/></expr_stmt>
          <break pos:line="624" pos:column="11">break;<pos:position pos:line="624" pos:column="17"/></break>
<cpp:endif pos:line="625" pos:column="1">#<cpp:directive pos:line="625" pos:column="2">endif<pos:position pos:line="625" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="626" pos:column="1">#<cpp:directive pos:line="626" pos:column="2">ifdef<pos:position pos:line="626" pos:column="7"/></cpp:directive> <name pos:line="626" pos:column="8">EINTR<pos:position pos:line="626" pos:column="13"/></name></cpp:ifdef>
        <case pos:line="627" pos:column="9">case <expr><name pos:line="627" pos:column="14">EINTR<pos:position pos:line="627" pos:column="19"/></name></expr>:<pos:position pos:line="627" pos:column="20"/></case>
          <expr_stmt><expr><call><name pos:line="628" pos:column="11">failf<pos:position pos:line="628" pos:column="16"/></name><argument_list pos:line="628" pos:column="16">(<argument><expr><name pos:line="628" pos:column="17">data<pos:position pos:line="628" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="628" pos:column="23">"Connection timed out to ftp server"<pos:position pos:line="628" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="628" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="628" pos:column="61"/></expr_stmt>
          <break pos:line="629" pos:column="11">break;<pos:position pos:line="629" pos:column="17"/></break>
<cpp:endif pos:line="630" pos:column="1">#<cpp:directive pos:line="630" pos:column="2">endif<pos:position pos:line="630" pos:column="7"/></cpp:directive></cpp:endif>
        <default pos:line="631" pos:column="9">default:<pos:position pos:line="631" pos:column="17"/></default>
          <expr_stmt><expr><call><name pos:line="632" pos:column="11">failf<pos:position pos:line="632" pos:column="16"/></name><argument_list pos:line="632" pos:column="16">(<argument><expr><name pos:line="632" pos:column="17">data<pos:position pos:line="632" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="632" pos:column="23">"Can't connect to ftp server"<pos:position pos:line="632" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="632" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="632" pos:column="54"/></expr_stmt>
          <break pos:line="633" pos:column="11">break;<pos:position pos:line="633" pos:column="17"/></break>
        }<pos:position pos:line="634" pos:column="10"/></block></switch>
        <return pos:line="635" pos:column="9">return <expr><name pos:line="635" pos:column="16">CURLE_FTP_CANT_RECONNECT<pos:position pos:line="635" pos:column="40"/></name></expr>;<pos:position pos:line="635" pos:column="41"/></return>
      }<pos:position pos:line="636" pos:column="8"/></block></then></if>
<cpp:endif pos:line="637" pos:column="1">#<cpp:directive pos:line="637" pos:column="2">endif<pos:position pos:line="637" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="637" pos:column="8">/*ENABLE_IPV6*/</comment>

      <if pos:line="639" pos:column="7">if <condition pos:line="639" pos:column="10">(<expr><name><name pos:line="639" pos:column="11">data<pos:position pos:line="639" pos:column="15"/></name><operator pos:line="639" pos:column="15">-&gt;<pos:position pos:line="639" pos:column="20"/></operator><name pos:line="639" pos:column="17">set<pos:position pos:line="639" pos:column="20"/></name><operator pos:line="639" pos:column="20">.<pos:position pos:line="639" pos:column="21"/></operator><name pos:line="639" pos:column="21">tunnel_thru_httpproxy<pos:position pos:line="639" pos:column="42"/></name></name></expr>)<pos:position pos:line="639" pos:column="43"/></condition><then pos:line="639" pos:column="43"> <block pos:line="639" pos:column="44">{
        <comment type="block" pos:line="640" pos:column="9">/* We want "seamless" FTP operations through HTTP proxy tunnel */</comment>
        <expr_stmt><expr><name pos:line="641" pos:column="9">result<pos:position pos:line="641" pos:column="15"/></name> <operator pos:line="641" pos:column="16">=<pos:position pos:line="641" pos:column="17"/></operator> <call><name pos:line="641" pos:column="18">Curl_ConnectHTTPProxyTunnel<pos:position pos:line="641" pos:column="45"/></name><argument_list pos:line="641" pos:column="45">(<argument><expr><name pos:line="641" pos:column="46">conn<pos:position pos:line="641" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="641" pos:column="52">conn<pos:position pos:line="641" pos:column="56"/></name><operator pos:line="641" pos:column="56">-&gt;<pos:position pos:line="641" pos:column="61"/></operator><name pos:line="641" pos:column="58">secondarysocket<pos:position pos:line="641" pos:column="73"/></name></name></expr></argument>,
                                             <argument><expr><name pos:line="642" pos:column="46">newhost<pos:position pos:line="642" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="642" pos:column="55">newport<pos:position pos:line="642" pos:column="62"/></name></expr></argument>)<pos:position pos:line="642" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="642" pos:column="64"/></expr_stmt>
        <if pos:line="643" pos:column="9">if<condition pos:line="643" pos:column="11">(<expr><name pos:line="643" pos:column="12">CURLE_OK<pos:position pos:line="643" pos:column="20"/></name> <operator pos:line="643" pos:column="21">!=<pos:position pos:line="643" pos:column="23"/></operator> <name pos:line="643" pos:column="24">result<pos:position pos:line="643" pos:column="30"/></name></expr>)<pos:position pos:line="643" pos:column="31"/></condition><then pos:line="643" pos:column="31">
          <block type="pseudo"><return pos:line="644" pos:column="11">return <expr><name pos:line="644" pos:column="18">result<pos:position pos:line="644" pos:column="24"/></name></expr>;<pos:position pos:line="644" pos:column="25"/></return></block></then></if>
      }<pos:position pos:line="645" pos:column="8"/></block></then></if>
    }<pos:position pos:line="646" pos:column="6"/></block></then></if></elseif> <else pos:line="646" pos:column="7">else <block pos:line="646" pos:column="12">{
      <return pos:line="647" pos:column="7">return <expr><name pos:line="647" pos:column="14">CURLE_FTP_CANT_RECONNECT<pos:position pos:line="647" pos:column="38"/></name></expr>;<pos:position pos:line="647" pos:column="39"/></return>
    }<pos:position pos:line="648" pos:column="6"/></block></else></if>
  }<pos:position pos:line="649" pos:column="4"/></block></else></if>
  <comment type="block" pos:line="650" pos:column="3">/* we have the (new) data connection ready */</comment>
  <expr_stmt><expr><call><name pos:line="651" pos:column="3">infof<pos:position pos:line="651" pos:column="8"/></name><argument_list pos:line="651" pos:column="8">(<argument><expr><name pos:line="651" pos:column="9">data<pos:position pos:line="651" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="651" pos:column="15">"Connected the data stream!\n"<pos:position pos:line="651" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="651" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="651" pos:column="47"/></expr_stmt>

  <if pos:line="653" pos:column="3">if<condition pos:line="653" pos:column="5">(<expr><name><name pos:line="653" pos:column="6">data<pos:position pos:line="653" pos:column="10"/></name><operator pos:line="653" pos:column="10">-&gt;<pos:position pos:line="653" pos:column="15"/></operator><name pos:line="653" pos:column="12">set<pos:position pos:line="653" pos:column="15"/></name><operator pos:line="653" pos:column="15">.<pos:position pos:line="653" pos:column="16"/></operator><name pos:line="653" pos:column="16">upload<pos:position pos:line="653" pos:column="22"/></name></name></expr>)<pos:position pos:line="653" pos:column="23"/></condition><then pos:line="653" pos:column="23"> <block pos:line="653" pos:column="24">{

    <comment type="block" pos:line="655" pos:column="5">/* Set type to binary (unless specified ASCII) */</comment>
    <expr_stmt><expr><name pos:line="656" pos:column="5">result<pos:position pos:line="656" pos:column="11"/></name> <operator pos:line="656" pos:column="12">=<pos:position pos:line="656" pos:column="13"/></operator> <call><name pos:line="656" pos:column="14">_ftp_transfertype<pos:position pos:line="656" pos:column="31"/></name><argument_list pos:line="656" pos:column="31">(<argument><expr><name pos:line="656" pos:column="32">conn<pos:position pos:line="656" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="656" pos:column="38">data<pos:position pos:line="656" pos:column="42"/></name><operator pos:line="656" pos:column="42">-&gt;<pos:position pos:line="656" pos:column="47"/></operator><name pos:line="656" pos:column="44">set<pos:position pos:line="656" pos:column="47"/></name><operator pos:line="656" pos:column="47">.<pos:position pos:line="656" pos:column="48"/></operator><name pos:line="656" pos:column="48">ftp_ascii<pos:position pos:line="656" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="656" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="656" pos:column="59"/></expr_stmt>
    <if pos:line="657" pos:column="5">if<condition pos:line="657" pos:column="7">(<expr><name pos:line="657" pos:column="8">result<pos:position pos:line="657" pos:column="14"/></name></expr>)<pos:position pos:line="657" pos:column="15"/></condition><then pos:line="657" pos:column="15">
      <block type="pseudo"><return pos:line="658" pos:column="7">return <expr><name pos:line="658" pos:column="14">result<pos:position pos:line="658" pos:column="20"/></name></expr>;<pos:position pos:line="658" pos:column="21"/></return></block></then></if>

    <if pos:line="660" pos:column="5">if<condition pos:line="660" pos:column="7">(<expr><name><name pos:line="660" pos:column="8">conn<pos:position pos:line="660" pos:column="12"/></name><operator pos:line="660" pos:column="12">-&gt;<pos:position pos:line="660" pos:column="17"/></operator><name pos:line="660" pos:column="14">resume_from<pos:position pos:line="660" pos:column="25"/></name></name></expr>)<pos:position pos:line="660" pos:column="26"/></condition><then pos:line="660" pos:column="26"> <block pos:line="660" pos:column="27">{
      <comment type="block" pos:line="661" pos:column="7">/* we're about to continue the uploading of a file */</comment>
      <comment type="block" pos:line="662" pos:column="7">/* 1. get already existing file's size. We use the SIZE
         command for this which may not exist in the server!
         The SIZE command is not in RFC959. */</comment>

      <comment type="block" pos:line="666" pos:column="7">/* 2. This used to set REST. But since we can do append, we
         don't another ftp command. We just skip the source file
         offset and then we APPEND the rest on the file instead */</comment>

      <comment type="block" pos:line="670" pos:column="7">/* 3. pass file-size number of bytes in the source file */</comment>
      <comment type="block" pos:line="671" pos:column="7">/* 4. lower the infilesize counter */</comment>
      <comment type="block" pos:line="672" pos:column="7">/* =&gt; transfer as usual */</comment>

      <if pos:line="674" pos:column="7">if<condition pos:line="674" pos:column="9">(<expr><name><name pos:line="674" pos:column="10">conn<pos:position pos:line="674" pos:column="14"/></name><operator pos:line="674" pos:column="14">-&gt;<pos:position pos:line="674" pos:column="19"/></operator><name pos:line="674" pos:column="16">resume_from<pos:position pos:line="674" pos:column="27"/></name></name> <operator pos:line="674" pos:column="28">&lt;<pos:position pos:line="674" pos:column="32"/></operator> <literal type="number" pos:line="674" pos:column="30">0<pos:position pos:line="674" pos:column="31"/></literal></expr> )<pos:position pos:line="674" pos:column="33"/></condition><then pos:line="674" pos:column="33"> <block pos:line="674" pos:column="34">{
        <comment type="block" pos:line="675" pos:column="9">/* we could've got a specified offset from the command line,
           but now we know we didn't */</comment>

        <if pos:line="678" pos:column="9">if<condition pos:line="678" pos:column="11">(<expr><name pos:line="678" pos:column="12">CURLE_OK<pos:position pos:line="678" pos:column="20"/></name> <operator pos:line="678" pos:column="21">!=<pos:position pos:line="678" pos:column="23"/></operator> <call><name pos:line="678" pos:column="24">_ftp_getsize<pos:position pos:line="678" pos:column="36"/></name><argument_list pos:line="678" pos:column="36">(<argument><expr><name pos:line="678" pos:column="37">conn<pos:position pos:line="678" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="678" pos:column="43">ftp<pos:position pos:line="678" pos:column="46"/></name><operator pos:line="678" pos:column="46">-&gt;<pos:position pos:line="678" pos:column="51"/></operator><name pos:line="678" pos:column="48">file<pos:position pos:line="678" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="678" pos:column="54">&amp;<pos:position pos:line="678" pos:column="59"/></operator><name><name pos:line="678" pos:column="55">conn<pos:position pos:line="678" pos:column="59"/></name><operator pos:line="678" pos:column="59">-&gt;<pos:position pos:line="678" pos:column="64"/></operator><name pos:line="678" pos:column="61">resume_from<pos:position pos:line="678" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="678" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="678" pos:column="74"/></condition><then pos:line="678" pos:column="74"> <block pos:line="678" pos:column="75">{
          <expr_stmt><expr><call><name pos:line="679" pos:column="11">failf<pos:position pos:line="679" pos:column="16"/></name><argument_list pos:line="679" pos:column="16">(<argument><expr><name pos:line="679" pos:column="17">data<pos:position pos:line="679" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="679" pos:column="23">"Couldn't get remote file size"<pos:position pos:line="679" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="679" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="679" pos:column="56"/></expr_stmt>
          <return pos:line="680" pos:column="11">return <expr><name pos:line="680" pos:column="18">CURLE_FTP_COULDNT_GET_SIZE<pos:position pos:line="680" pos:column="44"/></name></expr>;<pos:position pos:line="680" pos:column="45"/></return>
        }<pos:position pos:line="681" pos:column="10"/></block></then></if>
      }<pos:position pos:line="682" pos:column="8"/></block></then></if>

      <if pos:line="684" pos:column="7">if<condition pos:line="684" pos:column="9">(<expr><name><name pos:line="684" pos:column="10">conn<pos:position pos:line="684" pos:column="14"/></name><operator pos:line="684" pos:column="14">-&gt;<pos:position pos:line="684" pos:column="19"/></operator><name pos:line="684" pos:column="16">resume_from<pos:position pos:line="684" pos:column="27"/></name></name></expr>)<pos:position pos:line="684" pos:column="28"/></condition><then pos:line="684" pos:column="28"> <block pos:line="684" pos:column="29">{
        <comment type="block" pos:line="685" pos:column="9">/* do we still game? */</comment>
        <decl_stmt><decl><type><name pos:line="686" pos:column="9">int<pos:position pos:line="686" pos:column="12"/></name></type> <name pos:line="686" pos:column="13">passed<pos:position pos:line="686" pos:column="19"/></name><init pos:line="686" pos:column="19">=<expr><literal type="number" pos:line="686" pos:column="20">0<pos:position pos:line="686" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="686" pos:column="22"/></decl_stmt>
        <comment type="block" pos:line="687" pos:column="9">/* enable append instead */</comment>
        <expr_stmt><expr><name><name pos:line="688" pos:column="9">data<pos:position pos:line="688" pos:column="13"/></name><operator pos:line="688" pos:column="13">-&gt;<pos:position pos:line="688" pos:column="18"/></operator><name pos:line="688" pos:column="15">set<pos:position pos:line="688" pos:column="18"/></name><operator pos:line="688" pos:column="18">.<pos:position pos:line="688" pos:column="19"/></operator><name pos:line="688" pos:column="19">ftp_append<pos:position pos:line="688" pos:column="29"/></name></name> <operator pos:line="688" pos:column="30">=<pos:position pos:line="688" pos:column="31"/></operator> <literal type="number" pos:line="688" pos:column="32">1<pos:position pos:line="688" pos:column="33"/></literal></expr>;<pos:position pos:line="688" pos:column="34"/></expr_stmt>

        <comment type="block" pos:line="690" pos:column="9">/* Now, let's read off the proper amount of bytes from the
           input. If we knew it was a proper file we could've just
           fseek()ed but we only have a stream here */</comment>
        <do pos:line="693" pos:column="9">do <block pos:line="693" pos:column="12">{
          <decl_stmt><decl><type><name pos:line="694" pos:column="11">int<pos:position pos:line="694" pos:column="14"/></name></type> <name pos:line="694" pos:column="15">readthisamountnow<pos:position pos:line="694" pos:column="32"/></name> <init pos:line="694" pos:column="33">= <expr><operator pos:line="694" pos:column="35">(<pos:position pos:line="694" pos:column="36"/></operator><name><name pos:line="694" pos:column="36">conn<pos:position pos:line="694" pos:column="40"/></name><operator pos:line="694" pos:column="40">-&gt;<pos:position pos:line="694" pos:column="45"/></operator><name pos:line="694" pos:column="42">resume_from<pos:position pos:line="694" pos:column="53"/></name></name> <operator pos:line="694" pos:column="54">-<pos:position pos:line="694" pos:column="55"/></operator> <name pos:line="694" pos:column="56">passed<pos:position pos:line="694" pos:column="62"/></name><operator pos:line="694" pos:column="62">)<pos:position pos:line="694" pos:column="63"/></operator></expr></init></decl>;<pos:position pos:line="694" pos:column="64"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="695" pos:column="11">int<pos:position pos:line="695" pos:column="14"/></name></type> <name pos:line="695" pos:column="15">actuallyread<pos:position pos:line="695" pos:column="27"/></name></decl>;<pos:position pos:line="695" pos:column="28"/></decl_stmt>

          <if pos:line="697" pos:column="11">if<condition pos:line="697" pos:column="13">(<expr><name pos:line="697" pos:column="14">readthisamountnow<pos:position pos:line="697" pos:column="31"/></name> <operator pos:line="697" pos:column="32">&gt;<pos:position pos:line="697" pos:column="36"/></operator> <name pos:line="697" pos:column="34">BUFSIZE<pos:position pos:line="697" pos:column="41"/></name></expr>)<pos:position pos:line="697" pos:column="42"/></condition><then pos:line="697" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name pos:line="698" pos:column="13">readthisamountnow<pos:position pos:line="698" pos:column="30"/></name> <operator pos:line="698" pos:column="31">=<pos:position pos:line="698" pos:column="32"/></operator> <name pos:line="698" pos:column="33">BUFSIZE<pos:position pos:line="698" pos:column="40"/></name></expr>;<pos:position pos:line="698" pos:column="41"/></expr_stmt></block></then></if>

          <expr_stmt><expr><name pos:line="700" pos:column="11">actuallyread<pos:position pos:line="700" pos:column="23"/></name> <operator pos:line="700" pos:column="24">=<pos:position pos:line="700" pos:column="25"/></operator>
            <call><name><name pos:line="701" pos:column="13">data<pos:position pos:line="701" pos:column="17"/></name><operator pos:line="701" pos:column="17">-&gt;<pos:position pos:line="701" pos:column="22"/></operator><name pos:line="701" pos:column="19">set<pos:position pos:line="701" pos:column="22"/></name><operator pos:line="701" pos:column="22">.<pos:position pos:line="701" pos:column="23"/></operator><name pos:line="701" pos:column="23">fread<pos:position pos:line="701" pos:column="28"/></name></name><argument_list pos:line="701" pos:column="28">(<argument><expr><name><name pos:line="701" pos:column="29">data<pos:position pos:line="701" pos:column="33"/></name><operator pos:line="701" pos:column="33">-&gt;<pos:position pos:line="701" pos:column="38"/></operator><name pos:line="701" pos:column="35">state<pos:position pos:line="701" pos:column="40"/></name><operator pos:line="701" pos:column="40">.<pos:position pos:line="701" pos:column="41"/></operator><name pos:line="701" pos:column="41">buffer<pos:position pos:line="701" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="701" pos:column="49">1<pos:position pos:line="701" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="701" pos:column="52">readthisamountnow<pos:position pos:line="701" pos:column="69"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="702" pos:column="29">data<pos:position pos:line="702" pos:column="33"/></name><operator pos:line="702" pos:column="33">-&gt;<pos:position pos:line="702" pos:column="38"/></operator><name pos:line="702" pos:column="35">set<pos:position pos:line="702" pos:column="38"/></name><operator pos:line="702" pos:column="38">.<pos:position pos:line="702" pos:column="39"/></operator><name pos:line="702" pos:column="39">in<pos:position pos:line="702" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="702" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="702" pos:column="43"/></expr_stmt>

          <expr_stmt><expr><name pos:line="704" pos:column="11">passed<pos:position pos:line="704" pos:column="17"/></name> <operator pos:line="704" pos:column="18">+=<pos:position pos:line="704" pos:column="20"/></operator> <name pos:line="704" pos:column="21">actuallyread<pos:position pos:line="704" pos:column="33"/></name></expr>;<pos:position pos:line="704" pos:column="34"/></expr_stmt>
          <if pos:line="705" pos:column="11">if<condition pos:line="705" pos:column="13">(<expr><name pos:line="705" pos:column="14">actuallyread<pos:position pos:line="705" pos:column="26"/></name> <operator pos:line="705" pos:column="27">!=<pos:position pos:line="705" pos:column="29"/></operator> <name pos:line="705" pos:column="30">readthisamountnow<pos:position pos:line="705" pos:column="47"/></name></expr>)<pos:position pos:line="705" pos:column="48"/></condition><then pos:line="705" pos:column="48"> <block pos:line="705" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="706" pos:column="13">failf<pos:position pos:line="706" pos:column="18"/></name><argument_list pos:line="706" pos:column="18">(<argument><expr><name pos:line="706" pos:column="19">data<pos:position pos:line="706" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="706" pos:column="25">"Could only read %d bytes from the input\n"<pos:position pos:line="706" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="706" pos:column="70">passed<pos:position pos:line="706" pos:column="76"/></name></expr></argument>)<pos:position pos:line="706" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="706" pos:column="78"/></expr_stmt>
            <return pos:line="707" pos:column="13">return <expr><name pos:line="707" pos:column="20">CURLE_FTP_COULDNT_USE_REST<pos:position pos:line="707" pos:column="46"/></name></expr>;<pos:position pos:line="707" pos:column="47"/></return>
          }<pos:position pos:line="708" pos:column="12"/></block></then></if>
        }<pos:position pos:line="709" pos:column="10"/></block>
        while<condition pos:line="710" pos:column="14">(<expr><name pos:line="710" pos:column="15">passed<pos:position pos:line="710" pos:column="21"/></name> <operator pos:line="710" pos:column="22">!=<pos:position pos:line="710" pos:column="24"/></operator> <name><name pos:line="710" pos:column="25">conn<pos:position pos:line="710" pos:column="29"/></name><operator pos:line="710" pos:column="29">-&gt;<pos:position pos:line="710" pos:column="34"/></operator><name pos:line="710" pos:column="31">resume_from<pos:position pos:line="710" pos:column="42"/></name></name></expr>)<pos:position pos:line="710" pos:column="43"/></condition>;<pos:position pos:line="710" pos:column="44"/></do>

        <comment type="block" pos:line="712" pos:column="9">/* now, decrease the size of the read */</comment>
        <if pos:line="713" pos:column="9">if<condition pos:line="713" pos:column="11">(<expr><name><name pos:line="713" pos:column="12">data<pos:position pos:line="713" pos:column="16"/></name><operator pos:line="713" pos:column="16">-&gt;<pos:position pos:line="713" pos:column="21"/></operator><name pos:line="713" pos:column="18">set<pos:position pos:line="713" pos:column="21"/></name><operator pos:line="713" pos:column="21">.<pos:position pos:line="713" pos:column="22"/></operator><name pos:line="713" pos:column="22">infilesize<pos:position pos:line="713" pos:column="32"/></name></name><operator pos:line="713" pos:column="32">&gt;<pos:position pos:line="713" pos:column="36"/></operator><literal type="number" pos:line="713" pos:column="33">0<pos:position pos:line="713" pos:column="34"/></literal></expr>)<pos:position pos:line="713" pos:column="35"/></condition><then pos:line="713" pos:column="35"> <block pos:line="713" pos:column="36">{
          <expr_stmt><expr><name><name pos:line="714" pos:column="11">data<pos:position pos:line="714" pos:column="15"/></name><operator pos:line="714" pos:column="15">-&gt;<pos:position pos:line="714" pos:column="20"/></operator><name pos:line="714" pos:column="17">set<pos:position pos:line="714" pos:column="20"/></name><operator pos:line="714" pos:column="20">.<pos:position pos:line="714" pos:column="21"/></operator><name pos:line="714" pos:column="21">infilesize<pos:position pos:line="714" pos:column="31"/></name></name> <operator pos:line="714" pos:column="32">-=<pos:position pos:line="714" pos:column="34"/></operator> <name><name pos:line="714" pos:column="35">conn<pos:position pos:line="714" pos:column="39"/></name><operator pos:line="714" pos:column="39">-&gt;<pos:position pos:line="714" pos:column="44"/></operator><name pos:line="714" pos:column="41">resume_from<pos:position pos:line="714" pos:column="52"/></name></name></expr>;<pos:position pos:line="714" pos:column="53"/></expr_stmt>

          <if pos:line="716" pos:column="11">if<condition pos:line="716" pos:column="13">(<expr><name><name pos:line="716" pos:column="14">data<pos:position pos:line="716" pos:column="18"/></name><operator pos:line="716" pos:column="18">-&gt;<pos:position pos:line="716" pos:column="23"/></operator><name pos:line="716" pos:column="20">set<pos:position pos:line="716" pos:column="23"/></name><operator pos:line="716" pos:column="23">.<pos:position pos:line="716" pos:column="24"/></operator><name pos:line="716" pos:column="24">infilesize<pos:position pos:line="716" pos:column="34"/></name></name> <operator pos:line="716" pos:column="35">&lt;=<pos:position pos:line="716" pos:column="40"/></operator> <literal type="number" pos:line="716" pos:column="38">0<pos:position pos:line="716" pos:column="39"/></literal></expr>)<pos:position pos:line="716" pos:column="40"/></condition><then pos:line="716" pos:column="40"> <block pos:line="716" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="717" pos:column="13">infof<pos:position pos:line="717" pos:column="18"/></name><argument_list pos:line="717" pos:column="18">(<argument><expr><name pos:line="717" pos:column="19">data<pos:position pos:line="717" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="717" pos:column="25">"File already completely uploaded\n"<pos:position pos:line="717" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="717" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="717" pos:column="63"/></expr_stmt>

            <comment type="block" pos:line="719" pos:column="13">/* no data to transfer */</comment>
            <expr_stmt><expr><name pos:line="720" pos:column="13">result<pos:position pos:line="720" pos:column="19"/></name><operator pos:line="720" pos:column="19">=<pos:position pos:line="720" pos:column="20"/></operator><call><name pos:line="720" pos:column="20">Curl_Transfer<pos:position pos:line="720" pos:column="33"/></name><argument_list pos:line="720" pos:column="33">(<argument><expr><name pos:line="720" pos:column="34">conn<pos:position pos:line="720" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="720" pos:column="40">-<pos:position pos:line="720" pos:column="41"/></operator><literal type="number" pos:line="720" pos:column="41">1<pos:position pos:line="720" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="720" pos:column="44">-<pos:position pos:line="720" pos:column="45"/></operator><literal type="number" pos:line="720" pos:column="45">1<pos:position pos:line="720" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="720" pos:column="48">FALSE<pos:position pos:line="720" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="720" pos:column="55">NULL<pos:position pos:line="720" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="720" pos:column="61">-<pos:position pos:line="720" pos:column="62"/></operator><literal type="number" pos:line="720" pos:column="62">1<pos:position pos:line="720" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="720" pos:column="65">NULL<pos:position pos:line="720" pos:column="69"/></name></expr></argument>)<pos:position pos:line="720" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="720" pos:column="71"/></expr_stmt>
            
            <comment type="block" pos:line="722" pos:column="13">/* Set resume done so that we won't get any error in
             * Curl_ftp_done() because we didn't transfer the amount of bytes
             * that the local file file obviously is */</comment>
            <expr_stmt><expr><name><name pos:line="725" pos:column="13">conn<pos:position pos:line="725" pos:column="17"/></name><operator pos:line="725" pos:column="17">-&gt;<pos:position pos:line="725" pos:column="22"/></operator><name pos:line="725" pos:column="19">bits<pos:position pos:line="725" pos:column="23"/></name><operator pos:line="725" pos:column="23">.<pos:position pos:line="725" pos:column="24"/></operator><name pos:line="725" pos:column="24">resume_done<pos:position pos:line="725" pos:column="35"/></name></name> <operator pos:line="725" pos:column="36">=<pos:position pos:line="725" pos:column="37"/></operator> <name pos:line="725" pos:column="38">TRUE<pos:position pos:line="725" pos:column="42"/></name></expr>;<pos:position pos:line="725" pos:column="43"/></expr_stmt> 

            <return pos:line="727" pos:column="13">return <expr><name pos:line="727" pos:column="20">CURLE_OK<pos:position pos:line="727" pos:column="28"/></name></expr>;<pos:position pos:line="727" pos:column="29"/></return>
          }<pos:position pos:line="728" pos:column="12"/></block></then></if>
        }<pos:position pos:line="729" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="730" pos:column="9">/* we've passed, proceed as normal */</comment>
      }<pos:position pos:line="731" pos:column="8"/></block></then></if>
    }<pos:position pos:line="732" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="734" pos:column="5">/* Send everything on data-&gt;set.in to the socket */</comment>
    <if pos:line="735" pos:column="5">if<condition pos:line="735" pos:column="7">(<expr><name><name pos:line="735" pos:column="8">data<pos:position pos:line="735" pos:column="12"/></name><operator pos:line="735" pos:column="12">-&gt;<pos:position pos:line="735" pos:column="17"/></operator><name pos:line="735" pos:column="14">set<pos:position pos:line="735" pos:column="17"/></name><operator pos:line="735" pos:column="17">.<pos:position pos:line="735" pos:column="18"/></operator><name pos:line="735" pos:column="18">ftp_append<pos:position pos:line="735" pos:column="28"/></name></name></expr>)<pos:position pos:line="735" pos:column="29"/></condition><then pos:line="735" pos:column="29">
      <comment type="block" pos:line="736" pos:column="7">/* we append onto the file instead of rewriting it */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="737" pos:column="7">ftpsendf<pos:position pos:line="737" pos:column="15"/></name><argument_list pos:line="737" pos:column="15">(<argument><expr><name><name pos:line="737" pos:column="16">conn<pos:position pos:line="737" pos:column="20"/></name><operator pos:line="737" pos:column="20">-&gt;<pos:position pos:line="737" pos:column="25"/></operator><name pos:line="737" pos:column="22">firstsocket<pos:position pos:line="737" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="737" pos:column="35">conn<pos:position pos:line="737" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="737" pos:column="41">"APPE %s"<pos:position pos:line="737" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="737" pos:column="52">ftp<pos:position pos:line="737" pos:column="55"/></name><operator pos:line="737" pos:column="55">-&gt;<pos:position pos:line="737" pos:column="60"/></operator><name pos:line="737" pos:column="57">file<pos:position pos:line="737" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="737" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="737" pos:column="63"/></expr_stmt></block></then>
    <else pos:line="738" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="739" pos:column="7">ftpsendf<pos:position pos:line="739" pos:column="15"/></name><argument_list pos:line="739" pos:column="15">(<argument><expr><name><name pos:line="739" pos:column="16">conn<pos:position pos:line="739" pos:column="20"/></name><operator pos:line="739" pos:column="20">-&gt;<pos:position pos:line="739" pos:column="25"/></operator><name pos:line="739" pos:column="22">firstsocket<pos:position pos:line="739" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="739" pos:column="35">conn<pos:position pos:line="739" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="739" pos:column="41">"STOR %s"<pos:position pos:line="739" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="739" pos:column="52">ftp<pos:position pos:line="739" pos:column="55"/></name><operator pos:line="739" pos:column="55">-&gt;<pos:position pos:line="739" pos:column="60"/></operator><name pos:line="739" pos:column="57">file<pos:position pos:line="739" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="739" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="739" pos:column="63"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="741" pos:column="5">nread<pos:position pos:line="741" pos:column="10"/></name> <operator pos:line="741" pos:column="11">=<pos:position pos:line="741" pos:column="12"/></operator> <call><name pos:line="741" pos:column="13">Curl_GetFTPResponse<pos:position pos:line="741" pos:column="32"/></name><argument_list pos:line="741" pos:column="32">(<argument><expr><name><name pos:line="741" pos:column="33">conn<pos:position pos:line="741" pos:column="37"/></name><operator pos:line="741" pos:column="37">-&gt;<pos:position pos:line="741" pos:column="42"/></operator><name pos:line="741" pos:column="39">firstsocket<pos:position pos:line="741" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="741" pos:column="52">buf<pos:position pos:line="741" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="741" pos:column="57">conn<pos:position pos:line="741" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="741" pos:column="63">&amp;<pos:position pos:line="741" pos:column="68"/></operator><name pos:line="741" pos:column="64">ftpcode<pos:position pos:line="741" pos:column="71"/></name></expr></argument>)<pos:position pos:line="741" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="741" pos:column="73"/></expr_stmt>
    <if pos:line="742" pos:column="5">if<condition pos:line="742" pos:column="7">(<expr><name pos:line="742" pos:column="8">nread<pos:position pos:line="742" pos:column="13"/></name> <operator pos:line="742" pos:column="14">&lt;<pos:position pos:line="742" pos:column="18"/></operator> <literal type="number" pos:line="742" pos:column="16">0<pos:position pos:line="742" pos:column="17"/></literal></expr>)<pos:position pos:line="742" pos:column="18"/></condition><then pos:line="742" pos:column="18">
      <block type="pseudo"><return pos:line="743" pos:column="7">return <expr><name pos:line="743" pos:column="14">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="743" pos:column="39"/></name></expr>;<pos:position pos:line="743" pos:column="40"/></return></block></then></if>

    <if pos:line="745" pos:column="5">if<condition pos:line="745" pos:column="7">(<expr><name pos:line="745" pos:column="8">ftpcode<pos:position pos:line="745" pos:column="15"/></name><operator pos:line="745" pos:column="15">&gt;=<pos:position pos:line="745" pos:column="20"/></operator><literal type="number" pos:line="745" pos:column="17">400<pos:position pos:line="745" pos:column="20"/></literal></expr>)<pos:position pos:line="745" pos:column="21"/></condition><then pos:line="745" pos:column="21"> <block pos:line="745" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="746" pos:column="7">failf<pos:position pos:line="746" pos:column="12"/></name><argument_list pos:line="746" pos:column="12">(<argument><expr><name pos:line="746" pos:column="13">data<pos:position pos:line="746" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="746" pos:column="19">"Failed FTP upload:%s"<pos:position pos:line="746" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="746" pos:column="43">buf<pos:position pos:line="746" pos:column="46"/></name><operator pos:line="746" pos:column="46">+<pos:position pos:line="746" pos:column="47"/></operator><literal type="number" pos:line="746" pos:column="47">3<pos:position pos:line="746" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="746" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="746" pos:column="50"/></expr_stmt>
      <comment type="block" pos:line="747" pos:column="7">/* oops, we never close the sockets! */</comment>
      <return pos:line="748" pos:column="7">return <expr><name pos:line="748" pos:column="14">CURLE_FTP_COULDNT_STOR_FILE<pos:position pos:line="748" pos:column="41"/></name></expr>;<pos:position pos:line="748" pos:column="42"/></return>
    }<pos:position pos:line="749" pos:column="6"/></block></then></if>

    <if pos:line="751" pos:column="5">if<condition pos:line="751" pos:column="7">(<expr><name><name pos:line="751" pos:column="8">data<pos:position pos:line="751" pos:column="12"/></name><operator pos:line="751" pos:column="12">-&gt;<pos:position pos:line="751" pos:column="17"/></operator><name pos:line="751" pos:column="14">set<pos:position pos:line="751" pos:column="17"/></name><operator pos:line="751" pos:column="17">.<pos:position pos:line="751" pos:column="18"/></operator><name pos:line="751" pos:column="18">ftp_use_port<pos:position pos:line="751" pos:column="30"/></name></name></expr>)<pos:position pos:line="751" pos:column="31"/></condition><then pos:line="751" pos:column="31"> <block pos:line="751" pos:column="32">{
      <comment type="block" pos:line="752" pos:column="7">/* PORT means we are now awaiting the server to connect to us. */</comment>
      <expr_stmt><expr><name pos:line="753" pos:column="7">result<pos:position pos:line="753" pos:column="13"/></name> <operator pos:line="753" pos:column="14">=<pos:position pos:line="753" pos:column="15"/></operator> <call><name pos:line="753" pos:column="16">AllowServerConnect<pos:position pos:line="753" pos:column="34"/></name><argument_list pos:line="753" pos:column="34">(<argument><expr><name pos:line="753" pos:column="35">data<pos:position pos:line="753" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="753" pos:column="41">conn<pos:position pos:line="753" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="753" pos:column="47">portsock<pos:position pos:line="753" pos:column="55"/></name></expr></argument>)<pos:position pos:line="753" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="753" pos:column="57"/></expr_stmt>
      <if pos:line="754" pos:column="7">if<condition pos:line="754" pos:column="9">( <expr><name pos:line="754" pos:column="11">result<pos:position pos:line="754" pos:column="17"/></name></expr> )<pos:position pos:line="754" pos:column="19"/></condition><then pos:line="754" pos:column="19">
        <block type="pseudo"><return pos:line="755" pos:column="9">return <expr><name pos:line="755" pos:column="16">result<pos:position pos:line="755" pos:column="22"/></name></expr>;<pos:position pos:line="755" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="756" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="758" pos:column="5">*<pos:position pos:line="758" pos:column="6"/></operator><name pos:line="758" pos:column="6">bytecountp<pos:position pos:line="758" pos:column="16"/></name><operator pos:line="758" pos:column="16">=<pos:position pos:line="758" pos:column="17"/></operator><literal type="number" pos:line="758" pos:column="17">0<pos:position pos:line="758" pos:column="18"/></literal></expr>;<pos:position pos:line="758" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="760" pos:column="5">/* When we know we're uploading a specified file, we can get the file
       size prior to the actual upload. */</comment>

    <expr_stmt><expr><call><name pos:line="763" pos:column="5">Curl_pgrsSetUploadSize<pos:position pos:line="763" pos:column="27"/></name><argument_list pos:line="763" pos:column="27">(<argument><expr><name pos:line="763" pos:column="28">data<pos:position pos:line="763" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="763" pos:column="34">data<pos:position pos:line="763" pos:column="38"/></name><operator pos:line="763" pos:column="38">-&gt;<pos:position pos:line="763" pos:column="43"/></operator><name pos:line="763" pos:column="40">set<pos:position pos:line="763" pos:column="43"/></name><operator pos:line="763" pos:column="43">.<pos:position pos:line="763" pos:column="44"/></operator><name pos:line="763" pos:column="44">infilesize<pos:position pos:line="763" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="763" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="763" pos:column="56"/></expr_stmt>

    <expr_stmt><expr><name pos:line="765" pos:column="5">result<pos:position pos:line="765" pos:column="11"/></name> <operator pos:line="765" pos:column="12">=<pos:position pos:line="765" pos:column="13"/></operator> <call><name pos:line="765" pos:column="14">Curl_Transfer<pos:position pos:line="765" pos:column="27"/></name><argument_list pos:line="765" pos:column="27">(<argument><expr><name pos:line="765" pos:column="28">conn<pos:position pos:line="765" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="765" pos:column="34">-<pos:position pos:line="765" pos:column="35"/></operator><literal type="number" pos:line="765" pos:column="35">1<pos:position pos:line="765" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="765" pos:column="38">-<pos:position pos:line="765" pos:column="39"/></operator><literal type="number" pos:line="765" pos:column="39">1<pos:position pos:line="765" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="765" pos:column="42">FALSE<pos:position pos:line="765" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="765" pos:column="49">NULL<pos:position pos:line="765" pos:column="53"/></name></expr></argument>, <comment type="block" pos:line="765" pos:column="55">/* no download */</comment>
                      <argument><expr><name><name pos:line="766" pos:column="23">conn<pos:position pos:line="766" pos:column="27"/></name><operator pos:line="766" pos:column="27">-&gt;<pos:position pos:line="766" pos:column="32"/></operator><name pos:line="766" pos:column="29">secondarysocket<pos:position pos:line="766" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="766" pos:column="46">bytecountp<pos:position pos:line="766" pos:column="56"/></name></expr></argument>)<pos:position pos:line="766" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="766" pos:column="58"/></expr_stmt>
    <if pos:line="767" pos:column="5">if<condition pos:line="767" pos:column="7">(<expr><name pos:line="767" pos:column="8">result<pos:position pos:line="767" pos:column="14"/></name></expr>)<pos:position pos:line="767" pos:column="15"/></condition><then pos:line="767" pos:column="15">
      <block type="pseudo"><return pos:line="768" pos:column="7">return <expr><name pos:line="768" pos:column="14">result<pos:position pos:line="768" pos:column="20"/></name></expr>;<pos:position pos:line="768" pos:column="21"/></return></block></then></if>
      
  }<pos:position pos:line="770" pos:column="4"/></block></then>
  <else pos:line="771" pos:column="3">else <block pos:line="771" pos:column="8">{
    <comment type="block" pos:line="772" pos:column="5">/* Retrieve file or directory */</comment>
    <decl_stmt><decl><type><name pos:line="773" pos:column="5">bool<pos:position pos:line="773" pos:column="9"/></name></type> <name pos:line="773" pos:column="10">dirlist<pos:position pos:line="773" pos:column="17"/></name><init pos:line="773" pos:column="17">=<expr><name pos:line="773" pos:column="18">FALSE<pos:position pos:line="773" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="773" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="774" pos:column="5">long<pos:position pos:line="774" pos:column="9"/></name></type> <name pos:line="774" pos:column="10">downloadsize<pos:position pos:line="774" pos:column="22"/></name><init pos:line="774" pos:column="22">=<expr><operator pos:line="774" pos:column="23">-<pos:position pos:line="774" pos:column="24"/></operator><literal type="number" pos:line="774" pos:column="24">1<pos:position pos:line="774" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="774" pos:column="26"/></decl_stmt>

    <if pos:line="776" pos:column="5">if<condition pos:line="776" pos:column="7">(<expr><name><name pos:line="776" pos:column="8">conn<pos:position pos:line="776" pos:column="12"/></name><operator pos:line="776" pos:column="12">-&gt;<pos:position pos:line="776" pos:column="17"/></operator><name pos:line="776" pos:column="14">bits<pos:position pos:line="776" pos:column="18"/></name><operator pos:line="776" pos:column="18">.<pos:position pos:line="776" pos:column="19"/></operator><name pos:line="776" pos:column="19">use_range<pos:position pos:line="776" pos:column="28"/></name></name> <operator pos:line="776" pos:column="29">&amp;&amp;<pos:position pos:line="776" pos:column="39"/></operator> <name><name pos:line="776" pos:column="32">conn<pos:position pos:line="776" pos:column="36"/></name><operator pos:line="776" pos:column="36">-&gt;<pos:position pos:line="776" pos:column="41"/></operator><name pos:line="776" pos:column="38">range<pos:position pos:line="776" pos:column="43"/></name></name></expr>)<pos:position pos:line="776" pos:column="44"/></condition><then pos:line="776" pos:column="44"> <block pos:line="776" pos:column="45">{
      <decl_stmt><decl><type><name pos:line="777" pos:column="7">long<pos:position pos:line="777" pos:column="11"/></name></type> <name pos:line="777" pos:column="12">from<pos:position pos:line="777" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="777" pos:column="18">to<pos:position pos:line="777" pos:column="20"/></name></decl>;<pos:position pos:line="777" pos:column="21"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="778" pos:column="7">int<pos:position pos:line="778" pos:column="10"/></name></type> <name pos:line="778" pos:column="11">totalsize<pos:position pos:line="778" pos:column="20"/></name><init pos:line="778" pos:column="20">=<expr><operator pos:line="778" pos:column="21">-<pos:position pos:line="778" pos:column="22"/></operator><literal type="number" pos:line="778" pos:column="22">1<pos:position pos:line="778" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="778" pos:column="24"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="779" pos:column="7">char<pos:position pos:line="779" pos:column="11"/></name> <modifier pos:line="779" pos:column="12">*<pos:position pos:line="779" pos:column="13"/></modifier></type><name pos:line="779" pos:column="13">ptr<pos:position pos:line="779" pos:column="16"/></name></decl>;<pos:position pos:line="779" pos:column="17"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="780" pos:column="7">char<pos:position pos:line="780" pos:column="11"/></name> <modifier pos:line="780" pos:column="12">*<pos:position pos:line="780" pos:column="13"/></modifier></type><name pos:line="780" pos:column="13">ptr2<pos:position pos:line="780" pos:column="17"/></name></decl>;<pos:position pos:line="780" pos:column="18"/></decl_stmt>

      <expr_stmt><expr><name pos:line="782" pos:column="7">from<pos:position pos:line="782" pos:column="11"/></name><operator pos:line="782" pos:column="11">=<pos:position pos:line="782" pos:column="12"/></operator><call><name pos:line="782" pos:column="12">strtol<pos:position pos:line="782" pos:column="18"/></name><argument_list pos:line="782" pos:column="18">(<argument><expr><name><name pos:line="782" pos:column="19">conn<pos:position pos:line="782" pos:column="23"/></name><operator pos:line="782" pos:column="23">-&gt;<pos:position pos:line="782" pos:column="28"/></operator><name pos:line="782" pos:column="25">range<pos:position pos:line="782" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="782" pos:column="32">&amp;<pos:position pos:line="782" pos:column="37"/></operator><name pos:line="782" pos:column="33">ptr<pos:position pos:line="782" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="782" pos:column="38">0<pos:position pos:line="782" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="782" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="782" pos:column="41"/></expr_stmt>
      <while pos:line="783" pos:column="7">while<condition pos:line="783" pos:column="12">(<expr><name pos:line="783" pos:column="13">ptr<pos:position pos:line="783" pos:column="16"/></name> <operator pos:line="783" pos:column="17">&amp;&amp;<pos:position pos:line="783" pos:column="27"/></operator> <operator pos:line="783" pos:column="20">*<pos:position pos:line="783" pos:column="21"/></operator><name pos:line="783" pos:column="21">ptr<pos:position pos:line="783" pos:column="24"/></name> <operator pos:line="783" pos:column="25">&amp;&amp;<pos:position pos:line="783" pos:column="35"/></operator> <operator pos:line="783" pos:column="28">(<pos:position pos:line="783" pos:column="29"/></operator><call><name pos:line="783" pos:column="29">isspace<pos:position pos:line="783" pos:column="36"/></name><argument_list pos:line="783" pos:column="36">(<argument><expr><operator pos:line="783" pos:column="37">(<pos:position pos:line="783" pos:column="38"/></operator><name pos:line="783" pos:column="38">int<pos:position pos:line="783" pos:column="41"/></name><operator pos:line="783" pos:column="41">)<pos:position pos:line="783" pos:column="42"/></operator><operator pos:line="783" pos:column="42">*<pos:position pos:line="783" pos:column="43"/></operator><name pos:line="783" pos:column="43">ptr<pos:position pos:line="783" pos:column="46"/></name></expr></argument>)<pos:position pos:line="783" pos:column="47"/></argument_list></call> <operator pos:line="783" pos:column="48">||<pos:position pos:line="783" pos:column="50"/></operator> <operator pos:line="783" pos:column="51">(<pos:position pos:line="783" pos:column="52"/></operator><operator pos:line="783" pos:column="52">*<pos:position pos:line="783" pos:column="53"/></operator><name pos:line="783" pos:column="53">ptr<pos:position pos:line="783" pos:column="56"/></name><operator pos:line="783" pos:column="56">==<pos:position pos:line="783" pos:column="58"/></operator><literal type="char" pos:line="783" pos:column="58">'-'<pos:position pos:line="783" pos:column="61"/></literal><operator pos:line="783" pos:column="61">)<pos:position pos:line="783" pos:column="62"/></operator><operator pos:line="783" pos:column="62">)<pos:position pos:line="783" pos:column="63"/></operator></expr>)<pos:position pos:line="783" pos:column="64"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="784" pos:column="9">ptr<pos:position pos:line="784" pos:column="12"/></name><operator pos:line="784" pos:column="12">++<pos:position pos:line="784" pos:column="14"/></operator></expr>;<pos:position pos:line="784" pos:column="15"/></expr_stmt></block></while>
      <expr_stmt><expr><name pos:line="785" pos:column="7">to<pos:position pos:line="785" pos:column="9"/></name><operator pos:line="785" pos:column="9">=<pos:position pos:line="785" pos:column="10"/></operator><call><name pos:line="785" pos:column="10">strtol<pos:position pos:line="785" pos:column="16"/></name><argument_list pos:line="785" pos:column="16">(<argument><expr><name pos:line="785" pos:column="17">ptr<pos:position pos:line="785" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="785" pos:column="22">&amp;<pos:position pos:line="785" pos:column="27"/></operator><name pos:line="785" pos:column="23">ptr2<pos:position pos:line="785" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="785" pos:column="29">0<pos:position pos:line="785" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="785" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="785" pos:column="32"/></expr_stmt>
      <if pos:line="786" pos:column="7">if<condition pos:line="786" pos:column="9">(<expr><name pos:line="786" pos:column="10">ptr<pos:position pos:line="786" pos:column="13"/></name> <operator pos:line="786" pos:column="14">==<pos:position pos:line="786" pos:column="16"/></operator> <name pos:line="786" pos:column="17">ptr2<pos:position pos:line="786" pos:column="21"/></name></expr>)<pos:position pos:line="786" pos:column="22"/></condition><then pos:line="786" pos:column="22"> <block pos:line="786" pos:column="23">{
        <comment type="block" pos:line="787" pos:column="9">/* we didn't get any digit */</comment>
        <expr_stmt><expr><name pos:line="788" pos:column="9">to<pos:position pos:line="788" pos:column="11"/></name><operator pos:line="788" pos:column="11">=<pos:position pos:line="788" pos:column="12"/></operator><operator pos:line="788" pos:column="12">-<pos:position pos:line="788" pos:column="13"/></operator><literal type="number" pos:line="788" pos:column="13">1<pos:position pos:line="788" pos:column="14"/></literal></expr>;<pos:position pos:line="788" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="789" pos:column="8"/></block></then></if>
      <if pos:line="790" pos:column="7">if<condition pos:line="790" pos:column="9">(<expr><operator pos:line="790" pos:column="10">(<pos:position pos:line="790" pos:column="11"/></operator><operator pos:line="790" pos:column="11">-<pos:position pos:line="790" pos:column="12"/></operator><literal type="number" pos:line="790" pos:column="12">1<pos:position pos:line="790" pos:column="13"/></literal> <operator pos:line="790" pos:column="14">==<pos:position pos:line="790" pos:column="16"/></operator> <name pos:line="790" pos:column="17">to<pos:position pos:line="790" pos:column="19"/></name><operator pos:line="790" pos:column="19">)<pos:position pos:line="790" pos:column="20"/></operator> <operator pos:line="790" pos:column="21">&amp;&amp;<pos:position pos:line="790" pos:column="31"/></operator> <operator pos:line="790" pos:column="24">(<pos:position pos:line="790" pos:column="25"/></operator><name pos:line="790" pos:column="25">from<pos:position pos:line="790" pos:column="29"/></name><operator pos:line="790" pos:column="29">&gt;=<pos:position pos:line="790" pos:column="34"/></operator><literal type="number" pos:line="790" pos:column="31">0<pos:position pos:line="790" pos:column="32"/></literal><operator pos:line="790" pos:column="32">)<pos:position pos:line="790" pos:column="33"/></operator></expr>)<pos:position pos:line="790" pos:column="34"/></condition><then pos:line="790" pos:column="34"> <block pos:line="790" pos:column="35">{
        <comment type="block" pos:line="791" pos:column="9">/* X - */</comment>
        <expr_stmt><expr><name><name pos:line="792" pos:column="9">conn<pos:position pos:line="792" pos:column="13"/></name><operator pos:line="792" pos:column="13">-&gt;<pos:position pos:line="792" pos:column="18"/></operator><name pos:line="792" pos:column="15">resume_from<pos:position pos:line="792" pos:column="26"/></name></name> <operator pos:line="792" pos:column="27">=<pos:position pos:line="792" pos:column="28"/></operator> <name pos:line="792" pos:column="29">from<pos:position pos:line="792" pos:column="33"/></name></expr>;<pos:position pos:line="792" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="793" pos:column="9">infof<pos:position pos:line="793" pos:column="14"/></name><argument_list pos:line="793" pos:column="14">(<argument><expr><name pos:line="793" pos:column="15">data<pos:position pos:line="793" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="793" pos:column="21">"FTP RANGE %d to end of file\n"<pos:position pos:line="793" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="793" pos:column="54">from<pos:position pos:line="793" pos:column="58"/></name></expr></argument>)<pos:position pos:line="793" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="793" pos:column="60"/></expr_stmt>
      }<pos:position pos:line="794" pos:column="8"/></block></then>
      <elseif pos:line="795" pos:column="7">else <if pos:line="795" pos:column="12">if<condition pos:line="795" pos:column="14">(<expr><name pos:line="795" pos:column="15">from<pos:position pos:line="795" pos:column="19"/></name> <operator pos:line="795" pos:column="20">&lt;<pos:position pos:line="795" pos:column="24"/></operator> <literal type="number" pos:line="795" pos:column="22">0<pos:position pos:line="795" pos:column="23"/></literal></expr>)<pos:position pos:line="795" pos:column="24"/></condition><then pos:line="795" pos:column="24"> <block pos:line="795" pos:column="25">{
        <comment type="block" pos:line="796" pos:column="9">/* -Y */</comment>
        <expr_stmt><expr><name pos:line="797" pos:column="9">totalsize<pos:position pos:line="797" pos:column="18"/></name> <operator pos:line="797" pos:column="19">=<pos:position pos:line="797" pos:column="20"/></operator> <operator pos:line="797" pos:column="21">-<pos:position pos:line="797" pos:column="22"/></operator><name pos:line="797" pos:column="22">from<pos:position pos:line="797" pos:column="26"/></name></expr>;<pos:position pos:line="797" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="798" pos:column="9">conn<pos:position pos:line="798" pos:column="13"/></name><operator pos:line="798" pos:column="13">-&gt;<pos:position pos:line="798" pos:column="18"/></operator><name pos:line="798" pos:column="15">maxdownload<pos:position pos:line="798" pos:column="26"/></name></name> <operator pos:line="798" pos:column="27">=<pos:position pos:line="798" pos:column="28"/></operator> <operator pos:line="798" pos:column="29">-<pos:position pos:line="798" pos:column="30"/></operator><name pos:line="798" pos:column="30">from<pos:position pos:line="798" pos:column="34"/></name></expr>;<pos:position pos:line="798" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="799" pos:column="9">conn<pos:position pos:line="799" pos:column="13"/></name><operator pos:line="799" pos:column="13">-&gt;<pos:position pos:line="799" pos:column="18"/></operator><name pos:line="799" pos:column="15">resume_from<pos:position pos:line="799" pos:column="26"/></name></name> <operator pos:line="799" pos:column="27">=<pos:position pos:line="799" pos:column="28"/></operator> <name pos:line="799" pos:column="29">from<pos:position pos:line="799" pos:column="33"/></name></expr>;<pos:position pos:line="799" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="800" pos:column="9">infof<pos:position pos:line="800" pos:column="14"/></name><argument_list pos:line="800" pos:column="14">(<argument><expr><name pos:line="800" pos:column="15">data<pos:position pos:line="800" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="800" pos:column="21">"FTP RANGE the last %d bytes\n"<pos:position pos:line="800" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="800" pos:column="54">totalsize<pos:position pos:line="800" pos:column="63"/></name></expr></argument>)<pos:position pos:line="800" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="800" pos:column="65"/></expr_stmt>
      }<pos:position pos:line="801" pos:column="8"/></block></then></if></elseif>
      <else pos:line="802" pos:column="7">else <block pos:line="802" pos:column="12">{
        <comment type="block" pos:line="803" pos:column="9">/* X-Y */</comment>
        <expr_stmt><expr><name pos:line="804" pos:column="9">totalsize<pos:position pos:line="804" pos:column="18"/></name> <operator pos:line="804" pos:column="19">=<pos:position pos:line="804" pos:column="20"/></operator> <name pos:line="804" pos:column="21">to<pos:position pos:line="804" pos:column="23"/></name><operator pos:line="804" pos:column="23">-<pos:position pos:line="804" pos:column="24"/></operator><name pos:line="804" pos:column="24">from<pos:position pos:line="804" pos:column="28"/></name></expr>;<pos:position pos:line="804" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="805" pos:column="9">conn<pos:position pos:line="805" pos:column="13"/></name><operator pos:line="805" pos:column="13">-&gt;<pos:position pos:line="805" pos:column="18"/></operator><name pos:line="805" pos:column="15">maxdownload<pos:position pos:line="805" pos:column="26"/></name></name> <operator pos:line="805" pos:column="27">=<pos:position pos:line="805" pos:column="28"/></operator> <name pos:line="805" pos:column="29">totalsize<pos:position pos:line="805" pos:column="38"/></name><operator pos:line="805" pos:column="38">+<pos:position pos:line="805" pos:column="39"/></operator><literal type="number" pos:line="805" pos:column="39">1<pos:position pos:line="805" pos:column="40"/></literal></expr>;<pos:position pos:line="805" pos:column="41"/></expr_stmt> <comment type="block" pos:line="805" pos:column="42">/* include the last mentioned byte */</comment>
        <expr_stmt><expr><name><name pos:line="806" pos:column="9">conn<pos:position pos:line="806" pos:column="13"/></name><operator pos:line="806" pos:column="13">-&gt;<pos:position pos:line="806" pos:column="18"/></operator><name pos:line="806" pos:column="15">resume_from<pos:position pos:line="806" pos:column="26"/></name></name> <operator pos:line="806" pos:column="27">=<pos:position pos:line="806" pos:column="28"/></operator> <name pos:line="806" pos:column="29">from<pos:position pos:line="806" pos:column="33"/></name></expr>;<pos:position pos:line="806" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="807" pos:column="9">infof<pos:position pos:line="807" pos:column="14"/></name><argument_list pos:line="807" pos:column="14">(<argument><expr><name pos:line="807" pos:column="15">data<pos:position pos:line="807" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="807" pos:column="21">"FTP RANGE from %d getting %d bytes\n"<pos:position pos:line="807" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="807" pos:column="61">from<pos:position pos:line="807" pos:column="65"/></name></expr></argument>,
              <argument><expr><name><name pos:line="808" pos:column="15">conn<pos:position pos:line="808" pos:column="19"/></name><operator pos:line="808" pos:column="19">-&gt;<pos:position pos:line="808" pos:column="24"/></operator><name pos:line="808" pos:column="21">maxdownload<pos:position pos:line="808" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="808" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="808" pos:column="34"/></expr_stmt>
      }<pos:position pos:line="809" pos:column="8"/></block></else></if>
      <expr_stmt><expr><call><name pos:line="810" pos:column="7">infof<pos:position pos:line="810" pos:column="12"/></name><argument_list pos:line="810" pos:column="12">(<argument><expr><name pos:line="810" pos:column="13">data<pos:position pos:line="810" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="810" pos:column="19">"range-download from %d to %d, totally %d bytes\n"<pos:position pos:line="810" pos:column="69"/></literal></expr></argument>,
            <argument><expr><name pos:line="811" pos:column="13">from<pos:position pos:line="811" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="811" pos:column="19">to<pos:position pos:line="811" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="811" pos:column="23">totalsize<pos:position pos:line="811" pos:column="32"/></name></expr></argument>)<pos:position pos:line="811" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="811" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="812" pos:column="6"/></block></then></if>

    <if pos:line="814" pos:column="5">if<condition pos:line="814" pos:column="7">(<expr><operator pos:line="814" pos:column="8">(<pos:position pos:line="814" pos:column="9"/></operator><name><name pos:line="814" pos:column="9">data<pos:position pos:line="814" pos:column="13"/></name><operator pos:line="814" pos:column="13">-&gt;<pos:position pos:line="814" pos:column="18"/></operator><name pos:line="814" pos:column="15">set<pos:position pos:line="814" pos:column="18"/></name><operator pos:line="814" pos:column="18">.<pos:position pos:line="814" pos:column="19"/></operator><name pos:line="814" pos:column="19">ftp_list_only<pos:position pos:line="814" pos:column="32"/></name></name><operator pos:line="814" pos:column="32">)<pos:position pos:line="814" pos:column="33"/></operator> <operator pos:line="814" pos:column="34">||<pos:position pos:line="814" pos:column="36"/></operator> <operator pos:line="814" pos:column="37">!<pos:position pos:line="814" pos:column="38"/></operator><name><name pos:line="814" pos:column="38">ftp<pos:position pos:line="814" pos:column="41"/></name><operator pos:line="814" pos:column="41">-&gt;<pos:position pos:line="814" pos:column="46"/></operator><name pos:line="814" pos:column="43">file<pos:position pos:line="814" pos:column="47"/></name></name></expr>)<pos:position pos:line="814" pos:column="48"/></condition><then pos:line="814" pos:column="48"> <block pos:line="814" pos:column="49">{
      <comment type="block" pos:line="815" pos:column="7">/* The specified path ends with a slash, and therefore we think this
         is a directory that is requested, use LIST. But before that we
         need to set ASCII transfer mode. */</comment>
      <expr_stmt><expr><name pos:line="818" pos:column="7">dirlist<pos:position pos:line="818" pos:column="14"/></name> <operator pos:line="818" pos:column="15">=<pos:position pos:line="818" pos:column="16"/></operator> <name pos:line="818" pos:column="17">TRUE<pos:position pos:line="818" pos:column="21"/></name></expr>;<pos:position pos:line="818" pos:column="22"/></expr_stmt>

      <comment type="block" pos:line="820" pos:column="7">/* Set type to ASCII */</comment>
      <expr_stmt><expr><name pos:line="821" pos:column="7">result<pos:position pos:line="821" pos:column="13"/></name> <operator pos:line="821" pos:column="14">=<pos:position pos:line="821" pos:column="15"/></operator> <call><name pos:line="821" pos:column="16">_ftp_transfertype<pos:position pos:line="821" pos:column="33"/></name><argument_list pos:line="821" pos:column="33">(<argument><expr><name pos:line="821" pos:column="34">conn<pos:position pos:line="821" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="821" pos:column="40">TRUE<pos:position pos:line="821" pos:column="44"/></name></expr></argument> <comment type="block" pos:line="821" pos:column="45">/* ASCII enforced */</comment>)<pos:position pos:line="821" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="821" pos:column="67"/></expr_stmt>
      <if pos:line="822" pos:column="7">if<condition pos:line="822" pos:column="9">(<expr><name pos:line="822" pos:column="10">result<pos:position pos:line="822" pos:column="16"/></name></expr>)<pos:position pos:line="822" pos:column="17"/></condition><then pos:line="822" pos:column="17">
        <block type="pseudo"><return pos:line="823" pos:column="9">return <expr><name pos:line="823" pos:column="16">result<pos:position pos:line="823" pos:column="22"/></name></expr>;<pos:position pos:line="823" pos:column="23"/></return></block></then></if>

      <comment type="block" pos:line="825" pos:column="7">/* if this output is to be machine-parsed, the NLST command will be
         better used since the LIST command output is not specified or
         standard in any way */</comment>

      <expr_stmt><expr><call><name pos:line="829" pos:column="7">ftpsendf<pos:position pos:line="829" pos:column="15"/></name><argument_list pos:line="829" pos:column="15">(<argument><expr><name><name pos:line="829" pos:column="16">conn<pos:position pos:line="829" pos:column="20"/></name><operator pos:line="829" pos:column="20">-&gt;<pos:position pos:line="829" pos:column="25"/></operator><name pos:line="829" pos:column="22">firstsocket<pos:position pos:line="829" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="829" pos:column="35">conn<pos:position pos:line="829" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="829" pos:column="41">"%s"<pos:position pos:line="829" pos:column="45"/></literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name pos:line="830" pos:column="13">data<pos:position pos:line="830" pos:column="17"/></name><operator pos:line="830" pos:column="17">-&gt;<pos:position pos:line="830" pos:column="22"/></operator><name pos:line="830" pos:column="19">set<pos:position pos:line="830" pos:column="22"/></name><operator pos:line="830" pos:column="22">.<pos:position pos:line="830" pos:column="23"/></operator><name pos:line="830" pos:column="23">customrequest<pos:position pos:line="830" pos:column="36"/></name></name></expr>?<pos:position pos:line="830" pos:column="37"/></condition><then><expr><name><name pos:line="830" pos:column="37">data<pos:position pos:line="830" pos:column="41"/></name><operator pos:line="830" pos:column="41">-&gt;<pos:position pos:line="830" pos:column="46"/></operator><name pos:line="830" pos:column="43">set<pos:position pos:line="830" pos:column="46"/></name><operator pos:line="830" pos:column="46">.<pos:position pos:line="830" pos:column="47"/></operator><name pos:line="830" pos:column="47">customrequest<pos:position pos:line="830" pos:column="60"/></name></name></expr></then><else pos:line="830" pos:column="60">:
            <expr><operator pos:line="831" pos:column="13">(<pos:position pos:line="831" pos:column="14"/></operator><ternary><condition><expr><name><name pos:line="831" pos:column="14">data<pos:position pos:line="831" pos:column="18"/></name><operator pos:line="831" pos:column="18">-&gt;<pos:position pos:line="831" pos:column="23"/></operator><name pos:line="831" pos:column="20">set<pos:position pos:line="831" pos:column="23"/></name><operator pos:line="831" pos:column="23">.<pos:position pos:line="831" pos:column="24"/></operator><name pos:line="831" pos:column="24">ftp_list_only<pos:position pos:line="831" pos:column="37"/></name></name></expr>?<pos:position pos:line="831" pos:column="38"/></condition><then><expr><literal type="string" pos:line="831" pos:column="38">"NLST"<pos:position pos:line="831" pos:column="44"/></literal></expr></then><else pos:line="831" pos:column="44">:<expr><literal type="string" pos:line="831" pos:column="45">"LIST"<pos:position pos:line="831" pos:column="51"/></literal></expr></else></ternary><operator pos:line="831" pos:column="51">)<pos:position pos:line="831" pos:column="52"/></operator></expr></else></ternary></expr></argument>)<pos:position pos:line="831" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="831" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="832" pos:column="6"/></block></then>
    <else pos:line="833" pos:column="5">else <block pos:line="833" pos:column="10">{
      <comment type="block" pos:line="834" pos:column="7">/* Set type to binary (unless specified ASCII) */</comment>
      <expr_stmt><expr><name pos:line="835" pos:column="7">result<pos:position pos:line="835" pos:column="13"/></name> <operator pos:line="835" pos:column="14">=<pos:position pos:line="835" pos:column="15"/></operator> <call><name pos:line="835" pos:column="16">_ftp_transfertype<pos:position pos:line="835" pos:column="33"/></name><argument_list pos:line="835" pos:column="33">(<argument><expr><name pos:line="835" pos:column="34">conn<pos:position pos:line="835" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="835" pos:column="40">data<pos:position pos:line="835" pos:column="44"/></name><operator pos:line="835" pos:column="44">-&gt;<pos:position pos:line="835" pos:column="49"/></operator><name pos:line="835" pos:column="46">set<pos:position pos:line="835" pos:column="49"/></name><operator pos:line="835" pos:column="49">.<pos:position pos:line="835" pos:column="50"/></operator><name pos:line="835" pos:column="50">ftp_ascii<pos:position pos:line="835" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="835" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="835" pos:column="61"/></expr_stmt>
      <if pos:line="836" pos:column="7">if<condition pos:line="836" pos:column="9">(<expr><name pos:line="836" pos:column="10">result<pos:position pos:line="836" pos:column="16"/></name></expr>)<pos:position pos:line="836" pos:column="17"/></condition><then pos:line="836" pos:column="17">
        <block type="pseudo"><return pos:line="837" pos:column="9">return <expr><name pos:line="837" pos:column="16">result<pos:position pos:line="837" pos:column="22"/></name></expr>;<pos:position pos:line="837" pos:column="23"/></return></block></then></if>

      <if pos:line="839" pos:column="7">if<condition pos:line="839" pos:column="9">(<expr><name><name pos:line="839" pos:column="10">conn<pos:position pos:line="839" pos:column="14"/></name><operator pos:line="839" pos:column="14">-&gt;<pos:position pos:line="839" pos:column="19"/></operator><name pos:line="839" pos:column="16">resume_from<pos:position pos:line="839" pos:column="27"/></name></name></expr>)<pos:position pos:line="839" pos:column="28"/></condition><then pos:line="839" pos:column="28"> <block pos:line="839" pos:column="29">{

        <comment type="block" pos:line="841" pos:column="9">/* Daniel: (August 4, 1999)
         *
         * We start with trying to use the SIZE command to figure out the size
         * of the file we're gonna get. If we can get the size, this is by far
         * the best way to know if we're trying to resume beyond the EOF.  */</comment>
        <decl_stmt><decl><type><name pos:line="846" pos:column="9">int<pos:position pos:line="846" pos:column="12"/></name></type> <name pos:line="846" pos:column="13">foundsize<pos:position pos:line="846" pos:column="22"/></name><init pos:line="846" pos:column="22">=<expr><operator pos:line="846" pos:column="23">-<pos:position pos:line="846" pos:column="24"/></operator><literal type="number" pos:line="846" pos:column="24">1<pos:position pos:line="846" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="846" pos:column="26"/></decl_stmt>
        
        <expr_stmt><expr><name pos:line="848" pos:column="9">result<pos:position pos:line="848" pos:column="15"/></name> <operator pos:line="848" pos:column="16">=<pos:position pos:line="848" pos:column="17"/></operator> <call><name pos:line="848" pos:column="18">_ftp_getsize<pos:position pos:line="848" pos:column="30"/></name><argument_list pos:line="848" pos:column="30">(<argument><expr><name pos:line="848" pos:column="31">conn<pos:position pos:line="848" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="848" pos:column="37">ftp<pos:position pos:line="848" pos:column="40"/></name><operator pos:line="848" pos:column="40">-&gt;<pos:position pos:line="848" pos:column="45"/></operator><name pos:line="848" pos:column="42">file<pos:position pos:line="848" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="848" pos:column="48">&amp;<pos:position pos:line="848" pos:column="53"/></operator><name pos:line="848" pos:column="49">foundsize<pos:position pos:line="848" pos:column="58"/></name></expr></argument>)<pos:position pos:line="848" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="848" pos:column="60"/></expr_stmt>

        <if pos:line="850" pos:column="9">if<condition pos:line="850" pos:column="11">(<expr><name pos:line="850" pos:column="12">CURLE_OK<pos:position pos:line="850" pos:column="20"/></name> <operator pos:line="850" pos:column="21">!=<pos:position pos:line="850" pos:column="23"/></operator> <name pos:line="850" pos:column="24">result<pos:position pos:line="850" pos:column="30"/></name></expr>)<pos:position pos:line="850" pos:column="31"/></condition><then pos:line="850" pos:column="31"> <block pos:line="850" pos:column="32">{
          <expr_stmt><expr><call><name pos:line="851" pos:column="11">infof<pos:position pos:line="851" pos:column="16"/></name><argument_list pos:line="851" pos:column="16">(<argument><expr><name pos:line="851" pos:column="17">data<pos:position pos:line="851" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="851" pos:column="23">"ftp server doesn't support SIZE\n"<pos:position pos:line="851" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="851" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="851" pos:column="60"/></expr_stmt>
          <comment type="block" pos:line="852" pos:column="11">/* We couldn't get the size and therefore we can't know if there
             really is a part of the file left to get, although the server
             will just close the connection when we start the connection so it
             won't cause us any harm, just not make us exit as nicely. */</comment>
        }<pos:position pos:line="856" pos:column="10"/></block></then>
        <else pos:line="857" pos:column="9">else <block pos:line="857" pos:column="14">{
          <comment type="block" pos:line="858" pos:column="11">/* We got a file size report, so we check that there actually is a
             part of the file left to get, or else we go home.  */</comment>
          <if pos:line="860" pos:column="11">if<condition pos:line="860" pos:column="13">(<expr><name><name pos:line="860" pos:column="14">conn<pos:position pos:line="860" pos:column="18"/></name><operator pos:line="860" pos:column="18">-&gt;<pos:position pos:line="860" pos:column="23"/></operator><name pos:line="860" pos:column="20">resume_from<pos:position pos:line="860" pos:column="31"/></name></name><operator pos:line="860" pos:column="31">&lt;<pos:position pos:line="860" pos:column="35"/></operator> <literal type="number" pos:line="860" pos:column="33">0<pos:position pos:line="860" pos:column="34"/></literal></expr>)<pos:position pos:line="860" pos:column="35"/></condition><then pos:line="860" pos:column="35"> <block pos:line="860" pos:column="36">{
            <comment type="block" pos:line="861" pos:column="13">/* We're supposed to download the last abs(from) bytes */</comment>
            <if pos:line="862" pos:column="13">if<condition pos:line="862" pos:column="15">(<expr><name pos:line="862" pos:column="16">foundsize<pos:position pos:line="862" pos:column="25"/></name> <operator pos:line="862" pos:column="26">&lt;<pos:position pos:line="862" pos:column="30"/></operator> <operator pos:line="862" pos:column="28">-<pos:position pos:line="862" pos:column="29"/></operator><name><name pos:line="862" pos:column="29">conn<pos:position pos:line="862" pos:column="33"/></name><operator pos:line="862" pos:column="33">-&gt;<pos:position pos:line="862" pos:column="38"/></operator><name pos:line="862" pos:column="35">resume_from<pos:position pos:line="862" pos:column="46"/></name></name></expr>)<pos:position pos:line="862" pos:column="47"/></condition><then pos:line="862" pos:column="47"> <block pos:line="862" pos:column="48">{
              <expr_stmt><expr><call><name pos:line="863" pos:column="15">failf<pos:position pos:line="863" pos:column="20"/></name><argument_list pos:line="863" pos:column="20">(<argument><expr><name pos:line="863" pos:column="21">data<pos:position pos:line="863" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="863" pos:column="27">"Offset (%d) was beyond file size (%d)"<pos:position pos:line="863" pos:column="66"/></literal></expr></argument>,
                    <argument><expr><name><name pos:line="864" pos:column="21">conn<pos:position pos:line="864" pos:column="25"/></name><operator pos:line="864" pos:column="25">-&gt;<pos:position pos:line="864" pos:column="30"/></operator><name pos:line="864" pos:column="27">resume_from<pos:position pos:line="864" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="864" pos:column="40">foundsize<pos:position pos:line="864" pos:column="49"/></name></expr></argument>)<pos:position pos:line="864" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="864" pos:column="51"/></expr_stmt>
              <return pos:line="865" pos:column="15">return <expr><name pos:line="865" pos:column="22">CURLE_FTP_BAD_DOWNLOAD_RESUME<pos:position pos:line="865" pos:column="51"/></name></expr>;<pos:position pos:line="865" pos:column="52"/></return>
            }<pos:position pos:line="866" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="867" pos:column="13">/* convert to size to download */</comment>
            <expr_stmt><expr><name pos:line="868" pos:column="13">downloadsize<pos:position pos:line="868" pos:column="25"/></name> <operator pos:line="868" pos:column="26">=<pos:position pos:line="868" pos:column="27"/></operator> <operator pos:line="868" pos:column="28">-<pos:position pos:line="868" pos:column="29"/></operator><name><name pos:line="868" pos:column="29">conn<pos:position pos:line="868" pos:column="33"/></name><operator pos:line="868" pos:column="33">-&gt;<pos:position pos:line="868" pos:column="38"/></operator><name pos:line="868" pos:column="35">resume_from<pos:position pos:line="868" pos:column="46"/></name></name></expr>;<pos:position pos:line="868" pos:column="47"/></expr_stmt>
            <comment type="block" pos:line="869" pos:column="13">/* download from where? */</comment>
            <expr_stmt><expr><name><name pos:line="870" pos:column="13">conn<pos:position pos:line="870" pos:column="17"/></name><operator pos:line="870" pos:column="17">-&gt;<pos:position pos:line="870" pos:column="22"/></operator><name pos:line="870" pos:column="19">resume_from<pos:position pos:line="870" pos:column="30"/></name></name> <operator pos:line="870" pos:column="31">=<pos:position pos:line="870" pos:column="32"/></operator> <name pos:line="870" pos:column="33">foundsize<pos:position pos:line="870" pos:column="42"/></name> <operator pos:line="870" pos:column="43">-<pos:position pos:line="870" pos:column="44"/></operator> <name pos:line="870" pos:column="45">downloadsize<pos:position pos:line="870" pos:column="57"/></name></expr>;<pos:position pos:line="870" pos:column="58"/></expr_stmt>
          }<pos:position pos:line="871" pos:column="12"/></block></then>
          <else pos:line="872" pos:column="11">else <block pos:line="872" pos:column="16">{
            <if pos:line="873" pos:column="13">if<condition pos:line="873" pos:column="15">(<expr><name pos:line="873" pos:column="16">foundsize<pos:position pos:line="873" pos:column="25"/></name> <operator pos:line="873" pos:column="26">&lt;<pos:position pos:line="873" pos:column="30"/></operator> <name><name pos:line="873" pos:column="28">conn<pos:position pos:line="873" pos:column="32"/></name><operator pos:line="873" pos:column="32">-&gt;<pos:position pos:line="873" pos:column="37"/></operator><name pos:line="873" pos:column="34">resume_from<pos:position pos:line="873" pos:column="45"/></name></name></expr>)<pos:position pos:line="873" pos:column="46"/></condition><then pos:line="873" pos:column="46"> <block pos:line="873" pos:column="47">{
              <expr_stmt><expr><call><name pos:line="874" pos:column="15">failf<pos:position pos:line="874" pos:column="20"/></name><argument_list pos:line="874" pos:column="20">(<argument><expr><name pos:line="874" pos:column="21">data<pos:position pos:line="874" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="874" pos:column="27">"Offset (%d) was beyond file size (%d)"<pos:position pos:line="874" pos:column="66"/></literal></expr></argument>,
                    <argument><expr><name><name pos:line="875" pos:column="21">conn<pos:position pos:line="875" pos:column="25"/></name><operator pos:line="875" pos:column="25">-&gt;<pos:position pos:line="875" pos:column="30"/></operator><name pos:line="875" pos:column="27">resume_from<pos:position pos:line="875" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="875" pos:column="40">foundsize<pos:position pos:line="875" pos:column="49"/></name></expr></argument>)<pos:position pos:line="875" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="875" pos:column="51"/></expr_stmt>
              <return pos:line="876" pos:column="15">return <expr><name pos:line="876" pos:column="22">CURLE_FTP_BAD_DOWNLOAD_RESUME<pos:position pos:line="876" pos:column="51"/></name></expr>;<pos:position pos:line="876" pos:column="52"/></return>
            }<pos:position pos:line="877" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="878" pos:column="13">/* Now store the number of bytes we are expected to download */</comment>
            <expr_stmt><expr><name pos:line="879" pos:column="13">downloadsize<pos:position pos:line="879" pos:column="25"/></name> <operator pos:line="879" pos:column="26">=<pos:position pos:line="879" pos:column="27"/></operator> <name pos:line="879" pos:column="28">foundsize<pos:position pos:line="879" pos:column="37"/></name><operator pos:line="879" pos:column="37">-<pos:position pos:line="879" pos:column="38"/></operator><name><name pos:line="879" pos:column="38">conn<pos:position pos:line="879" pos:column="42"/></name><operator pos:line="879" pos:column="42">-&gt;<pos:position pos:line="879" pos:column="47"/></operator><name pos:line="879" pos:column="44">resume_from<pos:position pos:line="879" pos:column="55"/></name></name></expr>;<pos:position pos:line="879" pos:column="56"/></expr_stmt>
          }<pos:position pos:line="880" pos:column="12"/></block></else></if>
        }<pos:position pos:line="881" pos:column="10"/></block></else></if>

        <if pos:line="883" pos:column="9">if <condition pos:line="883" pos:column="12">(<expr><name pos:line="883" pos:column="13">downloadsize<pos:position pos:line="883" pos:column="25"/></name> <operator pos:line="883" pos:column="26">==<pos:position pos:line="883" pos:column="28"/></operator> <literal type="number" pos:line="883" pos:column="29">0<pos:position pos:line="883" pos:column="30"/></literal></expr>)<pos:position pos:line="883" pos:column="31"/></condition><then pos:line="883" pos:column="31"> <block pos:line="883" pos:column="32">{
          <comment type="block" pos:line="884" pos:column="11">/* no data to transfer */</comment>
          <expr_stmt><expr><name pos:line="885" pos:column="11">result<pos:position pos:line="885" pos:column="17"/></name><operator pos:line="885" pos:column="17">=<pos:position pos:line="885" pos:column="18"/></operator><call><name pos:line="885" pos:column="18">Curl_Transfer<pos:position pos:line="885" pos:column="31"/></name><argument_list pos:line="885" pos:column="31">(<argument><expr><name pos:line="885" pos:column="32">conn<pos:position pos:line="885" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="885" pos:column="38">-<pos:position pos:line="885" pos:column="39"/></operator><literal type="number" pos:line="885" pos:column="39">1<pos:position pos:line="885" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="885" pos:column="42">-<pos:position pos:line="885" pos:column="43"/></operator><literal type="number" pos:line="885" pos:column="43">1<pos:position pos:line="885" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="885" pos:column="46">FALSE<pos:position pos:line="885" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="885" pos:column="53">NULL<pos:position pos:line="885" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="885" pos:column="59">-<pos:position pos:line="885" pos:column="60"/></operator><literal type="number" pos:line="885" pos:column="60">1<pos:position pos:line="885" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="885" pos:column="63">NULL<pos:position pos:line="885" pos:column="67"/></name></expr></argument>)<pos:position pos:line="885" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="885" pos:column="69"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="886" pos:column="11">infof<pos:position pos:line="886" pos:column="16"/></name><argument_list pos:line="886" pos:column="16">(<argument><expr><name pos:line="886" pos:column="17">data<pos:position pos:line="886" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="886" pos:column="23">"File already completely downloaded\n"<pos:position pos:line="886" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="886" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="886" pos:column="63"/></expr_stmt>

          <comment type="block" pos:line="888" pos:column="11">/* Set resume done so that we won't get any error in Curl_ftp_done()
           * because we didn't transfer the amount of bytes that the remote
           * file obviously is */</comment>
          <expr_stmt><expr><name><name pos:line="891" pos:column="11">conn<pos:position pos:line="891" pos:column="15"/></name><operator pos:line="891" pos:column="15">-&gt;<pos:position pos:line="891" pos:column="20"/></operator><name pos:line="891" pos:column="17">bits<pos:position pos:line="891" pos:column="21"/></name><operator pos:line="891" pos:column="21">.<pos:position pos:line="891" pos:column="22"/></operator><name pos:line="891" pos:column="22">resume_done<pos:position pos:line="891" pos:column="33"/></name></name> <operator pos:line="891" pos:column="34">=<pos:position pos:line="891" pos:column="35"/></operator> <name pos:line="891" pos:column="36">TRUE<pos:position pos:line="891" pos:column="40"/></name></expr>;<pos:position pos:line="891" pos:column="41"/></expr_stmt> 

          <return pos:line="893" pos:column="11">return <expr><name pos:line="893" pos:column="18">CURLE_OK<pos:position pos:line="893" pos:column="26"/></name></expr>;<pos:position pos:line="893" pos:column="27"/></return>
        }<pos:position pos:line="894" pos:column="10"/></block></then></if>
	
        <comment type="block" pos:line="896" pos:column="9">/* Set resume file transfer offset */</comment>
        <expr_stmt><expr><call><name pos:line="897" pos:column="9">infof<pos:position pos:line="897" pos:column="14"/></name><argument_list pos:line="897" pos:column="14">(<argument><expr><name pos:line="897" pos:column="15">data<pos:position pos:line="897" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="897" pos:column="21">"Instructs server to resume from offset %d\n"<pos:position pos:line="897" pos:column="66"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="898" pos:column="15">conn<pos:position pos:line="898" pos:column="19"/></name><operator pos:line="898" pos:column="19">-&gt;<pos:position pos:line="898" pos:column="24"/></operator><name pos:line="898" pos:column="21">resume_from<pos:position pos:line="898" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="898" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="898" pos:column="34"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="900" pos:column="9">ftpsendf<pos:position pos:line="900" pos:column="17"/></name><argument_list pos:line="900" pos:column="17">(<argument><expr><name><name pos:line="900" pos:column="18">conn<pos:position pos:line="900" pos:column="22"/></name><operator pos:line="900" pos:column="22">-&gt;<pos:position pos:line="900" pos:column="27"/></operator><name pos:line="900" pos:column="24">firstsocket<pos:position pos:line="900" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="900" pos:column="37">conn<pos:position pos:line="900" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="900" pos:column="43">"REST %d"<pos:position pos:line="900" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="900" pos:column="54">conn<pos:position pos:line="900" pos:column="58"/></name><operator pos:line="900" pos:column="58">-&gt;<pos:position pos:line="900" pos:column="63"/></operator><name pos:line="900" pos:column="60">resume_from<pos:position pos:line="900" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="900" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="900" pos:column="73"/></expr_stmt>

        <expr_stmt><expr><name pos:line="902" pos:column="9">nread<pos:position pos:line="902" pos:column="14"/></name> <operator pos:line="902" pos:column="15">=<pos:position pos:line="902" pos:column="16"/></operator> <call><name pos:line="902" pos:column="17">Curl_GetFTPResponse<pos:position pos:line="902" pos:column="36"/></name><argument_list pos:line="902" pos:column="36">(<argument><expr><name><name pos:line="902" pos:column="37">conn<pos:position pos:line="902" pos:column="41"/></name><operator pos:line="902" pos:column="41">-&gt;<pos:position pos:line="902" pos:column="46"/></operator><name pos:line="902" pos:column="43">firstsocket<pos:position pos:line="902" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="902" pos:column="56">buf<pos:position pos:line="902" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="902" pos:column="61">conn<pos:position pos:line="902" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="902" pos:column="67">&amp;<pos:position pos:line="902" pos:column="72"/></operator><name pos:line="902" pos:column="68">ftpcode<pos:position pos:line="902" pos:column="75"/></name></expr></argument>)<pos:position pos:line="902" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="902" pos:column="77"/></expr_stmt>
        <if pos:line="903" pos:column="9">if<condition pos:line="903" pos:column="11">(<expr><name pos:line="903" pos:column="12">nread<pos:position pos:line="903" pos:column="17"/></name> <operator pos:line="903" pos:column="18">&lt;<pos:position pos:line="903" pos:column="22"/></operator> <literal type="number" pos:line="903" pos:column="20">0<pos:position pos:line="903" pos:column="21"/></literal></expr>)<pos:position pos:line="903" pos:column="22"/></condition><then pos:line="903" pos:column="22">
          <block type="pseudo"><return pos:line="904" pos:column="11">return <expr><name pos:line="904" pos:column="18">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="904" pos:column="43"/></name></expr>;<pos:position pos:line="904" pos:column="44"/></return></block></then></if>

        <if pos:line="906" pos:column="9">if<condition pos:line="906" pos:column="11">(<expr><name pos:line="906" pos:column="12">ftpcode<pos:position pos:line="906" pos:column="19"/></name> <operator pos:line="906" pos:column="20">!=<pos:position pos:line="906" pos:column="22"/></operator> <literal type="number" pos:line="906" pos:column="23">350<pos:position pos:line="906" pos:column="26"/></literal></expr>)<pos:position pos:line="906" pos:column="27"/></condition><then pos:line="906" pos:column="27"> <block pos:line="906" pos:column="28">{
          <expr_stmt><expr><call><name pos:line="907" pos:column="11">failf<pos:position pos:line="907" pos:column="16"/></name><argument_list pos:line="907" pos:column="16">(<argument><expr><name pos:line="907" pos:column="17">data<pos:position pos:line="907" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="907" pos:column="23">"Couldn't use REST: %s"<pos:position pos:line="907" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="907" pos:column="48">buf<pos:position pos:line="907" pos:column="51"/></name><operator pos:line="907" pos:column="51">+<pos:position pos:line="907" pos:column="52"/></operator><literal type="number" pos:line="907" pos:column="52">4<pos:position pos:line="907" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="907" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="907" pos:column="55"/></expr_stmt>
          <return pos:line="908" pos:column="11">return <expr><name pos:line="908" pos:column="18">CURLE_FTP_COULDNT_USE_REST<pos:position pos:line="908" pos:column="44"/></name></expr>;<pos:position pos:line="908" pos:column="45"/></return>
        }<pos:position pos:line="909" pos:column="10"/></block></then></if>
      }<pos:position pos:line="910" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="912" pos:column="7">ftpsendf<pos:position pos:line="912" pos:column="15"/></name><argument_list pos:line="912" pos:column="15">(<argument><expr><name><name pos:line="912" pos:column="16">conn<pos:position pos:line="912" pos:column="20"/></name><operator pos:line="912" pos:column="20">-&gt;<pos:position pos:line="912" pos:column="25"/></operator><name pos:line="912" pos:column="22">firstsocket<pos:position pos:line="912" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="912" pos:column="35">conn<pos:position pos:line="912" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="912" pos:column="41">"RETR %s"<pos:position pos:line="912" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="912" pos:column="52">ftp<pos:position pos:line="912" pos:column="55"/></name><operator pos:line="912" pos:column="55">-&gt;<pos:position pos:line="912" pos:column="60"/></operator><name pos:line="912" pos:column="57">file<pos:position pos:line="912" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="912" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="912" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="913" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="915" pos:column="5">nread<pos:position pos:line="915" pos:column="10"/></name> <operator pos:line="915" pos:column="11">=<pos:position pos:line="915" pos:column="12"/></operator> <call><name pos:line="915" pos:column="13">Curl_GetFTPResponse<pos:position pos:line="915" pos:column="32"/></name><argument_list pos:line="915" pos:column="32">(<argument><expr><name><name pos:line="915" pos:column="33">conn<pos:position pos:line="915" pos:column="37"/></name><operator pos:line="915" pos:column="37">-&gt;<pos:position pos:line="915" pos:column="42"/></operator><name pos:line="915" pos:column="39">firstsocket<pos:position pos:line="915" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="915" pos:column="52">buf<pos:position pos:line="915" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="915" pos:column="57">conn<pos:position pos:line="915" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="915" pos:column="63">&amp;<pos:position pos:line="915" pos:column="68"/></operator><name pos:line="915" pos:column="64">ftpcode<pos:position pos:line="915" pos:column="71"/></name></expr></argument>)<pos:position pos:line="915" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="915" pos:column="73"/></expr_stmt>
    <if pos:line="916" pos:column="5">if<condition pos:line="916" pos:column="7">(<expr><name pos:line="916" pos:column="8">nread<pos:position pos:line="916" pos:column="13"/></name> <operator pos:line="916" pos:column="14">&lt;<pos:position pos:line="916" pos:column="18"/></operator> <literal type="number" pos:line="916" pos:column="16">0<pos:position pos:line="916" pos:column="17"/></literal></expr>)<pos:position pos:line="916" pos:column="18"/></condition><then pos:line="916" pos:column="18">
      <block type="pseudo"><return pos:line="917" pos:column="7">return <expr><name pos:line="917" pos:column="14">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="917" pos:column="39"/></name></expr>;<pos:position pos:line="917" pos:column="40"/></return></block></then></if>

    <if pos:line="919" pos:column="5">if<condition pos:line="919" pos:column="7">(<expr><operator pos:line="919" pos:column="8">(<pos:position pos:line="919" pos:column="9"/></operator><name pos:line="919" pos:column="9">ftpcode<pos:position pos:line="919" pos:column="16"/></name> <operator pos:line="919" pos:column="17">==<pos:position pos:line="919" pos:column="19"/></operator> <literal type="number" pos:line="919" pos:column="20">150<pos:position pos:line="919" pos:column="23"/></literal><operator pos:line="919" pos:column="23">)<pos:position pos:line="919" pos:column="24"/></operator> <operator pos:line="919" pos:column="25">||<pos:position pos:line="919" pos:column="27"/></operator> <operator pos:line="919" pos:column="28">(<pos:position pos:line="919" pos:column="29"/></operator><name pos:line="919" pos:column="29">ftpcode<pos:position pos:line="919" pos:column="36"/></name> <operator pos:line="919" pos:column="37">==<pos:position pos:line="919" pos:column="39"/></operator> <literal type="number" pos:line="919" pos:column="40">125<pos:position pos:line="919" pos:column="43"/></literal><operator pos:line="919" pos:column="43">)<pos:position pos:line="919" pos:column="44"/></operator></expr>)<pos:position pos:line="919" pos:column="45"/></condition><then pos:line="919" pos:column="45"> <block pos:line="919" pos:column="46">{

      <comment type="block" pos:line="921" pos:column="7">/*
        A;
        150 Opening BINARY mode data connection for /etc/passwd (2241
        bytes).  (ok, the file is being transfered)
	
        B:
        150 Opening ASCII mode data connection for /bin/ls 

        C:
        150 ASCII data connection for /bin/ls (137.167.104.91,37445) (0 bytes).

        D:
        150 Opening ASCII mode data connection for /linux/fisk/kpanelrc (0.0.0.0,0) (545 bytes).
          
        E:
        125 Data connection already open; Transfer starting. */</comment>

      <decl_stmt><decl><type><name pos:line="938" pos:column="7">int<pos:position pos:line="938" pos:column="10"/></name></type> <name pos:line="938" pos:column="11">size<pos:position pos:line="938" pos:column="15"/></name><init pos:line="938" pos:column="15">=<expr><operator pos:line="938" pos:column="16">-<pos:position pos:line="938" pos:column="17"/></operator><literal type="number" pos:line="938" pos:column="17">1<pos:position pos:line="938" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="938" pos:column="19"/></decl_stmt> <comment type="block" pos:line="938" pos:column="20">/* default unknown size */</comment>

      <if pos:line="940" pos:column="7">if<condition pos:line="940" pos:column="9">(<expr><operator pos:line="940" pos:column="10">!<pos:position pos:line="940" pos:column="11"/></operator><name pos:line="940" pos:column="11">dirlist<pos:position pos:line="940" pos:column="18"/></name> <operator pos:line="940" pos:column="19">&amp;&amp;<pos:position pos:line="940" pos:column="29"/></operator>
         <operator pos:line="941" pos:column="10">!<pos:position pos:line="941" pos:column="11"/></operator><name><name pos:line="941" pos:column="11">data<pos:position pos:line="941" pos:column="15"/></name><operator pos:line="941" pos:column="15">-&gt;<pos:position pos:line="941" pos:column="20"/></operator><name pos:line="941" pos:column="17">set<pos:position pos:line="941" pos:column="20"/></name><operator pos:line="941" pos:column="20">.<pos:position pos:line="941" pos:column="21"/></operator><name pos:line="941" pos:column="21">ftp_ascii<pos:position pos:line="941" pos:column="30"/></name></name> <operator pos:line="941" pos:column="31">&amp;&amp;<pos:position pos:line="941" pos:column="41"/></operator>
         <operator pos:line="942" pos:column="10">(<pos:position pos:line="942" pos:column="11"/></operator><operator pos:line="942" pos:column="11">-<pos:position pos:line="942" pos:column="12"/></operator><literal type="number" pos:line="942" pos:column="12">1<pos:position pos:line="942" pos:column="13"/></literal> <operator pos:line="942" pos:column="14">==<pos:position pos:line="942" pos:column="16"/></operator> <name pos:line="942" pos:column="17">downloadsize<pos:position pos:line="942" pos:column="29"/></name><operator pos:line="942" pos:column="29">)<pos:position pos:line="942" pos:column="30"/></operator></expr>)<pos:position pos:line="942" pos:column="31"/></condition><then pos:line="942" pos:column="31"> <block pos:line="942" pos:column="32">{
        <comment type="block" pos:line="943" pos:column="9">/*
         * It seems directory listings either don't show the size or very
         * often uses size 0 anyway. ASCII transfers may very well turn out
         * that the transfered amount of data is not the same as this line
         * tells, why using this number in those cases only confuses us.
         *
         * Example D above makes this parsing a little tricky */</comment>
        <decl_stmt><decl><type><name pos:line="950" pos:column="9">char<pos:position pos:line="950" pos:column="13"/></name> <modifier pos:line="950" pos:column="14">*<pos:position pos:line="950" pos:column="15"/></modifier></type><name pos:line="950" pos:column="15">bytes<pos:position pos:line="950" pos:column="20"/></name></decl>;<pos:position pos:line="950" pos:column="21"/></decl_stmt>
        <expr_stmt><expr><name pos:line="951" pos:column="9">bytes<pos:position pos:line="951" pos:column="14"/></name><operator pos:line="951" pos:column="14">=<pos:position pos:line="951" pos:column="15"/></operator><call><name pos:line="951" pos:column="15">strstr<pos:position pos:line="951" pos:column="21"/></name><argument_list pos:line="951" pos:column="21">(<argument><expr><name pos:line="951" pos:column="22">buf<pos:position pos:line="951" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="951" pos:column="27">" bytes"<pos:position pos:line="951" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="951" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="951" pos:column="37"/></expr_stmt>
        <if pos:line="952" pos:column="9">if<condition pos:line="952" pos:column="11">(<expr><name pos:line="952" pos:column="12">bytes<pos:position pos:line="952" pos:column="17"/></name><operator pos:line="952" pos:column="17">--<pos:position pos:line="952" pos:column="19"/></operator></expr>)<pos:position pos:line="952" pos:column="20"/></condition><then pos:line="952" pos:column="20"> <block pos:line="952" pos:column="21">{
          <decl_stmt><decl><type><name pos:line="953" pos:column="11">int<pos:position pos:line="953" pos:column="14"/></name></type> <name pos:line="953" pos:column="15">index<pos:position pos:line="953" pos:column="20"/></name><init pos:line="953" pos:column="20">=<expr><name pos:line="953" pos:column="21">bytes<pos:position pos:line="953" pos:column="26"/></name><operator pos:line="953" pos:column="26">-<pos:position pos:line="953" pos:column="27"/></operator><name pos:line="953" pos:column="27">buf<pos:position pos:line="953" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="953" pos:column="31"/></decl_stmt>
          <comment type="block" pos:line="954" pos:column="11">/* this is a hint there is size information in there! ;-) */</comment>
          <while pos:line="955" pos:column="11">while<condition pos:line="955" pos:column="16">(<expr><operator pos:line="955" pos:column="17">--<pos:position pos:line="955" pos:column="19"/></operator><name pos:line="955" pos:column="19">index<pos:position pos:line="955" pos:column="24"/></name></expr>)<pos:position pos:line="955" pos:column="25"/></condition> <block pos:line="955" pos:column="26">{
            <comment type="block" pos:line="956" pos:column="13">/* scan for the parenthesis and break there */</comment>
            <if pos:line="957" pos:column="13">if<condition pos:line="957" pos:column="15">(<expr><literal type="char" pos:line="957" pos:column="16">'('<pos:position pos:line="957" pos:column="19"/></literal> <operator pos:line="957" pos:column="20">==<pos:position pos:line="957" pos:column="22"/></operator> <operator pos:line="957" pos:column="23">*<pos:position pos:line="957" pos:column="24"/></operator><name pos:line="957" pos:column="24">bytes<pos:position pos:line="957" pos:column="29"/></name></expr>)<pos:position pos:line="957" pos:column="30"/></condition><then pos:line="957" pos:column="30">
              <block type="pseudo"><break pos:line="958" pos:column="15">break;<pos:position pos:line="958" pos:column="21"/></break></block></then></if>
            <comment type="block" pos:line="959" pos:column="13">/* if only skip digits, or else we're in deep trouble */</comment>
            <if pos:line="960" pos:column="13">if<condition pos:line="960" pos:column="15">(<expr><operator pos:line="960" pos:column="16">!<pos:position pos:line="960" pos:column="17"/></operator><call><name pos:line="960" pos:column="17">isdigit<pos:position pos:line="960" pos:column="24"/></name><argument_list pos:line="960" pos:column="24">(<argument><expr><operator pos:line="960" pos:column="25">(<pos:position pos:line="960" pos:column="26"/></operator><name pos:line="960" pos:column="26">int<pos:position pos:line="960" pos:column="29"/></name><operator pos:line="960" pos:column="29">)<pos:position pos:line="960" pos:column="30"/></operator><operator pos:line="960" pos:column="30">*<pos:position pos:line="960" pos:column="31"/></operator><name pos:line="960" pos:column="31">bytes<pos:position pos:line="960" pos:column="36"/></name></expr></argument>)<pos:position pos:line="960" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="960" pos:column="38"/></condition><then pos:line="960" pos:column="38"> <block pos:line="960" pos:column="39">{
              <expr_stmt><expr><name pos:line="961" pos:column="15">bytes<pos:position pos:line="961" pos:column="20"/></name><operator pos:line="961" pos:column="20">=<pos:position pos:line="961" pos:column="21"/></operator><name pos:line="961" pos:column="21">NULL<pos:position pos:line="961" pos:column="25"/></name></expr>;<pos:position pos:line="961" pos:column="26"/></expr_stmt>
              <break pos:line="962" pos:column="15">break;<pos:position pos:line="962" pos:column="21"/></break>
            }<pos:position pos:line="963" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="964" pos:column="13">/* one more estep backwards */</comment>
            <expr_stmt><expr><name pos:line="965" pos:column="13">bytes<pos:position pos:line="965" pos:column="18"/></name><operator pos:line="965" pos:column="18">--<pos:position pos:line="965" pos:column="20"/></operator></expr>;<pos:position pos:line="965" pos:column="21"/></expr_stmt>
          }<pos:position pos:line="966" pos:column="12"/></block></while>
          <comment type="block" pos:line="967" pos:column="11">/* only if we have nothing but digits: */</comment>
          <if pos:line="968" pos:column="11">if<condition pos:line="968" pos:column="13">(<expr><name pos:line="968" pos:column="14">bytes<pos:position pos:line="968" pos:column="19"/></name><operator pos:line="968" pos:column="19">++<pos:position pos:line="968" pos:column="21"/></operator></expr>)<pos:position pos:line="968" pos:column="22"/></condition><then pos:line="968" pos:column="22"> <block pos:line="968" pos:column="23">{
            <comment type="block" pos:line="969" pos:column="13">/* get the number! */</comment>
            <expr_stmt><expr><name pos:line="970" pos:column="13">size<pos:position pos:line="970" pos:column="17"/></name> <operator pos:line="970" pos:column="18">=<pos:position pos:line="970" pos:column="19"/></operator> <call><name pos:line="970" pos:column="20">atoi<pos:position pos:line="970" pos:column="24"/></name><argument_list pos:line="970" pos:column="24">(<argument><expr><name pos:line="970" pos:column="25">bytes<pos:position pos:line="970" pos:column="30"/></name></expr></argument>)<pos:position pos:line="970" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="970" pos:column="32"/></expr_stmt>
          }<pos:position pos:line="971" pos:column="12"/></block></then></if>
            
        }<pos:position pos:line="973" pos:column="10"/></block></then></if>
      }<pos:position pos:line="974" pos:column="8"/></block></then>
      <elseif pos:line="975" pos:column="7">else <if pos:line="975" pos:column="12">if<condition pos:line="975" pos:column="14">(<expr><name pos:line="975" pos:column="15">downloadsize<pos:position pos:line="975" pos:column="27"/></name> <operator pos:line="975" pos:column="28">&gt;<pos:position pos:line="975" pos:column="32"/></operator> <operator pos:line="975" pos:column="30">-<pos:position pos:line="975" pos:column="31"/></operator><literal type="number" pos:line="975" pos:column="31">1<pos:position pos:line="975" pos:column="32"/></literal></expr>)<pos:position pos:line="975" pos:column="33"/></condition><then pos:line="975" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name pos:line="976" pos:column="9">size<pos:position pos:line="976" pos:column="13"/></name> <operator pos:line="976" pos:column="14">=<pos:position pos:line="976" pos:column="15"/></operator> <name pos:line="976" pos:column="16">downloadsize<pos:position pos:line="976" pos:column="28"/></name></expr>;<pos:position pos:line="976" pos:column="29"/></expr_stmt></block></then></if></elseif></if>

      <if pos:line="978" pos:column="7">if<condition pos:line="978" pos:column="9">(<expr><name><name pos:line="978" pos:column="10">data<pos:position pos:line="978" pos:column="14"/></name><operator pos:line="978" pos:column="14">-&gt;<pos:position pos:line="978" pos:column="19"/></operator><name pos:line="978" pos:column="16">set<pos:position pos:line="978" pos:column="19"/></name><operator pos:line="978" pos:column="19">.<pos:position pos:line="978" pos:column="20"/></operator><name pos:line="978" pos:column="20">ftp_use_port<pos:position pos:line="978" pos:column="32"/></name></name></expr>)<pos:position pos:line="978" pos:column="33"/></condition><then pos:line="978" pos:column="33"> <block pos:line="978" pos:column="34">{
        <expr_stmt><expr><name pos:line="979" pos:column="9">result<pos:position pos:line="979" pos:column="15"/></name> <operator pos:line="979" pos:column="16">=<pos:position pos:line="979" pos:column="17"/></operator> <call><name pos:line="979" pos:column="18">AllowServerConnect<pos:position pos:line="979" pos:column="36"/></name><argument_list pos:line="979" pos:column="36">(<argument><expr><name pos:line="979" pos:column="37">data<pos:position pos:line="979" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="979" pos:column="43">conn<pos:position pos:line="979" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="979" pos:column="49">portsock<pos:position pos:line="979" pos:column="57"/></name></expr></argument>)<pos:position pos:line="979" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="979" pos:column="59"/></expr_stmt>
        <if pos:line="980" pos:column="9">if<condition pos:line="980" pos:column="11">( <expr><name pos:line="980" pos:column="13">result<pos:position pos:line="980" pos:column="19"/></name></expr> )<pos:position pos:line="980" pos:column="21"/></condition><then pos:line="980" pos:column="21">
          <block type="pseudo"><return pos:line="981" pos:column="11">return <expr><name pos:line="981" pos:column="18">result<pos:position pos:line="981" pos:column="24"/></name></expr>;<pos:position pos:line="981" pos:column="25"/></return></block></then></if>
      }<pos:position pos:line="982" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="984" pos:column="7">infof<pos:position pos:line="984" pos:column="12"/></name><argument_list pos:line="984" pos:column="12">(<argument><expr><name pos:line="984" pos:column="13">data<pos:position pos:line="984" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="984" pos:column="19">"Getting file with size: %d\n"<pos:position pos:line="984" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="984" pos:column="51">size<pos:position pos:line="984" pos:column="55"/></name></expr></argument>)<pos:position pos:line="984" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="984" pos:column="57"/></expr_stmt>

      <comment type="block" pos:line="986" pos:column="7">/* FTP download: */</comment>
      <expr_stmt><expr><name pos:line="987" pos:column="7">result<pos:position pos:line="987" pos:column="13"/></name><operator pos:line="987" pos:column="13">=<pos:position pos:line="987" pos:column="14"/></operator><call><name pos:line="987" pos:column="14">Curl_Transfer<pos:position pos:line="987" pos:column="27"/></name><argument_list pos:line="987" pos:column="27">(<argument><expr><name pos:line="987" pos:column="28">conn<pos:position pos:line="987" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="987" pos:column="34">conn<pos:position pos:line="987" pos:column="38"/></name><operator pos:line="987" pos:column="38">-&gt;<pos:position pos:line="987" pos:column="43"/></operator><name pos:line="987" pos:column="40">secondarysocket<pos:position pos:line="987" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="987" pos:column="57">size<pos:position pos:line="987" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="987" pos:column="63">FALSE<pos:position pos:line="987" pos:column="68"/></name></expr></argument>,
                           <argument><expr><name pos:line="988" pos:column="28">bytecountp<pos:position pos:line="988" pos:column="38"/></name></expr></argument>,
                           <argument><expr><operator pos:line="989" pos:column="28">-<pos:position pos:line="989" pos:column="29"/></operator><literal type="number" pos:line="989" pos:column="29">1<pos:position pos:line="989" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="989" pos:column="32">NULL<pos:position pos:line="989" pos:column="36"/></name></expr></argument>)<pos:position pos:line="989" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="989" pos:column="38"/></expr_stmt> <comment type="block" pos:line="989" pos:column="39">/* no upload here */</comment>
      <if pos:line="990" pos:column="7">if<condition pos:line="990" pos:column="9">(<expr><name pos:line="990" pos:column="10">result<pos:position pos:line="990" pos:column="16"/></name></expr>)<pos:position pos:line="990" pos:column="17"/></condition><then pos:line="990" pos:column="17">
        <block type="pseudo"><return pos:line="991" pos:column="9">return <expr><name pos:line="991" pos:column="16">result<pos:position pos:line="991" pos:column="22"/></name></expr>;<pos:position pos:line="991" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="992" pos:column="6"/></block></then>
    <else pos:line="993" pos:column="5">else <block pos:line="993" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="994" pos:column="7">failf<pos:position pos:line="994" pos:column="12"/></name><argument_list pos:line="994" pos:column="12">(<argument><expr><name pos:line="994" pos:column="13">data<pos:position pos:line="994" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="994" pos:column="19">"%s"<pos:position pos:line="994" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="994" pos:column="25">buf<pos:position pos:line="994" pos:column="28"/></name><operator pos:line="994" pos:column="28">+<pos:position pos:line="994" pos:column="29"/></operator><literal type="number" pos:line="994" pos:column="29">4<pos:position pos:line="994" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="994" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="994" pos:column="32"/></expr_stmt>
      <return pos:line="995" pos:column="7">return <expr><name pos:line="995" pos:column="14">CURLE_FTP_COULDNT_RETR_FILE<pos:position pos:line="995" pos:column="41"/></name></expr>;<pos:position pos:line="995" pos:column="42"/></return>
    }<pos:position pos:line="996" pos:column="6"/></block></else></if>
	
  }<pos:position pos:line="998" pos:column="4"/></block></else></if>
  <comment type="block" pos:line="999" pos:column="3">/* end of transfer */</comment>

  <return pos:line="1001" pos:column="3">return <expr><name pos:line="1001" pos:column="10">CURLE_OK<pos:position pos:line="1001" pos:column="18"/></name></expr>;<pos:position pos:line="1001" pos:column="19"/></return>
}<pos:position pos:line="1002" pos:column="2"/></block></function></unit>
