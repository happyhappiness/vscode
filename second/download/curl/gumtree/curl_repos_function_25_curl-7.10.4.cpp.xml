<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_25_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">url_fread<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">ptr<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">size_t<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">size<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">size_t<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">nmemb<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">URL_FILE<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">file<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">fd_set<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">fdread<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">fd_set<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">fdwrite<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">fd_set<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">fdexcep<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">maxfd<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">timeval<pos:position pos:line="7" pos:column="17"/></name></name></type> <name pos:line="7" pos:column="18">timeout<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">rc<pos:position pos:line="8" pos:column="9"/></name></decl>;<pos:position pos:line="8" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">still_running<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><operator pos:line="11" pos:column="6">!<pos:position pos:line="11" pos:column="7"/></operator><name><name pos:line="11" pos:column="7">file<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">bytes<pos:position pos:line="11" pos:column="18"/></name></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19"> <block pos:line="11" pos:column="20">{ <comment type="block" pos:line="11" pos:column="22">/* no data available at this point */</comment>

    <expr_stmt><expr><name><name pos:line="13" pos:column="5">file<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">-&gt;<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="11">readptr<pos:position pos:line="13" pos:column="18"/></name></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <name><name pos:line="13" pos:column="21">file<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">-&gt;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="27">buffer<pos:position pos:line="13" pos:column="33"/></name></name></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt> <comment type="block" pos:line="13" pos:column="35">/* reset read pointer */</comment>

    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><name pos:line="15" pos:column="8">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="15" pos:column="32"/></name> <operator pos:line="15" pos:column="33">==<pos:position pos:line="15" pos:column="35"/></operator> <name><name pos:line="15" pos:column="36">file<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">-&gt;<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="42">m<pos:position pos:line="15" pos:column="43"/></name></name></expr>)<pos:position pos:line="15" pos:column="44"/></condition><then pos:line="15" pos:column="44"> <block pos:line="15" pos:column="45">{
      <while pos:line="16" pos:column="7">while<condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="16" pos:column="37"/></name> <operator pos:line="16" pos:column="38">==<pos:position pos:line="16" pos:column="40"/></operator>
            <call><name pos:line="17" pos:column="13">curl_multi_perform<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">multi_handle<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="46">&amp;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="47">still_running<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="62"/></condition> <block pos:line="17" pos:column="63">{
        <if pos:line="18" pos:column="9">if<condition pos:line="18" pos:column="11">(<expr><name><name pos:line="18" pos:column="12">file<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">bytes<pos:position pos:line="18" pos:column="23"/></name></name></expr>)<pos:position pos:line="18" pos:column="24"/></condition><then pos:line="18" pos:column="24"> <block pos:line="18" pos:column="25">{
          <expr_stmt><expr><call><name pos:line="19" pos:column="11">printf<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><literal type="string" pos:line="19" pos:column="18">"(fread) WOAH! THis happened!\n"<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
          <break pos:line="20" pos:column="11">break;<pos:position pos:line="20" pos:column="17"/></break>        
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
      }<pos:position pos:line="22" pos:column="8"/></block></while>
      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><operator pos:line="23" pos:column="10">!<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">still_running<pos:position pos:line="23" pos:column="24"/></name></expr>)<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25"> <block pos:line="23" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">printf<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="string" pos:line="24" pos:column="16">"DONE RUNNING AROUND!\n"<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
        <return pos:line="25" pos:column="9">return <expr><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></return>
      }<pos:position pos:line="26" pos:column="8"/></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <do pos:line="29" pos:column="5">do <block pos:line="29" pos:column="8">{

      <expr_stmt><expr><call><name pos:line="31" pos:column="7">FD_ZERO<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><operator pos:line="31" pos:column="15">&amp;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="16">fdread<pos:position pos:line="31" pos:column="22"/></name></expr></argument>)<pos:position pos:line="31" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">FD_ZERO<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><operator pos:line="32" pos:column="15">&amp;<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="16">fdwrite<pos:position pos:line="32" pos:column="23"/></name></expr></argument>)<pos:position pos:line="32" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">FD_ZERO<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><operator pos:line="33" pos:column="15">&amp;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="16">fdexcep<pos:position pos:line="33" pos:column="23"/></name></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
  
      <comment type="block" pos:line="35" pos:column="7">/* set a suitable timeout to fail on */</comment>
      <expr_stmt><expr><name><name pos:line="36" pos:column="7">timeout<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">.<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">tv_sec<pos:position pos:line="36" pos:column="21"/></name></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <literal type="number" pos:line="36" pos:column="24">500<pos:position pos:line="36" pos:column="27"/></literal></expr>;<pos:position pos:line="36" pos:column="28"/></expr_stmt> <comment type="block" pos:line="36" pos:column="29">/* 5 minutes */</comment>
      <expr_stmt><expr><name><name pos:line="37" pos:column="7">timeout<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">.<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">tv_usec<pos:position pos:line="37" pos:column="22"/></name></name> <operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator> <literal type="number" pos:line="37" pos:column="25">0<pos:position pos:line="37" pos:column="26"/></literal></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>

      <comment type="block" pos:line="39" pos:column="7">/* get file descriptors from the transfers */</comment>
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">curl_multi_fdset<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">multi_handle<pos:position pos:line="40" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="38">&amp;<pos:position pos:line="40" pos:column="43"/></operator><name pos:line="40" pos:column="39">fdread<pos:position pos:line="40" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="47">&amp;<pos:position pos:line="40" pos:column="52"/></operator><name pos:line="40" pos:column="48">fdwrite<pos:position pos:line="40" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="57">&amp;<pos:position pos:line="40" pos:column="62"/></operator><name pos:line="40" pos:column="58">fdexcep<pos:position pos:line="40" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="67">&amp;<pos:position pos:line="40" pos:column="72"/></operator><name pos:line="40" pos:column="68">maxfd<pos:position pos:line="40" pos:column="73"/></name></expr></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="75"/></expr_stmt>

      <expr_stmt><expr><name pos:line="42" pos:column="7">rc<pos:position pos:line="42" pos:column="9"/></name> <operator pos:line="42" pos:column="10">=<pos:position pos:line="42" pos:column="11"/></operator> <call><name pos:line="42" pos:column="12">select<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><name pos:line="42" pos:column="19">maxfd<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">+<pos:position pos:line="42" pos:column="25"/></operator><literal type="number" pos:line="42" pos:column="25">1<pos:position pos:line="42" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="42" pos:column="28">&amp;<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="29">fdread<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="37">&amp;<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="38">fdwrite<pos:position pos:line="42" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="47">&amp;<pos:position pos:line="42" pos:column="52"/></operator><name pos:line="42" pos:column="48">fdexcep<pos:position pos:line="42" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="57">&amp;<pos:position pos:line="42" pos:column="62"/></operator><name pos:line="42" pos:column="58">timeout<pos:position pos:line="42" pos:column="65"/></name></expr></argument>)<pos:position pos:line="42" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="67"/></expr_stmt>

      <switch pos:line="44" pos:column="7">switch<condition pos:line="44" pos:column="13">(<expr><name pos:line="44" pos:column="14">rc<pos:position pos:line="44" pos:column="16"/></name></expr>)<pos:position pos:line="44" pos:column="17"/></condition> <block pos:line="44" pos:column="18">{
      <case pos:line="45" pos:column="7">case <expr><operator pos:line="45" pos:column="12">-<pos:position pos:line="45" pos:column="13"/></operator><literal type="number" pos:line="45" pos:column="13">1<pos:position pos:line="45" pos:column="14"/></literal></expr>:<pos:position pos:line="45" pos:column="15"/></case>
        <comment type="block" pos:line="46" pos:column="9">/* select error */</comment>
        <break pos:line="47" pos:column="9">break;<pos:position pos:line="47" pos:column="15"/></break>
      <case pos:line="48" pos:column="7">case <expr><literal type="number" pos:line="48" pos:column="12">0<pos:position pos:line="48" pos:column="13"/></literal></expr>:<pos:position pos:line="48" pos:column="14"/></case>
        <break pos:line="49" pos:column="9">break;<pos:position pos:line="49" pos:column="15"/></break>
      <default pos:line="50" pos:column="7">default:<pos:position pos:line="50" pos:column="15"/></default>
        <comment type="block" pos:line="51" pos:column="9">/* timeout or readable/writable sockets */</comment>
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">printf<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><literal type="string" pos:line="52" pos:column="16">"select() returned %d!\n"<pos:position pos:line="52" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="43">rc<pos:position pos:line="52" pos:column="45"/></name></expr></argument>)<pos:position pos:line="52" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt>
        <do pos:line="53" pos:column="9">do <block pos:line="53" pos:column="12">{
          <expr_stmt><expr><name><name pos:line="54" pos:column="11">file<pos:position pos:line="54" pos:column="15"/></name><operator pos:line="54" pos:column="15">-&gt;<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="17">m<pos:position pos:line="54" pos:column="18"/></name></name> <operator pos:line="54" pos:column="19">=<pos:position pos:line="54" pos:column="20"/></operator> <call><name pos:line="54" pos:column="21">curl_multi_perform<pos:position pos:line="54" pos:column="39"/></name><argument_list pos:line="54" pos:column="39">(<argument><expr><name pos:line="54" pos:column="40">multi_handle<pos:position pos:line="54" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="54">&amp;<pos:position pos:line="54" pos:column="59"/></operator><name pos:line="54" pos:column="55">still_running<pos:position pos:line="54" pos:column="68"/></name></expr></argument>)<pos:position pos:line="54" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="70"/></expr_stmt>
          
          <if pos:line="56" pos:column="11">if<condition pos:line="56" pos:column="13">(<expr><name><name pos:line="56" pos:column="14">file<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">-&gt;<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="20">bytes<pos:position pos:line="56" pos:column="25"/></name></name></expr>)<pos:position pos:line="56" pos:column="26"/></condition><then pos:line="56" pos:column="26">
            <comment type="block" pos:line="57" pos:column="13">/* we have received data, return that now */</comment>
            <block type="pseudo"><break pos:line="58" pos:column="13">break;<pos:position pos:line="58" pos:column="19"/></break></block></then></if>
          
        }<pos:position pos:line="60" pos:column="10"/></block> while<condition pos:line="60" pos:column="16">(<expr><name pos:line="60" pos:column="17">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="60" pos:column="41"/></name> <operator pos:line="60" pos:column="42">==<pos:position pos:line="60" pos:column="44"/></operator> <name><name pos:line="60" pos:column="45">file<pos:position pos:line="60" pos:column="49"/></name><operator pos:line="60" pos:column="49">-&gt;<pos:position pos:line="60" pos:column="54"/></operator><name pos:line="60" pos:column="51">m<pos:position pos:line="60" pos:column="52"/></name></name></expr>)<pos:position pos:line="60" pos:column="53"/></condition>;<pos:position pos:line="60" pos:column="54"/></do>

        
        <if pos:line="63" pos:column="9">if<condition pos:line="63" pos:column="11">(<expr><operator pos:line="63" pos:column="12">!<pos:position pos:line="63" pos:column="13"/></operator><name pos:line="63" pos:column="13">still_running<pos:position pos:line="63" pos:column="26"/></name></expr>)<pos:position pos:line="63" pos:column="27"/></condition><then pos:line="63" pos:column="27">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="11">printf<pos:position pos:line="64" pos:column="17"/></name><argument_list pos:line="64" pos:column="17">(<argument><expr><literal type="string" pos:line="64" pos:column="18">"DONE RUNNING AROUND!\n"<pos:position pos:line="64" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="44"/></expr_stmt></block></then></if>
        
        <break pos:line="66" pos:column="9">break;<pos:position pos:line="66" pos:column="15"/></break>
      }<pos:position pos:line="67" pos:column="8"/></block></switch>
    }<pos:position pos:line="68" pos:column="6"/></block> while<condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">still_running<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">&amp;&amp;<pos:position pos:line="68" pos:column="37"/></operator> <operator pos:line="68" pos:column="30">(<pos:position pos:line="68" pos:column="31"/></operator><name><name pos:line="68" pos:column="31">file<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">-&gt;<pos:position pos:line="68" pos:column="40"/></operator><name pos:line="68" pos:column="37">bytes<pos:position pos:line="68" pos:column="42"/></name></name> <operator pos:line="68" pos:column="43">&lt;=<pos:position pos:line="68" pos:column="48"/></operator> <literal type="number" pos:line="68" pos:column="46">0<pos:position pos:line="68" pos:column="47"/></literal><operator pos:line="68" pos:column="47">)<pos:position pos:line="68" pos:column="48"/></operator></expr>)<pos:position pos:line="68" pos:column="49"/></condition>;<pos:position pos:line="68" pos:column="50"/></do>
  }<pos:position pos:line="69" pos:column="4"/></block></then>
  <else pos:line="70" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="5">printf<pos:position pos:line="71" pos:column="11"/></name><argument_list pos:line="71" pos:column="11">(<argument><expr><literal type="string" pos:line="71" pos:column="12">"(fread) Skip network read\n"<pos:position pos:line="71" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="43"/></expr_stmt></block></else></if>

  <if pos:line="73" pos:column="3">if<condition pos:line="73" pos:column="5">(<expr><name><name pos:line="73" pos:column="6">file<pos:position pos:line="73" pos:column="10"/></name><operator pos:line="73" pos:column="10">-&gt;<pos:position pos:line="73" pos:column="15"/></operator><name pos:line="73" pos:column="12">bytes<pos:position pos:line="73" pos:column="17"/></name></name></expr>)<pos:position pos:line="73" pos:column="18"/></condition><then pos:line="73" pos:column="18"> <block pos:line="73" pos:column="19">{
    <comment type="block" pos:line="74" pos:column="5">/* data already available, return that */</comment>
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">int<pos:position pos:line="75" pos:column="8"/></name></type> <name pos:line="75" pos:column="9">want<pos:position pos:line="75" pos:column="13"/></name> <init pos:line="75" pos:column="14">= <expr><name pos:line="75" pos:column="16">size<pos:position pos:line="75" pos:column="20"/></name> <operator pos:line="75" pos:column="21">*<pos:position pos:line="75" pos:column="22"/></operator> <name pos:line="75" pos:column="23">nmemb<pos:position pos:line="75" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="75" pos:column="29"/></decl_stmt>

    <if pos:line="77" pos:column="5">if<condition pos:line="77" pos:column="7">(<expr><name><name pos:line="77" pos:column="8">file<pos:position pos:line="77" pos:column="12"/></name><operator pos:line="77" pos:column="12">-&gt;<pos:position pos:line="77" pos:column="17"/></operator><name pos:line="77" pos:column="14">bytes<pos:position pos:line="77" pos:column="19"/></name></name> <operator pos:line="77" pos:column="20">&lt;<pos:position pos:line="77" pos:column="24"/></operator> <name pos:line="77" pos:column="22">want<pos:position pos:line="77" pos:column="26"/></name></expr>)<pos:position pos:line="77" pos:column="27"/></condition><then pos:line="77" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="7">want<pos:position pos:line="78" pos:column="11"/></name> <operator pos:line="78" pos:column="12">=<pos:position pos:line="78" pos:column="13"/></operator> <name><name pos:line="78" pos:column="14">file<pos:position pos:line="78" pos:column="18"/></name><operator pos:line="78" pos:column="18">-&gt;<pos:position pos:line="78" pos:column="23"/></operator><name pos:line="78" pos:column="20">bytes<pos:position pos:line="78" pos:column="25"/></name></name></expr>;<pos:position pos:line="78" pos:column="26"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="80" pos:column="5">memcpy<pos:position pos:line="80" pos:column="11"/></name><argument_list pos:line="80" pos:column="11">(<argument><expr><name pos:line="80" pos:column="12">ptr<pos:position pos:line="80" pos:column="15"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="17">file<pos:position pos:line="80" pos:column="21"/></name><operator pos:line="80" pos:column="21">-&gt;<pos:position pos:line="80" pos:column="26"/></operator><name pos:line="80" pos:column="23">readptr<pos:position pos:line="80" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="32">want<pos:position pos:line="80" pos:column="36"/></name></expr></argument>)<pos:position pos:line="80" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="81" pos:column="5">file<pos:position pos:line="81" pos:column="9"/></name><operator pos:line="81" pos:column="9">-&gt;<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="11">readptr<pos:position pos:line="81" pos:column="18"/></name></name> <operator pos:line="81" pos:column="19">+=<pos:position pos:line="81" pos:column="21"/></operator> <name pos:line="81" pos:column="22">want<pos:position pos:line="81" pos:column="26"/></name></expr>;<pos:position pos:line="81" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="82" pos:column="5">file<pos:position pos:line="82" pos:column="9"/></name><operator pos:line="82" pos:column="9">-&gt;<pos:position pos:line="82" pos:column="14"/></operator><name pos:line="82" pos:column="11">bytes<pos:position pos:line="82" pos:column="16"/></name></name> <operator pos:line="82" pos:column="17">-=<pos:position pos:line="82" pos:column="19"/></operator> <name pos:line="82" pos:column="20">want<pos:position pos:line="82" pos:column="24"/></name></expr>;<pos:position pos:line="82" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="84" pos:column="5">printf<pos:position pos:line="84" pos:column="11"/></name><argument_list pos:line="84" pos:column="11">(<argument><expr><literal type="string" pos:line="84" pos:column="12">"(fread) return %d bytes\n"<pos:position pos:line="84" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="41">want<pos:position pos:line="84" pos:column="45"/></name></expr></argument>)<pos:position pos:line="84" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="47"/></expr_stmt>

    <return pos:line="86" pos:column="5">return <expr><name pos:line="86" pos:column="12">want<pos:position pos:line="86" pos:column="16"/></name></expr>;<pos:position pos:line="86" pos:column="17"/></return>
  }<pos:position pos:line="87" pos:column="4"/></block></then></if>
  <return pos:line="88" pos:column="3">return <expr><literal type="number" pos:line="88" pos:column="10">0<pos:position pos:line="88" pos:column="11"/></literal></expr>;<pos:position pos:line="88" pos:column="12"/></return> <comment type="block" pos:line="88" pos:column="13">/* no data available to return */</comment>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
