<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_99_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_is_connected<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">sockfd<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="3" pos:column="28">bool<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">connected<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="44"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">rc<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SessionHandle<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">conn<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">-&gt;<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="38">data<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="8" pos:column="3">*<pos:position pos:line="8" pos:column="4"/></operator><name pos:line="8" pos:column="4">connected<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">FALSE<pos:position pos:line="8" pos:column="21"/></name></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt> <comment type="block" pos:line="8" pos:column="23">/* a very negative world view is best */</comment>

  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name><name pos:line="10" pos:column="6">data<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">set<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">timeout<pos:position pos:line="10" pos:column="23"/></name></name> <operator pos:line="10" pos:column="24">||<pos:position pos:line="10" pos:column="26"/></operator> <name><name pos:line="10" pos:column="27">data<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">set<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">.<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">connecttimeout<pos:position pos:line="10" pos:column="51"/></name></name></expr>)<pos:position pos:line="10" pos:column="52"/></condition><then pos:line="10" pos:column="52"> <block pos:line="10" pos:column="53">{
    <comment type="block" pos:line="11" pos:column="5">/* there is a timeout set */</comment>

    <comment type="block" pos:line="13" pos:column="5">/* Evaluate in milliseconds how much time that has passed */</comment>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">long<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">has_passed<pos:position pos:line="14" pos:column="20"/></name> <init pos:line="14" pos:column="21">= <expr><call><name pos:line="14" pos:column="23">Curl_tvdiff<pos:position pos:line="14" pos:column="34"/></name><argument_list pos:line="14" pos:column="34">(<argument><expr><call><name pos:line="14" pos:column="35">Curl_tvnow<pos:position pos:line="14" pos:column="45"/></name><argument_list pos:line="14" pos:column="45">()<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="49">data<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">-&gt;<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="55">progress<pos:position pos:line="14" pos:column="63"/></name><operator pos:line="14" pos:column="63">.<pos:position pos:line="14" pos:column="64"/></operator><name pos:line="14" pos:column="64">start<pos:position pos:line="14" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="71"/></decl_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* subtract the most strict timeout of the ones */</comment>
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><name><name pos:line="17" pos:column="8">data<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">set<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">timeout<pos:position pos:line="17" pos:column="25"/></name></name> <operator pos:line="17" pos:column="26">&amp;&amp;<pos:position pos:line="17" pos:column="36"/></operator> <name><name pos:line="17" pos:column="29">data<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">-&gt;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="35">set<pos:position pos:line="17" pos:column="38"/></name><operator pos:line="17" pos:column="38">.<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="39">connecttimeout<pos:position pos:line="17" pos:column="53"/></name></name></expr>)<pos:position pos:line="17" pos:column="54"/></condition><then pos:line="17" pos:column="54"> <block pos:line="17" pos:column="55">{
      <if pos:line="18" pos:column="7">if <condition pos:line="18" pos:column="10">(<expr><name><name pos:line="18" pos:column="11">data<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">set<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">.<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">timeout<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">&lt;<pos:position pos:line="18" pos:column="33"/></operator> <name><name pos:line="18" pos:column="31">data<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">-&gt;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="37">set<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">.<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="41">connecttimeout<pos:position pos:line="18" pos:column="55"/></name></name></expr>)<pos:position pos:line="18" pos:column="56"/></condition><then pos:line="18" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">has_passed<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">-=<pos:position pos:line="19" pos:column="22"/></operator> <name><name pos:line="19" pos:column="23">data<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">set<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">.<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="33">timeout<pos:position pos:line="19" pos:column="40"/></name></name><operator pos:line="19" pos:column="40">*<pos:position pos:line="19" pos:column="41"/></operator><literal type="number" pos:line="19" pos:column="41">1000<pos:position pos:line="19" pos:column="45"/></literal></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt></block></then>
      <else pos:line="20" pos:column="7">else 
        <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="9">has_passed<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">-=<pos:position pos:line="21" pos:column="22"/></operator> <name><name pos:line="21" pos:column="23">data<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">-&gt;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="29">set<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">.<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">connecttimeout<pos:position pos:line="21" pos:column="47"/></name></name><operator pos:line="21" pos:column="47">*<pos:position pos:line="21" pos:column="48"/></operator><literal type="number" pos:line="21" pos:column="48">1000<pos:position pos:line="21" pos:column="52"/></literal></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt></block></else></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then>
    <elseif pos:line="23" pos:column="5">else <if pos:line="23" pos:column="10">if<condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">data<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">set<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">.<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="23">timeout<pos:position pos:line="23" pos:column="30"/></name></name></expr>)<pos:position pos:line="23" pos:column="31"/></condition><then pos:line="23" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="7">has_passed<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">-=<pos:position pos:line="24" pos:column="20"/></operator> <name><name pos:line="24" pos:column="21">data<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">-&gt;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="27">set<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">.<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="31">timeout<pos:position pos:line="24" pos:column="38"/></name></name><operator pos:line="24" pos:column="38">*<pos:position pos:line="24" pos:column="39"/></operator><literal type="number" pos:line="24" pos:column="39">1000<pos:position pos:line="24" pos:column="43"/></literal></expr>;<pos:position pos:line="24" pos:column="44"/></expr_stmt></block></then></if></elseif>
    <else pos:line="25" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="7">has_passed<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">-=<pos:position pos:line="26" pos:column="20"/></operator> <name><name pos:line="26" pos:column="21">data<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">-&gt;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="27">set<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">.<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="31">connecttimeout<pos:position pos:line="26" pos:column="45"/></name></name><operator pos:line="26" pos:column="45">*<pos:position pos:line="26" pos:column="46"/></operator><literal type="number" pos:line="26" pos:column="46">1000<pos:position pos:line="26" pos:column="50"/></literal></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt></block></else></if>

    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><name pos:line="28" pos:column="8">has_passed<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">&gt;<pos:position pos:line="28" pos:column="23"/></operator> <literal type="number" pos:line="28" pos:column="21">0<pos:position pos:line="28" pos:column="22"/></literal></expr> )<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24"> <block pos:line="28" pos:column="25">{
      <comment type="block" pos:line="29" pos:column="7">/* time-out, bail out, go home */</comment>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">failf<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">data<pos:position pos:line="30" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="19">"Connection time-out"<pos:position pos:line="30" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
      <return pos:line="31" pos:column="7">return <expr><name pos:line="31" pos:column="14">CURLE_OPERATION_TIMEOUTED<pos:position pos:line="31" pos:column="39"/></name></expr>;<pos:position pos:line="31" pos:column="40"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>
  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name><name pos:line="34" pos:column="6">conn<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">bits<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">.<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">tcpconnect<pos:position pos:line="34" pos:column="27"/></name></name></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28"> <block pos:line="34" pos:column="29">{
    <comment type="block" pos:line="35" pos:column="5">/* we are connected already! */</comment>
    <expr_stmt><expr><operator pos:line="36" pos:column="5">*<pos:position pos:line="36" pos:column="6"/></operator><name pos:line="36" pos:column="6">connected<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">TRUE<pos:position pos:line="36" pos:column="22"/></name></expr>;<pos:position pos:line="36" pos:column="23"/></expr_stmt>
    <return pos:line="37" pos:column="5">return <expr><name pos:line="37" pos:column="12">CURLE_OK<pos:position pos:line="37" pos:column="20"/></name></expr>;<pos:position pos:line="37" pos:column="21"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="40" pos:column="3">/* check for connect without timeout as we want to return immediately */</comment>
  <expr_stmt><expr><name pos:line="41" pos:column="3">rc<pos:position pos:line="41" pos:column="5"/></name> <operator pos:line="41" pos:column="6">=<pos:position pos:line="41" pos:column="7"/></operator> <call><name pos:line="41" pos:column="8">waitconnect<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><name pos:line="41" pos:column="20">sockfd<pos:position pos:line="41" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="28">0<pos:position pos:line="41" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>

  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><literal type="number" pos:line="43" pos:column="6">0<pos:position pos:line="43" pos:column="7"/></literal> <operator pos:line="43" pos:column="8">==<pos:position pos:line="43" pos:column="10"/></operator> <name pos:line="43" pos:column="11">rc<pos:position pos:line="43" pos:column="13"/></name></expr>)<pos:position pos:line="43" pos:column="14"/></condition><then pos:line="43" pos:column="14"> <block pos:line="43" pos:column="15">{
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">int<pos:position pos:line="44" pos:column="8"/></name></type> <name pos:line="44" pos:column="9">err<pos:position pos:line="44" pos:column="12"/></name> <init pos:line="44" pos:column="13">= <expr><call><name pos:line="44" pos:column="15">socketerror<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">sockfd<pos:position pos:line="44" pos:column="33"/></name></expr></argument>)<pos:position pos:line="44" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="44" pos:column="35"/></decl_stmt>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><operator pos:line="45" pos:column="9">(<pos:position pos:line="45" pos:column="10"/></operator><literal type="number" pos:line="45" pos:column="10">0<pos:position pos:line="45" pos:column="11"/></literal> <operator pos:line="45" pos:column="12">==<pos:position pos:line="45" pos:column="14"/></operator> <name pos:line="45" pos:column="15">err<pos:position pos:line="45" pos:column="18"/></name><operator pos:line="45" pos:column="18">)<pos:position pos:line="45" pos:column="19"/></operator> <operator pos:line="45" pos:column="20">||<pos:position pos:line="45" pos:column="22"/></operator> <operator pos:line="45" pos:column="23">(<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="24">EISCONN<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">==<pos:position pos:line="45" pos:column="34"/></operator> <name pos:line="45" pos:column="35">err<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">)<pos:position pos:line="45" pos:column="39"/></operator></expr>)<pos:position pos:line="45" pos:column="40"/></condition><then pos:line="45" pos:column="40"> <block pos:line="45" pos:column="41">{
      <comment type="block" pos:line="46" pos:column="7">/* we are connected, awesome! */</comment>
      <expr_stmt><expr><operator pos:line="47" pos:column="7">*<pos:position pos:line="47" pos:column="8"/></operator><name pos:line="47" pos:column="8">connected<pos:position pos:line="47" pos:column="17"/></name> <operator pos:line="47" pos:column="18">=<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">TRUE<pos:position pos:line="47" pos:column="24"/></name></expr>;<pos:position pos:line="47" pos:column="25"/></expr_stmt>
      <return pos:line="48" pos:column="7">return <expr><name pos:line="48" pos:column="14">CURLE_OK<pos:position pos:line="48" pos:column="22"/></name></expr>;<pos:position pos:line="48" pos:column="23"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="50" pos:column="5">/* nope, not connected for real */</comment>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">failf<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name pos:line="51" pos:column="11">data<pos:position pos:line="51" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="17">"Connection failed, socket error: %d"<pos:position pos:line="51" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="56">err<pos:position pos:line="51" pos:column="59"/></name></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><name pos:line="52" pos:column="12">CURLE_COULDNT_CONNECT<pos:position pos:line="52" pos:column="33"/></name></expr>;<pos:position pos:line="52" pos:column="34"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></then>
  <elseif pos:line="54" pos:column="3">else <if pos:line="54" pos:column="8">if<condition pos:line="54" pos:column="10">(<expr><literal type="number" pos:line="54" pos:column="11">1<pos:position pos:line="54" pos:column="12"/></literal> <operator pos:line="54" pos:column="13">!=<pos:position pos:line="54" pos:column="15"/></operator> <name pos:line="54" pos:column="16">rc<pos:position pos:line="54" pos:column="18"/></name></expr>)<pos:position pos:line="54" pos:column="19"/></condition><then pos:line="54" pos:column="19"> <block pos:line="54" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="55" pos:column="5">int<pos:position pos:line="55" pos:column="8"/></name></type> <name pos:line="55" pos:column="9">error<pos:position pos:line="55" pos:column="14"/></name> <init pos:line="55" pos:column="15">= <expr><call><name pos:line="55" pos:column="17">ourerrno<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">()<pos:position pos:line="55" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="55" pos:column="28"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">failf<pos:position pos:line="56" pos:column="10"/></name><argument_list pos:line="56" pos:column="10">(<argument><expr><name pos:line="56" pos:column="11">data<pos:position pos:line="56" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="17">"Failed connect to %s:%d, errno: %d"<pos:position pos:line="56" pos:column="53"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="57" pos:column="11">conn<pos:position pos:line="57" pos:column="15"/></name><operator pos:line="57" pos:column="15">-&gt;<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="17">hostname<pos:position pos:line="57" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="27">conn<pos:position pos:line="57" pos:column="31"/></name><operator pos:line="57" pos:column="31">-&gt;<pos:position pos:line="57" pos:column="36"/></operator><name pos:line="57" pos:column="33">port<pos:position pos:line="57" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="39">error<pos:position pos:line="57" pos:column="44"/></name></expr></argument>)<pos:position pos:line="57" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="46"/></expr_stmt>
    <return pos:line="58" pos:column="5">return <expr><name pos:line="58" pos:column="12">CURLE_COULDNT_CONNECT<pos:position pos:line="58" pos:column="33"/></name></expr>;<pos:position pos:line="58" pos:column="34"/></return>
  }<pos:position pos:line="59" pos:column="4"/></block></then></if></elseif></if>
  <comment type="block" pos:line="60" pos:column="3">/*
   * If the connection phase is "done" here, we should attempt to connect
   * to the "next address" in the Curl_hostaddr structure that we resolved
   * before. But we don't have that struct around anymore and we can't just
   * keep a pointer since the cache might in fact have gotten pruned by the
   * time we want to read this... Alas, we don't do this yet.
   */</comment>

  <return pos:line="68" pos:column="3">return <expr><name pos:line="68" pos:column="10">CURLE_OK<pos:position pos:line="68" pos:column="18"/></name></expr>;<pos:position pos:line="68" pos:column="19"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
