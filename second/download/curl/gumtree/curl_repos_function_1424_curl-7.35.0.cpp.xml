<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1424_curl-7.35.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_read<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">connectdata<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">conn<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="46">/* connection data */</comment>
                   <parameter><decl><type><name pos:line="2" pos:column="20">curl_socket_t<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">sockfd<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,     <comment type="block" pos:line="2" pos:column="46">/* read from this socket */</comment>
                   <parameter><decl><type><name pos:line="3" pos:column="20">char<pos:position pos:line="3" pos:column="24"/></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">buf<pos:position pos:line="3" pos:column="29"/></name></decl></parameter>,                <comment type="block" pos:line="3" pos:column="46">/* store read data here */</comment>
                   <parameter><decl><type><name pos:line="4" pos:column="20">size_t<pos:position pos:line="4" pos:column="26"/></name></type> <name pos:line="4" pos:column="27">sizerequested<pos:position pos:line="4" pos:column="40"/></name></decl></parameter>,     <comment type="block" pos:line="4" pos:column="46">/* max amount to read */</comment>
                   <parameter><decl><type><name pos:line="5" pos:column="20">ssize_t<pos:position pos:line="5" pos:column="27"/></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">n<pos:position pos:line="5" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="31"/></parameter_list>               <comment type="block" pos:line="5" pos:column="46">/* amount bytes read */</comment>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLcode<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">curlcode<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">CURLE_RECV_ERROR<pos:position pos:line="7" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">ssize_t<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">nread<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">bytesfromsocket<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">buffertofill<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><name pos:line="10" pos:column="24">NULL<pos:position pos:line="10" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">bool<pos:position pos:line="11" pos:column="7"/></name></type> <name pos:line="11" pos:column="8">pipelining<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><call><name pos:line="11" pos:column="21">Curl_multi_pipeline_enabled<pos:position pos:line="11" pos:column="48"/></name><argument_list pos:line="11" pos:column="48">(<argument><expr><name><name pos:line="11" pos:column="49">conn<pos:position pos:line="11" pos:column="53"/></name><operator pos:line="11" pos:column="53">-&gt;<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="55">data<pos:position pos:line="11" pos:column="59"/></name><operator pos:line="11" pos:column="59">-&gt;<pos:position pos:line="11" pos:column="64"/></operator><name pos:line="11" pos:column="61">multi<pos:position pos:line="11" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="68"/></decl_stmt>

  <comment type="block" pos:line="13" pos:column="3">/* Set 'num' to 0 or 1, depending on which socket that has been sent here.
     If it is the second socket, we set num to 1. Otherwise to 0. This lets
     us use the correct ssl handle. */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">num<pos:position pos:line="16" pos:column="10"/></name> <init pos:line="16" pos:column="11">= <expr><operator pos:line="16" pos:column="13">(<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">sockfd<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">==<pos:position pos:line="16" pos:column="23"/></operator> <name><name pos:line="16" pos:column="24">conn<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">-&gt;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="30">sock<pos:position pos:line="16" pos:column="34"/></name><index pos:line="16" pos:column="34">[<expr><name pos:line="16" pos:column="35">SECONDARYSOCKET<pos:position pos:line="16" pos:column="50"/></name></expr>]<pos:position pos:line="16" pos:column="51"/></index></name><operator pos:line="16" pos:column="51">)<pos:position pos:line="16" pos:column="52"/></operator></expr></init></decl>;<pos:position pos:line="16" pos:column="53"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="18" pos:column="3">*<pos:position pos:line="18" pos:column="4"/></operator><name pos:line="18" pos:column="4">n<pos:position pos:line="18" pos:column="5"/></name><operator pos:line="18" pos:column="5">=<pos:position pos:line="18" pos:column="6"/></operator><literal type="number" pos:line="18" pos:column="6">0<pos:position pos:line="18" pos:column="7"/></literal></expr>;<pos:position pos:line="18" pos:column="8"/></expr_stmt> <comment type="block" pos:line="18" pos:column="9">/* reset amount to zero */</comment>

  <comment type="block" pos:line="20" pos:column="3">/* If session can pipeline, check connection buffer  */</comment>
  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><name pos:line="21" pos:column="6">pipelining<pos:position pos:line="21" pos:column="16"/></name></expr>)<pos:position pos:line="21" pos:column="17"/></condition><then pos:line="21" pos:column="17"> <block pos:line="21" pos:column="18">{
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">size_t<pos:position pos:line="22" pos:column="11"/></name></type> <name pos:line="22" pos:column="12">bytestocopy<pos:position pos:line="22" pos:column="23"/></name> <init pos:line="22" pos:column="24">= <expr><call><name pos:line="22" pos:column="26">CURLMIN<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name><name pos:line="22" pos:column="34">conn<pos:position pos:line="22" pos:column="38"/></name><operator pos:line="22" pos:column="38">-&gt;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="40">buf_len<pos:position pos:line="22" pos:column="47"/></name></name> <operator pos:line="22" pos:column="48">-<pos:position pos:line="22" pos:column="49"/></operator> <name><name pos:line="22" pos:column="50">conn<pos:position pos:line="22" pos:column="54"/></name><operator pos:line="22" pos:column="54">-&gt;<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="56">read_pos<pos:position pos:line="22" pos:column="64"/></name></name></expr></argument>,
                                 <argument><expr><name pos:line="23" pos:column="34">sizerequested<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="49"/></decl_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* Copy from our master buffer first if we have some unread data there*/</comment>
    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><name pos:line="26" pos:column="8">bytestocopy<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">&gt;<pos:position pos:line="26" pos:column="24"/></operator> <literal type="number" pos:line="26" pos:column="22">0<pos:position pos:line="26" pos:column="23"/></literal></expr>)<pos:position pos:line="26" pos:column="24"/></condition><then pos:line="26" pos:column="24"> <block pos:line="26" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">memcpy<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name pos:line="27" pos:column="14">buf<pos:position pos:line="27" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="19">conn<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">-&gt;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="25">master_buffer<pos:position pos:line="27" pos:column="38"/></name></name> <operator pos:line="27" pos:column="39">+<pos:position pos:line="27" pos:column="40"/></operator> <name><name pos:line="27" pos:column="41">conn<pos:position pos:line="27" pos:column="45"/></name><operator pos:line="27" pos:column="45">-&gt;<pos:position pos:line="27" pos:column="50"/></operator><name pos:line="27" pos:column="47">read_pos<pos:position pos:line="27" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="57">bytestocopy<pos:position pos:line="27" pos:column="68"/></name></expr></argument>)<pos:position pos:line="27" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="28" pos:column="7">conn<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">-&gt;<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="13">read_pos<pos:position pos:line="28" pos:column="21"/></name></name> <operator pos:line="28" pos:column="22">+=<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">bytestocopy<pos:position pos:line="28" pos:column="36"/></name></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="29" pos:column="7">conn<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">-&gt;<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="13">bits<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">.<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">stream_was_rewound<pos:position pos:line="29" pos:column="36"/></name></name> <operator pos:line="29" pos:column="37">=<pos:position pos:line="29" pos:column="38"/></operator> <name pos:line="29" pos:column="39">FALSE<pos:position pos:line="29" pos:column="44"/></name></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>

      <expr_stmt><expr><operator pos:line="31" pos:column="7">*<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">n<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">=<pos:position pos:line="31" pos:column="11"/></operator> <operator pos:line="31" pos:column="12">(<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="13">ssize_t<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">)<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">bytestocopy<pos:position pos:line="31" pos:column="32"/></name></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
      <return pos:line="32" pos:column="7">return <expr><name pos:line="32" pos:column="14">CURLE_OK<pos:position pos:line="32" pos:column="22"/></name></expr>;<pos:position pos:line="32" pos:column="23"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="34" pos:column="5">/* If we come here, it means that there is no data to read from the buffer,
     * so we read from the socket */</comment>
    <expr_stmt><expr><name pos:line="36" pos:column="5">bytesfromsocket<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">=<pos:position pos:line="36" pos:column="22"/></operator> <call><name pos:line="36" pos:column="23">CURLMIN<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">(<argument><expr><name pos:line="36" pos:column="31">sizerequested<pos:position pos:line="36" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="46">BUFSIZE<pos:position pos:line="36" pos:column="53"/></name> <operator pos:line="36" pos:column="54">*<pos:position pos:line="36" pos:column="55"/></operator> <sizeof pos:line="36" pos:column="56">sizeof <argument_list pos:line="36" pos:column="63">(<argument><expr><name pos:line="36" pos:column="64">char<pos:position pos:line="36" pos:column="68"/></name></expr></argument>)<pos:position pos:line="36" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">buffertofill<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <name><name pos:line="37" pos:column="20">conn<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">-&gt;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="26">master_buffer<pos:position pos:line="37" pos:column="39"/></name></name></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></then>
  <else pos:line="39" pos:column="3">else <block pos:line="39" pos:column="8">{
    <expr_stmt><expr><name pos:line="40" pos:column="5">bytesfromsocket<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <call><name pos:line="40" pos:column="23">CURLMIN<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><operator pos:line="40" pos:column="31">(<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="32">long<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">)<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="37">sizerequested<pos:position pos:line="40" pos:column="50"/></name></expr></argument>,
                              <argument><expr><ternary><condition><expr><name><name pos:line="41" pos:column="31">conn<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">-&gt;<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="37">data<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">-&gt;<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="43">set<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">.<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="47">buffer_size<pos:position pos:line="41" pos:column="58"/></name></name></expr> ?<pos:position pos:line="41" pos:column="60"/></condition><then pos:line="41" pos:column="60">
                              <expr><name><name pos:line="42" pos:column="31">conn<pos:position pos:line="42" pos:column="35"/></name><operator pos:line="42" pos:column="35">-&gt;<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="37">data<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">set<pos:position pos:line="42" pos:column="46"/></name><operator pos:line="42" pos:column="46">.<pos:position pos:line="42" pos:column="47"/></operator><name pos:line="42" pos:column="47">buffer_size<pos:position pos:line="42" pos:column="58"/></name></name></expr> <pos:position pos:line="42" pos:column="59"/></then><else pos:line="42" pos:column="59">: <expr><name pos:line="42" pos:column="61">BUFSIZE<pos:position pos:line="42" pos:column="68"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="42" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><name pos:line="43" pos:column="5">buffertofill<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <name pos:line="43" pos:column="20">buf<pos:position pos:line="43" pos:column="23"/></name></expr>;<pos:position pos:line="43" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="46" pos:column="3">nread<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">=<pos:position pos:line="46" pos:column="10"/></operator> <name><name pos:line="46" pos:column="11">conn<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">-&gt;<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="17">recv<pos:position pos:line="46" pos:column="21"/></name><index pos:line="46" pos:column="21">[<expr><name pos:line="46" pos:column="22">num<pos:position pos:line="46" pos:column="25"/></name></expr>]<pos:position pos:line="46" pos:column="26"/></index></name><operator pos:line="46" pos:column="26">(<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">conn<pos:position pos:line="46" pos:column="31"/></name><operator pos:line="46" pos:column="31">,<pos:position pos:line="46" pos:column="32"/></operator> <name pos:line="46" pos:column="33">num<pos:position pos:line="46" pos:column="36"/></name><operator pos:line="46" pos:column="36">,<pos:position pos:line="46" pos:column="37"/></operator> <name pos:line="46" pos:column="38">buffertofill<pos:position pos:line="46" pos:column="50"/></name><operator pos:line="46" pos:column="50">,<pos:position pos:line="46" pos:column="51"/></operator> <name pos:line="46" pos:column="52">bytesfromsocket<pos:position pos:line="46" pos:column="67"/></name><operator pos:line="46" pos:column="67">,<pos:position pos:line="46" pos:column="68"/></operator> <operator pos:line="46" pos:column="69">&amp;<pos:position pos:line="46" pos:column="74"/></operator><name pos:line="46" pos:column="70">curlcode<pos:position pos:line="46" pos:column="78"/></name><operator pos:line="46" pos:column="78">)<pos:position pos:line="46" pos:column="79"/></operator></expr>;<pos:position pos:line="46" pos:column="80"/></expr_stmt>
  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><name pos:line="47" pos:column="6">nread<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">&lt;<pos:position pos:line="47" pos:column="16"/></operator> <literal type="number" pos:line="47" pos:column="14">0<pos:position pos:line="47" pos:column="15"/></literal></expr>)<pos:position pos:line="47" pos:column="16"/></condition><then pos:line="47" pos:column="16">
    <block type="pseudo"><return pos:line="48" pos:column="5">return <expr><name pos:line="48" pos:column="12">curlcode<pos:position pos:line="48" pos:column="20"/></name></expr>;<pos:position pos:line="48" pos:column="21"/></return></block></then></if>

  <if pos:line="50" pos:column="3">if<condition pos:line="50" pos:column="5">(<expr><name pos:line="50" pos:column="6">pipelining<pos:position pos:line="50" pos:column="16"/></name></expr>)<pos:position pos:line="50" pos:column="17"/></condition><then pos:line="50" pos:column="17"> <block pos:line="50" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">memcpy<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><name pos:line="51" pos:column="12">buf<pos:position pos:line="51" pos:column="15"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="17">conn<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">-&gt;<pos:position pos:line="51" pos:column="26"/></operator><name pos:line="51" pos:column="23">master_buffer<pos:position pos:line="51" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="38">nread<pos:position pos:line="51" pos:column="43"/></name></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="52" pos:column="5">conn<pos:position pos:line="52" pos:column="9"/></name><operator pos:line="52" pos:column="9">-&gt;<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="11">buf_len<pos:position pos:line="52" pos:column="18"/></name></name> <operator pos:line="52" pos:column="19">=<pos:position pos:line="52" pos:column="20"/></operator> <name pos:line="52" pos:column="21">nread<pos:position pos:line="52" pos:column="26"/></name></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">conn<pos:position pos:line="53" pos:column="9"/></name><operator pos:line="53" pos:column="9">-&gt;<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="11">read_pos<pos:position pos:line="53" pos:column="19"/></name></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">nread<pos:position pos:line="53" pos:column="27"/></name></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="56" pos:column="3">*<pos:position pos:line="56" pos:column="4"/></operator><name pos:line="56" pos:column="4">n<pos:position pos:line="56" pos:column="5"/></name> <operator pos:line="56" pos:column="6">+=<pos:position pos:line="56" pos:column="8"/></operator> <name pos:line="56" pos:column="9">nread<pos:position pos:line="56" pos:column="14"/></name></expr>;<pos:position pos:line="56" pos:column="15"/></expr_stmt>

  <return pos:line="58" pos:column="3">return <expr><name pos:line="58" pos:column="10">CURLE_OK<pos:position pos:line="58" pos:column="18"/></name></expr>;<pos:position pos:line="58" pos:column="19"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
