<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_284_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_read<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name><name pos:line="1" pos:column="15">struct<pos:position pos:line="1" pos:column="21"/></name> <name pos:line="1" pos:column="22">connectdata<pos:position pos:line="1" pos:column="33"/></name></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">conn<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="2" pos:column="15">int<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">sockfd<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">buf<pos:position pos:line="3" pos:column="24"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="4" pos:column="15">size_t<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">buffersize<pos:position pos:line="4" pos:column="32"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="5" pos:column="15">ssize_t<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">n<pos:position pos:line="5" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="26"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">ssize_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">nread<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="8" pos:column="3">*<pos:position pos:line="8" pos:column="4"/></operator><name pos:line="8" pos:column="4">n<pos:position pos:line="8" pos:column="5"/></name><operator pos:line="8" pos:column="5">=<pos:position pos:line="8" pos:column="6"/></operator><literal type="number" pos:line="8" pos:column="6">0<pos:position pos:line="8" pos:column="7"/></literal></expr>;<pos:position pos:line="8" pos:column="8"/></expr_stmt> <comment type="block" pos:line="8" pos:column="9">/* reset amount to zero */</comment>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">USE_SSLEAY<pos:position pos:line="10" pos:column="18"/></name></cpp:ifdef>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name><name pos:line="11" pos:column="7">conn<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">ssl<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">use<pos:position pos:line="11" pos:column="20"/></name></name></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21"> <block pos:line="11" pos:column="22">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">nread<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">SSL_read<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name><name pos:line="12" pos:column="22">conn<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">ssl<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">.<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="32">handle<pos:position pos:line="12" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">buf<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">buffersize<pos:position pos:line="12" pos:column="55"/></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>

    <if pos:line="14" pos:column="5">if<condition pos:line="14" pos:column="7">(<expr><name pos:line="14" pos:column="8">nread<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">&lt;<pos:position pos:line="14" pos:column="18"/></operator> <literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18"> <block pos:line="14" pos:column="19">{
      <comment type="block" pos:line="15" pos:column="7">/* failed SSL_read */</comment>
      <decl_stmt><decl><type><name pos:line="16" pos:column="7">int<pos:position pos:line="16" pos:column="10"/></name></type> <name pos:line="16" pos:column="11">err<pos:position pos:line="16" pos:column="14"/></name> <init pos:line="16" pos:column="15">= <expr><call><name pos:line="16" pos:column="17">SSL_get_error<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name><name pos:line="16" pos:column="31">conn<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">-&gt;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="37">ssl<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">.<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="41">handle<pos:position pos:line="16" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="49">nread<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="56"/></decl_stmt>

      <switch pos:line="18" pos:column="7">switch<condition pos:line="18" pos:column="13">(<expr><name pos:line="18" pos:column="14">err<pos:position pos:line="18" pos:column="17"/></name></expr>)<pos:position pos:line="18" pos:column="18"/></condition> <block pos:line="18" pos:column="19">{
      <case pos:line="19" pos:column="7">case <expr><name pos:line="19" pos:column="12">SSL_ERROR_NONE<pos:position pos:line="19" pos:column="26"/></name></expr>:<pos:position pos:line="19" pos:column="27"/></case> <comment type="block" pos:line="19" pos:column="28">/* this is not an error */</comment>
      <case pos:line="20" pos:column="7">case <expr><name pos:line="20" pos:column="12">SSL_ERROR_ZERO_RETURN<pos:position pos:line="20" pos:column="33"/></name></expr>:<pos:position pos:line="20" pos:column="34"/></case> <comment type="block" pos:line="20" pos:column="35">/* no more data */</comment>
        <break pos:line="21" pos:column="9">break;<pos:position pos:line="21" pos:column="15"/></break>
      <case pos:line="22" pos:column="7">case <expr><name pos:line="22" pos:column="12">SSL_ERROR_WANT_READ<pos:position pos:line="22" pos:column="31"/></name></expr>:<pos:position pos:line="22" pos:column="32"/></case>
      <case pos:line="23" pos:column="7">case <expr><name pos:line="23" pos:column="12">SSL_ERROR_WANT_WRITE<pos:position pos:line="23" pos:column="32"/></name></expr>:<pos:position pos:line="23" pos:column="33"/></case>
        <comment type="block" pos:line="24" pos:column="9">/* there's data pending, re-invoke SSL_read() */</comment>
        <return pos:line="25" pos:column="9">return <expr><operator pos:line="25" pos:column="16">-<pos:position pos:line="25" pos:column="17"/></operator><literal type="number" pos:line="25" pos:column="17">1<pos:position pos:line="25" pos:column="18"/></literal></expr>;<pos:position pos:line="25" pos:column="19"/></return> <comment type="block" pos:line="25" pos:column="20">/* basicly EWOULDBLOCK */</comment>
      <default pos:line="26" pos:column="7">default:<pos:position pos:line="26" pos:column="15"/></default>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">failf<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><name><name pos:line="27" pos:column="15">conn<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">-&gt;<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="21">data<pos:position pos:line="27" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="27">"SSL read error: %d"<pos:position pos:line="27" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="49">err<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="54"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">CURLE_RECV_ERROR<pos:position pos:line="28" pos:column="32"/></name></expr>;<pos:position pos:line="28" pos:column="33"/></return>
      }<pos:position pos:line="29" pos:column="8"/></block></switch>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
  }<pos:position pos:line="31" pos:column="4"/></block></then>
  <else pos:line="32" pos:column="3">else <block pos:line="32" pos:column="8">{
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">KRB4<pos:position pos:line="34" pos:column="12"/></name></cpp:ifdef>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name><name pos:line="35" pos:column="8">conn<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">-&gt;<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="14">sec_complete<pos:position pos:line="35" pos:column="26"/></name></name></expr>)<pos:position pos:line="35" pos:column="27"/></condition><then pos:line="35" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="7">nread<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">Curl_sec_read<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><name pos:line="36" pos:column="29">conn<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">sockfd<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="43">buf<pos:position pos:line="36" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="48">buffersize<pos:position pos:line="36" pos:column="58"/></name></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></expr_stmt></block></then>
    <else pos:line="37" pos:column="5">else
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>
      <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="7">nread<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <call><name pos:line="39" pos:column="15">sread<pos:position pos:line="39" pos:column="20"/></name> <argument_list pos:line="39" pos:column="21">(<argument><expr><name pos:line="39" pos:column="22">sockfd<pos:position pos:line="39" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="30">buf<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">buffersize<pos:position pos:line="39" pos:column="45"/></name></expr></argument>)<pos:position pos:line="39" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="47"/></expr_stmt></block></else></if>

    <if pos:line="41" pos:column="5">if<condition pos:line="41" pos:column="7">(<expr><operator pos:line="41" pos:column="8">-<pos:position pos:line="41" pos:column="9"/></operator><literal type="number" pos:line="41" pos:column="9">1<pos:position pos:line="41" pos:column="10"/></literal> <operator pos:line="41" pos:column="11">==<pos:position pos:line="41" pos:column="13"/></operator> <name pos:line="41" pos:column="14">nread<pos:position pos:line="41" pos:column="19"/></name></expr>)<pos:position pos:line="41" pos:column="20"/></condition><then pos:line="41" pos:column="20"> <block pos:line="41" pos:column="21">{
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">WIN32<pos:position pos:line="42" pos:column="13"/></name></cpp:ifdef>
      <if pos:line="43" pos:column="7">if<condition pos:line="43" pos:column="9">(<expr><name pos:line="43" pos:column="10">WSAEWOULDBLOCK<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">==<pos:position pos:line="43" pos:column="27"/></operator> <call><name pos:line="43" pos:column="28">GetLastError<pos:position pos:line="43" pos:column="40"/></name><argument_list pos:line="43" pos:column="40">()<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="43"/></condition><then pos:line="43" pos:column="43">
<cpp:else pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">else<pos:position pos:line="44" pos:column="6"/></cpp:directive></cpp:else>
      <block type="pseudo"><if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><name pos:line="45" pos:column="10">EWOULDBLOCK<pos:position pos:line="45" pos:column="21"/></name> <operator pos:line="45" pos:column="22">==<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">errno<pos:position pos:line="45" pos:column="30"/></name></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31">
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><return pos:line="47" pos:column="9">return <expr><operator pos:line="47" pos:column="16">-<pos:position pos:line="47" pos:column="17"/></operator><literal type="number" pos:line="47" pos:column="17">1<pos:position pos:line="47" pos:column="18"/></literal></expr>;<pos:position pos:line="47" pos:column="19"/></return></block></then></if></block></then></if>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">ifdef<pos:position pos:line="50" pos:column="7"/></cpp:directive> <name pos:line="50" pos:column="8">USE_SSLEAY<pos:position pos:line="50" pos:column="18"/></name></cpp:ifdef>
  }<pos:position pos:line="51" pos:column="4"/></block></else></if>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="52" pos:column="8">/* USE_SSLEAY */</comment>
  <expr_stmt><expr><operator pos:line="53" pos:column="3">*<pos:position pos:line="53" pos:column="4"/></operator><name pos:line="53" pos:column="4">n<pos:position pos:line="53" pos:column="5"/></name> <operator pos:line="53" pos:column="6">=<pos:position pos:line="53" pos:column="7"/></operator> <name pos:line="53" pos:column="8">nread<pos:position pos:line="53" pos:column="13"/></name></expr>;<pos:position pos:line="53" pos:column="14"/></expr_stmt>
  <return pos:line="54" pos:column="3">return <expr><name pos:line="54" pos:column="10">CURLE_OK<pos:position pos:line="54" pos:column="18"/></name></expr>;<pos:position pos:line="54" pos:column="19"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
