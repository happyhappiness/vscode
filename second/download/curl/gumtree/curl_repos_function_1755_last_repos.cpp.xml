<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1755_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">Curl_dns_entry<pos:position pos:line="1" pos:column="29"/></name></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type>
<name pos:line="2" pos:column="1">fetch_addr<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name><name pos:line="2" pos:column="12">struct<pos:position pos:line="2" pos:column="18"/></name> <name pos:line="2" pos:column="19">connectdata<pos:position pos:line="2" pos:column="30"/></name></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">conn<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">char<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">hostname<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="4" pos:column="17">int<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">port<pos:position pos:line="4" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="26"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">entry_id<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><name pos:line="6" pos:column="20">NULL<pos:position pos:line="6" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">Curl_dns_entry<pos:position pos:line="7" pos:column="24"/></name></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type><name pos:line="7" pos:column="26">dns<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><name pos:line="7" pos:column="32">NULL<pos:position pos:line="7" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">entry_len<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">Curl_easy<pos:position pos:line="9" pos:column="19"/></name></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">data<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><name><name pos:line="9" pos:column="28">conn<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">-&gt;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="34">data<pos:position pos:line="9" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="39"/></decl_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Create an entry id, based upon the hostname and port */</comment>
  <expr_stmt><expr><name pos:line="12" pos:column="3">entry_id<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">create_hostcache_id<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">hostname<pos:position pos:line="12" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="44">port<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt>
  <comment type="block" pos:line="13" pos:column="3">/* If we can't create the entry id, fail */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">!<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">entry_id<pos:position pos:line="14" pos:column="15"/></name></expr>)<pos:position pos:line="14" pos:column="16"/></condition><then pos:line="14" pos:column="16">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">dns<pos:position pos:line="15" pos:column="15"/></name></expr>;<pos:position pos:line="15" pos:column="16"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="17" pos:column="3">entry_len<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">strlen<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">entry_id<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* See if its already in our dns cache */</comment>
  <expr_stmt><expr><name pos:line="20" pos:column="3">dns<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <call><name pos:line="20" pos:column="9">Curl_hash_pick<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name><name pos:line="20" pos:column="24">data<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-&gt;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="30">dns<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">.<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">hostcache<pos:position pos:line="20" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="45">entry_id<pos:position pos:line="20" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="55">entry_len<pos:position pos:line="20" pos:column="64"/></name> <operator pos:line="20" pos:column="65">+<pos:position pos:line="20" pos:column="66"/></operator> <literal type="number" pos:line="20" pos:column="67">1<pos:position pos:line="20" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt>

  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">dns<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">&amp;&amp;<pos:position pos:line="22" pos:column="20"/></operator> <operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name><name pos:line="22" pos:column="14">data<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">set<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">.<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">dns_cache_timeout<pos:position pos:line="22" pos:column="41"/></name></name> <operator pos:line="22" pos:column="42">!=<pos:position pos:line="22" pos:column="44"/></operator> <operator pos:line="22" pos:column="45">-<pos:position pos:line="22" pos:column="46"/></operator><literal type="number" pos:line="22" pos:column="46">1<pos:position pos:line="22" pos:column="47"/></literal><operator pos:line="22" pos:column="47">)<pos:position pos:line="22" pos:column="48"/></operator></expr>)<pos:position pos:line="22" pos:column="49"/></condition><then pos:line="22" pos:column="49"> <block pos:line="22" pos:column="50">{
    <comment type="block" pos:line="23" pos:column="5">/* See whether the returned entry is stale. Done before we release lock */</comment>
    <decl_stmt><decl><type><name><name pos:line="24" pos:column="5">struct<pos:position pos:line="24" pos:column="11"/></name> <name pos:line="24" pos:column="12">hostcache_prune_data<pos:position pos:line="24" pos:column="32"/></name></name></type> <name pos:line="24" pos:column="33">user<pos:position pos:line="24" pos:column="37"/></name></decl>;<pos:position pos:line="24" pos:column="38"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">time<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><operator pos:line="26" pos:column="10">&amp;<pos:position pos:line="26" pos:column="15"/></operator><name><name pos:line="26" pos:column="11">user<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">.<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">now<pos:position pos:line="26" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">user<pos:position pos:line="27" pos:column="9"/></name><operator pos:line="27" pos:column="9">.<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">cache_timeout<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <name><name pos:line="27" pos:column="26">data<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">-&gt;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="32">set<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">.<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="36">dns_cache_timeout<pos:position pos:line="27" pos:column="53"/></name></name></expr>;<pos:position pos:line="27" pos:column="54"/></expr_stmt>

    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><call><name pos:line="29" pos:column="8">hostcache_timestamp_remove<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><operator pos:line="29" pos:column="35">&amp;<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="36">user<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">dns<pos:position pos:line="29" pos:column="45"/></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="47"/></condition><then pos:line="29" pos:column="47"> <block pos:line="29" pos:column="48">{
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">infof<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">data<pos:position pos:line="30" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="19">"Hostname in DNS cache was stale, zapped\n"<pos:position pos:line="30" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">dns<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <name pos:line="31" pos:column="13">NULL<pos:position pos:line="31" pos:column="17"/></name></expr>;<pos:position pos:line="31" pos:column="18"/></expr_stmt> <comment type="block" pos:line="31" pos:column="19">/* the memory deallocation is being handled by the hash */</comment>
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">Curl_hash_delete<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name><name pos:line="32" pos:column="24">data<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">-&gt;<pos:position pos:line="32" pos:column="33"/></operator><name pos:line="32" pos:column="30">dns<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">.<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="34">hostcache<pos:position pos:line="32" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="45">entry_id<pos:position pos:line="32" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="55">entry_len<pos:position pos:line="32" pos:column="64"/></name> <operator pos:line="32" pos:column="65">+<pos:position pos:line="32" pos:column="66"/></operator> <literal type="number" pos:line="32" pos:column="67">1<pos:position pos:line="32" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="36" pos:column="3">/* free the allocated entry_id again */</comment>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">free<pos:position pos:line="37" pos:column="7"/></name><argument_list pos:line="37" pos:column="7">(<argument><expr><name pos:line="37" pos:column="8">entry_id<pos:position pos:line="37" pos:column="16"/></name></expr></argument>)<pos:position pos:line="37" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="18"/></expr_stmt>

  <return pos:line="39" pos:column="3">return <expr><name pos:line="39" pos:column="10">dns<pos:position pos:line="39" pos:column="13"/></name></expr>;<pos:position pos:line="39" pos:column="14"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
