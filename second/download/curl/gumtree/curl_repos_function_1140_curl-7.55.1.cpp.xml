<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1140_curl-7.55.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">imap_statemach_act<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">CURLE_OK<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">sock<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name><name pos:line="4" pos:column="24">conn<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">sock<pos:position pos:line="4" pos:column="34"/></name><index pos:line="4" pos:column="34">[<expr><name pos:line="4" pos:column="35">FIRSTSOCKET<pos:position pos:line="4" pos:column="46"/></name></expr>]<pos:position pos:line="4" pos:column="47"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">imapcode<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">imap_conn<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">imapc<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name><name pos:line="6" pos:column="30">conn<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">-&gt;<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="36">proto<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">.<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="42">imapc<pos:position pos:line="6" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">pingpong<pos:position pos:line="7" pos:column="18"/></name></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">pp<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><operator pos:line="7" pos:column="25">&amp;<pos:position pos:line="7" pos:column="30"/></operator><name><name pos:line="7" pos:column="26">imapc<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">pp<pos:position pos:line="7" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">nread<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* Busy upgrading the connection; right now all I/O is SSL/TLS, not IMAP */</comment>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name><name pos:line="11" pos:column="6">imapc<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">state<pos:position pos:line="11" pos:column="18"/></name></name> <operator pos:line="11" pos:column="19">==<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">IMAP_UPGRADETLS<pos:position pos:line="11" pos:column="37"/></name></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><call><name pos:line="12" pos:column="12">imap_perform_upgrade_tls<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><name pos:line="12" pos:column="37">conn<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></return></block></then></if>

  <comment type="block" pos:line="14" pos:column="3">/* Flush any data that needs to be sent */</comment>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name><name pos:line="15" pos:column="6">pp<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">sendleft<pos:position pos:line="15" pos:column="18"/></name></name></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><call><name pos:line="16" pos:column="12">Curl_pp_flushsend<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">pp<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></return></block></then></if>

  <do pos:line="18" pos:column="3">do <block pos:line="18" pos:column="6">{
    <comment type="block" pos:line="19" pos:column="5">/* Read the response from the server */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">result<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">Curl_pp_readresp<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">sock<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">pp<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="41">&amp;<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="42">imapcode<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="52">&amp;<pos:position pos:line="20" pos:column="57"/></operator><name pos:line="20" pos:column="53">nread<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><name pos:line="21" pos:column="8">result<pos:position pos:line="21" pos:column="14"/></name></expr>)<pos:position pos:line="21" pos:column="15"/></condition><then pos:line="21" pos:column="15">
      <block type="pseudo"><return pos:line="22" pos:column="7">return <expr><name pos:line="22" pos:column="14">result<pos:position pos:line="22" pos:column="20"/></name></expr>;<pos:position pos:line="22" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/* Was there an error parsing the response line? */</comment>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">imapcode<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">==<pos:position pos:line="25" pos:column="19"/></operator> <operator pos:line="25" pos:column="20">-<pos:position pos:line="25" pos:column="21"/></operator><literal type="number" pos:line="25" pos:column="21">1<pos:position pos:line="25" pos:column="22"/></literal></expr>)<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23">
      <block type="pseudo"><return pos:line="26" pos:column="7">return <expr><name pos:line="26" pos:column="14">CURLE_WEIRD_SERVER_REPLY<pos:position pos:line="26" pos:column="38"/></name></expr>;<pos:position pos:line="26" pos:column="39"/></return></block></then></if>

    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><operator pos:line="28" pos:column="8">!<pos:position pos:line="28" pos:column="9"/></operator><name pos:line="28" pos:column="9">imapcode<pos:position pos:line="28" pos:column="17"/></name></expr>)<pos:position pos:line="28" pos:column="18"/></condition><then pos:line="28" pos:column="18">
      <block type="pseudo"><break pos:line="29" pos:column="7">break;<pos:position pos:line="29" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="31" pos:column="5">/* We have now received a full IMAP server response */</comment>
    <switch pos:line="32" pos:column="5">switch<condition pos:line="32" pos:column="11">(<expr><name><name pos:line="32" pos:column="12">imapc<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">-&gt;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="19">state<pos:position pos:line="32" pos:column="24"/></name></name></expr>)<pos:position pos:line="32" pos:column="25"/></condition> <block pos:line="32" pos:column="26">{
    <case pos:line="33" pos:column="5">case <expr><name pos:line="33" pos:column="10">IMAP_SERVERGREET<pos:position pos:line="33" pos:column="26"/></name></expr>:<pos:position pos:line="33" pos:column="27"/></case>
      <expr_stmt><expr><name pos:line="34" pos:column="7">result<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <call><name pos:line="34" pos:column="16">imap_state_servergreet_resp<pos:position pos:line="34" pos:column="43"/></name><argument_list pos:line="34" pos:column="43">(<argument><expr><name pos:line="34" pos:column="44">conn<pos:position pos:line="34" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="50">imapcode<pos:position pos:line="34" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="60">imapc<pos:position pos:line="34" pos:column="65"/></name><operator pos:line="34" pos:column="65">-&gt;<pos:position pos:line="34" pos:column="70"/></operator><name pos:line="34" pos:column="67">state<pos:position pos:line="34" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="74"/></expr_stmt>
      <break pos:line="35" pos:column="7">break;<pos:position pos:line="35" pos:column="13"/></break>

    <case pos:line="37" pos:column="5">case <expr><name pos:line="37" pos:column="10">IMAP_CAPABILITY<pos:position pos:line="37" pos:column="25"/></name></expr>:<pos:position pos:line="37" pos:column="26"/></case>
      <expr_stmt><expr><name pos:line="38" pos:column="7">result<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <call><name pos:line="38" pos:column="16">imap_state_capability_resp<pos:position pos:line="38" pos:column="42"/></name><argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">conn<pos:position pos:line="38" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="49">imapcode<pos:position pos:line="38" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="59">imapc<pos:position pos:line="38" pos:column="64"/></name><operator pos:line="38" pos:column="64">-&gt;<pos:position pos:line="38" pos:column="69"/></operator><name pos:line="38" pos:column="66">state<pos:position pos:line="38" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></expr_stmt>
      <break pos:line="39" pos:column="7">break;<pos:position pos:line="39" pos:column="13"/></break>

    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">IMAP_STARTTLS<pos:position pos:line="41" pos:column="23"/></name></expr>:<pos:position pos:line="41" pos:column="24"/></case>
      <expr_stmt><expr><name pos:line="42" pos:column="7">result<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">=<pos:position pos:line="42" pos:column="15"/></operator> <call><name pos:line="42" pos:column="16">imap_state_starttls_resp<pos:position pos:line="42" pos:column="40"/></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">conn<pos:position pos:line="42" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="47">imapcode<pos:position pos:line="42" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="57">imapc<pos:position pos:line="42" pos:column="62"/></name><operator pos:line="42" pos:column="62">-&gt;<pos:position pos:line="42" pos:column="67"/></operator><name pos:line="42" pos:column="64">state<pos:position pos:line="42" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="71"/></expr_stmt>
      <break pos:line="43" pos:column="7">break;<pos:position pos:line="43" pos:column="13"/></break>

    <case pos:line="45" pos:column="5">case <expr><name pos:line="45" pos:column="10">IMAP_AUTHENTICATE<pos:position pos:line="45" pos:column="27"/></name></expr>:<pos:position pos:line="45" pos:column="28"/></case>
      <expr_stmt><expr><name pos:line="46" pos:column="7">result<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <call><name pos:line="46" pos:column="16">imap_state_auth_resp<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">(<argument><expr><name pos:line="46" pos:column="37">conn<pos:position pos:line="46" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="43">imapcode<pos:position pos:line="46" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="53">imapc<pos:position pos:line="46" pos:column="58"/></name><operator pos:line="46" pos:column="58">-&gt;<pos:position pos:line="46" pos:column="63"/></operator><name pos:line="46" pos:column="60">state<pos:position pos:line="46" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="67"/></expr_stmt>
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>

    <case pos:line="49" pos:column="5">case <expr><name pos:line="49" pos:column="10">IMAP_LOGIN<pos:position pos:line="49" pos:column="20"/></name></expr>:<pos:position pos:line="49" pos:column="21"/></case>
      <expr_stmt><expr><name pos:line="50" pos:column="7">result<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <call><name pos:line="50" pos:column="16">imap_state_login_resp<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name pos:line="50" pos:column="38">conn<pos:position pos:line="50" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="44">imapcode<pos:position pos:line="50" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="54">imapc<pos:position pos:line="50" pos:column="59"/></name><operator pos:line="50" pos:column="59">-&gt;<pos:position pos:line="50" pos:column="64"/></operator><name pos:line="50" pos:column="61">state<pos:position pos:line="50" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="68"/></expr_stmt>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>

    <case pos:line="53" pos:column="5">case <expr><name pos:line="53" pos:column="10">IMAP_LIST<pos:position pos:line="53" pos:column="19"/></name></expr>:<pos:position pos:line="53" pos:column="20"/></case>
      <expr_stmt><expr><name pos:line="54" pos:column="7">result<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <call><name pos:line="54" pos:column="16">imap_state_listsearch_resp<pos:position pos:line="54" pos:column="42"/></name><argument_list pos:line="54" pos:column="42">(<argument><expr><name pos:line="54" pos:column="43">conn<pos:position pos:line="54" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="49">imapcode<pos:position pos:line="54" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="59">imapc<pos:position pos:line="54" pos:column="64"/></name><operator pos:line="54" pos:column="64">-&gt;<pos:position pos:line="54" pos:column="69"/></operator><name pos:line="54" pos:column="66">state<pos:position pos:line="54" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="73"/></expr_stmt>
      <break pos:line="55" pos:column="7">break;<pos:position pos:line="55" pos:column="13"/></break>

    <case pos:line="57" pos:column="5">case <expr><name pos:line="57" pos:column="10">IMAP_SELECT<pos:position pos:line="57" pos:column="21"/></name></expr>:<pos:position pos:line="57" pos:column="22"/></case>
      <expr_stmt><expr><name pos:line="58" pos:column="7">result<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">=<pos:position pos:line="58" pos:column="15"/></operator> <call><name pos:line="58" pos:column="16">imap_state_select_resp<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">(<argument><expr><name pos:line="58" pos:column="39">conn<pos:position pos:line="58" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="45">imapcode<pos:position pos:line="58" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="55">imapc<pos:position pos:line="58" pos:column="60"/></name><operator pos:line="58" pos:column="60">-&gt;<pos:position pos:line="58" pos:column="65"/></operator><name pos:line="58" pos:column="62">state<pos:position pos:line="58" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="69"/></expr_stmt>
      <break pos:line="59" pos:column="7">break;<pos:position pos:line="59" pos:column="13"/></break>

    <case pos:line="61" pos:column="5">case <expr><name pos:line="61" pos:column="10">IMAP_FETCH<pos:position pos:line="61" pos:column="20"/></name></expr>:<pos:position pos:line="61" pos:column="21"/></case>
      <expr_stmt><expr><name pos:line="62" pos:column="7">result<pos:position pos:line="62" pos:column="13"/></name> <operator pos:line="62" pos:column="14">=<pos:position pos:line="62" pos:column="15"/></operator> <call><name pos:line="62" pos:column="16">imap_state_fetch_resp<pos:position pos:line="62" pos:column="37"/></name><argument_list pos:line="62" pos:column="37">(<argument><expr><name pos:line="62" pos:column="38">conn<pos:position pos:line="62" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="44">imapcode<pos:position pos:line="62" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="54">imapc<pos:position pos:line="62" pos:column="59"/></name><operator pos:line="62" pos:column="59">-&gt;<pos:position pos:line="62" pos:column="64"/></operator><name pos:line="62" pos:column="61">state<pos:position pos:line="62" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="68"/></expr_stmt>
      <break pos:line="63" pos:column="7">break;<pos:position pos:line="63" pos:column="13"/></break>

    <case pos:line="65" pos:column="5">case <expr><name pos:line="65" pos:column="10">IMAP_FETCH_FINAL<pos:position pos:line="65" pos:column="26"/></name></expr>:<pos:position pos:line="65" pos:column="27"/></case>
      <expr_stmt><expr><name pos:line="66" pos:column="7">result<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <call><name pos:line="66" pos:column="16">imap_state_fetch_final_resp<pos:position pos:line="66" pos:column="43"/></name><argument_list pos:line="66" pos:column="43">(<argument><expr><name pos:line="66" pos:column="44">conn<pos:position pos:line="66" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="50">imapcode<pos:position pos:line="66" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="60">imapc<pos:position pos:line="66" pos:column="65"/></name><operator pos:line="66" pos:column="65">-&gt;<pos:position pos:line="66" pos:column="70"/></operator><name pos:line="66" pos:column="67">state<pos:position pos:line="66" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="74"/></expr_stmt>
      <break pos:line="67" pos:column="7">break;<pos:position pos:line="67" pos:column="13"/></break>

    <case pos:line="69" pos:column="5">case <expr><name pos:line="69" pos:column="10">IMAP_APPEND<pos:position pos:line="69" pos:column="21"/></name></expr>:<pos:position pos:line="69" pos:column="22"/></case>
      <expr_stmt><expr><name pos:line="70" pos:column="7">result<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">=<pos:position pos:line="70" pos:column="15"/></operator> <call><name pos:line="70" pos:column="16">imap_state_append_resp<pos:position pos:line="70" pos:column="38"/></name><argument_list pos:line="70" pos:column="38">(<argument><expr><name pos:line="70" pos:column="39">conn<pos:position pos:line="70" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="45">imapcode<pos:position pos:line="70" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="55">imapc<pos:position pos:line="70" pos:column="60"/></name><operator pos:line="70" pos:column="60">-&gt;<pos:position pos:line="70" pos:column="65"/></operator><name pos:line="70" pos:column="62">state<pos:position pos:line="70" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="69"/></expr_stmt>
      <break pos:line="71" pos:column="7">break;<pos:position pos:line="71" pos:column="13"/></break>

    <case pos:line="73" pos:column="5">case <expr><name pos:line="73" pos:column="10">IMAP_APPEND_FINAL<pos:position pos:line="73" pos:column="27"/></name></expr>:<pos:position pos:line="73" pos:column="28"/></case>
      <expr_stmt><expr><name pos:line="74" pos:column="7">result<pos:position pos:line="74" pos:column="13"/></name> <operator pos:line="74" pos:column="14">=<pos:position pos:line="74" pos:column="15"/></operator> <call><name pos:line="74" pos:column="16">imap_state_append_final_resp<pos:position pos:line="74" pos:column="44"/></name><argument_list pos:line="74" pos:column="44">(<argument><expr><name pos:line="74" pos:column="45">conn<pos:position pos:line="74" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="51">imapcode<pos:position pos:line="74" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="61">imapc<pos:position pos:line="74" pos:column="66"/></name><operator pos:line="74" pos:column="66">-&gt;<pos:position pos:line="74" pos:column="71"/></operator><name pos:line="74" pos:column="68">state<pos:position pos:line="74" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="75"/></expr_stmt>
      <break pos:line="75" pos:column="7">break;<pos:position pos:line="75" pos:column="13"/></break>

    <case pos:line="77" pos:column="5">case <expr><name pos:line="77" pos:column="10">IMAP_SEARCH<pos:position pos:line="77" pos:column="21"/></name></expr>:<pos:position pos:line="77" pos:column="22"/></case>
      <expr_stmt><expr><name pos:line="78" pos:column="7">result<pos:position pos:line="78" pos:column="13"/></name> <operator pos:line="78" pos:column="14">=<pos:position pos:line="78" pos:column="15"/></operator> <call><name pos:line="78" pos:column="16">imap_state_listsearch_resp<pos:position pos:line="78" pos:column="42"/></name><argument_list pos:line="78" pos:column="42">(<argument><expr><name pos:line="78" pos:column="43">conn<pos:position pos:line="78" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="49">imapcode<pos:position pos:line="78" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="59">imapc<pos:position pos:line="78" pos:column="64"/></name><operator pos:line="78" pos:column="64">-&gt;<pos:position pos:line="78" pos:column="69"/></operator><name pos:line="78" pos:column="66">state<pos:position pos:line="78" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="73"/></expr_stmt>
      <break pos:line="79" pos:column="7">break;<pos:position pos:line="79" pos:column="13"/></break>

    <case pos:line="81" pos:column="5">case <expr><name pos:line="81" pos:column="10">IMAP_LOGOUT<pos:position pos:line="81" pos:column="21"/></name></expr>:<pos:position pos:line="81" pos:column="22"/></case>
      <comment type="block" pos:line="82" pos:column="7">/* fallthrough, just stop! */</comment>
    <default pos:line="83" pos:column="5">default:<pos:position pos:line="83" pos:column="13"/></default>
      <comment type="block" pos:line="84" pos:column="7">/* internal error */</comment>
      <expr_stmt><expr><call><name pos:line="85" pos:column="7">state<pos:position pos:line="85" pos:column="12"/></name><argument_list pos:line="85" pos:column="12">(<argument><expr><name pos:line="85" pos:column="13">conn<pos:position pos:line="85" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="19">IMAP_STOP<pos:position pos:line="85" pos:column="28"/></name></expr></argument>)<pos:position pos:line="85" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="30"/></expr_stmt>
      <break pos:line="86" pos:column="7">break;<pos:position pos:line="86" pos:column="13"/></break>
    }<pos:position pos:line="87" pos:column="6"/></block></switch>
  }<pos:position pos:line="88" pos:column="4"/></block> while<condition pos:line="88" pos:column="10">(<expr><operator pos:line="88" pos:column="11">!<pos:position pos:line="88" pos:column="12"/></operator><name pos:line="88" pos:column="12">result<pos:position pos:line="88" pos:column="18"/></name> <operator pos:line="88" pos:column="19">&amp;&amp;<pos:position pos:line="88" pos:column="29"/></operator> <name><name pos:line="88" pos:column="22">imapc<pos:position pos:line="88" pos:column="27"/></name><operator pos:line="88" pos:column="27">-&gt;<pos:position pos:line="88" pos:column="32"/></operator><name pos:line="88" pos:column="29">state<pos:position pos:line="88" pos:column="34"/></name></name> <operator pos:line="88" pos:column="35">!=<pos:position pos:line="88" pos:column="37"/></operator> <name pos:line="88" pos:column="38">IMAP_STOP<pos:position pos:line="88" pos:column="47"/></name> <operator pos:line="88" pos:column="48">&amp;&amp;<pos:position pos:line="88" pos:column="58"/></operator> <call><name pos:line="88" pos:column="51">Curl_pp_moredata<pos:position pos:line="88" pos:column="67"/></name><argument_list pos:line="88" pos:column="67">(<argument><expr><name pos:line="88" pos:column="68">pp<pos:position pos:line="88" pos:column="70"/></name></expr></argument>)<pos:position pos:line="88" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="72"/></condition>;<pos:position pos:line="88" pos:column="73"/></do>

  <return pos:line="90" pos:column="3">return <expr><name pos:line="90" pos:column="10">result<pos:position pos:line="90" pos:column="16"/></name></expr>;<pos:position pos:line="90" pos:column="17"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
