<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1027_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_urldecode<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">Curl_easy<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">data<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
                        <parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">string<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">size_t<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">length<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="3" pos:column="25">char<pos:position pos:line="3" pos:column="29"/></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier><modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">ostring<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="41">size_t<pos:position pos:line="3" pos:column="47"/></name> <modifier pos:line="3" pos:column="48">*<pos:position pos:line="3" pos:column="49"/></modifier></type><name pos:line="3" pos:column="49">olen<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="4" pos:column="25">bool<pos:position pos:line="4" pos:column="29"/></name></type> <name pos:line="4" pos:column="30">reject_ctrl<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="42"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">alloc<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><operator pos:line="6" pos:column="18">(<pos:position pos:line="6" pos:column="19"/></operator><ternary><condition><expr><name pos:line="6" pos:column="19">length<pos:position pos:line="6" pos:column="25"/></name></expr>?<pos:position pos:line="6" pos:column="26"/></condition><then><expr><name pos:line="6" pos:column="26">length<pos:position pos:line="6" pos:column="32"/></name></expr></then><else pos:line="6" pos:column="32">:<expr><call><name pos:line="6" pos:column="33">strlen<pos:position pos:line="6" pos:column="39"/></name><argument_list pos:line="6" pos:column="39">(<argument><expr><name pos:line="6" pos:column="40">string<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr></else></ternary><operator pos:line="6" pos:column="47">)<pos:position pos:line="6" pos:column="48"/></operator> <operator pos:line="6" pos:column="49">+<pos:position pos:line="6" pos:column="50"/></operator> <literal type="number" pos:line="6" pos:column="51">1<pos:position pos:line="6" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="53"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">ns<pos:position pos:line="7" pos:column="11"/></name> <init pos:line="7" pos:column="12">= <expr><call><name pos:line="7" pos:column="14">malloc<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">alloc<pos:position pos:line="7" pos:column="26"/></name></expr></argument>)<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">unsigned<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">char<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">in<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">strindex<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">unsigned<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">long<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">hex<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CURLcode<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">result<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><operator pos:line="13" pos:column="6">!<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">ns<pos:position pos:line="13" pos:column="9"/></name></expr>)<pos:position pos:line="13" pos:column="10"/></condition><then pos:line="13" pos:column="10">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="14" pos:column="31"/></name></expr>;<pos:position pos:line="14" pos:column="32"/></return></block></then></if>

  <while pos:line="16" pos:column="3">while<condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">--<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">alloc<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">&gt;<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="19">0<pos:position pos:line="16" pos:column="20"/></literal></expr>)<pos:position pos:line="16" pos:column="21"/></condition> <block pos:line="16" pos:column="22">{
    <expr_stmt><expr><name pos:line="17" pos:column="5">in<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <operator pos:line="17" pos:column="10">*<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">string<pos:position pos:line="17" pos:column="17"/></name></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt>
    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">(<expr><operator pos:line="18" pos:column="8">(<pos:position pos:line="18" pos:column="9"/></operator><literal type="char" pos:line="18" pos:column="9">'%'<pos:position pos:line="18" pos:column="12"/></literal> <operator pos:line="18" pos:column="13">==<pos:position pos:line="18" pos:column="15"/></operator> <name pos:line="18" pos:column="16">in<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">)<pos:position pos:line="18" pos:column="19"/></operator> <operator pos:line="18" pos:column="20">&amp;&amp;<pos:position pos:line="18" pos:column="30"/></operator> <operator pos:line="18" pos:column="23">(<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">alloc<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">&gt;<pos:position pos:line="18" pos:column="34"/></operator> <literal type="number" pos:line="18" pos:column="32">2<pos:position pos:line="18" pos:column="33"/></literal><operator pos:line="18" pos:column="33">)<pos:position pos:line="18" pos:column="34"/></operator> <operator pos:line="18" pos:column="35">&amp;&amp;<pos:position pos:line="18" pos:column="45"/></operator>
       <call><name pos:line="19" pos:column="8">ISXDIGIT<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><name><name pos:line="19" pos:column="17">string<pos:position pos:line="19" pos:column="23"/></name><index pos:line="19" pos:column="23">[<expr><literal type="number" pos:line="19" pos:column="24">1<pos:position pos:line="19" pos:column="25"/></literal></expr>]<pos:position pos:line="19" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="27"/></argument_list></call> <operator pos:line="19" pos:column="28">&amp;&amp;<pos:position pos:line="19" pos:column="38"/></operator> <call><name pos:line="19" pos:column="31">ISXDIGIT<pos:position pos:line="19" pos:column="39"/></name><argument_list pos:line="19" pos:column="39">(<argument><expr><name><name pos:line="19" pos:column="40">string<pos:position pos:line="19" pos:column="46"/></name><index pos:line="19" pos:column="46">[<expr><literal type="number" pos:line="19" pos:column="47">2<pos:position pos:line="19" pos:column="48"/></literal></expr>]<pos:position pos:line="19" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="51"/></condition><then pos:line="19" pos:column="51"> <block pos:line="19" pos:column="52">{
      <comment type="block" pos:line="20" pos:column="7">/* this is two hexadecimal digits following a '%' */</comment>
      <decl_stmt><decl><type><name pos:line="21" pos:column="7">char<pos:position pos:line="21" pos:column="11"/></name></type> <name><name pos:line="21" pos:column="12">hexstr<pos:position pos:line="21" pos:column="18"/></name><index pos:line="21" pos:column="18">[<expr><literal type="number" pos:line="21" pos:column="19">3<pos:position pos:line="21" pos:column="20"/></literal></expr>]<pos:position pos:line="21" pos:column="21"/></index></name></decl>;<pos:position pos:line="21" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="22" pos:column="7">char<pos:position pos:line="22" pos:column="11"/></name> <modifier pos:line="22" pos:column="12">*<pos:position pos:line="22" pos:column="13"/></modifier></type><name pos:line="22" pos:column="13">ptr<pos:position pos:line="22" pos:column="16"/></name></decl>;<pos:position pos:line="22" pos:column="17"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="23" pos:column="7">hexstr<pos:position pos:line="23" pos:column="13"/></name><index pos:line="23" pos:column="13">[<expr><literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr>]<pos:position pos:line="23" pos:column="16"/></index></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name><name pos:line="23" pos:column="19">string<pos:position pos:line="23" pos:column="25"/></name><index pos:line="23" pos:column="25">[<expr><literal type="number" pos:line="23" pos:column="26">1<pos:position pos:line="23" pos:column="27"/></literal></expr>]<pos:position pos:line="23" pos:column="28"/></index></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="24" pos:column="7">hexstr<pos:position pos:line="24" pos:column="13"/></name><index pos:line="24" pos:column="13">[<expr><literal type="number" pos:line="24" pos:column="14">1<pos:position pos:line="24" pos:column="15"/></literal></expr>]<pos:position pos:line="24" pos:column="16"/></index></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <name><name pos:line="24" pos:column="19">string<pos:position pos:line="24" pos:column="25"/></name><index pos:line="24" pos:column="25">[<expr><literal type="number" pos:line="24" pos:column="26">2<pos:position pos:line="24" pos:column="27"/></literal></expr>]<pos:position pos:line="24" pos:column="28"/></index></name></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="25" pos:column="7">hexstr<pos:position pos:line="25" pos:column="13"/></name><index pos:line="25" pos:column="13">[<expr><literal type="number" pos:line="25" pos:column="14">2<pos:position pos:line="25" pos:column="15"/></literal></expr>]<pos:position pos:line="25" pos:column="16"/></index></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <literal type="number" pos:line="25" pos:column="19">0<pos:position pos:line="25" pos:column="20"/></literal></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt>

      <expr_stmt><expr><name pos:line="27" pos:column="7">hex<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <call><name pos:line="27" pos:column="13">strtoul<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">hexstr<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="29">&amp;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="30">ptr<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="35">16<pos:position pos:line="27" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>

      <expr_stmt><expr><name pos:line="29" pos:column="7">in<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator> <call><name pos:line="29" pos:column="12">curlx_ultouc<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">hex<pos:position pos:line="29" pos:column="28"/></name></expr></argument>)<pos:position pos:line="29" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="30"/></expr_stmt> <comment type="block" pos:line="29" pos:column="31">/* this long is never bigger than 255 anyway */</comment>

      <expr_stmt><expr><name pos:line="31" pos:column="7">result<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <call><name pos:line="31" pos:column="16">Curl_convert_from_network<pos:position pos:line="31" pos:column="41"/></name><argument_list pos:line="31" pos:column="41">(<argument><expr><name pos:line="31" pos:column="42">data<pos:position pos:line="31" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="48">(<pos:position pos:line="31" pos:column="49"/></operator><name pos:line="31" pos:column="49">char<pos:position pos:line="31" pos:column="53"/></name> <operator pos:line="31" pos:column="54">*<pos:position pos:line="31" pos:column="55"/></operator><operator pos:line="31" pos:column="55">)<pos:position pos:line="31" pos:column="56"/></operator><operator pos:line="31" pos:column="56">&amp;<pos:position pos:line="31" pos:column="61"/></operator><name pos:line="31" pos:column="57">in<pos:position pos:line="31" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="61">1<pos:position pos:line="31" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="64"/></expr_stmt>
      <if pos:line="32" pos:column="7">if<condition pos:line="32" pos:column="9">(<expr><name pos:line="32" pos:column="10">result<pos:position pos:line="32" pos:column="16"/></name></expr>)<pos:position pos:line="32" pos:column="17"/></condition><then pos:line="32" pos:column="17"> <block pos:line="32" pos:column="18">{
        <comment type="block" pos:line="33" pos:column="9">/* Curl_convert_from_network calls failf if unsuccessful */</comment>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">free<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">ns<pos:position pos:line="34" pos:column="16"/></name></expr></argument>)<pos:position pos:line="34" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="18"/></expr_stmt>
        <return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">result<pos:position pos:line="35" pos:column="22"/></name></expr>;<pos:position pos:line="35" pos:column="23"/></return>
      }<pos:position pos:line="36" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="38" pos:column="7">string<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">+=<pos:position pos:line="38" pos:column="16"/></operator> <literal type="number" pos:line="38" pos:column="17">2<pos:position pos:line="38" pos:column="18"/></literal></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><name pos:line="39" pos:column="7">alloc<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">-=<pos:position pos:line="39" pos:column="15"/></operator> <literal type="number" pos:line="39" pos:column="16">2<pos:position pos:line="39" pos:column="17"/></literal></expr>;<pos:position pos:line="39" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <if pos:line="42" pos:column="5">if<condition pos:line="42" pos:column="7">(<expr><name pos:line="42" pos:column="8">reject_ctrl<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">&amp;&amp;<pos:position pos:line="42" pos:column="30"/></operator> <operator pos:line="42" pos:column="23">(<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="24">in<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">&lt;<pos:position pos:line="42" pos:column="31"/></operator> <literal type="number" pos:line="42" pos:column="29">0x20<pos:position pos:line="42" pos:column="33"/></literal><operator pos:line="42" pos:column="33">)<pos:position pos:line="42" pos:column="34"/></operator></expr>)<pos:position pos:line="42" pos:column="35"/></condition><then pos:line="42" pos:column="35"> <block pos:line="42" pos:column="36">{
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">free<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><name pos:line="43" pos:column="12">ns<pos:position pos:line="43" pos:column="14"/></name></expr></argument>)<pos:position pos:line="43" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="16"/></expr_stmt>
      <return pos:line="44" pos:column="7">return <expr><name pos:line="44" pos:column="14">CURLE_URL_MALFORMAT<pos:position pos:line="44" pos:column="33"/></name></expr>;<pos:position pos:line="44" pos:column="34"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="47" pos:column="5">ns<pos:position pos:line="47" pos:column="7"/></name><index pos:line="47" pos:column="7">[<expr><name pos:line="47" pos:column="8">strindex<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">++<pos:position pos:line="47" pos:column="18"/></operator></expr>]<pos:position pos:line="47" pos:column="19"/></index></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <name pos:line="47" pos:column="22">in<pos:position pos:line="47" pos:column="24"/></name></expr>;<pos:position pos:line="47" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="48" pos:column="5">string<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">++<pos:position pos:line="48" pos:column="13"/></operator></expr>;<pos:position pos:line="48" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="49" pos:column="4"/></block></while>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">ns<pos:position pos:line="50" pos:column="5"/></name><index pos:line="50" pos:column="5">[<expr><name pos:line="50" pos:column="6">strindex<pos:position pos:line="50" pos:column="14"/></name></expr>]<pos:position pos:line="50" pos:column="15"/></index></name> <operator pos:line="50" pos:column="16">=<pos:position pos:line="50" pos:column="17"/></operator> <literal type="number" pos:line="50" pos:column="18">0<pos:position pos:line="50" pos:column="19"/></literal></expr>;<pos:position pos:line="50" pos:column="20"/></expr_stmt> <comment type="block" pos:line="50" pos:column="21">/* terminate it */</comment>

  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">(<expr><name pos:line="52" pos:column="6">olen<pos:position pos:line="52" pos:column="10"/></name></expr>)<pos:position pos:line="52" pos:column="11"/></condition><then pos:line="52" pos:column="11">
    <comment type="block" pos:line="53" pos:column="5">/* store output size */</comment>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="54" pos:column="5">*<pos:position pos:line="54" pos:column="6"/></operator><name pos:line="54" pos:column="6">olen<pos:position pos:line="54" pos:column="10"/></name> <operator pos:line="54" pos:column="11">=<pos:position pos:line="54" pos:column="12"/></operator> <name pos:line="54" pos:column="13">strindex<pos:position pos:line="54" pos:column="21"/></name></expr>;<pos:position pos:line="54" pos:column="22"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="56" pos:column="3">/* store output string */</comment>
  <expr_stmt><expr><operator pos:line="57" pos:column="3">*<pos:position pos:line="57" pos:column="4"/></operator><name pos:line="57" pos:column="4">ostring<pos:position pos:line="57" pos:column="11"/></name> <operator pos:line="57" pos:column="12">=<pos:position pos:line="57" pos:column="13"/></operator> <name pos:line="57" pos:column="14">ns<pos:position pos:line="57" pos:column="16"/></name></expr>;<pos:position pos:line="57" pos:column="17"/></expr_stmt>

  <return pos:line="59" pos:column="3">return <expr><name pos:line="59" pos:column="10">CURLE_OK<pos:position pos:line="59" pos:column="18"/></name></expr>;<pos:position pos:line="59" pos:column="19"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
