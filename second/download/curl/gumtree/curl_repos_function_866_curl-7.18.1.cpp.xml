<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_866_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ftp_state_use_port<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">ftpport<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">fcmd<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list> <comment type="block" pos:line="2" pos:column="50">/* start with this */</comment>

<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURLE_OK<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">ftp_conn<pos:position pos:line="6" pos:column="18"/></name></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">ftpc<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><operator pos:line="6" pos:column="27">&amp;<pos:position pos:line="6" pos:column="32"/></operator><name><name pos:line="6" pos:column="28">conn<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">proto<pos:position pos:line="6" pos:column="39"/></name><operator pos:line="6" pos:column="39">.<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="40">ftpc<pos:position pos:line="6" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">SessionHandle<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">data<pos:position pos:line="7" pos:column="29"/></name><init pos:line="7" pos:column="29">=<expr><name><name pos:line="7" pos:column="30">conn<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">data<pos:position pos:line="7" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socket_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">portsock<pos:position pos:line="8" pos:column="25"/></name><init pos:line="8" pos:column="25">= <expr><name pos:line="8" pos:column="27">CURL_SOCKET_BAD<pos:position pos:line="8" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">myhost<pos:position pos:line="9" pos:column="14"/></name><index pos:line="9" pos:column="14">[<expr><literal type="number" pos:line="9" pos:column="15">256<pos:position pos:line="9" pos:column="18"/></literal></expr>]<pos:position pos:line="9" pos:column="19"/></index></name> <init pos:line="9" pos:column="20">= <expr><literal type="string" pos:line="9" pos:column="22">""<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">ENABLE_IPV6<pos:position pos:line="11" pos:column="19"/></name></cpp:ifdef>
  <comment type="block" format="doxygen" pos:line="12" pos:column="3">/******************************************************************
   * IPv6-specific section
   */</comment>
  <decl_stmt><decl><type><name><name pos:line="15" pos:column="3">struct<pos:position pos:line="15" pos:column="9"/></name> <name pos:line="15" pos:column="10">Curl_sockaddr_storage<pos:position pos:line="15" pos:column="31"/></name></name></type> <name pos:line="15" pos:column="32">ss<pos:position pos:line="15" pos:column="34"/></name></decl>;<pos:position pos:line="15" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="16" pos:column="3">struct<pos:position pos:line="16" pos:column="9"/></name> <name pos:line="16" pos:column="10">addrinfo<pos:position pos:line="16" pos:column="18"/></name></name> <modifier pos:line="16" pos:column="19">*<pos:position pos:line="16" pos:column="20"/></modifier></type><name pos:line="16" pos:column="20">res<pos:position pos:line="16" pos:column="23"/></name></decl>, <modifier pos:line="16" pos:column="25">*<pos:position pos:line="16" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="16" pos:column="26">ai<pos:position pos:line="16" pos:column="28"/></name></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">socklen_t<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">sslen<pos:position pos:line="17" pos:column="18"/></name></decl>;<pos:position pos:line="17" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name></type> <name><name pos:line="18" pos:column="8">hbuf<pos:position pos:line="18" pos:column="12"/></name><index pos:line="18" pos:column="12">[<expr><name pos:line="18" pos:column="13">NI_MAXHOST<pos:position pos:line="18" pos:column="23"/></name></expr>]<pos:position pos:line="18" pos:column="24"/></index></name></decl>;<pos:position pos:line="18" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">struct<pos:position pos:line="19" pos:column="9"/></name> <name pos:line="19" pos:column="10">sockaddr<pos:position pos:line="19" pos:column="18"/></name></name> <modifier pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></modifier></type><name pos:line="19" pos:column="20">sa<pos:position pos:line="19" pos:column="22"/></name><init pos:line="19" pos:column="22">=<expr><operator pos:line="19" pos:column="23">(<pos:position pos:line="19" pos:column="24"/></operator>struct <name pos:line="19" pos:column="31">sockaddr<pos:position pos:line="19" pos:column="39"/></name> <operator pos:line="19" pos:column="40">*<pos:position pos:line="19" pos:column="41"/></operator><operator pos:line="19" pos:column="41">)<pos:position pos:line="19" pos:column="42"/></operator><operator pos:line="19" pos:column="42">&amp;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="43">ss<pos:position pos:line="19" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">char<pos:position pos:line="20" pos:column="7"/></name></type> <name><name pos:line="20" pos:column="8">tmp<pos:position pos:line="20" pos:column="11"/></name><index pos:line="20" pos:column="11">[<expr><literal type="number" pos:line="20" pos:column="12">1024<pos:position pos:line="20" pos:column="16"/></literal></expr>]<pos:position pos:line="20" pos:column="17"/></index></name></decl>;<pos:position pos:line="20" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="21" pos:column="3">static<pos:position pos:line="21" pos:column="9"/></specifier> <type><specifier pos:line="21" pos:column="10">const<pos:position pos:line="21" pos:column="15"/></specifier> <name pos:line="21" pos:column="16">char<pos:position pos:line="21" pos:column="20"/></name> <modifier pos:line="21" pos:column="21">*<pos:position pos:line="21" pos:column="22"/></modifier> <specifier pos:line="21" pos:column="23">const<pos:position pos:line="21" pos:column="28"/></specifier></type> <name><name pos:line="21" pos:column="29">mode<pos:position pos:line="21" pos:column="33"/></name><index pos:line="21" pos:column="33">[]<pos:position pos:line="21" pos:column="35"/></index></name> <init pos:line="21" pos:column="36">= <expr><block pos:line="21" pos:column="38">{ <expr><literal type="string" pos:line="21" pos:column="40">"EPRT"<pos:position pos:line="21" pos:column="46"/></literal></expr>, <expr><literal type="string" pos:line="21" pos:column="48">"PORT"<pos:position pos:line="21" pos:column="54"/></literal></expr>, <expr><name pos:line="21" pos:column="56">NULL<pos:position pos:line="21" pos:column="60"/></name></expr> }<pos:position pos:line="21" pos:column="62"/></block></expr></init></decl>;<pos:position pos:line="21" pos:column="63"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">int<pos:position pos:line="22" pos:column="6"/></name></type> <name pos:line="22" pos:column="7">rc<pos:position pos:line="22" pos:column="9"/></name></decl>;<pos:position pos:line="22" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="23" pos:column="3">int<pos:position pos:line="23" pos:column="6"/></name></type> <name pos:line="23" pos:column="7">error<pos:position pos:line="23" pos:column="12"/></name></decl>;<pos:position pos:line="23" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">char<pos:position pos:line="24" pos:column="7"/></name> <modifier pos:line="24" pos:column="8">*<pos:position pos:line="24" pos:column="9"/></modifier></type><name pos:line="24" pos:column="9">host<pos:position pos:line="24" pos:column="13"/></name><init pos:line="24" pos:column="13">=<expr><name pos:line="24" pos:column="14">NULL<pos:position pos:line="24" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="25" pos:column="3">struct<pos:position pos:line="25" pos:column="9"/></name> <name pos:line="25" pos:column="10">Curl_dns_entry<pos:position pos:line="25" pos:column="24"/></name></name> <modifier pos:line="25" pos:column="25">*<pos:position pos:line="25" pos:column="26"/></modifier></type><name pos:line="25" pos:column="26">h<pos:position pos:line="25" pos:column="27"/></name><init pos:line="25" pos:column="27">=<expr><name pos:line="25" pos:column="28">NULL<pos:position pos:line="25" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="26" pos:column="3">unsigned<pos:position pos:line="26" pos:column="11"/></name> <name pos:line="26" pos:column="12">short<pos:position pos:line="26" pos:column="17"/></name></type> <name pos:line="26" pos:column="18">port<pos:position pos:line="26" pos:column="22"/></name> <init pos:line="26" pos:column="23">= <expr><literal type="number" pos:line="26" pos:column="25">0<pos:position pos:line="26" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="27"/></decl_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* Step 1, figure out what address that is requested */</comment>

  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name><name pos:line="30" pos:column="6">data<pos:position pos:line="30" pos:column="10"/></name><operator pos:line="30" pos:column="10">-&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">set<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">.<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">str<pos:position pos:line="30" pos:column="19"/></name><index pos:line="30" pos:column="19">[<expr><name pos:line="30" pos:column="20">STRING_FTPPORT<pos:position pos:line="30" pos:column="34"/></name></expr>]<pos:position pos:line="30" pos:column="35"/></index></name> <operator pos:line="30" pos:column="36">&amp;&amp;<pos:position pos:line="30" pos:column="46"/></operator>
     <operator pos:line="31" pos:column="6">(<pos:position pos:line="31" pos:column="7"/></operator><call><name pos:line="31" pos:column="7">strlen<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name><name pos:line="31" pos:column="14">data<pos:position pos:line="31" pos:column="18"/></name><operator pos:line="31" pos:column="18">-&gt;<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="20">set<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">.<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">str<pos:position pos:line="31" pos:column="27"/></name><index pos:line="31" pos:column="27">[<expr><name pos:line="31" pos:column="28">STRING_FTPPORT<pos:position pos:line="31" pos:column="42"/></name></expr>]<pos:position pos:line="31" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call> <operator pos:line="31" pos:column="45">&gt;<pos:position pos:line="31" pos:column="49"/></operator> <literal type="number" pos:line="31" pos:column="47">1<pos:position pos:line="31" pos:column="48"/></literal><operator pos:line="31" pos:column="48">)<pos:position pos:line="31" pos:column="49"/></operator></expr>)<pos:position pos:line="31" pos:column="50"/></condition><then pos:line="31" pos:column="50"> <block pos:line="31" pos:column="51">{
    <comment type="block" pos:line="32" pos:column="5">/* attempt to get the address of the given interface name */</comment>
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><operator pos:line="33" pos:column="8">!<pos:position pos:line="33" pos:column="9"/></operator><call><name pos:line="33" pos:column="9">Curl_if2ip<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name><name pos:line="33" pos:column="20">data<pos:position pos:line="33" pos:column="24"/></name><operator pos:line="33" pos:column="24">-&gt;<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="26">set<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">.<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">str<pos:position pos:line="33" pos:column="33"/></name><index pos:line="33" pos:column="33">[<expr><name pos:line="33" pos:column="34">STRING_FTPPORT<pos:position pos:line="33" pos:column="48"/></name></expr>]<pos:position pos:line="33" pos:column="49"/></index></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="51">hbuf<pos:position pos:line="33" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="57">sizeof<argument_list pos:line="33" pos:column="63">(<argument><expr><name pos:line="33" pos:column="64">hbuf<pos:position pos:line="33" pos:column="68"/></name></expr></argument>)<pos:position pos:line="33" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="71"/></condition><then pos:line="33" pos:column="71">
      <comment type="block" pos:line="34" pos:column="7">/* not an interface, use the given string as host name instead */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="7">host<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <name><name pos:line="35" pos:column="14">data<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">-&gt;<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="20">set<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">.<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="24">str<pos:position pos:line="35" pos:column="27"/></name><index pos:line="35" pos:column="27">[<expr><name pos:line="35" pos:column="28">STRING_FTPPORT<pos:position pos:line="35" pos:column="42"/></name></expr>]<pos:position pos:line="35" pos:column="43"/></index></name></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt></block></then>
    <else pos:line="36" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="7">host<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <name pos:line="37" pos:column="14">hbuf<pos:position pos:line="37" pos:column="18"/></name></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt></block></else></if> <comment type="block" pos:line="37" pos:column="20">/* use the hbuf for host name */</comment>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if> <comment type="block" pos:line="38" pos:column="5">/* data-&gt;set.ftpport */</comment>

  <if pos:line="40" pos:column="3">if<condition pos:line="40" pos:column="5">(<expr><operator pos:line="40" pos:column="6">!<pos:position pos:line="40" pos:column="7"/></operator><name pos:line="40" pos:column="7">host<pos:position pos:line="40" pos:column="11"/></name></expr>)<pos:position pos:line="40" pos:column="12"/></condition><then pos:line="40" pos:column="12"> <block pos:line="40" pos:column="13">{
    <comment type="block" pos:line="41" pos:column="5">/* not an interface and not a host name, get default by extracting
       the IP from the control connection */</comment>

    <expr_stmt><expr><name pos:line="44" pos:column="5">sslen<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <sizeof pos:line="44" pos:column="13">sizeof<argument_list pos:line="44" pos:column="19">(<argument><expr><name pos:line="44" pos:column="20">ss<pos:position pos:line="44" pos:column="22"/></name></expr></argument>)<pos:position pos:line="44" pos:column="23"/></argument_list></sizeof></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>
    <if pos:line="45" pos:column="5">if<condition pos:line="45" pos:column="7">(<expr><call><name pos:line="45" pos:column="8">getsockname<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><name><name pos:line="45" pos:column="20">conn<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">sock<pos:position pos:line="45" pos:column="30"/></name><index pos:line="45" pos:column="30">[<expr><name pos:line="45" pos:column="31">FIRSTSOCKET<pos:position pos:line="45" pos:column="42"/></name></expr>]<pos:position pos:line="45" pos:column="43"/></index></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="45">(<pos:position pos:line="45" pos:column="46"/></operator>struct <name pos:line="45" pos:column="53">sockaddr<pos:position pos:line="45" pos:column="61"/></name> <operator pos:line="45" pos:column="62">*<pos:position pos:line="45" pos:column="63"/></operator><operator pos:line="45" pos:column="63">)<pos:position pos:line="45" pos:column="64"/></operator><operator pos:line="45" pos:column="64">&amp;<pos:position pos:line="45" pos:column="69"/></operator><name pos:line="45" pos:column="65">ss<pos:position pos:line="45" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="69">&amp;<pos:position pos:line="45" pos:column="74"/></operator><name pos:line="45" pos:column="70">sslen<pos:position pos:line="45" pos:column="75"/></name></expr></argument>)<pos:position pos:line="45" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="77"/></condition><then pos:line="45" pos:column="77"> <block pos:line="45" pos:column="78">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">failf<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><name pos:line="46" pos:column="13">data<pos:position pos:line="46" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="19">"getsockname() failed: %s"<pos:position pos:line="46" pos:column="45"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="47" pos:column="11">Curl_strerror<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">conn<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="31">SOCKERRNO<pos:position pos:line="47" pos:column="40"/></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="47" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="44"/></expr_stmt>
      <return pos:line="48" pos:column="7">return <expr><name pos:line="48" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="48" pos:column="35"/></name></expr>;<pos:position pos:line="48" pos:column="36"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <if pos:line="51" pos:column="5">if<condition pos:line="51" pos:column="7">(<expr><name pos:line="51" pos:column="8">sslen<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">&gt;<pos:position pos:line="51" pos:column="18"/></operator> <operator pos:line="51" pos:column="16">(<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="17">socklen_t<pos:position pos:line="51" pos:column="26"/></name><operator pos:line="51" pos:column="26">)<pos:position pos:line="51" pos:column="27"/></operator><sizeof pos:line="51" pos:column="27">sizeof<argument_list pos:line="51" pos:column="33">(<argument><expr><name pos:line="51" pos:column="34">ss<pos:position pos:line="51" pos:column="36"/></name></expr></argument>)<pos:position pos:line="51" pos:column="37"/></argument_list></sizeof></expr>)<pos:position pos:line="51" pos:column="38"/></condition><then pos:line="51" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="7">sslen<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <sizeof pos:line="52" pos:column="15">sizeof<argument_list pos:line="52" pos:column="21">(<argument><expr><name pos:line="52" pos:column="22">ss<pos:position pos:line="52" pos:column="24"/></name></expr></argument>)<pos:position pos:line="52" pos:column="25"/></argument_list></sizeof></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="53" pos:column="5">rc<pos:position pos:line="53" pos:column="7"/></name> <operator pos:line="53" pos:column="8">=<pos:position pos:line="53" pos:column="9"/></operator> <call><name pos:line="53" pos:column="10">getnameinfo<pos:position pos:line="53" pos:column="21"/></name><argument_list pos:line="53" pos:column="21">(<argument><expr><operator pos:line="53" pos:column="22">(<pos:position pos:line="53" pos:column="23"/></operator>struct <name pos:line="53" pos:column="30">sockaddr<pos:position pos:line="53" pos:column="38"/></name> <operator pos:line="53" pos:column="39">*<pos:position pos:line="53" pos:column="40"/></operator><operator pos:line="53" pos:column="40">)<pos:position pos:line="53" pos:column="41"/></operator><operator pos:line="53" pos:column="41">&amp;<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="42">ss<pos:position pos:line="53" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="46">sslen<pos:position pos:line="53" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="53">hbuf<pos:position pos:line="53" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="59">sizeof<argument_list pos:line="53" pos:column="65">(<argument><expr><name pos:line="53" pos:column="66">hbuf<pos:position pos:line="53" pos:column="70"/></name></expr></argument>)<pos:position pos:line="53" pos:column="71"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="53" pos:column="73">NULL<pos:position pos:line="53" pos:column="77"/></name></expr></argument>,
                     <argument><expr><literal type="number" pos:line="54" pos:column="22">0<pos:position pos:line="54" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="25">NIFLAGS<pos:position pos:line="54" pos:column="32"/></name></expr></argument>)<pos:position pos:line="54" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="34"/></expr_stmt>
    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">(<expr><name pos:line="55" pos:column="8">rc<pos:position pos:line="55" pos:column="10"/></name></expr>)<pos:position pos:line="55" pos:column="11"/></condition><then pos:line="55" pos:column="11"> <block pos:line="55" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">failf<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">data<pos:position pos:line="56" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="19">"getnameinfo() returned %d"<pos:position pos:line="56" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="48">rc<pos:position pos:line="56" pos:column="50"/></name></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="52"/></expr_stmt>
      <return pos:line="57" pos:column="7">return <expr><name pos:line="57" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="57" pos:column="35"/></name></expr>;<pos:position pos:line="57" pos:column="36"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="59" pos:column="5">host<pos:position pos:line="59" pos:column="9"/></name> <operator pos:line="59" pos:column="10">=<pos:position pos:line="59" pos:column="11"/></operator> <name pos:line="59" pos:column="12">hbuf<pos:position pos:line="59" pos:column="16"/></name></expr>;<pos:position pos:line="59" pos:column="17"/></expr_stmt> <comment type="block" pos:line="59" pos:column="18">/* use this host name */</comment>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="62" pos:column="3">rc<pos:position pos:line="62" pos:column="5"/></name> <operator pos:line="62" pos:column="6">=<pos:position pos:line="62" pos:column="7"/></operator> <call><name pos:line="62" pos:column="8">Curl_resolv<pos:position pos:line="62" pos:column="19"/></name><argument_list pos:line="62" pos:column="19">(<argument><expr><name pos:line="62" pos:column="20">conn<pos:position pos:line="62" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="26">host<pos:position pos:line="62" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="32">0<pos:position pos:line="62" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="62" pos:column="35">&amp;<pos:position pos:line="62" pos:column="40"/></operator><name pos:line="62" pos:column="36">h<pos:position pos:line="62" pos:column="37"/></name></expr></argument>)<pos:position pos:line="62" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="39"/></expr_stmt>
  <if pos:line="63" pos:column="3">if<condition pos:line="63" pos:column="5">(<expr><name pos:line="63" pos:column="6">rc<pos:position pos:line="63" pos:column="8"/></name> <operator pos:line="63" pos:column="9">==<pos:position pos:line="63" pos:column="11"/></operator> <name pos:line="63" pos:column="12">CURLRESOLV_PENDING<pos:position pos:line="63" pos:column="30"/></name></expr>)<pos:position pos:line="63" pos:column="31"/></condition><then pos:line="63" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="5">rc<pos:position pos:line="64" pos:column="7"/></name> <operator pos:line="64" pos:column="8">=<pos:position pos:line="64" pos:column="9"/></operator> <call><name pos:line="64" pos:column="10">Curl_wait_for_resolv<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name pos:line="64" pos:column="31">conn<pos:position pos:line="64" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="37">&amp;<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="38">h<pos:position pos:line="64" pos:column="39"/></name></expr></argument>)<pos:position pos:line="64" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="41"/></expr_stmt></block></then></if>
  <if pos:line="65" pos:column="3">if<condition pos:line="65" pos:column="5">(<expr><name pos:line="65" pos:column="6">h<pos:position pos:line="65" pos:column="7"/></name></expr>)<pos:position pos:line="65" pos:column="8"/></condition><then pos:line="65" pos:column="8"> <block pos:line="65" pos:column="9">{
    <expr_stmt><expr><name pos:line="66" pos:column="5">res<pos:position pos:line="66" pos:column="8"/></name> <operator pos:line="66" pos:column="9">=<pos:position pos:line="66" pos:column="10"/></operator> <name><name pos:line="66" pos:column="11">h<pos:position pos:line="66" pos:column="12"/></name><operator pos:line="66" pos:column="12">-&gt;<pos:position pos:line="66" pos:column="17"/></operator><name pos:line="66" pos:column="14">addr<pos:position pos:line="66" pos:column="18"/></name></name></expr>;<pos:position pos:line="66" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="67" pos:column="5">/* when we return from this function, we can forget about this entry
       to we can unlock it now already */</comment>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">Curl_resolv_unlock<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">data<pos:position pos:line="69" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="30">h<pos:position pos:line="69" pos:column="31"/></name></expr></argument>)<pos:position pos:line="69" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="70" pos:column="4"/></block></then> <comment type="block" pos:line="70" pos:column="5">/* (h) */</comment>
  <else pos:line="71" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="5">res<pos:position pos:line="72" pos:column="8"/></name> <operator pos:line="72" pos:column="9">=<pos:position pos:line="72" pos:column="10"/></operator> <name pos:line="72" pos:column="11">NULL<pos:position pos:line="72" pos:column="15"/></name></expr>;<pos:position pos:line="72" pos:column="16"/></expr_stmt></block></else></if> <comment type="block" pos:line="72" pos:column="17">/* failure! */</comment>


  <comment type="block" pos:line="75" pos:column="3">/* step 2, create a socket for the requested address */</comment>

  <expr_stmt><expr><name pos:line="77" pos:column="3">portsock<pos:position pos:line="77" pos:column="11"/></name> <operator pos:line="77" pos:column="12">=<pos:position pos:line="77" pos:column="13"/></operator> <name pos:line="77" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="77" pos:column="29"/></name></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="78" pos:column="3">error<pos:position pos:line="78" pos:column="8"/></name> <operator pos:line="78" pos:column="9">=<pos:position pos:line="78" pos:column="10"/></operator> <literal type="number" pos:line="78" pos:column="11">0<pos:position pos:line="78" pos:column="12"/></literal></expr>;<pos:position pos:line="78" pos:column="13"/></expr_stmt>
  <for pos:line="79" pos:column="3">for <control pos:line="79" pos:column="7">(<init><expr><name pos:line="79" pos:column="8">ai<pos:position pos:line="79" pos:column="10"/></name> <operator pos:line="79" pos:column="11">=<pos:position pos:line="79" pos:column="12"/></operator> <name pos:line="79" pos:column="13">res<pos:position pos:line="79" pos:column="16"/></name></expr>;<pos:position pos:line="79" pos:column="17"/></init> <condition><expr><name pos:line="79" pos:column="18">ai<pos:position pos:line="79" pos:column="20"/></name></expr>;<pos:position pos:line="79" pos:column="21"/></condition> <incr><expr><name pos:line="79" pos:column="22">ai<pos:position pos:line="79" pos:column="24"/></name> <operator pos:line="79" pos:column="25">=<pos:position pos:line="79" pos:column="26"/></operator> <name><name pos:line="79" pos:column="27">ai<pos:position pos:line="79" pos:column="29"/></name><operator pos:line="79" pos:column="29">-&gt;<pos:position pos:line="79" pos:column="34"/></operator><name pos:line="79" pos:column="31">ai_next<pos:position pos:line="79" pos:column="38"/></name></name></expr></incr>)<pos:position pos:line="79" pos:column="39"/></control> <block pos:line="79" pos:column="40">{
    <comment type="block" pos:line="80" pos:column="5">/*
     * Workaround for AIX5 getaddrinfo() problem (it doesn't set ai_socktype):
     */</comment>
    <if pos:line="83" pos:column="5">if<condition pos:line="83" pos:column="7">(<expr><name><name pos:line="83" pos:column="8">ai<pos:position pos:line="83" pos:column="10"/></name><operator pos:line="83" pos:column="10">-&gt;<pos:position pos:line="83" pos:column="15"/></operator><name pos:line="83" pos:column="12">ai_socktype<pos:position pos:line="83" pos:column="23"/></name></name> <operator pos:line="83" pos:column="24">==<pos:position pos:line="83" pos:column="26"/></operator> <literal type="number" pos:line="83" pos:column="27">0<pos:position pos:line="83" pos:column="28"/></literal></expr>)<pos:position pos:line="83" pos:column="29"/></condition><then pos:line="83" pos:column="29">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="84" pos:column="7">ai<pos:position pos:line="84" pos:column="9"/></name><operator pos:line="84" pos:column="9">-&gt;<pos:position pos:line="84" pos:column="14"/></operator><name pos:line="84" pos:column="11">ai_socktype<pos:position pos:line="84" pos:column="22"/></name></name> <operator pos:line="84" pos:column="23">=<pos:position pos:line="84" pos:column="24"/></operator> <name><name pos:line="84" pos:column="25">conn<pos:position pos:line="84" pos:column="29"/></name><operator pos:line="84" pos:column="29">-&gt;<pos:position pos:line="84" pos:column="34"/></operator><name pos:line="84" pos:column="31">socktype<pos:position pos:line="84" pos:column="39"/></name></name></expr>;<pos:position pos:line="84" pos:column="40"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="86" pos:column="5">portsock<pos:position pos:line="86" pos:column="13"/></name> <operator pos:line="86" pos:column="14">=<pos:position pos:line="86" pos:column="15"/></operator> <call><name pos:line="86" pos:column="16">socket<pos:position pos:line="86" pos:column="22"/></name><argument_list pos:line="86" pos:column="22">(<argument><expr><name><name pos:line="86" pos:column="23">ai<pos:position pos:line="86" pos:column="25"/></name><operator pos:line="86" pos:column="25">-&gt;<pos:position pos:line="86" pos:column="30"/></operator><name pos:line="86" pos:column="27">ai_family<pos:position pos:line="86" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="38">ai<pos:position pos:line="86" pos:column="40"/></name><operator pos:line="86" pos:column="40">-&gt;<pos:position pos:line="86" pos:column="45"/></operator><name pos:line="86" pos:column="42">ai_socktype<pos:position pos:line="86" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="55">ai<pos:position pos:line="86" pos:column="57"/></name><operator pos:line="86" pos:column="57">-&gt;<pos:position pos:line="86" pos:column="62"/></operator><name pos:line="86" pos:column="59">ai_protocol<pos:position pos:line="86" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="72"/></expr_stmt>
    <if pos:line="87" pos:column="5">if<condition pos:line="87" pos:column="7">(<expr><name pos:line="87" pos:column="8">portsock<pos:position pos:line="87" pos:column="16"/></name> <operator pos:line="87" pos:column="17">==<pos:position pos:line="87" pos:column="19"/></operator> <name pos:line="87" pos:column="20">CURL_SOCKET_BAD<pos:position pos:line="87" pos:column="35"/></name></expr>)<pos:position pos:line="87" pos:column="36"/></condition><then pos:line="87" pos:column="36"> <block pos:line="87" pos:column="37">{
      <expr_stmt><expr><name pos:line="88" pos:column="7">error<pos:position pos:line="88" pos:column="12"/></name> <operator pos:line="88" pos:column="13">=<pos:position pos:line="88" pos:column="14"/></operator> <name pos:line="88" pos:column="15">SOCKERRNO<pos:position pos:line="88" pos:column="24"/></name></expr>;<pos:position pos:line="88" pos:column="25"/></expr_stmt>
      <continue pos:line="89" pos:column="7">continue;<pos:position pos:line="89" pos:column="16"/></continue>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>
    <break pos:line="91" pos:column="5">break;<pos:position pos:line="91" pos:column="11"/></break>
  }<pos:position pos:line="92" pos:column="4"/></block></for>
  <if pos:line="93" pos:column="3">if<condition pos:line="93" pos:column="5">(<expr><operator pos:line="93" pos:column="6">!<pos:position pos:line="93" pos:column="7"/></operator><name pos:line="93" pos:column="7">ai<pos:position pos:line="93" pos:column="9"/></name></expr>)<pos:position pos:line="93" pos:column="10"/></condition><then pos:line="93" pos:column="10"> <block pos:line="93" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="94" pos:column="5">failf<pos:position pos:line="94" pos:column="10"/></name><argument_list pos:line="94" pos:column="10">(<argument><expr><name pos:line="94" pos:column="11">data<pos:position pos:line="94" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="17">"socket failure: %s"<pos:position pos:line="94" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="94" pos:column="39">Curl_strerror<pos:position pos:line="94" pos:column="52"/></name><argument_list pos:line="94" pos:column="52">(<argument><expr><name pos:line="94" pos:column="53">conn<pos:position pos:line="94" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="59">error<pos:position pos:line="94" pos:column="64"/></name></expr></argument>)<pos:position pos:line="94" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="94" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="67"/></expr_stmt>
    <return pos:line="95" pos:column="5">return <expr><name pos:line="95" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="95" pos:column="33"/></name></expr>;<pos:position pos:line="95" pos:column="34"/></return>
  }<pos:position pos:line="96" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="98" pos:column="3">/* step 3, bind to a suitable local address */</comment>

  <comment type="block" pos:line="100" pos:column="3">/* Try binding the given address. */</comment>
  <if pos:line="101" pos:column="3">if<condition pos:line="101" pos:column="5">(<expr><call><name pos:line="101" pos:column="6">bind<pos:position pos:line="101" pos:column="10"/></name><argument_list pos:line="101" pos:column="10">(<argument><expr><name pos:line="101" pos:column="11">portsock<pos:position pos:line="101" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="21">ai<pos:position pos:line="101" pos:column="23"/></name><operator pos:line="101" pos:column="23">-&gt;<pos:position pos:line="101" pos:column="28"/></operator><name pos:line="101" pos:column="25">ai_addr<pos:position pos:line="101" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="34">ai<pos:position pos:line="101" pos:column="36"/></name><operator pos:line="101" pos:column="36">-&gt;<pos:position pos:line="101" pos:column="41"/></operator><name pos:line="101" pos:column="38">ai_addrlen<pos:position pos:line="101" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="101" pos:column="50"/></condition><then pos:line="101" pos:column="50"> <block pos:line="101" pos:column="51">{

    <comment type="block" pos:line="103" pos:column="5">/* It failed. Bind the address used for the control connection instead */</comment>
    <expr_stmt><expr><name pos:line="104" pos:column="5">sslen<pos:position pos:line="104" pos:column="10"/></name> <operator pos:line="104" pos:column="11">=<pos:position pos:line="104" pos:column="12"/></operator> <sizeof pos:line="104" pos:column="13">sizeof<argument_list pos:line="104" pos:column="19">(<argument><expr><name pos:line="104" pos:column="20">ss<pos:position pos:line="104" pos:column="22"/></name></expr></argument>)<pos:position pos:line="104" pos:column="23"/></argument_list></sizeof></expr>;<pos:position pos:line="104" pos:column="24"/></expr_stmt>
    <if pos:line="105" pos:column="5">if<condition pos:line="105" pos:column="7">(<expr><call><name pos:line="105" pos:column="8">getsockname<pos:position pos:line="105" pos:column="19"/></name><argument_list pos:line="105" pos:column="19">(<argument><expr><name><name pos:line="105" pos:column="20">conn<pos:position pos:line="105" pos:column="24"/></name><operator pos:line="105" pos:column="24">-&gt;<pos:position pos:line="105" pos:column="29"/></operator><name pos:line="105" pos:column="26">sock<pos:position pos:line="105" pos:column="30"/></name><index pos:line="105" pos:column="30">[<expr><name pos:line="105" pos:column="31">FIRSTSOCKET<pos:position pos:line="105" pos:column="42"/></name></expr>]<pos:position pos:line="105" pos:column="43"/></index></name></expr></argument>,
                    <argument><expr><operator pos:line="106" pos:column="21">(<pos:position pos:line="106" pos:column="22"/></operator>struct <name pos:line="106" pos:column="29">sockaddr<pos:position pos:line="106" pos:column="37"/></name> <operator pos:line="106" pos:column="38">*<pos:position pos:line="106" pos:column="39"/></operator><operator pos:line="106" pos:column="39">)<pos:position pos:line="106" pos:column="40"/></operator><name pos:line="106" pos:column="40">sa<pos:position pos:line="106" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="44">&amp;<pos:position pos:line="106" pos:column="49"/></operator><name pos:line="106" pos:column="45">sslen<pos:position pos:line="106" pos:column="50"/></name></expr></argument>)<pos:position pos:line="106" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="52"/></condition><then pos:line="106" pos:column="52"> <block pos:line="106" pos:column="53">{
      <expr_stmt><expr><call><name pos:line="107" pos:column="7">failf<pos:position pos:line="107" pos:column="12"/></name><argument_list pos:line="107" pos:column="12">(<argument><expr><name pos:line="107" pos:column="13">data<pos:position pos:line="107" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="19">"getsockname() failed: %s"<pos:position pos:line="107" pos:column="45"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="108" pos:column="11">Curl_strerror<pos:position pos:line="108" pos:column="24"/></name><argument_list pos:line="108" pos:column="24">(<argument><expr><name pos:line="108" pos:column="25">conn<pos:position pos:line="108" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="31">SOCKERRNO<pos:position pos:line="108" pos:column="40"/></name></expr></argument>)<pos:position pos:line="108" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="108" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="109" pos:column="7">sclose<pos:position pos:line="109" pos:column="13"/></name><argument_list pos:line="109" pos:column="13">(<argument><expr><name pos:line="109" pos:column="14">portsock<pos:position pos:line="109" pos:column="22"/></name></expr></argument>)<pos:position pos:line="109" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="24"/></expr_stmt>
      <return pos:line="110" pos:column="7">return <expr><name pos:line="110" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="110" pos:column="35"/></name></expr>;<pos:position pos:line="110" pos:column="36"/></return>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="113" pos:column="5">/* set port number to zero to make bind() pick "any" */</comment>
    <if pos:line="114" pos:column="5">if<condition pos:line="114" pos:column="7">(<expr><operator pos:line="114" pos:column="8">(<pos:position pos:line="114" pos:column="9"/></operator><operator pos:line="114" pos:column="9">(<pos:position pos:line="114" pos:column="10"/></operator>struct <name pos:line="114" pos:column="17">sockaddr<pos:position pos:line="114" pos:column="25"/></name> <operator pos:line="114" pos:column="26">*<pos:position pos:line="114" pos:column="27"/></operator><operator pos:line="114" pos:column="27">)<pos:position pos:line="114" pos:column="28"/></operator><name pos:line="114" pos:column="28">sa<pos:position pos:line="114" pos:column="30"/></name><operator pos:line="114" pos:column="30">)<pos:position pos:line="114" pos:column="31"/></operator><operator pos:line="114" pos:column="31">-&gt;<pos:position pos:line="114" pos:column="36"/></operator><name pos:line="114" pos:column="33">sa_family<pos:position pos:line="114" pos:column="42"/></name> <operator pos:line="114" pos:column="43">==<pos:position pos:line="114" pos:column="45"/></operator> <name pos:line="114" pos:column="46">AF_INET<pos:position pos:line="114" pos:column="53"/></name></expr>)<pos:position pos:line="114" pos:column="54"/></condition><then pos:line="114" pos:column="54">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="115" pos:column="7">(<pos:position pos:line="115" pos:column="8"/></operator><operator pos:line="115" pos:column="8">(<pos:position pos:line="115" pos:column="9"/></operator>struct <name pos:line="115" pos:column="16">sockaddr_in<pos:position pos:line="115" pos:column="27"/></name> <operator pos:line="115" pos:column="28">*<pos:position pos:line="115" pos:column="29"/></operator><operator pos:line="115" pos:column="29">)<pos:position pos:line="115" pos:column="30"/></operator><name pos:line="115" pos:column="30">sa<pos:position pos:line="115" pos:column="32"/></name><operator pos:line="115" pos:column="32">)<pos:position pos:line="115" pos:column="33"/></operator><operator pos:line="115" pos:column="33">-&gt;<pos:position pos:line="115" pos:column="38"/></operator><name pos:line="115" pos:column="35">sin_port<pos:position pos:line="115" pos:column="43"/></name><operator pos:line="115" pos:column="43">=<pos:position pos:line="115" pos:column="44"/></operator><literal type="number" pos:line="115" pos:column="44">0<pos:position pos:line="115" pos:column="45"/></literal></expr>;<pos:position pos:line="115" pos:column="46"/></expr_stmt></block></then>
    <else pos:line="116" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><operator pos:line="117" pos:column="7">(<pos:position pos:line="117" pos:column="8"/></operator><operator pos:line="117" pos:column="8">(<pos:position pos:line="117" pos:column="9"/></operator>struct <name pos:line="117" pos:column="16">sockaddr_in6<pos:position pos:line="117" pos:column="28"/></name> <operator pos:line="117" pos:column="29">*<pos:position pos:line="117" pos:column="30"/></operator><operator pos:line="117" pos:column="30">)<pos:position pos:line="117" pos:column="31"/></operator><name pos:line="117" pos:column="31">sa<pos:position pos:line="117" pos:column="33"/></name><operator pos:line="117" pos:column="33">)<pos:position pos:line="117" pos:column="34"/></operator><operator pos:line="117" pos:column="34">-&gt;<pos:position pos:line="117" pos:column="39"/></operator><name pos:line="117" pos:column="36">sin6_port<pos:position pos:line="117" pos:column="45"/></name> <operator pos:line="117" pos:column="46">=<pos:position pos:line="117" pos:column="47"/></operator><literal type="number" pos:line="117" pos:column="47">0<pos:position pos:line="117" pos:column="48"/></literal></expr>;<pos:position pos:line="117" pos:column="49"/></expr_stmt></block></else></if>

    <if pos:line="119" pos:column="5">if<condition pos:line="119" pos:column="7">(<expr><name pos:line="119" pos:column="8">sslen<pos:position pos:line="119" pos:column="13"/></name> <operator pos:line="119" pos:column="14">&gt;<pos:position pos:line="119" pos:column="18"/></operator> <operator pos:line="119" pos:column="16">(<pos:position pos:line="119" pos:column="17"/></operator><name pos:line="119" pos:column="17">socklen_t<pos:position pos:line="119" pos:column="26"/></name><operator pos:line="119" pos:column="26">)<pos:position pos:line="119" pos:column="27"/></operator><sizeof pos:line="119" pos:column="27">sizeof<argument_list pos:line="119" pos:column="33">(<argument><expr><name pos:line="119" pos:column="34">ss<pos:position pos:line="119" pos:column="36"/></name></expr></argument>)<pos:position pos:line="119" pos:column="37"/></argument_list></sizeof></expr>)<pos:position pos:line="119" pos:column="38"/></condition><then pos:line="119" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name pos:line="120" pos:column="7">sslen<pos:position pos:line="120" pos:column="12"/></name> <operator pos:line="120" pos:column="13">=<pos:position pos:line="120" pos:column="14"/></operator> <sizeof pos:line="120" pos:column="15">sizeof<argument_list pos:line="120" pos:column="21">(<argument><expr><name pos:line="120" pos:column="22">ss<pos:position pos:line="120" pos:column="24"/></name></expr></argument>)<pos:position pos:line="120" pos:column="25"/></argument_list></sizeof></expr>;<pos:position pos:line="120" pos:column="26"/></expr_stmt></block></then></if>

    <if pos:line="122" pos:column="5">if<condition pos:line="122" pos:column="7">(<expr><call><name pos:line="122" pos:column="8">bind<pos:position pos:line="122" pos:column="12"/></name><argument_list pos:line="122" pos:column="12">(<argument><expr><name pos:line="122" pos:column="13">portsock<pos:position pos:line="122" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="122" pos:column="23">(<pos:position pos:line="122" pos:column="24"/></operator>struct <name pos:line="122" pos:column="31">sockaddr<pos:position pos:line="122" pos:column="39"/></name> <operator pos:line="122" pos:column="40">*<pos:position pos:line="122" pos:column="41"/></operator><operator pos:line="122" pos:column="41">)<pos:position pos:line="122" pos:column="42"/></operator><name pos:line="122" pos:column="42">sa<pos:position pos:line="122" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="46">sslen<pos:position pos:line="122" pos:column="51"/></name></expr></argument>)<pos:position pos:line="122" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="53"/></condition><then pos:line="122" pos:column="53"> <block pos:line="122" pos:column="54">{
      <expr_stmt><expr><call><name pos:line="123" pos:column="7">failf<pos:position pos:line="123" pos:column="12"/></name><argument_list pos:line="123" pos:column="12">(<argument><expr><name pos:line="123" pos:column="13">data<pos:position pos:line="123" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="19">"bind failed: %s"<pos:position pos:line="123" pos:column="36"/></literal></expr></argument>, <argument><expr><call><name pos:line="123" pos:column="38">Curl_strerror<pos:position pos:line="123" pos:column="51"/></name><argument_list pos:line="123" pos:column="51">(<argument><expr><name pos:line="123" pos:column="52">conn<pos:position pos:line="123" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="58">SOCKERRNO<pos:position pos:line="123" pos:column="67"/></name></expr></argument>)<pos:position pos:line="123" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="123" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="124" pos:column="7">sclose<pos:position pos:line="124" pos:column="13"/></name><argument_list pos:line="124" pos:column="13">(<argument><expr><name pos:line="124" pos:column="14">portsock<pos:position pos:line="124" pos:column="22"/></name></expr></argument>)<pos:position pos:line="124" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="24"/></expr_stmt>
      <return pos:line="125" pos:column="7">return <expr><name pos:line="125" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="125" pos:column="35"/></name></expr>;<pos:position pos:line="125" pos:column="36"/></return>
    }<pos:position pos:line="126" pos:column="6"/></block></then></if>
  }<pos:position pos:line="127" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="129" pos:column="3">/* get the name again after the bind() so that we can extract the
     port number it uses now */</comment>
  <expr_stmt><expr><name pos:line="131" pos:column="3">sslen<pos:position pos:line="131" pos:column="8"/></name> <operator pos:line="131" pos:column="9">=<pos:position pos:line="131" pos:column="10"/></operator> <sizeof pos:line="131" pos:column="11">sizeof<argument_list pos:line="131" pos:column="17">(<argument><expr><name pos:line="131" pos:column="18">ss<pos:position pos:line="131" pos:column="20"/></name></expr></argument>)<pos:position pos:line="131" pos:column="21"/></argument_list></sizeof></expr>;<pos:position pos:line="131" pos:column="22"/></expr_stmt>
  <if pos:line="132" pos:column="3">if<condition pos:line="132" pos:column="5">(<expr><call><name pos:line="132" pos:column="6">getsockname<pos:position pos:line="132" pos:column="17"/></name><argument_list pos:line="132" pos:column="17">(<argument><expr><name pos:line="132" pos:column="18">portsock<pos:position pos:line="132" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="28">(<pos:position pos:line="132" pos:column="29"/></operator>struct <name pos:line="132" pos:column="36">sockaddr<pos:position pos:line="132" pos:column="44"/></name> <operator pos:line="132" pos:column="45">*<pos:position pos:line="132" pos:column="46"/></operator><operator pos:line="132" pos:column="46">)<pos:position pos:line="132" pos:column="47"/></operator><name pos:line="132" pos:column="47">sa<pos:position pos:line="132" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="51">&amp;<pos:position pos:line="132" pos:column="56"/></operator><name pos:line="132" pos:column="52">sslen<pos:position pos:line="132" pos:column="57"/></name></expr></argument>)<pos:position pos:line="132" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="132" pos:column="59"/></condition><then pos:line="132" pos:column="59"> <block pos:line="132" pos:column="60">{
    <expr_stmt><expr><call><name pos:line="133" pos:column="5">failf<pos:position pos:line="133" pos:column="10"/></name><argument_list pos:line="133" pos:column="10">(<argument><expr><name pos:line="133" pos:column="11">data<pos:position pos:line="133" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="17">"getsockname() failed: %s"<pos:position pos:line="133" pos:column="43"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="134" pos:column="11">Curl_strerror<pos:position pos:line="134" pos:column="24"/></name><argument_list pos:line="134" pos:column="24">(<argument><expr><name pos:line="134" pos:column="25">conn<pos:position pos:line="134" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="31">SOCKERRNO<pos:position pos:line="134" pos:column="40"/></name></expr></argument>)<pos:position pos:line="134" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="134" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">sclose<pos:position pos:line="135" pos:column="11"/></name><argument_list pos:line="135" pos:column="11">(<argument><expr><name pos:line="135" pos:column="12">portsock<pos:position pos:line="135" pos:column="20"/></name></expr></argument>)<pos:position pos:line="135" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="22"/></expr_stmt>
    <return pos:line="136" pos:column="5">return <expr><name pos:line="136" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="136" pos:column="33"/></name></expr>;<pos:position pos:line="136" pos:column="34"/></return>
  }<pos:position pos:line="137" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="139" pos:column="3">/* step 4, listen on the socket */</comment>

  <if pos:line="141" pos:column="3">if<condition pos:line="141" pos:column="5">(<expr><call><name pos:line="141" pos:column="6">listen<pos:position pos:line="141" pos:column="12"/></name><argument_list pos:line="141" pos:column="12">(<argument><expr><name pos:line="141" pos:column="13">portsock<pos:position pos:line="141" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="141" pos:column="23">1<pos:position pos:line="141" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="141" pos:column="26"/></condition><then pos:line="141" pos:column="26"> <block pos:line="141" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="142" pos:column="5">failf<pos:position pos:line="142" pos:column="10"/></name><argument_list pos:line="142" pos:column="10">(<argument><expr><name pos:line="142" pos:column="11">data<pos:position pos:line="142" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="142" pos:column="17">"socket failure: %s"<pos:position pos:line="142" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="142" pos:column="39">Curl_strerror<pos:position pos:line="142" pos:column="52"/></name><argument_list pos:line="142" pos:column="52">(<argument><expr><name pos:line="142" pos:column="53">conn<pos:position pos:line="142" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="59">SOCKERRNO<pos:position pos:line="142" pos:column="68"/></name></expr></argument>)<pos:position pos:line="142" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="142" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="143" pos:column="5">sclose<pos:position pos:line="143" pos:column="11"/></name><argument_list pos:line="143" pos:column="11">(<argument><expr><name pos:line="143" pos:column="12">portsock<pos:position pos:line="143" pos:column="20"/></name></expr></argument>)<pos:position pos:line="143" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="22"/></expr_stmt>
    <return pos:line="144" pos:column="5">return <expr><name pos:line="144" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="144" pos:column="33"/></name></expr>;<pos:position pos:line="144" pos:column="34"/></return>
  }<pos:position pos:line="145" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="147" pos:column="3">/* step 5, send the proper FTP command */</comment>

  <comment type="block" pos:line="149" pos:column="3">/* get a plain printable version of the numerical address to work with
     below */</comment>
  <expr_stmt><expr><call><name pos:line="151" pos:column="3">Curl_printable_address<pos:position pos:line="151" pos:column="25"/></name><argument_list pos:line="151" pos:column="25">(<argument><expr><name pos:line="151" pos:column="26">ai<pos:position pos:line="151" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="30">myhost<pos:position pos:line="151" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="151" pos:column="38">sizeof<argument_list pos:line="151" pos:column="44">(<argument><expr><name pos:line="151" pos:column="45">myhost<pos:position pos:line="151" pos:column="51"/></name></expr></argument>)<pos:position pos:line="151" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="151" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="54"/></expr_stmt>

<cpp:ifdef pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">ifdef<pos:position pos:line="153" pos:column="7"/></cpp:directive> <name pos:line="153" pos:column="8">PF_INET6<pos:position pos:line="153" pos:column="16"/></name></cpp:ifdef>
  <if pos:line="154" pos:column="3">if<condition pos:line="154" pos:column="5">(<expr><operator pos:line="154" pos:column="6">!<pos:position pos:line="154" pos:column="7"/></operator><name><name pos:line="154" pos:column="7">conn<pos:position pos:line="154" pos:column="11"/></name><operator pos:line="154" pos:column="11">-&gt;<pos:position pos:line="154" pos:column="16"/></operator><name pos:line="154" pos:column="13">bits<pos:position pos:line="154" pos:column="17"/></name><operator pos:line="154" pos:column="17">.<pos:position pos:line="154" pos:column="18"/></operator><name pos:line="154" pos:column="18">ftp_use_eprt<pos:position pos:line="154" pos:column="30"/></name></name> <operator pos:line="154" pos:column="31">&amp;&amp;<pos:position pos:line="154" pos:column="41"/></operator> <name><name pos:line="154" pos:column="34">conn<pos:position pos:line="154" pos:column="38"/></name><operator pos:line="154" pos:column="38">-&gt;<pos:position pos:line="154" pos:column="43"/></operator><name pos:line="154" pos:column="40">bits<pos:position pos:line="154" pos:column="44"/></name><operator pos:line="154" pos:column="44">.<pos:position pos:line="154" pos:column="45"/></operator><name pos:line="154" pos:column="45">ipv6<pos:position pos:line="154" pos:column="49"/></name></name></expr>)<pos:position pos:line="154" pos:column="50"/></condition><then pos:line="154" pos:column="50">
    <comment type="block" pos:line="155" pos:column="5">/* EPRT is disabled but we are connected to a IPv6 host, so we ignore the
       request and enable EPRT again! */</comment>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="157" pos:column="5">conn<pos:position pos:line="157" pos:column="9"/></name><operator pos:line="157" pos:column="9">-&gt;<pos:position pos:line="157" pos:column="14"/></operator><name pos:line="157" pos:column="11">bits<pos:position pos:line="157" pos:column="15"/></name><operator pos:line="157" pos:column="15">.<pos:position pos:line="157" pos:column="16"/></operator><name pos:line="157" pos:column="16">ftp_use_eprt<pos:position pos:line="157" pos:column="28"/></name></name> <operator pos:line="157" pos:column="29">=<pos:position pos:line="157" pos:column="30"/></operator> <name pos:line="157" pos:column="31">TRUE<pos:position pos:line="157" pos:column="35"/></name></expr>;<pos:position pos:line="157" pos:column="36"/></expr_stmt></block></then></if>
<cpp:endif pos:line="158" pos:column="1">#<cpp:directive pos:line="158" pos:column="2">endif<pos:position pos:line="158" pos:column="7"/></cpp:directive></cpp:endif>

  <for pos:line="160" pos:column="3">for <control pos:line="160" pos:column="7">(<init pos:line="160" pos:column="8">;<pos:position pos:line="160" pos:column="9"/></init> <condition><expr><name pos:line="160" pos:column="10">fcmd<pos:position pos:line="160" pos:column="14"/></name> <operator pos:line="160" pos:column="15">!=<pos:position pos:line="160" pos:column="17"/></operator> <name pos:line="160" pos:column="18">DONE<pos:position pos:line="160" pos:column="22"/></name></expr>;<pos:position pos:line="160" pos:column="23"/></condition> <incr><expr><name pos:line="160" pos:column="24">fcmd<pos:position pos:line="160" pos:column="28"/></name><operator pos:line="160" pos:column="28">++<pos:position pos:line="160" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="160" pos:column="31"/></control> <block pos:line="160" pos:column="32">{

    <if pos:line="162" pos:column="5">if<condition pos:line="162" pos:column="7">(<expr><operator pos:line="162" pos:column="8">!<pos:position pos:line="162" pos:column="9"/></operator><name><name pos:line="162" pos:column="9">conn<pos:position pos:line="162" pos:column="13"/></name><operator pos:line="162" pos:column="13">-&gt;<pos:position pos:line="162" pos:column="18"/></operator><name pos:line="162" pos:column="15">bits<pos:position pos:line="162" pos:column="19"/></name><operator pos:line="162" pos:column="19">.<pos:position pos:line="162" pos:column="20"/></operator><name pos:line="162" pos:column="20">ftp_use_eprt<pos:position pos:line="162" pos:column="32"/></name></name> <operator pos:line="162" pos:column="33">&amp;&amp;<pos:position pos:line="162" pos:column="43"/></operator> <operator pos:line="162" pos:column="36">(<pos:position pos:line="162" pos:column="37"/></operator><name pos:line="162" pos:column="37">EPRT<pos:position pos:line="162" pos:column="41"/></name> <operator pos:line="162" pos:column="42">==<pos:position pos:line="162" pos:column="44"/></operator> <name pos:line="162" pos:column="45">fcmd<pos:position pos:line="162" pos:column="49"/></name><operator pos:line="162" pos:column="49">)<pos:position pos:line="162" pos:column="50"/></operator></expr>)<pos:position pos:line="162" pos:column="51"/></condition><then pos:line="162" pos:column="51">
      <comment type="block" pos:line="163" pos:column="7">/* if disabled, goto next */</comment>
      <block type="pseudo"><continue pos:line="164" pos:column="7">continue;<pos:position pos:line="164" pos:column="16"/></continue></block></then></if>

    <switch pos:line="166" pos:column="5">switch <condition pos:line="166" pos:column="12">(<expr><name><name pos:line="166" pos:column="13">sa<pos:position pos:line="166" pos:column="15"/></name><operator pos:line="166" pos:column="15">-&gt;<pos:position pos:line="166" pos:column="20"/></operator><name pos:line="166" pos:column="17">sa_family<pos:position pos:line="166" pos:column="26"/></name></name></expr>)<pos:position pos:line="166" pos:column="27"/></condition> <block pos:line="166" pos:column="28">{
    <case pos:line="167" pos:column="5">case <expr><name pos:line="167" pos:column="10">AF_INET<pos:position pos:line="167" pos:column="17"/></name></expr>:<pos:position pos:line="167" pos:column="18"/></case>
      <expr_stmt><expr><name pos:line="168" pos:column="7">port<pos:position pos:line="168" pos:column="11"/></name> <operator pos:line="168" pos:column="12">=<pos:position pos:line="168" pos:column="13"/></operator> <call><name pos:line="168" pos:column="14">ntohs<pos:position pos:line="168" pos:column="19"/></name><argument_list pos:line="168" pos:column="19">(<argument><expr><operator pos:line="168" pos:column="20">(<pos:position pos:line="168" pos:column="21"/></operator><operator pos:line="168" pos:column="21">(<pos:position pos:line="168" pos:column="22"/></operator>struct <name pos:line="168" pos:column="29">sockaddr_in<pos:position pos:line="168" pos:column="40"/></name> <operator pos:line="168" pos:column="41">*<pos:position pos:line="168" pos:column="42"/></operator><operator pos:line="168" pos:column="42">)<pos:position pos:line="168" pos:column="43"/></operator><name pos:line="168" pos:column="43">sa<pos:position pos:line="168" pos:column="45"/></name><operator pos:line="168" pos:column="45">)<pos:position pos:line="168" pos:column="46"/></operator><operator pos:line="168" pos:column="46">-&gt;<pos:position pos:line="168" pos:column="51"/></operator><name pos:line="168" pos:column="48">sin_port<pos:position pos:line="168" pos:column="56"/></name></expr></argument>)<pos:position pos:line="168" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="58"/></expr_stmt>
      <break pos:line="169" pos:column="7">break;<pos:position pos:line="169" pos:column="13"/></break>
    <case pos:line="170" pos:column="5">case <expr><name pos:line="170" pos:column="10">AF_INET6<pos:position pos:line="170" pos:column="18"/></name></expr>:<pos:position pos:line="170" pos:column="19"/></case>
      <expr_stmt><expr><name pos:line="171" pos:column="7">port<pos:position pos:line="171" pos:column="11"/></name> <operator pos:line="171" pos:column="12">=<pos:position pos:line="171" pos:column="13"/></operator> <call><name pos:line="171" pos:column="14">ntohs<pos:position pos:line="171" pos:column="19"/></name><argument_list pos:line="171" pos:column="19">(<argument><expr><operator pos:line="171" pos:column="20">(<pos:position pos:line="171" pos:column="21"/></operator><operator pos:line="171" pos:column="21">(<pos:position pos:line="171" pos:column="22"/></operator>struct <name pos:line="171" pos:column="29">sockaddr_in6<pos:position pos:line="171" pos:column="41"/></name> <operator pos:line="171" pos:column="42">*<pos:position pos:line="171" pos:column="43"/></operator><operator pos:line="171" pos:column="43">)<pos:position pos:line="171" pos:column="44"/></operator><name pos:line="171" pos:column="44">sa<pos:position pos:line="171" pos:column="46"/></name><operator pos:line="171" pos:column="46">)<pos:position pos:line="171" pos:column="47"/></operator><operator pos:line="171" pos:column="47">-&gt;<pos:position pos:line="171" pos:column="52"/></operator><name pos:line="171" pos:column="49">sin6_port<pos:position pos:line="171" pos:column="58"/></name></expr></argument>)<pos:position pos:line="171" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="60"/></expr_stmt>
      <break pos:line="172" pos:column="7">break;<pos:position pos:line="172" pos:column="13"/></break>
    <default pos:line="173" pos:column="5">default:<pos:position pos:line="173" pos:column="13"/></default>
      <break pos:line="174" pos:column="7">break;<pos:position pos:line="174" pos:column="13"/></break>
    }<pos:position pos:line="175" pos:column="6"/></block></switch>

    <if pos:line="177" pos:column="5">if<condition pos:line="177" pos:column="7">(<expr><name pos:line="177" pos:column="8">EPRT<pos:position pos:line="177" pos:column="12"/></name> <operator pos:line="177" pos:column="13">==<pos:position pos:line="177" pos:column="15"/></operator> <name pos:line="177" pos:column="16">fcmd<pos:position pos:line="177" pos:column="20"/></name></expr>)<pos:position pos:line="177" pos:column="21"/></condition><then pos:line="177" pos:column="21"> <block pos:line="177" pos:column="22">{
      <comment type="block" pos:line="178" pos:column="7">/*
       * Two fine examples from RFC2428;
       *
       * EPRT |1|132.235.1.2|6275|
       *
       * EPRT |2|1080::8:800:200C:417A|5282|
       */</comment>

      <expr_stmt><expr><name pos:line="186" pos:column="7">result<pos:position pos:line="186" pos:column="13"/></name> <operator pos:line="186" pos:column="14">=<pos:position pos:line="186" pos:column="15"/></operator> <call><name pos:line="186" pos:column="16">Curl_nbftpsendf<pos:position pos:line="186" pos:column="31"/></name><argument_list pos:line="186" pos:column="31">(<argument><expr><name pos:line="186" pos:column="32">conn<pos:position pos:line="186" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="186" pos:column="38">"%s |%d|%s|%d|"<pos:position pos:line="186" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="55">mode<pos:position pos:line="186" pos:column="59"/></name><index pos:line="186" pos:column="59">[<expr><name pos:line="186" pos:column="60">fcmd<pos:position pos:line="186" pos:column="64"/></name></expr>]<pos:position pos:line="186" pos:column="65"/></index></name></expr></argument>,
                               <argument><expr><ternary><condition><expr><name><name pos:line="187" pos:column="32">ai<pos:position pos:line="187" pos:column="34"/></name><operator pos:line="187" pos:column="34">-&gt;<pos:position pos:line="187" pos:column="39"/></operator><name pos:line="187" pos:column="36">ai_family<pos:position pos:line="187" pos:column="45"/></name></name> <operator pos:line="187" pos:column="46">==<pos:position pos:line="187" pos:column="48"/></operator> <name pos:line="187" pos:column="49">AF_INET<pos:position pos:line="187" pos:column="56"/></name></expr>?<pos:position pos:line="187" pos:column="57"/></condition><then><expr><literal type="number" pos:line="187" pos:column="57">1<pos:position pos:line="187" pos:column="58"/></literal></expr></then><else pos:line="187" pos:column="58">:<expr><literal type="number" pos:line="187" pos:column="59">2<pos:position pos:line="187" pos:column="60"/></literal></expr></else></ternary></expr></argument>,
                               <argument><expr><name pos:line="188" pos:column="32">myhost<pos:position pos:line="188" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="40">port<pos:position pos:line="188" pos:column="44"/></name></expr></argument>)<pos:position pos:line="188" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="46"/></expr_stmt>
      <if pos:line="189" pos:column="7">if<condition pos:line="189" pos:column="9">(<expr><name pos:line="189" pos:column="10">result<pos:position pos:line="189" pos:column="16"/></name></expr>)<pos:position pos:line="189" pos:column="17"/></condition><then pos:line="189" pos:column="17">
        <block type="pseudo"><return pos:line="190" pos:column="9">return <expr><name pos:line="190" pos:column="16">result<pos:position pos:line="190" pos:column="22"/></name></expr>;<pos:position pos:line="190" pos:column="23"/></return></block></then></if>
      <break pos:line="191" pos:column="7">break;<pos:position pos:line="191" pos:column="13"/></break>
    }<pos:position pos:line="192" pos:column="6"/></block></then>
    <elseif pos:line="193" pos:column="5">else <if pos:line="193" pos:column="10">if<condition pos:line="193" pos:column="12">(<expr><name pos:line="193" pos:column="13">PORT<pos:position pos:line="193" pos:column="17"/></name> <operator pos:line="193" pos:column="18">==<pos:position pos:line="193" pos:column="20"/></operator> <name pos:line="193" pos:column="21">fcmd<pos:position pos:line="193" pos:column="25"/></name></expr>)<pos:position pos:line="193" pos:column="26"/></condition><then pos:line="193" pos:column="26"> <block pos:line="193" pos:column="27">{
      <decl_stmt><decl><type><name pos:line="194" pos:column="7">char<pos:position pos:line="194" pos:column="11"/></name> <modifier pos:line="194" pos:column="12">*<pos:position pos:line="194" pos:column="13"/></modifier></type><name pos:line="194" pos:column="13">source<pos:position pos:line="194" pos:column="19"/></name> <init pos:line="194" pos:column="20">= <expr><name pos:line="194" pos:column="22">myhost<pos:position pos:line="194" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="194" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="195" pos:column="7">char<pos:position pos:line="195" pos:column="11"/></name> <modifier pos:line="195" pos:column="12">*<pos:position pos:line="195" pos:column="13"/></modifier></type><name pos:line="195" pos:column="13">dest<pos:position pos:line="195" pos:column="17"/></name> <init pos:line="195" pos:column="18">= <expr><name pos:line="195" pos:column="20">tmp<pos:position pos:line="195" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="195" pos:column="24"/></decl_stmt>

      <if pos:line="197" pos:column="7">if<condition pos:line="197" pos:column="9">(<expr><operator pos:line="197" pos:column="10">(<pos:position pos:line="197" pos:column="11"/></operator><name pos:line="197" pos:column="11">PORT<pos:position pos:line="197" pos:column="15"/></name> <operator pos:line="197" pos:column="16">==<pos:position pos:line="197" pos:column="18"/></operator> <name pos:line="197" pos:column="19">fcmd<pos:position pos:line="197" pos:column="23"/></name><operator pos:line="197" pos:column="23">)<pos:position pos:line="197" pos:column="24"/></operator> <operator pos:line="197" pos:column="25">&amp;&amp;<pos:position pos:line="197" pos:column="35"/></operator> <name><name pos:line="197" pos:column="28">ai<pos:position pos:line="197" pos:column="30"/></name><operator pos:line="197" pos:column="30">-&gt;<pos:position pos:line="197" pos:column="35"/></operator><name pos:line="197" pos:column="32">ai_family<pos:position pos:line="197" pos:column="41"/></name></name> <operator pos:line="197" pos:column="42">!=<pos:position pos:line="197" pos:column="44"/></operator> <name pos:line="197" pos:column="45">AF_INET<pos:position pos:line="197" pos:column="52"/></name></expr>)<pos:position pos:line="197" pos:column="53"/></condition><then pos:line="197" pos:column="53">
        <block type="pseudo"><continue pos:line="198" pos:column="9">continue;<pos:position pos:line="198" pos:column="18"/></continue></block></then></if>

      <comment type="block" pos:line="200" pos:column="7">/* translate x.x.x.x to x,x,x,x */</comment>
      <while pos:line="201" pos:column="7">while<condition pos:line="201" pos:column="12">(<expr><name pos:line="201" pos:column="13">source<pos:position pos:line="201" pos:column="19"/></name> <operator pos:line="201" pos:column="20">&amp;&amp;<pos:position pos:line="201" pos:column="30"/></operator> <operator pos:line="201" pos:column="23">*<pos:position pos:line="201" pos:column="24"/></operator><name pos:line="201" pos:column="24">source<pos:position pos:line="201" pos:column="30"/></name></expr>)<pos:position pos:line="201" pos:column="31"/></condition> <block pos:line="201" pos:column="32">{
        <if pos:line="202" pos:column="9">if<condition pos:line="202" pos:column="11">(<expr><operator pos:line="202" pos:column="12">*<pos:position pos:line="202" pos:column="13"/></operator><name pos:line="202" pos:column="13">source<pos:position pos:line="202" pos:column="19"/></name> <operator pos:line="202" pos:column="20">==<pos:position pos:line="202" pos:column="22"/></operator> <literal type="char" pos:line="202" pos:column="23">'.'<pos:position pos:line="202" pos:column="26"/></literal></expr>)<pos:position pos:line="202" pos:column="27"/></condition><then pos:line="202" pos:column="27">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="203" pos:column="11">*<pos:position pos:line="203" pos:column="12"/></operator><name pos:line="203" pos:column="12">dest<pos:position pos:line="203" pos:column="16"/></name><operator pos:line="203" pos:column="16">=<pos:position pos:line="203" pos:column="17"/></operator><literal type="char" pos:line="203" pos:column="17">','<pos:position pos:line="203" pos:column="20"/></literal></expr>;<pos:position pos:line="203" pos:column="21"/></expr_stmt></block></then>
        <else pos:line="204" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><operator pos:line="205" pos:column="11">*<pos:position pos:line="205" pos:column="12"/></operator><name pos:line="205" pos:column="12">dest<pos:position pos:line="205" pos:column="16"/></name> <operator pos:line="205" pos:column="17">=<pos:position pos:line="205" pos:column="18"/></operator> <operator pos:line="205" pos:column="19">*<pos:position pos:line="205" pos:column="20"/></operator><name pos:line="205" pos:column="20">source<pos:position pos:line="205" pos:column="26"/></name></expr>;<pos:position pos:line="205" pos:column="27"/></expr_stmt></block></else></if>
        <expr_stmt><expr><name pos:line="206" pos:column="9">dest<pos:position pos:line="206" pos:column="13"/></name><operator pos:line="206" pos:column="13">++<pos:position pos:line="206" pos:column="15"/></operator></expr>;<pos:position pos:line="206" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="207" pos:column="9">source<pos:position pos:line="207" pos:column="15"/></name><operator pos:line="207" pos:column="15">++<pos:position pos:line="207" pos:column="17"/></operator></expr>;<pos:position pos:line="207" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="208" pos:column="8"/></block></while>
      <expr_stmt><expr><operator pos:line="209" pos:column="7">*<pos:position pos:line="209" pos:column="8"/></operator><name pos:line="209" pos:column="8">dest<pos:position pos:line="209" pos:column="12"/></name> <operator pos:line="209" pos:column="13">=<pos:position pos:line="209" pos:column="14"/></operator> <literal type="number" pos:line="209" pos:column="15">0<pos:position pos:line="209" pos:column="16"/></literal></expr>;<pos:position pos:line="209" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="210" pos:column="7">snprintf<pos:position pos:line="210" pos:column="15"/></name><argument_list pos:line="210" pos:column="15">(<argument><expr><name pos:line="210" pos:column="16">dest<pos:position pos:line="210" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="210" pos:column="22">20<pos:position pos:line="210" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="210" pos:column="26">",%d,%d"<pos:position pos:line="210" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="210" pos:column="36">port<pos:position pos:line="210" pos:column="40"/></name><operator pos:line="210" pos:column="40">&gt;&gt;<pos:position pos:line="210" pos:column="45"/></operator><literal type="number" pos:line="210" pos:column="42">8<pos:position pos:line="210" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="210" pos:column="45">port<pos:position pos:line="210" pos:column="49"/></name><operator pos:line="210" pos:column="49">&amp;<pos:position pos:line="210" pos:column="54"/></operator><literal type="number" pos:line="210" pos:column="50">0xff<pos:position pos:line="210" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="210" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="56"/></expr_stmt>

      <expr_stmt><expr><name pos:line="212" pos:column="7">result<pos:position pos:line="212" pos:column="13"/></name> <operator pos:line="212" pos:column="14">=<pos:position pos:line="212" pos:column="15"/></operator> <call><name pos:line="212" pos:column="16">Curl_nbftpsendf<pos:position pos:line="212" pos:column="31"/></name><argument_list pos:line="212" pos:column="31">(<argument><expr><name pos:line="212" pos:column="32">conn<pos:position pos:line="212" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="212" pos:column="38">"%s %s"<pos:position pos:line="212" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="47">mode<pos:position pos:line="212" pos:column="51"/></name><index pos:line="212" pos:column="51">[<expr><name pos:line="212" pos:column="52">fcmd<pos:position pos:line="212" pos:column="56"/></name></expr>]<pos:position pos:line="212" pos:column="57"/></index></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="59">tmp<pos:position pos:line="212" pos:column="62"/></name></expr></argument>)<pos:position pos:line="212" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="64"/></expr_stmt>
      <if pos:line="213" pos:column="7">if<condition pos:line="213" pos:column="9">(<expr><name pos:line="213" pos:column="10">result<pos:position pos:line="213" pos:column="16"/></name></expr>)<pos:position pos:line="213" pos:column="17"/></condition><then pos:line="213" pos:column="17">
        <block type="pseudo"><return pos:line="214" pos:column="9">return <expr><name pos:line="214" pos:column="16">result<pos:position pos:line="214" pos:column="22"/></name></expr>;<pos:position pos:line="214" pos:column="23"/></return></block></then></if>
      <break pos:line="215" pos:column="7">break;<pos:position pos:line="215" pos:column="13"/></break>
    }<pos:position pos:line="216" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="217" pos:column="4"/></block></for>

  <comment type="block" pos:line="219" pos:column="3">/* store which command was sent */</comment>
  <expr_stmt><expr><name><name pos:line="220" pos:column="3">ftpc<pos:position pos:line="220" pos:column="7"/></name><operator pos:line="220" pos:column="7">-&gt;<pos:position pos:line="220" pos:column="12"/></operator><name pos:line="220" pos:column="9">count1<pos:position pos:line="220" pos:column="15"/></name></name> <operator pos:line="220" pos:column="16">=<pos:position pos:line="220" pos:column="17"/></operator> <name pos:line="220" pos:column="18">fcmd<pos:position pos:line="220" pos:column="22"/></name></expr>;<pos:position pos:line="220" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="222" pos:column="3">/* we set the secondary socket variable to this for now, it is only so that
     the cleanup function will close it in case we fail before the true
     secondary stuff is made */</comment>
  <if pos:line="225" pos:column="3">if<condition pos:line="225" pos:column="5">(<expr><name pos:line="225" pos:column="6">CURL_SOCKET_BAD<pos:position pos:line="225" pos:column="21"/></name> <operator pos:line="225" pos:column="22">!=<pos:position pos:line="225" pos:column="24"/></operator> <name><name pos:line="225" pos:column="25">conn<pos:position pos:line="225" pos:column="29"/></name><operator pos:line="225" pos:column="29">-&gt;<pos:position pos:line="225" pos:column="34"/></operator><name pos:line="225" pos:column="31">sock<pos:position pos:line="225" pos:column="35"/></name><index pos:line="225" pos:column="35">[<expr><name pos:line="225" pos:column="36">SECONDARYSOCKET<pos:position pos:line="225" pos:column="51"/></name></expr>]<pos:position pos:line="225" pos:column="52"/></index></name></expr>)<pos:position pos:line="225" pos:column="53"/></condition><then pos:line="225" pos:column="53">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="226" pos:column="5">sclose<pos:position pos:line="226" pos:column="11"/></name><argument_list pos:line="226" pos:column="11">(<argument><expr><name><name pos:line="226" pos:column="12">conn<pos:position pos:line="226" pos:column="16"/></name><operator pos:line="226" pos:column="16">-&gt;<pos:position pos:line="226" pos:column="21"/></operator><name pos:line="226" pos:column="18">sock<pos:position pos:line="226" pos:column="22"/></name><index pos:line="226" pos:column="22">[<expr><name pos:line="226" pos:column="23">SECONDARYSOCKET<pos:position pos:line="226" pos:column="38"/></name></expr>]<pos:position pos:line="226" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="226" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="41"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name><name pos:line="227" pos:column="3">conn<pos:position pos:line="227" pos:column="7"/></name><operator pos:line="227" pos:column="7">-&gt;<pos:position pos:line="227" pos:column="12"/></operator><name pos:line="227" pos:column="9">sock<pos:position pos:line="227" pos:column="13"/></name><index pos:line="227" pos:column="13">[<expr><name pos:line="227" pos:column="14">SECONDARYSOCKET<pos:position pos:line="227" pos:column="29"/></name></expr>]<pos:position pos:line="227" pos:column="30"/></index></name> <operator pos:line="227" pos:column="31">=<pos:position pos:line="227" pos:column="32"/></operator> <name pos:line="227" pos:column="33">portsock<pos:position pos:line="227" pos:column="41"/></name></expr>;<pos:position pos:line="227" pos:column="42"/></expr_stmt>

<cpp:else pos:line="229" pos:column="1">#<cpp:directive pos:line="229" pos:column="2">else<pos:position pos:line="229" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" format="doxygen" pos:line="230" pos:column="3">/******************************************************************
   * IPv4-specific section
   */</comment>
  <decl_stmt><decl><type><name><name pos:line="233" pos:column="3">struct<pos:position pos:line="233" pos:column="9"/></name> <name pos:line="233" pos:column="10">sockaddr_in<pos:position pos:line="233" pos:column="21"/></name></name></type> <name pos:line="233" pos:column="22">sa<pos:position pos:line="233" pos:column="24"/></name></decl>;<pos:position pos:line="233" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="234" pos:column="3">unsigned<pos:position pos:line="234" pos:column="11"/></name> <name pos:line="234" pos:column="12">short<pos:position pos:line="234" pos:column="17"/></name></type> <name pos:line="234" pos:column="18">porttouse<pos:position pos:line="234" pos:column="27"/></name></decl>;<pos:position pos:line="234" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="235" pos:column="3">bool<pos:position pos:line="235" pos:column="7"/></name></type> <name pos:line="235" pos:column="8">sa_filled_in<pos:position pos:line="235" pos:column="20"/></name> <init pos:line="235" pos:column="21">= <expr><name pos:line="235" pos:column="23">FALSE<pos:position pos:line="235" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="235" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="236" pos:column="3">Curl_addrinfo<pos:position pos:line="236" pos:column="16"/></name> <modifier pos:line="236" pos:column="17">*<pos:position pos:line="236" pos:column="18"/></modifier></type><name pos:line="236" pos:column="18">addr<pos:position pos:line="236" pos:column="22"/></name> <init pos:line="236" pos:column="23">= <expr><name pos:line="236" pos:column="25">NULL<pos:position pos:line="236" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="236" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="237" pos:column="3">unsigned<pos:position pos:line="237" pos:column="11"/></name> <name pos:line="237" pos:column="12">short<pos:position pos:line="237" pos:column="17"/></name></type> <name><name pos:line="237" pos:column="18">ip<pos:position pos:line="237" pos:column="20"/></name><index pos:line="237" pos:column="20">[<expr><literal type="number" pos:line="237" pos:column="21">4<pos:position pos:line="237" pos:column="22"/></literal></expr>]<pos:position pos:line="237" pos:column="23"/></index></name></decl>;<pos:position pos:line="237" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="238" pos:column="3">bool<pos:position pos:line="238" pos:column="7"/></name></type> <name pos:line="238" pos:column="8">freeaddr<pos:position pos:line="238" pos:column="16"/></name> <init pos:line="238" pos:column="17">= <expr><name pos:line="238" pos:column="19">TRUE<pos:position pos:line="238" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="238" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="239" pos:column="3">socklen_t<pos:position pos:line="239" pos:column="12"/></name></type> <name pos:line="239" pos:column="13">sslen<pos:position pos:line="239" pos:column="18"/></name> <init pos:line="239" pos:column="19">= <expr><sizeof pos:line="239" pos:column="21">sizeof<argument_list pos:line="239" pos:column="27">(<argument><expr><name pos:line="239" pos:column="28">sa<pos:position pos:line="239" pos:column="30"/></name></expr></argument>)<pos:position pos:line="239" pos:column="31"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="239" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="240" pos:column="3">const<pos:position pos:line="240" pos:column="8"/></specifier> <name pos:line="240" pos:column="9">char<pos:position pos:line="240" pos:column="13"/></name> <modifier pos:line="240" pos:column="14">*<pos:position pos:line="240" pos:column="15"/></modifier></type><name pos:line="240" pos:column="15">ftpportstr<pos:position pos:line="240" pos:column="25"/></name> <init pos:line="240" pos:column="26">= <expr><name><name pos:line="240" pos:column="28">data<pos:position pos:line="240" pos:column="32"/></name><operator pos:line="240" pos:column="32">-&gt;<pos:position pos:line="240" pos:column="37"/></operator><name pos:line="240" pos:column="34">set<pos:position pos:line="240" pos:column="37"/></name><operator pos:line="240" pos:column="37">.<pos:position pos:line="240" pos:column="38"/></operator><name pos:line="240" pos:column="38">str<pos:position pos:line="240" pos:column="41"/></name><index pos:line="240" pos:column="41">[<expr><name pos:line="240" pos:column="42">STRING_FTPPORT<pos:position pos:line="240" pos:column="56"/></name></expr>]<pos:position pos:line="240" pos:column="57"/></index></name></expr></init></decl>;<pos:position pos:line="240" pos:column="58"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="242" pos:column="3">(<pos:position pos:line="242" pos:column="4"/></operator><name pos:line="242" pos:column="4">void<pos:position pos:line="242" pos:column="8"/></name><operator pos:line="242" pos:column="8">)<pos:position pos:line="242" pos:column="9"/></operator><name pos:line="242" pos:column="9">fcmd<pos:position pos:line="242" pos:column="13"/></name></expr>;<pos:position pos:line="242" pos:column="14"/></expr_stmt> <comment type="block" pos:line="242" pos:column="15">/* not used in the IPv4 code */</comment>
  <if pos:line="243" pos:column="3">if<condition pos:line="243" pos:column="5">(<expr><name pos:line="243" pos:column="6">ftpportstr<pos:position pos:line="243" pos:column="16"/></name></expr>)<pos:position pos:line="243" pos:column="17"/></condition><then pos:line="243" pos:column="17"> <block pos:line="243" pos:column="18">{
    <decl_stmt><decl><type><name pos:line="244" pos:column="5">in_addr_t<pos:position pos:line="244" pos:column="14"/></name></type> <name pos:line="244" pos:column="15">in<pos:position pos:line="244" pos:column="17"/></name></decl>;<pos:position pos:line="244" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="246" pos:column="5">/* First check if the given name is an IP address */</comment>
    <expr_stmt><expr><name pos:line="247" pos:column="5">in<pos:position pos:line="247" pos:column="7"/></name><operator pos:line="247" pos:column="7">=<pos:position pos:line="247" pos:column="8"/></operator><call><name pos:line="247" pos:column="8">inet_addr<pos:position pos:line="247" pos:column="17"/></name><argument_list pos:line="247" pos:column="17">(<argument><expr><name pos:line="247" pos:column="18">ftpportstr<pos:position pos:line="247" pos:column="28"/></name></expr></argument>)<pos:position pos:line="247" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="30"/></expr_stmt>

    <if pos:line="249" pos:column="5">if<condition pos:line="249" pos:column="7">(<expr><name pos:line="249" pos:column="8">in<pos:position pos:line="249" pos:column="10"/></name> <operator pos:line="249" pos:column="11">!=<pos:position pos:line="249" pos:column="13"/></operator> <name pos:line="249" pos:column="14">CURL_INADDR_NONE<pos:position pos:line="249" pos:column="30"/></name></expr>)<pos:position pos:line="249" pos:column="31"/></condition><then pos:line="249" pos:column="31">
      <comment type="block" pos:line="250" pos:column="7">/* this is an IPv4 address */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="251" pos:column="7">addr<pos:position pos:line="251" pos:column="11"/></name> <operator pos:line="251" pos:column="12">=<pos:position pos:line="251" pos:column="13"/></operator> <call><name pos:line="251" pos:column="14">Curl_ip2addr<pos:position pos:line="251" pos:column="26"/></name><argument_list pos:line="251" pos:column="26">(<argument><expr><name pos:line="251" pos:column="27">in<pos:position pos:line="251" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="251" pos:column="31">ftpportstr<pos:position pos:line="251" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="251" pos:column="43">0<pos:position pos:line="251" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="251" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="46"/></expr_stmt></block></then>
    <else pos:line="252" pos:column="5">else <block pos:line="252" pos:column="10">{
      <if pos:line="253" pos:column="7">if<condition pos:line="253" pos:column="9">(<expr><call><name pos:line="253" pos:column="10">Curl_if2ip<pos:position pos:line="253" pos:column="20"/></name><argument_list pos:line="253" pos:column="20">(<argument><expr><name pos:line="253" pos:column="21">ftpportstr<pos:position pos:line="253" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="253" pos:column="33">myhost<pos:position pos:line="253" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="253" pos:column="41">sizeof<argument_list pos:line="253" pos:column="47">(<argument><expr><name pos:line="253" pos:column="48">myhost<pos:position pos:line="253" pos:column="54"/></name></expr></argument>)<pos:position pos:line="253" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="253" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="253" pos:column="57"/></condition><then pos:line="253" pos:column="57"> <block pos:line="253" pos:column="58">{
        <comment type="block" pos:line="254" pos:column="9">/* The interface to IP conversion provided a dotted address */</comment>
        <expr_stmt><expr><name pos:line="255" pos:column="9">in<pos:position pos:line="255" pos:column="11"/></name><operator pos:line="255" pos:column="11">=<pos:position pos:line="255" pos:column="12"/></operator><call><name pos:line="255" pos:column="12">inet_addr<pos:position pos:line="255" pos:column="21"/></name><argument_list pos:line="255" pos:column="21">(<argument><expr><name pos:line="255" pos:column="22">myhost<pos:position pos:line="255" pos:column="28"/></name></expr></argument>)<pos:position pos:line="255" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="256" pos:column="9">addr<pos:position pos:line="256" pos:column="13"/></name> <operator pos:line="256" pos:column="14">=<pos:position pos:line="256" pos:column="15"/></operator> <call><name pos:line="256" pos:column="16">Curl_ip2addr<pos:position pos:line="256" pos:column="28"/></name><argument_list pos:line="256" pos:column="28">(<argument><expr><name pos:line="256" pos:column="29">in<pos:position pos:line="256" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="256" pos:column="33">myhost<pos:position pos:line="256" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="256" pos:column="41">0<pos:position pos:line="256" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="256" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="257" pos:column="8"/></block></then>
      <elseif pos:line="258" pos:column="7">else <if pos:line="258" pos:column="12">if<condition pos:line="258" pos:column="14">(<expr><call><name pos:line="258" pos:column="15">strlen<pos:position pos:line="258" pos:column="21"/></name><argument_list pos:line="258" pos:column="21">(<argument><expr><name pos:line="258" pos:column="22">ftpportstr<pos:position pos:line="258" pos:column="32"/></name></expr></argument>)<pos:position pos:line="258" pos:column="33"/></argument_list></call><operator pos:line="258" pos:column="33">&gt;<pos:position pos:line="258" pos:column="37"/></operator> <literal type="number" pos:line="258" pos:column="35">1<pos:position pos:line="258" pos:column="36"/></literal></expr>)<pos:position pos:line="258" pos:column="37"/></condition><then pos:line="258" pos:column="37"> <block pos:line="258" pos:column="38">{
        <comment type="block" pos:line="259" pos:column="9">/* might be a host name! */</comment>
        <decl_stmt><decl><type><name><name pos:line="260" pos:column="9">struct<pos:position pos:line="260" pos:column="15"/></name> <name pos:line="260" pos:column="16">Curl_dns_entry<pos:position pos:line="260" pos:column="30"/></name></name> <modifier pos:line="260" pos:column="31">*<pos:position pos:line="260" pos:column="32"/></modifier></type><name pos:line="260" pos:column="32">h<pos:position pos:line="260" pos:column="33"/></name><init pos:line="260" pos:column="33">=<expr><name pos:line="260" pos:column="34">NULL<pos:position pos:line="260" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="260" pos:column="39"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="261" pos:column="9">int<pos:position pos:line="261" pos:column="12"/></name></type> <name pos:line="261" pos:column="13">rc<pos:position pos:line="261" pos:column="15"/></name> <init pos:line="261" pos:column="16">= <expr><call><name pos:line="261" pos:column="18">Curl_resolv<pos:position pos:line="261" pos:column="29"/></name><argument_list pos:line="261" pos:column="29">(<argument><expr><name pos:line="261" pos:column="30">conn<pos:position pos:line="261" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="261" pos:column="36">ftpportstr<pos:position pos:line="261" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="261" pos:column="48">0<pos:position pos:line="261" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="261" pos:column="51">&amp;<pos:position pos:line="261" pos:column="56"/></operator><name pos:line="261" pos:column="52">h<pos:position pos:line="261" pos:column="53"/></name></expr></argument>)<pos:position pos:line="261" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="261" pos:column="55"/></decl_stmt>
        <if pos:line="262" pos:column="9">if<condition pos:line="262" pos:column="11">(<expr><name pos:line="262" pos:column="12">rc<pos:position pos:line="262" pos:column="14"/></name> <operator pos:line="262" pos:column="15">==<pos:position pos:line="262" pos:column="17"/></operator> <name pos:line="262" pos:column="18">CURLRESOLV_PENDING<pos:position pos:line="262" pos:column="36"/></name></expr>)<pos:position pos:line="262" pos:column="37"/></condition><then pos:line="262" pos:column="37">
          <comment type="block" pos:line="263" pos:column="11">/* BLOCKING */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="264" pos:column="11">rc<pos:position pos:line="264" pos:column="13"/></name> <operator pos:line="264" pos:column="14">=<pos:position pos:line="264" pos:column="15"/></operator> <call><name pos:line="264" pos:column="16">Curl_wait_for_resolv<pos:position pos:line="264" pos:column="36"/></name><argument_list pos:line="264" pos:column="36">(<argument><expr><name pos:line="264" pos:column="37">conn<pos:position pos:line="264" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="264" pos:column="43">&amp;<pos:position pos:line="264" pos:column="48"/></operator><name pos:line="264" pos:column="44">h<pos:position pos:line="264" pos:column="45"/></name></expr></argument>)<pos:position pos:line="264" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="47"/></expr_stmt></block></then></if>
        <if pos:line="265" pos:column="9">if<condition pos:line="265" pos:column="11">(<expr><name pos:line="265" pos:column="12">h<pos:position pos:line="265" pos:column="13"/></name></expr>)<pos:position pos:line="265" pos:column="14"/></condition><then pos:line="265" pos:column="14"> <block pos:line="265" pos:column="15">{
          <expr_stmt><expr><name pos:line="266" pos:column="11">addr<pos:position pos:line="266" pos:column="15"/></name> <operator pos:line="266" pos:column="16">=<pos:position pos:line="266" pos:column="17"/></operator> <name><name pos:line="266" pos:column="18">h<pos:position pos:line="266" pos:column="19"/></name><operator pos:line="266" pos:column="19">-&gt;<pos:position pos:line="266" pos:column="24"/></operator><name pos:line="266" pos:column="21">addr<pos:position pos:line="266" pos:column="25"/></name></name></expr>;<pos:position pos:line="266" pos:column="26"/></expr_stmt>
          <comment type="block" pos:line="267" pos:column="11">/* when we return from this function, we can forget about this entry
             so we can unlock it now already */</comment>
          <expr_stmt><expr><call><name pos:line="269" pos:column="11">Curl_resolv_unlock<pos:position pos:line="269" pos:column="29"/></name><argument_list pos:line="269" pos:column="29">(<argument><expr><name pos:line="269" pos:column="30">data<pos:position pos:line="269" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="269" pos:column="36">h<pos:position pos:line="269" pos:column="37"/></name></expr></argument>)<pos:position pos:line="269" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="39"/></expr_stmt>

          <expr_stmt><expr><name pos:line="271" pos:column="11">freeaddr<pos:position pos:line="271" pos:column="19"/></name> <operator pos:line="271" pos:column="20">=<pos:position pos:line="271" pos:column="21"/></operator> <name pos:line="271" pos:column="22">FALSE<pos:position pos:line="271" pos:column="27"/></name></expr>;<pos:position pos:line="271" pos:column="28"/></expr_stmt> <comment type="block" pos:line="271" pos:column="29">/* make sure we don't free 'addr' in this function
                               since it points to a DNS cache entry! */</comment>
        }<pos:position pos:line="273" pos:column="10"/></block></then> <comment type="block" pos:line="273" pos:column="11">/* (h) */</comment>
        <else pos:line="274" pos:column="9">else <block pos:line="274" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="275" pos:column="11">infof<pos:position pos:line="275" pos:column="16"/></name><argument_list pos:line="275" pos:column="16">(<argument><expr><name pos:line="275" pos:column="17">data<pos:position pos:line="275" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="275" pos:column="23">"Failed to resolve host name %s\n"<pos:position pos:line="275" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="275" pos:column="59">ftpportstr<pos:position pos:line="275" pos:column="69"/></name></expr></argument>)<pos:position pos:line="275" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="71"/></expr_stmt>
        }<pos:position pos:line="276" pos:column="10"/></block></else></if>
      }<pos:position pos:line="277" pos:column="8"/></block></then></if></elseif></if> <comment type="block" pos:line="277" pos:column="9">/* strlen */</comment>
    }<pos:position pos:line="278" pos:column="6"/></block></else></if> <comment type="block" pos:line="278" pos:column="7">/* CURL_INADDR_NONE */</comment>
  }<pos:position pos:line="279" pos:column="4"/></block></then></if> <comment type="block" pos:line="279" pos:column="5">/* ftpportstr */</comment>

  <if pos:line="281" pos:column="3">if<condition pos:line="281" pos:column="5">(<expr><operator pos:line="281" pos:column="6">!<pos:position pos:line="281" pos:column="7"/></operator><name pos:line="281" pos:column="7">addr<pos:position pos:line="281" pos:column="11"/></name></expr>)<pos:position pos:line="281" pos:column="12"/></condition><then pos:line="281" pos:column="12"> <block pos:line="281" pos:column="13">{
    <comment type="block" pos:line="282" pos:column="5">/* pick a suitable default here */</comment>

    <if pos:line="284" pos:column="5">if<condition pos:line="284" pos:column="7">(<expr><call><name pos:line="284" pos:column="8">getsockname<pos:position pos:line="284" pos:column="19"/></name><argument_list pos:line="284" pos:column="19">(<argument><expr><name><name pos:line="284" pos:column="20">conn<pos:position pos:line="284" pos:column="24"/></name><operator pos:line="284" pos:column="24">-&gt;<pos:position pos:line="284" pos:column="29"/></operator><name pos:line="284" pos:column="26">sock<pos:position pos:line="284" pos:column="30"/></name><index pos:line="284" pos:column="30">[<expr><name pos:line="284" pos:column="31">FIRSTSOCKET<pos:position pos:line="284" pos:column="42"/></name></expr>]<pos:position pos:line="284" pos:column="43"/></index></name></expr></argument>,
                    <argument><expr><operator pos:line="285" pos:column="21">(<pos:position pos:line="285" pos:column="22"/></operator>struct <name pos:line="285" pos:column="29">sockaddr<pos:position pos:line="285" pos:column="37"/></name> <operator pos:line="285" pos:column="38">*<pos:position pos:line="285" pos:column="39"/></operator><operator pos:line="285" pos:column="39">)<pos:position pos:line="285" pos:column="40"/></operator><operator pos:line="285" pos:column="40">&amp;<pos:position pos:line="285" pos:column="45"/></operator><name pos:line="285" pos:column="41">sa<pos:position pos:line="285" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="285" pos:column="45">&amp;<pos:position pos:line="285" pos:column="50"/></operator><name pos:line="285" pos:column="46">sslen<pos:position pos:line="285" pos:column="51"/></name></expr></argument>)<pos:position pos:line="285" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="285" pos:column="53"/></condition><then pos:line="285" pos:column="53"> <block pos:line="285" pos:column="54">{
      <expr_stmt><expr><call><name pos:line="286" pos:column="7">failf<pos:position pos:line="286" pos:column="12"/></name><argument_list pos:line="286" pos:column="12">(<argument><expr><name pos:line="286" pos:column="13">data<pos:position pos:line="286" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="286" pos:column="19">"getsockname() failed: %s"<pos:position pos:line="286" pos:column="45"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="287" pos:column="11">Curl_strerror<pos:position pos:line="287" pos:column="24"/></name><argument_list pos:line="287" pos:column="24">(<argument><expr><name pos:line="287" pos:column="25">conn<pos:position pos:line="287" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="287" pos:column="31">SOCKERRNO<pos:position pos:line="287" pos:column="40"/></name></expr></argument>)<pos:position pos:line="287" pos:column="41"/></argument_list></call></expr></argument> )<pos:position pos:line="287" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="287" pos:column="44"/></expr_stmt>
      <return pos:line="288" pos:column="7">return <expr><name pos:line="288" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="288" pos:column="35"/></name></expr>;<pos:position pos:line="288" pos:column="36"/></return>
    }<pos:position pos:line="289" pos:column="6"/></block></then></if>
    <if pos:line="290" pos:column="5">if<condition pos:line="290" pos:column="7">(<expr><name pos:line="290" pos:column="8">sslen<pos:position pos:line="290" pos:column="13"/></name> <operator pos:line="290" pos:column="14">&gt;<pos:position pos:line="290" pos:column="18"/></operator> <operator pos:line="290" pos:column="16">(<pos:position pos:line="290" pos:column="17"/></operator><name pos:line="290" pos:column="17">socklen_t<pos:position pos:line="290" pos:column="26"/></name><operator pos:line="290" pos:column="26">)<pos:position pos:line="290" pos:column="27"/></operator><sizeof pos:line="290" pos:column="27">sizeof<argument_list pos:line="290" pos:column="33">(<argument><expr><name pos:line="290" pos:column="34">sa<pos:position pos:line="290" pos:column="36"/></name></expr></argument>)<pos:position pos:line="290" pos:column="37"/></argument_list></sizeof></expr>)<pos:position pos:line="290" pos:column="38"/></condition><then pos:line="290" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name pos:line="291" pos:column="7">sslen<pos:position pos:line="291" pos:column="12"/></name> <operator pos:line="291" pos:column="13">=<pos:position pos:line="291" pos:column="14"/></operator> <sizeof pos:line="291" pos:column="15">sizeof<argument_list pos:line="291" pos:column="21">(<argument><expr><name pos:line="291" pos:column="22">sa<pos:position pos:line="291" pos:column="24"/></name></expr></argument>)<pos:position pos:line="291" pos:column="25"/></argument_list></sizeof></expr>;<pos:position pos:line="291" pos:column="26"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="293" pos:column="5">sa_filled_in<pos:position pos:line="293" pos:column="17"/></name> <operator pos:line="293" pos:column="18">=<pos:position pos:line="293" pos:column="19"/></operator> <name pos:line="293" pos:column="20">TRUE<pos:position pos:line="293" pos:column="24"/></name></expr>;<pos:position pos:line="293" pos:column="25"/></expr_stmt> <comment type="block" pos:line="293" pos:column="26">/* the sa struct is filled in */</comment>
  }<pos:position pos:line="294" pos:column="4"/></block></then></if>

  <if pos:line="296" pos:column="3">if<condition pos:line="296" pos:column="5">(<expr><name pos:line="296" pos:column="6">addr<pos:position pos:line="296" pos:column="10"/></name> <operator pos:line="296" pos:column="11">||<pos:position pos:line="296" pos:column="13"/></operator> <name pos:line="296" pos:column="14">sa_filled_in<pos:position pos:line="296" pos:column="26"/></name></expr>)<pos:position pos:line="296" pos:column="27"/></condition><then pos:line="296" pos:column="27"> <block pos:line="296" pos:column="28">{
    <expr_stmt><expr><name pos:line="297" pos:column="5">portsock<pos:position pos:line="297" pos:column="13"/></name> <operator pos:line="297" pos:column="14">=<pos:position pos:line="297" pos:column="15"/></operator> <call><name pos:line="297" pos:column="16">socket<pos:position pos:line="297" pos:column="22"/></name><argument_list pos:line="297" pos:column="22">(<argument><expr><name pos:line="297" pos:column="23">AF_INET<pos:position pos:line="297" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="297" pos:column="32">SOCK_STREAM<pos:position pos:line="297" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="297" pos:column="45">0<pos:position pos:line="297" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="297" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="297" pos:column="48"/></expr_stmt>
    <if pos:line="298" pos:column="5">if<condition pos:line="298" pos:column="7">(<expr><name pos:line="298" pos:column="8">CURL_SOCKET_BAD<pos:position pos:line="298" pos:column="23"/></name> <operator pos:line="298" pos:column="24">!=<pos:position pos:line="298" pos:column="26"/></operator> <name pos:line="298" pos:column="27">portsock<pos:position pos:line="298" pos:column="35"/></name></expr>)<pos:position pos:line="298" pos:column="36"/></condition><then pos:line="298" pos:column="36"> <block pos:line="298" pos:column="37">{

      <comment type="block" pos:line="300" pos:column="7">/* we set the secondary socket variable to this for now, it
         is only so that the cleanup function will close it in case
         we fail before the true secondary stuff is made */</comment>
      <if pos:line="303" pos:column="7">if<condition pos:line="303" pos:column="9">(<expr><name pos:line="303" pos:column="10">CURL_SOCKET_BAD<pos:position pos:line="303" pos:column="25"/></name> <operator pos:line="303" pos:column="26">!=<pos:position pos:line="303" pos:column="28"/></operator> <name><name pos:line="303" pos:column="29">conn<pos:position pos:line="303" pos:column="33"/></name><operator pos:line="303" pos:column="33">-&gt;<pos:position pos:line="303" pos:column="38"/></operator><name pos:line="303" pos:column="35">sock<pos:position pos:line="303" pos:column="39"/></name><index pos:line="303" pos:column="39">[<expr><name pos:line="303" pos:column="40">SECONDARYSOCKET<pos:position pos:line="303" pos:column="55"/></name></expr>]<pos:position pos:line="303" pos:column="56"/></index></name></expr>)<pos:position pos:line="303" pos:column="57"/></condition><then pos:line="303" pos:column="57">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="304" pos:column="9">sclose<pos:position pos:line="304" pos:column="15"/></name><argument_list pos:line="304" pos:column="15">(<argument><expr><name><name pos:line="304" pos:column="16">conn<pos:position pos:line="304" pos:column="20"/></name><operator pos:line="304" pos:column="20">-&gt;<pos:position pos:line="304" pos:column="25"/></operator><name pos:line="304" pos:column="22">sock<pos:position pos:line="304" pos:column="26"/></name><index pos:line="304" pos:column="26">[<expr><name pos:line="304" pos:column="27">SECONDARYSOCKET<pos:position pos:line="304" pos:column="42"/></name></expr>]<pos:position pos:line="304" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="304" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="304" pos:column="45"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name><name pos:line="305" pos:column="7">conn<pos:position pos:line="305" pos:column="11"/></name><operator pos:line="305" pos:column="11">-&gt;<pos:position pos:line="305" pos:column="16"/></operator><name pos:line="305" pos:column="13">sock<pos:position pos:line="305" pos:column="17"/></name><index pos:line="305" pos:column="17">[<expr><name pos:line="305" pos:column="18">SECONDARYSOCKET<pos:position pos:line="305" pos:column="33"/></name></expr>]<pos:position pos:line="305" pos:column="34"/></index></name> <operator pos:line="305" pos:column="35">=<pos:position pos:line="305" pos:column="36"/></operator> <name pos:line="305" pos:column="37">portsock<pos:position pos:line="305" pos:column="45"/></name></expr>;<pos:position pos:line="305" pos:column="46"/></expr_stmt>

      <if pos:line="307" pos:column="7">if<condition pos:line="307" pos:column="9">(<expr><operator pos:line="307" pos:column="10">!<pos:position pos:line="307" pos:column="11"/></operator><name pos:line="307" pos:column="11">sa_filled_in<pos:position pos:line="307" pos:column="23"/></name></expr>)<pos:position pos:line="307" pos:column="24"/></condition><then pos:line="307" pos:column="24"> <block pos:line="307" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="308" pos:column="9">memcpy<pos:position pos:line="308" pos:column="15"/></name><argument_list pos:line="308" pos:column="15">(<argument><expr><operator pos:line="308" pos:column="16">&amp;<pos:position pos:line="308" pos:column="21"/></operator><name pos:line="308" pos:column="17">sa<pos:position pos:line="308" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="308" pos:column="21">addr<pos:position pos:line="308" pos:column="25"/></name><operator pos:line="308" pos:column="25">-&gt;<pos:position pos:line="308" pos:column="30"/></operator><name pos:line="308" pos:column="27">ai_addr<pos:position pos:line="308" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="308" pos:column="36">sslen<pos:position pos:line="308" pos:column="41"/></name></expr></argument>)<pos:position pos:line="308" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="309" pos:column="9">sa<pos:position pos:line="309" pos:column="11"/></name><operator pos:line="309" pos:column="11">.<pos:position pos:line="309" pos:column="12"/></operator><name pos:line="309" pos:column="12">sin_addr<pos:position pos:line="309" pos:column="20"/></name><operator pos:line="309" pos:column="20">.<pos:position pos:line="309" pos:column="21"/></operator><name pos:line="309" pos:column="21">s_addr<pos:position pos:line="309" pos:column="27"/></name></name> <operator pos:line="309" pos:column="28">=<pos:position pos:line="309" pos:column="29"/></operator> <name pos:line="309" pos:column="30">INADDR_ANY<pos:position pos:line="309" pos:column="40"/></name></expr>;<pos:position pos:line="309" pos:column="41"/></expr_stmt>
      }<pos:position pos:line="310" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="312" pos:column="7">sa<pos:position pos:line="312" pos:column="9"/></name><operator pos:line="312" pos:column="9">.<pos:position pos:line="312" pos:column="10"/></operator><name pos:line="312" pos:column="10">sin_port<pos:position pos:line="312" pos:column="18"/></name></name> <operator pos:line="312" pos:column="19">=<pos:position pos:line="312" pos:column="20"/></operator> <literal type="number" pos:line="312" pos:column="21">0<pos:position pos:line="312" pos:column="22"/></literal></expr>;<pos:position pos:line="312" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name pos:line="313" pos:column="7">sslen<pos:position pos:line="313" pos:column="12"/></name> <operator pos:line="313" pos:column="13">=<pos:position pos:line="313" pos:column="14"/></operator> <sizeof pos:line="313" pos:column="15">sizeof<argument_list pos:line="313" pos:column="21">(<argument><expr><name pos:line="313" pos:column="22">sa<pos:position pos:line="313" pos:column="24"/></name></expr></argument>)<pos:position pos:line="313" pos:column="25"/></argument_list></sizeof></expr>;<pos:position pos:line="313" pos:column="26"/></expr_stmt>

      <if pos:line="315" pos:column="7">if<condition pos:line="315" pos:column="9">(<expr><call><name pos:line="315" pos:column="10">bind<pos:position pos:line="315" pos:column="14"/></name><argument_list pos:line="315" pos:column="14">(<argument><expr><name pos:line="315" pos:column="15">portsock<pos:position pos:line="315" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="315" pos:column="25">(<pos:position pos:line="315" pos:column="26"/></operator>struct <name pos:line="315" pos:column="33">sockaddr<pos:position pos:line="315" pos:column="41"/></name> <operator pos:line="315" pos:column="42">*<pos:position pos:line="315" pos:column="43"/></operator><operator pos:line="315" pos:column="43">)<pos:position pos:line="315" pos:column="44"/></operator><operator pos:line="315" pos:column="44">&amp;<pos:position pos:line="315" pos:column="49"/></operator><name pos:line="315" pos:column="45">sa<pos:position pos:line="315" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="315" pos:column="49">sslen<pos:position pos:line="315" pos:column="54"/></name></expr></argument>)<pos:position pos:line="315" pos:column="55"/></argument_list></call> <operator pos:line="315" pos:column="56">==<pos:position pos:line="315" pos:column="58"/></operator> <literal type="number" pos:line="315" pos:column="59">0<pos:position pos:line="315" pos:column="60"/></literal></expr>)<pos:position pos:line="315" pos:column="61"/></condition><then pos:line="315" pos:column="61"> <block pos:line="315" pos:column="62">{
        <comment type="block" pos:line="316" pos:column="9">/* we succeeded to bind */</comment>
        <decl_stmt><decl><type><name><name pos:line="317" pos:column="9">struct<pos:position pos:line="317" pos:column="15"/></name> <name pos:line="317" pos:column="16">sockaddr_in<pos:position pos:line="317" pos:column="27"/></name></name></type> <name pos:line="317" pos:column="28">add<pos:position pos:line="317" pos:column="31"/></name></decl>;<pos:position pos:line="317" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="318" pos:column="9">socklen_t<pos:position pos:line="318" pos:column="18"/></name></type> <name pos:line="318" pos:column="19">socksize<pos:position pos:line="318" pos:column="27"/></name> <init pos:line="318" pos:column="28">= <expr><sizeof pos:line="318" pos:column="30">sizeof<argument_list pos:line="318" pos:column="36">(<argument><expr><name pos:line="318" pos:column="37">add<pos:position pos:line="318" pos:column="40"/></name></expr></argument>)<pos:position pos:line="318" pos:column="41"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="318" pos:column="42"/></decl_stmt>

        <if pos:line="320" pos:column="9">if<condition pos:line="320" pos:column="11">(<expr><call><name pos:line="320" pos:column="12">getsockname<pos:position pos:line="320" pos:column="23"/></name><argument_list pos:line="320" pos:column="23">(<argument><expr><name pos:line="320" pos:column="24">portsock<pos:position pos:line="320" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="320" pos:column="34">(<pos:position pos:line="320" pos:column="35"/></operator>struct <name pos:line="320" pos:column="42">sockaddr<pos:position pos:line="320" pos:column="50"/></name> <operator pos:line="320" pos:column="51">*<pos:position pos:line="320" pos:column="52"/></operator><operator pos:line="320" pos:column="52">)<pos:position pos:line="320" pos:column="53"/></operator> <operator pos:line="320" pos:column="54">&amp;<pos:position pos:line="320" pos:column="59"/></operator><name pos:line="320" pos:column="55">add<pos:position pos:line="320" pos:column="58"/></name></expr></argument>,
                       <argument><expr><operator pos:line="321" pos:column="24">&amp;<pos:position pos:line="321" pos:column="29"/></operator><name pos:line="321" pos:column="25">socksize<pos:position pos:line="321" pos:column="33"/></name></expr></argument>)<pos:position pos:line="321" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="321" pos:column="35"/></condition><then pos:line="321" pos:column="35"> <block pos:line="321" pos:column="36">{
          <expr_stmt><expr><call><name pos:line="322" pos:column="11">failf<pos:position pos:line="322" pos:column="16"/></name><argument_list pos:line="322" pos:column="16">(<argument><expr><name pos:line="322" pos:column="17">data<pos:position pos:line="322" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="322" pos:column="23">"getsockname() failed: %s"<pos:position pos:line="322" pos:column="49"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="323" pos:column="13">Curl_strerror<pos:position pos:line="323" pos:column="26"/></name><argument_list pos:line="323" pos:column="26">(<argument><expr><name pos:line="323" pos:column="27">conn<pos:position pos:line="323" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="323" pos:column="33">SOCKERRNO<pos:position pos:line="323" pos:column="42"/></name></expr></argument>)<pos:position pos:line="323" pos:column="43"/></argument_list></call></expr></argument> )<pos:position pos:line="323" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="323" pos:column="46"/></expr_stmt>
          <return pos:line="324" pos:column="11">return <expr><name pos:line="324" pos:column="18">CURLE_FTP_PORT_FAILED<pos:position pos:line="324" pos:column="39"/></name></expr>;<pos:position pos:line="324" pos:column="40"/></return>
        }<pos:position pos:line="325" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="326" pos:column="9">porttouse<pos:position pos:line="326" pos:column="18"/></name> <operator pos:line="326" pos:column="19">=<pos:position pos:line="326" pos:column="20"/></operator> <call><name pos:line="326" pos:column="21">ntohs<pos:position pos:line="326" pos:column="26"/></name><argument_list pos:line="326" pos:column="26">(<argument><expr><name><name pos:line="326" pos:column="27">add<pos:position pos:line="326" pos:column="30"/></name><operator pos:line="326" pos:column="30">.<pos:position pos:line="326" pos:column="31"/></operator><name pos:line="326" pos:column="31">sin_port<pos:position pos:line="326" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="326" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="326" pos:column="41"/></expr_stmt>

        <if pos:line="328" pos:column="9">if<condition pos:line="328" pos:column="11">( <expr><call><name pos:line="328" pos:column="13">listen<pos:position pos:line="328" pos:column="19"/></name><argument_list pos:line="328" pos:column="19">(<argument><expr><name pos:line="328" pos:column="20">portsock<pos:position pos:line="328" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="328" pos:column="30">1<pos:position pos:line="328" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="328" pos:column="32"/></argument_list></call> <operator pos:line="328" pos:column="33">&lt;<pos:position pos:line="328" pos:column="37"/></operator> <literal type="number" pos:line="328" pos:column="35">0<pos:position pos:line="328" pos:column="36"/></literal></expr> )<pos:position pos:line="328" pos:column="38"/></condition><then pos:line="328" pos:column="38"> <block pos:line="328" pos:column="39">{
          <expr_stmt><expr><call><name pos:line="329" pos:column="11">failf<pos:position pos:line="329" pos:column="16"/></name><argument_list pos:line="329" pos:column="16">(<argument><expr><name pos:line="329" pos:column="17">data<pos:position pos:line="329" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="329" pos:column="23">"listen(2) failed on socket"<pos:position pos:line="329" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="329" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="329" pos:column="53"/></expr_stmt>
          <return pos:line="330" pos:column="11">return <expr><name pos:line="330" pos:column="18">CURLE_FTP_PORT_FAILED<pos:position pos:line="330" pos:column="39"/></name></expr>;<pos:position pos:line="330" pos:column="40"/></return>
        }<pos:position pos:line="331" pos:column="10"/></block></then></if>
      }<pos:position pos:line="332" pos:column="8"/></block></then>
      <else pos:line="333" pos:column="7">else <block pos:line="333" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="334" pos:column="9">failf<pos:position pos:line="334" pos:column="14"/></name><argument_list pos:line="334" pos:column="14">(<argument><expr><name pos:line="334" pos:column="15">data<pos:position pos:line="334" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="334" pos:column="21">"bind(2) failed on socket"<pos:position pos:line="334" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="334" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="334" pos:column="49"/></expr_stmt>
        <return pos:line="335" pos:column="9">return <expr><name pos:line="335" pos:column="16">CURLE_FTP_PORT_FAILED<pos:position pos:line="335" pos:column="37"/></name></expr>;<pos:position pos:line="335" pos:column="38"/></return>
      }<pos:position pos:line="336" pos:column="8"/></block></else></if>
    }<pos:position pos:line="337" pos:column="6"/></block></then>
    <else pos:line="338" pos:column="5">else <block pos:line="338" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="339" pos:column="7">failf<pos:position pos:line="339" pos:column="12"/></name><argument_list pos:line="339" pos:column="12">(<argument><expr><name pos:line="339" pos:column="13">data<pos:position pos:line="339" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="339" pos:column="19">"socket(2) failed (%s)"<pos:position pos:line="339" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="339" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="339" pos:column="44"/></expr_stmt>
      <return pos:line="340" pos:column="7">return <expr><name pos:line="340" pos:column="14">CURLE_FTP_PORT_FAILED<pos:position pos:line="340" pos:column="35"/></name></expr>;<pos:position pos:line="340" pos:column="36"/></return>
    }<pos:position pos:line="341" pos:column="6"/></block></else></if>
  }<pos:position pos:line="342" pos:column="4"/></block></then>
  <else pos:line="343" pos:column="3">else <block pos:line="343" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="344" pos:column="5">failf<pos:position pos:line="344" pos:column="10"/></name><argument_list pos:line="344" pos:column="10">(<argument><expr><name pos:line="344" pos:column="11">data<pos:position pos:line="344" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="344" pos:column="17">"couldn't find IP address to use"<pos:position pos:line="344" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="344" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="52"/></expr_stmt>
    <return pos:line="345" pos:column="5">return <expr><name pos:line="345" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="345" pos:column="33"/></name></expr>;<pos:position pos:line="345" pos:column="34"/></return>
  }<pos:position pos:line="346" pos:column="4"/></block></else></if>

  <if pos:line="348" pos:column="3">if<condition pos:line="348" pos:column="5">(<expr><name pos:line="348" pos:column="6">sa_filled_in<pos:position pos:line="348" pos:column="18"/></name></expr>)<pos:position pos:line="348" pos:column="19"/></condition><then pos:line="348" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="349" pos:column="5">Curl_inet_ntop<pos:position pos:line="349" pos:column="19"/></name><argument_list pos:line="349" pos:column="19">(<argument><expr><name pos:line="349" pos:column="20">AF_INET<pos:position pos:line="349" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="349" pos:column="29">&amp;<pos:position pos:line="349" pos:column="34"/></operator><operator pos:line="349" pos:column="30">(<pos:position pos:line="349" pos:column="31"/></operator><operator pos:line="349" pos:column="31">(<pos:position pos:line="349" pos:column="32"/></operator>struct <name pos:line="349" pos:column="39">sockaddr_in<pos:position pos:line="349" pos:column="50"/></name> <operator pos:line="349" pos:column="51">*<pos:position pos:line="349" pos:column="52"/></operator><operator pos:line="349" pos:column="52">)<pos:position pos:line="349" pos:column="53"/></operator><operator pos:line="349" pos:column="53">&amp;<pos:position pos:line="349" pos:column="58"/></operator><name pos:line="349" pos:column="54">sa<pos:position pos:line="349" pos:column="56"/></name><operator pos:line="349" pos:column="56">)<pos:position pos:line="349" pos:column="57"/></operator><operator pos:line="349" pos:column="57">-&gt;<pos:position pos:line="349" pos:column="62"/></operator><name pos:line="349" pos:column="59">sin_addr<pos:position pos:line="349" pos:column="67"/></name></expr></argument>,
                   <argument><expr><name pos:line="350" pos:column="20">myhost<pos:position pos:line="350" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="350" pos:column="28">sizeof<argument_list pos:line="350" pos:column="34">(<argument><expr><name pos:line="350" pos:column="35">myhost<pos:position pos:line="350" pos:column="41"/></name></expr></argument>)<pos:position pos:line="350" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="350" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="350" pos:column="44"/></expr_stmt></block></then>
  <else pos:line="351" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="352" pos:column="5">Curl_printable_address<pos:position pos:line="352" pos:column="27"/></name><argument_list pos:line="352" pos:column="27">(<argument><expr><name pos:line="352" pos:column="28">addr<pos:position pos:line="352" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="352" pos:column="34">myhost<pos:position pos:line="352" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="352" pos:column="42">sizeof<argument_list pos:line="352" pos:column="48">(<argument><expr><name pos:line="352" pos:column="49">myhost<pos:position pos:line="352" pos:column="55"/></name></expr></argument>)<pos:position pos:line="352" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="352" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="352" pos:column="58"/></expr_stmt></block></else></if>

  <if pos:line="354" pos:column="3">if<condition pos:line="354" pos:column="5">(<expr><literal type="number" pos:line="354" pos:column="6">4<pos:position pos:line="354" pos:column="7"/></literal> <operator pos:line="354" pos:column="8">==<pos:position pos:line="354" pos:column="10"/></operator> <call><name pos:line="354" pos:column="11">sscanf<pos:position pos:line="354" pos:column="17"/></name><argument_list pos:line="354" pos:column="17">(<argument><expr><name pos:line="354" pos:column="18">myhost<pos:position pos:line="354" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="354" pos:column="26">"%hu.%hu.%hu.%hu"<pos:position pos:line="354" pos:column="43"/></literal></expr></argument>,
                 <argument><expr><operator pos:line="355" pos:column="18">&amp;<pos:position pos:line="355" pos:column="23"/></operator><name><name pos:line="355" pos:column="19">ip<pos:position pos:line="355" pos:column="21"/></name><index pos:line="355" pos:column="21">[<expr><literal type="number" pos:line="355" pos:column="22">0<pos:position pos:line="355" pos:column="23"/></literal></expr>]<pos:position pos:line="355" pos:column="24"/></index></name></expr></argument>, <argument><expr><operator pos:line="355" pos:column="26">&amp;<pos:position pos:line="355" pos:column="31"/></operator><name><name pos:line="355" pos:column="27">ip<pos:position pos:line="355" pos:column="29"/></name><index pos:line="355" pos:column="29">[<expr><literal type="number" pos:line="355" pos:column="30">1<pos:position pos:line="355" pos:column="31"/></literal></expr>]<pos:position pos:line="355" pos:column="32"/></index></name></expr></argument>, <argument><expr><operator pos:line="355" pos:column="34">&amp;<pos:position pos:line="355" pos:column="39"/></operator><name><name pos:line="355" pos:column="35">ip<pos:position pos:line="355" pos:column="37"/></name><index pos:line="355" pos:column="37">[<expr><literal type="number" pos:line="355" pos:column="38">2<pos:position pos:line="355" pos:column="39"/></literal></expr>]<pos:position pos:line="355" pos:column="40"/></index></name></expr></argument>, <argument><expr><operator pos:line="355" pos:column="42">&amp;<pos:position pos:line="355" pos:column="47"/></operator><name><name pos:line="355" pos:column="43">ip<pos:position pos:line="355" pos:column="45"/></name><index pos:line="355" pos:column="45">[<expr><literal type="number" pos:line="355" pos:column="46">3<pos:position pos:line="355" pos:column="47"/></literal></expr>]<pos:position pos:line="355" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="355" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="355" pos:column="50"/></condition><then pos:line="355" pos:column="50"> <block pos:line="355" pos:column="51">{

    <expr_stmt><expr><call><name pos:line="357" pos:column="5">infof<pos:position pos:line="357" pos:column="10"/></name><argument_list pos:line="357" pos:column="10">(<argument><expr><name pos:line="357" pos:column="11">data<pos:position pos:line="357" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="357" pos:column="17">"Telling server to connect to %d.%d.%d.%d:%d\n"<pos:position pos:line="357" pos:column="64"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="358" pos:column="11">ip<pos:position pos:line="358" pos:column="13"/></name><index pos:line="358" pos:column="13">[<expr><literal type="number" pos:line="358" pos:column="14">0<pos:position pos:line="358" pos:column="15"/></literal></expr>]<pos:position pos:line="358" pos:column="16"/></index></name></expr></argument>, <argument><expr><name><name pos:line="358" pos:column="18">ip<pos:position pos:line="358" pos:column="20"/></name><index pos:line="358" pos:column="20">[<expr><literal type="number" pos:line="358" pos:column="21">1<pos:position pos:line="358" pos:column="22"/></literal></expr>]<pos:position pos:line="358" pos:column="23"/></index></name></expr></argument>, <argument><expr><name><name pos:line="358" pos:column="25">ip<pos:position pos:line="358" pos:column="27"/></name><index pos:line="358" pos:column="27">[<expr><literal type="number" pos:line="358" pos:column="28">2<pos:position pos:line="358" pos:column="29"/></literal></expr>]<pos:position pos:line="358" pos:column="30"/></index></name></expr></argument>, <argument><expr><name><name pos:line="358" pos:column="32">ip<pos:position pos:line="358" pos:column="34"/></name><index pos:line="358" pos:column="34">[<expr><literal type="number" pos:line="358" pos:column="35">3<pos:position pos:line="358" pos:column="36"/></literal></expr>]<pos:position pos:line="358" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="358" pos:column="39">porttouse<pos:position pos:line="358" pos:column="48"/></name></expr></argument>)<pos:position pos:line="358" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="358" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><name pos:line="360" pos:column="5">result<pos:position pos:line="360" pos:column="11"/></name><operator pos:line="360" pos:column="11">=<pos:position pos:line="360" pos:column="12"/></operator><call><name pos:line="360" pos:column="12">Curl_nbftpsendf<pos:position pos:line="360" pos:column="27"/></name><argument_list pos:line="360" pos:column="27">(<argument><expr><name pos:line="360" pos:column="28">conn<pos:position pos:line="360" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="360" pos:column="34">"PORT %d,%d,%d,%d,%d,%d"<pos:position pos:line="360" pos:column="58"/></literal></expr></argument>,
                           <argument><expr><name><name pos:line="361" pos:column="28">ip<pos:position pos:line="361" pos:column="30"/></name><index pos:line="361" pos:column="30">[<expr><literal type="number" pos:line="361" pos:column="31">0<pos:position pos:line="361" pos:column="32"/></literal></expr>]<pos:position pos:line="361" pos:column="33"/></index></name></expr></argument>, <argument><expr><name><name pos:line="361" pos:column="35">ip<pos:position pos:line="361" pos:column="37"/></name><index pos:line="361" pos:column="37">[<expr><literal type="number" pos:line="361" pos:column="38">1<pos:position pos:line="361" pos:column="39"/></literal></expr>]<pos:position pos:line="361" pos:column="40"/></index></name></expr></argument>, <argument><expr><name><name pos:line="361" pos:column="42">ip<pos:position pos:line="361" pos:column="44"/></name><index pos:line="361" pos:column="44">[<expr><literal type="number" pos:line="361" pos:column="45">2<pos:position pos:line="361" pos:column="46"/></literal></expr>]<pos:position pos:line="361" pos:column="47"/></index></name></expr></argument>, <argument><expr><name><name pos:line="361" pos:column="49">ip<pos:position pos:line="361" pos:column="51"/></name><index pos:line="361" pos:column="51">[<expr><literal type="number" pos:line="361" pos:column="52">3<pos:position pos:line="361" pos:column="53"/></literal></expr>]<pos:position pos:line="361" pos:column="54"/></index></name></expr></argument>,
                           <argument><expr><name pos:line="362" pos:column="28">porttouse<pos:position pos:line="362" pos:column="37"/></name> <operator pos:line="362" pos:column="38">&gt;&gt;<pos:position pos:line="362" pos:column="43"/></operator> <literal type="number" pos:line="362" pos:column="41">8<pos:position pos:line="362" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="362" pos:column="44">porttouse<pos:position pos:line="362" pos:column="53"/></name> <operator pos:line="362" pos:column="54">&amp;<pos:position pos:line="362" pos:column="59"/></operator> <literal type="number" pos:line="362" pos:column="56">255<pos:position pos:line="362" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="362" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="362" pos:column="61"/></expr_stmt>
    <if pos:line="363" pos:column="5">if<condition pos:line="363" pos:column="7">(<expr><name pos:line="363" pos:column="8">result<pos:position pos:line="363" pos:column="14"/></name></expr>)<pos:position pos:line="363" pos:column="15"/></condition><then pos:line="363" pos:column="15">
      <block type="pseudo"><return pos:line="364" pos:column="7">return <expr><name pos:line="364" pos:column="14">result<pos:position pos:line="364" pos:column="20"/></name></expr>;<pos:position pos:line="364" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="365" pos:column="4"/></block></then>
  <else pos:line="366" pos:column="3">else
    <block type="pseudo"><return pos:line="367" pos:column="5">return <expr><name pos:line="367" pos:column="12">CURLE_FTP_PORT_FAILED<pos:position pos:line="367" pos:column="33"/></name></expr>;<pos:position pos:line="367" pos:column="34"/></return></block></else></if>

  <if pos:line="369" pos:column="3">if<condition pos:line="369" pos:column="5">(<expr><name pos:line="369" pos:column="6">freeaddr<pos:position pos:line="369" pos:column="14"/></name></expr>)<pos:position pos:line="369" pos:column="15"/></condition><then pos:line="369" pos:column="15">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="370" pos:column="5">Curl_freeaddrinfo<pos:position pos:line="370" pos:column="22"/></name><argument_list pos:line="370" pos:column="22">(<argument><expr><name pos:line="370" pos:column="23">addr<pos:position pos:line="370" pos:column="27"/></name></expr></argument>)<pos:position pos:line="370" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="370" pos:column="29"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name><name pos:line="372" pos:column="3">ftpc<pos:position pos:line="372" pos:column="7"/></name><operator pos:line="372" pos:column="7">-&gt;<pos:position pos:line="372" pos:column="12"/></operator><name pos:line="372" pos:column="9">count1<pos:position pos:line="372" pos:column="15"/></name></name> <operator pos:line="372" pos:column="16">=<pos:position pos:line="372" pos:column="17"/></operator> <name pos:line="372" pos:column="18">PORT<pos:position pos:line="372" pos:column="22"/></name></expr>;<pos:position pos:line="372" pos:column="23"/></expr_stmt>

<cpp:endif pos:line="374" pos:column="1">#<cpp:directive pos:line="374" pos:column="2">endif<pos:position pos:line="374" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="374" pos:column="8">/* end of ipv4-specific code */</comment>

  <comment type="block" pos:line="376" pos:column="3">/* this tcpconnect assignment below is a hackish work-around to make the
     multi interface with active FTP work - as it will not wait for a
     (passive) connect in Curl_is_connected().

     The *proper* fix is to make sure that the active connection from the
     server is done in a non-blocking way. Currently, it is still BLOCKING.
  */</comment>
  <expr_stmt><expr><name><name pos:line="383" pos:column="3">conn<pos:position pos:line="383" pos:column="7"/></name><operator pos:line="383" pos:column="7">-&gt;<pos:position pos:line="383" pos:column="12"/></operator><name pos:line="383" pos:column="9">bits<pos:position pos:line="383" pos:column="13"/></name><operator pos:line="383" pos:column="13">.<pos:position pos:line="383" pos:column="14"/></operator><name pos:line="383" pos:column="14">tcpconnect<pos:position pos:line="383" pos:column="24"/></name></name> <operator pos:line="383" pos:column="25">=<pos:position pos:line="383" pos:column="26"/></operator> <name pos:line="383" pos:column="27">TRUE<pos:position pos:line="383" pos:column="31"/></name></expr>;<pos:position pos:line="383" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="385" pos:column="3">state<pos:position pos:line="385" pos:column="8"/></name><argument_list pos:line="385" pos:column="8">(<argument><expr><name pos:line="385" pos:column="9">conn<pos:position pos:line="385" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="385" pos:column="15">FTP_PORT<pos:position pos:line="385" pos:column="23"/></name></expr></argument>)<pos:position pos:line="385" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="385" pos:column="25"/></expr_stmt>
  <return pos:line="386" pos:column="3">return <expr><name pos:line="386" pos:column="10">result<pos:position pos:line="386" pos:column="16"/></name></expr>;<pos:position pos:line="386" pos:column="17"/></return>
}<pos:position pos:line="387" pos:column="2"/></block></function></unit>
