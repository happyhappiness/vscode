<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_740_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">tftp_do<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">connectdata<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">conn<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">bool<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">done<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">SessionHandle<pos:position pos:line="3" pos:column="23"/></name></name>  <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">data<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><name><name pos:line="3" pos:column="33">conn<pos:position pos:line="3" pos:column="37"/></name><operator pos:line="3" pos:column="37">-&gt;<pos:position pos:line="3" pos:column="42"/></operator><name pos:line="3" pos:column="39">data<pos:position pos:line="3" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">tftp_state_data_t<pos:position pos:line="4" pos:column="20"/></name>     <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">state<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">tftp_event_t<pos:position pos:line="5" pos:column="15"/></name></type>          <name pos:line="5" pos:column="25">event<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">CURLcode<pos:position pos:line="6" pos:column="11"/></name></type>              <name pos:line="6" pos:column="25">code<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type>                   <name pos:line="7" pos:column="25">rc<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Curl_sockaddr_storage<pos:position pos:line="8" pos:column="31"/></name></name></type> <name pos:line="8" pos:column="32">fromaddr<pos:position pos:line="8" pos:column="40"/></name></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">socklen_t<pos:position pos:line="9" pos:column="12"/></name></type>             <name pos:line="9" pos:column="25">fromlen<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type>                   <name pos:line="10" pos:column="25">check_time<pos:position pos:line="10" pos:column="35"/></name> <init pos:line="10" pos:column="36">= <expr><literal type="number" pos:line="10" pos:column="38">0<pos:position pos:line="10" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">SingleRequest<pos:position pos:line="11" pos:column="23"/></name></name> <modifier pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></modifier></type><name pos:line="11" pos:column="25">k<pos:position pos:line="11" pos:column="26"/></name> <init pos:line="11" pos:column="27">= <expr><operator pos:line="11" pos:column="29">&amp;<pos:position pos:line="11" pos:column="34"/></operator><name><name pos:line="11" pos:column="30">data<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">-&gt;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="36">req<pos:position pos:line="11" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="40"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">done<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <name pos:line="13" pos:column="11">TRUE<pos:position pos:line="13" pos:column="15"/></name></expr>;<pos:position pos:line="13" pos:column="16"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/*
    Since connections can be re-used between SessionHandles, this might be a
    connection already existing but on a fresh SessionHandle struct so we must
    make sure we have a good 'struct TFTP' to play with. For new connections,
    the struct TFTP is allocated and setup in the tftp_connect() function.
  */</comment>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">Curl_reset_reqproto<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">conn<pos:position pos:line="21" pos:column="27"/></name></expr></argument>)<pos:position pos:line="21" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">!<pos:position pos:line="23" pos:column="7"/></operator><name><name pos:line="23" pos:column="7">data<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">state<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">.<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">proto<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">.<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">tftp<pos:position pos:line="23" pos:column="29"/></name></name></expr>)<pos:position pos:line="23" pos:column="30"/></condition><then pos:line="23" pos:column="30"> <block pos:line="23" pos:column="31">{
    <expr_stmt><expr><name pos:line="24" pos:column="5">code<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">tftp_connect<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">conn<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="31">done<pos:position pos:line="24" pos:column="35"/></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">code<pos:position pos:line="25" pos:column="12"/></name></expr>)<pos:position pos:line="25" pos:column="13"/></condition><then pos:line="25" pos:column="13">
      <block type="pseudo"><return pos:line="26" pos:column="7">return <expr><name pos:line="26" pos:column="14">code<pos:position pos:line="26" pos:column="18"/></name></expr>;<pos:position pos:line="26" pos:column="19"/></return></block></then></if>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="28" pos:column="3">state<pos:position pos:line="28" pos:column="8"/></name> <operator pos:line="28" pos:column="9">=<pos:position pos:line="28" pos:column="10"/></operator> <operator pos:line="28" pos:column="11">(<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="12">tftp_state_data_t<pos:position pos:line="28" pos:column="29"/></name> <operator pos:line="28" pos:column="30">*<pos:position pos:line="28" pos:column="31"/></operator><operator pos:line="28" pos:column="31">)<pos:position pos:line="28" pos:column="32"/></operator><name><name pos:line="28" pos:column="32">data<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">-&gt;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="38">state<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">.<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="44">proto<pos:position pos:line="28" pos:column="49"/></name><operator pos:line="28" pos:column="49">.<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="50">tftp<pos:position pos:line="28" pos:column="54"/></name></name></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt>

  <comment type="block" pos:line="30" pos:column="3">/* Run the TFTP State Machine */</comment>
  <for pos:line="31" pos:column="3">for<control pos:line="31" pos:column="6">(<init><expr><name pos:line="31" pos:column="7">code<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator><call><name pos:line="31" pos:column="12">tftp_state_machine<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">state<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="38">TFTP_EVENT_INIT<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></init>
      <condition><expr><operator pos:line="32" pos:column="7">(<pos:position pos:line="32" pos:column="8"/></operator><name><name pos:line="32" pos:column="8">state<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">state<pos:position pos:line="32" pos:column="20"/></name></name> <operator pos:line="32" pos:column="21">!=<pos:position pos:line="32" pos:column="23"/></operator> <name pos:line="32" pos:column="24">TFTP_STATE_FIN<pos:position pos:line="32" pos:column="38"/></name><operator pos:line="32" pos:column="38">)<pos:position pos:line="32" pos:column="39"/></operator> <operator pos:line="32" pos:column="40">&amp;&amp;<pos:position pos:line="32" pos:column="50"/></operator> <operator pos:line="32" pos:column="43">(<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="44">code<pos:position pos:line="32" pos:column="48"/></name> <operator pos:line="32" pos:column="49">==<pos:position pos:line="32" pos:column="51"/></operator> <name pos:line="32" pos:column="52">CURLE_OK<pos:position pos:line="32" pos:column="60"/></name><operator pos:line="32" pos:column="60">)<pos:position pos:line="32" pos:column="61"/></operator></expr>;<pos:position pos:line="32" pos:column="62"/></condition>
      <incr><expr><name pos:line="33" pos:column="7">code<pos:position pos:line="33" pos:column="11"/></name><operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator><call><name pos:line="33" pos:column="12">tftp_state_machine<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name pos:line="33" pos:column="31">state<pos:position pos:line="33" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="38">event<pos:position pos:line="33" pos:column="43"/></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr></incr> )<pos:position pos:line="33" pos:column="46"/></control> <block pos:line="33" pos:column="47">{

    <comment type="block" pos:line="35" pos:column="5">/* Wait until ready to read or timeout occurs */</comment>
    <expr_stmt><expr><name pos:line="36" pos:column="5">rc<pos:position pos:line="36" pos:column="7"/></name><operator pos:line="36" pos:column="7">=<pos:position pos:line="36" pos:column="8"/></operator><call><name pos:line="36" pos:column="8">Curl_socket_ready<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name><name pos:line="36" pos:column="26">state<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">-&gt;<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="33">sockfd<pos:position pos:line="36" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="41">CURL_SOCKET_BAD<pos:position pos:line="36" pos:column="56"/></name></expr></argument>,
                         <argument><expr><name><name pos:line="37" pos:column="26">state<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">-&gt;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="33">retry_time<pos:position pos:line="37" pos:column="43"/></name></name> <operator pos:line="37" pos:column="44">*<pos:position pos:line="37" pos:column="45"/></operator> <literal type="number" pos:line="37" pos:column="46">1000<pos:position pos:line="37" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>

    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name pos:line="39" pos:column="8">rc<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">==<pos:position pos:line="39" pos:column="13"/></operator> <operator pos:line="39" pos:column="14">-<pos:position pos:line="39" pos:column="15"/></operator><literal type="number" pos:line="39" pos:column="15">1<pos:position pos:line="39" pos:column="16"/></literal></expr>)<pos:position pos:line="39" pos:column="17"/></condition><then pos:line="39" pos:column="17"> <block pos:line="39" pos:column="18">{
      <comment type="block" pos:line="40" pos:column="7">/* bail out */</comment>
      <decl_stmt><decl><type><name pos:line="41" pos:column="7">int<pos:position pos:line="41" pos:column="10"/></name></type> <name pos:line="41" pos:column="11">error<pos:position pos:line="41" pos:column="16"/></name> <init pos:line="41" pos:column="17">= <expr><name pos:line="41" pos:column="19">SOCKERRNO<pos:position pos:line="41" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="29"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">failf<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">data<pos:position pos:line="42" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="19">"%s"<pos:position pos:line="42" pos:column="23"/></literal></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="25">Curl_strerror<pos:position pos:line="42" pos:column="38"/></name><argument_list pos:line="42" pos:column="38">(<argument><expr><name pos:line="42" pos:column="39">conn<pos:position pos:line="42" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="45">error<pos:position pos:line="42" pos:column="50"/></name></expr></argument>)<pos:position pos:line="42" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">event<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <name pos:line="43" pos:column="15">TFTP_EVENT_ERROR<pos:position pos:line="43" pos:column="31"/></name></expr>;<pos:position pos:line="43" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then>
    <elseif pos:line="45" pos:column="5">else <if pos:line="45" pos:column="10">if<condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">rc<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">==<pos:position pos:line="45" pos:column="17"/></operator><literal type="number" pos:line="45" pos:column="17">0<pos:position pos:line="45" pos:column="18"/></literal></expr>)<pos:position pos:line="45" pos:column="19"/></condition><then pos:line="45" pos:column="19"> <block pos:line="45" pos:column="20">{
      <comment type="block" pos:line="46" pos:column="7">/* A timeout occured */</comment>
      <expr_stmt><expr><name pos:line="47" pos:column="7">event<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">=<pos:position pos:line="47" pos:column="14"/></operator> <name pos:line="47" pos:column="15">TFTP_EVENT_TIMEOUT<pos:position pos:line="47" pos:column="33"/></name></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>

      <comment type="block" pos:line="49" pos:column="7">/* Force a look at transfer timeouts */</comment>
      <expr_stmt><expr><name pos:line="50" pos:column="7">check_time<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">=<pos:position pos:line="50" pos:column="19"/></operator> <literal type="number" pos:line="50" pos:column="20">0<pos:position pos:line="50" pos:column="21"/></literal></expr>;<pos:position pos:line="50" pos:column="22"/></expr_stmt>

    }<pos:position pos:line="52" pos:column="6"/></block></then></if></elseif>
    <else pos:line="53" pos:column="5">else <block pos:line="53" pos:column="10">{

      <comment type="block" pos:line="55" pos:column="7">/* Receive the packet */</comment>
      <expr_stmt><expr><name pos:line="56" pos:column="7">fromlen<pos:position pos:line="56" pos:column="14"/></name><operator pos:line="56" pos:column="14">=<pos:position pos:line="56" pos:column="15"/></operator><sizeof pos:line="56" pos:column="15">sizeof<argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">fromaddr<pos:position pos:line="56" pos:column="30"/></name></expr></argument>)<pos:position pos:line="56" pos:column="31"/></argument_list></sizeof></expr>;<pos:position pos:line="56" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="57" pos:column="7">state<pos:position pos:line="57" pos:column="12"/></name><operator pos:line="57" pos:column="12">-&gt;<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="14">rbytes<pos:position pos:line="57" pos:column="20"/></name></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <call><name pos:line="57" pos:column="23">recvfrom<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><name><name pos:line="57" pos:column="32">state<pos:position pos:line="57" pos:column="37"/></name><operator pos:line="57" pos:column="37">-&gt;<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="39">sockfd<pos:position pos:line="57" pos:column="45"/></name></name></expr></argument>,
                               <argument><expr><operator pos:line="58" pos:column="32">(<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="33">void<pos:position pos:line="58" pos:column="37"/></name> <operator pos:line="58" pos:column="38">*<pos:position pos:line="58" pos:column="39"/></operator><operator pos:line="58" pos:column="39">)<pos:position pos:line="58" pos:column="40"/></operator><operator pos:line="58" pos:column="40">&amp;<pos:position pos:line="58" pos:column="45"/></operator><name><name pos:line="58" pos:column="41">state<pos:position pos:line="58" pos:column="46"/></name><operator pos:line="58" pos:column="46">-&gt;<pos:position pos:line="58" pos:column="51"/></operator><name pos:line="58" pos:column="48">rpacket<pos:position pos:line="58" pos:column="55"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="57">sizeof<argument_list pos:line="58" pos:column="63">(<argument><expr><name><name pos:line="58" pos:column="64">state<pos:position pos:line="58" pos:column="69"/></name><operator pos:line="58" pos:column="69">-&gt;<pos:position pos:line="58" pos:column="74"/></operator><name pos:line="58" pos:column="71">rpacket<pos:position pos:line="58" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="79"/></argument_list></sizeof></expr></argument>,
                               <argument><expr><literal type="number" pos:line="59" pos:column="32">0<pos:position pos:line="59" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="59" pos:column="35">(<pos:position pos:line="59" pos:column="36"/></operator>struct <name pos:line="59" pos:column="43">sockaddr<pos:position pos:line="59" pos:column="51"/></name> <operator pos:line="59" pos:column="52">*<pos:position pos:line="59" pos:column="53"/></operator><operator pos:line="59" pos:column="53">)<pos:position pos:line="59" pos:column="54"/></operator><operator pos:line="59" pos:column="54">&amp;<pos:position pos:line="59" pos:column="59"/></operator><name pos:line="59" pos:column="55">fromaddr<pos:position pos:line="59" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="65">&amp;<pos:position pos:line="59" pos:column="70"/></operator><name pos:line="59" pos:column="66">fromlen<pos:position pos:line="59" pos:column="73"/></name></expr></argument>)<pos:position pos:line="59" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="75"/></expr_stmt>
      <if pos:line="60" pos:column="7">if<condition pos:line="60" pos:column="9">(<expr><name><name pos:line="60" pos:column="10">state<pos:position pos:line="60" pos:column="15"/></name><operator pos:line="60" pos:column="15">-&gt;<pos:position pos:line="60" pos:column="20"/></operator><name pos:line="60" pos:column="17">remote_addrlen<pos:position pos:line="60" pos:column="31"/></name></name><operator pos:line="60" pos:column="31">==<pos:position pos:line="60" pos:column="33"/></operator><literal type="number" pos:line="60" pos:column="33">0<pos:position pos:line="60" pos:column="34"/></literal></expr>)<pos:position pos:line="60" pos:column="35"/></condition><then pos:line="60" pos:column="35"> <block pos:line="60" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">memcpy<pos:position pos:line="61" pos:column="15"/></name><argument_list pos:line="61" pos:column="15">(<argument><expr><operator pos:line="61" pos:column="16">&amp;<pos:position pos:line="61" pos:column="21"/></operator><name><name pos:line="61" pos:column="17">state<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">-&gt;<pos:position pos:line="61" pos:column="27"/></operator><name pos:line="61" pos:column="24">remote_addr<pos:position pos:line="61" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="37">&amp;<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="38">fromaddr<pos:position pos:line="61" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="48">fromlen<pos:position pos:line="61" pos:column="55"/></name></expr></argument>)<pos:position pos:line="61" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">state<pos:position pos:line="62" pos:column="14"/></name><operator pos:line="62" pos:column="14">-&gt;<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="16">remote_addrlen<pos:position pos:line="62" pos:column="30"/></name></name> <operator pos:line="62" pos:column="31">=<pos:position pos:line="62" pos:column="32"/></operator> <name pos:line="62" pos:column="33">fromlen<pos:position pos:line="62" pos:column="40"/></name></expr>;<pos:position pos:line="62" pos:column="41"/></expr_stmt>
      }<pos:position pos:line="63" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="65" pos:column="7">/* Sanity check packet length */</comment>
      <if pos:line="66" pos:column="7">if<condition pos:line="66" pos:column="9">(<expr><name><name pos:line="66" pos:column="10">state<pos:position pos:line="66" pos:column="15"/></name><operator pos:line="66" pos:column="15">-&gt;<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="17">rbytes<pos:position pos:line="66" pos:column="23"/></name></name> <operator pos:line="66" pos:column="24">&lt;<pos:position pos:line="66" pos:column="28"/></operator> <literal type="number" pos:line="66" pos:column="26">4<pos:position pos:line="66" pos:column="27"/></literal></expr>)<pos:position pos:line="66" pos:column="28"/></condition><then pos:line="66" pos:column="28"> <block pos:line="66" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">failf<pos:position pos:line="67" pos:column="14"/></name><argument_list pos:line="67" pos:column="14">(<argument><expr><name pos:line="67" pos:column="15">data<pos:position pos:line="67" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="21">"Received too short packet"<pos:position pos:line="67" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="50"/></expr_stmt>
        <comment type="block" pos:line="68" pos:column="9">/* Not a timeout, but how best to handle it? */</comment>
        <expr_stmt><expr><name pos:line="69" pos:column="9">event<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <name pos:line="69" pos:column="17">TFTP_EVENT_TIMEOUT<pos:position pos:line="69" pos:column="35"/></name></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="70" pos:column="8"/></block></then>
      <else pos:line="71" pos:column="7">else <block pos:line="71" pos:column="12">{

        <comment type="block" pos:line="73" pos:column="9">/* The event is given by the TFTP packet time */</comment>
        <expr_stmt><expr><name pos:line="74" pos:column="9">event<pos:position pos:line="74" pos:column="14"/></name> <operator pos:line="74" pos:column="15">=<pos:position pos:line="74" pos:column="16"/></operator> <operator pos:line="74" pos:column="17">(<pos:position pos:line="74" pos:column="18"/></operator><name pos:line="74" pos:column="18">tftp_event_t<pos:position pos:line="74" pos:column="30"/></name><operator pos:line="74" pos:column="30">)<pos:position pos:line="74" pos:column="31"/></operator><call><name pos:line="74" pos:column="31">getrpacketevent<pos:position pos:line="74" pos:column="46"/></name><argument_list pos:line="74" pos:column="46">(<argument><expr><operator pos:line="74" pos:column="47">&amp;<pos:position pos:line="74" pos:column="52"/></operator><name><name pos:line="74" pos:column="48">state<pos:position pos:line="74" pos:column="53"/></name><operator pos:line="74" pos:column="53">-&gt;<pos:position pos:line="74" pos:column="58"/></operator><name pos:line="74" pos:column="55">rpacket<pos:position pos:line="74" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="64"/></expr_stmt>

        <switch pos:line="76" pos:column="9">switch<condition pos:line="76" pos:column="15">(<expr><name pos:line="76" pos:column="16">event<pos:position pos:line="76" pos:column="21"/></name></expr>)<pos:position pos:line="76" pos:column="22"/></condition> <block pos:line="76" pos:column="23">{
        <case pos:line="77" pos:column="9">case <expr><name pos:line="77" pos:column="14">TFTP_EVENT_DATA<pos:position pos:line="77" pos:column="29"/></name></expr>:<pos:position pos:line="77" pos:column="30"/></case>
          <comment type="block" pos:line="78" pos:column="11">/* Don't pass to the client empty or retransmitted packets */</comment>
          <if pos:line="79" pos:column="11">if<condition pos:line="79" pos:column="13">(<expr><name><name pos:line="79" pos:column="14">state<pos:position pos:line="79" pos:column="19"/></name><operator pos:line="79" pos:column="19">-&gt;<pos:position pos:line="79" pos:column="24"/></operator><name pos:line="79" pos:column="21">rbytes<pos:position pos:line="79" pos:column="27"/></name></name> <operator pos:line="79" pos:column="28">&gt;<pos:position pos:line="79" pos:column="32"/></operator> <literal type="number" pos:line="79" pos:column="30">4<pos:position pos:line="79" pos:column="31"/></literal> <operator pos:line="79" pos:column="32">&amp;&amp;<pos:position pos:line="79" pos:column="42"/></operator>
              <operator pos:line="80" pos:column="15">(<pos:position pos:line="80" pos:column="16"/></operator><operator pos:line="80" pos:column="16">(<pos:position pos:line="80" pos:column="17"/></operator><name><name pos:line="80" pos:column="17">state<pos:position pos:line="80" pos:column="22"/></name><operator pos:line="80" pos:column="22">-&gt;<pos:position pos:line="80" pos:column="27"/></operator><name pos:line="80" pos:column="24">block<pos:position pos:line="80" pos:column="29"/></name></name><operator pos:line="80" pos:column="29">+<pos:position pos:line="80" pos:column="30"/></operator><literal type="number" pos:line="80" pos:column="30">1<pos:position pos:line="80" pos:column="31"/></literal><operator pos:line="80" pos:column="31">)<pos:position pos:line="80" pos:column="32"/></operator> <operator pos:line="80" pos:column="33">==<pos:position pos:line="80" pos:column="35"/></operator> <call><name pos:line="80" pos:column="36">getrpacketblock<pos:position pos:line="80" pos:column="51"/></name><argument_list pos:line="80" pos:column="51">(<argument><expr><operator pos:line="80" pos:column="52">&amp;<pos:position pos:line="80" pos:column="57"/></operator><name><name pos:line="80" pos:column="53">state<pos:position pos:line="80" pos:column="58"/></name><operator pos:line="80" pos:column="58">-&gt;<pos:position pos:line="80" pos:column="63"/></operator><name pos:line="80" pos:column="60">rpacket<pos:position pos:line="80" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="68"/></argument_list></call><operator pos:line="80" pos:column="68">)<pos:position pos:line="80" pos:column="69"/></operator></expr>)<pos:position pos:line="80" pos:column="70"/></condition><then pos:line="80" pos:column="70"> <block pos:line="80" pos:column="71">{
            <expr_stmt><expr><name pos:line="81" pos:column="13">code<pos:position pos:line="81" pos:column="17"/></name> <operator pos:line="81" pos:column="18">=<pos:position pos:line="81" pos:column="19"/></operator> <call><name pos:line="81" pos:column="20">Curl_client_write<pos:position pos:line="81" pos:column="37"/></name><argument_list pos:line="81" pos:column="37">(<argument><expr><name pos:line="81" pos:column="38">conn<pos:position pos:line="81" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="44">CLIENTWRITE_BODY<pos:position pos:line="81" pos:column="60"/></name></expr></argument>,
                                     <argument><expr><operator pos:line="82" pos:column="38">(<pos:position pos:line="82" pos:column="39"/></operator><name pos:line="82" pos:column="39">char<pos:position pos:line="82" pos:column="43"/></name> <operator pos:line="82" pos:column="44">*<pos:position pos:line="82" pos:column="45"/></operator><operator pos:line="82" pos:column="45">)<pos:position pos:line="82" pos:column="46"/></operator><operator pos:line="82" pos:column="46">&amp;<pos:position pos:line="82" pos:column="51"/></operator><name><name pos:line="82" pos:column="47">state<pos:position pos:line="82" pos:column="52"/></name><operator pos:line="82" pos:column="52">-&gt;<pos:position pos:line="82" pos:column="57"/></operator><name pos:line="82" pos:column="54">rpacket<pos:position pos:line="82" pos:column="61"/></name><operator pos:line="82" pos:column="61">.<pos:position pos:line="82" pos:column="62"/></operator><name pos:line="82" pos:column="62">data<pos:position pos:line="82" pos:column="66"/></name><index pos:line="82" pos:column="66">[<expr><literal type="number" pos:line="82" pos:column="67">4<pos:position pos:line="82" pos:column="68"/></literal></expr>]<pos:position pos:line="82" pos:column="69"/></index></name></expr></argument>,
                                     <argument><expr><name><name pos:line="83" pos:column="38">state<pos:position pos:line="83" pos:column="43"/></name><operator pos:line="83" pos:column="43">-&gt;<pos:position pos:line="83" pos:column="48"/></operator><name pos:line="83" pos:column="45">rbytes<pos:position pos:line="83" pos:column="51"/></name></name><operator pos:line="83" pos:column="51">-<pos:position pos:line="83" pos:column="52"/></operator><literal type="number" pos:line="83" pos:column="52">4<pos:position pos:line="83" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="55"/></expr_stmt>
            <if pos:line="84" pos:column="13">if<condition pos:line="84" pos:column="15">(<expr><name pos:line="84" pos:column="16">code<pos:position pos:line="84" pos:column="20"/></name></expr>)<pos:position pos:line="84" pos:column="21"/></condition><then pos:line="84" pos:column="21">
              <block type="pseudo"><return pos:line="85" pos:column="15">return <expr><name pos:line="85" pos:column="22">code<pos:position pos:line="85" pos:column="26"/></name></expr>;<pos:position pos:line="85" pos:column="27"/></return></block></then></if>
            <expr_stmt><expr><name><name pos:line="86" pos:column="13">k<pos:position pos:line="86" pos:column="14"/></name><operator pos:line="86" pos:column="14">-&gt;<pos:position pos:line="86" pos:column="19"/></operator><name pos:line="86" pos:column="16">bytecount<pos:position pos:line="86" pos:column="25"/></name></name> <operator pos:line="86" pos:column="26">+=<pos:position pos:line="86" pos:column="28"/></operator> <name><name pos:line="86" pos:column="29">state<pos:position pos:line="86" pos:column="34"/></name><operator pos:line="86" pos:column="34">-&gt;<pos:position pos:line="86" pos:column="39"/></operator><name pos:line="86" pos:column="36">rbytes<pos:position pos:line="86" pos:column="42"/></name></name><operator pos:line="86" pos:column="42">-<pos:position pos:line="86" pos:column="43"/></operator><literal type="number" pos:line="86" pos:column="43">4<pos:position pos:line="86" pos:column="44"/></literal></expr>;<pos:position pos:line="86" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="87" pos:column="13">Curl_pgrsSetDownloadCounter<pos:position pos:line="87" pos:column="40"/></name><argument_list pos:line="87" pos:column="40">(<argument><expr><name pos:line="87" pos:column="41">data<pos:position pos:line="87" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="87" pos:column="47">(<pos:position pos:line="87" pos:column="48"/></operator><name pos:line="87" pos:column="48">curl_off_t<pos:position pos:line="87" pos:column="58"/></name><operator pos:line="87" pos:column="58">)<pos:position pos:line="87" pos:column="59"/></operator> <name><name pos:line="87" pos:column="60">k<pos:position pos:line="87" pos:column="61"/></name><operator pos:line="87" pos:column="61">-&gt;<pos:position pos:line="87" pos:column="66"/></operator><name pos:line="87" pos:column="63">bytecount<pos:position pos:line="87" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="74"/></expr_stmt>
          }<pos:position pos:line="88" pos:column="12"/></block></then></if>
          <break pos:line="89" pos:column="11">break;<pos:position pos:line="89" pos:column="17"/></break>
        <case pos:line="90" pos:column="9">case <expr><name pos:line="90" pos:column="14">TFTP_EVENT_ERROR<pos:position pos:line="90" pos:column="30"/></name></expr>:<pos:position pos:line="90" pos:column="31"/></case>
          <expr_stmt><expr><name><name pos:line="91" pos:column="11">state<pos:position pos:line="91" pos:column="16"/></name><operator pos:line="91" pos:column="16">-&gt;<pos:position pos:line="91" pos:column="21"/></operator><name pos:line="91" pos:column="18">error<pos:position pos:line="91" pos:column="23"/></name></name> <operator pos:line="91" pos:column="24">=<pos:position pos:line="91" pos:column="25"/></operator> <operator pos:line="91" pos:column="26">(<pos:position pos:line="91" pos:column="27"/></operator><name pos:line="91" pos:column="27">tftp_error_t<pos:position pos:line="91" pos:column="39"/></name><operator pos:line="91" pos:column="39">)<pos:position pos:line="91" pos:column="40"/></operator><call><name pos:line="91" pos:column="40">getrpacketblock<pos:position pos:line="91" pos:column="55"/></name><argument_list pos:line="91" pos:column="55">(<argument><expr><operator pos:line="91" pos:column="56">&amp;<pos:position pos:line="91" pos:column="61"/></operator><name><name pos:line="91" pos:column="57">state<pos:position pos:line="91" pos:column="62"/></name><operator pos:line="91" pos:column="62">-&gt;<pos:position pos:line="91" pos:column="67"/></operator><name pos:line="91" pos:column="64">rpacket<pos:position pos:line="91" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="73"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="92" pos:column="11">infof<pos:position pos:line="92" pos:column="16"/></name><argument_list pos:line="92" pos:column="16">(<argument><expr><name pos:line="92" pos:column="17">data<pos:position pos:line="92" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="23">"%s\n"<pos:position pos:line="92" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="92" pos:column="31">(<pos:position pos:line="92" pos:column="32"/></operator><name pos:line="92" pos:column="32">char<pos:position pos:line="92" pos:column="36"/></name> <operator pos:line="92" pos:column="37">*<pos:position pos:line="92" pos:column="38"/></operator><operator pos:line="92" pos:column="38">)<pos:position pos:line="92" pos:column="39"/></operator><operator pos:line="92" pos:column="39">&amp;<pos:position pos:line="92" pos:column="44"/></operator><name><name pos:line="92" pos:column="40">state<pos:position pos:line="92" pos:column="45"/></name><operator pos:line="92" pos:column="45">-&gt;<pos:position pos:line="92" pos:column="50"/></operator><name pos:line="92" pos:column="47">rpacket<pos:position pos:line="92" pos:column="54"/></name><operator pos:line="92" pos:column="54">.<pos:position pos:line="92" pos:column="55"/></operator><name pos:line="92" pos:column="55">data<pos:position pos:line="92" pos:column="59"/></name><index pos:line="92" pos:column="59">[<expr><literal type="number" pos:line="92" pos:column="60">4<pos:position pos:line="92" pos:column="61"/></literal></expr>]<pos:position pos:line="92" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="92" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="64"/></expr_stmt>
          <break pos:line="93" pos:column="11">break;<pos:position pos:line="93" pos:column="17"/></break>
        <case pos:line="94" pos:column="9">case <expr><name pos:line="94" pos:column="14">TFTP_EVENT_ACK<pos:position pos:line="94" pos:column="28"/></name></expr>:<pos:position pos:line="94" pos:column="29"/></case>
          <break pos:line="95" pos:column="11">break;<pos:position pos:line="95" pos:column="17"/></break>
        <case pos:line="96" pos:column="9">case <expr><name pos:line="96" pos:column="14">TFTP_EVENT_RRQ<pos:position pos:line="96" pos:column="28"/></name></expr>:<pos:position pos:line="96" pos:column="29"/></case>
        <case pos:line="97" pos:column="9">case <expr><name pos:line="97" pos:column="14">TFTP_EVENT_WRQ<pos:position pos:line="97" pos:column="28"/></name></expr>:<pos:position pos:line="97" pos:column="29"/></case>
        <default pos:line="98" pos:column="9">default:<pos:position pos:line="98" pos:column="17"/></default>
          <expr_stmt><expr><call><name pos:line="99" pos:column="11">failf<pos:position pos:line="99" pos:column="16"/></name><argument_list pos:line="99" pos:column="16">(<argument><expr><name pos:line="99" pos:column="17">data<pos:position pos:line="99" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="23">"%s"<pos:position pos:line="99" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="29">"Internal error: Unexpected packet"<pos:position pos:line="99" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="66"/></expr_stmt>
          <break pos:line="100" pos:column="11">break;<pos:position pos:line="100" pos:column="17"/></break>
        }<pos:position pos:line="101" pos:column="10"/></block></switch>

        <comment type="block" pos:line="103" pos:column="9">/* Update the progress meter */</comment>
        <if pos:line="104" pos:column="9">if<condition pos:line="104" pos:column="11">(<expr><call><name pos:line="104" pos:column="12">Curl_pgrsUpdate<pos:position pos:line="104" pos:column="27"/></name><argument_list pos:line="104" pos:column="27">(<argument><expr><name pos:line="104" pos:column="28">conn<pos:position pos:line="104" pos:column="32"/></name></expr></argument>)<pos:position pos:line="104" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="34"/></condition><then pos:line="104" pos:column="34">
          <block type="pseudo"><return pos:line="105" pos:column="11">return <expr><name pos:line="105" pos:column="18">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="105" pos:column="43"/></name></expr>;<pos:position pos:line="105" pos:column="44"/></return></block></then></if>
      }<pos:position pos:line="106" pos:column="8"/></block></else></if>
    }<pos:position pos:line="107" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="109" pos:column="5">/* Check for transfer timeout every 10 blocks, or after timeout */</comment>
    <if pos:line="110" pos:column="5">if<condition pos:line="110" pos:column="7">(<expr><name pos:line="110" pos:column="8">check_time<pos:position pos:line="110" pos:column="18"/></name><operator pos:line="110" pos:column="18">%<pos:position pos:line="110" pos:column="19"/></operator><literal type="number" pos:line="110" pos:column="19">10<pos:position pos:line="110" pos:column="21"/></literal><operator pos:line="110" pos:column="21">==<pos:position pos:line="110" pos:column="23"/></operator><literal type="number" pos:line="110" pos:column="23">0<pos:position pos:line="110" pos:column="24"/></literal></expr>)<pos:position pos:line="110" pos:column="25"/></condition><then pos:line="110" pos:column="25"> <block pos:line="110" pos:column="26">{
      <decl_stmt><decl><type><name pos:line="111" pos:column="7">time_t<pos:position pos:line="111" pos:column="13"/></name></type> <name pos:line="111" pos:column="14">current<pos:position pos:line="111" pos:column="21"/></name></decl>;<pos:position pos:line="111" pos:column="22"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="112" pos:column="7">time<pos:position pos:line="112" pos:column="11"/></name><argument_list pos:line="112" pos:column="11">(<argument><expr><operator pos:line="112" pos:column="12">&amp;<pos:position pos:line="112" pos:column="17"/></operator><name pos:line="112" pos:column="13">current<pos:position pos:line="112" pos:column="20"/></name></expr></argument>)<pos:position pos:line="112" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="22"/></expr_stmt>
      <if pos:line="113" pos:column="7">if<condition pos:line="113" pos:column="9">(<expr><name pos:line="113" pos:column="10">current<pos:position pos:line="113" pos:column="17"/></name><operator pos:line="113" pos:column="17">&gt;<pos:position pos:line="113" pos:column="21"/></operator><name><name pos:line="113" pos:column="18">state<pos:position pos:line="113" pos:column="23"/></name><operator pos:line="113" pos:column="23">-&gt;<pos:position pos:line="113" pos:column="28"/></operator><name pos:line="113" pos:column="25">max_time<pos:position pos:line="113" pos:column="33"/></name></name></expr>)<pos:position pos:line="113" pos:column="34"/></condition><then pos:line="113" pos:column="34"> <block pos:line="113" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="114" pos:column="9">DEBUGF<pos:position pos:line="114" pos:column="15"/></name><argument_list pos:line="114" pos:column="15">(<argument><expr><call><name pos:line="114" pos:column="16">infof<pos:position pos:line="114" pos:column="21"/></name><argument_list pos:line="114" pos:column="21">(<argument><expr><name pos:line="114" pos:column="22">data<pos:position pos:line="114" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="28">"timeout: %d &gt; %d\n"<pos:position pos:line="114" pos:column="51"/></literal></expr></argument>,
                     <argument><expr><name pos:line="115" pos:column="22">current<pos:position pos:line="115" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="31">state<pos:position pos:line="115" pos:column="36"/></name><operator pos:line="115" pos:column="36">-&gt;<pos:position pos:line="115" pos:column="41"/></operator><name pos:line="115" pos:column="38">max_time<pos:position pos:line="115" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="115" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="115" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="116" pos:column="9">state<pos:position pos:line="116" pos:column="14"/></name><operator pos:line="116" pos:column="14">-&gt;<pos:position pos:line="116" pos:column="19"/></operator><name pos:line="116" pos:column="16">error<pos:position pos:line="116" pos:column="21"/></name></name> <operator pos:line="116" pos:column="22">=<pos:position pos:line="116" pos:column="23"/></operator> <name pos:line="116" pos:column="24">TFTP_ERR_TIMEOUT<pos:position pos:line="116" pos:column="40"/></name></expr>;<pos:position pos:line="116" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="117" pos:column="9">state<pos:position pos:line="117" pos:column="14"/></name><operator pos:line="117" pos:column="14">-&gt;<pos:position pos:line="117" pos:column="19"/></operator><name pos:line="117" pos:column="16">state<pos:position pos:line="117" pos:column="21"/></name></name> <operator pos:line="117" pos:column="22">=<pos:position pos:line="117" pos:column="23"/></operator> <name pos:line="117" pos:column="24">TFTP_STATE_FIN<pos:position pos:line="117" pos:column="38"/></name></expr>;<pos:position pos:line="117" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="118" pos:column="8"/></block></then></if>
    }<pos:position pos:line="119" pos:column="6"/></block></then></if>

  }<pos:position pos:line="121" pos:column="4"/></block></for>
  <if pos:line="122" pos:column="3">if<condition pos:line="122" pos:column="5">(<expr><name pos:line="122" pos:column="6">code<pos:position pos:line="122" pos:column="10"/></name></expr>)<pos:position pos:line="122" pos:column="11"/></condition><then pos:line="122" pos:column="11">
    <block type="pseudo"><return pos:line="123" pos:column="5">return <expr><name pos:line="123" pos:column="12">code<pos:position pos:line="123" pos:column="16"/></name></expr>;<pos:position pos:line="123" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="125" pos:column="3">/* Tell curl we're done */</comment>
  <expr_stmt><expr><name pos:line="126" pos:column="3">code<pos:position pos:line="126" pos:column="7"/></name> <operator pos:line="126" pos:column="8">=<pos:position pos:line="126" pos:column="9"/></operator> <call><name pos:line="126" pos:column="10">Curl_setup_transfer<pos:position pos:line="126" pos:column="29"/></name><argument_list pos:line="126" pos:column="29">(<argument><expr><name pos:line="126" pos:column="30">conn<pos:position pos:line="126" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="126" pos:column="36">-<pos:position pos:line="126" pos:column="37"/></operator><literal type="number" pos:line="126" pos:column="37">1<pos:position pos:line="126" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="126" pos:column="40">-<pos:position pos:line="126" pos:column="41"/></operator><literal type="number" pos:line="126" pos:column="41">1<pos:position pos:line="126" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="126" pos:column="44">FALSE<pos:position pos:line="126" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="51">NULL<pos:position pos:line="126" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="126" pos:column="57">-<pos:position pos:line="126" pos:column="58"/></operator><literal type="number" pos:line="126" pos:column="58">1<pos:position pos:line="126" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="126" pos:column="61">NULL<pos:position pos:line="126" pos:column="65"/></name></expr></argument>)<pos:position pos:line="126" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="67"/></expr_stmt>
  <if pos:line="127" pos:column="3">if<condition pos:line="127" pos:column="5">(<expr><name pos:line="127" pos:column="6">code<pos:position pos:line="127" pos:column="10"/></name></expr>)<pos:position pos:line="127" pos:column="11"/></condition><then pos:line="127" pos:column="11">
    <block type="pseudo"><return pos:line="128" pos:column="5">return <expr><name pos:line="128" pos:column="12">code<pos:position pos:line="128" pos:column="16"/></name></expr>;<pos:position pos:line="128" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="130" pos:column="3">/* If we have encountered an error */</comment>
  <if pos:line="131" pos:column="3">if<condition pos:line="131" pos:column="5">(<expr><name><name pos:line="131" pos:column="6">state<pos:position pos:line="131" pos:column="11"/></name><operator pos:line="131" pos:column="11">-&gt;<pos:position pos:line="131" pos:column="16"/></operator><name pos:line="131" pos:column="13">error<pos:position pos:line="131" pos:column="18"/></name></name> <operator pos:line="131" pos:column="19">!=<pos:position pos:line="131" pos:column="21"/></operator> <name pos:line="131" pos:column="22">TFTP_ERR_NONE<pos:position pos:line="131" pos:column="35"/></name></expr>)<pos:position pos:line="131" pos:column="36"/></condition><then pos:line="131" pos:column="36"> <block pos:line="131" pos:column="37">{

    <comment type="block" pos:line="133" pos:column="5">/* Translate internal error codes to curl error codes */</comment>
    <switch pos:line="134" pos:column="5">switch<condition pos:line="134" pos:column="11">(<expr><name><name pos:line="134" pos:column="12">state<pos:position pos:line="134" pos:column="17"/></name><operator pos:line="134" pos:column="17">-&gt;<pos:position pos:line="134" pos:column="22"/></operator><name pos:line="134" pos:column="19">error<pos:position pos:line="134" pos:column="24"/></name></name></expr>)<pos:position pos:line="134" pos:column="25"/></condition> <block pos:line="134" pos:column="26">{
    <case pos:line="135" pos:column="5">case <expr><name pos:line="135" pos:column="10">TFTP_ERR_NOTFOUND<pos:position pos:line="135" pos:column="27"/></name></expr>:<pos:position pos:line="135" pos:column="28"/></case>
      <expr_stmt><expr><name pos:line="136" pos:column="7">code<pos:position pos:line="136" pos:column="11"/></name> <operator pos:line="136" pos:column="12">=<pos:position pos:line="136" pos:column="13"/></operator> <name pos:line="136" pos:column="14">CURLE_TFTP_NOTFOUND<pos:position pos:line="136" pos:column="33"/></name></expr>;<pos:position pos:line="136" pos:column="34"/></expr_stmt>
      <break pos:line="137" pos:column="7">break;<pos:position pos:line="137" pos:column="13"/></break>
    <case pos:line="138" pos:column="5">case <expr><name pos:line="138" pos:column="10">TFTP_ERR_PERM<pos:position pos:line="138" pos:column="23"/></name></expr>:<pos:position pos:line="138" pos:column="24"/></case>
      <expr_stmt><expr><name pos:line="139" pos:column="7">code<pos:position pos:line="139" pos:column="11"/></name> <operator pos:line="139" pos:column="12">=<pos:position pos:line="139" pos:column="13"/></operator> <name pos:line="139" pos:column="14">CURLE_TFTP_PERM<pos:position pos:line="139" pos:column="29"/></name></expr>;<pos:position pos:line="139" pos:column="30"/></expr_stmt>
      <break pos:line="140" pos:column="7">break;<pos:position pos:line="140" pos:column="13"/></break>
    <case pos:line="141" pos:column="5">case <expr><name pos:line="141" pos:column="10">TFTP_ERR_DISKFULL<pos:position pos:line="141" pos:column="27"/></name></expr>:<pos:position pos:line="141" pos:column="28"/></case>
      <expr_stmt><expr><name pos:line="142" pos:column="7">code<pos:position pos:line="142" pos:column="11"/></name> <operator pos:line="142" pos:column="12">=<pos:position pos:line="142" pos:column="13"/></operator> <name pos:line="142" pos:column="14">CURLE_REMOTE_DISK_FULL<pos:position pos:line="142" pos:column="36"/></name></expr>;<pos:position pos:line="142" pos:column="37"/></expr_stmt>
      <break pos:line="143" pos:column="7">break;<pos:position pos:line="143" pos:column="13"/></break>
    <case pos:line="144" pos:column="5">case <expr><name pos:line="144" pos:column="10">TFTP_ERR_UNDEF<pos:position pos:line="144" pos:column="24"/></name></expr>:<pos:position pos:line="144" pos:column="25"/></case>
    <case pos:line="145" pos:column="5">case <expr><name pos:line="145" pos:column="10">TFTP_ERR_ILLEGAL<pos:position pos:line="145" pos:column="26"/></name></expr>:<pos:position pos:line="145" pos:column="27"/></case>
      <expr_stmt><expr><name pos:line="146" pos:column="7">code<pos:position pos:line="146" pos:column="11"/></name> <operator pos:line="146" pos:column="12">=<pos:position pos:line="146" pos:column="13"/></operator> <name pos:line="146" pos:column="14">CURLE_TFTP_ILLEGAL<pos:position pos:line="146" pos:column="32"/></name></expr>;<pos:position pos:line="146" pos:column="33"/></expr_stmt>
      <break pos:line="147" pos:column="7">break;<pos:position pos:line="147" pos:column="13"/></break>
    <case pos:line="148" pos:column="5">case <expr><name pos:line="148" pos:column="10">TFTP_ERR_UNKNOWNID<pos:position pos:line="148" pos:column="28"/></name></expr>:<pos:position pos:line="148" pos:column="29"/></case>
      <expr_stmt><expr><name pos:line="149" pos:column="7">code<pos:position pos:line="149" pos:column="11"/></name> <operator pos:line="149" pos:column="12">=<pos:position pos:line="149" pos:column="13"/></operator> <name pos:line="149" pos:column="14">CURLE_TFTP_UNKNOWNID<pos:position pos:line="149" pos:column="34"/></name></expr>;<pos:position pos:line="149" pos:column="35"/></expr_stmt>
      <break pos:line="150" pos:column="7">break;<pos:position pos:line="150" pos:column="13"/></break>
    <case pos:line="151" pos:column="5">case <expr><name pos:line="151" pos:column="10">TFTP_ERR_EXISTS<pos:position pos:line="151" pos:column="25"/></name></expr>:<pos:position pos:line="151" pos:column="26"/></case>
      <expr_stmt><expr><name pos:line="152" pos:column="7">code<pos:position pos:line="152" pos:column="11"/></name> <operator pos:line="152" pos:column="12">=<pos:position pos:line="152" pos:column="13"/></operator> <name pos:line="152" pos:column="14">CURLE_REMOTE_FILE_EXISTS<pos:position pos:line="152" pos:column="38"/></name></expr>;<pos:position pos:line="152" pos:column="39"/></expr_stmt>
      <break pos:line="153" pos:column="7">break;<pos:position pos:line="153" pos:column="13"/></break>
    <case pos:line="154" pos:column="5">case <expr><name pos:line="154" pos:column="10">TFTP_ERR_NOSUCHUSER<pos:position pos:line="154" pos:column="29"/></name></expr>:<pos:position pos:line="154" pos:column="30"/></case>
      <expr_stmt><expr><name pos:line="155" pos:column="7">code<pos:position pos:line="155" pos:column="11"/></name> <operator pos:line="155" pos:column="12">=<pos:position pos:line="155" pos:column="13"/></operator> <name pos:line="155" pos:column="14">CURLE_TFTP_NOSUCHUSER<pos:position pos:line="155" pos:column="35"/></name></expr>;<pos:position pos:line="155" pos:column="36"/></expr_stmt>
      <break pos:line="156" pos:column="7">break;<pos:position pos:line="156" pos:column="13"/></break>
    <case pos:line="157" pos:column="5">case <expr><name pos:line="157" pos:column="10">TFTP_ERR_TIMEOUT<pos:position pos:line="157" pos:column="26"/></name></expr>:<pos:position pos:line="157" pos:column="27"/></case>
      <expr_stmt><expr><name pos:line="158" pos:column="7">code<pos:position pos:line="158" pos:column="11"/></name> <operator pos:line="158" pos:column="12">=<pos:position pos:line="158" pos:column="13"/></operator> <name pos:line="158" pos:column="14">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="158" pos:column="38"/></name></expr>;<pos:position pos:line="158" pos:column="39"/></expr_stmt>
      <break pos:line="159" pos:column="7">break;<pos:position pos:line="159" pos:column="13"/></break>
    <case pos:line="160" pos:column="5">case <expr><name pos:line="160" pos:column="10">TFTP_ERR_NORESPONSE<pos:position pos:line="160" pos:column="29"/></name></expr>:<pos:position pos:line="160" pos:column="30"/></case>
      <expr_stmt><expr><name pos:line="161" pos:column="7">code<pos:position pos:line="161" pos:column="11"/></name> <operator pos:line="161" pos:column="12">=<pos:position pos:line="161" pos:column="13"/></operator> <name pos:line="161" pos:column="14">CURLE_COULDNT_CONNECT<pos:position pos:line="161" pos:column="35"/></name></expr>;<pos:position pos:line="161" pos:column="36"/></expr_stmt>
      <break pos:line="162" pos:column="7">break;<pos:position pos:line="162" pos:column="13"/></break>
    <default pos:line="163" pos:column="5">default:<pos:position pos:line="163" pos:column="13"/></default>
      <expr_stmt><expr><name pos:line="164" pos:column="7">code<pos:position pos:line="164" pos:column="11"/></name><operator pos:line="164" pos:column="11">=<pos:position pos:line="164" pos:column="12"/></operator> <name pos:line="164" pos:column="13">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="164" pos:column="38"/></name></expr>;<pos:position pos:line="164" pos:column="39"/></expr_stmt>
      <break pos:line="165" pos:column="7">break;<pos:position pos:line="165" pos:column="13"/></break>
    }<pos:position pos:line="166" pos:column="6"/></block></switch>
  }<pos:position pos:line="167" pos:column="4"/></block></then>
  <else pos:line="168" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="169" pos:column="5">code<pos:position pos:line="169" pos:column="9"/></name> <operator pos:line="169" pos:column="10">=<pos:position pos:line="169" pos:column="11"/></operator> <name pos:line="169" pos:column="12">CURLE_OK<pos:position pos:line="169" pos:column="20"/></name></expr>;<pos:position pos:line="169" pos:column="21"/></expr_stmt></block></else></if>
  <return pos:line="170" pos:column="3">return <expr><name pos:line="170" pos:column="10">code<pos:position pos:line="170" pos:column="14"/></name></expr>;<pos:position pos:line="170" pos:column="15"/></return>
}<pos:position pos:line="171" pos:column="2"/></block></function></unit>
