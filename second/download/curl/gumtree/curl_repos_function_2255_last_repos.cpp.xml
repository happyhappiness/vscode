<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2255_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">win32_init<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">USE_WINSOCK<pos:position pos:line="3" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">WORD<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">wVersionRequested<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">WSADATA<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">wsaData<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">res<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><call><name pos:line="8" pos:column="5">defined<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">ENABLE_IPV6<pos:position pos:line="8" pos:column="24"/></name></expr></argument>)<pos:position pos:line="8" pos:column="25"/></argument_list></call> <operator pos:line="8" pos:column="26">&amp;&amp;<pos:position pos:line="8" pos:column="36"/></operator> <operator pos:line="8" pos:column="29">(<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="30">USE_WINSOCK<pos:position pos:line="8" pos:column="41"/></name> <operator pos:line="8" pos:column="42">&lt;<pos:position pos:line="8" pos:column="46"/></operator> <literal type="number" pos:line="8" pos:column="44">2<pos:position pos:line="8" pos:column="45"/></literal><operator pos:line="8" pos:column="45">)<pos:position pos:line="8" pos:column="46"/></operator></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">Error<pos:position pos:line="9" pos:column="8"/></name> <name pos:line="9" pos:column="9">IPV6_requires_winsock2<pos:position pos:line="9" pos:column="31"/></name></type>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

  <name pos:line="12" pos:column="3">wVersionRequested<pos:position pos:line="12" pos:column="20"/></name> <init pos:line="12" pos:column="21">= <expr><call><name pos:line="12" pos:column="23">MAKEWORD<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">USE_WINSOCK<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">USE_WINSOCK<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="58"/></decl_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">res<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <call><name pos:line="14" pos:column="9">WSAStartup<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">wVersionRequested<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="39">&amp;<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="40">wsaData<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">res<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">!=<pos:position pos:line="16" pos:column="12"/></operator> <literal type="number" pos:line="16" pos:column="13">0<pos:position pos:line="16" pos:column="14"/></literal></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15">
    <comment type="block" pos:line="17" pos:column="5">/* Tell the user that we couldn't find a useable */</comment>
    <comment type="block" pos:line="18" pos:column="5">/* winsock.dll.     */</comment>
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="19" pos:column="29"/></name></expr>;<pos:position pos:line="19" pos:column="30"/></return></block></then></if>

  <comment type="block" pos:line="21" pos:column="3">/* Confirm that the Windows Sockets DLL supports what we need.*/</comment>
  <comment type="block" pos:line="22" pos:column="3">/* Note that if the DLL supports versions greater */</comment>
  <comment type="block" pos:line="23" pos:column="3">/* than wVersionRequested, it will still return */</comment>
  <comment type="block" pos:line="24" pos:column="3">/* wVersionRequested in wVersion. wHighVersion contains the */</comment>
  <comment type="block" pos:line="25" pos:column="3">/* highest supported version. */</comment>

  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><call><name pos:line="27" pos:column="6">LOBYTE<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name><name pos:line="27" pos:column="13">wsaData<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">.<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">wVersion<pos:position pos:line="27" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call> <operator pos:line="27" pos:column="31">!=<pos:position pos:line="27" pos:column="33"/></operator> <call><name pos:line="27" pos:column="34">LOBYTE<pos:position pos:line="27" pos:column="40"/></name><argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">wVersionRequested<pos:position pos:line="27" pos:column="58"/></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call> <operator pos:line="27" pos:column="60">||<pos:position pos:line="27" pos:column="62"/></operator>
     <call><name pos:line="28" pos:column="6">HIBYTE<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name><name pos:line="28" pos:column="13">wsaData<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">.<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">wVersion<pos:position pos:line="28" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></call> <operator pos:line="28" pos:column="31">!=<pos:position pos:line="28" pos:column="33"/></operator> <call><name pos:line="28" pos:column="34">HIBYTE<pos:position pos:line="28" pos:column="40"/></name><argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">wVersionRequested<pos:position pos:line="28" pos:column="58"/></name></expr></argument>)<pos:position pos:line="28" pos:column="59"/></argument_list></call></expr> )<pos:position pos:line="28" pos:column="61"/></condition><then pos:line="28" pos:column="61"> <block pos:line="28" pos:column="62">{
    <comment type="block" pos:line="29" pos:column="5">/* Tell the user that we couldn't find a useable */</comment>

    <comment type="block" pos:line="31" pos:column="5">/* winsock.dll. */</comment>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">WSACleanup<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">()<pos:position pos:line="32" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="18"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="33" pos:column="29"/></name></expr>;<pos:position pos:line="33" pos:column="30"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="35" pos:column="3">/* The Windows Sockets DLL is acceptable. Proceed. */</comment>
<cpp:elif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">elif<pos:position pos:line="36" pos:column="6"/></cpp:directive> <expr><call><name pos:line="36" pos:column="7">defined<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">USE_LWIPSOCK<pos:position pos:line="36" pos:column="27"/></name></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">lwip_init<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">()<pos:position pos:line="37" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="15"/></expr_stmt>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive> <name pos:line="40" pos:column="8">USE_WINDOWS_SSPI<pos:position pos:line="40" pos:column="24"/></name></cpp:ifdef>
  <block pos:line="41" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">CURLcode<pos:position pos:line="42" pos:column="13"/></name></type> <name pos:line="42" pos:column="14">result<pos:position pos:line="42" pos:column="20"/></name> <init pos:line="42" pos:column="21">= <expr><call><name pos:line="42" pos:column="23">Curl_sspi_global_init<pos:position pos:line="42" pos:column="44"/></name><argument_list pos:line="42" pos:column="44">()<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="42" pos:column="47"/></decl_stmt>
    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><name pos:line="43" pos:column="8">result<pos:position pos:line="43" pos:column="14"/></name></expr>)<pos:position pos:line="43" pos:column="15"/></condition><then pos:line="43" pos:column="15">
      <block type="pseudo"><return pos:line="44" pos:column="7">return <expr><name pos:line="44" pos:column="14">result<pos:position pos:line="44" pos:column="20"/></name></expr>;<pos:position pos:line="44" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="45" pos:column="4"/></block>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="48" pos:column="3">return <expr><name pos:line="48" pos:column="10">CURLE_OK<pos:position pos:line="48" pos:column="18"/></name></expr>;<pos:position pos:line="48" pos:column="19"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
