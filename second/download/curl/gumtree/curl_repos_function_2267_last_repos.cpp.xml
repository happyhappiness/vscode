<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2267_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">wait_or_timeout<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">Curl_multi<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">multi<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="59">struct<pos:position pos:line="1" pos:column="65"/></name> <name pos:line="1" pos:column="66">events<pos:position pos:line="1" pos:column="72"/></name></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">ev<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">bool<pos:position pos:line="3" pos:column="7"/></name></type> <name pos:line="3" pos:column="8">done<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><name pos:line="3" pos:column="15">FALSE<pos:position pos:line="3" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLMcode<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">mcode<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLM_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURLE_OK<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

  <while pos:line="7" pos:column="3">while<condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">done<pos:position pos:line="7" pos:column="14"/></name></expr>)<pos:position pos:line="7" pos:column="15"/></condition> <block pos:line="7" pos:column="16">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">CURLMsg<pos:position pos:line="8" pos:column="12"/></name> <modifier pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></modifier></type><name pos:line="8" pos:column="14">msg<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">socketmonitor<pos:position pos:line="9" pos:column="25"/></name></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">m<pos:position pos:line="9" pos:column="28"/></name></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">pollfd<pos:position pos:line="10" pos:column="18"/></name></name> <modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type><name pos:line="10" pos:column="20">f<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">pollfd<pos:position pos:line="11" pos:column="18"/></name></name></type> <name><name pos:line="11" pos:column="19">fds<pos:position pos:line="11" pos:column="22"/></name><index pos:line="11" pos:column="22">[<expr><literal type="number" pos:line="11" pos:column="23">4<pos:position pos:line="11" pos:column="24"/></literal></expr>]<pos:position pos:line="11" pos:column="25"/></index></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">numfds<pos:position pos:line="12" pos:column="15"/></name> <init pos:line="12" pos:column="16">= <expr><literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">pollrc<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">i<pos:position pos:line="14" pos:column="10"/></name></decl>;<pos:position pos:line="14" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">struct<pos:position pos:line="15" pos:column="11"/></name> <name pos:line="15" pos:column="12">curltime<pos:position pos:line="15" pos:column="20"/></name></name></type> <name pos:line="15" pos:column="21">before<pos:position pos:line="15" pos:column="27"/></name></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">struct<pos:position pos:line="16" pos:column="11"/></name> <name pos:line="16" pos:column="12">curltime<pos:position pos:line="16" pos:column="20"/></name></name></type> <name pos:line="16" pos:column="21">after<pos:position pos:line="16" pos:column="26"/></name></decl>;<pos:position pos:line="16" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* populate the fds[] array */</comment>
    <for pos:line="19" pos:column="5">for<control pos:line="19" pos:column="8">(<init><expr><name pos:line="19" pos:column="9">m<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <name><name pos:line="19" pos:column="13">ev<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">list<pos:position pos:line="19" pos:column="21"/></name></name></expr><operator pos:line="19" pos:column="21">,<pos:position pos:line="19" pos:column="22"/></operator> <expr><name pos:line="19" pos:column="23">f<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <operator pos:line="19" pos:column="27">&amp;<pos:position pos:line="19" pos:column="32"/></operator><name><name pos:line="19" pos:column="28">fds<pos:position pos:line="19" pos:column="31"/></name><index pos:line="19" pos:column="31">[<expr><literal type="number" pos:line="19" pos:column="32">0<pos:position pos:line="19" pos:column="33"/></literal></expr>]<pos:position pos:line="19" pos:column="34"/></index></name></expr>;<pos:position pos:line="19" pos:column="35"/></init> <condition><expr><name pos:line="19" pos:column="36">m<pos:position pos:line="19" pos:column="37"/></name></expr>;<pos:position pos:line="19" pos:column="38"/></condition> <incr><expr><name pos:line="19" pos:column="39">m<pos:position pos:line="19" pos:column="40"/></name> <operator pos:line="19" pos:column="41">=<pos:position pos:line="19" pos:column="42"/></operator> <name><name pos:line="19" pos:column="43">m<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">-&gt;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="46">next<pos:position pos:line="19" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="19" pos:column="51"/></control> <block pos:line="19" pos:column="52">{
      <expr_stmt><expr><name><name pos:line="20" pos:column="7">f<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">-&gt;<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="10">fd<pos:position pos:line="20" pos:column="12"/></name></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name><name pos:line="20" pos:column="15">m<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">socket<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">.<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">fd<pos:position pos:line="20" pos:column="27"/></name></name></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="21" pos:column="7">f<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">-&gt;<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="10">events<pos:position pos:line="21" pos:column="16"/></name></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name><name pos:line="21" pos:column="19">m<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">-&gt;<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="22">socket<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">.<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">events<pos:position pos:line="21" pos:column="35"/></name></name></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="22" pos:column="7">f<pos:position pos:line="22" pos:column="8"/></name><operator pos:line="22" pos:column="8">-&gt;<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="10">revents<pos:position pos:line="22" pos:column="17"/></name></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <literal type="number" pos:line="22" pos:column="20">0<pos:position pos:line="22" pos:column="21"/></literal></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
      <comment type="block" pos:line="23" pos:column="7">/* fprintf(stderr, "poll() %d check socket %d\n", numfds, f-&gt;fd); */</comment>
      <expr_stmt><expr><name pos:line="24" pos:column="7">f<pos:position pos:line="24" pos:column="8"/></name><operator pos:line="24" pos:column="8">++<pos:position pos:line="24" pos:column="10"/></operator></expr>;<pos:position pos:line="24" pos:column="11"/></expr_stmt>
      <expr_stmt><expr><name pos:line="25" pos:column="7">numfds<pos:position pos:line="25" pos:column="13"/></name><operator pos:line="25" pos:column="13">++<pos:position pos:line="25" pos:column="15"/></operator></expr>;<pos:position pos:line="25" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></for>

    <comment type="block" pos:line="28" pos:column="5">/* get the time stamp to use to figure out how long poll takes */</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">before<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <call><name pos:line="29" pos:column="14">curlx_tvnow<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">()<pos:position pos:line="29" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* wait for activity or timeout */</comment>
    <expr_stmt><expr><name pos:line="32" pos:column="5">pollrc<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">Curl_poll<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">fds<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="29">numfds<pos:position pos:line="32" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="37">(<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="38">int<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">)<pos:position pos:line="32" pos:column="42"/></operator><name><name pos:line="32" pos:column="42">ev<pos:position pos:line="32" pos:column="44"/></name><operator pos:line="32" pos:column="44">-&gt;<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="46">ms<pos:position pos:line="32" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><name pos:line="34" pos:column="5">after<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">=<pos:position pos:line="34" pos:column="12"/></operator> <call><name pos:line="34" pos:column="13">curlx_tvnow<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">()<pos:position pos:line="34" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="36" pos:column="5">ev<pos:position pos:line="36" pos:column="7"/></name><operator pos:line="36" pos:column="7">-&gt;<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="9">msbump<pos:position pos:line="36" pos:column="15"/></name></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">FALSE<pos:position pos:line="36" pos:column="23"/></name></expr>;<pos:position pos:line="36" pos:column="24"/></expr_stmt> <comment type="block" pos:line="36" pos:column="25">/* reset here */</comment>

    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><literal type="number" pos:line="38" pos:column="8">0<pos:position pos:line="38" pos:column="9"/></literal> <operator pos:line="38" pos:column="10">==<pos:position pos:line="38" pos:column="12"/></operator> <name pos:line="38" pos:column="13">pollrc<pos:position pos:line="38" pos:column="19"/></name></expr>)<pos:position pos:line="38" pos:column="20"/></condition><then pos:line="38" pos:column="20"> <block pos:line="38" pos:column="21">{
      <comment type="block" pos:line="39" pos:column="7">/* timeout! */</comment>
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">ev<pos:position pos:line="40" pos:column="9"/></name><operator pos:line="40" pos:column="9">-&gt;<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="11">ms<pos:position pos:line="40" pos:column="13"/></name></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <literal type="number" pos:line="40" pos:column="16">0<pos:position pos:line="40" pos:column="17"/></literal></expr>;<pos:position pos:line="40" pos:column="18"/></expr_stmt>
      <comment type="block" pos:line="41" pos:column="7">/* fprintf(stderr, "call curl_multi_socket_action(TIMEOUT)\n"); */</comment>
      <expr_stmt><expr><name pos:line="42" pos:column="7">mcode<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">curl_multi_socket_action<pos:position pos:line="42" pos:column="39"/></name><argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">multi<pos:position pos:line="42" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="47">CURL_SOCKET_TIMEOUT<pos:position pos:line="42" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="68">0<pos:position pos:line="42" pos:column="69"/></literal></expr></argument>,
                                       <argument><expr><operator pos:line="43" pos:column="40">&amp;<pos:position pos:line="43" pos:column="45"/></operator><name><name pos:line="43" pos:column="41">ev<pos:position pos:line="43" pos:column="43"/></name><operator pos:line="43" pos:column="43">-&gt;<pos:position pos:line="43" pos:column="48"/></operator><name pos:line="43" pos:column="45">running_handles<pos:position pos:line="43" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then>
    <elseif pos:line="45" pos:column="5">else <if pos:line="45" pos:column="10">if<condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">pollrc<pos:position pos:line="45" pos:column="19"/></name> <operator pos:line="45" pos:column="20">&gt;<pos:position pos:line="45" pos:column="24"/></operator> <literal type="number" pos:line="45" pos:column="22">0<pos:position pos:line="45" pos:column="23"/></literal></expr>)<pos:position pos:line="45" pos:column="24"/></condition><then pos:line="45" pos:column="24"> <block pos:line="45" pos:column="25">{
      <comment type="block" pos:line="46" pos:column="7">/* loop over the monitored sockets to see which ones had activity */</comment>
      <for pos:line="47" pos:column="7">for<control pos:line="47" pos:column="10">(<init><expr><name pos:line="47" pos:column="11">i<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">=<pos:position pos:line="47" pos:column="14"/></operator> <literal type="number" pos:line="47" pos:column="15">0<pos:position pos:line="47" pos:column="16"/></literal></expr>;<pos:position pos:line="47" pos:column="17"/></init> <condition><expr><name pos:line="47" pos:column="18">i<pos:position pos:line="47" pos:column="19"/></name><operator pos:line="47" pos:column="19">&lt;<pos:position pos:line="47" pos:column="23"/></operator> <name pos:line="47" pos:column="21">numfds<pos:position pos:line="47" pos:column="27"/></name></expr>;<pos:position pos:line="47" pos:column="28"/></condition> <incr><expr><name pos:line="47" pos:column="29">i<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">++<pos:position pos:line="47" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="47" pos:column="33"/></control> <block pos:line="47" pos:column="34">{
        <if pos:line="48" pos:column="9">if<condition pos:line="48" pos:column="11">(<expr><name><name pos:line="48" pos:column="12">fds<pos:position pos:line="48" pos:column="15"/></name><index pos:line="48" pos:column="15">[<expr><name pos:line="48" pos:column="16">i<pos:position pos:line="48" pos:column="17"/></name></expr>]<pos:position pos:line="48" pos:column="18"/></index></name><operator pos:line="48" pos:column="18">.<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="19">revents<pos:position pos:line="48" pos:column="26"/></name></expr>)<pos:position pos:line="48" pos:column="27"/></condition><then pos:line="48" pos:column="27"> <block pos:line="48" pos:column="28">{
          <comment type="block" pos:line="49" pos:column="11">/* socket activity, tell libcurl */</comment>
          <decl_stmt><decl><type><name pos:line="50" pos:column="11">int<pos:position pos:line="50" pos:column="14"/></name></type> <name pos:line="50" pos:column="15">act<pos:position pos:line="50" pos:column="18"/></name> <init pos:line="50" pos:column="19">= <expr><call><name pos:line="50" pos:column="21">poll2cselect<pos:position pos:line="50" pos:column="33"/></name><argument_list pos:line="50" pos:column="33">(<argument><expr><name><name pos:line="50" pos:column="34">fds<pos:position pos:line="50" pos:column="37"/></name><index pos:line="50" pos:column="37">[<expr><name pos:line="50" pos:column="38">i<pos:position pos:line="50" pos:column="39"/></name></expr>]<pos:position pos:line="50" pos:column="40"/></index></name><operator pos:line="50" pos:column="40">.<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="41">revents<pos:position pos:line="50" pos:column="48"/></name></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="50"/></decl_stmt> <comment type="block" pos:line="50" pos:column="51">/* convert */</comment>
          <expr_stmt><expr><call><name pos:line="51" pos:column="11">infof<pos:position pos:line="51" pos:column="16"/></name><argument_list pos:line="51" pos:column="16">(<argument><expr><name><name pos:line="51" pos:column="17">multi<pos:position pos:line="51" pos:column="22"/></name><operator pos:line="51" pos:column="22">-&gt;<pos:position pos:line="51" pos:column="27"/></operator><name pos:line="51" pos:column="24">easyp<pos:position pos:line="51" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="31">"call curl_multi_socket_action(socket %d)\n"<pos:position pos:line="51" pos:column="75"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="52" pos:column="17">fds<pos:position pos:line="52" pos:column="20"/></name><index pos:line="52" pos:column="20">[<expr><name pos:line="52" pos:column="21">i<pos:position pos:line="52" pos:column="22"/></name></expr>]<pos:position pos:line="52" pos:column="23"/></index></name><operator pos:line="52" pos:column="23">.<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="24">fd<pos:position pos:line="52" pos:column="26"/></name></expr></argument>)<pos:position pos:line="52" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><name pos:line="53" pos:column="11">mcode<pos:position pos:line="53" pos:column="16"/></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <call><name pos:line="53" pos:column="19">curl_multi_socket_action<pos:position pos:line="53" pos:column="43"/></name><argument_list pos:line="53" pos:column="43">(<argument><expr><name pos:line="53" pos:column="44">multi<pos:position pos:line="53" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="51">fds<pos:position pos:line="53" pos:column="54"/></name><index pos:line="53" pos:column="54">[<expr><name pos:line="53" pos:column="55">i<pos:position pos:line="53" pos:column="56"/></name></expr>]<pos:position pos:line="53" pos:column="57"/></index></name><operator pos:line="53" pos:column="57">.<pos:position pos:line="53" pos:column="58"/></operator><name pos:line="53" pos:column="58">fd<pos:position pos:line="53" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="62">act<pos:position pos:line="53" pos:column="65"/></name></expr></argument>,
                                           <argument><expr><operator pos:line="54" pos:column="44">&amp;<pos:position pos:line="54" pos:column="49"/></operator><name><name pos:line="54" pos:column="45">ev<pos:position pos:line="54" pos:column="47"/></name><operator pos:line="54" pos:column="47">-&gt;<pos:position pos:line="54" pos:column="52"/></operator><name pos:line="54" pos:column="49">running_handles<pos:position pos:line="54" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="66"/></expr_stmt>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>
      }<pos:position pos:line="56" pos:column="8"/></block></for>

      <if pos:line="58" pos:column="7">if<condition pos:line="58" pos:column="9">(<expr><operator pos:line="58" pos:column="10">!<pos:position pos:line="58" pos:column="11"/></operator><name><name pos:line="58" pos:column="11">ev<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">-&gt;<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="15">msbump<pos:position pos:line="58" pos:column="21"/></name></name></expr>)<pos:position pos:line="58" pos:column="22"/></condition><then pos:line="58" pos:column="22"> <block pos:line="58" pos:column="23">{
        <comment type="block" pos:line="59" pos:column="9">/* If nothing updated the timeout, we decrease it by the spent time.
         * If it was updated, it has the new timeout time stored already.
         */</comment>
        <decl_stmt><decl><type><name pos:line="62" pos:column="9">time_t<pos:position pos:line="62" pos:column="15"/></name></type> <name pos:line="62" pos:column="16">timediff<pos:position pos:line="62" pos:column="24"/></name> <init pos:line="62" pos:column="25">= <expr><call><name pos:line="62" pos:column="27">curlx_tvdiff<pos:position pos:line="62" pos:column="39"/></name><argument_list pos:line="62" pos:column="39">(<argument><expr><name pos:line="62" pos:column="40">after<pos:position pos:line="62" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="47">before<pos:position pos:line="62" pos:column="53"/></name></expr></argument>)<pos:position pos:line="62" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="62" pos:column="55"/></decl_stmt>
        <if pos:line="63" pos:column="9">if<condition pos:line="63" pos:column="11">(<expr><name pos:line="63" pos:column="12">timediff<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">&gt;<pos:position pos:line="63" pos:column="25"/></operator> <literal type="number" pos:line="63" pos:column="23">0<pos:position pos:line="63" pos:column="24"/></literal></expr>)<pos:position pos:line="63" pos:column="25"/></condition><then pos:line="63" pos:column="25"> <block pos:line="63" pos:column="26">{
          <if pos:line="64" pos:column="11">if<condition pos:line="64" pos:column="13">(<expr><name pos:line="64" pos:column="14">timediff<pos:position pos:line="64" pos:column="22"/></name> <operator pos:line="64" pos:column="23">&gt;<pos:position pos:line="64" pos:column="27"/></operator> <name><name pos:line="64" pos:column="25">ev<pos:position pos:line="64" pos:column="27"/></name><operator pos:line="64" pos:column="27">-&gt;<pos:position pos:line="64" pos:column="32"/></operator><name pos:line="64" pos:column="29">ms<pos:position pos:line="64" pos:column="31"/></name></name></expr>)<pos:position pos:line="64" pos:column="32"/></condition><then pos:line="64" pos:column="32">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="65" pos:column="13">ev<pos:position pos:line="65" pos:column="15"/></name><operator pos:line="65" pos:column="15">-&gt;<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="17">ms<pos:position pos:line="65" pos:column="19"/></name></name> <operator pos:line="65" pos:column="20">=<pos:position pos:line="65" pos:column="21"/></operator> <literal type="number" pos:line="65" pos:column="22">0<pos:position pos:line="65" pos:column="23"/></literal></expr>;<pos:position pos:line="65" pos:column="24"/></expr_stmt></block></then>
          <else pos:line="66" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="67" pos:column="13">ev<pos:position pos:line="67" pos:column="15"/></name><operator pos:line="67" pos:column="15">-&gt;<pos:position pos:line="67" pos:column="20"/></operator><name pos:line="67" pos:column="17">ms<pos:position pos:line="67" pos:column="19"/></name></name> <operator pos:line="67" pos:column="20">-=<pos:position pos:line="67" pos:column="22"/></operator> <operator pos:line="67" pos:column="23">(<pos:position pos:line="67" pos:column="24"/></operator><name pos:line="67" pos:column="24">long<pos:position pos:line="67" pos:column="28"/></name><operator pos:line="67" pos:column="28">)<pos:position pos:line="67" pos:column="29"/></operator><name pos:line="67" pos:column="29">timediff<pos:position pos:line="67" pos:column="37"/></name></expr>;<pos:position pos:line="67" pos:column="38"/></expr_stmt></block></else></if>
        }<pos:position pos:line="68" pos:column="10"/></block></then></if>
      }<pos:position pos:line="69" pos:column="8"/></block></then></if>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if></elseif>
    <else pos:line="71" pos:column="5">else
      <block type="pseudo"><return pos:line="72" pos:column="7">return <expr><name pos:line="72" pos:column="14">CURLE_RECV_ERROR<pos:position pos:line="72" pos:column="30"/></name></expr>;<pos:position pos:line="72" pos:column="31"/></return></block></else></if>

    <if pos:line="74" pos:column="5">if<condition pos:line="74" pos:column="7">(<expr><name pos:line="74" pos:column="8">mcode<pos:position pos:line="74" pos:column="13"/></name></expr>)<pos:position pos:line="74" pos:column="14"/></condition><then pos:line="74" pos:column="14">
      <block type="pseudo"><return pos:line="75" pos:column="7">return <expr><name pos:line="75" pos:column="14">CURLE_URL_MALFORMAT<pos:position pos:line="75" pos:column="33"/></name></expr>;<pos:position pos:line="75" pos:column="34"/></return></block></then></if> <comment type="block" pos:line="75" pos:column="35">/* TODO: return a proper error! */</comment>

    <comment type="block" pos:line="77" pos:column="5">/* we don't really care about the "msgs_in_queue" value returned in the
       second argument */</comment>
    <expr_stmt><expr><name pos:line="79" pos:column="5">msg<pos:position pos:line="79" pos:column="8"/></name> <operator pos:line="79" pos:column="9">=<pos:position pos:line="79" pos:column="10"/></operator> <call><name pos:line="79" pos:column="11">curl_multi_info_read<pos:position pos:line="79" pos:column="31"/></name><argument_list pos:line="79" pos:column="31">(<argument><expr><name pos:line="79" pos:column="32">multi<pos:position pos:line="79" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="39">&amp;<pos:position pos:line="79" pos:column="44"/></operator><name pos:line="79" pos:column="40">pollrc<pos:position pos:line="79" pos:column="46"/></name></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="48"/></expr_stmt>
    <if pos:line="80" pos:column="5">if<condition pos:line="80" pos:column="7">(<expr><name pos:line="80" pos:column="8">msg<pos:position pos:line="80" pos:column="11"/></name></expr>)<pos:position pos:line="80" pos:column="12"/></condition><then pos:line="80" pos:column="12"> <block pos:line="80" pos:column="13">{
      <expr_stmt><expr><name pos:line="81" pos:column="7">result<pos:position pos:line="81" pos:column="13"/></name> <operator pos:line="81" pos:column="14">=<pos:position pos:line="81" pos:column="15"/></operator> <name><name pos:line="81" pos:column="16">msg<pos:position pos:line="81" pos:column="19"/></name><operator pos:line="81" pos:column="19">-&gt;<pos:position pos:line="81" pos:column="24"/></operator><name pos:line="81" pos:column="21">data<pos:position pos:line="81" pos:column="25"/></name><operator pos:line="81" pos:column="25">.<pos:position pos:line="81" pos:column="26"/></operator><name pos:line="81" pos:column="26">result<pos:position pos:line="81" pos:column="32"/></name></name></expr>;<pos:position pos:line="81" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="82" pos:column="7">done<pos:position pos:line="82" pos:column="11"/></name> <operator pos:line="82" pos:column="12">=<pos:position pos:line="82" pos:column="13"/></operator> <name pos:line="82" pos:column="14">TRUE<pos:position pos:line="82" pos:column="18"/></name></expr>;<pos:position pos:line="82" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>
  }<pos:position pos:line="84" pos:column="4"/></block></while>

  <return pos:line="86" pos:column="3">return <expr><name pos:line="86" pos:column="10">result<pos:position pos:line="86" pos:column="16"/></name></expr>;<pos:position pos:line="86" pos:column="17"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
