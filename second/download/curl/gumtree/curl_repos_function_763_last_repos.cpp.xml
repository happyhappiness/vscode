<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_763_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">select_ws<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">nfds<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">fd_set<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">readfds<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">fd_set<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">writefds<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="2" pos:column="22">fd_set<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">exceptfds<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="41">struct<pos:position pos:line="2" pos:column="47"/></name> <name pos:line="2" pos:column="48">timeval<pos:position pos:line="2" pos:column="55"/></name></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">timeout<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">DWORD<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">milliseconds<pos:position pos:line="4" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">wait<pos:position pos:line="4" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="29">idx<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">WSANETWORKEVENTS<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">wsanetevents<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">select_ws_data<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">data<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">HANDLE<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">handle<pos:position pos:line="7" pos:column="16"/></name></decl>, <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="19">handles<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socket_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">sock<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">long<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">networkevents<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">WSAEVENT<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">wsaevent<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">error<pos:position pos:line="11" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="14">fds<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">HANDLE<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">waitevent<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">DWORD<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">nfd<pos:position pos:line="13" pos:column="12"/></name> <init pos:line="13" pos:column="13">= <expr><literal type="number" pos:line="13" pos:column="15">0<pos:position pos:line="13" pos:column="16"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="18">thd<pos:position pos:line="13" pos:column="21"/></name> <init pos:line="13" pos:column="22">= <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="27">wsa<pos:position pos:line="13" pos:column="30"/></name> <init pos:line="13" pos:column="31">= <expr><literal type="number" pos:line="13" pos:column="33">0<pos:position pos:line="13" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">ret<pos:position pos:line="14" pos:column="10"/></name> <init pos:line="14" pos:column="11">= <expr><literal type="number" pos:line="14" pos:column="13">0<pos:position pos:line="14" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="15"/></decl_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* check if the input value is valid */</comment>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name pos:line="17" pos:column="6">nfds<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">&lt;<pos:position pos:line="17" pos:column="15"/></operator> <literal type="number" pos:line="17" pos:column="13">0<pos:position pos:line="17" pos:column="14"/></literal></expr>)<pos:position pos:line="17" pos:column="15"/></condition><then pos:line="17" pos:column="15"> <block pos:line="17" pos:column="16">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">errno<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <name pos:line="18" pos:column="13">EINVAL<pos:position pos:line="18" pos:column="19"/></name></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">-<pos:position pos:line="19" pos:column="13"/></operator><literal type="number" pos:line="19" pos:column="13">1<pos:position pos:line="19" pos:column="14"/></literal></expr>;<pos:position pos:line="19" pos:column="15"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* check if we got descriptors, sleep in case we got none */</comment>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">!<pos:position pos:line="23" pos:column="7"/></operator><name pos:line="23" pos:column="7">nfds<pos:position pos:line="23" pos:column="11"/></name></expr>)<pos:position pos:line="23" pos:column="12"/></condition><then pos:line="23" pos:column="12"> <block pos:line="23" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">Sleep<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><operator pos:line="24" pos:column="11">(<pos:position pos:line="24" pos:column="12"/></operator><name><name pos:line="24" pos:column="12">timeout<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">-&gt;<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="21">tv_sec<pos:position pos:line="24" pos:column="27"/></name></name><operator pos:line="24" pos:column="27">*<pos:position pos:line="24" pos:column="28"/></operator><literal type="number" pos:line="24" pos:column="28">1000<pos:position pos:line="24" pos:column="32"/></literal><operator pos:line="24" pos:column="32">)<pos:position pos:line="24" pos:column="33"/></operator><operator pos:line="24" pos:column="33">+<pos:position pos:line="24" pos:column="34"/></operator><call pos:line="24" pos:column="34">(<name pos:line="24" pos:column="35">DWORD<pos:position pos:line="24" pos:column="40"/></name>)<argument_list pos:line="24" pos:column="41">(<argument><expr><operator pos:line="24" pos:column="42">(<pos:position pos:line="24" pos:column="43"/></operator><operator pos:line="24" pos:column="43">(<pos:position pos:line="24" pos:column="44"/></operator><name pos:line="24" pos:column="44">double<pos:position pos:line="24" pos:column="50"/></name><operator pos:line="24" pos:column="50">)<pos:position pos:line="24" pos:column="51"/></operator><name><name pos:line="24" pos:column="51">timeout<pos:position pos:line="24" pos:column="58"/></name><operator pos:line="24" pos:column="58">-&gt;<pos:position pos:line="24" pos:column="63"/></operator><name pos:line="24" pos:column="60">tv_usec<pos:position pos:line="24" pos:column="67"/></name></name><operator pos:line="24" pos:column="67">)<pos:position pos:line="24" pos:column="68"/></operator><operator pos:line="24" pos:column="68">/<pos:position pos:line="24" pos:column="69"/></operator><literal type="number" pos:line="24" pos:column="69">1000.0<pos:position pos:line="24" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="78"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><literal type="number" pos:line="25" pos:column="12">0<pos:position pos:line="25" pos:column="13"/></literal></expr>;<pos:position pos:line="25" pos:column="14"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="28" pos:column="3">/* create internal event to signal waiting threads */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">waitevent<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">CreateEvent<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">NULL<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="33">TRUE<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">FALSE<pos:position pos:line="29" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="46">NULL<pos:position pos:line="29" pos:column="50"/></name></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><operator pos:line="30" pos:column="6">!<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">waitevent<pos:position pos:line="30" pos:column="16"/></name></expr>)<pos:position pos:line="30" pos:column="17"/></condition><then pos:line="30" pos:column="17"> <block pos:line="30" pos:column="18">{
    <expr_stmt><expr><name pos:line="31" pos:column="5">errno<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <name pos:line="31" pos:column="13">ENOMEM<pos:position pos:line="31" pos:column="19"/></name></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">-<pos:position pos:line="32" pos:column="13"/></operator><literal type="number" pos:line="32" pos:column="13">1<pos:position pos:line="32" pos:column="14"/></literal></expr>;<pos:position pos:line="32" pos:column="15"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="35" pos:column="3">/* allocate internal array for the internal data */</comment>
  <expr_stmt><expr><name pos:line="36" pos:column="3">data<pos:position pos:line="36" pos:column="7"/></name> <operator pos:line="36" pos:column="8">=<pos:position pos:line="36" pos:column="9"/></operator> <call><name pos:line="36" pos:column="10">malloc<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><name pos:line="36" pos:column="17">nfds<pos:position pos:line="36" pos:column="21"/></name> <operator pos:line="36" pos:column="22">*<pos:position pos:line="36" pos:column="23"/></operator> <sizeof pos:line="36" pos:column="24">sizeof<argument_list pos:line="36" pos:column="30">(<argument><expr pos:line="36" pos:column="31">struct <name pos:line="36" pos:column="38">select_ws_data<pos:position pos:line="36" pos:column="52"/></name></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="55"/></expr_stmt>
  <if pos:line="37" pos:column="3">if<condition pos:line="37" pos:column="5">(<expr><name pos:line="37" pos:column="6">data<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">==<pos:position pos:line="37" pos:column="13"/></operator> <name pos:line="37" pos:column="14">NULL<pos:position pos:line="37" pos:column="18"/></name></expr>)<pos:position pos:line="37" pos:column="19"/></condition><then pos:line="37" pos:column="19"> <block pos:line="37" pos:column="20">{
    <expr_stmt><expr><name pos:line="38" pos:column="5">errno<pos:position pos:line="38" pos:column="10"/></name> <operator pos:line="38" pos:column="11">=<pos:position pos:line="38" pos:column="12"/></operator> <name pos:line="38" pos:column="13">ENOMEM<pos:position pos:line="38" pos:column="19"/></name></expr>;<pos:position pos:line="38" pos:column="20"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><operator pos:line="39" pos:column="12">-<pos:position pos:line="39" pos:column="13"/></operator><literal type="number" pos:line="39" pos:column="13">1<pos:position pos:line="39" pos:column="14"/></literal></expr>;<pos:position pos:line="39" pos:column="15"/></return>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="42" pos:column="3">/* allocate internal array for the internal event handles */</comment>
  <expr_stmt><expr><name pos:line="43" pos:column="3">handles<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <call><name pos:line="43" pos:column="13">malloc<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><name pos:line="43" pos:column="20">nfds<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">*<pos:position pos:line="43" pos:column="26"/></operator> <sizeof pos:line="43" pos:column="27">sizeof<argument_list pos:line="43" pos:column="33">(<argument><expr><name pos:line="43" pos:column="34">HANDLE<pos:position pos:line="43" pos:column="40"/></name></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><name pos:line="44" pos:column="6">handles<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">==<pos:position pos:line="44" pos:column="16"/></operator> <name pos:line="44" pos:column="17">NULL<pos:position pos:line="44" pos:column="21"/></name></expr>)<pos:position pos:line="44" pos:column="22"/></condition><then pos:line="44" pos:column="22"> <block pos:line="44" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">free<pos:position pos:line="45" pos:column="9"/></name><argument_list pos:line="45" pos:column="9">(<argument><expr><name pos:line="45" pos:column="10">data<pos:position pos:line="45" pos:column="14"/></name></expr></argument>)<pos:position pos:line="45" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="46" pos:column="5">errno<pos:position pos:line="46" pos:column="10"/></name> <operator pos:line="46" pos:column="11">=<pos:position pos:line="46" pos:column="12"/></operator> <name pos:line="46" pos:column="13">ENOMEM<pos:position pos:line="46" pos:column="19"/></name></expr>;<pos:position pos:line="46" pos:column="20"/></expr_stmt>
    <return pos:line="47" pos:column="5">return <expr><operator pos:line="47" pos:column="12">-<pos:position pos:line="47" pos:column="13"/></operator><literal type="number" pos:line="47" pos:column="13">1<pos:position pos:line="47" pos:column="14"/></literal></expr>;<pos:position pos:line="47" pos:column="15"/></return>
  }<pos:position pos:line="48" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="50" pos:column="3">/* clear internal arrays */</comment>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">memset<pos:position pos:line="51" pos:column="9"/></name><argument_list pos:line="51" pos:column="9">(<argument><expr><name pos:line="51" pos:column="10">data<pos:position pos:line="51" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="16">0<pos:position pos:line="51" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="19">nfds<pos:position pos:line="51" pos:column="23"/></name> <operator pos:line="51" pos:column="24">*<pos:position pos:line="51" pos:column="25"/></operator> <sizeof pos:line="51" pos:column="26">sizeof<argument_list pos:line="51" pos:column="32">(<argument><expr pos:line="51" pos:column="33">struct <name pos:line="51" pos:column="40">select_ws_data<pos:position pos:line="51" pos:column="54"/></name></expr></argument>)<pos:position pos:line="51" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">memset<pos:position pos:line="52" pos:column="9"/></name><argument_list pos:line="52" pos:column="9">(<argument><expr><name pos:line="52" pos:column="10">handles<pos:position pos:line="52" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="19">0<pos:position pos:line="52" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="22">nfds<pos:position pos:line="52" pos:column="26"/></name> <operator pos:line="52" pos:column="27">*<pos:position pos:line="52" pos:column="28"/></operator> <sizeof pos:line="52" pos:column="29">sizeof<argument_list pos:line="52" pos:column="35">(<argument><expr><name pos:line="52" pos:column="36">HANDLE<pos:position pos:line="52" pos:column="42"/></name></expr></argument>)<pos:position pos:line="52" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="45"/></expr_stmt>

  <comment type="block" pos:line="54" pos:column="3">/* loop over the handles in the input descriptor sets */</comment>
  <for pos:line="55" pos:column="3">for<control pos:line="55" pos:column="6">(<init><expr><name pos:line="55" pos:column="7">fds<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <literal type="number" pos:line="55" pos:column="13">0<pos:position pos:line="55" pos:column="14"/></literal></expr>;<pos:position pos:line="55" pos:column="15"/></init> <condition><expr><name pos:line="55" pos:column="16">fds<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">&lt;<pos:position pos:line="55" pos:column="24"/></operator> <name pos:line="55" pos:column="22">nfds<pos:position pos:line="55" pos:column="26"/></name></expr>;<pos:position pos:line="55" pos:column="27"/></condition> <incr><expr><name pos:line="55" pos:column="28">fds<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">++<pos:position pos:line="55" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="55" pos:column="34"/></control> <block pos:line="55" pos:column="35">{
    <expr_stmt><expr><name pos:line="56" pos:column="5">networkevents<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <literal type="number" pos:line="56" pos:column="21">0<pos:position pos:line="56" pos:column="22"/></literal></expr>;<pos:position pos:line="56" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">handles<pos:position pos:line="57" pos:column="12"/></name><index pos:line="57" pos:column="12">[<expr><name pos:line="57" pos:column="13">nfd<pos:position pos:line="57" pos:column="16"/></name></expr>]<pos:position pos:line="57" pos:column="17"/></index></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <literal type="number" pos:line="57" pos:column="20">0<pos:position pos:line="57" pos:column="21"/></literal></expr>;<pos:position pos:line="57" pos:column="22"/></expr_stmt>

    <if pos:line="59" pos:column="5">if<condition pos:line="59" pos:column="7">(<expr><call><name pos:line="59" pos:column="8">FD_ISSET<pos:position pos:line="59" pos:column="16"/></name><argument_list pos:line="59" pos:column="16">(<argument><expr><name pos:line="59" pos:column="17">fds<pos:position pos:line="59" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="22">readfds<pos:position pos:line="59" pos:column="29"/></name></expr></argument>)<pos:position pos:line="59" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="31"/></condition><then pos:line="59" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="7">networkevents<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">|=<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">FD_READ<pos:position pos:line="60" pos:column="31"/></name><operator pos:line="60" pos:column="31">|<pos:position pos:line="60" pos:column="32"/></operator><name pos:line="60" pos:column="32">FD_ACCEPT<pos:position pos:line="60" pos:column="41"/></name><operator pos:line="60" pos:column="41">|<pos:position pos:line="60" pos:column="42"/></operator><name pos:line="60" pos:column="42">FD_CLOSE<pos:position pos:line="60" pos:column="50"/></name></expr>;<pos:position pos:line="60" pos:column="51"/></expr_stmt></block></then></if>

    <if pos:line="62" pos:column="5">if<condition pos:line="62" pos:column="7">(<expr><call><name pos:line="62" pos:column="8">FD_ISSET<pos:position pos:line="62" pos:column="16"/></name><argument_list pos:line="62" pos:column="16">(<argument><expr><name pos:line="62" pos:column="17">fds<pos:position pos:line="62" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="22">writefds<pos:position pos:line="62" pos:column="30"/></name></expr></argument>)<pos:position pos:line="62" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="32"/></condition><then pos:line="62" pos:column="32">
      <block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="7">networkevents<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">|=<pos:position pos:line="63" pos:column="23"/></operator> <name pos:line="63" pos:column="24">FD_WRITE<pos:position pos:line="63" pos:column="32"/></name><operator pos:line="63" pos:column="32">|<pos:position pos:line="63" pos:column="33"/></operator><name pos:line="63" pos:column="33">FD_CONNECT<pos:position pos:line="63" pos:column="43"/></name></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt></block></then></if>

    <if pos:line="65" pos:column="5">if<condition pos:line="65" pos:column="7">(<expr><call><name pos:line="65" pos:column="8">FD_ISSET<pos:position pos:line="65" pos:column="16"/></name><argument_list pos:line="65" pos:column="16">(<argument><expr><name pos:line="65" pos:column="17">fds<pos:position pos:line="65" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="22">exceptfds<pos:position pos:line="65" pos:column="31"/></name></expr></argument>)<pos:position pos:line="65" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="33"/></condition><then pos:line="65" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="7">networkevents<pos:position pos:line="66" pos:column="20"/></name> <operator pos:line="66" pos:column="21">|=<pos:position pos:line="66" pos:column="23"/></operator> <name pos:line="66" pos:column="24">FD_OOB<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">|<pos:position pos:line="66" pos:column="31"/></operator><name pos:line="66" pos:column="31">FD_CLOSE<pos:position pos:line="66" pos:column="39"/></name></expr>;<pos:position pos:line="66" pos:column="40"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="68" pos:column="5">/* only wait for events for which we actually care */</comment>
    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">(<expr><name pos:line="69" pos:column="8">networkevents<pos:position pos:line="69" pos:column="21"/></name></expr>)<pos:position pos:line="69" pos:column="22"/></condition><then pos:line="69" pos:column="22"> <block pos:line="69" pos:column="23">{
      <expr_stmt><expr><name><name pos:line="70" pos:column="7">data<pos:position pos:line="70" pos:column="11"/></name><index pos:line="70" pos:column="11">[<expr><name pos:line="70" pos:column="12">nfd<pos:position pos:line="70" pos:column="15"/></name></expr>]<pos:position pos:line="70" pos:column="16"/></index></name><operator pos:line="70" pos:column="16">.<pos:position pos:line="70" pos:column="17"/></operator><name pos:line="70" pos:column="17">fd<pos:position pos:line="70" pos:column="19"/></name> <operator pos:line="70" pos:column="20">=<pos:position pos:line="70" pos:column="21"/></operator> <call><name pos:line="70" pos:column="22">curlx_sitosk<pos:position pos:line="70" pos:column="34"/></name><argument_list pos:line="70" pos:column="34">(<argument><expr><name pos:line="70" pos:column="35">fds<pos:position pos:line="70" pos:column="38"/></name></expr></argument>)<pos:position pos:line="70" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt>
      <if pos:line="71" pos:column="7">if<condition pos:line="71" pos:column="9">(<expr><name pos:line="71" pos:column="10">fds<pos:position pos:line="71" pos:column="13"/></name> <operator pos:line="71" pos:column="14">==<pos:position pos:line="71" pos:column="16"/></operator> <call><name pos:line="71" pos:column="17">fileno<pos:position pos:line="71" pos:column="23"/></name><argument_list pos:line="71" pos:column="23">(<argument><expr><name pos:line="71" pos:column="24">stdin<pos:position pos:line="71" pos:column="29"/></name></expr></argument>)<pos:position pos:line="71" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="31"/></condition><then pos:line="71" pos:column="31"> <block pos:line="71" pos:column="32">{
        <expr_stmt><expr><name pos:line="72" pos:column="9">handle<pos:position pos:line="72" pos:column="15"/></name> <operator pos:line="72" pos:column="16">=<pos:position pos:line="72" pos:column="17"/></operator> <call><name pos:line="72" pos:column="18">GetStdHandle<pos:position pos:line="72" pos:column="30"/></name><argument_list pos:line="72" pos:column="30">(<argument><expr><name pos:line="72" pos:column="31">STD_INPUT_HANDLE<pos:position pos:line="72" pos:column="47"/></name></expr></argument>)<pos:position pos:line="72" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="73" pos:column="9">handle<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <call><name pos:line="73" pos:column="18">select_ws_wait<pos:position pos:line="73" pos:column="32"/></name><argument_list pos:line="73" pos:column="32">(<argument><expr><name pos:line="73" pos:column="33">handle<pos:position pos:line="73" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="41">waitevent<pos:position pos:line="73" pos:column="50"/></name></expr></argument>)<pos:position pos:line="73" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="74" pos:column="9">handles<pos:position pos:line="74" pos:column="16"/></name><index pos:line="74" pos:column="16">[<expr><name pos:line="74" pos:column="17">nfd<pos:position pos:line="74" pos:column="20"/></name></expr>]<pos:position pos:line="74" pos:column="21"/></index></name> <operator pos:line="74" pos:column="22">=<pos:position pos:line="74" pos:column="23"/></operator> <name pos:line="74" pos:column="24">handle<pos:position pos:line="74" pos:column="30"/></name></expr>;<pos:position pos:line="74" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="75" pos:column="9">data<pos:position pos:line="75" pos:column="13"/></name><index pos:line="75" pos:column="13">[<expr><name pos:line="75" pos:column="14">thd<pos:position pos:line="75" pos:column="17"/></name></expr>]<pos:position pos:line="75" pos:column="18"/></index></name><operator pos:line="75" pos:column="18">.<pos:position pos:line="75" pos:column="19"/></operator><name pos:line="75" pos:column="19">thread<pos:position pos:line="75" pos:column="25"/></name> <operator pos:line="75" pos:column="26">=<pos:position pos:line="75" pos:column="27"/></operator> <name pos:line="75" pos:column="28">handle<pos:position pos:line="75" pos:column="34"/></name></expr>;<pos:position pos:line="75" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="76" pos:column="9">thd<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">++<pos:position pos:line="76" pos:column="14"/></operator></expr>;<pos:position pos:line="76" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="77" pos:column="8"/></block></then>
      <elseif pos:line="78" pos:column="7">else <if pos:line="78" pos:column="12">if<condition pos:line="78" pos:column="14">(<expr><name pos:line="78" pos:column="15">fds<pos:position pos:line="78" pos:column="18"/></name> <operator pos:line="78" pos:column="19">==<pos:position pos:line="78" pos:column="21"/></operator> <call><name pos:line="78" pos:column="22">fileno<pos:position pos:line="78" pos:column="28"/></name><argument_list pos:line="78" pos:column="28">(<argument><expr><name pos:line="78" pos:column="29">stdout<pos:position pos:line="78" pos:column="35"/></name></expr></argument>)<pos:position pos:line="78" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="37"/></condition><then pos:line="78" pos:column="37"> <block pos:line="78" pos:column="38">{
        <expr_stmt><expr><name><name pos:line="79" pos:column="9">handles<pos:position pos:line="79" pos:column="16"/></name><index pos:line="79" pos:column="16">[<expr><name pos:line="79" pos:column="17">nfd<pos:position pos:line="79" pos:column="20"/></name></expr>]<pos:position pos:line="79" pos:column="21"/></index></name> <operator pos:line="79" pos:column="22">=<pos:position pos:line="79" pos:column="23"/></operator> <call><name pos:line="79" pos:column="24">GetStdHandle<pos:position pos:line="79" pos:column="36"/></name><argument_list pos:line="79" pos:column="36">(<argument><expr><name pos:line="79" pos:column="37">STD_OUTPUT_HANDLE<pos:position pos:line="79" pos:column="54"/></name></expr></argument>)<pos:position pos:line="79" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="80" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="81" pos:column="7">else <if pos:line="81" pos:column="12">if<condition pos:line="81" pos:column="14">(<expr><name pos:line="81" pos:column="15">fds<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">==<pos:position pos:line="81" pos:column="21"/></operator> <call><name pos:line="81" pos:column="22">fileno<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><name pos:line="81" pos:column="29">stderr<pos:position pos:line="81" pos:column="35"/></name></expr></argument>)<pos:position pos:line="81" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="37"/></condition><then pos:line="81" pos:column="37"> <block pos:line="81" pos:column="38">{
        <expr_stmt><expr><name><name pos:line="82" pos:column="9">handles<pos:position pos:line="82" pos:column="16"/></name><index pos:line="82" pos:column="16">[<expr><name pos:line="82" pos:column="17">nfd<pos:position pos:line="82" pos:column="20"/></name></expr>]<pos:position pos:line="82" pos:column="21"/></index></name> <operator pos:line="82" pos:column="22">=<pos:position pos:line="82" pos:column="23"/></operator> <call><name pos:line="82" pos:column="24">GetStdHandle<pos:position pos:line="82" pos:column="36"/></name><argument_list pos:line="82" pos:column="36">(<argument><expr><name pos:line="82" pos:column="37">STD_ERROR_HANDLE<pos:position pos:line="82" pos:column="53"/></name></expr></argument>)<pos:position pos:line="82" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="55"/></expr_stmt>
      }<pos:position pos:line="83" pos:column="8"/></block></then></if></elseif>
      <else pos:line="84" pos:column="7">else <block pos:line="84" pos:column="12">{
        <expr_stmt><expr><name pos:line="85" pos:column="9">wsaevent<pos:position pos:line="85" pos:column="17"/></name> <operator pos:line="85" pos:column="18">=<pos:position pos:line="85" pos:column="19"/></operator> <call><name pos:line="85" pos:column="20">WSACreateEvent<pos:position pos:line="85" pos:column="34"/></name><argument_list pos:line="85" pos:column="34">()<pos:position pos:line="85" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="37"/></expr_stmt>
        <if pos:line="86" pos:column="9">if<condition pos:line="86" pos:column="11">(<expr><name pos:line="86" pos:column="12">wsaevent<pos:position pos:line="86" pos:column="20"/></name> <operator pos:line="86" pos:column="21">!=<pos:position pos:line="86" pos:column="23"/></operator> <name pos:line="86" pos:column="24">WSA_INVALID_EVENT<pos:position pos:line="86" pos:column="41"/></name></expr>)<pos:position pos:line="86" pos:column="42"/></condition><then pos:line="86" pos:column="42"> <block pos:line="86" pos:column="43">{
          <expr_stmt><expr><name pos:line="87" pos:column="11">error<pos:position pos:line="87" pos:column="16"/></name> <operator pos:line="87" pos:column="17">=<pos:position pos:line="87" pos:column="18"/></operator> <call><name pos:line="87" pos:column="19">WSAEventSelect<pos:position pos:line="87" pos:column="33"/></name><argument_list pos:line="87" pos:column="33">(<argument><expr><name pos:line="87" pos:column="34">fds<pos:position pos:line="87" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="39">wsaevent<pos:position pos:line="87" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="49">networkevents<pos:position pos:line="87" pos:column="62"/></name></expr></argument>)<pos:position pos:line="87" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="64"/></expr_stmt>
          <if pos:line="88" pos:column="11">if<condition pos:line="88" pos:column="13">(<expr><name pos:line="88" pos:column="14">error<pos:position pos:line="88" pos:column="19"/></name> <operator pos:line="88" pos:column="20">!=<pos:position pos:line="88" pos:column="22"/></operator> <name pos:line="88" pos:column="23">SOCKET_ERROR<pos:position pos:line="88" pos:column="35"/></name></expr>)<pos:position pos:line="88" pos:column="36"/></condition><then pos:line="88" pos:column="36"> <block pos:line="88" pos:column="37">{
            <expr_stmt><expr><name pos:line="89" pos:column="13">handle<pos:position pos:line="89" pos:column="19"/></name> <operator pos:line="89" pos:column="20">=<pos:position pos:line="89" pos:column="21"/></operator> <operator pos:line="89" pos:column="22">(<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="23">HANDLE<pos:position pos:line="89" pos:column="29"/></name><operator pos:line="89" pos:column="29">)<pos:position pos:line="89" pos:column="30"/></operator> <name pos:line="89" pos:column="31">wsaevent<pos:position pos:line="89" pos:column="39"/></name></expr>;<pos:position pos:line="89" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="90" pos:column="13">handles<pos:position pos:line="90" pos:column="20"/></name><index pos:line="90" pos:column="20">[<expr><name pos:line="90" pos:column="21">nfd<pos:position pos:line="90" pos:column="24"/></name></expr>]<pos:position pos:line="90" pos:column="25"/></index></name> <operator pos:line="90" pos:column="26">=<pos:position pos:line="90" pos:column="27"/></operator> <name pos:line="90" pos:column="28">handle<pos:position pos:line="90" pos:column="34"/></name></expr>;<pos:position pos:line="90" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="91" pos:column="13">data<pos:position pos:line="91" pos:column="17"/></name><index pos:line="91" pos:column="17">[<expr><name pos:line="91" pos:column="18">wsa<pos:position pos:line="91" pos:column="21"/></name></expr>]<pos:position pos:line="91" pos:column="22"/></index></name><operator pos:line="91" pos:column="22">.<pos:position pos:line="91" pos:column="23"/></operator><name pos:line="91" pos:column="23">wsasock<pos:position pos:line="91" pos:column="30"/></name> <operator pos:line="91" pos:column="31">=<pos:position pos:line="91" pos:column="32"/></operator> <call><name pos:line="91" pos:column="33">curlx_sitosk<pos:position pos:line="91" pos:column="45"/></name><argument_list pos:line="91" pos:column="45">(<argument><expr><name pos:line="91" pos:column="46">fds<pos:position pos:line="91" pos:column="49"/></name></expr></argument>)<pos:position pos:line="91" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="92" pos:column="13">data<pos:position pos:line="92" pos:column="17"/></name><index pos:line="92" pos:column="17">[<expr><name pos:line="92" pos:column="18">wsa<pos:position pos:line="92" pos:column="21"/></name></expr>]<pos:position pos:line="92" pos:column="22"/></index></name><operator pos:line="92" pos:column="22">.<pos:position pos:line="92" pos:column="23"/></operator><name pos:line="92" pos:column="23">wsaevent<pos:position pos:line="92" pos:column="31"/></name> <operator pos:line="92" pos:column="32">=<pos:position pos:line="92" pos:column="33"/></operator> <name pos:line="92" pos:column="34">wsaevent<pos:position pos:line="92" pos:column="42"/></name></expr>;<pos:position pos:line="92" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name pos:line="93" pos:column="13">wsa<pos:position pos:line="93" pos:column="16"/></name><operator pos:line="93" pos:column="16">++<pos:position pos:line="93" pos:column="18"/></operator></expr>;<pos:position pos:line="93" pos:column="19"/></expr_stmt>
          }<pos:position pos:line="94" pos:column="12"/></block></then>
          <else pos:line="95" pos:column="11">else <block pos:line="95" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="96" pos:column="13">WSACloseEvent<pos:position pos:line="96" pos:column="26"/></name><argument_list pos:line="96" pos:column="26">(<argument><expr><name pos:line="96" pos:column="27">wsaevent<pos:position pos:line="96" pos:column="35"/></name></expr></argument>)<pos:position pos:line="96" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name pos:line="97" pos:column="13">handle<pos:position pos:line="97" pos:column="19"/></name> <operator pos:line="97" pos:column="20">=<pos:position pos:line="97" pos:column="21"/></operator> <operator pos:line="97" pos:column="22">(<pos:position pos:line="97" pos:column="23"/></operator><name pos:line="97" pos:column="23">HANDLE<pos:position pos:line="97" pos:column="29"/></name><operator pos:line="97" pos:column="29">)<pos:position pos:line="97" pos:column="30"/></operator> <call><name pos:line="97" pos:column="31">curlx_sitosk<pos:position pos:line="97" pos:column="43"/></name><argument_list pos:line="97" pos:column="43">(<argument><expr><name pos:line="97" pos:column="44">fds<pos:position pos:line="97" pos:column="47"/></name></expr></argument>)<pos:position pos:line="97" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="98" pos:column="13">handle<pos:position pos:line="98" pos:column="19"/></name> <operator pos:line="98" pos:column="20">=<pos:position pos:line="98" pos:column="21"/></operator> <call><name pos:line="98" pos:column="22">select_ws_wait<pos:position pos:line="98" pos:column="36"/></name><argument_list pos:line="98" pos:column="36">(<argument><expr><name pos:line="98" pos:column="37">handle<pos:position pos:line="98" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="45">waitevent<pos:position pos:line="98" pos:column="54"/></name></expr></argument>)<pos:position pos:line="98" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="99" pos:column="13">handles<pos:position pos:line="99" pos:column="20"/></name><index pos:line="99" pos:column="20">[<expr><name pos:line="99" pos:column="21">nfd<pos:position pos:line="99" pos:column="24"/></name></expr>]<pos:position pos:line="99" pos:column="25"/></index></name> <operator pos:line="99" pos:column="26">=<pos:position pos:line="99" pos:column="27"/></operator> <name pos:line="99" pos:column="28">handle<pos:position pos:line="99" pos:column="34"/></name></expr>;<pos:position pos:line="99" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="100" pos:column="13">data<pos:position pos:line="100" pos:column="17"/></name><index pos:line="100" pos:column="17">[<expr><name pos:line="100" pos:column="18">thd<pos:position pos:line="100" pos:column="21"/></name></expr>]<pos:position pos:line="100" pos:column="22"/></index></name><operator pos:line="100" pos:column="22">.<pos:position pos:line="100" pos:column="23"/></operator><name pos:line="100" pos:column="23">thread<pos:position pos:line="100" pos:column="29"/></name> <operator pos:line="100" pos:column="30">=<pos:position pos:line="100" pos:column="31"/></operator> <name pos:line="100" pos:column="32">handle<pos:position pos:line="100" pos:column="38"/></name></expr>;<pos:position pos:line="100" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="101" pos:column="13">thd<pos:position pos:line="101" pos:column="16"/></name><operator pos:line="101" pos:column="16">++<pos:position pos:line="101" pos:column="18"/></operator></expr>;<pos:position pos:line="101" pos:column="19"/></expr_stmt>
          }<pos:position pos:line="102" pos:column="12"/></block></else></if>
        }<pos:position pos:line="103" pos:column="10"/></block></then></if>
      }<pos:position pos:line="104" pos:column="8"/></block></else></if>
      <expr_stmt><expr><name pos:line="105" pos:column="7">nfd<pos:position pos:line="105" pos:column="10"/></name><operator pos:line="105" pos:column="10">++<pos:position pos:line="105" pos:column="12"/></operator></expr>;<pos:position pos:line="105" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="106" pos:column="6"/></block></then></if>
  }<pos:position pos:line="107" pos:column="4"/></block></for>

  <comment type="block" pos:line="109" pos:column="3">/* convert struct timeval to milliseconds */</comment>
  <if pos:line="110" pos:column="3">if<condition pos:line="110" pos:column="5">(<expr><name pos:line="110" pos:column="6">timeout<pos:position pos:line="110" pos:column="13"/></name></expr>)<pos:position pos:line="110" pos:column="14"/></condition><then pos:line="110" pos:column="14"> <block pos:line="110" pos:column="15">{
    <expr_stmt><expr><name pos:line="111" pos:column="5">milliseconds<pos:position pos:line="111" pos:column="17"/></name> <operator pos:line="111" pos:column="18">=<pos:position pos:line="111" pos:column="19"/></operator> <operator pos:line="111" pos:column="20">(<pos:position pos:line="111" pos:column="21"/></operator><operator pos:line="111" pos:column="21">(<pos:position pos:line="111" pos:column="22"/></operator><name><name pos:line="111" pos:column="22">timeout<pos:position pos:line="111" pos:column="29"/></name><operator pos:line="111" pos:column="29">-&gt;<pos:position pos:line="111" pos:column="34"/></operator><name pos:line="111" pos:column="31">tv_sec<pos:position pos:line="111" pos:column="37"/></name></name> <operator pos:line="111" pos:column="38">*<pos:position pos:line="111" pos:column="39"/></operator> <literal type="number" pos:line="111" pos:column="40">1000<pos:position pos:line="111" pos:column="44"/></literal><operator pos:line="111" pos:column="44">)<pos:position pos:line="111" pos:column="45"/></operator> <operator pos:line="111" pos:column="46">+<pos:position pos:line="111" pos:column="47"/></operator> <operator pos:line="111" pos:column="48">(<pos:position pos:line="111" pos:column="49"/></operator><name><name pos:line="111" pos:column="49">timeout<pos:position pos:line="111" pos:column="56"/></name><operator pos:line="111" pos:column="56">-&gt;<pos:position pos:line="111" pos:column="61"/></operator><name pos:line="111" pos:column="58">tv_usec<pos:position pos:line="111" pos:column="65"/></name></name> <operator pos:line="111" pos:column="66">/<pos:position pos:line="111" pos:column="67"/></operator> <literal type="number" pos:line="111" pos:column="68">1000<pos:position pos:line="111" pos:column="72"/></literal><operator pos:line="111" pos:column="72">)<pos:position pos:line="111" pos:column="73"/></operator><operator pos:line="111" pos:column="73">)<pos:position pos:line="111" pos:column="74"/></operator></expr>;<pos:position pos:line="111" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="112" pos:column="4"/></block></then>
  <else pos:line="113" pos:column="3">else <block pos:line="113" pos:column="8">{
    <expr_stmt><expr><name pos:line="114" pos:column="5">milliseconds<pos:position pos:line="114" pos:column="17"/></name> <operator pos:line="114" pos:column="18">=<pos:position pos:line="114" pos:column="19"/></operator> <name pos:line="114" pos:column="20">INFINITE<pos:position pos:line="114" pos:column="28"/></name></expr>;<pos:position pos:line="114" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="115" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="117" pos:column="3">/* wait for one of the internal handles to trigger */</comment>
  <expr_stmt><expr><name pos:line="118" pos:column="3">wait<pos:position pos:line="118" pos:column="7"/></name> <operator pos:line="118" pos:column="8">=<pos:position pos:line="118" pos:column="9"/></operator> <call><name pos:line="118" pos:column="10">WaitForMultipleObjectsEx<pos:position pos:line="118" pos:column="34"/></name><argument_list pos:line="118" pos:column="34">(<argument><expr><name pos:line="118" pos:column="35">nfd<pos:position pos:line="118" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="40">handles<pos:position pos:line="118" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="49">FALSE<pos:position pos:line="118" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="56">milliseconds<pos:position pos:line="118" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="70">FALSE<pos:position pos:line="118" pos:column="75"/></name></expr></argument>)<pos:position pos:line="118" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="77"/></expr_stmt>

  <comment type="block" pos:line="120" pos:column="3">/* signal the event handle for the waiting threads */</comment>
  <expr_stmt><expr><call><name pos:line="121" pos:column="3">SetEvent<pos:position pos:line="121" pos:column="11"/></name><argument_list pos:line="121" pos:column="11">(<argument><expr><name pos:line="121" pos:column="12">waitevent<pos:position pos:line="121" pos:column="21"/></name></expr></argument>)<pos:position pos:line="121" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="123" pos:column="3">/* loop over the internal handles returned in the descriptors */</comment>
  <for pos:line="124" pos:column="3">for<control pos:line="124" pos:column="6">(<init><expr><name pos:line="124" pos:column="7">idx<pos:position pos:line="124" pos:column="10"/></name> <operator pos:line="124" pos:column="11">=<pos:position pos:line="124" pos:column="12"/></operator> <literal type="number" pos:line="124" pos:column="13">0<pos:position pos:line="124" pos:column="14"/></literal></expr>;<pos:position pos:line="124" pos:column="15"/></init> <condition><expr><name pos:line="124" pos:column="16">idx<pos:position pos:line="124" pos:column="19"/></name> <operator pos:line="124" pos:column="20">&lt;<pos:position pos:line="124" pos:column="24"/></operator> <name pos:line="124" pos:column="22">nfd<pos:position pos:line="124" pos:column="25"/></name></expr>;<pos:position pos:line="124" pos:column="26"/></condition> <incr><expr><name pos:line="124" pos:column="27">idx<pos:position pos:line="124" pos:column="30"/></name><operator pos:line="124" pos:column="30">++<pos:position pos:line="124" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="124" pos:column="33"/></control> <block pos:line="124" pos:column="34">{
    <expr_stmt><expr><name pos:line="125" pos:column="5">handle<pos:position pos:line="125" pos:column="11"/></name> <operator pos:line="125" pos:column="12">=<pos:position pos:line="125" pos:column="13"/></operator> <name><name pos:line="125" pos:column="14">handles<pos:position pos:line="125" pos:column="21"/></name><index pos:line="125" pos:column="21">[<expr><name pos:line="125" pos:column="22">idx<pos:position pos:line="125" pos:column="25"/></name></expr>]<pos:position pos:line="125" pos:column="26"/></index></name></expr>;<pos:position pos:line="125" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="126" pos:column="5">sock<pos:position pos:line="126" pos:column="9"/></name> <operator pos:line="126" pos:column="10">=<pos:position pos:line="126" pos:column="11"/></operator> <name><name pos:line="126" pos:column="12">data<pos:position pos:line="126" pos:column="16"/></name><index pos:line="126" pos:column="16">[<expr><name pos:line="126" pos:column="17">idx<pos:position pos:line="126" pos:column="20"/></name></expr>]<pos:position pos:line="126" pos:column="21"/></index></name><operator pos:line="126" pos:column="21">.<pos:position pos:line="126" pos:column="22"/></operator><name pos:line="126" pos:column="22">fd<pos:position pos:line="126" pos:column="24"/></name></expr>;<pos:position pos:line="126" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="127" pos:column="5">fds<pos:position pos:line="127" pos:column="8"/></name> <operator pos:line="127" pos:column="9">=<pos:position pos:line="127" pos:column="10"/></operator> <call><name pos:line="127" pos:column="11">curlx_sktosi<pos:position pos:line="127" pos:column="23"/></name><argument_list pos:line="127" pos:column="23">(<argument><expr><name pos:line="127" pos:column="24">sock<pos:position pos:line="127" pos:column="28"/></name></expr></argument>)<pos:position pos:line="127" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="30"/></expr_stmt>

    <comment type="block" pos:line="129" pos:column="5">/* check if the current internal handle was triggered */</comment>
    <if pos:line="130" pos:column="5">if<condition pos:line="130" pos:column="7">(<expr><name pos:line="130" pos:column="8">wait<pos:position pos:line="130" pos:column="12"/></name> <operator pos:line="130" pos:column="13">!=<pos:position pos:line="130" pos:column="15"/></operator> <name pos:line="130" pos:column="16">WAIT_FAILED<pos:position pos:line="130" pos:column="27"/></name> <operator pos:line="130" pos:column="28">&amp;&amp;<pos:position pos:line="130" pos:column="38"/></operator> <operator pos:line="130" pos:column="31">(<pos:position pos:line="130" pos:column="32"/></operator><name pos:line="130" pos:column="32">wait<pos:position pos:line="130" pos:column="36"/></name> <operator pos:line="130" pos:column="37">-<pos:position pos:line="130" pos:column="38"/></operator> <name pos:line="130" pos:column="39">WAIT_OBJECT_0<pos:position pos:line="130" pos:column="52"/></name><operator pos:line="130" pos:column="52">)<pos:position pos:line="130" pos:column="53"/></operator> <operator pos:line="130" pos:column="54">&lt;=<pos:position pos:line="130" pos:column="59"/></operator> <name pos:line="130" pos:column="57">idx<pos:position pos:line="130" pos:column="60"/></name> <operator pos:line="130" pos:column="61">&amp;&amp;<pos:position pos:line="130" pos:column="71"/></operator>
       <call><name pos:line="131" pos:column="8">WaitForSingleObjectEx<pos:position pos:line="131" pos:column="29"/></name><argument_list pos:line="131" pos:column="29">(<argument><expr><name pos:line="131" pos:column="30">handle<pos:position pos:line="131" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="131" pos:column="38">0<pos:position pos:line="131" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="41">FALSE<pos:position pos:line="131" pos:column="46"/></name></expr></argument>)<pos:position pos:line="131" pos:column="47"/></argument_list></call> <operator pos:line="131" pos:column="48">==<pos:position pos:line="131" pos:column="50"/></operator> <name pos:line="131" pos:column="51">WAIT_OBJECT_0<pos:position pos:line="131" pos:column="64"/></name></expr>)<pos:position pos:line="131" pos:column="65"/></condition><then pos:line="131" pos:column="65"> <block pos:line="131" pos:column="66">{
      <comment type="block" pos:line="132" pos:column="7">/* first handle stdin, stdout and stderr */</comment>
      <if pos:line="133" pos:column="7">if<condition pos:line="133" pos:column="9">(<expr><name pos:line="133" pos:column="10">fds<pos:position pos:line="133" pos:column="13"/></name> <operator pos:line="133" pos:column="14">==<pos:position pos:line="133" pos:column="16"/></operator> <call><name pos:line="133" pos:column="17">fileno<pos:position pos:line="133" pos:column="23"/></name><argument_list pos:line="133" pos:column="23">(<argument><expr><name pos:line="133" pos:column="24">stdin<pos:position pos:line="133" pos:column="29"/></name></expr></argument>)<pos:position pos:line="133" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="31"/></condition><then pos:line="133" pos:column="31"> <block pos:line="133" pos:column="32">{
        <comment type="block" pos:line="134" pos:column="9">/* stdin is never ready for write or exceptional */</comment>
        <expr_stmt><expr><call><name pos:line="135" pos:column="9">FD_CLR<pos:position pos:line="135" pos:column="15"/></name><argument_list pos:line="135" pos:column="15">(<argument><expr><name pos:line="135" pos:column="16">sock<pos:position pos:line="135" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="22">writefds<pos:position pos:line="135" pos:column="30"/></name></expr></argument>)<pos:position pos:line="135" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="136" pos:column="9">FD_CLR<pos:position pos:line="136" pos:column="15"/></name><argument_list pos:line="136" pos:column="15">(<argument><expr><name pos:line="136" pos:column="16">sock<pos:position pos:line="136" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="22">exceptfds<pos:position pos:line="136" pos:column="31"/></name></expr></argument>)<pos:position pos:line="136" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="137" pos:column="8"/></block></then>
      <elseif pos:line="138" pos:column="7">else <if pos:line="138" pos:column="12">if<condition pos:line="138" pos:column="14">(<expr><name pos:line="138" pos:column="15">fds<pos:position pos:line="138" pos:column="18"/></name> <operator pos:line="138" pos:column="19">==<pos:position pos:line="138" pos:column="21"/></operator> <call><name pos:line="138" pos:column="22">fileno<pos:position pos:line="138" pos:column="28"/></name><argument_list pos:line="138" pos:column="28">(<argument><expr><name pos:line="138" pos:column="29">stdout<pos:position pos:line="138" pos:column="35"/></name></expr></argument>)<pos:position pos:line="138" pos:column="36"/></argument_list></call> <operator pos:line="138" pos:column="37">||<pos:position pos:line="138" pos:column="39"/></operator> <name pos:line="138" pos:column="40">fds<pos:position pos:line="138" pos:column="43"/></name> <operator pos:line="138" pos:column="44">==<pos:position pos:line="138" pos:column="46"/></operator> <call><name pos:line="138" pos:column="47">fileno<pos:position pos:line="138" pos:column="53"/></name><argument_list pos:line="138" pos:column="53">(<argument><expr><name pos:line="138" pos:column="54">stderr<pos:position pos:line="138" pos:column="60"/></name></expr></argument>)<pos:position pos:line="138" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="138" pos:column="62"/></condition><then pos:line="138" pos:column="62"> <block pos:line="138" pos:column="63">{
        <comment type="block" pos:line="139" pos:column="9">/* stdout and stderr are never ready for read or exceptional */</comment>
        <expr_stmt><expr><call><name pos:line="140" pos:column="9">FD_CLR<pos:position pos:line="140" pos:column="15"/></name><argument_list pos:line="140" pos:column="15">(<argument><expr><name pos:line="140" pos:column="16">sock<pos:position pos:line="140" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="22">readfds<pos:position pos:line="140" pos:column="29"/></name></expr></argument>)<pos:position pos:line="140" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="141" pos:column="9">FD_CLR<pos:position pos:line="141" pos:column="15"/></name><argument_list pos:line="141" pos:column="15">(<argument><expr><name pos:line="141" pos:column="16">sock<pos:position pos:line="141" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="22">exceptfds<pos:position pos:line="141" pos:column="31"/></name></expr></argument>)<pos:position pos:line="141" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="142" pos:column="8"/></block></then></if></elseif>
      <else pos:line="143" pos:column="7">else <block pos:line="143" pos:column="12">{
        <comment type="block" pos:line="144" pos:column="9">/* try to handle the event with the WINSOCK2 functions */</comment>
        <expr_stmt><expr><name><name pos:line="145" pos:column="9">wsanetevents<pos:position pos:line="145" pos:column="21"/></name><operator pos:line="145" pos:column="21">.<pos:position pos:line="145" pos:column="22"/></operator><name pos:line="145" pos:column="22">lNetworkEvents<pos:position pos:line="145" pos:column="36"/></name></name> <operator pos:line="145" pos:column="37">=<pos:position pos:line="145" pos:column="38"/></operator> <literal type="number" pos:line="145" pos:column="39">0<pos:position pos:line="145" pos:column="40"/></literal></expr>;<pos:position pos:line="145" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="146" pos:column="9">error<pos:position pos:line="146" pos:column="14"/></name> <operator pos:line="146" pos:column="15">=<pos:position pos:line="146" pos:column="16"/></operator> <call><name pos:line="146" pos:column="17">WSAEnumNetworkEvents<pos:position pos:line="146" pos:column="37"/></name><argument_list pos:line="146" pos:column="37">(<argument><expr><name pos:line="146" pos:column="38">fds<pos:position pos:line="146" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="43">handle<pos:position pos:line="146" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="146" pos:column="51">&amp;<pos:position pos:line="146" pos:column="56"/></operator><name pos:line="146" pos:column="52">wsanetevents<pos:position pos:line="146" pos:column="64"/></name></expr></argument>)<pos:position pos:line="146" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="66"/></expr_stmt>
        <if pos:line="147" pos:column="9">if<condition pos:line="147" pos:column="11">(<expr><name pos:line="147" pos:column="12">error<pos:position pos:line="147" pos:column="17"/></name> <operator pos:line="147" pos:column="18">!=<pos:position pos:line="147" pos:column="20"/></operator> <name pos:line="147" pos:column="21">SOCKET_ERROR<pos:position pos:line="147" pos:column="33"/></name></expr>)<pos:position pos:line="147" pos:column="34"/></condition><then pos:line="147" pos:column="34"> <block pos:line="147" pos:column="35">{
          <comment type="block" pos:line="148" pos:column="11">/* remove from descriptor set if not ready for read/accept/close */</comment>
          <if pos:line="149" pos:column="11">if<condition pos:line="149" pos:column="13">(<expr><operator pos:line="149" pos:column="14">!<pos:position pos:line="149" pos:column="15"/></operator><operator pos:line="149" pos:column="15">(<pos:position pos:line="149" pos:column="16"/></operator><name><name pos:line="149" pos:column="16">wsanetevents<pos:position pos:line="149" pos:column="28"/></name><operator pos:line="149" pos:column="28">.<pos:position pos:line="149" pos:column="29"/></operator><name pos:line="149" pos:column="29">lNetworkEvents<pos:position pos:line="149" pos:column="43"/></name></name> <operator pos:line="149" pos:column="44">&amp;<pos:position pos:line="149" pos:column="49"/></operator> <operator pos:line="149" pos:column="46">(<pos:position pos:line="149" pos:column="47"/></operator><name pos:line="149" pos:column="47">FD_READ<pos:position pos:line="149" pos:column="54"/></name><operator pos:line="149" pos:column="54">|<pos:position pos:line="149" pos:column="55"/></operator><name pos:line="149" pos:column="55">FD_ACCEPT<pos:position pos:line="149" pos:column="64"/></name><operator pos:line="149" pos:column="64">|<pos:position pos:line="149" pos:column="65"/></operator><name pos:line="149" pos:column="65">FD_CLOSE<pos:position pos:line="149" pos:column="73"/></name><operator pos:line="149" pos:column="73">)<pos:position pos:line="149" pos:column="74"/></operator><operator pos:line="149" pos:column="74">)<pos:position pos:line="149" pos:column="75"/></operator></expr>)<pos:position pos:line="149" pos:column="76"/></condition><then pos:line="149" pos:column="76">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="150" pos:column="13">FD_CLR<pos:position pos:line="150" pos:column="19"/></name><argument_list pos:line="150" pos:column="19">(<argument><expr><name pos:line="150" pos:column="20">sock<pos:position pos:line="150" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="26">readfds<pos:position pos:line="150" pos:column="33"/></name></expr></argument>)<pos:position pos:line="150" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="35"/></expr_stmt></block></then></if>

          <comment type="block" pos:line="152" pos:column="11">/* remove from descriptor set if not ready for write/connect */</comment>
          <if pos:line="153" pos:column="11">if<condition pos:line="153" pos:column="13">(<expr><operator pos:line="153" pos:column="14">!<pos:position pos:line="153" pos:column="15"/></operator><operator pos:line="153" pos:column="15">(<pos:position pos:line="153" pos:column="16"/></operator><name><name pos:line="153" pos:column="16">wsanetevents<pos:position pos:line="153" pos:column="28"/></name><operator pos:line="153" pos:column="28">.<pos:position pos:line="153" pos:column="29"/></operator><name pos:line="153" pos:column="29">lNetworkEvents<pos:position pos:line="153" pos:column="43"/></name></name> <operator pos:line="153" pos:column="44">&amp;<pos:position pos:line="153" pos:column="49"/></operator> <operator pos:line="153" pos:column="46">(<pos:position pos:line="153" pos:column="47"/></operator><name pos:line="153" pos:column="47">FD_WRITE<pos:position pos:line="153" pos:column="55"/></name><operator pos:line="153" pos:column="55">|<pos:position pos:line="153" pos:column="56"/></operator><name pos:line="153" pos:column="56">FD_CONNECT<pos:position pos:line="153" pos:column="66"/></name><operator pos:line="153" pos:column="66">)<pos:position pos:line="153" pos:column="67"/></operator><operator pos:line="153" pos:column="67">)<pos:position pos:line="153" pos:column="68"/></operator></expr>)<pos:position pos:line="153" pos:column="69"/></condition><then pos:line="153" pos:column="69">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="154" pos:column="13">FD_CLR<pos:position pos:line="154" pos:column="19"/></name><argument_list pos:line="154" pos:column="19">(<argument><expr><name pos:line="154" pos:column="20">sock<pos:position pos:line="154" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="26">writefds<pos:position pos:line="154" pos:column="34"/></name></expr></argument>)<pos:position pos:line="154" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="36"/></expr_stmt></block></then></if>

          <comment type="block" pos:line="156" pos:column="11">/* HACK:
           * use exceptfds together with readfds to signal
           * that the connection was closed by the client.
           *
           * Reason: FD_CLOSE is only signaled once, sometimes
           * at the same time as FD_READ with data being available.
           * This means that recv/sread is not reliable to detect
           * that the connection is closed.
           */</comment>
          <comment type="block" pos:line="165" pos:column="11">/* remove from descriptor set if not exceptional */</comment>
          <if pos:line="166" pos:column="11">if<condition pos:line="166" pos:column="13">(<expr><operator pos:line="166" pos:column="14">!<pos:position pos:line="166" pos:column="15"/></operator><operator pos:line="166" pos:column="15">(<pos:position pos:line="166" pos:column="16"/></operator><name><name pos:line="166" pos:column="16">wsanetevents<pos:position pos:line="166" pos:column="28"/></name><operator pos:line="166" pos:column="28">.<pos:position pos:line="166" pos:column="29"/></operator><name pos:line="166" pos:column="29">lNetworkEvents<pos:position pos:line="166" pos:column="43"/></name></name> <operator pos:line="166" pos:column="44">&amp;<pos:position pos:line="166" pos:column="49"/></operator> <operator pos:line="166" pos:column="46">(<pos:position pos:line="166" pos:column="47"/></operator><name pos:line="166" pos:column="47">FD_OOB<pos:position pos:line="166" pos:column="53"/></name><operator pos:line="166" pos:column="53">|<pos:position pos:line="166" pos:column="54"/></operator><name pos:line="166" pos:column="54">FD_CLOSE<pos:position pos:line="166" pos:column="62"/></name><operator pos:line="166" pos:column="62">)<pos:position pos:line="166" pos:column="63"/></operator><operator pos:line="166" pos:column="63">)<pos:position pos:line="166" pos:column="64"/></operator></expr>)<pos:position pos:line="166" pos:column="65"/></condition><then pos:line="166" pos:column="65">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="167" pos:column="13">FD_CLR<pos:position pos:line="167" pos:column="19"/></name><argument_list pos:line="167" pos:column="19">(<argument><expr><name pos:line="167" pos:column="20">sock<pos:position pos:line="167" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="26">exceptfds<pos:position pos:line="167" pos:column="35"/></name></expr></argument>)<pos:position pos:line="167" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="37"/></expr_stmt></block></then></if>
        }<pos:position pos:line="168" pos:column="10"/></block></then></if>
      }<pos:position pos:line="169" pos:column="8"/></block></else></if>

      <comment type="block" pos:line="171" pos:column="7">/* check if the event has not been filtered using specific tests */</comment>
      <if pos:line="172" pos:column="7">if<condition pos:line="172" pos:column="9">(<expr><call><name pos:line="172" pos:column="10">FD_ISSET<pos:position pos:line="172" pos:column="18"/></name><argument_list pos:line="172" pos:column="18">(<argument><expr><name pos:line="172" pos:column="19">sock<pos:position pos:line="172" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="25">readfds<pos:position pos:line="172" pos:column="32"/></name></expr></argument>)<pos:position pos:line="172" pos:column="33"/></argument_list></call> <operator pos:line="172" pos:column="34">||<pos:position pos:line="172" pos:column="36"/></operator> <call><name pos:line="172" pos:column="37">FD_ISSET<pos:position pos:line="172" pos:column="45"/></name><argument_list pos:line="172" pos:column="45">(<argument><expr><name pos:line="172" pos:column="46">sock<pos:position pos:line="172" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="52">writefds<pos:position pos:line="172" pos:column="60"/></name></expr></argument>)<pos:position pos:line="172" pos:column="61"/></argument_list></call> <operator pos:line="172" pos:column="62">||<pos:position pos:line="172" pos:column="64"/></operator>
         <call><name pos:line="173" pos:column="10">FD_ISSET<pos:position pos:line="173" pos:column="18"/></name><argument_list pos:line="173" pos:column="18">(<argument><expr><name pos:line="173" pos:column="19">sock<pos:position pos:line="173" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="25">exceptfds<pos:position pos:line="173" pos:column="34"/></name></expr></argument>)<pos:position pos:line="173" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="173" pos:column="36"/></condition><then pos:line="173" pos:column="36"> <block pos:line="173" pos:column="37">{
        <expr_stmt><expr><name pos:line="174" pos:column="9">ret<pos:position pos:line="174" pos:column="12"/></name><operator pos:line="174" pos:column="12">++<pos:position pos:line="174" pos:column="14"/></operator></expr>;<pos:position pos:line="174" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="175" pos:column="8"/></block></then></if>
    }<pos:position pos:line="176" pos:column="6"/></block></then>
    <else pos:line="177" pos:column="5">else <block pos:line="177" pos:column="10">{
      <comment type="block" pos:line="178" pos:column="7">/* remove from all descriptor sets since this handle did not trigger */</comment>
      <expr_stmt><expr><call><name pos:line="179" pos:column="7">FD_CLR<pos:position pos:line="179" pos:column="13"/></name><argument_list pos:line="179" pos:column="13">(<argument><expr><name pos:line="179" pos:column="14">sock<pos:position pos:line="179" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="20">readfds<pos:position pos:line="179" pos:column="27"/></name></expr></argument>)<pos:position pos:line="179" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="180" pos:column="7">FD_CLR<pos:position pos:line="180" pos:column="13"/></name><argument_list pos:line="180" pos:column="13">(<argument><expr><name pos:line="180" pos:column="14">sock<pos:position pos:line="180" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="20">writefds<pos:position pos:line="180" pos:column="28"/></name></expr></argument>)<pos:position pos:line="180" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="181" pos:column="7">FD_CLR<pos:position pos:line="181" pos:column="13"/></name><argument_list pos:line="181" pos:column="13">(<argument><expr><name pos:line="181" pos:column="14">sock<pos:position pos:line="181" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="20">exceptfds<pos:position pos:line="181" pos:column="29"/></name></expr></argument>)<pos:position pos:line="181" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="182" pos:column="6"/></block></else></if>
  }<pos:position pos:line="183" pos:column="4"/></block></for>

  <for pos:line="185" pos:column="3">for<control pos:line="185" pos:column="6">(<init><expr><name pos:line="185" pos:column="7">fds<pos:position pos:line="185" pos:column="10"/></name> <operator pos:line="185" pos:column="11">=<pos:position pos:line="185" pos:column="12"/></operator> <literal type="number" pos:line="185" pos:column="13">0<pos:position pos:line="185" pos:column="14"/></literal></expr>;<pos:position pos:line="185" pos:column="15"/></init> <condition><expr><name pos:line="185" pos:column="16">fds<pos:position pos:line="185" pos:column="19"/></name> <operator pos:line="185" pos:column="20">&lt;<pos:position pos:line="185" pos:column="24"/></operator> <name pos:line="185" pos:column="22">nfds<pos:position pos:line="185" pos:column="26"/></name></expr>;<pos:position pos:line="185" pos:column="27"/></condition> <incr><expr><name pos:line="185" pos:column="28">fds<pos:position pos:line="185" pos:column="31"/></name><operator pos:line="185" pos:column="31">++<pos:position pos:line="185" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="185" pos:column="34"/></control> <block pos:line="185" pos:column="35">{
    <if pos:line="186" pos:column="5">if<condition pos:line="186" pos:column="7">(<expr><call><name pos:line="186" pos:column="8">FD_ISSET<pos:position pos:line="186" pos:column="16"/></name><argument_list pos:line="186" pos:column="16">(<argument><expr><name pos:line="186" pos:column="17">fds<pos:position pos:line="186" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="22">readfds<pos:position pos:line="186" pos:column="29"/></name></expr></argument>)<pos:position pos:line="186" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="186" pos:column="31"/></condition><then pos:line="186" pos:column="31">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="187" pos:column="7">logmsg<pos:position pos:line="187" pos:column="13"/></name><argument_list pos:line="187" pos:column="13">(<argument><expr><literal type="string" pos:line="187" pos:column="14">"select_ws: %d is readable"<pos:position pos:line="187" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="187" pos:column="43">fds<pos:position pos:line="187" pos:column="46"/></name></expr></argument>)<pos:position pos:line="187" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="48"/></expr_stmt></block></then></if>

    <if pos:line="189" pos:column="5">if<condition pos:line="189" pos:column="7">(<expr><call><name pos:line="189" pos:column="8">FD_ISSET<pos:position pos:line="189" pos:column="16"/></name><argument_list pos:line="189" pos:column="16">(<argument><expr><name pos:line="189" pos:column="17">fds<pos:position pos:line="189" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="22">writefds<pos:position pos:line="189" pos:column="30"/></name></expr></argument>)<pos:position pos:line="189" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="189" pos:column="32"/></condition><then pos:line="189" pos:column="32">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="190" pos:column="7">logmsg<pos:position pos:line="190" pos:column="13"/></name><argument_list pos:line="190" pos:column="13">(<argument><expr><literal type="string" pos:line="190" pos:column="14">"select_ws: %d is writable"<pos:position pos:line="190" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="43">fds<pos:position pos:line="190" pos:column="46"/></name></expr></argument>)<pos:position pos:line="190" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="48"/></expr_stmt></block></then></if>

    <if pos:line="192" pos:column="5">if<condition pos:line="192" pos:column="7">(<expr><call><name pos:line="192" pos:column="8">FD_ISSET<pos:position pos:line="192" pos:column="16"/></name><argument_list pos:line="192" pos:column="16">(<argument><expr><name pos:line="192" pos:column="17">fds<pos:position pos:line="192" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="22">exceptfds<pos:position pos:line="192" pos:column="31"/></name></expr></argument>)<pos:position pos:line="192" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="192" pos:column="33"/></condition><then pos:line="192" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="193" pos:column="7">logmsg<pos:position pos:line="193" pos:column="13"/></name><argument_list pos:line="193" pos:column="13">(<argument><expr><literal type="string" pos:line="193" pos:column="14">"select_ws: %d is excepted"<pos:position pos:line="193" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="193" pos:column="43">fds<pos:position pos:line="193" pos:column="46"/></name></expr></argument>)<pos:position pos:line="193" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="48"/></expr_stmt></block></then></if>
  }<pos:position pos:line="194" pos:column="4"/></block></for>

  <for pos:line="196" pos:column="3">for<control pos:line="196" pos:column="6">(<init><expr><name pos:line="196" pos:column="7">idx<pos:position pos:line="196" pos:column="10"/></name> <operator pos:line="196" pos:column="11">=<pos:position pos:line="196" pos:column="12"/></operator> <literal type="number" pos:line="196" pos:column="13">0<pos:position pos:line="196" pos:column="14"/></literal></expr>;<pos:position pos:line="196" pos:column="15"/></init> <condition><expr><name pos:line="196" pos:column="16">idx<pos:position pos:line="196" pos:column="19"/></name> <operator pos:line="196" pos:column="20">&lt;<pos:position pos:line="196" pos:column="24"/></operator> <name pos:line="196" pos:column="22">wsa<pos:position pos:line="196" pos:column="25"/></name></expr>;<pos:position pos:line="196" pos:column="26"/></condition> <incr><expr><name pos:line="196" pos:column="27">idx<pos:position pos:line="196" pos:column="30"/></name><operator pos:line="196" pos:column="30">++<pos:position pos:line="196" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="196" pos:column="33"/></control> <block pos:line="196" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="197" pos:column="5">WSAEventSelect<pos:position pos:line="197" pos:column="19"/></name><argument_list pos:line="197" pos:column="19">(<argument><expr><name><name pos:line="197" pos:column="20">data<pos:position pos:line="197" pos:column="24"/></name><index pos:line="197" pos:column="24">[<expr><name pos:line="197" pos:column="25">idx<pos:position pos:line="197" pos:column="28"/></name></expr>]<pos:position pos:line="197" pos:column="29"/></index></name><operator pos:line="197" pos:column="29">.<pos:position pos:line="197" pos:column="30"/></operator><name pos:line="197" pos:column="30">wsasock<pos:position pos:line="197" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="39">NULL<pos:position pos:line="197" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="197" pos:column="45">0<pos:position pos:line="197" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="197" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="198" pos:column="5">WSACloseEvent<pos:position pos:line="198" pos:column="18"/></name><argument_list pos:line="198" pos:column="18">(<argument><expr><name><name pos:line="198" pos:column="19">data<pos:position pos:line="198" pos:column="23"/></name><index pos:line="198" pos:column="23">[<expr><name pos:line="198" pos:column="24">idx<pos:position pos:line="198" pos:column="27"/></name></expr>]<pos:position pos:line="198" pos:column="28"/></index></name><operator pos:line="198" pos:column="28">.<pos:position pos:line="198" pos:column="29"/></operator><name pos:line="198" pos:column="29">wsaevent<pos:position pos:line="198" pos:column="37"/></name></expr></argument>)<pos:position pos:line="198" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="199" pos:column="4"/></block></for>

  <for pos:line="201" pos:column="3">for<control pos:line="201" pos:column="6">(<init><expr><name pos:line="201" pos:column="7">idx<pos:position pos:line="201" pos:column="10"/></name> <operator pos:line="201" pos:column="11">=<pos:position pos:line="201" pos:column="12"/></operator> <literal type="number" pos:line="201" pos:column="13">0<pos:position pos:line="201" pos:column="14"/></literal></expr>;<pos:position pos:line="201" pos:column="15"/></init> <condition><expr><name pos:line="201" pos:column="16">idx<pos:position pos:line="201" pos:column="19"/></name> <operator pos:line="201" pos:column="20">&lt;<pos:position pos:line="201" pos:column="24"/></operator> <name pos:line="201" pos:column="22">thd<pos:position pos:line="201" pos:column="25"/></name></expr>;<pos:position pos:line="201" pos:column="26"/></condition> <incr><expr><name pos:line="201" pos:column="27">idx<pos:position pos:line="201" pos:column="30"/></name><operator pos:line="201" pos:column="30">++<pos:position pos:line="201" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="201" pos:column="33"/></control> <block pos:line="201" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="202" pos:column="5">WaitForSingleObject<pos:position pos:line="202" pos:column="24"/></name><argument_list pos:line="202" pos:column="24">(<argument><expr><name><name pos:line="202" pos:column="25">data<pos:position pos:line="202" pos:column="29"/></name><index pos:line="202" pos:column="29">[<expr><name pos:line="202" pos:column="30">idx<pos:position pos:line="202" pos:column="33"/></name></expr>]<pos:position pos:line="202" pos:column="34"/></index></name><operator pos:line="202" pos:column="34">.<pos:position pos:line="202" pos:column="35"/></operator><name pos:line="202" pos:column="35">thread<pos:position pos:line="202" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="43">INFINITE<pos:position pos:line="202" pos:column="51"/></name></expr></argument>)<pos:position pos:line="202" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="203" pos:column="5">CloseHandle<pos:position pos:line="203" pos:column="16"/></name><argument_list pos:line="203" pos:column="16">(<argument><expr><name><name pos:line="203" pos:column="17">data<pos:position pos:line="203" pos:column="21"/></name><index pos:line="203" pos:column="21">[<expr><name pos:line="203" pos:column="22">idx<pos:position pos:line="203" pos:column="25"/></name></expr>]<pos:position pos:line="203" pos:column="26"/></index></name><operator pos:line="203" pos:column="26">.<pos:position pos:line="203" pos:column="27"/></operator><name pos:line="203" pos:column="27">thread<pos:position pos:line="203" pos:column="33"/></name></expr></argument>)<pos:position pos:line="203" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="204" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="206" pos:column="3">CloseHandle<pos:position pos:line="206" pos:column="14"/></name><argument_list pos:line="206" pos:column="14">(<argument><expr><name pos:line="206" pos:column="15">waitevent<pos:position pos:line="206" pos:column="24"/></name></expr></argument>)<pos:position pos:line="206" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="26"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="208" pos:column="3">free<pos:position pos:line="208" pos:column="7"/></name><argument_list pos:line="208" pos:column="7">(<argument><expr><name pos:line="208" pos:column="8">handles<pos:position pos:line="208" pos:column="15"/></name></expr></argument>)<pos:position pos:line="208" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="209" pos:column="3">free<pos:position pos:line="209" pos:column="7"/></name><argument_list pos:line="209" pos:column="7">(<argument><expr><name pos:line="209" pos:column="8">data<pos:position pos:line="209" pos:column="12"/></name></expr></argument>)<pos:position pos:line="209" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="14"/></expr_stmt>

  <return pos:line="211" pos:column="3">return <expr><name pos:line="211" pos:column="10">ret<pos:position pos:line="211" pos:column="13"/></name></expr>;<pos:position pos:line="211" pos:column="14"/></return>
}<pos:position pos:line="212" pos:column="2"/></block></function></unit>
