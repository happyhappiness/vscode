<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_16952.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_GetFTPResponse<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">sockfd<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">buf<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>,
                        <parameter><decl><type><name><name pos:line="3" pos:column="25">struct<pos:position pos:line="3" pos:column="31"/></name> <name pos:line="3" pos:column="32">connectdata<pos:position pos:line="3" pos:column="43"/></name></name> <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="45">conn<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="4" pos:column="25">int<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">ftpcode<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="38"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <comment type="block" pos:line="6" pos:column="3">/* Brand new implementation.
   * We cannot read just one byte per read() and then go back to select()
   * as it seems that the OpenSSL read() stuff doesn't grok that properly.
   *
   * Alas, read as much as possible, split up into lines, use the ending
   * line in a response or continue reading.
   */</comment>

  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">nread<pos:position pos:line="14" pos:column="12"/></name></decl>;<pos:position pos:line="14" pos:column="13"/></decl_stmt>   <comment type="block" pos:line="14" pos:column="16">/* total size read */</comment>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">perline<pos:position pos:line="15" pos:column="14"/></name></decl>;<pos:position pos:line="15" pos:column="15"/></decl_stmt> <comment type="block" pos:line="15" pos:column="16">/* count bytes per line */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">bool<pos:position pos:line="16" pos:column="7"/></name></type> <name pos:line="16" pos:column="8">keepon<pos:position pos:line="16" pos:column="14"/></name><init pos:line="16" pos:column="14">=<expr><name pos:line="16" pos:column="15">TRUE<pos:position pos:line="16" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">ssize_t<pos:position pos:line="17" pos:column="10"/></name></type> <name pos:line="17" pos:column="11">gotbytes<pos:position pos:line="17" pos:column="19"/></name></decl>;<pos:position pos:line="17" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">char<pos:position pos:line="18" pos:column="7"/></name> <modifier pos:line="18" pos:column="8">*<pos:position pos:line="18" pos:column="9"/></modifier></type><name pos:line="18" pos:column="9">ptr<pos:position pos:line="18" pos:column="12"/></name></decl>;<pos:position pos:line="18" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">int<pos:position pos:line="19" pos:column="6"/></name></type> <name pos:line="19" pos:column="7">timeout<pos:position pos:line="19" pos:column="14"/></name> <init pos:line="19" pos:column="15">= <expr><literal type="number" pos:line="19" pos:column="17">3600<pos:position pos:line="19" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="22"/></decl_stmt> <comment type="block" pos:line="19" pos:column="23">/* default timeout in seconds */</comment>
  <decl_stmt><decl><type><name><name pos:line="20" pos:column="3">struct<pos:position pos:line="20" pos:column="9"/></name> <name pos:line="20" pos:column="10">timeval<pos:position pos:line="20" pos:column="17"/></name></name></type> <name pos:line="20" pos:column="18">interval<pos:position pos:line="20" pos:column="26"/></name></decl>;<pos:position pos:line="20" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">fd_set<pos:position pos:line="21" pos:column="9"/></name></type> <name pos:line="21" pos:column="10">rkeepfd<pos:position pos:line="21" pos:column="17"/></name></decl>;<pos:position pos:line="21" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">fd_set<pos:position pos:line="22" pos:column="9"/></name></type> <name pos:line="22" pos:column="10">readfd<pos:position pos:line="22" pos:column="16"/></name></decl>;<pos:position pos:line="22" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="23" pos:column="3">struct<pos:position pos:line="23" pos:column="9"/></name> <name pos:line="23" pos:column="10">UrlData<pos:position pos:line="23" pos:column="17"/></name></name> <modifier pos:line="23" pos:column="18">*<pos:position pos:line="23" pos:column="19"/></modifier></type><name pos:line="23" pos:column="19">data<pos:position pos:line="23" pos:column="23"/></name> <init pos:line="23" pos:column="24">= <expr><name><name pos:line="23" pos:column="26">conn<pos:position pos:line="23" pos:column="30"/></name><operator pos:line="23" pos:column="30">-&gt;<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="32">data<pos:position pos:line="23" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="23" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">char<pos:position pos:line="24" pos:column="7"/></name> <modifier pos:line="24" pos:column="8">*<pos:position pos:line="24" pos:column="9"/></modifier></type><name pos:line="24" pos:column="9">line_start<pos:position pos:line="24" pos:column="19"/></name></decl>;<pos:position pos:line="24" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">int<pos:position pos:line="25" pos:column="6"/></name></type> <name pos:line="25" pos:column="7">code<pos:position pos:line="25" pos:column="11"/></name><init pos:line="25" pos:column="11">=<expr><literal type="number" pos:line="25" pos:column="12">0<pos:position pos:line="25" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="14"/></decl_stmt> <comment type="block" pos:line="25" pos:column="15">/* default "error code" to return */</comment>

<cpp:define pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">define<pos:position pos:line="27" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="27" pos:column="9">SELECT_OK<pos:position pos:line="27" pos:column="18"/></name></cpp:macro>      <cpp:value pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">define<pos:position pos:line="28" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="28" pos:column="9">SELECT_ERROR<pos:position pos:line="28" pos:column="21"/></name></cpp:macro>   <cpp:value pos:line="28" pos:column="24">1<pos:position pos:line="28" pos:column="25"/></cpp:value></cpp:define>
<cpp:define pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">define<pos:position pos:line="29" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="29" pos:column="9">SELECT_TIMEOUT<pos:position pos:line="29" pos:column="23"/></name></cpp:macro> <cpp:value pos:line="29" pos:column="24">2<pos:position pos:line="29" pos:column="25"/></cpp:value></cpp:define>
  <decl_stmt><decl><type><name pos:line="30" pos:column="3">int<pos:position pos:line="30" pos:column="6"/></name></type> <name pos:line="30" pos:column="7">error<pos:position pos:line="30" pos:column="12"/></name> <init pos:line="30" pos:column="13">= <expr><name pos:line="30" pos:column="15">SELECT_OK<pos:position pos:line="30" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="25"/></decl_stmt>

  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><name pos:line="32" pos:column="6">ftpcode<pos:position pos:line="32" pos:column="13"/></name></expr>)<pos:position pos:line="32" pos:column="14"/></condition><then pos:line="32" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="33" pos:column="5">*<pos:position pos:line="33" pos:column="6"/></operator><name pos:line="33" pos:column="6">ftpcode<pos:position pos:line="33" pos:column="13"/></name><operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator><literal type="number" pos:line="33" pos:column="14">0<pos:position pos:line="33" pos:column="15"/></literal></expr>;<pos:position pos:line="33" pos:column="16"/></expr_stmt></block></then></if> <comment type="block" pos:line="33" pos:column="17">/* 0 for errors */</comment>

  <if pos:line="35" pos:column="3">if<condition pos:line="35" pos:column="5">(<expr><name><name pos:line="35" pos:column="6">data<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">-&gt;<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="12">timeout<pos:position pos:line="35" pos:column="19"/></name></name></expr>)<pos:position pos:line="35" pos:column="20"/></condition><then pos:line="35" pos:column="20"> <block pos:line="35" pos:column="21">{
    <comment type="block" pos:line="36" pos:column="5">/* if timeout is requested, find out how much remaining time we have */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">timeout<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <name><name pos:line="37" pos:column="15">data<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">-&gt;<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="21">timeout<pos:position pos:line="37" pos:column="28"/></name></name> <operator pos:line="37" pos:column="29">-<pos:position pos:line="37" pos:column="30"/></operator> <comment type="block" pos:line="37" pos:column="31">/* timeout time */</comment>
      <operator pos:line="38" pos:column="7">(<pos:position pos:line="38" pos:column="8"/></operator><call><name pos:line="38" pos:column="8">Curl_tvlong<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><call><name pos:line="38" pos:column="20">Curl_tvnow<pos:position pos:line="38" pos:column="30"/></name><argument_list pos:line="38" pos:column="30">()<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="33"/></argument_list></call> <operator pos:line="38" pos:column="34">-<pos:position pos:line="38" pos:column="35"/></operator> <call><name pos:line="38" pos:column="36">Curl_tvlong<pos:position pos:line="38" pos:column="47"/></name><argument_list pos:line="38" pos:column="47">(<argument><expr><name><name pos:line="38" pos:column="48">conn<pos:position pos:line="38" pos:column="52"/></name><operator pos:line="38" pos:column="52">-&gt;<pos:position pos:line="38" pos:column="57"/></operator><name pos:line="38" pos:column="54">now<pos:position pos:line="38" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></call><operator pos:line="38" pos:column="58">)<pos:position pos:line="38" pos:column="59"/></operator></expr>;<pos:position pos:line="38" pos:column="60"/></expr_stmt> <comment type="block" pos:line="38" pos:column="61">/* spent time */</comment>
    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name pos:line="39" pos:column="8">timeout<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">&lt;=<pos:position pos:line="39" pos:column="21"/></operator><literal type="number" pos:line="39" pos:column="18">0<pos:position pos:line="39" pos:column="19"/></literal></expr> )<pos:position pos:line="39" pos:column="21"/></condition><then pos:line="39" pos:column="21"> <block pos:line="39" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">failf<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">data<pos:position pos:line="40" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="19">"Transfer aborted due to timeout"<pos:position pos:line="40" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
      <return pos:line="41" pos:column="7">return <expr><operator pos:line="41" pos:column="14">-<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">SELECT_TIMEOUT<pos:position pos:line="41" pos:column="29"/></name></expr>;<pos:position pos:line="41" pos:column="30"/></return> <comment type="block" pos:line="41" pos:column="31">/* already too little time */</comment>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="45" pos:column="3">FD_ZERO<pos:position pos:line="45" pos:column="10"/></name> <argument_list pos:line="45" pos:column="11">(<argument><expr><operator pos:line="45" pos:column="12">&amp;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="13">readfd<pos:position pos:line="45" pos:column="19"/></name></expr></argument>)<pos:position pos:line="45" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="21"/></expr_stmt>		<comment type="block" pos:line="45" pos:column="33">/* clear it */</comment>
  <expr_stmt><expr><call><name pos:line="46" pos:column="3">FD_SET<pos:position pos:line="46" pos:column="9"/></name> <argument_list pos:line="46" pos:column="10">(<argument><expr><name pos:line="46" pos:column="11">sockfd<pos:position pos:line="46" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="19">&amp;<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="20">readfd<pos:position pos:line="46" pos:column="26"/></name></expr></argument>)<pos:position pos:line="46" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>     <comment type="block" pos:line="46" pos:column="33">/* read socket */</comment>

  <comment type="block" pos:line="48" pos:column="3">/* get this in a backup variable to be able to restore it on each lap in the
     select() loop */</comment>
  <expr_stmt><expr><name pos:line="50" pos:column="3">rkeepfd<pos:position pos:line="50" pos:column="10"/></name> <operator pos:line="50" pos:column="11">=<pos:position pos:line="50" pos:column="12"/></operator> <name pos:line="50" pos:column="13">readfd<pos:position pos:line="50" pos:column="19"/></name></expr>;<pos:position pos:line="50" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="52" pos:column="3">ptr<pos:position pos:line="52" pos:column="6"/></name><operator pos:line="52" pos:column="6">=<pos:position pos:line="52" pos:column="7"/></operator><name pos:line="52" pos:column="7">buf<pos:position pos:line="52" pos:column="10"/></name></expr>;<pos:position pos:line="52" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="53" pos:column="3">line_start<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <name pos:line="53" pos:column="16">buf<pos:position pos:line="53" pos:column="19"/></name></expr>;<pos:position pos:line="53" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="55" pos:column="3">nread<pos:position pos:line="55" pos:column="8"/></name><operator pos:line="55" pos:column="8">=<pos:position pos:line="55" pos:column="9"/></operator><literal type="number" pos:line="55" pos:column="9">0<pos:position pos:line="55" pos:column="10"/></literal></expr>;<pos:position pos:line="55" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="56" pos:column="3">perline<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator><literal type="number" pos:line="56" pos:column="11">0<pos:position pos:line="56" pos:column="12"/></literal></expr>;<pos:position pos:line="56" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="57" pos:column="3">keepon<pos:position pos:line="57" pos:column="9"/></name><operator pos:line="57" pos:column="9">=<pos:position pos:line="57" pos:column="10"/></operator><name pos:line="57" pos:column="10">TRUE<pos:position pos:line="57" pos:column="14"/></name></expr>;<pos:position pos:line="57" pos:column="15"/></expr_stmt>

  <while pos:line="59" pos:column="3">while<condition pos:line="59" pos:column="8">(<expr><operator pos:line="59" pos:column="9">(<pos:position pos:line="59" pos:column="10"/></operator><name pos:line="59" pos:column="10">nread<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">&lt;<pos:position pos:line="59" pos:column="19"/></operator><name pos:line="59" pos:column="16">BUFSIZE<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">)<pos:position pos:line="59" pos:column="24"/></operator> <operator pos:line="59" pos:column="25">&amp;&amp;<pos:position pos:line="59" pos:column="35"/></operator> <operator pos:line="59" pos:column="28">(<pos:position pos:line="59" pos:column="29"/></operator><name pos:line="59" pos:column="29">keepon<pos:position pos:line="59" pos:column="35"/></name> <operator pos:line="59" pos:column="36">&amp;&amp;<pos:position pos:line="59" pos:column="46"/></operator> <operator pos:line="59" pos:column="39">!<pos:position pos:line="59" pos:column="40"/></operator><name pos:line="59" pos:column="40">error<pos:position pos:line="59" pos:column="45"/></name><operator pos:line="59" pos:column="45">)<pos:position pos:line="59" pos:column="46"/></operator></expr>)<pos:position pos:line="59" pos:column="47"/></condition> <block pos:line="59" pos:column="48">{
    <expr_stmt><expr><name pos:line="60" pos:column="5">readfd<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">=<pos:position pos:line="60" pos:column="13"/></operator> <name pos:line="60" pos:column="14">rkeepfd<pos:position pos:line="60" pos:column="21"/></name></expr>;<pos:position pos:line="60" pos:column="22"/></expr_stmt>		   <comment type="block" pos:line="60" pos:column="36">/* set every lap */</comment>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">interval<pos:position pos:line="61" pos:column="13"/></name><operator pos:line="61" pos:column="13">.<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="14">tv_sec<pos:position pos:line="61" pos:column="20"/></name></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="23">timeout<pos:position pos:line="61" pos:column="30"/></name></expr>;<pos:position pos:line="61" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">interval<pos:position pos:line="62" pos:column="13"/></name><operator pos:line="62" pos:column="13">.<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="14">tv_usec<pos:position pos:line="62" pos:column="21"/></name></name> <operator pos:line="62" pos:column="22">=<pos:position pos:line="62" pos:column="23"/></operator> <literal type="number" pos:line="62" pos:column="24">0<pos:position pos:line="62" pos:column="25"/></literal></expr>;<pos:position pos:line="62" pos:column="26"/></expr_stmt>

    <switch pos:line="64" pos:column="5">switch <condition pos:line="64" pos:column="12">(<expr><call><name pos:line="64" pos:column="13">select<pos:position pos:line="64" pos:column="19"/></name> <argument_list pos:line="64" pos:column="20">(<argument><expr><name pos:line="64" pos:column="21">sockfd<pos:position pos:line="64" pos:column="27"/></name><operator pos:line="64" pos:column="27">+<pos:position pos:line="64" pos:column="28"/></operator><literal type="number" pos:line="64" pos:column="28">1<pos:position pos:line="64" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="64" pos:column="31">&amp;<pos:position pos:line="64" pos:column="36"/></operator><name pos:line="64" pos:column="32">readfd<pos:position pos:line="64" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="40">NULL<pos:position pos:line="64" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="46">NULL<pos:position pos:line="64" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="52">&amp;<pos:position pos:line="64" pos:column="57"/></operator><name pos:line="64" pos:column="53">interval<pos:position pos:line="64" pos:column="61"/></name></expr></argument>)<pos:position pos:line="64" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="63"/></condition> <block pos:line="64" pos:column="64">{
    <case pos:line="65" pos:column="5">case <expr><operator pos:line="65" pos:column="10">-<pos:position pos:line="65" pos:column="11"/></operator><literal type="number" pos:line="65" pos:column="11">1<pos:position pos:line="65" pos:column="12"/></literal></expr>:<pos:position pos:line="65" pos:column="13"/></case> <comment type="block" pos:line="65" pos:column="14">/* select() error, stop reading */</comment>
      <expr_stmt><expr><name pos:line="66" pos:column="7">error<pos:position pos:line="66" pos:column="12"/></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <name pos:line="66" pos:column="15">SELECT_ERROR<pos:position pos:line="66" pos:column="27"/></name></expr>;<pos:position pos:line="66" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="67" pos:column="7">failf<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><name pos:line="67" pos:column="13">data<pos:position pos:line="67" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="19">"Transfer aborted due to select() error"<pos:position pos:line="67" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="61"/></expr_stmt>
      <break pos:line="68" pos:column="7">break;<pos:position pos:line="68" pos:column="13"/></break>
    <case pos:line="69" pos:column="5">case <expr><literal type="number" pos:line="69" pos:column="10">0<pos:position pos:line="69" pos:column="11"/></literal></expr>:<pos:position pos:line="69" pos:column="12"/></case> <comment type="block" pos:line="69" pos:column="13">/* timeout */</comment>
      <expr_stmt><expr><name pos:line="70" pos:column="7">error<pos:position pos:line="70" pos:column="12"/></name> <operator pos:line="70" pos:column="13">=<pos:position pos:line="70" pos:column="14"/></operator> <name pos:line="70" pos:column="15">SELECT_TIMEOUT<pos:position pos:line="70" pos:column="29"/></name></expr>;<pos:position pos:line="70" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="71" pos:column="7">failf<pos:position pos:line="71" pos:column="12"/></name><argument_list pos:line="71" pos:column="12">(<argument><expr><name pos:line="71" pos:column="13">data<pos:position pos:line="71" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="19">"Transfer aborted due to timeout"<pos:position pos:line="71" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="54"/></expr_stmt>
      <break pos:line="72" pos:column="7">break;<pos:position pos:line="72" pos:column="13"/></break>
    <default pos:line="73" pos:column="5">default:<pos:position pos:line="73" pos:column="13"/></default>
      <comment type="block" pos:line="74" pos:column="7">/*
       * This code previously didn't use the kerberos sec_read() code
       * to read, but when we use Curl_read() it may do so. Do confirm
       * that this is still ok and then remove this comment!
       */</comment>
      <if pos:line="79" pos:column="7">if<condition pos:line="79" pos:column="9">(<expr><name pos:line="79" pos:column="10">CURLE_OK<pos:position pos:line="79" pos:column="18"/></name> <operator pos:line="79" pos:column="19">!=<pos:position pos:line="79" pos:column="21"/></operator> <call><name pos:line="79" pos:column="22">Curl_read<pos:position pos:line="79" pos:column="31"/></name><argument_list pos:line="79" pos:column="31">(<argument><expr><name pos:line="79" pos:column="32">conn<pos:position pos:line="79" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="38">sockfd<pos:position pos:line="79" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="46">ptr<pos:position pos:line="79" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="51">BUFSIZE<pos:position pos:line="79" pos:column="58"/></name><operator pos:line="79" pos:column="58">-<pos:position pos:line="79" pos:column="59"/></operator><name pos:line="79" pos:column="59">nread<pos:position pos:line="79" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="66">&amp;<pos:position pos:line="79" pos:column="71"/></operator><name pos:line="79" pos:column="67">gotbytes<pos:position pos:line="79" pos:column="75"/></name></expr></argument>)<pos:position pos:line="79" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="77"/></condition><then pos:line="79" pos:column="77">
        <block type="pseudo"><expr_stmt><expr><name pos:line="80" pos:column="9">keepon<pos:position pos:line="80" pos:column="15"/></name> <operator pos:line="80" pos:column="16">=<pos:position pos:line="80" pos:column="17"/></operator> <name pos:line="80" pos:column="18">FALSE<pos:position pos:line="80" pos:column="23"/></name></expr>;<pos:position pos:line="80" pos:column="24"/></expr_stmt></block></then>
      <elseif pos:line="81" pos:column="7">else <if pos:line="81" pos:column="12">if<condition pos:line="81" pos:column="14">(<expr><name pos:line="81" pos:column="15">gotbytes<pos:position pos:line="81" pos:column="23"/></name> <operator pos:line="81" pos:column="24">&lt;=<pos:position pos:line="81" pos:column="29"/></operator> <literal type="number" pos:line="81" pos:column="27">0<pos:position pos:line="81" pos:column="28"/></literal></expr>)<pos:position pos:line="81" pos:column="29"/></condition><then pos:line="81" pos:column="29"> <block pos:line="81" pos:column="30">{
        <expr_stmt><expr><name pos:line="82" pos:column="9">keepon<pos:position pos:line="82" pos:column="15"/></name> <operator pos:line="82" pos:column="16">=<pos:position pos:line="82" pos:column="17"/></operator> <name pos:line="82" pos:column="18">FALSE<pos:position pos:line="82" pos:column="23"/></name></expr>;<pos:position pos:line="82" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="83" pos:column="9">error<pos:position pos:line="83" pos:column="14"/></name> <operator pos:line="83" pos:column="15">=<pos:position pos:line="83" pos:column="16"/></operator> <name pos:line="83" pos:column="17">SELECT_ERROR<pos:position pos:line="83" pos:column="29"/></name></expr>;<pos:position pos:line="83" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="84" pos:column="9">failf<pos:position pos:line="84" pos:column="14"/></name><argument_list pos:line="84" pos:column="14">(<argument><expr><name pos:line="84" pos:column="15">data<pos:position pos:line="84" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="21">"Connection aborted"<pos:position pos:line="84" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="43"/></expr_stmt>
      }<pos:position pos:line="85" pos:column="8"/></block></then></if></elseif>
      <else pos:line="86" pos:column="7">else <block pos:line="86" pos:column="12">{
        <comment type="block" pos:line="87" pos:column="9">/* we got a whole chunk of data, which can be anything from one
         * byte to a set of lines and possible just a piece of the last
         * line */</comment>
        <decl_stmt><decl><type><name pos:line="90" pos:column="9">int<pos:position pos:line="90" pos:column="12"/></name></type> <name pos:line="90" pos:column="13">i<pos:position pos:line="90" pos:column="14"/></name></decl>;<pos:position pos:line="90" pos:column="15"/></decl_stmt>

        <expr_stmt><expr><name pos:line="92" pos:column="9">nread<pos:position pos:line="92" pos:column="14"/></name> <operator pos:line="92" pos:column="15">+=<pos:position pos:line="92" pos:column="17"/></operator> <name pos:line="92" pos:column="18">gotbytes<pos:position pos:line="92" pos:column="26"/></name></expr>;<pos:position pos:line="92" pos:column="27"/></expr_stmt>
        <for pos:line="93" pos:column="9">for<control pos:line="93" pos:column="12">(<init><expr><name pos:line="93" pos:column="13">i<pos:position pos:line="93" pos:column="14"/></name><operator pos:line="93" pos:column="14">=<pos:position pos:line="93" pos:column="15"/></operator><literal type="number" pos:line="93" pos:column="15">0<pos:position pos:line="93" pos:column="16"/></literal></expr>;<pos:position pos:line="93" pos:column="17"/></init> <condition><expr><name pos:line="93" pos:column="18">i<pos:position pos:line="93" pos:column="19"/></name><operator pos:line="93" pos:column="19">&lt;<pos:position pos:line="93" pos:column="23"/></operator> <name pos:line="93" pos:column="21">gotbytes<pos:position pos:line="93" pos:column="29"/></name></expr>;<pos:position pos:line="93" pos:column="30"/></condition> <incr><expr><name pos:line="93" pos:column="31">ptr<pos:position pos:line="93" pos:column="34"/></name><operator pos:line="93" pos:column="34">++<pos:position pos:line="93" pos:column="36"/></operator></expr><operator pos:line="93" pos:column="36">,<pos:position pos:line="93" pos:column="37"/></operator> <expr><name pos:line="93" pos:column="38">i<pos:position pos:line="93" pos:column="39"/></name><operator pos:line="93" pos:column="39">++<pos:position pos:line="93" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="93" pos:column="42"/></control> <block pos:line="93" pos:column="43">{
          <expr_stmt><expr><name pos:line="94" pos:column="11">perline<pos:position pos:line="94" pos:column="18"/></name><operator pos:line="94" pos:column="18">++<pos:position pos:line="94" pos:column="20"/></operator></expr>;<pos:position pos:line="94" pos:column="21"/></expr_stmt>
          <if pos:line="95" pos:column="11">if<condition pos:line="95" pos:column="13">(<expr><operator pos:line="95" pos:column="14">*<pos:position pos:line="95" pos:column="15"/></operator><name pos:line="95" pos:column="15">ptr<pos:position pos:line="95" pos:column="18"/></name><operator pos:line="95" pos:column="18">==<pos:position pos:line="95" pos:column="20"/></operator><literal type="char" pos:line="95" pos:column="20">'\n'<pos:position pos:line="95" pos:column="24"/></literal></expr>)<pos:position pos:line="95" pos:column="25"/></condition><then pos:line="95" pos:column="25"> <block pos:line="95" pos:column="26">{
            <comment type="block" pos:line="96" pos:column="13">/* a newline is CRLF in ftp-talk, so the CR is ignored as
               the line isn't really terminated until the LF comes */</comment>

            <comment type="block" pos:line="99" pos:column="13">/* output debug output if that is requested */</comment>
            <if pos:line="100" pos:column="13">if<condition pos:line="100" pos:column="15">(<expr><name><name pos:line="100" pos:column="16">data<pos:position pos:line="100" pos:column="20"/></name><operator pos:line="100" pos:column="20">-&gt;<pos:position pos:line="100" pos:column="25"/></operator><name pos:line="100" pos:column="22">bits<pos:position pos:line="100" pos:column="26"/></name><operator pos:line="100" pos:column="26">.<pos:position pos:line="100" pos:column="27"/></operator><name pos:line="100" pos:column="27">verbose<pos:position pos:line="100" pos:column="34"/></name></name></expr>)<pos:position pos:line="100" pos:column="35"/></condition><then pos:line="100" pos:column="35"> <block pos:line="100" pos:column="36">{
              <expr_stmt><expr><call><name pos:line="101" pos:column="15">fputs<pos:position pos:line="101" pos:column="20"/></name><argument_list pos:line="101" pos:column="20">(<argument><expr><literal type="string" pos:line="101" pos:column="21">"&lt; "<pos:position pos:line="101" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="27">data<pos:position pos:line="101" pos:column="31"/></name><operator pos:line="101" pos:column="31">-&gt;<pos:position pos:line="101" pos:column="36"/></operator><name pos:line="101" pos:column="33">err<pos:position pos:line="101" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="38"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="102" pos:column="15">fwrite<pos:position pos:line="102" pos:column="21"/></name><argument_list pos:line="102" pos:column="21">(<argument><expr><name pos:line="102" pos:column="22">line_start<pos:position pos:line="102" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="34">perline<pos:position pos:line="102" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="102" pos:column="43">1<pos:position pos:line="102" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="46">data<pos:position pos:line="102" pos:column="50"/></name><operator pos:line="102" pos:column="50">-&gt;<pos:position pos:line="102" pos:column="55"/></operator><name pos:line="102" pos:column="52">err<pos:position pos:line="102" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="57"/></expr_stmt>
              <comment type="block" pos:line="103" pos:column="15">/* no need to output LF here, it is part of the data */</comment>
            }<pos:position pos:line="104" pos:column="14"/></block></then></if>

            <if pos:line="106" pos:column="13">if<condition pos:line="106" pos:column="15">(<expr><name pos:line="106" pos:column="16">perline<pos:position pos:line="106" pos:column="23"/></name><operator pos:line="106" pos:column="23">&gt;<pos:position pos:line="106" pos:column="27"/></operator><literal type="number" pos:line="106" pos:column="24">3<pos:position pos:line="106" pos:column="25"/></literal> <operator pos:line="106" pos:column="26">&amp;&amp;<pos:position pos:line="106" pos:column="36"/></operator> <call><name pos:line="106" pos:column="29">lastline<pos:position pos:line="106" pos:column="37"/></name><argument_list pos:line="106" pos:column="37">(<argument><expr><name pos:line="106" pos:column="38">line_start<pos:position pos:line="106" pos:column="48"/></name></expr></argument>)<pos:position pos:line="106" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="50"/></condition><then pos:line="106" pos:column="50"> <block pos:line="106" pos:column="51">{
              <comment type="block" pos:line="107" pos:column="15">/* This is the end of the last line, copy the last
               * line to the start of the buffer and zero terminate,
               * for old times sake (and krb4)! */</comment>
              <decl_stmt><decl><type><name pos:line="110" pos:column="15">char<pos:position pos:line="110" pos:column="19"/></name> <modifier pos:line="110" pos:column="20">*<pos:position pos:line="110" pos:column="21"/></modifier></type><name pos:line="110" pos:column="21">meow<pos:position pos:line="110" pos:column="25"/></name></decl>;<pos:position pos:line="110" pos:column="26"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="111" pos:column="15">int<pos:position pos:line="111" pos:column="18"/></name></type> <name pos:line="111" pos:column="19">i<pos:position pos:line="111" pos:column="20"/></name></decl>;<pos:position pos:line="111" pos:column="21"/></decl_stmt>
              <for pos:line="112" pos:column="15">for<control pos:line="112" pos:column="18">(<init><expr><name pos:line="112" pos:column="19">meow<pos:position pos:line="112" pos:column="23"/></name><operator pos:line="112" pos:column="23">=<pos:position pos:line="112" pos:column="24"/></operator><name pos:line="112" pos:column="24">line_start<pos:position pos:line="112" pos:column="34"/></name></expr><operator pos:line="112" pos:column="34">,<pos:position pos:line="112" pos:column="35"/></operator> <expr><name pos:line="112" pos:column="36">i<pos:position pos:line="112" pos:column="37"/></name><operator pos:line="112" pos:column="37">=<pos:position pos:line="112" pos:column="38"/></operator><literal type="number" pos:line="112" pos:column="38">0<pos:position pos:line="112" pos:column="39"/></literal></expr>;<pos:position pos:line="112" pos:column="40"/></init> <condition><expr><name pos:line="112" pos:column="41">meow<pos:position pos:line="112" pos:column="45"/></name><operator pos:line="112" pos:column="45">&lt;<pos:position pos:line="112" pos:column="49"/></operator><name pos:line="112" pos:column="46">ptr<pos:position pos:line="112" pos:column="49"/></name></expr>;<pos:position pos:line="112" pos:column="50"/></condition> <incr><expr><name pos:line="112" pos:column="51">meow<pos:position pos:line="112" pos:column="55"/></name><operator pos:line="112" pos:column="55">++<pos:position pos:line="112" pos:column="57"/></operator></expr><operator pos:line="112" pos:column="57">,<pos:position pos:line="112" pos:column="58"/></operator> <expr><name pos:line="112" pos:column="59">i<pos:position pos:line="112" pos:column="60"/></name><operator pos:line="112" pos:column="60">++<pos:position pos:line="112" pos:column="62"/></operator></expr></incr>)<pos:position pos:line="112" pos:column="63"/></control>
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="113" pos:column="17">buf<pos:position pos:line="113" pos:column="20"/></name><index pos:line="113" pos:column="20">[<expr><name pos:line="113" pos:column="21">i<pos:position pos:line="113" pos:column="22"/></name></expr>]<pos:position pos:line="113" pos:column="23"/></index></name> <operator pos:line="113" pos:column="24">=<pos:position pos:line="113" pos:column="25"/></operator> <operator pos:line="113" pos:column="26">*<pos:position pos:line="113" pos:column="27"/></operator><name pos:line="113" pos:column="27">meow<pos:position pos:line="113" pos:column="31"/></name></expr>;<pos:position pos:line="113" pos:column="32"/></expr_stmt></block></for>
              <expr_stmt><expr><name><name pos:line="114" pos:column="15">meow<pos:position pos:line="114" pos:column="19"/></name><index pos:line="114" pos:column="19">[<expr><name pos:line="114" pos:column="20">i<pos:position pos:line="114" pos:column="21"/></name></expr>]<pos:position pos:line="114" pos:column="22"/></index></name><operator pos:line="114" pos:column="22">=<pos:position pos:line="114" pos:column="23"/></operator><literal type="number" pos:line="114" pos:column="23">0<pos:position pos:line="114" pos:column="24"/></literal></expr>;<pos:position pos:line="114" pos:column="25"/></expr_stmt> <comment type="block" pos:line="114" pos:column="26">/* zero terminate */</comment>
              <expr_stmt><expr><name pos:line="115" pos:column="15">keepon<pos:position pos:line="115" pos:column="21"/></name><operator pos:line="115" pos:column="21">=<pos:position pos:line="115" pos:column="22"/></operator><name pos:line="115" pos:column="22">FALSE<pos:position pos:line="115" pos:column="27"/></name></expr>;<pos:position pos:line="115" pos:column="28"/></expr_stmt>
              <break pos:line="116" pos:column="15">break;<pos:position pos:line="116" pos:column="21"/></break>
            }<pos:position pos:line="117" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="118" pos:column="13">perline<pos:position pos:line="118" pos:column="20"/></name><operator pos:line="118" pos:column="20">=<pos:position pos:line="118" pos:column="21"/></operator><literal type="number" pos:line="118" pos:column="21">0<pos:position pos:line="118" pos:column="22"/></literal></expr>;<pos:position pos:line="118" pos:column="23"/></expr_stmt> <comment type="block" pos:line="118" pos:column="24">/* line starts over here */</comment>
            <expr_stmt><expr><name pos:line="119" pos:column="13">line_start<pos:position pos:line="119" pos:column="23"/></name> <operator pos:line="119" pos:column="24">=<pos:position pos:line="119" pos:column="25"/></operator> <name pos:line="119" pos:column="26">ptr<pos:position pos:line="119" pos:column="29"/></name><operator pos:line="119" pos:column="29">+<pos:position pos:line="119" pos:column="30"/></operator><literal type="number" pos:line="119" pos:column="30">1<pos:position pos:line="119" pos:column="31"/></literal></expr>;<pos:position pos:line="119" pos:column="32"/></expr_stmt>
          }<pos:position pos:line="120" pos:column="12"/></block></then></if>
        }<pos:position pos:line="121" pos:column="10"/></block></for>
      }<pos:position pos:line="122" pos:column="8"/></block></else></if>
      <break pos:line="123" pos:column="7">break;<pos:position pos:line="123" pos:column="13"/></break>
    }<pos:position pos:line="124" pos:column="6"/></block></switch> <comment type="block" pos:line="124" pos:column="7">/* switch */</comment>
  }<pos:position pos:line="125" pos:column="4"/></block></while> <comment type="block" pos:line="125" pos:column="5">/* while there's buffer left and loop is requested */</comment>

  <if pos:line="127" pos:column="3">if<condition pos:line="127" pos:column="5">(<expr><operator pos:line="127" pos:column="6">!<pos:position pos:line="127" pos:column="7"/></operator><name pos:line="127" pos:column="7">error<pos:position pos:line="127" pos:column="12"/></name></expr>)<pos:position pos:line="127" pos:column="13"/></condition><then pos:line="127" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name pos:line="128" pos:column="5">code<pos:position pos:line="128" pos:column="9"/></name> <operator pos:line="128" pos:column="10">=<pos:position pos:line="128" pos:column="11"/></operator> <call><name pos:line="128" pos:column="12">atoi<pos:position pos:line="128" pos:column="16"/></name><argument_list pos:line="128" pos:column="16">(<argument><expr><name pos:line="128" pos:column="17">buf<pos:position pos:line="128" pos:column="20"/></name></expr></argument>)<pos:position pos:line="128" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="22"/></expr_stmt></block></then></if>

<cpp:if pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">if<pos:position pos:line="130" pos:column="4"/></cpp:directive> <expr><name pos:line="130" pos:column="5">KRB4<pos:position pos:line="130" pos:column="9"/></name></expr></cpp:if>
  <comment type="block" pos:line="131" pos:column="3">/* handle the security-oriented responses 6xx ***/</comment>
  <comment type="block" pos:line="132" pos:column="3">/* FIXME: some errorchecking perhaps... ***/</comment>
  <switch pos:line="133" pos:column="3">switch<condition pos:line="133" pos:column="9">(<expr><name pos:line="133" pos:column="10">code<pos:position pos:line="133" pos:column="14"/></name></expr>)<pos:position pos:line="133" pos:column="15"/></condition> <block pos:line="133" pos:column="16">{
  <case pos:line="134" pos:column="3">case <expr><literal type="number" pos:line="134" pos:column="8">631<pos:position pos:line="134" pos:column="11"/></literal></expr>:<pos:position pos:line="134" pos:column="12"/></case>
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">Curl_sec_read_msg<pos:position pos:line="135" pos:column="22"/></name><argument_list pos:line="135" pos:column="22">(<argument><expr><name pos:line="135" pos:column="23">conn<pos:position pos:line="135" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="29">buf<pos:position pos:line="135" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="34">prot_safe<pos:position pos:line="135" pos:column="43"/></name></expr></argument>)<pos:position pos:line="135" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="45"/></expr_stmt>
    <break pos:line="136" pos:column="5">break;<pos:position pos:line="136" pos:column="11"/></break>
  <case pos:line="137" pos:column="3">case <expr><literal type="number" pos:line="137" pos:column="8">632<pos:position pos:line="137" pos:column="11"/></literal></expr>:<pos:position pos:line="137" pos:column="12"/></case>
    <expr_stmt><expr><call><name pos:line="138" pos:column="5">Curl_sec_read_msg<pos:position pos:line="138" pos:column="22"/></name><argument_list pos:line="138" pos:column="22">(<argument><expr><name pos:line="138" pos:column="23">conn<pos:position pos:line="138" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="29">buf<pos:position pos:line="138" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="34">prot_private<pos:position pos:line="138" pos:column="46"/></name></expr></argument>)<pos:position pos:line="138" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="48"/></expr_stmt>
    <break pos:line="139" pos:column="5">break;<pos:position pos:line="139" pos:column="11"/></break>
  <case pos:line="140" pos:column="3">case <expr><literal type="number" pos:line="140" pos:column="8">633<pos:position pos:line="140" pos:column="11"/></literal></expr>:<pos:position pos:line="140" pos:column="12"/></case>
    <expr_stmt><expr><call><name pos:line="141" pos:column="5">Curl_sec_read_msg<pos:position pos:line="141" pos:column="22"/></name><argument_list pos:line="141" pos:column="22">(<argument><expr><name pos:line="141" pos:column="23">conn<pos:position pos:line="141" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="29">buf<pos:position pos:line="141" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="34">prot_confidential<pos:position pos:line="141" pos:column="51"/></name></expr></argument>)<pos:position pos:line="141" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="53"/></expr_stmt>
    <break pos:line="142" pos:column="5">break;<pos:position pos:line="142" pos:column="11"/></break>
  <default pos:line="143" pos:column="3">default:<pos:position pos:line="143" pos:column="11"/></default>
    <comment type="block" pos:line="144" pos:column="5">/* normal ftp stuff we pass through! */</comment>
    <break pos:line="145" pos:column="5">break;<pos:position pos:line="145" pos:column="11"/></break>
  }<pos:position pos:line="146" pos:column="4"/></block></switch>
<cpp:endif pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">endif<pos:position pos:line="147" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="149" pos:column="3">if<condition pos:line="149" pos:column="5">(<expr><name pos:line="149" pos:column="6">error<pos:position pos:line="149" pos:column="11"/></name></expr>)<pos:position pos:line="149" pos:column="12"/></condition><then pos:line="149" pos:column="12">
    <block type="pseudo"><return pos:line="150" pos:column="5">return <expr><operator pos:line="150" pos:column="12">-<pos:position pos:line="150" pos:column="13"/></operator><name pos:line="150" pos:column="13">error<pos:position pos:line="150" pos:column="18"/></name></expr>;<pos:position pos:line="150" pos:column="19"/></return></block></then></if>

  <if pos:line="152" pos:column="3">if<condition pos:line="152" pos:column="5">(<expr><name pos:line="152" pos:column="6">ftpcode<pos:position pos:line="152" pos:column="13"/></name></expr>)<pos:position pos:line="152" pos:column="14"/></condition><then pos:line="152" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="153" pos:column="5">*<pos:position pos:line="153" pos:column="6"/></operator><name pos:line="153" pos:column="6">ftpcode<pos:position pos:line="153" pos:column="13"/></name><operator pos:line="153" pos:column="13">=<pos:position pos:line="153" pos:column="14"/></operator><name pos:line="153" pos:column="14">code<pos:position pos:line="153" pos:column="18"/></name></expr>;<pos:position pos:line="153" pos:column="19"/></expr_stmt></block></then></if> <comment type="block" pos:line="153" pos:column="20">/* return the initial number like this */</comment>

  <return pos:line="155" pos:column="3">return <expr><name pos:line="155" pos:column="10">nread<pos:position pos:line="155" pos:column="15"/></name></expr>;<pos:position pos:line="155" pos:column="16"/></return> <comment type="block" pos:line="155" pos:column="17">/* total amount of bytes read */</comment>
}<pos:position pos:line="156" pos:column="2"/></block></function></unit>
