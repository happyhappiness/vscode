<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_530_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">test<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">char<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">URL<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">curl<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">res<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name pos:line="4" pos:column="18">CURLE_OK<pos:position pos:line="4" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">curl_slist<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">slist<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><name pos:line="5" pos:column="30">NULL<pos:position pos:line="5" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">WriteThis<pos:position pos:line="6" pos:column="19"/></name></name></type> <name pos:line="6" pos:column="20">pooh<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="7" pos:column="3">pooh<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">.<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">counter<pos:position pos:line="7" pos:column="15"/></name></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>;<pos:position pos:line="7" pos:column="20"/></expr_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><call><name pos:line="9" pos:column="6">curl_global_init<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">CURL_GLOBAL_ALL<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call> <operator pos:line="9" pos:column="40">!=<pos:position pos:line="9" pos:column="42"/></operator> <name pos:line="9" pos:column="43">CURLE_OK<pos:position pos:line="9" pos:column="51"/></name></expr>)<pos:position pos:line="9" pos:column="52"/></condition><then pos:line="9" pos:column="52"> <block pos:line="9" pos:column="53">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">fprintf<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><name pos:line="10" pos:column="13">stderr<pos:position pos:line="10" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="21">"curl_global_init() failed\n"<pos:position pos:line="10" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="52"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="11" pos:column="30"/></name></expr>;<pos:position pos:line="11" pos:column="31"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="14" pos:column="3">curl<pos:position pos:line="14" pos:column="7"/></name> <operator pos:line="14" pos:column="8">=<pos:position pos:line="14" pos:column="9"/></operator> <call><name pos:line="14" pos:column="10">curl_easy_init<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">()<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">!<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">curl<pos:position pos:line="15" pos:column="11"/></name></expr>)<pos:position pos:line="15" pos:column="12"/></condition><then pos:line="15" pos:column="12"> <block pos:line="15" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">fprintf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">stderr<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="21">"curl_easy_init() failed\n"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">curl_global_cleanup<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">()<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">slist<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <call><name pos:line="21" pos:column="11">curl_slist_append<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">slist<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="36">"Transfer-Encoding: chunked"<pos:position pos:line="21" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">slist<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">==<pos:position pos:line="22" pos:column="14"/></operator> <name pos:line="22" pos:column="15">NULL<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20"> <block pos:line="22" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">fprintf<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">stderr<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="21">"curl_slist_append() failed\n"<pos:position pos:line="23" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">curl_easy_cleanup<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">curl<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">curl_global_cleanup<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">()<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><name pos:line="26" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="26" pos:column="30"/></name></expr>;<pos:position pos:line="26" pos:column="31"/></return>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="29" pos:column="3">/* First set the URL that is about to receive our POST. */</comment>
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">test_setopt<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">curl<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="21">CURLOPT_URL<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="34">URL<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>

  <comment type="block" pos:line="32" pos:column="3">/* Now specify we want to POST data */</comment>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">test_setopt<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">curl<pos:position pos:line="33" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="21">CURLOPT_POST<pos:position pos:line="33" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="35">1L<pos:position pos:line="33" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt>

<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef<pos:position pos:line="35" pos:column="7"/></cpp:directive> <name pos:line="35" pos:column="8">CURL_DOES_CONVERSIONS<pos:position pos:line="35" pos:column="29"/></name></cpp:ifdef>
  <comment type="block" pos:line="36" pos:column="3">/* Convert the POST data to ASCII */</comment>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">test_setopt<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">curl<pos:position pos:line="37" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="21">CURLOPT_TRANSFERTEXT<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="43">1L<pos:position pos:line="37" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="40" pos:column="3">/* we want to use our own read function */</comment>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">test_setopt<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">curl<pos:position pos:line="41" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="21">CURLOPT_READFUNCTION<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="43">read_callback<pos:position pos:line="41" pos:column="56"/></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt>

  <comment type="block" pos:line="43" pos:column="3">/* pointer to pass to our read function */</comment>
  <expr_stmt><expr><call><name pos:line="44" pos:column="3">test_setopt<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><name pos:line="44" pos:column="15">curl<pos:position pos:line="44" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="21">CURLOPT_READDATA<pos:position pos:line="44" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="39">&amp;<pos:position pos:line="44" pos:column="44"/></operator><name pos:line="44" pos:column="40">pooh<pos:position pos:line="44" pos:column="44"/></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>

  <comment type="block" pos:line="46" pos:column="3">/* get verbose debug output please */</comment>
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">test_setopt<pos:position pos:line="47" pos:column="14"/></name><argument_list pos:line="47" pos:column="14">(<argument><expr><name pos:line="47" pos:column="15">curl<pos:position pos:line="47" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="21">CURLOPT_VERBOSE<pos:position pos:line="47" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="38">1L<pos:position pos:line="47" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt>

  <comment type="block" pos:line="49" pos:column="3">/* include headers in the output */</comment>
  <expr_stmt><expr><call><name pos:line="50" pos:column="3">test_setopt<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">curl<pos:position pos:line="50" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="21">CURLOPT_HEADER<pos:position pos:line="50" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="37">1L<pos:position pos:line="50" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="41"/></expr_stmt>

  <comment type="block" pos:line="52" pos:column="3">/* enforce chunked transfer by setting the header */</comment>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">test_setopt<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">curl<pos:position pos:line="53" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="21">CURLOPT_HTTPHEADER<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="41">slist<pos:position pos:line="53" pos:column="46"/></name></expr></argument>)<pos:position pos:line="53" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="48"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="55" pos:column="3">test_setopt<pos:position pos:line="55" pos:column="14"/></name><argument_list pos:line="55" pos:column="14">(<argument><expr><name pos:line="55" pos:column="15">curl<pos:position pos:line="55" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="21">CURLOPT_HTTPAUTH<pos:position pos:line="55" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="39">(<pos:position pos:line="55" pos:column="40"/></operator><name pos:line="55" pos:column="40">long<pos:position pos:line="55" pos:column="44"/></name><operator pos:line="55" pos:column="44">)<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="45">CURLAUTH_DIGEST<pos:position pos:line="55" pos:column="60"/></name></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="56" pos:column="3">test_setopt<pos:position pos:line="56" pos:column="14"/></name><argument_list pos:line="56" pos:column="14">(<argument><expr><name pos:line="56" pos:column="15">curl<pos:position pos:line="56" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="21">CURLOPT_USERPWD<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="38">"foo:bar"<pos:position pos:line="56" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="49"/></expr_stmt>

  <comment type="block" pos:line="58" pos:column="3">/* we want to use our own progress function */</comment>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">test_setopt<pos:position pos:line="59" pos:column="14"/></name><argument_list pos:line="59" pos:column="14">(<argument><expr><name pos:line="59" pos:column="15">curl<pos:position pos:line="59" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="21">CURLOPT_NOPROGRESS<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="41">0L<pos:position pos:line="59" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">test_setopt<pos:position pos:line="60" pos:column="14"/></name><argument_list pos:line="60" pos:column="14">(<argument><expr><name pos:line="60" pos:column="15">curl<pos:position pos:line="60" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="21">CURLOPT_PROGRESSFUNCTION<pos:position pos:line="60" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="47">progress_callback<pos:position pos:line="60" pos:column="64"/></name></expr></argument>)<pos:position pos:line="60" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="66"/></expr_stmt>

  <comment type="block" pos:line="62" pos:column="3">/* Perform the request, res will get the return code */</comment>
  <expr_stmt><expr><name pos:line="63" pos:column="3">res<pos:position pos:line="63" pos:column="6"/></name> <operator pos:line="63" pos:column="7">=<pos:position pos:line="63" pos:column="8"/></operator> <call><name pos:line="63" pos:column="9">curl_easy_perform<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><name pos:line="63" pos:column="27">curl<pos:position pos:line="63" pos:column="31"/></name></expr></argument>)<pos:position pos:line="63" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="33"/></expr_stmt>

<label><name pos:line="65" pos:column="1">test_cleanup<pos:position pos:line="65" pos:column="13"/></name>:<pos:position pos:line="65" pos:column="14"/></label>

  <comment type="block" pos:line="67" pos:column="3">/* clean up the headers list */</comment>
  <if pos:line="68" pos:column="3">if<condition pos:line="68" pos:column="5">(<expr><name pos:line="68" pos:column="6">slist<pos:position pos:line="68" pos:column="11"/></name></expr>)<pos:position pos:line="68" pos:column="12"/></condition><then pos:line="68" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="5">curl_slist_free_all<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">slist<pos:position pos:line="69" pos:column="30"/></name></expr></argument>)<pos:position pos:line="69" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="32"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="71" pos:column="3">/* always cleanup */</comment>
  <expr_stmt><expr><call><name pos:line="72" pos:column="3">curl_easy_cleanup<pos:position pos:line="72" pos:column="20"/></name><argument_list pos:line="72" pos:column="20">(<argument><expr><name pos:line="72" pos:column="21">curl<pos:position pos:line="72" pos:column="25"/></name></expr></argument>)<pos:position pos:line="72" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="73" pos:column="3">curl_global_cleanup<pos:position pos:line="73" pos:column="22"/></name><argument_list pos:line="73" pos:column="22">()<pos:position pos:line="73" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="25"/></expr_stmt>

  <return pos:line="75" pos:column="3">return <expr><name pos:line="75" pos:column="10">res<pos:position pos:line="75" pos:column="13"/></name></expr>;<pos:position pos:line="75" pos:column="14"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
