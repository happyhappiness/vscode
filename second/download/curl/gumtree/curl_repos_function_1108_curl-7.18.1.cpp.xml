<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1108_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">curl_easy_pause<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">CURL<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">curl<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">action<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">SessionHandle<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">data<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><operator pos:line="3" pos:column="32">(<pos:position pos:line="3" pos:column="33"/></operator>struct <name pos:line="3" pos:column="40">SessionHandle<pos:position pos:line="3" pos:column="53"/></name> <operator pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></operator><operator pos:line="3" pos:column="55">)<pos:position pos:line="3" pos:column="56"/></operator><name pos:line="3" pos:column="56">curl<pos:position pos:line="3" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="61"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SingleRequest<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">k<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><operator pos:line="4" pos:column="29">&amp;<pos:position pos:line="4" pos:column="34"/></operator><name><name pos:line="4" pos:column="30">data<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">-&gt;<pos:position pos:line="4" pos:column="39"/></operator><name pos:line="4" pos:column="36">req<pos:position pos:line="4" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">result<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">CURLE_OK<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* first switch off both pause bits */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">newstate<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><name><name pos:line="8" pos:column="18">k<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">keepon<pos:position pos:line="8" pos:column="27"/></name></name> <operator pos:line="8" pos:column="28">&amp;<pos:position pos:line="8" pos:column="33"/></operator><operator pos:line="8" pos:column="29">~<pos:position pos:line="8" pos:column="30"/></operator> <operator pos:line="8" pos:column="31">(<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="32">KEEP_READ_PAUSE<pos:position pos:line="8" pos:column="47"/></name><operator pos:line="8" pos:column="47">|<pos:position pos:line="8" pos:column="48"/></operator> <name pos:line="8" pos:column="49">KEEP_WRITE_PAUSE<pos:position pos:line="8" pos:column="65"/></name><operator pos:line="8" pos:column="65">)<pos:position pos:line="8" pos:column="66"/></operator></expr></init></decl>;<pos:position pos:line="8" pos:column="67"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* set the new desired pause bits */</comment>
  <expr_stmt><expr><name pos:line="11" pos:column="3">newstate<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">|=<pos:position pos:line="11" pos:column="14"/></operator> <operator pos:line="11" pos:column="15">(<pos:position pos:line="11" pos:column="16"/></operator><ternary><condition><expr><operator pos:line="11" pos:column="16">(<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">action<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">&amp;<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="26">CURLPAUSE_RECV<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">)<pos:position pos:line="11" pos:column="41"/></operator></expr>?<pos:position pos:line="11" pos:column="42"/></condition><then><expr><name pos:line="11" pos:column="42">KEEP_READ_PAUSE<pos:position pos:line="11" pos:column="57"/></name></expr></then><else pos:line="11" pos:column="57">:<expr><literal type="number" pos:line="11" pos:column="58">0<pos:position pos:line="11" pos:column="59"/></literal></expr></else></ternary><operator pos:line="11" pos:column="59">)<pos:position pos:line="11" pos:column="60"/></operator> <operator pos:line="11" pos:column="61">|<pos:position pos:line="11" pos:column="62"/></operator>
    <operator pos:line="12" pos:column="5">(<pos:position pos:line="12" pos:column="6"/></operator><ternary><condition><expr><operator pos:line="12" pos:column="6">(<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">action<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">&amp;<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="16">CURLPAUSE_SEND<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">)<pos:position pos:line="12" pos:column="31"/></operator></expr>?<pos:position pos:line="12" pos:column="32"/></condition><then><expr><name pos:line="12" pos:column="32">KEEP_WRITE_PAUSE<pos:position pos:line="12" pos:column="48"/></name></expr></then><else pos:line="12" pos:column="48">:<expr><literal type="number" pos:line="12" pos:column="49">0<pos:position pos:line="12" pos:column="50"/></literal></expr></else></ternary><operator pos:line="12" pos:column="50">)<pos:position pos:line="12" pos:column="51"/></operator></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* put it back in the keepon */</comment>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">k<pos:position pos:line="15" pos:column="4"/></name><operator pos:line="15" pos:column="4">-&gt;<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="6">keepon<pos:position pos:line="15" pos:column="12"/></name></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">newstate<pos:position pos:line="15" pos:column="23"/></name></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><operator pos:line="17" pos:column="7">(<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">newstate<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">&amp;<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="19">KEEP_READ_PAUSE<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">)<pos:position pos:line="17" pos:column="35"/></operator> <operator pos:line="17" pos:column="36">&amp;&amp;<pos:position pos:line="17" pos:column="46"/></operator> <name><name pos:line="17" pos:column="39">data<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">-&gt;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="45">state<pos:position pos:line="17" pos:column="50"/></name><operator pos:line="17" pos:column="50">.<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="51">tempwrite<pos:position pos:line="17" pos:column="60"/></name></name></expr>)<pos:position pos:line="17" pos:column="61"/></condition><then pos:line="17" pos:column="61"> <block pos:line="17" pos:column="62">{
    <comment type="block" pos:line="18" pos:column="5">/* we have a buffer for writing that we now seem to be able to deliver since
       the receive pausing is lifted! */</comment>

    <comment type="block" pos:line="21" pos:column="5">/* get the pointer, type and length in local copies since the function may
       return PAUSE again and then we'll get a new copy allocted and stored in
       the tempwrite variables */</comment>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">char<pos:position pos:line="24" pos:column="9"/></name> <modifier pos:line="24" pos:column="10">*<pos:position pos:line="24" pos:column="11"/></modifier></type><name pos:line="24" pos:column="11">tempwrite<pos:position pos:line="24" pos:column="20"/></name> <init pos:line="24" pos:column="21">= <expr><name><name pos:line="24" pos:column="23">data<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">-&gt;<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="29">state<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">.<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="35">tempwrite<pos:position pos:line="24" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="24" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">size_t<pos:position pos:line="25" pos:column="11"/></name></type> <name pos:line="25" pos:column="12">tempsize<pos:position pos:line="25" pos:column="20"/></name> <init pos:line="25" pos:column="21">= <expr><name><name pos:line="25" pos:column="23">data<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">-&gt;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="29">state<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">.<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">tempwritesize<pos:position pos:line="25" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="25" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">int<pos:position pos:line="26" pos:column="8"/></name></type> <name pos:line="26" pos:column="9">temptype<pos:position pos:line="26" pos:column="17"/></name> <init pos:line="26" pos:column="18">= <expr><name><name pos:line="26" pos:column="20">data<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">-&gt;<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="26">state<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">.<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="32">tempwritetype<pos:position pos:line="26" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="26" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">size_t<pos:position pos:line="27" pos:column="11"/></name></type> <name pos:line="27" pos:column="12">chunklen<pos:position pos:line="27" pos:column="20"/></name></decl>;<pos:position pos:line="27" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* clear tempwrite here just to make sure it gets cleared if there's no
       further use of it, and make sure we don't clear it after the function
       invoke as it may have been set to a new value by then */</comment>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">data<pos:position pos:line="32" pos:column="9"/></name><operator pos:line="32" pos:column="9">-&gt;<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="11">state<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">.<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">tempwrite<pos:position pos:line="32" pos:column="26"/></name></name> <operator pos:line="32" pos:column="27">=<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="29">NULL<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* since the write callback API is define to never exceed
       CURL_MAX_WRITE_SIZE bytes in a single call, and since we may in fact
       have more data than that in our buffer here, we must loop sending the
       data in multiple calls until there's no data left or we get another
       pause returned.

       A tricky part is that the function we call will "buffer" the data
       itself when it pauses on a particular buffer, so we may need to do some
       extra trickery if we get a pause return here.
    */</comment>
    <do pos:line="44" pos:column="5">do <block pos:line="44" pos:column="8">{
      <expr_stmt><expr><name pos:line="45" pos:column="7">chunklen<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <ternary><condition><expr><operator pos:line="45" pos:column="18">(<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">tempsize<pos:position pos:line="45" pos:column="27"/></name> <operator pos:line="45" pos:column="28">&gt;<pos:position pos:line="45" pos:column="32"/></operator> <name pos:line="45" pos:column="30">CURL_MAX_WRITE_SIZE<pos:position pos:line="45" pos:column="49"/></name><operator pos:line="45" pos:column="49">)<pos:position pos:line="45" pos:column="50"/></operator></expr>?<pos:position pos:line="45" pos:column="51"/></condition><then><expr><name pos:line="45" pos:column="51">CURL_MAX_WRITE_SIZE<pos:position pos:line="45" pos:column="70"/></name></expr></then><else pos:line="45" pos:column="70">:<expr><name pos:line="45" pos:column="71">tempsize<pos:position pos:line="45" pos:column="79"/></name></expr></else></ternary></expr>;<pos:position pos:line="45" pos:column="80"/></expr_stmt>

      <expr_stmt><expr><name pos:line="47" pos:column="7">result<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator> <call><name pos:line="47" pos:column="16">Curl_client_write<pos:position pos:line="47" pos:column="33"/></name><argument_list pos:line="47" pos:column="33">(<argument><expr><name><name pos:line="47" pos:column="34">data<pos:position pos:line="47" pos:column="38"/></name><operator pos:line="47" pos:column="38">-&gt;<pos:position pos:line="47" pos:column="43"/></operator><name pos:line="47" pos:column="40">state<pos:position pos:line="47" pos:column="45"/></name><operator pos:line="47" pos:column="45">.<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="46">current_conn<pos:position pos:line="47" pos:column="58"/></name></name></expr></argument>,
                                 <argument><expr><name pos:line="48" pos:column="34">temptype<pos:position pos:line="48" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="44">tempwrite<pos:position pos:line="48" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="55">chunklen<pos:position pos:line="48" pos:column="63"/></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt>
      <if pos:line="49" pos:column="7">if<condition pos:line="49" pos:column="9">(<expr><operator pos:line="49" pos:column="10">!<pos:position pos:line="49" pos:column="11"/></operator><name pos:line="49" pos:column="11">result<pos:position pos:line="49" pos:column="17"/></name></expr>)<pos:position pos:line="49" pos:column="18"/></condition><then pos:line="49" pos:column="18">
        <comment type="block" pos:line="50" pos:column="9">/* failures abort the loop at once */</comment>
        <block type="pseudo"><break pos:line="51" pos:column="9">break;<pos:position pos:line="51" pos:column="15"/></break></block></then></if>

      <if pos:line="53" pos:column="7">if<condition pos:line="53" pos:column="9">(<expr><name><name pos:line="53" pos:column="10">data<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">-&gt;<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="16">state<pos:position pos:line="53" pos:column="21"/></name><operator pos:line="53" pos:column="21">.<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="22">tempwrite<pos:position pos:line="53" pos:column="31"/></name></name> <operator pos:line="53" pos:column="32">&amp;&amp;<pos:position pos:line="53" pos:column="42"/></operator> <operator pos:line="53" pos:column="35">(<pos:position pos:line="53" pos:column="36"/></operator><name pos:line="53" pos:column="36">tempsize<pos:position pos:line="53" pos:column="44"/></name> <operator pos:line="53" pos:column="45">-<pos:position pos:line="53" pos:column="46"/></operator> <name pos:line="53" pos:column="47">chunklen<pos:position pos:line="53" pos:column="55"/></name><operator pos:line="53" pos:column="55">)<pos:position pos:line="53" pos:column="56"/></operator></expr>)<pos:position pos:line="53" pos:column="57"/></condition><then pos:line="53" pos:column="57"> <block pos:line="53" pos:column="58">{
        <comment type="block" pos:line="54" pos:column="9">/* Ouch, the reading is again paused and the block we send is now
           "cached". If this is the final chunk we can leave it like this, but
           if we have more chunks that is cached after this, we need to free
           the newly cached one and put back a version that is truly the entire
           contents that is saved for later
        */</comment>
        <decl_stmt><decl><type><name pos:line="60" pos:column="9">char<pos:position pos:line="60" pos:column="13"/></name> <modifier pos:line="60" pos:column="14">*<pos:position pos:line="60" pos:column="15"/></modifier></type><name pos:line="60" pos:column="15">newptr<pos:position pos:line="60" pos:column="21"/></name></decl>;<pos:position pos:line="60" pos:column="22"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="62" pos:column="9">free<pos:position pos:line="62" pos:column="13"/></name><argument_list pos:line="62" pos:column="13">(<argument><expr><name><name pos:line="62" pos:column="14">data<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">-&gt;<pos:position pos:line="62" pos:column="23"/></operator><name pos:line="62" pos:column="20">state<pos:position pos:line="62" pos:column="25"/></name><operator pos:line="62" pos:column="25">.<pos:position pos:line="62" pos:column="26"/></operator><name pos:line="62" pos:column="26">tempwrite<pos:position pos:line="62" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt> <comment type="block" pos:line="62" pos:column="38">/* free the one just cached as it isn't
                                        enough */</comment>

        <comment type="block" pos:line="65" pos:column="9">/* note that tempsize is still the size as before the callback was
           used, and thus the whole piece of data to keep */</comment>
        <expr_stmt><expr><name pos:line="67" pos:column="9">newptr<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <call><name pos:line="67" pos:column="18">malloc<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name pos:line="67" pos:column="25">tempsize<pos:position pos:line="67" pos:column="33"/></name></expr></argument>)<pos:position pos:line="67" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="35"/></expr_stmt>
        <if pos:line="68" pos:column="9">if<condition pos:line="68" pos:column="11">(<expr><operator pos:line="68" pos:column="12">!<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="13">newptr<pos:position pos:line="68" pos:column="19"/></name></expr>)<pos:position pos:line="68" pos:column="20"/></condition><then pos:line="68" pos:column="20"> <block pos:line="68" pos:column="21">{
          <expr_stmt><expr><name pos:line="69" pos:column="11">result<pos:position pos:line="69" pos:column="17"/></name> <operator pos:line="69" pos:column="18">=<pos:position pos:line="69" pos:column="19"/></operator> <name pos:line="69" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="69" pos:column="39"/></name></expr>;<pos:position pos:line="69" pos:column="40"/></expr_stmt>
          <comment type="block" pos:line="70" pos:column="11">/* tempwrite will be freed further down */</comment>
          <break pos:line="71" pos:column="11">break;<pos:position pos:line="71" pos:column="17"/></break>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="73" pos:column="9">data<pos:position pos:line="73" pos:column="13"/></name><operator pos:line="73" pos:column="13">-&gt;<pos:position pos:line="73" pos:column="18"/></operator><name pos:line="73" pos:column="15">state<pos:position pos:line="73" pos:column="20"/></name><operator pos:line="73" pos:column="20">.<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="21">tempwrite<pos:position pos:line="73" pos:column="30"/></name></name> <operator pos:line="73" pos:column="31">=<pos:position pos:line="73" pos:column="32"/></operator> <name pos:line="73" pos:column="33">newptr<pos:position pos:line="73" pos:column="39"/></name></expr>;<pos:position pos:line="73" pos:column="40"/></expr_stmt> <comment type="block" pos:line="73" pos:column="41">/* store new pointer */</comment>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">memcpy<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><name pos:line="74" pos:column="16">newptr<pos:position pos:line="74" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="24">tempwrite<pos:position pos:line="74" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="35">tempsize<pos:position pos:line="74" pos:column="43"/></name></expr></argument>)<pos:position pos:line="74" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="75" pos:column="9">data<pos:position pos:line="75" pos:column="13"/></name><operator pos:line="75" pos:column="13">-&gt;<pos:position pos:line="75" pos:column="18"/></operator><name pos:line="75" pos:column="15">state<pos:position pos:line="75" pos:column="20"/></name><operator pos:line="75" pos:column="20">.<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="21">tempwritesize<pos:position pos:line="75" pos:column="34"/></name></name> <operator pos:line="75" pos:column="35">=<pos:position pos:line="75" pos:column="36"/></operator> <name pos:line="75" pos:column="37">tempsize<pos:position pos:line="75" pos:column="45"/></name></expr>;<pos:position pos:line="75" pos:column="46"/></expr_stmt> <comment type="block" pos:line="75" pos:column="47">/* store new size */</comment>
        <comment type="block" pos:line="76" pos:column="9">/* tempwrite will be freed further down */</comment>
        <break pos:line="77" pos:column="9">break;<pos:position pos:line="77" pos:column="15"/></break> <comment type="block" pos:line="77" pos:column="16">/* go back to pausing until further notice */</comment>
      }<pos:position pos:line="78" pos:column="8"/></block></then>
      <else pos:line="79" pos:column="7">else <block pos:line="79" pos:column="12">{
        <expr_stmt><expr><name pos:line="80" pos:column="9">tempsize<pos:position pos:line="80" pos:column="17"/></name> <operator pos:line="80" pos:column="18">-=<pos:position pos:line="80" pos:column="20"/></operator> <name pos:line="80" pos:column="21">chunklen<pos:position pos:line="80" pos:column="29"/></name></expr>;<pos:position pos:line="80" pos:column="30"/></expr_stmt>  <comment type="block" pos:line="80" pos:column="32">/* left after the call above */</comment>
        <expr_stmt><expr><name pos:line="81" pos:column="9">tempwrite<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">+=<pos:position pos:line="81" pos:column="21"/></operator> <name pos:line="81" pos:column="22">chunklen<pos:position pos:line="81" pos:column="30"/></name></expr>;<pos:position pos:line="81" pos:column="31"/></expr_stmt> <comment type="block" pos:line="81" pos:column="32">/* advance the pointer */</comment>
      }<pos:position pos:line="82" pos:column="8"/></block></else></if>

    }<pos:position pos:line="84" pos:column="6"/></block> while<condition pos:line="84" pos:column="12">(<expr><operator pos:line="84" pos:column="13">(<pos:position pos:line="84" pos:column="14"/></operator><name pos:line="84" pos:column="14">result<pos:position pos:line="84" pos:column="20"/></name> <operator pos:line="84" pos:column="21">==<pos:position pos:line="84" pos:column="23"/></operator> <name pos:line="84" pos:column="24">CURLE_OK<pos:position pos:line="84" pos:column="32"/></name><operator pos:line="84" pos:column="32">)<pos:position pos:line="84" pos:column="33"/></operator> <operator pos:line="84" pos:column="34">&amp;&amp;<pos:position pos:line="84" pos:column="44"/></operator> <name pos:line="84" pos:column="37">tempsize<pos:position pos:line="84" pos:column="45"/></name></expr>)<pos:position pos:line="84" pos:column="46"/></condition>;<pos:position pos:line="84" pos:column="47"/></do>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">free<pos:position pos:line="86" pos:column="9"/></name><argument_list pos:line="86" pos:column="9">(<argument><expr><name pos:line="86" pos:column="10">tempwrite<pos:position pos:line="86" pos:column="19"/></name></expr></argument>)<pos:position pos:line="86" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="21"/></expr_stmt> <comment type="block" pos:line="86" pos:column="22">/* this is unconditionally no longer used */</comment>
  }<pos:position pos:line="87" pos:column="4"/></block></then></if>

  <return pos:line="89" pos:column="3">return <expr><name pos:line="89" pos:column="10">result<pos:position pos:line="89" pos:column="16"/></name></expr>;<pos:position pos:line="89" pos:column="17"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
