"\n"
"       --data-urlencode <data>\n"
"              (HTTP) This posts data, similar to the other --data options with\n"
, stdout);
 fputs(
"              the exception that this performs URL-encoding. (Added in 7.18.0)\n"
"              To be CGI-compliant, the <data> part should begin  with  a  name\n"
"              followed  by a separator and a content specification. The <data>\n"
"              part can be passed to curl using one of the following syntaxes:\n"
"\n"
"              content\n"
"                     This will make curl URL-encode the content and pass  that\n"
"                     on.  Just  be careful so that the content doesn't contain\n"
, stdout);
 fputs(
"                     any = or @ symbols, as that will  then  make  the  syntax\n"
"                     match one of the other cases below!\n"
"\n"
"              =content\n"
"                     This  will make curl URL-encode the content and pass that\n"
"                     on. The preceding = symbol is not included in the data.\n"
"\n"
"              name=content\n"
"                     This will make curl URL-encode the content part and  pass\n"
, stdout);
 fputs(
"                     that  on.  Note that the name part is expected to be URL-\n"
"                     encoded already.\n"
"\n"
"              @filename\n"
"                     This will  make  curl  load  data  from  the  given  file\n"
"                     (including  any  newlines), URL-encode that data and pass\n"
"                     it on in the POST.\n"
"\n"
"              name@filename\n"
"                     This will  make  curl  load  data  from  the  given  file\n"
, stdout);
 fputs(
"                     (including  any  newlines), URL-encode that data and pass\n"
"                     it on in the POST. The  name  part  gets  an  equal  sign\n"
"                     appended, resulting in name=urlencoded-file-content. Note\n"
"                     that the name is expected to be URL-encoded already.\n"
"\n"
"       --digest\n"
"              (HTTP) Enables HTTP Digest authentication. This is a authentica-\n"
"              tion that prevents the password from being sent over the wire in\n"
, stdout);
 fputs(
"              clear text. Use this in combination with  the  normal  -u/--user\n"
"              option to set user name and password. See also --ntlm, --negoti-\n"
"              ate and --anyauth for related options.\n"
"\n"
"              If this option is used several times, the following  occurrences\n"
"              make no difference.\n"
"\n"
"       --disable-eprt\n"
"              (FTP) Tell curl to disable the use of the EPRT and LPRT commands\n"
, stdout);
 fputs(
"              when doing active FTP transfers. Curl will normally always first\n"
"              attempt  to use EPRT, then LPRT before using PORT, but with this\n"
"              option, it will use PORT right away. EPRT and  LPRT  are  exten-\n"
"              sions  to  the  original  FTP  protocol, and may not work on all\n"
"              servers, but they enable more functionality in a better way than\n"
"              the traditional PORT command.\n"
"\n"
, stdout);
 fputs(
"              Since  curl 7.19.0, --eprt can be used to explicitly enable EPRT\n"
"              again and --no-eprt is an alias for --disable-eprt.\n"
"\n"
"              Disabling EPRT only changes the active behavior. If you want  to\n"
"              switch  to  passive  mode  you  need to not use -P/--ftp-port or\n"
"              force it with --ftp-pasv.\n"
"\n"
"       --disable-epsv\n"
"              (FTP) Tell curl to disable the use  of  the  EPSV  command  when\n"
, stdout);
 fputs(
"              doing  passive  FTP  transfers.  Curl will normally always first\n"
"              attempt to use EPSV before PASV, but with this option,  it  will\n"
"              not try using EPSV.\n"
"\n"
"              Since  curl 7.19.0, --epsv can be used to explicitly enable EPRT\n"
"              again and --no-epsv is an alias for --disable-epsv.\n"
"\n"
"              Disabling EPSV only changes the passive behavior. If you want to\n"
"              switch to active mode you need to use -P/--ftp-port.\n"
"\n"
, stdout);
 fputs(
"       -D/--dump-header <file>\n"
"              Write the protocol headers to the specified file.\n"
"\n"
"              This  option  is handy to use when you want to store the headers\n"
"              that a HTTP site sends to you. Cookies from  the  headers  could\n"
"              then   be  read  in  a  second  curl  invocation  by  using  the\n"
"              -b/--cookie option! The -c/--cookie-jar option is however a bet-\n"
"              ter way to store cookies.\n"
"\n"
, stdout);
 fputs(
"              When  used  in FTP, the FTP server response lines are considered\n"
"              being \"headers\" and thus are saved there.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -e/--referer <URL>\n"
"              (HTTP) Sends the \"Referer Page\" information to the HTTP  server.\n"
