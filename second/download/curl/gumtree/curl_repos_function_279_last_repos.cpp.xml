<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_279_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">sslctx_function<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">CURL<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">curl<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">void<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">sslctx<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">void<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">parm<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">X509<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">cert<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><name pos:line="3" pos:column="16">NULL<pos:position pos:line="3" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">BIO<pos:position pos:line="4" pos:column="6"/></name> <modifier pos:line="4" pos:column="7">*<pos:position pos:line="4" pos:column="8"/></modifier></type><name pos:line="4" pos:column="8">bio<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><name pos:line="4" pos:column="14">NULL<pos:position pos:line="4" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">BIO<pos:position pos:line="5" pos:column="6"/></name> <modifier pos:line="5" pos:column="7">*<pos:position pos:line="5" pos:column="8"/></modifier></type><name pos:line="5" pos:column="8">kbio<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">NULL<pos:position pos:line="5" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">RSA<pos:position pos:line="6" pos:column="6"/></name> <modifier pos:line="6" pos:column="7">*<pos:position pos:line="6" pos:column="8"/></modifier></type><name pos:line="6" pos:column="8">rsa<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">ret<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">mypem<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <comment type="block" pos:line="9" pos:column="23">/* www.cacert.org */</comment>
    <expr><literal type="string" pos:line="10" pos:column="5">"-----BEGIN CERTIFICATE-----\n"<pos:position pos:line="10" pos:column="36"/></literal>\
    <literal type="string" pos:line="11" pos:column="5">"MIIHPTCCBSWgAwIBAgIBADANBgkqhkiG9w0BAQQFADB5MRAwDgYDVQQKEwdSb290\n"<pos:position pos:line="11" pos:column="73"/></literal>\
    <literal type="string" pos:line="12" pos:column="5">"IENBMR4wHAYDVQQLExVodHRwOi8vd3d3LmNhY2VydC5vcmcxIjAgBgNVBAMTGUNB\n"<pos:position pos:line="12" pos:column="73"/></literal>\
    <literal type="string" pos:line="13" pos:column="5">"IENlcnQgU2lnbmluZyBBdXRob3JpdHkxITAfBgkqhkiG9w0BCQEWEnN1cHBvcnRA\n"<pos:position pos:line="13" pos:column="73"/></literal>\
    <literal type="string" pos:line="14" pos:column="5">"Y2FjZXJ0Lm9yZzAeFw0wMzAzMzAxMjI5NDlaFw0zMzAzMjkxMjI5NDlaMHkxEDAO\n"<pos:position pos:line="14" pos:column="73"/></literal>\
    <literal type="string" pos:line="15" pos:column="5">"BgNVBAoTB1Jvb3QgQ0ExHjAcBgNVBAsTFWh0dHA6Ly93d3cuY2FjZXJ0Lm9yZzEi\n"<pos:position pos:line="15" pos:column="73"/></literal>\
    <literal type="string" pos:line="16" pos:column="5">"MCAGA1UEAxMZQ0EgQ2VydCBTaWduaW5nIEF1dGhvcml0eTEhMB8GCSqGSIb3DQEJ\n"<pos:position pos:line="16" pos:column="73"/></literal>\
    <literal type="string" pos:line="17" pos:column="5">"ARYSc3VwcG9ydEBjYWNlcnQub3JnMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC\n"<pos:position pos:line="17" pos:column="73"/></literal>\
    <literal type="string" pos:line="18" pos:column="5">"CgKCAgEAziLA4kZ97DYoB1CW8qAzQIxL8TtmPzHlawI229Z89vGIj053NgVBlfkJ\n"<pos:position pos:line="18" pos:column="73"/></literal>\
    <literal type="string" pos:line="19" pos:column="5">"8BLPRoZzYLdufujAWGSuzbCtRRcMY/pnCujW0r8+55jE8Ez64AO7NV1sId6eINm6\n"<pos:position pos:line="19" pos:column="73"/></literal>\
    <literal type="string" pos:line="20" pos:column="5">"zWYyN3L69wj1x81YyY7nDl7qPv4coRQKFWyGhFtkZip6qUtTefWIonvuLwphK42y\n"<pos:position pos:line="20" pos:column="73"/></literal>\
    <literal type="string" pos:line="21" pos:column="5">"fk1WpRPs6tqSnqxEQR5YYGUFZvjARL3LlPdCfgv3ZWiYUQXw8wWRBB0bF4LsyFe7\n"<pos:position pos:line="21" pos:column="73"/></literal>\
    <literal type="string" pos:line="22" pos:column="5">"w2t6iPGwcswlWyCR7BYCEo8y6RcYSNDHBS4CMEK4JZwFaz+qOqfrU0j36NK2B5jc\n"<pos:position pos:line="22" pos:column="73"/></literal>\
    <literal type="string" pos:line="23" pos:column="5">"G8Y0f3/JHIJ6BVgrCFvzOKKrF11myZjXnhCLotLddJr3cQxyYN/Nb5gznZY0dj4k\n"<pos:position pos:line="23" pos:column="73"/></literal>\
    <literal type="string" pos:line="24" pos:column="5">"epKwDpUeb+agRThHqtdB7Uq3EvbXG4OKDy7YCbZZ16oE/9KTfWgu3YtLq1i6L43q\n"<pos:position pos:line="24" pos:column="73"/></literal>\
    <literal type="string" pos:line="25" pos:column="5">"laegw1SJpfvbi1EinbLDvhG+LJGGi5Z4rSDTii8aP8bQUWWHIbEZAWV/RRyH9XzQ\n"<pos:position pos:line="25" pos:column="73"/></literal>\
    <literal type="string" pos:line="26" pos:column="5">"QUxPKZgh/TMfdQwEUfoZd9vUFBzugcMd9Zi3aQaRIt0AUMyBMawSB3s42mhb5ivU\n"<pos:position pos:line="26" pos:column="73"/></literal>\
    <literal type="string" pos:line="27" pos:column="5">"fslfrejrckzzAeVLIL+aplfKkQABi6F1ITe1Yw1nPkZPcCBnzsXWWdsC4PDSy826\n"<pos:position pos:line="27" pos:column="73"/></literal>\
    <literal type="string" pos:line="28" pos:column="5">"YreQQejdIOQpvGQpQsgi3Hia/0PsmBsJUUtaWsJx8cTLc6nloQsCAwEAAaOCAc4w\n"<pos:position pos:line="28" pos:column="73"/></literal>\
    <literal type="string" pos:line="29" pos:column="5">"ggHKMB0GA1UdDgQWBBQWtTIb1Mfz4OaO873SsDrusjkY0TCBowYDVR0jBIGbMIGY\n"<pos:position pos:line="29" pos:column="73"/></literal>\
    <literal type="string" pos:line="30" pos:column="5">"gBQWtTIb1Mfz4OaO873SsDrusjkY0aF9pHsweTEQMA4GA1UEChMHUm9vdCBDQTEe\n"<pos:position pos:line="30" pos:column="73"/></literal>\
    <literal type="string" pos:line="31" pos:column="5">"MBwGA1UECxMVaHR0cDovL3d3dy5jYWNlcnQub3JnMSIwIAYDVQQDExlDQSBDZXJ0\n"<pos:position pos:line="31" pos:column="73"/></literal>\
    <literal type="string" pos:line="32" pos:column="5">"IFNpZ25pbmcgQXV0aG9yaXR5MSEwHwYJKoZIhvcNAQkBFhJzdXBwb3J0QGNhY2Vy\n"<pos:position pos:line="32" pos:column="73"/></literal>\
    <literal type="string" pos:line="33" pos:column="5">"dC5vcmeCAQAwDwYDVR0TAQH/BAUwAwEB/zAyBgNVHR8EKzApMCegJaAjhiFodHRw\n"<pos:position pos:line="33" pos:column="73"/></literal>\
    <literal type="string" pos:line="34" pos:column="5">"czovL3d3dy5jYWNlcnQub3JnL3Jldm9rZS5jcmwwMAYJYIZIAYb4QgEEBCMWIWh0\n"<pos:position pos:line="34" pos:column="73"/></literal>\
    <literal type="string" pos:line="35" pos:column="5">"dHBzOi8vd3d3LmNhY2VydC5vcmcvcmV2b2tlLmNybDA0BglghkgBhvhCAQgEJxYl\n"<pos:position pos:line="35" pos:column="73"/></literal>\
    <literal type="string" pos:line="36" pos:column="5">"aHR0cDovL3d3dy5jYWNlcnQub3JnL2luZGV4LnBocD9pZD0xMDBWBglghkgBhvhC\n"<pos:position pos:line="36" pos:column="73"/></literal>\
    <literal type="string" pos:line="37" pos:column="5">"AQ0ESRZHVG8gZ2V0IHlvdXIgb3duIGNlcnRpZmljYXRlIGZvciBGUkVFIGhlYWQg\n"<pos:position pos:line="37" pos:column="73"/></literal>\
    <literal type="string" pos:line="38" pos:column="5">"b3ZlciB0byBodHRwOi8vd3d3LmNhY2VydC5vcmcwDQYJKoZIhvcNAQEEBQADggIB\n"<pos:position pos:line="38" pos:column="73"/></literal>\
    <literal type="string" pos:line="39" pos:column="5">"ACjH7pyCArpcgBLKNQodgW+JapnM8mgPf6fhjViVPr3yBsOQWqy1YPaZQwGjiHCc\n"<pos:position pos:line="39" pos:column="73"/></literal>\
    <literal type="string" pos:line="40" pos:column="5">"nWKdpIevZ1gNMDY75q1I08t0AoZxPuIrA2jxNGJARjtT6ij0rPtmlVOKTV39O9lg\n"<pos:position pos:line="40" pos:column="73"/></literal>\
    <literal type="string" pos:line="41" pos:column="5">"18p5aTuxZZKmxoGCXJzN600BiqXfEVWqFcofN8CCmHBh22p8lqOOLlQ+TyGpkO/c\n"<pos:position pos:line="41" pos:column="73"/></literal>\
    <literal type="string" pos:line="42" pos:column="5">"gr/c6EWtTZBzCDyUZbAEmXZ/4rzCahWqlwQ3JNgelE5tDlG+1sSPypZt90Pf6DBl\n"<pos:position pos:line="42" pos:column="73"/></literal>\
    <literal type="string" pos:line="43" pos:column="5">"Jzt7u0NDY8RD97LsaMzhGY4i+5jhe1o+ATc7iwiwovOVThrLm82asduycPAtStvY\n"<pos:position pos:line="43" pos:column="73"/></literal>\
    <literal type="string" pos:line="44" pos:column="5">"sONvRUgzEv/+PDIqVPfE94rwiCPCR/5kenHA0R6mY7AHfqQv0wGP3J8rtsYIqQ+T\n"<pos:position pos:line="44" pos:column="73"/></literal>\
    <literal type="string" pos:line="45" pos:column="5">"SCX8Ev2fQtzzxD72V7DX3WnRBnc0CkvSyqD/HMaMyRa+xMwyN2hzXwj7UfdJUzYF\n"<pos:position pos:line="45" pos:column="73"/></literal>\
    <literal type="string" pos:line="46" pos:column="5">"CpUCTPJ5GhD22Dp1nPMd8aINcGeGG7MW9S/lpOt5hvk9C8JzC6WZrG/8Z7jlLwum\n"<pos:position pos:line="46" pos:column="73"/></literal>\
    <literal type="string" pos:line="47" pos:column="5">"GCSNe9FINSkYQKyTYOGWhlC0elnYjyELn8+CkcY7v2vcB5G5l1YjqrZslMZIBjzk\n"<pos:position pos:line="47" pos:column="73"/></literal>\
    <literal type="string" pos:line="48" pos:column="5">"zk6q5PYvCdxTby78dOs6Y5nCpqyJvKeyRKANihDjbPIky/qbn3BHLt4Ui9SyIAmW\n"<pos:position pos:line="48" pos:column="73"/></literal>\
    <literal type="string" pos:line="49" pos:column="5">"omTxJBzcoTWcFbLUvFUufQb1nA5V9FrWk9p2rSVzTMVD\n"<pos:position pos:line="49" pos:column="53"/></literal>\
    <literal type="string" pos:line="50" pos:column="5">"-----END CERTIFICATE-----\n"<pos:position pos:line="50" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="50" pos:column="35"/></decl_stmt>

<comment type="block" pos:line="52" pos:column="1">/*replace the XXX with the actual RSA key*/</comment>
  <decl_stmt><decl><type><specifier pos:line="53" pos:column="3">const<pos:position pos:line="53" pos:column="8"/></specifier> <name pos:line="53" pos:column="9">char<pos:position pos:line="53" pos:column="13"/></name> <modifier pos:line="53" pos:column="14">*<pos:position pos:line="53" pos:column="15"/></modifier></type><name pos:line="53" pos:column="15">mykey<pos:position pos:line="53" pos:column="20"/></name> <init pos:line="53" pos:column="21">=
    <expr><literal type="string" pos:line="54" pos:column="5">"-----BEGIN RSA PRIVATE KEY-----\n"<pos:position pos:line="54" pos:column="40"/></literal>\
    <literal type="string" pos:line="55" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="55" pos:column="73"/></literal>\
    <literal type="string" pos:line="56" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="56" pos:column="73"/></literal>\
    <literal type="string" pos:line="57" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="57" pos:column="73"/></literal>\
    <literal type="string" pos:line="58" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="58" pos:column="73"/></literal>\
    <literal type="string" pos:line="59" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="59" pos:column="73"/></literal>\
    <literal type="string" pos:line="60" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="60" pos:column="73"/></literal>\
    <literal type="string" pos:line="61" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="61" pos:column="73"/></literal>\
    <literal type="string" pos:line="62" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="62" pos:column="73"/></literal>\
    <literal type="string" pos:line="63" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="63" pos:column="73"/></literal>\
    <literal type="string" pos:line="64" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="64" pos:column="73"/></literal>\
    <literal type="string" pos:line="65" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="65" pos:column="73"/></literal>\
    <literal type="string" pos:line="66" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="66" pos:column="73"/></literal>\
    <literal type="string" pos:line="67" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="67" pos:column="73"/></literal>\
    <literal type="string" pos:line="68" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="68" pos:column="73"/></literal>\
    <literal type="string" pos:line="69" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="69" pos:column="73"/></literal>\
    <literal type="string" pos:line="70" pos:column="5">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"<pos:position pos:line="70" pos:column="73"/></literal>\
    <literal type="string" pos:line="71" pos:column="5">"-----END RSA PRIVATE KEY-----\n"<pos:position pos:line="71" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="71" pos:column="39"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="73" pos:column="3">(<pos:position pos:line="73" pos:column="4"/></operator><name pos:line="73" pos:column="4">void<pos:position pos:line="73" pos:column="8"/></name><operator pos:line="73" pos:column="8">)<pos:position pos:line="73" pos:column="9"/></operator><name pos:line="73" pos:column="9">curl<pos:position pos:line="73" pos:column="13"/></name></expr>;<pos:position pos:line="73" pos:column="14"/></expr_stmt> <comment type="block" pos:line="73" pos:column="15">/* avoid warnings */</comment>
  <expr_stmt><expr><operator pos:line="74" pos:column="3">(<pos:position pos:line="74" pos:column="4"/></operator><name pos:line="74" pos:column="4">void<pos:position pos:line="74" pos:column="8"/></name><operator pos:line="74" pos:column="8">)<pos:position pos:line="74" pos:column="9"/></operator><name pos:line="74" pos:column="9">parm<pos:position pos:line="74" pos:column="13"/></name></expr>;<pos:position pos:line="74" pos:column="14"/></expr_stmt> <comment type="block" pos:line="74" pos:column="15">/* avoid warnings */</comment>

  <comment type="block" pos:line="76" pos:column="3">/* get a BIO */</comment>
  <expr_stmt><expr><name pos:line="77" pos:column="3">bio<pos:position pos:line="77" pos:column="6"/></name> <operator pos:line="77" pos:column="7">=<pos:position pos:line="77" pos:column="8"/></operator> <call><name pos:line="77" pos:column="9">BIO_new_mem_buf<pos:position pos:line="77" pos:column="24"/></name><argument_list pos:line="77" pos:column="24">(<argument><expr><operator pos:line="77" pos:column="25">(<pos:position pos:line="77" pos:column="26"/></operator><name pos:line="77" pos:column="26">char<pos:position pos:line="77" pos:column="30"/></name> <operator pos:line="77" pos:column="31">*<pos:position pos:line="77" pos:column="32"/></operator><operator pos:line="77" pos:column="32">)<pos:position pos:line="77" pos:column="33"/></operator><name pos:line="77" pos:column="33">mypem<pos:position pos:line="77" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="40">-<pos:position pos:line="77" pos:column="41"/></operator><literal type="number" pos:line="77" pos:column="41">1<pos:position pos:line="77" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="44"/></expr_stmt>

  <if pos:line="79" pos:column="3">if<condition pos:line="79" pos:column="5">(<expr><name pos:line="79" pos:column="6">bio<pos:position pos:line="79" pos:column="9"/></name> <operator pos:line="79" pos:column="10">==<pos:position pos:line="79" pos:column="12"/></operator> <name pos:line="79" pos:column="13">NULL<pos:position pos:line="79" pos:column="17"/></name></expr>)<pos:position pos:line="79" pos:column="18"/></condition><then pos:line="79" pos:column="18"> <block pos:line="79" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">printf<pos:position pos:line="80" pos:column="11"/></name><argument_list pos:line="80" pos:column="11">(<argument><expr><literal type="string" pos:line="80" pos:column="12">"BIO_new_mem_buf failed\n"<pos:position pos:line="80" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="81" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="83" pos:column="3">/* use it to read the PEM formatted certificate from memory into an X509
   * structure that SSL can use
   */</comment>
  <expr_stmt><expr><name pos:line="86" pos:column="3">cert<pos:position pos:line="86" pos:column="7"/></name> <operator pos:line="86" pos:column="8">=<pos:position pos:line="86" pos:column="9"/></operator> <call><name pos:line="86" pos:column="10">PEM_read_bio_X509<pos:position pos:line="86" pos:column="27"/></name><argument_list pos:line="86" pos:column="27">(<argument><expr><name pos:line="86" pos:column="28">bio<pos:position pos:line="86" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="33">NULL<pos:position pos:line="86" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="39">0<pos:position pos:line="86" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="42">NULL<pos:position pos:line="86" pos:column="46"/></name></expr></argument>)<pos:position pos:line="86" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="48"/></expr_stmt>
  <if pos:line="87" pos:column="3">if<condition pos:line="87" pos:column="5">(<expr><name pos:line="87" pos:column="6">cert<pos:position pos:line="87" pos:column="10"/></name> <operator pos:line="87" pos:column="11">==<pos:position pos:line="87" pos:column="13"/></operator> <name pos:line="87" pos:column="14">NULL<pos:position pos:line="87" pos:column="18"/></name></expr>)<pos:position pos:line="87" pos:column="19"/></condition><then pos:line="87" pos:column="19"> <block pos:line="87" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">printf<pos:position pos:line="88" pos:column="11"/></name><argument_list pos:line="88" pos:column="11">(<argument><expr><literal type="string" pos:line="88" pos:column="12">"PEM_read_bio_X509 failed...\n"<pos:position pos:line="88" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="89" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="91" pos:column="3">/*tell SSL to use the X509 certificate*/</comment>
  <expr_stmt><expr><name pos:line="92" pos:column="3">ret<pos:position pos:line="92" pos:column="6"/></name> <operator pos:line="92" pos:column="7">=<pos:position pos:line="92" pos:column="8"/></operator> <call><name pos:line="92" pos:column="9">SSL_CTX_use_certificate<pos:position pos:line="92" pos:column="32"/></name><argument_list pos:line="92" pos:column="32">(<argument><expr><operator pos:line="92" pos:column="33">(<pos:position pos:line="92" pos:column="34"/></operator><name pos:line="92" pos:column="34">SSL_CTX<pos:position pos:line="92" pos:column="41"/></name><operator pos:line="92" pos:column="41">*<pos:position pos:line="92" pos:column="42"/></operator><operator pos:line="92" pos:column="42">)<pos:position pos:line="92" pos:column="43"/></operator><name pos:line="92" pos:column="43">sslctx<pos:position pos:line="92" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="51">cert<pos:position pos:line="92" pos:column="55"/></name></expr></argument>)<pos:position pos:line="92" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="57"/></expr_stmt>
  <if pos:line="93" pos:column="3">if<condition pos:line="93" pos:column="5">(<expr><name pos:line="93" pos:column="6">ret<pos:position pos:line="93" pos:column="9"/></name> <operator pos:line="93" pos:column="10">!=<pos:position pos:line="93" pos:column="12"/></operator> <literal type="number" pos:line="93" pos:column="13">1<pos:position pos:line="93" pos:column="14"/></literal></expr>)<pos:position pos:line="93" pos:column="15"/></condition><then pos:line="93" pos:column="15"> <block pos:line="93" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="94" pos:column="5">printf<pos:position pos:line="94" pos:column="11"/></name><argument_list pos:line="94" pos:column="11">(<argument><expr><literal type="string" pos:line="94" pos:column="12">"Use certificate failed\n"<pos:position pos:line="94" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="95" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="97" pos:column="3">/*create a bio for the RSA key*/</comment>
  <expr_stmt><expr><name pos:line="98" pos:column="3">kbio<pos:position pos:line="98" pos:column="7"/></name> <operator pos:line="98" pos:column="8">=<pos:position pos:line="98" pos:column="9"/></operator> <call><name pos:line="98" pos:column="10">BIO_new_mem_buf<pos:position pos:line="98" pos:column="25"/></name><argument_list pos:line="98" pos:column="25">(<argument><expr><operator pos:line="98" pos:column="26">(<pos:position pos:line="98" pos:column="27"/></operator><name pos:line="98" pos:column="27">char<pos:position pos:line="98" pos:column="31"/></name> <operator pos:line="98" pos:column="32">*<pos:position pos:line="98" pos:column="33"/></operator><operator pos:line="98" pos:column="33">)<pos:position pos:line="98" pos:column="34"/></operator><name pos:line="98" pos:column="34">mykey<pos:position pos:line="98" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="98" pos:column="41">-<pos:position pos:line="98" pos:column="42"/></operator><literal type="number" pos:line="98" pos:column="42">1<pos:position pos:line="98" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="45"/></expr_stmt>
  <if pos:line="99" pos:column="3">if<condition pos:line="99" pos:column="5">(<expr><name pos:line="99" pos:column="6">kbio<pos:position pos:line="99" pos:column="10"/></name> <operator pos:line="99" pos:column="11">==<pos:position pos:line="99" pos:column="13"/></operator> <name pos:line="99" pos:column="14">NULL<pos:position pos:line="99" pos:column="18"/></name></expr>)<pos:position pos:line="99" pos:column="19"/></condition><then pos:line="99" pos:column="19"> <block pos:line="99" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="100" pos:column="5">printf<pos:position pos:line="100" pos:column="11"/></name><argument_list pos:line="100" pos:column="11">(<argument><expr><literal type="string" pos:line="100" pos:column="12">"BIO_new_mem_buf failed\n"<pos:position pos:line="100" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="101" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="103" pos:column="3">/*read the key bio into an RSA object*/</comment>
  <expr_stmt><expr><name pos:line="104" pos:column="3">rsa<pos:position pos:line="104" pos:column="6"/></name> <operator pos:line="104" pos:column="7">=<pos:position pos:line="104" pos:column="8"/></operator> <call><name pos:line="104" pos:column="9">PEM_read_bio_RSAPrivateKey<pos:position pos:line="104" pos:column="35"/></name><argument_list pos:line="104" pos:column="35">(<argument><expr><name pos:line="104" pos:column="36">kbio<pos:position pos:line="104" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="42">NULL<pos:position pos:line="104" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="104" pos:column="48">0<pos:position pos:line="104" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="51">NULL<pos:position pos:line="104" pos:column="55"/></name></expr></argument>)<pos:position pos:line="104" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="57"/></expr_stmt>
  <if pos:line="105" pos:column="3">if<condition pos:line="105" pos:column="5">(<expr><name pos:line="105" pos:column="6">rsa<pos:position pos:line="105" pos:column="9"/></name> <operator pos:line="105" pos:column="10">==<pos:position pos:line="105" pos:column="12"/></operator> <name pos:line="105" pos:column="13">NULL<pos:position pos:line="105" pos:column="17"/></name></expr>)<pos:position pos:line="105" pos:column="18"/></condition><then pos:line="105" pos:column="18"> <block pos:line="105" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="106" pos:column="5">printf<pos:position pos:line="106" pos:column="11"/></name><argument_list pos:line="106" pos:column="11">(<argument><expr><literal type="string" pos:line="106" pos:column="12">"Failed to create key bio\n"<pos:position pos:line="106" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="42"/></expr_stmt>
  }<pos:position pos:line="107" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="109" pos:column="3">/*tell SSL to use the RSA key from memory*/</comment>
  <expr_stmt><expr><name pos:line="110" pos:column="3">ret<pos:position pos:line="110" pos:column="6"/></name> <operator pos:line="110" pos:column="7">=<pos:position pos:line="110" pos:column="8"/></operator> <call><name pos:line="110" pos:column="9">SSL_CTX_use_RSAPrivateKey<pos:position pos:line="110" pos:column="34"/></name><argument_list pos:line="110" pos:column="34">(<argument><expr><operator pos:line="110" pos:column="35">(<pos:position pos:line="110" pos:column="36"/></operator><name pos:line="110" pos:column="36">SSL_CTX<pos:position pos:line="110" pos:column="43"/></name><operator pos:line="110" pos:column="43">*<pos:position pos:line="110" pos:column="44"/></operator><operator pos:line="110" pos:column="44">)<pos:position pos:line="110" pos:column="45"/></operator><name pos:line="110" pos:column="45">sslctx<pos:position pos:line="110" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="53">rsa<pos:position pos:line="110" pos:column="56"/></name></expr></argument>)<pos:position pos:line="110" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="58"/></expr_stmt>
  <if pos:line="111" pos:column="3">if<condition pos:line="111" pos:column="5">(<expr><name pos:line="111" pos:column="6">ret<pos:position pos:line="111" pos:column="9"/></name> <operator pos:line="111" pos:column="10">!=<pos:position pos:line="111" pos:column="12"/></operator> <literal type="number" pos:line="111" pos:column="13">1<pos:position pos:line="111" pos:column="14"/></literal></expr>)<pos:position pos:line="111" pos:column="15"/></condition><then pos:line="111" pos:column="15"> <block pos:line="111" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">printf<pos:position pos:line="112" pos:column="11"/></name><argument_list pos:line="112" pos:column="11">(<argument><expr><literal type="string" pos:line="112" pos:column="12">"Use Key failed\n"<pos:position pos:line="112" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="113" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="115" pos:column="3">/* free resources that have been allocated by openssl functions */</comment>
  <if pos:line="116" pos:column="3">if<condition pos:line="116" pos:column="5">(<expr><name pos:line="116" pos:column="6">bio<pos:position pos:line="116" pos:column="9"/></name></expr>)<pos:position pos:line="116" pos:column="10"/></condition><then pos:line="116" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="117" pos:column="5">BIO_free<pos:position pos:line="117" pos:column="13"/></name><argument_list pos:line="117" pos:column="13">(<argument><expr><name pos:line="117" pos:column="14">bio<pos:position pos:line="117" pos:column="17"/></name></expr></argument>)<pos:position pos:line="117" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="19"/></expr_stmt></block></then></if>

  <if pos:line="119" pos:column="3">if<condition pos:line="119" pos:column="5">(<expr><name pos:line="119" pos:column="6">kbio<pos:position pos:line="119" pos:column="10"/></name></expr>)<pos:position pos:line="119" pos:column="11"/></condition><then pos:line="119" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="5">BIO_free<pos:position pos:line="120" pos:column="13"/></name><argument_list pos:line="120" pos:column="13">(<argument><expr><name pos:line="120" pos:column="14">kbio<pos:position pos:line="120" pos:column="18"/></name></expr></argument>)<pos:position pos:line="120" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="20"/></expr_stmt></block></then></if>

  <if pos:line="122" pos:column="3">if<condition pos:line="122" pos:column="5">(<expr><name pos:line="122" pos:column="6">rsa<pos:position pos:line="122" pos:column="9"/></name></expr>)<pos:position pos:line="122" pos:column="10"/></condition><then pos:line="122" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="123" pos:column="5">RSA_free<pos:position pos:line="123" pos:column="13"/></name><argument_list pos:line="123" pos:column="13">(<argument><expr><name pos:line="123" pos:column="14">rsa<pos:position pos:line="123" pos:column="17"/></name></expr></argument>)<pos:position pos:line="123" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="19"/></expr_stmt></block></then></if>

  <if pos:line="125" pos:column="3">if<condition pos:line="125" pos:column="5">(<expr><name pos:line="125" pos:column="6">cert<pos:position pos:line="125" pos:column="10"/></name></expr>)<pos:position pos:line="125" pos:column="11"/></condition><then pos:line="125" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="126" pos:column="5">X509_free<pos:position pos:line="126" pos:column="14"/></name><argument_list pos:line="126" pos:column="14">(<argument><expr><name pos:line="126" pos:column="15">cert<pos:position pos:line="126" pos:column="19"/></name></expr></argument>)<pos:position pos:line="126" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="21"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="128" pos:column="3">/* all set to go */</comment>
  <return pos:line="129" pos:column="3">return <expr><name pos:line="129" pos:column="10">CURLE_OK<pos:position pos:line="129" pos:column="18"/></name></expr>;<pos:position pos:line="129" pos:column="19"/></return>
}<pos:position pos:line="130" pos:column="2"/></block></function></unit>
