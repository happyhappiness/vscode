<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_569_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">curl_dofree<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">ptr<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">line<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">source<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">memdebug<pos:position pos:line="3" pos:column="18"/></name></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">mem<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">DEBUGASSERT<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><expr><name pos:line="5" pos:column="15">ptr<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">!=<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="22">NULL<pos:position pos:line="5" pos:column="26"/></name></expr></argument>)<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">mem<pos:position pos:line="7" pos:column="6"/></name> <operator pos:line="7" pos:column="7">=<pos:position pos:line="7" pos:column="8"/></operator> <operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator>struct <name pos:line="7" pos:column="17">memdebug<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></operator><operator pos:line="7" pos:column="27">)<pos:position pos:line="7" pos:column="28"/></operator><operator pos:line="7" pos:column="28">(<pos:position pos:line="7" pos:column="29"/></operator><operator pos:line="7" pos:column="29">(<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">char<pos:position pos:line="7" pos:column="34"/></name> <operator pos:line="7" pos:column="35">*<pos:position pos:line="7" pos:column="36"/></operator><operator pos:line="7" pos:column="36">)<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">ptr<pos:position pos:line="7" pos:column="40"/></name> <operator pos:line="7" pos:column="41">-<pos:position pos:line="7" pos:column="42"/></operator> <call><name pos:line="7" pos:column="43">offsetof<pos:position pos:line="7" pos:column="51"/></name><argument_list pos:line="7" pos:column="51">(<argument><expr pos:line="7" pos:column="52">struct <name pos:line="7" pos:column="59">memdebug<pos:position pos:line="7" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="69">mem<pos:position pos:line="7" pos:column="72"/></name></expr></argument>)<pos:position pos:line="7" pos:column="73"/></argument_list></call><operator pos:line="7" pos:column="73">)<pos:position pos:line="7" pos:column="74"/></operator></expr>;<pos:position pos:line="7" pos:column="75"/></expr_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* destroy  */</comment>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">memset<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><name><name pos:line="10" pos:column="10">mem<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">mem<pos:position pos:line="10" pos:column="18"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">0x13<pos:position pos:line="10" pos:column="24"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="26">mem<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">size<pos:position pos:line="10" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* free for real */</comment>
  <expr_stmt><expr><call pos:line="13" pos:column="3">(<name pos:line="13" pos:column="4">Curl_cfree<pos:position pos:line="13" pos:column="14"/></name>)<argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">mem<pos:position pos:line="13" pos:column="19"/></name></expr></argument>)<pos:position pos:line="13" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><name pos:line="15" pos:column="6">logfile<pos:position pos:line="15" pos:column="13"/></name></expr>)<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="5">fprintf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">logfile<pos:position pos:line="16" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="22">"MEM %s:%d free(%p)\n"<pos:position pos:line="16" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">source<pos:position pos:line="16" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="54">line<pos:position pos:line="16" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="60">ptr<pos:position pos:line="16" pos:column="63"/></name></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt></block></then></if>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
