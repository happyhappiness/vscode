<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1405_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">Curl_copy_header_value<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">header<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">start<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">end<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">value<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">len<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">DEBUGASSERT<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">header<pos:position pos:line="8" pos:column="21"/></name></expr></argument>)<pos:position pos:line="8" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* Find the end of the header name */</comment>
  <while pos:line="11" pos:column="3">while<condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">header<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&amp;&amp;<pos:position pos:line="11" pos:column="27"/></operator> <operator pos:line="11" pos:column="20">(<pos:position pos:line="11" pos:column="21"/></operator><operator pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">header<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">!=<pos:position pos:line="11" pos:column="31"/></operator> <literal type="char" pos:line="11" pos:column="32">':'<pos:position pos:line="11" pos:column="35"/></literal><operator pos:line="11" pos:column="35">)<pos:position pos:line="11" pos:column="36"/></operator></expr>)<pos:position pos:line="11" pos:column="37"/></condition>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="12" pos:column="5">++<pos:position pos:line="12" pos:column="7"/></operator><name pos:line="12" pos:column="7">header<pos:position pos:line="12" pos:column="13"/></name></expr>;<pos:position pos:line="12" pos:column="14"/></expr_stmt></block></while>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><operator pos:line="14" pos:column="6">*<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">header<pos:position pos:line="14" pos:column="13"/></name></expr>)<pos:position pos:line="14" pos:column="14"/></condition><then pos:line="14" pos:column="14">
    <comment type="block" pos:line="15" pos:column="5">/* Skip over colon */</comment>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="16" pos:column="5">++<pos:position pos:line="16" pos:column="7"/></operator><name pos:line="16" pos:column="7">header<pos:position pos:line="16" pos:column="13"/></name></expr>;<pos:position pos:line="16" pos:column="14"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="18" pos:column="3">/* Find the first non-space letter */</comment>
  <expr_stmt><expr><name pos:line="19" pos:column="3">start<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <name pos:line="19" pos:column="11">header<pos:position pos:line="19" pos:column="17"/></name></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
  <while pos:line="20" pos:column="3">while<condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">start<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">&amp;&amp;<pos:position pos:line="20" pos:column="26"/></operator> <call><name pos:line="20" pos:column="19">ISSPACE<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><operator pos:line="20" pos:column="27">*<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">start<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="35"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="5">start<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">++<pos:position pos:line="21" pos:column="12"/></operator></expr>;<pos:position pos:line="21" pos:column="13"/></expr_stmt></block></while>

  <comment type="block" pos:line="23" pos:column="3">/* data is in the host encoding so
     use '\r' and '\n' instead of 0x0d and 0x0a */</comment>
  <expr_stmt><expr><name pos:line="25" pos:column="3">end<pos:position pos:line="25" pos:column="6"/></name> <operator pos:line="25" pos:column="7">=<pos:position pos:line="25" pos:column="8"/></operator> <call><name pos:line="25" pos:column="9">strchr<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">start<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="23">'\r'<pos:position pos:line="25" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><operator pos:line="26" pos:column="6">!<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">end<pos:position pos:line="26" pos:column="10"/></name></expr>)<pos:position pos:line="26" pos:column="11"/></condition><then pos:line="26" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="5">end<pos:position pos:line="27" pos:column="8"/></name> <operator pos:line="27" pos:column="9">=<pos:position pos:line="27" pos:column="10"/></operator> <call><name pos:line="27" pos:column="11">strchr<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">start<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="25">'\n'<pos:position pos:line="27" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt></block></then></if>
  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">(<expr><operator pos:line="28" pos:column="6">!<pos:position pos:line="28" pos:column="7"/></operator><name pos:line="28" pos:column="7">end<pos:position pos:line="28" pos:column="10"/></name></expr>)<pos:position pos:line="28" pos:column="11"/></condition><then pos:line="28" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="5">end<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <call><name pos:line="29" pos:column="11">strchr<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><name pos:line="29" pos:column="18">start<pos:position pos:line="29" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="25">'\0'<pos:position pos:line="29" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt></block></then></if>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><operator pos:line="30" pos:column="6">!<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">end<pos:position pos:line="30" pos:column="10"/></name></expr>)<pos:position pos:line="30" pos:column="11"/></condition><then pos:line="30" pos:column="11">
    <block type="pseudo"><return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">NULL<pos:position pos:line="31" pos:column="16"/></name></expr>;<pos:position pos:line="31" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* skip all trailing space letters */</comment>
  <while pos:line="34" pos:column="3">while<condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">(<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">end<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">&gt;<pos:position pos:line="34" pos:column="18"/></operator> <name pos:line="34" pos:column="16">start<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">)<pos:position pos:line="34" pos:column="22"/></operator> <operator pos:line="34" pos:column="23">&amp;&amp;<pos:position pos:line="34" pos:column="33"/></operator> <call><name pos:line="34" pos:column="26">ISSPACE<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><operator pos:line="34" pos:column="34">*<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="35">end<pos:position pos:line="34" pos:column="38"/></name></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="40"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="5">end<pos:position pos:line="35" pos:column="8"/></name><operator pos:line="35" pos:column="8">--<pos:position pos:line="35" pos:column="10"/></operator></expr>;<pos:position pos:line="35" pos:column="11"/></expr_stmt></block></while>

  <comment type="block" pos:line="37" pos:column="3">/* get length of the type */</comment>
  <expr_stmt><expr><name pos:line="38" pos:column="3">len<pos:position pos:line="38" pos:column="6"/></name> <operator pos:line="38" pos:column="7">=<pos:position pos:line="38" pos:column="8"/></operator> <name pos:line="38" pos:column="9">end<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">-<pos:position pos:line="38" pos:column="14"/></operator> <name pos:line="38" pos:column="15">start<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">+<pos:position pos:line="38" pos:column="22"/></operator> <literal type="number" pos:line="38" pos:column="23">1<pos:position pos:line="38" pos:column="24"/></literal></expr>;<pos:position pos:line="38" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><name pos:line="40" pos:column="3">value<pos:position pos:line="40" pos:column="8"/></name> <operator pos:line="40" pos:column="9">=<pos:position pos:line="40" pos:column="10"/></operator> <call><name pos:line="40" pos:column="11">malloc<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><name pos:line="40" pos:column="18">len<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">+<pos:position pos:line="40" pos:column="23"/></operator> <literal type="number" pos:line="40" pos:column="24">1<pos:position pos:line="40" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>
  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">(<expr><operator pos:line="41" pos:column="6">!<pos:position pos:line="41" pos:column="7"/></operator><name pos:line="41" pos:column="7">value<pos:position pos:line="41" pos:column="12"/></name></expr>)<pos:position pos:line="41" pos:column="13"/></condition><then pos:line="41" pos:column="13">
    <block type="pseudo"><return pos:line="42" pos:column="5">return <expr><name pos:line="42" pos:column="12">NULL<pos:position pos:line="42" pos:column="16"/></name></expr>;<pos:position pos:line="42" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="44" pos:column="3">memcpy<pos:position pos:line="44" pos:column="9"/></name><argument_list pos:line="44" pos:column="9">(<argument><expr><name pos:line="44" pos:column="10">value<pos:position pos:line="44" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="17">start<pos:position pos:line="44" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="24">len<pos:position pos:line="44" pos:column="27"/></name></expr></argument>)<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="45" pos:column="3">value<pos:position pos:line="45" pos:column="8"/></name><index pos:line="45" pos:column="8">[<expr><name pos:line="45" pos:column="9">len<pos:position pos:line="45" pos:column="12"/></name></expr>]<pos:position pos:line="45" pos:column="13"/></index></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <literal type="number" pos:line="45" pos:column="16">0<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></expr_stmt> <comment type="block" pos:line="45" pos:column="19">/* zero terminate */</comment>

  <return pos:line="47" pos:column="3">return <expr><name pos:line="47" pos:column="10">value<pos:position pos:line="47" pos:column="15"/></name></expr>;<pos:position pos:line="47" pos:column="16"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
