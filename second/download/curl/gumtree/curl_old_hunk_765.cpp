"\n"
, stdout);
 fputs(
"              You may use this option as many times as the number of URLs  you\n"
"              have.\n"
"\n"
"       -p, --proxytunnel\n"
"              When an HTTP proxy is used (-x, --proxy), this option will cause\n"
"              non-HTTP protocols  to  attempt  to  tunnel  through  the  proxy\n"
"              instead  of merely using it to do HTTP-like operations. The tun-\n"
"              nel approach is made with the HTTP  proxy  CONNECT  request  and\n"
, stdout);
 fputs(
"              requires that the proxy allows direct connect to the remote port\n"
"              number curl wants to tunnel through to.\n"
"\n"
"       -P, --ftp-port <address>\n"
"              (FTP) Reverses the default initiator/listener  roles  when  con-\n"
"              necting  with  FTP.  This  switch makes curl use active mode. In\n"
"              practice, curl then tells the server  to  connect  back  to  the\n"
"              client's specified address and port, while passive mode asks the\n"
, stdout);
 fputs(
"              server to setup an IP address and port for  it  to  connect  to.\n"
"              <address> should be one of:\n"
"\n"
"              interface\n"
"                     i.e  \"eth0\"  to  specify which interface's IP address you\n"
"                     want to use (Unix only)\n"
"\n"
"              IP address\n"
"                     i.e \"192.168.10.1\" to specify the exact IP address\n"
"\n"
"              host name\n"
"                     i.e \"my.host.domain\" to specify the machine\n"
"\n"
, stdout);
 fputs(
"              -      make curl pick the same IP address that is  already  used\n"
"                     for the control connection\n"
"\n"
"       If  this  option is used several times, the last one will be used. Dis-\n"
"       able the use of PORT with --ftp-pasv. Disable the attempt  to  use  the\n"
"       EPRT  command  instead  of PORT by using --disable-eprt. EPRT is really\n"
"       PORT++.\n"
"\n"
"       Starting in 7.19.5, you can append \":[start]-[end]\" to the right of the\n"
, stdout);
 fputs(
"       address,  to tell curl what TCP port range to use. That means you spec-\n"
"       ify a port range, from a lower to a  higher  number.  A  single  number\n"
"       works  as well, but do note that it increases the risk of failure since\n"
"       the port may not be available.\n"
"\n"
"       --pass <phrase>\n"
"              (SSL/SSH) Passphrase for the private key\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --post301\n"
, stdout);
 fputs(
"              (HTTP) Tells curl to respect RFC  2616/10.3.2  and  not  convert\n"
"              POST  requests  into GET requests when following a 301 redirect-\n"
"              ion. The non-RFC behaviour is ubiquitous  in  web  browsers,  so\n"
"              curl  does  the  conversion  by default to maintain consistency.\n"
"              However, a server may require a POST to remain a POST after such\n"
"              a  redirection.  This  option  is meaningful only when using -L,\n"
, stdout);
 fputs(
"              --location (Added in 7.17.1)\n"
"\n"
"       --post302\n"
"              (HTTP) Tells curl to respect RFC  2616/10.3.2  and  not  convert\n"
"              POST  requests  into GET requests when following a 302 redirect-\n"
"              ion. The non-RFC behaviour is ubiquitous  in  web  browsers,  so\n"
"              curl  does  the  conversion  by default to maintain consistency.\n"
"              However, a server may require a POST to remain a POST after such\n"
, stdout);
 fputs(
"              a  redirection.  This  option  is meaningful only when using -L,\n"
"              --location (Added in 7.19.1)\n"
"\n"
"       --post303\n"
"              (HTTP) Tells curl to respect RFC  2616/10.3.2  and  not  convert\n"
"              POST  requests  into GET requests when following a 303 redirect-\n"
"              ion. The non-RFC behaviour is ubiquitous  in  web  browsers,  so\n"
"              curl  does  the  conversion  by default to maintain consistency.\n"
, stdout);
 fputs(
"              However, a server may require a POST to remain a POST after such\n"
"              a  redirection.  This  option  is meaningful only when using -L,\n"
"              --location (Added in 7.26.0)\n"
"\n"
"       --proto <protocols>\n"
"              Tells  curl  to  use  the  listed  protocols  for  its   initial\n"
"              retrieval. Protocols are evaluated left to right, are comma sep-\n"
"              arated, and are each a protocol name or 'all',  optionally  pre-\n"
, stdout);
 fputs(
"              fixed by zero or more modifiers. Available modifiers are:\n"
"\n"
"              +  Permit this protocol in addition to protocols already permit-\n"
"                 ted (this is the default if no modifier is used).\n"
"\n"
"              -  Deny this protocol, removing it from the  list  of  protocols\n"
"                 already permitted.\n"
"\n"
"              =  Permit  only this protocol (ignoring the list already permit-\n"
"                 ted), though subject  to  later  modification  by  subsequent\n"
, stdout);
 fputs(
"                 entries in the comma separated list.\n"
"\n"
"              For example:\n"
"\n"
"              --proto -ftps  uses the default protocols, but disables ftps\n"
"\n"
"              --proto -all,https,+http\n"
"                             only enables http and https\n"
"\n"
"              --proto =http,https\n"
"                             also only enables http and https\n"
"\n"
"              Unknown  protocols  produce  a  warning.  This allows scripts to\n"
, stdout);
 fputs(
"              safely rely on being able to disable potentially dangerous  pro-\n"
"              tocols,  without  relying  upon  support for that protocol being\n"
"              built into curl to avoid an error.\n"
"\n"
"              This option can be used multiple times, in which case the effect\n"
"              is  the same as concatenating the protocols into one instance of\n"
"              the option.\n"
"\n"
"              (Added in 7.20.2)\n"
"\n"
"       --proto-redir <protocols>\n"
, stdout);
 fputs(
"              Tells curl to use the listed protocols  after  a  redirect.  See\n"
"              --proto for how protocols are represented.\n"
"\n"
"              (Added in 7.20.2)\n"
"\n"
"       --proxy-anyauth\n"
"              Tells  curl to pick a suitable authentication method when commu-\n"
"              nicating with  the  given  proxy.  This  might  cause  an  extra\n"
"              request/response round-trip. (Added in 7.13.2)\n"
"\n"
"       --proxy-basic\n"
, stdout);
 fputs(
"              Tells  curl  to use HTTP Basic authentication when communicating\n"
"              with the given proxy. Use --basic for enabling HTTP Basic with a\n"
"              remote  host.  Basic  is  the default authentication method curl\n"
"              uses with proxies.\n"
"\n"
"       --proxy-digest\n"
"              Tells curl to use HTTP Digest authentication when  communicating\n"
"              with the given proxy. Use --digest for enabling HTTP Digest with\n"
"              a remote host.\n"
"\n"
, stdout);
 fputs(
"       --proxy-negotiate\n"
"              Tells curl to use HTTP Negotiate authentication when communicat-\n"
"              ing  with  the  given  proxy.  Use --negotiate for enabling HTTP\n"
"              Negotiate with a remote host. (Added in 7.17.1)\n"
"\n"
"       --proxy-ntlm\n"
"              Tells curl to use HTTP NTLM  authentication  when  communicating\n"
