<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2166_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_pp_vsendf<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">pingpong<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">pp<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>,
                        <parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">fmt<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="3" pos:column="25">va_list<pos:position pos:line="3" pos:column="32"/></name></type> <name pos:line="3" pos:column="33">args<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="38"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ssize_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">bytes_written<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">write_len<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">fmt_crlf<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">s<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">CURLcode<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">result<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">connectdata<pos:position pos:line="10" pos:column="21"/></name></name> <modifier pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></modifier></type><name pos:line="10" pos:column="23">conn<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><name><name pos:line="10" pos:column="30">pp<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">conn<pos:position pos:line="10" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">Curl_easy<pos:position pos:line="11" pos:column="19"/></name></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">data<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><name><name pos:line="11" pos:column="28">conn<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">-&gt;<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="34">data<pos:position pos:line="11" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="39"/></decl_stmt>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">HAVE_GSSAPI<pos:position pos:line="13" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">enum<pos:position pos:line="14" pos:column="7"/></name> <name pos:line="14" pos:column="8">protection_level<pos:position pos:line="14" pos:column="24"/></name></name></type> <name pos:line="14" pos:column="25">data_sec<pos:position pos:line="14" pos:column="33"/></name> <init pos:line="14" pos:column="34">= <expr><name><name pos:line="14" pos:column="36">conn<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">-&gt;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="42">data_prot<pos:position pos:line="14" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="52"/></decl_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">DEBUGASSERT<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name><name pos:line="17" pos:column="15">pp<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">-&gt;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="19">sendleft<pos:position pos:line="17" pos:column="27"/></name></name> <operator pos:line="17" pos:column="28">==<pos:position pos:line="17" pos:column="30"/></operator> <literal type="number" pos:line="17" pos:column="31">0<pos:position pos:line="17" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">DEBUGASSERT<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name><name pos:line="18" pos:column="15">pp<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">sendsize<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">==<pos:position pos:line="18" pos:column="30"/></operator> <literal type="number" pos:line="18" pos:column="31">0<pos:position pos:line="18" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">DEBUGASSERT<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name><name pos:line="19" pos:column="15">pp<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">-&gt;<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="19">sendthis<pos:position pos:line="19" pos:column="27"/></name></name> <operator pos:line="19" pos:column="28">==<pos:position pos:line="19" pos:column="30"/></operator> <name pos:line="19" pos:column="31">NULL<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="21" pos:column="3">fmt_crlf<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <call><name pos:line="21" pos:column="14">aprintf<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><literal type="string" pos:line="21" pos:column="22">"%s\r\n"<pos:position pos:line="21" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="32">fmt<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt> <comment type="block" pos:line="21" pos:column="38">/* append a trailing CRLF */</comment>
  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><operator pos:line="22" pos:column="6">!<pos:position pos:line="22" pos:column="7"/></operator><name pos:line="22" pos:column="7">fmt_crlf<pos:position pos:line="22" pos:column="15"/></name></expr>)<pos:position pos:line="22" pos:column="16"/></condition><then pos:line="22" pos:column="16">
    <block type="pseudo"><return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="23" pos:column="31"/></name></expr>;<pos:position pos:line="23" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="25" pos:column="3">s<pos:position pos:line="25" pos:column="4"/></name> <operator pos:line="25" pos:column="5">=<pos:position pos:line="25" pos:column="6"/></operator> <call><name pos:line="25" pos:column="7">vaprintf<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">fmt_crlf<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="26">args<pos:position pos:line="25" pos:column="30"/></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt> <comment type="block" pos:line="25" pos:column="33">/* trailing CRLF appended */</comment>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">free<pos:position pos:line="26" pos:column="7"/></name><argument_list pos:line="26" pos:column="7">(<argument><expr><name pos:line="26" pos:column="8">fmt_crlf<pos:position pos:line="26" pos:column="16"/></name></expr></argument>)<pos:position pos:line="26" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="18"/></expr_stmt>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><operator pos:line="27" pos:column="6">!<pos:position pos:line="27" pos:column="7"/></operator><name pos:line="27" pos:column="7">s<pos:position pos:line="27" pos:column="8"/></name></expr>)<pos:position pos:line="27" pos:column="9"/></condition><then pos:line="27" pos:column="9">
    <block type="pseudo"><return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="28" pos:column="31"/></name></expr>;<pos:position pos:line="28" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="30" pos:column="3">bytes_written<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <literal type="number" pos:line="30" pos:column="19">0<pos:position pos:line="30" pos:column="20"/></literal></expr>;<pos:position pos:line="30" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="31" pos:column="3">write_len<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <call><name pos:line="31" pos:column="15">strlen<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">s<pos:position pos:line="31" pos:column="23"/></name></expr></argument>)<pos:position pos:line="31" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">Curl_pp_init<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">pp<pos:position pos:line="33" pos:column="18"/></name></expr></argument>)<pos:position pos:line="33" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="35" pos:column="3">result<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">Curl_convert_to_network<pos:position pos:line="35" pos:column="35"/></name><argument_list pos:line="35" pos:column="35">(<argument><expr><name pos:line="35" pos:column="36">data<pos:position pos:line="35" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="42">s<pos:position pos:line="35" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="45">write_len<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
  <comment type="block" pos:line="36" pos:column="3">/* Curl_convert_to_network calls failf if unsuccessful */</comment>
  <if pos:line="37" pos:column="3">if<condition pos:line="37" pos:column="5">(<expr><name pos:line="37" pos:column="6">result<pos:position pos:line="37" pos:column="12"/></name></expr>)<pos:position pos:line="37" pos:column="13"/></condition><then pos:line="37" pos:column="13"> <block pos:line="37" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">free<pos:position pos:line="38" pos:column="9"/></name><argument_list pos:line="38" pos:column="9">(<argument><expr><name pos:line="38" pos:column="10">s<pos:position pos:line="38" pos:column="11"/></name></expr></argument>)<pos:position pos:line="38" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="13"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">result<pos:position pos:line="39" pos:column="18"/></name></expr>;<pos:position pos:line="39" pos:column="19"/></return>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">HAVE_GSSAPI<pos:position pos:line="42" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="43" pos:column="3">conn<pos:position pos:line="43" pos:column="7"/></name><operator pos:line="43" pos:column="7">-&gt;<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="9">data_prot<pos:position pos:line="43" pos:column="18"/></name></name> <operator pos:line="43" pos:column="19">=<pos:position pos:line="43" pos:column="20"/></operator> <name pos:line="43" pos:column="21">PROT_CMD<pos:position pos:line="43" pos:column="29"/></name></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name pos:line="45" pos:column="3">result<pos:position pos:line="45" pos:column="9"/></name> <operator pos:line="45" pos:column="10">=<pos:position pos:line="45" pos:column="11"/></operator> <call><name pos:line="45" pos:column="12">Curl_write<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name pos:line="45" pos:column="23">conn<pos:position pos:line="45" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="29">conn<pos:position pos:line="45" pos:column="33"/></name><operator pos:line="45" pos:column="33">-&gt;<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="35">sock<pos:position pos:line="45" pos:column="39"/></name><index pos:line="45" pos:column="39">[<expr><name pos:line="45" pos:column="40">FIRSTSOCKET<pos:position pos:line="45" pos:column="51"/></name></expr>]<pos:position pos:line="45" pos:column="52"/></index></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="54">s<pos:position pos:line="45" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="57">write_len<pos:position pos:line="45" pos:column="66"/></name></expr></argument>,
                     <argument><expr><operator pos:line="46" pos:column="22">&amp;<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="23">bytes_written<pos:position pos:line="46" pos:column="36"/></name></expr></argument>)<pos:position pos:line="46" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>
<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">HAVE_GSSAPI<pos:position pos:line="47" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">DEBUGASSERT<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><name pos:line="48" pos:column="15">data_sec<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">&gt;<pos:position pos:line="48" pos:column="28"/></operator> <name pos:line="48" pos:column="26">PROT_NONE<pos:position pos:line="48" pos:column="35"/></name> <operator pos:line="48" pos:column="36">&amp;&amp;<pos:position pos:line="48" pos:column="46"/></operator> <name pos:line="48" pos:column="39">data_sec<pos:position pos:line="48" pos:column="47"/></name> <operator pos:line="48" pos:column="48">&lt;<pos:position pos:line="48" pos:column="52"/></operator> <name pos:line="48" pos:column="50">PROT_LAST<pos:position pos:line="48" pos:column="59"/></name></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">conn<pos:position pos:line="49" pos:column="7"/></name><operator pos:line="49" pos:column="7">-&gt;<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="9">data_prot<pos:position pos:line="49" pos:column="18"/></name></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <name pos:line="49" pos:column="21">data_sec<pos:position pos:line="49" pos:column="29"/></name></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">(<expr><name pos:line="52" pos:column="6">result<pos:position pos:line="52" pos:column="12"/></name></expr>)<pos:position pos:line="52" pos:column="13"/></condition><then pos:line="52" pos:column="13"> <block pos:line="52" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">free<pos:position pos:line="53" pos:column="9"/></name><argument_list pos:line="53" pos:column="9">(<argument><expr><name pos:line="53" pos:column="10">s<pos:position pos:line="53" pos:column="11"/></name></expr></argument>)<pos:position pos:line="53" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="13"/></expr_stmt>
    <return pos:line="54" pos:column="5">return <expr><name pos:line="54" pos:column="12">result<pos:position pos:line="54" pos:column="18"/></name></expr>;<pos:position pos:line="54" pos:column="19"/></return>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

  <if pos:line="57" pos:column="3">if<condition pos:line="57" pos:column="5">(<expr><name><name pos:line="57" pos:column="6">conn<pos:position pos:line="57" pos:column="10"/></name><operator pos:line="57" pos:column="10">-&gt;<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="12">data<pos:position pos:line="57" pos:column="16"/></name><operator pos:line="57" pos:column="16">-&gt;<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="18">set<pos:position pos:line="57" pos:column="21"/></name><operator pos:line="57" pos:column="21">.<pos:position pos:line="57" pos:column="22"/></operator><name pos:line="57" pos:column="22">verbose<pos:position pos:line="57" pos:column="29"/></name></name></expr>)<pos:position pos:line="57" pos:column="30"/></condition><then pos:line="57" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="5">Curl_debug<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><name><name pos:line="58" pos:column="16">conn<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">-&gt;<pos:position pos:line="58" pos:column="25"/></operator><name pos:line="58" pos:column="22">data<pos:position pos:line="58" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="28">CURLINFO_HEADER_OUT<pos:position pos:line="58" pos:column="47"/></name></expr></argument>,
               <argument><expr><name pos:line="59" pos:column="16">s<pos:position pos:line="59" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="19">(<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="20">size_t<pos:position pos:line="59" pos:column="26"/></name><operator pos:line="59" pos:column="26">)<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="27">bytes_written<pos:position pos:line="59" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="42">conn<pos:position pos:line="59" pos:column="46"/></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt></block></then></if>

  <if pos:line="61" pos:column="3">if<condition pos:line="61" pos:column="5">(<expr><name pos:line="61" pos:column="6">bytes_written<pos:position pos:line="61" pos:column="19"/></name> <operator pos:line="61" pos:column="20">!=<pos:position pos:line="61" pos:column="22"/></operator> <operator pos:line="61" pos:column="23">(<pos:position pos:line="61" pos:column="24"/></operator><name pos:line="61" pos:column="24">ssize_t<pos:position pos:line="61" pos:column="31"/></name><operator pos:line="61" pos:column="31">)<pos:position pos:line="61" pos:column="32"/></operator><name pos:line="61" pos:column="32">write_len<pos:position pos:line="61" pos:column="41"/></name></expr>)<pos:position pos:line="61" pos:column="42"/></condition><then pos:line="61" pos:column="42"> <block pos:line="61" pos:column="43">{
    <comment type="block" pos:line="62" pos:column="5">/* the whole chunk was not sent, keep it around and adjust sizes */</comment>
    <expr_stmt><expr><name><name pos:line="63" pos:column="5">pp<pos:position pos:line="63" pos:column="7"/></name><operator pos:line="63" pos:column="7">-&gt;<pos:position pos:line="63" pos:column="12"/></operator><name pos:line="63" pos:column="9">sendthis<pos:position pos:line="63" pos:column="17"/></name></name> <operator pos:line="63" pos:column="18">=<pos:position pos:line="63" pos:column="19"/></operator> <name pos:line="63" pos:column="20">s<pos:position pos:line="63" pos:column="21"/></name></expr>;<pos:position pos:line="63" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">pp<pos:position pos:line="64" pos:column="7"/></name><operator pos:line="64" pos:column="7">-&gt;<pos:position pos:line="64" pos:column="12"/></operator><name pos:line="64" pos:column="9">sendsize<pos:position pos:line="64" pos:column="17"/></name></name> <operator pos:line="64" pos:column="18">=<pos:position pos:line="64" pos:column="19"/></operator> <name pos:line="64" pos:column="20">write_len<pos:position pos:line="64" pos:column="29"/></name></expr>;<pos:position pos:line="64" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="65" pos:column="5">pp<pos:position pos:line="65" pos:column="7"/></name><operator pos:line="65" pos:column="7">-&gt;<pos:position pos:line="65" pos:column="12"/></operator><name pos:line="65" pos:column="9">sendleft<pos:position pos:line="65" pos:column="17"/></name></name> <operator pos:line="65" pos:column="18">=<pos:position pos:line="65" pos:column="19"/></operator> <name pos:line="65" pos:column="20">write_len<pos:position pos:line="65" pos:column="29"/></name> <operator pos:line="65" pos:column="30">-<pos:position pos:line="65" pos:column="31"/></operator> <name pos:line="65" pos:column="32">bytes_written<pos:position pos:line="65" pos:column="45"/></name></expr>;<pos:position pos:line="65" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="66" pos:column="4"/></block></then>
  <else pos:line="67" pos:column="3">else <block pos:line="67" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">free<pos:position pos:line="68" pos:column="9"/></name><argument_list pos:line="68" pos:column="9">(<argument><expr><name pos:line="68" pos:column="10">s<pos:position pos:line="68" pos:column="11"/></name></expr></argument>)<pos:position pos:line="68" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="69" pos:column="5">pp<pos:position pos:line="69" pos:column="7"/></name><operator pos:line="69" pos:column="7">-&gt;<pos:position pos:line="69" pos:column="12"/></operator><name pos:line="69" pos:column="9">sendthis<pos:position pos:line="69" pos:column="17"/></name></name> <operator pos:line="69" pos:column="18">=<pos:position pos:line="69" pos:column="19"/></operator> <name pos:line="69" pos:column="20">NULL<pos:position pos:line="69" pos:column="24"/></name></expr>;<pos:position pos:line="69" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">pp<pos:position pos:line="70" pos:column="7"/></name><operator pos:line="70" pos:column="7">-&gt;<pos:position pos:line="70" pos:column="12"/></operator><name pos:line="70" pos:column="9">sendleft<pos:position pos:line="70" pos:column="17"/></name></name> <operator pos:line="70" pos:column="18">=<pos:position pos:line="70" pos:column="19"/></operator> <name><name pos:line="70" pos:column="20">pp<pos:position pos:line="70" pos:column="22"/></name><operator pos:line="70" pos:column="22">-&gt;<pos:position pos:line="70" pos:column="27"/></operator><name pos:line="70" pos:column="24">sendsize<pos:position pos:line="70" pos:column="32"/></name></name> <operator pos:line="70" pos:column="33">=<pos:position pos:line="70" pos:column="34"/></operator> <literal type="number" pos:line="70" pos:column="35">0<pos:position pos:line="70" pos:column="36"/></literal></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">pp<pos:position pos:line="71" pos:column="7"/></name><operator pos:line="71" pos:column="7">-&gt;<pos:position pos:line="71" pos:column="12"/></operator><name pos:line="71" pos:column="9">response<pos:position pos:line="71" pos:column="17"/></name></name> <operator pos:line="71" pos:column="18">=<pos:position pos:line="71" pos:column="19"/></operator> <call><name pos:line="71" pos:column="20">Curl_tvnow<pos:position pos:line="71" pos:column="30"/></name><argument_list pos:line="71" pos:column="30">()<pos:position pos:line="71" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="72" pos:column="4"/></block></else></if>

  <return pos:line="74" pos:column="3">return <expr><name pos:line="74" pos:column="10">CURLE_OK<pos:position pos:line="74" pos:column="18"/></name></expr>;<pos:position pos:line="74" pos:column="19"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
